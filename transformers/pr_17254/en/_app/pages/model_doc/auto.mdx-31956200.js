import{S as w8t,i as A8t,s as y8t,e as a,k as l,w as F,t as o,M as L8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as x8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as TGr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function $8t(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,c6,_f,je,We,hi,yn,f6,Ln,xn,m6,pi,$n,g6,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),c6=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),f6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),m6=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),g6=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var S$=s(p);m=r(S$,"NewModelConfig"),S$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var R$=s(fi);pf=r(R$,"model_type"),R$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var P$=s(mi);gi=r(P$,'"new-model"'),P$.forEach(t),c6=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),f6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var B$=s(Ln);xn=r(B$,"PreTrainedModel"),B$.forEach(t),m6=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),g6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var I$=s(_i);uf=r(I$,"NewModelConfig"),I$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,c6),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,f6),e(je,Ln),e(Ln,xn),e(je,m6),e(je,pi),e(pi,$n),e(je,g6),e(je,_i),e(_i,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function k8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function P8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function I8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,c6,_f,je,We,hi,yn,f6,Ln,xn,m6,pi,$n,g6,_i,uf,Ca,Qe,Ae,S$,ui,R$,P$,Eo,wa,B$,bf,I$,fGe,eqe,bi,vf,Pee,h6,mGe,Bee,gGe,oqe,kn,hGe,Iee,pGe,_Ge,qee,uGe,bGe,rqe,p6,tqe,q$,vGe,aqe,Ff,nqe,vi,Tf,Nee,_6,FGe,jee,TGe,sqe,Co,u6,MGe,b6,EGe,N$,CGe,wGe,AGe,v6,yGe,Dee,LGe,xGe,$Ge,Er,F6,kGe,Gee,SGe,RGe,Fi,PGe,Oee,BGe,IGe,Vee,qGe,NGe,jGe,A,Mf,Xee,DGe,GGe,j$,OGe,VGe,XGe,Ef,zee,zGe,WGe,D$,QGe,HGe,UGe,Cf,Wee,JGe,YGe,G$,KGe,ZGe,eOe,wf,Qee,oOe,rOe,O$,tOe,aOe,nOe,Af,Hee,sOe,lOe,V$,iOe,dOe,cOe,yf,Uee,fOe,mOe,X$,gOe,hOe,pOe,Lf,Jee,_Oe,uOe,z$,bOe,vOe,FOe,xf,Yee,TOe,MOe,W$,EOe,COe,wOe,$f,Kee,AOe,yOe,Q$,LOe,xOe,$Oe,kf,Zee,kOe,SOe,H$,ROe,POe,BOe,Sf,eoe,IOe,qOe,U$,NOe,jOe,DOe,Rf,ooe,GOe,OOe,J$,VOe,XOe,zOe,Pf,roe,WOe,QOe,Y$,HOe,UOe,JOe,Bf,toe,YOe,KOe,K$,ZOe,eVe,oVe,If,aoe,rVe,tVe,Z$,aVe,nVe,sVe,qf,noe,lVe,iVe,ek,dVe,cVe,fVe,Nf,soe,mVe,gVe,ok,hVe,pVe,_Ve,jf,loe,uVe,bVe,rk,vVe,FVe,TVe,Df,ioe,MVe,EVe,tk,CVe,wVe,AVe,Gf,doe,yVe,LVe,ak,xVe,$Ve,kVe,Of,coe,SVe,RVe,nk,PVe,BVe,IVe,Vf,foe,qVe,NVe,sk,jVe,DVe,GVe,Xf,moe,OVe,VVe,lk,XVe,zVe,WVe,zf,goe,QVe,HVe,ik,UVe,JVe,YVe,Wf,hoe,KVe,ZVe,dk,eXe,oXe,rXe,Qf,poe,tXe,aXe,ck,nXe,sXe,lXe,Hf,_oe,iXe,dXe,fk,cXe,fXe,mXe,Uf,uoe,gXe,hXe,mk,pXe,_Xe,uXe,Jf,boe,bXe,vXe,gk,FXe,TXe,MXe,Yf,voe,EXe,CXe,hk,wXe,AXe,yXe,Kf,Foe,LXe,xXe,pk,$Xe,kXe,SXe,Zf,Toe,RXe,PXe,_k,BXe,IXe,qXe,em,Moe,NXe,jXe,uk,DXe,GXe,OXe,om,Eoe,VXe,XXe,bk,zXe,WXe,QXe,rm,Coe,HXe,UXe,vk,JXe,YXe,KXe,tm,woe,ZXe,eze,Fk,oze,rze,tze,am,Aoe,aze,nze,Tk,sze,lze,ize,nm,yoe,dze,cze,Mk,fze,mze,gze,sm,Loe,hze,pze,Ek,_ze,uze,bze,lm,xoe,vze,Fze,Ck,Tze,Mze,Eze,im,$oe,Cze,wze,wk,Aze,yze,Lze,dm,koe,xze,$ze,Ak,kze,Sze,Rze,cm,Soe,Pze,Bze,yk,Ize,qze,Nze,fm,Roe,jze,Dze,Lk,Gze,Oze,Vze,mm,Poe,Xze,zze,xk,Wze,Qze,Hze,gm,Boe,Uze,Jze,$k,Yze,Kze,Zze,hm,Ioe,eWe,oWe,kk,rWe,tWe,aWe,pm,qoe,nWe,sWe,Sk,lWe,iWe,dWe,_m,Noe,cWe,fWe,Rk,mWe,gWe,hWe,um,joe,pWe,_We,Pk,uWe,bWe,vWe,bm,Doe,FWe,TWe,Bk,MWe,EWe,CWe,vm,Goe,wWe,AWe,Ik,yWe,LWe,xWe,Fm,Ooe,$We,kWe,qk,SWe,RWe,PWe,Tm,Voe,BWe,IWe,Nk,qWe,NWe,jWe,Mm,Xoe,DWe,GWe,jk,OWe,VWe,XWe,Em,zoe,zWe,WWe,Dk,QWe,HWe,UWe,Cm,Woe,JWe,YWe,Gk,KWe,ZWe,eQe,wm,Qoe,oQe,rQe,Ok,tQe,aQe,nQe,Am,Hoe,sQe,lQe,Vk,iQe,dQe,cQe,ym,Uoe,fQe,mQe,Xk,gQe,hQe,pQe,Lm,Joe,_Qe,uQe,zk,bQe,vQe,FQe,xm,Yoe,TQe,MQe,Wk,EQe,CQe,wQe,$m,Koe,AQe,yQe,Qk,LQe,xQe,$Qe,km,Zoe,kQe,SQe,Hk,RQe,PQe,BQe,Sm,ere,IQe,qQe,Uk,NQe,jQe,DQe,Rm,ore,GQe,OQe,Jk,VQe,XQe,zQe,Pm,rre,WQe,QQe,Yk,HQe,UQe,JQe,Bm,tre,YQe,KQe,Kk,ZQe,eHe,oHe,Im,are,rHe,tHe,Zk,aHe,nHe,sHe,qm,nre,lHe,iHe,eS,dHe,cHe,fHe,Nm,sre,mHe,gHe,oS,hHe,pHe,_He,jm,lre,uHe,bHe,rS,vHe,FHe,THe,Dm,ire,MHe,EHe,tS,CHe,wHe,AHe,Gm,dre,yHe,LHe,aS,xHe,$He,kHe,Om,cre,SHe,RHe,nS,PHe,BHe,IHe,Vm,fre,qHe,NHe,sS,jHe,DHe,GHe,Xm,mre,OHe,VHe,lS,XHe,zHe,WHe,zm,gre,QHe,HHe,iS,UHe,JHe,YHe,Wm,hre,KHe,ZHe,dS,eUe,oUe,rUe,Qm,pre,tUe,aUe,cS,nUe,sUe,lUe,Hm,_re,iUe,dUe,fS,cUe,fUe,mUe,Um,ure,gUe,hUe,mS,pUe,_Ue,uUe,Jm,bre,bUe,vUe,gS,FUe,TUe,MUe,Ym,vre,EUe,CUe,hS,wUe,AUe,yUe,Km,Fre,LUe,xUe,pS,$Ue,kUe,SUe,Zm,Tre,RUe,PUe,_S,BUe,IUe,qUe,eg,Mre,NUe,jUe,uS,DUe,GUe,OUe,og,Ere,VUe,XUe,bS,zUe,WUe,QUe,rg,Cre,HUe,UUe,vS,JUe,YUe,KUe,tg,wre,ZUe,eJe,FS,oJe,rJe,tJe,ag,Are,aJe,nJe,TS,sJe,lJe,iJe,ng,yre,dJe,cJe,MS,fJe,mJe,gJe,sg,Lre,hJe,pJe,ES,_Je,uJe,bJe,lg,xre,vJe,FJe,CS,TJe,MJe,EJe,ig,$re,CJe,wJe,wS,AJe,yJe,LJe,dg,kre,xJe,$Je,AS,kJe,SJe,RJe,cg,Sre,PJe,BJe,yS,IJe,qJe,NJe,fg,Rre,jJe,DJe,LS,GJe,OJe,VJe,mg,Pre,XJe,zJe,xS,WJe,QJe,HJe,gg,Bre,UJe,JJe,$S,YJe,KJe,ZJe,hg,Ire,eYe,oYe,kS,rYe,tYe,aYe,pg,qre,nYe,sYe,SS,lYe,iYe,dYe,_g,Nre,cYe,fYe,RS,mYe,gYe,hYe,ug,jre,pYe,_Ye,PS,uYe,bYe,vYe,bg,Dre,FYe,TYe,BS,MYe,EYe,CYe,vg,Gre,wYe,AYe,IS,yYe,LYe,xYe,Fg,Ore,$Ye,kYe,qS,SYe,RYe,PYe,Tg,BYe,Mg,T6,IYe,Vre,qYe,lqe,Ti,Eg,Xre,M6,NYe,zre,jYe,iqe,wo,E6,DYe,C6,GYe,NS,OYe,VYe,XYe,w6,zYe,Wre,WYe,QYe,HYe,Cr,A6,UYe,Qre,JYe,YYe,Aa,KYe,Hre,ZYe,eKe,Ure,oKe,rKe,Jre,tKe,aKe,nKe,k,Sn,Yre,sKe,lKe,jS,iKe,dKe,DS,cKe,fKe,mKe,Rn,Kre,gKe,hKe,GS,pKe,_Ke,OS,uKe,bKe,vKe,Pn,Zre,FKe,TKe,VS,MKe,EKe,XS,CKe,wKe,AKe,Bn,ete,yKe,LKe,zS,xKe,$Ke,WS,kKe,SKe,RKe,In,ote,PKe,BKe,QS,IKe,qKe,HS,NKe,jKe,DKe,Cg,rte,GKe,OKe,US,VKe,XKe,zKe,wg,tte,WKe,QKe,JS,HKe,UKe,JKe,Ag,ate,YKe,KKe,YS,ZKe,eZe,oZe,qn,nte,rZe,tZe,KS,aZe,nZe,ZS,sZe,lZe,iZe,Nn,ste,dZe,cZe,eR,fZe,mZe,oR,gZe,hZe,pZe,jn,lte,_Ze,uZe,rR,bZe,vZe,tR,FZe,TZe,MZe,yg,ite,EZe,CZe,aR,wZe,AZe,yZe,Lg,dte,LZe,xZe,nR,$Ze,kZe,SZe,Dn,cte,RZe,PZe,sR,BZe,IZe,lR,qZe,NZe,jZe,xg,fte,DZe,GZe,iR,OZe,VZe,XZe,Gn,mte,zZe,WZe,dR,QZe,HZe,cR,UZe,JZe,YZe,On,gte,KZe,ZZe,fR,eeo,oeo,mR,reo,teo,aeo,Vn,hte,neo,seo,gR,leo,ieo,hR,deo,ceo,feo,$g,pte,meo,geo,pR,heo,peo,_eo,Xn,_te,ueo,beo,_R,veo,Feo,uR,Teo,Meo,Eeo,zn,ute,Ceo,weo,bR,Aeo,yeo,vR,Leo,xeo,$eo,Wn,bte,keo,Seo,FR,Reo,Peo,TR,Beo,Ieo,qeo,Qn,vte,Neo,jeo,MR,Deo,Geo,ER,Oeo,Veo,Xeo,Hn,Fte,zeo,Weo,CR,Qeo,Heo,wR,Ueo,Jeo,Yeo,Un,Tte,Keo,Zeo,AR,eoo,ooo,yR,roo,too,aoo,kg,Mte,noo,soo,LR,loo,ioo,doo,Jn,Ete,coo,foo,xR,moo,goo,$R,hoo,poo,_oo,Sg,Cte,uoo,boo,kR,voo,Foo,Too,Yn,wte,Moo,Eoo,SR,Coo,woo,RR,Aoo,yoo,Loo,Kn,Ate,xoo,$oo,PR,koo,Soo,BR,Roo,Poo,Boo,Zn,yte,Ioo,qoo,IR,Noo,joo,qR,Doo,Goo,Ooo,es,Lte,Voo,Xoo,NR,zoo,Woo,jR,Qoo,Hoo,Uoo,os,xte,Joo,Yoo,DR,Koo,Zoo,GR,ero,oro,rro,Rg,$te,tro,aro,OR,nro,sro,lro,rs,kte,iro,dro,VR,cro,fro,XR,mro,gro,hro,ts,Ste,pro,_ro,zR,uro,bro,WR,vro,Fro,Tro,as,Rte,Mro,Ero,QR,Cro,wro,HR,Aro,yro,Lro,ns,Pte,xro,$ro,UR,kro,Sro,JR,Rro,Pro,Bro,ss,Bte,Iro,qro,YR,Nro,jro,KR,Dro,Gro,Oro,ls,Ite,Vro,Xro,ZR,zro,Wro,eP,Qro,Hro,Uro,Pg,qte,Jro,Yro,oP,Kro,Zro,eto,is,Nte,oto,rto,rP,tto,ato,tP,nto,sto,lto,Bg,jte,ito,dto,aP,cto,fto,mto,Ig,Dte,gto,hto,nP,pto,_to,uto,ds,Gte,bto,vto,sP,Fto,Tto,lP,Mto,Eto,Cto,cs,Ote,wto,Ato,iP,yto,Lto,dP,xto,$to,kto,fs,Vte,Sto,Rto,cP,Pto,Bto,fP,Ito,qto,Nto,qg,Xte,jto,Dto,mP,Gto,Oto,Vto,ms,zte,Xto,zto,gP,Wto,Qto,hP,Hto,Uto,Jto,gs,Wte,Yto,Kto,pP,Zto,eao,_P,oao,rao,tao,hs,Qte,aao,nao,uP,sao,lao,bP,iao,dao,cao,ps,Hte,fao,mao,vP,gao,hao,FP,pao,_ao,uao,_s,Ute,bao,vao,TP,Fao,Tao,MP,Mao,Eao,Cao,Ng,Jte,wao,Aao,EP,yao,Lao,xao,us,Yte,$ao,kao,CP,Sao,Rao,wP,Pao,Bao,Iao,jg,Kte,qao,Nao,AP,jao,Dao,Gao,Dg,Zte,Oao,Vao,yP,Xao,zao,Wao,Gg,eae,Qao,Hao,LP,Uao,Jao,Yao,Og,oae,Kao,Zao,xP,eno,ono,rno,bs,rae,tno,ano,$P,nno,sno,kP,lno,ino,dno,Vg,tae,cno,fno,SP,mno,gno,hno,vs,aae,pno,_no,RP,uno,bno,PP,vno,Fno,Tno,Fs,nae,Mno,Eno,BP,Cno,wno,IP,Ano,yno,Lno,Ts,sae,xno,$no,qP,kno,Sno,NP,Rno,Pno,Bno,Ms,lae,Ino,qno,jP,Nno,jno,DP,Dno,Gno,Ono,Es,iae,Vno,Xno,GP,zno,Wno,OP,Qno,Hno,Uno,Cs,dae,Jno,Yno,VP,Kno,Zno,XP,eso,oso,rso,Xg,cae,tso,aso,zP,nso,sso,lso,zg,fae,iso,dso,WP,cso,fso,mso,ws,mae,gso,hso,QP,pso,_so,HP,uso,bso,vso,As,gae,Fso,Tso,UP,Mso,Eso,JP,Cso,wso,Aso,ys,hae,yso,Lso,YP,xso,$so,KP,kso,Sso,Rso,Wg,pae,Pso,Bso,ZP,Iso,qso,Nso,Qg,_ae,jso,Dso,eB,Gso,Oso,Vso,Hg,uae,Xso,zso,oB,Wso,Qso,Hso,Ls,bae,Uso,Jso,rB,Yso,Kso,tB,Zso,elo,olo,Ug,vae,rlo,tlo,aB,alo,nlo,slo,Jg,Fae,llo,ilo,nB,dlo,clo,flo,Yg,Tae,mlo,glo,sB,hlo,plo,_lo,xs,Mae,ulo,blo,lB,vlo,Flo,iB,Tlo,Mlo,Elo,Kg,Eae,Clo,wlo,dB,Alo,ylo,Llo,Zg,Cae,xlo,$lo,cB,klo,Slo,Rlo,$s,wae,Plo,Blo,fB,Ilo,qlo,mB,Nlo,jlo,Dlo,ks,Aae,Glo,Olo,gB,Vlo,Xlo,hB,zlo,Wlo,Qlo,Ss,yae,Hlo,Ulo,pB,Jlo,Ylo,_B,Klo,Zlo,eio,Rs,Lae,oio,rio,uB,tio,aio,bB,nio,sio,lio,eh,iio,oh,y6,dio,xae,cio,dqe,Mi,rh,$ae,L6,fio,kae,mio,cqe,Ao,x6,gio,$6,hio,vB,pio,_io,uio,k6,bio,Sae,vio,Fio,Tio,He,S6,Mio,Rae,Eio,Cio,ya,wio,Pae,Aio,yio,Bae,Lio,xio,Iae,$io,kio,Sio,Z,th,qae,Rio,Pio,FB,Bio,Iio,qio,ah,Nae,Nio,jio,TB,Dio,Gio,Oio,nh,jae,Vio,Xio,MB,zio,Wio,Qio,sh,Dae,Hio,Uio,EB,Jio,Yio,Kio,lh,Gae,Zio,edo,CB,odo,rdo,tdo,ih,Oae,ado,ndo,wB,sdo,ldo,ido,dh,Vae,ddo,cdo,AB,fdo,mdo,gdo,ch,Xae,hdo,pdo,yB,_do,udo,bdo,fh,zae,vdo,Fdo,LB,Tdo,Mdo,Edo,mh,Wae,Cdo,wdo,xB,Ado,ydo,Ldo,gh,Qae,xdo,$do,$B,kdo,Sdo,Rdo,hh,Hae,Pdo,Bdo,kB,Ido,qdo,Ndo,ph,Uae,jdo,Ddo,SB,Gdo,Odo,Vdo,_h,Jae,Xdo,zdo,RB,Wdo,Qdo,Hdo,uh,Yae,Udo,Jdo,PB,Ydo,Kdo,Zdo,bh,Kae,eco,oco,BB,rco,tco,aco,vh,Zae,nco,sco,IB,lco,ico,dco,Fh,ene,cco,fco,qB,mco,gco,hco,Th,one,pco,_co,NB,uco,bco,vco,Mh,rne,Fco,Tco,jB,Mco,Eco,Cco,Eh,tne,wco,Aco,DB,yco,Lco,xco,Ch,ane,$co,kco,GB,Sco,Rco,Pco,wh,nne,Bco,Ico,OB,qco,Nco,jco,Ah,sne,Dco,Gco,VB,Oco,Vco,Xco,yh,lne,zco,Wco,XB,Qco,Hco,Uco,Lh,ine,Jco,Yco,zB,Kco,Zco,efo,xh,dne,ofo,rfo,WB,tfo,afo,nfo,$h,sfo,kh,lfo,Sh,R6,ifo,cne,dfo,fqe,Ei,Rh,fne,P6,cfo,mne,ffo,mqe,yo,B6,mfo,I6,gfo,QB,hfo,pfo,_fo,q6,ufo,gne,bfo,vfo,Ffo,Ue,N6,Tfo,hne,Mfo,Efo,Ci,Cfo,pne,wfo,Afo,_ne,yfo,Lfo,xfo,pe,Ph,une,$fo,kfo,HB,Sfo,Rfo,Pfo,Bh,bne,Bfo,Ifo,vne,qfo,Nfo,jfo,Ih,Fne,Dfo,Gfo,UB,Ofo,Vfo,Xfo,qh,Tne,zfo,Wfo,JB,Qfo,Hfo,Ufo,Nh,Mne,Jfo,Yfo,YB,Kfo,Zfo,emo,jh,Ene,omo,rmo,KB,tmo,amo,nmo,Dh,Cne,smo,lmo,ZB,imo,dmo,cmo,Gh,wne,fmo,mmo,eI,gmo,hmo,pmo,Oh,Ane,_mo,umo,oI,bmo,vmo,Fmo,Vh,yne,Tmo,Mmo,rI,Emo,Cmo,wmo,Xh,Lne,Amo,ymo,tI,Lmo,xmo,$mo,zh,xne,kmo,Smo,aI,Rmo,Pmo,Bmo,Wh,$ne,Imo,qmo,nI,Nmo,jmo,Dmo,Qh,kne,Gmo,Omo,sI,Vmo,Xmo,zmo,Hh,Sne,Wmo,Qmo,lI,Hmo,Umo,Jmo,Uh,Rne,Ymo,Kmo,iI,Zmo,ego,ogo,Jh,rgo,Yh,tgo,Kh,j6,ago,Pne,ngo,gqe,wi,Zh,Bne,D6,sgo,Ine,lgo,hqe,Lo,G6,igo,Ai,dgo,dI,cgo,fgo,cI,mgo,ggo,hgo,O6,pgo,qne,_go,ugo,bgo,tt,V6,vgo,Nne,Fgo,Tgo,yi,Mgo,jne,Ego,Cgo,fI,wgo,Ago,ygo,ep,Lgo,Je,X6,xgo,Dne,$go,kgo,La,Sgo,Gne,Rgo,Pgo,One,Bgo,Igo,Vne,qgo,Ngo,jgo,x,op,Xne,Dgo,Ggo,mI,Ogo,Vgo,Xgo,rp,zne,zgo,Wgo,gI,Qgo,Hgo,Ugo,tp,Wne,Jgo,Ygo,hI,Kgo,Zgo,eho,ap,Qne,oho,rho,pI,tho,aho,nho,np,Hne,sho,lho,_I,iho,dho,cho,sp,Une,fho,mho,uI,gho,hho,pho,lp,Jne,_ho,uho,bI,bho,vho,Fho,ip,Yne,Tho,Mho,vI,Eho,Cho,who,dp,Kne,Aho,yho,FI,Lho,xho,$ho,cp,Zne,kho,Sho,TI,Rho,Pho,Bho,fp,ese,Iho,qho,MI,Nho,jho,Dho,mp,ose,Gho,Oho,EI,Vho,Xho,zho,gp,rse,Who,Qho,CI,Hho,Uho,Jho,hp,tse,Yho,Kho,wI,Zho,epo,opo,pp,ase,rpo,tpo,AI,apo,npo,spo,_p,nse,lpo,ipo,yI,dpo,cpo,fpo,up,sse,mpo,gpo,LI,hpo,ppo,_po,bp,lse,upo,bpo,xI,vpo,Fpo,Tpo,vp,ise,Mpo,Epo,$I,Cpo,wpo,Apo,Fp,dse,ypo,Lpo,kI,xpo,$po,kpo,Tp,cse,Spo,Rpo,SI,Ppo,Bpo,Ipo,Mp,fse,qpo,Npo,RI,jpo,Dpo,Gpo,Ep,mse,Opo,Vpo,PI,Xpo,zpo,Wpo,Cp,gse,Qpo,Hpo,BI,Upo,Jpo,Ypo,wp,hse,Kpo,Zpo,II,e_o,o_o,r_o,Ap,pse,t_o,a_o,qI,n_o,s_o,l_o,yp,_se,i_o,d_o,NI,c_o,f_o,m_o,Lp,use,g_o,h_o,jI,p_o,__o,u_o,xp,bse,b_o,v_o,DI,F_o,T_o,M_o,$p,vse,E_o,C_o,GI,w_o,A_o,y_o,kp,Fse,L_o,x_o,OI,$_o,k_o,S_o,Sp,Tse,R_o,P_o,VI,B_o,I_o,q_o,Ps,Mse,N_o,j_o,XI,D_o,G_o,zI,O_o,V_o,X_o,Rp,Ese,z_o,W_o,WI,Q_o,H_o,U_o,Pp,Cse,J_o,Y_o,QI,K_o,Z_o,euo,Bp,wse,ouo,ruo,HI,tuo,auo,nuo,Ip,Ase,suo,luo,UI,iuo,duo,cuo,qp,yse,fuo,muo,JI,guo,huo,puo,Np,Lse,_uo,uuo,YI,buo,vuo,Fuo,jp,xse,Tuo,Muo,KI,Euo,Cuo,wuo,Dp,$se,Auo,yuo,ZI,Luo,xuo,$uo,Gp,kse,kuo,Suo,eq,Ruo,Puo,Buo,Op,Sse,Iuo,quo,oq,Nuo,juo,Duo,Vp,Rse,Guo,Ouo,rq,Vuo,Xuo,zuo,Xp,Pse,Wuo,Quo,tq,Huo,Uuo,Juo,zp,Bse,Yuo,Kuo,aq,Zuo,e2o,o2o,Wp,Ise,r2o,t2o,nq,a2o,n2o,s2o,Qp,qse,l2o,i2o,sq,d2o,c2o,f2o,Hp,Nse,m2o,g2o,lq,h2o,p2o,_2o,Up,jse,u2o,b2o,iq,v2o,F2o,T2o,Jp,Dse,M2o,E2o,dq,C2o,w2o,A2o,Yp,Gse,y2o,L2o,cq,x2o,$2o,k2o,Kp,Ose,S2o,R2o,fq,P2o,B2o,I2o,Zp,Vse,q2o,N2o,mq,j2o,D2o,G2o,e_,Xse,O2o,V2o,gq,X2o,z2o,W2o,o_,zse,Q2o,H2o,hq,U2o,J2o,Y2o,r_,Wse,K2o,Z2o,pq,e1o,o1o,r1o,t_,Qse,t1o,a1o,_q,n1o,s1o,l1o,a_,Hse,i1o,d1o,uq,c1o,f1o,m1o,n_,Use,g1o,h1o,bq,p1o,_1o,u1o,s_,Jse,b1o,v1o,vq,F1o,T1o,M1o,l_,Yse,E1o,C1o,Fq,w1o,A1o,y1o,i_,Kse,L1o,x1o,Tq,$1o,k1o,S1o,d_,Zse,R1o,P1o,Mq,B1o,I1o,q1o,c_,ele,N1o,j1o,Eq,D1o,G1o,O1o,f_,ole,V1o,X1o,Cq,z1o,W1o,Q1o,m_,rle,H1o,U1o,wq,J1o,Y1o,K1o,g_,tle,Z1o,ebo,Aq,obo,rbo,tbo,h_,ale,abo,nbo,yq,sbo,lbo,ibo,p_,nle,dbo,cbo,Lq,fbo,mbo,gbo,__,sle,hbo,pbo,xq,_bo,ubo,bbo,u_,lle,vbo,Fbo,$q,Tbo,Mbo,Ebo,b_,ile,Cbo,wbo,kq,Abo,ybo,Lbo,v_,dle,xbo,$bo,Sq,kbo,Sbo,Rbo,F_,cle,Pbo,Bbo,Rq,Ibo,qbo,Nbo,T_,fle,jbo,Dbo,Pq,Gbo,Obo,Vbo,M_,mle,Xbo,zbo,Bq,Wbo,Qbo,Hbo,E_,gle,Ubo,Jbo,Iq,Ybo,Kbo,Zbo,C_,hle,e4o,o4o,qq,r4o,t4o,a4o,w_,ple,n4o,s4o,Nq,l4o,i4o,d4o,A_,_le,c4o,f4o,jq,m4o,g4o,h4o,y_,ule,p4o,_4o,Dq,u4o,b4o,v4o,L_,ble,F4o,T4o,Gq,M4o,E4o,C4o,x_,vle,w4o,A4o,Oq,y4o,L4o,x4o,$_,Fle,$4o,k4o,Vq,S4o,R4o,P4o,k_,Tle,B4o,I4o,Xq,q4o,N4o,j4o,S_,Mle,D4o,G4o,zq,O4o,V4o,X4o,R_,Ele,z4o,W4o,Wq,Q4o,H4o,U4o,P_,Cle,J4o,Y4o,Qq,K4o,Z4o,e5o,B_,wle,o5o,r5o,Hq,t5o,a5o,n5o,I_,Ale,s5o,l5o,Uq,i5o,d5o,c5o,q_,yle,f5o,m5o,Jq,g5o,h5o,p5o,N_,Lle,_5o,u5o,Yq,b5o,v5o,F5o,j_,xle,T5o,M5o,Kq,E5o,C5o,w5o,D_,$le,A5o,y5o,Zq,L5o,x5o,$5o,G_,kle,k5o,S5o,eN,R5o,P5o,B5o,O_,Sle,I5o,q5o,oN,N5o,j5o,D5o,V_,Rle,G5o,O5o,rN,V5o,X5o,z5o,X_,Ple,W5o,Q5o,tN,H5o,U5o,J5o,z_,Ble,Y5o,K5o,aN,Z5o,evo,ovo,W_,rvo,Ile,tvo,avo,qle,nvo,svo,Q_,pqe,Li,H_,Nle,z6,lvo,jle,ivo,_qe,xo,W6,dvo,xi,cvo,nN,fvo,mvo,sN,gvo,hvo,pvo,Q6,_vo,Dle,uvo,bvo,vvo,at,H6,Fvo,Gle,Tvo,Mvo,$i,Evo,Ole,Cvo,wvo,lN,Avo,yvo,Lvo,U_,xvo,Ye,U6,$vo,Vle,kvo,Svo,xa,Rvo,Xle,Pvo,Bvo,zle,Ivo,qvo,Wle,Nvo,jvo,Dvo,G,J_,Qle,Gvo,Ovo,iN,Vvo,Xvo,zvo,Y_,Hle,Wvo,Qvo,dN,Hvo,Uvo,Jvo,K_,Ule,Yvo,Kvo,cN,Zvo,eFo,oFo,Z_,Jle,rFo,tFo,fN,aFo,nFo,sFo,eu,Yle,lFo,iFo,mN,dFo,cFo,fFo,ou,Kle,mFo,gFo,gN,hFo,pFo,_Fo,ru,Zle,uFo,bFo,hN,vFo,FFo,TFo,tu,eie,MFo,EFo,pN,CFo,wFo,AFo,au,oie,yFo,LFo,_N,xFo,$Fo,kFo,nu,rie,SFo,RFo,uN,PFo,BFo,IFo,su,tie,qFo,NFo,bN,jFo,DFo,GFo,lu,aie,OFo,VFo,vN,XFo,zFo,WFo,iu,nie,QFo,HFo,FN,UFo,JFo,YFo,du,sie,KFo,ZFo,TN,eTo,oTo,rTo,cu,lie,tTo,aTo,MN,nTo,sTo,lTo,fu,iie,iTo,dTo,EN,cTo,fTo,mTo,mu,die,gTo,hTo,CN,pTo,_To,uTo,gu,cie,bTo,vTo,wN,FTo,TTo,MTo,hu,fie,ETo,CTo,AN,wTo,ATo,yTo,pu,mie,LTo,xTo,yN,$To,kTo,STo,_u,gie,RTo,PTo,LN,BTo,ITo,qTo,uu,hie,NTo,jTo,xN,DTo,GTo,OTo,bu,pie,VTo,XTo,$N,zTo,WTo,QTo,vu,_ie,HTo,UTo,kN,JTo,YTo,KTo,Fu,uie,ZTo,e7o,SN,o7o,r7o,t7o,Tu,bie,a7o,n7o,RN,s7o,l7o,i7o,Mu,vie,d7o,c7o,PN,f7o,m7o,g7o,Eu,Fie,h7o,p7o,BN,_7o,u7o,b7o,Cu,Tie,v7o,F7o,IN,T7o,M7o,E7o,wu,Mie,C7o,w7o,qN,A7o,y7o,L7o,Au,Eie,x7o,$7o,NN,k7o,S7o,R7o,yu,Cie,P7o,B7o,jN,I7o,q7o,N7o,Lu,wie,j7o,D7o,DN,G7o,O7o,V7o,xu,Aie,X7o,z7o,GN,W7o,Q7o,H7o,$u,yie,U7o,J7o,ON,Y7o,K7o,Z7o,ku,Lie,eMo,oMo,VN,rMo,tMo,aMo,Su,xie,nMo,sMo,XN,lMo,iMo,dMo,Ru,$ie,cMo,fMo,zN,mMo,gMo,hMo,Pu,kie,pMo,_Mo,WN,uMo,bMo,vMo,Bu,Sie,FMo,TMo,QN,MMo,EMo,CMo,Iu,Rie,wMo,AMo,HN,yMo,LMo,xMo,qu,Pie,$Mo,kMo,UN,SMo,RMo,PMo,Nu,BMo,Bie,IMo,qMo,Iie,NMo,jMo,ju,uqe,ki,Du,qie,J6,DMo,Nie,GMo,bqe,$o,Y6,OMo,Si,VMo,JN,XMo,zMo,YN,WMo,QMo,HMo,K6,UMo,jie,JMo,YMo,KMo,nt,Z6,ZMo,Die,eEo,oEo,Ri,rEo,Gie,tEo,aEo,KN,nEo,sEo,lEo,Gu,iEo,Ke,ey,dEo,Oie,cEo,fEo,$a,mEo,Vie,gEo,hEo,Xie,pEo,_Eo,zie,uEo,bEo,vEo,z,Ou,Wie,FEo,TEo,ZN,MEo,EEo,CEo,Vu,Qie,wEo,AEo,ej,yEo,LEo,xEo,Xu,Hie,$Eo,kEo,oj,SEo,REo,PEo,zu,Uie,BEo,IEo,rj,qEo,NEo,jEo,Wu,Jie,DEo,GEo,tj,OEo,VEo,XEo,Qu,Yie,zEo,WEo,aj,QEo,HEo,UEo,Hu,Kie,JEo,YEo,nj,KEo,ZEo,eCo,Uu,Zie,oCo,rCo,sj,tCo,aCo,nCo,Ju,ede,sCo,lCo,lj,iCo,dCo,cCo,Yu,ode,fCo,mCo,ij,gCo,hCo,pCo,Ku,rde,_Co,uCo,dj,bCo,vCo,FCo,Zu,tde,TCo,MCo,cj,ECo,CCo,wCo,e2,ade,ACo,yCo,fj,LCo,xCo,$Co,o2,nde,kCo,SCo,mj,RCo,PCo,BCo,r2,sde,ICo,qCo,gj,NCo,jCo,DCo,t2,lde,GCo,OCo,hj,VCo,XCo,zCo,a2,ide,WCo,QCo,pj,HCo,UCo,JCo,n2,dde,YCo,KCo,_j,ZCo,e3o,o3o,s2,cde,r3o,t3o,uj,a3o,n3o,s3o,l2,fde,l3o,i3o,bj,d3o,c3o,f3o,i2,mde,m3o,g3o,vj,h3o,p3o,_3o,d2,gde,u3o,b3o,Fj,v3o,F3o,T3o,c2,hde,M3o,E3o,Tj,C3o,w3o,A3o,f2,pde,y3o,L3o,Mj,x3o,$3o,k3o,m2,_de,S3o,R3o,Ej,P3o,B3o,I3o,g2,ude,q3o,N3o,Cj,j3o,D3o,G3o,h2,bde,O3o,V3o,wj,X3o,z3o,W3o,p2,vde,Q3o,H3o,Aj,U3o,J3o,Y3o,_2,Fde,K3o,Z3o,yj,ewo,owo,rwo,u2,Tde,two,awo,Lj,nwo,swo,lwo,b2,Mde,iwo,dwo,xj,cwo,fwo,mwo,v2,Ede,gwo,hwo,$j,pwo,_wo,uwo,F2,Cde,bwo,vwo,kj,Fwo,Two,Mwo,T2,wde,Ewo,Cwo,Sj,wwo,Awo,ywo,M2,Ade,Lwo,xwo,Rj,$wo,kwo,Swo,E2,yde,Rwo,Pwo,Pj,Bwo,Iwo,qwo,C2,Nwo,Lde,jwo,Dwo,xde,Gwo,Owo,w2,vqe,Pi,A2,$de,oy,Vwo,kde,Xwo,Fqe,ko,ry,zwo,Bi,Wwo,Bj,Qwo,Hwo,Ij,Uwo,Jwo,Ywo,ty,Kwo,Sde,Zwo,e0o,o0o,st,ay,r0o,Rde,t0o,a0o,Ii,n0o,Pde,s0o,l0o,qj,i0o,d0o,c0o,y2,f0o,Ze,ny,m0o,Bde,g0o,h0o,ka,p0o,Ide,_0o,u0o,qde,b0o,v0o,Nde,F0o,T0o,M0o,W,L2,jde,E0o,C0o,Nj,w0o,A0o,y0o,x2,Dde,L0o,x0o,jj,$0o,k0o,S0o,$2,Gde,R0o,P0o,Dj,B0o,I0o,q0o,k2,Ode,N0o,j0o,Gj,D0o,G0o,O0o,S2,Vde,V0o,X0o,Oj,z0o,W0o,Q0o,R2,Xde,H0o,U0o,Vj,J0o,Y0o,K0o,P2,zde,Z0o,eAo,Xj,oAo,rAo,tAo,B2,Wde,aAo,nAo,zj,sAo,lAo,iAo,I2,Qde,dAo,cAo,Wj,fAo,mAo,gAo,q2,Hde,hAo,pAo,Qj,_Ao,uAo,bAo,N2,Ude,vAo,FAo,Hj,TAo,MAo,EAo,j2,Jde,CAo,wAo,Uj,AAo,yAo,LAo,D2,Yde,xAo,$Ao,Jj,kAo,SAo,RAo,G2,Kde,PAo,BAo,Yj,IAo,qAo,NAo,O2,Zde,jAo,DAo,Kj,GAo,OAo,VAo,V2,ece,XAo,zAo,Zj,WAo,QAo,HAo,X2,oce,UAo,JAo,eD,YAo,KAo,ZAo,z2,rce,e6o,o6o,oD,r6o,t6o,a6o,W2,tce,n6o,s6o,rD,l6o,i6o,d6o,Q2,ace,c6o,f6o,tD,m6o,g6o,h6o,H2,nce,p6o,_6o,aD,u6o,b6o,v6o,U2,sce,F6o,T6o,nD,M6o,E6o,C6o,J2,lce,w6o,A6o,sD,y6o,L6o,x6o,Y2,ice,$6o,k6o,lD,S6o,R6o,P6o,K2,dce,B6o,I6o,iD,q6o,N6o,j6o,Z2,cce,D6o,G6o,dD,O6o,V6o,X6o,e1,fce,z6o,W6o,cD,Q6o,H6o,U6o,o1,mce,J6o,Y6o,fD,K6o,Z6o,eyo,r1,gce,oyo,ryo,mD,tyo,ayo,nyo,t1,hce,syo,lyo,gD,iyo,dyo,cyo,a1,pce,fyo,myo,_ce,gyo,hyo,pyo,n1,uce,_yo,uyo,hD,byo,vyo,Fyo,s1,bce,Tyo,Myo,pD,Eyo,Cyo,wyo,l1,vce,Ayo,yyo,_D,Lyo,xyo,$yo,i1,Fce,kyo,Syo,uD,Ryo,Pyo,Byo,d1,Iyo,Tce,qyo,Nyo,Mce,jyo,Dyo,c1,Tqe,qi,f1,Ece,sy,Gyo,Cce,Oyo,Mqe,So,ly,Vyo,Ni,Xyo,bD,zyo,Wyo,vD,Qyo,Hyo,Uyo,iy,Jyo,wce,Yyo,Kyo,Zyo,lt,dy,eLo,Ace,oLo,rLo,ji,tLo,yce,aLo,nLo,FD,sLo,lLo,iLo,m1,dLo,eo,cy,cLo,Lce,fLo,mLo,Sa,gLo,xce,hLo,pLo,$ce,_Lo,uLo,kce,bLo,vLo,FLo,_e,g1,Sce,TLo,MLo,TD,ELo,CLo,wLo,h1,Rce,ALo,yLo,MD,LLo,xLo,$Lo,p1,Pce,kLo,SLo,ED,RLo,PLo,BLo,_1,Bce,ILo,qLo,CD,NLo,jLo,DLo,u1,Ice,GLo,OLo,wD,VLo,XLo,zLo,b1,qce,WLo,QLo,AD,HLo,ULo,JLo,v1,Nce,YLo,KLo,yD,ZLo,e8o,o8o,F1,jce,r8o,t8o,LD,a8o,n8o,s8o,T1,Dce,l8o,i8o,xD,d8o,c8o,f8o,M1,Gce,m8o,g8o,$D,h8o,p8o,_8o,E1,Oce,u8o,b8o,kD,v8o,F8o,T8o,C1,Vce,M8o,E8o,SD,C8o,w8o,A8o,w1,Xce,y8o,L8o,RD,x8o,$8o,k8o,A1,zce,S8o,R8o,PD,P8o,B8o,I8o,y1,Wce,q8o,N8o,BD,j8o,D8o,G8o,L1,Qce,O8o,V8o,ID,X8o,z8o,W8o,x1,Q8o,Hce,H8o,U8o,Uce,J8o,Y8o,$1,Eqe,Di,k1,Jce,fy,K8o,Yce,Z8o,Cqe,Ro,my,e9o,Gi,o9o,qD,r9o,t9o,ND,a9o,n9o,s9o,gy,l9o,Kce,i9o,d9o,c9o,it,hy,f9o,Zce,m9o,g9o,Oi,h9o,efe,p9o,_9o,jD,u9o,b9o,v9o,S1,F9o,oo,py,T9o,ofe,M9o,E9o,Ra,C9o,rfe,w9o,A9o,tfe,y9o,L9o,afe,x9o,$9o,k9o,q,R1,nfe,S9o,R9o,DD,P9o,B9o,I9o,P1,sfe,q9o,N9o,GD,j9o,D9o,G9o,B1,lfe,O9o,V9o,OD,X9o,z9o,W9o,I1,ife,Q9o,H9o,VD,U9o,J9o,Y9o,q1,dfe,K9o,Z9o,XD,exo,oxo,rxo,N1,cfe,txo,axo,zD,nxo,sxo,lxo,j1,ffe,ixo,dxo,WD,cxo,fxo,mxo,D1,mfe,gxo,hxo,QD,pxo,_xo,uxo,G1,gfe,bxo,vxo,HD,Fxo,Txo,Mxo,O1,hfe,Exo,Cxo,UD,wxo,Axo,yxo,V1,pfe,Lxo,xxo,JD,$xo,kxo,Sxo,X1,_fe,Rxo,Pxo,YD,Bxo,Ixo,qxo,z1,ufe,Nxo,jxo,KD,Dxo,Gxo,Oxo,W1,bfe,Vxo,Xxo,ZD,zxo,Wxo,Qxo,Q1,vfe,Hxo,Uxo,eG,Jxo,Yxo,Kxo,H1,Ffe,Zxo,e$o,oG,o$o,r$o,t$o,U1,Tfe,a$o,n$o,rG,s$o,l$o,i$o,J1,Mfe,d$o,c$o,tG,f$o,m$o,g$o,Y1,Efe,h$o,p$o,aG,_$o,u$o,b$o,K1,Cfe,v$o,F$o,nG,T$o,M$o,E$o,Z1,wfe,C$o,w$o,sG,A$o,y$o,L$o,eb,Afe,x$o,$$o,lG,k$o,S$o,R$o,ob,yfe,P$o,B$o,iG,I$o,q$o,N$o,rb,Lfe,j$o,D$o,dG,G$o,O$o,V$o,tb,xfe,X$o,z$o,cG,W$o,Q$o,H$o,ab,$fe,U$o,J$o,fG,Y$o,K$o,Z$o,nb,kfe,eko,oko,mG,rko,tko,ako,sb,Sfe,nko,sko,gG,lko,iko,dko,lb,Rfe,cko,fko,hG,mko,gko,hko,ib,Pfe,pko,_ko,pG,uko,bko,vko,db,Bfe,Fko,Tko,_G,Mko,Eko,Cko,cb,Ife,wko,Ako,uG,yko,Lko,xko,fb,qfe,$ko,kko,bG,Sko,Rko,Pko,mb,Nfe,Bko,Iko,vG,qko,Nko,jko,gb,jfe,Dko,Gko,FG,Oko,Vko,Xko,hb,Dfe,zko,Wko,TG,Qko,Hko,Uko,pb,Gfe,Jko,Yko,MG,Kko,Zko,eSo,_b,Ofe,oSo,rSo,EG,tSo,aSo,nSo,ub,Vfe,sSo,lSo,CG,iSo,dSo,cSo,bb,Xfe,fSo,mSo,wG,gSo,hSo,pSo,vb,zfe,_So,uSo,AG,bSo,vSo,FSo,Fb,Wfe,TSo,MSo,yG,ESo,CSo,wSo,Tb,Qfe,ASo,ySo,LG,LSo,xSo,$So,Mb,Hfe,kSo,SSo,xG,RSo,PSo,BSo,Eb,Ufe,ISo,qSo,$G,NSo,jSo,DSo,Cb,Jfe,GSo,OSo,kG,VSo,XSo,zSo,wb,WSo,Yfe,QSo,HSo,Kfe,USo,JSo,Ab,wqe,Vi,yb,Zfe,_y,YSo,eme,KSo,Aqe,Po,uy,ZSo,Xi,eRo,SG,oRo,rRo,RG,tRo,aRo,nRo,by,sRo,ome,lRo,iRo,dRo,dt,vy,cRo,rme,fRo,mRo,zi,gRo,tme,hRo,pRo,PG,_Ro,uRo,bRo,Lb,vRo,ro,Fy,FRo,ame,TRo,MRo,Pa,ERo,nme,CRo,wRo,sme,ARo,yRo,lme,LRo,xRo,$Ro,Y,xb,ime,kRo,SRo,BG,RRo,PRo,BRo,$b,dme,IRo,qRo,IG,NRo,jRo,DRo,kb,cme,GRo,ORo,qG,VRo,XRo,zRo,Sb,fme,WRo,QRo,NG,HRo,URo,JRo,Rb,mme,YRo,KRo,jG,ZRo,ePo,oPo,Pb,gme,rPo,tPo,DG,aPo,nPo,sPo,Bb,hme,lPo,iPo,GG,dPo,cPo,fPo,Ib,pme,mPo,gPo,OG,hPo,pPo,_Po,qb,_me,uPo,bPo,VG,vPo,FPo,TPo,Nb,ume,MPo,EPo,XG,CPo,wPo,APo,jb,bme,yPo,LPo,zG,xPo,$Po,kPo,Db,vme,SPo,RPo,WG,PPo,BPo,IPo,Gb,Fme,qPo,NPo,QG,jPo,DPo,GPo,Ob,Tme,OPo,VPo,HG,XPo,zPo,WPo,Vb,Mme,QPo,HPo,UG,UPo,JPo,YPo,Xb,Eme,KPo,ZPo,JG,eBo,oBo,rBo,zb,Cme,tBo,aBo,YG,nBo,sBo,lBo,Wb,wme,iBo,dBo,KG,cBo,fBo,mBo,Qb,Ame,gBo,hBo,ZG,pBo,_Bo,uBo,Hb,yme,bBo,vBo,eO,FBo,TBo,MBo,Ub,Lme,EBo,CBo,oO,wBo,ABo,yBo,Jb,xme,LBo,xBo,rO,$Bo,kBo,SBo,Yb,$me,RBo,PBo,tO,BBo,IBo,qBo,Kb,kme,NBo,jBo,aO,DBo,GBo,OBo,Zb,Sme,VBo,XBo,nO,zBo,WBo,QBo,e4,Rme,HBo,UBo,sO,JBo,YBo,KBo,o4,Pme,ZBo,eIo,lO,oIo,rIo,tIo,r4,Bme,aIo,nIo,iO,sIo,lIo,iIo,t4,Ime,dIo,cIo,dO,fIo,mIo,gIo,a4,hIo,qme,pIo,_Io,Nme,uIo,bIo,n4,yqe,Wi,s4,jme,Ty,vIo,Dme,FIo,Lqe,Bo,My,TIo,Qi,MIo,cO,EIo,CIo,fO,wIo,AIo,yIo,Ey,LIo,Gme,xIo,$Io,kIo,ct,Cy,SIo,Ome,RIo,PIo,Hi,BIo,Vme,IIo,qIo,mO,NIo,jIo,DIo,l4,GIo,to,wy,OIo,Xme,VIo,XIo,Ba,zIo,zme,WIo,QIo,Wme,HIo,UIo,Qme,JIo,YIo,KIo,Yr,i4,Hme,ZIo,eqo,gO,oqo,rqo,tqo,d4,Ume,aqo,nqo,hO,sqo,lqo,iqo,c4,Jme,dqo,cqo,pO,fqo,mqo,gqo,f4,Yme,hqo,pqo,_O,_qo,uqo,bqo,m4,Kme,vqo,Fqo,uO,Tqo,Mqo,Eqo,g4,Cqo,Zme,wqo,Aqo,ege,yqo,Lqo,h4,xqe,Ui,p4,oge,Ay,xqo,rge,$qo,$qe,Io,yy,kqo,Ji,Sqo,bO,Rqo,Pqo,vO,Bqo,Iqo,qqo,Ly,Nqo,tge,jqo,Dqo,Gqo,ft,xy,Oqo,age,Vqo,Xqo,Yi,zqo,nge,Wqo,Qqo,FO,Hqo,Uqo,Jqo,_4,Yqo,ao,$y,Kqo,sge,Zqo,eNo,Ia,oNo,lge,rNo,tNo,ige,aNo,nNo,dge,sNo,lNo,iNo,U,u4,cge,dNo,cNo,TO,fNo,mNo,gNo,b4,fge,hNo,pNo,MO,_No,uNo,bNo,v4,mge,vNo,FNo,EO,TNo,MNo,ENo,F4,gge,CNo,wNo,CO,ANo,yNo,LNo,T4,hge,xNo,$No,wO,kNo,SNo,RNo,M4,pge,PNo,BNo,AO,INo,qNo,NNo,E4,_ge,jNo,DNo,yO,GNo,ONo,VNo,C4,uge,XNo,zNo,LO,WNo,QNo,HNo,w4,bge,UNo,JNo,xO,YNo,KNo,ZNo,A4,vge,ejo,ojo,$O,rjo,tjo,ajo,y4,Fge,njo,sjo,kO,ljo,ijo,djo,L4,Tge,cjo,fjo,SO,mjo,gjo,hjo,x4,Mge,pjo,_jo,RO,ujo,bjo,vjo,$4,Ege,Fjo,Tjo,PO,Mjo,Ejo,Cjo,k4,Cge,wjo,Ajo,BO,yjo,Ljo,xjo,S4,wge,$jo,kjo,IO,Sjo,Rjo,Pjo,R4,Age,Bjo,Ijo,qO,qjo,Njo,jjo,P4,yge,Djo,Gjo,NO,Ojo,Vjo,Xjo,B4,Lge,zjo,Wjo,jO,Qjo,Hjo,Ujo,I4,xge,Jjo,Yjo,DO,Kjo,Zjo,eDo,q4,$ge,oDo,rDo,GO,tDo,aDo,nDo,N4,kge,sDo,lDo,OO,iDo,dDo,cDo,j4,Sge,fDo,mDo,VO,gDo,hDo,pDo,D4,Rge,_Do,uDo,XO,bDo,vDo,FDo,G4,Pge,TDo,MDo,zO,EDo,CDo,wDo,O4,Bge,ADo,yDo,WO,LDo,xDo,$Do,V4,Ige,kDo,SDo,QO,RDo,PDo,BDo,X4,qge,IDo,qDo,HO,NDo,jDo,DDo,z4,Nge,GDo,ODo,UO,VDo,XDo,zDo,W4,jge,WDo,QDo,JO,HDo,UDo,JDo,Q4,Dge,YDo,KDo,YO,ZDo,eGo,oGo,H4,Gge,rGo,tGo,KO,aGo,nGo,sGo,U4,Oge,lGo,iGo,ZO,dGo,cGo,fGo,J4,mGo,Vge,gGo,hGo,Xge,pGo,_Go,Y4,kqe,Ki,K4,zge,ky,uGo,Wge,bGo,Sqe,qo,Sy,vGo,Zi,FGo,eV,TGo,MGo,oV,EGo,CGo,wGo,Ry,AGo,Qge,yGo,LGo,xGo,mt,Py,$Go,Hge,kGo,SGo,ed,RGo,Uge,PGo,BGo,rV,IGo,qGo,NGo,Z4,jGo,no,By,DGo,Jge,GGo,OGo,qa,VGo,Yge,XGo,zGo,Kge,WGo,QGo,Zge,HGo,UGo,JGo,V,e5,ehe,YGo,KGo,tV,ZGo,eOo,oOo,o5,ohe,rOo,tOo,aV,aOo,nOo,sOo,r5,rhe,lOo,iOo,nV,dOo,cOo,fOo,t5,the,mOo,gOo,sV,hOo,pOo,_Oo,a5,ahe,uOo,bOo,lV,vOo,FOo,TOo,n5,nhe,MOo,EOo,iV,COo,wOo,AOo,s5,she,yOo,LOo,dV,xOo,$Oo,kOo,l5,lhe,SOo,ROo,cV,POo,BOo,IOo,i5,ihe,qOo,NOo,fV,jOo,DOo,GOo,d5,dhe,OOo,VOo,mV,XOo,zOo,WOo,c5,che,QOo,HOo,gV,UOo,JOo,YOo,f5,fhe,KOo,ZOo,hV,eVo,oVo,rVo,m5,mhe,tVo,aVo,pV,nVo,sVo,lVo,g5,ghe,iVo,dVo,_V,cVo,fVo,mVo,h5,hhe,gVo,hVo,uV,pVo,_Vo,uVo,p5,phe,bVo,vVo,bV,FVo,TVo,MVo,_5,_he,EVo,CVo,vV,wVo,AVo,yVo,u5,uhe,LVo,xVo,FV,$Vo,kVo,SVo,b5,bhe,RVo,PVo,TV,BVo,IVo,qVo,v5,vhe,NVo,jVo,MV,DVo,GVo,OVo,F5,Fhe,VVo,XVo,EV,zVo,WVo,QVo,T5,The,HVo,UVo,CV,JVo,YVo,KVo,M5,Mhe,ZVo,eXo,wV,oXo,rXo,tXo,E5,Ehe,aXo,nXo,AV,sXo,lXo,iXo,C5,Che,dXo,cXo,yV,fXo,mXo,gXo,w5,whe,hXo,pXo,LV,_Xo,uXo,bXo,A5,Ahe,vXo,FXo,xV,TXo,MXo,EXo,y5,yhe,CXo,wXo,$V,AXo,yXo,LXo,L5,Lhe,xXo,$Xo,kV,kXo,SXo,RXo,x5,xhe,PXo,BXo,SV,IXo,qXo,NXo,$5,$he,jXo,DXo,RV,GXo,OXo,VXo,k5,khe,XXo,zXo,PV,WXo,QXo,HXo,S5,She,UXo,JXo,BV,YXo,KXo,ZXo,R5,Rhe,ezo,ozo,IV,rzo,tzo,azo,P5,Phe,nzo,szo,qV,lzo,izo,dzo,B5,Bhe,czo,fzo,NV,mzo,gzo,hzo,I5,Ihe,pzo,_zo,jV,uzo,bzo,vzo,q5,qhe,Fzo,Tzo,DV,Mzo,Ezo,Czo,N5,Nhe,wzo,Azo,GV,yzo,Lzo,xzo,j5,$zo,jhe,kzo,Szo,Dhe,Rzo,Pzo,D5,Rqe,od,G5,Ghe,Iy,Bzo,Ohe,Izo,Pqe,No,qy,qzo,rd,Nzo,OV,jzo,Dzo,VV,Gzo,Ozo,Vzo,Ny,Xzo,Vhe,zzo,Wzo,Qzo,gt,jy,Hzo,Xhe,Uzo,Jzo,td,Yzo,zhe,Kzo,Zzo,XV,eWo,oWo,rWo,O5,tWo,so,Dy,aWo,Whe,nWo,sWo,Na,lWo,Qhe,iWo,dWo,Hhe,cWo,fWo,Uhe,mWo,gWo,hWo,Jhe,V5,Yhe,pWo,_Wo,zV,uWo,bWo,vWo,X5,FWo,Khe,TWo,MWo,Zhe,EWo,CWo,z5,Bqe,ad,W5,epe,Gy,wWo,ope,AWo,Iqe,jo,Oy,yWo,nd,LWo,WV,xWo,$Wo,QV,kWo,SWo,RWo,Vy,PWo,rpe,BWo,IWo,qWo,ht,Xy,NWo,tpe,jWo,DWo,sd,GWo,ape,OWo,VWo,HV,XWo,zWo,WWo,Q5,QWo,lo,zy,HWo,npe,UWo,JWo,ja,YWo,spe,KWo,ZWo,lpe,eQo,oQo,ipe,rQo,tQo,aQo,Fe,H5,dpe,nQo,sQo,UV,lQo,iQo,dQo,U5,cpe,cQo,fQo,JV,mQo,gQo,hQo,J5,fpe,pQo,_Qo,YV,uQo,bQo,vQo,Y5,mpe,FQo,TQo,KV,MQo,EQo,CQo,Bs,gpe,wQo,AQo,ZV,yQo,LQo,eX,xQo,$Qo,kQo,K5,hpe,SQo,RQo,oX,PQo,BQo,IQo,pt,ppe,qQo,NQo,rX,jQo,DQo,tX,GQo,OQo,aX,VQo,XQo,zQo,Z5,_pe,WQo,QQo,nX,HQo,UQo,JQo,ev,upe,YQo,KQo,sX,ZQo,eHo,oHo,ov,bpe,rHo,tHo,lX,aHo,nHo,sHo,rv,vpe,lHo,iHo,iX,dHo,cHo,fHo,tv,Fpe,mHo,gHo,dX,hHo,pHo,_Ho,av,Tpe,uHo,bHo,cX,vHo,FHo,THo,nv,Mpe,MHo,EHo,fX,CHo,wHo,AHo,sv,yHo,Epe,LHo,xHo,Cpe,$Ho,kHo,lv,qqe,ld,iv,wpe,Wy,SHo,Ape,RHo,Nqe,Do,Qy,PHo,id,BHo,mX,IHo,qHo,gX,NHo,jHo,DHo,Hy,GHo,ype,OHo,VHo,XHo,_t,Uy,zHo,Lpe,WHo,QHo,dd,HHo,xpe,UHo,JHo,hX,YHo,KHo,ZHo,dv,eUo,io,Jy,oUo,$pe,rUo,tUo,Da,aUo,kpe,nUo,sUo,Spe,lUo,iUo,Rpe,dUo,cUo,fUo,Ppe,cv,Bpe,mUo,gUo,pX,hUo,pUo,_Uo,fv,uUo,Ipe,bUo,vUo,qpe,FUo,TUo,mv,jqe,cd,gv,Npe,Yy,MUo,jpe,EUo,Dqe,Go,Ky,CUo,fd,wUo,_X,AUo,yUo,uX,LUo,xUo,$Uo,Zy,kUo,Dpe,SUo,RUo,PUo,ut,eL,BUo,Gpe,IUo,qUo,md,NUo,Ope,jUo,DUo,bX,GUo,OUo,VUo,hv,XUo,co,oL,zUo,Vpe,WUo,QUo,Ga,HUo,Xpe,UUo,JUo,zpe,YUo,KUo,Wpe,ZUo,eJo,oJo,ke,pv,Qpe,rJo,tJo,vX,aJo,nJo,sJo,_v,Hpe,lJo,iJo,FX,dJo,cJo,fJo,uv,Upe,mJo,gJo,TX,hJo,pJo,_Jo,bv,Jpe,uJo,bJo,MX,vJo,FJo,TJo,vv,Ype,MJo,EJo,EX,CJo,wJo,AJo,Fv,Kpe,yJo,LJo,CX,xJo,$Jo,kJo,Tv,Zpe,SJo,RJo,wX,PJo,BJo,IJo,Mv,e_e,qJo,NJo,AX,jJo,DJo,GJo,Ev,o_e,OJo,VJo,yX,XJo,zJo,WJo,Cv,QJo,r_e,HJo,UJo,t_e,JJo,YJo,wv,Gqe,gd,Av,a_e,rL,KJo,n_e,ZJo,Oqe,Oo,tL,eYo,hd,oYo,LX,rYo,tYo,xX,aYo,nYo,sYo,aL,lYo,s_e,iYo,dYo,cYo,bt,nL,fYo,l_e,mYo,gYo,pd,hYo,i_e,pYo,_Yo,$X,uYo,bYo,vYo,yv,FYo,fo,sL,TYo,d_e,MYo,EYo,Oa,CYo,c_e,wYo,AYo,f_e,yYo,LYo,m_e,xYo,$Yo,kYo,Kr,Lv,g_e,SYo,RYo,kX,PYo,BYo,IYo,xv,h_e,qYo,NYo,SX,jYo,DYo,GYo,$v,p_e,OYo,VYo,RX,XYo,zYo,WYo,kv,__e,QYo,HYo,PX,UYo,JYo,YYo,Sv,u_e,KYo,ZYo,BX,eKo,oKo,rKo,Rv,tKo,b_e,aKo,nKo,v_e,sKo,lKo,Pv,Vqe,_d,Bv,F_e,lL,iKo,T_e,dKo,Xqe,Vo,iL,cKo,ud,fKo,IX,mKo,gKo,qX,hKo,pKo,_Ko,dL,uKo,M_e,bKo,vKo,FKo,vt,cL,TKo,E_e,MKo,EKo,bd,CKo,C_e,wKo,AKo,NX,yKo,LKo,xKo,Iv,$Ko,mo,fL,kKo,w_e,SKo,RKo,Va,PKo,A_e,BKo,IKo,y_e,qKo,NKo,L_e,jKo,DKo,GKo,Se,qv,x_e,OKo,VKo,jX,XKo,zKo,WKo,Nv,$_e,QKo,HKo,DX,UKo,JKo,YKo,jv,k_e,KKo,ZKo,GX,eZo,oZo,rZo,Dv,S_e,tZo,aZo,OX,nZo,sZo,lZo,Gv,R_e,iZo,dZo,VX,cZo,fZo,mZo,Ov,P_e,gZo,hZo,XX,pZo,_Zo,uZo,Vv,B_e,bZo,vZo,zX,FZo,TZo,MZo,Xv,I_e,EZo,CZo,WX,wZo,AZo,yZo,zv,q_e,LZo,xZo,QX,$Zo,kZo,SZo,Wv,RZo,N_e,PZo,BZo,j_e,IZo,qZo,Qv,zqe,vd,Hv,D_e,mL,NZo,G_e,jZo,Wqe,Xo,gL,DZo,Fd,GZo,HX,OZo,VZo,UX,XZo,zZo,WZo,hL,QZo,O_e,HZo,UZo,JZo,Ft,pL,YZo,V_e,KZo,ZZo,Td,eer,X_e,oer,rer,JX,ter,aer,ner,Uv,ser,go,_L,ler,z_e,ier,der,Xa,cer,W_e,fer,mer,Q_e,ger,her,H_e,per,_er,uer,uL,Jv,U_e,ber,ver,YX,Fer,Ter,Mer,Yv,J_e,Eer,Cer,KX,wer,Aer,yer,Kv,Ler,Y_e,xer,$er,K_e,ker,Ser,Zv,Qqe,Md,eF,Z_e,bL,Rer,eue,Per,Hqe,zo,vL,Ber,Ed,Ier,ZX,qer,Ner,ez,jer,Der,Ger,FL,Oer,oue,Ver,Xer,zer,Tt,TL,Wer,rue,Qer,Her,Cd,Uer,tue,Jer,Yer,oz,Ker,Zer,eor,oF,oor,ho,ML,ror,aue,tor,aor,za,nor,nue,sor,lor,sue,ior,dor,lue,cor,mor,gor,Zr,rF,iue,hor,por,rz,_or,uor,bor,tF,due,vor,For,tz,Tor,Mor,Eor,aF,cue,Cor,wor,az,Aor,yor,Lor,nF,fue,xor,$or,nz,kor,Sor,Ror,sF,mue,Por,Bor,sz,Ior,qor,Nor,lF,jor,gue,Dor,Gor,hue,Oor,Vor,iF,Uqe,wd,dF,pue,EL,Xor,_ue,zor,Jqe,Wo,CL,Wor,Ad,Qor,lz,Hor,Uor,iz,Jor,Yor,Kor,wL,Zor,uue,err,orr,rrr,Mt,AL,trr,bue,arr,nrr,yd,srr,vue,lrr,irr,dz,drr,crr,frr,cF,mrr,po,yL,grr,Fue,hrr,prr,Wa,_rr,Tue,urr,brr,Mue,vrr,Frr,Eue,Trr,Mrr,Err,Ld,fF,Cue,Crr,wrr,cz,Arr,yrr,Lrr,mF,wue,xrr,$rr,fz,krr,Srr,Rrr,gF,Aue,Prr,Brr,mz,Irr,qrr,Nrr,hF,jrr,yue,Drr,Grr,Lue,Orr,Vrr,pF,Yqe,xd,_F,xue,LL,Xrr,$ue,zrr,Kqe,Qo,xL,Wrr,$d,Qrr,gz,Hrr,Urr,hz,Jrr,Yrr,Krr,$L,Zrr,kue,etr,otr,rtr,Et,kL,ttr,Sue,atr,ntr,kd,str,Rue,ltr,itr,pz,dtr,ctr,ftr,uF,mtr,_o,SL,gtr,Pue,htr,ptr,Qa,_tr,Bue,utr,btr,Iue,vtr,Ftr,que,Ttr,Mtr,Etr,RL,bF,Nue,Ctr,wtr,_z,Atr,ytr,Ltr,vF,jue,xtr,$tr,uz,ktr,Str,Rtr,FF,Ptr,Due,Btr,Itr,Gue,qtr,Ntr,TF,Zqe,Sd,MF,Oue,PL,jtr,Vue,Dtr,eNe,Ho,BL,Gtr,Rd,Otr,bz,Vtr,Xtr,vz,ztr,Wtr,Qtr,IL,Htr,Xue,Utr,Jtr,Ytr,Ct,qL,Ktr,zue,Ztr,ear,Pd,oar,Wue,rar,tar,Fz,aar,nar,sar,EF,lar,uo,NL,iar,Que,dar,car,Ha,far,Hue,mar,gar,Uue,har,par,Jue,_ar,uar,bar,Yue,CF,Kue,Far,Tar,Tz,Mar,Ear,Car,wF,war,Zue,Aar,yar,e2e,Lar,xar,AF,oNe,Bd,yF,o2e,jL,$ar,r2e,kar,rNe,Uo,DL,Sar,Id,Rar,Mz,Par,Bar,Ez,Iar,qar,Nar,GL,jar,t2e,Dar,Gar,Oar,wt,OL,Var,a2e,Xar,zar,qd,War,n2e,Qar,Har,Cz,Uar,Jar,Yar,LF,Kar,bo,VL,Zar,s2e,enr,onr,Ua,rnr,l2e,tnr,anr,i2e,nnr,snr,d2e,lnr,inr,dnr,Ja,xF,c2e,cnr,fnr,wz,mnr,gnr,hnr,$F,f2e,pnr,_nr,Az,unr,bnr,vnr,kF,m2e,Fnr,Tnr,yz,Mnr,Enr,Cnr,SF,g2e,wnr,Anr,Lz,ynr,Lnr,xnr,RF,$nr,h2e,knr,Snr,p2e,Rnr,Pnr,PF,tNe,Nd,BF,_2e,XL,Bnr,u2e,Inr,aNe,Jo,zL,qnr,jd,Nnr,xz,jnr,Dnr,$z,Gnr,Onr,Vnr,WL,Xnr,b2e,znr,Wnr,Qnr,At,QL,Hnr,v2e,Unr,Jnr,Dd,Ynr,F2e,Knr,Znr,kz,esr,osr,rsr,IF,tsr,vo,HL,asr,T2e,nsr,ssr,Ya,lsr,M2e,isr,dsr,E2e,csr,fsr,C2e,msr,gsr,hsr,w2e,qF,A2e,psr,_sr,Sz,usr,bsr,vsr,NF,Fsr,y2e,Tsr,Msr,L2e,Esr,Csr,jF,nNe,Gd,DF,x2e,UL,wsr,$2e,Asr,sNe,Yo,JL,ysr,Od,Lsr,Rz,xsr,$sr,Pz,ksr,Ssr,Rsr,YL,Psr,k2e,Bsr,Isr,qsr,yt,KL,Nsr,S2e,jsr,Dsr,Vd,Gsr,R2e,Osr,Vsr,Bz,Xsr,zsr,Wsr,GF,Qsr,wr,ZL,Hsr,P2e,Usr,Jsr,Ka,Ysr,B2e,Ksr,Zsr,I2e,elr,olr,q2e,rlr,tlr,alr,N,OF,N2e,nlr,slr,Iz,llr,ilr,dlr,VF,j2e,clr,flr,qz,mlr,glr,hlr,XF,D2e,plr,_lr,Nz,ulr,blr,vlr,zF,G2e,Flr,Tlr,jz,Mlr,Elr,Clr,WF,O2e,wlr,Alr,Dz,ylr,Llr,xlr,QF,V2e,$lr,klr,Gz,Slr,Rlr,Plr,HF,X2e,Blr,Ilr,Oz,qlr,Nlr,jlr,UF,z2e,Dlr,Glr,Vz,Olr,Vlr,Xlr,JF,W2e,zlr,Wlr,Xz,Qlr,Hlr,Ulr,YF,Q2e,Jlr,Ylr,zz,Klr,Zlr,eir,KF,H2e,oir,rir,Wz,tir,air,nir,ZF,U2e,sir,lir,Qz,iir,dir,cir,eT,J2e,fir,mir,Hz,gir,hir,pir,oT,Y2e,_ir,uir,Uz,bir,vir,Fir,rT,K2e,Tir,Mir,Jz,Eir,Cir,wir,tT,Z2e,Air,yir,Yz,Lir,xir,$ir,aT,e1e,kir,Sir,Kz,Rir,Pir,Bir,Is,o1e,Iir,qir,Zz,Nir,jir,eW,Dir,Gir,Oir,nT,r1e,Vir,Xir,oW,zir,Wir,Qir,sT,t1e,Hir,Uir,rW,Jir,Yir,Kir,lT,a1e,Zir,edr,tW,odr,rdr,tdr,iT,n1e,adr,ndr,aW,sdr,ldr,idr,dT,s1e,ddr,cdr,nW,fdr,mdr,gdr,cT,l1e,hdr,pdr,sW,_dr,udr,bdr,fT,i1e,vdr,Fdr,lW,Tdr,Mdr,Edr,mT,d1e,Cdr,wdr,iW,Adr,ydr,Ldr,gT,c1e,xdr,$dr,dW,kdr,Sdr,Rdr,hT,f1e,Pdr,Bdr,cW,Idr,qdr,Ndr,pT,m1e,jdr,Ddr,fW,Gdr,Odr,Vdr,_T,g1e,Xdr,zdr,mW,Wdr,Qdr,Hdr,uT,h1e,Udr,Jdr,gW,Ydr,Kdr,Zdr,bT,p1e,ecr,ocr,hW,rcr,tcr,acr,vT,_1e,ncr,scr,pW,lcr,icr,dcr,FT,u1e,ccr,fcr,_W,mcr,gcr,hcr,TT,b1e,pcr,_cr,uW,ucr,bcr,vcr,MT,v1e,Fcr,Tcr,bW,Mcr,Ecr,Ccr,ET,F1e,wcr,Acr,vW,ycr,Lcr,xcr,CT,T1e,$cr,kcr,FW,Scr,Rcr,Pcr,wT,M1e,Bcr,Icr,TW,qcr,Ncr,jcr,AT,E1e,Dcr,Gcr,MW,Ocr,Vcr,Xcr,yT,C1e,zcr,Wcr,EW,Qcr,Hcr,Ucr,LT,w1e,Jcr,Ycr,CW,Kcr,Zcr,efr,xT,A1e,ofr,rfr,wW,tfr,afr,nfr,$T,y1e,sfr,lfr,AW,ifr,dfr,cfr,kT,L1e,ffr,mfr,yW,gfr,hfr,pfr,ST,x1e,_fr,ufr,LW,bfr,vfr,Ffr,RT,lNe,Xd,PT,$1e,e8,Tfr,k1e,Mfr,iNe,Ko,o8,Efr,zd,Cfr,xW,wfr,Afr,$W,yfr,Lfr,xfr,r8,$fr,S1e,kfr,Sfr,Rfr,Lt,t8,Pfr,R1e,Bfr,Ifr,Wd,qfr,P1e,Nfr,jfr,kW,Dfr,Gfr,Ofr,BT,Vfr,Ar,a8,Xfr,B1e,zfr,Wfr,Za,Qfr,I1e,Hfr,Ufr,q1e,Jfr,Yfr,N1e,Kfr,Zfr,emr,se,IT,j1e,omr,rmr,SW,tmr,amr,nmr,qT,D1e,smr,lmr,RW,imr,dmr,cmr,NT,G1e,fmr,mmr,PW,gmr,hmr,pmr,jT,O1e,_mr,umr,BW,bmr,vmr,Fmr,DT,V1e,Tmr,Mmr,IW,Emr,Cmr,wmr,GT,X1e,Amr,ymr,qW,Lmr,xmr,$mr,OT,z1e,kmr,Smr,NW,Rmr,Pmr,Bmr,VT,W1e,Imr,qmr,jW,Nmr,jmr,Dmr,XT,Q1e,Gmr,Omr,DW,Vmr,Xmr,zmr,zT,H1e,Wmr,Qmr,GW,Hmr,Umr,Jmr,WT,U1e,Ymr,Kmr,OW,Zmr,egr,ogr,QT,J1e,rgr,tgr,VW,agr,ngr,sgr,HT,Y1e,lgr,igr,XW,dgr,cgr,fgr,UT,K1e,mgr,ggr,zW,hgr,pgr,_gr,JT,Z1e,ugr,bgr,WW,vgr,Fgr,Tgr,YT,ebe,Mgr,Egr,QW,Cgr,wgr,Agr,KT,obe,ygr,Lgr,HW,xgr,$gr,kgr,ZT,rbe,Sgr,Rgr,UW,Pgr,Bgr,Igr,e7,tbe,qgr,Ngr,JW,jgr,Dgr,Ggr,o7,abe,Ogr,Vgr,YW,Xgr,zgr,Wgr,r7,nbe,Qgr,Hgr,KW,Ugr,Jgr,Ygr,t7,sbe,Kgr,Zgr,ZW,ehr,ohr,rhr,a7,lbe,thr,ahr,eQ,nhr,shr,lhr,n7,dNe,Qd,s7,ibe,n8,ihr,dbe,dhr,cNe,Zo,s8,chr,Hd,fhr,oQ,mhr,ghr,rQ,hhr,phr,_hr,l8,uhr,cbe,bhr,vhr,Fhr,xt,i8,Thr,fbe,Mhr,Ehr,Ud,Chr,mbe,whr,Ahr,tQ,yhr,Lhr,xhr,l7,$hr,yr,d8,khr,gbe,Shr,Rhr,en,Phr,hbe,Bhr,Ihr,pbe,qhr,Nhr,_be,jhr,Dhr,Ghr,Me,i7,ube,Ohr,Vhr,aQ,Xhr,zhr,Whr,d7,bbe,Qhr,Hhr,nQ,Uhr,Jhr,Yhr,c7,vbe,Khr,Zhr,sQ,epr,opr,rpr,f7,Fbe,tpr,apr,lQ,npr,spr,lpr,m7,Tbe,ipr,dpr,iQ,cpr,fpr,mpr,g7,Mbe,gpr,hpr,dQ,ppr,_pr,upr,h7,Ebe,bpr,vpr,cQ,Fpr,Tpr,Mpr,p7,Cbe,Epr,Cpr,fQ,wpr,Apr,ypr,_7,wbe,Lpr,xpr,mQ,$pr,kpr,Spr,u7,Abe,Rpr,Ppr,gQ,Bpr,Ipr,qpr,b7,ybe,Npr,jpr,hQ,Dpr,Gpr,Opr,v7,Lbe,Vpr,Xpr,pQ,zpr,Wpr,Qpr,F7,fNe,Jd,T7,xbe,c8,Hpr,$be,Upr,mNe,er,f8,Jpr,Yd,Ypr,_Q,Kpr,Zpr,uQ,e_r,o_r,r_r,m8,t_r,kbe,a_r,n_r,s_r,$t,g8,l_r,Sbe,i_r,d_r,Kd,c_r,Rbe,f_r,m_r,bQ,g_r,h_r,p_r,M7,__r,Lr,h8,u_r,Pbe,b_r,v_r,on,F_r,Bbe,T_r,M_r,Ibe,E_r,C_r,qbe,w_r,A_r,y_r,rn,E7,Nbe,L_r,x_r,vQ,$_r,k_r,S_r,C7,jbe,R_r,P_r,FQ,B_r,I_r,q_r,w7,Dbe,N_r,j_r,TQ,D_r,G_r,O_r,A7,Gbe,V_r,X_r,MQ,z_r,W_r,Q_r,y7,gNe,Zd,L7,Obe,p8,H_r,Vbe,U_r,hNe,or,_8,J_r,ec,Y_r,EQ,K_r,Z_r,CQ,eur,our,rur,u8,tur,Xbe,aur,nur,sur,kt,b8,lur,zbe,iur,dur,oc,cur,Wbe,fur,mur,wQ,gur,hur,pur,x7,_ur,xr,v8,uur,Qbe,bur,vur,tn,Fur,Hbe,Tur,Mur,Ube,Eur,Cur,Jbe,wur,Aur,yur,ie,$7,Ybe,Lur,xur,AQ,$ur,kur,Sur,k7,Kbe,Rur,Pur,yQ,Bur,Iur,qur,S7,Zbe,Nur,jur,LQ,Dur,Gur,Our,R7,e4e,Vur,Xur,xQ,zur,Wur,Qur,P7,o4e,Hur,Uur,$Q,Jur,Yur,Kur,B7,r4e,Zur,e2r,kQ,o2r,r2r,t2r,I7,t4e,a2r,n2r,SQ,s2r,l2r,i2r,q7,a4e,d2r,c2r,RQ,f2r,m2r,g2r,N7,n4e,h2r,p2r,PQ,_2r,u2r,b2r,j7,s4e,v2r,F2r,BQ,T2r,M2r,E2r,D7,l4e,C2r,w2r,IQ,A2r,y2r,L2r,G7,i4e,x2r,$2r,qQ,k2r,S2r,R2r,O7,d4e,P2r,B2r,NQ,I2r,q2r,N2r,V7,c4e,j2r,D2r,jQ,G2r,O2r,V2r,X7,f4e,X2r,z2r,DQ,W2r,Q2r,H2r,z7,m4e,U2r,J2r,GQ,Y2r,K2r,Z2r,W7,g4e,e1r,o1r,OQ,r1r,t1r,a1r,Q7,h4e,n1r,s1r,VQ,l1r,i1r,d1r,H7,p4e,c1r,f1r,XQ,m1r,g1r,h1r,U7,_4e,p1r,_1r,zQ,u1r,b1r,v1r,J7,pNe,rc,Y7,u4e,F8,F1r,b4e,T1r,_Ne,rr,T8,M1r,tc,E1r,WQ,C1r,w1r,QQ,A1r,y1r,L1r,M8,x1r,v4e,$1r,k1r,S1r,St,E8,R1r,F4e,P1r,B1r,ac,I1r,T4e,q1r,N1r,HQ,j1r,D1r,G1r,K7,O1r,$r,C8,V1r,M4e,X1r,z1r,an,W1r,E4e,Q1r,H1r,C4e,U1r,J1r,w4e,Y1r,K1r,Z1r,ye,Z7,A4e,ebr,obr,UQ,rbr,tbr,abr,eM,y4e,nbr,sbr,JQ,lbr,ibr,dbr,oM,L4e,cbr,fbr,YQ,mbr,gbr,hbr,rM,x4e,pbr,_br,KQ,ubr,bbr,vbr,tM,$4e,Fbr,Tbr,ZQ,Mbr,Ebr,Cbr,aM,k4e,wbr,Abr,eH,ybr,Lbr,xbr,nM,S4e,$br,kbr,oH,Sbr,Rbr,Pbr,sM,R4e,Bbr,Ibr,rH,qbr,Nbr,jbr,lM,P4e,Dbr,Gbr,tH,Obr,Vbr,Xbr,iM,B4e,zbr,Wbr,aH,Qbr,Hbr,Ubr,dM,uNe,nc,cM,I4e,w8,Jbr,q4e,Ybr,bNe,tr,A8,Kbr,sc,Zbr,nH,e4r,o4r,sH,r4r,t4r,a4r,y8,n4r,N4e,s4r,l4r,i4r,Rt,L8,d4r,j4e,c4r,f4r,lc,m4r,D4e,g4r,h4r,lH,p4r,_4r,u4r,fM,b4r,kr,x8,v4r,G4e,F4r,T4r,nn,M4r,O4e,E4r,C4r,V4e,w4r,A4r,X4e,y4r,L4r,x4r,ee,mM,z4e,$4r,k4r,iH,S4r,R4r,P4r,gM,W4e,B4r,I4r,dH,q4r,N4r,j4r,hM,Q4e,D4r,G4r,cH,O4r,V4r,X4r,pM,H4e,z4r,W4r,fH,Q4r,H4r,U4r,_M,U4e,J4r,Y4r,mH,K4r,Z4r,e5r,uM,J4e,o5r,r5r,gH,t5r,a5r,n5r,bM,Y4e,s5r,l5r,hH,i5r,d5r,c5r,vM,K4e,f5r,m5r,pH,g5r,h5r,p5r,FM,Z4e,_5r,u5r,_H,b5r,v5r,F5r,TM,e5e,T5r,M5r,uH,E5r,C5r,w5r,MM,o5e,A5r,y5r,bH,L5r,x5r,$5r,EM,r5e,k5r,S5r,vH,R5r,P5r,B5r,CM,t5e,I5r,q5r,FH,N5r,j5r,D5r,wM,a5e,G5r,O5r,TH,V5r,X5r,z5r,AM,n5e,W5r,Q5r,MH,H5r,U5r,J5r,yM,s5e,Y5r,K5r,EH,Z5r,evr,ovr,LM,l5e,rvr,tvr,CH,avr,nvr,svr,xM,i5e,lvr,ivr,wH,dvr,cvr,fvr,$M,d5e,mvr,gvr,AH,hvr,pvr,_vr,kM,c5e,uvr,bvr,yH,vvr,Fvr,Tvr,SM,f5e,Mvr,Evr,LH,Cvr,wvr,Avr,RM,m5e,yvr,Lvr,xH,xvr,$vr,kvr,PM,g5e,Svr,Rvr,$H,Pvr,Bvr,Ivr,BM,h5e,qvr,Nvr,kH,jvr,Dvr,Gvr,IM,p5e,Ovr,Vvr,SH,Xvr,zvr,Wvr,qM,_5e,Qvr,Hvr,RH,Uvr,Jvr,Yvr,NM,vNe,ic,jM,u5e,$8,Kvr,b5e,Zvr,FNe,ar,k8,eFr,dc,oFr,PH,rFr,tFr,BH,aFr,nFr,sFr,S8,lFr,v5e,iFr,dFr,cFr,Pt,R8,fFr,F5e,mFr,gFr,cc,hFr,T5e,pFr,_Fr,IH,uFr,bFr,vFr,DM,FFr,Sr,P8,TFr,M5e,MFr,EFr,sn,CFr,E5e,wFr,AFr,C5e,yFr,LFr,w5e,xFr,$Fr,kFr,he,GM,A5e,SFr,RFr,qH,PFr,BFr,IFr,OM,y5e,qFr,NFr,NH,jFr,DFr,GFr,VM,L5e,OFr,VFr,jH,XFr,zFr,WFr,XM,x5e,QFr,HFr,DH,UFr,JFr,YFr,zM,$5e,KFr,ZFr,GH,eTr,oTr,rTr,WM,k5e,tTr,aTr,OH,nTr,sTr,lTr,QM,S5e,iTr,dTr,VH,cTr,fTr,mTr,HM,R5e,gTr,hTr,XH,pTr,_Tr,uTr,UM,P5e,bTr,vTr,zH,FTr,TTr,MTr,JM,B5e,ETr,CTr,WH,wTr,ATr,yTr,YM,I5e,LTr,xTr,QH,$Tr,kTr,STr,KM,q5e,RTr,PTr,HH,BTr,ITr,qTr,ZM,N5e,NTr,jTr,UH,DTr,GTr,OTr,eE,j5e,VTr,XTr,JH,zTr,WTr,QTr,oE,D5e,HTr,UTr,YH,JTr,YTr,KTr,rE,G5e,ZTr,e7r,KH,o7r,r7r,t7r,tE,O5e,a7r,n7r,ZH,s7r,l7r,i7r,aE,TNe,fc,nE,V5e,B8,d7r,X5e,c7r,MNe,nr,I8,f7r,mc,m7r,eU,g7r,h7r,oU,p7r,_7r,u7r,q8,b7r,z5e,v7r,F7r,T7r,Bt,N8,M7r,W5e,E7r,C7r,gc,w7r,Q5e,A7r,y7r,rU,L7r,x7r,$7r,sE,k7r,Rr,j8,S7r,H5e,R7r,P7r,ln,B7r,U5e,I7r,q7r,J5e,N7r,j7r,Y5e,D7r,G7r,O7r,D8,lE,K5e,V7r,X7r,tU,z7r,W7r,Q7r,iE,Z5e,H7r,U7r,aU,J7r,Y7r,K7r,dE,ENe,hc,cE,eve,G8,Z7r,ove,eMr,CNe,sr,O8,oMr,pc,rMr,nU,tMr,aMr,sU,nMr,sMr,lMr,V8,iMr,rve,dMr,cMr,fMr,It,X8,mMr,tve,gMr,hMr,_c,pMr,ave,_Mr,uMr,lU,bMr,vMr,FMr,fE,TMr,Pr,z8,MMr,nve,EMr,CMr,dn,wMr,sve,AMr,yMr,lve,LMr,xMr,ive,$Mr,kMr,SMr,dve,mE,cve,RMr,PMr,iU,BMr,IMr,qMr,gE,wNe,uc,hE,fve,W8,NMr,mve,jMr,ANe,lr,Q8,DMr,bc,GMr,dU,OMr,VMr,cU,XMr,zMr,WMr,H8,QMr,gve,HMr,UMr,JMr,qt,U8,YMr,hve,KMr,ZMr,vc,eEr,pve,oEr,rEr,fU,tEr,aEr,nEr,pE,sEr,Br,J8,lEr,_ve,iEr,dEr,cn,cEr,uve,fEr,mEr,bve,gEr,hEr,vve,pEr,_Er,uEr,de,_E,Fve,bEr,vEr,mU,FEr,TEr,MEr,uE,Tve,EEr,CEr,gU,wEr,AEr,yEr,bE,Mve,LEr,xEr,hU,$Er,kEr,SEr,vE,Eve,REr,PEr,pU,BEr,IEr,qEr,FE,Cve,NEr,jEr,_U,DEr,GEr,OEr,TE,wve,VEr,XEr,uU,zEr,WEr,QEr,ME,Ave,HEr,UEr,bU,JEr,YEr,KEr,EE,yve,ZEr,eCr,vU,oCr,rCr,tCr,CE,Lve,aCr,nCr,FU,sCr,lCr,iCr,wE,xve,dCr,cCr,TU,fCr,mCr,gCr,AE,$ve,hCr,pCr,MU,_Cr,uCr,bCr,yE,kve,vCr,FCr,EU,TCr,MCr,ECr,LE,Sve,CCr,wCr,CU,ACr,yCr,LCr,xE,Rve,xCr,$Cr,wU,kCr,SCr,RCr,$E,Pve,PCr,BCr,AU,ICr,qCr,NCr,kE,Bve,jCr,DCr,yU,GCr,OCr,VCr,SE,Ive,XCr,zCr,LU,WCr,QCr,HCr,RE,qve,UCr,JCr,xU,YCr,KCr,ZCr,PE,Nve,e3r,o3r,$U,r3r,t3r,a3r,BE,jve,n3r,s3r,kU,l3r,i3r,d3r,IE,yNe,Fc,qE,Dve,Y8,c3r,Gve,f3r,LNe,ir,K8,m3r,Tc,g3r,SU,h3r,p3r,RU,_3r,u3r,b3r,Z8,v3r,Ove,F3r,T3r,M3r,Nt,e9,E3r,Vve,C3r,w3r,Mc,A3r,Xve,y3r,L3r,PU,x3r,$3r,k3r,NE,S3r,Ir,o9,R3r,zve,P3r,B3r,fn,I3r,Wve,q3r,N3r,Qve,j3r,D3r,Hve,G3r,O3r,V3r,ce,jE,Uve,X3r,z3r,BU,W3r,Q3r,H3r,DE,Jve,U3r,J3r,IU,Y3r,K3r,Z3r,GE,Yve,ewr,owr,qU,rwr,twr,awr,OE,Kve,nwr,swr,NU,lwr,iwr,dwr,VE,Zve,cwr,fwr,jU,mwr,gwr,hwr,XE,eFe,pwr,_wr,DU,uwr,bwr,vwr,zE,oFe,Fwr,Twr,GU,Mwr,Ewr,Cwr,WE,rFe,wwr,Awr,OU,ywr,Lwr,xwr,QE,tFe,$wr,kwr,VU,Swr,Rwr,Pwr,HE,aFe,Bwr,Iwr,XU,qwr,Nwr,jwr,UE,nFe,Dwr,Gwr,zU,Owr,Vwr,Xwr,JE,sFe,zwr,Wwr,WU,Qwr,Hwr,Uwr,YE,lFe,Jwr,Ywr,QU,Kwr,Zwr,e0r,KE,iFe,o0r,r0r,HU,t0r,a0r,n0r,ZE,dFe,s0r,l0r,UU,i0r,d0r,c0r,eC,cFe,f0r,m0r,JU,g0r,h0r,p0r,oC,fFe,_0r,u0r,YU,b0r,v0r,F0r,rC,mFe,T0r,M0r,KU,E0r,C0r,w0r,tC,gFe,A0r,y0r,ZU,L0r,x0r,$0r,aC,hFe,k0r,S0r,eJ,R0r,P0r,B0r,nC,xNe,Ec,sC,pFe,r9,I0r,_Fe,q0r,$Ne,dr,t9,N0r,Cc,j0r,oJ,D0r,G0r,rJ,O0r,V0r,X0r,a9,z0r,uFe,W0r,Q0r,H0r,jt,n9,U0r,bFe,J0r,Y0r,wc,K0r,vFe,Z0r,eAr,tJ,oAr,rAr,tAr,lC,aAr,qr,s9,nAr,FFe,sAr,lAr,mn,iAr,TFe,dAr,cAr,MFe,fAr,mAr,EFe,gAr,hAr,pAr,CFe,iC,wFe,_Ar,uAr,aJ,bAr,vAr,FAr,dC,kNe,Ac,cC,AFe,l9,TAr,yFe,MAr,SNe,cr,i9,EAr,yc,CAr,nJ,wAr,AAr,sJ,yAr,LAr,xAr,d9,$Ar,LFe,kAr,SAr,RAr,Dt,c9,PAr,xFe,BAr,IAr,Lc,qAr,$Fe,NAr,jAr,lJ,DAr,GAr,OAr,fC,VAr,Nr,f9,XAr,kFe,zAr,WAr,gn,QAr,SFe,HAr,UAr,RFe,JAr,YAr,PFe,KAr,ZAr,e6r,BFe,mC,IFe,o6r,r6r,iJ,t6r,a6r,n6r,gC,RNe,xc,hC,qFe,m9,s6r,NFe,l6r,PNe,fr,g9,i6r,$c,d6r,dJ,c6r,f6r,cJ,m6r,g6r,h6r,h9,p6r,jFe,_6r,u6r,b6r,Gt,p9,v6r,DFe,F6r,T6r,kc,M6r,GFe,E6r,C6r,fJ,w6r,A6r,y6r,pC,L6r,jr,_9,x6r,OFe,$6r,k6r,hn,S6r,VFe,R6r,P6r,XFe,B6r,I6r,zFe,q6r,N6r,j6r,te,_C,WFe,D6r,G6r,mJ,O6r,V6r,X6r,uC,QFe,z6r,W6r,gJ,Q6r,H6r,U6r,bC,HFe,J6r,Y6r,hJ,K6r,Z6r,eyr,vC,UFe,oyr,ryr,pJ,tyr,ayr,nyr,FC,JFe,syr,lyr,_J,iyr,dyr,cyr,TC,YFe,fyr,myr,uJ,gyr,hyr,pyr,MC,KFe,_yr,uyr,bJ,byr,vyr,Fyr,EC,ZFe,Tyr,Myr,vJ,Eyr,Cyr,wyr,CC,eTe,Ayr,yyr,FJ,Lyr,xyr,$yr,wC,oTe,kyr,Syr,TJ,Ryr,Pyr,Byr,AC,rTe,Iyr,qyr,MJ,Nyr,jyr,Dyr,yC,tTe,Gyr,Oyr,EJ,Vyr,Xyr,zyr,LC,aTe,Wyr,Qyr,CJ,Hyr,Uyr,Jyr,xC,nTe,Yyr,Kyr,wJ,Zyr,eLr,oLr,$C,sTe,rLr,tLr,AJ,aLr,nLr,sLr,kC,lTe,lLr,iLr,yJ,dLr,cLr,fLr,SC,iTe,mLr,gLr,LJ,hLr,pLr,_Lr,RC,dTe,uLr,bLr,xJ,vLr,FLr,TLr,PC,cTe,MLr,ELr,$J,CLr,wLr,ALr,BC,fTe,yLr,LLr,kJ,xLr,$Lr,kLr,IC,mTe,SLr,RLr,SJ,PLr,BLr,ILr,qC,gTe,qLr,NLr,RJ,jLr,DLr,GLr,NC,hTe,OLr,VLr,PJ,XLr,zLr,WLr,jC,pTe,QLr,HLr,BJ,ULr,JLr,YLr,DC,_Te,KLr,ZLr,IJ,e8r,o8r,r8r,GC,BNe,Sc,OC,uTe,u9,t8r,bTe,a8r,INe,mr,b9,n8r,Rc,s8r,qJ,l8r,i8r,NJ,d8r,c8r,f8r,v9,m8r,vTe,g8r,h8r,p8r,Ot,F9,_8r,FTe,u8r,b8r,Pc,v8r,TTe,F8r,T8r,jJ,M8r,E8r,C8r,VC,w8r,Dr,T9,A8r,MTe,y8r,L8r,pn,x8r,ETe,$8r,k8r,CTe,S8r,R8r,wTe,P8r,B8r,I8r,Re,XC,ATe,q8r,N8r,DJ,j8r,D8r,G8r,zC,yTe,O8r,V8r,GJ,X8r,z8r,W8r,WC,LTe,Q8r,H8r,OJ,U8r,J8r,Y8r,QC,xTe,K8r,Z8r,VJ,e9r,o9r,r9r,HC,$Te,t9r,a9r,XJ,n9r,s9r,l9r,UC,kTe,i9r,d9r,zJ,c9r,f9r,m9r,JC,STe,g9r,h9r,WJ,p9r,_9r,u9r,YC,RTe,b9r,v9r,QJ,F9r,T9r,M9r,KC,PTe,E9r,C9r,HJ,w9r,A9r,y9r,ZC,qNe,Bc,e3,BTe,M9,L9r,ITe,x9r,NNe,gr,E9,$9r,Ic,k9r,UJ,S9r,R9r,JJ,P9r,B9r,I9r,C9,q9r,qTe,N9r,j9r,D9r,Vt,w9,G9r,NTe,O9r,V9r,qc,X9r,jTe,z9r,W9r,YJ,Q9r,H9r,U9r,o3,J9r,Gr,A9,Y9r,DTe,K9r,Z9r,_n,exr,GTe,oxr,rxr,OTe,txr,axr,VTe,nxr,sxr,lxr,Ee,r3,XTe,ixr,dxr,KJ,cxr,fxr,mxr,t3,zTe,gxr,hxr,ZJ,pxr,_xr,uxr,a3,WTe,bxr,vxr,eY,Fxr,Txr,Mxr,n3,QTe,Exr,Cxr,oY,wxr,Axr,yxr,s3,HTe,Lxr,xxr,rY,$xr,kxr,Sxr,l3,UTe,Rxr,Pxr,tY,Bxr,Ixr,qxr,i3,JTe,Nxr,jxr,aY,Dxr,Gxr,Oxr,d3,YTe,Vxr,Xxr,nY,zxr,Wxr,Qxr,c3,KTe,Hxr,Uxr,sY,Jxr,Yxr,Kxr,f3,ZTe,Zxr,e$r,lY,o$r,r$r,t$r,m3,e7e,a$r,n$r,iY,s$r,l$r,i$r,g3,o7e,d$r,c$r,dY,f$r,m$r,g$r,h3,jNe,Nc,p3,r7e,y9,h$r,t7e,p$r,DNe,hr,L9,_$r,jc,u$r,cY,b$r,v$r,fY,F$r,T$r,M$r,x9,E$r,a7e,C$r,w$r,A$r,Xt,$9,y$r,n7e,L$r,x$r,Dc,$$r,s7e,k$r,S$r,mY,R$r,P$r,B$r,_3,I$r,Or,k9,q$r,l7e,N$r,j$r,un,D$r,i7e,G$r,O$r,d7e,V$r,X$r,c7e,z$r,W$r,Q$r,Le,u3,f7e,H$r,U$r,gY,J$r,Y$r,K$r,b3,m7e,Z$r,ekr,hY,okr,rkr,tkr,v3,g7e,akr,nkr,pY,skr,lkr,ikr,F3,h7e,dkr,ckr,_Y,fkr,mkr,gkr,T3,p7e,hkr,pkr,uY,_kr,ukr,bkr,M3,_7e,vkr,Fkr,bY,Tkr,Mkr,Ekr,E3,u7e,Ckr,wkr,vY,Akr,ykr,Lkr,C3,b7e,xkr,$kr,FY,kkr,Skr,Rkr,w3,v7e,Pkr,Bkr,TY,Ikr,qkr,Nkr,A3,F7e,jkr,Dkr,MY,Gkr,Okr,Vkr,y3,GNe,Gc,L3,T7e,S9,Xkr,M7e,zkr,ONe,pr,R9,Wkr,Oc,Qkr,EY,Hkr,Ukr,CY,Jkr,Ykr,Kkr,P9,Zkr,E7e,eSr,oSr,rSr,zt,B9,tSr,C7e,aSr,nSr,Vc,sSr,w7e,lSr,iSr,wY,dSr,cSr,fSr,x3,mSr,Vr,I9,gSr,A7e,hSr,pSr,bn,_Sr,y7e,uSr,bSr,L7e,vSr,FSr,x7e,TSr,MSr,ESr,Pe,$3,$7e,CSr,wSr,AY,ASr,ySr,LSr,k3,k7e,xSr,$Sr,yY,kSr,SSr,RSr,S3,S7e,PSr,BSr,LY,ISr,qSr,NSr,R3,R7e,jSr,DSr,xY,GSr,OSr,VSr,P3,P7e,XSr,zSr,$Y,WSr,QSr,HSr,B3,B7e,USr,JSr,kY,YSr,KSr,ZSr,I3,I7e,eRr,oRr,SY,rRr,tRr,aRr,q3,q7e,nRr,sRr,RY,lRr,iRr,dRr,N3,N7e,cRr,fRr,PY,mRr,gRr,hRr,j3,VNe,Xc,D3,j7e,q9,pRr,D7e,_Rr,XNe,_r,N9,uRr,zc,bRr,BY,vRr,FRr,IY,TRr,MRr,ERr,j9,CRr,G7e,wRr,ARr,yRr,Wt,D9,LRr,O7e,xRr,$Rr,Wc,kRr,V7e,SRr,RRr,qY,PRr,BRr,IRr,G3,qRr,Xr,G9,NRr,X7e,jRr,DRr,vn,GRr,z7e,ORr,VRr,W7e,XRr,zRr,Q7e,WRr,QRr,HRr,xe,O3,H7e,URr,JRr,NY,YRr,KRr,ZRr,V3,U7e,ePr,oPr,jY,rPr,tPr,aPr,X3,J7e,nPr,sPr,DY,lPr,iPr,dPr,z3,Y7e,cPr,fPr,GY,mPr,gPr,hPr,W3,K7e,pPr,_Pr,OY,uPr,bPr,vPr,Q3,Z7e,FPr,TPr,VY,MPr,EPr,CPr,H3,eMe,wPr,APr,XY,yPr,LPr,xPr,U3,oMe,$Pr,kPr,zY,SPr,RPr,PPr,J3,rMe,BPr,IPr,WY,qPr,NPr,jPr,Y3,tMe,DPr,GPr,QY,OPr,VPr,XPr,K3,zNe,Qc,Z3,aMe,O9,zPr,nMe,WPr,WNe,ur,V9,QPr,Hc,HPr,HY,UPr,JPr,UY,YPr,KPr,ZPr,X9,eBr,sMe,oBr,rBr,tBr,Qt,z9,aBr,lMe,nBr,sBr,Uc,lBr,iMe,iBr,dBr,JY,cBr,fBr,mBr,ew,gBr,zr,W9,hBr,dMe,pBr,_Br,Fn,uBr,cMe,bBr,vBr,fMe,FBr,TBr,mMe,MBr,EBr,CBr,$e,ow,gMe,wBr,ABr,YY,yBr,LBr,xBr,rw,hMe,$Br,kBr,KY,SBr,RBr,PBr,tw,pMe,BBr,IBr,ZY,qBr,NBr,jBr,aw,_Me,DBr,GBr,eK,OBr,VBr,XBr,nw,uMe,zBr,WBr,oK,QBr,HBr,UBr,sw,bMe,JBr,YBr,rK,KBr,ZBr,eIr,lw,vMe,oIr,rIr,tK,tIr,aIr,nIr,iw,FMe,sIr,lIr,aK,iIr,dIr,cIr,dw,TMe,fIr,mIr,nK,gIr,hIr,pIr,cw,MMe,_Ir,uIr,sK,bIr,vIr,FIr,fw,QNe,Jc,mw,EMe,Q9,TIr,CMe,MIr,HNe,br,H9,EIr,Yc,CIr,lK,wIr,AIr,iK,yIr,LIr,xIr,U9,$Ir,wMe,kIr,SIr,RIr,Ht,J9,PIr,AMe,BIr,IIr,Kc,qIr,yMe,NIr,jIr,dK,DIr,GIr,OIr,gw,VIr,Wr,Y9,XIr,LMe,zIr,WIr,Tn,QIr,xMe,HIr,UIr,$Me,JIr,YIr,kMe,KIr,ZIr,eqr,De,hw,SMe,oqr,rqr,cK,tqr,aqr,nqr,pw,RMe,sqr,lqr,fK,iqr,dqr,cqr,_w,PMe,fqr,mqr,mK,gqr,hqr,pqr,uw,BMe,_qr,uqr,gK,bqr,vqr,Fqr,bw,IMe,Tqr,Mqr,hK,Eqr,Cqr,wqr,vw,qMe,Aqr,yqr,pK,Lqr,xqr,$qr,Fw,NMe,kqr,Sqr,_K,Rqr,Pqr,Bqr,Tw,jMe,Iqr,qqr,uK,Nqr,jqr,Dqr,Mw,UNe,Zc,Ew,DMe,K9,Gqr,GMe,Oqr,JNe,vr,Z9,Vqr,ef,Xqr,bK,zqr,Wqr,vK,Qqr,Hqr,Uqr,ex,Jqr,OMe,Yqr,Kqr,Zqr,Ut,ox,eNr,VMe,oNr,rNr,of,tNr,XMe,aNr,nNr,FK,sNr,lNr,iNr,Cw,dNr,Qr,rx,cNr,zMe,fNr,mNr,Mn,gNr,WMe,hNr,pNr,QMe,_Nr,uNr,HMe,bNr,vNr,FNr,Ge,ww,UMe,TNr,MNr,TK,ENr,CNr,wNr,Aw,JMe,ANr,yNr,MK,LNr,xNr,$Nr,yw,YMe,kNr,SNr,EK,RNr,PNr,BNr,Lw,KMe,INr,qNr,CK,NNr,jNr,DNr,xw,ZMe,GNr,ONr,wK,VNr,XNr,zNr,$w,eEe,WNr,QNr,AK,HNr,UNr,JNr,kw,oEe,YNr,KNr,yK,ZNr,ejr,ojr,Sw,rEe,rjr,tjr,LK,ajr,njr,sjr,Rw,YNe,rf,Pw,tEe,tx,ljr,aEe,ijr,KNe,Fr,ax,djr,tf,cjr,xK,fjr,mjr,$K,gjr,hjr,pjr,nx,_jr,nEe,ujr,bjr,vjr,Jt,sx,Fjr,sEe,Tjr,Mjr,af,Ejr,lEe,Cjr,wjr,kK,Ajr,yjr,Ljr,Bw,xjr,Hr,lx,$jr,iEe,kjr,Sjr,En,Rjr,dEe,Pjr,Bjr,cEe,Ijr,qjr,fEe,Njr,jjr,Djr,mEe,Iw,gEe,Gjr,Ojr,SK,Vjr,Xjr,zjr,qw,ZNe,nf,Nw,hEe,ix,Wjr,pEe,Qjr,eje,Tr,dx,Hjr,sf,Ujr,RK,Jjr,Yjr,PK,Kjr,Zjr,eDr,cx,oDr,_Ee,rDr,tDr,aDr,Yt,fx,nDr,uEe,sDr,lDr,lf,iDr,bEe,dDr,cDr,BK,fDr,mDr,gDr,jw,hDr,Ur,mx,pDr,vEe,_Dr,uDr,Cn,bDr,FEe,vDr,FDr,TEe,TDr,MDr,MEe,EDr,CDr,wDr,gx,Dw,EEe,ADr,yDr,IK,LDr,xDr,$Dr,Gw,CEe,kDr,SDr,qK,RDr,PDr,BDr,Ow,oje,df,Vw,wEe,hx,IDr,AEe,qDr,rje,Mr,px,NDr,cf,jDr,NK,DDr,GDr,jK,ODr,VDr,XDr,_x,zDr,yEe,WDr,QDr,HDr,Kt,ux,UDr,LEe,JDr,YDr,ff,KDr,xEe,ZDr,eGr,DK,oGr,rGr,tGr,Xw,aGr,Jr,bx,nGr,$Ee,sGr,lGr,wn,iGr,kEe,dGr,cGr,SEe,fGr,mGr,REe,gGr,hGr,pGr,PEe,zw,BEe,_Gr,uGr,GK,bGr,vGr,FGr,Ww,tje;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),h6=new oe({}),p6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new TGr({props:{warning:!0,$$slots:{default:[$8t]},$$scope:{ctx:L}}}),_6=new oe({}),u6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L578"}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L601"}}),Tg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),T6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L724"}}),M6=new oe({}),E6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L394"}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17254/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L408"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),y6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L604"}}),L6=new oe({}),x6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),$h=new TGr({props:{$$slots:{default:[R8t]},$$scope:{ctx:L}}}),kh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),R6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),P6=new oe({}),B6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L87"}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L101"}}),Jh=new TGr({props:{$$slots:{default:[B8t]},$$scope:{ctx:L}}}),Yh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),j6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L254"}}),D6=new oe({}),G6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L729"}}),V6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ep=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Q_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),z6=new oe({}),W6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L736"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),J6=new oe({}),Y6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L751"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),oy=new oe({}),ry=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L758"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),sy=new oe({}),ly=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L765"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),fy=new oe({}),my=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L774"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),_y=new oe({}),uy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L808"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),Ty=new oe({}),My=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L815"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),Ay=new oe({}),yy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L801"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L783"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),Iy=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L790"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),Gy=new oe({}),Oy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L824"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),lv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),Wy=new oe({}),Qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L863"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),dv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),Yy=new oe({}),Ky=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L870"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),rL=new oe({}),tL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L893"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),lL=new oe({}),iL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L877"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),mL=new oe({}),gL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L884"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),bL=new oe({}),vL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L902"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),EL=new oe({}),CL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L909"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),LL=new oe({}),xL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L856"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L831"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L838"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L847"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),e8=new oe({}),o8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),n8=new oe({}),s8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),c8=new oe({}),f8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),p8=new oe({}),_8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),F8=new oe({}),T8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),w8=new oe({}),A8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),$8=new oe({}),k8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),B8=new oe({}),I8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),G8=new oe({}),O8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),W8=new oe({}),Q8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),Y8=new oe({}),K8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),p9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),u9=new oe({}),b9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),y9=new oe({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),q9=new oe({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),hx=new oe({}),px=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),c6=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),f6=o("AutoConfig"),Ln=o(", "),xn=a("a"),m6=o("AutoModel"),pi=o(`, and
`),$n=a("a"),g6=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),S$=o("will create a model that is an instance of "),ui=a("a"),R$=o("BertModel"),P$=o("."),Eo=l(),wa=a("p"),B$=o("There is one class of "),bf=a("code"),I$=o("AutoModel"),fGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),eqe=l(),bi=a("h2"),vf=a("a"),Pee=a("span"),F(h6.$$.fragment),mGe=l(),Bee=a("span"),gGe=o("Extending the Auto Classes"),oqe=l(),kn=a("p"),hGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Iee=a("code"),pGe=o("NewModel"),_Ge=o(", make sure you have a "),qee=a("code"),uGe=o("NewModelConfig"),bGe=o(` then you can add those to the auto
classes like this:`),rqe=l(),F(p6.$$.fragment),tqe=l(),q$=a("p"),vGe=o("You will then be able to use the auto classes like you would usually do!"),aqe=l(),F(Ff.$$.fragment),nqe=l(),vi=a("h2"),Tf=a("a"),Nee=a("span"),F(_6.$$.fragment),FGe=l(),jee=a("span"),TGe=o("AutoConfig"),sqe=l(),Co=a("div"),F(u6.$$.fragment),MGe=l(),b6=a("p"),EGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),N$=a("a"),CGe=o("from_pretrained()"),wGe=o(" class method."),AGe=l(),v6=a("p"),yGe=o("This class cannot be instantiated directly using "),Dee=a("code"),LGe=o("__init__()"),xGe=o(" (throws an error)."),$Ge=l(),Er=a("div"),F(F6.$$.fragment),kGe=l(),Gee=a("p"),SGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),RGe=l(),Fi=a("p"),PGe=o("The configuration class to instantiate is selected based on the "),Oee=a("code"),BGe=o("model_type"),IGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vee=a("code"),qGe=o("pretrained_model_name_or_path"),NGe=o(":"),jGe=l(),A=a("ul"),Mf=a("li"),Xee=a("strong"),DGe=o("albert"),GGe=o(" \u2014 "),j$=a("a"),OGe=o("AlbertConfig"),VGe=o(" (ALBERT model)"),XGe=l(),Ef=a("li"),zee=a("strong"),zGe=o("bart"),WGe=o(" \u2014 "),D$=a("a"),QGe=o("BartConfig"),HGe=o(" (BART model)"),UGe=l(),Cf=a("li"),Wee=a("strong"),JGe=o("beit"),YGe=o(" \u2014 "),G$=a("a"),KGe=o("BeitConfig"),ZGe=o(" (BEiT model)"),eOe=l(),wf=a("li"),Qee=a("strong"),oOe=o("bert"),rOe=o(" \u2014 "),O$=a("a"),tOe=o("BertConfig"),aOe=o(" (BERT model)"),nOe=l(),Af=a("li"),Hee=a("strong"),sOe=o("bert-generation"),lOe=o(" \u2014 "),V$=a("a"),iOe=o("BertGenerationConfig"),dOe=o(" (Bert Generation model)"),cOe=l(),yf=a("li"),Uee=a("strong"),fOe=o("big_bird"),mOe=o(" \u2014 "),X$=a("a"),gOe=o("BigBirdConfig"),hOe=o(" (BigBird model)"),pOe=l(),Lf=a("li"),Jee=a("strong"),_Oe=o("bigbird_pegasus"),uOe=o(" \u2014 "),z$=a("a"),bOe=o("BigBirdPegasusConfig"),vOe=o(" (BigBirdPegasus model)"),FOe=l(),xf=a("li"),Yee=a("strong"),TOe=o("blenderbot"),MOe=o(" \u2014 "),W$=a("a"),EOe=o("BlenderbotConfig"),COe=o(" (Blenderbot model)"),wOe=l(),$f=a("li"),Kee=a("strong"),AOe=o("blenderbot-small"),yOe=o(" \u2014 "),Q$=a("a"),LOe=o("BlenderbotSmallConfig"),xOe=o(" (BlenderbotSmall model)"),$Oe=l(),kf=a("li"),Zee=a("strong"),kOe=o("camembert"),SOe=o(" \u2014 "),H$=a("a"),ROe=o("CamembertConfig"),POe=o(" (CamemBERT model)"),BOe=l(),Sf=a("li"),eoe=a("strong"),IOe=o("canine"),qOe=o(" \u2014 "),U$=a("a"),NOe=o("CanineConfig"),jOe=o(" (Canine model)"),DOe=l(),Rf=a("li"),ooe=a("strong"),GOe=o("clip"),OOe=o(" \u2014 "),J$=a("a"),VOe=o("CLIPConfig"),XOe=o(" (CLIP model)"),zOe=l(),Pf=a("li"),roe=a("strong"),WOe=o("convbert"),QOe=o(" \u2014 "),Y$=a("a"),HOe=o("ConvBertConfig"),UOe=o(" (ConvBERT model)"),JOe=l(),Bf=a("li"),toe=a("strong"),YOe=o("convnext"),KOe=o(" \u2014 "),K$=a("a"),ZOe=o("ConvNextConfig"),eVe=o(" (ConvNext model)"),oVe=l(),If=a("li"),aoe=a("strong"),rVe=o("ctrl"),tVe=o(" \u2014 "),Z$=a("a"),aVe=o("CTRLConfig"),nVe=o(" (CTRL model)"),sVe=l(),qf=a("li"),noe=a("strong"),lVe=o("cvt"),iVe=o(" \u2014 "),ek=a("a"),dVe=o("CvtConfig"),cVe=o(" (CvT model)"),fVe=l(),Nf=a("li"),soe=a("strong"),mVe=o("data2vec-audio"),gVe=o(" \u2014 "),ok=a("a"),hVe=o("Data2VecAudioConfig"),pVe=o(" (Data2VecAudio model)"),_Ve=l(),jf=a("li"),loe=a("strong"),uVe=o("data2vec-text"),bVe=o(" \u2014 "),rk=a("a"),vVe=o("Data2VecTextConfig"),FVe=o(" (Data2VecText model)"),TVe=l(),Df=a("li"),ioe=a("strong"),MVe=o("data2vec-vision"),EVe=o(" \u2014 "),tk=a("a"),CVe=o("Data2VecVisionConfig"),wVe=o(" (Data2VecVision model)"),AVe=l(),Gf=a("li"),doe=a("strong"),yVe=o("deberta"),LVe=o(" \u2014 "),ak=a("a"),xVe=o("DebertaConfig"),$Ve=o(" (DeBERTa model)"),kVe=l(),Of=a("li"),coe=a("strong"),SVe=o("deberta-v2"),RVe=o(" \u2014 "),nk=a("a"),PVe=o("DebertaV2Config"),BVe=o(" (DeBERTa-v2 model)"),IVe=l(),Vf=a("li"),foe=a("strong"),qVe=o("decision_transformer"),NVe=o(" \u2014 "),sk=a("a"),jVe=o("DecisionTransformerConfig"),DVe=o(" (Decision Transformer model)"),GVe=l(),Xf=a("li"),moe=a("strong"),OVe=o("deit"),VVe=o(" \u2014 "),lk=a("a"),XVe=o("DeiTConfig"),zVe=o(" (DeiT model)"),WVe=l(),zf=a("li"),goe=a("strong"),QVe=o("detr"),HVe=o(" \u2014 "),ik=a("a"),UVe=o("DetrConfig"),JVe=o(" (DETR model)"),YVe=l(),Wf=a("li"),hoe=a("strong"),KVe=o("distilbert"),ZVe=o(" \u2014 "),dk=a("a"),eXe=o("DistilBertConfig"),oXe=o(" (DistilBERT model)"),rXe=l(),Qf=a("li"),poe=a("strong"),tXe=o("dpr"),aXe=o(" \u2014 "),ck=a("a"),nXe=o("DPRConfig"),sXe=o(" (DPR model)"),lXe=l(),Hf=a("li"),_oe=a("strong"),iXe=o("dpt"),dXe=o(" \u2014 "),fk=a("a"),cXe=o("DPTConfig"),fXe=o(" (DPT model)"),mXe=l(),Uf=a("li"),uoe=a("strong"),gXe=o("electra"),hXe=o(" \u2014 "),mk=a("a"),pXe=o("ElectraConfig"),_Xe=o(" (ELECTRA model)"),uXe=l(),Jf=a("li"),boe=a("strong"),bXe=o("encoder-decoder"),vXe=o(" \u2014 "),gk=a("a"),FXe=o("EncoderDecoderConfig"),TXe=o(" (Encoder decoder model)"),MXe=l(),Yf=a("li"),voe=a("strong"),EXe=o("flaubert"),CXe=o(" \u2014 "),hk=a("a"),wXe=o("FlaubertConfig"),AXe=o(" (FlauBERT model)"),yXe=l(),Kf=a("li"),Foe=a("strong"),LXe=o("flava"),xXe=o(" \u2014 "),pk=a("a"),$Xe=o("FlavaConfig"),kXe=o(" (Flava model)"),SXe=l(),Zf=a("li"),Toe=a("strong"),RXe=o("fnet"),PXe=o(" \u2014 "),_k=a("a"),BXe=o("FNetConfig"),IXe=o(" (FNet model)"),qXe=l(),em=a("li"),Moe=a("strong"),NXe=o("fsmt"),jXe=o(" \u2014 "),uk=a("a"),DXe=o("FSMTConfig"),GXe=o(" (FairSeq Machine-Translation model)"),OXe=l(),om=a("li"),Eoe=a("strong"),VXe=o("funnel"),XXe=o(" \u2014 "),bk=a("a"),zXe=o("FunnelConfig"),WXe=o(" (Funnel Transformer model)"),QXe=l(),rm=a("li"),Coe=a("strong"),HXe=o("glpn"),UXe=o(" \u2014 "),vk=a("a"),JXe=o("GLPNConfig"),YXe=o(" (GLPN model)"),KXe=l(),tm=a("li"),woe=a("strong"),ZXe=o("gpt2"),eze=o(" \u2014 "),Fk=a("a"),oze=o("GPT2Config"),rze=o(" (OpenAI GPT-2 model)"),tze=l(),am=a("li"),Aoe=a("strong"),aze=o("gpt_neo"),nze=o(" \u2014 "),Tk=a("a"),sze=o("GPTNeoConfig"),lze=o(" (GPT Neo model)"),ize=l(),nm=a("li"),yoe=a("strong"),dze=o("gptj"),cze=o(" \u2014 "),Mk=a("a"),fze=o("GPTJConfig"),mze=o(" (GPT-J model)"),gze=l(),sm=a("li"),Loe=a("strong"),hze=o("hubert"),pze=o(" \u2014 "),Ek=a("a"),_ze=o("HubertConfig"),uze=o(" (Hubert model)"),bze=l(),lm=a("li"),xoe=a("strong"),vze=o("ibert"),Fze=o(" \u2014 "),Ck=a("a"),Tze=o("IBertConfig"),Mze=o(" (I-BERT model)"),Eze=l(),im=a("li"),$oe=a("strong"),Cze=o("imagegpt"),wze=o(" \u2014 "),wk=a("a"),Aze=o("ImageGPTConfig"),yze=o(" (ImageGPT model)"),Lze=l(),dm=a("li"),koe=a("strong"),xze=o("layoutlm"),$ze=o(" \u2014 "),Ak=a("a"),kze=o("LayoutLMConfig"),Sze=o(" (LayoutLM model)"),Rze=l(),cm=a("li"),Soe=a("strong"),Pze=o("layoutlmv2"),Bze=o(" \u2014 "),yk=a("a"),Ize=o("LayoutLMv2Config"),qze=o(" (LayoutLMv2 model)"),Nze=l(),fm=a("li"),Roe=a("strong"),jze=o("led"),Dze=o(" \u2014 "),Lk=a("a"),Gze=o("LEDConfig"),Oze=o(" (LED model)"),Vze=l(),mm=a("li"),Poe=a("strong"),Xze=o("longformer"),zze=o(" \u2014 "),xk=a("a"),Wze=o("LongformerConfig"),Qze=o(" (Longformer model)"),Hze=l(),gm=a("li"),Boe=a("strong"),Uze=o("luke"),Jze=o(" \u2014 "),$k=a("a"),Yze=o("LukeConfig"),Kze=o(" (LUKE model)"),Zze=l(),hm=a("li"),Ioe=a("strong"),eWe=o("lxmert"),oWe=o(" \u2014 "),kk=a("a"),rWe=o("LxmertConfig"),tWe=o(" (LXMERT model)"),aWe=l(),pm=a("li"),qoe=a("strong"),nWe=o("m2m_100"),sWe=o(" \u2014 "),Sk=a("a"),lWe=o("M2M100Config"),iWe=o(" (M2M100 model)"),dWe=l(),_m=a("li"),Noe=a("strong"),cWe=o("marian"),fWe=o(" \u2014 "),Rk=a("a"),mWe=o("MarianConfig"),gWe=o(" (Marian model)"),hWe=l(),um=a("li"),joe=a("strong"),pWe=o("maskformer"),_We=o(" \u2014 "),Pk=a("a"),uWe=o("MaskFormerConfig"),bWe=o(" (MaskFormer model)"),vWe=l(),bm=a("li"),Doe=a("strong"),FWe=o("mbart"),TWe=o(" \u2014 "),Bk=a("a"),MWe=o("MBartConfig"),EWe=o(" (mBART model)"),CWe=l(),vm=a("li"),Goe=a("strong"),wWe=o("megatron-bert"),AWe=o(" \u2014 "),Ik=a("a"),yWe=o("MegatronBertConfig"),LWe=o(" (MegatronBert model)"),xWe=l(),Fm=a("li"),Ooe=a("strong"),$We=o("mobilebert"),kWe=o(" \u2014 "),qk=a("a"),SWe=o("MobileBertConfig"),RWe=o(" (MobileBERT model)"),PWe=l(),Tm=a("li"),Voe=a("strong"),BWe=o("mpnet"),IWe=o(" \u2014 "),Nk=a("a"),qWe=o("MPNetConfig"),NWe=o(" (MPNet model)"),jWe=l(),Mm=a("li"),Xoe=a("strong"),DWe=o("mt5"),GWe=o(" \u2014 "),jk=a("a"),OWe=o("MT5Config"),VWe=o(" (mT5 model)"),XWe=l(),Em=a("li"),zoe=a("strong"),zWe=o("nystromformer"),WWe=o(" \u2014 "),Dk=a("a"),QWe=o("NystromformerConfig"),HWe=o(" (Nystromformer model)"),UWe=l(),Cm=a("li"),Woe=a("strong"),JWe=o("openai-gpt"),YWe=o(" \u2014 "),Gk=a("a"),KWe=o("OpenAIGPTConfig"),ZWe=o(" (OpenAI GPT model)"),eQe=l(),wm=a("li"),Qoe=a("strong"),oQe=o("opt"),rQe=o(" \u2014 "),Ok=a("a"),tQe=o("OPTConfig"),aQe=o(" (OPT model)"),nQe=l(),Am=a("li"),Hoe=a("strong"),sQe=o("pegasus"),lQe=o(" \u2014 "),Vk=a("a"),iQe=o("PegasusConfig"),dQe=o(" (Pegasus model)"),cQe=l(),ym=a("li"),Uoe=a("strong"),fQe=o("perceiver"),mQe=o(" \u2014 "),Xk=a("a"),gQe=o("PerceiverConfig"),hQe=o(" (Perceiver model)"),pQe=l(),Lm=a("li"),Joe=a("strong"),_Qe=o("plbart"),uQe=o(" \u2014 "),zk=a("a"),bQe=o("PLBartConfig"),vQe=o(" (PLBart model)"),FQe=l(),xm=a("li"),Yoe=a("strong"),TQe=o("poolformer"),MQe=o(" \u2014 "),Wk=a("a"),EQe=o("PoolFormerConfig"),CQe=o(" (PoolFormer model)"),wQe=l(),$m=a("li"),Koe=a("strong"),AQe=o("prophetnet"),yQe=o(" \u2014 "),Qk=a("a"),LQe=o("ProphetNetConfig"),xQe=o(" (ProphetNet model)"),$Qe=l(),km=a("li"),Zoe=a("strong"),kQe=o("qdqbert"),SQe=o(" \u2014 "),Hk=a("a"),RQe=o("QDQBertConfig"),PQe=o(" (QDQBert model)"),BQe=l(),Sm=a("li"),ere=a("strong"),IQe=o("rag"),qQe=o(" \u2014 "),Uk=a("a"),NQe=o("RagConfig"),jQe=o(" (RAG model)"),DQe=l(),Rm=a("li"),ore=a("strong"),GQe=o("realm"),OQe=o(" \u2014 "),Jk=a("a"),VQe=o("RealmConfig"),XQe=o(" (Realm model)"),zQe=l(),Pm=a("li"),rre=a("strong"),WQe=o("reformer"),QQe=o(" \u2014 "),Yk=a("a"),HQe=o("ReformerConfig"),UQe=o(" (Reformer model)"),JQe=l(),Bm=a("li"),tre=a("strong"),YQe=o("regnet"),KQe=o(" \u2014 "),Kk=a("a"),ZQe=o("RegNetConfig"),eHe=o(" (RegNet model)"),oHe=l(),Im=a("li"),are=a("strong"),rHe=o("rembert"),tHe=o(" \u2014 "),Zk=a("a"),aHe=o("RemBertConfig"),nHe=o(" (RemBERT model)"),sHe=l(),qm=a("li"),nre=a("strong"),lHe=o("resnet"),iHe=o(" \u2014 "),eS=a("a"),dHe=o("ResNetConfig"),cHe=o(" (ResNet model)"),fHe=l(),Nm=a("li"),sre=a("strong"),mHe=o("retribert"),gHe=o(" \u2014 "),oS=a("a"),hHe=o("RetriBertConfig"),pHe=o(" (RetriBERT model)"),_He=l(),jm=a("li"),lre=a("strong"),uHe=o("roberta"),bHe=o(" \u2014 "),rS=a("a"),vHe=o("RobertaConfig"),FHe=o(" (RoBERTa model)"),THe=l(),Dm=a("li"),ire=a("strong"),MHe=o("roformer"),EHe=o(" \u2014 "),tS=a("a"),CHe=o("RoFormerConfig"),wHe=o(" (RoFormer model)"),AHe=l(),Gm=a("li"),dre=a("strong"),yHe=o("segformer"),LHe=o(" \u2014 "),aS=a("a"),xHe=o("SegformerConfig"),$He=o(" (SegFormer model)"),kHe=l(),Om=a("li"),cre=a("strong"),SHe=o("sew"),RHe=o(" \u2014 "),nS=a("a"),PHe=o("SEWConfig"),BHe=o(" (SEW model)"),IHe=l(),Vm=a("li"),fre=a("strong"),qHe=o("sew-d"),NHe=o(" \u2014 "),sS=a("a"),jHe=o("SEWDConfig"),DHe=o(" (SEW-D model)"),GHe=l(),Xm=a("li"),mre=a("strong"),OHe=o("speech-encoder-decoder"),VHe=o(" \u2014 "),lS=a("a"),XHe=o("SpeechEncoderDecoderConfig"),zHe=o(" (Speech Encoder decoder model)"),WHe=l(),zm=a("li"),gre=a("strong"),QHe=o("speech_to_text"),HHe=o(" \u2014 "),iS=a("a"),UHe=o("Speech2TextConfig"),JHe=o(" (Speech2Text model)"),YHe=l(),Wm=a("li"),hre=a("strong"),KHe=o("speech_to_text_2"),ZHe=o(" \u2014 "),dS=a("a"),eUe=o("Speech2Text2Config"),oUe=o(" (Speech2Text2 model)"),rUe=l(),Qm=a("li"),pre=a("strong"),tUe=o("splinter"),aUe=o(" \u2014 "),cS=a("a"),nUe=o("SplinterConfig"),sUe=o(" (Splinter model)"),lUe=l(),Hm=a("li"),_re=a("strong"),iUe=o("squeezebert"),dUe=o(" \u2014 "),fS=a("a"),cUe=o("SqueezeBertConfig"),fUe=o(" (SqueezeBERT model)"),mUe=l(),Um=a("li"),ure=a("strong"),gUe=o("swin"),hUe=o(" \u2014 "),mS=a("a"),pUe=o("SwinConfig"),_Ue=o(" (Swin model)"),uUe=l(),Jm=a("li"),bre=a("strong"),bUe=o("t5"),vUe=o(" \u2014 "),gS=a("a"),FUe=o("T5Config"),TUe=o(" (T5 model)"),MUe=l(),Ym=a("li"),vre=a("strong"),EUe=o("tapas"),CUe=o(" \u2014 "),hS=a("a"),wUe=o("TapasConfig"),AUe=o(" (TAPAS model)"),yUe=l(),Km=a("li"),Fre=a("strong"),LUe=o("trajectory_transformer"),xUe=o(" \u2014 "),pS=a("a"),$Ue=o("TrajectoryTransformerConfig"),kUe=o(" (Trajectory Transformer model)"),SUe=l(),Zm=a("li"),Tre=a("strong"),RUe=o("transfo-xl"),PUe=o(" \u2014 "),_S=a("a"),BUe=o("TransfoXLConfig"),IUe=o(" (Transformer-XL model)"),qUe=l(),eg=a("li"),Mre=a("strong"),NUe=o("trocr"),jUe=o(" \u2014 "),uS=a("a"),DUe=o("TrOCRConfig"),GUe=o(" (TrOCR model)"),OUe=l(),og=a("li"),Ere=a("strong"),VUe=o("unispeech"),XUe=o(" \u2014 "),bS=a("a"),zUe=o("UniSpeechConfig"),WUe=o(" (UniSpeech model)"),QUe=l(),rg=a("li"),Cre=a("strong"),HUe=o("unispeech-sat"),UUe=o(" \u2014 "),vS=a("a"),JUe=o("UniSpeechSatConfig"),YUe=o(" (UniSpeechSat model)"),KUe=l(),tg=a("li"),wre=a("strong"),ZUe=o("van"),eJe=o(" \u2014 "),FS=a("a"),oJe=o("VanConfig"),rJe=o(" (VAN model)"),tJe=l(),ag=a("li"),Are=a("strong"),aJe=o("vilt"),nJe=o(" \u2014 "),TS=a("a"),sJe=o("ViltConfig"),lJe=o(" (ViLT model)"),iJe=l(),ng=a("li"),yre=a("strong"),dJe=o("vision-encoder-decoder"),cJe=o(" \u2014 "),MS=a("a"),fJe=o("VisionEncoderDecoderConfig"),mJe=o(" (Vision Encoder decoder model)"),gJe=l(),sg=a("li"),Lre=a("strong"),hJe=o("vision-text-dual-encoder"),pJe=o(" \u2014 "),ES=a("a"),_Je=o("VisionTextDualEncoderConfig"),uJe=o(" (VisionTextDualEncoder model)"),bJe=l(),lg=a("li"),xre=a("strong"),vJe=o("visual_bert"),FJe=o(" \u2014 "),CS=a("a"),TJe=o("VisualBertConfig"),MJe=o(" (VisualBert model)"),EJe=l(),ig=a("li"),$re=a("strong"),CJe=o("vit"),wJe=o(" \u2014 "),wS=a("a"),AJe=o("ViTConfig"),yJe=o(" (ViT model)"),LJe=l(),dg=a("li"),kre=a("strong"),xJe=o("vit_mae"),$Je=o(" \u2014 "),AS=a("a"),kJe=o("ViTMAEConfig"),SJe=o(" (ViTMAE model)"),RJe=l(),cg=a("li"),Sre=a("strong"),PJe=o("wav2vec2"),BJe=o(" \u2014 "),yS=a("a"),IJe=o("Wav2Vec2Config"),qJe=o(" (Wav2Vec2 model)"),NJe=l(),fg=a("li"),Rre=a("strong"),jJe=o("wav2vec2-conformer"),DJe=o(" \u2014 "),LS=a("a"),GJe=o("Wav2Vec2ConformerConfig"),OJe=o(" (Wav2Vec2-Conformer model)"),VJe=l(),mg=a("li"),Pre=a("strong"),XJe=o("wavlm"),zJe=o(" \u2014 "),xS=a("a"),WJe=o("WavLMConfig"),QJe=o(" (WavLM model)"),HJe=l(),gg=a("li"),Bre=a("strong"),UJe=o("xglm"),JJe=o(" \u2014 "),$S=a("a"),YJe=o("XGLMConfig"),KJe=o(" (XGLM model)"),ZJe=l(),hg=a("li"),Ire=a("strong"),eYe=o("xlm"),oYe=o(" \u2014 "),kS=a("a"),rYe=o("XLMConfig"),tYe=o(" (XLM model)"),aYe=l(),pg=a("li"),qre=a("strong"),nYe=o("xlm-prophetnet"),sYe=o(" \u2014 "),SS=a("a"),lYe=o("XLMProphetNetConfig"),iYe=o(" (XLMProphetNet model)"),dYe=l(),_g=a("li"),Nre=a("strong"),cYe=o("xlm-roberta"),fYe=o(" \u2014 "),RS=a("a"),mYe=o("XLMRobertaConfig"),gYe=o(" (XLM-RoBERTa model)"),hYe=l(),ug=a("li"),jre=a("strong"),pYe=o("xlm-roberta-xl"),_Ye=o(" \u2014 "),PS=a("a"),uYe=o("XLMRobertaXLConfig"),bYe=o(" (XLM-RoBERTa-XL model)"),vYe=l(),bg=a("li"),Dre=a("strong"),FYe=o("xlnet"),TYe=o(" \u2014 "),BS=a("a"),MYe=o("XLNetConfig"),EYe=o(" (XLNet model)"),CYe=l(),vg=a("li"),Gre=a("strong"),wYe=o("yolos"),AYe=o(" \u2014 "),IS=a("a"),yYe=o("YolosConfig"),LYe=o(" (YOLOS model)"),xYe=l(),Fg=a("li"),Ore=a("strong"),$Ye=o("yoso"),kYe=o(" \u2014 "),qS=a("a"),SYe=o("YosoConfig"),RYe=o(" (YOSO model)"),PYe=l(),F(Tg.$$.fragment),BYe=l(),Mg=a("div"),F(T6.$$.fragment),IYe=l(),Vre=a("p"),qYe=o("Register a new configuration for this class."),lqe=l(),Ti=a("h2"),Eg=a("a"),Xre=a("span"),F(M6.$$.fragment),NYe=l(),zre=a("span"),jYe=o("AutoTokenizer"),iqe=l(),wo=a("div"),F(E6.$$.fragment),DYe=l(),C6=a("p"),GYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=a("a"),OYe=o("AutoTokenizer.from_pretrained()"),VYe=o(" class method."),XYe=l(),w6=a("p"),zYe=o("This class cannot be instantiated directly using "),Wre=a("code"),WYe=o("__init__()"),QYe=o(" (throws an error)."),HYe=l(),Cr=a("div"),F(A6.$$.fragment),UYe=l(),Qre=a("p"),JYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YYe=l(),Aa=a("p"),KYe=o("The tokenizer class to instantiate is selected based on the "),Hre=a("code"),ZYe=o("model_type"),eKe=o(` property of the config object (either
passed as an argument or loaded from `),Ure=a("code"),oKe=o("pretrained_model_name_or_path"),rKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jre=a("code"),tKe=o("pretrained_model_name_or_path"),aKe=o(":"),nKe=l(),k=a("ul"),Sn=a("li"),Yre=a("strong"),sKe=o("albert"),lKe=o(" \u2014 "),jS=a("a"),iKe=o("AlbertTokenizer"),dKe=o(" or "),DS=a("a"),cKe=o("AlbertTokenizerFast"),fKe=o(" (ALBERT model)"),mKe=l(),Rn=a("li"),Kre=a("strong"),gKe=o("bart"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("BartTokenizer"),_Ke=o(" or "),OS=a("a"),uKe=o("BartTokenizerFast"),bKe=o(" (BART model)"),vKe=l(),Pn=a("li"),Zre=a("strong"),FKe=o("barthez"),TKe=o(" \u2014 "),VS=a("a"),MKe=o("BarthezTokenizer"),EKe=o(" or "),XS=a("a"),CKe=o("BarthezTokenizerFast"),wKe=o(" (BARThez model)"),AKe=l(),Bn=a("li"),ete=a("strong"),yKe=o("bartpho"),LKe=o(" \u2014 "),zS=a("a"),xKe=o("BartphoTokenizer"),$Ke=o(" or "),WS=a("a"),kKe=o("BartphoTokenizerFast"),SKe=o(" (BARTpho model)"),RKe=l(),In=a("li"),ote=a("strong"),PKe=o("bert"),BKe=o(" \u2014 "),QS=a("a"),IKe=o("BertTokenizer"),qKe=o(" or "),HS=a("a"),NKe=o("BertTokenizerFast"),jKe=o(" (BERT model)"),DKe=l(),Cg=a("li"),rte=a("strong"),GKe=o("bert-generation"),OKe=o(" \u2014 "),US=a("a"),VKe=o("BertGenerationTokenizer"),XKe=o(" (Bert Generation model)"),zKe=l(),wg=a("li"),tte=a("strong"),WKe=o("bert-japanese"),QKe=o(" \u2014 "),JS=a("a"),HKe=o("BertJapaneseTokenizer"),UKe=o(" (BertJapanese model)"),JKe=l(),Ag=a("li"),ate=a("strong"),YKe=o("bertweet"),KKe=o(" \u2014 "),YS=a("a"),ZKe=o("BertweetTokenizer"),eZe=o(" (Bertweet model)"),oZe=l(),qn=a("li"),nte=a("strong"),rZe=o("big_bird"),tZe=o(" \u2014 "),KS=a("a"),aZe=o("BigBirdTokenizer"),nZe=o(" or "),ZS=a("a"),sZe=o("BigBirdTokenizerFast"),lZe=o(" (BigBird model)"),iZe=l(),Nn=a("li"),ste=a("strong"),dZe=o("bigbird_pegasus"),cZe=o(" \u2014 "),eR=a("a"),fZe=o("PegasusTokenizer"),mZe=o(" or "),oR=a("a"),gZe=o("PegasusTokenizerFast"),hZe=o(" (BigBirdPegasus model)"),pZe=l(),jn=a("li"),lte=a("strong"),_Ze=o("blenderbot"),uZe=o(" \u2014 "),rR=a("a"),bZe=o("BlenderbotTokenizer"),vZe=o(" or "),tR=a("a"),FZe=o("BlenderbotTokenizerFast"),TZe=o(" (Blenderbot model)"),MZe=l(),yg=a("li"),ite=a("strong"),EZe=o("blenderbot-small"),CZe=o(" \u2014 "),aR=a("a"),wZe=o("BlenderbotSmallTokenizer"),AZe=o(" (BlenderbotSmall model)"),yZe=l(),Lg=a("li"),dte=a("strong"),LZe=o("byt5"),xZe=o(" \u2014 "),nR=a("a"),$Ze=o("ByT5Tokenizer"),kZe=o(" (ByT5 model)"),SZe=l(),Dn=a("li"),cte=a("strong"),RZe=o("camembert"),PZe=o(" \u2014 "),sR=a("a"),BZe=o("CamembertTokenizer"),IZe=o(" or "),lR=a("a"),qZe=o("CamembertTokenizerFast"),NZe=o(" (CamemBERT model)"),jZe=l(),xg=a("li"),fte=a("strong"),DZe=o("canine"),GZe=o(" \u2014 "),iR=a("a"),OZe=o("CanineTokenizer"),VZe=o(" (Canine model)"),XZe=l(),Gn=a("li"),mte=a("strong"),zZe=o("clip"),WZe=o(" \u2014 "),dR=a("a"),QZe=o("CLIPTokenizer"),HZe=o(" or "),cR=a("a"),UZe=o("CLIPTokenizerFast"),JZe=o(" (CLIP model)"),YZe=l(),On=a("li"),gte=a("strong"),KZe=o("convbert"),ZZe=o(" \u2014 "),fR=a("a"),eeo=o("ConvBertTokenizer"),oeo=o(" or "),mR=a("a"),reo=o("ConvBertTokenizerFast"),teo=o(" (ConvBERT model)"),aeo=l(),Vn=a("li"),hte=a("strong"),neo=o("cpm"),seo=o(" \u2014 "),gR=a("a"),leo=o("CpmTokenizer"),ieo=o(" or "),hR=a("a"),deo=o("CpmTokenizerFast"),ceo=o(" (CPM model)"),feo=l(),$g=a("li"),pte=a("strong"),meo=o("ctrl"),geo=o(" \u2014 "),pR=a("a"),heo=o("CTRLTokenizer"),peo=o(" (CTRL model)"),_eo=l(),Xn=a("li"),_te=a("strong"),ueo=o("data2vec-text"),beo=o(" \u2014 "),_R=a("a"),veo=o("RobertaTokenizer"),Feo=o(" or "),uR=a("a"),Teo=o("RobertaTokenizerFast"),Meo=o(" (Data2VecText model)"),Eeo=l(),zn=a("li"),ute=a("strong"),Ceo=o("deberta"),weo=o(" \u2014 "),bR=a("a"),Aeo=o("DebertaTokenizer"),yeo=o(" or "),vR=a("a"),Leo=o("DebertaTokenizerFast"),xeo=o(" (DeBERTa model)"),$eo=l(),Wn=a("li"),bte=a("strong"),keo=o("deberta-v2"),Seo=o(" \u2014 "),FR=a("a"),Reo=o("DebertaV2Tokenizer"),Peo=o(" or "),TR=a("a"),Beo=o("DebertaV2TokenizerFast"),Ieo=o(" (DeBERTa-v2 model)"),qeo=l(),Qn=a("li"),vte=a("strong"),Neo=o("distilbert"),jeo=o(" \u2014 "),MR=a("a"),Deo=o("DistilBertTokenizer"),Geo=o(" or "),ER=a("a"),Oeo=o("DistilBertTokenizerFast"),Veo=o(" (DistilBERT model)"),Xeo=l(),Hn=a("li"),Fte=a("strong"),zeo=o("dpr"),Weo=o(" \u2014 "),CR=a("a"),Qeo=o("DPRQuestionEncoderTokenizer"),Heo=o(" or "),wR=a("a"),Ueo=o("DPRQuestionEncoderTokenizerFast"),Jeo=o(" (DPR model)"),Yeo=l(),Un=a("li"),Tte=a("strong"),Keo=o("electra"),Zeo=o(" \u2014 "),AR=a("a"),eoo=o("ElectraTokenizer"),ooo=o(" or "),yR=a("a"),roo=o("ElectraTokenizerFast"),too=o(" (ELECTRA model)"),aoo=l(),kg=a("li"),Mte=a("strong"),noo=o("flaubert"),soo=o(" \u2014 "),LR=a("a"),loo=o("FlaubertTokenizer"),ioo=o(" (FlauBERT model)"),doo=l(),Jn=a("li"),Ete=a("strong"),coo=o("fnet"),foo=o(" \u2014 "),xR=a("a"),moo=o("FNetTokenizer"),goo=o(" or "),$R=a("a"),hoo=o("FNetTokenizerFast"),poo=o(" (FNet model)"),_oo=l(),Sg=a("li"),Cte=a("strong"),uoo=o("fsmt"),boo=o(" \u2014 "),kR=a("a"),voo=o("FSMTTokenizer"),Foo=o(" (FairSeq Machine-Translation model)"),Too=l(),Yn=a("li"),wte=a("strong"),Moo=o("funnel"),Eoo=o(" \u2014 "),SR=a("a"),Coo=o("FunnelTokenizer"),woo=o(" or "),RR=a("a"),Aoo=o("FunnelTokenizerFast"),yoo=o(" (Funnel Transformer model)"),Loo=l(),Kn=a("li"),Ate=a("strong"),xoo=o("gpt2"),$oo=o(" \u2014 "),PR=a("a"),koo=o("GPT2Tokenizer"),Soo=o(" or "),BR=a("a"),Roo=o("GPT2TokenizerFast"),Poo=o(" (OpenAI GPT-2 model)"),Boo=l(),Zn=a("li"),yte=a("strong"),Ioo=o("gpt_neo"),qoo=o(" \u2014 "),IR=a("a"),Noo=o("GPT2Tokenizer"),joo=o(" or "),qR=a("a"),Doo=o("GPT2TokenizerFast"),Goo=o(" (GPT Neo model)"),Ooo=l(),es=a("li"),Lte=a("strong"),Voo=o("gptj"),Xoo=o(" \u2014 "),NR=a("a"),zoo=o("GPT2Tokenizer"),Woo=o(" or "),jR=a("a"),Qoo=o("GPT2TokenizerFast"),Hoo=o(" (GPT-J model)"),Uoo=l(),os=a("li"),xte=a("strong"),Joo=o("herbert"),Yoo=o(" \u2014 "),DR=a("a"),Koo=o("HerbertTokenizer"),Zoo=o(" or "),GR=a("a"),ero=o("HerbertTokenizerFast"),oro=o(" (HerBERT model)"),rro=l(),Rg=a("li"),$te=a("strong"),tro=o("hubert"),aro=o(" \u2014 "),OR=a("a"),nro=o("Wav2Vec2CTCTokenizer"),sro=o(" (Hubert model)"),lro=l(),rs=a("li"),kte=a("strong"),iro=o("ibert"),dro=o(" \u2014 "),VR=a("a"),cro=o("RobertaTokenizer"),fro=o(" or "),XR=a("a"),mro=o("RobertaTokenizerFast"),gro=o(" (I-BERT model)"),hro=l(),ts=a("li"),Ste=a("strong"),pro=o("layoutlm"),_ro=o(" \u2014 "),zR=a("a"),uro=o("LayoutLMTokenizer"),bro=o(" or "),WR=a("a"),vro=o("LayoutLMTokenizerFast"),Fro=o(" (LayoutLM model)"),Tro=l(),as=a("li"),Rte=a("strong"),Mro=o("layoutlmv2"),Ero=o(" \u2014 "),QR=a("a"),Cro=o("LayoutLMv2Tokenizer"),wro=o(" or "),HR=a("a"),Aro=o("LayoutLMv2TokenizerFast"),yro=o(" (LayoutLMv2 model)"),Lro=l(),ns=a("li"),Pte=a("strong"),xro=o("layoutxlm"),$ro=o(" \u2014 "),UR=a("a"),kro=o("LayoutXLMTokenizer"),Sro=o(" or "),JR=a("a"),Rro=o("LayoutXLMTokenizerFast"),Pro=o(" (LayoutXLM model)"),Bro=l(),ss=a("li"),Bte=a("strong"),Iro=o("led"),qro=o(" \u2014 "),YR=a("a"),Nro=o("LEDTokenizer"),jro=o(" or "),KR=a("a"),Dro=o("LEDTokenizerFast"),Gro=o(" (LED model)"),Oro=l(),ls=a("li"),Ite=a("strong"),Vro=o("longformer"),Xro=o(" \u2014 "),ZR=a("a"),zro=o("LongformerTokenizer"),Wro=o(" or "),eP=a("a"),Qro=o("LongformerTokenizerFast"),Hro=o(" (Longformer model)"),Uro=l(),Pg=a("li"),qte=a("strong"),Jro=o("luke"),Yro=o(" \u2014 "),oP=a("a"),Kro=o("LukeTokenizer"),Zro=o(" (LUKE model)"),eto=l(),is=a("li"),Nte=a("strong"),oto=o("lxmert"),rto=o(" \u2014 "),rP=a("a"),tto=o("LxmertTokenizer"),ato=o(" or "),tP=a("a"),nto=o("LxmertTokenizerFast"),sto=o(" (LXMERT model)"),lto=l(),Bg=a("li"),jte=a("strong"),ito=o("m2m_100"),dto=o(" \u2014 "),aP=a("a"),cto=o("M2M100Tokenizer"),fto=o(" (M2M100 model)"),mto=l(),Ig=a("li"),Dte=a("strong"),gto=o("marian"),hto=o(" \u2014 "),nP=a("a"),pto=o("MarianTokenizer"),_to=o(" (Marian model)"),uto=l(),ds=a("li"),Gte=a("strong"),bto=o("mbart"),vto=o(" \u2014 "),sP=a("a"),Fto=o("MBartTokenizer"),Tto=o(" or "),lP=a("a"),Mto=o("MBartTokenizerFast"),Eto=o(" (mBART model)"),Cto=l(),cs=a("li"),Ote=a("strong"),wto=o("mbart50"),Ato=o(" \u2014 "),iP=a("a"),yto=o("MBart50Tokenizer"),Lto=o(" or "),dP=a("a"),xto=o("MBart50TokenizerFast"),$to=o(" (mBART-50 model)"),kto=l(),fs=a("li"),Vte=a("strong"),Sto=o("megatron-bert"),Rto=o(" \u2014 "),cP=a("a"),Pto=o("BertTokenizer"),Bto=o(" or "),fP=a("a"),Ito=o("BertTokenizerFast"),qto=o(" (MegatronBert model)"),Nto=l(),qg=a("li"),Xte=a("strong"),jto=o("mluke"),Dto=o(" \u2014 "),mP=a("a"),Gto=o("MLukeTokenizer"),Oto=o(" (mLUKE model)"),Vto=l(),ms=a("li"),zte=a("strong"),Xto=o("mobilebert"),zto=o(" \u2014 "),gP=a("a"),Wto=o("MobileBertTokenizer"),Qto=o(" or "),hP=a("a"),Hto=o("MobileBertTokenizerFast"),Uto=o(" (MobileBERT model)"),Jto=l(),gs=a("li"),Wte=a("strong"),Yto=o("mpnet"),Kto=o(" \u2014 "),pP=a("a"),Zto=o("MPNetTokenizer"),eao=o(" or "),_P=a("a"),oao=o("MPNetTokenizerFast"),rao=o(" (MPNet model)"),tao=l(),hs=a("li"),Qte=a("strong"),aao=o("mt5"),nao=o(" \u2014 "),uP=a("a"),sao=o("MT5Tokenizer"),lao=o(" or "),bP=a("a"),iao=o("MT5TokenizerFast"),dao=o(" (mT5 model)"),cao=l(),ps=a("li"),Hte=a("strong"),fao=o("nystromformer"),mao=o(" \u2014 "),vP=a("a"),gao=o("AlbertTokenizer"),hao=o(" or "),FP=a("a"),pao=o("AlbertTokenizerFast"),_ao=o(" (Nystromformer model)"),uao=l(),_s=a("li"),Ute=a("strong"),bao=o("openai-gpt"),vao=o(" \u2014 "),TP=a("a"),Fao=o("OpenAIGPTTokenizer"),Tao=o(" or "),MP=a("a"),Mao=o("OpenAIGPTTokenizerFast"),Eao=o(" (OpenAI GPT model)"),Cao=l(),Ng=a("li"),Jte=a("strong"),wao=o("opt"),Aao=o(" \u2014 "),EP=a("a"),yao=o("GPT2Tokenizer"),Lao=o(" (OPT model)"),xao=l(),us=a("li"),Yte=a("strong"),$ao=o("pegasus"),kao=o(" \u2014 "),CP=a("a"),Sao=o("PegasusTokenizer"),Rao=o(" or "),wP=a("a"),Pao=o("PegasusTokenizerFast"),Bao=o(" (Pegasus model)"),Iao=l(),jg=a("li"),Kte=a("strong"),qao=o("perceiver"),Nao=o(" \u2014 "),AP=a("a"),jao=o("PerceiverTokenizer"),Dao=o(" (Perceiver model)"),Gao=l(),Dg=a("li"),Zte=a("strong"),Oao=o("phobert"),Vao=o(" \u2014 "),yP=a("a"),Xao=o("PhobertTokenizer"),zao=o(" (PhoBERT model)"),Wao=l(),Gg=a("li"),eae=a("strong"),Qao=o("plbart"),Hao=o(" \u2014 "),LP=a("a"),Uao=o("PLBartTokenizer"),Jao=o(" (PLBart model)"),Yao=l(),Og=a("li"),oae=a("strong"),Kao=o("prophetnet"),Zao=o(" \u2014 "),xP=a("a"),eno=o("ProphetNetTokenizer"),ono=o(" (ProphetNet model)"),rno=l(),bs=a("li"),rae=a("strong"),tno=o("qdqbert"),ano=o(" \u2014 "),$P=a("a"),nno=o("BertTokenizer"),sno=o(" or "),kP=a("a"),lno=o("BertTokenizerFast"),ino=o(" (QDQBert model)"),dno=l(),Vg=a("li"),tae=a("strong"),cno=o("rag"),fno=o(" \u2014 "),SP=a("a"),mno=o("RagTokenizer"),gno=o(" (RAG model)"),hno=l(),vs=a("li"),aae=a("strong"),pno=o("realm"),_no=o(" \u2014 "),RP=a("a"),uno=o("RealmTokenizer"),bno=o(" or "),PP=a("a"),vno=o("RealmTokenizerFast"),Fno=o(" (Realm model)"),Tno=l(),Fs=a("li"),nae=a("strong"),Mno=o("reformer"),Eno=o(" \u2014 "),BP=a("a"),Cno=o("ReformerTokenizer"),wno=o(" or "),IP=a("a"),Ano=o("ReformerTokenizerFast"),yno=o(" (Reformer model)"),Lno=l(),Ts=a("li"),sae=a("strong"),xno=o("rembert"),$no=o(" \u2014 "),qP=a("a"),kno=o("RemBertTokenizer"),Sno=o(" or "),NP=a("a"),Rno=o("RemBertTokenizerFast"),Pno=o(" (RemBERT model)"),Bno=l(),Ms=a("li"),lae=a("strong"),Ino=o("retribert"),qno=o(" \u2014 "),jP=a("a"),Nno=o("RetriBertTokenizer"),jno=o(" or "),DP=a("a"),Dno=o("RetriBertTokenizerFast"),Gno=o(" (RetriBERT model)"),Ono=l(),Es=a("li"),iae=a("strong"),Vno=o("roberta"),Xno=o(" \u2014 "),GP=a("a"),zno=o("RobertaTokenizer"),Wno=o(" or "),OP=a("a"),Qno=o("RobertaTokenizerFast"),Hno=o(" (RoBERTa model)"),Uno=l(),Cs=a("li"),dae=a("strong"),Jno=o("roformer"),Yno=o(" \u2014 "),VP=a("a"),Kno=o("RoFormerTokenizer"),Zno=o(" or "),XP=a("a"),eso=o("RoFormerTokenizerFast"),oso=o(" (RoFormer model)"),rso=l(),Xg=a("li"),cae=a("strong"),tso=o("speech_to_text"),aso=o(" \u2014 "),zP=a("a"),nso=o("Speech2TextTokenizer"),sso=o(" (Speech2Text model)"),lso=l(),zg=a("li"),fae=a("strong"),iso=o("speech_to_text_2"),dso=o(" \u2014 "),WP=a("a"),cso=o("Speech2Text2Tokenizer"),fso=o(" (Speech2Text2 model)"),mso=l(),ws=a("li"),mae=a("strong"),gso=o("splinter"),hso=o(" \u2014 "),QP=a("a"),pso=o("SplinterTokenizer"),_so=o(" or "),HP=a("a"),uso=o("SplinterTokenizerFast"),bso=o(" (Splinter model)"),vso=l(),As=a("li"),gae=a("strong"),Fso=o("squeezebert"),Tso=o(" \u2014 "),UP=a("a"),Mso=o("SqueezeBertTokenizer"),Eso=o(" or "),JP=a("a"),Cso=o("SqueezeBertTokenizerFast"),wso=o(" (SqueezeBERT model)"),Aso=l(),ys=a("li"),hae=a("strong"),yso=o("t5"),Lso=o(" \u2014 "),YP=a("a"),xso=o("T5Tokenizer"),$so=o(" or "),KP=a("a"),kso=o("T5TokenizerFast"),Sso=o(" (T5 model)"),Rso=l(),Wg=a("li"),pae=a("strong"),Pso=o("tapas"),Bso=o(" \u2014 "),ZP=a("a"),Iso=o("TapasTokenizer"),qso=o(" (TAPAS model)"),Nso=l(),Qg=a("li"),_ae=a("strong"),jso=o("tapex"),Dso=o(" \u2014 "),eB=a("a"),Gso=o("TapexTokenizer"),Oso=o(" (TAPEX model)"),Vso=l(),Hg=a("li"),uae=a("strong"),Xso=o("transfo-xl"),zso=o(" \u2014 "),oB=a("a"),Wso=o("TransfoXLTokenizer"),Qso=o(" (Transformer-XL model)"),Hso=l(),Ls=a("li"),bae=a("strong"),Uso=o("visual_bert"),Jso=o(" \u2014 "),rB=a("a"),Yso=o("BertTokenizer"),Kso=o(" or "),tB=a("a"),Zso=o("BertTokenizerFast"),elo=o(" (VisualBert model)"),olo=l(),Ug=a("li"),vae=a("strong"),rlo=o("wav2vec2"),tlo=o(" \u2014 "),aB=a("a"),alo=o("Wav2Vec2CTCTokenizer"),nlo=o(" (Wav2Vec2 model)"),slo=l(),Jg=a("li"),Fae=a("strong"),llo=o("wav2vec2-conformer"),ilo=o(" \u2014 "),nB=a("a"),dlo=o("Wav2Vec2CTCTokenizer"),clo=o(" (Wav2Vec2-Conformer model)"),flo=l(),Yg=a("li"),Tae=a("strong"),mlo=o("wav2vec2_phoneme"),glo=o(" \u2014 "),sB=a("a"),hlo=o("Wav2Vec2PhonemeCTCTokenizer"),plo=o(" (Wav2Vec2Phoneme model)"),_lo=l(),xs=a("li"),Mae=a("strong"),ulo=o("xglm"),blo=o(" \u2014 "),lB=a("a"),vlo=o("XGLMTokenizer"),Flo=o(" or "),iB=a("a"),Tlo=o("XGLMTokenizerFast"),Mlo=o(" (XGLM model)"),Elo=l(),Kg=a("li"),Eae=a("strong"),Clo=o("xlm"),wlo=o(" \u2014 "),dB=a("a"),Alo=o("XLMTokenizer"),ylo=o(" (XLM model)"),Llo=l(),Zg=a("li"),Cae=a("strong"),xlo=o("xlm-prophetnet"),$lo=o(" \u2014 "),cB=a("a"),klo=o("XLMProphetNetTokenizer"),Slo=o(" (XLMProphetNet model)"),Rlo=l(),$s=a("li"),wae=a("strong"),Plo=o("xlm-roberta"),Blo=o(" \u2014 "),fB=a("a"),Ilo=o("XLMRobertaTokenizer"),qlo=o(" or "),mB=a("a"),Nlo=o("XLMRobertaTokenizerFast"),jlo=o(" (XLM-RoBERTa model)"),Dlo=l(),ks=a("li"),Aae=a("strong"),Glo=o("xlm-roberta-xl"),Olo=o(" \u2014 "),gB=a("a"),Vlo=o("RobertaTokenizer"),Xlo=o(" or "),hB=a("a"),zlo=o("RobertaTokenizerFast"),Wlo=o(" (XLM-RoBERTa-XL model)"),Qlo=l(),Ss=a("li"),yae=a("strong"),Hlo=o("xlnet"),Ulo=o(" \u2014 "),pB=a("a"),Jlo=o("XLNetTokenizer"),Ylo=o(" or "),_B=a("a"),Klo=o("XLNetTokenizerFast"),Zlo=o(" (XLNet model)"),eio=l(),Rs=a("li"),Lae=a("strong"),oio=o("yoso"),rio=o(" \u2014 "),uB=a("a"),tio=o("AlbertTokenizer"),aio=o(" or "),bB=a("a"),nio=o("AlbertTokenizerFast"),sio=o(" (YOSO model)"),lio=l(),F(eh.$$.fragment),iio=l(),oh=a("div"),F(y6.$$.fragment),dio=l(),xae=a("p"),cio=o("Register a new tokenizer in this mapping."),dqe=l(),Mi=a("h2"),rh=a("a"),$ae=a("span"),F(L6.$$.fragment),fio=l(),kae=a("span"),mio=o("AutoFeatureExtractor"),cqe=l(),Ao=a("div"),F(x6.$$.fragment),gio=l(),$6=a("p"),hio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vB=a("a"),pio=o("AutoFeatureExtractor.from_pretrained()"),_io=o(" class method."),uio=l(),k6=a("p"),bio=o("This class cannot be instantiated directly using "),Sae=a("code"),vio=o("__init__()"),Fio=o(" (throws an error)."),Tio=l(),He=a("div"),F(S6.$$.fragment),Mio=l(),Rae=a("p"),Eio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Cio=l(),ya=a("p"),wio=o("The feature extractor class to instantiate is selected based on the "),Pae=a("code"),Aio=o("model_type"),yio=o(` property of the config object
(either passed as an argument or loaded from `),Bae=a("code"),Lio=o("pretrained_model_name_or_path"),xio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iae=a("code"),$io=o("pretrained_model_name_or_path"),kio=o(":"),Sio=l(),Z=a("ul"),th=a("li"),qae=a("strong"),Rio=o("beit"),Pio=o(" \u2014 "),FB=a("a"),Bio=o("BeitFeatureExtractor"),Iio=o(" (BEiT model)"),qio=l(),ah=a("li"),Nae=a("strong"),Nio=o("clip"),jio=o(" \u2014 "),TB=a("a"),Dio=o("CLIPFeatureExtractor"),Gio=o(" (CLIP model)"),Oio=l(),nh=a("li"),jae=a("strong"),Vio=o("convnext"),Xio=o(" \u2014 "),MB=a("a"),zio=o("ConvNextFeatureExtractor"),Wio=o(" (ConvNext model)"),Qio=l(),sh=a("li"),Dae=a("strong"),Hio=o("cvt"),Uio=o(" \u2014 "),EB=a("a"),Jio=o("ConvNextFeatureExtractor"),Yio=o(" (CvT model)"),Kio=l(),lh=a("li"),Gae=a("strong"),Zio=o("data2vec-audio"),edo=o(" \u2014 "),CB=a("a"),odo=o("Wav2Vec2FeatureExtractor"),rdo=o(" (Data2VecAudio model)"),tdo=l(),ih=a("li"),Oae=a("strong"),ado=o("data2vec-vision"),ndo=o(" \u2014 "),wB=a("a"),sdo=o("BeitFeatureExtractor"),ldo=o(" (Data2VecVision model)"),ido=l(),dh=a("li"),Vae=a("strong"),ddo=o("deit"),cdo=o(" \u2014 "),AB=a("a"),fdo=o("DeiTFeatureExtractor"),mdo=o(" (DeiT model)"),gdo=l(),ch=a("li"),Xae=a("strong"),hdo=o("detr"),pdo=o(" \u2014 "),yB=a("a"),_do=o("DetrFeatureExtractor"),udo=o(" (DETR model)"),bdo=l(),fh=a("li"),zae=a("strong"),vdo=o("dpt"),Fdo=o(" \u2014 "),LB=a("a"),Tdo=o("DPTFeatureExtractor"),Mdo=o(" (DPT model)"),Edo=l(),mh=a("li"),Wae=a("strong"),Cdo=o("flava"),wdo=o(" \u2014 "),xB=a("a"),Ado=o("FlavaFeatureExtractor"),ydo=o(" (Flava model)"),Ldo=l(),gh=a("li"),Qae=a("strong"),xdo=o("glpn"),$do=o(" \u2014 "),$B=a("a"),kdo=o("GLPNFeatureExtractor"),Sdo=o(" (GLPN model)"),Rdo=l(),hh=a("li"),Hae=a("strong"),Pdo=o("hubert"),Bdo=o(" \u2014 "),kB=a("a"),Ido=o("Wav2Vec2FeatureExtractor"),qdo=o(" (Hubert model)"),Ndo=l(),ph=a("li"),Uae=a("strong"),jdo=o("layoutlmv2"),Ddo=o(" \u2014 "),SB=a("a"),Gdo=o("LayoutLMv2FeatureExtractor"),Odo=o(" (LayoutLMv2 model)"),Vdo=l(),_h=a("li"),Jae=a("strong"),Xdo=o("maskformer"),zdo=o(" \u2014 "),RB=a("a"),Wdo=o("MaskFormerFeatureExtractor"),Qdo=o(" (MaskFormer model)"),Hdo=l(),uh=a("li"),Yae=a("strong"),Udo=o("perceiver"),Jdo=o(" \u2014 "),PB=a("a"),Ydo=o("PerceiverFeatureExtractor"),Kdo=o(" (Perceiver model)"),Zdo=l(),bh=a("li"),Kae=a("strong"),eco=o("poolformer"),oco=o(" \u2014 "),BB=a("a"),rco=o("PoolFormerFeatureExtractor"),tco=o(" (PoolFormer model)"),aco=l(),vh=a("li"),Zae=a("strong"),nco=o("regnet"),sco=o(" \u2014 "),IB=a("a"),lco=o("ConvNextFeatureExtractor"),ico=o(" (RegNet model)"),dco=l(),Fh=a("li"),ene=a("strong"),cco=o("resnet"),fco=o(" \u2014 "),qB=a("a"),mco=o("ConvNextFeatureExtractor"),gco=o(" (ResNet model)"),hco=l(),Th=a("li"),one=a("strong"),pco=o("segformer"),_co=o(" \u2014 "),NB=a("a"),uco=o("SegformerFeatureExtractor"),bco=o(" (SegFormer model)"),vco=l(),Mh=a("li"),rne=a("strong"),Fco=o("speech_to_text"),Tco=o(" \u2014 "),jB=a("a"),Mco=o("Speech2TextFeatureExtractor"),Eco=o(" (Speech2Text model)"),Cco=l(),Eh=a("li"),tne=a("strong"),wco=o("swin"),Aco=o(" \u2014 "),DB=a("a"),yco=o("ViTFeatureExtractor"),Lco=o(" (Swin model)"),xco=l(),Ch=a("li"),ane=a("strong"),$co=o("van"),kco=o(" \u2014 "),GB=a("a"),Sco=o("ConvNextFeatureExtractor"),Rco=o(" (VAN model)"),Pco=l(),wh=a("li"),nne=a("strong"),Bco=o("vit"),Ico=o(" \u2014 "),OB=a("a"),qco=o("ViTFeatureExtractor"),Nco=o(" (ViT model)"),jco=l(),Ah=a("li"),sne=a("strong"),Dco=o("vit_mae"),Gco=o(" \u2014 "),VB=a("a"),Oco=o("ViTFeatureExtractor"),Vco=o(" (ViTMAE model)"),Xco=l(),yh=a("li"),lne=a("strong"),zco=o("wav2vec2"),Wco=o(" \u2014 "),XB=a("a"),Qco=o("Wav2Vec2FeatureExtractor"),Hco=o(" (Wav2Vec2 model)"),Uco=l(),Lh=a("li"),ine=a("strong"),Jco=o("wav2vec2-conformer"),Yco=o(" \u2014 "),zB=a("a"),Kco=o("Wav2Vec2FeatureExtractor"),Zco=o(" (Wav2Vec2-Conformer model)"),efo=l(),xh=a("li"),dne=a("strong"),ofo=o("yolos"),rfo=o(" \u2014 "),WB=a("a"),tfo=o("YolosFeatureExtractor"),afo=o(" (YOLOS model)"),nfo=l(),F($h.$$.fragment),sfo=l(),F(kh.$$.fragment),lfo=l(),Sh=a("div"),F(R6.$$.fragment),ifo=l(),cne=a("p"),dfo=o("Register a new feature extractor for this class."),fqe=l(),Ei=a("h2"),Rh=a("a"),fne=a("span"),F(P6.$$.fragment),cfo=l(),mne=a("span"),ffo=o("AutoProcessor"),mqe=l(),yo=a("div"),F(B6.$$.fragment),mfo=l(),I6=a("p"),gfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=a("a"),hfo=o("AutoProcessor.from_pretrained()"),pfo=o(" class method."),_fo=l(),q6=a("p"),ufo=o("This class cannot be instantiated directly using "),gne=a("code"),bfo=o("__init__()"),vfo=o(" (throws an error)."),Ffo=l(),Ue=a("div"),F(N6.$$.fragment),Tfo=l(),hne=a("p"),Mfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Efo=l(),Ci=a("p"),Cfo=o("The processor class to instantiate is selected based on the "),pne=a("code"),wfo=o("model_type"),Afo=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),yfo=o("pretrained_model_name_or_path"),Lfo=o(" if possible):"),xfo=l(),pe=a("ul"),Ph=a("li"),une=a("strong"),$fo=o("clip"),kfo=o(" \u2014 "),HB=a("a"),Sfo=o("CLIPProcessor"),Rfo=o(" (CLIP model)"),Pfo=l(),Bh=a("li"),bne=a("strong"),Bfo=o("flava"),Ifo=o(" \u2014 "),vne=a("code"),qfo=o("FLAVAProcessor"),Nfo=o(" (Flava model)"),jfo=l(),Ih=a("li"),Fne=a("strong"),Dfo=o("layoutlmv2"),Gfo=o(" \u2014 "),UB=a("a"),Ofo=o("LayoutLMv2Processor"),Vfo=o(" (LayoutLMv2 model)"),Xfo=l(),qh=a("li"),Tne=a("strong"),zfo=o("layoutxlm"),Wfo=o(" \u2014 "),JB=a("a"),Qfo=o("LayoutXLMProcessor"),Hfo=o(" (LayoutXLM model)"),Ufo=l(),Nh=a("li"),Mne=a("strong"),Jfo=o("sew"),Yfo=o(" \u2014 "),YB=a("a"),Kfo=o("Wav2Vec2Processor"),Zfo=o(" (SEW model)"),emo=l(),jh=a("li"),Ene=a("strong"),omo=o("sew-d"),rmo=o(" \u2014 "),KB=a("a"),tmo=o("Wav2Vec2Processor"),amo=o(" (SEW-D model)"),nmo=l(),Dh=a("li"),Cne=a("strong"),smo=o("speech_to_text"),lmo=o(" \u2014 "),ZB=a("a"),imo=o("Speech2TextProcessor"),dmo=o(" (Speech2Text model)"),cmo=l(),Gh=a("li"),wne=a("strong"),fmo=o("speech_to_text_2"),mmo=o(" \u2014 "),eI=a("a"),gmo=o("Speech2Text2Processor"),hmo=o(" (Speech2Text2 model)"),pmo=l(),Oh=a("li"),Ane=a("strong"),_mo=o("trocr"),umo=o(" \u2014 "),oI=a("a"),bmo=o("TrOCRProcessor"),vmo=o(" (TrOCR model)"),Fmo=l(),Vh=a("li"),yne=a("strong"),Tmo=o("unispeech"),Mmo=o(" \u2014 "),rI=a("a"),Emo=o("Wav2Vec2Processor"),Cmo=o(" (UniSpeech model)"),wmo=l(),Xh=a("li"),Lne=a("strong"),Amo=o("unispeech-sat"),ymo=o(" \u2014 "),tI=a("a"),Lmo=o("Wav2Vec2Processor"),xmo=o(" (UniSpeechSat model)"),$mo=l(),zh=a("li"),xne=a("strong"),kmo=o("vilt"),Smo=o(" \u2014 "),aI=a("a"),Rmo=o("ViltProcessor"),Pmo=o(" (ViLT model)"),Bmo=l(),Wh=a("li"),$ne=a("strong"),Imo=o("vision-text-dual-encoder"),qmo=o(" \u2014 "),nI=a("a"),Nmo=o("VisionTextDualEncoderProcessor"),jmo=o(" (VisionTextDualEncoder model)"),Dmo=l(),Qh=a("li"),kne=a("strong"),Gmo=o("wav2vec2"),Omo=o(" \u2014 "),sI=a("a"),Vmo=o("Wav2Vec2Processor"),Xmo=o(" (Wav2Vec2 model)"),zmo=l(),Hh=a("li"),Sne=a("strong"),Wmo=o("wav2vec2-conformer"),Qmo=o(" \u2014 "),lI=a("a"),Hmo=o("Wav2Vec2Processor"),Umo=o(" (Wav2Vec2-Conformer model)"),Jmo=l(),Uh=a("li"),Rne=a("strong"),Ymo=o("wavlm"),Kmo=o(" \u2014 "),iI=a("a"),Zmo=o("Wav2Vec2Processor"),ego=o(" (WavLM model)"),ogo=l(),F(Jh.$$.fragment),rgo=l(),F(Yh.$$.fragment),tgo=l(),Kh=a("div"),F(j6.$$.fragment),ago=l(),Pne=a("p"),ngo=o("Register a new processor for this class."),gqe=l(),wi=a("h2"),Zh=a("a"),Bne=a("span"),F(D6.$$.fragment),sgo=l(),Ine=a("span"),lgo=o("AutoModel"),hqe=l(),Lo=a("div"),F(G6.$$.fragment),igo=l(),Ai=a("p"),dgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dI=a("a"),cgo=o("from_pretrained()"),fgo=o(" class method or the "),cI=a("a"),mgo=o("from_config()"),ggo=o(` class
method.`),hgo=l(),O6=a("p"),pgo=o("This class cannot be instantiated directly using "),qne=a("code"),_go=o("__init__()"),ugo=o(" (throws an error)."),bgo=l(),tt=a("div"),F(V6.$$.fragment),vgo=l(),Nne=a("p"),Fgo=o("Instantiates one of the base model classes of the library from a configuration."),Tgo=l(),yi=a("p"),Mgo=o(`Note:
Loading a model from its configuration file does `),jne=a("strong"),Ego=o("not"),Cgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=a("a"),wgo=o("from_pretrained()"),Ago=o(" to load the model weights."),ygo=l(),F(ep.$$.fragment),Lgo=l(),Je=a("div"),F(X6.$$.fragment),xgo=l(),Dne=a("p"),$go=o("Instantiate one of the base model classes of the library from a pretrained model."),kgo=l(),La=a("p"),Sgo=o("The model class to instantiate is selected based on the "),Gne=a("code"),Rgo=o("model_type"),Pgo=o(` property of the config object (either
passed as an argument or loaded from `),One=a("code"),Bgo=o("pretrained_model_name_or_path"),Igo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=a("code"),qgo=o("pretrained_model_name_or_path"),Ngo=o(":"),jgo=l(),x=a("ul"),op=a("li"),Xne=a("strong"),Dgo=o("albert"),Ggo=o(" \u2014 "),mI=a("a"),Ogo=o("AlbertModel"),Vgo=o(" (ALBERT model)"),Xgo=l(),rp=a("li"),zne=a("strong"),zgo=o("bart"),Wgo=o(" \u2014 "),gI=a("a"),Qgo=o("BartModel"),Hgo=o(" (BART model)"),Ugo=l(),tp=a("li"),Wne=a("strong"),Jgo=o("beit"),Ygo=o(" \u2014 "),hI=a("a"),Kgo=o("BeitModel"),Zgo=o(" (BEiT model)"),eho=l(),ap=a("li"),Qne=a("strong"),oho=o("bert"),rho=o(" \u2014 "),pI=a("a"),tho=o("BertModel"),aho=o(" (BERT model)"),nho=l(),np=a("li"),Hne=a("strong"),sho=o("bert-generation"),lho=o(" \u2014 "),_I=a("a"),iho=o("BertGenerationEncoder"),dho=o(" (Bert Generation model)"),cho=l(),sp=a("li"),Une=a("strong"),fho=o("big_bird"),mho=o(" \u2014 "),uI=a("a"),gho=o("BigBirdModel"),hho=o(" (BigBird model)"),pho=l(),lp=a("li"),Jne=a("strong"),_ho=o("bigbird_pegasus"),uho=o(" \u2014 "),bI=a("a"),bho=o("BigBirdPegasusModel"),vho=o(" (BigBirdPegasus model)"),Fho=l(),ip=a("li"),Yne=a("strong"),Tho=o("blenderbot"),Mho=o(" \u2014 "),vI=a("a"),Eho=o("BlenderbotModel"),Cho=o(" (Blenderbot model)"),who=l(),dp=a("li"),Kne=a("strong"),Aho=o("blenderbot-small"),yho=o(" \u2014 "),FI=a("a"),Lho=o("BlenderbotSmallModel"),xho=o(" (BlenderbotSmall model)"),$ho=l(),cp=a("li"),Zne=a("strong"),kho=o("camembert"),Sho=o(" \u2014 "),TI=a("a"),Rho=o("CamembertModel"),Pho=o(" (CamemBERT model)"),Bho=l(),fp=a("li"),ese=a("strong"),Iho=o("canine"),qho=o(" \u2014 "),MI=a("a"),Nho=o("CanineModel"),jho=o(" (Canine model)"),Dho=l(),mp=a("li"),ose=a("strong"),Gho=o("clip"),Oho=o(" \u2014 "),EI=a("a"),Vho=o("CLIPModel"),Xho=o(" (CLIP model)"),zho=l(),gp=a("li"),rse=a("strong"),Who=o("convbert"),Qho=o(" \u2014 "),CI=a("a"),Hho=o("ConvBertModel"),Uho=o(" (ConvBERT model)"),Jho=l(),hp=a("li"),tse=a("strong"),Yho=o("convnext"),Kho=o(" \u2014 "),wI=a("a"),Zho=o("ConvNextModel"),epo=o(" (ConvNext model)"),opo=l(),pp=a("li"),ase=a("strong"),rpo=o("ctrl"),tpo=o(" \u2014 "),AI=a("a"),apo=o("CTRLModel"),npo=o(" (CTRL model)"),spo=l(),_p=a("li"),nse=a("strong"),lpo=o("cvt"),ipo=o(" \u2014 "),yI=a("a"),dpo=o("CvtModel"),cpo=o(" (CvT model)"),fpo=l(),up=a("li"),sse=a("strong"),mpo=o("data2vec-audio"),gpo=o(" \u2014 "),LI=a("a"),hpo=o("Data2VecAudioModel"),ppo=o(" (Data2VecAudio model)"),_po=l(),bp=a("li"),lse=a("strong"),upo=o("data2vec-text"),bpo=o(" \u2014 "),xI=a("a"),vpo=o("Data2VecTextModel"),Fpo=o(" (Data2VecText model)"),Tpo=l(),vp=a("li"),ise=a("strong"),Mpo=o("data2vec-vision"),Epo=o(" \u2014 "),$I=a("a"),Cpo=o("Data2VecVisionModel"),wpo=o(" (Data2VecVision model)"),Apo=l(),Fp=a("li"),dse=a("strong"),ypo=o("deberta"),Lpo=o(" \u2014 "),kI=a("a"),xpo=o("DebertaModel"),$po=o(" (DeBERTa model)"),kpo=l(),Tp=a("li"),cse=a("strong"),Spo=o("deberta-v2"),Rpo=o(" \u2014 "),SI=a("a"),Ppo=o("DebertaV2Model"),Bpo=o(" (DeBERTa-v2 model)"),Ipo=l(),Mp=a("li"),fse=a("strong"),qpo=o("decision_transformer"),Npo=o(" \u2014 "),RI=a("a"),jpo=o("DecisionTransformerModel"),Dpo=o(" (Decision Transformer model)"),Gpo=l(),Ep=a("li"),mse=a("strong"),Opo=o("deit"),Vpo=o(" \u2014 "),PI=a("a"),Xpo=o("DeiTModel"),zpo=o(" (DeiT model)"),Wpo=l(),Cp=a("li"),gse=a("strong"),Qpo=o("detr"),Hpo=o(" \u2014 "),BI=a("a"),Upo=o("DetrModel"),Jpo=o(" (DETR model)"),Ypo=l(),wp=a("li"),hse=a("strong"),Kpo=o("distilbert"),Zpo=o(" \u2014 "),II=a("a"),e_o=o("DistilBertModel"),o_o=o(" (DistilBERT model)"),r_o=l(),Ap=a("li"),pse=a("strong"),t_o=o("dpr"),a_o=o(" \u2014 "),qI=a("a"),n_o=o("DPRQuestionEncoder"),s_o=o(" (DPR model)"),l_o=l(),yp=a("li"),_se=a("strong"),i_o=o("dpt"),d_o=o(" \u2014 "),NI=a("a"),c_o=o("DPTModel"),f_o=o(" (DPT model)"),m_o=l(),Lp=a("li"),use=a("strong"),g_o=o("electra"),h_o=o(" \u2014 "),jI=a("a"),p_o=o("ElectraModel"),__o=o(" (ELECTRA model)"),u_o=l(),xp=a("li"),bse=a("strong"),b_o=o("flaubert"),v_o=o(" \u2014 "),DI=a("a"),F_o=o("FlaubertModel"),T_o=o(" (FlauBERT model)"),M_o=l(),$p=a("li"),vse=a("strong"),E_o=o("flava"),C_o=o(" \u2014 "),GI=a("a"),w_o=o("FlavaModel"),A_o=o(" (Flava model)"),y_o=l(),kp=a("li"),Fse=a("strong"),L_o=o("fnet"),x_o=o(" \u2014 "),OI=a("a"),$_o=o("FNetModel"),k_o=o(" (FNet model)"),S_o=l(),Sp=a("li"),Tse=a("strong"),R_o=o("fsmt"),P_o=o(" \u2014 "),VI=a("a"),B_o=o("FSMTModel"),I_o=o(" (FairSeq Machine-Translation model)"),q_o=l(),Ps=a("li"),Mse=a("strong"),N_o=o("funnel"),j_o=o(" \u2014 "),XI=a("a"),D_o=o("FunnelModel"),G_o=o(" or "),zI=a("a"),O_o=o("FunnelBaseModel"),V_o=o(" (Funnel Transformer model)"),X_o=l(),Rp=a("li"),Ese=a("strong"),z_o=o("glpn"),W_o=o(" \u2014 "),WI=a("a"),Q_o=o("GLPNModel"),H_o=o(" (GLPN model)"),U_o=l(),Pp=a("li"),Cse=a("strong"),J_o=o("gpt2"),Y_o=o(" \u2014 "),QI=a("a"),K_o=o("GPT2Model"),Z_o=o(" (OpenAI GPT-2 model)"),euo=l(),Bp=a("li"),wse=a("strong"),ouo=o("gpt_neo"),ruo=o(" \u2014 "),HI=a("a"),tuo=o("GPTNeoModel"),auo=o(" (GPT Neo model)"),nuo=l(),Ip=a("li"),Ase=a("strong"),suo=o("gptj"),luo=o(" \u2014 "),UI=a("a"),iuo=o("GPTJModel"),duo=o(" (GPT-J model)"),cuo=l(),qp=a("li"),yse=a("strong"),fuo=o("hubert"),muo=o(" \u2014 "),JI=a("a"),guo=o("HubertModel"),huo=o(" (Hubert model)"),puo=l(),Np=a("li"),Lse=a("strong"),_uo=o("ibert"),uuo=o(" \u2014 "),YI=a("a"),buo=o("IBertModel"),vuo=o(" (I-BERT model)"),Fuo=l(),jp=a("li"),xse=a("strong"),Tuo=o("imagegpt"),Muo=o(" \u2014 "),KI=a("a"),Euo=o("ImageGPTModel"),Cuo=o(" (ImageGPT model)"),wuo=l(),Dp=a("li"),$se=a("strong"),Auo=o("layoutlm"),yuo=o(" \u2014 "),ZI=a("a"),Luo=o("LayoutLMModel"),xuo=o(" (LayoutLM model)"),$uo=l(),Gp=a("li"),kse=a("strong"),kuo=o("layoutlmv2"),Suo=o(" \u2014 "),eq=a("a"),Ruo=o("LayoutLMv2Model"),Puo=o(" (LayoutLMv2 model)"),Buo=l(),Op=a("li"),Sse=a("strong"),Iuo=o("led"),quo=o(" \u2014 "),oq=a("a"),Nuo=o("LEDModel"),juo=o(" (LED model)"),Duo=l(),Vp=a("li"),Rse=a("strong"),Guo=o("longformer"),Ouo=o(" \u2014 "),rq=a("a"),Vuo=o("LongformerModel"),Xuo=o(" (Longformer model)"),zuo=l(),Xp=a("li"),Pse=a("strong"),Wuo=o("luke"),Quo=o(" \u2014 "),tq=a("a"),Huo=o("LukeModel"),Uuo=o(" (LUKE model)"),Juo=l(),zp=a("li"),Bse=a("strong"),Yuo=o("lxmert"),Kuo=o(" \u2014 "),aq=a("a"),Zuo=o("LxmertModel"),e2o=o(" (LXMERT model)"),o2o=l(),Wp=a("li"),Ise=a("strong"),r2o=o("m2m_100"),t2o=o(" \u2014 "),nq=a("a"),a2o=o("M2M100Model"),n2o=o(" (M2M100 model)"),s2o=l(),Qp=a("li"),qse=a("strong"),l2o=o("marian"),i2o=o(" \u2014 "),sq=a("a"),d2o=o("MarianModel"),c2o=o(" (Marian model)"),f2o=l(),Hp=a("li"),Nse=a("strong"),m2o=o("maskformer"),g2o=o(" \u2014 "),lq=a("a"),h2o=o("MaskFormerModel"),p2o=o(" (MaskFormer model)"),_2o=l(),Up=a("li"),jse=a("strong"),u2o=o("mbart"),b2o=o(" \u2014 "),iq=a("a"),v2o=o("MBartModel"),F2o=o(" (mBART model)"),T2o=l(),Jp=a("li"),Dse=a("strong"),M2o=o("megatron-bert"),E2o=o(" \u2014 "),dq=a("a"),C2o=o("MegatronBertModel"),w2o=o(" (MegatronBert model)"),A2o=l(),Yp=a("li"),Gse=a("strong"),y2o=o("mobilebert"),L2o=o(" \u2014 "),cq=a("a"),x2o=o("MobileBertModel"),$2o=o(" (MobileBERT model)"),k2o=l(),Kp=a("li"),Ose=a("strong"),S2o=o("mpnet"),R2o=o(" \u2014 "),fq=a("a"),P2o=o("MPNetModel"),B2o=o(" (MPNet model)"),I2o=l(),Zp=a("li"),Vse=a("strong"),q2o=o("mt5"),N2o=o(" \u2014 "),mq=a("a"),j2o=o("MT5Model"),D2o=o(" (mT5 model)"),G2o=l(),e_=a("li"),Xse=a("strong"),O2o=o("nystromformer"),V2o=o(" \u2014 "),gq=a("a"),X2o=o("NystromformerModel"),z2o=o(" (Nystromformer model)"),W2o=l(),o_=a("li"),zse=a("strong"),Q2o=o("openai-gpt"),H2o=o(" \u2014 "),hq=a("a"),U2o=o("OpenAIGPTModel"),J2o=o(" (OpenAI GPT model)"),Y2o=l(),r_=a("li"),Wse=a("strong"),K2o=o("opt"),Z2o=o(" \u2014 "),pq=a("a"),e1o=o("OPTModel"),o1o=o(" (OPT model)"),r1o=l(),t_=a("li"),Qse=a("strong"),t1o=o("pegasus"),a1o=o(" \u2014 "),_q=a("a"),n1o=o("PegasusModel"),s1o=o(" (Pegasus model)"),l1o=l(),a_=a("li"),Hse=a("strong"),i1o=o("perceiver"),d1o=o(" \u2014 "),uq=a("a"),c1o=o("PerceiverModel"),f1o=o(" (Perceiver model)"),m1o=l(),n_=a("li"),Use=a("strong"),g1o=o("plbart"),h1o=o(" \u2014 "),bq=a("a"),p1o=o("PLBartModel"),_1o=o(" (PLBart model)"),u1o=l(),s_=a("li"),Jse=a("strong"),b1o=o("poolformer"),v1o=o(" \u2014 "),vq=a("a"),F1o=o("PoolFormerModel"),T1o=o(" (PoolFormer model)"),M1o=l(),l_=a("li"),Yse=a("strong"),E1o=o("prophetnet"),C1o=o(" \u2014 "),Fq=a("a"),w1o=o("ProphetNetModel"),A1o=o(" (ProphetNet model)"),y1o=l(),i_=a("li"),Kse=a("strong"),L1o=o("qdqbert"),x1o=o(" \u2014 "),Tq=a("a"),$1o=o("QDQBertModel"),k1o=o(" (QDQBert model)"),S1o=l(),d_=a("li"),Zse=a("strong"),R1o=o("reformer"),P1o=o(" \u2014 "),Mq=a("a"),B1o=o("ReformerModel"),I1o=o(" (Reformer model)"),q1o=l(),c_=a("li"),ele=a("strong"),N1o=o("regnet"),j1o=o(" \u2014 "),Eq=a("a"),D1o=o("RegNetModel"),G1o=o(" (RegNet model)"),O1o=l(),f_=a("li"),ole=a("strong"),V1o=o("rembert"),X1o=o(" \u2014 "),Cq=a("a"),z1o=o("RemBertModel"),W1o=o(" (RemBERT model)"),Q1o=l(),m_=a("li"),rle=a("strong"),H1o=o("resnet"),U1o=o(" \u2014 "),wq=a("a"),J1o=o("ResNetModel"),Y1o=o(" (ResNet model)"),K1o=l(),g_=a("li"),tle=a("strong"),Z1o=o("retribert"),ebo=o(" \u2014 "),Aq=a("a"),obo=o("RetriBertModel"),rbo=o(" (RetriBERT model)"),tbo=l(),h_=a("li"),ale=a("strong"),abo=o("roberta"),nbo=o(" \u2014 "),yq=a("a"),sbo=o("RobertaModel"),lbo=o(" (RoBERTa model)"),ibo=l(),p_=a("li"),nle=a("strong"),dbo=o("roformer"),cbo=o(" \u2014 "),Lq=a("a"),fbo=o("RoFormerModel"),mbo=o(" (RoFormer model)"),gbo=l(),__=a("li"),sle=a("strong"),hbo=o("segformer"),pbo=o(" \u2014 "),xq=a("a"),_bo=o("SegformerModel"),ubo=o(" (SegFormer model)"),bbo=l(),u_=a("li"),lle=a("strong"),vbo=o("sew"),Fbo=o(" \u2014 "),$q=a("a"),Tbo=o("SEWModel"),Mbo=o(" (SEW model)"),Ebo=l(),b_=a("li"),ile=a("strong"),Cbo=o("sew-d"),wbo=o(" \u2014 "),kq=a("a"),Abo=o("SEWDModel"),ybo=o(" (SEW-D model)"),Lbo=l(),v_=a("li"),dle=a("strong"),xbo=o("speech_to_text"),$bo=o(" \u2014 "),Sq=a("a"),kbo=o("Speech2TextModel"),Sbo=o(" (Speech2Text model)"),Rbo=l(),F_=a("li"),cle=a("strong"),Pbo=o("splinter"),Bbo=o(" \u2014 "),Rq=a("a"),Ibo=o("SplinterModel"),qbo=o(" (Splinter model)"),Nbo=l(),T_=a("li"),fle=a("strong"),jbo=o("squeezebert"),Dbo=o(" \u2014 "),Pq=a("a"),Gbo=o("SqueezeBertModel"),Obo=o(" (SqueezeBERT model)"),Vbo=l(),M_=a("li"),mle=a("strong"),Xbo=o("swin"),zbo=o(" \u2014 "),Bq=a("a"),Wbo=o("SwinModel"),Qbo=o(" (Swin model)"),Hbo=l(),E_=a("li"),gle=a("strong"),Ubo=o("t5"),Jbo=o(" \u2014 "),Iq=a("a"),Ybo=o("T5Model"),Kbo=o(" (T5 model)"),Zbo=l(),C_=a("li"),hle=a("strong"),e4o=o("tapas"),o4o=o(" \u2014 "),qq=a("a"),r4o=o("TapasModel"),t4o=o(" (TAPAS model)"),a4o=l(),w_=a("li"),ple=a("strong"),n4o=o("trajectory_transformer"),s4o=o(" \u2014 "),Nq=a("a"),l4o=o("TrajectoryTransformerModel"),i4o=o(" (Trajectory Transformer model)"),d4o=l(),A_=a("li"),_le=a("strong"),c4o=o("transfo-xl"),f4o=o(" \u2014 "),jq=a("a"),m4o=o("TransfoXLModel"),g4o=o(" (Transformer-XL model)"),h4o=l(),y_=a("li"),ule=a("strong"),p4o=o("unispeech"),_4o=o(" \u2014 "),Dq=a("a"),u4o=o("UniSpeechModel"),b4o=o(" (UniSpeech model)"),v4o=l(),L_=a("li"),ble=a("strong"),F4o=o("unispeech-sat"),T4o=o(" \u2014 "),Gq=a("a"),M4o=o("UniSpeechSatModel"),E4o=o(" (UniSpeechSat model)"),C4o=l(),x_=a("li"),vle=a("strong"),w4o=o("van"),A4o=o(" \u2014 "),Oq=a("a"),y4o=o("VanModel"),L4o=o(" (VAN model)"),x4o=l(),$_=a("li"),Fle=a("strong"),$4o=o("vilt"),k4o=o(" \u2014 "),Vq=a("a"),S4o=o("ViltModel"),R4o=o(" (ViLT model)"),P4o=l(),k_=a("li"),Tle=a("strong"),B4o=o("vision-text-dual-encoder"),I4o=o(" \u2014 "),Xq=a("a"),q4o=o("VisionTextDualEncoderModel"),N4o=o(" (VisionTextDualEncoder model)"),j4o=l(),S_=a("li"),Mle=a("strong"),D4o=o("visual_bert"),G4o=o(" \u2014 "),zq=a("a"),O4o=o("VisualBertModel"),V4o=o(" (VisualBert model)"),X4o=l(),R_=a("li"),Ele=a("strong"),z4o=o("vit"),W4o=o(" \u2014 "),Wq=a("a"),Q4o=o("ViTModel"),H4o=o(" (ViT model)"),U4o=l(),P_=a("li"),Cle=a("strong"),J4o=o("vit_mae"),Y4o=o(" \u2014 "),Qq=a("a"),K4o=o("ViTMAEModel"),Z4o=o(" (ViTMAE model)"),e5o=l(),B_=a("li"),wle=a("strong"),o5o=o("wav2vec2"),r5o=o(" \u2014 "),Hq=a("a"),t5o=o("Wav2Vec2Model"),a5o=o(" (Wav2Vec2 model)"),n5o=l(),I_=a("li"),Ale=a("strong"),s5o=o("wav2vec2-conformer"),l5o=o(" \u2014 "),Uq=a("a"),i5o=o("Wav2Vec2ConformerModel"),d5o=o(" (Wav2Vec2-Conformer model)"),c5o=l(),q_=a("li"),yle=a("strong"),f5o=o("wavlm"),m5o=o(" \u2014 "),Jq=a("a"),g5o=o("WavLMModel"),h5o=o(" (WavLM model)"),p5o=l(),N_=a("li"),Lle=a("strong"),_5o=o("xglm"),u5o=o(" \u2014 "),Yq=a("a"),b5o=o("XGLMModel"),v5o=o(" (XGLM model)"),F5o=l(),j_=a("li"),xle=a("strong"),T5o=o("xlm"),M5o=o(" \u2014 "),Kq=a("a"),E5o=o("XLMModel"),C5o=o(" (XLM model)"),w5o=l(),D_=a("li"),$le=a("strong"),A5o=o("xlm-prophetnet"),y5o=o(" \u2014 "),Zq=a("a"),L5o=o("XLMProphetNetModel"),x5o=o(" (XLMProphetNet model)"),$5o=l(),G_=a("li"),kle=a("strong"),k5o=o("xlm-roberta"),S5o=o(" \u2014 "),eN=a("a"),R5o=o("XLMRobertaModel"),P5o=o(" (XLM-RoBERTa model)"),B5o=l(),O_=a("li"),Sle=a("strong"),I5o=o("xlm-roberta-xl"),q5o=o(" \u2014 "),oN=a("a"),N5o=o("XLMRobertaXLModel"),j5o=o(" (XLM-RoBERTa-XL model)"),D5o=l(),V_=a("li"),Rle=a("strong"),G5o=o("xlnet"),O5o=o(" \u2014 "),rN=a("a"),V5o=o("XLNetModel"),X5o=o(" (XLNet model)"),z5o=l(),X_=a("li"),Ple=a("strong"),W5o=o("yolos"),Q5o=o(" \u2014 "),tN=a("a"),H5o=o("YolosModel"),U5o=o(" (YOLOS model)"),J5o=l(),z_=a("li"),Ble=a("strong"),Y5o=o("yoso"),K5o=o(" \u2014 "),aN=a("a"),Z5o=o("YosoModel"),evo=o(" (YOSO model)"),ovo=l(),W_=a("p"),rvo=o("The model is set in evaluation mode by default using "),Ile=a("code"),tvo=o("model.eval()"),avo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=a("code"),nvo=o("model.train()"),svo=l(),F(Q_.$$.fragment),pqe=l(),Li=a("h2"),H_=a("a"),Nle=a("span"),F(z6.$$.fragment),lvo=l(),jle=a("span"),ivo=o("AutoModelForPreTraining"),_qe=l(),xo=a("div"),F(W6.$$.fragment),dvo=l(),xi=a("p"),cvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nN=a("a"),fvo=o("from_pretrained()"),mvo=o(" class method or the "),sN=a("a"),gvo=o("from_config()"),hvo=o(` class
method.`),pvo=l(),Q6=a("p"),_vo=o("This class cannot be instantiated directly using "),Dle=a("code"),uvo=o("__init__()"),bvo=o(" (throws an error)."),vvo=l(),at=a("div"),F(H6.$$.fragment),Fvo=l(),Gle=a("p"),Tvo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mvo=l(),$i=a("p"),Evo=o(`Note:
Loading a model from its configuration file does `),Ole=a("strong"),Cvo=o("not"),wvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=a("a"),Avo=o("from_pretrained()"),yvo=o(" to load the model weights."),Lvo=l(),F(U_.$$.fragment),xvo=l(),Ye=a("div"),F(U6.$$.fragment),$vo=l(),Vle=a("p"),kvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Svo=l(),xa=a("p"),Rvo=o("The model class to instantiate is selected based on the "),Xle=a("code"),Pvo=o("model_type"),Bvo=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),Ivo=o("pretrained_model_name_or_path"),qvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),Nvo=o("pretrained_model_name_or_path"),jvo=o(":"),Dvo=l(),G=a("ul"),J_=a("li"),Qle=a("strong"),Gvo=o("albert"),Ovo=o(" \u2014 "),iN=a("a"),Vvo=o("AlbertForPreTraining"),Xvo=o(" (ALBERT model)"),zvo=l(),Y_=a("li"),Hle=a("strong"),Wvo=o("bart"),Qvo=o(" \u2014 "),dN=a("a"),Hvo=o("BartForConditionalGeneration"),Uvo=o(" (BART model)"),Jvo=l(),K_=a("li"),Ule=a("strong"),Yvo=o("bert"),Kvo=o(" \u2014 "),cN=a("a"),Zvo=o("BertForPreTraining"),eFo=o(" (BERT model)"),oFo=l(),Z_=a("li"),Jle=a("strong"),rFo=o("big_bird"),tFo=o(" \u2014 "),fN=a("a"),aFo=o("BigBirdForPreTraining"),nFo=o(" (BigBird model)"),sFo=l(),eu=a("li"),Yle=a("strong"),lFo=o("camembert"),iFo=o(" \u2014 "),mN=a("a"),dFo=o("CamembertForMaskedLM"),cFo=o(" (CamemBERT model)"),fFo=l(),ou=a("li"),Kle=a("strong"),mFo=o("ctrl"),gFo=o(" \u2014 "),gN=a("a"),hFo=o("CTRLLMHeadModel"),pFo=o(" (CTRL model)"),_Fo=l(),ru=a("li"),Zle=a("strong"),uFo=o("data2vec-text"),bFo=o(" \u2014 "),hN=a("a"),vFo=o("Data2VecTextForMaskedLM"),FFo=o(" (Data2VecText model)"),TFo=l(),tu=a("li"),eie=a("strong"),MFo=o("deberta"),EFo=o(" \u2014 "),pN=a("a"),CFo=o("DebertaForMaskedLM"),wFo=o(" (DeBERTa model)"),AFo=l(),au=a("li"),oie=a("strong"),yFo=o("deberta-v2"),LFo=o(" \u2014 "),_N=a("a"),xFo=o("DebertaV2ForMaskedLM"),$Fo=o(" (DeBERTa-v2 model)"),kFo=l(),nu=a("li"),rie=a("strong"),SFo=o("distilbert"),RFo=o(" \u2014 "),uN=a("a"),PFo=o("DistilBertForMaskedLM"),BFo=o(" (DistilBERT model)"),IFo=l(),su=a("li"),tie=a("strong"),qFo=o("electra"),NFo=o(" \u2014 "),bN=a("a"),jFo=o("ElectraForPreTraining"),DFo=o(" (ELECTRA model)"),GFo=l(),lu=a("li"),aie=a("strong"),OFo=o("flaubert"),VFo=o(" \u2014 "),vN=a("a"),XFo=o("FlaubertWithLMHeadModel"),zFo=o(" (FlauBERT model)"),WFo=l(),iu=a("li"),nie=a("strong"),QFo=o("flava"),HFo=o(" \u2014 "),FN=a("a"),UFo=o("FlavaForPreTraining"),JFo=o(" (Flava model)"),YFo=l(),du=a("li"),sie=a("strong"),KFo=o("fnet"),ZFo=o(" \u2014 "),TN=a("a"),eTo=o("FNetForPreTraining"),oTo=o(" (FNet model)"),rTo=l(),cu=a("li"),lie=a("strong"),tTo=o("fsmt"),aTo=o(" \u2014 "),MN=a("a"),nTo=o("FSMTForConditionalGeneration"),sTo=o(" (FairSeq Machine-Translation model)"),lTo=l(),fu=a("li"),iie=a("strong"),iTo=o("funnel"),dTo=o(" \u2014 "),EN=a("a"),cTo=o("FunnelForPreTraining"),fTo=o(" (Funnel Transformer model)"),mTo=l(),mu=a("li"),die=a("strong"),gTo=o("gpt2"),hTo=o(" \u2014 "),CN=a("a"),pTo=o("GPT2LMHeadModel"),_To=o(" (OpenAI GPT-2 model)"),uTo=l(),gu=a("li"),cie=a("strong"),bTo=o("ibert"),vTo=o(" \u2014 "),wN=a("a"),FTo=o("IBertForMaskedLM"),TTo=o(" (I-BERT model)"),MTo=l(),hu=a("li"),fie=a("strong"),ETo=o("layoutlm"),CTo=o(" \u2014 "),AN=a("a"),wTo=o("LayoutLMForMaskedLM"),ATo=o(" (LayoutLM model)"),yTo=l(),pu=a("li"),mie=a("strong"),LTo=o("longformer"),xTo=o(" \u2014 "),yN=a("a"),$To=o("LongformerForMaskedLM"),kTo=o(" (Longformer model)"),STo=l(),_u=a("li"),gie=a("strong"),RTo=o("lxmert"),PTo=o(" \u2014 "),LN=a("a"),BTo=o("LxmertForPreTraining"),ITo=o(" (LXMERT model)"),qTo=l(),uu=a("li"),hie=a("strong"),NTo=o("megatron-bert"),jTo=o(" \u2014 "),xN=a("a"),DTo=o("MegatronBertForPreTraining"),GTo=o(" (MegatronBert model)"),OTo=l(),bu=a("li"),pie=a("strong"),VTo=o("mobilebert"),XTo=o(" \u2014 "),$N=a("a"),zTo=o("MobileBertForPreTraining"),WTo=o(" (MobileBERT model)"),QTo=l(),vu=a("li"),_ie=a("strong"),HTo=o("mpnet"),UTo=o(" \u2014 "),kN=a("a"),JTo=o("MPNetForMaskedLM"),YTo=o(" (MPNet model)"),KTo=l(),Fu=a("li"),uie=a("strong"),ZTo=o("openai-gpt"),e7o=o(" \u2014 "),SN=a("a"),o7o=o("OpenAIGPTLMHeadModel"),r7o=o(" (OpenAI GPT model)"),t7o=l(),Tu=a("li"),bie=a("strong"),a7o=o("retribert"),n7o=o(" \u2014 "),RN=a("a"),s7o=o("RetriBertModel"),l7o=o(" (RetriBERT model)"),i7o=l(),Mu=a("li"),vie=a("strong"),d7o=o("roberta"),c7o=o(" \u2014 "),PN=a("a"),f7o=o("RobertaForMaskedLM"),m7o=o(" (RoBERTa model)"),g7o=l(),Eu=a("li"),Fie=a("strong"),h7o=o("splinter"),p7o=o(" \u2014 "),BN=a("a"),_7o=o("SplinterForPreTraining"),u7o=o(" (Splinter model)"),b7o=l(),Cu=a("li"),Tie=a("strong"),v7o=o("squeezebert"),F7o=o(" \u2014 "),IN=a("a"),T7o=o("SqueezeBertForMaskedLM"),M7o=o(" (SqueezeBERT model)"),E7o=l(),wu=a("li"),Mie=a("strong"),C7o=o("t5"),w7o=o(" \u2014 "),qN=a("a"),A7o=o("T5ForConditionalGeneration"),y7o=o(" (T5 model)"),L7o=l(),Au=a("li"),Eie=a("strong"),x7o=o("tapas"),$7o=o(" \u2014 "),NN=a("a"),k7o=o("TapasForMaskedLM"),S7o=o(" (TAPAS model)"),R7o=l(),yu=a("li"),Cie=a("strong"),P7o=o("transfo-xl"),B7o=o(" \u2014 "),jN=a("a"),I7o=o("TransfoXLLMHeadModel"),q7o=o(" (Transformer-XL model)"),N7o=l(),Lu=a("li"),wie=a("strong"),j7o=o("unispeech"),D7o=o(" \u2014 "),DN=a("a"),G7o=o("UniSpeechForPreTraining"),O7o=o(" (UniSpeech model)"),V7o=l(),xu=a("li"),Aie=a("strong"),X7o=o("unispeech-sat"),z7o=o(" \u2014 "),GN=a("a"),W7o=o("UniSpeechSatForPreTraining"),Q7o=o(" (UniSpeechSat model)"),H7o=l(),$u=a("li"),yie=a("strong"),U7o=o("visual_bert"),J7o=o(" \u2014 "),ON=a("a"),Y7o=o("VisualBertForPreTraining"),K7o=o(" (VisualBert model)"),Z7o=l(),ku=a("li"),Lie=a("strong"),eMo=o("vit_mae"),oMo=o(" \u2014 "),VN=a("a"),rMo=o("ViTMAEForPreTraining"),tMo=o(" (ViTMAE model)"),aMo=l(),Su=a("li"),xie=a("strong"),nMo=o("wav2vec2"),sMo=o(" \u2014 "),XN=a("a"),lMo=o("Wav2Vec2ForPreTraining"),iMo=o(" (Wav2Vec2 model)"),dMo=l(),Ru=a("li"),$ie=a("strong"),cMo=o("wav2vec2-conformer"),fMo=o(" \u2014 "),zN=a("a"),mMo=o("Wav2Vec2ConformerForPreTraining"),gMo=o(" (Wav2Vec2-Conformer model)"),hMo=l(),Pu=a("li"),kie=a("strong"),pMo=o("xlm"),_Mo=o(" \u2014 "),WN=a("a"),uMo=o("XLMWithLMHeadModel"),bMo=o(" (XLM model)"),vMo=l(),Bu=a("li"),Sie=a("strong"),FMo=o("xlm-roberta"),TMo=o(" \u2014 "),QN=a("a"),MMo=o("XLMRobertaForMaskedLM"),EMo=o(" (XLM-RoBERTa model)"),CMo=l(),Iu=a("li"),Rie=a("strong"),wMo=o("xlm-roberta-xl"),AMo=o(" \u2014 "),HN=a("a"),yMo=o("XLMRobertaXLForMaskedLM"),LMo=o(" (XLM-RoBERTa-XL model)"),xMo=l(),qu=a("li"),Pie=a("strong"),$Mo=o("xlnet"),kMo=o(" \u2014 "),UN=a("a"),SMo=o("XLNetLMHeadModel"),RMo=o(" (XLNet model)"),PMo=l(),Nu=a("p"),BMo=o("The model is set in evaluation mode by default using "),Bie=a("code"),IMo=o("model.eval()"),qMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=a("code"),NMo=o("model.train()"),jMo=l(),F(ju.$$.fragment),uqe=l(),ki=a("h2"),Du=a("a"),qie=a("span"),F(J6.$$.fragment),DMo=l(),Nie=a("span"),GMo=o("AutoModelForCausalLM"),bqe=l(),$o=a("div"),F(Y6.$$.fragment),OMo=l(),Si=a("p"),VMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=a("a"),XMo=o("from_pretrained()"),zMo=o(" class method or the "),YN=a("a"),WMo=o("from_config()"),QMo=o(` class
method.`),HMo=l(),K6=a("p"),UMo=o("This class cannot be instantiated directly using "),jie=a("code"),JMo=o("__init__()"),YMo=o(" (throws an error)."),KMo=l(),nt=a("div"),F(Z6.$$.fragment),ZMo=l(),Die=a("p"),eEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oEo=l(),Ri=a("p"),rEo=o(`Note:
Loading a model from its configuration file does `),Gie=a("strong"),tEo=o("not"),aEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),nEo=o("from_pretrained()"),sEo=o(" to load the model weights."),lEo=l(),F(Gu.$$.fragment),iEo=l(),Ke=a("div"),F(ey.$$.fragment),dEo=l(),Oie=a("p"),cEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fEo=l(),$a=a("p"),mEo=o("The model class to instantiate is selected based on the "),Vie=a("code"),gEo=o("model_type"),hEo=o(` property of the config object (either
passed as an argument or loaded from `),Xie=a("code"),pEo=o("pretrained_model_name_or_path"),_Eo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=a("code"),uEo=o("pretrained_model_name_or_path"),bEo=o(":"),vEo=l(),z=a("ul"),Ou=a("li"),Wie=a("strong"),FEo=o("bart"),TEo=o(" \u2014 "),ZN=a("a"),MEo=o("BartForCausalLM"),EEo=o(" (BART model)"),CEo=l(),Vu=a("li"),Qie=a("strong"),wEo=o("bert"),AEo=o(" \u2014 "),ej=a("a"),yEo=o("BertLMHeadModel"),LEo=o(" (BERT model)"),xEo=l(),Xu=a("li"),Hie=a("strong"),$Eo=o("bert-generation"),kEo=o(" \u2014 "),oj=a("a"),SEo=o("BertGenerationDecoder"),REo=o(" (Bert Generation model)"),PEo=l(),zu=a("li"),Uie=a("strong"),BEo=o("big_bird"),IEo=o(" \u2014 "),rj=a("a"),qEo=o("BigBirdForCausalLM"),NEo=o(" (BigBird model)"),jEo=l(),Wu=a("li"),Jie=a("strong"),DEo=o("bigbird_pegasus"),GEo=o(" \u2014 "),tj=a("a"),OEo=o("BigBirdPegasusForCausalLM"),VEo=o(" (BigBirdPegasus model)"),XEo=l(),Qu=a("li"),Yie=a("strong"),zEo=o("blenderbot"),WEo=o(" \u2014 "),aj=a("a"),QEo=o("BlenderbotForCausalLM"),HEo=o(" (Blenderbot model)"),UEo=l(),Hu=a("li"),Kie=a("strong"),JEo=o("blenderbot-small"),YEo=o(" \u2014 "),nj=a("a"),KEo=o("BlenderbotSmallForCausalLM"),ZEo=o(" (BlenderbotSmall model)"),eCo=l(),Uu=a("li"),Zie=a("strong"),oCo=o("camembert"),rCo=o(" \u2014 "),sj=a("a"),tCo=o("CamembertForCausalLM"),aCo=o(" (CamemBERT model)"),nCo=l(),Ju=a("li"),ede=a("strong"),sCo=o("ctrl"),lCo=o(" \u2014 "),lj=a("a"),iCo=o("CTRLLMHeadModel"),dCo=o(" (CTRL model)"),cCo=l(),Yu=a("li"),ode=a("strong"),fCo=o("data2vec-text"),mCo=o(" \u2014 "),ij=a("a"),gCo=o("Data2VecTextForCausalLM"),hCo=o(" (Data2VecText model)"),pCo=l(),Ku=a("li"),rde=a("strong"),_Co=o("electra"),uCo=o(" \u2014 "),dj=a("a"),bCo=o("ElectraForCausalLM"),vCo=o(" (ELECTRA model)"),FCo=l(),Zu=a("li"),tde=a("strong"),TCo=o("gpt2"),MCo=o(" \u2014 "),cj=a("a"),ECo=o("GPT2LMHeadModel"),CCo=o(" (OpenAI GPT-2 model)"),wCo=l(),e2=a("li"),ade=a("strong"),ACo=o("gpt_neo"),yCo=o(" \u2014 "),fj=a("a"),LCo=o("GPTNeoForCausalLM"),xCo=o(" (GPT Neo model)"),$Co=l(),o2=a("li"),nde=a("strong"),kCo=o("gptj"),SCo=o(" \u2014 "),mj=a("a"),RCo=o("GPTJForCausalLM"),PCo=o(" (GPT-J model)"),BCo=l(),r2=a("li"),sde=a("strong"),ICo=o("marian"),qCo=o(" \u2014 "),gj=a("a"),NCo=o("MarianForCausalLM"),jCo=o(" (Marian model)"),DCo=l(),t2=a("li"),lde=a("strong"),GCo=o("mbart"),OCo=o(" \u2014 "),hj=a("a"),VCo=o("MBartForCausalLM"),XCo=o(" (mBART model)"),zCo=l(),a2=a("li"),ide=a("strong"),WCo=o("megatron-bert"),QCo=o(" \u2014 "),pj=a("a"),HCo=o("MegatronBertForCausalLM"),UCo=o(" (MegatronBert model)"),JCo=l(),n2=a("li"),dde=a("strong"),YCo=o("openai-gpt"),KCo=o(" \u2014 "),_j=a("a"),ZCo=o("OpenAIGPTLMHeadModel"),e3o=o(" (OpenAI GPT model)"),o3o=l(),s2=a("li"),cde=a("strong"),r3o=o("opt"),t3o=o(" \u2014 "),uj=a("a"),a3o=o("OPTForCausalLM"),n3o=o(" (OPT model)"),s3o=l(),l2=a("li"),fde=a("strong"),l3o=o("pegasus"),i3o=o(" \u2014 "),bj=a("a"),d3o=o("PegasusForCausalLM"),c3o=o(" (Pegasus model)"),f3o=l(),i2=a("li"),mde=a("strong"),m3o=o("plbart"),g3o=o(" \u2014 "),vj=a("a"),h3o=o("PLBartForCausalLM"),p3o=o(" (PLBart model)"),_3o=l(),d2=a("li"),gde=a("strong"),u3o=o("prophetnet"),b3o=o(" \u2014 "),Fj=a("a"),v3o=o("ProphetNetForCausalLM"),F3o=o(" (ProphetNet model)"),T3o=l(),c2=a("li"),hde=a("strong"),M3o=o("qdqbert"),E3o=o(" \u2014 "),Tj=a("a"),C3o=o("QDQBertLMHeadModel"),w3o=o(" (QDQBert model)"),A3o=l(),f2=a("li"),pde=a("strong"),y3o=o("reformer"),L3o=o(" \u2014 "),Mj=a("a"),x3o=o("ReformerModelWithLMHead"),$3o=o(" (Reformer model)"),k3o=l(),m2=a("li"),_de=a("strong"),S3o=o("rembert"),R3o=o(" \u2014 "),Ej=a("a"),P3o=o("RemBertForCausalLM"),B3o=o(" (RemBERT model)"),I3o=l(),g2=a("li"),ude=a("strong"),q3o=o("roberta"),N3o=o(" \u2014 "),Cj=a("a"),j3o=o("RobertaForCausalLM"),D3o=o(" (RoBERTa model)"),G3o=l(),h2=a("li"),bde=a("strong"),O3o=o("roformer"),V3o=o(" \u2014 "),wj=a("a"),X3o=o("RoFormerForCausalLM"),z3o=o(" (RoFormer model)"),W3o=l(),p2=a("li"),vde=a("strong"),Q3o=o("speech_to_text_2"),H3o=o(" \u2014 "),Aj=a("a"),U3o=o("Speech2Text2ForCausalLM"),J3o=o(" (Speech2Text2 model)"),Y3o=l(),_2=a("li"),Fde=a("strong"),K3o=o("transfo-xl"),Z3o=o(" \u2014 "),yj=a("a"),ewo=o("TransfoXLLMHeadModel"),owo=o(" (Transformer-XL model)"),rwo=l(),u2=a("li"),Tde=a("strong"),two=o("trocr"),awo=o(" \u2014 "),Lj=a("a"),nwo=o("TrOCRForCausalLM"),swo=o(" (TrOCR model)"),lwo=l(),b2=a("li"),Mde=a("strong"),iwo=o("xglm"),dwo=o(" \u2014 "),xj=a("a"),cwo=o("XGLMForCausalLM"),fwo=o(" (XGLM model)"),mwo=l(),v2=a("li"),Ede=a("strong"),gwo=o("xlm"),hwo=o(" \u2014 "),$j=a("a"),pwo=o("XLMWithLMHeadModel"),_wo=o(" (XLM model)"),uwo=l(),F2=a("li"),Cde=a("strong"),bwo=o("xlm-prophetnet"),vwo=o(" \u2014 "),kj=a("a"),Fwo=o("XLMProphetNetForCausalLM"),Two=o(" (XLMProphetNet model)"),Mwo=l(),T2=a("li"),wde=a("strong"),Ewo=o("xlm-roberta"),Cwo=o(" \u2014 "),Sj=a("a"),wwo=o("XLMRobertaForCausalLM"),Awo=o(" (XLM-RoBERTa model)"),ywo=l(),M2=a("li"),Ade=a("strong"),Lwo=o("xlm-roberta-xl"),xwo=o(" \u2014 "),Rj=a("a"),$wo=o("XLMRobertaXLForCausalLM"),kwo=o(" (XLM-RoBERTa-XL model)"),Swo=l(),E2=a("li"),yde=a("strong"),Rwo=o("xlnet"),Pwo=o(" \u2014 "),Pj=a("a"),Bwo=o("XLNetLMHeadModel"),Iwo=o(" (XLNet model)"),qwo=l(),C2=a("p"),Nwo=o("The model is set in evaluation mode by default using "),Lde=a("code"),jwo=o("model.eval()"),Dwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=a("code"),Gwo=o("model.train()"),Owo=l(),F(w2.$$.fragment),vqe=l(),Pi=a("h2"),A2=a("a"),$de=a("span"),F(oy.$$.fragment),Vwo=l(),kde=a("span"),Xwo=o("AutoModelForMaskedLM"),Fqe=l(),ko=a("div"),F(ry.$$.fragment),zwo=l(),Bi=a("p"),Wwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bj=a("a"),Qwo=o("from_pretrained()"),Hwo=o(" class method or the "),Ij=a("a"),Uwo=o("from_config()"),Jwo=o(` class
method.`),Ywo=l(),ty=a("p"),Kwo=o("This class cannot be instantiated directly using "),Sde=a("code"),Zwo=o("__init__()"),e0o=o(" (throws an error)."),o0o=l(),st=a("div"),F(ay.$$.fragment),r0o=l(),Rde=a("p"),t0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),a0o=l(),Ii=a("p"),n0o=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),s0o=o("not"),l0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=a("a"),i0o=o("from_pretrained()"),d0o=o(" to load the model weights."),c0o=l(),F(y2.$$.fragment),f0o=l(),Ze=a("div"),F(ny.$$.fragment),m0o=l(),Bde=a("p"),g0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h0o=l(),ka=a("p"),p0o=o("The model class to instantiate is selected based on the "),Ide=a("code"),_0o=o("model_type"),u0o=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),b0o=o("pretrained_model_name_or_path"),v0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=a("code"),F0o=o("pretrained_model_name_or_path"),T0o=o(":"),M0o=l(),W=a("ul"),L2=a("li"),jde=a("strong"),E0o=o("albert"),C0o=o(" \u2014 "),Nj=a("a"),w0o=o("AlbertForMaskedLM"),A0o=o(" (ALBERT model)"),y0o=l(),x2=a("li"),Dde=a("strong"),L0o=o("bart"),x0o=o(" \u2014 "),jj=a("a"),$0o=o("BartForConditionalGeneration"),k0o=o(" (BART model)"),S0o=l(),$2=a("li"),Gde=a("strong"),R0o=o("bert"),P0o=o(" \u2014 "),Dj=a("a"),B0o=o("BertForMaskedLM"),I0o=o(" (BERT model)"),q0o=l(),k2=a("li"),Ode=a("strong"),N0o=o("big_bird"),j0o=o(" \u2014 "),Gj=a("a"),D0o=o("BigBirdForMaskedLM"),G0o=o(" (BigBird model)"),O0o=l(),S2=a("li"),Vde=a("strong"),V0o=o("camembert"),X0o=o(" \u2014 "),Oj=a("a"),z0o=o("CamembertForMaskedLM"),W0o=o(" (CamemBERT model)"),Q0o=l(),R2=a("li"),Xde=a("strong"),H0o=o("convbert"),U0o=o(" \u2014 "),Vj=a("a"),J0o=o("ConvBertForMaskedLM"),Y0o=o(" (ConvBERT model)"),K0o=l(),P2=a("li"),zde=a("strong"),Z0o=o("data2vec-text"),eAo=o(" \u2014 "),Xj=a("a"),oAo=o("Data2VecTextForMaskedLM"),rAo=o(" (Data2VecText model)"),tAo=l(),B2=a("li"),Wde=a("strong"),aAo=o("deberta"),nAo=o(" \u2014 "),zj=a("a"),sAo=o("DebertaForMaskedLM"),lAo=o(" (DeBERTa model)"),iAo=l(),I2=a("li"),Qde=a("strong"),dAo=o("deberta-v2"),cAo=o(" \u2014 "),Wj=a("a"),fAo=o("DebertaV2ForMaskedLM"),mAo=o(" (DeBERTa-v2 model)"),gAo=l(),q2=a("li"),Hde=a("strong"),hAo=o("distilbert"),pAo=o(" \u2014 "),Qj=a("a"),_Ao=o("DistilBertForMaskedLM"),uAo=o(" (DistilBERT model)"),bAo=l(),N2=a("li"),Ude=a("strong"),vAo=o("electra"),FAo=o(" \u2014 "),Hj=a("a"),TAo=o("ElectraForMaskedLM"),MAo=o(" (ELECTRA model)"),EAo=l(),j2=a("li"),Jde=a("strong"),CAo=o("flaubert"),wAo=o(" \u2014 "),Uj=a("a"),AAo=o("FlaubertWithLMHeadModel"),yAo=o(" (FlauBERT model)"),LAo=l(),D2=a("li"),Yde=a("strong"),xAo=o("fnet"),$Ao=o(" \u2014 "),Jj=a("a"),kAo=o("FNetForMaskedLM"),SAo=o(" (FNet model)"),RAo=l(),G2=a("li"),Kde=a("strong"),PAo=o("funnel"),BAo=o(" \u2014 "),Yj=a("a"),IAo=o("FunnelForMaskedLM"),qAo=o(" (Funnel Transformer model)"),NAo=l(),O2=a("li"),Zde=a("strong"),jAo=o("ibert"),DAo=o(" \u2014 "),Kj=a("a"),GAo=o("IBertForMaskedLM"),OAo=o(" (I-BERT model)"),VAo=l(),V2=a("li"),ece=a("strong"),XAo=o("layoutlm"),zAo=o(" \u2014 "),Zj=a("a"),WAo=o("LayoutLMForMaskedLM"),QAo=o(" (LayoutLM model)"),HAo=l(),X2=a("li"),oce=a("strong"),UAo=o("longformer"),JAo=o(" \u2014 "),eD=a("a"),YAo=o("LongformerForMaskedLM"),KAo=o(" (Longformer model)"),ZAo=l(),z2=a("li"),rce=a("strong"),e6o=o("mbart"),o6o=o(" \u2014 "),oD=a("a"),r6o=o("MBartForConditionalGeneration"),t6o=o(" (mBART model)"),a6o=l(),W2=a("li"),tce=a("strong"),n6o=o("megatron-bert"),s6o=o(" \u2014 "),rD=a("a"),l6o=o("MegatronBertForMaskedLM"),i6o=o(" (MegatronBert model)"),d6o=l(),Q2=a("li"),ace=a("strong"),c6o=o("mobilebert"),f6o=o(" \u2014 "),tD=a("a"),m6o=o("MobileBertForMaskedLM"),g6o=o(" (MobileBERT model)"),h6o=l(),H2=a("li"),nce=a("strong"),p6o=o("mpnet"),_6o=o(" \u2014 "),aD=a("a"),u6o=o("MPNetForMaskedLM"),b6o=o(" (MPNet model)"),v6o=l(),U2=a("li"),sce=a("strong"),F6o=o("nystromformer"),T6o=o(" \u2014 "),nD=a("a"),M6o=o("NystromformerForMaskedLM"),E6o=o(" (Nystromformer model)"),C6o=l(),J2=a("li"),lce=a("strong"),w6o=o("perceiver"),A6o=o(" \u2014 "),sD=a("a"),y6o=o("PerceiverForMaskedLM"),L6o=o(" (Perceiver model)"),x6o=l(),Y2=a("li"),ice=a("strong"),$6o=o("qdqbert"),k6o=o(" \u2014 "),lD=a("a"),S6o=o("QDQBertForMaskedLM"),R6o=o(" (QDQBert model)"),P6o=l(),K2=a("li"),dce=a("strong"),B6o=o("reformer"),I6o=o(" \u2014 "),iD=a("a"),q6o=o("ReformerForMaskedLM"),N6o=o(" (Reformer model)"),j6o=l(),Z2=a("li"),cce=a("strong"),D6o=o("rembert"),G6o=o(" \u2014 "),dD=a("a"),O6o=o("RemBertForMaskedLM"),V6o=o(" (RemBERT model)"),X6o=l(),e1=a("li"),fce=a("strong"),z6o=o("roberta"),W6o=o(" \u2014 "),cD=a("a"),Q6o=o("RobertaForMaskedLM"),H6o=o(" (RoBERTa model)"),U6o=l(),o1=a("li"),mce=a("strong"),J6o=o("roformer"),Y6o=o(" \u2014 "),fD=a("a"),K6o=o("RoFormerForMaskedLM"),Z6o=o(" (RoFormer model)"),eyo=l(),r1=a("li"),gce=a("strong"),oyo=o("squeezebert"),ryo=o(" \u2014 "),mD=a("a"),tyo=o("SqueezeBertForMaskedLM"),ayo=o(" (SqueezeBERT model)"),nyo=l(),t1=a("li"),hce=a("strong"),syo=o("tapas"),lyo=o(" \u2014 "),gD=a("a"),iyo=o("TapasForMaskedLM"),dyo=o(" (TAPAS model)"),cyo=l(),a1=a("li"),pce=a("strong"),fyo=o("wav2vec2"),myo=o(" \u2014 "),_ce=a("code"),gyo=o("Wav2Vec2ForMaskedLM"),hyo=o(" (Wav2Vec2 model)"),pyo=l(),n1=a("li"),uce=a("strong"),_yo=o("xlm"),uyo=o(" \u2014 "),hD=a("a"),byo=o("XLMWithLMHeadModel"),vyo=o(" (XLM model)"),Fyo=l(),s1=a("li"),bce=a("strong"),Tyo=o("xlm-roberta"),Myo=o(" \u2014 "),pD=a("a"),Eyo=o("XLMRobertaForMaskedLM"),Cyo=o(" (XLM-RoBERTa model)"),wyo=l(),l1=a("li"),vce=a("strong"),Ayo=o("xlm-roberta-xl"),yyo=o(" \u2014 "),_D=a("a"),Lyo=o("XLMRobertaXLForMaskedLM"),xyo=o(" (XLM-RoBERTa-XL model)"),$yo=l(),i1=a("li"),Fce=a("strong"),kyo=o("yoso"),Syo=o(" \u2014 "),uD=a("a"),Ryo=o("YosoForMaskedLM"),Pyo=o(" (YOSO model)"),Byo=l(),d1=a("p"),Iyo=o("The model is set in evaluation mode by default using "),Tce=a("code"),qyo=o("model.eval()"),Nyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),jyo=o("model.train()"),Dyo=l(),F(c1.$$.fragment),Tqe=l(),qi=a("h2"),f1=a("a"),Ece=a("span"),F(sy.$$.fragment),Gyo=l(),Cce=a("span"),Oyo=o("AutoModelForSeq2SeqLM"),Mqe=l(),So=a("div"),F(ly.$$.fragment),Vyo=l(),Ni=a("p"),Xyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bD=a("a"),zyo=o("from_pretrained()"),Wyo=o(" class method or the "),vD=a("a"),Qyo=o("from_config()"),Hyo=o(` class
method.`),Uyo=l(),iy=a("p"),Jyo=o("This class cannot be instantiated directly using "),wce=a("code"),Yyo=o("__init__()"),Kyo=o(" (throws an error)."),Zyo=l(),lt=a("div"),F(dy.$$.fragment),eLo=l(),Ace=a("p"),oLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rLo=l(),ji=a("p"),tLo=o(`Note:
Loading a model from its configuration file does `),yce=a("strong"),aLo=o("not"),nLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),sLo=o("from_pretrained()"),lLo=o(" to load the model weights."),iLo=l(),F(m1.$$.fragment),dLo=l(),eo=a("div"),F(cy.$$.fragment),cLo=l(),Lce=a("p"),fLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mLo=l(),Sa=a("p"),gLo=o("The model class to instantiate is selected based on the "),xce=a("code"),hLo=o("model_type"),pLo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),_Lo=o("pretrained_model_name_or_path"),uLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),bLo=o("pretrained_model_name_or_path"),vLo=o(":"),FLo=l(),_e=a("ul"),g1=a("li"),Sce=a("strong"),TLo=o("bart"),MLo=o(" \u2014 "),TD=a("a"),ELo=o("BartForConditionalGeneration"),CLo=o(" (BART model)"),wLo=l(),h1=a("li"),Rce=a("strong"),ALo=o("bigbird_pegasus"),yLo=o(" \u2014 "),MD=a("a"),LLo=o("BigBirdPegasusForConditionalGeneration"),xLo=o(" (BigBirdPegasus model)"),$Lo=l(),p1=a("li"),Pce=a("strong"),kLo=o("blenderbot"),SLo=o(" \u2014 "),ED=a("a"),RLo=o("BlenderbotForConditionalGeneration"),PLo=o(" (Blenderbot model)"),BLo=l(),_1=a("li"),Bce=a("strong"),ILo=o("blenderbot-small"),qLo=o(" \u2014 "),CD=a("a"),NLo=o("BlenderbotSmallForConditionalGeneration"),jLo=o(" (BlenderbotSmall model)"),DLo=l(),u1=a("li"),Ice=a("strong"),GLo=o("encoder-decoder"),OLo=o(" \u2014 "),wD=a("a"),VLo=o("EncoderDecoderModel"),XLo=o(" (Encoder decoder model)"),zLo=l(),b1=a("li"),qce=a("strong"),WLo=o("fsmt"),QLo=o(" \u2014 "),AD=a("a"),HLo=o("FSMTForConditionalGeneration"),ULo=o(" (FairSeq Machine-Translation model)"),JLo=l(),v1=a("li"),Nce=a("strong"),YLo=o("led"),KLo=o(" \u2014 "),yD=a("a"),ZLo=o("LEDForConditionalGeneration"),e8o=o(" (LED model)"),o8o=l(),F1=a("li"),jce=a("strong"),r8o=o("m2m_100"),t8o=o(" \u2014 "),LD=a("a"),a8o=o("M2M100ForConditionalGeneration"),n8o=o(" (M2M100 model)"),s8o=l(),T1=a("li"),Dce=a("strong"),l8o=o("marian"),i8o=o(" \u2014 "),xD=a("a"),d8o=o("MarianMTModel"),c8o=o(" (Marian model)"),f8o=l(),M1=a("li"),Gce=a("strong"),m8o=o("mbart"),g8o=o(" \u2014 "),$D=a("a"),h8o=o("MBartForConditionalGeneration"),p8o=o(" (mBART model)"),_8o=l(),E1=a("li"),Oce=a("strong"),u8o=o("mt5"),b8o=o(" \u2014 "),kD=a("a"),v8o=o("MT5ForConditionalGeneration"),F8o=o(" (mT5 model)"),T8o=l(),C1=a("li"),Vce=a("strong"),M8o=o("pegasus"),E8o=o(" \u2014 "),SD=a("a"),C8o=o("PegasusForConditionalGeneration"),w8o=o(" (Pegasus model)"),A8o=l(),w1=a("li"),Xce=a("strong"),y8o=o("plbart"),L8o=o(" \u2014 "),RD=a("a"),x8o=o("PLBartForConditionalGeneration"),$8o=o(" (PLBart model)"),k8o=l(),A1=a("li"),zce=a("strong"),S8o=o("prophetnet"),R8o=o(" \u2014 "),PD=a("a"),P8o=o("ProphetNetForConditionalGeneration"),B8o=o(" (ProphetNet model)"),I8o=l(),y1=a("li"),Wce=a("strong"),q8o=o("t5"),N8o=o(" \u2014 "),BD=a("a"),j8o=o("T5ForConditionalGeneration"),D8o=o(" (T5 model)"),G8o=l(),L1=a("li"),Qce=a("strong"),O8o=o("xlm-prophetnet"),V8o=o(" \u2014 "),ID=a("a"),X8o=o("XLMProphetNetForConditionalGeneration"),z8o=o(" (XLMProphetNet model)"),W8o=l(),x1=a("p"),Q8o=o("The model is set in evaluation mode by default using "),Hce=a("code"),H8o=o("model.eval()"),U8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=a("code"),J8o=o("model.train()"),Y8o=l(),F($1.$$.fragment),Eqe=l(),Di=a("h2"),k1=a("a"),Jce=a("span"),F(fy.$$.fragment),K8o=l(),Yce=a("span"),Z8o=o("AutoModelForSequenceClassification"),Cqe=l(),Ro=a("div"),F(my.$$.fragment),e9o=l(),Gi=a("p"),o9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=a("a"),r9o=o("from_pretrained()"),t9o=o(" class method or the "),ND=a("a"),a9o=o("from_config()"),n9o=o(` class
method.`),s9o=l(),gy=a("p"),l9o=o("This class cannot be instantiated directly using "),Kce=a("code"),i9o=o("__init__()"),d9o=o(" (throws an error)."),c9o=l(),it=a("div"),F(hy.$$.fragment),f9o=l(),Zce=a("p"),m9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),g9o=l(),Oi=a("p"),h9o=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),p9o=o("not"),_9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),u9o=o("from_pretrained()"),b9o=o(" to load the model weights."),v9o=l(),F(S1.$$.fragment),F9o=l(),oo=a("div"),F(py.$$.fragment),T9o=l(),ofe=a("p"),M9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),E9o=l(),Ra=a("p"),C9o=o("The model class to instantiate is selected based on the "),rfe=a("code"),w9o=o("model_type"),A9o=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),y9o=o("pretrained_model_name_or_path"),L9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),x9o=o("pretrained_model_name_or_path"),$9o=o(":"),k9o=l(),q=a("ul"),R1=a("li"),nfe=a("strong"),S9o=o("albert"),R9o=o(" \u2014 "),DD=a("a"),P9o=o("AlbertForSequenceClassification"),B9o=o(" (ALBERT model)"),I9o=l(),P1=a("li"),sfe=a("strong"),q9o=o("bart"),N9o=o(" \u2014 "),GD=a("a"),j9o=o("BartForSequenceClassification"),D9o=o(" (BART model)"),G9o=l(),B1=a("li"),lfe=a("strong"),O9o=o("bert"),V9o=o(" \u2014 "),OD=a("a"),X9o=o("BertForSequenceClassification"),z9o=o(" (BERT model)"),W9o=l(),I1=a("li"),ife=a("strong"),Q9o=o("big_bird"),H9o=o(" \u2014 "),VD=a("a"),U9o=o("BigBirdForSequenceClassification"),J9o=o(" (BigBird model)"),Y9o=l(),q1=a("li"),dfe=a("strong"),K9o=o("bigbird_pegasus"),Z9o=o(" \u2014 "),XD=a("a"),exo=o("BigBirdPegasusForSequenceClassification"),oxo=o(" (BigBirdPegasus model)"),rxo=l(),N1=a("li"),cfe=a("strong"),txo=o("camembert"),axo=o(" \u2014 "),zD=a("a"),nxo=o("CamembertForSequenceClassification"),sxo=o(" (CamemBERT model)"),lxo=l(),j1=a("li"),ffe=a("strong"),ixo=o("canine"),dxo=o(" \u2014 "),WD=a("a"),cxo=o("CanineForSequenceClassification"),fxo=o(" (Canine model)"),mxo=l(),D1=a("li"),mfe=a("strong"),gxo=o("convbert"),hxo=o(" \u2014 "),QD=a("a"),pxo=o("ConvBertForSequenceClassification"),_xo=o(" (ConvBERT model)"),uxo=l(),G1=a("li"),gfe=a("strong"),bxo=o("ctrl"),vxo=o(" \u2014 "),HD=a("a"),Fxo=o("CTRLForSequenceClassification"),Txo=o(" (CTRL model)"),Mxo=l(),O1=a("li"),hfe=a("strong"),Exo=o("data2vec-text"),Cxo=o(" \u2014 "),UD=a("a"),wxo=o("Data2VecTextForSequenceClassification"),Axo=o(" (Data2VecText model)"),yxo=l(),V1=a("li"),pfe=a("strong"),Lxo=o("deberta"),xxo=o(" \u2014 "),JD=a("a"),$xo=o("DebertaForSequenceClassification"),kxo=o(" (DeBERTa model)"),Sxo=l(),X1=a("li"),_fe=a("strong"),Rxo=o("deberta-v2"),Pxo=o(" \u2014 "),YD=a("a"),Bxo=o("DebertaV2ForSequenceClassification"),Ixo=o(" (DeBERTa-v2 model)"),qxo=l(),z1=a("li"),ufe=a("strong"),Nxo=o("distilbert"),jxo=o(" \u2014 "),KD=a("a"),Dxo=o("DistilBertForSequenceClassification"),Gxo=o(" (DistilBERT model)"),Oxo=l(),W1=a("li"),bfe=a("strong"),Vxo=o("electra"),Xxo=o(" \u2014 "),ZD=a("a"),zxo=o("ElectraForSequenceClassification"),Wxo=o(" (ELECTRA model)"),Qxo=l(),Q1=a("li"),vfe=a("strong"),Hxo=o("flaubert"),Uxo=o(" \u2014 "),eG=a("a"),Jxo=o("FlaubertForSequenceClassification"),Yxo=o(" (FlauBERT model)"),Kxo=l(),H1=a("li"),Ffe=a("strong"),Zxo=o("fnet"),e$o=o(" \u2014 "),oG=a("a"),o$o=o("FNetForSequenceClassification"),r$o=o(" (FNet model)"),t$o=l(),U1=a("li"),Tfe=a("strong"),a$o=o("funnel"),n$o=o(" \u2014 "),rG=a("a"),s$o=o("FunnelForSequenceClassification"),l$o=o(" (Funnel Transformer model)"),i$o=l(),J1=a("li"),Mfe=a("strong"),d$o=o("gpt2"),c$o=o(" \u2014 "),tG=a("a"),f$o=o("GPT2ForSequenceClassification"),m$o=o(" (OpenAI GPT-2 model)"),g$o=l(),Y1=a("li"),Efe=a("strong"),h$o=o("gpt_neo"),p$o=o(" \u2014 "),aG=a("a"),_$o=o("GPTNeoForSequenceClassification"),u$o=o(" (GPT Neo model)"),b$o=l(),K1=a("li"),Cfe=a("strong"),v$o=o("gptj"),F$o=o(" \u2014 "),nG=a("a"),T$o=o("GPTJForSequenceClassification"),M$o=o(" (GPT-J model)"),E$o=l(),Z1=a("li"),wfe=a("strong"),C$o=o("ibert"),w$o=o(" \u2014 "),sG=a("a"),A$o=o("IBertForSequenceClassification"),y$o=o(" (I-BERT model)"),L$o=l(),eb=a("li"),Afe=a("strong"),x$o=o("layoutlm"),$$o=o(" \u2014 "),lG=a("a"),k$o=o("LayoutLMForSequenceClassification"),S$o=o(" (LayoutLM model)"),R$o=l(),ob=a("li"),yfe=a("strong"),P$o=o("layoutlmv2"),B$o=o(" \u2014 "),iG=a("a"),I$o=o("LayoutLMv2ForSequenceClassification"),q$o=o(" (LayoutLMv2 model)"),N$o=l(),rb=a("li"),Lfe=a("strong"),j$o=o("led"),D$o=o(" \u2014 "),dG=a("a"),G$o=o("LEDForSequenceClassification"),O$o=o(" (LED model)"),V$o=l(),tb=a("li"),xfe=a("strong"),X$o=o("longformer"),z$o=o(" \u2014 "),cG=a("a"),W$o=o("LongformerForSequenceClassification"),Q$o=o(" (Longformer model)"),H$o=l(),ab=a("li"),$fe=a("strong"),U$o=o("mbart"),J$o=o(" \u2014 "),fG=a("a"),Y$o=o("MBartForSequenceClassification"),K$o=o(" (mBART model)"),Z$o=l(),nb=a("li"),kfe=a("strong"),eko=o("megatron-bert"),oko=o(" \u2014 "),mG=a("a"),rko=o("MegatronBertForSequenceClassification"),tko=o(" (MegatronBert model)"),ako=l(),sb=a("li"),Sfe=a("strong"),nko=o("mobilebert"),sko=o(" \u2014 "),gG=a("a"),lko=o("MobileBertForSequenceClassification"),iko=o(" (MobileBERT model)"),dko=l(),lb=a("li"),Rfe=a("strong"),cko=o("mpnet"),fko=o(" \u2014 "),hG=a("a"),mko=o("MPNetForSequenceClassification"),gko=o(" (MPNet model)"),hko=l(),ib=a("li"),Pfe=a("strong"),pko=o("nystromformer"),_ko=o(" \u2014 "),pG=a("a"),uko=o("NystromformerForSequenceClassification"),bko=o(" (Nystromformer model)"),vko=l(),db=a("li"),Bfe=a("strong"),Fko=o("openai-gpt"),Tko=o(" \u2014 "),_G=a("a"),Mko=o("OpenAIGPTForSequenceClassification"),Eko=o(" (OpenAI GPT model)"),Cko=l(),cb=a("li"),Ife=a("strong"),wko=o("perceiver"),Ako=o(" \u2014 "),uG=a("a"),yko=o("PerceiverForSequenceClassification"),Lko=o(" (Perceiver model)"),xko=l(),fb=a("li"),qfe=a("strong"),$ko=o("plbart"),kko=o(" \u2014 "),bG=a("a"),Sko=o("PLBartForSequenceClassification"),Rko=o(" (PLBart model)"),Pko=l(),mb=a("li"),Nfe=a("strong"),Bko=o("qdqbert"),Iko=o(" \u2014 "),vG=a("a"),qko=o("QDQBertForSequenceClassification"),Nko=o(" (QDQBert model)"),jko=l(),gb=a("li"),jfe=a("strong"),Dko=o("reformer"),Gko=o(" \u2014 "),FG=a("a"),Oko=o("ReformerForSequenceClassification"),Vko=o(" (Reformer model)"),Xko=l(),hb=a("li"),Dfe=a("strong"),zko=o("rembert"),Wko=o(" \u2014 "),TG=a("a"),Qko=o("RemBertForSequenceClassification"),Hko=o(" (RemBERT model)"),Uko=l(),pb=a("li"),Gfe=a("strong"),Jko=o("roberta"),Yko=o(" \u2014 "),MG=a("a"),Kko=o("RobertaForSequenceClassification"),Zko=o(" (RoBERTa model)"),eSo=l(),_b=a("li"),Ofe=a("strong"),oSo=o("roformer"),rSo=o(" \u2014 "),EG=a("a"),tSo=o("RoFormerForSequenceClassification"),aSo=o(" (RoFormer model)"),nSo=l(),ub=a("li"),Vfe=a("strong"),sSo=o("squeezebert"),lSo=o(" \u2014 "),CG=a("a"),iSo=o("SqueezeBertForSequenceClassification"),dSo=o(" (SqueezeBERT model)"),cSo=l(),bb=a("li"),Xfe=a("strong"),fSo=o("tapas"),mSo=o(" \u2014 "),wG=a("a"),gSo=o("TapasForSequenceClassification"),hSo=o(" (TAPAS model)"),pSo=l(),vb=a("li"),zfe=a("strong"),_So=o("transfo-xl"),uSo=o(" \u2014 "),AG=a("a"),bSo=o("TransfoXLForSequenceClassification"),vSo=o(" (Transformer-XL model)"),FSo=l(),Fb=a("li"),Wfe=a("strong"),TSo=o("xlm"),MSo=o(" \u2014 "),yG=a("a"),ESo=o("XLMForSequenceClassification"),CSo=o(" (XLM model)"),wSo=l(),Tb=a("li"),Qfe=a("strong"),ASo=o("xlm-roberta"),ySo=o(" \u2014 "),LG=a("a"),LSo=o("XLMRobertaForSequenceClassification"),xSo=o(" (XLM-RoBERTa model)"),$So=l(),Mb=a("li"),Hfe=a("strong"),kSo=o("xlm-roberta-xl"),SSo=o(" \u2014 "),xG=a("a"),RSo=o("XLMRobertaXLForSequenceClassification"),PSo=o(" (XLM-RoBERTa-XL model)"),BSo=l(),Eb=a("li"),Ufe=a("strong"),ISo=o("xlnet"),qSo=o(" \u2014 "),$G=a("a"),NSo=o("XLNetForSequenceClassification"),jSo=o(" (XLNet model)"),DSo=l(),Cb=a("li"),Jfe=a("strong"),GSo=o("yoso"),OSo=o(" \u2014 "),kG=a("a"),VSo=o("YosoForSequenceClassification"),XSo=o(" (YOSO model)"),zSo=l(),wb=a("p"),WSo=o("The model is set in evaluation mode by default using "),Yfe=a("code"),QSo=o("model.eval()"),HSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=a("code"),USo=o("model.train()"),JSo=l(),F(Ab.$$.fragment),wqe=l(),Vi=a("h2"),yb=a("a"),Zfe=a("span"),F(_y.$$.fragment),YSo=l(),eme=a("span"),KSo=o("AutoModelForMultipleChoice"),Aqe=l(),Po=a("div"),F(uy.$$.fragment),ZSo=l(),Xi=a("p"),eRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SG=a("a"),oRo=o("from_pretrained()"),rRo=o(" class method or the "),RG=a("a"),tRo=o("from_config()"),aRo=o(` class
method.`),nRo=l(),by=a("p"),sRo=o("This class cannot be instantiated directly using "),ome=a("code"),lRo=o("__init__()"),iRo=o(" (throws an error)."),dRo=l(),dt=a("div"),F(vy.$$.fragment),cRo=l(),rme=a("p"),fRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mRo=l(),zi=a("p"),gRo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),hRo=o("not"),pRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),_Ro=o("from_pretrained()"),uRo=o(" to load the model weights."),bRo=l(),F(Lb.$$.fragment),vRo=l(),ro=a("div"),F(Fy.$$.fragment),FRo=l(),ame=a("p"),TRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MRo=l(),Pa=a("p"),ERo=o("The model class to instantiate is selected based on the "),nme=a("code"),CRo=o("model_type"),wRo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),ARo=o("pretrained_model_name_or_path"),yRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),LRo=o("pretrained_model_name_or_path"),xRo=o(":"),$Ro=l(),Y=a("ul"),xb=a("li"),ime=a("strong"),kRo=o("albert"),SRo=o(" \u2014 "),BG=a("a"),RRo=o("AlbertForMultipleChoice"),PRo=o(" (ALBERT model)"),BRo=l(),$b=a("li"),dme=a("strong"),IRo=o("bert"),qRo=o(" \u2014 "),IG=a("a"),NRo=o("BertForMultipleChoice"),jRo=o(" (BERT model)"),DRo=l(),kb=a("li"),cme=a("strong"),GRo=o("big_bird"),ORo=o(" \u2014 "),qG=a("a"),VRo=o("BigBirdForMultipleChoice"),XRo=o(" (BigBird model)"),zRo=l(),Sb=a("li"),fme=a("strong"),WRo=o("camembert"),QRo=o(" \u2014 "),NG=a("a"),HRo=o("CamembertForMultipleChoice"),URo=o(" (CamemBERT model)"),JRo=l(),Rb=a("li"),mme=a("strong"),YRo=o("canine"),KRo=o(" \u2014 "),jG=a("a"),ZRo=o("CanineForMultipleChoice"),ePo=o(" (Canine model)"),oPo=l(),Pb=a("li"),gme=a("strong"),rPo=o("convbert"),tPo=o(" \u2014 "),DG=a("a"),aPo=o("ConvBertForMultipleChoice"),nPo=o(" (ConvBERT model)"),sPo=l(),Bb=a("li"),hme=a("strong"),lPo=o("data2vec-text"),iPo=o(" \u2014 "),GG=a("a"),dPo=o("Data2VecTextForMultipleChoice"),cPo=o(" (Data2VecText model)"),fPo=l(),Ib=a("li"),pme=a("strong"),mPo=o("deberta-v2"),gPo=o(" \u2014 "),OG=a("a"),hPo=o("DebertaV2ForMultipleChoice"),pPo=o(" (DeBERTa-v2 model)"),_Po=l(),qb=a("li"),_me=a("strong"),uPo=o("distilbert"),bPo=o(" \u2014 "),VG=a("a"),vPo=o("DistilBertForMultipleChoice"),FPo=o(" (DistilBERT model)"),TPo=l(),Nb=a("li"),ume=a("strong"),MPo=o("electra"),EPo=o(" \u2014 "),XG=a("a"),CPo=o("ElectraForMultipleChoice"),wPo=o(" (ELECTRA model)"),APo=l(),jb=a("li"),bme=a("strong"),yPo=o("flaubert"),LPo=o(" \u2014 "),zG=a("a"),xPo=o("FlaubertForMultipleChoice"),$Po=o(" (FlauBERT model)"),kPo=l(),Db=a("li"),vme=a("strong"),SPo=o("fnet"),RPo=o(" \u2014 "),WG=a("a"),PPo=o("FNetForMultipleChoice"),BPo=o(" (FNet model)"),IPo=l(),Gb=a("li"),Fme=a("strong"),qPo=o("funnel"),NPo=o(" \u2014 "),QG=a("a"),jPo=o("FunnelForMultipleChoice"),DPo=o(" (Funnel Transformer model)"),GPo=l(),Ob=a("li"),Tme=a("strong"),OPo=o("ibert"),VPo=o(" \u2014 "),HG=a("a"),XPo=o("IBertForMultipleChoice"),zPo=o(" (I-BERT model)"),WPo=l(),Vb=a("li"),Mme=a("strong"),QPo=o("longformer"),HPo=o(" \u2014 "),UG=a("a"),UPo=o("LongformerForMultipleChoice"),JPo=o(" (Longformer model)"),YPo=l(),Xb=a("li"),Eme=a("strong"),KPo=o("megatron-bert"),ZPo=o(" \u2014 "),JG=a("a"),eBo=o("MegatronBertForMultipleChoice"),oBo=o(" (MegatronBert model)"),rBo=l(),zb=a("li"),Cme=a("strong"),tBo=o("mobilebert"),aBo=o(" \u2014 "),YG=a("a"),nBo=o("MobileBertForMultipleChoice"),sBo=o(" (MobileBERT model)"),lBo=l(),Wb=a("li"),wme=a("strong"),iBo=o("mpnet"),dBo=o(" \u2014 "),KG=a("a"),cBo=o("MPNetForMultipleChoice"),fBo=o(" (MPNet model)"),mBo=l(),Qb=a("li"),Ame=a("strong"),gBo=o("nystromformer"),hBo=o(" \u2014 "),ZG=a("a"),pBo=o("NystromformerForMultipleChoice"),_Bo=o(" (Nystromformer model)"),uBo=l(),Hb=a("li"),yme=a("strong"),bBo=o("qdqbert"),vBo=o(" \u2014 "),eO=a("a"),FBo=o("QDQBertForMultipleChoice"),TBo=o(" (QDQBert model)"),MBo=l(),Ub=a("li"),Lme=a("strong"),EBo=o("rembert"),CBo=o(" \u2014 "),oO=a("a"),wBo=o("RemBertForMultipleChoice"),ABo=o(" (RemBERT model)"),yBo=l(),Jb=a("li"),xme=a("strong"),LBo=o("roberta"),xBo=o(" \u2014 "),rO=a("a"),$Bo=o("RobertaForMultipleChoice"),kBo=o(" (RoBERTa model)"),SBo=l(),Yb=a("li"),$me=a("strong"),RBo=o("roformer"),PBo=o(" \u2014 "),tO=a("a"),BBo=o("RoFormerForMultipleChoice"),IBo=o(" (RoFormer model)"),qBo=l(),Kb=a("li"),kme=a("strong"),NBo=o("squeezebert"),jBo=o(" \u2014 "),aO=a("a"),DBo=o("SqueezeBertForMultipleChoice"),GBo=o(" (SqueezeBERT model)"),OBo=l(),Zb=a("li"),Sme=a("strong"),VBo=o("xlm"),XBo=o(" \u2014 "),nO=a("a"),zBo=o("XLMForMultipleChoice"),WBo=o(" (XLM model)"),QBo=l(),e4=a("li"),Rme=a("strong"),HBo=o("xlm-roberta"),UBo=o(" \u2014 "),sO=a("a"),JBo=o("XLMRobertaForMultipleChoice"),YBo=o(" (XLM-RoBERTa model)"),KBo=l(),o4=a("li"),Pme=a("strong"),ZBo=o("xlm-roberta-xl"),eIo=o(" \u2014 "),lO=a("a"),oIo=o("XLMRobertaXLForMultipleChoice"),rIo=o(" (XLM-RoBERTa-XL model)"),tIo=l(),r4=a("li"),Bme=a("strong"),aIo=o("xlnet"),nIo=o(" \u2014 "),iO=a("a"),sIo=o("XLNetForMultipleChoice"),lIo=o(" (XLNet model)"),iIo=l(),t4=a("li"),Ime=a("strong"),dIo=o("yoso"),cIo=o(" \u2014 "),dO=a("a"),fIo=o("YosoForMultipleChoice"),mIo=o(" (YOSO model)"),gIo=l(),a4=a("p"),hIo=o("The model is set in evaluation mode by default using "),qme=a("code"),pIo=o("model.eval()"),_Io=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=a("code"),uIo=o("model.train()"),bIo=l(),F(n4.$$.fragment),yqe=l(),Wi=a("h2"),s4=a("a"),jme=a("span"),F(Ty.$$.fragment),vIo=l(),Dme=a("span"),FIo=o("AutoModelForNextSentencePrediction"),Lqe=l(),Bo=a("div"),F(My.$$.fragment),TIo=l(),Qi=a("p"),MIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cO=a("a"),EIo=o("from_pretrained()"),CIo=o(" class method or the "),fO=a("a"),wIo=o("from_config()"),AIo=o(` class
method.`),yIo=l(),Ey=a("p"),LIo=o("This class cannot be instantiated directly using "),Gme=a("code"),xIo=o("__init__()"),$Io=o(" (throws an error)."),kIo=l(),ct=a("div"),F(Cy.$$.fragment),SIo=l(),Ome=a("p"),RIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PIo=l(),Hi=a("p"),BIo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),IIo=o("not"),qIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),NIo=o("from_pretrained()"),jIo=o(" to load the model weights."),DIo=l(),F(l4.$$.fragment),GIo=l(),to=a("div"),F(wy.$$.fragment),OIo=l(),Xme=a("p"),VIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XIo=l(),Ba=a("p"),zIo=o("The model class to instantiate is selected based on the "),zme=a("code"),WIo=o("model_type"),QIo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),HIo=o("pretrained_model_name_or_path"),UIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=a("code"),JIo=o("pretrained_model_name_or_path"),YIo=o(":"),KIo=l(),Yr=a("ul"),i4=a("li"),Hme=a("strong"),ZIo=o("bert"),eqo=o(" \u2014 "),gO=a("a"),oqo=o("BertForNextSentencePrediction"),rqo=o(" (BERT model)"),tqo=l(),d4=a("li"),Ume=a("strong"),aqo=o("fnet"),nqo=o(" \u2014 "),hO=a("a"),sqo=o("FNetForNextSentencePrediction"),lqo=o(" (FNet model)"),iqo=l(),c4=a("li"),Jme=a("strong"),dqo=o("megatron-bert"),cqo=o(" \u2014 "),pO=a("a"),fqo=o("MegatronBertForNextSentencePrediction"),mqo=o(" (MegatronBert model)"),gqo=l(),f4=a("li"),Yme=a("strong"),hqo=o("mobilebert"),pqo=o(" \u2014 "),_O=a("a"),_qo=o("MobileBertForNextSentencePrediction"),uqo=o(" (MobileBERT model)"),bqo=l(),m4=a("li"),Kme=a("strong"),vqo=o("qdqbert"),Fqo=o(" \u2014 "),uO=a("a"),Tqo=o("QDQBertForNextSentencePrediction"),Mqo=o(" (QDQBert model)"),Eqo=l(),g4=a("p"),Cqo=o("The model is set in evaluation mode by default using "),Zme=a("code"),wqo=o("model.eval()"),Aqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),yqo=o("model.train()"),Lqo=l(),F(h4.$$.fragment),xqe=l(),Ui=a("h2"),p4=a("a"),oge=a("span"),F(Ay.$$.fragment),xqo=l(),rge=a("span"),$qo=o("AutoModelForTokenClassification"),$qe=l(),Io=a("div"),F(yy.$$.fragment),kqo=l(),Ji=a("p"),Sqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bO=a("a"),Rqo=o("from_pretrained()"),Pqo=o(" class method or the "),vO=a("a"),Bqo=o("from_config()"),Iqo=o(` class
method.`),qqo=l(),Ly=a("p"),Nqo=o("This class cannot be instantiated directly using "),tge=a("code"),jqo=o("__init__()"),Dqo=o(" (throws an error)."),Gqo=l(),ft=a("div"),F(xy.$$.fragment),Oqo=l(),age=a("p"),Vqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xqo=l(),Yi=a("p"),zqo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),Wqo=o("not"),Qqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),Hqo=o("from_pretrained()"),Uqo=o(" to load the model weights."),Jqo=l(),F(_4.$$.fragment),Yqo=l(),ao=a("div"),F($y.$$.fragment),Kqo=l(),sge=a("p"),Zqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eNo=l(),Ia=a("p"),oNo=o("The model class to instantiate is selected based on the "),lge=a("code"),rNo=o("model_type"),tNo=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),aNo=o("pretrained_model_name_or_path"),nNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),sNo=o("pretrained_model_name_or_path"),lNo=o(":"),iNo=l(),U=a("ul"),u4=a("li"),cge=a("strong"),dNo=o("albert"),cNo=o(" \u2014 "),TO=a("a"),fNo=o("AlbertForTokenClassification"),mNo=o(" (ALBERT model)"),gNo=l(),b4=a("li"),fge=a("strong"),hNo=o("bert"),pNo=o(" \u2014 "),MO=a("a"),_No=o("BertForTokenClassification"),uNo=o(" (BERT model)"),bNo=l(),v4=a("li"),mge=a("strong"),vNo=o("big_bird"),FNo=o(" \u2014 "),EO=a("a"),TNo=o("BigBirdForTokenClassification"),MNo=o(" (BigBird model)"),ENo=l(),F4=a("li"),gge=a("strong"),CNo=o("camembert"),wNo=o(" \u2014 "),CO=a("a"),ANo=o("CamembertForTokenClassification"),yNo=o(" (CamemBERT model)"),LNo=l(),T4=a("li"),hge=a("strong"),xNo=o("canine"),$No=o(" \u2014 "),wO=a("a"),kNo=o("CanineForTokenClassification"),SNo=o(" (Canine model)"),RNo=l(),M4=a("li"),pge=a("strong"),PNo=o("convbert"),BNo=o(" \u2014 "),AO=a("a"),INo=o("ConvBertForTokenClassification"),qNo=o(" (ConvBERT model)"),NNo=l(),E4=a("li"),_ge=a("strong"),jNo=o("data2vec-text"),DNo=o(" \u2014 "),yO=a("a"),GNo=o("Data2VecTextForTokenClassification"),ONo=o(" (Data2VecText model)"),VNo=l(),C4=a("li"),uge=a("strong"),XNo=o("deberta"),zNo=o(" \u2014 "),LO=a("a"),WNo=o("DebertaForTokenClassification"),QNo=o(" (DeBERTa model)"),HNo=l(),w4=a("li"),bge=a("strong"),UNo=o("deberta-v2"),JNo=o(" \u2014 "),xO=a("a"),YNo=o("DebertaV2ForTokenClassification"),KNo=o(" (DeBERTa-v2 model)"),ZNo=l(),A4=a("li"),vge=a("strong"),ejo=o("distilbert"),ojo=o(" \u2014 "),$O=a("a"),rjo=o("DistilBertForTokenClassification"),tjo=o(" (DistilBERT model)"),ajo=l(),y4=a("li"),Fge=a("strong"),njo=o("electra"),sjo=o(" \u2014 "),kO=a("a"),ljo=o("ElectraForTokenClassification"),ijo=o(" (ELECTRA model)"),djo=l(),L4=a("li"),Tge=a("strong"),cjo=o("flaubert"),fjo=o(" \u2014 "),SO=a("a"),mjo=o("FlaubertForTokenClassification"),gjo=o(" (FlauBERT model)"),hjo=l(),x4=a("li"),Mge=a("strong"),pjo=o("fnet"),_jo=o(" \u2014 "),RO=a("a"),ujo=o("FNetForTokenClassification"),bjo=o(" (FNet model)"),vjo=l(),$4=a("li"),Ege=a("strong"),Fjo=o("funnel"),Tjo=o(" \u2014 "),PO=a("a"),Mjo=o("FunnelForTokenClassification"),Ejo=o(" (Funnel Transformer model)"),Cjo=l(),k4=a("li"),Cge=a("strong"),wjo=o("gpt2"),Ajo=o(" \u2014 "),BO=a("a"),yjo=o("GPT2ForTokenClassification"),Ljo=o(" (OpenAI GPT-2 model)"),xjo=l(),S4=a("li"),wge=a("strong"),$jo=o("ibert"),kjo=o(" \u2014 "),IO=a("a"),Sjo=o("IBertForTokenClassification"),Rjo=o(" (I-BERT model)"),Pjo=l(),R4=a("li"),Age=a("strong"),Bjo=o("layoutlm"),Ijo=o(" \u2014 "),qO=a("a"),qjo=o("LayoutLMForTokenClassification"),Njo=o(" (LayoutLM model)"),jjo=l(),P4=a("li"),yge=a("strong"),Djo=o("layoutlmv2"),Gjo=o(" \u2014 "),NO=a("a"),Ojo=o("LayoutLMv2ForTokenClassification"),Vjo=o(" (LayoutLMv2 model)"),Xjo=l(),B4=a("li"),Lge=a("strong"),zjo=o("longformer"),Wjo=o(" \u2014 "),jO=a("a"),Qjo=o("LongformerForTokenClassification"),Hjo=o(" (Longformer model)"),Ujo=l(),I4=a("li"),xge=a("strong"),Jjo=o("megatron-bert"),Yjo=o(" \u2014 "),DO=a("a"),Kjo=o("MegatronBertForTokenClassification"),Zjo=o(" (MegatronBert model)"),eDo=l(),q4=a("li"),$ge=a("strong"),oDo=o("mobilebert"),rDo=o(" \u2014 "),GO=a("a"),tDo=o("MobileBertForTokenClassification"),aDo=o(" (MobileBERT model)"),nDo=l(),N4=a("li"),kge=a("strong"),sDo=o("mpnet"),lDo=o(" \u2014 "),OO=a("a"),iDo=o("MPNetForTokenClassification"),dDo=o(" (MPNet model)"),cDo=l(),j4=a("li"),Sge=a("strong"),fDo=o("nystromformer"),mDo=o(" \u2014 "),VO=a("a"),gDo=o("NystromformerForTokenClassification"),hDo=o(" (Nystromformer model)"),pDo=l(),D4=a("li"),Rge=a("strong"),_Do=o("qdqbert"),uDo=o(" \u2014 "),XO=a("a"),bDo=o("QDQBertForTokenClassification"),vDo=o(" (QDQBert model)"),FDo=l(),G4=a("li"),Pge=a("strong"),TDo=o("rembert"),MDo=o(" \u2014 "),zO=a("a"),EDo=o("RemBertForTokenClassification"),CDo=o(" (RemBERT model)"),wDo=l(),O4=a("li"),Bge=a("strong"),ADo=o("roberta"),yDo=o(" \u2014 "),WO=a("a"),LDo=o("RobertaForTokenClassification"),xDo=o(" (RoBERTa model)"),$Do=l(),V4=a("li"),Ige=a("strong"),kDo=o("roformer"),SDo=o(" \u2014 "),QO=a("a"),RDo=o("RoFormerForTokenClassification"),PDo=o(" (RoFormer model)"),BDo=l(),X4=a("li"),qge=a("strong"),IDo=o("squeezebert"),qDo=o(" \u2014 "),HO=a("a"),NDo=o("SqueezeBertForTokenClassification"),jDo=o(" (SqueezeBERT model)"),DDo=l(),z4=a("li"),Nge=a("strong"),GDo=o("xlm"),ODo=o(" \u2014 "),UO=a("a"),VDo=o("XLMForTokenClassification"),XDo=o(" (XLM model)"),zDo=l(),W4=a("li"),jge=a("strong"),WDo=o("xlm-roberta"),QDo=o(" \u2014 "),JO=a("a"),HDo=o("XLMRobertaForTokenClassification"),UDo=o(" (XLM-RoBERTa model)"),JDo=l(),Q4=a("li"),Dge=a("strong"),YDo=o("xlm-roberta-xl"),KDo=o(" \u2014 "),YO=a("a"),ZDo=o("XLMRobertaXLForTokenClassification"),eGo=o(" (XLM-RoBERTa-XL model)"),oGo=l(),H4=a("li"),Gge=a("strong"),rGo=o("xlnet"),tGo=o(" \u2014 "),KO=a("a"),aGo=o("XLNetForTokenClassification"),nGo=o(" (XLNet model)"),sGo=l(),U4=a("li"),Oge=a("strong"),lGo=o("yoso"),iGo=o(" \u2014 "),ZO=a("a"),dGo=o("YosoForTokenClassification"),cGo=o(" (YOSO model)"),fGo=l(),J4=a("p"),mGo=o("The model is set in evaluation mode by default using "),Vge=a("code"),gGo=o("model.eval()"),hGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),pGo=o("model.train()"),_Go=l(),F(Y4.$$.fragment),kqe=l(),Ki=a("h2"),K4=a("a"),zge=a("span"),F(ky.$$.fragment),uGo=l(),Wge=a("span"),bGo=o("AutoModelForQuestionAnswering"),Sqe=l(),qo=a("div"),F(Sy.$$.fragment),vGo=l(),Zi=a("p"),FGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eV=a("a"),TGo=o("from_pretrained()"),MGo=o(" class method or the "),oV=a("a"),EGo=o("from_config()"),CGo=o(` class
method.`),wGo=l(),Ry=a("p"),AGo=o("This class cannot be instantiated directly using "),Qge=a("code"),yGo=o("__init__()"),LGo=o(" (throws an error)."),xGo=l(),mt=a("div"),F(Py.$$.fragment),$Go=l(),Hge=a("p"),kGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SGo=l(),ed=a("p"),RGo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),PGo=o("not"),BGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),IGo=o("from_pretrained()"),qGo=o(" to load the model weights."),NGo=l(),F(Z4.$$.fragment),jGo=l(),no=a("div"),F(By.$$.fragment),DGo=l(),Jge=a("p"),GGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),OGo=l(),qa=a("p"),VGo=o("The model class to instantiate is selected based on the "),Yge=a("code"),XGo=o("model_type"),zGo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),WGo=o("pretrained_model_name_or_path"),QGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),HGo=o("pretrained_model_name_or_path"),UGo=o(":"),JGo=l(),V=a("ul"),e5=a("li"),ehe=a("strong"),YGo=o("albert"),KGo=o(" \u2014 "),tV=a("a"),ZGo=o("AlbertForQuestionAnswering"),eOo=o(" (ALBERT model)"),oOo=l(),o5=a("li"),ohe=a("strong"),rOo=o("bart"),tOo=o(" \u2014 "),aV=a("a"),aOo=o("BartForQuestionAnswering"),nOo=o(" (BART model)"),sOo=l(),r5=a("li"),rhe=a("strong"),lOo=o("bert"),iOo=o(" \u2014 "),nV=a("a"),dOo=o("BertForQuestionAnswering"),cOo=o(" (BERT model)"),fOo=l(),t5=a("li"),the=a("strong"),mOo=o("big_bird"),gOo=o(" \u2014 "),sV=a("a"),hOo=o("BigBirdForQuestionAnswering"),pOo=o(" (BigBird model)"),_Oo=l(),a5=a("li"),ahe=a("strong"),uOo=o("bigbird_pegasus"),bOo=o(" \u2014 "),lV=a("a"),vOo=o("BigBirdPegasusForQuestionAnswering"),FOo=o(" (BigBirdPegasus model)"),TOo=l(),n5=a("li"),nhe=a("strong"),MOo=o("camembert"),EOo=o(" \u2014 "),iV=a("a"),COo=o("CamembertForQuestionAnswering"),wOo=o(" (CamemBERT model)"),AOo=l(),s5=a("li"),she=a("strong"),yOo=o("canine"),LOo=o(" \u2014 "),dV=a("a"),xOo=o("CanineForQuestionAnswering"),$Oo=o(" (Canine model)"),kOo=l(),l5=a("li"),lhe=a("strong"),SOo=o("convbert"),ROo=o(" \u2014 "),cV=a("a"),POo=o("ConvBertForQuestionAnswering"),BOo=o(" (ConvBERT model)"),IOo=l(),i5=a("li"),ihe=a("strong"),qOo=o("data2vec-text"),NOo=o(" \u2014 "),fV=a("a"),jOo=o("Data2VecTextForQuestionAnswering"),DOo=o(" (Data2VecText model)"),GOo=l(),d5=a("li"),dhe=a("strong"),OOo=o("deberta"),VOo=o(" \u2014 "),mV=a("a"),XOo=o("DebertaForQuestionAnswering"),zOo=o(" (DeBERTa model)"),WOo=l(),c5=a("li"),che=a("strong"),QOo=o("deberta-v2"),HOo=o(" \u2014 "),gV=a("a"),UOo=o("DebertaV2ForQuestionAnswering"),JOo=o(" (DeBERTa-v2 model)"),YOo=l(),f5=a("li"),fhe=a("strong"),KOo=o("distilbert"),ZOo=o(" \u2014 "),hV=a("a"),eVo=o("DistilBertForQuestionAnswering"),oVo=o(" (DistilBERT model)"),rVo=l(),m5=a("li"),mhe=a("strong"),tVo=o("electra"),aVo=o(" \u2014 "),pV=a("a"),nVo=o("ElectraForQuestionAnswering"),sVo=o(" (ELECTRA model)"),lVo=l(),g5=a("li"),ghe=a("strong"),iVo=o("flaubert"),dVo=o(" \u2014 "),_V=a("a"),cVo=o("FlaubertForQuestionAnsweringSimple"),fVo=o(" (FlauBERT model)"),mVo=l(),h5=a("li"),hhe=a("strong"),gVo=o("fnet"),hVo=o(" \u2014 "),uV=a("a"),pVo=o("FNetForQuestionAnswering"),_Vo=o(" (FNet model)"),uVo=l(),p5=a("li"),phe=a("strong"),bVo=o("funnel"),vVo=o(" \u2014 "),bV=a("a"),FVo=o("FunnelForQuestionAnswering"),TVo=o(" (Funnel Transformer model)"),MVo=l(),_5=a("li"),_he=a("strong"),EVo=o("gptj"),CVo=o(" \u2014 "),vV=a("a"),wVo=o("GPTJForQuestionAnswering"),AVo=o(" (GPT-J model)"),yVo=l(),u5=a("li"),uhe=a("strong"),LVo=o("ibert"),xVo=o(" \u2014 "),FV=a("a"),$Vo=o("IBertForQuestionAnswering"),kVo=o(" (I-BERT model)"),SVo=l(),b5=a("li"),bhe=a("strong"),RVo=o("layoutlmv2"),PVo=o(" \u2014 "),TV=a("a"),BVo=o("LayoutLMv2ForQuestionAnswering"),IVo=o(" (LayoutLMv2 model)"),qVo=l(),v5=a("li"),vhe=a("strong"),NVo=o("led"),jVo=o(" \u2014 "),MV=a("a"),DVo=o("LEDForQuestionAnswering"),GVo=o(" (LED model)"),OVo=l(),F5=a("li"),Fhe=a("strong"),VVo=o("longformer"),XVo=o(" \u2014 "),EV=a("a"),zVo=o("LongformerForQuestionAnswering"),WVo=o(" (Longformer model)"),QVo=l(),T5=a("li"),The=a("strong"),HVo=o("lxmert"),UVo=o(" \u2014 "),CV=a("a"),JVo=o("LxmertForQuestionAnswering"),YVo=o(" (LXMERT model)"),KVo=l(),M5=a("li"),Mhe=a("strong"),ZVo=o("mbart"),eXo=o(" \u2014 "),wV=a("a"),oXo=o("MBartForQuestionAnswering"),rXo=o(" (mBART model)"),tXo=l(),E5=a("li"),Ehe=a("strong"),aXo=o("megatron-bert"),nXo=o(" \u2014 "),AV=a("a"),sXo=o("MegatronBertForQuestionAnswering"),lXo=o(" (MegatronBert model)"),iXo=l(),C5=a("li"),Che=a("strong"),dXo=o("mobilebert"),cXo=o(" \u2014 "),yV=a("a"),fXo=o("MobileBertForQuestionAnswering"),mXo=o(" (MobileBERT model)"),gXo=l(),w5=a("li"),whe=a("strong"),hXo=o("mpnet"),pXo=o(" \u2014 "),LV=a("a"),_Xo=o("MPNetForQuestionAnswering"),uXo=o(" (MPNet model)"),bXo=l(),A5=a("li"),Ahe=a("strong"),vXo=o("nystromformer"),FXo=o(" \u2014 "),xV=a("a"),TXo=o("NystromformerForQuestionAnswering"),MXo=o(" (Nystromformer model)"),EXo=l(),y5=a("li"),yhe=a("strong"),CXo=o("qdqbert"),wXo=o(" \u2014 "),$V=a("a"),AXo=o("QDQBertForQuestionAnswering"),yXo=o(" (QDQBert model)"),LXo=l(),L5=a("li"),Lhe=a("strong"),xXo=o("reformer"),$Xo=o(" \u2014 "),kV=a("a"),kXo=o("ReformerForQuestionAnswering"),SXo=o(" (Reformer model)"),RXo=l(),x5=a("li"),xhe=a("strong"),PXo=o("rembert"),BXo=o(" \u2014 "),SV=a("a"),IXo=o("RemBertForQuestionAnswering"),qXo=o(" (RemBERT model)"),NXo=l(),$5=a("li"),$he=a("strong"),jXo=o("roberta"),DXo=o(" \u2014 "),RV=a("a"),GXo=o("RobertaForQuestionAnswering"),OXo=o(" (RoBERTa model)"),VXo=l(),k5=a("li"),khe=a("strong"),XXo=o("roformer"),zXo=o(" \u2014 "),PV=a("a"),WXo=o("RoFormerForQuestionAnswering"),QXo=o(" (RoFormer model)"),HXo=l(),S5=a("li"),She=a("strong"),UXo=o("splinter"),JXo=o(" \u2014 "),BV=a("a"),YXo=o("SplinterForQuestionAnswering"),KXo=o(" (Splinter model)"),ZXo=l(),R5=a("li"),Rhe=a("strong"),ezo=o("squeezebert"),ozo=o(" \u2014 "),IV=a("a"),rzo=o("SqueezeBertForQuestionAnswering"),tzo=o(" (SqueezeBERT model)"),azo=l(),P5=a("li"),Phe=a("strong"),nzo=o("xlm"),szo=o(" \u2014 "),qV=a("a"),lzo=o("XLMForQuestionAnsweringSimple"),izo=o(" (XLM model)"),dzo=l(),B5=a("li"),Bhe=a("strong"),czo=o("xlm-roberta"),fzo=o(" \u2014 "),NV=a("a"),mzo=o("XLMRobertaForQuestionAnswering"),gzo=o(" (XLM-RoBERTa model)"),hzo=l(),I5=a("li"),Ihe=a("strong"),pzo=o("xlm-roberta-xl"),_zo=o(" \u2014 "),jV=a("a"),uzo=o("XLMRobertaXLForQuestionAnswering"),bzo=o(" (XLM-RoBERTa-XL model)"),vzo=l(),q5=a("li"),qhe=a("strong"),Fzo=o("xlnet"),Tzo=o(" \u2014 "),DV=a("a"),Mzo=o("XLNetForQuestionAnsweringSimple"),Ezo=o(" (XLNet model)"),Czo=l(),N5=a("li"),Nhe=a("strong"),wzo=o("yoso"),Azo=o(" \u2014 "),GV=a("a"),yzo=o("YosoForQuestionAnswering"),Lzo=o(" (YOSO model)"),xzo=l(),j5=a("p"),$zo=o("The model is set in evaluation mode by default using "),jhe=a("code"),kzo=o("model.eval()"),Szo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),Rzo=o("model.train()"),Pzo=l(),F(D5.$$.fragment),Rqe=l(),od=a("h2"),G5=a("a"),Ghe=a("span"),F(Iy.$$.fragment),Bzo=l(),Ohe=a("span"),Izo=o("AutoModelForTableQuestionAnswering"),Pqe=l(),No=a("div"),F(qy.$$.fragment),qzo=l(),rd=a("p"),Nzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OV=a("a"),jzo=o("from_pretrained()"),Dzo=o(" class method or the "),VV=a("a"),Gzo=o("from_config()"),Ozo=o(` class
method.`),Vzo=l(),Ny=a("p"),Xzo=o("This class cannot be instantiated directly using "),Vhe=a("code"),zzo=o("__init__()"),Wzo=o(" (throws an error)."),Qzo=l(),gt=a("div"),F(jy.$$.fragment),Hzo=l(),Xhe=a("p"),Uzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jzo=l(),td=a("p"),Yzo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),Kzo=o("not"),Zzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),eWo=o("from_pretrained()"),oWo=o(" to load the model weights."),rWo=l(),F(O5.$$.fragment),tWo=l(),so=a("div"),F(Dy.$$.fragment),aWo=l(),Whe=a("p"),nWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sWo=l(),Na=a("p"),lWo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),mWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),Jhe=a("ul"),V5=a("li"),Yhe=a("strong"),pWo=o("tapas"),_Wo=o(" \u2014 "),zV=a("a"),uWo=o("TapasForQuestionAnswering"),bWo=o(" (TAPAS model)"),vWo=l(),X5=a("p"),FWo=o("The model is set in evaluation mode by default using "),Khe=a("code"),TWo=o("model.eval()"),MWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),EWo=o("model.train()"),CWo=l(),F(z5.$$.fragment),Bqe=l(),ad=a("h2"),W5=a("a"),epe=a("span"),F(Gy.$$.fragment),wWo=l(),ope=a("span"),AWo=o("AutoModelForImageClassification"),Iqe=l(),jo=a("div"),F(Oy.$$.fragment),yWo=l(),nd=a("p"),LWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=a("a"),xWo=o("from_pretrained()"),$Wo=o(" class method or the "),QV=a("a"),kWo=o("from_config()"),SWo=o(` class
method.`),RWo=l(),Vy=a("p"),PWo=o("This class cannot be instantiated directly using "),rpe=a("code"),BWo=o("__init__()"),IWo=o(" (throws an error)."),qWo=l(),ht=a("div"),F(Xy.$$.fragment),NWo=l(),tpe=a("p"),jWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DWo=l(),sd=a("p"),GWo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),OWo=o("not"),VWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),XWo=o("from_pretrained()"),zWo=o(" to load the model weights."),WWo=l(),F(Q5.$$.fragment),QWo=l(),lo=a("div"),F(zy.$$.fragment),HWo=l(),npe=a("p"),UWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JWo=l(),ja=a("p"),YWo=o("The model class to instantiate is selected based on the "),spe=a("code"),KWo=o("model_type"),ZWo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(":"),aQo=l(),Fe=a("ul"),H5=a("li"),dpe=a("strong"),nQo=o("beit"),sQo=o(" \u2014 "),UV=a("a"),lQo=o("BeitForImageClassification"),iQo=o(" (BEiT model)"),dQo=l(),U5=a("li"),cpe=a("strong"),cQo=o("convnext"),fQo=o(" \u2014 "),JV=a("a"),mQo=o("ConvNextForImageClassification"),gQo=o(" (ConvNext model)"),hQo=l(),J5=a("li"),fpe=a("strong"),pQo=o("cvt"),_Qo=o(" \u2014 "),YV=a("a"),uQo=o("CvtForImageClassification"),bQo=o(" (CvT model)"),vQo=l(),Y5=a("li"),mpe=a("strong"),FQo=o("data2vec-vision"),TQo=o(" \u2014 "),KV=a("a"),MQo=o("Data2VecVisionForImageClassification"),EQo=o(" (Data2VecVision model)"),CQo=l(),Bs=a("li"),gpe=a("strong"),wQo=o("deit"),AQo=o(" \u2014 "),ZV=a("a"),yQo=o("DeiTForImageClassification"),LQo=o(" or "),eX=a("a"),xQo=o("DeiTForImageClassificationWithTeacher"),$Qo=o(" (DeiT model)"),kQo=l(),K5=a("li"),hpe=a("strong"),SQo=o("imagegpt"),RQo=o(" \u2014 "),oX=a("a"),PQo=o("ImageGPTForImageClassification"),BQo=o(" (ImageGPT model)"),IQo=l(),pt=a("li"),ppe=a("strong"),qQo=o("perceiver"),NQo=o(" \u2014 "),rX=a("a"),jQo=o("PerceiverForImageClassificationLearned"),DQo=o(" or "),tX=a("a"),GQo=o("PerceiverForImageClassificationFourier"),OQo=o(" or "),aX=a("a"),VQo=o("PerceiverForImageClassificationConvProcessing"),XQo=o(" (Perceiver model)"),zQo=l(),Z5=a("li"),_pe=a("strong"),WQo=o("poolformer"),QQo=o(" \u2014 "),nX=a("a"),HQo=o("PoolFormerForImageClassification"),UQo=o(" (PoolFormer model)"),JQo=l(),ev=a("li"),upe=a("strong"),YQo=o("regnet"),KQo=o(" \u2014 "),sX=a("a"),ZQo=o("RegNetForImageClassification"),eHo=o(" (RegNet model)"),oHo=l(),ov=a("li"),bpe=a("strong"),rHo=o("resnet"),tHo=o(" \u2014 "),lX=a("a"),aHo=o("ResNetForImageClassification"),nHo=o(" (ResNet model)"),sHo=l(),rv=a("li"),vpe=a("strong"),lHo=o("segformer"),iHo=o(" \u2014 "),iX=a("a"),dHo=o("SegformerForImageClassification"),cHo=o(" (SegFormer model)"),fHo=l(),tv=a("li"),Fpe=a("strong"),mHo=o("swin"),gHo=o(" \u2014 "),dX=a("a"),hHo=o("SwinForImageClassification"),pHo=o(" (Swin model)"),_Ho=l(),av=a("li"),Tpe=a("strong"),uHo=o("van"),bHo=o(" \u2014 "),cX=a("a"),vHo=o("VanForImageClassification"),FHo=o(" (VAN model)"),THo=l(),nv=a("li"),Mpe=a("strong"),MHo=o("vit"),EHo=o(" \u2014 "),fX=a("a"),CHo=o("ViTForImageClassification"),wHo=o(" (ViT model)"),AHo=l(),sv=a("p"),yHo=o("The model is set in evaluation mode by default using "),Epe=a("code"),LHo=o("model.eval()"),xHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),$Ho=o("model.train()"),kHo=l(),F(lv.$$.fragment),qqe=l(),ld=a("h2"),iv=a("a"),wpe=a("span"),F(Wy.$$.fragment),SHo=l(),Ape=a("span"),RHo=o("AutoModelForVision2Seq"),Nqe=l(),Do=a("div"),F(Qy.$$.fragment),PHo=l(),id=a("p"),BHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mX=a("a"),IHo=o("from_pretrained()"),qHo=o(" class method or the "),gX=a("a"),NHo=o("from_config()"),jHo=o(` class
method.`),DHo=l(),Hy=a("p"),GHo=o("This class cannot be instantiated directly using "),ype=a("code"),OHo=o("__init__()"),VHo=o(" (throws an error)."),XHo=l(),_t=a("div"),F(Uy.$$.fragment),zHo=l(),Lpe=a("p"),WHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QHo=l(),dd=a("p"),HHo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),UHo=o("not"),JHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),YHo=o("from_pretrained()"),KHo=o(" to load the model weights."),ZHo=l(),F(dv.$$.fragment),eUo=l(),io=a("div"),F(Jy.$$.fragment),oUo=l(),$pe=a("p"),rUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tUo=l(),Da=a("p"),aUo=o("The model class to instantiate is selected based on the "),kpe=a("code"),nUo=o("model_type"),sUo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(":"),fUo=l(),Ppe=a("ul"),cv=a("li"),Bpe=a("strong"),mUo=o("vision-encoder-decoder"),gUo=o(" \u2014 "),pX=a("a"),hUo=o("VisionEncoderDecoderModel"),pUo=o(" (Vision Encoder decoder model)"),_Uo=l(),fv=a("p"),uUo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),bUo=o("model.eval()"),vUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),FUo=o("model.train()"),TUo=l(),F(mv.$$.fragment),jqe=l(),cd=a("h2"),gv=a("a"),Npe=a("span"),F(Yy.$$.fragment),MUo=l(),jpe=a("span"),EUo=o("AutoModelForAudioClassification"),Dqe=l(),Go=a("div"),F(Ky.$$.fragment),CUo=l(),fd=a("p"),wUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_X=a("a"),AUo=o("from_pretrained()"),yUo=o(" class method or the "),uX=a("a"),LUo=o("from_config()"),xUo=o(` class
method.`),$Uo=l(),Zy=a("p"),kUo=o("This class cannot be instantiated directly using "),Dpe=a("code"),SUo=o("__init__()"),RUo=o(" (throws an error)."),PUo=l(),ut=a("div"),F(eL.$$.fragment),BUo=l(),Gpe=a("p"),IUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),qUo=l(),md=a("p"),NUo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),jUo=o("not"),DUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),GUo=o("from_pretrained()"),OUo=o(" to load the model weights."),VUo=l(),F(hv.$$.fragment),XUo=l(),co=a("div"),F(oL.$$.fragment),zUo=l(),Vpe=a("p"),WUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),QUo=l(),Ga=a("p"),HUo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),UUo=o("model_type"),JUo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),YUo=o("pretrained_model_name_or_path"),KUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(":"),oJo=l(),ke=a("ul"),pv=a("li"),Qpe=a("strong"),rJo=o("data2vec-audio"),tJo=o(" \u2014 "),vX=a("a"),aJo=o("Data2VecAudioForSequenceClassification"),nJo=o(" (Data2VecAudio model)"),sJo=l(),_v=a("li"),Hpe=a("strong"),lJo=o("hubert"),iJo=o(" \u2014 "),FX=a("a"),dJo=o("HubertForSequenceClassification"),cJo=o(" (Hubert model)"),fJo=l(),uv=a("li"),Upe=a("strong"),mJo=o("sew"),gJo=o(" \u2014 "),TX=a("a"),hJo=o("SEWForSequenceClassification"),pJo=o(" (SEW model)"),_Jo=l(),bv=a("li"),Jpe=a("strong"),uJo=o("sew-d"),bJo=o(" \u2014 "),MX=a("a"),vJo=o("SEWDForSequenceClassification"),FJo=o(" (SEW-D model)"),TJo=l(),vv=a("li"),Ype=a("strong"),MJo=o("unispeech"),EJo=o(" \u2014 "),EX=a("a"),CJo=o("UniSpeechForSequenceClassification"),wJo=o(" (UniSpeech model)"),AJo=l(),Fv=a("li"),Kpe=a("strong"),yJo=o("unispeech-sat"),LJo=o(" \u2014 "),CX=a("a"),xJo=o("UniSpeechSatForSequenceClassification"),$Jo=o(" (UniSpeechSat model)"),kJo=l(),Tv=a("li"),Zpe=a("strong"),SJo=o("wav2vec2"),RJo=o(" \u2014 "),wX=a("a"),PJo=o("Wav2Vec2ForSequenceClassification"),BJo=o(" (Wav2Vec2 model)"),IJo=l(),Mv=a("li"),e_e=a("strong"),qJo=o("wav2vec2-conformer"),NJo=o(" \u2014 "),AX=a("a"),jJo=o("Wav2Vec2ConformerForSequenceClassification"),DJo=o(" (Wav2Vec2-Conformer model)"),GJo=l(),Ev=a("li"),o_e=a("strong"),OJo=o("wavlm"),VJo=o(" \u2014 "),yX=a("a"),XJo=o("WavLMForSequenceClassification"),zJo=o(" (WavLM model)"),WJo=l(),Cv=a("p"),QJo=o("The model is set in evaluation mode by default using "),r_e=a("code"),HJo=o("model.eval()"),UJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),JJo=o("model.train()"),YJo=l(),F(wv.$$.fragment),Gqe=l(),gd=a("h2"),Av=a("a"),a_e=a("span"),F(rL.$$.fragment),KJo=l(),n_e=a("span"),ZJo=o("AutoModelForAudioFrameClassification"),Oqe=l(),Oo=a("div"),F(tL.$$.fragment),eYo=l(),hd=a("p"),oYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LX=a("a"),rYo=o("from_pretrained()"),tYo=o(" class method or the "),xX=a("a"),aYo=o("from_config()"),nYo=o(` class
method.`),sYo=l(),aL=a("p"),lYo=o("This class cannot be instantiated directly using "),s_e=a("code"),iYo=o("__init__()"),dYo=o(" (throws an error)."),cYo=l(),bt=a("div"),F(nL.$$.fragment),fYo=l(),l_e=a("p"),mYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),gYo=l(),pd=a("p"),hYo=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),pYo=o("not"),_Yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),uYo=o("from_pretrained()"),bYo=o(" to load the model weights."),vYo=l(),F(yv.$$.fragment),FYo=l(),fo=a("div"),F(sL.$$.fragment),TYo=l(),d_e=a("p"),MYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),EYo=l(),Oa=a("p"),CYo=o("The model class to instantiate is selected based on the "),c_e=a("code"),wYo=o("model_type"),AYo=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),xYo=o("pretrained_model_name_or_path"),$Yo=o(":"),kYo=l(),Kr=a("ul"),Lv=a("li"),g_e=a("strong"),SYo=o("data2vec-audio"),RYo=o(" \u2014 "),kX=a("a"),PYo=o("Data2VecAudioForAudioFrameClassification"),BYo=o(" (Data2VecAudio model)"),IYo=l(),xv=a("li"),h_e=a("strong"),qYo=o("unispeech-sat"),NYo=o(" \u2014 "),SX=a("a"),jYo=o("UniSpeechSatForAudioFrameClassification"),DYo=o(" (UniSpeechSat model)"),GYo=l(),$v=a("li"),p_e=a("strong"),OYo=o("wav2vec2"),VYo=o(" \u2014 "),RX=a("a"),XYo=o("Wav2Vec2ForAudioFrameClassification"),zYo=o(" (Wav2Vec2 model)"),WYo=l(),kv=a("li"),__e=a("strong"),QYo=o("wav2vec2-conformer"),HYo=o(" \u2014 "),PX=a("a"),UYo=o("Wav2Vec2ConformerForAudioFrameClassification"),JYo=o(" (Wav2Vec2-Conformer model)"),YYo=l(),Sv=a("li"),u_e=a("strong"),KYo=o("wavlm"),ZYo=o(" \u2014 "),BX=a("a"),eKo=o("WavLMForAudioFrameClassification"),oKo=o(" (WavLM model)"),rKo=l(),Rv=a("p"),tKo=o("The model is set in evaluation mode by default using "),b_e=a("code"),aKo=o("model.eval()"),nKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),sKo=o("model.train()"),lKo=l(),F(Pv.$$.fragment),Vqe=l(),_d=a("h2"),Bv=a("a"),F_e=a("span"),F(lL.$$.fragment),iKo=l(),T_e=a("span"),dKo=o("AutoModelForCTC"),Xqe=l(),Vo=a("div"),F(iL.$$.fragment),cKo=l(),ud=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IX=a("a"),mKo=o("from_pretrained()"),gKo=o(" class method or the "),qX=a("a"),hKo=o("from_config()"),pKo=o(` class
method.`),_Ko=l(),dL=a("p"),uKo=o("This class cannot be instantiated directly using "),M_e=a("code"),bKo=o("__init__()"),vKo=o(" (throws an error)."),FKo=l(),vt=a("div"),F(cL.$$.fragment),TKo=l(),E_e=a("p"),MKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),EKo=l(),bd=a("p"),CKo=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),wKo=o("not"),AKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),yKo=o("from_pretrained()"),LKo=o(" to load the model weights."),xKo=l(),F(Iv.$$.fragment),$Ko=l(),mo=a("div"),F(fL.$$.fragment),kKo=l(),w_e=a("p"),SKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),RKo=l(),Va=a("p"),PKo=o("The model class to instantiate is selected based on the "),A_e=a("code"),BKo=o("model_type"),IKo=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),qKo=o("pretrained_model_name_or_path"),NKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),jKo=o("pretrained_model_name_or_path"),DKo=o(":"),GKo=l(),Se=a("ul"),qv=a("li"),x_e=a("strong"),OKo=o("data2vec-audio"),VKo=o(" \u2014 "),jX=a("a"),XKo=o("Data2VecAudioForCTC"),zKo=o(" (Data2VecAudio model)"),WKo=l(),Nv=a("li"),$_e=a("strong"),QKo=o("hubert"),HKo=o(" \u2014 "),DX=a("a"),UKo=o("HubertForCTC"),JKo=o(" (Hubert model)"),YKo=l(),jv=a("li"),k_e=a("strong"),KKo=o("sew"),ZKo=o(" \u2014 "),GX=a("a"),eZo=o("SEWForCTC"),oZo=o(" (SEW model)"),rZo=l(),Dv=a("li"),S_e=a("strong"),tZo=o("sew-d"),aZo=o(" \u2014 "),OX=a("a"),nZo=o("SEWDForCTC"),sZo=o(" (SEW-D model)"),lZo=l(),Gv=a("li"),R_e=a("strong"),iZo=o("unispeech"),dZo=o(" \u2014 "),VX=a("a"),cZo=o("UniSpeechForCTC"),fZo=o(" (UniSpeech model)"),mZo=l(),Ov=a("li"),P_e=a("strong"),gZo=o("unispeech-sat"),hZo=o(" \u2014 "),XX=a("a"),pZo=o("UniSpeechSatForCTC"),_Zo=o(" (UniSpeechSat model)"),uZo=l(),Vv=a("li"),B_e=a("strong"),bZo=o("wav2vec2"),vZo=o(" \u2014 "),zX=a("a"),FZo=o("Wav2Vec2ForCTC"),TZo=o(" (Wav2Vec2 model)"),MZo=l(),Xv=a("li"),I_e=a("strong"),EZo=o("wav2vec2-conformer"),CZo=o(" \u2014 "),WX=a("a"),wZo=o("Wav2Vec2ConformerForCTC"),AZo=o(" (Wav2Vec2-Conformer model)"),yZo=l(),zv=a("li"),q_e=a("strong"),LZo=o("wavlm"),xZo=o(" \u2014 "),QX=a("a"),$Zo=o("WavLMForCTC"),kZo=o(" (WavLM model)"),SZo=l(),Wv=a("p"),RZo=o("The model is set in evaluation mode by default using "),N_e=a("code"),PZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=a("code"),IZo=o("model.train()"),qZo=l(),F(Qv.$$.fragment),zqe=l(),vd=a("h2"),Hv=a("a"),D_e=a("span"),F(mL.$$.fragment),NZo=l(),G_e=a("span"),jZo=o("AutoModelForSpeechSeq2Seq"),Wqe=l(),Xo=a("div"),F(gL.$$.fragment),DZo=l(),Fd=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HX=a("a"),OZo=o("from_pretrained()"),VZo=o(" class method or the "),UX=a("a"),XZo=o("from_config()"),zZo=o(` class
method.`),WZo=l(),hL=a("p"),QZo=o("This class cannot be instantiated directly using "),O_e=a("code"),HZo=o("__init__()"),UZo=o(" (throws an error)."),JZo=l(),Ft=a("div"),F(pL.$$.fragment),YZo=l(),V_e=a("p"),KZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZZo=l(),Td=a("p"),eer=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),oer=o("not"),rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),ter=o("from_pretrained()"),aer=o(" to load the model weights."),ner=l(),F(Uv.$$.fragment),ser=l(),go=a("div"),F(_L.$$.fragment),ler=l(),z_e=a("p"),ier=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),der=l(),Xa=a("p"),cer=o("The model class to instantiate is selected based on the "),W_e=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),per=o("pretrained_model_name_or_path"),_er=o(":"),uer=l(),uL=a("ul"),Jv=a("li"),U_e=a("strong"),ber=o("speech-encoder-decoder"),ver=o(" \u2014 "),YX=a("a"),Fer=o("SpeechEncoderDecoderModel"),Ter=o(" (Speech Encoder decoder model)"),Mer=l(),Yv=a("li"),J_e=a("strong"),Eer=o("speech_to_text"),Cer=o(" \u2014 "),KX=a("a"),wer=o("Speech2TextForConditionalGeneration"),Aer=o(" (Speech2Text model)"),yer=l(),Kv=a("p"),Ler=o("The model is set in evaluation mode by default using "),Y_e=a("code"),xer=o("model.eval()"),$er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),ker=o("model.train()"),Ser=l(),F(Zv.$$.fragment),Qqe=l(),Md=a("h2"),eF=a("a"),Z_e=a("span"),F(bL.$$.fragment),Rer=l(),eue=a("span"),Per=o("AutoModelForAudioXVector"),Hqe=l(),zo=a("div"),F(vL.$$.fragment),Ber=l(),Ed=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZX=a("a"),qer=o("from_pretrained()"),Ner=o(" class method or the "),ez=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),FL=a("p"),Oer=o("This class cannot be instantiated directly using "),oue=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),Tt=a("div"),F(TL.$$.fragment),Wer=l(),rue=a("p"),Qer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Her=l(),Cd=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),F(oF.$$.fragment),oor=l(),ho=a("div"),F(ML.$$.fragment),ror=l(),aue=a("p"),tor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aor=l(),za=a("p"),nor=o("The model class to instantiate is selected based on the "),nue=a("code"),sor=o("model_type"),lor=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(":"),gor=l(),Zr=a("ul"),rF=a("li"),iue=a("strong"),hor=o("data2vec-audio"),por=o(" \u2014 "),rz=a("a"),_or=o("Data2VecAudioForXVector"),uor=o(" (Data2VecAudio model)"),bor=l(),tF=a("li"),due=a("strong"),vor=o("unispeech-sat"),For=o(" \u2014 "),tz=a("a"),Tor=o("UniSpeechSatForXVector"),Mor=o(" (UniSpeechSat model)"),Eor=l(),aF=a("li"),cue=a("strong"),Cor=o("wav2vec2"),wor=o(" \u2014 "),az=a("a"),Aor=o("Wav2Vec2ForXVector"),yor=o(" (Wav2Vec2 model)"),Lor=l(),nF=a("li"),fue=a("strong"),xor=o("wav2vec2-conformer"),$or=o(" \u2014 "),nz=a("a"),kor=o("Wav2Vec2ConformerForXVector"),Sor=o(" (Wav2Vec2-Conformer model)"),Ror=l(),sF=a("li"),mue=a("strong"),Por=o("wavlm"),Bor=o(" \u2014 "),sz=a("a"),Ior=o("WavLMForXVector"),qor=o(" (WavLM model)"),Nor=l(),lF=a("p"),jor=o("The model is set in evaluation mode by default using "),gue=a("code"),Dor=o("model.eval()"),Gor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=a("code"),Oor=o("model.train()"),Vor=l(),F(iF.$$.fragment),Uqe=l(),wd=a("h2"),dF=a("a"),pue=a("span"),F(EL.$$.fragment),Xor=l(),_ue=a("span"),zor=o("AutoModelForMaskedImageModeling"),Jqe=l(),Wo=a("div"),F(CL.$$.fragment),Wor=l(),Ad=a("p"),Qor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lz=a("a"),Hor=o("from_pretrained()"),Uor=o(" class method or the "),iz=a("a"),Jor=o("from_config()"),Yor=o(` class
method.`),Kor=l(),wL=a("p"),Zor=o("This class cannot be instantiated directly using "),uue=a("code"),err=o("__init__()"),orr=o(" (throws an error)."),rrr=l(),Mt=a("div"),F(AL.$$.fragment),trr=l(),bue=a("p"),arr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),nrr=l(),yd=a("p"),srr=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),lrr=o("not"),irr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),drr=o("from_pretrained()"),crr=o(" to load the model weights."),frr=l(),F(cF.$$.fragment),mrr=l(),po=a("div"),F(yL.$$.fragment),grr=l(),Fue=a("p"),hrr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),prr=l(),Wa=a("p"),_rr=o("The model class to instantiate is selected based on the "),Tue=a("code"),urr=o("model_type"),brr=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),vrr=o("pretrained_model_name_or_path"),Frr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),Trr=o("pretrained_model_name_or_path"),Mrr=o(":"),Err=l(),Ld=a("ul"),fF=a("li"),Cue=a("strong"),Crr=o("deit"),wrr=o(" \u2014 "),cz=a("a"),Arr=o("DeiTForMaskedImageModeling"),yrr=o(" (DeiT model)"),Lrr=l(),mF=a("li"),wue=a("strong"),xrr=o("swin"),$rr=o(" \u2014 "),fz=a("a"),krr=o("SwinForMaskedImageModeling"),Srr=o(" (Swin model)"),Rrr=l(),gF=a("li"),Aue=a("strong"),Prr=o("vit"),Brr=o(" \u2014 "),mz=a("a"),Irr=o("ViTForMaskedImageModeling"),qrr=o(" (ViT model)"),Nrr=l(),hF=a("p"),jrr=o("The model is set in evaluation mode by default using "),yue=a("code"),Drr=o("model.eval()"),Grr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),Orr=o("model.train()"),Vrr=l(),F(pF.$$.fragment),Yqe=l(),xd=a("h2"),_F=a("a"),xue=a("span"),F(LL.$$.fragment),Xrr=l(),$ue=a("span"),zrr=o("AutoModelForObjectDetection"),Kqe=l(),Qo=a("div"),F(xL.$$.fragment),Wrr=l(),$d=a("p"),Qrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gz=a("a"),Hrr=o("from_pretrained()"),Urr=o(" class method or the "),hz=a("a"),Jrr=o("from_config()"),Yrr=o(` class
method.`),Krr=l(),$L=a("p"),Zrr=o("This class cannot be instantiated directly using "),kue=a("code"),etr=o("__init__()"),otr=o(" (throws an error)."),rtr=l(),Et=a("div"),F(kL.$$.fragment),ttr=l(),Sue=a("p"),atr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ntr=l(),kd=a("p"),str=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),ltr=o("not"),itr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),dtr=o("from_pretrained()"),ctr=o(" to load the model weights."),ftr=l(),F(uF.$$.fragment),mtr=l(),_o=a("div"),F(SL.$$.fragment),gtr=l(),Pue=a("p"),htr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ptr=l(),Qa=a("p"),_tr=o("The model class to instantiate is selected based on the "),Bue=a("code"),utr=o("model_type"),btr=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),vtr=o("pretrained_model_name_or_path"),Ftr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),Ttr=o("pretrained_model_name_or_path"),Mtr=o(":"),Etr=l(),RL=a("ul"),bF=a("li"),Nue=a("strong"),Ctr=o("detr"),wtr=o(" \u2014 "),_z=a("a"),Atr=o("DetrForObjectDetection"),ytr=o(" (DETR model)"),Ltr=l(),vF=a("li"),jue=a("strong"),xtr=o("yolos"),$tr=o(" \u2014 "),uz=a("a"),ktr=o("YolosForObjectDetection"),Str=o(" (YOLOS model)"),Rtr=l(),FF=a("p"),Ptr=o("The model is set in evaluation mode by default using "),Due=a("code"),Btr=o("model.eval()"),Itr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),qtr=o("model.train()"),Ntr=l(),F(TF.$$.fragment),Zqe=l(),Sd=a("h2"),MF=a("a"),Oue=a("span"),F(PL.$$.fragment),jtr=l(),Vue=a("span"),Dtr=o("AutoModelForImageSegmentation"),eNe=l(),Ho=a("div"),F(BL.$$.fragment),Gtr=l(),Rd=a("p"),Otr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bz=a("a"),Vtr=o("from_pretrained()"),Xtr=o(" class method or the "),vz=a("a"),ztr=o("from_config()"),Wtr=o(` class
method.`),Qtr=l(),IL=a("p"),Htr=o("This class cannot be instantiated directly using "),Xue=a("code"),Utr=o("__init__()"),Jtr=o(" (throws an error)."),Ytr=l(),Ct=a("div"),F(qL.$$.fragment),Ktr=l(),zue=a("p"),Ztr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ear=l(),Pd=a("p"),oar=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),rar=o("not"),tar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),aar=o("from_pretrained()"),nar=o(" to load the model weights."),sar=l(),F(EF.$$.fragment),lar=l(),uo=a("div"),F(NL.$$.fragment),iar=l(),Que=a("p"),dar=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),car=l(),Ha=a("p"),far=o("The model class to instantiate is selected based on the "),Hue=a("code"),mar=o("model_type"),gar=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),har=o("pretrained_model_name_or_path"),par=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),_ar=o("pretrained_model_name_or_path"),uar=o(":"),bar=l(),Yue=a("ul"),CF=a("li"),Kue=a("strong"),Far=o("detr"),Tar=o(" \u2014 "),Tz=a("a"),Mar=o("DetrForSegmentation"),Ear=o(" (DETR model)"),Car=l(),wF=a("p"),war=o("The model is set in evaluation mode by default using "),Zue=a("code"),Aar=o("model.eval()"),yar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),Lar=o("model.train()"),xar=l(),F(AF.$$.fragment),oNe=l(),Bd=a("h2"),yF=a("a"),o2e=a("span"),F(jL.$$.fragment),$ar=l(),r2e=a("span"),kar=o("AutoModelForSemanticSegmentation"),rNe=l(),Uo=a("div"),F(DL.$$.fragment),Sar=l(),Id=a("p"),Rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mz=a("a"),Par=o("from_pretrained()"),Bar=o(" class method or the "),Ez=a("a"),Iar=o("from_config()"),qar=o(` class
method.`),Nar=l(),GL=a("p"),jar=o("This class cannot be instantiated directly using "),t2e=a("code"),Dar=o("__init__()"),Gar=o(" (throws an error)."),Oar=l(),wt=a("div"),F(OL.$$.fragment),Var=l(),a2e=a("p"),Xar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zar=l(),qd=a("p"),War=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),Qar=o("not"),Har=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Uar=o("from_pretrained()"),Jar=o(" to load the model weights."),Yar=l(),F(LF.$$.fragment),Kar=l(),bo=a("div"),F(VL.$$.fragment),Zar=l(),s2e=a("p"),enr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),onr=l(),Ua=a("p"),rnr=o("The model class to instantiate is selected based on the "),l2e=a("code"),tnr=o("model_type"),anr=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),nnr=o("pretrained_model_name_or_path"),snr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(":"),dnr=l(),Ja=a("ul"),xF=a("li"),c2e=a("strong"),cnr=o("beit"),fnr=o(" \u2014 "),wz=a("a"),mnr=o("BeitForSemanticSegmentation"),gnr=o(" (BEiT model)"),hnr=l(),$F=a("li"),f2e=a("strong"),pnr=o("data2vec-vision"),_nr=o(" \u2014 "),Az=a("a"),unr=o("Data2VecVisionForSemanticSegmentation"),bnr=o(" (Data2VecVision model)"),vnr=l(),kF=a("li"),m2e=a("strong"),Fnr=o("dpt"),Tnr=o(" \u2014 "),yz=a("a"),Mnr=o("DPTForSemanticSegmentation"),Enr=o(" (DPT model)"),Cnr=l(),SF=a("li"),g2e=a("strong"),wnr=o("segformer"),Anr=o(" \u2014 "),Lz=a("a"),ynr=o("SegformerForSemanticSegmentation"),Lnr=o(" (SegFormer model)"),xnr=l(),RF=a("p"),$nr=o("The model is set in evaluation mode by default using "),h2e=a("code"),knr=o("model.eval()"),Snr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=a("code"),Rnr=o("model.train()"),Pnr=l(),F(PF.$$.fragment),tNe=l(),Nd=a("h2"),BF=a("a"),_2e=a("span"),F(XL.$$.fragment),Bnr=l(),u2e=a("span"),Inr=o("AutoModelForInstanceSegmentation"),aNe=l(),Jo=a("div"),F(zL.$$.fragment),qnr=l(),jd=a("p"),Nnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xz=a("a"),jnr=o("from_pretrained()"),Dnr=o(" class method or the "),$z=a("a"),Gnr=o("from_config()"),Onr=o(` class
method.`),Vnr=l(),WL=a("p"),Xnr=o("This class cannot be instantiated directly using "),b2e=a("code"),znr=o("__init__()"),Wnr=o(" (throws an error)."),Qnr=l(),At=a("div"),F(QL.$$.fragment),Hnr=l(),v2e=a("p"),Unr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jnr=l(),Dd=a("p"),Ynr=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),Knr=o("not"),Znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),esr=o("from_pretrained()"),osr=o(" to load the model weights."),rsr=l(),F(IF.$$.fragment),tsr=l(),vo=a("div"),F(HL.$$.fragment),asr=l(),T2e=a("p"),nsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ssr=l(),Ya=a("p"),lsr=o("The model class to instantiate is selected based on the "),M2e=a("code"),isr=o("model_type"),dsr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),msr=o("pretrained_model_name_or_path"),gsr=o(":"),hsr=l(),w2e=a("ul"),qF=a("li"),A2e=a("strong"),psr=o("maskformer"),_sr=o(" \u2014 "),Sz=a("a"),usr=o("MaskFormerForInstanceSegmentation"),bsr=o(" (MaskFormer model)"),vsr=l(),NF=a("p"),Fsr=o("The model is set in evaluation mode by default using "),y2e=a("code"),Tsr=o("model.eval()"),Msr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),Esr=o("model.train()"),Csr=l(),F(jF.$$.fragment),nNe=l(),Gd=a("h2"),DF=a("a"),x2e=a("span"),F(UL.$$.fragment),wsr=l(),$2e=a("span"),Asr=o("TFAutoModel"),sNe=l(),Yo=a("div"),F(JL.$$.fragment),ysr=l(),Od=a("p"),Lsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rz=a("a"),xsr=o("from_pretrained()"),$sr=o(" class method or the "),Pz=a("a"),ksr=o("from_config()"),Ssr=o(` class
method.`),Rsr=l(),YL=a("p"),Psr=o("This class cannot be instantiated directly using "),k2e=a("code"),Bsr=o("__init__()"),Isr=o(" (throws an error)."),qsr=l(),yt=a("div"),F(KL.$$.fragment),Nsr=l(),S2e=a("p"),jsr=o("Instantiates one of the base model classes of the library from a configuration."),Dsr=l(),Vd=a("p"),Gsr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),Osr=o("not"),Vsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Xsr=o("from_pretrained()"),zsr=o(" to load the model weights."),Wsr=l(),F(GF.$$.fragment),Qsr=l(),wr=a("div"),F(ZL.$$.fragment),Hsr=l(),P2e=a("p"),Usr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jsr=l(),Ka=a("p"),Ysr=o("The model class to instantiate is selected based on the "),B2e=a("code"),Ksr=o("model_type"),Zsr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(":"),alr=l(),N=a("ul"),OF=a("li"),N2e=a("strong"),nlr=o("albert"),slr=o(" \u2014 "),Iz=a("a"),llr=o("TFAlbertModel"),ilr=o(" (ALBERT model)"),dlr=l(),VF=a("li"),j2e=a("strong"),clr=o("bart"),flr=o(" \u2014 "),qz=a("a"),mlr=o("TFBartModel"),glr=o(" (BART model)"),hlr=l(),XF=a("li"),D2e=a("strong"),plr=o("bert"),_lr=o(" \u2014 "),Nz=a("a"),ulr=o("TFBertModel"),blr=o(" (BERT model)"),vlr=l(),zF=a("li"),G2e=a("strong"),Flr=o("blenderbot"),Tlr=o(" \u2014 "),jz=a("a"),Mlr=o("TFBlenderbotModel"),Elr=o(" (Blenderbot model)"),Clr=l(),WF=a("li"),O2e=a("strong"),wlr=o("blenderbot-small"),Alr=o(" \u2014 "),Dz=a("a"),ylr=o("TFBlenderbotSmallModel"),Llr=o(" (BlenderbotSmall model)"),xlr=l(),QF=a("li"),V2e=a("strong"),$lr=o("camembert"),klr=o(" \u2014 "),Gz=a("a"),Slr=o("TFCamembertModel"),Rlr=o(" (CamemBERT model)"),Plr=l(),HF=a("li"),X2e=a("strong"),Blr=o("clip"),Ilr=o(" \u2014 "),Oz=a("a"),qlr=o("TFCLIPModel"),Nlr=o(" (CLIP model)"),jlr=l(),UF=a("li"),z2e=a("strong"),Dlr=o("convbert"),Glr=o(" \u2014 "),Vz=a("a"),Olr=o("TFConvBertModel"),Vlr=o(" (ConvBERT model)"),Xlr=l(),JF=a("li"),W2e=a("strong"),zlr=o("convnext"),Wlr=o(" \u2014 "),Xz=a("a"),Qlr=o("TFConvNextModel"),Hlr=o(" (ConvNext model)"),Ulr=l(),YF=a("li"),Q2e=a("strong"),Jlr=o("ctrl"),Ylr=o(" \u2014 "),zz=a("a"),Klr=o("TFCTRLModel"),Zlr=o(" (CTRL model)"),eir=l(),KF=a("li"),H2e=a("strong"),oir=o("data2vec-vision"),rir=o(" \u2014 "),Wz=a("a"),tir=o("TFData2VecVisionModel"),air=o(" (Data2VecVision model)"),nir=l(),ZF=a("li"),U2e=a("strong"),sir=o("deberta"),lir=o(" \u2014 "),Qz=a("a"),iir=o("TFDebertaModel"),dir=o(" (DeBERTa model)"),cir=l(),eT=a("li"),J2e=a("strong"),fir=o("deberta-v2"),mir=o(" \u2014 "),Hz=a("a"),gir=o("TFDebertaV2Model"),hir=o(" (DeBERTa-v2 model)"),pir=l(),oT=a("li"),Y2e=a("strong"),_ir=o("distilbert"),uir=o(" \u2014 "),Uz=a("a"),bir=o("TFDistilBertModel"),vir=o(" (DistilBERT model)"),Fir=l(),rT=a("li"),K2e=a("strong"),Tir=o("dpr"),Mir=o(" \u2014 "),Jz=a("a"),Eir=o("TFDPRQuestionEncoder"),Cir=o(" (DPR model)"),wir=l(),tT=a("li"),Z2e=a("strong"),Air=o("electra"),yir=o(" \u2014 "),Yz=a("a"),Lir=o("TFElectraModel"),xir=o(" (ELECTRA model)"),$ir=l(),aT=a("li"),e1e=a("strong"),kir=o("flaubert"),Sir=o(" \u2014 "),Kz=a("a"),Rir=o("TFFlaubertModel"),Pir=o(" (FlauBERT model)"),Bir=l(),Is=a("li"),o1e=a("strong"),Iir=o("funnel"),qir=o(" \u2014 "),Zz=a("a"),Nir=o("TFFunnelModel"),jir=o(" or "),eW=a("a"),Dir=o("TFFunnelBaseModel"),Gir=o(" (Funnel Transformer model)"),Oir=l(),nT=a("li"),r1e=a("strong"),Vir=o("gpt2"),Xir=o(" \u2014 "),oW=a("a"),zir=o("TFGPT2Model"),Wir=o(" (OpenAI GPT-2 model)"),Qir=l(),sT=a("li"),t1e=a("strong"),Hir=o("gptj"),Uir=o(" \u2014 "),rW=a("a"),Jir=o("TFGPTJModel"),Yir=o(" (GPT-J model)"),Kir=l(),lT=a("li"),a1e=a("strong"),Zir=o("hubert"),edr=o(" \u2014 "),tW=a("a"),odr=o("TFHubertModel"),rdr=o(" (Hubert model)"),tdr=l(),iT=a("li"),n1e=a("strong"),adr=o("layoutlm"),ndr=o(" \u2014 "),aW=a("a"),sdr=o("TFLayoutLMModel"),ldr=o(" (LayoutLM model)"),idr=l(),dT=a("li"),s1e=a("strong"),ddr=o("led"),cdr=o(" \u2014 "),nW=a("a"),fdr=o("TFLEDModel"),mdr=o(" (LED model)"),gdr=l(),cT=a("li"),l1e=a("strong"),hdr=o("longformer"),pdr=o(" \u2014 "),sW=a("a"),_dr=o("TFLongformerModel"),udr=o(" (Longformer model)"),bdr=l(),fT=a("li"),i1e=a("strong"),vdr=o("lxmert"),Fdr=o(" \u2014 "),lW=a("a"),Tdr=o("TFLxmertModel"),Mdr=o(" (LXMERT model)"),Edr=l(),mT=a("li"),d1e=a("strong"),Cdr=o("marian"),wdr=o(" \u2014 "),iW=a("a"),Adr=o("TFMarianModel"),ydr=o(" (Marian model)"),Ldr=l(),gT=a("li"),c1e=a("strong"),xdr=o("mbart"),$dr=o(" \u2014 "),dW=a("a"),kdr=o("TFMBartModel"),Sdr=o(" (mBART model)"),Rdr=l(),hT=a("li"),f1e=a("strong"),Pdr=o("mobilebert"),Bdr=o(" \u2014 "),cW=a("a"),Idr=o("TFMobileBertModel"),qdr=o(" (MobileBERT model)"),Ndr=l(),pT=a("li"),m1e=a("strong"),jdr=o("mpnet"),Ddr=o(" \u2014 "),fW=a("a"),Gdr=o("TFMPNetModel"),Odr=o(" (MPNet model)"),Vdr=l(),_T=a("li"),g1e=a("strong"),Xdr=o("mt5"),zdr=o(" \u2014 "),mW=a("a"),Wdr=o("TFMT5Model"),Qdr=o(" (mT5 model)"),Hdr=l(),uT=a("li"),h1e=a("strong"),Udr=o("openai-gpt"),Jdr=o(" \u2014 "),gW=a("a"),Ydr=o("TFOpenAIGPTModel"),Kdr=o(" (OpenAI GPT model)"),Zdr=l(),bT=a("li"),p1e=a("strong"),ecr=o("pegasus"),ocr=o(" \u2014 "),hW=a("a"),rcr=o("TFPegasusModel"),tcr=o(" (Pegasus model)"),acr=l(),vT=a("li"),_1e=a("strong"),ncr=o("rembert"),scr=o(" \u2014 "),pW=a("a"),lcr=o("TFRemBertModel"),icr=o(" (RemBERT model)"),dcr=l(),FT=a("li"),u1e=a("strong"),ccr=o("roberta"),fcr=o(" \u2014 "),_W=a("a"),mcr=o("TFRobertaModel"),gcr=o(" (RoBERTa model)"),hcr=l(),TT=a("li"),b1e=a("strong"),pcr=o("roformer"),_cr=o(" \u2014 "),uW=a("a"),ucr=o("TFRoFormerModel"),bcr=o(" (RoFormer model)"),vcr=l(),MT=a("li"),v1e=a("strong"),Fcr=o("speech_to_text"),Tcr=o(" \u2014 "),bW=a("a"),Mcr=o("TFSpeech2TextModel"),Ecr=o(" (Speech2Text model)"),Ccr=l(),ET=a("li"),F1e=a("strong"),wcr=o("swin"),Acr=o(" \u2014 "),vW=a("a"),ycr=o("TFSwinModel"),Lcr=o(" (Swin model)"),xcr=l(),CT=a("li"),T1e=a("strong"),$cr=o("t5"),kcr=o(" \u2014 "),FW=a("a"),Scr=o("TFT5Model"),Rcr=o(" (T5 model)"),Pcr=l(),wT=a("li"),M1e=a("strong"),Bcr=o("tapas"),Icr=o(" \u2014 "),TW=a("a"),qcr=o("TFTapasModel"),Ncr=o(" (TAPAS model)"),jcr=l(),AT=a("li"),E1e=a("strong"),Dcr=o("transfo-xl"),Gcr=o(" \u2014 "),MW=a("a"),Ocr=o("TFTransfoXLModel"),Vcr=o(" (Transformer-XL model)"),Xcr=l(),yT=a("li"),C1e=a("strong"),zcr=o("vit"),Wcr=o(" \u2014 "),EW=a("a"),Qcr=o("TFViTModel"),Hcr=o(" (ViT model)"),Ucr=l(),LT=a("li"),w1e=a("strong"),Jcr=o("vit_mae"),Ycr=o(" \u2014 "),CW=a("a"),Kcr=o("TFViTMAEModel"),Zcr=o(" (ViTMAE model)"),efr=l(),xT=a("li"),A1e=a("strong"),ofr=o("wav2vec2"),rfr=o(" \u2014 "),wW=a("a"),tfr=o("TFWav2Vec2Model"),afr=o(" (Wav2Vec2 model)"),nfr=l(),$T=a("li"),y1e=a("strong"),sfr=o("xlm"),lfr=o(" \u2014 "),AW=a("a"),ifr=o("TFXLMModel"),dfr=o(" (XLM model)"),cfr=l(),kT=a("li"),L1e=a("strong"),ffr=o("xlm-roberta"),mfr=o(" \u2014 "),yW=a("a"),gfr=o("TFXLMRobertaModel"),hfr=o(" (XLM-RoBERTa model)"),pfr=l(),ST=a("li"),x1e=a("strong"),_fr=o("xlnet"),ufr=o(" \u2014 "),LW=a("a"),bfr=o("TFXLNetModel"),vfr=o(" (XLNet model)"),Ffr=l(),F(RT.$$.fragment),lNe=l(),Xd=a("h2"),PT=a("a"),$1e=a("span"),F(e8.$$.fragment),Tfr=l(),k1e=a("span"),Mfr=o("TFAutoModelForPreTraining"),iNe=l(),Ko=a("div"),F(o8.$$.fragment),Efr=l(),zd=a("p"),Cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xW=a("a"),wfr=o("from_pretrained()"),Afr=o(" class method or the "),$W=a("a"),yfr=o("from_config()"),Lfr=o(` class
method.`),xfr=l(),r8=a("p"),$fr=o("This class cannot be instantiated directly using "),S1e=a("code"),kfr=o("__init__()"),Sfr=o(" (throws an error)."),Rfr=l(),Lt=a("div"),F(t8.$$.fragment),Pfr=l(),R1e=a("p"),Bfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ifr=l(),Wd=a("p"),qfr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Nfr=o("not"),jfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),Dfr=o("from_pretrained()"),Gfr=o(" to load the model weights."),Ofr=l(),F(BT.$$.fragment),Vfr=l(),Ar=a("div"),F(a8.$$.fragment),Xfr=l(),B1e=a("p"),zfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wfr=l(),Za=a("p"),Qfr=o("The model class to instantiate is selected based on the "),I1e=a("code"),Hfr=o("model_type"),Ufr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(":"),emr=l(),se=a("ul"),IT=a("li"),j1e=a("strong"),omr=o("albert"),rmr=o(" \u2014 "),SW=a("a"),tmr=o("TFAlbertForPreTraining"),amr=o(" (ALBERT model)"),nmr=l(),qT=a("li"),D1e=a("strong"),smr=o("bart"),lmr=o(" \u2014 "),RW=a("a"),imr=o("TFBartForConditionalGeneration"),dmr=o(" (BART model)"),cmr=l(),NT=a("li"),G1e=a("strong"),fmr=o("bert"),mmr=o(" \u2014 "),PW=a("a"),gmr=o("TFBertForPreTraining"),hmr=o(" (BERT model)"),pmr=l(),jT=a("li"),O1e=a("strong"),_mr=o("camembert"),umr=o(" \u2014 "),BW=a("a"),bmr=o("TFCamembertForMaskedLM"),vmr=o(" (CamemBERT model)"),Fmr=l(),DT=a("li"),V1e=a("strong"),Tmr=o("ctrl"),Mmr=o(" \u2014 "),IW=a("a"),Emr=o("TFCTRLLMHeadModel"),Cmr=o(" (CTRL model)"),wmr=l(),GT=a("li"),X1e=a("strong"),Amr=o("distilbert"),ymr=o(" \u2014 "),qW=a("a"),Lmr=o("TFDistilBertForMaskedLM"),xmr=o(" (DistilBERT model)"),$mr=l(),OT=a("li"),z1e=a("strong"),kmr=o("electra"),Smr=o(" \u2014 "),NW=a("a"),Rmr=o("TFElectraForPreTraining"),Pmr=o(" (ELECTRA model)"),Bmr=l(),VT=a("li"),W1e=a("strong"),Imr=o("flaubert"),qmr=o(" \u2014 "),jW=a("a"),Nmr=o("TFFlaubertWithLMHeadModel"),jmr=o(" (FlauBERT model)"),Dmr=l(),XT=a("li"),Q1e=a("strong"),Gmr=o("funnel"),Omr=o(" \u2014 "),DW=a("a"),Vmr=o("TFFunnelForPreTraining"),Xmr=o(" (Funnel Transformer model)"),zmr=l(),zT=a("li"),H1e=a("strong"),Wmr=o("gpt2"),Qmr=o(" \u2014 "),GW=a("a"),Hmr=o("TFGPT2LMHeadModel"),Umr=o(" (OpenAI GPT-2 model)"),Jmr=l(),WT=a("li"),U1e=a("strong"),Ymr=o("layoutlm"),Kmr=o(" \u2014 "),OW=a("a"),Zmr=o("TFLayoutLMForMaskedLM"),egr=o(" (LayoutLM model)"),ogr=l(),QT=a("li"),J1e=a("strong"),rgr=o("lxmert"),tgr=o(" \u2014 "),VW=a("a"),agr=o("TFLxmertForPreTraining"),ngr=o(" (LXMERT model)"),sgr=l(),HT=a("li"),Y1e=a("strong"),lgr=o("mobilebert"),igr=o(" \u2014 "),XW=a("a"),dgr=o("TFMobileBertForPreTraining"),cgr=o(" (MobileBERT model)"),fgr=l(),UT=a("li"),K1e=a("strong"),mgr=o("mpnet"),ggr=o(" \u2014 "),zW=a("a"),hgr=o("TFMPNetForMaskedLM"),pgr=o(" (MPNet model)"),_gr=l(),JT=a("li"),Z1e=a("strong"),ugr=o("openai-gpt"),bgr=o(" \u2014 "),WW=a("a"),vgr=o("TFOpenAIGPTLMHeadModel"),Fgr=o(" (OpenAI GPT model)"),Tgr=l(),YT=a("li"),ebe=a("strong"),Mgr=o("roberta"),Egr=o(" \u2014 "),QW=a("a"),Cgr=o("TFRobertaForMaskedLM"),wgr=o(" (RoBERTa model)"),Agr=l(),KT=a("li"),obe=a("strong"),ygr=o("t5"),Lgr=o(" \u2014 "),HW=a("a"),xgr=o("TFT5ForConditionalGeneration"),$gr=o(" (T5 model)"),kgr=l(),ZT=a("li"),rbe=a("strong"),Sgr=o("tapas"),Rgr=o(" \u2014 "),UW=a("a"),Pgr=o("TFTapasForMaskedLM"),Bgr=o(" (TAPAS model)"),Igr=l(),e7=a("li"),tbe=a("strong"),qgr=o("transfo-xl"),Ngr=o(" \u2014 "),JW=a("a"),jgr=o("TFTransfoXLLMHeadModel"),Dgr=o(" (Transformer-XL model)"),Ggr=l(),o7=a("li"),abe=a("strong"),Ogr=o("vit_mae"),Vgr=o(" \u2014 "),YW=a("a"),Xgr=o("TFViTMAEForPreTraining"),zgr=o(" (ViTMAE model)"),Wgr=l(),r7=a("li"),nbe=a("strong"),Qgr=o("xlm"),Hgr=o(" \u2014 "),KW=a("a"),Ugr=o("TFXLMWithLMHeadModel"),Jgr=o(" (XLM model)"),Ygr=l(),t7=a("li"),sbe=a("strong"),Kgr=o("xlm-roberta"),Zgr=o(" \u2014 "),ZW=a("a"),ehr=o("TFXLMRobertaForMaskedLM"),ohr=o(" (XLM-RoBERTa model)"),rhr=l(),a7=a("li"),lbe=a("strong"),thr=o("xlnet"),ahr=o(" \u2014 "),eQ=a("a"),nhr=o("TFXLNetLMHeadModel"),shr=o(" (XLNet model)"),lhr=l(),F(n7.$$.fragment),dNe=l(),Qd=a("h2"),s7=a("a"),ibe=a("span"),F(n8.$$.fragment),ihr=l(),dbe=a("span"),dhr=o("TFAutoModelForCausalLM"),cNe=l(),Zo=a("div"),F(s8.$$.fragment),chr=l(),Hd=a("p"),fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oQ=a("a"),mhr=o("from_pretrained()"),ghr=o(" class method or the "),rQ=a("a"),hhr=o("from_config()"),phr=o(` class
method.`),_hr=l(),l8=a("p"),uhr=o("This class cannot be instantiated directly using "),cbe=a("code"),bhr=o("__init__()"),vhr=o(" (throws an error)."),Fhr=l(),xt=a("div"),F(i8.$$.fragment),Thr=l(),fbe=a("p"),Mhr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ehr=l(),Ud=a("p"),Chr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),whr=o("not"),Ahr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),yhr=o("from_pretrained()"),Lhr=o(" to load the model weights."),xhr=l(),F(l7.$$.fragment),$hr=l(),yr=a("div"),F(d8.$$.fragment),khr=l(),gbe=a("p"),Shr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rhr=l(),en=a("p"),Phr=o("The model class to instantiate is selected based on the "),hbe=a("code"),Bhr=o("model_type"),Ihr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),qhr=o("pretrained_model_name_or_path"),Nhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),jhr=o("pretrained_model_name_or_path"),Dhr=o(":"),Ghr=l(),Me=a("ul"),i7=a("li"),ube=a("strong"),Ohr=o("bert"),Vhr=o(" \u2014 "),aQ=a("a"),Xhr=o("TFBertLMHeadModel"),zhr=o(" (BERT model)"),Whr=l(),d7=a("li"),bbe=a("strong"),Qhr=o("camembert"),Hhr=o(" \u2014 "),nQ=a("a"),Uhr=o("TFCamembertForCausalLM"),Jhr=o(" (CamemBERT model)"),Yhr=l(),c7=a("li"),vbe=a("strong"),Khr=o("ctrl"),Zhr=o(" \u2014 "),sQ=a("a"),epr=o("TFCTRLLMHeadModel"),opr=o(" (CTRL model)"),rpr=l(),f7=a("li"),Fbe=a("strong"),tpr=o("gpt2"),apr=o(" \u2014 "),lQ=a("a"),npr=o("TFGPT2LMHeadModel"),spr=o(" (OpenAI GPT-2 model)"),lpr=l(),m7=a("li"),Tbe=a("strong"),ipr=o("gptj"),dpr=o(" \u2014 "),iQ=a("a"),cpr=o("TFGPTJForCausalLM"),fpr=o(" (GPT-J model)"),mpr=l(),g7=a("li"),Mbe=a("strong"),gpr=o("openai-gpt"),hpr=o(" \u2014 "),dQ=a("a"),ppr=o("TFOpenAIGPTLMHeadModel"),_pr=o(" (OpenAI GPT model)"),upr=l(),h7=a("li"),Ebe=a("strong"),bpr=o("rembert"),vpr=o(" \u2014 "),cQ=a("a"),Fpr=o("TFRemBertForCausalLM"),Tpr=o(" (RemBERT model)"),Mpr=l(),p7=a("li"),Cbe=a("strong"),Epr=o("roberta"),Cpr=o(" \u2014 "),fQ=a("a"),wpr=o("TFRobertaForCausalLM"),Apr=o(" (RoBERTa model)"),ypr=l(),_7=a("li"),wbe=a("strong"),Lpr=o("roformer"),xpr=o(" \u2014 "),mQ=a("a"),$pr=o("TFRoFormerForCausalLM"),kpr=o(" (RoFormer model)"),Spr=l(),u7=a("li"),Abe=a("strong"),Rpr=o("transfo-xl"),Ppr=o(" \u2014 "),gQ=a("a"),Bpr=o("TFTransfoXLLMHeadModel"),Ipr=o(" (Transformer-XL model)"),qpr=l(),b7=a("li"),ybe=a("strong"),Npr=o("xlm"),jpr=o(" \u2014 "),hQ=a("a"),Dpr=o("TFXLMWithLMHeadModel"),Gpr=o(" (XLM model)"),Opr=l(),v7=a("li"),Lbe=a("strong"),Vpr=o("xlnet"),Xpr=o(" \u2014 "),pQ=a("a"),zpr=o("TFXLNetLMHeadModel"),Wpr=o(" (XLNet model)"),Qpr=l(),F(F7.$$.fragment),fNe=l(),Jd=a("h2"),T7=a("a"),xbe=a("span"),F(c8.$$.fragment),Hpr=l(),$be=a("span"),Upr=o("TFAutoModelForImageClassification"),mNe=l(),er=a("div"),F(f8.$$.fragment),Jpr=l(),Yd=a("p"),Ypr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=a("a"),Kpr=o("from_pretrained()"),Zpr=o(" class method or the "),uQ=a("a"),e_r=o("from_config()"),o_r=o(` class
method.`),r_r=l(),m8=a("p"),t_r=o("This class cannot be instantiated directly using "),kbe=a("code"),a_r=o("__init__()"),n_r=o(" (throws an error)."),s_r=l(),$t=a("div"),F(g8.$$.fragment),l_r=l(),Sbe=a("p"),i_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d_r=l(),Kd=a("p"),c_r=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),f_r=o("not"),m_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),g_r=o("from_pretrained()"),h_r=o(" to load the model weights."),p_r=l(),F(M7.$$.fragment),__r=l(),Lr=a("div"),F(h8.$$.fragment),u_r=l(),Pbe=a("p"),b_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),v_r=l(),on=a("p"),F_r=o("The model class to instantiate is selected based on the "),Bbe=a("code"),T_r=o("model_type"),M_r=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),E_r=o("pretrained_model_name_or_path"),C_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),w_r=o("pretrained_model_name_or_path"),A_r=o(":"),y_r=l(),rn=a("ul"),E7=a("li"),Nbe=a("strong"),L_r=o("convnext"),x_r=o(" \u2014 "),vQ=a("a"),$_r=o("TFConvNextForImageClassification"),k_r=o(" (ConvNext model)"),S_r=l(),C7=a("li"),jbe=a("strong"),R_r=o("data2vec-vision"),P_r=o(" \u2014 "),FQ=a("a"),B_r=o("TFData2VecVisionForImageClassification"),I_r=o(" (Data2VecVision model)"),q_r=l(),w7=a("li"),Dbe=a("strong"),N_r=o("swin"),j_r=o(" \u2014 "),TQ=a("a"),D_r=o("TFSwinForImageClassification"),G_r=o(" (Swin model)"),O_r=l(),A7=a("li"),Gbe=a("strong"),V_r=o("vit"),X_r=o(" \u2014 "),MQ=a("a"),z_r=o("TFViTForImageClassification"),W_r=o(" (ViT model)"),Q_r=l(),F(y7.$$.fragment),gNe=l(),Zd=a("h2"),L7=a("a"),Obe=a("span"),F(p8.$$.fragment),H_r=l(),Vbe=a("span"),U_r=o("TFAutoModelForMaskedLM"),hNe=l(),or=a("div"),F(_8.$$.fragment),J_r=l(),ec=a("p"),Y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=a("a"),K_r=o("from_pretrained()"),Z_r=o(" class method or the "),CQ=a("a"),eur=o("from_config()"),our=o(` class
method.`),rur=l(),u8=a("p"),tur=o("This class cannot be instantiated directly using "),Xbe=a("code"),aur=o("__init__()"),nur=o(" (throws an error)."),sur=l(),kt=a("div"),F(b8.$$.fragment),lur=l(),zbe=a("p"),iur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dur=l(),oc=a("p"),cur=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),fur=o("not"),mur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),gur=o("from_pretrained()"),hur=o(" to load the model weights."),pur=l(),F(x7.$$.fragment),_ur=l(),xr=a("div"),F(v8.$$.fragment),uur=l(),Qbe=a("p"),bur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vur=l(),tn=a("p"),Fur=o("The model class to instantiate is selected based on the "),Hbe=a("code"),Tur=o("model_type"),Mur=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),Eur=o("pretrained_model_name_or_path"),Cur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),wur=o("pretrained_model_name_or_path"),Aur=o(":"),yur=l(),ie=a("ul"),$7=a("li"),Ybe=a("strong"),Lur=o("albert"),xur=o(" \u2014 "),AQ=a("a"),$ur=o("TFAlbertForMaskedLM"),kur=o(" (ALBERT model)"),Sur=l(),k7=a("li"),Kbe=a("strong"),Rur=o("bert"),Pur=o(" \u2014 "),yQ=a("a"),Bur=o("TFBertForMaskedLM"),Iur=o(" (BERT model)"),qur=l(),S7=a("li"),Zbe=a("strong"),Nur=o("camembert"),jur=o(" \u2014 "),LQ=a("a"),Dur=o("TFCamembertForMaskedLM"),Gur=o(" (CamemBERT model)"),Our=l(),R7=a("li"),e4e=a("strong"),Vur=o("convbert"),Xur=o(" \u2014 "),xQ=a("a"),zur=o("TFConvBertForMaskedLM"),Wur=o(" (ConvBERT model)"),Qur=l(),P7=a("li"),o4e=a("strong"),Hur=o("deberta"),Uur=o(" \u2014 "),$Q=a("a"),Jur=o("TFDebertaForMaskedLM"),Yur=o(" (DeBERTa model)"),Kur=l(),B7=a("li"),r4e=a("strong"),Zur=o("deberta-v2"),e2r=o(" \u2014 "),kQ=a("a"),o2r=o("TFDebertaV2ForMaskedLM"),r2r=o(" (DeBERTa-v2 model)"),t2r=l(),I7=a("li"),t4e=a("strong"),a2r=o("distilbert"),n2r=o(" \u2014 "),SQ=a("a"),s2r=o("TFDistilBertForMaskedLM"),l2r=o(" (DistilBERT model)"),i2r=l(),q7=a("li"),a4e=a("strong"),d2r=o("electra"),c2r=o(" \u2014 "),RQ=a("a"),f2r=o("TFElectraForMaskedLM"),m2r=o(" (ELECTRA model)"),g2r=l(),N7=a("li"),n4e=a("strong"),h2r=o("flaubert"),p2r=o(" \u2014 "),PQ=a("a"),_2r=o("TFFlaubertWithLMHeadModel"),u2r=o(" (FlauBERT model)"),b2r=l(),j7=a("li"),s4e=a("strong"),v2r=o("funnel"),F2r=o(" \u2014 "),BQ=a("a"),T2r=o("TFFunnelForMaskedLM"),M2r=o(" (Funnel Transformer model)"),E2r=l(),D7=a("li"),l4e=a("strong"),C2r=o("layoutlm"),w2r=o(" \u2014 "),IQ=a("a"),A2r=o("TFLayoutLMForMaskedLM"),y2r=o(" (LayoutLM model)"),L2r=l(),G7=a("li"),i4e=a("strong"),x2r=o("longformer"),$2r=o(" \u2014 "),qQ=a("a"),k2r=o("TFLongformerForMaskedLM"),S2r=o(" (Longformer model)"),R2r=l(),O7=a("li"),d4e=a("strong"),P2r=o("mobilebert"),B2r=o(" \u2014 "),NQ=a("a"),I2r=o("TFMobileBertForMaskedLM"),q2r=o(" (MobileBERT model)"),N2r=l(),V7=a("li"),c4e=a("strong"),j2r=o("mpnet"),D2r=o(" \u2014 "),jQ=a("a"),G2r=o("TFMPNetForMaskedLM"),O2r=o(" (MPNet model)"),V2r=l(),X7=a("li"),f4e=a("strong"),X2r=o("rembert"),z2r=o(" \u2014 "),DQ=a("a"),W2r=o("TFRemBertForMaskedLM"),Q2r=o(" (RemBERT model)"),H2r=l(),z7=a("li"),m4e=a("strong"),U2r=o("roberta"),J2r=o(" \u2014 "),GQ=a("a"),Y2r=o("TFRobertaForMaskedLM"),K2r=o(" (RoBERTa model)"),Z2r=l(),W7=a("li"),g4e=a("strong"),e1r=o("roformer"),o1r=o(" \u2014 "),OQ=a("a"),r1r=o("TFRoFormerForMaskedLM"),t1r=o(" (RoFormer model)"),a1r=l(),Q7=a("li"),h4e=a("strong"),n1r=o("tapas"),s1r=o(" \u2014 "),VQ=a("a"),l1r=o("TFTapasForMaskedLM"),i1r=o(" (TAPAS model)"),d1r=l(),H7=a("li"),p4e=a("strong"),c1r=o("xlm"),f1r=o(" \u2014 "),XQ=a("a"),m1r=o("TFXLMWithLMHeadModel"),g1r=o(" (XLM model)"),h1r=l(),U7=a("li"),_4e=a("strong"),p1r=o("xlm-roberta"),_1r=o(" \u2014 "),zQ=a("a"),u1r=o("TFXLMRobertaForMaskedLM"),b1r=o(" (XLM-RoBERTa model)"),v1r=l(),F(J7.$$.fragment),pNe=l(),rc=a("h2"),Y7=a("a"),u4e=a("span"),F(F8.$$.fragment),F1r=l(),b4e=a("span"),T1r=o("TFAutoModelForSeq2SeqLM"),_Ne=l(),rr=a("div"),F(T8.$$.fragment),M1r=l(),tc=a("p"),E1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WQ=a("a"),C1r=o("from_pretrained()"),w1r=o(" class method or the "),QQ=a("a"),A1r=o("from_config()"),y1r=o(` class
method.`),L1r=l(),M8=a("p"),x1r=o("This class cannot be instantiated directly using "),v4e=a("code"),$1r=o("__init__()"),k1r=o(" (throws an error)."),S1r=l(),St=a("div"),F(E8.$$.fragment),R1r=l(),F4e=a("p"),P1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B1r=l(),ac=a("p"),I1r=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),q1r=o("not"),N1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),j1r=o("from_pretrained()"),D1r=o(" to load the model weights."),G1r=l(),F(K7.$$.fragment),O1r=l(),$r=a("div"),F(C8.$$.fragment),V1r=l(),M4e=a("p"),X1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z1r=l(),an=a("p"),W1r=o("The model class to instantiate is selected based on the "),E4e=a("code"),Q1r=o("model_type"),H1r=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),U1r=o("pretrained_model_name_or_path"),J1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),Y1r=o("pretrained_model_name_or_path"),K1r=o(":"),Z1r=l(),ye=a("ul"),Z7=a("li"),A4e=a("strong"),ebr=o("bart"),obr=o(" \u2014 "),UQ=a("a"),rbr=o("TFBartForConditionalGeneration"),tbr=o(" (BART model)"),abr=l(),eM=a("li"),y4e=a("strong"),nbr=o("blenderbot"),sbr=o(" \u2014 "),JQ=a("a"),lbr=o("TFBlenderbotForConditionalGeneration"),ibr=o(" (Blenderbot model)"),dbr=l(),oM=a("li"),L4e=a("strong"),cbr=o("blenderbot-small"),fbr=o(" \u2014 "),YQ=a("a"),mbr=o("TFBlenderbotSmallForConditionalGeneration"),gbr=o(" (BlenderbotSmall model)"),hbr=l(),rM=a("li"),x4e=a("strong"),pbr=o("encoder-decoder"),_br=o(" \u2014 "),KQ=a("a"),ubr=o("TFEncoderDecoderModel"),bbr=o(" (Encoder decoder model)"),vbr=l(),tM=a("li"),$4e=a("strong"),Fbr=o("led"),Tbr=o(" \u2014 "),ZQ=a("a"),Mbr=o("TFLEDForConditionalGeneration"),Ebr=o(" (LED model)"),Cbr=l(),aM=a("li"),k4e=a("strong"),wbr=o("marian"),Abr=o(" \u2014 "),eH=a("a"),ybr=o("TFMarianMTModel"),Lbr=o(" (Marian model)"),xbr=l(),nM=a("li"),S4e=a("strong"),$br=o("mbart"),kbr=o(" \u2014 "),oH=a("a"),Sbr=o("TFMBartForConditionalGeneration"),Rbr=o(" (mBART model)"),Pbr=l(),sM=a("li"),R4e=a("strong"),Bbr=o("mt5"),Ibr=o(" \u2014 "),rH=a("a"),qbr=o("TFMT5ForConditionalGeneration"),Nbr=o(" (mT5 model)"),jbr=l(),lM=a("li"),P4e=a("strong"),Dbr=o("pegasus"),Gbr=o(" \u2014 "),tH=a("a"),Obr=o("TFPegasusForConditionalGeneration"),Vbr=o(" (Pegasus model)"),Xbr=l(),iM=a("li"),B4e=a("strong"),zbr=o("t5"),Wbr=o(" \u2014 "),aH=a("a"),Qbr=o("TFT5ForConditionalGeneration"),Hbr=o(" (T5 model)"),Ubr=l(),F(dM.$$.fragment),uNe=l(),nc=a("h2"),cM=a("a"),I4e=a("span"),F(w8.$$.fragment),Jbr=l(),q4e=a("span"),Ybr=o("TFAutoModelForSequenceClassification"),bNe=l(),tr=a("div"),F(A8.$$.fragment),Kbr=l(),sc=a("p"),Zbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=a("a"),e4r=o("from_pretrained()"),o4r=o(" class method or the "),sH=a("a"),r4r=o("from_config()"),t4r=o(` class
method.`),a4r=l(),y8=a("p"),n4r=o("This class cannot be instantiated directly using "),N4e=a("code"),s4r=o("__init__()"),l4r=o(" (throws an error)."),i4r=l(),Rt=a("div"),F(L8.$$.fragment),d4r=l(),j4e=a("p"),c4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f4r=l(),lc=a("p"),m4r=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),g4r=o("not"),h4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),p4r=o("from_pretrained()"),_4r=o(" to load the model weights."),u4r=l(),F(fM.$$.fragment),b4r=l(),kr=a("div"),F(x8.$$.fragment),v4r=l(),G4e=a("p"),F4r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),T4r=l(),nn=a("p"),M4r=o("The model class to instantiate is selected based on the "),O4e=a("code"),E4r=o("model_type"),C4r=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),w4r=o("pretrained_model_name_or_path"),A4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(":"),x4r=l(),ee=a("ul"),mM=a("li"),z4e=a("strong"),$4r=o("albert"),k4r=o(" \u2014 "),iH=a("a"),S4r=o("TFAlbertForSequenceClassification"),R4r=o(" (ALBERT model)"),P4r=l(),gM=a("li"),W4e=a("strong"),B4r=o("bert"),I4r=o(" \u2014 "),dH=a("a"),q4r=o("TFBertForSequenceClassification"),N4r=o(" (BERT model)"),j4r=l(),hM=a("li"),Q4e=a("strong"),D4r=o("camembert"),G4r=o(" \u2014 "),cH=a("a"),O4r=o("TFCamembertForSequenceClassification"),V4r=o(" (CamemBERT model)"),X4r=l(),pM=a("li"),H4e=a("strong"),z4r=o("convbert"),W4r=o(" \u2014 "),fH=a("a"),Q4r=o("TFConvBertForSequenceClassification"),H4r=o(" (ConvBERT model)"),U4r=l(),_M=a("li"),U4e=a("strong"),J4r=o("ctrl"),Y4r=o(" \u2014 "),mH=a("a"),K4r=o("TFCTRLForSequenceClassification"),Z4r=o(" (CTRL model)"),e5r=l(),uM=a("li"),J4e=a("strong"),o5r=o("deberta"),r5r=o(" \u2014 "),gH=a("a"),t5r=o("TFDebertaForSequenceClassification"),a5r=o(" (DeBERTa model)"),n5r=l(),bM=a("li"),Y4e=a("strong"),s5r=o("deberta-v2"),l5r=o(" \u2014 "),hH=a("a"),i5r=o("TFDebertaV2ForSequenceClassification"),d5r=o(" (DeBERTa-v2 model)"),c5r=l(),vM=a("li"),K4e=a("strong"),f5r=o("distilbert"),m5r=o(" \u2014 "),pH=a("a"),g5r=o("TFDistilBertForSequenceClassification"),h5r=o(" (DistilBERT model)"),p5r=l(),FM=a("li"),Z4e=a("strong"),_5r=o("electra"),u5r=o(" \u2014 "),_H=a("a"),b5r=o("TFElectraForSequenceClassification"),v5r=o(" (ELECTRA model)"),F5r=l(),TM=a("li"),e5e=a("strong"),T5r=o("flaubert"),M5r=o(" \u2014 "),uH=a("a"),E5r=o("TFFlaubertForSequenceClassification"),C5r=o(" (FlauBERT model)"),w5r=l(),MM=a("li"),o5e=a("strong"),A5r=o("funnel"),y5r=o(" \u2014 "),bH=a("a"),L5r=o("TFFunnelForSequenceClassification"),x5r=o(" (Funnel Transformer model)"),$5r=l(),EM=a("li"),r5e=a("strong"),k5r=o("gpt2"),S5r=o(" \u2014 "),vH=a("a"),R5r=o("TFGPT2ForSequenceClassification"),P5r=o(" (OpenAI GPT-2 model)"),B5r=l(),CM=a("li"),t5e=a("strong"),I5r=o("gptj"),q5r=o(" \u2014 "),FH=a("a"),N5r=o("TFGPTJForSequenceClassification"),j5r=o(" (GPT-J model)"),D5r=l(),wM=a("li"),a5e=a("strong"),G5r=o("layoutlm"),O5r=o(" \u2014 "),TH=a("a"),V5r=o("TFLayoutLMForSequenceClassification"),X5r=o(" (LayoutLM model)"),z5r=l(),AM=a("li"),n5e=a("strong"),W5r=o("longformer"),Q5r=o(" \u2014 "),MH=a("a"),H5r=o("TFLongformerForSequenceClassification"),U5r=o(" (Longformer model)"),J5r=l(),yM=a("li"),s5e=a("strong"),Y5r=o("mobilebert"),K5r=o(" \u2014 "),EH=a("a"),Z5r=o("TFMobileBertForSequenceClassification"),evr=o(" (MobileBERT model)"),ovr=l(),LM=a("li"),l5e=a("strong"),rvr=o("mpnet"),tvr=o(" \u2014 "),CH=a("a"),avr=o("TFMPNetForSequenceClassification"),nvr=o(" (MPNet model)"),svr=l(),xM=a("li"),i5e=a("strong"),lvr=o("openai-gpt"),ivr=o(" \u2014 "),wH=a("a"),dvr=o("TFOpenAIGPTForSequenceClassification"),cvr=o(" (OpenAI GPT model)"),fvr=l(),$M=a("li"),d5e=a("strong"),mvr=o("rembert"),gvr=o(" \u2014 "),AH=a("a"),hvr=o("TFRemBertForSequenceClassification"),pvr=o(" (RemBERT model)"),_vr=l(),kM=a("li"),c5e=a("strong"),uvr=o("roberta"),bvr=o(" \u2014 "),yH=a("a"),vvr=o("TFRobertaForSequenceClassification"),Fvr=o(" (RoBERTa model)"),Tvr=l(),SM=a("li"),f5e=a("strong"),Mvr=o("roformer"),Evr=o(" \u2014 "),LH=a("a"),Cvr=o("TFRoFormerForSequenceClassification"),wvr=o(" (RoFormer model)"),Avr=l(),RM=a("li"),m5e=a("strong"),yvr=o("tapas"),Lvr=o(" \u2014 "),xH=a("a"),xvr=o("TFTapasForSequenceClassification"),$vr=o(" (TAPAS model)"),kvr=l(),PM=a("li"),g5e=a("strong"),Svr=o("transfo-xl"),Rvr=o(" \u2014 "),$H=a("a"),Pvr=o("TFTransfoXLForSequenceClassification"),Bvr=o(" (Transformer-XL model)"),Ivr=l(),BM=a("li"),h5e=a("strong"),qvr=o("xlm"),Nvr=o(" \u2014 "),kH=a("a"),jvr=o("TFXLMForSequenceClassification"),Dvr=o(" (XLM model)"),Gvr=l(),IM=a("li"),p5e=a("strong"),Ovr=o("xlm-roberta"),Vvr=o(" \u2014 "),SH=a("a"),Xvr=o("TFXLMRobertaForSequenceClassification"),zvr=o(" (XLM-RoBERTa model)"),Wvr=l(),qM=a("li"),_5e=a("strong"),Qvr=o("xlnet"),Hvr=o(" \u2014 "),RH=a("a"),Uvr=o("TFXLNetForSequenceClassification"),Jvr=o(" (XLNet model)"),Yvr=l(),F(NM.$$.fragment),vNe=l(),ic=a("h2"),jM=a("a"),u5e=a("span"),F($8.$$.fragment),Kvr=l(),b5e=a("span"),Zvr=o("TFAutoModelForMultipleChoice"),FNe=l(),ar=a("div"),F(k8.$$.fragment),eFr=l(),dc=a("p"),oFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PH=a("a"),rFr=o("from_pretrained()"),tFr=o(" class method or the "),BH=a("a"),aFr=o("from_config()"),nFr=o(` class
method.`),sFr=l(),S8=a("p"),lFr=o("This class cannot be instantiated directly using "),v5e=a("code"),iFr=o("__init__()"),dFr=o(" (throws an error)."),cFr=l(),Pt=a("div"),F(R8.$$.fragment),fFr=l(),F5e=a("p"),mFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gFr=l(),cc=a("p"),hFr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),pFr=o("not"),_Fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),uFr=o("from_pretrained()"),bFr=o(" to load the model weights."),vFr=l(),F(DM.$$.fragment),FFr=l(),Sr=a("div"),F(P8.$$.fragment),TFr=l(),M5e=a("p"),MFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),EFr=l(),sn=a("p"),CFr=o("The model class to instantiate is selected based on the "),E5e=a("code"),wFr=o("model_type"),AFr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),xFr=o("pretrained_model_name_or_path"),$Fr=o(":"),kFr=l(),he=a("ul"),GM=a("li"),A5e=a("strong"),SFr=o("albert"),RFr=o(" \u2014 "),qH=a("a"),PFr=o("TFAlbertForMultipleChoice"),BFr=o(" (ALBERT model)"),IFr=l(),OM=a("li"),y5e=a("strong"),qFr=o("bert"),NFr=o(" \u2014 "),NH=a("a"),jFr=o("TFBertForMultipleChoice"),DFr=o(" (BERT model)"),GFr=l(),VM=a("li"),L5e=a("strong"),OFr=o("camembert"),VFr=o(" \u2014 "),jH=a("a"),XFr=o("TFCamembertForMultipleChoice"),zFr=o(" (CamemBERT model)"),WFr=l(),XM=a("li"),x5e=a("strong"),QFr=o("convbert"),HFr=o(" \u2014 "),DH=a("a"),UFr=o("TFConvBertForMultipleChoice"),JFr=o(" (ConvBERT model)"),YFr=l(),zM=a("li"),$5e=a("strong"),KFr=o("distilbert"),ZFr=o(" \u2014 "),GH=a("a"),eTr=o("TFDistilBertForMultipleChoice"),oTr=o(" (DistilBERT model)"),rTr=l(),WM=a("li"),k5e=a("strong"),tTr=o("electra"),aTr=o(" \u2014 "),OH=a("a"),nTr=o("TFElectraForMultipleChoice"),sTr=o(" (ELECTRA model)"),lTr=l(),QM=a("li"),S5e=a("strong"),iTr=o("flaubert"),dTr=o(" \u2014 "),VH=a("a"),cTr=o("TFFlaubertForMultipleChoice"),fTr=o(" (FlauBERT model)"),mTr=l(),HM=a("li"),R5e=a("strong"),gTr=o("funnel"),hTr=o(" \u2014 "),XH=a("a"),pTr=o("TFFunnelForMultipleChoice"),_Tr=o(" (Funnel Transformer model)"),uTr=l(),UM=a("li"),P5e=a("strong"),bTr=o("longformer"),vTr=o(" \u2014 "),zH=a("a"),FTr=o("TFLongformerForMultipleChoice"),TTr=o(" (Longformer model)"),MTr=l(),JM=a("li"),B5e=a("strong"),ETr=o("mobilebert"),CTr=o(" \u2014 "),WH=a("a"),wTr=o("TFMobileBertForMultipleChoice"),ATr=o(" (MobileBERT model)"),yTr=l(),YM=a("li"),I5e=a("strong"),LTr=o("mpnet"),xTr=o(" \u2014 "),QH=a("a"),$Tr=o("TFMPNetForMultipleChoice"),kTr=o(" (MPNet model)"),STr=l(),KM=a("li"),q5e=a("strong"),RTr=o("rembert"),PTr=o(" \u2014 "),HH=a("a"),BTr=o("TFRemBertForMultipleChoice"),ITr=o(" (RemBERT model)"),qTr=l(),ZM=a("li"),N5e=a("strong"),NTr=o("roberta"),jTr=o(" \u2014 "),UH=a("a"),DTr=o("TFRobertaForMultipleChoice"),GTr=o(" (RoBERTa model)"),OTr=l(),eE=a("li"),j5e=a("strong"),VTr=o("roformer"),XTr=o(" \u2014 "),JH=a("a"),zTr=o("TFRoFormerForMultipleChoice"),WTr=o(" (RoFormer model)"),QTr=l(),oE=a("li"),D5e=a("strong"),HTr=o("xlm"),UTr=o(" \u2014 "),YH=a("a"),JTr=o("TFXLMForMultipleChoice"),YTr=o(" (XLM model)"),KTr=l(),rE=a("li"),G5e=a("strong"),ZTr=o("xlm-roberta"),e7r=o(" \u2014 "),KH=a("a"),o7r=o("TFXLMRobertaForMultipleChoice"),r7r=o(" (XLM-RoBERTa model)"),t7r=l(),tE=a("li"),O5e=a("strong"),a7r=o("xlnet"),n7r=o(" \u2014 "),ZH=a("a"),s7r=o("TFXLNetForMultipleChoice"),l7r=o(" (XLNet model)"),i7r=l(),F(aE.$$.fragment),TNe=l(),fc=a("h2"),nE=a("a"),V5e=a("span"),F(B8.$$.fragment),d7r=l(),X5e=a("span"),c7r=o("TFAutoModelForNextSentencePrediction"),MNe=l(),nr=a("div"),F(I8.$$.fragment),f7r=l(),mc=a("p"),m7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=a("a"),g7r=o("from_pretrained()"),h7r=o(" class method or the "),oU=a("a"),p7r=o("from_config()"),_7r=o(` class
method.`),u7r=l(),q8=a("p"),b7r=o("This class cannot be instantiated directly using "),z5e=a("code"),v7r=o("__init__()"),F7r=o(" (throws an error)."),T7r=l(),Bt=a("div"),F(N8.$$.fragment),M7r=l(),W5e=a("p"),E7r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),C7r=l(),gc=a("p"),w7r=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),A7r=o("not"),y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),L7r=o("from_pretrained()"),x7r=o(" to load the model weights."),$7r=l(),F(sE.$$.fragment),k7r=l(),Rr=a("div"),F(j8.$$.fragment),S7r=l(),H5e=a("p"),R7r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),P7r=l(),ln=a("p"),B7r=o("The model class to instantiate is selected based on the "),U5e=a("code"),I7r=o("model_type"),q7r=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),N7r=o("pretrained_model_name_or_path"),j7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),D7r=o("pretrained_model_name_or_path"),G7r=o(":"),O7r=l(),D8=a("ul"),lE=a("li"),K5e=a("strong"),V7r=o("bert"),X7r=o(" \u2014 "),tU=a("a"),z7r=o("TFBertForNextSentencePrediction"),W7r=o(" (BERT model)"),Q7r=l(),iE=a("li"),Z5e=a("strong"),H7r=o("mobilebert"),U7r=o(" \u2014 "),aU=a("a"),J7r=o("TFMobileBertForNextSentencePrediction"),Y7r=o(" (MobileBERT model)"),K7r=l(),F(dE.$$.fragment),ENe=l(),hc=a("h2"),cE=a("a"),eve=a("span"),F(G8.$$.fragment),Z7r=l(),ove=a("span"),eMr=o("TFAutoModelForTableQuestionAnswering"),CNe=l(),sr=a("div"),F(O8.$$.fragment),oMr=l(),pc=a("p"),rMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nU=a("a"),tMr=o("from_pretrained()"),aMr=o(" class method or the "),sU=a("a"),nMr=o("from_config()"),sMr=o(` class
method.`),lMr=l(),V8=a("p"),iMr=o("This class cannot be instantiated directly using "),rve=a("code"),dMr=o("__init__()"),cMr=o(" (throws an error)."),fMr=l(),It=a("div"),F(X8.$$.fragment),mMr=l(),tve=a("p"),gMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hMr=l(),_c=a("p"),pMr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),_Mr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),bMr=o("from_pretrained()"),vMr=o(" to load the model weights."),FMr=l(),F(fE.$$.fragment),TMr=l(),Pr=a("div"),F(z8.$$.fragment),MMr=l(),nve=a("p"),EMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CMr=l(),dn=a("p"),wMr=o("The model class to instantiate is selected based on the "),sve=a("code"),AMr=o("model_type"),yMr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),LMr=o("pretrained_model_name_or_path"),xMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),$Mr=o("pretrained_model_name_or_path"),kMr=o(":"),SMr=l(),dve=a("ul"),mE=a("li"),cve=a("strong"),RMr=o("tapas"),PMr=o(" \u2014 "),iU=a("a"),BMr=o("TFTapasForQuestionAnswering"),IMr=o(" (TAPAS model)"),qMr=l(),F(gE.$$.fragment),wNe=l(),uc=a("h2"),hE=a("a"),fve=a("span"),F(W8.$$.fragment),NMr=l(),mve=a("span"),jMr=o("TFAutoModelForTokenClassification"),ANe=l(),lr=a("div"),F(Q8.$$.fragment),DMr=l(),bc=a("p"),GMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dU=a("a"),OMr=o("from_pretrained()"),VMr=o(" class method or the "),cU=a("a"),XMr=o("from_config()"),zMr=o(` class
method.`),WMr=l(),H8=a("p"),QMr=o("This class cannot be instantiated directly using "),gve=a("code"),HMr=o("__init__()"),UMr=o(" (throws an error)."),JMr=l(),qt=a("div"),F(U8.$$.fragment),YMr=l(),hve=a("p"),KMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZMr=l(),vc=a("p"),eEr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),oEr=o("not"),rEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),tEr=o("from_pretrained()"),aEr=o(" to load the model weights."),nEr=l(),F(pE.$$.fragment),sEr=l(),Br=a("div"),F(J8.$$.fragment),lEr=l(),_ve=a("p"),iEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dEr=l(),cn=a("p"),cEr=o("The model class to instantiate is selected based on the "),uve=a("code"),fEr=o("model_type"),mEr=o(` property of the config object (either
passed as an argument or loaded from `),bve=a("code"),gEr=o("pretrained_model_name_or_path"),hEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),pEr=o("pretrained_model_name_or_path"),_Er=o(":"),uEr=l(),de=a("ul"),_E=a("li"),Fve=a("strong"),bEr=o("albert"),vEr=o(" \u2014 "),mU=a("a"),FEr=o("TFAlbertForTokenClassification"),TEr=o(" (ALBERT model)"),MEr=l(),uE=a("li"),Tve=a("strong"),EEr=o("bert"),CEr=o(" \u2014 "),gU=a("a"),wEr=o("TFBertForTokenClassification"),AEr=o(" (BERT model)"),yEr=l(),bE=a("li"),Mve=a("strong"),LEr=o("camembert"),xEr=o(" \u2014 "),hU=a("a"),$Er=o("TFCamembertForTokenClassification"),kEr=o(" (CamemBERT model)"),SEr=l(),vE=a("li"),Eve=a("strong"),REr=o("convbert"),PEr=o(" \u2014 "),pU=a("a"),BEr=o("TFConvBertForTokenClassification"),IEr=o(" (ConvBERT model)"),qEr=l(),FE=a("li"),Cve=a("strong"),NEr=o("deberta"),jEr=o(" \u2014 "),_U=a("a"),DEr=o("TFDebertaForTokenClassification"),GEr=o(" (DeBERTa model)"),OEr=l(),TE=a("li"),wve=a("strong"),VEr=o("deberta-v2"),XEr=o(" \u2014 "),uU=a("a"),zEr=o("TFDebertaV2ForTokenClassification"),WEr=o(" (DeBERTa-v2 model)"),QEr=l(),ME=a("li"),Ave=a("strong"),HEr=o("distilbert"),UEr=o(" \u2014 "),bU=a("a"),JEr=o("TFDistilBertForTokenClassification"),YEr=o(" (DistilBERT model)"),KEr=l(),EE=a("li"),yve=a("strong"),ZEr=o("electra"),eCr=o(" \u2014 "),vU=a("a"),oCr=o("TFElectraForTokenClassification"),rCr=o(" (ELECTRA model)"),tCr=l(),CE=a("li"),Lve=a("strong"),aCr=o("flaubert"),nCr=o(" \u2014 "),FU=a("a"),sCr=o("TFFlaubertForTokenClassification"),lCr=o(" (FlauBERT model)"),iCr=l(),wE=a("li"),xve=a("strong"),dCr=o("funnel"),cCr=o(" \u2014 "),TU=a("a"),fCr=o("TFFunnelForTokenClassification"),mCr=o(" (Funnel Transformer model)"),gCr=l(),AE=a("li"),$ve=a("strong"),hCr=o("layoutlm"),pCr=o(" \u2014 "),MU=a("a"),_Cr=o("TFLayoutLMForTokenClassification"),uCr=o(" (LayoutLM model)"),bCr=l(),yE=a("li"),kve=a("strong"),vCr=o("longformer"),FCr=o(" \u2014 "),EU=a("a"),TCr=o("TFLongformerForTokenClassification"),MCr=o(" (Longformer model)"),ECr=l(),LE=a("li"),Sve=a("strong"),CCr=o("mobilebert"),wCr=o(" \u2014 "),CU=a("a"),ACr=o("TFMobileBertForTokenClassification"),yCr=o(" (MobileBERT model)"),LCr=l(),xE=a("li"),Rve=a("strong"),xCr=o("mpnet"),$Cr=o(" \u2014 "),wU=a("a"),kCr=o("TFMPNetForTokenClassification"),SCr=o(" (MPNet model)"),RCr=l(),$E=a("li"),Pve=a("strong"),PCr=o("rembert"),BCr=o(" \u2014 "),AU=a("a"),ICr=o("TFRemBertForTokenClassification"),qCr=o(" (RemBERT model)"),NCr=l(),kE=a("li"),Bve=a("strong"),jCr=o("roberta"),DCr=o(" \u2014 "),yU=a("a"),GCr=o("TFRobertaForTokenClassification"),OCr=o(" (RoBERTa model)"),VCr=l(),SE=a("li"),Ive=a("strong"),XCr=o("roformer"),zCr=o(" \u2014 "),LU=a("a"),WCr=o("TFRoFormerForTokenClassification"),QCr=o(" (RoFormer model)"),HCr=l(),RE=a("li"),qve=a("strong"),UCr=o("xlm"),JCr=o(" \u2014 "),xU=a("a"),YCr=o("TFXLMForTokenClassification"),KCr=o(" (XLM model)"),ZCr=l(),PE=a("li"),Nve=a("strong"),e3r=o("xlm-roberta"),o3r=o(" \u2014 "),$U=a("a"),r3r=o("TFXLMRobertaForTokenClassification"),t3r=o(" (XLM-RoBERTa model)"),a3r=l(),BE=a("li"),jve=a("strong"),n3r=o("xlnet"),s3r=o(" \u2014 "),kU=a("a"),l3r=o("TFXLNetForTokenClassification"),i3r=o(" (XLNet model)"),d3r=l(),F(IE.$$.fragment),yNe=l(),Fc=a("h2"),qE=a("a"),Dve=a("span"),F(Y8.$$.fragment),c3r=l(),Gve=a("span"),f3r=o("TFAutoModelForQuestionAnswering"),LNe=l(),ir=a("div"),F(K8.$$.fragment),m3r=l(),Tc=a("p"),g3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SU=a("a"),h3r=o("from_pretrained()"),p3r=o(" class method or the "),RU=a("a"),_3r=o("from_config()"),u3r=o(` class
method.`),b3r=l(),Z8=a("p"),v3r=o("This class cannot be instantiated directly using "),Ove=a("code"),F3r=o("__init__()"),T3r=o(" (throws an error)."),M3r=l(),Nt=a("div"),F(e9.$$.fragment),E3r=l(),Vve=a("p"),C3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w3r=l(),Mc=a("p"),A3r=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),y3r=o("not"),L3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),x3r=o("from_pretrained()"),$3r=o(" to load the model weights."),k3r=l(),F(NE.$$.fragment),S3r=l(),Ir=a("div"),F(o9.$$.fragment),R3r=l(),zve=a("p"),P3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B3r=l(),fn=a("p"),I3r=o("The model class to instantiate is selected based on the "),Wve=a("code"),q3r=o("model_type"),N3r=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),j3r=o("pretrained_model_name_or_path"),D3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),G3r=o("pretrained_model_name_or_path"),O3r=o(":"),V3r=l(),ce=a("ul"),jE=a("li"),Uve=a("strong"),X3r=o("albert"),z3r=o(" \u2014 "),BU=a("a"),W3r=o("TFAlbertForQuestionAnswering"),Q3r=o(" (ALBERT model)"),H3r=l(),DE=a("li"),Jve=a("strong"),U3r=o("bert"),J3r=o(" \u2014 "),IU=a("a"),Y3r=o("TFBertForQuestionAnswering"),K3r=o(" (BERT model)"),Z3r=l(),GE=a("li"),Yve=a("strong"),ewr=o("camembert"),owr=o(" \u2014 "),qU=a("a"),rwr=o("TFCamembertForQuestionAnswering"),twr=o(" (CamemBERT model)"),awr=l(),OE=a("li"),Kve=a("strong"),nwr=o("convbert"),swr=o(" \u2014 "),NU=a("a"),lwr=o("TFConvBertForQuestionAnswering"),iwr=o(" (ConvBERT model)"),dwr=l(),VE=a("li"),Zve=a("strong"),cwr=o("deberta"),fwr=o(" \u2014 "),jU=a("a"),mwr=o("TFDebertaForQuestionAnswering"),gwr=o(" (DeBERTa model)"),hwr=l(),XE=a("li"),eFe=a("strong"),pwr=o("deberta-v2"),_wr=o(" \u2014 "),DU=a("a"),uwr=o("TFDebertaV2ForQuestionAnswering"),bwr=o(" (DeBERTa-v2 model)"),vwr=l(),zE=a("li"),oFe=a("strong"),Fwr=o("distilbert"),Twr=o(" \u2014 "),GU=a("a"),Mwr=o("TFDistilBertForQuestionAnswering"),Ewr=o(" (DistilBERT model)"),Cwr=l(),WE=a("li"),rFe=a("strong"),wwr=o("electra"),Awr=o(" \u2014 "),OU=a("a"),ywr=o("TFElectraForQuestionAnswering"),Lwr=o(" (ELECTRA model)"),xwr=l(),QE=a("li"),tFe=a("strong"),$wr=o("flaubert"),kwr=o(" \u2014 "),VU=a("a"),Swr=o("TFFlaubertForQuestionAnsweringSimple"),Rwr=o(" (FlauBERT model)"),Pwr=l(),HE=a("li"),aFe=a("strong"),Bwr=o("funnel"),Iwr=o(" \u2014 "),XU=a("a"),qwr=o("TFFunnelForQuestionAnswering"),Nwr=o(" (Funnel Transformer model)"),jwr=l(),UE=a("li"),nFe=a("strong"),Dwr=o("gptj"),Gwr=o(" \u2014 "),zU=a("a"),Owr=o("TFGPTJForQuestionAnswering"),Vwr=o(" (GPT-J model)"),Xwr=l(),JE=a("li"),sFe=a("strong"),zwr=o("longformer"),Wwr=o(" \u2014 "),WU=a("a"),Qwr=o("TFLongformerForQuestionAnswering"),Hwr=o(" (Longformer model)"),Uwr=l(),YE=a("li"),lFe=a("strong"),Jwr=o("mobilebert"),Ywr=o(" \u2014 "),QU=a("a"),Kwr=o("TFMobileBertForQuestionAnswering"),Zwr=o(" (MobileBERT model)"),e0r=l(),KE=a("li"),iFe=a("strong"),o0r=o("mpnet"),r0r=o(" \u2014 "),HU=a("a"),t0r=o("TFMPNetForQuestionAnswering"),a0r=o(" (MPNet model)"),n0r=l(),ZE=a("li"),dFe=a("strong"),s0r=o("rembert"),l0r=o(" \u2014 "),UU=a("a"),i0r=o("TFRemBertForQuestionAnswering"),d0r=o(" (RemBERT model)"),c0r=l(),eC=a("li"),cFe=a("strong"),f0r=o("roberta"),m0r=o(" \u2014 "),JU=a("a"),g0r=o("TFRobertaForQuestionAnswering"),h0r=o(" (RoBERTa model)"),p0r=l(),oC=a("li"),fFe=a("strong"),_0r=o("roformer"),u0r=o(" \u2014 "),YU=a("a"),b0r=o("TFRoFormerForQuestionAnswering"),v0r=o(" (RoFormer model)"),F0r=l(),rC=a("li"),mFe=a("strong"),T0r=o("xlm"),M0r=o(" \u2014 "),KU=a("a"),E0r=o("TFXLMForQuestionAnsweringSimple"),C0r=o(" (XLM model)"),w0r=l(),tC=a("li"),gFe=a("strong"),A0r=o("xlm-roberta"),y0r=o(" \u2014 "),ZU=a("a"),L0r=o("TFXLMRobertaForQuestionAnswering"),x0r=o(" (XLM-RoBERTa model)"),$0r=l(),aC=a("li"),hFe=a("strong"),k0r=o("xlnet"),S0r=o(" \u2014 "),eJ=a("a"),R0r=o("TFXLNetForQuestionAnsweringSimple"),P0r=o(" (XLNet model)"),B0r=l(),F(nC.$$.fragment),xNe=l(),Ec=a("h2"),sC=a("a"),pFe=a("span"),F(r9.$$.fragment),I0r=l(),_Fe=a("span"),q0r=o("TFAutoModelForVision2Seq"),$Ne=l(),dr=a("div"),F(t9.$$.fragment),N0r=l(),Cc=a("p"),j0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oJ=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),rJ=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),a9=a("p"),z0r=o("This class cannot be instantiated directly using "),uFe=a("code"),W0r=o("__init__()"),Q0r=o(" (throws an error)."),H0r=l(),jt=a("div"),F(n9.$$.fragment),U0r=l(),bFe=a("p"),J0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y0r=l(),wc=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),Z0r=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(lC.$$.fragment),aAr=l(),qr=a("div"),F(s9.$$.fragment),nAr=l(),FFe=a("p"),sAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lAr=l(),mn=a("p"),iAr=o("The model class to instantiate is selected based on the "),TFe=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),CFe=a("ul"),iC=a("li"),wFe=a("strong"),_Ar=o("vision-encoder-decoder"),uAr=o(" \u2014 "),aJ=a("a"),bAr=o("TFVisionEncoderDecoderModel"),vAr=o(" (Vision Encoder decoder model)"),FAr=l(),F(dC.$$.fragment),kNe=l(),Ac=a("h2"),cC=a("a"),AFe=a("span"),F(l9.$$.fragment),TAr=l(),yFe=a("span"),MAr=o("TFAutoModelForSpeechSeq2Seq"),SNe=l(),cr=a("div"),F(i9.$$.fragment),EAr=l(),yc=a("p"),CAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nJ=a("a"),wAr=o("from_pretrained()"),AAr=o(" class method or the "),sJ=a("a"),yAr=o("from_config()"),LAr=o(` class
method.`),xAr=l(),d9=a("p"),$Ar=o("This class cannot be instantiated directly using "),LFe=a("code"),kAr=o("__init__()"),SAr=o(" (throws an error)."),RAr=l(),Dt=a("div"),F(c9.$$.fragment),PAr=l(),xFe=a("p"),BAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IAr=l(),Lc=a("p"),qAr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),NAr=o("not"),jAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),DAr=o("from_pretrained()"),GAr=o(" to load the model weights."),OAr=l(),F(fC.$$.fragment),VAr=l(),Nr=a("div"),F(f9.$$.fragment),XAr=l(),kFe=a("p"),zAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WAr=l(),gn=a("p"),QAr=o("The model class to instantiate is selected based on the "),SFe=a("code"),HAr=o("model_type"),UAr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),KAr=o("pretrained_model_name_or_path"),ZAr=o(":"),e6r=l(),BFe=a("ul"),mC=a("li"),IFe=a("strong"),o6r=o("speech_to_text"),r6r=o(" \u2014 "),iJ=a("a"),t6r=o("TFSpeech2TextForConditionalGeneration"),a6r=o(" (Speech2Text model)"),n6r=l(),F(gC.$$.fragment),RNe=l(),xc=a("h2"),hC=a("a"),qFe=a("span"),F(m9.$$.fragment),s6r=l(),NFe=a("span"),l6r=o("FlaxAutoModel"),PNe=l(),fr=a("div"),F(g9.$$.fragment),i6r=l(),$c=a("p"),d6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dJ=a("a"),c6r=o("from_pretrained()"),f6r=o(" class method or the "),cJ=a("a"),m6r=o("from_config()"),g6r=o(` class
method.`),h6r=l(),h9=a("p"),p6r=o("This class cannot be instantiated directly using "),jFe=a("code"),_6r=o("__init__()"),u6r=o(" (throws an error)."),b6r=l(),Gt=a("div"),F(p9.$$.fragment),v6r=l(),DFe=a("p"),F6r=o("Instantiates one of the base model classes of the library from a configuration."),T6r=l(),kc=a("p"),M6r=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),E6r=o("not"),C6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),w6r=o("from_pretrained()"),A6r=o(" to load the model weights."),y6r=l(),F(pC.$$.fragment),L6r=l(),jr=a("div"),F(_9.$$.fragment),x6r=l(),OFe=a("p"),$6r=o("Instantiate one of the base model classes of the library from a pretrained model."),k6r=l(),hn=a("p"),S6r=o("The model class to instantiate is selected based on the "),VFe=a("code"),R6r=o("model_type"),P6r=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),B6r=o("pretrained_model_name_or_path"),I6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),q6r=o("pretrained_model_name_or_path"),N6r=o(":"),j6r=l(),te=a("ul"),_C=a("li"),WFe=a("strong"),D6r=o("albert"),G6r=o(" \u2014 "),mJ=a("a"),O6r=o("FlaxAlbertModel"),V6r=o(" (ALBERT model)"),X6r=l(),uC=a("li"),QFe=a("strong"),z6r=o("bart"),W6r=o(" \u2014 "),gJ=a("a"),Q6r=o("FlaxBartModel"),H6r=o(" (BART model)"),U6r=l(),bC=a("li"),HFe=a("strong"),J6r=o("beit"),Y6r=o(" \u2014 "),hJ=a("a"),K6r=o("FlaxBeitModel"),Z6r=o(" (BEiT model)"),eyr=l(),vC=a("li"),UFe=a("strong"),oyr=o("bert"),ryr=o(" \u2014 "),pJ=a("a"),tyr=o("FlaxBertModel"),ayr=o(" (BERT model)"),nyr=l(),FC=a("li"),JFe=a("strong"),syr=o("big_bird"),lyr=o(" \u2014 "),_J=a("a"),iyr=o("FlaxBigBirdModel"),dyr=o(" (BigBird model)"),cyr=l(),TC=a("li"),YFe=a("strong"),fyr=o("blenderbot"),myr=o(" \u2014 "),uJ=a("a"),gyr=o("FlaxBlenderbotModel"),hyr=o(" (Blenderbot model)"),pyr=l(),MC=a("li"),KFe=a("strong"),_yr=o("blenderbot-small"),uyr=o(" \u2014 "),bJ=a("a"),byr=o("FlaxBlenderbotSmallModel"),vyr=o(" (BlenderbotSmall model)"),Fyr=l(),EC=a("li"),ZFe=a("strong"),Tyr=o("clip"),Myr=o(" \u2014 "),vJ=a("a"),Eyr=o("FlaxCLIPModel"),Cyr=o(" (CLIP model)"),wyr=l(),CC=a("li"),eTe=a("strong"),Ayr=o("distilbert"),yyr=o(" \u2014 "),FJ=a("a"),Lyr=o("FlaxDistilBertModel"),xyr=o(" (DistilBERT model)"),$yr=l(),wC=a("li"),oTe=a("strong"),kyr=o("electra"),Syr=o(" \u2014 "),TJ=a("a"),Ryr=o("FlaxElectraModel"),Pyr=o(" (ELECTRA model)"),Byr=l(),AC=a("li"),rTe=a("strong"),Iyr=o("gpt2"),qyr=o(" \u2014 "),MJ=a("a"),Nyr=o("FlaxGPT2Model"),jyr=o(" (OpenAI GPT-2 model)"),Dyr=l(),yC=a("li"),tTe=a("strong"),Gyr=o("gpt_neo"),Oyr=o(" \u2014 "),EJ=a("a"),Vyr=o("FlaxGPTNeoModel"),Xyr=o(" (GPT Neo model)"),zyr=l(),LC=a("li"),aTe=a("strong"),Wyr=o("gptj"),Qyr=o(" \u2014 "),CJ=a("a"),Hyr=o("FlaxGPTJModel"),Uyr=o(" (GPT-J model)"),Jyr=l(),xC=a("li"),nTe=a("strong"),Yyr=o("marian"),Kyr=o(" \u2014 "),wJ=a("a"),Zyr=o("FlaxMarianModel"),eLr=o(" (Marian model)"),oLr=l(),$C=a("li"),sTe=a("strong"),rLr=o("mbart"),tLr=o(" \u2014 "),AJ=a("a"),aLr=o("FlaxMBartModel"),nLr=o(" (mBART model)"),sLr=l(),kC=a("li"),lTe=a("strong"),lLr=o("mt5"),iLr=o(" \u2014 "),yJ=a("a"),dLr=o("FlaxMT5Model"),cLr=o(" (mT5 model)"),fLr=l(),SC=a("li"),iTe=a("strong"),mLr=o("pegasus"),gLr=o(" \u2014 "),LJ=a("a"),hLr=o("FlaxPegasusModel"),pLr=o(" (Pegasus model)"),_Lr=l(),RC=a("li"),dTe=a("strong"),uLr=o("roberta"),bLr=o(" \u2014 "),xJ=a("a"),vLr=o("FlaxRobertaModel"),FLr=o(" (RoBERTa model)"),TLr=l(),PC=a("li"),cTe=a("strong"),MLr=o("roformer"),ELr=o(" \u2014 "),$J=a("a"),CLr=o("FlaxRoFormerModel"),wLr=o(" (RoFormer model)"),ALr=l(),BC=a("li"),fTe=a("strong"),yLr=o("t5"),LLr=o(" \u2014 "),kJ=a("a"),xLr=o("FlaxT5Model"),$Lr=o(" (T5 model)"),kLr=l(),IC=a("li"),mTe=a("strong"),SLr=o("vision-text-dual-encoder"),RLr=o(" \u2014 "),SJ=a("a"),PLr=o("FlaxVisionTextDualEncoderModel"),BLr=o(" (VisionTextDualEncoder model)"),ILr=l(),qC=a("li"),gTe=a("strong"),qLr=o("vit"),NLr=o(" \u2014 "),RJ=a("a"),jLr=o("FlaxViTModel"),DLr=o(" (ViT model)"),GLr=l(),NC=a("li"),hTe=a("strong"),OLr=o("wav2vec2"),VLr=o(" \u2014 "),PJ=a("a"),XLr=o("FlaxWav2Vec2Model"),zLr=o(" (Wav2Vec2 model)"),WLr=l(),jC=a("li"),pTe=a("strong"),QLr=o("xglm"),HLr=o(" \u2014 "),BJ=a("a"),ULr=o("FlaxXGLMModel"),JLr=o(" (XGLM model)"),YLr=l(),DC=a("li"),_Te=a("strong"),KLr=o("xlm-roberta"),ZLr=o(" \u2014 "),IJ=a("a"),e8r=o("FlaxXLMRobertaModel"),o8r=o(" (XLM-RoBERTa model)"),r8r=l(),F(GC.$$.fragment),BNe=l(),Sc=a("h2"),OC=a("a"),uTe=a("span"),F(u9.$$.fragment),t8r=l(),bTe=a("span"),a8r=o("FlaxAutoModelForCausalLM"),INe=l(),mr=a("div"),F(b9.$$.fragment),n8r=l(),Rc=a("p"),s8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=a("a"),l8r=o("from_pretrained()"),i8r=o(" class method or the "),NJ=a("a"),d8r=o("from_config()"),c8r=o(` class
method.`),f8r=l(),v9=a("p"),m8r=o("This class cannot be instantiated directly using "),vTe=a("code"),g8r=o("__init__()"),h8r=o(" (throws an error)."),p8r=l(),Ot=a("div"),F(F9.$$.fragment),_8r=l(),FTe=a("p"),u8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b8r=l(),Pc=a("p"),v8r=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),F8r=o("not"),T8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),M8r=o("from_pretrained()"),E8r=o(" to load the model weights."),C8r=l(),F(VC.$$.fragment),w8r=l(),Dr=a("div"),F(T9.$$.fragment),A8r=l(),MTe=a("p"),y8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L8r=l(),pn=a("p"),x8r=o("The model class to instantiate is selected based on the "),ETe=a("code"),$8r=o("model_type"),k8r=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),S8r=o("pretrained_model_name_or_path"),R8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),P8r=o("pretrained_model_name_or_path"),B8r=o(":"),I8r=l(),Re=a("ul"),XC=a("li"),ATe=a("strong"),q8r=o("bart"),N8r=o(" \u2014 "),DJ=a("a"),j8r=o("FlaxBartForCausalLM"),D8r=o(" (BART model)"),G8r=l(),zC=a("li"),yTe=a("strong"),O8r=o("bert"),V8r=o(" \u2014 "),GJ=a("a"),X8r=o("FlaxBertForCausalLM"),z8r=o(" (BERT model)"),W8r=l(),WC=a("li"),LTe=a("strong"),Q8r=o("big_bird"),H8r=o(" \u2014 "),OJ=a("a"),U8r=o("FlaxBigBirdForCausalLM"),J8r=o(" (BigBird model)"),Y8r=l(),QC=a("li"),xTe=a("strong"),K8r=o("electra"),Z8r=o(" \u2014 "),VJ=a("a"),e9r=o("FlaxElectraForCausalLM"),o9r=o(" (ELECTRA model)"),r9r=l(),HC=a("li"),$Te=a("strong"),t9r=o("gpt2"),a9r=o(" \u2014 "),XJ=a("a"),n9r=o("FlaxGPT2LMHeadModel"),s9r=o(" (OpenAI GPT-2 model)"),l9r=l(),UC=a("li"),kTe=a("strong"),i9r=o("gpt_neo"),d9r=o(" \u2014 "),zJ=a("a"),c9r=o("FlaxGPTNeoForCausalLM"),f9r=o(" (GPT Neo model)"),m9r=l(),JC=a("li"),STe=a("strong"),g9r=o("gptj"),h9r=o(" \u2014 "),WJ=a("a"),p9r=o("FlaxGPTJForCausalLM"),_9r=o(" (GPT-J model)"),u9r=l(),YC=a("li"),RTe=a("strong"),b9r=o("roberta"),v9r=o(" \u2014 "),QJ=a("a"),F9r=o("FlaxRobertaForCausalLM"),T9r=o(" (RoBERTa model)"),M9r=l(),KC=a("li"),PTe=a("strong"),E9r=o("xglm"),C9r=o(" \u2014 "),HJ=a("a"),w9r=o("FlaxXGLMForCausalLM"),A9r=o(" (XGLM model)"),y9r=l(),F(ZC.$$.fragment),qNe=l(),Bc=a("h2"),e3=a("a"),BTe=a("span"),F(M9.$$.fragment),L9r=l(),ITe=a("span"),x9r=o("FlaxAutoModelForPreTraining"),NNe=l(),gr=a("div"),F(E9.$$.fragment),$9r=l(),Ic=a("p"),k9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=a("a"),S9r=o("from_pretrained()"),R9r=o(" class method or the "),JJ=a("a"),P9r=o("from_config()"),B9r=o(` class
method.`),I9r=l(),C9=a("p"),q9r=o("This class cannot be instantiated directly using "),qTe=a("code"),N9r=o("__init__()"),j9r=o(" (throws an error)."),D9r=l(),Vt=a("div"),F(w9.$$.fragment),G9r=l(),NTe=a("p"),O9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V9r=l(),qc=a("p"),X9r=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),z9r=o("not"),W9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),Q9r=o("from_pretrained()"),H9r=o(" to load the model weights."),U9r=l(),F(o3.$$.fragment),J9r=l(),Gr=a("div"),F(A9.$$.fragment),Y9r=l(),DTe=a("p"),K9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z9r=l(),_n=a("p"),exr=o("The model class to instantiate is selected based on the "),GTe=a("code"),oxr=o("model_type"),rxr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),txr=o("pretrained_model_name_or_path"),axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(":"),lxr=l(),Ee=a("ul"),r3=a("li"),XTe=a("strong"),ixr=o("albert"),dxr=o(" \u2014 "),KJ=a("a"),cxr=o("FlaxAlbertForPreTraining"),fxr=o(" (ALBERT model)"),mxr=l(),t3=a("li"),zTe=a("strong"),gxr=o("bart"),hxr=o(" \u2014 "),ZJ=a("a"),pxr=o("FlaxBartForConditionalGeneration"),_xr=o(" (BART model)"),uxr=l(),a3=a("li"),WTe=a("strong"),bxr=o("bert"),vxr=o(" \u2014 "),eY=a("a"),Fxr=o("FlaxBertForPreTraining"),Txr=o(" (BERT model)"),Mxr=l(),n3=a("li"),QTe=a("strong"),Exr=o("big_bird"),Cxr=o(" \u2014 "),oY=a("a"),wxr=o("FlaxBigBirdForPreTraining"),Axr=o(" (BigBird model)"),yxr=l(),s3=a("li"),HTe=a("strong"),Lxr=o("electra"),xxr=o(" \u2014 "),rY=a("a"),$xr=o("FlaxElectraForPreTraining"),kxr=o(" (ELECTRA model)"),Sxr=l(),l3=a("li"),UTe=a("strong"),Rxr=o("mbart"),Pxr=o(" \u2014 "),tY=a("a"),Bxr=o("FlaxMBartForConditionalGeneration"),Ixr=o(" (mBART model)"),qxr=l(),i3=a("li"),JTe=a("strong"),Nxr=o("mt5"),jxr=o(" \u2014 "),aY=a("a"),Dxr=o("FlaxMT5ForConditionalGeneration"),Gxr=o(" (mT5 model)"),Oxr=l(),d3=a("li"),YTe=a("strong"),Vxr=o("roberta"),Xxr=o(" \u2014 "),nY=a("a"),zxr=o("FlaxRobertaForMaskedLM"),Wxr=o(" (RoBERTa model)"),Qxr=l(),c3=a("li"),KTe=a("strong"),Hxr=o("roformer"),Uxr=o(" \u2014 "),sY=a("a"),Jxr=o("FlaxRoFormerForMaskedLM"),Yxr=o(" (RoFormer model)"),Kxr=l(),f3=a("li"),ZTe=a("strong"),Zxr=o("t5"),e$r=o(" \u2014 "),lY=a("a"),o$r=o("FlaxT5ForConditionalGeneration"),r$r=o(" (T5 model)"),t$r=l(),m3=a("li"),e7e=a("strong"),a$r=o("wav2vec2"),n$r=o(" \u2014 "),iY=a("a"),s$r=o("FlaxWav2Vec2ForPreTraining"),l$r=o(" (Wav2Vec2 model)"),i$r=l(),g3=a("li"),o7e=a("strong"),d$r=o("xlm-roberta"),c$r=o(" \u2014 "),dY=a("a"),f$r=o("FlaxXLMRobertaForMaskedLM"),m$r=o(" (XLM-RoBERTa model)"),g$r=l(),F(h3.$$.fragment),jNe=l(),Nc=a("h2"),p3=a("a"),r7e=a("span"),F(y9.$$.fragment),h$r=l(),t7e=a("span"),p$r=o("FlaxAutoModelForMaskedLM"),DNe=l(),hr=a("div"),F(L9.$$.fragment),_$r=l(),jc=a("p"),u$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=a("a"),b$r=o("from_pretrained()"),v$r=o(" class method or the "),fY=a("a"),F$r=o("from_config()"),T$r=o(` class
method.`),M$r=l(),x9=a("p"),E$r=o("This class cannot be instantiated directly using "),a7e=a("code"),C$r=o("__init__()"),w$r=o(" (throws an error)."),A$r=l(),Xt=a("div"),F($9.$$.fragment),y$r=l(),n7e=a("p"),L$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x$r=l(),Dc=a("p"),$$r=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),k$r=o("not"),S$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),R$r=o("from_pretrained()"),P$r=o(" to load the model weights."),B$r=l(),F(_3.$$.fragment),I$r=l(),Or=a("div"),F(k9.$$.fragment),q$r=l(),l7e=a("p"),N$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j$r=l(),un=a("p"),D$r=o("The model class to instantiate is selected based on the "),i7e=a("code"),G$r=o("model_type"),O$r=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),V$r=o("pretrained_model_name_or_path"),X$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),z$r=o("pretrained_model_name_or_path"),W$r=o(":"),Q$r=l(),Le=a("ul"),u3=a("li"),f7e=a("strong"),H$r=o("albert"),U$r=o(" \u2014 "),gY=a("a"),J$r=o("FlaxAlbertForMaskedLM"),Y$r=o(" (ALBERT model)"),K$r=l(),b3=a("li"),m7e=a("strong"),Z$r=o("bart"),ekr=o(" \u2014 "),hY=a("a"),okr=o("FlaxBartForConditionalGeneration"),rkr=o(" (BART model)"),tkr=l(),v3=a("li"),g7e=a("strong"),akr=o("bert"),nkr=o(" \u2014 "),pY=a("a"),skr=o("FlaxBertForMaskedLM"),lkr=o(" (BERT model)"),ikr=l(),F3=a("li"),h7e=a("strong"),dkr=o("big_bird"),ckr=o(" \u2014 "),_Y=a("a"),fkr=o("FlaxBigBirdForMaskedLM"),mkr=o(" (BigBird model)"),gkr=l(),T3=a("li"),p7e=a("strong"),hkr=o("distilbert"),pkr=o(" \u2014 "),uY=a("a"),_kr=o("FlaxDistilBertForMaskedLM"),ukr=o(" (DistilBERT model)"),bkr=l(),M3=a("li"),_7e=a("strong"),vkr=o("electra"),Fkr=o(" \u2014 "),bY=a("a"),Tkr=o("FlaxElectraForMaskedLM"),Mkr=o(" (ELECTRA model)"),Ekr=l(),E3=a("li"),u7e=a("strong"),Ckr=o("mbart"),wkr=o(" \u2014 "),vY=a("a"),Akr=o("FlaxMBartForConditionalGeneration"),ykr=o(" (mBART model)"),Lkr=l(),C3=a("li"),b7e=a("strong"),xkr=o("roberta"),$kr=o(" \u2014 "),FY=a("a"),kkr=o("FlaxRobertaForMaskedLM"),Skr=o(" (RoBERTa model)"),Rkr=l(),w3=a("li"),v7e=a("strong"),Pkr=o("roformer"),Bkr=o(" \u2014 "),TY=a("a"),Ikr=o("FlaxRoFormerForMaskedLM"),qkr=o(" (RoFormer model)"),Nkr=l(),A3=a("li"),F7e=a("strong"),jkr=o("xlm-roberta"),Dkr=o(" \u2014 "),MY=a("a"),Gkr=o("FlaxXLMRobertaForMaskedLM"),Okr=o(" (XLM-RoBERTa model)"),Vkr=l(),F(y3.$$.fragment),GNe=l(),Gc=a("h2"),L3=a("a"),T7e=a("span"),F(S9.$$.fragment),Xkr=l(),M7e=a("span"),zkr=o("FlaxAutoModelForSeq2SeqLM"),ONe=l(),pr=a("div"),F(R9.$$.fragment),Wkr=l(),Oc=a("p"),Qkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=a("a"),Hkr=o("from_pretrained()"),Ukr=o(" class method or the "),CY=a("a"),Jkr=o("from_config()"),Ykr=o(` class
method.`),Kkr=l(),P9=a("p"),Zkr=o("This class cannot be instantiated directly using "),E7e=a("code"),eSr=o("__init__()"),oSr=o(" (throws an error)."),rSr=l(),zt=a("div"),F(B9.$$.fragment),tSr=l(),C7e=a("p"),aSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nSr=l(),Vc=a("p"),sSr=o(`Note:
Loading a model from its configuration file does `),w7e=a("strong"),lSr=o("not"),iSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),dSr=o("from_pretrained()"),cSr=o(" to load the model weights."),fSr=l(),F(x3.$$.fragment),mSr=l(),Vr=a("div"),F(I9.$$.fragment),gSr=l(),A7e=a("p"),hSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pSr=l(),bn=a("p"),_Sr=o("The model class to instantiate is selected based on the "),y7e=a("code"),uSr=o("model_type"),bSr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=a("code"),TSr=o("pretrained_model_name_or_path"),MSr=o(":"),ESr=l(),Pe=a("ul"),$3=a("li"),$7e=a("strong"),CSr=o("bart"),wSr=o(" \u2014 "),AY=a("a"),ASr=o("FlaxBartForConditionalGeneration"),ySr=o(" (BART model)"),LSr=l(),k3=a("li"),k7e=a("strong"),xSr=o("blenderbot"),$Sr=o(" \u2014 "),yY=a("a"),kSr=o("FlaxBlenderbotForConditionalGeneration"),SSr=o(" (Blenderbot model)"),RSr=l(),S3=a("li"),S7e=a("strong"),PSr=o("blenderbot-small"),BSr=o(" \u2014 "),LY=a("a"),ISr=o("FlaxBlenderbotSmallForConditionalGeneration"),qSr=o(" (BlenderbotSmall model)"),NSr=l(),R3=a("li"),R7e=a("strong"),jSr=o("encoder-decoder"),DSr=o(" \u2014 "),xY=a("a"),GSr=o("FlaxEncoderDecoderModel"),OSr=o(" (Encoder decoder model)"),VSr=l(),P3=a("li"),P7e=a("strong"),XSr=o("marian"),zSr=o(" \u2014 "),$Y=a("a"),WSr=o("FlaxMarianMTModel"),QSr=o(" (Marian model)"),HSr=l(),B3=a("li"),B7e=a("strong"),USr=o("mbart"),JSr=o(" \u2014 "),kY=a("a"),YSr=o("FlaxMBartForConditionalGeneration"),KSr=o(" (mBART model)"),ZSr=l(),I3=a("li"),I7e=a("strong"),eRr=o("mt5"),oRr=o(" \u2014 "),SY=a("a"),rRr=o("FlaxMT5ForConditionalGeneration"),tRr=o(" (mT5 model)"),aRr=l(),q3=a("li"),q7e=a("strong"),nRr=o("pegasus"),sRr=o(" \u2014 "),RY=a("a"),lRr=o("FlaxPegasusForConditionalGeneration"),iRr=o(" (Pegasus model)"),dRr=l(),N3=a("li"),N7e=a("strong"),cRr=o("t5"),fRr=o(" \u2014 "),PY=a("a"),mRr=o("FlaxT5ForConditionalGeneration"),gRr=o(" (T5 model)"),hRr=l(),F(j3.$$.fragment),VNe=l(),Xc=a("h2"),D3=a("a"),j7e=a("span"),F(q9.$$.fragment),pRr=l(),D7e=a("span"),_Rr=o("FlaxAutoModelForSequenceClassification"),XNe=l(),_r=a("div"),F(N9.$$.fragment),uRr=l(),zc=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BY=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),IY=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),j9=a("p"),CRr=o("This class cannot be instantiated directly using "),G7e=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),yRr=l(),Wt=a("div"),F(D9.$$.fragment),LRr=l(),O7e=a("p"),xRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Rr=l(),Wc=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(G3.$$.fragment),qRr=l(),Xr=a("div"),F(G9.$$.fragment),NRr=l(),X7e=a("p"),jRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DRr=l(),vn=a("p"),GRr=o("The model class to instantiate is selected based on the "),z7e=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(":"),HRr=l(),xe=a("ul"),O3=a("li"),H7e=a("strong"),URr=o("albert"),JRr=o(" \u2014 "),NY=a("a"),YRr=o("FlaxAlbertForSequenceClassification"),KRr=o(" (ALBERT model)"),ZRr=l(),V3=a("li"),U7e=a("strong"),ePr=o("bart"),oPr=o(" \u2014 "),jY=a("a"),rPr=o("FlaxBartForSequenceClassification"),tPr=o(" (BART model)"),aPr=l(),X3=a("li"),J7e=a("strong"),nPr=o("bert"),sPr=o(" \u2014 "),DY=a("a"),lPr=o("FlaxBertForSequenceClassification"),iPr=o(" (BERT model)"),dPr=l(),z3=a("li"),Y7e=a("strong"),cPr=o("big_bird"),fPr=o(" \u2014 "),GY=a("a"),mPr=o("FlaxBigBirdForSequenceClassification"),gPr=o(" (BigBird model)"),hPr=l(),W3=a("li"),K7e=a("strong"),pPr=o("distilbert"),_Pr=o(" \u2014 "),OY=a("a"),uPr=o("FlaxDistilBertForSequenceClassification"),bPr=o(" (DistilBERT model)"),vPr=l(),Q3=a("li"),Z7e=a("strong"),FPr=o("electra"),TPr=o(" \u2014 "),VY=a("a"),MPr=o("FlaxElectraForSequenceClassification"),EPr=o(" (ELECTRA model)"),CPr=l(),H3=a("li"),eMe=a("strong"),wPr=o("mbart"),APr=o(" \u2014 "),XY=a("a"),yPr=o("FlaxMBartForSequenceClassification"),LPr=o(" (mBART model)"),xPr=l(),U3=a("li"),oMe=a("strong"),$Pr=o("roberta"),kPr=o(" \u2014 "),zY=a("a"),SPr=o("FlaxRobertaForSequenceClassification"),RPr=o(" (RoBERTa model)"),PPr=l(),J3=a("li"),rMe=a("strong"),BPr=o("roformer"),IPr=o(" \u2014 "),WY=a("a"),qPr=o("FlaxRoFormerForSequenceClassification"),NPr=o(" (RoFormer model)"),jPr=l(),Y3=a("li"),tMe=a("strong"),DPr=o("xlm-roberta"),GPr=o(" \u2014 "),QY=a("a"),OPr=o("FlaxXLMRobertaForSequenceClassification"),VPr=o(" (XLM-RoBERTa model)"),XPr=l(),F(K3.$$.fragment),zNe=l(),Qc=a("h2"),Z3=a("a"),aMe=a("span"),F(O9.$$.fragment),zPr=l(),nMe=a("span"),WPr=o("FlaxAutoModelForQuestionAnswering"),WNe=l(),ur=a("div"),F(V9.$$.fragment),QPr=l(),Hc=a("p"),HPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HY=a("a"),UPr=o("from_pretrained()"),JPr=o(" class method or the "),UY=a("a"),YPr=o("from_config()"),KPr=o(` class
method.`),ZPr=l(),X9=a("p"),eBr=o("This class cannot be instantiated directly using "),sMe=a("code"),oBr=o("__init__()"),rBr=o(" (throws an error)."),tBr=l(),Qt=a("div"),F(z9.$$.fragment),aBr=l(),lMe=a("p"),nBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sBr=l(),Uc=a("p"),lBr=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),iBr=o("not"),dBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),cBr=o("from_pretrained()"),fBr=o(" to load the model weights."),mBr=l(),F(ew.$$.fragment),gBr=l(),zr=a("div"),F(W9.$$.fragment),hBr=l(),dMe=a("p"),pBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Br=l(),Fn=a("p"),uBr=o("The model class to instantiate is selected based on the "),cMe=a("code"),bBr=o("model_type"),vBr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),FBr=o("pretrained_model_name_or_path"),TBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(":"),CBr=l(),$e=a("ul"),ow=a("li"),gMe=a("strong"),wBr=o("albert"),ABr=o(" \u2014 "),YY=a("a"),yBr=o("FlaxAlbertForQuestionAnswering"),LBr=o(" (ALBERT model)"),xBr=l(),rw=a("li"),hMe=a("strong"),$Br=o("bart"),kBr=o(" \u2014 "),KY=a("a"),SBr=o("FlaxBartForQuestionAnswering"),RBr=o(" (BART model)"),PBr=l(),tw=a("li"),pMe=a("strong"),BBr=o("bert"),IBr=o(" \u2014 "),ZY=a("a"),qBr=o("FlaxBertForQuestionAnswering"),NBr=o(" (BERT model)"),jBr=l(),aw=a("li"),_Me=a("strong"),DBr=o("big_bird"),GBr=o(" \u2014 "),eK=a("a"),OBr=o("FlaxBigBirdForQuestionAnswering"),VBr=o(" (BigBird model)"),XBr=l(),nw=a("li"),uMe=a("strong"),zBr=o("distilbert"),WBr=o(" \u2014 "),oK=a("a"),QBr=o("FlaxDistilBertForQuestionAnswering"),HBr=o(" (DistilBERT model)"),UBr=l(),sw=a("li"),bMe=a("strong"),JBr=o("electra"),YBr=o(" \u2014 "),rK=a("a"),KBr=o("FlaxElectraForQuestionAnswering"),ZBr=o(" (ELECTRA model)"),eIr=l(),lw=a("li"),vMe=a("strong"),oIr=o("mbart"),rIr=o(" \u2014 "),tK=a("a"),tIr=o("FlaxMBartForQuestionAnswering"),aIr=o(" (mBART model)"),nIr=l(),iw=a("li"),FMe=a("strong"),sIr=o("roberta"),lIr=o(" \u2014 "),aK=a("a"),iIr=o("FlaxRobertaForQuestionAnswering"),dIr=o(" (RoBERTa model)"),cIr=l(),dw=a("li"),TMe=a("strong"),fIr=o("roformer"),mIr=o(" \u2014 "),nK=a("a"),gIr=o("FlaxRoFormerForQuestionAnswering"),hIr=o(" (RoFormer model)"),pIr=l(),cw=a("li"),MMe=a("strong"),_Ir=o("xlm-roberta"),uIr=o(" \u2014 "),sK=a("a"),bIr=o("FlaxXLMRobertaForQuestionAnswering"),vIr=o(" (XLM-RoBERTa model)"),FIr=l(),F(fw.$$.fragment),QNe=l(),Jc=a("h2"),mw=a("a"),EMe=a("span"),F(Q9.$$.fragment),TIr=l(),CMe=a("span"),MIr=o("FlaxAutoModelForTokenClassification"),HNe=l(),br=a("div"),F(H9.$$.fragment),EIr=l(),Yc=a("p"),CIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lK=a("a"),wIr=o("from_pretrained()"),AIr=o(" class method or the "),iK=a("a"),yIr=o("from_config()"),LIr=o(` class
method.`),xIr=l(),U9=a("p"),$Ir=o("This class cannot be instantiated directly using "),wMe=a("code"),kIr=o("__init__()"),SIr=o(" (throws an error)."),RIr=l(),Ht=a("div"),F(J9.$$.fragment),PIr=l(),AMe=a("p"),BIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IIr=l(),Kc=a("p"),qIr=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),NIr=o("not"),jIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),DIr=o("from_pretrained()"),GIr=o(" to load the model weights."),OIr=l(),F(gw.$$.fragment),VIr=l(),Wr=a("div"),F(Y9.$$.fragment),XIr=l(),LMe=a("p"),zIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WIr=l(),Tn=a("p"),QIr=o("The model class to instantiate is selected based on the "),xMe=a("code"),HIr=o("model_type"),UIr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),JIr=o("pretrained_model_name_or_path"),YIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),KIr=o("pretrained_model_name_or_path"),ZIr=o(":"),eqr=l(),De=a("ul"),hw=a("li"),SMe=a("strong"),oqr=o("albert"),rqr=o(" \u2014 "),cK=a("a"),tqr=o("FlaxAlbertForTokenClassification"),aqr=o(" (ALBERT model)"),nqr=l(),pw=a("li"),RMe=a("strong"),sqr=o("bert"),lqr=o(" \u2014 "),fK=a("a"),iqr=o("FlaxBertForTokenClassification"),dqr=o(" (BERT model)"),cqr=l(),_w=a("li"),PMe=a("strong"),fqr=o("big_bird"),mqr=o(" \u2014 "),mK=a("a"),gqr=o("FlaxBigBirdForTokenClassification"),hqr=o(" (BigBird model)"),pqr=l(),uw=a("li"),BMe=a("strong"),_qr=o("distilbert"),uqr=o(" \u2014 "),gK=a("a"),bqr=o("FlaxDistilBertForTokenClassification"),vqr=o(" (DistilBERT model)"),Fqr=l(),bw=a("li"),IMe=a("strong"),Tqr=o("electra"),Mqr=o(" \u2014 "),hK=a("a"),Eqr=o("FlaxElectraForTokenClassification"),Cqr=o(" (ELECTRA model)"),wqr=l(),vw=a("li"),qMe=a("strong"),Aqr=o("roberta"),yqr=o(" \u2014 "),pK=a("a"),Lqr=o("FlaxRobertaForTokenClassification"),xqr=o(" (RoBERTa model)"),$qr=l(),Fw=a("li"),NMe=a("strong"),kqr=o("roformer"),Sqr=o(" \u2014 "),_K=a("a"),Rqr=o("FlaxRoFormerForTokenClassification"),Pqr=o(" (RoFormer model)"),Bqr=l(),Tw=a("li"),jMe=a("strong"),Iqr=o("xlm-roberta"),qqr=o(" \u2014 "),uK=a("a"),Nqr=o("FlaxXLMRobertaForTokenClassification"),jqr=o(" (XLM-RoBERTa model)"),Dqr=l(),F(Mw.$$.fragment),UNe=l(),Zc=a("h2"),Ew=a("a"),DMe=a("span"),F(K9.$$.fragment),Gqr=l(),GMe=a("span"),Oqr=o("FlaxAutoModelForMultipleChoice"),JNe=l(),vr=a("div"),F(Z9.$$.fragment),Vqr=l(),ef=a("p"),Xqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bK=a("a"),zqr=o("from_pretrained()"),Wqr=o(" class method or the "),vK=a("a"),Qqr=o("from_config()"),Hqr=o(` class
method.`),Uqr=l(),ex=a("p"),Jqr=o("This class cannot be instantiated directly using "),OMe=a("code"),Yqr=o("__init__()"),Kqr=o(" (throws an error)."),Zqr=l(),Ut=a("div"),F(ox.$$.fragment),eNr=l(),VMe=a("p"),oNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rNr=l(),of=a("p"),tNr=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),aNr=o("not"),nNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),sNr=o("from_pretrained()"),lNr=o(" to load the model weights."),iNr=l(),F(Cw.$$.fragment),dNr=l(),Qr=a("div"),F(rx.$$.fragment),cNr=l(),zMe=a("p"),fNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mNr=l(),Mn=a("p"),gNr=o("The model class to instantiate is selected based on the "),WMe=a("code"),hNr=o("model_type"),pNr=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),_Nr=o("pretrained_model_name_or_path"),uNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),bNr=o("pretrained_model_name_or_path"),vNr=o(":"),FNr=l(),Ge=a("ul"),ww=a("li"),UMe=a("strong"),TNr=o("albert"),MNr=o(" \u2014 "),TK=a("a"),ENr=o("FlaxAlbertForMultipleChoice"),CNr=o(" (ALBERT model)"),wNr=l(),Aw=a("li"),JMe=a("strong"),ANr=o("bert"),yNr=o(" \u2014 "),MK=a("a"),LNr=o("FlaxBertForMultipleChoice"),xNr=o(" (BERT model)"),$Nr=l(),yw=a("li"),YMe=a("strong"),kNr=o("big_bird"),SNr=o(" \u2014 "),EK=a("a"),RNr=o("FlaxBigBirdForMultipleChoice"),PNr=o(" (BigBird model)"),BNr=l(),Lw=a("li"),KMe=a("strong"),INr=o("distilbert"),qNr=o(" \u2014 "),CK=a("a"),NNr=o("FlaxDistilBertForMultipleChoice"),jNr=o(" (DistilBERT model)"),DNr=l(),xw=a("li"),ZMe=a("strong"),GNr=o("electra"),ONr=o(" \u2014 "),wK=a("a"),VNr=o("FlaxElectraForMultipleChoice"),XNr=o(" (ELECTRA model)"),zNr=l(),$w=a("li"),eEe=a("strong"),WNr=o("roberta"),QNr=o(" \u2014 "),AK=a("a"),HNr=o("FlaxRobertaForMultipleChoice"),UNr=o(" (RoBERTa model)"),JNr=l(),kw=a("li"),oEe=a("strong"),YNr=o("roformer"),KNr=o(" \u2014 "),yK=a("a"),ZNr=o("FlaxRoFormerForMultipleChoice"),ejr=o(" (RoFormer model)"),ojr=l(),Sw=a("li"),rEe=a("strong"),rjr=o("xlm-roberta"),tjr=o(" \u2014 "),LK=a("a"),ajr=o("FlaxXLMRobertaForMultipleChoice"),njr=o(" (XLM-RoBERTa model)"),sjr=l(),F(Rw.$$.fragment),YNe=l(),rf=a("h2"),Pw=a("a"),tEe=a("span"),F(tx.$$.fragment),ljr=l(),aEe=a("span"),ijr=o("FlaxAutoModelForNextSentencePrediction"),KNe=l(),Fr=a("div"),F(ax.$$.fragment),djr=l(),tf=a("p"),cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xK=a("a"),fjr=o("from_pretrained()"),mjr=o(" class method or the "),$K=a("a"),gjr=o("from_config()"),hjr=o(` class
method.`),pjr=l(),nx=a("p"),_jr=o("This class cannot be instantiated directly using "),nEe=a("code"),ujr=o("__init__()"),bjr=o(" (throws an error)."),vjr=l(),Jt=a("div"),F(sx.$$.fragment),Fjr=l(),sEe=a("p"),Tjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mjr=l(),af=a("p"),Ejr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),Cjr=o("not"),wjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),Ajr=o("from_pretrained()"),yjr=o(" to load the model weights."),Ljr=l(),F(Bw.$$.fragment),xjr=l(),Hr=a("div"),F(lx.$$.fragment),$jr=l(),iEe=a("p"),kjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sjr=l(),En=a("p"),Rjr=o("The model class to instantiate is selected based on the "),dEe=a("code"),Pjr=o("model_type"),Bjr=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),Njr=o("pretrained_model_name_or_path"),jjr=o(":"),Djr=l(),mEe=a("ul"),Iw=a("li"),gEe=a("strong"),Gjr=o("bert"),Ojr=o(" \u2014 "),SK=a("a"),Vjr=o("FlaxBertForNextSentencePrediction"),Xjr=o(" (BERT model)"),zjr=l(),F(qw.$$.fragment),ZNe=l(),nf=a("h2"),Nw=a("a"),hEe=a("span"),F(ix.$$.fragment),Wjr=l(),pEe=a("span"),Qjr=o("FlaxAutoModelForImageClassification"),eje=l(),Tr=a("div"),F(dx.$$.fragment),Hjr=l(),sf=a("p"),Ujr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RK=a("a"),Jjr=o("from_pretrained()"),Yjr=o(" class method or the "),PK=a("a"),Kjr=o("from_config()"),Zjr=o(` class
method.`),eDr=l(),cx=a("p"),oDr=o("This class cannot be instantiated directly using "),_Ee=a("code"),rDr=o("__init__()"),tDr=o(" (throws an error)."),aDr=l(),Yt=a("div"),F(fx.$$.fragment),nDr=l(),uEe=a("p"),sDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lDr=l(),lf=a("p"),iDr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),dDr=o("not"),cDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),fDr=o("from_pretrained()"),mDr=o(" to load the model weights."),gDr=l(),F(jw.$$.fragment),hDr=l(),Ur=a("div"),F(mx.$$.fragment),pDr=l(),vEe=a("p"),_Dr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uDr=l(),Cn=a("p"),bDr=o("The model class to instantiate is selected based on the "),FEe=a("code"),vDr=o("model_type"),FDr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),TDr=o("pretrained_model_name_or_path"),MDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),EDr=o("pretrained_model_name_or_path"),CDr=o(":"),wDr=l(),gx=a("ul"),Dw=a("li"),EEe=a("strong"),ADr=o("beit"),yDr=o(" \u2014 "),IK=a("a"),LDr=o("FlaxBeitForImageClassification"),xDr=o(" (BEiT model)"),$Dr=l(),Gw=a("li"),CEe=a("strong"),kDr=o("vit"),SDr=o(" \u2014 "),qK=a("a"),RDr=o("FlaxViTForImageClassification"),PDr=o(" (ViT model)"),BDr=l(),F(Ow.$$.fragment),oje=l(),df=a("h2"),Vw=a("a"),wEe=a("span"),F(hx.$$.fragment),IDr=l(),AEe=a("span"),qDr=o("FlaxAutoModelForVision2Seq"),rje=l(),Mr=a("div"),F(px.$$.fragment),NDr=l(),cf=a("p"),jDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=a("a"),DDr=o("from_pretrained()"),GDr=o(" class method or the "),jK=a("a"),ODr=o("from_config()"),VDr=o(` class
method.`),XDr=l(),_x=a("p"),zDr=o("This class cannot be instantiated directly using "),yEe=a("code"),WDr=o("__init__()"),QDr=o(" (throws an error)."),HDr=l(),Kt=a("div"),F(ux.$$.fragment),UDr=l(),LEe=a("p"),JDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YDr=l(),ff=a("p"),KDr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),ZDr=o("not"),eGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),oGr=o("from_pretrained()"),rGr=o(" to load the model weights."),tGr=l(),F(Xw.$$.fragment),aGr=l(),Jr=a("div"),F(bx.$$.fragment),nGr=l(),$Ee=a("p"),sGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lGr=l(),wn=a("p"),iGr=o("The model class to instantiate is selected based on the "),kEe=a("code"),dGr=o("model_type"),cGr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),fGr=o("pretrained_model_name_or_path"),mGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),gGr=o("pretrained_model_name_or_path"),hGr=o(":"),pGr=l(),PEe=a("ul"),zw=a("li"),BEe=a("strong"),_Gr=o("vision-encoder-decoder"),uGr=o(" \u2014 "),GK=a("a"),bGr=o("FlaxVisionEncoderDecoderModel"),vGr=o(" (Vision Encoder decoder model)"),FGr=l(),F(Ww.$$.fragment),this.h()},l(f){const u=L8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var vx=s(p);m=n(vx,"A",{id:!0,class:!0,href:!0});var IEe=s(m);_=n(IEe,"SPAN",{});var qEe=s(_);T(d.$$.fragment,qEe),qEe.forEach(t),IEe.forEach(t),h=i(vx),Mo=n(vx,"SPAN",{});var NEe=s(Mo);fi=r(NEe,"Auto Classes"),NEe.forEach(t),vx.forEach(t),pf=i(f),rt=n(f,"P",{});var Fx=s(rt);mi=r(Fx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Fx,"CODE",{});var jEe=s(gi);c6=r(jEe,"from_pretrained()"),jEe.forEach(t),_f=r(Fx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Fx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var DEe=s(yn);f6=r(DEe,"AutoConfig"),DEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var GEe=s(xn);m6=r(GEe,"AutoModel"),GEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var OEe=s($n);g6=r(OEe,"AutoTokenizer"),OEe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Tx=s(Ae);S$=r(Tx,"will create a model that is an instance of "),ui=n(Tx,"A",{href:!0});var VEe=s(ui);R$=r(VEe,"BertModel"),VEe.forEach(t),P$=r(Tx,"."),Tx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Mx=s(wa);B$=r(Mx,"There is one class of "),bf=n(Mx,"CODE",{});var XEe=s(bf);I$=r(XEe,"AutoModel"),XEe.forEach(t),fGe=r(Mx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Mx.forEach(t),eqe=i(f),bi=n(f,"H2",{class:!0});var Ex=s(bi);vf=n(Ex,"A",{id:!0,class:!0,href:!0});var zEe=s(vf);Pee=n(zEe,"SPAN",{});var WEe=s(Pee);T(h6.$$.fragment,WEe),WEe.forEach(t),zEe.forEach(t),mGe=i(Ex),Bee=n(Ex,"SPAN",{});var QEe=s(Bee);gGe=r(QEe,"Extending the Auto Classes"),QEe.forEach(t),Ex.forEach(t),oqe=i(f),kn=n(f,"P",{});var mf=s(kn);hGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Iee=n(mf,"CODE",{});var HEe=s(Iee);pGe=r(HEe,"NewModel"),HEe.forEach(t),_Ge=r(mf,", make sure you have a "),qee=n(mf,"CODE",{});var UEe=s(qee);uGe=r(UEe,"NewModelConfig"),UEe.forEach(t),bGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),rqe=i(f),T(p6.$$.fragment,f),tqe=i(f),q$=n(f,"P",{});var JEe=s(q$);vGe=r(JEe,"You will then be able to use the auto classes like you would usually do!"),JEe.forEach(t),aqe=i(f),T(Ff.$$.fragment,f),nqe=i(f),vi=n(f,"H2",{class:!0});var Cx=s(vi);Tf=n(Cx,"A",{id:!0,class:!0,href:!0});var YEe=s(Tf);Nee=n(YEe,"SPAN",{});var KEe=s(Nee);T(_6.$$.fragment,KEe),KEe.forEach(t),YEe.forEach(t),FGe=i(Cx),jee=n(Cx,"SPAN",{});var ZEe=s(jee);TGe=r(ZEe,"AutoConfig"),ZEe.forEach(t),Cx.forEach(t),sqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(u6.$$.fragment,et),MGe=i(et),b6=n(et,"P",{});var wx=s(b6);EGe=r(wx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),N$=n(wx,"A",{href:!0});var eCe=s(N$);CGe=r(eCe,"from_pretrained()"),eCe.forEach(t),wGe=r(wx," class method."),wx.forEach(t),AGe=i(et),v6=n(et,"P",{});var Ax=s(v6);yGe=r(Ax,"This class cannot be instantiated directly using "),Dee=n(Ax,"CODE",{});var oCe=s(Dee);LGe=r(oCe,"__init__()"),oCe.forEach(t),xGe=r(Ax," (throws an error)."),Ax.forEach(t),$Ge=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(F6.$$.fragment,ot),kGe=i(ot),Gee=n(ot,"P",{});var rCe=s(Gee);SGe=r(rCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),rCe.forEach(t),RGe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);PGe=r(gf,"The configuration class to instantiate is selected based on the "),Oee=n(gf,"CODE",{});var tCe=s(Oee);BGe=r(tCe,"model_type"),tCe.forEach(t),IGe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vee=n(gf,"CODE",{});var aCe=s(Vee);qGe=r(aCe,"pretrained_model_name_or_path"),aCe.forEach(t),NGe=r(gf,":"),gf.forEach(t),jGe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var Qw=s(Mf);Xee=n(Qw,"STRONG",{});var nCe=s(Xee);DGe=r(nCe,"albert"),nCe.forEach(t),GGe=r(Qw," \u2014 "),j$=n(Qw,"A",{href:!0});var sCe=s(j$);OGe=r(sCe,"AlbertConfig"),sCe.forEach(t),VGe=r(Qw," (ALBERT model)"),Qw.forEach(t),XGe=i(y),Ef=n(y,"LI",{});var Hw=s(Ef);zee=n(Hw,"STRONG",{});var lCe=s(zee);zGe=r(lCe,"bart"),lCe.forEach(t),WGe=r(Hw," \u2014 "),D$=n(Hw,"A",{href:!0});var iCe=s(D$);QGe=r(iCe,"BartConfig"),iCe.forEach(t),HGe=r(Hw," (BART model)"),Hw.forEach(t),UGe=i(y),Cf=n(y,"LI",{});var Uw=s(Cf);Wee=n(Uw,"STRONG",{});var dCe=s(Wee);JGe=r(dCe,"beit"),dCe.forEach(t),YGe=r(Uw," \u2014 "),G$=n(Uw,"A",{href:!0});var cCe=s(G$);KGe=r(cCe,"BeitConfig"),cCe.forEach(t),ZGe=r(Uw," (BEiT model)"),Uw.forEach(t),eOe=i(y),wf=n(y,"LI",{});var Jw=s(wf);Qee=n(Jw,"STRONG",{});var fCe=s(Qee);oOe=r(fCe,"bert"),fCe.forEach(t),rOe=r(Jw," \u2014 "),O$=n(Jw,"A",{href:!0});var mCe=s(O$);tOe=r(mCe,"BertConfig"),mCe.forEach(t),aOe=r(Jw," (BERT model)"),Jw.forEach(t),nOe=i(y),Af=n(y,"LI",{});var Yw=s(Af);Hee=n(Yw,"STRONG",{});var gCe=s(Hee);sOe=r(gCe,"bert-generation"),gCe.forEach(t),lOe=r(Yw," \u2014 "),V$=n(Yw,"A",{href:!0});var hCe=s(V$);iOe=r(hCe,"BertGenerationConfig"),hCe.forEach(t),dOe=r(Yw," (Bert Generation model)"),Yw.forEach(t),cOe=i(y),yf=n(y,"LI",{});var Kw=s(yf);Uee=n(Kw,"STRONG",{});var pCe=s(Uee);fOe=r(pCe,"big_bird"),pCe.forEach(t),mOe=r(Kw," \u2014 "),X$=n(Kw,"A",{href:!0});var _Ce=s(X$);gOe=r(_Ce,"BigBirdConfig"),_Ce.forEach(t),hOe=r(Kw," (BigBird model)"),Kw.forEach(t),pOe=i(y),Lf=n(y,"LI",{});var Zw=s(Lf);Jee=n(Zw,"STRONG",{});var uCe=s(Jee);_Oe=r(uCe,"bigbird_pegasus"),uCe.forEach(t),uOe=r(Zw," \u2014 "),z$=n(Zw,"A",{href:!0});var bCe=s(z$);bOe=r(bCe,"BigBirdPegasusConfig"),bCe.forEach(t),vOe=r(Zw," (BigBirdPegasus model)"),Zw.forEach(t),FOe=i(y),xf=n(y,"LI",{});var e0=s(xf);Yee=n(e0,"STRONG",{});var vCe=s(Yee);TOe=r(vCe,"blenderbot"),vCe.forEach(t),MOe=r(e0," \u2014 "),W$=n(e0,"A",{href:!0});var FCe=s(W$);EOe=r(FCe,"BlenderbotConfig"),FCe.forEach(t),COe=r(e0," (Blenderbot model)"),e0.forEach(t),wOe=i(y),$f=n(y,"LI",{});var o0=s($f);Kee=n(o0,"STRONG",{});var TCe=s(Kee);AOe=r(TCe,"blenderbot-small"),TCe.forEach(t),yOe=r(o0," \u2014 "),Q$=n(o0,"A",{href:!0});var MCe=s(Q$);LOe=r(MCe,"BlenderbotSmallConfig"),MCe.forEach(t),xOe=r(o0," (BlenderbotSmall model)"),o0.forEach(t),$Oe=i(y),kf=n(y,"LI",{});var r0=s(kf);Zee=n(r0,"STRONG",{});var ECe=s(Zee);kOe=r(ECe,"camembert"),ECe.forEach(t),SOe=r(r0," \u2014 "),H$=n(r0,"A",{href:!0});var CCe=s(H$);ROe=r(CCe,"CamembertConfig"),CCe.forEach(t),POe=r(r0," (CamemBERT model)"),r0.forEach(t),BOe=i(y),Sf=n(y,"LI",{});var t0=s(Sf);eoe=n(t0,"STRONG",{});var wCe=s(eoe);IOe=r(wCe,"canine"),wCe.forEach(t),qOe=r(t0," \u2014 "),U$=n(t0,"A",{href:!0});var ACe=s(U$);NOe=r(ACe,"CanineConfig"),ACe.forEach(t),jOe=r(t0," (Canine model)"),t0.forEach(t),DOe=i(y),Rf=n(y,"LI",{});var a0=s(Rf);ooe=n(a0,"STRONG",{});var yCe=s(ooe);GOe=r(yCe,"clip"),yCe.forEach(t),OOe=r(a0," \u2014 "),J$=n(a0,"A",{href:!0});var LCe=s(J$);VOe=r(LCe,"CLIPConfig"),LCe.forEach(t),XOe=r(a0," (CLIP model)"),a0.forEach(t),zOe=i(y),Pf=n(y,"LI",{});var n0=s(Pf);roe=n(n0,"STRONG",{});var xCe=s(roe);WOe=r(xCe,"convbert"),xCe.forEach(t),QOe=r(n0," \u2014 "),Y$=n(n0,"A",{href:!0});var $Ce=s(Y$);HOe=r($Ce,"ConvBertConfig"),$Ce.forEach(t),UOe=r(n0," (ConvBERT model)"),n0.forEach(t),JOe=i(y),Bf=n(y,"LI",{});var s0=s(Bf);toe=n(s0,"STRONG",{});var kCe=s(toe);YOe=r(kCe,"convnext"),kCe.forEach(t),KOe=r(s0," \u2014 "),K$=n(s0,"A",{href:!0});var SCe=s(K$);ZOe=r(SCe,"ConvNextConfig"),SCe.forEach(t),eVe=r(s0," (ConvNext model)"),s0.forEach(t),oVe=i(y),If=n(y,"LI",{});var l0=s(If);aoe=n(l0,"STRONG",{});var RCe=s(aoe);rVe=r(RCe,"ctrl"),RCe.forEach(t),tVe=r(l0," \u2014 "),Z$=n(l0,"A",{href:!0});var PCe=s(Z$);aVe=r(PCe,"CTRLConfig"),PCe.forEach(t),nVe=r(l0," (CTRL model)"),l0.forEach(t),sVe=i(y),qf=n(y,"LI",{});var i0=s(qf);noe=n(i0,"STRONG",{});var BCe=s(noe);lVe=r(BCe,"cvt"),BCe.forEach(t),iVe=r(i0," \u2014 "),ek=n(i0,"A",{href:!0});var ICe=s(ek);dVe=r(ICe,"CvtConfig"),ICe.forEach(t),cVe=r(i0," (CvT model)"),i0.forEach(t),fVe=i(y),Nf=n(y,"LI",{});var d0=s(Nf);soe=n(d0,"STRONG",{});var qCe=s(soe);mVe=r(qCe,"data2vec-audio"),qCe.forEach(t),gVe=r(d0," \u2014 "),ok=n(d0,"A",{href:!0});var NCe=s(ok);hVe=r(NCe,"Data2VecAudioConfig"),NCe.forEach(t),pVe=r(d0," (Data2VecAudio model)"),d0.forEach(t),_Ve=i(y),jf=n(y,"LI",{});var c0=s(jf);loe=n(c0,"STRONG",{});var jCe=s(loe);uVe=r(jCe,"data2vec-text"),jCe.forEach(t),bVe=r(c0," \u2014 "),rk=n(c0,"A",{href:!0});var DCe=s(rk);vVe=r(DCe,"Data2VecTextConfig"),DCe.forEach(t),FVe=r(c0," (Data2VecText model)"),c0.forEach(t),TVe=i(y),Df=n(y,"LI",{});var f0=s(Df);ioe=n(f0,"STRONG",{});var GCe=s(ioe);MVe=r(GCe,"data2vec-vision"),GCe.forEach(t),EVe=r(f0," \u2014 "),tk=n(f0,"A",{href:!0});var OCe=s(tk);CVe=r(OCe,"Data2VecVisionConfig"),OCe.forEach(t),wVe=r(f0," (Data2VecVision model)"),f0.forEach(t),AVe=i(y),Gf=n(y,"LI",{});var m0=s(Gf);doe=n(m0,"STRONG",{});var VCe=s(doe);yVe=r(VCe,"deberta"),VCe.forEach(t),LVe=r(m0," \u2014 "),ak=n(m0,"A",{href:!0});var XCe=s(ak);xVe=r(XCe,"DebertaConfig"),XCe.forEach(t),$Ve=r(m0," (DeBERTa model)"),m0.forEach(t),kVe=i(y),Of=n(y,"LI",{});var g0=s(Of);coe=n(g0,"STRONG",{});var zCe=s(coe);SVe=r(zCe,"deberta-v2"),zCe.forEach(t),RVe=r(g0," \u2014 "),nk=n(g0,"A",{href:!0});var WCe=s(nk);PVe=r(WCe,"DebertaV2Config"),WCe.forEach(t),BVe=r(g0," (DeBERTa-v2 model)"),g0.forEach(t),IVe=i(y),Vf=n(y,"LI",{});var h0=s(Vf);foe=n(h0,"STRONG",{});var QCe=s(foe);qVe=r(QCe,"decision_transformer"),QCe.forEach(t),NVe=r(h0," \u2014 "),sk=n(h0,"A",{href:!0});var HCe=s(sk);jVe=r(HCe,"DecisionTransformerConfig"),HCe.forEach(t),DVe=r(h0," (Decision Transformer model)"),h0.forEach(t),GVe=i(y),Xf=n(y,"LI",{});var p0=s(Xf);moe=n(p0,"STRONG",{});var UCe=s(moe);OVe=r(UCe,"deit"),UCe.forEach(t),VVe=r(p0," \u2014 "),lk=n(p0,"A",{href:!0});var MGr=s(lk);XVe=r(MGr,"DeiTConfig"),MGr.forEach(t),zVe=r(p0," (DeiT model)"),p0.forEach(t),WVe=i(y),zf=n(y,"LI",{});var JCe=s(zf);goe=n(JCe,"STRONG",{});var EGr=s(goe);QVe=r(EGr,"detr"),EGr.forEach(t),HVe=r(JCe," \u2014 "),ik=n(JCe,"A",{href:!0});var CGr=s(ik);UVe=r(CGr,"DetrConfig"),CGr.forEach(t),JVe=r(JCe," (DETR model)"),JCe.forEach(t),YVe=i(y),Wf=n(y,"LI",{});var YCe=s(Wf);hoe=n(YCe,"STRONG",{});var wGr=s(hoe);KVe=r(wGr,"distilbert"),wGr.forEach(t),ZVe=r(YCe," \u2014 "),dk=n(YCe,"A",{href:!0});var AGr=s(dk);eXe=r(AGr,"DistilBertConfig"),AGr.forEach(t),oXe=r(YCe," (DistilBERT model)"),YCe.forEach(t),rXe=i(y),Qf=n(y,"LI",{});var KCe=s(Qf);poe=n(KCe,"STRONG",{});var yGr=s(poe);tXe=r(yGr,"dpr"),yGr.forEach(t),aXe=r(KCe," \u2014 "),ck=n(KCe,"A",{href:!0});var LGr=s(ck);nXe=r(LGr,"DPRConfig"),LGr.forEach(t),sXe=r(KCe," (DPR model)"),KCe.forEach(t),lXe=i(y),Hf=n(y,"LI",{});var ZCe=s(Hf);_oe=n(ZCe,"STRONG",{});var xGr=s(_oe);iXe=r(xGr,"dpt"),xGr.forEach(t),dXe=r(ZCe," \u2014 "),fk=n(ZCe,"A",{href:!0});var $Gr=s(fk);cXe=r($Gr,"DPTConfig"),$Gr.forEach(t),fXe=r(ZCe," (DPT model)"),ZCe.forEach(t),mXe=i(y),Uf=n(y,"LI",{});var e3e=s(Uf);uoe=n(e3e,"STRONG",{});var kGr=s(uoe);gXe=r(kGr,"electra"),kGr.forEach(t),hXe=r(e3e," \u2014 "),mk=n(e3e,"A",{href:!0});var SGr=s(mk);pXe=r(SGr,"ElectraConfig"),SGr.forEach(t),_Xe=r(e3e," (ELECTRA model)"),e3e.forEach(t),uXe=i(y),Jf=n(y,"LI",{});var o3e=s(Jf);boe=n(o3e,"STRONG",{});var RGr=s(boe);bXe=r(RGr,"encoder-decoder"),RGr.forEach(t),vXe=r(o3e," \u2014 "),gk=n(o3e,"A",{href:!0});var PGr=s(gk);FXe=r(PGr,"EncoderDecoderConfig"),PGr.forEach(t),TXe=r(o3e," (Encoder decoder model)"),o3e.forEach(t),MXe=i(y),Yf=n(y,"LI",{});var r3e=s(Yf);voe=n(r3e,"STRONG",{});var BGr=s(voe);EXe=r(BGr,"flaubert"),BGr.forEach(t),CXe=r(r3e," \u2014 "),hk=n(r3e,"A",{href:!0});var IGr=s(hk);wXe=r(IGr,"FlaubertConfig"),IGr.forEach(t),AXe=r(r3e," (FlauBERT model)"),r3e.forEach(t),yXe=i(y),Kf=n(y,"LI",{});var t3e=s(Kf);Foe=n(t3e,"STRONG",{});var qGr=s(Foe);LXe=r(qGr,"flava"),qGr.forEach(t),xXe=r(t3e," \u2014 "),pk=n(t3e,"A",{href:!0});var NGr=s(pk);$Xe=r(NGr,"FlavaConfig"),NGr.forEach(t),kXe=r(t3e," (Flava model)"),t3e.forEach(t),SXe=i(y),Zf=n(y,"LI",{});var a3e=s(Zf);Toe=n(a3e,"STRONG",{});var jGr=s(Toe);RXe=r(jGr,"fnet"),jGr.forEach(t),PXe=r(a3e," \u2014 "),_k=n(a3e,"A",{href:!0});var DGr=s(_k);BXe=r(DGr,"FNetConfig"),DGr.forEach(t),IXe=r(a3e," (FNet model)"),a3e.forEach(t),qXe=i(y),em=n(y,"LI",{});var n3e=s(em);Moe=n(n3e,"STRONG",{});var GGr=s(Moe);NXe=r(GGr,"fsmt"),GGr.forEach(t),jXe=r(n3e," \u2014 "),uk=n(n3e,"A",{href:!0});var OGr=s(uk);DXe=r(OGr,"FSMTConfig"),OGr.forEach(t),GXe=r(n3e," (FairSeq Machine-Translation model)"),n3e.forEach(t),OXe=i(y),om=n(y,"LI",{});var s3e=s(om);Eoe=n(s3e,"STRONG",{});var VGr=s(Eoe);VXe=r(VGr,"funnel"),VGr.forEach(t),XXe=r(s3e," \u2014 "),bk=n(s3e,"A",{href:!0});var XGr=s(bk);zXe=r(XGr,"FunnelConfig"),XGr.forEach(t),WXe=r(s3e," (Funnel Transformer model)"),s3e.forEach(t),QXe=i(y),rm=n(y,"LI",{});var l3e=s(rm);Coe=n(l3e,"STRONG",{});var zGr=s(Coe);HXe=r(zGr,"glpn"),zGr.forEach(t),UXe=r(l3e," \u2014 "),vk=n(l3e,"A",{href:!0});var WGr=s(vk);JXe=r(WGr,"GLPNConfig"),WGr.forEach(t),YXe=r(l3e," (GLPN model)"),l3e.forEach(t),KXe=i(y),tm=n(y,"LI",{});var i3e=s(tm);woe=n(i3e,"STRONG",{});var QGr=s(woe);ZXe=r(QGr,"gpt2"),QGr.forEach(t),eze=r(i3e," \u2014 "),Fk=n(i3e,"A",{href:!0});var HGr=s(Fk);oze=r(HGr,"GPT2Config"),HGr.forEach(t),rze=r(i3e," (OpenAI GPT-2 model)"),i3e.forEach(t),tze=i(y),am=n(y,"LI",{});var d3e=s(am);Aoe=n(d3e,"STRONG",{});var UGr=s(Aoe);aze=r(UGr,"gpt_neo"),UGr.forEach(t),nze=r(d3e," \u2014 "),Tk=n(d3e,"A",{href:!0});var JGr=s(Tk);sze=r(JGr,"GPTNeoConfig"),JGr.forEach(t),lze=r(d3e," (GPT Neo model)"),d3e.forEach(t),ize=i(y),nm=n(y,"LI",{});var c3e=s(nm);yoe=n(c3e,"STRONG",{});var YGr=s(yoe);dze=r(YGr,"gptj"),YGr.forEach(t),cze=r(c3e," \u2014 "),Mk=n(c3e,"A",{href:!0});var KGr=s(Mk);fze=r(KGr,"GPTJConfig"),KGr.forEach(t),mze=r(c3e," (GPT-J model)"),c3e.forEach(t),gze=i(y),sm=n(y,"LI",{});var f3e=s(sm);Loe=n(f3e,"STRONG",{});var ZGr=s(Loe);hze=r(ZGr,"hubert"),ZGr.forEach(t),pze=r(f3e," \u2014 "),Ek=n(f3e,"A",{href:!0});var eOr=s(Ek);_ze=r(eOr,"HubertConfig"),eOr.forEach(t),uze=r(f3e," (Hubert model)"),f3e.forEach(t),bze=i(y),lm=n(y,"LI",{});var m3e=s(lm);xoe=n(m3e,"STRONG",{});var oOr=s(xoe);vze=r(oOr,"ibert"),oOr.forEach(t),Fze=r(m3e," \u2014 "),Ck=n(m3e,"A",{href:!0});var rOr=s(Ck);Tze=r(rOr,"IBertConfig"),rOr.forEach(t),Mze=r(m3e," (I-BERT model)"),m3e.forEach(t),Eze=i(y),im=n(y,"LI",{});var g3e=s(im);$oe=n(g3e,"STRONG",{});var tOr=s($oe);Cze=r(tOr,"imagegpt"),tOr.forEach(t),wze=r(g3e," \u2014 "),wk=n(g3e,"A",{href:!0});var aOr=s(wk);Aze=r(aOr,"ImageGPTConfig"),aOr.forEach(t),yze=r(g3e," (ImageGPT model)"),g3e.forEach(t),Lze=i(y),dm=n(y,"LI",{});var h3e=s(dm);koe=n(h3e,"STRONG",{});var nOr=s(koe);xze=r(nOr,"layoutlm"),nOr.forEach(t),$ze=r(h3e," \u2014 "),Ak=n(h3e,"A",{href:!0});var sOr=s(Ak);kze=r(sOr,"LayoutLMConfig"),sOr.forEach(t),Sze=r(h3e," (LayoutLM model)"),h3e.forEach(t),Rze=i(y),cm=n(y,"LI",{});var p3e=s(cm);Soe=n(p3e,"STRONG",{});var lOr=s(Soe);Pze=r(lOr,"layoutlmv2"),lOr.forEach(t),Bze=r(p3e," \u2014 "),yk=n(p3e,"A",{href:!0});var iOr=s(yk);Ize=r(iOr,"LayoutLMv2Config"),iOr.forEach(t),qze=r(p3e," (LayoutLMv2 model)"),p3e.forEach(t),Nze=i(y),fm=n(y,"LI",{});var _3e=s(fm);Roe=n(_3e,"STRONG",{});var dOr=s(Roe);jze=r(dOr,"led"),dOr.forEach(t),Dze=r(_3e," \u2014 "),Lk=n(_3e,"A",{href:!0});var cOr=s(Lk);Gze=r(cOr,"LEDConfig"),cOr.forEach(t),Oze=r(_3e," (LED model)"),_3e.forEach(t),Vze=i(y),mm=n(y,"LI",{});var u3e=s(mm);Poe=n(u3e,"STRONG",{});var fOr=s(Poe);Xze=r(fOr,"longformer"),fOr.forEach(t),zze=r(u3e," \u2014 "),xk=n(u3e,"A",{href:!0});var mOr=s(xk);Wze=r(mOr,"LongformerConfig"),mOr.forEach(t),Qze=r(u3e," (Longformer model)"),u3e.forEach(t),Hze=i(y),gm=n(y,"LI",{});var b3e=s(gm);Boe=n(b3e,"STRONG",{});var gOr=s(Boe);Uze=r(gOr,"luke"),gOr.forEach(t),Jze=r(b3e," \u2014 "),$k=n(b3e,"A",{href:!0});var hOr=s($k);Yze=r(hOr,"LukeConfig"),hOr.forEach(t),Kze=r(b3e," (LUKE model)"),b3e.forEach(t),Zze=i(y),hm=n(y,"LI",{});var v3e=s(hm);Ioe=n(v3e,"STRONG",{});var pOr=s(Ioe);eWe=r(pOr,"lxmert"),pOr.forEach(t),oWe=r(v3e," \u2014 "),kk=n(v3e,"A",{href:!0});var _Or=s(kk);rWe=r(_Or,"LxmertConfig"),_Or.forEach(t),tWe=r(v3e," (LXMERT model)"),v3e.forEach(t),aWe=i(y),pm=n(y,"LI",{});var F3e=s(pm);qoe=n(F3e,"STRONG",{});var uOr=s(qoe);nWe=r(uOr,"m2m_100"),uOr.forEach(t),sWe=r(F3e," \u2014 "),Sk=n(F3e,"A",{href:!0});var bOr=s(Sk);lWe=r(bOr,"M2M100Config"),bOr.forEach(t),iWe=r(F3e," (M2M100 model)"),F3e.forEach(t),dWe=i(y),_m=n(y,"LI",{});var T3e=s(_m);Noe=n(T3e,"STRONG",{});var vOr=s(Noe);cWe=r(vOr,"marian"),vOr.forEach(t),fWe=r(T3e," \u2014 "),Rk=n(T3e,"A",{href:!0});var FOr=s(Rk);mWe=r(FOr,"MarianConfig"),FOr.forEach(t),gWe=r(T3e," (Marian model)"),T3e.forEach(t),hWe=i(y),um=n(y,"LI",{});var M3e=s(um);joe=n(M3e,"STRONG",{});var TOr=s(joe);pWe=r(TOr,"maskformer"),TOr.forEach(t),_We=r(M3e," \u2014 "),Pk=n(M3e,"A",{href:!0});var MOr=s(Pk);uWe=r(MOr,"MaskFormerConfig"),MOr.forEach(t),bWe=r(M3e," (MaskFormer model)"),M3e.forEach(t),vWe=i(y),bm=n(y,"LI",{});var E3e=s(bm);Doe=n(E3e,"STRONG",{});var EOr=s(Doe);FWe=r(EOr,"mbart"),EOr.forEach(t),TWe=r(E3e," \u2014 "),Bk=n(E3e,"A",{href:!0});var COr=s(Bk);MWe=r(COr,"MBartConfig"),COr.forEach(t),EWe=r(E3e," (mBART model)"),E3e.forEach(t),CWe=i(y),vm=n(y,"LI",{});var C3e=s(vm);Goe=n(C3e,"STRONG",{});var wOr=s(Goe);wWe=r(wOr,"megatron-bert"),wOr.forEach(t),AWe=r(C3e," \u2014 "),Ik=n(C3e,"A",{href:!0});var AOr=s(Ik);yWe=r(AOr,"MegatronBertConfig"),AOr.forEach(t),LWe=r(C3e," (MegatronBert model)"),C3e.forEach(t),xWe=i(y),Fm=n(y,"LI",{});var w3e=s(Fm);Ooe=n(w3e,"STRONG",{});var yOr=s(Ooe);$We=r(yOr,"mobilebert"),yOr.forEach(t),kWe=r(w3e," \u2014 "),qk=n(w3e,"A",{href:!0});var LOr=s(qk);SWe=r(LOr,"MobileBertConfig"),LOr.forEach(t),RWe=r(w3e," (MobileBERT model)"),w3e.forEach(t),PWe=i(y),Tm=n(y,"LI",{});var A3e=s(Tm);Voe=n(A3e,"STRONG",{});var xOr=s(Voe);BWe=r(xOr,"mpnet"),xOr.forEach(t),IWe=r(A3e," \u2014 "),Nk=n(A3e,"A",{href:!0});var $Or=s(Nk);qWe=r($Or,"MPNetConfig"),$Or.forEach(t),NWe=r(A3e," (MPNet model)"),A3e.forEach(t),jWe=i(y),Mm=n(y,"LI",{});var y3e=s(Mm);Xoe=n(y3e,"STRONG",{});var kOr=s(Xoe);DWe=r(kOr,"mt5"),kOr.forEach(t),GWe=r(y3e," \u2014 "),jk=n(y3e,"A",{href:!0});var SOr=s(jk);OWe=r(SOr,"MT5Config"),SOr.forEach(t),VWe=r(y3e," (mT5 model)"),y3e.forEach(t),XWe=i(y),Em=n(y,"LI",{});var L3e=s(Em);zoe=n(L3e,"STRONG",{});var ROr=s(zoe);zWe=r(ROr,"nystromformer"),ROr.forEach(t),WWe=r(L3e," \u2014 "),Dk=n(L3e,"A",{href:!0});var POr=s(Dk);QWe=r(POr,"NystromformerConfig"),POr.forEach(t),HWe=r(L3e," (Nystromformer model)"),L3e.forEach(t),UWe=i(y),Cm=n(y,"LI",{});var x3e=s(Cm);Woe=n(x3e,"STRONG",{});var BOr=s(Woe);JWe=r(BOr,"openai-gpt"),BOr.forEach(t),YWe=r(x3e," \u2014 "),Gk=n(x3e,"A",{href:!0});var IOr=s(Gk);KWe=r(IOr,"OpenAIGPTConfig"),IOr.forEach(t),ZWe=r(x3e," (OpenAI GPT model)"),x3e.forEach(t),eQe=i(y),wm=n(y,"LI",{});var $3e=s(wm);Qoe=n($3e,"STRONG",{});var qOr=s(Qoe);oQe=r(qOr,"opt"),qOr.forEach(t),rQe=r($3e," \u2014 "),Ok=n($3e,"A",{href:!0});var NOr=s(Ok);tQe=r(NOr,"OPTConfig"),NOr.forEach(t),aQe=r($3e," (OPT model)"),$3e.forEach(t),nQe=i(y),Am=n(y,"LI",{});var k3e=s(Am);Hoe=n(k3e,"STRONG",{});var jOr=s(Hoe);sQe=r(jOr,"pegasus"),jOr.forEach(t),lQe=r(k3e," \u2014 "),Vk=n(k3e,"A",{href:!0});var DOr=s(Vk);iQe=r(DOr,"PegasusConfig"),DOr.forEach(t),dQe=r(k3e," (Pegasus model)"),k3e.forEach(t),cQe=i(y),ym=n(y,"LI",{});var S3e=s(ym);Uoe=n(S3e,"STRONG",{});var GOr=s(Uoe);fQe=r(GOr,"perceiver"),GOr.forEach(t),mQe=r(S3e," \u2014 "),Xk=n(S3e,"A",{href:!0});var OOr=s(Xk);gQe=r(OOr,"PerceiverConfig"),OOr.forEach(t),hQe=r(S3e," (Perceiver model)"),S3e.forEach(t),pQe=i(y),Lm=n(y,"LI",{});var R3e=s(Lm);Joe=n(R3e,"STRONG",{});var VOr=s(Joe);_Qe=r(VOr,"plbart"),VOr.forEach(t),uQe=r(R3e," \u2014 "),zk=n(R3e,"A",{href:!0});var XOr=s(zk);bQe=r(XOr,"PLBartConfig"),XOr.forEach(t),vQe=r(R3e," (PLBart model)"),R3e.forEach(t),FQe=i(y),xm=n(y,"LI",{});var P3e=s(xm);Yoe=n(P3e,"STRONG",{});var zOr=s(Yoe);TQe=r(zOr,"poolformer"),zOr.forEach(t),MQe=r(P3e," \u2014 "),Wk=n(P3e,"A",{href:!0});var WOr=s(Wk);EQe=r(WOr,"PoolFormerConfig"),WOr.forEach(t),CQe=r(P3e," (PoolFormer model)"),P3e.forEach(t),wQe=i(y),$m=n(y,"LI",{});var B3e=s($m);Koe=n(B3e,"STRONG",{});var QOr=s(Koe);AQe=r(QOr,"prophetnet"),QOr.forEach(t),yQe=r(B3e," \u2014 "),Qk=n(B3e,"A",{href:!0});var HOr=s(Qk);LQe=r(HOr,"ProphetNetConfig"),HOr.forEach(t),xQe=r(B3e," (ProphetNet model)"),B3e.forEach(t),$Qe=i(y),km=n(y,"LI",{});var I3e=s(km);Zoe=n(I3e,"STRONG",{});var UOr=s(Zoe);kQe=r(UOr,"qdqbert"),UOr.forEach(t),SQe=r(I3e," \u2014 "),Hk=n(I3e,"A",{href:!0});var JOr=s(Hk);RQe=r(JOr,"QDQBertConfig"),JOr.forEach(t),PQe=r(I3e," (QDQBert model)"),I3e.forEach(t),BQe=i(y),Sm=n(y,"LI",{});var q3e=s(Sm);ere=n(q3e,"STRONG",{});var YOr=s(ere);IQe=r(YOr,"rag"),YOr.forEach(t),qQe=r(q3e," \u2014 "),Uk=n(q3e,"A",{href:!0});var KOr=s(Uk);NQe=r(KOr,"RagConfig"),KOr.forEach(t),jQe=r(q3e," (RAG model)"),q3e.forEach(t),DQe=i(y),Rm=n(y,"LI",{});var N3e=s(Rm);ore=n(N3e,"STRONG",{});var ZOr=s(ore);GQe=r(ZOr,"realm"),ZOr.forEach(t),OQe=r(N3e," \u2014 "),Jk=n(N3e,"A",{href:!0});var eVr=s(Jk);VQe=r(eVr,"RealmConfig"),eVr.forEach(t),XQe=r(N3e," (Realm model)"),N3e.forEach(t),zQe=i(y),Pm=n(y,"LI",{});var j3e=s(Pm);rre=n(j3e,"STRONG",{});var oVr=s(rre);WQe=r(oVr,"reformer"),oVr.forEach(t),QQe=r(j3e," \u2014 "),Yk=n(j3e,"A",{href:!0});var rVr=s(Yk);HQe=r(rVr,"ReformerConfig"),rVr.forEach(t),UQe=r(j3e," (Reformer model)"),j3e.forEach(t),JQe=i(y),Bm=n(y,"LI",{});var D3e=s(Bm);tre=n(D3e,"STRONG",{});var tVr=s(tre);YQe=r(tVr,"regnet"),tVr.forEach(t),KQe=r(D3e," \u2014 "),Kk=n(D3e,"A",{href:!0});var aVr=s(Kk);ZQe=r(aVr,"RegNetConfig"),aVr.forEach(t),eHe=r(D3e," (RegNet model)"),D3e.forEach(t),oHe=i(y),Im=n(y,"LI",{});var G3e=s(Im);are=n(G3e,"STRONG",{});var nVr=s(are);rHe=r(nVr,"rembert"),nVr.forEach(t),tHe=r(G3e," \u2014 "),Zk=n(G3e,"A",{href:!0});var sVr=s(Zk);aHe=r(sVr,"RemBertConfig"),sVr.forEach(t),nHe=r(G3e," (RemBERT model)"),G3e.forEach(t),sHe=i(y),qm=n(y,"LI",{});var O3e=s(qm);nre=n(O3e,"STRONG",{});var lVr=s(nre);lHe=r(lVr,"resnet"),lVr.forEach(t),iHe=r(O3e," \u2014 "),eS=n(O3e,"A",{href:!0});var iVr=s(eS);dHe=r(iVr,"ResNetConfig"),iVr.forEach(t),cHe=r(O3e," (ResNet model)"),O3e.forEach(t),fHe=i(y),Nm=n(y,"LI",{});var V3e=s(Nm);sre=n(V3e,"STRONG",{});var dVr=s(sre);mHe=r(dVr,"retribert"),dVr.forEach(t),gHe=r(V3e," \u2014 "),oS=n(V3e,"A",{href:!0});var cVr=s(oS);hHe=r(cVr,"RetriBertConfig"),cVr.forEach(t),pHe=r(V3e," (RetriBERT model)"),V3e.forEach(t),_He=i(y),jm=n(y,"LI",{});var X3e=s(jm);lre=n(X3e,"STRONG",{});var fVr=s(lre);uHe=r(fVr,"roberta"),fVr.forEach(t),bHe=r(X3e," \u2014 "),rS=n(X3e,"A",{href:!0});var mVr=s(rS);vHe=r(mVr,"RobertaConfig"),mVr.forEach(t),FHe=r(X3e," (RoBERTa model)"),X3e.forEach(t),THe=i(y),Dm=n(y,"LI",{});var z3e=s(Dm);ire=n(z3e,"STRONG",{});var gVr=s(ire);MHe=r(gVr,"roformer"),gVr.forEach(t),EHe=r(z3e," \u2014 "),tS=n(z3e,"A",{href:!0});var hVr=s(tS);CHe=r(hVr,"RoFormerConfig"),hVr.forEach(t),wHe=r(z3e," (RoFormer model)"),z3e.forEach(t),AHe=i(y),Gm=n(y,"LI",{});var W3e=s(Gm);dre=n(W3e,"STRONG",{});var pVr=s(dre);yHe=r(pVr,"segformer"),pVr.forEach(t),LHe=r(W3e," \u2014 "),aS=n(W3e,"A",{href:!0});var _Vr=s(aS);xHe=r(_Vr,"SegformerConfig"),_Vr.forEach(t),$He=r(W3e," (SegFormer model)"),W3e.forEach(t),kHe=i(y),Om=n(y,"LI",{});var Q3e=s(Om);cre=n(Q3e,"STRONG",{});var uVr=s(cre);SHe=r(uVr,"sew"),uVr.forEach(t),RHe=r(Q3e," \u2014 "),nS=n(Q3e,"A",{href:!0});var bVr=s(nS);PHe=r(bVr,"SEWConfig"),bVr.forEach(t),BHe=r(Q3e," (SEW model)"),Q3e.forEach(t),IHe=i(y),Vm=n(y,"LI",{});var H3e=s(Vm);fre=n(H3e,"STRONG",{});var vVr=s(fre);qHe=r(vVr,"sew-d"),vVr.forEach(t),NHe=r(H3e," \u2014 "),sS=n(H3e,"A",{href:!0});var FVr=s(sS);jHe=r(FVr,"SEWDConfig"),FVr.forEach(t),DHe=r(H3e," (SEW-D model)"),H3e.forEach(t),GHe=i(y),Xm=n(y,"LI",{});var U3e=s(Xm);mre=n(U3e,"STRONG",{});var TVr=s(mre);OHe=r(TVr,"speech-encoder-decoder"),TVr.forEach(t),VHe=r(U3e," \u2014 "),lS=n(U3e,"A",{href:!0});var MVr=s(lS);XHe=r(MVr,"SpeechEncoderDecoderConfig"),MVr.forEach(t),zHe=r(U3e," (Speech Encoder decoder model)"),U3e.forEach(t),WHe=i(y),zm=n(y,"LI",{});var J3e=s(zm);gre=n(J3e,"STRONG",{});var EVr=s(gre);QHe=r(EVr,"speech_to_text"),EVr.forEach(t),HHe=r(J3e," \u2014 "),iS=n(J3e,"A",{href:!0});var CVr=s(iS);UHe=r(CVr,"Speech2TextConfig"),CVr.forEach(t),JHe=r(J3e," (Speech2Text model)"),J3e.forEach(t),YHe=i(y),Wm=n(y,"LI",{});var Y3e=s(Wm);hre=n(Y3e,"STRONG",{});var wVr=s(hre);KHe=r(wVr,"speech_to_text_2"),wVr.forEach(t),ZHe=r(Y3e," \u2014 "),dS=n(Y3e,"A",{href:!0});var AVr=s(dS);eUe=r(AVr,"Speech2Text2Config"),AVr.forEach(t),oUe=r(Y3e," (Speech2Text2 model)"),Y3e.forEach(t),rUe=i(y),Qm=n(y,"LI",{});var K3e=s(Qm);pre=n(K3e,"STRONG",{});var yVr=s(pre);tUe=r(yVr,"splinter"),yVr.forEach(t),aUe=r(K3e," \u2014 "),cS=n(K3e,"A",{href:!0});var LVr=s(cS);nUe=r(LVr,"SplinterConfig"),LVr.forEach(t),sUe=r(K3e," (Splinter model)"),K3e.forEach(t),lUe=i(y),Hm=n(y,"LI",{});var Z3e=s(Hm);_re=n(Z3e,"STRONG",{});var xVr=s(_re);iUe=r(xVr,"squeezebert"),xVr.forEach(t),dUe=r(Z3e," \u2014 "),fS=n(Z3e,"A",{href:!0});var $Vr=s(fS);cUe=r($Vr,"SqueezeBertConfig"),$Vr.forEach(t),fUe=r(Z3e," (SqueezeBERT model)"),Z3e.forEach(t),mUe=i(y),Um=n(y,"LI",{});var ewe=s(Um);ure=n(ewe,"STRONG",{});var kVr=s(ure);gUe=r(kVr,"swin"),kVr.forEach(t),hUe=r(ewe," \u2014 "),mS=n(ewe,"A",{href:!0});var SVr=s(mS);pUe=r(SVr,"SwinConfig"),SVr.forEach(t),_Ue=r(ewe," (Swin model)"),ewe.forEach(t),uUe=i(y),Jm=n(y,"LI",{});var owe=s(Jm);bre=n(owe,"STRONG",{});var RVr=s(bre);bUe=r(RVr,"t5"),RVr.forEach(t),vUe=r(owe," \u2014 "),gS=n(owe,"A",{href:!0});var PVr=s(gS);FUe=r(PVr,"T5Config"),PVr.forEach(t),TUe=r(owe," (T5 model)"),owe.forEach(t),MUe=i(y),Ym=n(y,"LI",{});var rwe=s(Ym);vre=n(rwe,"STRONG",{});var BVr=s(vre);EUe=r(BVr,"tapas"),BVr.forEach(t),CUe=r(rwe," \u2014 "),hS=n(rwe,"A",{href:!0});var IVr=s(hS);wUe=r(IVr,"TapasConfig"),IVr.forEach(t),AUe=r(rwe," (TAPAS model)"),rwe.forEach(t),yUe=i(y),Km=n(y,"LI",{});var twe=s(Km);Fre=n(twe,"STRONG",{});var qVr=s(Fre);LUe=r(qVr,"trajectory_transformer"),qVr.forEach(t),xUe=r(twe," \u2014 "),pS=n(twe,"A",{href:!0});var NVr=s(pS);$Ue=r(NVr,"TrajectoryTransformerConfig"),NVr.forEach(t),kUe=r(twe," (Trajectory Transformer model)"),twe.forEach(t),SUe=i(y),Zm=n(y,"LI",{});var awe=s(Zm);Tre=n(awe,"STRONG",{});var jVr=s(Tre);RUe=r(jVr,"transfo-xl"),jVr.forEach(t),PUe=r(awe," \u2014 "),_S=n(awe,"A",{href:!0});var DVr=s(_S);BUe=r(DVr,"TransfoXLConfig"),DVr.forEach(t),IUe=r(awe," (Transformer-XL model)"),awe.forEach(t),qUe=i(y),eg=n(y,"LI",{});var nwe=s(eg);Mre=n(nwe,"STRONG",{});var GVr=s(Mre);NUe=r(GVr,"trocr"),GVr.forEach(t),jUe=r(nwe," \u2014 "),uS=n(nwe,"A",{href:!0});var OVr=s(uS);DUe=r(OVr,"TrOCRConfig"),OVr.forEach(t),GUe=r(nwe," (TrOCR model)"),nwe.forEach(t),OUe=i(y),og=n(y,"LI",{});var swe=s(og);Ere=n(swe,"STRONG",{});var VVr=s(Ere);VUe=r(VVr,"unispeech"),VVr.forEach(t),XUe=r(swe," \u2014 "),bS=n(swe,"A",{href:!0});var XVr=s(bS);zUe=r(XVr,"UniSpeechConfig"),XVr.forEach(t),WUe=r(swe," (UniSpeech model)"),swe.forEach(t),QUe=i(y),rg=n(y,"LI",{});var lwe=s(rg);Cre=n(lwe,"STRONG",{});var zVr=s(Cre);HUe=r(zVr,"unispeech-sat"),zVr.forEach(t),UUe=r(lwe," \u2014 "),vS=n(lwe,"A",{href:!0});var WVr=s(vS);JUe=r(WVr,"UniSpeechSatConfig"),WVr.forEach(t),YUe=r(lwe," (UniSpeechSat model)"),lwe.forEach(t),KUe=i(y),tg=n(y,"LI",{});var iwe=s(tg);wre=n(iwe,"STRONG",{});var QVr=s(wre);ZUe=r(QVr,"van"),QVr.forEach(t),eJe=r(iwe," \u2014 "),FS=n(iwe,"A",{href:!0});var HVr=s(FS);oJe=r(HVr,"VanConfig"),HVr.forEach(t),rJe=r(iwe," (VAN model)"),iwe.forEach(t),tJe=i(y),ag=n(y,"LI",{});var dwe=s(ag);Are=n(dwe,"STRONG",{});var UVr=s(Are);aJe=r(UVr,"vilt"),UVr.forEach(t),nJe=r(dwe," \u2014 "),TS=n(dwe,"A",{href:!0});var JVr=s(TS);sJe=r(JVr,"ViltConfig"),JVr.forEach(t),lJe=r(dwe," (ViLT model)"),dwe.forEach(t),iJe=i(y),ng=n(y,"LI",{});var cwe=s(ng);yre=n(cwe,"STRONG",{});var YVr=s(yre);dJe=r(YVr,"vision-encoder-decoder"),YVr.forEach(t),cJe=r(cwe," \u2014 "),MS=n(cwe,"A",{href:!0});var KVr=s(MS);fJe=r(KVr,"VisionEncoderDecoderConfig"),KVr.forEach(t),mJe=r(cwe," (Vision Encoder decoder model)"),cwe.forEach(t),gJe=i(y),sg=n(y,"LI",{});var fwe=s(sg);Lre=n(fwe,"STRONG",{});var ZVr=s(Lre);hJe=r(ZVr,"vision-text-dual-encoder"),ZVr.forEach(t),pJe=r(fwe," \u2014 "),ES=n(fwe,"A",{href:!0});var eXr=s(ES);_Je=r(eXr,"VisionTextDualEncoderConfig"),eXr.forEach(t),uJe=r(fwe," (VisionTextDualEncoder model)"),fwe.forEach(t),bJe=i(y),lg=n(y,"LI",{});var mwe=s(lg);xre=n(mwe,"STRONG",{});var oXr=s(xre);vJe=r(oXr,"visual_bert"),oXr.forEach(t),FJe=r(mwe," \u2014 "),CS=n(mwe,"A",{href:!0});var rXr=s(CS);TJe=r(rXr,"VisualBertConfig"),rXr.forEach(t),MJe=r(mwe," (VisualBert model)"),mwe.forEach(t),EJe=i(y),ig=n(y,"LI",{});var gwe=s(ig);$re=n(gwe,"STRONG",{});var tXr=s($re);CJe=r(tXr,"vit"),tXr.forEach(t),wJe=r(gwe," \u2014 "),wS=n(gwe,"A",{href:!0});var aXr=s(wS);AJe=r(aXr,"ViTConfig"),aXr.forEach(t),yJe=r(gwe," (ViT model)"),gwe.forEach(t),LJe=i(y),dg=n(y,"LI",{});var hwe=s(dg);kre=n(hwe,"STRONG",{});var nXr=s(kre);xJe=r(nXr,"vit_mae"),nXr.forEach(t),$Je=r(hwe," \u2014 "),AS=n(hwe,"A",{href:!0});var sXr=s(AS);kJe=r(sXr,"ViTMAEConfig"),sXr.forEach(t),SJe=r(hwe," (ViTMAE model)"),hwe.forEach(t),RJe=i(y),cg=n(y,"LI",{});var pwe=s(cg);Sre=n(pwe,"STRONG",{});var lXr=s(Sre);PJe=r(lXr,"wav2vec2"),lXr.forEach(t),BJe=r(pwe," \u2014 "),yS=n(pwe,"A",{href:!0});var iXr=s(yS);IJe=r(iXr,"Wav2Vec2Config"),iXr.forEach(t),qJe=r(pwe," (Wav2Vec2 model)"),pwe.forEach(t),NJe=i(y),fg=n(y,"LI",{});var _we=s(fg);Rre=n(_we,"STRONG",{});var dXr=s(Rre);jJe=r(dXr,"wav2vec2-conformer"),dXr.forEach(t),DJe=r(_we," \u2014 "),LS=n(_we,"A",{href:!0});var cXr=s(LS);GJe=r(cXr,"Wav2Vec2ConformerConfig"),cXr.forEach(t),OJe=r(_we," (Wav2Vec2-Conformer model)"),_we.forEach(t),VJe=i(y),mg=n(y,"LI",{});var uwe=s(mg);Pre=n(uwe,"STRONG",{});var fXr=s(Pre);XJe=r(fXr,"wavlm"),fXr.forEach(t),zJe=r(uwe," \u2014 "),xS=n(uwe,"A",{href:!0});var mXr=s(xS);WJe=r(mXr,"WavLMConfig"),mXr.forEach(t),QJe=r(uwe," (WavLM model)"),uwe.forEach(t),HJe=i(y),gg=n(y,"LI",{});var bwe=s(gg);Bre=n(bwe,"STRONG",{});var gXr=s(Bre);UJe=r(gXr,"xglm"),gXr.forEach(t),JJe=r(bwe," \u2014 "),$S=n(bwe,"A",{href:!0});var hXr=s($S);YJe=r(hXr,"XGLMConfig"),hXr.forEach(t),KJe=r(bwe," (XGLM model)"),bwe.forEach(t),ZJe=i(y),hg=n(y,"LI",{});var vwe=s(hg);Ire=n(vwe,"STRONG",{});var pXr=s(Ire);eYe=r(pXr,"xlm"),pXr.forEach(t),oYe=r(vwe," \u2014 "),kS=n(vwe,"A",{href:!0});var _Xr=s(kS);rYe=r(_Xr,"XLMConfig"),_Xr.forEach(t),tYe=r(vwe," (XLM model)"),vwe.forEach(t),aYe=i(y),pg=n(y,"LI",{});var Fwe=s(pg);qre=n(Fwe,"STRONG",{});var uXr=s(qre);nYe=r(uXr,"xlm-prophetnet"),uXr.forEach(t),sYe=r(Fwe," \u2014 "),SS=n(Fwe,"A",{href:!0});var bXr=s(SS);lYe=r(bXr,"XLMProphetNetConfig"),bXr.forEach(t),iYe=r(Fwe," (XLMProphetNet model)"),Fwe.forEach(t),dYe=i(y),_g=n(y,"LI",{});var Twe=s(_g);Nre=n(Twe,"STRONG",{});var vXr=s(Nre);cYe=r(vXr,"xlm-roberta"),vXr.forEach(t),fYe=r(Twe," \u2014 "),RS=n(Twe,"A",{href:!0});var FXr=s(RS);mYe=r(FXr,"XLMRobertaConfig"),FXr.forEach(t),gYe=r(Twe," (XLM-RoBERTa model)"),Twe.forEach(t),hYe=i(y),ug=n(y,"LI",{});var Mwe=s(ug);jre=n(Mwe,"STRONG",{});var TXr=s(jre);pYe=r(TXr,"xlm-roberta-xl"),TXr.forEach(t),_Ye=r(Mwe," \u2014 "),PS=n(Mwe,"A",{href:!0});var MXr=s(PS);uYe=r(MXr,"XLMRobertaXLConfig"),MXr.forEach(t),bYe=r(Mwe," (XLM-RoBERTa-XL model)"),Mwe.forEach(t),vYe=i(y),bg=n(y,"LI",{});var Ewe=s(bg);Dre=n(Ewe,"STRONG",{});var EXr=s(Dre);FYe=r(EXr,"xlnet"),EXr.forEach(t),TYe=r(Ewe," \u2014 "),BS=n(Ewe,"A",{href:!0});var CXr=s(BS);MYe=r(CXr,"XLNetConfig"),CXr.forEach(t),EYe=r(Ewe," (XLNet model)"),Ewe.forEach(t),CYe=i(y),vg=n(y,"LI",{});var Cwe=s(vg);Gre=n(Cwe,"STRONG",{});var wXr=s(Gre);wYe=r(wXr,"yolos"),wXr.forEach(t),AYe=r(Cwe," \u2014 "),IS=n(Cwe,"A",{href:!0});var AXr=s(IS);yYe=r(AXr,"YolosConfig"),AXr.forEach(t),LYe=r(Cwe," (YOLOS model)"),Cwe.forEach(t),xYe=i(y),Fg=n(y,"LI",{});var wwe=s(Fg);Ore=n(wwe,"STRONG",{});var yXr=s(Ore);$Ye=r(yXr,"yoso"),yXr.forEach(t),kYe=r(wwe," \u2014 "),qS=n(wwe,"A",{href:!0});var LXr=s(qS);SYe=r(LXr,"YosoConfig"),LXr.forEach(t),RYe=r(wwe," (YOSO model)"),wwe.forEach(t),y.forEach(t),PYe=i(ot),T(Tg.$$.fragment,ot),ot.forEach(t),BYe=i(et),Mg=n(et,"DIV",{class:!0});var aje=s(Mg);T(T6.$$.fragment,aje),IYe=i(aje),Vre=n(aje,"P",{});var xXr=s(Vre);qYe=r(xXr,"Register a new configuration for this class."),xXr.forEach(t),aje.forEach(t),et.forEach(t),lqe=i(f),Ti=n(f,"H2",{class:!0});var nje=s(Ti);Eg=n(nje,"A",{id:!0,class:!0,href:!0});var $Xr=s(Eg);Xre=n($Xr,"SPAN",{});var kXr=s(Xre);T(M6.$$.fragment,kXr),kXr.forEach(t),$Xr.forEach(t),NYe=i(nje),zre=n(nje,"SPAN",{});var SXr=s(zre);jYe=r(SXr,"AutoTokenizer"),SXr.forEach(t),nje.forEach(t),iqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(E6.$$.fragment,qs),DYe=i(qs),C6=n(qs,"P",{});var sje=s(C6);GYe=r(sje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=n(sje,"A",{href:!0});var RXr=s(NS);OYe=r(RXr,"AutoTokenizer.from_pretrained()"),RXr.forEach(t),VYe=r(sje," class method."),sje.forEach(t),XYe=i(qs),w6=n(qs,"P",{});var lje=s(w6);zYe=r(lje,"This class cannot be instantiated directly using "),Wre=n(lje,"CODE",{});var PXr=s(Wre);WYe=r(PXr,"__init__()"),PXr.forEach(t),QYe=r(lje," (throws an error)."),lje.forEach(t),HYe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(A6.$$.fragment,Ns),UYe=i(Ns),Qre=n(Ns,"P",{});var BXr=s(Qre);JYe=r(BXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),BXr.forEach(t),YYe=i(Ns),Aa=n(Ns,"P",{});var _0=s(Aa);KYe=r(_0,"The tokenizer class to instantiate is selected based on the "),Hre=n(_0,"CODE",{});var IXr=s(Hre);ZYe=r(IXr,"model_type"),IXr.forEach(t),eKe=r(_0,` property of the config object (either
passed as an argument or loaded from `),Ure=n(_0,"CODE",{});var qXr=s(Ure);oKe=r(qXr,"pretrained_model_name_or_path"),qXr.forEach(t),rKe=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jre=n(_0,"CODE",{});var NXr=s(Jre);tKe=r(NXr,"pretrained_model_name_or_path"),NXr.forEach(t),aKe=r(_0,":"),_0.forEach(t),nKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var yx=s(Sn);Yre=n(yx,"STRONG",{});var jXr=s(Yre);sKe=r(jXr,"albert"),jXr.forEach(t),lKe=r(yx," \u2014 "),jS=n(yx,"A",{href:!0});var DXr=s(jS);iKe=r(DXr,"AlbertTokenizer"),DXr.forEach(t),dKe=r(yx," or "),DS=n(yx,"A",{href:!0});var GXr=s(DS);cKe=r(GXr,"AlbertTokenizerFast"),GXr.forEach(t),fKe=r(yx," (ALBERT model)"),yx.forEach(t),mKe=i(S),Rn=n(S,"LI",{});var Lx=s(Rn);Kre=n(Lx,"STRONG",{});var OXr=s(Kre);gKe=r(OXr,"bart"),OXr.forEach(t),hKe=r(Lx," \u2014 "),GS=n(Lx,"A",{href:!0});var VXr=s(GS);pKe=r(VXr,"BartTokenizer"),VXr.forEach(t),_Ke=r(Lx," or "),OS=n(Lx,"A",{href:!0});var XXr=s(OS);uKe=r(XXr,"BartTokenizerFast"),XXr.forEach(t),bKe=r(Lx," (BART model)"),Lx.forEach(t),vKe=i(S),Pn=n(S,"LI",{});var xx=s(Pn);Zre=n(xx,"STRONG",{});var zXr=s(Zre);FKe=r(zXr,"barthez"),zXr.forEach(t),TKe=r(xx," \u2014 "),VS=n(xx,"A",{href:!0});var WXr=s(VS);MKe=r(WXr,"BarthezTokenizer"),WXr.forEach(t),EKe=r(xx," or "),XS=n(xx,"A",{href:!0});var QXr=s(XS);CKe=r(QXr,"BarthezTokenizerFast"),QXr.forEach(t),wKe=r(xx," (BARThez model)"),xx.forEach(t),AKe=i(S),Bn=n(S,"LI",{});var $x=s(Bn);ete=n($x,"STRONG",{});var HXr=s(ete);yKe=r(HXr,"bartpho"),HXr.forEach(t),LKe=r($x," \u2014 "),zS=n($x,"A",{href:!0});var UXr=s(zS);xKe=r(UXr,"BartphoTokenizer"),UXr.forEach(t),$Ke=r($x," or "),WS=n($x,"A",{href:!0});var JXr=s(WS);kKe=r(JXr,"BartphoTokenizerFast"),JXr.forEach(t),SKe=r($x," (BARTpho model)"),$x.forEach(t),RKe=i(S),In=n(S,"LI",{});var kx=s(In);ote=n(kx,"STRONG",{});var YXr=s(ote);PKe=r(YXr,"bert"),YXr.forEach(t),BKe=r(kx," \u2014 "),QS=n(kx,"A",{href:!0});var KXr=s(QS);IKe=r(KXr,"BertTokenizer"),KXr.forEach(t),qKe=r(kx," or "),HS=n(kx,"A",{href:!0});var ZXr=s(HS);NKe=r(ZXr,"BertTokenizerFast"),ZXr.forEach(t),jKe=r(kx," (BERT model)"),kx.forEach(t),DKe=i(S),Cg=n(S,"LI",{});var Awe=s(Cg);rte=n(Awe,"STRONG",{});var ezr=s(rte);GKe=r(ezr,"bert-generation"),ezr.forEach(t),OKe=r(Awe," \u2014 "),US=n(Awe,"A",{href:!0});var ozr=s(US);VKe=r(ozr,"BertGenerationTokenizer"),ozr.forEach(t),XKe=r(Awe," (Bert Generation model)"),Awe.forEach(t),zKe=i(S),wg=n(S,"LI",{});var ywe=s(wg);tte=n(ywe,"STRONG",{});var rzr=s(tte);WKe=r(rzr,"bert-japanese"),rzr.forEach(t),QKe=r(ywe," \u2014 "),JS=n(ywe,"A",{href:!0});var tzr=s(JS);HKe=r(tzr,"BertJapaneseTokenizer"),tzr.forEach(t),UKe=r(ywe," (BertJapanese model)"),ywe.forEach(t),JKe=i(S),Ag=n(S,"LI",{});var Lwe=s(Ag);ate=n(Lwe,"STRONG",{});var azr=s(ate);YKe=r(azr,"bertweet"),azr.forEach(t),KKe=r(Lwe," \u2014 "),YS=n(Lwe,"A",{href:!0});var nzr=s(YS);ZKe=r(nzr,"BertweetTokenizer"),nzr.forEach(t),eZe=r(Lwe," (Bertweet model)"),Lwe.forEach(t),oZe=i(S),qn=n(S,"LI",{});var Sx=s(qn);nte=n(Sx,"STRONG",{});var szr=s(nte);rZe=r(szr,"big_bird"),szr.forEach(t),tZe=r(Sx," \u2014 "),KS=n(Sx,"A",{href:!0});var lzr=s(KS);aZe=r(lzr,"BigBirdTokenizer"),lzr.forEach(t),nZe=r(Sx," or "),ZS=n(Sx,"A",{href:!0});var izr=s(ZS);sZe=r(izr,"BigBirdTokenizerFast"),izr.forEach(t),lZe=r(Sx," (BigBird model)"),Sx.forEach(t),iZe=i(S),Nn=n(S,"LI",{});var Rx=s(Nn);ste=n(Rx,"STRONG",{});var dzr=s(ste);dZe=r(dzr,"bigbird_pegasus"),dzr.forEach(t),cZe=r(Rx," \u2014 "),eR=n(Rx,"A",{href:!0});var czr=s(eR);fZe=r(czr,"PegasusTokenizer"),czr.forEach(t),mZe=r(Rx," or "),oR=n(Rx,"A",{href:!0});var fzr=s(oR);gZe=r(fzr,"PegasusTokenizerFast"),fzr.forEach(t),hZe=r(Rx," (BigBirdPegasus model)"),Rx.forEach(t),pZe=i(S),jn=n(S,"LI",{});var Px=s(jn);lte=n(Px,"STRONG",{});var mzr=s(lte);_Ze=r(mzr,"blenderbot"),mzr.forEach(t),uZe=r(Px," \u2014 "),rR=n(Px,"A",{href:!0});var gzr=s(rR);bZe=r(gzr,"BlenderbotTokenizer"),gzr.forEach(t),vZe=r(Px," or "),tR=n(Px,"A",{href:!0});var hzr=s(tR);FZe=r(hzr,"BlenderbotTokenizerFast"),hzr.forEach(t),TZe=r(Px," (Blenderbot model)"),Px.forEach(t),MZe=i(S),yg=n(S,"LI",{});var xwe=s(yg);ite=n(xwe,"STRONG",{});var pzr=s(ite);EZe=r(pzr,"blenderbot-small"),pzr.forEach(t),CZe=r(xwe," \u2014 "),aR=n(xwe,"A",{href:!0});var _zr=s(aR);wZe=r(_zr,"BlenderbotSmallTokenizer"),_zr.forEach(t),AZe=r(xwe," (BlenderbotSmall model)"),xwe.forEach(t),yZe=i(S),Lg=n(S,"LI",{});var $we=s(Lg);dte=n($we,"STRONG",{});var uzr=s(dte);LZe=r(uzr,"byt5"),uzr.forEach(t),xZe=r($we," \u2014 "),nR=n($we,"A",{href:!0});var bzr=s(nR);$Ze=r(bzr,"ByT5Tokenizer"),bzr.forEach(t),kZe=r($we," (ByT5 model)"),$we.forEach(t),SZe=i(S),Dn=n(S,"LI",{});var Bx=s(Dn);cte=n(Bx,"STRONG",{});var vzr=s(cte);RZe=r(vzr,"camembert"),vzr.forEach(t),PZe=r(Bx," \u2014 "),sR=n(Bx,"A",{href:!0});var Fzr=s(sR);BZe=r(Fzr,"CamembertTokenizer"),Fzr.forEach(t),IZe=r(Bx," or "),lR=n(Bx,"A",{href:!0});var Tzr=s(lR);qZe=r(Tzr,"CamembertTokenizerFast"),Tzr.forEach(t),NZe=r(Bx," (CamemBERT model)"),Bx.forEach(t),jZe=i(S),xg=n(S,"LI",{});var kwe=s(xg);fte=n(kwe,"STRONG",{});var Mzr=s(fte);DZe=r(Mzr,"canine"),Mzr.forEach(t),GZe=r(kwe," \u2014 "),iR=n(kwe,"A",{href:!0});var Ezr=s(iR);OZe=r(Ezr,"CanineTokenizer"),Ezr.forEach(t),VZe=r(kwe," (Canine model)"),kwe.forEach(t),XZe=i(S),Gn=n(S,"LI",{});var Ix=s(Gn);mte=n(Ix,"STRONG",{});var Czr=s(mte);zZe=r(Czr,"clip"),Czr.forEach(t),WZe=r(Ix," \u2014 "),dR=n(Ix,"A",{href:!0});var wzr=s(dR);QZe=r(wzr,"CLIPTokenizer"),wzr.forEach(t),HZe=r(Ix," or "),cR=n(Ix,"A",{href:!0});var Azr=s(cR);UZe=r(Azr,"CLIPTokenizerFast"),Azr.forEach(t),JZe=r(Ix," (CLIP model)"),Ix.forEach(t),YZe=i(S),On=n(S,"LI",{});var qx=s(On);gte=n(qx,"STRONG",{});var yzr=s(gte);KZe=r(yzr,"convbert"),yzr.forEach(t),ZZe=r(qx," \u2014 "),fR=n(qx,"A",{href:!0});var Lzr=s(fR);eeo=r(Lzr,"ConvBertTokenizer"),Lzr.forEach(t),oeo=r(qx," or "),mR=n(qx,"A",{href:!0});var xzr=s(mR);reo=r(xzr,"ConvBertTokenizerFast"),xzr.forEach(t),teo=r(qx," (ConvBERT model)"),qx.forEach(t),aeo=i(S),Vn=n(S,"LI",{});var Nx=s(Vn);hte=n(Nx,"STRONG",{});var $zr=s(hte);neo=r($zr,"cpm"),$zr.forEach(t),seo=r(Nx," \u2014 "),gR=n(Nx,"A",{href:!0});var kzr=s(gR);leo=r(kzr,"CpmTokenizer"),kzr.forEach(t),ieo=r(Nx," or "),hR=n(Nx,"A",{href:!0});var Szr=s(hR);deo=r(Szr,"CpmTokenizerFast"),Szr.forEach(t),ceo=r(Nx," (CPM model)"),Nx.forEach(t),feo=i(S),$g=n(S,"LI",{});var Swe=s($g);pte=n(Swe,"STRONG",{});var Rzr=s(pte);meo=r(Rzr,"ctrl"),Rzr.forEach(t),geo=r(Swe," \u2014 "),pR=n(Swe,"A",{href:!0});var Pzr=s(pR);heo=r(Pzr,"CTRLTokenizer"),Pzr.forEach(t),peo=r(Swe," (CTRL model)"),Swe.forEach(t),_eo=i(S),Xn=n(S,"LI",{});var jx=s(Xn);_te=n(jx,"STRONG",{});var Bzr=s(_te);ueo=r(Bzr,"data2vec-text"),Bzr.forEach(t),beo=r(jx," \u2014 "),_R=n(jx,"A",{href:!0});var Izr=s(_R);veo=r(Izr,"RobertaTokenizer"),Izr.forEach(t),Feo=r(jx," or "),uR=n(jx,"A",{href:!0});var qzr=s(uR);Teo=r(qzr,"RobertaTokenizerFast"),qzr.forEach(t),Meo=r(jx," (Data2VecText model)"),jx.forEach(t),Eeo=i(S),zn=n(S,"LI",{});var Dx=s(zn);ute=n(Dx,"STRONG",{});var Nzr=s(ute);Ceo=r(Nzr,"deberta"),Nzr.forEach(t),weo=r(Dx," \u2014 "),bR=n(Dx,"A",{href:!0});var jzr=s(bR);Aeo=r(jzr,"DebertaTokenizer"),jzr.forEach(t),yeo=r(Dx," or "),vR=n(Dx,"A",{href:!0});var Dzr=s(vR);Leo=r(Dzr,"DebertaTokenizerFast"),Dzr.forEach(t),xeo=r(Dx," (DeBERTa model)"),Dx.forEach(t),$eo=i(S),Wn=n(S,"LI",{});var Gx=s(Wn);bte=n(Gx,"STRONG",{});var Gzr=s(bte);keo=r(Gzr,"deberta-v2"),Gzr.forEach(t),Seo=r(Gx," \u2014 "),FR=n(Gx,"A",{href:!0});var Ozr=s(FR);Reo=r(Ozr,"DebertaV2Tokenizer"),Ozr.forEach(t),Peo=r(Gx," or "),TR=n(Gx,"A",{href:!0});var Vzr=s(TR);Beo=r(Vzr,"DebertaV2TokenizerFast"),Vzr.forEach(t),Ieo=r(Gx," (DeBERTa-v2 model)"),Gx.forEach(t),qeo=i(S),Qn=n(S,"LI",{});var Ox=s(Qn);vte=n(Ox,"STRONG",{});var Xzr=s(vte);Neo=r(Xzr,"distilbert"),Xzr.forEach(t),jeo=r(Ox," \u2014 "),MR=n(Ox,"A",{href:!0});var zzr=s(MR);Deo=r(zzr,"DistilBertTokenizer"),zzr.forEach(t),Geo=r(Ox," or "),ER=n(Ox,"A",{href:!0});var Wzr=s(ER);Oeo=r(Wzr,"DistilBertTokenizerFast"),Wzr.forEach(t),Veo=r(Ox," (DistilBERT model)"),Ox.forEach(t),Xeo=i(S),Hn=n(S,"LI",{});var Vx=s(Hn);Fte=n(Vx,"STRONG",{});var Qzr=s(Fte);zeo=r(Qzr,"dpr"),Qzr.forEach(t),Weo=r(Vx," \u2014 "),CR=n(Vx,"A",{href:!0});var Hzr=s(CR);Qeo=r(Hzr,"DPRQuestionEncoderTokenizer"),Hzr.forEach(t),Heo=r(Vx," or "),wR=n(Vx,"A",{href:!0});var Uzr=s(wR);Ueo=r(Uzr,"DPRQuestionEncoderTokenizerFast"),Uzr.forEach(t),Jeo=r(Vx," (DPR model)"),Vx.forEach(t),Yeo=i(S),Un=n(S,"LI",{});var Xx=s(Un);Tte=n(Xx,"STRONG",{});var Jzr=s(Tte);Keo=r(Jzr,"electra"),Jzr.forEach(t),Zeo=r(Xx," \u2014 "),AR=n(Xx,"A",{href:!0});var Yzr=s(AR);eoo=r(Yzr,"ElectraTokenizer"),Yzr.forEach(t),ooo=r(Xx," or "),yR=n(Xx,"A",{href:!0});var Kzr=s(yR);roo=r(Kzr,"ElectraTokenizerFast"),Kzr.forEach(t),too=r(Xx," (ELECTRA model)"),Xx.forEach(t),aoo=i(S),kg=n(S,"LI",{});var Rwe=s(kg);Mte=n(Rwe,"STRONG",{});var Zzr=s(Mte);noo=r(Zzr,"flaubert"),Zzr.forEach(t),soo=r(Rwe," \u2014 "),LR=n(Rwe,"A",{href:!0});var eWr=s(LR);loo=r(eWr,"FlaubertTokenizer"),eWr.forEach(t),ioo=r(Rwe," (FlauBERT model)"),Rwe.forEach(t),doo=i(S),Jn=n(S,"LI",{});var zx=s(Jn);Ete=n(zx,"STRONG",{});var oWr=s(Ete);coo=r(oWr,"fnet"),oWr.forEach(t),foo=r(zx," \u2014 "),xR=n(zx,"A",{href:!0});var rWr=s(xR);moo=r(rWr,"FNetTokenizer"),rWr.forEach(t),goo=r(zx," or "),$R=n(zx,"A",{href:!0});var tWr=s($R);hoo=r(tWr,"FNetTokenizerFast"),tWr.forEach(t),poo=r(zx," (FNet model)"),zx.forEach(t),_oo=i(S),Sg=n(S,"LI",{});var Pwe=s(Sg);Cte=n(Pwe,"STRONG",{});var aWr=s(Cte);uoo=r(aWr,"fsmt"),aWr.forEach(t),boo=r(Pwe," \u2014 "),kR=n(Pwe,"A",{href:!0});var nWr=s(kR);voo=r(nWr,"FSMTTokenizer"),nWr.forEach(t),Foo=r(Pwe," (FairSeq Machine-Translation model)"),Pwe.forEach(t),Too=i(S),Yn=n(S,"LI",{});var Wx=s(Yn);wte=n(Wx,"STRONG",{});var sWr=s(wte);Moo=r(sWr,"funnel"),sWr.forEach(t),Eoo=r(Wx," \u2014 "),SR=n(Wx,"A",{href:!0});var lWr=s(SR);Coo=r(lWr,"FunnelTokenizer"),lWr.forEach(t),woo=r(Wx," or "),RR=n(Wx,"A",{href:!0});var iWr=s(RR);Aoo=r(iWr,"FunnelTokenizerFast"),iWr.forEach(t),yoo=r(Wx," (Funnel Transformer model)"),Wx.forEach(t),Loo=i(S),Kn=n(S,"LI",{});var Qx=s(Kn);Ate=n(Qx,"STRONG",{});var dWr=s(Ate);xoo=r(dWr,"gpt2"),dWr.forEach(t),$oo=r(Qx," \u2014 "),PR=n(Qx,"A",{href:!0});var cWr=s(PR);koo=r(cWr,"GPT2Tokenizer"),cWr.forEach(t),Soo=r(Qx," or "),BR=n(Qx,"A",{href:!0});var fWr=s(BR);Roo=r(fWr,"GPT2TokenizerFast"),fWr.forEach(t),Poo=r(Qx," (OpenAI GPT-2 model)"),Qx.forEach(t),Boo=i(S),Zn=n(S,"LI",{});var Hx=s(Zn);yte=n(Hx,"STRONG",{});var mWr=s(yte);Ioo=r(mWr,"gpt_neo"),mWr.forEach(t),qoo=r(Hx," \u2014 "),IR=n(Hx,"A",{href:!0});var gWr=s(IR);Noo=r(gWr,"GPT2Tokenizer"),gWr.forEach(t),joo=r(Hx," or "),qR=n(Hx,"A",{href:!0});var hWr=s(qR);Doo=r(hWr,"GPT2TokenizerFast"),hWr.forEach(t),Goo=r(Hx," (GPT Neo model)"),Hx.forEach(t),Ooo=i(S),es=n(S,"LI",{});var Ux=s(es);Lte=n(Ux,"STRONG",{});var pWr=s(Lte);Voo=r(pWr,"gptj"),pWr.forEach(t),Xoo=r(Ux," \u2014 "),NR=n(Ux,"A",{href:!0});var _Wr=s(NR);zoo=r(_Wr,"GPT2Tokenizer"),_Wr.forEach(t),Woo=r(Ux," or "),jR=n(Ux,"A",{href:!0});var uWr=s(jR);Qoo=r(uWr,"GPT2TokenizerFast"),uWr.forEach(t),Hoo=r(Ux," (GPT-J model)"),Ux.forEach(t),Uoo=i(S),os=n(S,"LI",{});var Jx=s(os);xte=n(Jx,"STRONG",{});var bWr=s(xte);Joo=r(bWr,"herbert"),bWr.forEach(t),Yoo=r(Jx," \u2014 "),DR=n(Jx,"A",{href:!0});var vWr=s(DR);Koo=r(vWr,"HerbertTokenizer"),vWr.forEach(t),Zoo=r(Jx," or "),GR=n(Jx,"A",{href:!0});var FWr=s(GR);ero=r(FWr,"HerbertTokenizerFast"),FWr.forEach(t),oro=r(Jx," (HerBERT model)"),Jx.forEach(t),rro=i(S),Rg=n(S,"LI",{});var Bwe=s(Rg);$te=n(Bwe,"STRONG",{});var TWr=s($te);tro=r(TWr,"hubert"),TWr.forEach(t),aro=r(Bwe," \u2014 "),OR=n(Bwe,"A",{href:!0});var MWr=s(OR);nro=r(MWr,"Wav2Vec2CTCTokenizer"),MWr.forEach(t),sro=r(Bwe," (Hubert model)"),Bwe.forEach(t),lro=i(S),rs=n(S,"LI",{});var Yx=s(rs);kte=n(Yx,"STRONG",{});var EWr=s(kte);iro=r(EWr,"ibert"),EWr.forEach(t),dro=r(Yx," \u2014 "),VR=n(Yx,"A",{href:!0});var CWr=s(VR);cro=r(CWr,"RobertaTokenizer"),CWr.forEach(t),fro=r(Yx," or "),XR=n(Yx,"A",{href:!0});var wWr=s(XR);mro=r(wWr,"RobertaTokenizerFast"),wWr.forEach(t),gro=r(Yx," (I-BERT model)"),Yx.forEach(t),hro=i(S),ts=n(S,"LI",{});var Kx=s(ts);Ste=n(Kx,"STRONG",{});var AWr=s(Ste);pro=r(AWr,"layoutlm"),AWr.forEach(t),_ro=r(Kx," \u2014 "),zR=n(Kx,"A",{href:!0});var yWr=s(zR);uro=r(yWr,"LayoutLMTokenizer"),yWr.forEach(t),bro=r(Kx," or "),WR=n(Kx,"A",{href:!0});var LWr=s(WR);vro=r(LWr,"LayoutLMTokenizerFast"),LWr.forEach(t),Fro=r(Kx," (LayoutLM model)"),Kx.forEach(t),Tro=i(S),as=n(S,"LI",{});var Zx=s(as);Rte=n(Zx,"STRONG",{});var xWr=s(Rte);Mro=r(xWr,"layoutlmv2"),xWr.forEach(t),Ero=r(Zx," \u2014 "),QR=n(Zx,"A",{href:!0});var $Wr=s(QR);Cro=r($Wr,"LayoutLMv2Tokenizer"),$Wr.forEach(t),wro=r(Zx," or "),HR=n(Zx,"A",{href:!0});var kWr=s(HR);Aro=r(kWr,"LayoutLMv2TokenizerFast"),kWr.forEach(t),yro=r(Zx," (LayoutLMv2 model)"),Zx.forEach(t),Lro=i(S),ns=n(S,"LI",{});var e$=s(ns);Pte=n(e$,"STRONG",{});var SWr=s(Pte);xro=r(SWr,"layoutxlm"),SWr.forEach(t),$ro=r(e$," \u2014 "),UR=n(e$,"A",{href:!0});var RWr=s(UR);kro=r(RWr,"LayoutXLMTokenizer"),RWr.forEach(t),Sro=r(e$," or "),JR=n(e$,"A",{href:!0});var PWr=s(JR);Rro=r(PWr,"LayoutXLMTokenizerFast"),PWr.forEach(t),Pro=r(e$," (LayoutXLM model)"),e$.forEach(t),Bro=i(S),ss=n(S,"LI",{});var o$=s(ss);Bte=n(o$,"STRONG",{});var BWr=s(Bte);Iro=r(BWr,"led"),BWr.forEach(t),qro=r(o$," \u2014 "),YR=n(o$,"A",{href:!0});var IWr=s(YR);Nro=r(IWr,"LEDTokenizer"),IWr.forEach(t),jro=r(o$," or "),KR=n(o$,"A",{href:!0});var qWr=s(KR);Dro=r(qWr,"LEDTokenizerFast"),qWr.forEach(t),Gro=r(o$," (LED model)"),o$.forEach(t),Oro=i(S),ls=n(S,"LI",{});var r$=s(ls);Ite=n(r$,"STRONG",{});var NWr=s(Ite);Vro=r(NWr,"longformer"),NWr.forEach(t),Xro=r(r$," \u2014 "),ZR=n(r$,"A",{href:!0});var jWr=s(ZR);zro=r(jWr,"LongformerTokenizer"),jWr.forEach(t),Wro=r(r$," or "),eP=n(r$,"A",{href:!0});var DWr=s(eP);Qro=r(DWr,"LongformerTokenizerFast"),DWr.forEach(t),Hro=r(r$," (Longformer model)"),r$.forEach(t),Uro=i(S),Pg=n(S,"LI",{});var Iwe=s(Pg);qte=n(Iwe,"STRONG",{});var GWr=s(qte);Jro=r(GWr,"luke"),GWr.forEach(t),Yro=r(Iwe," \u2014 "),oP=n(Iwe,"A",{href:!0});var OWr=s(oP);Kro=r(OWr,"LukeTokenizer"),OWr.forEach(t),Zro=r(Iwe," (LUKE model)"),Iwe.forEach(t),eto=i(S),is=n(S,"LI",{});var t$=s(is);Nte=n(t$,"STRONG",{});var VWr=s(Nte);oto=r(VWr,"lxmert"),VWr.forEach(t),rto=r(t$," \u2014 "),rP=n(t$,"A",{href:!0});var XWr=s(rP);tto=r(XWr,"LxmertTokenizer"),XWr.forEach(t),ato=r(t$," or "),tP=n(t$,"A",{href:!0});var zWr=s(tP);nto=r(zWr,"LxmertTokenizerFast"),zWr.forEach(t),sto=r(t$," (LXMERT model)"),t$.forEach(t),lto=i(S),Bg=n(S,"LI",{});var qwe=s(Bg);jte=n(qwe,"STRONG",{});var WWr=s(jte);ito=r(WWr,"m2m_100"),WWr.forEach(t),dto=r(qwe," \u2014 "),aP=n(qwe,"A",{href:!0});var QWr=s(aP);cto=r(QWr,"M2M100Tokenizer"),QWr.forEach(t),fto=r(qwe," (M2M100 model)"),qwe.forEach(t),mto=i(S),Ig=n(S,"LI",{});var Nwe=s(Ig);Dte=n(Nwe,"STRONG",{});var HWr=s(Dte);gto=r(HWr,"marian"),HWr.forEach(t),hto=r(Nwe," \u2014 "),nP=n(Nwe,"A",{href:!0});var UWr=s(nP);pto=r(UWr,"MarianTokenizer"),UWr.forEach(t),_to=r(Nwe," (Marian model)"),Nwe.forEach(t),uto=i(S),ds=n(S,"LI",{});var a$=s(ds);Gte=n(a$,"STRONG",{});var JWr=s(Gte);bto=r(JWr,"mbart"),JWr.forEach(t),vto=r(a$," \u2014 "),sP=n(a$,"A",{href:!0});var YWr=s(sP);Fto=r(YWr,"MBartTokenizer"),YWr.forEach(t),Tto=r(a$," or "),lP=n(a$,"A",{href:!0});var KWr=s(lP);Mto=r(KWr,"MBartTokenizerFast"),KWr.forEach(t),Eto=r(a$," (mBART model)"),a$.forEach(t),Cto=i(S),cs=n(S,"LI",{});var n$=s(cs);Ote=n(n$,"STRONG",{});var ZWr=s(Ote);wto=r(ZWr,"mbart50"),ZWr.forEach(t),Ato=r(n$," \u2014 "),iP=n(n$,"A",{href:!0});var eQr=s(iP);yto=r(eQr,"MBart50Tokenizer"),eQr.forEach(t),Lto=r(n$," or "),dP=n(n$,"A",{href:!0});var oQr=s(dP);xto=r(oQr,"MBart50TokenizerFast"),oQr.forEach(t),$to=r(n$," (mBART-50 model)"),n$.forEach(t),kto=i(S),fs=n(S,"LI",{});var s$=s(fs);Vte=n(s$,"STRONG",{});var rQr=s(Vte);Sto=r(rQr,"megatron-bert"),rQr.forEach(t),Rto=r(s$," \u2014 "),cP=n(s$,"A",{href:!0});var tQr=s(cP);Pto=r(tQr,"BertTokenizer"),tQr.forEach(t),Bto=r(s$," or "),fP=n(s$,"A",{href:!0});var aQr=s(fP);Ito=r(aQr,"BertTokenizerFast"),aQr.forEach(t),qto=r(s$," (MegatronBert model)"),s$.forEach(t),Nto=i(S),qg=n(S,"LI",{});var jwe=s(qg);Xte=n(jwe,"STRONG",{});var nQr=s(Xte);jto=r(nQr,"mluke"),nQr.forEach(t),Dto=r(jwe," \u2014 "),mP=n(jwe,"A",{href:!0});var sQr=s(mP);Gto=r(sQr,"MLukeTokenizer"),sQr.forEach(t),Oto=r(jwe," (mLUKE model)"),jwe.forEach(t),Vto=i(S),ms=n(S,"LI",{});var l$=s(ms);zte=n(l$,"STRONG",{});var lQr=s(zte);Xto=r(lQr,"mobilebert"),lQr.forEach(t),zto=r(l$," \u2014 "),gP=n(l$,"A",{href:!0});var iQr=s(gP);Wto=r(iQr,"MobileBertTokenizer"),iQr.forEach(t),Qto=r(l$," or "),hP=n(l$,"A",{href:!0});var dQr=s(hP);Hto=r(dQr,"MobileBertTokenizerFast"),dQr.forEach(t),Uto=r(l$," (MobileBERT model)"),l$.forEach(t),Jto=i(S),gs=n(S,"LI",{});var i$=s(gs);Wte=n(i$,"STRONG",{});var cQr=s(Wte);Yto=r(cQr,"mpnet"),cQr.forEach(t),Kto=r(i$," \u2014 "),pP=n(i$,"A",{href:!0});var fQr=s(pP);Zto=r(fQr,"MPNetTokenizer"),fQr.forEach(t),eao=r(i$," or "),_P=n(i$,"A",{href:!0});var mQr=s(_P);oao=r(mQr,"MPNetTokenizerFast"),mQr.forEach(t),rao=r(i$," (MPNet model)"),i$.forEach(t),tao=i(S),hs=n(S,"LI",{});var d$=s(hs);Qte=n(d$,"STRONG",{});var gQr=s(Qte);aao=r(gQr,"mt5"),gQr.forEach(t),nao=r(d$," \u2014 "),uP=n(d$,"A",{href:!0});var hQr=s(uP);sao=r(hQr,"MT5Tokenizer"),hQr.forEach(t),lao=r(d$," or "),bP=n(d$,"A",{href:!0});var pQr=s(bP);iao=r(pQr,"MT5TokenizerFast"),pQr.forEach(t),dao=r(d$," (mT5 model)"),d$.forEach(t),cao=i(S),ps=n(S,"LI",{});var c$=s(ps);Hte=n(c$,"STRONG",{});var _Qr=s(Hte);fao=r(_Qr,"nystromformer"),_Qr.forEach(t),mao=r(c$," \u2014 "),vP=n(c$,"A",{href:!0});var uQr=s(vP);gao=r(uQr,"AlbertTokenizer"),uQr.forEach(t),hao=r(c$," or "),FP=n(c$,"A",{href:!0});var bQr=s(FP);pao=r(bQr,"AlbertTokenizerFast"),bQr.forEach(t),_ao=r(c$," (Nystromformer model)"),c$.forEach(t),uao=i(S),_s=n(S,"LI",{});var f$=s(_s);Ute=n(f$,"STRONG",{});var vQr=s(Ute);bao=r(vQr,"openai-gpt"),vQr.forEach(t),vao=r(f$," \u2014 "),TP=n(f$,"A",{href:!0});var FQr=s(TP);Fao=r(FQr,"OpenAIGPTTokenizer"),FQr.forEach(t),Tao=r(f$," or "),MP=n(f$,"A",{href:!0});var TQr=s(MP);Mao=r(TQr,"OpenAIGPTTokenizerFast"),TQr.forEach(t),Eao=r(f$," (OpenAI GPT model)"),f$.forEach(t),Cao=i(S),Ng=n(S,"LI",{});var Dwe=s(Ng);Jte=n(Dwe,"STRONG",{});var MQr=s(Jte);wao=r(MQr,"opt"),MQr.forEach(t),Aao=r(Dwe," \u2014 "),EP=n(Dwe,"A",{href:!0});var EQr=s(EP);yao=r(EQr,"GPT2Tokenizer"),EQr.forEach(t),Lao=r(Dwe," (OPT model)"),Dwe.forEach(t),xao=i(S),us=n(S,"LI",{});var m$=s(us);Yte=n(m$,"STRONG",{});var CQr=s(Yte);$ao=r(CQr,"pegasus"),CQr.forEach(t),kao=r(m$," \u2014 "),CP=n(m$,"A",{href:!0});var wQr=s(CP);Sao=r(wQr,"PegasusTokenizer"),wQr.forEach(t),Rao=r(m$," or "),wP=n(m$,"A",{href:!0});var AQr=s(wP);Pao=r(AQr,"PegasusTokenizerFast"),AQr.forEach(t),Bao=r(m$," (Pegasus model)"),m$.forEach(t),Iao=i(S),jg=n(S,"LI",{});var Gwe=s(jg);Kte=n(Gwe,"STRONG",{});var yQr=s(Kte);qao=r(yQr,"perceiver"),yQr.forEach(t),Nao=r(Gwe," \u2014 "),AP=n(Gwe,"A",{href:!0});var LQr=s(AP);jao=r(LQr,"PerceiverTokenizer"),LQr.forEach(t),Dao=r(Gwe," (Perceiver model)"),Gwe.forEach(t),Gao=i(S),Dg=n(S,"LI",{});var Owe=s(Dg);Zte=n(Owe,"STRONG",{});var xQr=s(Zte);Oao=r(xQr,"phobert"),xQr.forEach(t),Vao=r(Owe," \u2014 "),yP=n(Owe,"A",{href:!0});var $Qr=s(yP);Xao=r($Qr,"PhobertTokenizer"),$Qr.forEach(t),zao=r(Owe," (PhoBERT model)"),Owe.forEach(t),Wao=i(S),Gg=n(S,"LI",{});var Vwe=s(Gg);eae=n(Vwe,"STRONG",{});var kQr=s(eae);Qao=r(kQr,"plbart"),kQr.forEach(t),Hao=r(Vwe," \u2014 "),LP=n(Vwe,"A",{href:!0});var SQr=s(LP);Uao=r(SQr,"PLBartTokenizer"),SQr.forEach(t),Jao=r(Vwe," (PLBart model)"),Vwe.forEach(t),Yao=i(S),Og=n(S,"LI",{});var Xwe=s(Og);oae=n(Xwe,"STRONG",{});var RQr=s(oae);Kao=r(RQr,"prophetnet"),RQr.forEach(t),Zao=r(Xwe," \u2014 "),xP=n(Xwe,"A",{href:!0});var PQr=s(xP);eno=r(PQr,"ProphetNetTokenizer"),PQr.forEach(t),ono=r(Xwe," (ProphetNet model)"),Xwe.forEach(t),rno=i(S),bs=n(S,"LI",{});var g$=s(bs);rae=n(g$,"STRONG",{});var BQr=s(rae);tno=r(BQr,"qdqbert"),BQr.forEach(t),ano=r(g$," \u2014 "),$P=n(g$,"A",{href:!0});var IQr=s($P);nno=r(IQr,"BertTokenizer"),IQr.forEach(t),sno=r(g$," or "),kP=n(g$,"A",{href:!0});var qQr=s(kP);lno=r(qQr,"BertTokenizerFast"),qQr.forEach(t),ino=r(g$," (QDQBert model)"),g$.forEach(t),dno=i(S),Vg=n(S,"LI",{});var zwe=s(Vg);tae=n(zwe,"STRONG",{});var NQr=s(tae);cno=r(NQr,"rag"),NQr.forEach(t),fno=r(zwe," \u2014 "),SP=n(zwe,"A",{href:!0});var jQr=s(SP);mno=r(jQr,"RagTokenizer"),jQr.forEach(t),gno=r(zwe," (RAG model)"),zwe.forEach(t),hno=i(S),vs=n(S,"LI",{});var h$=s(vs);aae=n(h$,"STRONG",{});var DQr=s(aae);pno=r(DQr,"realm"),DQr.forEach(t),_no=r(h$," \u2014 "),RP=n(h$,"A",{href:!0});var GQr=s(RP);uno=r(GQr,"RealmTokenizer"),GQr.forEach(t),bno=r(h$," or "),PP=n(h$,"A",{href:!0});var OQr=s(PP);vno=r(OQr,"RealmTokenizerFast"),OQr.forEach(t),Fno=r(h$," (Realm model)"),h$.forEach(t),Tno=i(S),Fs=n(S,"LI",{});var p$=s(Fs);nae=n(p$,"STRONG",{});var VQr=s(nae);Mno=r(VQr,"reformer"),VQr.forEach(t),Eno=r(p$," \u2014 "),BP=n(p$,"A",{href:!0});var XQr=s(BP);Cno=r(XQr,"ReformerTokenizer"),XQr.forEach(t),wno=r(p$," or "),IP=n(p$,"A",{href:!0});var zQr=s(IP);Ano=r(zQr,"ReformerTokenizerFast"),zQr.forEach(t),yno=r(p$," (Reformer model)"),p$.forEach(t),Lno=i(S),Ts=n(S,"LI",{});var _$=s(Ts);sae=n(_$,"STRONG",{});var WQr=s(sae);xno=r(WQr,"rembert"),WQr.forEach(t),$no=r(_$," \u2014 "),qP=n(_$,"A",{href:!0});var QQr=s(qP);kno=r(QQr,"RemBertTokenizer"),QQr.forEach(t),Sno=r(_$," or "),NP=n(_$,"A",{href:!0});var HQr=s(NP);Rno=r(HQr,"RemBertTokenizerFast"),HQr.forEach(t),Pno=r(_$," (RemBERT model)"),_$.forEach(t),Bno=i(S),Ms=n(S,"LI",{});var u$=s(Ms);lae=n(u$,"STRONG",{});var UQr=s(lae);Ino=r(UQr,"retribert"),UQr.forEach(t),qno=r(u$," \u2014 "),jP=n(u$,"A",{href:!0});var JQr=s(jP);Nno=r(JQr,"RetriBertTokenizer"),JQr.forEach(t),jno=r(u$," or "),DP=n(u$,"A",{href:!0});var YQr=s(DP);Dno=r(YQr,"RetriBertTokenizerFast"),YQr.forEach(t),Gno=r(u$," (RetriBERT model)"),u$.forEach(t),Ono=i(S),Es=n(S,"LI",{});var b$=s(Es);iae=n(b$,"STRONG",{});var KQr=s(iae);Vno=r(KQr,"roberta"),KQr.forEach(t),Xno=r(b$," \u2014 "),GP=n(b$,"A",{href:!0});var ZQr=s(GP);zno=r(ZQr,"RobertaTokenizer"),ZQr.forEach(t),Wno=r(b$," or "),OP=n(b$,"A",{href:!0});var eHr=s(OP);Qno=r(eHr,"RobertaTokenizerFast"),eHr.forEach(t),Hno=r(b$," (RoBERTa model)"),b$.forEach(t),Uno=i(S),Cs=n(S,"LI",{});var v$=s(Cs);dae=n(v$,"STRONG",{});var oHr=s(dae);Jno=r(oHr,"roformer"),oHr.forEach(t),Yno=r(v$," \u2014 "),VP=n(v$,"A",{href:!0});var rHr=s(VP);Kno=r(rHr,"RoFormerTokenizer"),rHr.forEach(t),Zno=r(v$," or "),XP=n(v$,"A",{href:!0});var tHr=s(XP);eso=r(tHr,"RoFormerTokenizerFast"),tHr.forEach(t),oso=r(v$," (RoFormer model)"),v$.forEach(t),rso=i(S),Xg=n(S,"LI",{});var Wwe=s(Xg);cae=n(Wwe,"STRONG",{});var aHr=s(cae);tso=r(aHr,"speech_to_text"),aHr.forEach(t),aso=r(Wwe," \u2014 "),zP=n(Wwe,"A",{href:!0});var nHr=s(zP);nso=r(nHr,"Speech2TextTokenizer"),nHr.forEach(t),sso=r(Wwe," (Speech2Text model)"),Wwe.forEach(t),lso=i(S),zg=n(S,"LI",{});var Qwe=s(zg);fae=n(Qwe,"STRONG",{});var sHr=s(fae);iso=r(sHr,"speech_to_text_2"),sHr.forEach(t),dso=r(Qwe," \u2014 "),WP=n(Qwe,"A",{href:!0});var lHr=s(WP);cso=r(lHr,"Speech2Text2Tokenizer"),lHr.forEach(t),fso=r(Qwe," (Speech2Text2 model)"),Qwe.forEach(t),mso=i(S),ws=n(S,"LI",{});var F$=s(ws);mae=n(F$,"STRONG",{});var iHr=s(mae);gso=r(iHr,"splinter"),iHr.forEach(t),hso=r(F$," \u2014 "),QP=n(F$,"A",{href:!0});var dHr=s(QP);pso=r(dHr,"SplinterTokenizer"),dHr.forEach(t),_so=r(F$," or "),HP=n(F$,"A",{href:!0});var cHr=s(HP);uso=r(cHr,"SplinterTokenizerFast"),cHr.forEach(t),bso=r(F$," (Splinter model)"),F$.forEach(t),vso=i(S),As=n(S,"LI",{});var T$=s(As);gae=n(T$,"STRONG",{});var fHr=s(gae);Fso=r(fHr,"squeezebert"),fHr.forEach(t),Tso=r(T$," \u2014 "),UP=n(T$,"A",{href:!0});var mHr=s(UP);Mso=r(mHr,"SqueezeBertTokenizer"),mHr.forEach(t),Eso=r(T$," or "),JP=n(T$,"A",{href:!0});var gHr=s(JP);Cso=r(gHr,"SqueezeBertTokenizerFast"),gHr.forEach(t),wso=r(T$," (SqueezeBERT model)"),T$.forEach(t),Aso=i(S),ys=n(S,"LI",{});var M$=s(ys);hae=n(M$,"STRONG",{});var hHr=s(hae);yso=r(hHr,"t5"),hHr.forEach(t),Lso=r(M$," \u2014 "),YP=n(M$,"A",{href:!0});var pHr=s(YP);xso=r(pHr,"T5Tokenizer"),pHr.forEach(t),$so=r(M$," or "),KP=n(M$,"A",{href:!0});var _Hr=s(KP);kso=r(_Hr,"T5TokenizerFast"),_Hr.forEach(t),Sso=r(M$," (T5 model)"),M$.forEach(t),Rso=i(S),Wg=n(S,"LI",{});var Hwe=s(Wg);pae=n(Hwe,"STRONG",{});var uHr=s(pae);Pso=r(uHr,"tapas"),uHr.forEach(t),Bso=r(Hwe," \u2014 "),ZP=n(Hwe,"A",{href:!0});var bHr=s(ZP);Iso=r(bHr,"TapasTokenizer"),bHr.forEach(t),qso=r(Hwe," (TAPAS model)"),Hwe.forEach(t),Nso=i(S),Qg=n(S,"LI",{});var Uwe=s(Qg);_ae=n(Uwe,"STRONG",{});var vHr=s(_ae);jso=r(vHr,"tapex"),vHr.forEach(t),Dso=r(Uwe," \u2014 "),eB=n(Uwe,"A",{href:!0});var FHr=s(eB);Gso=r(FHr,"TapexTokenizer"),FHr.forEach(t),Oso=r(Uwe," (TAPEX model)"),Uwe.forEach(t),Vso=i(S),Hg=n(S,"LI",{});var Jwe=s(Hg);uae=n(Jwe,"STRONG",{});var THr=s(uae);Xso=r(THr,"transfo-xl"),THr.forEach(t),zso=r(Jwe," \u2014 "),oB=n(Jwe,"A",{href:!0});var MHr=s(oB);Wso=r(MHr,"TransfoXLTokenizer"),MHr.forEach(t),Qso=r(Jwe," (Transformer-XL model)"),Jwe.forEach(t),Hso=i(S),Ls=n(S,"LI",{});var E$=s(Ls);bae=n(E$,"STRONG",{});var EHr=s(bae);Uso=r(EHr,"visual_bert"),EHr.forEach(t),Jso=r(E$," \u2014 "),rB=n(E$,"A",{href:!0});var CHr=s(rB);Yso=r(CHr,"BertTokenizer"),CHr.forEach(t),Kso=r(E$," or "),tB=n(E$,"A",{href:!0});var wHr=s(tB);Zso=r(wHr,"BertTokenizerFast"),wHr.forEach(t),elo=r(E$," (VisualBert model)"),E$.forEach(t),olo=i(S),Ug=n(S,"LI",{});var Ywe=s(Ug);vae=n(Ywe,"STRONG",{});var AHr=s(vae);rlo=r(AHr,"wav2vec2"),AHr.forEach(t),tlo=r(Ywe," \u2014 "),aB=n(Ywe,"A",{href:!0});var yHr=s(aB);alo=r(yHr,"Wav2Vec2CTCTokenizer"),yHr.forEach(t),nlo=r(Ywe," (Wav2Vec2 model)"),Ywe.forEach(t),slo=i(S),Jg=n(S,"LI",{});var Kwe=s(Jg);Fae=n(Kwe,"STRONG",{});var LHr=s(Fae);llo=r(LHr,"wav2vec2-conformer"),LHr.forEach(t),ilo=r(Kwe," \u2014 "),nB=n(Kwe,"A",{href:!0});var xHr=s(nB);dlo=r(xHr,"Wav2Vec2CTCTokenizer"),xHr.forEach(t),clo=r(Kwe," (Wav2Vec2-Conformer model)"),Kwe.forEach(t),flo=i(S),Yg=n(S,"LI",{});var Zwe=s(Yg);Tae=n(Zwe,"STRONG",{});var $Hr=s(Tae);mlo=r($Hr,"wav2vec2_phoneme"),$Hr.forEach(t),glo=r(Zwe," \u2014 "),sB=n(Zwe,"A",{href:!0});var kHr=s(sB);hlo=r(kHr,"Wav2Vec2PhonemeCTCTokenizer"),kHr.forEach(t),plo=r(Zwe," (Wav2Vec2Phoneme model)"),Zwe.forEach(t),_lo=i(S),xs=n(S,"LI",{});var C$=s(xs);Mae=n(C$,"STRONG",{});var SHr=s(Mae);ulo=r(SHr,"xglm"),SHr.forEach(t),blo=r(C$," \u2014 "),lB=n(C$,"A",{href:!0});var RHr=s(lB);vlo=r(RHr,"XGLMTokenizer"),RHr.forEach(t),Flo=r(C$," or "),iB=n(C$,"A",{href:!0});var PHr=s(iB);Tlo=r(PHr,"XGLMTokenizerFast"),PHr.forEach(t),Mlo=r(C$," (XGLM model)"),C$.forEach(t),Elo=i(S),Kg=n(S,"LI",{});var e0e=s(Kg);Eae=n(e0e,"STRONG",{});var BHr=s(Eae);Clo=r(BHr,"xlm"),BHr.forEach(t),wlo=r(e0e," \u2014 "),dB=n(e0e,"A",{href:!0});var IHr=s(dB);Alo=r(IHr,"XLMTokenizer"),IHr.forEach(t),ylo=r(e0e," (XLM model)"),e0e.forEach(t),Llo=i(S),Zg=n(S,"LI",{});var o0e=s(Zg);Cae=n(o0e,"STRONG",{});var qHr=s(Cae);xlo=r(qHr,"xlm-prophetnet"),qHr.forEach(t),$lo=r(o0e," \u2014 "),cB=n(o0e,"A",{href:!0});var NHr=s(cB);klo=r(NHr,"XLMProphetNetTokenizer"),NHr.forEach(t),Slo=r(o0e," (XLMProphetNet model)"),o0e.forEach(t),Rlo=i(S),$s=n(S,"LI",{});var w$=s($s);wae=n(w$,"STRONG",{});var jHr=s(wae);Plo=r(jHr,"xlm-roberta"),jHr.forEach(t),Blo=r(w$," \u2014 "),fB=n(w$,"A",{href:!0});var DHr=s(fB);Ilo=r(DHr,"XLMRobertaTokenizer"),DHr.forEach(t),qlo=r(w$," or "),mB=n(w$,"A",{href:!0});var GHr=s(mB);Nlo=r(GHr,"XLMRobertaTokenizerFast"),GHr.forEach(t),jlo=r(w$," (XLM-RoBERTa model)"),w$.forEach(t),Dlo=i(S),ks=n(S,"LI",{});var A$=s(ks);Aae=n(A$,"STRONG",{});var OHr=s(Aae);Glo=r(OHr,"xlm-roberta-xl"),OHr.forEach(t),Olo=r(A$," \u2014 "),gB=n(A$,"A",{href:!0});var VHr=s(gB);Vlo=r(VHr,"RobertaTokenizer"),VHr.forEach(t),Xlo=r(A$," or "),hB=n(A$,"A",{href:!0});var XHr=s(hB);zlo=r(XHr,"RobertaTokenizerFast"),XHr.forEach(t),Wlo=r(A$," (XLM-RoBERTa-XL model)"),A$.forEach(t),Qlo=i(S),Ss=n(S,"LI",{});var y$=s(Ss);yae=n(y$,"STRONG",{});var zHr=s(yae);Hlo=r(zHr,"xlnet"),zHr.forEach(t),Ulo=r(y$," \u2014 "),pB=n(y$,"A",{href:!0});var WHr=s(pB);Jlo=r(WHr,"XLNetTokenizer"),WHr.forEach(t),Ylo=r(y$," or "),_B=n(y$,"A",{href:!0});var QHr=s(_B);Klo=r(QHr,"XLNetTokenizerFast"),QHr.forEach(t),Zlo=r(y$," (XLNet model)"),y$.forEach(t),eio=i(S),Rs=n(S,"LI",{});var L$=s(Rs);Lae=n(L$,"STRONG",{});var HHr=s(Lae);oio=r(HHr,"yoso"),HHr.forEach(t),rio=r(L$," \u2014 "),uB=n(L$,"A",{href:!0});var UHr=s(uB);tio=r(UHr,"AlbertTokenizer"),UHr.forEach(t),aio=r(L$," or "),bB=n(L$,"A",{href:!0});var JHr=s(bB);nio=r(JHr,"AlbertTokenizerFast"),JHr.forEach(t),sio=r(L$," (YOSO model)"),L$.forEach(t),S.forEach(t),lio=i(Ns),T(eh.$$.fragment,Ns),Ns.forEach(t),iio=i(qs),oh=n(qs,"DIV",{class:!0});var ije=s(oh);T(y6.$$.fragment,ije),dio=i(ije),xae=n(ije,"P",{});var YHr=s(xae);cio=r(YHr,"Register a new tokenizer in this mapping."),YHr.forEach(t),ije.forEach(t),qs.forEach(t),dqe=i(f),Mi=n(f,"H2",{class:!0});var dje=s(Mi);rh=n(dje,"A",{id:!0,class:!0,href:!0});var KHr=s(rh);$ae=n(KHr,"SPAN",{});var ZHr=s($ae);T(L6.$$.fragment,ZHr),ZHr.forEach(t),KHr.forEach(t),fio=i(dje),kae=n(dje,"SPAN",{});var eUr=s(kae);mio=r(eUr,"AutoFeatureExtractor"),eUr.forEach(t),dje.forEach(t),cqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(x6.$$.fragment,js),gio=i(js),$6=n(js,"P",{});var cje=s($6);hio=r(cje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vB=n(cje,"A",{href:!0});var oUr=s(vB);pio=r(oUr,"AutoFeatureExtractor.from_pretrained()"),oUr.forEach(t),_io=r(cje," class method."),cje.forEach(t),uio=i(js),k6=n(js,"P",{});var fje=s(k6);bio=r(fje,"This class cannot be instantiated directly using "),Sae=n(fje,"CODE",{});var rUr=s(Sae);vio=r(rUr,"__init__()"),rUr.forEach(t),Fio=r(fje," (throws an error)."),fje.forEach(t),Tio=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(S6.$$.fragment,Zt),Mio=i(Zt),Rae=n(Zt,"P",{});var tUr=s(Rae);Eio=r(tUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tUr.forEach(t),Cio=i(Zt),ya=n(Zt,"P",{});var u0=s(ya);wio=r(u0,"The feature extractor class to instantiate is selected based on the "),Pae=n(u0,"CODE",{});var aUr=s(Pae);Aio=r(aUr,"model_type"),aUr.forEach(t),yio=r(u0,` property of the config object
(either passed as an argument or loaded from `),Bae=n(u0,"CODE",{});var nUr=s(Bae);Lio=r(nUr,"pretrained_model_name_or_path"),nUr.forEach(t),xio=r(u0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iae=n(u0,"CODE",{});var sUr=s(Iae);$io=r(sUr,"pretrained_model_name_or_path"),sUr.forEach(t),kio=r(u0,":"),u0.forEach(t),Sio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);th=n(re,"LI",{});var r0e=s(th);qae=n(r0e,"STRONG",{});var lUr=s(qae);Rio=r(lUr,"beit"),lUr.forEach(t),Pio=r(r0e," \u2014 "),FB=n(r0e,"A",{href:!0});var iUr=s(FB);Bio=r(iUr,"BeitFeatureExtractor"),iUr.forEach(t),Iio=r(r0e," (BEiT model)"),r0e.forEach(t),qio=i(re),ah=n(re,"LI",{});var t0e=s(ah);Nae=n(t0e,"STRONG",{});var dUr=s(Nae);Nio=r(dUr,"clip"),dUr.forEach(t),jio=r(t0e," \u2014 "),TB=n(t0e,"A",{href:!0});var cUr=s(TB);Dio=r(cUr,"CLIPFeatureExtractor"),cUr.forEach(t),Gio=r(t0e," (CLIP model)"),t0e.forEach(t),Oio=i(re),nh=n(re,"LI",{});var a0e=s(nh);jae=n(a0e,"STRONG",{});var fUr=s(jae);Vio=r(fUr,"convnext"),fUr.forEach(t),Xio=r(a0e," \u2014 "),MB=n(a0e,"A",{href:!0});var mUr=s(MB);zio=r(mUr,"ConvNextFeatureExtractor"),mUr.forEach(t),Wio=r(a0e," (ConvNext model)"),a0e.forEach(t),Qio=i(re),sh=n(re,"LI",{});var n0e=s(sh);Dae=n(n0e,"STRONG",{});var gUr=s(Dae);Hio=r(gUr,"cvt"),gUr.forEach(t),Uio=r(n0e," \u2014 "),EB=n(n0e,"A",{href:!0});var hUr=s(EB);Jio=r(hUr,"ConvNextFeatureExtractor"),hUr.forEach(t),Yio=r(n0e," (CvT model)"),n0e.forEach(t),Kio=i(re),lh=n(re,"LI",{});var s0e=s(lh);Gae=n(s0e,"STRONG",{});var pUr=s(Gae);Zio=r(pUr,"data2vec-audio"),pUr.forEach(t),edo=r(s0e," \u2014 "),CB=n(s0e,"A",{href:!0});var _Ur=s(CB);odo=r(_Ur,"Wav2Vec2FeatureExtractor"),_Ur.forEach(t),rdo=r(s0e," (Data2VecAudio model)"),s0e.forEach(t),tdo=i(re),ih=n(re,"LI",{});var l0e=s(ih);Oae=n(l0e,"STRONG",{});var uUr=s(Oae);ado=r(uUr,"data2vec-vision"),uUr.forEach(t),ndo=r(l0e," \u2014 "),wB=n(l0e,"A",{href:!0});var bUr=s(wB);sdo=r(bUr,"BeitFeatureExtractor"),bUr.forEach(t),ldo=r(l0e," (Data2VecVision model)"),l0e.forEach(t),ido=i(re),dh=n(re,"LI",{});var i0e=s(dh);Vae=n(i0e,"STRONG",{});var vUr=s(Vae);ddo=r(vUr,"deit"),vUr.forEach(t),cdo=r(i0e," \u2014 "),AB=n(i0e,"A",{href:!0});var FUr=s(AB);fdo=r(FUr,"DeiTFeatureExtractor"),FUr.forEach(t),mdo=r(i0e," (DeiT model)"),i0e.forEach(t),gdo=i(re),ch=n(re,"LI",{});var d0e=s(ch);Xae=n(d0e,"STRONG",{});var TUr=s(Xae);hdo=r(TUr,"detr"),TUr.forEach(t),pdo=r(d0e," \u2014 "),yB=n(d0e,"A",{href:!0});var MUr=s(yB);_do=r(MUr,"DetrFeatureExtractor"),MUr.forEach(t),udo=r(d0e," (DETR model)"),d0e.forEach(t),bdo=i(re),fh=n(re,"LI",{});var c0e=s(fh);zae=n(c0e,"STRONG",{});var EUr=s(zae);vdo=r(EUr,"dpt"),EUr.forEach(t),Fdo=r(c0e," \u2014 "),LB=n(c0e,"A",{href:!0});var CUr=s(LB);Tdo=r(CUr,"DPTFeatureExtractor"),CUr.forEach(t),Mdo=r(c0e," (DPT model)"),c0e.forEach(t),Edo=i(re),mh=n(re,"LI",{});var f0e=s(mh);Wae=n(f0e,"STRONG",{});var wUr=s(Wae);Cdo=r(wUr,"flava"),wUr.forEach(t),wdo=r(f0e," \u2014 "),xB=n(f0e,"A",{href:!0});var AUr=s(xB);Ado=r(AUr,"FlavaFeatureExtractor"),AUr.forEach(t),ydo=r(f0e," (Flava model)"),f0e.forEach(t),Ldo=i(re),gh=n(re,"LI",{});var m0e=s(gh);Qae=n(m0e,"STRONG",{});var yUr=s(Qae);xdo=r(yUr,"glpn"),yUr.forEach(t),$do=r(m0e," \u2014 "),$B=n(m0e,"A",{href:!0});var LUr=s($B);kdo=r(LUr,"GLPNFeatureExtractor"),LUr.forEach(t),Sdo=r(m0e," (GLPN model)"),m0e.forEach(t),Rdo=i(re),hh=n(re,"LI",{});var g0e=s(hh);Hae=n(g0e,"STRONG",{});var xUr=s(Hae);Pdo=r(xUr,"hubert"),xUr.forEach(t),Bdo=r(g0e," \u2014 "),kB=n(g0e,"A",{href:!0});var $Ur=s(kB);Ido=r($Ur,"Wav2Vec2FeatureExtractor"),$Ur.forEach(t),qdo=r(g0e," (Hubert model)"),g0e.forEach(t),Ndo=i(re),ph=n(re,"LI",{});var h0e=s(ph);Uae=n(h0e,"STRONG",{});var kUr=s(Uae);jdo=r(kUr,"layoutlmv2"),kUr.forEach(t),Ddo=r(h0e," \u2014 "),SB=n(h0e,"A",{href:!0});var SUr=s(SB);Gdo=r(SUr,"LayoutLMv2FeatureExtractor"),SUr.forEach(t),Odo=r(h0e," (LayoutLMv2 model)"),h0e.forEach(t),Vdo=i(re),_h=n(re,"LI",{});var p0e=s(_h);Jae=n(p0e,"STRONG",{});var RUr=s(Jae);Xdo=r(RUr,"maskformer"),RUr.forEach(t),zdo=r(p0e," \u2014 "),RB=n(p0e,"A",{href:!0});var PUr=s(RB);Wdo=r(PUr,"MaskFormerFeatureExtractor"),PUr.forEach(t),Qdo=r(p0e," (MaskFormer model)"),p0e.forEach(t),Hdo=i(re),uh=n(re,"LI",{});var _0e=s(uh);Yae=n(_0e,"STRONG",{});var BUr=s(Yae);Udo=r(BUr,"perceiver"),BUr.forEach(t),Jdo=r(_0e," \u2014 "),PB=n(_0e,"A",{href:!0});var IUr=s(PB);Ydo=r(IUr,"PerceiverFeatureExtractor"),IUr.forEach(t),Kdo=r(_0e," (Perceiver model)"),_0e.forEach(t),Zdo=i(re),bh=n(re,"LI",{});var u0e=s(bh);Kae=n(u0e,"STRONG",{});var qUr=s(Kae);eco=r(qUr,"poolformer"),qUr.forEach(t),oco=r(u0e," \u2014 "),BB=n(u0e,"A",{href:!0});var NUr=s(BB);rco=r(NUr,"PoolFormerFeatureExtractor"),NUr.forEach(t),tco=r(u0e," (PoolFormer model)"),u0e.forEach(t),aco=i(re),vh=n(re,"LI",{});var b0e=s(vh);Zae=n(b0e,"STRONG",{});var jUr=s(Zae);nco=r(jUr,"regnet"),jUr.forEach(t),sco=r(b0e," \u2014 "),IB=n(b0e,"A",{href:!0});var DUr=s(IB);lco=r(DUr,"ConvNextFeatureExtractor"),DUr.forEach(t),ico=r(b0e," (RegNet model)"),b0e.forEach(t),dco=i(re),Fh=n(re,"LI",{});var v0e=s(Fh);ene=n(v0e,"STRONG",{});var GUr=s(ene);cco=r(GUr,"resnet"),GUr.forEach(t),fco=r(v0e," \u2014 "),qB=n(v0e,"A",{href:!0});var OUr=s(qB);mco=r(OUr,"ConvNextFeatureExtractor"),OUr.forEach(t),gco=r(v0e," (ResNet model)"),v0e.forEach(t),hco=i(re),Th=n(re,"LI",{});var F0e=s(Th);one=n(F0e,"STRONG",{});var VUr=s(one);pco=r(VUr,"segformer"),VUr.forEach(t),_co=r(F0e," \u2014 "),NB=n(F0e,"A",{href:!0});var XUr=s(NB);uco=r(XUr,"SegformerFeatureExtractor"),XUr.forEach(t),bco=r(F0e," (SegFormer model)"),F0e.forEach(t),vco=i(re),Mh=n(re,"LI",{});var T0e=s(Mh);rne=n(T0e,"STRONG",{});var zUr=s(rne);Fco=r(zUr,"speech_to_text"),zUr.forEach(t),Tco=r(T0e," \u2014 "),jB=n(T0e,"A",{href:!0});var WUr=s(jB);Mco=r(WUr,"Speech2TextFeatureExtractor"),WUr.forEach(t),Eco=r(T0e," (Speech2Text model)"),T0e.forEach(t),Cco=i(re),Eh=n(re,"LI",{});var M0e=s(Eh);tne=n(M0e,"STRONG",{});var QUr=s(tne);wco=r(QUr,"swin"),QUr.forEach(t),Aco=r(M0e," \u2014 "),DB=n(M0e,"A",{href:!0});var HUr=s(DB);yco=r(HUr,"ViTFeatureExtractor"),HUr.forEach(t),Lco=r(M0e," (Swin model)"),M0e.forEach(t),xco=i(re),Ch=n(re,"LI",{});var E0e=s(Ch);ane=n(E0e,"STRONG",{});var UUr=s(ane);$co=r(UUr,"van"),UUr.forEach(t),kco=r(E0e," \u2014 "),GB=n(E0e,"A",{href:!0});var JUr=s(GB);Sco=r(JUr,"ConvNextFeatureExtractor"),JUr.forEach(t),Rco=r(E0e," (VAN model)"),E0e.forEach(t),Pco=i(re),wh=n(re,"LI",{});var C0e=s(wh);nne=n(C0e,"STRONG",{});var YUr=s(nne);Bco=r(YUr,"vit"),YUr.forEach(t),Ico=r(C0e," \u2014 "),OB=n(C0e,"A",{href:!0});var KUr=s(OB);qco=r(KUr,"ViTFeatureExtractor"),KUr.forEach(t),Nco=r(C0e," (ViT model)"),C0e.forEach(t),jco=i(re),Ah=n(re,"LI",{});var w0e=s(Ah);sne=n(w0e,"STRONG",{});var ZUr=s(sne);Dco=r(ZUr,"vit_mae"),ZUr.forEach(t),Gco=r(w0e," \u2014 "),VB=n(w0e,"A",{href:!0});var eJr=s(VB);Oco=r(eJr,"ViTFeatureExtractor"),eJr.forEach(t),Vco=r(w0e," (ViTMAE model)"),w0e.forEach(t),Xco=i(re),yh=n(re,"LI",{});var A0e=s(yh);lne=n(A0e,"STRONG",{});var oJr=s(lne);zco=r(oJr,"wav2vec2"),oJr.forEach(t),Wco=r(A0e," \u2014 "),XB=n(A0e,"A",{href:!0});var rJr=s(XB);Qco=r(rJr,"Wav2Vec2FeatureExtractor"),rJr.forEach(t),Hco=r(A0e," (Wav2Vec2 model)"),A0e.forEach(t),Uco=i(re),Lh=n(re,"LI",{});var y0e=s(Lh);ine=n(y0e,"STRONG",{});var tJr=s(ine);Jco=r(tJr,"wav2vec2-conformer"),tJr.forEach(t),Yco=r(y0e," \u2014 "),zB=n(y0e,"A",{href:!0});var aJr=s(zB);Kco=r(aJr,"Wav2Vec2FeatureExtractor"),aJr.forEach(t),Zco=r(y0e," (Wav2Vec2-Conformer model)"),y0e.forEach(t),efo=i(re),xh=n(re,"LI",{});var L0e=s(xh);dne=n(L0e,"STRONG",{});var nJr=s(dne);ofo=r(nJr,"yolos"),nJr.forEach(t),rfo=r(L0e," \u2014 "),WB=n(L0e,"A",{href:!0});var sJr=s(WB);tfo=r(sJr,"YolosFeatureExtractor"),sJr.forEach(t),afo=r(L0e," (YOLOS model)"),L0e.forEach(t),re.forEach(t),nfo=i(Zt),T($h.$$.fragment,Zt),sfo=i(Zt),T(kh.$$.fragment,Zt),Zt.forEach(t),lfo=i(js),Sh=n(js,"DIV",{class:!0});var mje=s(Sh);T(R6.$$.fragment,mje),ifo=i(mje),cne=n(mje,"P",{});var lJr=s(cne);dfo=r(lJr,"Register a new feature extractor for this class."),lJr.forEach(t),mje.forEach(t),js.forEach(t),fqe=i(f),Ei=n(f,"H2",{class:!0});var gje=s(Ei);Rh=n(gje,"A",{id:!0,class:!0,href:!0});var iJr=s(Rh);fne=n(iJr,"SPAN",{});var dJr=s(fne);T(P6.$$.fragment,dJr),dJr.forEach(t),iJr.forEach(t),cfo=i(gje),mne=n(gje,"SPAN",{});var cJr=s(mne);ffo=r(cJr,"AutoProcessor"),cJr.forEach(t),gje.forEach(t),mqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(B6.$$.fragment,Ds),mfo=i(Ds),I6=n(Ds,"P",{});var hje=s(I6);gfo=r(hje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=n(hje,"A",{href:!0});var fJr=s(QB);hfo=r(fJr,"AutoProcessor.from_pretrained()"),fJr.forEach(t),pfo=r(hje," class method."),hje.forEach(t),_fo=i(Ds),q6=n(Ds,"P",{});var pje=s(q6);ufo=r(pje,"This class cannot be instantiated directly using "),gne=n(pje,"CODE",{});var mJr=s(gne);bfo=r(mJr,"__init__()"),mJr.forEach(t),vfo=r(pje," (throws an error)."),pje.forEach(t),Ffo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(N6.$$.fragment,ea),Tfo=i(ea),hne=n(ea,"P",{});var gJr=s(hne);Mfo=r(gJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gJr.forEach(t),Efo=i(ea),Ci=n(ea,"P",{});var OK=s(Ci);Cfo=r(OK,"The processor class to instantiate is selected based on the "),pne=n(OK,"CODE",{});var hJr=s(pne);wfo=r(hJr,"model_type"),hJr.forEach(t),Afo=r(OK,` property of the config object (either
passed as an argument or loaded from `),_ne=n(OK,"CODE",{});var pJr=s(_ne);yfo=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),Lfo=r(OK," if possible):"),OK.forEach(t),xfo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Ph=n(be,"LI",{});var x0e=s(Ph);une=n(x0e,"STRONG",{});var _Jr=s(une);$fo=r(_Jr,"clip"),_Jr.forEach(t),kfo=r(x0e," \u2014 "),HB=n(x0e,"A",{href:!0});var uJr=s(HB);Sfo=r(uJr,"CLIPProcessor"),uJr.forEach(t),Rfo=r(x0e," (CLIP model)"),x0e.forEach(t),Pfo=i(be),Bh=n(be,"LI",{});var $0e=s(Bh);bne=n($0e,"STRONG",{});var bJr=s(bne);Bfo=r(bJr,"flava"),bJr.forEach(t),Ifo=r($0e," \u2014 "),vne=n($0e,"CODE",{});var vJr=s(vne);qfo=r(vJr,"FLAVAProcessor"),vJr.forEach(t),Nfo=r($0e," (Flava model)"),$0e.forEach(t),jfo=i(be),Ih=n(be,"LI",{});var k0e=s(Ih);Fne=n(k0e,"STRONG",{});var FJr=s(Fne);Dfo=r(FJr,"layoutlmv2"),FJr.forEach(t),Gfo=r(k0e," \u2014 "),UB=n(k0e,"A",{href:!0});var TJr=s(UB);Ofo=r(TJr,"LayoutLMv2Processor"),TJr.forEach(t),Vfo=r(k0e," (LayoutLMv2 model)"),k0e.forEach(t),Xfo=i(be),qh=n(be,"LI",{});var S0e=s(qh);Tne=n(S0e,"STRONG",{});var MJr=s(Tne);zfo=r(MJr,"layoutxlm"),MJr.forEach(t),Wfo=r(S0e," \u2014 "),JB=n(S0e,"A",{href:!0});var EJr=s(JB);Qfo=r(EJr,"LayoutXLMProcessor"),EJr.forEach(t),Hfo=r(S0e," (LayoutXLM model)"),S0e.forEach(t),Ufo=i(be),Nh=n(be,"LI",{});var R0e=s(Nh);Mne=n(R0e,"STRONG",{});var CJr=s(Mne);Jfo=r(CJr,"sew"),CJr.forEach(t),Yfo=r(R0e," \u2014 "),YB=n(R0e,"A",{href:!0});var wJr=s(YB);Kfo=r(wJr,"Wav2Vec2Processor"),wJr.forEach(t),Zfo=r(R0e," (SEW model)"),R0e.forEach(t),emo=i(be),jh=n(be,"LI",{});var P0e=s(jh);Ene=n(P0e,"STRONG",{});var AJr=s(Ene);omo=r(AJr,"sew-d"),AJr.forEach(t),rmo=r(P0e," \u2014 "),KB=n(P0e,"A",{href:!0});var yJr=s(KB);tmo=r(yJr,"Wav2Vec2Processor"),yJr.forEach(t),amo=r(P0e," (SEW-D model)"),P0e.forEach(t),nmo=i(be),Dh=n(be,"LI",{});var B0e=s(Dh);Cne=n(B0e,"STRONG",{});var LJr=s(Cne);smo=r(LJr,"speech_to_text"),LJr.forEach(t),lmo=r(B0e," \u2014 "),ZB=n(B0e,"A",{href:!0});var xJr=s(ZB);imo=r(xJr,"Speech2TextProcessor"),xJr.forEach(t),dmo=r(B0e," (Speech2Text model)"),B0e.forEach(t),cmo=i(be),Gh=n(be,"LI",{});var I0e=s(Gh);wne=n(I0e,"STRONG",{});var $Jr=s(wne);fmo=r($Jr,"speech_to_text_2"),$Jr.forEach(t),mmo=r(I0e," \u2014 "),eI=n(I0e,"A",{href:!0});var kJr=s(eI);gmo=r(kJr,"Speech2Text2Processor"),kJr.forEach(t),hmo=r(I0e," (Speech2Text2 model)"),I0e.forEach(t),pmo=i(be),Oh=n(be,"LI",{});var q0e=s(Oh);Ane=n(q0e,"STRONG",{});var SJr=s(Ane);_mo=r(SJr,"trocr"),SJr.forEach(t),umo=r(q0e," \u2014 "),oI=n(q0e,"A",{href:!0});var RJr=s(oI);bmo=r(RJr,"TrOCRProcessor"),RJr.forEach(t),vmo=r(q0e," (TrOCR model)"),q0e.forEach(t),Fmo=i(be),Vh=n(be,"LI",{});var N0e=s(Vh);yne=n(N0e,"STRONG",{});var PJr=s(yne);Tmo=r(PJr,"unispeech"),PJr.forEach(t),Mmo=r(N0e," \u2014 "),rI=n(N0e,"A",{href:!0});var BJr=s(rI);Emo=r(BJr,"Wav2Vec2Processor"),BJr.forEach(t),Cmo=r(N0e," (UniSpeech model)"),N0e.forEach(t),wmo=i(be),Xh=n(be,"LI",{});var j0e=s(Xh);Lne=n(j0e,"STRONG",{});var IJr=s(Lne);Amo=r(IJr,"unispeech-sat"),IJr.forEach(t),ymo=r(j0e," \u2014 "),tI=n(j0e,"A",{href:!0});var qJr=s(tI);Lmo=r(qJr,"Wav2Vec2Processor"),qJr.forEach(t),xmo=r(j0e," (UniSpeechSat model)"),j0e.forEach(t),$mo=i(be),zh=n(be,"LI",{});var D0e=s(zh);xne=n(D0e,"STRONG",{});var NJr=s(xne);kmo=r(NJr,"vilt"),NJr.forEach(t),Smo=r(D0e," \u2014 "),aI=n(D0e,"A",{href:!0});var jJr=s(aI);Rmo=r(jJr,"ViltProcessor"),jJr.forEach(t),Pmo=r(D0e," (ViLT model)"),D0e.forEach(t),Bmo=i(be),Wh=n(be,"LI",{});var G0e=s(Wh);$ne=n(G0e,"STRONG",{});var DJr=s($ne);Imo=r(DJr,"vision-text-dual-encoder"),DJr.forEach(t),qmo=r(G0e," \u2014 "),nI=n(G0e,"A",{href:!0});var GJr=s(nI);Nmo=r(GJr,"VisionTextDualEncoderProcessor"),GJr.forEach(t),jmo=r(G0e," (VisionTextDualEncoder model)"),G0e.forEach(t),Dmo=i(be),Qh=n(be,"LI",{});var O0e=s(Qh);kne=n(O0e,"STRONG",{});var OJr=s(kne);Gmo=r(OJr,"wav2vec2"),OJr.forEach(t),Omo=r(O0e," \u2014 "),sI=n(O0e,"A",{href:!0});var VJr=s(sI);Vmo=r(VJr,"Wav2Vec2Processor"),VJr.forEach(t),Xmo=r(O0e," (Wav2Vec2 model)"),O0e.forEach(t),zmo=i(be),Hh=n(be,"LI",{});var V0e=s(Hh);Sne=n(V0e,"STRONG",{});var XJr=s(Sne);Wmo=r(XJr,"wav2vec2-conformer"),XJr.forEach(t),Qmo=r(V0e," \u2014 "),lI=n(V0e,"A",{href:!0});var zJr=s(lI);Hmo=r(zJr,"Wav2Vec2Processor"),zJr.forEach(t),Umo=r(V0e," (Wav2Vec2-Conformer model)"),V0e.forEach(t),Jmo=i(be),Uh=n(be,"LI",{});var X0e=s(Uh);Rne=n(X0e,"STRONG",{});var WJr=s(Rne);Ymo=r(WJr,"wavlm"),WJr.forEach(t),Kmo=r(X0e," \u2014 "),iI=n(X0e,"A",{href:!0});var QJr=s(iI);Zmo=r(QJr,"Wav2Vec2Processor"),QJr.forEach(t),ego=r(X0e," (WavLM model)"),X0e.forEach(t),be.forEach(t),ogo=i(ea),T(Jh.$$.fragment,ea),rgo=i(ea),T(Yh.$$.fragment,ea),ea.forEach(t),tgo=i(Ds),Kh=n(Ds,"DIV",{class:!0});var _je=s(Kh);T(j6.$$.fragment,_je),ago=i(_je),Pne=n(_je,"P",{});var HJr=s(Pne);ngo=r(HJr,"Register a new processor for this class."),HJr.forEach(t),_je.forEach(t),Ds.forEach(t),gqe=i(f),wi=n(f,"H2",{class:!0});var uje=s(wi);Zh=n(uje,"A",{id:!0,class:!0,href:!0});var UJr=s(Zh);Bne=n(UJr,"SPAN",{});var JJr=s(Bne);T(D6.$$.fragment,JJr),JJr.forEach(t),UJr.forEach(t),sgo=i(uje),Ine=n(uje,"SPAN",{});var YJr=s(Ine);lgo=r(YJr,"AutoModel"),YJr.forEach(t),uje.forEach(t),hqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(G6.$$.fragment,Gs),igo=i(Gs),Ai=n(Gs,"P",{});var VK=s(Ai);dgo=r(VK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dI=n(VK,"A",{href:!0});var KJr=s(dI);cgo=r(KJr,"from_pretrained()"),KJr.forEach(t),fgo=r(VK," class method or the "),cI=n(VK,"A",{href:!0});var ZJr=s(cI);mgo=r(ZJr,"from_config()"),ZJr.forEach(t),ggo=r(VK,` class
method.`),VK.forEach(t),hgo=i(Gs),O6=n(Gs,"P",{});var bje=s(O6);pgo=r(bje,"This class cannot be instantiated directly using "),qne=n(bje,"CODE",{});var eYr=s(qne);_go=r(eYr,"__init__()"),eYr.forEach(t),ugo=r(bje," (throws an error)."),bje.forEach(t),bgo=i(Gs),tt=n(Gs,"DIV",{class:!0});var b0=s(tt);T(V6.$$.fragment,b0),vgo=i(b0),Nne=n(b0,"P",{});var oYr=s(Nne);Fgo=r(oYr,"Instantiates one of the base model classes of the library from a configuration."),oYr.forEach(t),Tgo=i(b0),yi=n(b0,"P",{});var XK=s(yi);Mgo=r(XK,`Note:
Loading a model from its configuration file does `),jne=n(XK,"STRONG",{});var rYr=s(jne);Ego=r(rYr,"not"),rYr.forEach(t),Cgo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=n(XK,"A",{href:!0});var tYr=s(fI);wgo=r(tYr,"from_pretrained()"),tYr.forEach(t),Ago=r(XK," to load the model weights."),XK.forEach(t),ygo=i(b0),T(ep.$$.fragment,b0),b0.forEach(t),Lgo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(X6.$$.fragment,oa),xgo=i(oa),Dne=n(oa,"P",{});var aYr=s(Dne);$go=r(aYr,"Instantiate one of the base model classes of the library from a pretrained model."),aYr.forEach(t),kgo=i(oa),La=n(oa,"P",{});var v0=s(La);Sgo=r(v0,"The model class to instantiate is selected based on the "),Gne=n(v0,"CODE",{});var nYr=s(Gne);Rgo=r(nYr,"model_type"),nYr.forEach(t),Pgo=r(v0,` property of the config object (either
passed as an argument or loaded from `),One=n(v0,"CODE",{});var sYr=s(One);Bgo=r(sYr,"pretrained_model_name_or_path"),sYr.forEach(t),Igo=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=n(v0,"CODE",{});var lYr=s(Vne);qgo=r(lYr,"pretrained_model_name_or_path"),lYr.forEach(t),Ngo=r(v0,":"),v0.forEach(t),jgo=i(oa),x=n(oa,"UL",{});var $=s(x);op=n($,"LI",{});var z0e=s(op);Xne=n(z0e,"STRONG",{});var iYr=s(Xne);Dgo=r(iYr,"albert"),iYr.forEach(t),Ggo=r(z0e," \u2014 "),mI=n(z0e,"A",{href:!0});var dYr=s(mI);Ogo=r(dYr,"AlbertModel"),dYr.forEach(t),Vgo=r(z0e," (ALBERT model)"),z0e.forEach(t),Xgo=i($),rp=n($,"LI",{});var W0e=s(rp);zne=n(W0e,"STRONG",{});var cYr=s(zne);zgo=r(cYr,"bart"),cYr.forEach(t),Wgo=r(W0e," \u2014 "),gI=n(W0e,"A",{href:!0});var fYr=s(gI);Qgo=r(fYr,"BartModel"),fYr.forEach(t),Hgo=r(W0e," (BART model)"),W0e.forEach(t),Ugo=i($),tp=n($,"LI",{});var Q0e=s(tp);Wne=n(Q0e,"STRONG",{});var mYr=s(Wne);Jgo=r(mYr,"beit"),mYr.forEach(t),Ygo=r(Q0e," \u2014 "),hI=n(Q0e,"A",{href:!0});var gYr=s(hI);Kgo=r(gYr,"BeitModel"),gYr.forEach(t),Zgo=r(Q0e," (BEiT model)"),Q0e.forEach(t),eho=i($),ap=n($,"LI",{});var H0e=s(ap);Qne=n(H0e,"STRONG",{});var hYr=s(Qne);oho=r(hYr,"bert"),hYr.forEach(t),rho=r(H0e," \u2014 "),pI=n(H0e,"A",{href:!0});var pYr=s(pI);tho=r(pYr,"BertModel"),pYr.forEach(t),aho=r(H0e," (BERT model)"),H0e.forEach(t),nho=i($),np=n($,"LI",{});var U0e=s(np);Hne=n(U0e,"STRONG",{});var _Yr=s(Hne);sho=r(_Yr,"bert-generation"),_Yr.forEach(t),lho=r(U0e," \u2014 "),_I=n(U0e,"A",{href:!0});var uYr=s(_I);iho=r(uYr,"BertGenerationEncoder"),uYr.forEach(t),dho=r(U0e," (Bert Generation model)"),U0e.forEach(t),cho=i($),sp=n($,"LI",{});var J0e=s(sp);Une=n(J0e,"STRONG",{});var bYr=s(Une);fho=r(bYr,"big_bird"),bYr.forEach(t),mho=r(J0e," \u2014 "),uI=n(J0e,"A",{href:!0});var vYr=s(uI);gho=r(vYr,"BigBirdModel"),vYr.forEach(t),hho=r(J0e," (BigBird model)"),J0e.forEach(t),pho=i($),lp=n($,"LI",{});var Y0e=s(lp);Jne=n(Y0e,"STRONG",{});var FYr=s(Jne);_ho=r(FYr,"bigbird_pegasus"),FYr.forEach(t),uho=r(Y0e," \u2014 "),bI=n(Y0e,"A",{href:!0});var TYr=s(bI);bho=r(TYr,"BigBirdPegasusModel"),TYr.forEach(t),vho=r(Y0e," (BigBirdPegasus model)"),Y0e.forEach(t),Fho=i($),ip=n($,"LI",{});var K0e=s(ip);Yne=n(K0e,"STRONG",{});var MYr=s(Yne);Tho=r(MYr,"blenderbot"),MYr.forEach(t),Mho=r(K0e," \u2014 "),vI=n(K0e,"A",{href:!0});var EYr=s(vI);Eho=r(EYr,"BlenderbotModel"),EYr.forEach(t),Cho=r(K0e," (Blenderbot model)"),K0e.forEach(t),who=i($),dp=n($,"LI",{});var Z0e=s(dp);Kne=n(Z0e,"STRONG",{});var CYr=s(Kne);Aho=r(CYr,"blenderbot-small"),CYr.forEach(t),yho=r(Z0e," \u2014 "),FI=n(Z0e,"A",{href:!0});var wYr=s(FI);Lho=r(wYr,"BlenderbotSmallModel"),wYr.forEach(t),xho=r(Z0e," (BlenderbotSmall model)"),Z0e.forEach(t),$ho=i($),cp=n($,"LI",{});var eAe=s(cp);Zne=n(eAe,"STRONG",{});var AYr=s(Zne);kho=r(AYr,"camembert"),AYr.forEach(t),Sho=r(eAe," \u2014 "),TI=n(eAe,"A",{href:!0});var yYr=s(TI);Rho=r(yYr,"CamembertModel"),yYr.forEach(t),Pho=r(eAe," (CamemBERT model)"),eAe.forEach(t),Bho=i($),fp=n($,"LI",{});var oAe=s(fp);ese=n(oAe,"STRONG",{});var LYr=s(ese);Iho=r(LYr,"canine"),LYr.forEach(t),qho=r(oAe," \u2014 "),MI=n(oAe,"A",{href:!0});var xYr=s(MI);Nho=r(xYr,"CanineModel"),xYr.forEach(t),jho=r(oAe," (Canine model)"),oAe.forEach(t),Dho=i($),mp=n($,"LI",{});var rAe=s(mp);ose=n(rAe,"STRONG",{});var $Yr=s(ose);Gho=r($Yr,"clip"),$Yr.forEach(t),Oho=r(rAe," \u2014 "),EI=n(rAe,"A",{href:!0});var kYr=s(EI);Vho=r(kYr,"CLIPModel"),kYr.forEach(t),Xho=r(rAe," (CLIP model)"),rAe.forEach(t),zho=i($),gp=n($,"LI",{});var tAe=s(gp);rse=n(tAe,"STRONG",{});var SYr=s(rse);Who=r(SYr,"convbert"),SYr.forEach(t),Qho=r(tAe," \u2014 "),CI=n(tAe,"A",{href:!0});var RYr=s(CI);Hho=r(RYr,"ConvBertModel"),RYr.forEach(t),Uho=r(tAe," (ConvBERT model)"),tAe.forEach(t),Jho=i($),hp=n($,"LI",{});var aAe=s(hp);tse=n(aAe,"STRONG",{});var PYr=s(tse);Yho=r(PYr,"convnext"),PYr.forEach(t),Kho=r(aAe," \u2014 "),wI=n(aAe,"A",{href:!0});var BYr=s(wI);Zho=r(BYr,"ConvNextModel"),BYr.forEach(t),epo=r(aAe," (ConvNext model)"),aAe.forEach(t),opo=i($),pp=n($,"LI",{});var nAe=s(pp);ase=n(nAe,"STRONG",{});var IYr=s(ase);rpo=r(IYr,"ctrl"),IYr.forEach(t),tpo=r(nAe," \u2014 "),AI=n(nAe,"A",{href:!0});var qYr=s(AI);apo=r(qYr,"CTRLModel"),qYr.forEach(t),npo=r(nAe," (CTRL model)"),nAe.forEach(t),spo=i($),_p=n($,"LI",{});var sAe=s(_p);nse=n(sAe,"STRONG",{});var NYr=s(nse);lpo=r(NYr,"cvt"),NYr.forEach(t),ipo=r(sAe," \u2014 "),yI=n(sAe,"A",{href:!0});var jYr=s(yI);dpo=r(jYr,"CvtModel"),jYr.forEach(t),cpo=r(sAe," (CvT model)"),sAe.forEach(t),fpo=i($),up=n($,"LI",{});var lAe=s(up);sse=n(lAe,"STRONG",{});var DYr=s(sse);mpo=r(DYr,"data2vec-audio"),DYr.forEach(t),gpo=r(lAe," \u2014 "),LI=n(lAe,"A",{href:!0});var GYr=s(LI);hpo=r(GYr,"Data2VecAudioModel"),GYr.forEach(t),ppo=r(lAe," (Data2VecAudio model)"),lAe.forEach(t),_po=i($),bp=n($,"LI",{});var iAe=s(bp);lse=n(iAe,"STRONG",{});var OYr=s(lse);upo=r(OYr,"data2vec-text"),OYr.forEach(t),bpo=r(iAe," \u2014 "),xI=n(iAe,"A",{href:!0});var VYr=s(xI);vpo=r(VYr,"Data2VecTextModel"),VYr.forEach(t),Fpo=r(iAe," (Data2VecText model)"),iAe.forEach(t),Tpo=i($),vp=n($,"LI",{});var dAe=s(vp);ise=n(dAe,"STRONG",{});var XYr=s(ise);Mpo=r(XYr,"data2vec-vision"),XYr.forEach(t),Epo=r(dAe," \u2014 "),$I=n(dAe,"A",{href:!0});var zYr=s($I);Cpo=r(zYr,"Data2VecVisionModel"),zYr.forEach(t),wpo=r(dAe," (Data2VecVision model)"),dAe.forEach(t),Apo=i($),Fp=n($,"LI",{});var cAe=s(Fp);dse=n(cAe,"STRONG",{});var WYr=s(dse);ypo=r(WYr,"deberta"),WYr.forEach(t),Lpo=r(cAe," \u2014 "),kI=n(cAe,"A",{href:!0});var QYr=s(kI);xpo=r(QYr,"DebertaModel"),QYr.forEach(t),$po=r(cAe," (DeBERTa model)"),cAe.forEach(t),kpo=i($),Tp=n($,"LI",{});var fAe=s(Tp);cse=n(fAe,"STRONG",{});var HYr=s(cse);Spo=r(HYr,"deberta-v2"),HYr.forEach(t),Rpo=r(fAe," \u2014 "),SI=n(fAe,"A",{href:!0});var UYr=s(SI);Ppo=r(UYr,"DebertaV2Model"),UYr.forEach(t),Bpo=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),Ipo=i($),Mp=n($,"LI",{});var mAe=s(Mp);fse=n(mAe,"STRONG",{});var JYr=s(fse);qpo=r(JYr,"decision_transformer"),JYr.forEach(t),Npo=r(mAe," \u2014 "),RI=n(mAe,"A",{href:!0});var YYr=s(RI);jpo=r(YYr,"DecisionTransformerModel"),YYr.forEach(t),Dpo=r(mAe," (Decision Transformer model)"),mAe.forEach(t),Gpo=i($),Ep=n($,"LI",{});var gAe=s(Ep);mse=n(gAe,"STRONG",{});var KYr=s(mse);Opo=r(KYr,"deit"),KYr.forEach(t),Vpo=r(gAe," \u2014 "),PI=n(gAe,"A",{href:!0});var ZYr=s(PI);Xpo=r(ZYr,"DeiTModel"),ZYr.forEach(t),zpo=r(gAe," (DeiT model)"),gAe.forEach(t),Wpo=i($),Cp=n($,"LI",{});var hAe=s(Cp);gse=n(hAe,"STRONG",{});var eKr=s(gse);Qpo=r(eKr,"detr"),eKr.forEach(t),Hpo=r(hAe," \u2014 "),BI=n(hAe,"A",{href:!0});var oKr=s(BI);Upo=r(oKr,"DetrModel"),oKr.forEach(t),Jpo=r(hAe," (DETR model)"),hAe.forEach(t),Ypo=i($),wp=n($,"LI",{});var pAe=s(wp);hse=n(pAe,"STRONG",{});var rKr=s(hse);Kpo=r(rKr,"distilbert"),rKr.forEach(t),Zpo=r(pAe," \u2014 "),II=n(pAe,"A",{href:!0});var tKr=s(II);e_o=r(tKr,"DistilBertModel"),tKr.forEach(t),o_o=r(pAe," (DistilBERT model)"),pAe.forEach(t),r_o=i($),Ap=n($,"LI",{});var _Ae=s(Ap);pse=n(_Ae,"STRONG",{});var aKr=s(pse);t_o=r(aKr,"dpr"),aKr.forEach(t),a_o=r(_Ae," \u2014 "),qI=n(_Ae,"A",{href:!0});var nKr=s(qI);n_o=r(nKr,"DPRQuestionEncoder"),nKr.forEach(t),s_o=r(_Ae," (DPR model)"),_Ae.forEach(t),l_o=i($),yp=n($,"LI",{});var uAe=s(yp);_se=n(uAe,"STRONG",{});var sKr=s(_se);i_o=r(sKr,"dpt"),sKr.forEach(t),d_o=r(uAe," \u2014 "),NI=n(uAe,"A",{href:!0});var lKr=s(NI);c_o=r(lKr,"DPTModel"),lKr.forEach(t),f_o=r(uAe," (DPT model)"),uAe.forEach(t),m_o=i($),Lp=n($,"LI",{});var bAe=s(Lp);use=n(bAe,"STRONG",{});var iKr=s(use);g_o=r(iKr,"electra"),iKr.forEach(t),h_o=r(bAe," \u2014 "),jI=n(bAe,"A",{href:!0});var dKr=s(jI);p_o=r(dKr,"ElectraModel"),dKr.forEach(t),__o=r(bAe," (ELECTRA model)"),bAe.forEach(t),u_o=i($),xp=n($,"LI",{});var vAe=s(xp);bse=n(vAe,"STRONG",{});var cKr=s(bse);b_o=r(cKr,"flaubert"),cKr.forEach(t),v_o=r(vAe," \u2014 "),DI=n(vAe,"A",{href:!0});var fKr=s(DI);F_o=r(fKr,"FlaubertModel"),fKr.forEach(t),T_o=r(vAe," (FlauBERT model)"),vAe.forEach(t),M_o=i($),$p=n($,"LI",{});var FAe=s($p);vse=n(FAe,"STRONG",{});var mKr=s(vse);E_o=r(mKr,"flava"),mKr.forEach(t),C_o=r(FAe," \u2014 "),GI=n(FAe,"A",{href:!0});var gKr=s(GI);w_o=r(gKr,"FlavaModel"),gKr.forEach(t),A_o=r(FAe," (Flava model)"),FAe.forEach(t),y_o=i($),kp=n($,"LI",{});var TAe=s(kp);Fse=n(TAe,"STRONG",{});var hKr=s(Fse);L_o=r(hKr,"fnet"),hKr.forEach(t),x_o=r(TAe," \u2014 "),OI=n(TAe,"A",{href:!0});var pKr=s(OI);$_o=r(pKr,"FNetModel"),pKr.forEach(t),k_o=r(TAe," (FNet model)"),TAe.forEach(t),S_o=i($),Sp=n($,"LI",{});var MAe=s(Sp);Tse=n(MAe,"STRONG",{});var _Kr=s(Tse);R_o=r(_Kr,"fsmt"),_Kr.forEach(t),P_o=r(MAe," \u2014 "),VI=n(MAe,"A",{href:!0});var uKr=s(VI);B_o=r(uKr,"FSMTModel"),uKr.forEach(t),I_o=r(MAe," (FairSeq Machine-Translation model)"),MAe.forEach(t),q_o=i($),Ps=n($,"LI",{});var x$=s(Ps);Mse=n(x$,"STRONG",{});var bKr=s(Mse);N_o=r(bKr,"funnel"),bKr.forEach(t),j_o=r(x$," \u2014 "),XI=n(x$,"A",{href:!0});var vKr=s(XI);D_o=r(vKr,"FunnelModel"),vKr.forEach(t),G_o=r(x$," or "),zI=n(x$,"A",{href:!0});var FKr=s(zI);O_o=r(FKr,"FunnelBaseModel"),FKr.forEach(t),V_o=r(x$," (Funnel Transformer model)"),x$.forEach(t),X_o=i($),Rp=n($,"LI",{});var EAe=s(Rp);Ese=n(EAe,"STRONG",{});var TKr=s(Ese);z_o=r(TKr,"glpn"),TKr.forEach(t),W_o=r(EAe," \u2014 "),WI=n(EAe,"A",{href:!0});var MKr=s(WI);Q_o=r(MKr,"GLPNModel"),MKr.forEach(t),H_o=r(EAe," (GLPN model)"),EAe.forEach(t),U_o=i($),Pp=n($,"LI",{});var CAe=s(Pp);Cse=n(CAe,"STRONG",{});var EKr=s(Cse);J_o=r(EKr,"gpt2"),EKr.forEach(t),Y_o=r(CAe," \u2014 "),QI=n(CAe,"A",{href:!0});var CKr=s(QI);K_o=r(CKr,"GPT2Model"),CKr.forEach(t),Z_o=r(CAe," (OpenAI GPT-2 model)"),CAe.forEach(t),euo=i($),Bp=n($,"LI",{});var wAe=s(Bp);wse=n(wAe,"STRONG",{});var wKr=s(wse);ouo=r(wKr,"gpt_neo"),wKr.forEach(t),ruo=r(wAe," \u2014 "),HI=n(wAe,"A",{href:!0});var AKr=s(HI);tuo=r(AKr,"GPTNeoModel"),AKr.forEach(t),auo=r(wAe," (GPT Neo model)"),wAe.forEach(t),nuo=i($),Ip=n($,"LI",{});var AAe=s(Ip);Ase=n(AAe,"STRONG",{});var yKr=s(Ase);suo=r(yKr,"gptj"),yKr.forEach(t),luo=r(AAe," \u2014 "),UI=n(AAe,"A",{href:!0});var LKr=s(UI);iuo=r(LKr,"GPTJModel"),LKr.forEach(t),duo=r(AAe," (GPT-J model)"),AAe.forEach(t),cuo=i($),qp=n($,"LI",{});var yAe=s(qp);yse=n(yAe,"STRONG",{});var xKr=s(yse);fuo=r(xKr,"hubert"),xKr.forEach(t),muo=r(yAe," \u2014 "),JI=n(yAe,"A",{href:!0});var $Kr=s(JI);guo=r($Kr,"HubertModel"),$Kr.forEach(t),huo=r(yAe," (Hubert model)"),yAe.forEach(t),puo=i($),Np=n($,"LI",{});var LAe=s(Np);Lse=n(LAe,"STRONG",{});var kKr=s(Lse);_uo=r(kKr,"ibert"),kKr.forEach(t),uuo=r(LAe," \u2014 "),YI=n(LAe,"A",{href:!0});var SKr=s(YI);buo=r(SKr,"IBertModel"),SKr.forEach(t),vuo=r(LAe," (I-BERT model)"),LAe.forEach(t),Fuo=i($),jp=n($,"LI",{});var xAe=s(jp);xse=n(xAe,"STRONG",{});var RKr=s(xse);Tuo=r(RKr,"imagegpt"),RKr.forEach(t),Muo=r(xAe," \u2014 "),KI=n(xAe,"A",{href:!0});var PKr=s(KI);Euo=r(PKr,"ImageGPTModel"),PKr.forEach(t),Cuo=r(xAe," (ImageGPT model)"),xAe.forEach(t),wuo=i($),Dp=n($,"LI",{});var $Ae=s(Dp);$se=n($Ae,"STRONG",{});var BKr=s($se);Auo=r(BKr,"layoutlm"),BKr.forEach(t),yuo=r($Ae," \u2014 "),ZI=n($Ae,"A",{href:!0});var IKr=s(ZI);Luo=r(IKr,"LayoutLMModel"),IKr.forEach(t),xuo=r($Ae," (LayoutLM model)"),$Ae.forEach(t),$uo=i($),Gp=n($,"LI",{});var kAe=s(Gp);kse=n(kAe,"STRONG",{});var qKr=s(kse);kuo=r(qKr,"layoutlmv2"),qKr.forEach(t),Suo=r(kAe," \u2014 "),eq=n(kAe,"A",{href:!0});var NKr=s(eq);Ruo=r(NKr,"LayoutLMv2Model"),NKr.forEach(t),Puo=r(kAe," (LayoutLMv2 model)"),kAe.forEach(t),Buo=i($),Op=n($,"LI",{});var SAe=s(Op);Sse=n(SAe,"STRONG",{});var jKr=s(Sse);Iuo=r(jKr,"led"),jKr.forEach(t),quo=r(SAe," \u2014 "),oq=n(SAe,"A",{href:!0});var DKr=s(oq);Nuo=r(DKr,"LEDModel"),DKr.forEach(t),juo=r(SAe," (LED model)"),SAe.forEach(t),Duo=i($),Vp=n($,"LI",{});var RAe=s(Vp);Rse=n(RAe,"STRONG",{});var GKr=s(Rse);Guo=r(GKr,"longformer"),GKr.forEach(t),Ouo=r(RAe," \u2014 "),rq=n(RAe,"A",{href:!0});var OKr=s(rq);Vuo=r(OKr,"LongformerModel"),OKr.forEach(t),Xuo=r(RAe," (Longformer model)"),RAe.forEach(t),zuo=i($),Xp=n($,"LI",{});var PAe=s(Xp);Pse=n(PAe,"STRONG",{});var VKr=s(Pse);Wuo=r(VKr,"luke"),VKr.forEach(t),Quo=r(PAe," \u2014 "),tq=n(PAe,"A",{href:!0});var XKr=s(tq);Huo=r(XKr,"LukeModel"),XKr.forEach(t),Uuo=r(PAe," (LUKE model)"),PAe.forEach(t),Juo=i($),zp=n($,"LI",{});var BAe=s(zp);Bse=n(BAe,"STRONG",{});var zKr=s(Bse);Yuo=r(zKr,"lxmert"),zKr.forEach(t),Kuo=r(BAe," \u2014 "),aq=n(BAe,"A",{href:!0});var WKr=s(aq);Zuo=r(WKr,"LxmertModel"),WKr.forEach(t),e2o=r(BAe," (LXMERT model)"),BAe.forEach(t),o2o=i($),Wp=n($,"LI",{});var IAe=s(Wp);Ise=n(IAe,"STRONG",{});var QKr=s(Ise);r2o=r(QKr,"m2m_100"),QKr.forEach(t),t2o=r(IAe," \u2014 "),nq=n(IAe,"A",{href:!0});var HKr=s(nq);a2o=r(HKr,"M2M100Model"),HKr.forEach(t),n2o=r(IAe," (M2M100 model)"),IAe.forEach(t),s2o=i($),Qp=n($,"LI",{});var qAe=s(Qp);qse=n(qAe,"STRONG",{});var UKr=s(qse);l2o=r(UKr,"marian"),UKr.forEach(t),i2o=r(qAe," \u2014 "),sq=n(qAe,"A",{href:!0});var JKr=s(sq);d2o=r(JKr,"MarianModel"),JKr.forEach(t),c2o=r(qAe," (Marian model)"),qAe.forEach(t),f2o=i($),Hp=n($,"LI",{});var NAe=s(Hp);Nse=n(NAe,"STRONG",{});var YKr=s(Nse);m2o=r(YKr,"maskformer"),YKr.forEach(t),g2o=r(NAe," \u2014 "),lq=n(NAe,"A",{href:!0});var KKr=s(lq);h2o=r(KKr,"MaskFormerModel"),KKr.forEach(t),p2o=r(NAe," (MaskFormer model)"),NAe.forEach(t),_2o=i($),Up=n($,"LI",{});var jAe=s(Up);jse=n(jAe,"STRONG",{});var ZKr=s(jse);u2o=r(ZKr,"mbart"),ZKr.forEach(t),b2o=r(jAe," \u2014 "),iq=n(jAe,"A",{href:!0});var eZr=s(iq);v2o=r(eZr,"MBartModel"),eZr.forEach(t),F2o=r(jAe," (mBART model)"),jAe.forEach(t),T2o=i($),Jp=n($,"LI",{});var DAe=s(Jp);Dse=n(DAe,"STRONG",{});var oZr=s(Dse);M2o=r(oZr,"megatron-bert"),oZr.forEach(t),E2o=r(DAe," \u2014 "),dq=n(DAe,"A",{href:!0});var rZr=s(dq);C2o=r(rZr,"MegatronBertModel"),rZr.forEach(t),w2o=r(DAe," (MegatronBert model)"),DAe.forEach(t),A2o=i($),Yp=n($,"LI",{});var GAe=s(Yp);Gse=n(GAe,"STRONG",{});var tZr=s(Gse);y2o=r(tZr,"mobilebert"),tZr.forEach(t),L2o=r(GAe," \u2014 "),cq=n(GAe,"A",{href:!0});var aZr=s(cq);x2o=r(aZr,"MobileBertModel"),aZr.forEach(t),$2o=r(GAe," (MobileBERT model)"),GAe.forEach(t),k2o=i($),Kp=n($,"LI",{});var OAe=s(Kp);Ose=n(OAe,"STRONG",{});var nZr=s(Ose);S2o=r(nZr,"mpnet"),nZr.forEach(t),R2o=r(OAe," \u2014 "),fq=n(OAe,"A",{href:!0});var sZr=s(fq);P2o=r(sZr,"MPNetModel"),sZr.forEach(t),B2o=r(OAe," (MPNet model)"),OAe.forEach(t),I2o=i($),Zp=n($,"LI",{});var VAe=s(Zp);Vse=n(VAe,"STRONG",{});var lZr=s(Vse);q2o=r(lZr,"mt5"),lZr.forEach(t),N2o=r(VAe," \u2014 "),mq=n(VAe,"A",{href:!0});var iZr=s(mq);j2o=r(iZr,"MT5Model"),iZr.forEach(t),D2o=r(VAe," (mT5 model)"),VAe.forEach(t),G2o=i($),e_=n($,"LI",{});var XAe=s(e_);Xse=n(XAe,"STRONG",{});var dZr=s(Xse);O2o=r(dZr,"nystromformer"),dZr.forEach(t),V2o=r(XAe," \u2014 "),gq=n(XAe,"A",{href:!0});var cZr=s(gq);X2o=r(cZr,"NystromformerModel"),cZr.forEach(t),z2o=r(XAe," (Nystromformer model)"),XAe.forEach(t),W2o=i($),o_=n($,"LI",{});var zAe=s(o_);zse=n(zAe,"STRONG",{});var fZr=s(zse);Q2o=r(fZr,"openai-gpt"),fZr.forEach(t),H2o=r(zAe," \u2014 "),hq=n(zAe,"A",{href:!0});var mZr=s(hq);U2o=r(mZr,"OpenAIGPTModel"),mZr.forEach(t),J2o=r(zAe," (OpenAI GPT model)"),zAe.forEach(t),Y2o=i($),r_=n($,"LI",{});var WAe=s(r_);Wse=n(WAe,"STRONG",{});var gZr=s(Wse);K2o=r(gZr,"opt"),gZr.forEach(t),Z2o=r(WAe," \u2014 "),pq=n(WAe,"A",{href:!0});var hZr=s(pq);e1o=r(hZr,"OPTModel"),hZr.forEach(t),o1o=r(WAe," (OPT model)"),WAe.forEach(t),r1o=i($),t_=n($,"LI",{});var QAe=s(t_);Qse=n(QAe,"STRONG",{});var pZr=s(Qse);t1o=r(pZr,"pegasus"),pZr.forEach(t),a1o=r(QAe," \u2014 "),_q=n(QAe,"A",{href:!0});var _Zr=s(_q);n1o=r(_Zr,"PegasusModel"),_Zr.forEach(t),s1o=r(QAe," (Pegasus model)"),QAe.forEach(t),l1o=i($),a_=n($,"LI",{});var HAe=s(a_);Hse=n(HAe,"STRONG",{});var uZr=s(Hse);i1o=r(uZr,"perceiver"),uZr.forEach(t),d1o=r(HAe," \u2014 "),uq=n(HAe,"A",{href:!0});var bZr=s(uq);c1o=r(bZr,"PerceiverModel"),bZr.forEach(t),f1o=r(HAe," (Perceiver model)"),HAe.forEach(t),m1o=i($),n_=n($,"LI",{});var UAe=s(n_);Use=n(UAe,"STRONG",{});var vZr=s(Use);g1o=r(vZr,"plbart"),vZr.forEach(t),h1o=r(UAe," \u2014 "),bq=n(UAe,"A",{href:!0});var FZr=s(bq);p1o=r(FZr,"PLBartModel"),FZr.forEach(t),_1o=r(UAe," (PLBart model)"),UAe.forEach(t),u1o=i($),s_=n($,"LI",{});var JAe=s(s_);Jse=n(JAe,"STRONG",{});var TZr=s(Jse);b1o=r(TZr,"poolformer"),TZr.forEach(t),v1o=r(JAe," \u2014 "),vq=n(JAe,"A",{href:!0});var MZr=s(vq);F1o=r(MZr,"PoolFormerModel"),MZr.forEach(t),T1o=r(JAe," (PoolFormer model)"),JAe.forEach(t),M1o=i($),l_=n($,"LI",{});var YAe=s(l_);Yse=n(YAe,"STRONG",{});var EZr=s(Yse);E1o=r(EZr,"prophetnet"),EZr.forEach(t),C1o=r(YAe," \u2014 "),Fq=n(YAe,"A",{href:!0});var CZr=s(Fq);w1o=r(CZr,"ProphetNetModel"),CZr.forEach(t),A1o=r(YAe," (ProphetNet model)"),YAe.forEach(t),y1o=i($),i_=n($,"LI",{});var KAe=s(i_);Kse=n(KAe,"STRONG",{});var wZr=s(Kse);L1o=r(wZr,"qdqbert"),wZr.forEach(t),x1o=r(KAe," \u2014 "),Tq=n(KAe,"A",{href:!0});var AZr=s(Tq);$1o=r(AZr,"QDQBertModel"),AZr.forEach(t),k1o=r(KAe," (QDQBert model)"),KAe.forEach(t),S1o=i($),d_=n($,"LI",{});var ZAe=s(d_);Zse=n(ZAe,"STRONG",{});var yZr=s(Zse);R1o=r(yZr,"reformer"),yZr.forEach(t),P1o=r(ZAe," \u2014 "),Mq=n(ZAe,"A",{href:!0});var LZr=s(Mq);B1o=r(LZr,"ReformerModel"),LZr.forEach(t),I1o=r(ZAe," (Reformer model)"),ZAe.forEach(t),q1o=i($),c_=n($,"LI",{});var e6e=s(c_);ele=n(e6e,"STRONG",{});var xZr=s(ele);N1o=r(xZr,"regnet"),xZr.forEach(t),j1o=r(e6e," \u2014 "),Eq=n(e6e,"A",{href:!0});var $Zr=s(Eq);D1o=r($Zr,"RegNetModel"),$Zr.forEach(t),G1o=r(e6e," (RegNet model)"),e6e.forEach(t),O1o=i($),f_=n($,"LI",{});var o6e=s(f_);ole=n(o6e,"STRONG",{});var kZr=s(ole);V1o=r(kZr,"rembert"),kZr.forEach(t),X1o=r(o6e," \u2014 "),Cq=n(o6e,"A",{href:!0});var SZr=s(Cq);z1o=r(SZr,"RemBertModel"),SZr.forEach(t),W1o=r(o6e," (RemBERT model)"),o6e.forEach(t),Q1o=i($),m_=n($,"LI",{});var r6e=s(m_);rle=n(r6e,"STRONG",{});var RZr=s(rle);H1o=r(RZr,"resnet"),RZr.forEach(t),U1o=r(r6e," \u2014 "),wq=n(r6e,"A",{href:!0});var PZr=s(wq);J1o=r(PZr,"ResNetModel"),PZr.forEach(t),Y1o=r(r6e," (ResNet model)"),r6e.forEach(t),K1o=i($),g_=n($,"LI",{});var t6e=s(g_);tle=n(t6e,"STRONG",{});var BZr=s(tle);Z1o=r(BZr,"retribert"),BZr.forEach(t),ebo=r(t6e," \u2014 "),Aq=n(t6e,"A",{href:!0});var IZr=s(Aq);obo=r(IZr,"RetriBertModel"),IZr.forEach(t),rbo=r(t6e," (RetriBERT model)"),t6e.forEach(t),tbo=i($),h_=n($,"LI",{});var a6e=s(h_);ale=n(a6e,"STRONG",{});var qZr=s(ale);abo=r(qZr,"roberta"),qZr.forEach(t),nbo=r(a6e," \u2014 "),yq=n(a6e,"A",{href:!0});var NZr=s(yq);sbo=r(NZr,"RobertaModel"),NZr.forEach(t),lbo=r(a6e," (RoBERTa model)"),a6e.forEach(t),ibo=i($),p_=n($,"LI",{});var n6e=s(p_);nle=n(n6e,"STRONG",{});var jZr=s(nle);dbo=r(jZr,"roformer"),jZr.forEach(t),cbo=r(n6e," \u2014 "),Lq=n(n6e,"A",{href:!0});var DZr=s(Lq);fbo=r(DZr,"RoFormerModel"),DZr.forEach(t),mbo=r(n6e," (RoFormer model)"),n6e.forEach(t),gbo=i($),__=n($,"LI",{});var s6e=s(__);sle=n(s6e,"STRONG",{});var GZr=s(sle);hbo=r(GZr,"segformer"),GZr.forEach(t),pbo=r(s6e," \u2014 "),xq=n(s6e,"A",{href:!0});var OZr=s(xq);_bo=r(OZr,"SegformerModel"),OZr.forEach(t),ubo=r(s6e," (SegFormer model)"),s6e.forEach(t),bbo=i($),u_=n($,"LI",{});var l6e=s(u_);lle=n(l6e,"STRONG",{});var VZr=s(lle);vbo=r(VZr,"sew"),VZr.forEach(t),Fbo=r(l6e," \u2014 "),$q=n(l6e,"A",{href:!0});var XZr=s($q);Tbo=r(XZr,"SEWModel"),XZr.forEach(t),Mbo=r(l6e," (SEW model)"),l6e.forEach(t),Ebo=i($),b_=n($,"LI",{});var i6e=s(b_);ile=n(i6e,"STRONG",{});var zZr=s(ile);Cbo=r(zZr,"sew-d"),zZr.forEach(t),wbo=r(i6e," \u2014 "),kq=n(i6e,"A",{href:!0});var WZr=s(kq);Abo=r(WZr,"SEWDModel"),WZr.forEach(t),ybo=r(i6e," (SEW-D model)"),i6e.forEach(t),Lbo=i($),v_=n($,"LI",{});var d6e=s(v_);dle=n(d6e,"STRONG",{});var QZr=s(dle);xbo=r(QZr,"speech_to_text"),QZr.forEach(t),$bo=r(d6e," \u2014 "),Sq=n(d6e,"A",{href:!0});var HZr=s(Sq);kbo=r(HZr,"Speech2TextModel"),HZr.forEach(t),Sbo=r(d6e," (Speech2Text model)"),d6e.forEach(t),Rbo=i($),F_=n($,"LI",{});var c6e=s(F_);cle=n(c6e,"STRONG",{});var UZr=s(cle);Pbo=r(UZr,"splinter"),UZr.forEach(t),Bbo=r(c6e," \u2014 "),Rq=n(c6e,"A",{href:!0});var JZr=s(Rq);Ibo=r(JZr,"SplinterModel"),JZr.forEach(t),qbo=r(c6e," (Splinter model)"),c6e.forEach(t),Nbo=i($),T_=n($,"LI",{});var f6e=s(T_);fle=n(f6e,"STRONG",{});var YZr=s(fle);jbo=r(YZr,"squeezebert"),YZr.forEach(t),Dbo=r(f6e," \u2014 "),Pq=n(f6e,"A",{href:!0});var KZr=s(Pq);Gbo=r(KZr,"SqueezeBertModel"),KZr.forEach(t),Obo=r(f6e," (SqueezeBERT model)"),f6e.forEach(t),Vbo=i($),M_=n($,"LI",{});var m6e=s(M_);mle=n(m6e,"STRONG",{});var ZZr=s(mle);Xbo=r(ZZr,"swin"),ZZr.forEach(t),zbo=r(m6e," \u2014 "),Bq=n(m6e,"A",{href:!0});var eet=s(Bq);Wbo=r(eet,"SwinModel"),eet.forEach(t),Qbo=r(m6e," (Swin model)"),m6e.forEach(t),Hbo=i($),E_=n($,"LI",{});var g6e=s(E_);gle=n(g6e,"STRONG",{});var oet=s(gle);Ubo=r(oet,"t5"),oet.forEach(t),Jbo=r(g6e," \u2014 "),Iq=n(g6e,"A",{href:!0});var ret=s(Iq);Ybo=r(ret,"T5Model"),ret.forEach(t),Kbo=r(g6e," (T5 model)"),g6e.forEach(t),Zbo=i($),C_=n($,"LI",{});var h6e=s(C_);hle=n(h6e,"STRONG",{});var tet=s(hle);e4o=r(tet,"tapas"),tet.forEach(t),o4o=r(h6e," \u2014 "),qq=n(h6e,"A",{href:!0});var aet=s(qq);r4o=r(aet,"TapasModel"),aet.forEach(t),t4o=r(h6e," (TAPAS model)"),h6e.forEach(t),a4o=i($),w_=n($,"LI",{});var p6e=s(w_);ple=n(p6e,"STRONG",{});var net=s(ple);n4o=r(net,"trajectory_transformer"),net.forEach(t),s4o=r(p6e," \u2014 "),Nq=n(p6e,"A",{href:!0});var set=s(Nq);l4o=r(set,"TrajectoryTransformerModel"),set.forEach(t),i4o=r(p6e," (Trajectory Transformer model)"),p6e.forEach(t),d4o=i($),A_=n($,"LI",{});var _6e=s(A_);_le=n(_6e,"STRONG",{});var iet=s(_le);c4o=r(iet,"transfo-xl"),iet.forEach(t),f4o=r(_6e," \u2014 "),jq=n(_6e,"A",{href:!0});var det=s(jq);m4o=r(det,"TransfoXLModel"),det.forEach(t),g4o=r(_6e," (Transformer-XL model)"),_6e.forEach(t),h4o=i($),y_=n($,"LI",{});var u6e=s(y_);ule=n(u6e,"STRONG",{});var cet=s(ule);p4o=r(cet,"unispeech"),cet.forEach(t),_4o=r(u6e," \u2014 "),Dq=n(u6e,"A",{href:!0});var fet=s(Dq);u4o=r(fet,"UniSpeechModel"),fet.forEach(t),b4o=r(u6e," (UniSpeech model)"),u6e.forEach(t),v4o=i($),L_=n($,"LI",{});var b6e=s(L_);ble=n(b6e,"STRONG",{});var met=s(ble);F4o=r(met,"unispeech-sat"),met.forEach(t),T4o=r(b6e," \u2014 "),Gq=n(b6e,"A",{href:!0});var get=s(Gq);M4o=r(get,"UniSpeechSatModel"),get.forEach(t),E4o=r(b6e," (UniSpeechSat model)"),b6e.forEach(t),C4o=i($),x_=n($,"LI",{});var v6e=s(x_);vle=n(v6e,"STRONG",{});var het=s(vle);w4o=r(het,"van"),het.forEach(t),A4o=r(v6e," \u2014 "),Oq=n(v6e,"A",{href:!0});var pet=s(Oq);y4o=r(pet,"VanModel"),pet.forEach(t),L4o=r(v6e," (VAN model)"),v6e.forEach(t),x4o=i($),$_=n($,"LI",{});var F6e=s($_);Fle=n(F6e,"STRONG",{});var _et=s(Fle);$4o=r(_et,"vilt"),_et.forEach(t),k4o=r(F6e," \u2014 "),Vq=n(F6e,"A",{href:!0});var uet=s(Vq);S4o=r(uet,"ViltModel"),uet.forEach(t),R4o=r(F6e," (ViLT model)"),F6e.forEach(t),P4o=i($),k_=n($,"LI",{});var T6e=s(k_);Tle=n(T6e,"STRONG",{});var bet=s(Tle);B4o=r(bet,"vision-text-dual-encoder"),bet.forEach(t),I4o=r(T6e," \u2014 "),Xq=n(T6e,"A",{href:!0});var vet=s(Xq);q4o=r(vet,"VisionTextDualEncoderModel"),vet.forEach(t),N4o=r(T6e," (VisionTextDualEncoder model)"),T6e.forEach(t),j4o=i($),S_=n($,"LI",{});var M6e=s(S_);Mle=n(M6e,"STRONG",{});var Fet=s(Mle);D4o=r(Fet,"visual_bert"),Fet.forEach(t),G4o=r(M6e," \u2014 "),zq=n(M6e,"A",{href:!0});var Tet=s(zq);O4o=r(Tet,"VisualBertModel"),Tet.forEach(t),V4o=r(M6e," (VisualBert model)"),M6e.forEach(t),X4o=i($),R_=n($,"LI",{});var E6e=s(R_);Ele=n(E6e,"STRONG",{});var Met=s(Ele);z4o=r(Met,"vit"),Met.forEach(t),W4o=r(E6e," \u2014 "),Wq=n(E6e,"A",{href:!0});var Eet=s(Wq);Q4o=r(Eet,"ViTModel"),Eet.forEach(t),H4o=r(E6e," (ViT model)"),E6e.forEach(t),U4o=i($),P_=n($,"LI",{});var C6e=s(P_);Cle=n(C6e,"STRONG",{});var Cet=s(Cle);J4o=r(Cet,"vit_mae"),Cet.forEach(t),Y4o=r(C6e," \u2014 "),Qq=n(C6e,"A",{href:!0});var wet=s(Qq);K4o=r(wet,"ViTMAEModel"),wet.forEach(t),Z4o=r(C6e," (ViTMAE model)"),C6e.forEach(t),e5o=i($),B_=n($,"LI",{});var w6e=s(B_);wle=n(w6e,"STRONG",{});var Aet=s(wle);o5o=r(Aet,"wav2vec2"),Aet.forEach(t),r5o=r(w6e," \u2014 "),Hq=n(w6e,"A",{href:!0});var yet=s(Hq);t5o=r(yet,"Wav2Vec2Model"),yet.forEach(t),a5o=r(w6e," (Wav2Vec2 model)"),w6e.forEach(t),n5o=i($),I_=n($,"LI",{});var A6e=s(I_);Ale=n(A6e,"STRONG",{});var Let=s(Ale);s5o=r(Let,"wav2vec2-conformer"),Let.forEach(t),l5o=r(A6e," \u2014 "),Uq=n(A6e,"A",{href:!0});var xet=s(Uq);i5o=r(xet,"Wav2Vec2ConformerModel"),xet.forEach(t),d5o=r(A6e," (Wav2Vec2-Conformer model)"),A6e.forEach(t),c5o=i($),q_=n($,"LI",{});var y6e=s(q_);yle=n(y6e,"STRONG",{});var $et=s(yle);f5o=r($et,"wavlm"),$et.forEach(t),m5o=r(y6e," \u2014 "),Jq=n(y6e,"A",{href:!0});var ket=s(Jq);g5o=r(ket,"WavLMModel"),ket.forEach(t),h5o=r(y6e," (WavLM model)"),y6e.forEach(t),p5o=i($),N_=n($,"LI",{});var L6e=s(N_);Lle=n(L6e,"STRONG",{});var Set=s(Lle);_5o=r(Set,"xglm"),Set.forEach(t),u5o=r(L6e," \u2014 "),Yq=n(L6e,"A",{href:!0});var Ret=s(Yq);b5o=r(Ret,"XGLMModel"),Ret.forEach(t),v5o=r(L6e," (XGLM model)"),L6e.forEach(t),F5o=i($),j_=n($,"LI",{});var x6e=s(j_);xle=n(x6e,"STRONG",{});var Pet=s(xle);T5o=r(Pet,"xlm"),Pet.forEach(t),M5o=r(x6e," \u2014 "),Kq=n(x6e,"A",{href:!0});var Bet=s(Kq);E5o=r(Bet,"XLMModel"),Bet.forEach(t),C5o=r(x6e," (XLM model)"),x6e.forEach(t),w5o=i($),D_=n($,"LI",{});var $6e=s(D_);$le=n($6e,"STRONG",{});var Iet=s($le);A5o=r(Iet,"xlm-prophetnet"),Iet.forEach(t),y5o=r($6e," \u2014 "),Zq=n($6e,"A",{href:!0});var qet=s(Zq);L5o=r(qet,"XLMProphetNetModel"),qet.forEach(t),x5o=r($6e," (XLMProphetNet model)"),$6e.forEach(t),$5o=i($),G_=n($,"LI",{});var k6e=s(G_);kle=n(k6e,"STRONG",{});var Net=s(kle);k5o=r(Net,"xlm-roberta"),Net.forEach(t),S5o=r(k6e," \u2014 "),eN=n(k6e,"A",{href:!0});var jet=s(eN);R5o=r(jet,"XLMRobertaModel"),jet.forEach(t),P5o=r(k6e," (XLM-RoBERTa model)"),k6e.forEach(t),B5o=i($),O_=n($,"LI",{});var S6e=s(O_);Sle=n(S6e,"STRONG",{});var Det=s(Sle);I5o=r(Det,"xlm-roberta-xl"),Det.forEach(t),q5o=r(S6e," \u2014 "),oN=n(S6e,"A",{href:!0});var Get=s(oN);N5o=r(Get,"XLMRobertaXLModel"),Get.forEach(t),j5o=r(S6e," (XLM-RoBERTa-XL model)"),S6e.forEach(t),D5o=i($),V_=n($,"LI",{});var R6e=s(V_);Rle=n(R6e,"STRONG",{});var Oet=s(Rle);G5o=r(Oet,"xlnet"),Oet.forEach(t),O5o=r(R6e," \u2014 "),rN=n(R6e,"A",{href:!0});var Vet=s(rN);V5o=r(Vet,"XLNetModel"),Vet.forEach(t),X5o=r(R6e," (XLNet model)"),R6e.forEach(t),z5o=i($),X_=n($,"LI",{});var P6e=s(X_);Ple=n(P6e,"STRONG",{});var Xet=s(Ple);W5o=r(Xet,"yolos"),Xet.forEach(t),Q5o=r(P6e," \u2014 "),tN=n(P6e,"A",{href:!0});var zet=s(tN);H5o=r(zet,"YolosModel"),zet.forEach(t),U5o=r(P6e," (YOLOS model)"),P6e.forEach(t),J5o=i($),z_=n($,"LI",{});var B6e=s(z_);Ble=n(B6e,"STRONG",{});var Wet=s(Ble);Y5o=r(Wet,"yoso"),Wet.forEach(t),K5o=r(B6e," \u2014 "),aN=n(B6e,"A",{href:!0});var Qet=s(aN);Z5o=r(Qet,"YosoModel"),Qet.forEach(t),evo=r(B6e," (YOSO model)"),B6e.forEach(t),$.forEach(t),ovo=i(oa),W_=n(oa,"P",{});var I6e=s(W_);rvo=r(I6e,"The model is set in evaluation mode by default using "),Ile=n(I6e,"CODE",{});var Het=s(Ile);tvo=r(Het,"model.eval()"),Het.forEach(t),avo=r(I6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=n(I6e,"CODE",{});var Uet=s(qle);nvo=r(Uet,"model.train()"),Uet.forEach(t),I6e.forEach(t),svo=i(oa),T(Q_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),pqe=i(f),Li=n(f,"H2",{class:!0});var vje=s(Li);H_=n(vje,"A",{id:!0,class:!0,href:!0});var Jet=s(H_);Nle=n(Jet,"SPAN",{});var Yet=s(Nle);T(z6.$$.fragment,Yet),Yet.forEach(t),Jet.forEach(t),lvo=i(vje),jle=n(vje,"SPAN",{});var Ket=s(jle);ivo=r(Ket,"AutoModelForPreTraining"),Ket.forEach(t),vje.forEach(t),_qe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(W6.$$.fragment,Os),dvo=i(Os),xi=n(Os,"P",{});var zK=s(xi);cvo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nN=n(zK,"A",{href:!0});var Zet=s(nN);fvo=r(Zet,"from_pretrained()"),Zet.forEach(t),mvo=r(zK," class method or the "),sN=n(zK,"A",{href:!0});var eot=s(sN);gvo=r(eot,"from_config()"),eot.forEach(t),hvo=r(zK,` class
method.`),zK.forEach(t),pvo=i(Os),Q6=n(Os,"P",{});var Fje=s(Q6);_vo=r(Fje,"This class cannot be instantiated directly using "),Dle=n(Fje,"CODE",{});var oot=s(Dle);uvo=r(oot,"__init__()"),oot.forEach(t),bvo=r(Fje," (throws an error)."),Fje.forEach(t),vvo=i(Os),at=n(Os,"DIV",{class:!0});var F0=s(at);T(H6.$$.fragment,F0),Fvo=i(F0),Gle=n(F0,"P",{});var rot=s(Gle);Tvo=r(rot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rot.forEach(t),Mvo=i(F0),$i=n(F0,"P",{});var WK=s($i);Evo=r(WK,`Note:
Loading a model from its configuration file does `),Ole=n(WK,"STRONG",{});var tot=s(Ole);Cvo=r(tot,"not"),tot.forEach(t),wvo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=n(WK,"A",{href:!0});var aot=s(lN);Avo=r(aot,"from_pretrained()"),aot.forEach(t),yvo=r(WK," to load the model weights."),WK.forEach(t),Lvo=i(F0),T(U_.$$.fragment,F0),F0.forEach(t),xvo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(U6.$$.fragment,ra),$vo=i(ra),Vle=n(ra,"P",{});var not=s(Vle);kvo=r(not,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),not.forEach(t),Svo=i(ra),xa=n(ra,"P",{});var T0=s(xa);Rvo=r(T0,"The model class to instantiate is selected based on the "),Xle=n(T0,"CODE",{});var sot=s(Xle);Pvo=r(sot,"model_type"),sot.forEach(t),Bvo=r(T0,` property of the config object (either
passed as an argument or loaded from `),zle=n(T0,"CODE",{});var lot=s(zle);Ivo=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),qvo=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(T0,"CODE",{});var iot=s(Wle);Nvo=r(iot,"pretrained_model_name_or_path"),iot.forEach(t),jvo=r(T0,":"),T0.forEach(t),Dvo=i(ra),G=n(ra,"UL",{});var O=s(G);J_=n(O,"LI",{});var q6e=s(J_);Qle=n(q6e,"STRONG",{});var dot=s(Qle);Gvo=r(dot,"albert"),dot.forEach(t),Ovo=r(q6e," \u2014 "),iN=n(q6e,"A",{href:!0});var cot=s(iN);Vvo=r(cot,"AlbertForPreTraining"),cot.forEach(t),Xvo=r(q6e," (ALBERT model)"),q6e.forEach(t),zvo=i(O),Y_=n(O,"LI",{});var N6e=s(Y_);Hle=n(N6e,"STRONG",{});var fot=s(Hle);Wvo=r(fot,"bart"),fot.forEach(t),Qvo=r(N6e," \u2014 "),dN=n(N6e,"A",{href:!0});var mot=s(dN);Hvo=r(mot,"BartForConditionalGeneration"),mot.forEach(t),Uvo=r(N6e," (BART model)"),N6e.forEach(t),Jvo=i(O),K_=n(O,"LI",{});var j6e=s(K_);Ule=n(j6e,"STRONG",{});var got=s(Ule);Yvo=r(got,"bert"),got.forEach(t),Kvo=r(j6e," \u2014 "),cN=n(j6e,"A",{href:!0});var hot=s(cN);Zvo=r(hot,"BertForPreTraining"),hot.forEach(t),eFo=r(j6e," (BERT model)"),j6e.forEach(t),oFo=i(O),Z_=n(O,"LI",{});var D6e=s(Z_);Jle=n(D6e,"STRONG",{});var pot=s(Jle);rFo=r(pot,"big_bird"),pot.forEach(t),tFo=r(D6e," \u2014 "),fN=n(D6e,"A",{href:!0});var _ot=s(fN);aFo=r(_ot,"BigBirdForPreTraining"),_ot.forEach(t),nFo=r(D6e," (BigBird model)"),D6e.forEach(t),sFo=i(O),eu=n(O,"LI",{});var G6e=s(eu);Yle=n(G6e,"STRONG",{});var uot=s(Yle);lFo=r(uot,"camembert"),uot.forEach(t),iFo=r(G6e," \u2014 "),mN=n(G6e,"A",{href:!0});var bot=s(mN);dFo=r(bot,"CamembertForMaskedLM"),bot.forEach(t),cFo=r(G6e," (CamemBERT model)"),G6e.forEach(t),fFo=i(O),ou=n(O,"LI",{});var O6e=s(ou);Kle=n(O6e,"STRONG",{});var vot=s(Kle);mFo=r(vot,"ctrl"),vot.forEach(t),gFo=r(O6e," \u2014 "),gN=n(O6e,"A",{href:!0});var Fot=s(gN);hFo=r(Fot,"CTRLLMHeadModel"),Fot.forEach(t),pFo=r(O6e," (CTRL model)"),O6e.forEach(t),_Fo=i(O),ru=n(O,"LI",{});var V6e=s(ru);Zle=n(V6e,"STRONG",{});var Tot=s(Zle);uFo=r(Tot,"data2vec-text"),Tot.forEach(t),bFo=r(V6e," \u2014 "),hN=n(V6e,"A",{href:!0});var Mot=s(hN);vFo=r(Mot,"Data2VecTextForMaskedLM"),Mot.forEach(t),FFo=r(V6e," (Data2VecText model)"),V6e.forEach(t),TFo=i(O),tu=n(O,"LI",{});var X6e=s(tu);eie=n(X6e,"STRONG",{});var Eot=s(eie);MFo=r(Eot,"deberta"),Eot.forEach(t),EFo=r(X6e," \u2014 "),pN=n(X6e,"A",{href:!0});var Cot=s(pN);CFo=r(Cot,"DebertaForMaskedLM"),Cot.forEach(t),wFo=r(X6e," (DeBERTa model)"),X6e.forEach(t),AFo=i(O),au=n(O,"LI",{});var z6e=s(au);oie=n(z6e,"STRONG",{});var wot=s(oie);yFo=r(wot,"deberta-v2"),wot.forEach(t),LFo=r(z6e," \u2014 "),_N=n(z6e,"A",{href:!0});var Aot=s(_N);xFo=r(Aot,"DebertaV2ForMaskedLM"),Aot.forEach(t),$Fo=r(z6e," (DeBERTa-v2 model)"),z6e.forEach(t),kFo=i(O),nu=n(O,"LI",{});var W6e=s(nu);rie=n(W6e,"STRONG",{});var yot=s(rie);SFo=r(yot,"distilbert"),yot.forEach(t),RFo=r(W6e," \u2014 "),uN=n(W6e,"A",{href:!0});var Lot=s(uN);PFo=r(Lot,"DistilBertForMaskedLM"),Lot.forEach(t),BFo=r(W6e," (DistilBERT model)"),W6e.forEach(t),IFo=i(O),su=n(O,"LI",{});var Q6e=s(su);tie=n(Q6e,"STRONG",{});var xot=s(tie);qFo=r(xot,"electra"),xot.forEach(t),NFo=r(Q6e," \u2014 "),bN=n(Q6e,"A",{href:!0});var $ot=s(bN);jFo=r($ot,"ElectraForPreTraining"),$ot.forEach(t),DFo=r(Q6e," (ELECTRA model)"),Q6e.forEach(t),GFo=i(O),lu=n(O,"LI",{});var H6e=s(lu);aie=n(H6e,"STRONG",{});var kot=s(aie);OFo=r(kot,"flaubert"),kot.forEach(t),VFo=r(H6e," \u2014 "),vN=n(H6e,"A",{href:!0});var Sot=s(vN);XFo=r(Sot,"FlaubertWithLMHeadModel"),Sot.forEach(t),zFo=r(H6e," (FlauBERT model)"),H6e.forEach(t),WFo=i(O),iu=n(O,"LI",{});var U6e=s(iu);nie=n(U6e,"STRONG",{});var Rot=s(nie);QFo=r(Rot,"flava"),Rot.forEach(t),HFo=r(U6e," \u2014 "),FN=n(U6e,"A",{href:!0});var Pot=s(FN);UFo=r(Pot,"FlavaForPreTraining"),Pot.forEach(t),JFo=r(U6e," (Flava model)"),U6e.forEach(t),YFo=i(O),du=n(O,"LI",{});var J6e=s(du);sie=n(J6e,"STRONG",{});var Bot=s(sie);KFo=r(Bot,"fnet"),Bot.forEach(t),ZFo=r(J6e," \u2014 "),TN=n(J6e,"A",{href:!0});var Iot=s(TN);eTo=r(Iot,"FNetForPreTraining"),Iot.forEach(t),oTo=r(J6e," (FNet model)"),J6e.forEach(t),rTo=i(O),cu=n(O,"LI",{});var Y6e=s(cu);lie=n(Y6e,"STRONG",{});var qot=s(lie);tTo=r(qot,"fsmt"),qot.forEach(t),aTo=r(Y6e," \u2014 "),MN=n(Y6e,"A",{href:!0});var Not=s(MN);nTo=r(Not,"FSMTForConditionalGeneration"),Not.forEach(t),sTo=r(Y6e," (FairSeq Machine-Translation model)"),Y6e.forEach(t),lTo=i(O),fu=n(O,"LI",{});var K6e=s(fu);iie=n(K6e,"STRONG",{});var jot=s(iie);iTo=r(jot,"funnel"),jot.forEach(t),dTo=r(K6e," \u2014 "),EN=n(K6e,"A",{href:!0});var Dot=s(EN);cTo=r(Dot,"FunnelForPreTraining"),Dot.forEach(t),fTo=r(K6e," (Funnel Transformer model)"),K6e.forEach(t),mTo=i(O),mu=n(O,"LI",{});var Z6e=s(mu);die=n(Z6e,"STRONG",{});var Got=s(die);gTo=r(Got,"gpt2"),Got.forEach(t),hTo=r(Z6e," \u2014 "),CN=n(Z6e,"A",{href:!0});var Oot=s(CN);pTo=r(Oot,"GPT2LMHeadModel"),Oot.forEach(t),_To=r(Z6e," (OpenAI GPT-2 model)"),Z6e.forEach(t),uTo=i(O),gu=n(O,"LI",{});var eye=s(gu);cie=n(eye,"STRONG",{});var Vot=s(cie);bTo=r(Vot,"ibert"),Vot.forEach(t),vTo=r(eye," \u2014 "),wN=n(eye,"A",{href:!0});var Xot=s(wN);FTo=r(Xot,"IBertForMaskedLM"),Xot.forEach(t),TTo=r(eye," (I-BERT model)"),eye.forEach(t),MTo=i(O),hu=n(O,"LI",{});var oye=s(hu);fie=n(oye,"STRONG",{});var zot=s(fie);ETo=r(zot,"layoutlm"),zot.forEach(t),CTo=r(oye," \u2014 "),AN=n(oye,"A",{href:!0});var Wot=s(AN);wTo=r(Wot,"LayoutLMForMaskedLM"),Wot.forEach(t),ATo=r(oye," (LayoutLM model)"),oye.forEach(t),yTo=i(O),pu=n(O,"LI",{});var rye=s(pu);mie=n(rye,"STRONG",{});var Qot=s(mie);LTo=r(Qot,"longformer"),Qot.forEach(t),xTo=r(rye," \u2014 "),yN=n(rye,"A",{href:!0});var Hot=s(yN);$To=r(Hot,"LongformerForMaskedLM"),Hot.forEach(t),kTo=r(rye," (Longformer model)"),rye.forEach(t),STo=i(O),_u=n(O,"LI",{});var tye=s(_u);gie=n(tye,"STRONG",{});var Uot=s(gie);RTo=r(Uot,"lxmert"),Uot.forEach(t),PTo=r(tye," \u2014 "),LN=n(tye,"A",{href:!0});var Jot=s(LN);BTo=r(Jot,"LxmertForPreTraining"),Jot.forEach(t),ITo=r(tye," (LXMERT model)"),tye.forEach(t),qTo=i(O),uu=n(O,"LI",{});var aye=s(uu);hie=n(aye,"STRONG",{});var Yot=s(hie);NTo=r(Yot,"megatron-bert"),Yot.forEach(t),jTo=r(aye," \u2014 "),xN=n(aye,"A",{href:!0});var Kot=s(xN);DTo=r(Kot,"MegatronBertForPreTraining"),Kot.forEach(t),GTo=r(aye," (MegatronBert model)"),aye.forEach(t),OTo=i(O),bu=n(O,"LI",{});var nye=s(bu);pie=n(nye,"STRONG",{});var Zot=s(pie);VTo=r(Zot,"mobilebert"),Zot.forEach(t),XTo=r(nye," \u2014 "),$N=n(nye,"A",{href:!0});var ert=s($N);zTo=r(ert,"MobileBertForPreTraining"),ert.forEach(t),WTo=r(nye," (MobileBERT model)"),nye.forEach(t),QTo=i(O),vu=n(O,"LI",{});var sye=s(vu);_ie=n(sye,"STRONG",{});var ort=s(_ie);HTo=r(ort,"mpnet"),ort.forEach(t),UTo=r(sye," \u2014 "),kN=n(sye,"A",{href:!0});var rrt=s(kN);JTo=r(rrt,"MPNetForMaskedLM"),rrt.forEach(t),YTo=r(sye," (MPNet model)"),sye.forEach(t),KTo=i(O),Fu=n(O,"LI",{});var lye=s(Fu);uie=n(lye,"STRONG",{});var trt=s(uie);ZTo=r(trt,"openai-gpt"),trt.forEach(t),e7o=r(lye," \u2014 "),SN=n(lye,"A",{href:!0});var art=s(SN);o7o=r(art,"OpenAIGPTLMHeadModel"),art.forEach(t),r7o=r(lye," (OpenAI GPT model)"),lye.forEach(t),t7o=i(O),Tu=n(O,"LI",{});var iye=s(Tu);bie=n(iye,"STRONG",{});var nrt=s(bie);a7o=r(nrt,"retribert"),nrt.forEach(t),n7o=r(iye," \u2014 "),RN=n(iye,"A",{href:!0});var srt=s(RN);s7o=r(srt,"RetriBertModel"),srt.forEach(t),l7o=r(iye," (RetriBERT model)"),iye.forEach(t),i7o=i(O),Mu=n(O,"LI",{});var dye=s(Mu);vie=n(dye,"STRONG",{});var lrt=s(vie);d7o=r(lrt,"roberta"),lrt.forEach(t),c7o=r(dye," \u2014 "),PN=n(dye,"A",{href:!0});var irt=s(PN);f7o=r(irt,"RobertaForMaskedLM"),irt.forEach(t),m7o=r(dye," (RoBERTa model)"),dye.forEach(t),g7o=i(O),Eu=n(O,"LI",{});var cye=s(Eu);Fie=n(cye,"STRONG",{});var drt=s(Fie);h7o=r(drt,"splinter"),drt.forEach(t),p7o=r(cye," \u2014 "),BN=n(cye,"A",{href:!0});var crt=s(BN);_7o=r(crt,"SplinterForPreTraining"),crt.forEach(t),u7o=r(cye," (Splinter model)"),cye.forEach(t),b7o=i(O),Cu=n(O,"LI",{});var fye=s(Cu);Tie=n(fye,"STRONG",{});var frt=s(Tie);v7o=r(frt,"squeezebert"),frt.forEach(t),F7o=r(fye," \u2014 "),IN=n(fye,"A",{href:!0});var mrt=s(IN);T7o=r(mrt,"SqueezeBertForMaskedLM"),mrt.forEach(t),M7o=r(fye," (SqueezeBERT model)"),fye.forEach(t),E7o=i(O),wu=n(O,"LI",{});var mye=s(wu);Mie=n(mye,"STRONG",{});var grt=s(Mie);C7o=r(grt,"t5"),grt.forEach(t),w7o=r(mye," \u2014 "),qN=n(mye,"A",{href:!0});var hrt=s(qN);A7o=r(hrt,"T5ForConditionalGeneration"),hrt.forEach(t),y7o=r(mye," (T5 model)"),mye.forEach(t),L7o=i(O),Au=n(O,"LI",{});var gye=s(Au);Eie=n(gye,"STRONG",{});var prt=s(Eie);x7o=r(prt,"tapas"),prt.forEach(t),$7o=r(gye," \u2014 "),NN=n(gye,"A",{href:!0});var _rt=s(NN);k7o=r(_rt,"TapasForMaskedLM"),_rt.forEach(t),S7o=r(gye," (TAPAS model)"),gye.forEach(t),R7o=i(O),yu=n(O,"LI",{});var hye=s(yu);Cie=n(hye,"STRONG",{});var urt=s(Cie);P7o=r(urt,"transfo-xl"),urt.forEach(t),B7o=r(hye," \u2014 "),jN=n(hye,"A",{href:!0});var brt=s(jN);I7o=r(brt,"TransfoXLLMHeadModel"),brt.forEach(t),q7o=r(hye," (Transformer-XL model)"),hye.forEach(t),N7o=i(O),Lu=n(O,"LI",{});var pye=s(Lu);wie=n(pye,"STRONG",{});var vrt=s(wie);j7o=r(vrt,"unispeech"),vrt.forEach(t),D7o=r(pye," \u2014 "),DN=n(pye,"A",{href:!0});var Frt=s(DN);G7o=r(Frt,"UniSpeechForPreTraining"),Frt.forEach(t),O7o=r(pye," (UniSpeech model)"),pye.forEach(t),V7o=i(O),xu=n(O,"LI",{});var _ye=s(xu);Aie=n(_ye,"STRONG",{});var Trt=s(Aie);X7o=r(Trt,"unispeech-sat"),Trt.forEach(t),z7o=r(_ye," \u2014 "),GN=n(_ye,"A",{href:!0});var Mrt=s(GN);W7o=r(Mrt,"UniSpeechSatForPreTraining"),Mrt.forEach(t),Q7o=r(_ye," (UniSpeechSat model)"),_ye.forEach(t),H7o=i(O),$u=n(O,"LI",{});var uye=s($u);yie=n(uye,"STRONG",{});var Ert=s(yie);U7o=r(Ert,"visual_bert"),Ert.forEach(t),J7o=r(uye," \u2014 "),ON=n(uye,"A",{href:!0});var Crt=s(ON);Y7o=r(Crt,"VisualBertForPreTraining"),Crt.forEach(t),K7o=r(uye," (VisualBert model)"),uye.forEach(t),Z7o=i(O),ku=n(O,"LI",{});var bye=s(ku);Lie=n(bye,"STRONG",{});var wrt=s(Lie);eMo=r(wrt,"vit_mae"),wrt.forEach(t),oMo=r(bye," \u2014 "),VN=n(bye,"A",{href:!0});var Art=s(VN);rMo=r(Art,"ViTMAEForPreTraining"),Art.forEach(t),tMo=r(bye," (ViTMAE model)"),bye.forEach(t),aMo=i(O),Su=n(O,"LI",{});var vye=s(Su);xie=n(vye,"STRONG",{});var yrt=s(xie);nMo=r(yrt,"wav2vec2"),yrt.forEach(t),sMo=r(vye," \u2014 "),XN=n(vye,"A",{href:!0});var Lrt=s(XN);lMo=r(Lrt,"Wav2Vec2ForPreTraining"),Lrt.forEach(t),iMo=r(vye," (Wav2Vec2 model)"),vye.forEach(t),dMo=i(O),Ru=n(O,"LI",{});var Fye=s(Ru);$ie=n(Fye,"STRONG",{});var xrt=s($ie);cMo=r(xrt,"wav2vec2-conformer"),xrt.forEach(t),fMo=r(Fye," \u2014 "),zN=n(Fye,"A",{href:!0});var $rt=s(zN);mMo=r($rt,"Wav2Vec2ConformerForPreTraining"),$rt.forEach(t),gMo=r(Fye," (Wav2Vec2-Conformer model)"),Fye.forEach(t),hMo=i(O),Pu=n(O,"LI",{});var Tye=s(Pu);kie=n(Tye,"STRONG",{});var krt=s(kie);pMo=r(krt,"xlm"),krt.forEach(t),_Mo=r(Tye," \u2014 "),WN=n(Tye,"A",{href:!0});var Srt=s(WN);uMo=r(Srt,"XLMWithLMHeadModel"),Srt.forEach(t),bMo=r(Tye," (XLM model)"),Tye.forEach(t),vMo=i(O),Bu=n(O,"LI",{});var Mye=s(Bu);Sie=n(Mye,"STRONG",{});var Rrt=s(Sie);FMo=r(Rrt,"xlm-roberta"),Rrt.forEach(t),TMo=r(Mye," \u2014 "),QN=n(Mye,"A",{href:!0});var Prt=s(QN);MMo=r(Prt,"XLMRobertaForMaskedLM"),Prt.forEach(t),EMo=r(Mye," (XLM-RoBERTa model)"),Mye.forEach(t),CMo=i(O),Iu=n(O,"LI",{});var Eye=s(Iu);Rie=n(Eye,"STRONG",{});var Brt=s(Rie);wMo=r(Brt,"xlm-roberta-xl"),Brt.forEach(t),AMo=r(Eye," \u2014 "),HN=n(Eye,"A",{href:!0});var Irt=s(HN);yMo=r(Irt,"XLMRobertaXLForMaskedLM"),Irt.forEach(t),LMo=r(Eye," (XLM-RoBERTa-XL model)"),Eye.forEach(t),xMo=i(O),qu=n(O,"LI",{});var Cye=s(qu);Pie=n(Cye,"STRONG",{});var qrt=s(Pie);$Mo=r(qrt,"xlnet"),qrt.forEach(t),kMo=r(Cye," \u2014 "),UN=n(Cye,"A",{href:!0});var Nrt=s(UN);SMo=r(Nrt,"XLNetLMHeadModel"),Nrt.forEach(t),RMo=r(Cye," (XLNet model)"),Cye.forEach(t),O.forEach(t),PMo=i(ra),Nu=n(ra,"P",{});var wye=s(Nu);BMo=r(wye,"The model is set in evaluation mode by default using "),Bie=n(wye,"CODE",{});var jrt=s(Bie);IMo=r(jrt,"model.eval()"),jrt.forEach(t),qMo=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=n(wye,"CODE",{});var Drt=s(Iie);NMo=r(Drt,"model.train()"),Drt.forEach(t),wye.forEach(t),jMo=i(ra),T(ju.$$.fragment,ra),ra.forEach(t),Os.forEach(t),uqe=i(f),ki=n(f,"H2",{class:!0});var Tje=s(ki);Du=n(Tje,"A",{id:!0,class:!0,href:!0});var Grt=s(Du);qie=n(Grt,"SPAN",{});var Ort=s(qie);T(J6.$$.fragment,Ort),Ort.forEach(t),Grt.forEach(t),DMo=i(Tje),Nie=n(Tje,"SPAN",{});var Vrt=s(Nie);GMo=r(Vrt,"AutoModelForCausalLM"),Vrt.forEach(t),Tje.forEach(t),bqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(Y6.$$.fragment,Vs),OMo=i(Vs),Si=n(Vs,"P",{});var QK=s(Si);VMo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=n(QK,"A",{href:!0});var Xrt=s(JN);XMo=r(Xrt,"from_pretrained()"),Xrt.forEach(t),zMo=r(QK," class method or the "),YN=n(QK,"A",{href:!0});var zrt=s(YN);WMo=r(zrt,"from_config()"),zrt.forEach(t),QMo=r(QK,` class
method.`),QK.forEach(t),HMo=i(Vs),K6=n(Vs,"P",{});var Mje=s(K6);UMo=r(Mje,"This class cannot be instantiated directly using "),jie=n(Mje,"CODE",{});var Wrt=s(jie);JMo=r(Wrt,"__init__()"),Wrt.forEach(t),YMo=r(Mje," (throws an error)."),Mje.forEach(t),KMo=i(Vs),nt=n(Vs,"DIV",{class:!0});var M0=s(nt);T(Z6.$$.fragment,M0),ZMo=i(M0),Die=n(M0,"P",{});var Qrt=s(Die);eEo=r(Qrt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qrt.forEach(t),oEo=i(M0),Ri=n(M0,"P",{});var HK=s(Ri);rEo=r(HK,`Note:
Loading a model from its configuration file does `),Gie=n(HK,"STRONG",{});var Hrt=s(Gie);tEo=r(Hrt,"not"),Hrt.forEach(t),aEo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(HK,"A",{href:!0});var Urt=s(KN);nEo=r(Urt,"from_pretrained()"),Urt.forEach(t),sEo=r(HK," to load the model weights."),HK.forEach(t),lEo=i(M0),T(Gu.$$.fragment,M0),M0.forEach(t),iEo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(ey.$$.fragment,ta),dEo=i(ta),Oie=n(ta,"P",{});var Jrt=s(Oie);cEo=r(Jrt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jrt.forEach(t),fEo=i(ta),$a=n(ta,"P",{});var E0=s($a);mEo=r(E0,"The model class to instantiate is selected based on the "),Vie=n(E0,"CODE",{});var Yrt=s(Vie);gEo=r(Yrt,"model_type"),Yrt.forEach(t),hEo=r(E0,` property of the config object (either
passed as an argument or loaded from `),Xie=n(E0,"CODE",{});var Krt=s(Xie);pEo=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),_Eo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=n(E0,"CODE",{});var Zrt=s(zie);uEo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),bEo=r(E0,":"),E0.forEach(t),vEo=i(ta),z=n(ta,"UL",{});var Q=s(z);Ou=n(Q,"LI",{});var Aye=s(Ou);Wie=n(Aye,"STRONG",{});var ett=s(Wie);FEo=r(ett,"bart"),ett.forEach(t),TEo=r(Aye," \u2014 "),ZN=n(Aye,"A",{href:!0});var ott=s(ZN);MEo=r(ott,"BartForCausalLM"),ott.forEach(t),EEo=r(Aye," (BART model)"),Aye.forEach(t),CEo=i(Q),Vu=n(Q,"LI",{});var yye=s(Vu);Qie=n(yye,"STRONG",{});var rtt=s(Qie);wEo=r(rtt,"bert"),rtt.forEach(t),AEo=r(yye," \u2014 "),ej=n(yye,"A",{href:!0});var ttt=s(ej);yEo=r(ttt,"BertLMHeadModel"),ttt.forEach(t),LEo=r(yye," (BERT model)"),yye.forEach(t),xEo=i(Q),Xu=n(Q,"LI",{});var Lye=s(Xu);Hie=n(Lye,"STRONG",{});var att=s(Hie);$Eo=r(att,"bert-generation"),att.forEach(t),kEo=r(Lye," \u2014 "),oj=n(Lye,"A",{href:!0});var ntt=s(oj);SEo=r(ntt,"BertGenerationDecoder"),ntt.forEach(t),REo=r(Lye," (Bert Generation model)"),Lye.forEach(t),PEo=i(Q),zu=n(Q,"LI",{});var xye=s(zu);Uie=n(xye,"STRONG",{});var stt=s(Uie);BEo=r(stt,"big_bird"),stt.forEach(t),IEo=r(xye," \u2014 "),rj=n(xye,"A",{href:!0});var ltt=s(rj);qEo=r(ltt,"BigBirdForCausalLM"),ltt.forEach(t),NEo=r(xye," (BigBird model)"),xye.forEach(t),jEo=i(Q),Wu=n(Q,"LI",{});var $ye=s(Wu);Jie=n($ye,"STRONG",{});var itt=s(Jie);DEo=r(itt,"bigbird_pegasus"),itt.forEach(t),GEo=r($ye," \u2014 "),tj=n($ye,"A",{href:!0});var dtt=s(tj);OEo=r(dtt,"BigBirdPegasusForCausalLM"),dtt.forEach(t),VEo=r($ye," (BigBirdPegasus model)"),$ye.forEach(t),XEo=i(Q),Qu=n(Q,"LI",{});var kye=s(Qu);Yie=n(kye,"STRONG",{});var ctt=s(Yie);zEo=r(ctt,"blenderbot"),ctt.forEach(t),WEo=r(kye," \u2014 "),aj=n(kye,"A",{href:!0});var ftt=s(aj);QEo=r(ftt,"BlenderbotForCausalLM"),ftt.forEach(t),HEo=r(kye," (Blenderbot model)"),kye.forEach(t),UEo=i(Q),Hu=n(Q,"LI",{});var Sye=s(Hu);Kie=n(Sye,"STRONG",{});var mtt=s(Kie);JEo=r(mtt,"blenderbot-small"),mtt.forEach(t),YEo=r(Sye," \u2014 "),nj=n(Sye,"A",{href:!0});var gtt=s(nj);KEo=r(gtt,"BlenderbotSmallForCausalLM"),gtt.forEach(t),ZEo=r(Sye," (BlenderbotSmall model)"),Sye.forEach(t),eCo=i(Q),Uu=n(Q,"LI",{});var Rye=s(Uu);Zie=n(Rye,"STRONG",{});var htt=s(Zie);oCo=r(htt,"camembert"),htt.forEach(t),rCo=r(Rye," \u2014 "),sj=n(Rye,"A",{href:!0});var ptt=s(sj);tCo=r(ptt,"CamembertForCausalLM"),ptt.forEach(t),aCo=r(Rye," (CamemBERT model)"),Rye.forEach(t),nCo=i(Q),Ju=n(Q,"LI",{});var Pye=s(Ju);ede=n(Pye,"STRONG",{});var _tt=s(ede);sCo=r(_tt,"ctrl"),_tt.forEach(t),lCo=r(Pye," \u2014 "),lj=n(Pye,"A",{href:!0});var utt=s(lj);iCo=r(utt,"CTRLLMHeadModel"),utt.forEach(t),dCo=r(Pye," (CTRL model)"),Pye.forEach(t),cCo=i(Q),Yu=n(Q,"LI",{});var Bye=s(Yu);ode=n(Bye,"STRONG",{});var btt=s(ode);fCo=r(btt,"data2vec-text"),btt.forEach(t),mCo=r(Bye," \u2014 "),ij=n(Bye,"A",{href:!0});var vtt=s(ij);gCo=r(vtt,"Data2VecTextForCausalLM"),vtt.forEach(t),hCo=r(Bye," (Data2VecText model)"),Bye.forEach(t),pCo=i(Q),Ku=n(Q,"LI",{});var Iye=s(Ku);rde=n(Iye,"STRONG",{});var Ftt=s(rde);_Co=r(Ftt,"electra"),Ftt.forEach(t),uCo=r(Iye," \u2014 "),dj=n(Iye,"A",{href:!0});var Ttt=s(dj);bCo=r(Ttt,"ElectraForCausalLM"),Ttt.forEach(t),vCo=r(Iye," (ELECTRA model)"),Iye.forEach(t),FCo=i(Q),Zu=n(Q,"LI",{});var qye=s(Zu);tde=n(qye,"STRONG",{});var Mtt=s(tde);TCo=r(Mtt,"gpt2"),Mtt.forEach(t),MCo=r(qye," \u2014 "),cj=n(qye,"A",{href:!0});var Ett=s(cj);ECo=r(Ett,"GPT2LMHeadModel"),Ett.forEach(t),CCo=r(qye," (OpenAI GPT-2 model)"),qye.forEach(t),wCo=i(Q),e2=n(Q,"LI",{});var Nye=s(e2);ade=n(Nye,"STRONG",{});var Ctt=s(ade);ACo=r(Ctt,"gpt_neo"),Ctt.forEach(t),yCo=r(Nye," \u2014 "),fj=n(Nye,"A",{href:!0});var wtt=s(fj);LCo=r(wtt,"GPTNeoForCausalLM"),wtt.forEach(t),xCo=r(Nye," (GPT Neo model)"),Nye.forEach(t),$Co=i(Q),o2=n(Q,"LI",{});var jye=s(o2);nde=n(jye,"STRONG",{});var Att=s(nde);kCo=r(Att,"gptj"),Att.forEach(t),SCo=r(jye," \u2014 "),mj=n(jye,"A",{href:!0});var ytt=s(mj);RCo=r(ytt,"GPTJForCausalLM"),ytt.forEach(t),PCo=r(jye," (GPT-J model)"),jye.forEach(t),BCo=i(Q),r2=n(Q,"LI",{});var Dye=s(r2);sde=n(Dye,"STRONG",{});var Ltt=s(sde);ICo=r(Ltt,"marian"),Ltt.forEach(t),qCo=r(Dye," \u2014 "),gj=n(Dye,"A",{href:!0});var xtt=s(gj);NCo=r(xtt,"MarianForCausalLM"),xtt.forEach(t),jCo=r(Dye," (Marian model)"),Dye.forEach(t),DCo=i(Q),t2=n(Q,"LI",{});var Gye=s(t2);lde=n(Gye,"STRONG",{});var $tt=s(lde);GCo=r($tt,"mbart"),$tt.forEach(t),OCo=r(Gye," \u2014 "),hj=n(Gye,"A",{href:!0});var ktt=s(hj);VCo=r(ktt,"MBartForCausalLM"),ktt.forEach(t),XCo=r(Gye," (mBART model)"),Gye.forEach(t),zCo=i(Q),a2=n(Q,"LI",{});var Oye=s(a2);ide=n(Oye,"STRONG",{});var Stt=s(ide);WCo=r(Stt,"megatron-bert"),Stt.forEach(t),QCo=r(Oye," \u2014 "),pj=n(Oye,"A",{href:!0});var Rtt=s(pj);HCo=r(Rtt,"MegatronBertForCausalLM"),Rtt.forEach(t),UCo=r(Oye," (MegatronBert model)"),Oye.forEach(t),JCo=i(Q),n2=n(Q,"LI",{});var Vye=s(n2);dde=n(Vye,"STRONG",{});var Ptt=s(dde);YCo=r(Ptt,"openai-gpt"),Ptt.forEach(t),KCo=r(Vye," \u2014 "),_j=n(Vye,"A",{href:!0});var Btt=s(_j);ZCo=r(Btt,"OpenAIGPTLMHeadModel"),Btt.forEach(t),e3o=r(Vye," (OpenAI GPT model)"),Vye.forEach(t),o3o=i(Q),s2=n(Q,"LI",{});var Xye=s(s2);cde=n(Xye,"STRONG",{});var Itt=s(cde);r3o=r(Itt,"opt"),Itt.forEach(t),t3o=r(Xye," \u2014 "),uj=n(Xye,"A",{href:!0});var qtt=s(uj);a3o=r(qtt,"OPTForCausalLM"),qtt.forEach(t),n3o=r(Xye," (OPT model)"),Xye.forEach(t),s3o=i(Q),l2=n(Q,"LI",{});var zye=s(l2);fde=n(zye,"STRONG",{});var Ntt=s(fde);l3o=r(Ntt,"pegasus"),Ntt.forEach(t),i3o=r(zye," \u2014 "),bj=n(zye,"A",{href:!0});var jtt=s(bj);d3o=r(jtt,"PegasusForCausalLM"),jtt.forEach(t),c3o=r(zye," (Pegasus model)"),zye.forEach(t),f3o=i(Q),i2=n(Q,"LI",{});var Wye=s(i2);mde=n(Wye,"STRONG",{});var Dtt=s(mde);m3o=r(Dtt,"plbart"),Dtt.forEach(t),g3o=r(Wye," \u2014 "),vj=n(Wye,"A",{href:!0});var Gtt=s(vj);h3o=r(Gtt,"PLBartForCausalLM"),Gtt.forEach(t),p3o=r(Wye," (PLBart model)"),Wye.forEach(t),_3o=i(Q),d2=n(Q,"LI",{});var Qye=s(d2);gde=n(Qye,"STRONG",{});var Ott=s(gde);u3o=r(Ott,"prophetnet"),Ott.forEach(t),b3o=r(Qye," \u2014 "),Fj=n(Qye,"A",{href:!0});var Vtt=s(Fj);v3o=r(Vtt,"ProphetNetForCausalLM"),Vtt.forEach(t),F3o=r(Qye," (ProphetNet model)"),Qye.forEach(t),T3o=i(Q),c2=n(Q,"LI",{});var Hye=s(c2);hde=n(Hye,"STRONG",{});var Xtt=s(hde);M3o=r(Xtt,"qdqbert"),Xtt.forEach(t),E3o=r(Hye," \u2014 "),Tj=n(Hye,"A",{href:!0});var ztt=s(Tj);C3o=r(ztt,"QDQBertLMHeadModel"),ztt.forEach(t),w3o=r(Hye," (QDQBert model)"),Hye.forEach(t),A3o=i(Q),f2=n(Q,"LI",{});var Uye=s(f2);pde=n(Uye,"STRONG",{});var Wtt=s(pde);y3o=r(Wtt,"reformer"),Wtt.forEach(t),L3o=r(Uye," \u2014 "),Mj=n(Uye,"A",{href:!0});var Qtt=s(Mj);x3o=r(Qtt,"ReformerModelWithLMHead"),Qtt.forEach(t),$3o=r(Uye," (Reformer model)"),Uye.forEach(t),k3o=i(Q),m2=n(Q,"LI",{});var Jye=s(m2);_de=n(Jye,"STRONG",{});var Htt=s(_de);S3o=r(Htt,"rembert"),Htt.forEach(t),R3o=r(Jye," \u2014 "),Ej=n(Jye,"A",{href:!0});var Utt=s(Ej);P3o=r(Utt,"RemBertForCausalLM"),Utt.forEach(t),B3o=r(Jye," (RemBERT model)"),Jye.forEach(t),I3o=i(Q),g2=n(Q,"LI",{});var Yye=s(g2);ude=n(Yye,"STRONG",{});var Jtt=s(ude);q3o=r(Jtt,"roberta"),Jtt.forEach(t),N3o=r(Yye," \u2014 "),Cj=n(Yye,"A",{href:!0});var Ytt=s(Cj);j3o=r(Ytt,"RobertaForCausalLM"),Ytt.forEach(t),D3o=r(Yye," (RoBERTa model)"),Yye.forEach(t),G3o=i(Q),h2=n(Q,"LI",{});var Kye=s(h2);bde=n(Kye,"STRONG",{});var Ktt=s(bde);O3o=r(Ktt,"roformer"),Ktt.forEach(t),V3o=r(Kye," \u2014 "),wj=n(Kye,"A",{href:!0});var Ztt=s(wj);X3o=r(Ztt,"RoFormerForCausalLM"),Ztt.forEach(t),z3o=r(Kye," (RoFormer model)"),Kye.forEach(t),W3o=i(Q),p2=n(Q,"LI",{});var Zye=s(p2);vde=n(Zye,"STRONG",{});var eat=s(vde);Q3o=r(eat,"speech_to_text_2"),eat.forEach(t),H3o=r(Zye," \u2014 "),Aj=n(Zye,"A",{href:!0});var oat=s(Aj);U3o=r(oat,"Speech2Text2ForCausalLM"),oat.forEach(t),J3o=r(Zye," (Speech2Text2 model)"),Zye.forEach(t),Y3o=i(Q),_2=n(Q,"LI",{});var eLe=s(_2);Fde=n(eLe,"STRONG",{});var rat=s(Fde);K3o=r(rat,"transfo-xl"),rat.forEach(t),Z3o=r(eLe," \u2014 "),yj=n(eLe,"A",{href:!0});var tat=s(yj);ewo=r(tat,"TransfoXLLMHeadModel"),tat.forEach(t),owo=r(eLe," (Transformer-XL model)"),eLe.forEach(t),rwo=i(Q),u2=n(Q,"LI",{});var oLe=s(u2);Tde=n(oLe,"STRONG",{});var aat=s(Tde);two=r(aat,"trocr"),aat.forEach(t),awo=r(oLe," \u2014 "),Lj=n(oLe,"A",{href:!0});var nat=s(Lj);nwo=r(nat,"TrOCRForCausalLM"),nat.forEach(t),swo=r(oLe," (TrOCR model)"),oLe.forEach(t),lwo=i(Q),b2=n(Q,"LI",{});var rLe=s(b2);Mde=n(rLe,"STRONG",{});var sat=s(Mde);iwo=r(sat,"xglm"),sat.forEach(t),dwo=r(rLe," \u2014 "),xj=n(rLe,"A",{href:!0});var lat=s(xj);cwo=r(lat,"XGLMForCausalLM"),lat.forEach(t),fwo=r(rLe," (XGLM model)"),rLe.forEach(t),mwo=i(Q),v2=n(Q,"LI",{});var tLe=s(v2);Ede=n(tLe,"STRONG",{});var iat=s(Ede);gwo=r(iat,"xlm"),iat.forEach(t),hwo=r(tLe," \u2014 "),$j=n(tLe,"A",{href:!0});var dat=s($j);pwo=r(dat,"XLMWithLMHeadModel"),dat.forEach(t),_wo=r(tLe," (XLM model)"),tLe.forEach(t),uwo=i(Q),F2=n(Q,"LI",{});var aLe=s(F2);Cde=n(aLe,"STRONG",{});var cat=s(Cde);bwo=r(cat,"xlm-prophetnet"),cat.forEach(t),vwo=r(aLe," \u2014 "),kj=n(aLe,"A",{href:!0});var fat=s(kj);Fwo=r(fat,"XLMProphetNetForCausalLM"),fat.forEach(t),Two=r(aLe," (XLMProphetNet model)"),aLe.forEach(t),Mwo=i(Q),T2=n(Q,"LI",{});var nLe=s(T2);wde=n(nLe,"STRONG",{});var mat=s(wde);Ewo=r(mat,"xlm-roberta"),mat.forEach(t),Cwo=r(nLe," \u2014 "),Sj=n(nLe,"A",{href:!0});var gat=s(Sj);wwo=r(gat,"XLMRobertaForCausalLM"),gat.forEach(t),Awo=r(nLe," (XLM-RoBERTa model)"),nLe.forEach(t),ywo=i(Q),M2=n(Q,"LI",{});var sLe=s(M2);Ade=n(sLe,"STRONG",{});var hat=s(Ade);Lwo=r(hat,"xlm-roberta-xl"),hat.forEach(t),xwo=r(sLe," \u2014 "),Rj=n(sLe,"A",{href:!0});var pat=s(Rj);$wo=r(pat,"XLMRobertaXLForCausalLM"),pat.forEach(t),kwo=r(sLe," (XLM-RoBERTa-XL model)"),sLe.forEach(t),Swo=i(Q),E2=n(Q,"LI",{});var lLe=s(E2);yde=n(lLe,"STRONG",{});var _at=s(yde);Rwo=r(_at,"xlnet"),_at.forEach(t),Pwo=r(lLe," \u2014 "),Pj=n(lLe,"A",{href:!0});var uat=s(Pj);Bwo=r(uat,"XLNetLMHeadModel"),uat.forEach(t),Iwo=r(lLe," (XLNet model)"),lLe.forEach(t),Q.forEach(t),qwo=i(ta),C2=n(ta,"P",{});var iLe=s(C2);Nwo=r(iLe,"The model is set in evaluation mode by default using "),Lde=n(iLe,"CODE",{});var bat=s(Lde);jwo=r(bat,"model.eval()"),bat.forEach(t),Dwo=r(iLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=n(iLe,"CODE",{});var vat=s(xde);Gwo=r(vat,"model.train()"),vat.forEach(t),iLe.forEach(t),Owo=i(ta),T(w2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),vqe=i(f),Pi=n(f,"H2",{class:!0});var Eje=s(Pi);A2=n(Eje,"A",{id:!0,class:!0,href:!0});var Fat=s(A2);$de=n(Fat,"SPAN",{});var Tat=s($de);T(oy.$$.fragment,Tat),Tat.forEach(t),Fat.forEach(t),Vwo=i(Eje),kde=n(Eje,"SPAN",{});var Mat=s(kde);Xwo=r(Mat,"AutoModelForMaskedLM"),Mat.forEach(t),Eje.forEach(t),Fqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(ry.$$.fragment,Xs),zwo=i(Xs),Bi=n(Xs,"P",{});var UK=s(Bi);Wwo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bj=n(UK,"A",{href:!0});var Eat=s(Bj);Qwo=r(Eat,"from_pretrained()"),Eat.forEach(t),Hwo=r(UK," class method or the "),Ij=n(UK,"A",{href:!0});var Cat=s(Ij);Uwo=r(Cat,"from_config()"),Cat.forEach(t),Jwo=r(UK,` class
method.`),UK.forEach(t),Ywo=i(Xs),ty=n(Xs,"P",{});var Cje=s(ty);Kwo=r(Cje,"This class cannot be instantiated directly using "),Sde=n(Cje,"CODE",{});var wat=s(Sde);Zwo=r(wat,"__init__()"),wat.forEach(t),e0o=r(Cje," (throws an error)."),Cje.forEach(t),o0o=i(Xs),st=n(Xs,"DIV",{class:!0});var C0=s(st);T(ay.$$.fragment,C0),r0o=i(C0),Rde=n(C0,"P",{});var Aat=s(Rde);t0o=r(Aat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Aat.forEach(t),a0o=i(C0),Ii=n(C0,"P",{});var JK=s(Ii);n0o=r(JK,`Note:
Loading a model from its configuration file does `),Pde=n(JK,"STRONG",{});var yat=s(Pde);s0o=r(yat,"not"),yat.forEach(t),l0o=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=n(JK,"A",{href:!0});var Lat=s(qj);i0o=r(Lat,"from_pretrained()"),Lat.forEach(t),d0o=r(JK," to load the model weights."),JK.forEach(t),c0o=i(C0),T(y2.$$.fragment,C0),C0.forEach(t),f0o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(ny.$$.fragment,aa),m0o=i(aa),Bde=n(aa,"P",{});var xat=s(Bde);g0o=r(xat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xat.forEach(t),h0o=i(aa),ka=n(aa,"P",{});var w0=s(ka);p0o=r(w0,"The model class to instantiate is selected based on the "),Ide=n(w0,"CODE",{});var $at=s(Ide);_0o=r($at,"model_type"),$at.forEach(t),u0o=r(w0,` property of the config object (either
passed as an argument or loaded from `),qde=n(w0,"CODE",{});var kat=s(qde);b0o=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),v0o=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=n(w0,"CODE",{});var Sat=s(Nde);F0o=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),T0o=r(w0,":"),w0.forEach(t),M0o=i(aa),W=n(aa,"UL",{});var H=s(W);L2=n(H,"LI",{});var dLe=s(L2);jde=n(dLe,"STRONG",{});var Rat=s(jde);E0o=r(Rat,"albert"),Rat.forEach(t),C0o=r(dLe," \u2014 "),Nj=n(dLe,"A",{href:!0});var Pat=s(Nj);w0o=r(Pat,"AlbertForMaskedLM"),Pat.forEach(t),A0o=r(dLe," (ALBERT model)"),dLe.forEach(t),y0o=i(H),x2=n(H,"LI",{});var cLe=s(x2);Dde=n(cLe,"STRONG",{});var Bat=s(Dde);L0o=r(Bat,"bart"),Bat.forEach(t),x0o=r(cLe," \u2014 "),jj=n(cLe,"A",{href:!0});var Iat=s(jj);$0o=r(Iat,"BartForConditionalGeneration"),Iat.forEach(t),k0o=r(cLe," (BART model)"),cLe.forEach(t),S0o=i(H),$2=n(H,"LI",{});var fLe=s($2);Gde=n(fLe,"STRONG",{});var qat=s(Gde);R0o=r(qat,"bert"),qat.forEach(t),P0o=r(fLe," \u2014 "),Dj=n(fLe,"A",{href:!0});var Nat=s(Dj);B0o=r(Nat,"BertForMaskedLM"),Nat.forEach(t),I0o=r(fLe," (BERT model)"),fLe.forEach(t),q0o=i(H),k2=n(H,"LI",{});var mLe=s(k2);Ode=n(mLe,"STRONG",{});var jat=s(Ode);N0o=r(jat,"big_bird"),jat.forEach(t),j0o=r(mLe," \u2014 "),Gj=n(mLe,"A",{href:!0});var Dat=s(Gj);D0o=r(Dat,"BigBirdForMaskedLM"),Dat.forEach(t),G0o=r(mLe," (BigBird model)"),mLe.forEach(t),O0o=i(H),S2=n(H,"LI",{});var gLe=s(S2);Vde=n(gLe,"STRONG",{});var Gat=s(Vde);V0o=r(Gat,"camembert"),Gat.forEach(t),X0o=r(gLe," \u2014 "),Oj=n(gLe,"A",{href:!0});var Oat=s(Oj);z0o=r(Oat,"CamembertForMaskedLM"),Oat.forEach(t),W0o=r(gLe," (CamemBERT model)"),gLe.forEach(t),Q0o=i(H),R2=n(H,"LI",{});var hLe=s(R2);Xde=n(hLe,"STRONG",{});var Vat=s(Xde);H0o=r(Vat,"convbert"),Vat.forEach(t),U0o=r(hLe," \u2014 "),Vj=n(hLe,"A",{href:!0});var Xat=s(Vj);J0o=r(Xat,"ConvBertForMaskedLM"),Xat.forEach(t),Y0o=r(hLe," (ConvBERT model)"),hLe.forEach(t),K0o=i(H),P2=n(H,"LI",{});var pLe=s(P2);zde=n(pLe,"STRONG",{});var zat=s(zde);Z0o=r(zat,"data2vec-text"),zat.forEach(t),eAo=r(pLe," \u2014 "),Xj=n(pLe,"A",{href:!0});var Wat=s(Xj);oAo=r(Wat,"Data2VecTextForMaskedLM"),Wat.forEach(t),rAo=r(pLe," (Data2VecText model)"),pLe.forEach(t),tAo=i(H),B2=n(H,"LI",{});var _Le=s(B2);Wde=n(_Le,"STRONG",{});var Qat=s(Wde);aAo=r(Qat,"deberta"),Qat.forEach(t),nAo=r(_Le," \u2014 "),zj=n(_Le,"A",{href:!0});var Hat=s(zj);sAo=r(Hat,"DebertaForMaskedLM"),Hat.forEach(t),lAo=r(_Le," (DeBERTa model)"),_Le.forEach(t),iAo=i(H),I2=n(H,"LI",{});var uLe=s(I2);Qde=n(uLe,"STRONG",{});var Uat=s(Qde);dAo=r(Uat,"deberta-v2"),Uat.forEach(t),cAo=r(uLe," \u2014 "),Wj=n(uLe,"A",{href:!0});var Jat=s(Wj);fAo=r(Jat,"DebertaV2ForMaskedLM"),Jat.forEach(t),mAo=r(uLe," (DeBERTa-v2 model)"),uLe.forEach(t),gAo=i(H),q2=n(H,"LI",{});var bLe=s(q2);Hde=n(bLe,"STRONG",{});var Yat=s(Hde);hAo=r(Yat,"distilbert"),Yat.forEach(t),pAo=r(bLe," \u2014 "),Qj=n(bLe,"A",{href:!0});var Kat=s(Qj);_Ao=r(Kat,"DistilBertForMaskedLM"),Kat.forEach(t),uAo=r(bLe," (DistilBERT model)"),bLe.forEach(t),bAo=i(H),N2=n(H,"LI",{});var vLe=s(N2);Ude=n(vLe,"STRONG",{});var Zat=s(Ude);vAo=r(Zat,"electra"),Zat.forEach(t),FAo=r(vLe," \u2014 "),Hj=n(vLe,"A",{href:!0});var ent=s(Hj);TAo=r(ent,"ElectraForMaskedLM"),ent.forEach(t),MAo=r(vLe," (ELECTRA model)"),vLe.forEach(t),EAo=i(H),j2=n(H,"LI",{});var FLe=s(j2);Jde=n(FLe,"STRONG",{});var ont=s(Jde);CAo=r(ont,"flaubert"),ont.forEach(t),wAo=r(FLe," \u2014 "),Uj=n(FLe,"A",{href:!0});var rnt=s(Uj);AAo=r(rnt,"FlaubertWithLMHeadModel"),rnt.forEach(t),yAo=r(FLe," (FlauBERT model)"),FLe.forEach(t),LAo=i(H),D2=n(H,"LI",{});var TLe=s(D2);Yde=n(TLe,"STRONG",{});var tnt=s(Yde);xAo=r(tnt,"fnet"),tnt.forEach(t),$Ao=r(TLe," \u2014 "),Jj=n(TLe,"A",{href:!0});var ant=s(Jj);kAo=r(ant,"FNetForMaskedLM"),ant.forEach(t),SAo=r(TLe," (FNet model)"),TLe.forEach(t),RAo=i(H),G2=n(H,"LI",{});var MLe=s(G2);Kde=n(MLe,"STRONG",{});var nnt=s(Kde);PAo=r(nnt,"funnel"),nnt.forEach(t),BAo=r(MLe," \u2014 "),Yj=n(MLe,"A",{href:!0});var snt=s(Yj);IAo=r(snt,"FunnelForMaskedLM"),snt.forEach(t),qAo=r(MLe," (Funnel Transformer model)"),MLe.forEach(t),NAo=i(H),O2=n(H,"LI",{});var ELe=s(O2);Zde=n(ELe,"STRONG",{});var lnt=s(Zde);jAo=r(lnt,"ibert"),lnt.forEach(t),DAo=r(ELe," \u2014 "),Kj=n(ELe,"A",{href:!0});var int=s(Kj);GAo=r(int,"IBertForMaskedLM"),int.forEach(t),OAo=r(ELe," (I-BERT model)"),ELe.forEach(t),VAo=i(H),V2=n(H,"LI",{});var CLe=s(V2);ece=n(CLe,"STRONG",{});var dnt=s(ece);XAo=r(dnt,"layoutlm"),dnt.forEach(t),zAo=r(CLe," \u2014 "),Zj=n(CLe,"A",{href:!0});var cnt=s(Zj);WAo=r(cnt,"LayoutLMForMaskedLM"),cnt.forEach(t),QAo=r(CLe," (LayoutLM model)"),CLe.forEach(t),HAo=i(H),X2=n(H,"LI",{});var wLe=s(X2);oce=n(wLe,"STRONG",{});var fnt=s(oce);UAo=r(fnt,"longformer"),fnt.forEach(t),JAo=r(wLe," \u2014 "),eD=n(wLe,"A",{href:!0});var mnt=s(eD);YAo=r(mnt,"LongformerForMaskedLM"),mnt.forEach(t),KAo=r(wLe," (Longformer model)"),wLe.forEach(t),ZAo=i(H),z2=n(H,"LI",{});var ALe=s(z2);rce=n(ALe,"STRONG",{});var gnt=s(rce);e6o=r(gnt,"mbart"),gnt.forEach(t),o6o=r(ALe," \u2014 "),oD=n(ALe,"A",{href:!0});var hnt=s(oD);r6o=r(hnt,"MBartForConditionalGeneration"),hnt.forEach(t),t6o=r(ALe," (mBART model)"),ALe.forEach(t),a6o=i(H),W2=n(H,"LI",{});var yLe=s(W2);tce=n(yLe,"STRONG",{});var pnt=s(tce);n6o=r(pnt,"megatron-bert"),pnt.forEach(t),s6o=r(yLe," \u2014 "),rD=n(yLe,"A",{href:!0});var _nt=s(rD);l6o=r(_nt,"MegatronBertForMaskedLM"),_nt.forEach(t),i6o=r(yLe," (MegatronBert model)"),yLe.forEach(t),d6o=i(H),Q2=n(H,"LI",{});var LLe=s(Q2);ace=n(LLe,"STRONG",{});var unt=s(ace);c6o=r(unt,"mobilebert"),unt.forEach(t),f6o=r(LLe," \u2014 "),tD=n(LLe,"A",{href:!0});var bnt=s(tD);m6o=r(bnt,"MobileBertForMaskedLM"),bnt.forEach(t),g6o=r(LLe," (MobileBERT model)"),LLe.forEach(t),h6o=i(H),H2=n(H,"LI",{});var xLe=s(H2);nce=n(xLe,"STRONG",{});var vnt=s(nce);p6o=r(vnt,"mpnet"),vnt.forEach(t),_6o=r(xLe," \u2014 "),aD=n(xLe,"A",{href:!0});var Fnt=s(aD);u6o=r(Fnt,"MPNetForMaskedLM"),Fnt.forEach(t),b6o=r(xLe," (MPNet model)"),xLe.forEach(t),v6o=i(H),U2=n(H,"LI",{});var $Le=s(U2);sce=n($Le,"STRONG",{});var Tnt=s(sce);F6o=r(Tnt,"nystromformer"),Tnt.forEach(t),T6o=r($Le," \u2014 "),nD=n($Le,"A",{href:!0});var Mnt=s(nD);M6o=r(Mnt,"NystromformerForMaskedLM"),Mnt.forEach(t),E6o=r($Le," (Nystromformer model)"),$Le.forEach(t),C6o=i(H),J2=n(H,"LI",{});var kLe=s(J2);lce=n(kLe,"STRONG",{});var Ent=s(lce);w6o=r(Ent,"perceiver"),Ent.forEach(t),A6o=r(kLe," \u2014 "),sD=n(kLe,"A",{href:!0});var Cnt=s(sD);y6o=r(Cnt,"PerceiverForMaskedLM"),Cnt.forEach(t),L6o=r(kLe," (Perceiver model)"),kLe.forEach(t),x6o=i(H),Y2=n(H,"LI",{});var SLe=s(Y2);ice=n(SLe,"STRONG",{});var wnt=s(ice);$6o=r(wnt,"qdqbert"),wnt.forEach(t),k6o=r(SLe," \u2014 "),lD=n(SLe,"A",{href:!0});var Ant=s(lD);S6o=r(Ant,"QDQBertForMaskedLM"),Ant.forEach(t),R6o=r(SLe," (QDQBert model)"),SLe.forEach(t),P6o=i(H),K2=n(H,"LI",{});var RLe=s(K2);dce=n(RLe,"STRONG",{});var ynt=s(dce);B6o=r(ynt,"reformer"),ynt.forEach(t),I6o=r(RLe," \u2014 "),iD=n(RLe,"A",{href:!0});var Lnt=s(iD);q6o=r(Lnt,"ReformerForMaskedLM"),Lnt.forEach(t),N6o=r(RLe," (Reformer model)"),RLe.forEach(t),j6o=i(H),Z2=n(H,"LI",{});var PLe=s(Z2);cce=n(PLe,"STRONG",{});var xnt=s(cce);D6o=r(xnt,"rembert"),xnt.forEach(t),G6o=r(PLe," \u2014 "),dD=n(PLe,"A",{href:!0});var $nt=s(dD);O6o=r($nt,"RemBertForMaskedLM"),$nt.forEach(t),V6o=r(PLe," (RemBERT model)"),PLe.forEach(t),X6o=i(H),e1=n(H,"LI",{});var BLe=s(e1);fce=n(BLe,"STRONG",{});var knt=s(fce);z6o=r(knt,"roberta"),knt.forEach(t),W6o=r(BLe," \u2014 "),cD=n(BLe,"A",{href:!0});var Snt=s(cD);Q6o=r(Snt,"RobertaForMaskedLM"),Snt.forEach(t),H6o=r(BLe," (RoBERTa model)"),BLe.forEach(t),U6o=i(H),o1=n(H,"LI",{});var ILe=s(o1);mce=n(ILe,"STRONG",{});var Rnt=s(mce);J6o=r(Rnt,"roformer"),Rnt.forEach(t),Y6o=r(ILe," \u2014 "),fD=n(ILe,"A",{href:!0});var Pnt=s(fD);K6o=r(Pnt,"RoFormerForMaskedLM"),Pnt.forEach(t),Z6o=r(ILe," (RoFormer model)"),ILe.forEach(t),eyo=i(H),r1=n(H,"LI",{});var qLe=s(r1);gce=n(qLe,"STRONG",{});var Bnt=s(gce);oyo=r(Bnt,"squeezebert"),Bnt.forEach(t),ryo=r(qLe," \u2014 "),mD=n(qLe,"A",{href:!0});var Int=s(mD);tyo=r(Int,"SqueezeBertForMaskedLM"),Int.forEach(t),ayo=r(qLe," (SqueezeBERT model)"),qLe.forEach(t),nyo=i(H),t1=n(H,"LI",{});var NLe=s(t1);hce=n(NLe,"STRONG",{});var qnt=s(hce);syo=r(qnt,"tapas"),qnt.forEach(t),lyo=r(NLe," \u2014 "),gD=n(NLe,"A",{href:!0});var Nnt=s(gD);iyo=r(Nnt,"TapasForMaskedLM"),Nnt.forEach(t),dyo=r(NLe," (TAPAS model)"),NLe.forEach(t),cyo=i(H),a1=n(H,"LI",{});var jLe=s(a1);pce=n(jLe,"STRONG",{});var jnt=s(pce);fyo=r(jnt,"wav2vec2"),jnt.forEach(t),myo=r(jLe," \u2014 "),_ce=n(jLe,"CODE",{});var Dnt=s(_ce);gyo=r(Dnt,"Wav2Vec2ForMaskedLM"),Dnt.forEach(t),hyo=r(jLe," (Wav2Vec2 model)"),jLe.forEach(t),pyo=i(H),n1=n(H,"LI",{});var DLe=s(n1);uce=n(DLe,"STRONG",{});var Gnt=s(uce);_yo=r(Gnt,"xlm"),Gnt.forEach(t),uyo=r(DLe," \u2014 "),hD=n(DLe,"A",{href:!0});var Ont=s(hD);byo=r(Ont,"XLMWithLMHeadModel"),Ont.forEach(t),vyo=r(DLe," (XLM model)"),DLe.forEach(t),Fyo=i(H),s1=n(H,"LI",{});var GLe=s(s1);bce=n(GLe,"STRONG",{});var Vnt=s(bce);Tyo=r(Vnt,"xlm-roberta"),Vnt.forEach(t),Myo=r(GLe," \u2014 "),pD=n(GLe,"A",{href:!0});var Xnt=s(pD);Eyo=r(Xnt,"XLMRobertaForMaskedLM"),Xnt.forEach(t),Cyo=r(GLe," (XLM-RoBERTa model)"),GLe.forEach(t),wyo=i(H),l1=n(H,"LI",{});var OLe=s(l1);vce=n(OLe,"STRONG",{});var znt=s(vce);Ayo=r(znt,"xlm-roberta-xl"),znt.forEach(t),yyo=r(OLe," \u2014 "),_D=n(OLe,"A",{href:!0});var Wnt=s(_D);Lyo=r(Wnt,"XLMRobertaXLForMaskedLM"),Wnt.forEach(t),xyo=r(OLe," (XLM-RoBERTa-XL model)"),OLe.forEach(t),$yo=i(H),i1=n(H,"LI",{});var VLe=s(i1);Fce=n(VLe,"STRONG",{});var Qnt=s(Fce);kyo=r(Qnt,"yoso"),Qnt.forEach(t),Syo=r(VLe," \u2014 "),uD=n(VLe,"A",{href:!0});var Hnt=s(uD);Ryo=r(Hnt,"YosoForMaskedLM"),Hnt.forEach(t),Pyo=r(VLe," (YOSO model)"),VLe.forEach(t),H.forEach(t),Byo=i(aa),d1=n(aa,"P",{});var XLe=s(d1);Iyo=r(XLe,"The model is set in evaluation mode by default using "),Tce=n(XLe,"CODE",{});var Unt=s(Tce);qyo=r(Unt,"model.eval()"),Unt.forEach(t),Nyo=r(XLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(XLe,"CODE",{});var Jnt=s(Mce);jyo=r(Jnt,"model.train()"),Jnt.forEach(t),XLe.forEach(t),Dyo=i(aa),T(c1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Tqe=i(f),qi=n(f,"H2",{class:!0});var wje=s(qi);f1=n(wje,"A",{id:!0,class:!0,href:!0});var Ynt=s(f1);Ece=n(Ynt,"SPAN",{});var Knt=s(Ece);T(sy.$$.fragment,Knt),Knt.forEach(t),Ynt.forEach(t),Gyo=i(wje),Cce=n(wje,"SPAN",{});var Znt=s(Cce);Oyo=r(Znt,"AutoModelForSeq2SeqLM"),Znt.forEach(t),wje.forEach(t),Mqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(ly.$$.fragment,zs),Vyo=i(zs),Ni=n(zs,"P",{});var YK=s(Ni);Xyo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bD=n(YK,"A",{href:!0});var est=s(bD);zyo=r(est,"from_pretrained()"),est.forEach(t),Wyo=r(YK," class method or the "),vD=n(YK,"A",{href:!0});var ost=s(vD);Qyo=r(ost,"from_config()"),ost.forEach(t),Hyo=r(YK,` class
method.`),YK.forEach(t),Uyo=i(zs),iy=n(zs,"P",{});var Aje=s(iy);Jyo=r(Aje,"This class cannot be instantiated directly using "),wce=n(Aje,"CODE",{});var rst=s(wce);Yyo=r(rst,"__init__()"),rst.forEach(t),Kyo=r(Aje," (throws an error)."),Aje.forEach(t),Zyo=i(zs),lt=n(zs,"DIV",{class:!0});var A0=s(lt);T(dy.$$.fragment,A0),eLo=i(A0),Ace=n(A0,"P",{});var tst=s(Ace);oLo=r(tst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tst.forEach(t),rLo=i(A0),ji=n(A0,"P",{});var KK=s(ji);tLo=r(KK,`Note:
Loading a model from its configuration file does `),yce=n(KK,"STRONG",{});var ast=s(yce);aLo=r(ast,"not"),ast.forEach(t),nLo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(KK,"A",{href:!0});var nst=s(FD);sLo=r(nst,"from_pretrained()"),nst.forEach(t),lLo=r(KK," to load the model weights."),KK.forEach(t),iLo=i(A0),T(m1.$$.fragment,A0),A0.forEach(t),dLo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(cy.$$.fragment,na),cLo=i(na),Lce=n(na,"P",{});var sst=s(Lce);fLo=r(sst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sst.forEach(t),mLo=i(na),Sa=n(na,"P",{});var y0=s(Sa);gLo=r(y0,"The model class to instantiate is selected based on the "),xce=n(y0,"CODE",{});var lst=s(xce);hLo=r(lst,"model_type"),lst.forEach(t),pLo=r(y0,` property of the config object (either
passed as an argument or loaded from `),$ce=n(y0,"CODE",{});var ist=s($ce);_Lo=r(ist,"pretrained_model_name_or_path"),ist.forEach(t),uLo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(y0,"CODE",{});var dst=s(kce);bLo=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),vLo=r(y0,":"),y0.forEach(t),FLo=i(na),_e=n(na,"UL",{});var ve=s(_e);g1=n(ve,"LI",{});var zLe=s(g1);Sce=n(zLe,"STRONG",{});var cst=s(Sce);TLo=r(cst,"bart"),cst.forEach(t),MLo=r(zLe," \u2014 "),TD=n(zLe,"A",{href:!0});var fst=s(TD);ELo=r(fst,"BartForConditionalGeneration"),fst.forEach(t),CLo=r(zLe," (BART model)"),zLe.forEach(t),wLo=i(ve),h1=n(ve,"LI",{});var WLe=s(h1);Rce=n(WLe,"STRONG",{});var mst=s(Rce);ALo=r(mst,"bigbird_pegasus"),mst.forEach(t),yLo=r(WLe," \u2014 "),MD=n(WLe,"A",{href:!0});var gst=s(MD);LLo=r(gst,"BigBirdPegasusForConditionalGeneration"),gst.forEach(t),xLo=r(WLe," (BigBirdPegasus model)"),WLe.forEach(t),$Lo=i(ve),p1=n(ve,"LI",{});var QLe=s(p1);Pce=n(QLe,"STRONG",{});var hst=s(Pce);kLo=r(hst,"blenderbot"),hst.forEach(t),SLo=r(QLe," \u2014 "),ED=n(QLe,"A",{href:!0});var pst=s(ED);RLo=r(pst,"BlenderbotForConditionalGeneration"),pst.forEach(t),PLo=r(QLe," (Blenderbot model)"),QLe.forEach(t),BLo=i(ve),_1=n(ve,"LI",{});var HLe=s(_1);Bce=n(HLe,"STRONG",{});var _st=s(Bce);ILo=r(_st,"blenderbot-small"),_st.forEach(t),qLo=r(HLe," \u2014 "),CD=n(HLe,"A",{href:!0});var ust=s(CD);NLo=r(ust,"BlenderbotSmallForConditionalGeneration"),ust.forEach(t),jLo=r(HLe," (BlenderbotSmall model)"),HLe.forEach(t),DLo=i(ve),u1=n(ve,"LI",{});var ULe=s(u1);Ice=n(ULe,"STRONG",{});var bst=s(Ice);GLo=r(bst,"encoder-decoder"),bst.forEach(t),OLo=r(ULe," \u2014 "),wD=n(ULe,"A",{href:!0});var vst=s(wD);VLo=r(vst,"EncoderDecoderModel"),vst.forEach(t),XLo=r(ULe," (Encoder decoder model)"),ULe.forEach(t),zLo=i(ve),b1=n(ve,"LI",{});var JLe=s(b1);qce=n(JLe,"STRONG",{});var Fst=s(qce);WLo=r(Fst,"fsmt"),Fst.forEach(t),QLo=r(JLe," \u2014 "),AD=n(JLe,"A",{href:!0});var Tst=s(AD);HLo=r(Tst,"FSMTForConditionalGeneration"),Tst.forEach(t),ULo=r(JLe," (FairSeq Machine-Translation model)"),JLe.forEach(t),JLo=i(ve),v1=n(ve,"LI",{});var YLe=s(v1);Nce=n(YLe,"STRONG",{});var Mst=s(Nce);YLo=r(Mst,"led"),Mst.forEach(t),KLo=r(YLe," \u2014 "),yD=n(YLe,"A",{href:!0});var Est=s(yD);ZLo=r(Est,"LEDForConditionalGeneration"),Est.forEach(t),e8o=r(YLe," (LED model)"),YLe.forEach(t),o8o=i(ve),F1=n(ve,"LI",{});var KLe=s(F1);jce=n(KLe,"STRONG",{});var Cst=s(jce);r8o=r(Cst,"m2m_100"),Cst.forEach(t),t8o=r(KLe," \u2014 "),LD=n(KLe,"A",{href:!0});var wst=s(LD);a8o=r(wst,"M2M100ForConditionalGeneration"),wst.forEach(t),n8o=r(KLe," (M2M100 model)"),KLe.forEach(t),s8o=i(ve),T1=n(ve,"LI",{});var ZLe=s(T1);Dce=n(ZLe,"STRONG",{});var Ast=s(Dce);l8o=r(Ast,"marian"),Ast.forEach(t),i8o=r(ZLe," \u2014 "),xD=n(ZLe,"A",{href:!0});var yst=s(xD);d8o=r(yst,"MarianMTModel"),yst.forEach(t),c8o=r(ZLe," (Marian model)"),ZLe.forEach(t),f8o=i(ve),M1=n(ve,"LI",{});var e8e=s(M1);Gce=n(e8e,"STRONG",{});var Lst=s(Gce);m8o=r(Lst,"mbart"),Lst.forEach(t),g8o=r(e8e," \u2014 "),$D=n(e8e,"A",{href:!0});var xst=s($D);h8o=r(xst,"MBartForConditionalGeneration"),xst.forEach(t),p8o=r(e8e," (mBART model)"),e8e.forEach(t),_8o=i(ve),E1=n(ve,"LI",{});var o8e=s(E1);Oce=n(o8e,"STRONG",{});var $st=s(Oce);u8o=r($st,"mt5"),$st.forEach(t),b8o=r(o8e," \u2014 "),kD=n(o8e,"A",{href:!0});var kst=s(kD);v8o=r(kst,"MT5ForConditionalGeneration"),kst.forEach(t),F8o=r(o8e," (mT5 model)"),o8e.forEach(t),T8o=i(ve),C1=n(ve,"LI",{});var r8e=s(C1);Vce=n(r8e,"STRONG",{});var Sst=s(Vce);M8o=r(Sst,"pegasus"),Sst.forEach(t),E8o=r(r8e," \u2014 "),SD=n(r8e,"A",{href:!0});var Rst=s(SD);C8o=r(Rst,"PegasusForConditionalGeneration"),Rst.forEach(t),w8o=r(r8e," (Pegasus model)"),r8e.forEach(t),A8o=i(ve),w1=n(ve,"LI",{});var t8e=s(w1);Xce=n(t8e,"STRONG",{});var Pst=s(Xce);y8o=r(Pst,"plbart"),Pst.forEach(t),L8o=r(t8e," \u2014 "),RD=n(t8e,"A",{href:!0});var Bst=s(RD);x8o=r(Bst,"PLBartForConditionalGeneration"),Bst.forEach(t),$8o=r(t8e," (PLBart model)"),t8e.forEach(t),k8o=i(ve),A1=n(ve,"LI",{});var a8e=s(A1);zce=n(a8e,"STRONG",{});var Ist=s(zce);S8o=r(Ist,"prophetnet"),Ist.forEach(t),R8o=r(a8e," \u2014 "),PD=n(a8e,"A",{href:!0});var qst=s(PD);P8o=r(qst,"ProphetNetForConditionalGeneration"),qst.forEach(t),B8o=r(a8e," (ProphetNet model)"),a8e.forEach(t),I8o=i(ve),y1=n(ve,"LI",{});var n8e=s(y1);Wce=n(n8e,"STRONG",{});var Nst=s(Wce);q8o=r(Nst,"t5"),Nst.forEach(t),N8o=r(n8e," \u2014 "),BD=n(n8e,"A",{href:!0});var jst=s(BD);j8o=r(jst,"T5ForConditionalGeneration"),jst.forEach(t),D8o=r(n8e," (T5 model)"),n8e.forEach(t),G8o=i(ve),L1=n(ve,"LI",{});var s8e=s(L1);Qce=n(s8e,"STRONG",{});var Dst=s(Qce);O8o=r(Dst,"xlm-prophetnet"),Dst.forEach(t),V8o=r(s8e," \u2014 "),ID=n(s8e,"A",{href:!0});var Gst=s(ID);X8o=r(Gst,"XLMProphetNetForConditionalGeneration"),Gst.forEach(t),z8o=r(s8e," (XLMProphetNet model)"),s8e.forEach(t),ve.forEach(t),W8o=i(na),x1=n(na,"P",{});var l8e=s(x1);Q8o=r(l8e,"The model is set in evaluation mode by default using "),Hce=n(l8e,"CODE",{});var Ost=s(Hce);H8o=r(Ost,"model.eval()"),Ost.forEach(t),U8o=r(l8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=n(l8e,"CODE",{});var Vst=s(Uce);J8o=r(Vst,"model.train()"),Vst.forEach(t),l8e.forEach(t),Y8o=i(na),T($1.$$.fragment,na),na.forEach(t),zs.forEach(t),Eqe=i(f),Di=n(f,"H2",{class:!0});var yje=s(Di);k1=n(yje,"A",{id:!0,class:!0,href:!0});var Xst=s(k1);Jce=n(Xst,"SPAN",{});var zst=s(Jce);T(fy.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),K8o=i(yje),Yce=n(yje,"SPAN",{});var Wst=s(Yce);Z8o=r(Wst,"AutoModelForSequenceClassification"),Wst.forEach(t),yje.forEach(t),Cqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(my.$$.fragment,Ws),e9o=i(Ws),Gi=n(Ws,"P",{});var ZK=s(Gi);o9o=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=n(ZK,"A",{href:!0});var Qst=s(qD);r9o=r(Qst,"from_pretrained()"),Qst.forEach(t),t9o=r(ZK," class method or the "),ND=n(ZK,"A",{href:!0});var Hst=s(ND);a9o=r(Hst,"from_config()"),Hst.forEach(t),n9o=r(ZK,` class
method.`),ZK.forEach(t),s9o=i(Ws),gy=n(Ws,"P",{});var Lje=s(gy);l9o=r(Lje,"This class cannot be instantiated directly using "),Kce=n(Lje,"CODE",{});var Ust=s(Kce);i9o=r(Ust,"__init__()"),Ust.forEach(t),d9o=r(Lje," (throws an error)."),Lje.forEach(t),c9o=i(Ws),it=n(Ws,"DIV",{class:!0});var L0=s(it);T(hy.$$.fragment,L0),f9o=i(L0),Zce=n(L0,"P",{});var Jst=s(Zce);m9o=r(Jst,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jst.forEach(t),g9o=i(L0),Oi=n(L0,"P",{});var eZ=s(Oi);h9o=r(eZ,`Note:
Loading a model from its configuration file does `),efe=n(eZ,"STRONG",{});var Yst=s(efe);p9o=r(Yst,"not"),Yst.forEach(t),_9o=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(eZ,"A",{href:!0});var Kst=s(jD);u9o=r(Kst,"from_pretrained()"),Kst.forEach(t),b9o=r(eZ," to load the model weights."),eZ.forEach(t),v9o=i(L0),T(S1.$$.fragment,L0),L0.forEach(t),F9o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(py.$$.fragment,sa),T9o=i(sa),ofe=n(sa,"P",{});var Zst=s(ofe);M9o=r(Zst,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zst.forEach(t),E9o=i(sa),Ra=n(sa,"P",{});var x0=s(Ra);C9o=r(x0,"The model class to instantiate is selected based on the "),rfe=n(x0,"CODE",{});var elt=s(rfe);w9o=r(elt,"model_type"),elt.forEach(t),A9o=r(x0,` property of the config object (either
passed as an argument or loaded from `),tfe=n(x0,"CODE",{});var olt=s(tfe);y9o=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),L9o=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(x0,"CODE",{});var rlt=s(afe);x9o=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),$9o=r(x0,":"),x0.forEach(t),k9o=i(sa),q=n(sa,"UL",{});var j=s(q);R1=n(j,"LI",{});var i8e=s(R1);nfe=n(i8e,"STRONG",{});var tlt=s(nfe);S9o=r(tlt,"albert"),tlt.forEach(t),R9o=r(i8e," \u2014 "),DD=n(i8e,"A",{href:!0});var alt=s(DD);P9o=r(alt,"AlbertForSequenceClassification"),alt.forEach(t),B9o=r(i8e," (ALBERT model)"),i8e.forEach(t),I9o=i(j),P1=n(j,"LI",{});var d8e=s(P1);sfe=n(d8e,"STRONG",{});var nlt=s(sfe);q9o=r(nlt,"bart"),nlt.forEach(t),N9o=r(d8e," \u2014 "),GD=n(d8e,"A",{href:!0});var slt=s(GD);j9o=r(slt,"BartForSequenceClassification"),slt.forEach(t),D9o=r(d8e," (BART model)"),d8e.forEach(t),G9o=i(j),B1=n(j,"LI",{});var c8e=s(B1);lfe=n(c8e,"STRONG",{});var llt=s(lfe);O9o=r(llt,"bert"),llt.forEach(t),V9o=r(c8e," \u2014 "),OD=n(c8e,"A",{href:!0});var ilt=s(OD);X9o=r(ilt,"BertForSequenceClassification"),ilt.forEach(t),z9o=r(c8e," (BERT model)"),c8e.forEach(t),W9o=i(j),I1=n(j,"LI",{});var f8e=s(I1);ife=n(f8e,"STRONG",{});var dlt=s(ife);Q9o=r(dlt,"big_bird"),dlt.forEach(t),H9o=r(f8e," \u2014 "),VD=n(f8e,"A",{href:!0});var clt=s(VD);U9o=r(clt,"BigBirdForSequenceClassification"),clt.forEach(t),J9o=r(f8e," (BigBird model)"),f8e.forEach(t),Y9o=i(j),q1=n(j,"LI",{});var m8e=s(q1);dfe=n(m8e,"STRONG",{});var flt=s(dfe);K9o=r(flt,"bigbird_pegasus"),flt.forEach(t),Z9o=r(m8e," \u2014 "),XD=n(m8e,"A",{href:!0});var mlt=s(XD);exo=r(mlt,"BigBirdPegasusForSequenceClassification"),mlt.forEach(t),oxo=r(m8e," (BigBirdPegasus model)"),m8e.forEach(t),rxo=i(j),N1=n(j,"LI",{});var g8e=s(N1);cfe=n(g8e,"STRONG",{});var glt=s(cfe);txo=r(glt,"camembert"),glt.forEach(t),axo=r(g8e," \u2014 "),zD=n(g8e,"A",{href:!0});var hlt=s(zD);nxo=r(hlt,"CamembertForSequenceClassification"),hlt.forEach(t),sxo=r(g8e," (CamemBERT model)"),g8e.forEach(t),lxo=i(j),j1=n(j,"LI",{});var h8e=s(j1);ffe=n(h8e,"STRONG",{});var plt=s(ffe);ixo=r(plt,"canine"),plt.forEach(t),dxo=r(h8e," \u2014 "),WD=n(h8e,"A",{href:!0});var _lt=s(WD);cxo=r(_lt,"CanineForSequenceClassification"),_lt.forEach(t),fxo=r(h8e," (Canine model)"),h8e.forEach(t),mxo=i(j),D1=n(j,"LI",{});var p8e=s(D1);mfe=n(p8e,"STRONG",{});var ult=s(mfe);gxo=r(ult,"convbert"),ult.forEach(t),hxo=r(p8e," \u2014 "),QD=n(p8e,"A",{href:!0});var blt=s(QD);pxo=r(blt,"ConvBertForSequenceClassification"),blt.forEach(t),_xo=r(p8e," (ConvBERT model)"),p8e.forEach(t),uxo=i(j),G1=n(j,"LI",{});var _8e=s(G1);gfe=n(_8e,"STRONG",{});var vlt=s(gfe);bxo=r(vlt,"ctrl"),vlt.forEach(t),vxo=r(_8e," \u2014 "),HD=n(_8e,"A",{href:!0});var Flt=s(HD);Fxo=r(Flt,"CTRLForSequenceClassification"),Flt.forEach(t),Txo=r(_8e," (CTRL model)"),_8e.forEach(t),Mxo=i(j),O1=n(j,"LI",{});var u8e=s(O1);hfe=n(u8e,"STRONG",{});var Tlt=s(hfe);Exo=r(Tlt,"data2vec-text"),Tlt.forEach(t),Cxo=r(u8e," \u2014 "),UD=n(u8e,"A",{href:!0});var Mlt=s(UD);wxo=r(Mlt,"Data2VecTextForSequenceClassification"),Mlt.forEach(t),Axo=r(u8e," (Data2VecText model)"),u8e.forEach(t),yxo=i(j),V1=n(j,"LI",{});var b8e=s(V1);pfe=n(b8e,"STRONG",{});var Elt=s(pfe);Lxo=r(Elt,"deberta"),Elt.forEach(t),xxo=r(b8e," \u2014 "),JD=n(b8e,"A",{href:!0});var Clt=s(JD);$xo=r(Clt,"DebertaForSequenceClassification"),Clt.forEach(t),kxo=r(b8e," (DeBERTa model)"),b8e.forEach(t),Sxo=i(j),X1=n(j,"LI",{});var v8e=s(X1);_fe=n(v8e,"STRONG",{});var wlt=s(_fe);Rxo=r(wlt,"deberta-v2"),wlt.forEach(t),Pxo=r(v8e," \u2014 "),YD=n(v8e,"A",{href:!0});var Alt=s(YD);Bxo=r(Alt,"DebertaV2ForSequenceClassification"),Alt.forEach(t),Ixo=r(v8e," (DeBERTa-v2 model)"),v8e.forEach(t),qxo=i(j),z1=n(j,"LI",{});var F8e=s(z1);ufe=n(F8e,"STRONG",{});var ylt=s(ufe);Nxo=r(ylt,"distilbert"),ylt.forEach(t),jxo=r(F8e," \u2014 "),KD=n(F8e,"A",{href:!0});var Llt=s(KD);Dxo=r(Llt,"DistilBertForSequenceClassification"),Llt.forEach(t),Gxo=r(F8e," (DistilBERT model)"),F8e.forEach(t),Oxo=i(j),W1=n(j,"LI",{});var T8e=s(W1);bfe=n(T8e,"STRONG",{});var xlt=s(bfe);Vxo=r(xlt,"electra"),xlt.forEach(t),Xxo=r(T8e," \u2014 "),ZD=n(T8e,"A",{href:!0});var $lt=s(ZD);zxo=r($lt,"ElectraForSequenceClassification"),$lt.forEach(t),Wxo=r(T8e," (ELECTRA model)"),T8e.forEach(t),Qxo=i(j),Q1=n(j,"LI",{});var M8e=s(Q1);vfe=n(M8e,"STRONG",{});var klt=s(vfe);Hxo=r(klt,"flaubert"),klt.forEach(t),Uxo=r(M8e," \u2014 "),eG=n(M8e,"A",{href:!0});var Slt=s(eG);Jxo=r(Slt,"FlaubertForSequenceClassification"),Slt.forEach(t),Yxo=r(M8e," (FlauBERT model)"),M8e.forEach(t),Kxo=i(j),H1=n(j,"LI",{});var E8e=s(H1);Ffe=n(E8e,"STRONG",{});var Rlt=s(Ffe);Zxo=r(Rlt,"fnet"),Rlt.forEach(t),e$o=r(E8e," \u2014 "),oG=n(E8e,"A",{href:!0});var Plt=s(oG);o$o=r(Plt,"FNetForSequenceClassification"),Plt.forEach(t),r$o=r(E8e," (FNet model)"),E8e.forEach(t),t$o=i(j),U1=n(j,"LI",{});var C8e=s(U1);Tfe=n(C8e,"STRONG",{});var Blt=s(Tfe);a$o=r(Blt,"funnel"),Blt.forEach(t),n$o=r(C8e," \u2014 "),rG=n(C8e,"A",{href:!0});var Ilt=s(rG);s$o=r(Ilt,"FunnelForSequenceClassification"),Ilt.forEach(t),l$o=r(C8e," (Funnel Transformer model)"),C8e.forEach(t),i$o=i(j),J1=n(j,"LI",{});var w8e=s(J1);Mfe=n(w8e,"STRONG",{});var qlt=s(Mfe);d$o=r(qlt,"gpt2"),qlt.forEach(t),c$o=r(w8e," \u2014 "),tG=n(w8e,"A",{href:!0});var Nlt=s(tG);f$o=r(Nlt,"GPT2ForSequenceClassification"),Nlt.forEach(t),m$o=r(w8e," (OpenAI GPT-2 model)"),w8e.forEach(t),g$o=i(j),Y1=n(j,"LI",{});var A8e=s(Y1);Efe=n(A8e,"STRONG",{});var jlt=s(Efe);h$o=r(jlt,"gpt_neo"),jlt.forEach(t),p$o=r(A8e," \u2014 "),aG=n(A8e,"A",{href:!0});var Dlt=s(aG);_$o=r(Dlt,"GPTNeoForSequenceClassification"),Dlt.forEach(t),u$o=r(A8e," (GPT Neo model)"),A8e.forEach(t),b$o=i(j),K1=n(j,"LI",{});var y8e=s(K1);Cfe=n(y8e,"STRONG",{});var Glt=s(Cfe);v$o=r(Glt,"gptj"),Glt.forEach(t),F$o=r(y8e," \u2014 "),nG=n(y8e,"A",{href:!0});var Olt=s(nG);T$o=r(Olt,"GPTJForSequenceClassification"),Olt.forEach(t),M$o=r(y8e," (GPT-J model)"),y8e.forEach(t),E$o=i(j),Z1=n(j,"LI",{});var L8e=s(Z1);wfe=n(L8e,"STRONG",{});var Vlt=s(wfe);C$o=r(Vlt,"ibert"),Vlt.forEach(t),w$o=r(L8e," \u2014 "),sG=n(L8e,"A",{href:!0});var Xlt=s(sG);A$o=r(Xlt,"IBertForSequenceClassification"),Xlt.forEach(t),y$o=r(L8e," (I-BERT model)"),L8e.forEach(t),L$o=i(j),eb=n(j,"LI",{});var x8e=s(eb);Afe=n(x8e,"STRONG",{});var zlt=s(Afe);x$o=r(zlt,"layoutlm"),zlt.forEach(t),$$o=r(x8e," \u2014 "),lG=n(x8e,"A",{href:!0});var Wlt=s(lG);k$o=r(Wlt,"LayoutLMForSequenceClassification"),Wlt.forEach(t),S$o=r(x8e," (LayoutLM model)"),x8e.forEach(t),R$o=i(j),ob=n(j,"LI",{});var $8e=s(ob);yfe=n($8e,"STRONG",{});var Qlt=s(yfe);P$o=r(Qlt,"layoutlmv2"),Qlt.forEach(t),B$o=r($8e," \u2014 "),iG=n($8e,"A",{href:!0});var Hlt=s(iG);I$o=r(Hlt,"LayoutLMv2ForSequenceClassification"),Hlt.forEach(t),q$o=r($8e," (LayoutLMv2 model)"),$8e.forEach(t),N$o=i(j),rb=n(j,"LI",{});var k8e=s(rb);Lfe=n(k8e,"STRONG",{});var Ult=s(Lfe);j$o=r(Ult,"led"),Ult.forEach(t),D$o=r(k8e," \u2014 "),dG=n(k8e,"A",{href:!0});var Jlt=s(dG);G$o=r(Jlt,"LEDForSequenceClassification"),Jlt.forEach(t),O$o=r(k8e," (LED model)"),k8e.forEach(t),V$o=i(j),tb=n(j,"LI",{});var S8e=s(tb);xfe=n(S8e,"STRONG",{});var Ylt=s(xfe);X$o=r(Ylt,"longformer"),Ylt.forEach(t),z$o=r(S8e," \u2014 "),cG=n(S8e,"A",{href:!0});var Klt=s(cG);W$o=r(Klt,"LongformerForSequenceClassification"),Klt.forEach(t),Q$o=r(S8e," (Longformer model)"),S8e.forEach(t),H$o=i(j),ab=n(j,"LI",{});var R8e=s(ab);$fe=n(R8e,"STRONG",{});var Zlt=s($fe);U$o=r(Zlt,"mbart"),Zlt.forEach(t),J$o=r(R8e," \u2014 "),fG=n(R8e,"A",{href:!0});var eit=s(fG);Y$o=r(eit,"MBartForSequenceClassification"),eit.forEach(t),K$o=r(R8e," (mBART model)"),R8e.forEach(t),Z$o=i(j),nb=n(j,"LI",{});var P8e=s(nb);kfe=n(P8e,"STRONG",{});var oit=s(kfe);eko=r(oit,"megatron-bert"),oit.forEach(t),oko=r(P8e," \u2014 "),mG=n(P8e,"A",{href:!0});var rit=s(mG);rko=r(rit,"MegatronBertForSequenceClassification"),rit.forEach(t),tko=r(P8e," (MegatronBert model)"),P8e.forEach(t),ako=i(j),sb=n(j,"LI",{});var B8e=s(sb);Sfe=n(B8e,"STRONG",{});var tit=s(Sfe);nko=r(tit,"mobilebert"),tit.forEach(t),sko=r(B8e," \u2014 "),gG=n(B8e,"A",{href:!0});var ait=s(gG);lko=r(ait,"MobileBertForSequenceClassification"),ait.forEach(t),iko=r(B8e," (MobileBERT model)"),B8e.forEach(t),dko=i(j),lb=n(j,"LI",{});var I8e=s(lb);Rfe=n(I8e,"STRONG",{});var nit=s(Rfe);cko=r(nit,"mpnet"),nit.forEach(t),fko=r(I8e," \u2014 "),hG=n(I8e,"A",{href:!0});var sit=s(hG);mko=r(sit,"MPNetForSequenceClassification"),sit.forEach(t),gko=r(I8e," (MPNet model)"),I8e.forEach(t),hko=i(j),ib=n(j,"LI",{});var q8e=s(ib);Pfe=n(q8e,"STRONG",{});var lit=s(Pfe);pko=r(lit,"nystromformer"),lit.forEach(t),_ko=r(q8e," \u2014 "),pG=n(q8e,"A",{href:!0});var iit=s(pG);uko=r(iit,"NystromformerForSequenceClassification"),iit.forEach(t),bko=r(q8e," (Nystromformer model)"),q8e.forEach(t),vko=i(j),db=n(j,"LI",{});var N8e=s(db);Bfe=n(N8e,"STRONG",{});var dit=s(Bfe);Fko=r(dit,"openai-gpt"),dit.forEach(t),Tko=r(N8e," \u2014 "),_G=n(N8e,"A",{href:!0});var cit=s(_G);Mko=r(cit,"OpenAIGPTForSequenceClassification"),cit.forEach(t),Eko=r(N8e," (OpenAI GPT model)"),N8e.forEach(t),Cko=i(j),cb=n(j,"LI",{});var j8e=s(cb);Ife=n(j8e,"STRONG",{});var fit=s(Ife);wko=r(fit,"perceiver"),fit.forEach(t),Ako=r(j8e," \u2014 "),uG=n(j8e,"A",{href:!0});var mit=s(uG);yko=r(mit,"PerceiverForSequenceClassification"),mit.forEach(t),Lko=r(j8e," (Perceiver model)"),j8e.forEach(t),xko=i(j),fb=n(j,"LI",{});var D8e=s(fb);qfe=n(D8e,"STRONG",{});var git=s(qfe);$ko=r(git,"plbart"),git.forEach(t),kko=r(D8e," \u2014 "),bG=n(D8e,"A",{href:!0});var hit=s(bG);Sko=r(hit,"PLBartForSequenceClassification"),hit.forEach(t),Rko=r(D8e," (PLBart model)"),D8e.forEach(t),Pko=i(j),mb=n(j,"LI",{});var G8e=s(mb);Nfe=n(G8e,"STRONG",{});var pit=s(Nfe);Bko=r(pit,"qdqbert"),pit.forEach(t),Iko=r(G8e," \u2014 "),vG=n(G8e,"A",{href:!0});var _it=s(vG);qko=r(_it,"QDQBertForSequenceClassification"),_it.forEach(t),Nko=r(G8e," (QDQBert model)"),G8e.forEach(t),jko=i(j),gb=n(j,"LI",{});var O8e=s(gb);jfe=n(O8e,"STRONG",{});var uit=s(jfe);Dko=r(uit,"reformer"),uit.forEach(t),Gko=r(O8e," \u2014 "),FG=n(O8e,"A",{href:!0});var bit=s(FG);Oko=r(bit,"ReformerForSequenceClassification"),bit.forEach(t),Vko=r(O8e," (Reformer model)"),O8e.forEach(t),Xko=i(j),hb=n(j,"LI",{});var V8e=s(hb);Dfe=n(V8e,"STRONG",{});var vit=s(Dfe);zko=r(vit,"rembert"),vit.forEach(t),Wko=r(V8e," \u2014 "),TG=n(V8e,"A",{href:!0});var Fit=s(TG);Qko=r(Fit,"RemBertForSequenceClassification"),Fit.forEach(t),Hko=r(V8e," (RemBERT model)"),V8e.forEach(t),Uko=i(j),pb=n(j,"LI",{});var X8e=s(pb);Gfe=n(X8e,"STRONG",{});var Tit=s(Gfe);Jko=r(Tit,"roberta"),Tit.forEach(t),Yko=r(X8e," \u2014 "),MG=n(X8e,"A",{href:!0});var Mit=s(MG);Kko=r(Mit,"RobertaForSequenceClassification"),Mit.forEach(t),Zko=r(X8e," (RoBERTa model)"),X8e.forEach(t),eSo=i(j),_b=n(j,"LI",{});var z8e=s(_b);Ofe=n(z8e,"STRONG",{});var Eit=s(Ofe);oSo=r(Eit,"roformer"),Eit.forEach(t),rSo=r(z8e," \u2014 "),EG=n(z8e,"A",{href:!0});var Cit=s(EG);tSo=r(Cit,"RoFormerForSequenceClassification"),Cit.forEach(t),aSo=r(z8e," (RoFormer model)"),z8e.forEach(t),nSo=i(j),ub=n(j,"LI",{});var W8e=s(ub);Vfe=n(W8e,"STRONG",{});var wit=s(Vfe);sSo=r(wit,"squeezebert"),wit.forEach(t),lSo=r(W8e," \u2014 "),CG=n(W8e,"A",{href:!0});var Ait=s(CG);iSo=r(Ait,"SqueezeBertForSequenceClassification"),Ait.forEach(t),dSo=r(W8e," (SqueezeBERT model)"),W8e.forEach(t),cSo=i(j),bb=n(j,"LI",{});var Q8e=s(bb);Xfe=n(Q8e,"STRONG",{});var yit=s(Xfe);fSo=r(yit,"tapas"),yit.forEach(t),mSo=r(Q8e," \u2014 "),wG=n(Q8e,"A",{href:!0});var Lit=s(wG);gSo=r(Lit,"TapasForSequenceClassification"),Lit.forEach(t),hSo=r(Q8e," (TAPAS model)"),Q8e.forEach(t),pSo=i(j),vb=n(j,"LI",{});var H8e=s(vb);zfe=n(H8e,"STRONG",{});var xit=s(zfe);_So=r(xit,"transfo-xl"),xit.forEach(t),uSo=r(H8e," \u2014 "),AG=n(H8e,"A",{href:!0});var $it=s(AG);bSo=r($it,"TransfoXLForSequenceClassification"),$it.forEach(t),vSo=r(H8e," (Transformer-XL model)"),H8e.forEach(t),FSo=i(j),Fb=n(j,"LI",{});var U8e=s(Fb);Wfe=n(U8e,"STRONG",{});var kit=s(Wfe);TSo=r(kit,"xlm"),kit.forEach(t),MSo=r(U8e," \u2014 "),yG=n(U8e,"A",{href:!0});var Sit=s(yG);ESo=r(Sit,"XLMForSequenceClassification"),Sit.forEach(t),CSo=r(U8e," (XLM model)"),U8e.forEach(t),wSo=i(j),Tb=n(j,"LI",{});var J8e=s(Tb);Qfe=n(J8e,"STRONG",{});var Rit=s(Qfe);ASo=r(Rit,"xlm-roberta"),Rit.forEach(t),ySo=r(J8e," \u2014 "),LG=n(J8e,"A",{href:!0});var Pit=s(LG);LSo=r(Pit,"XLMRobertaForSequenceClassification"),Pit.forEach(t),xSo=r(J8e," (XLM-RoBERTa model)"),J8e.forEach(t),$So=i(j),Mb=n(j,"LI",{});var Y8e=s(Mb);Hfe=n(Y8e,"STRONG",{});var Bit=s(Hfe);kSo=r(Bit,"xlm-roberta-xl"),Bit.forEach(t),SSo=r(Y8e," \u2014 "),xG=n(Y8e,"A",{href:!0});var Iit=s(xG);RSo=r(Iit,"XLMRobertaXLForSequenceClassification"),Iit.forEach(t),PSo=r(Y8e," (XLM-RoBERTa-XL model)"),Y8e.forEach(t),BSo=i(j),Eb=n(j,"LI",{});var K8e=s(Eb);Ufe=n(K8e,"STRONG",{});var qit=s(Ufe);ISo=r(qit,"xlnet"),qit.forEach(t),qSo=r(K8e," \u2014 "),$G=n(K8e,"A",{href:!0});var Nit=s($G);NSo=r(Nit,"XLNetForSequenceClassification"),Nit.forEach(t),jSo=r(K8e," (XLNet model)"),K8e.forEach(t),DSo=i(j),Cb=n(j,"LI",{});var Z8e=s(Cb);Jfe=n(Z8e,"STRONG",{});var jit=s(Jfe);GSo=r(jit,"yoso"),jit.forEach(t),OSo=r(Z8e," \u2014 "),kG=n(Z8e,"A",{href:!0});var Dit=s(kG);VSo=r(Dit,"YosoForSequenceClassification"),Dit.forEach(t),XSo=r(Z8e," (YOSO model)"),Z8e.forEach(t),j.forEach(t),zSo=i(sa),wb=n(sa,"P",{});var e9e=s(wb);WSo=r(e9e,"The model is set in evaluation mode by default using "),Yfe=n(e9e,"CODE",{});var Git=s(Yfe);QSo=r(Git,"model.eval()"),Git.forEach(t),HSo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=n(e9e,"CODE",{});var Oit=s(Kfe);USo=r(Oit,"model.train()"),Oit.forEach(t),e9e.forEach(t),JSo=i(sa),T(Ab.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),wqe=i(f),Vi=n(f,"H2",{class:!0});var xje=s(Vi);yb=n(xje,"A",{id:!0,class:!0,href:!0});var Vit=s(yb);Zfe=n(Vit,"SPAN",{});var Xit=s(Zfe);T(_y.$$.fragment,Xit),Xit.forEach(t),Vit.forEach(t),YSo=i(xje),eme=n(xje,"SPAN",{});var zit=s(eme);KSo=r(zit,"AutoModelForMultipleChoice"),zit.forEach(t),xje.forEach(t),Aqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(uy.$$.fragment,Qs),ZSo=i(Qs),Xi=n(Qs,"P",{});var oZ=s(Xi);eRo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SG=n(oZ,"A",{href:!0});var Wit=s(SG);oRo=r(Wit,"from_pretrained()"),Wit.forEach(t),rRo=r(oZ," class method or the "),RG=n(oZ,"A",{href:!0});var Qit=s(RG);tRo=r(Qit,"from_config()"),Qit.forEach(t),aRo=r(oZ,` class
method.`),oZ.forEach(t),nRo=i(Qs),by=n(Qs,"P",{});var $je=s(by);sRo=r($je,"This class cannot be instantiated directly using "),ome=n($je,"CODE",{});var Hit=s(ome);lRo=r(Hit,"__init__()"),Hit.forEach(t),iRo=r($je," (throws an error)."),$je.forEach(t),dRo=i(Qs),dt=n(Qs,"DIV",{class:!0});var $0=s(dt);T(vy.$$.fragment,$0),cRo=i($0),rme=n($0,"P",{});var Uit=s(rme);fRo=r(Uit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uit.forEach(t),mRo=i($0),zi=n($0,"P",{});var rZ=s(zi);gRo=r(rZ,`Note:
Loading a model from its configuration file does `),tme=n(rZ,"STRONG",{});var Jit=s(tme);hRo=r(Jit,"not"),Jit.forEach(t),pRo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(rZ,"A",{href:!0});var Yit=s(PG);_Ro=r(Yit,"from_pretrained()"),Yit.forEach(t),uRo=r(rZ," to load the model weights."),rZ.forEach(t),bRo=i($0),T(Lb.$$.fragment,$0),$0.forEach(t),vRo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(Fy.$$.fragment,la),FRo=i(la),ame=n(la,"P",{});var Kit=s(ame);TRo=r(Kit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kit.forEach(t),MRo=i(la),Pa=n(la,"P",{});var k0=s(Pa);ERo=r(k0,"The model class to instantiate is selected based on the "),nme=n(k0,"CODE",{});var Zit=s(nme);CRo=r(Zit,"model_type"),Zit.forEach(t),wRo=r(k0,` property of the config object (either
passed as an argument or loaded from `),sme=n(k0,"CODE",{});var edt=s(sme);ARo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),yRo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(k0,"CODE",{});var odt=s(lme);LRo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),xRo=r(k0,":"),k0.forEach(t),$Ro=i(la),Y=n(la,"UL",{});var K=s(Y);xb=n(K,"LI",{});var o9e=s(xb);ime=n(o9e,"STRONG",{});var rdt=s(ime);kRo=r(rdt,"albert"),rdt.forEach(t),SRo=r(o9e," \u2014 "),BG=n(o9e,"A",{href:!0});var tdt=s(BG);RRo=r(tdt,"AlbertForMultipleChoice"),tdt.forEach(t),PRo=r(o9e," (ALBERT model)"),o9e.forEach(t),BRo=i(K),$b=n(K,"LI",{});var r9e=s($b);dme=n(r9e,"STRONG",{});var adt=s(dme);IRo=r(adt,"bert"),adt.forEach(t),qRo=r(r9e," \u2014 "),IG=n(r9e,"A",{href:!0});var ndt=s(IG);NRo=r(ndt,"BertForMultipleChoice"),ndt.forEach(t),jRo=r(r9e," (BERT model)"),r9e.forEach(t),DRo=i(K),kb=n(K,"LI",{});var t9e=s(kb);cme=n(t9e,"STRONG",{});var sdt=s(cme);GRo=r(sdt,"big_bird"),sdt.forEach(t),ORo=r(t9e," \u2014 "),qG=n(t9e,"A",{href:!0});var ldt=s(qG);VRo=r(ldt,"BigBirdForMultipleChoice"),ldt.forEach(t),XRo=r(t9e," (BigBird model)"),t9e.forEach(t),zRo=i(K),Sb=n(K,"LI",{});var a9e=s(Sb);fme=n(a9e,"STRONG",{});var idt=s(fme);WRo=r(idt,"camembert"),idt.forEach(t),QRo=r(a9e," \u2014 "),NG=n(a9e,"A",{href:!0});var ddt=s(NG);HRo=r(ddt,"CamembertForMultipleChoice"),ddt.forEach(t),URo=r(a9e," (CamemBERT model)"),a9e.forEach(t),JRo=i(K),Rb=n(K,"LI",{});var n9e=s(Rb);mme=n(n9e,"STRONG",{});var cdt=s(mme);YRo=r(cdt,"canine"),cdt.forEach(t),KRo=r(n9e," \u2014 "),jG=n(n9e,"A",{href:!0});var fdt=s(jG);ZRo=r(fdt,"CanineForMultipleChoice"),fdt.forEach(t),ePo=r(n9e," (Canine model)"),n9e.forEach(t),oPo=i(K),Pb=n(K,"LI",{});var s9e=s(Pb);gme=n(s9e,"STRONG",{});var mdt=s(gme);rPo=r(mdt,"convbert"),mdt.forEach(t),tPo=r(s9e," \u2014 "),DG=n(s9e,"A",{href:!0});var gdt=s(DG);aPo=r(gdt,"ConvBertForMultipleChoice"),gdt.forEach(t),nPo=r(s9e," (ConvBERT model)"),s9e.forEach(t),sPo=i(K),Bb=n(K,"LI",{});var l9e=s(Bb);hme=n(l9e,"STRONG",{});var hdt=s(hme);lPo=r(hdt,"data2vec-text"),hdt.forEach(t),iPo=r(l9e," \u2014 "),GG=n(l9e,"A",{href:!0});var pdt=s(GG);dPo=r(pdt,"Data2VecTextForMultipleChoice"),pdt.forEach(t),cPo=r(l9e," (Data2VecText model)"),l9e.forEach(t),fPo=i(K),Ib=n(K,"LI",{});var i9e=s(Ib);pme=n(i9e,"STRONG",{});var _dt=s(pme);mPo=r(_dt,"deberta-v2"),_dt.forEach(t),gPo=r(i9e," \u2014 "),OG=n(i9e,"A",{href:!0});var udt=s(OG);hPo=r(udt,"DebertaV2ForMultipleChoice"),udt.forEach(t),pPo=r(i9e," (DeBERTa-v2 model)"),i9e.forEach(t),_Po=i(K),qb=n(K,"LI",{});var d9e=s(qb);_me=n(d9e,"STRONG",{});var bdt=s(_me);uPo=r(bdt,"distilbert"),bdt.forEach(t),bPo=r(d9e," \u2014 "),VG=n(d9e,"A",{href:!0});var vdt=s(VG);vPo=r(vdt,"DistilBertForMultipleChoice"),vdt.forEach(t),FPo=r(d9e," (DistilBERT model)"),d9e.forEach(t),TPo=i(K),Nb=n(K,"LI",{});var c9e=s(Nb);ume=n(c9e,"STRONG",{});var Fdt=s(ume);MPo=r(Fdt,"electra"),Fdt.forEach(t),EPo=r(c9e," \u2014 "),XG=n(c9e,"A",{href:!0});var Tdt=s(XG);CPo=r(Tdt,"ElectraForMultipleChoice"),Tdt.forEach(t),wPo=r(c9e," (ELECTRA model)"),c9e.forEach(t),APo=i(K),jb=n(K,"LI",{});var f9e=s(jb);bme=n(f9e,"STRONG",{});var Mdt=s(bme);yPo=r(Mdt,"flaubert"),Mdt.forEach(t),LPo=r(f9e," \u2014 "),zG=n(f9e,"A",{href:!0});var Edt=s(zG);xPo=r(Edt,"FlaubertForMultipleChoice"),Edt.forEach(t),$Po=r(f9e," (FlauBERT model)"),f9e.forEach(t),kPo=i(K),Db=n(K,"LI",{});var m9e=s(Db);vme=n(m9e,"STRONG",{});var Cdt=s(vme);SPo=r(Cdt,"fnet"),Cdt.forEach(t),RPo=r(m9e," \u2014 "),WG=n(m9e,"A",{href:!0});var wdt=s(WG);PPo=r(wdt,"FNetForMultipleChoice"),wdt.forEach(t),BPo=r(m9e," (FNet model)"),m9e.forEach(t),IPo=i(K),Gb=n(K,"LI",{});var g9e=s(Gb);Fme=n(g9e,"STRONG",{});var Adt=s(Fme);qPo=r(Adt,"funnel"),Adt.forEach(t),NPo=r(g9e," \u2014 "),QG=n(g9e,"A",{href:!0});var ydt=s(QG);jPo=r(ydt,"FunnelForMultipleChoice"),ydt.forEach(t),DPo=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),GPo=i(K),Ob=n(K,"LI",{});var h9e=s(Ob);Tme=n(h9e,"STRONG",{});var Ldt=s(Tme);OPo=r(Ldt,"ibert"),Ldt.forEach(t),VPo=r(h9e," \u2014 "),HG=n(h9e,"A",{href:!0});var xdt=s(HG);XPo=r(xdt,"IBertForMultipleChoice"),xdt.forEach(t),zPo=r(h9e," (I-BERT model)"),h9e.forEach(t),WPo=i(K),Vb=n(K,"LI",{});var p9e=s(Vb);Mme=n(p9e,"STRONG",{});var $dt=s(Mme);QPo=r($dt,"longformer"),$dt.forEach(t),HPo=r(p9e," \u2014 "),UG=n(p9e,"A",{href:!0});var kdt=s(UG);UPo=r(kdt,"LongformerForMultipleChoice"),kdt.forEach(t),JPo=r(p9e," (Longformer model)"),p9e.forEach(t),YPo=i(K),Xb=n(K,"LI",{});var _9e=s(Xb);Eme=n(_9e,"STRONG",{});var Sdt=s(Eme);KPo=r(Sdt,"megatron-bert"),Sdt.forEach(t),ZPo=r(_9e," \u2014 "),JG=n(_9e,"A",{href:!0});var Rdt=s(JG);eBo=r(Rdt,"MegatronBertForMultipleChoice"),Rdt.forEach(t),oBo=r(_9e," (MegatronBert model)"),_9e.forEach(t),rBo=i(K),zb=n(K,"LI",{});var u9e=s(zb);Cme=n(u9e,"STRONG",{});var Pdt=s(Cme);tBo=r(Pdt,"mobilebert"),Pdt.forEach(t),aBo=r(u9e," \u2014 "),YG=n(u9e,"A",{href:!0});var Bdt=s(YG);nBo=r(Bdt,"MobileBertForMultipleChoice"),Bdt.forEach(t),sBo=r(u9e," (MobileBERT model)"),u9e.forEach(t),lBo=i(K),Wb=n(K,"LI",{});var b9e=s(Wb);wme=n(b9e,"STRONG",{});var Idt=s(wme);iBo=r(Idt,"mpnet"),Idt.forEach(t),dBo=r(b9e," \u2014 "),KG=n(b9e,"A",{href:!0});var qdt=s(KG);cBo=r(qdt,"MPNetForMultipleChoice"),qdt.forEach(t),fBo=r(b9e," (MPNet model)"),b9e.forEach(t),mBo=i(K),Qb=n(K,"LI",{});var v9e=s(Qb);Ame=n(v9e,"STRONG",{});var Ndt=s(Ame);gBo=r(Ndt,"nystromformer"),Ndt.forEach(t),hBo=r(v9e," \u2014 "),ZG=n(v9e,"A",{href:!0});var jdt=s(ZG);pBo=r(jdt,"NystromformerForMultipleChoice"),jdt.forEach(t),_Bo=r(v9e," (Nystromformer model)"),v9e.forEach(t),uBo=i(K),Hb=n(K,"LI",{});var F9e=s(Hb);yme=n(F9e,"STRONG",{});var Ddt=s(yme);bBo=r(Ddt,"qdqbert"),Ddt.forEach(t),vBo=r(F9e," \u2014 "),eO=n(F9e,"A",{href:!0});var Gdt=s(eO);FBo=r(Gdt,"QDQBertForMultipleChoice"),Gdt.forEach(t),TBo=r(F9e," (QDQBert model)"),F9e.forEach(t),MBo=i(K),Ub=n(K,"LI",{});var T9e=s(Ub);Lme=n(T9e,"STRONG",{});var Odt=s(Lme);EBo=r(Odt,"rembert"),Odt.forEach(t),CBo=r(T9e," \u2014 "),oO=n(T9e,"A",{href:!0});var Vdt=s(oO);wBo=r(Vdt,"RemBertForMultipleChoice"),Vdt.forEach(t),ABo=r(T9e," (RemBERT model)"),T9e.forEach(t),yBo=i(K),Jb=n(K,"LI",{});var M9e=s(Jb);xme=n(M9e,"STRONG",{});var Xdt=s(xme);LBo=r(Xdt,"roberta"),Xdt.forEach(t),xBo=r(M9e," \u2014 "),rO=n(M9e,"A",{href:!0});var zdt=s(rO);$Bo=r(zdt,"RobertaForMultipleChoice"),zdt.forEach(t),kBo=r(M9e," (RoBERTa model)"),M9e.forEach(t),SBo=i(K),Yb=n(K,"LI",{});var E9e=s(Yb);$me=n(E9e,"STRONG",{});var Wdt=s($me);RBo=r(Wdt,"roformer"),Wdt.forEach(t),PBo=r(E9e," \u2014 "),tO=n(E9e,"A",{href:!0});var Qdt=s(tO);BBo=r(Qdt,"RoFormerForMultipleChoice"),Qdt.forEach(t),IBo=r(E9e," (RoFormer model)"),E9e.forEach(t),qBo=i(K),Kb=n(K,"LI",{});var C9e=s(Kb);kme=n(C9e,"STRONG",{});var Hdt=s(kme);NBo=r(Hdt,"squeezebert"),Hdt.forEach(t),jBo=r(C9e," \u2014 "),aO=n(C9e,"A",{href:!0});var Udt=s(aO);DBo=r(Udt,"SqueezeBertForMultipleChoice"),Udt.forEach(t),GBo=r(C9e," (SqueezeBERT model)"),C9e.forEach(t),OBo=i(K),Zb=n(K,"LI",{});var w9e=s(Zb);Sme=n(w9e,"STRONG",{});var Jdt=s(Sme);VBo=r(Jdt,"xlm"),Jdt.forEach(t),XBo=r(w9e," \u2014 "),nO=n(w9e,"A",{href:!0});var Ydt=s(nO);zBo=r(Ydt,"XLMForMultipleChoice"),Ydt.forEach(t),WBo=r(w9e," (XLM model)"),w9e.forEach(t),QBo=i(K),e4=n(K,"LI",{});var A9e=s(e4);Rme=n(A9e,"STRONG",{});var Kdt=s(Rme);HBo=r(Kdt,"xlm-roberta"),Kdt.forEach(t),UBo=r(A9e," \u2014 "),sO=n(A9e,"A",{href:!0});var Zdt=s(sO);JBo=r(Zdt,"XLMRobertaForMultipleChoice"),Zdt.forEach(t),YBo=r(A9e," (XLM-RoBERTa model)"),A9e.forEach(t),KBo=i(K),o4=n(K,"LI",{});var y9e=s(o4);Pme=n(y9e,"STRONG",{});var ect=s(Pme);ZBo=r(ect,"xlm-roberta-xl"),ect.forEach(t),eIo=r(y9e," \u2014 "),lO=n(y9e,"A",{href:!0});var oct=s(lO);oIo=r(oct,"XLMRobertaXLForMultipleChoice"),oct.forEach(t),rIo=r(y9e," (XLM-RoBERTa-XL model)"),y9e.forEach(t),tIo=i(K),r4=n(K,"LI",{});var L9e=s(r4);Bme=n(L9e,"STRONG",{});var rct=s(Bme);aIo=r(rct,"xlnet"),rct.forEach(t),nIo=r(L9e," \u2014 "),iO=n(L9e,"A",{href:!0});var tct=s(iO);sIo=r(tct,"XLNetForMultipleChoice"),tct.forEach(t),lIo=r(L9e," (XLNet model)"),L9e.forEach(t),iIo=i(K),t4=n(K,"LI",{});var x9e=s(t4);Ime=n(x9e,"STRONG",{});var act=s(Ime);dIo=r(act,"yoso"),act.forEach(t),cIo=r(x9e," \u2014 "),dO=n(x9e,"A",{href:!0});var nct=s(dO);fIo=r(nct,"YosoForMultipleChoice"),nct.forEach(t),mIo=r(x9e," (YOSO model)"),x9e.forEach(t),K.forEach(t),gIo=i(la),a4=n(la,"P",{});var $9e=s(a4);hIo=r($9e,"The model is set in evaluation mode by default using "),qme=n($9e,"CODE",{});var sct=s(qme);pIo=r(sct,"model.eval()"),sct.forEach(t),_Io=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=n($9e,"CODE",{});var lct=s(Nme);uIo=r(lct,"model.train()"),lct.forEach(t),$9e.forEach(t),bIo=i(la),T(n4.$$.fragment,la),la.forEach(t),Qs.forEach(t),yqe=i(f),Wi=n(f,"H2",{class:!0});var kje=s(Wi);s4=n(kje,"A",{id:!0,class:!0,href:!0});var ict=s(s4);jme=n(ict,"SPAN",{});var dct=s(jme);T(Ty.$$.fragment,dct),dct.forEach(t),ict.forEach(t),vIo=i(kje),Dme=n(kje,"SPAN",{});var cct=s(Dme);FIo=r(cct,"AutoModelForNextSentencePrediction"),cct.forEach(t),kje.forEach(t),Lqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(My.$$.fragment,Hs),TIo=i(Hs),Qi=n(Hs,"P",{});var tZ=s(Qi);MIo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cO=n(tZ,"A",{href:!0});var fct=s(cO);EIo=r(fct,"from_pretrained()"),fct.forEach(t),CIo=r(tZ," class method or the "),fO=n(tZ,"A",{href:!0});var mct=s(fO);wIo=r(mct,"from_config()"),mct.forEach(t),AIo=r(tZ,` class
method.`),tZ.forEach(t),yIo=i(Hs),Ey=n(Hs,"P",{});var Sje=s(Ey);LIo=r(Sje,"This class cannot be instantiated directly using "),Gme=n(Sje,"CODE",{});var gct=s(Gme);xIo=r(gct,"__init__()"),gct.forEach(t),$Io=r(Sje," (throws an error)."),Sje.forEach(t),kIo=i(Hs),ct=n(Hs,"DIV",{class:!0});var S0=s(ct);T(Cy.$$.fragment,S0),SIo=i(S0),Ome=n(S0,"P",{});var hct=s(Ome);RIo=r(hct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hct.forEach(t),PIo=i(S0),Hi=n(S0,"P",{});var aZ=s(Hi);BIo=r(aZ,`Note:
Loading a model from its configuration file does `),Vme=n(aZ,"STRONG",{});var pct=s(Vme);IIo=r(pct,"not"),pct.forEach(t),qIo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(aZ,"A",{href:!0});var _ct=s(mO);NIo=r(_ct,"from_pretrained()"),_ct.forEach(t),jIo=r(aZ," to load the model weights."),aZ.forEach(t),DIo=i(S0),T(l4.$$.fragment,S0),S0.forEach(t),GIo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(wy.$$.fragment,ia),OIo=i(ia),Xme=n(ia,"P",{});var uct=s(Xme);VIo=r(uct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uct.forEach(t),XIo=i(ia),Ba=n(ia,"P",{});var R0=s(Ba);zIo=r(R0,"The model class to instantiate is selected based on the "),zme=n(R0,"CODE",{});var bct=s(zme);WIo=r(bct,"model_type"),bct.forEach(t),QIo=r(R0,` property of the config object (either
passed as an argument or loaded from `),Wme=n(R0,"CODE",{});var vct=s(Wme);HIo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),UIo=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=n(R0,"CODE",{});var Fct=s(Qme);JIo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),YIo=r(R0,":"),R0.forEach(t),KIo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);i4=n(Us,"LI",{});var k9e=s(i4);Hme=n(k9e,"STRONG",{});var Tct=s(Hme);ZIo=r(Tct,"bert"),Tct.forEach(t),eqo=r(k9e," \u2014 "),gO=n(k9e,"A",{href:!0});var Mct=s(gO);oqo=r(Mct,"BertForNextSentencePrediction"),Mct.forEach(t),rqo=r(k9e," (BERT model)"),k9e.forEach(t),tqo=i(Us),d4=n(Us,"LI",{});var S9e=s(d4);Ume=n(S9e,"STRONG",{});var Ect=s(Ume);aqo=r(Ect,"fnet"),Ect.forEach(t),nqo=r(S9e," \u2014 "),hO=n(S9e,"A",{href:!0});var Cct=s(hO);sqo=r(Cct,"FNetForNextSentencePrediction"),Cct.forEach(t),lqo=r(S9e," (FNet model)"),S9e.forEach(t),iqo=i(Us),c4=n(Us,"LI",{});var R9e=s(c4);Jme=n(R9e,"STRONG",{});var wct=s(Jme);dqo=r(wct,"megatron-bert"),wct.forEach(t),cqo=r(R9e," \u2014 "),pO=n(R9e,"A",{href:!0});var Act=s(pO);fqo=r(Act,"MegatronBertForNextSentencePrediction"),Act.forEach(t),mqo=r(R9e," (MegatronBert model)"),R9e.forEach(t),gqo=i(Us),f4=n(Us,"LI",{});var P9e=s(f4);Yme=n(P9e,"STRONG",{});var yct=s(Yme);hqo=r(yct,"mobilebert"),yct.forEach(t),pqo=r(P9e," \u2014 "),_O=n(P9e,"A",{href:!0});var Lct=s(_O);_qo=r(Lct,"MobileBertForNextSentencePrediction"),Lct.forEach(t),uqo=r(P9e," (MobileBERT model)"),P9e.forEach(t),bqo=i(Us),m4=n(Us,"LI",{});var B9e=s(m4);Kme=n(B9e,"STRONG",{});var xct=s(Kme);vqo=r(xct,"qdqbert"),xct.forEach(t),Fqo=r(B9e," \u2014 "),uO=n(B9e,"A",{href:!0});var $ct=s(uO);Tqo=r($ct,"QDQBertForNextSentencePrediction"),$ct.forEach(t),Mqo=r(B9e," (QDQBert model)"),B9e.forEach(t),Us.forEach(t),Eqo=i(ia),g4=n(ia,"P",{});var I9e=s(g4);Cqo=r(I9e,"The model is set in evaluation mode by default using "),Zme=n(I9e,"CODE",{});var kct=s(Zme);wqo=r(kct,"model.eval()"),kct.forEach(t),Aqo=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(I9e,"CODE",{});var Sct=s(ege);yqo=r(Sct,"model.train()"),Sct.forEach(t),I9e.forEach(t),Lqo=i(ia),T(h4.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),xqe=i(f),Ui=n(f,"H2",{class:!0});var Rje=s(Ui);p4=n(Rje,"A",{id:!0,class:!0,href:!0});var Rct=s(p4);oge=n(Rct,"SPAN",{});var Pct=s(oge);T(Ay.$$.fragment,Pct),Pct.forEach(t),Rct.forEach(t),xqo=i(Rje),rge=n(Rje,"SPAN",{});var Bct=s(rge);$qo=r(Bct,"AutoModelForTokenClassification"),Bct.forEach(t),Rje.forEach(t),$qe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(yy.$$.fragment,Js),kqo=i(Js),Ji=n(Js,"P",{});var nZ=s(Ji);Sqo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bO=n(nZ,"A",{href:!0});var Ict=s(bO);Rqo=r(Ict,"from_pretrained()"),Ict.forEach(t),Pqo=r(nZ," class method or the "),vO=n(nZ,"A",{href:!0});var qct=s(vO);Bqo=r(qct,"from_config()"),qct.forEach(t),Iqo=r(nZ,` class
method.`),nZ.forEach(t),qqo=i(Js),Ly=n(Js,"P",{});var Pje=s(Ly);Nqo=r(Pje,"This class cannot be instantiated directly using "),tge=n(Pje,"CODE",{});var Nct=s(tge);jqo=r(Nct,"__init__()"),Nct.forEach(t),Dqo=r(Pje," (throws an error)."),Pje.forEach(t),Gqo=i(Js),ft=n(Js,"DIV",{class:!0});var P0=s(ft);T(xy.$$.fragment,P0),Oqo=i(P0),age=n(P0,"P",{});var jct=s(age);Vqo=r(jct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jct.forEach(t),Xqo=i(P0),Yi=n(P0,"P",{});var sZ=s(Yi);zqo=r(sZ,`Note:
Loading a model from its configuration file does `),nge=n(sZ,"STRONG",{});var Dct=s(nge);Wqo=r(Dct,"not"),Dct.forEach(t),Qqo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(sZ,"A",{href:!0});var Gct=s(FO);Hqo=r(Gct,"from_pretrained()"),Gct.forEach(t),Uqo=r(sZ," to load the model weights."),sZ.forEach(t),Jqo=i(P0),T(_4.$$.fragment,P0),P0.forEach(t),Yqo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T($y.$$.fragment,da),Kqo=i(da),sge=n(da,"P",{});var Oct=s(sge);Zqo=r(Oct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oct.forEach(t),eNo=i(da),Ia=n(da,"P",{});var B0=s(Ia);oNo=r(B0,"The model class to instantiate is selected based on the "),lge=n(B0,"CODE",{});var Vct=s(lge);rNo=r(Vct,"model_type"),Vct.forEach(t),tNo=r(B0,` property of the config object (either
passed as an argument or loaded from `),ige=n(B0,"CODE",{});var Xct=s(ige);aNo=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),nNo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(B0,"CODE",{});var zct=s(dge);sNo=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),lNo=r(B0,":"),B0.forEach(t),iNo=i(da),U=n(da,"UL",{});var J=s(U);u4=n(J,"LI",{});var q9e=s(u4);cge=n(q9e,"STRONG",{});var Wct=s(cge);dNo=r(Wct,"albert"),Wct.forEach(t),cNo=r(q9e," \u2014 "),TO=n(q9e,"A",{href:!0});var Qct=s(TO);fNo=r(Qct,"AlbertForTokenClassification"),Qct.forEach(t),mNo=r(q9e," (ALBERT model)"),q9e.forEach(t),gNo=i(J),b4=n(J,"LI",{});var N9e=s(b4);fge=n(N9e,"STRONG",{});var Hct=s(fge);hNo=r(Hct,"bert"),Hct.forEach(t),pNo=r(N9e," \u2014 "),MO=n(N9e,"A",{href:!0});var Uct=s(MO);_No=r(Uct,"BertForTokenClassification"),Uct.forEach(t),uNo=r(N9e," (BERT model)"),N9e.forEach(t),bNo=i(J),v4=n(J,"LI",{});var j9e=s(v4);mge=n(j9e,"STRONG",{});var Jct=s(mge);vNo=r(Jct,"big_bird"),Jct.forEach(t),FNo=r(j9e," \u2014 "),EO=n(j9e,"A",{href:!0});var Yct=s(EO);TNo=r(Yct,"BigBirdForTokenClassification"),Yct.forEach(t),MNo=r(j9e," (BigBird model)"),j9e.forEach(t),ENo=i(J),F4=n(J,"LI",{});var D9e=s(F4);gge=n(D9e,"STRONG",{});var Kct=s(gge);CNo=r(Kct,"camembert"),Kct.forEach(t),wNo=r(D9e," \u2014 "),CO=n(D9e,"A",{href:!0});var Zct=s(CO);ANo=r(Zct,"CamembertForTokenClassification"),Zct.forEach(t),yNo=r(D9e," (CamemBERT model)"),D9e.forEach(t),LNo=i(J),T4=n(J,"LI",{});var G9e=s(T4);hge=n(G9e,"STRONG",{});var eft=s(hge);xNo=r(eft,"canine"),eft.forEach(t),$No=r(G9e," \u2014 "),wO=n(G9e,"A",{href:!0});var oft=s(wO);kNo=r(oft,"CanineForTokenClassification"),oft.forEach(t),SNo=r(G9e," (Canine model)"),G9e.forEach(t),RNo=i(J),M4=n(J,"LI",{});var O9e=s(M4);pge=n(O9e,"STRONG",{});var rft=s(pge);PNo=r(rft,"convbert"),rft.forEach(t),BNo=r(O9e," \u2014 "),AO=n(O9e,"A",{href:!0});var tft=s(AO);INo=r(tft,"ConvBertForTokenClassification"),tft.forEach(t),qNo=r(O9e," (ConvBERT model)"),O9e.forEach(t),NNo=i(J),E4=n(J,"LI",{});var V9e=s(E4);_ge=n(V9e,"STRONG",{});var aft=s(_ge);jNo=r(aft,"data2vec-text"),aft.forEach(t),DNo=r(V9e," \u2014 "),yO=n(V9e,"A",{href:!0});var nft=s(yO);GNo=r(nft,"Data2VecTextForTokenClassification"),nft.forEach(t),ONo=r(V9e," (Data2VecText model)"),V9e.forEach(t),VNo=i(J),C4=n(J,"LI",{});var X9e=s(C4);uge=n(X9e,"STRONG",{});var sft=s(uge);XNo=r(sft,"deberta"),sft.forEach(t),zNo=r(X9e," \u2014 "),LO=n(X9e,"A",{href:!0});var lft=s(LO);WNo=r(lft,"DebertaForTokenClassification"),lft.forEach(t),QNo=r(X9e," (DeBERTa model)"),X9e.forEach(t),HNo=i(J),w4=n(J,"LI",{});var z9e=s(w4);bge=n(z9e,"STRONG",{});var ift=s(bge);UNo=r(ift,"deberta-v2"),ift.forEach(t),JNo=r(z9e," \u2014 "),xO=n(z9e,"A",{href:!0});var dft=s(xO);YNo=r(dft,"DebertaV2ForTokenClassification"),dft.forEach(t),KNo=r(z9e," (DeBERTa-v2 model)"),z9e.forEach(t),ZNo=i(J),A4=n(J,"LI",{});var W9e=s(A4);vge=n(W9e,"STRONG",{});var cft=s(vge);ejo=r(cft,"distilbert"),cft.forEach(t),ojo=r(W9e," \u2014 "),$O=n(W9e,"A",{href:!0});var fft=s($O);rjo=r(fft,"DistilBertForTokenClassification"),fft.forEach(t),tjo=r(W9e," (DistilBERT model)"),W9e.forEach(t),ajo=i(J),y4=n(J,"LI",{});var Q9e=s(y4);Fge=n(Q9e,"STRONG",{});var mft=s(Fge);njo=r(mft,"electra"),mft.forEach(t),sjo=r(Q9e," \u2014 "),kO=n(Q9e,"A",{href:!0});var gft=s(kO);ljo=r(gft,"ElectraForTokenClassification"),gft.forEach(t),ijo=r(Q9e," (ELECTRA model)"),Q9e.forEach(t),djo=i(J),L4=n(J,"LI",{});var H9e=s(L4);Tge=n(H9e,"STRONG",{});var hft=s(Tge);cjo=r(hft,"flaubert"),hft.forEach(t),fjo=r(H9e," \u2014 "),SO=n(H9e,"A",{href:!0});var pft=s(SO);mjo=r(pft,"FlaubertForTokenClassification"),pft.forEach(t),gjo=r(H9e," (FlauBERT model)"),H9e.forEach(t),hjo=i(J),x4=n(J,"LI",{});var U9e=s(x4);Mge=n(U9e,"STRONG",{});var _ft=s(Mge);pjo=r(_ft,"fnet"),_ft.forEach(t),_jo=r(U9e," \u2014 "),RO=n(U9e,"A",{href:!0});var uft=s(RO);ujo=r(uft,"FNetForTokenClassification"),uft.forEach(t),bjo=r(U9e," (FNet model)"),U9e.forEach(t),vjo=i(J),$4=n(J,"LI",{});var J9e=s($4);Ege=n(J9e,"STRONG",{});var bft=s(Ege);Fjo=r(bft,"funnel"),bft.forEach(t),Tjo=r(J9e," \u2014 "),PO=n(J9e,"A",{href:!0});var vft=s(PO);Mjo=r(vft,"FunnelForTokenClassification"),vft.forEach(t),Ejo=r(J9e," (Funnel Transformer model)"),J9e.forEach(t),Cjo=i(J),k4=n(J,"LI",{});var Y9e=s(k4);Cge=n(Y9e,"STRONG",{});var Fft=s(Cge);wjo=r(Fft,"gpt2"),Fft.forEach(t),Ajo=r(Y9e," \u2014 "),BO=n(Y9e,"A",{href:!0});var Tft=s(BO);yjo=r(Tft,"GPT2ForTokenClassification"),Tft.forEach(t),Ljo=r(Y9e," (OpenAI GPT-2 model)"),Y9e.forEach(t),xjo=i(J),S4=n(J,"LI",{});var K9e=s(S4);wge=n(K9e,"STRONG",{});var Mft=s(wge);$jo=r(Mft,"ibert"),Mft.forEach(t),kjo=r(K9e," \u2014 "),IO=n(K9e,"A",{href:!0});var Eft=s(IO);Sjo=r(Eft,"IBertForTokenClassification"),Eft.forEach(t),Rjo=r(K9e," (I-BERT model)"),K9e.forEach(t),Pjo=i(J),R4=n(J,"LI",{});var Z9e=s(R4);Age=n(Z9e,"STRONG",{});var Cft=s(Age);Bjo=r(Cft,"layoutlm"),Cft.forEach(t),Ijo=r(Z9e," \u2014 "),qO=n(Z9e,"A",{href:!0});var wft=s(qO);qjo=r(wft,"LayoutLMForTokenClassification"),wft.forEach(t),Njo=r(Z9e," (LayoutLM model)"),Z9e.forEach(t),jjo=i(J),P4=n(J,"LI",{});var exe=s(P4);yge=n(exe,"STRONG",{});var Aft=s(yge);Djo=r(Aft,"layoutlmv2"),Aft.forEach(t),Gjo=r(exe," \u2014 "),NO=n(exe,"A",{href:!0});var yft=s(NO);Ojo=r(yft,"LayoutLMv2ForTokenClassification"),yft.forEach(t),Vjo=r(exe," (LayoutLMv2 model)"),exe.forEach(t),Xjo=i(J),B4=n(J,"LI",{});var oxe=s(B4);Lge=n(oxe,"STRONG",{});var Lft=s(Lge);zjo=r(Lft,"longformer"),Lft.forEach(t),Wjo=r(oxe," \u2014 "),jO=n(oxe,"A",{href:!0});var xft=s(jO);Qjo=r(xft,"LongformerForTokenClassification"),xft.forEach(t),Hjo=r(oxe," (Longformer model)"),oxe.forEach(t),Ujo=i(J),I4=n(J,"LI",{});var rxe=s(I4);xge=n(rxe,"STRONG",{});var $ft=s(xge);Jjo=r($ft,"megatron-bert"),$ft.forEach(t),Yjo=r(rxe," \u2014 "),DO=n(rxe,"A",{href:!0});var kft=s(DO);Kjo=r(kft,"MegatronBertForTokenClassification"),kft.forEach(t),Zjo=r(rxe," (MegatronBert model)"),rxe.forEach(t),eDo=i(J),q4=n(J,"LI",{});var txe=s(q4);$ge=n(txe,"STRONG",{});var Sft=s($ge);oDo=r(Sft,"mobilebert"),Sft.forEach(t),rDo=r(txe," \u2014 "),GO=n(txe,"A",{href:!0});var Rft=s(GO);tDo=r(Rft,"MobileBertForTokenClassification"),Rft.forEach(t),aDo=r(txe," (MobileBERT model)"),txe.forEach(t),nDo=i(J),N4=n(J,"LI",{});var axe=s(N4);kge=n(axe,"STRONG",{});var Pft=s(kge);sDo=r(Pft,"mpnet"),Pft.forEach(t),lDo=r(axe," \u2014 "),OO=n(axe,"A",{href:!0});var Bft=s(OO);iDo=r(Bft,"MPNetForTokenClassification"),Bft.forEach(t),dDo=r(axe," (MPNet model)"),axe.forEach(t),cDo=i(J),j4=n(J,"LI",{});var nxe=s(j4);Sge=n(nxe,"STRONG",{});var Ift=s(Sge);fDo=r(Ift,"nystromformer"),Ift.forEach(t),mDo=r(nxe," \u2014 "),VO=n(nxe,"A",{href:!0});var qft=s(VO);gDo=r(qft,"NystromformerForTokenClassification"),qft.forEach(t),hDo=r(nxe," (Nystromformer model)"),nxe.forEach(t),pDo=i(J),D4=n(J,"LI",{});var sxe=s(D4);Rge=n(sxe,"STRONG",{});var Nft=s(Rge);_Do=r(Nft,"qdqbert"),Nft.forEach(t),uDo=r(sxe," \u2014 "),XO=n(sxe,"A",{href:!0});var jft=s(XO);bDo=r(jft,"QDQBertForTokenClassification"),jft.forEach(t),vDo=r(sxe," (QDQBert model)"),sxe.forEach(t),FDo=i(J),G4=n(J,"LI",{});var lxe=s(G4);Pge=n(lxe,"STRONG",{});var Dft=s(Pge);TDo=r(Dft,"rembert"),Dft.forEach(t),MDo=r(lxe," \u2014 "),zO=n(lxe,"A",{href:!0});var Gft=s(zO);EDo=r(Gft,"RemBertForTokenClassification"),Gft.forEach(t),CDo=r(lxe," (RemBERT model)"),lxe.forEach(t),wDo=i(J),O4=n(J,"LI",{});var ixe=s(O4);Bge=n(ixe,"STRONG",{});var Oft=s(Bge);ADo=r(Oft,"roberta"),Oft.forEach(t),yDo=r(ixe," \u2014 "),WO=n(ixe,"A",{href:!0});var Vft=s(WO);LDo=r(Vft,"RobertaForTokenClassification"),Vft.forEach(t),xDo=r(ixe," (RoBERTa model)"),ixe.forEach(t),$Do=i(J),V4=n(J,"LI",{});var dxe=s(V4);Ige=n(dxe,"STRONG",{});var Xft=s(Ige);kDo=r(Xft,"roformer"),Xft.forEach(t),SDo=r(dxe," \u2014 "),QO=n(dxe,"A",{href:!0});var zft=s(QO);RDo=r(zft,"RoFormerForTokenClassification"),zft.forEach(t),PDo=r(dxe," (RoFormer model)"),dxe.forEach(t),BDo=i(J),X4=n(J,"LI",{});var cxe=s(X4);qge=n(cxe,"STRONG",{});var Wft=s(qge);IDo=r(Wft,"squeezebert"),Wft.forEach(t),qDo=r(cxe," \u2014 "),HO=n(cxe,"A",{href:!0});var Qft=s(HO);NDo=r(Qft,"SqueezeBertForTokenClassification"),Qft.forEach(t),jDo=r(cxe," (SqueezeBERT model)"),cxe.forEach(t),DDo=i(J),z4=n(J,"LI",{});var fxe=s(z4);Nge=n(fxe,"STRONG",{});var Hft=s(Nge);GDo=r(Hft,"xlm"),Hft.forEach(t),ODo=r(fxe," \u2014 "),UO=n(fxe,"A",{href:!0});var Uft=s(UO);VDo=r(Uft,"XLMForTokenClassification"),Uft.forEach(t),XDo=r(fxe," (XLM model)"),fxe.forEach(t),zDo=i(J),W4=n(J,"LI",{});var mxe=s(W4);jge=n(mxe,"STRONG",{});var Jft=s(jge);WDo=r(Jft,"xlm-roberta"),Jft.forEach(t),QDo=r(mxe," \u2014 "),JO=n(mxe,"A",{href:!0});var Yft=s(JO);HDo=r(Yft,"XLMRobertaForTokenClassification"),Yft.forEach(t),UDo=r(mxe," (XLM-RoBERTa model)"),mxe.forEach(t),JDo=i(J),Q4=n(J,"LI",{});var gxe=s(Q4);Dge=n(gxe,"STRONG",{});var Kft=s(Dge);YDo=r(Kft,"xlm-roberta-xl"),Kft.forEach(t),KDo=r(gxe," \u2014 "),YO=n(gxe,"A",{href:!0});var Zft=s(YO);ZDo=r(Zft,"XLMRobertaXLForTokenClassification"),Zft.forEach(t),eGo=r(gxe," (XLM-RoBERTa-XL model)"),gxe.forEach(t),oGo=i(J),H4=n(J,"LI",{});var hxe=s(H4);Gge=n(hxe,"STRONG",{});var emt=s(Gge);rGo=r(emt,"xlnet"),emt.forEach(t),tGo=r(hxe," \u2014 "),KO=n(hxe,"A",{href:!0});var omt=s(KO);aGo=r(omt,"XLNetForTokenClassification"),omt.forEach(t),nGo=r(hxe," (XLNet model)"),hxe.forEach(t),sGo=i(J),U4=n(J,"LI",{});var pxe=s(U4);Oge=n(pxe,"STRONG",{});var rmt=s(Oge);lGo=r(rmt,"yoso"),rmt.forEach(t),iGo=r(pxe," \u2014 "),ZO=n(pxe,"A",{href:!0});var tmt=s(ZO);dGo=r(tmt,"YosoForTokenClassification"),tmt.forEach(t),cGo=r(pxe," (YOSO model)"),pxe.forEach(t),J.forEach(t),fGo=i(da),J4=n(da,"P",{});var _xe=s(J4);mGo=r(_xe,"The model is set in evaluation mode by default using "),Vge=n(_xe,"CODE",{});var amt=s(Vge);gGo=r(amt,"model.eval()"),amt.forEach(t),hGo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(_xe,"CODE",{});var nmt=s(Xge);pGo=r(nmt,"model.train()"),nmt.forEach(t),_xe.forEach(t),_Go=i(da),T(Y4.$$.fragment,da),da.forEach(t),Js.forEach(t),kqe=i(f),Ki=n(f,"H2",{class:!0});var Bje=s(Ki);K4=n(Bje,"A",{id:!0,class:!0,href:!0});var smt=s(K4);zge=n(smt,"SPAN",{});var lmt=s(zge);T(ky.$$.fragment,lmt),lmt.forEach(t),smt.forEach(t),uGo=i(Bje),Wge=n(Bje,"SPAN",{});var imt=s(Wge);bGo=r(imt,"AutoModelForQuestionAnswering"),imt.forEach(t),Bje.forEach(t),Sqe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(Sy.$$.fragment,Ys),vGo=i(Ys),Zi=n(Ys,"P",{});var lZ=s(Zi);FGo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eV=n(lZ,"A",{href:!0});var dmt=s(eV);TGo=r(dmt,"from_pretrained()"),dmt.forEach(t),MGo=r(lZ," class method or the "),oV=n(lZ,"A",{href:!0});var cmt=s(oV);EGo=r(cmt,"from_config()"),cmt.forEach(t),CGo=r(lZ,` class
method.`),lZ.forEach(t),wGo=i(Ys),Ry=n(Ys,"P",{});var Ije=s(Ry);AGo=r(Ije,"This class cannot be instantiated directly using "),Qge=n(Ije,"CODE",{});var fmt=s(Qge);yGo=r(fmt,"__init__()"),fmt.forEach(t),LGo=r(Ije," (throws an error)."),Ije.forEach(t),xGo=i(Ys),mt=n(Ys,"DIV",{class:!0});var I0=s(mt);T(Py.$$.fragment,I0),$Go=i(I0),Hge=n(I0,"P",{});var mmt=s(Hge);kGo=r(mmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mmt.forEach(t),SGo=i(I0),ed=n(I0,"P",{});var iZ=s(ed);RGo=r(iZ,`Note:
Loading a model from its configuration file does `),Uge=n(iZ,"STRONG",{});var gmt=s(Uge);PGo=r(gmt,"not"),gmt.forEach(t),BGo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(iZ,"A",{href:!0});var hmt=s(rV);IGo=r(hmt,"from_pretrained()"),hmt.forEach(t),qGo=r(iZ," to load the model weights."),iZ.forEach(t),NGo=i(I0),T(Z4.$$.fragment,I0),I0.forEach(t),jGo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(By.$$.fragment,ca),DGo=i(ca),Jge=n(ca,"P",{});var pmt=s(Jge);GGo=r(pmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pmt.forEach(t),OGo=i(ca),qa=n(ca,"P",{});var q0=s(qa);VGo=r(q0,"The model class to instantiate is selected based on the "),Yge=n(q0,"CODE",{});var _mt=s(Yge);XGo=r(_mt,"model_type"),_mt.forEach(t),zGo=r(q0,` property of the config object (either
passed as an argument or loaded from `),Kge=n(q0,"CODE",{});var umt=s(Kge);WGo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),QGo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(q0,"CODE",{});var bmt=s(Zge);HGo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),UGo=r(q0,":"),q0.forEach(t),JGo=i(ca),V=n(ca,"UL",{});var X=s(V);e5=n(X,"LI",{});var uxe=s(e5);ehe=n(uxe,"STRONG",{});var vmt=s(ehe);YGo=r(vmt,"albert"),vmt.forEach(t),KGo=r(uxe," \u2014 "),tV=n(uxe,"A",{href:!0});var Fmt=s(tV);ZGo=r(Fmt,"AlbertForQuestionAnswering"),Fmt.forEach(t),eOo=r(uxe," (ALBERT model)"),uxe.forEach(t),oOo=i(X),o5=n(X,"LI",{});var bxe=s(o5);ohe=n(bxe,"STRONG",{});var Tmt=s(ohe);rOo=r(Tmt,"bart"),Tmt.forEach(t),tOo=r(bxe," \u2014 "),aV=n(bxe,"A",{href:!0});var Mmt=s(aV);aOo=r(Mmt,"BartForQuestionAnswering"),Mmt.forEach(t),nOo=r(bxe," (BART model)"),bxe.forEach(t),sOo=i(X),r5=n(X,"LI",{});var vxe=s(r5);rhe=n(vxe,"STRONG",{});var Emt=s(rhe);lOo=r(Emt,"bert"),Emt.forEach(t),iOo=r(vxe," \u2014 "),nV=n(vxe,"A",{href:!0});var Cmt=s(nV);dOo=r(Cmt,"BertForQuestionAnswering"),Cmt.forEach(t),cOo=r(vxe," (BERT model)"),vxe.forEach(t),fOo=i(X),t5=n(X,"LI",{});var Fxe=s(t5);the=n(Fxe,"STRONG",{});var wmt=s(the);mOo=r(wmt,"big_bird"),wmt.forEach(t),gOo=r(Fxe," \u2014 "),sV=n(Fxe,"A",{href:!0});var Amt=s(sV);hOo=r(Amt,"BigBirdForQuestionAnswering"),Amt.forEach(t),pOo=r(Fxe," (BigBird model)"),Fxe.forEach(t),_Oo=i(X),a5=n(X,"LI",{});var Txe=s(a5);ahe=n(Txe,"STRONG",{});var ymt=s(ahe);uOo=r(ymt,"bigbird_pegasus"),ymt.forEach(t),bOo=r(Txe," \u2014 "),lV=n(Txe,"A",{href:!0});var Lmt=s(lV);vOo=r(Lmt,"BigBirdPegasusForQuestionAnswering"),Lmt.forEach(t),FOo=r(Txe," (BigBirdPegasus model)"),Txe.forEach(t),TOo=i(X),n5=n(X,"LI",{});var Mxe=s(n5);nhe=n(Mxe,"STRONG",{});var xmt=s(nhe);MOo=r(xmt,"camembert"),xmt.forEach(t),EOo=r(Mxe," \u2014 "),iV=n(Mxe,"A",{href:!0});var $mt=s(iV);COo=r($mt,"CamembertForQuestionAnswering"),$mt.forEach(t),wOo=r(Mxe," (CamemBERT model)"),Mxe.forEach(t),AOo=i(X),s5=n(X,"LI",{});var Exe=s(s5);she=n(Exe,"STRONG",{});var kmt=s(she);yOo=r(kmt,"canine"),kmt.forEach(t),LOo=r(Exe," \u2014 "),dV=n(Exe,"A",{href:!0});var Smt=s(dV);xOo=r(Smt,"CanineForQuestionAnswering"),Smt.forEach(t),$Oo=r(Exe," (Canine model)"),Exe.forEach(t),kOo=i(X),l5=n(X,"LI",{});var Cxe=s(l5);lhe=n(Cxe,"STRONG",{});var Rmt=s(lhe);SOo=r(Rmt,"convbert"),Rmt.forEach(t),ROo=r(Cxe," \u2014 "),cV=n(Cxe,"A",{href:!0});var Pmt=s(cV);POo=r(Pmt,"ConvBertForQuestionAnswering"),Pmt.forEach(t),BOo=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),IOo=i(X),i5=n(X,"LI",{});var wxe=s(i5);ihe=n(wxe,"STRONG",{});var Bmt=s(ihe);qOo=r(Bmt,"data2vec-text"),Bmt.forEach(t),NOo=r(wxe," \u2014 "),fV=n(wxe,"A",{href:!0});var Imt=s(fV);jOo=r(Imt,"Data2VecTextForQuestionAnswering"),Imt.forEach(t),DOo=r(wxe," (Data2VecText model)"),wxe.forEach(t),GOo=i(X),d5=n(X,"LI",{});var Axe=s(d5);dhe=n(Axe,"STRONG",{});var qmt=s(dhe);OOo=r(qmt,"deberta"),qmt.forEach(t),VOo=r(Axe," \u2014 "),mV=n(Axe,"A",{href:!0});var Nmt=s(mV);XOo=r(Nmt,"DebertaForQuestionAnswering"),Nmt.forEach(t),zOo=r(Axe," (DeBERTa model)"),Axe.forEach(t),WOo=i(X),c5=n(X,"LI",{});var yxe=s(c5);che=n(yxe,"STRONG",{});var jmt=s(che);QOo=r(jmt,"deberta-v2"),jmt.forEach(t),HOo=r(yxe," \u2014 "),gV=n(yxe,"A",{href:!0});var Dmt=s(gV);UOo=r(Dmt,"DebertaV2ForQuestionAnswering"),Dmt.forEach(t),JOo=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),YOo=i(X),f5=n(X,"LI",{});var Lxe=s(f5);fhe=n(Lxe,"STRONG",{});var Gmt=s(fhe);KOo=r(Gmt,"distilbert"),Gmt.forEach(t),ZOo=r(Lxe," \u2014 "),hV=n(Lxe,"A",{href:!0});var Omt=s(hV);eVo=r(Omt,"DistilBertForQuestionAnswering"),Omt.forEach(t),oVo=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),rVo=i(X),m5=n(X,"LI",{});var xxe=s(m5);mhe=n(xxe,"STRONG",{});var Vmt=s(mhe);tVo=r(Vmt,"electra"),Vmt.forEach(t),aVo=r(xxe," \u2014 "),pV=n(xxe,"A",{href:!0});var Xmt=s(pV);nVo=r(Xmt,"ElectraForQuestionAnswering"),Xmt.forEach(t),sVo=r(xxe," (ELECTRA model)"),xxe.forEach(t),lVo=i(X),g5=n(X,"LI",{});var $xe=s(g5);ghe=n($xe,"STRONG",{});var zmt=s(ghe);iVo=r(zmt,"flaubert"),zmt.forEach(t),dVo=r($xe," \u2014 "),_V=n($xe,"A",{href:!0});var Wmt=s(_V);cVo=r(Wmt,"FlaubertForQuestionAnsweringSimple"),Wmt.forEach(t),fVo=r($xe," (FlauBERT model)"),$xe.forEach(t),mVo=i(X),h5=n(X,"LI",{});var kxe=s(h5);hhe=n(kxe,"STRONG",{});var Qmt=s(hhe);gVo=r(Qmt,"fnet"),Qmt.forEach(t),hVo=r(kxe," \u2014 "),uV=n(kxe,"A",{href:!0});var Hmt=s(uV);pVo=r(Hmt,"FNetForQuestionAnswering"),Hmt.forEach(t),_Vo=r(kxe," (FNet model)"),kxe.forEach(t),uVo=i(X),p5=n(X,"LI",{});var Sxe=s(p5);phe=n(Sxe,"STRONG",{});var Umt=s(phe);bVo=r(Umt,"funnel"),Umt.forEach(t),vVo=r(Sxe," \u2014 "),bV=n(Sxe,"A",{href:!0});var Jmt=s(bV);FVo=r(Jmt,"FunnelForQuestionAnswering"),Jmt.forEach(t),TVo=r(Sxe," (Funnel Transformer model)"),Sxe.forEach(t),MVo=i(X),_5=n(X,"LI",{});var Rxe=s(_5);_he=n(Rxe,"STRONG",{});var Ymt=s(_he);EVo=r(Ymt,"gptj"),Ymt.forEach(t),CVo=r(Rxe," \u2014 "),vV=n(Rxe,"A",{href:!0});var Kmt=s(vV);wVo=r(Kmt,"GPTJForQuestionAnswering"),Kmt.forEach(t),AVo=r(Rxe," (GPT-J model)"),Rxe.forEach(t),yVo=i(X),u5=n(X,"LI",{});var Pxe=s(u5);uhe=n(Pxe,"STRONG",{});var Zmt=s(uhe);LVo=r(Zmt,"ibert"),Zmt.forEach(t),xVo=r(Pxe," \u2014 "),FV=n(Pxe,"A",{href:!0});var egt=s(FV);$Vo=r(egt,"IBertForQuestionAnswering"),egt.forEach(t),kVo=r(Pxe," (I-BERT model)"),Pxe.forEach(t),SVo=i(X),b5=n(X,"LI",{});var Bxe=s(b5);bhe=n(Bxe,"STRONG",{});var ogt=s(bhe);RVo=r(ogt,"layoutlmv2"),ogt.forEach(t),PVo=r(Bxe," \u2014 "),TV=n(Bxe,"A",{href:!0});var rgt=s(TV);BVo=r(rgt,"LayoutLMv2ForQuestionAnswering"),rgt.forEach(t),IVo=r(Bxe," (LayoutLMv2 model)"),Bxe.forEach(t),qVo=i(X),v5=n(X,"LI",{});var Ixe=s(v5);vhe=n(Ixe,"STRONG",{});var tgt=s(vhe);NVo=r(tgt,"led"),tgt.forEach(t),jVo=r(Ixe," \u2014 "),MV=n(Ixe,"A",{href:!0});var agt=s(MV);DVo=r(agt,"LEDForQuestionAnswering"),agt.forEach(t),GVo=r(Ixe," (LED model)"),Ixe.forEach(t),OVo=i(X),F5=n(X,"LI",{});var qxe=s(F5);Fhe=n(qxe,"STRONG",{});var ngt=s(Fhe);VVo=r(ngt,"longformer"),ngt.forEach(t),XVo=r(qxe," \u2014 "),EV=n(qxe,"A",{href:!0});var sgt=s(EV);zVo=r(sgt,"LongformerForQuestionAnswering"),sgt.forEach(t),WVo=r(qxe," (Longformer model)"),qxe.forEach(t),QVo=i(X),T5=n(X,"LI",{});var Nxe=s(T5);The=n(Nxe,"STRONG",{});var lgt=s(The);HVo=r(lgt,"lxmert"),lgt.forEach(t),UVo=r(Nxe," \u2014 "),CV=n(Nxe,"A",{href:!0});var igt=s(CV);JVo=r(igt,"LxmertForQuestionAnswering"),igt.forEach(t),YVo=r(Nxe," (LXMERT model)"),Nxe.forEach(t),KVo=i(X),M5=n(X,"LI",{});var jxe=s(M5);Mhe=n(jxe,"STRONG",{});var dgt=s(Mhe);ZVo=r(dgt,"mbart"),dgt.forEach(t),eXo=r(jxe," \u2014 "),wV=n(jxe,"A",{href:!0});var cgt=s(wV);oXo=r(cgt,"MBartForQuestionAnswering"),cgt.forEach(t),rXo=r(jxe," (mBART model)"),jxe.forEach(t),tXo=i(X),E5=n(X,"LI",{});var Dxe=s(E5);Ehe=n(Dxe,"STRONG",{});var fgt=s(Ehe);aXo=r(fgt,"megatron-bert"),fgt.forEach(t),nXo=r(Dxe," \u2014 "),AV=n(Dxe,"A",{href:!0});var mgt=s(AV);sXo=r(mgt,"MegatronBertForQuestionAnswering"),mgt.forEach(t),lXo=r(Dxe," (MegatronBert model)"),Dxe.forEach(t),iXo=i(X),C5=n(X,"LI",{});var Gxe=s(C5);Che=n(Gxe,"STRONG",{});var ggt=s(Che);dXo=r(ggt,"mobilebert"),ggt.forEach(t),cXo=r(Gxe," \u2014 "),yV=n(Gxe,"A",{href:!0});var hgt=s(yV);fXo=r(hgt,"MobileBertForQuestionAnswering"),hgt.forEach(t),mXo=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),gXo=i(X),w5=n(X,"LI",{});var Oxe=s(w5);whe=n(Oxe,"STRONG",{});var pgt=s(whe);hXo=r(pgt,"mpnet"),pgt.forEach(t),pXo=r(Oxe," \u2014 "),LV=n(Oxe,"A",{href:!0});var _gt=s(LV);_Xo=r(_gt,"MPNetForQuestionAnswering"),_gt.forEach(t),uXo=r(Oxe," (MPNet model)"),Oxe.forEach(t),bXo=i(X),A5=n(X,"LI",{});var Vxe=s(A5);Ahe=n(Vxe,"STRONG",{});var ugt=s(Ahe);vXo=r(ugt,"nystromformer"),ugt.forEach(t),FXo=r(Vxe," \u2014 "),xV=n(Vxe,"A",{href:!0});var bgt=s(xV);TXo=r(bgt,"NystromformerForQuestionAnswering"),bgt.forEach(t),MXo=r(Vxe," (Nystromformer model)"),Vxe.forEach(t),EXo=i(X),y5=n(X,"LI",{});var Xxe=s(y5);yhe=n(Xxe,"STRONG",{});var vgt=s(yhe);CXo=r(vgt,"qdqbert"),vgt.forEach(t),wXo=r(Xxe," \u2014 "),$V=n(Xxe,"A",{href:!0});var Fgt=s($V);AXo=r(Fgt,"QDQBertForQuestionAnswering"),Fgt.forEach(t),yXo=r(Xxe," (QDQBert model)"),Xxe.forEach(t),LXo=i(X),L5=n(X,"LI",{});var zxe=s(L5);Lhe=n(zxe,"STRONG",{});var Tgt=s(Lhe);xXo=r(Tgt,"reformer"),Tgt.forEach(t),$Xo=r(zxe," \u2014 "),kV=n(zxe,"A",{href:!0});var Mgt=s(kV);kXo=r(Mgt,"ReformerForQuestionAnswering"),Mgt.forEach(t),SXo=r(zxe," (Reformer model)"),zxe.forEach(t),RXo=i(X),x5=n(X,"LI",{});var Wxe=s(x5);xhe=n(Wxe,"STRONG",{});var Egt=s(xhe);PXo=r(Egt,"rembert"),Egt.forEach(t),BXo=r(Wxe," \u2014 "),SV=n(Wxe,"A",{href:!0});var Cgt=s(SV);IXo=r(Cgt,"RemBertForQuestionAnswering"),Cgt.forEach(t),qXo=r(Wxe," (RemBERT model)"),Wxe.forEach(t),NXo=i(X),$5=n(X,"LI",{});var Qxe=s($5);$he=n(Qxe,"STRONG",{});var wgt=s($he);jXo=r(wgt,"roberta"),wgt.forEach(t),DXo=r(Qxe," \u2014 "),RV=n(Qxe,"A",{href:!0});var Agt=s(RV);GXo=r(Agt,"RobertaForQuestionAnswering"),Agt.forEach(t),OXo=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),VXo=i(X),k5=n(X,"LI",{});var Hxe=s(k5);khe=n(Hxe,"STRONG",{});var ygt=s(khe);XXo=r(ygt,"roformer"),ygt.forEach(t),zXo=r(Hxe," \u2014 "),PV=n(Hxe,"A",{href:!0});var Lgt=s(PV);WXo=r(Lgt,"RoFormerForQuestionAnswering"),Lgt.forEach(t),QXo=r(Hxe," (RoFormer model)"),Hxe.forEach(t),HXo=i(X),S5=n(X,"LI",{});var Uxe=s(S5);She=n(Uxe,"STRONG",{});var xgt=s(She);UXo=r(xgt,"splinter"),xgt.forEach(t),JXo=r(Uxe," \u2014 "),BV=n(Uxe,"A",{href:!0});var $gt=s(BV);YXo=r($gt,"SplinterForQuestionAnswering"),$gt.forEach(t),KXo=r(Uxe," (Splinter model)"),Uxe.forEach(t),ZXo=i(X),R5=n(X,"LI",{});var Jxe=s(R5);Rhe=n(Jxe,"STRONG",{});var kgt=s(Rhe);ezo=r(kgt,"squeezebert"),kgt.forEach(t),ozo=r(Jxe," \u2014 "),IV=n(Jxe,"A",{href:!0});var Sgt=s(IV);rzo=r(Sgt,"SqueezeBertForQuestionAnswering"),Sgt.forEach(t),tzo=r(Jxe," (SqueezeBERT model)"),Jxe.forEach(t),azo=i(X),P5=n(X,"LI",{});var Yxe=s(P5);Phe=n(Yxe,"STRONG",{});var Rgt=s(Phe);nzo=r(Rgt,"xlm"),Rgt.forEach(t),szo=r(Yxe," \u2014 "),qV=n(Yxe,"A",{href:!0});var Pgt=s(qV);lzo=r(Pgt,"XLMForQuestionAnsweringSimple"),Pgt.forEach(t),izo=r(Yxe," (XLM model)"),Yxe.forEach(t),dzo=i(X),B5=n(X,"LI",{});var Kxe=s(B5);Bhe=n(Kxe,"STRONG",{});var Bgt=s(Bhe);czo=r(Bgt,"xlm-roberta"),Bgt.forEach(t),fzo=r(Kxe," \u2014 "),NV=n(Kxe,"A",{href:!0});var Igt=s(NV);mzo=r(Igt,"XLMRobertaForQuestionAnswering"),Igt.forEach(t),gzo=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),hzo=i(X),I5=n(X,"LI",{});var Zxe=s(I5);Ihe=n(Zxe,"STRONG",{});var qgt=s(Ihe);pzo=r(qgt,"xlm-roberta-xl"),qgt.forEach(t),_zo=r(Zxe," \u2014 "),jV=n(Zxe,"A",{href:!0});var Ngt=s(jV);uzo=r(Ngt,"XLMRobertaXLForQuestionAnswering"),Ngt.forEach(t),bzo=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),vzo=i(X),q5=n(X,"LI",{});var e$e=s(q5);qhe=n(e$e,"STRONG",{});var jgt=s(qhe);Fzo=r(jgt,"xlnet"),jgt.forEach(t),Tzo=r(e$e," \u2014 "),DV=n(e$e,"A",{href:!0});var Dgt=s(DV);Mzo=r(Dgt,"XLNetForQuestionAnsweringSimple"),Dgt.forEach(t),Ezo=r(e$e," (XLNet model)"),e$e.forEach(t),Czo=i(X),N5=n(X,"LI",{});var o$e=s(N5);Nhe=n(o$e,"STRONG",{});var Ggt=s(Nhe);wzo=r(Ggt,"yoso"),Ggt.forEach(t),Azo=r(o$e," \u2014 "),GV=n(o$e,"A",{href:!0});var Ogt=s(GV);yzo=r(Ogt,"YosoForQuestionAnswering"),Ogt.forEach(t),Lzo=r(o$e," (YOSO model)"),o$e.forEach(t),X.forEach(t),xzo=i(ca),j5=n(ca,"P",{});var r$e=s(j5);$zo=r(r$e,"The model is set in evaluation mode by default using "),jhe=n(r$e,"CODE",{});var Vgt=s(jhe);kzo=r(Vgt,"model.eval()"),Vgt.forEach(t),Szo=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(r$e,"CODE",{});var Xgt=s(Dhe);Rzo=r(Xgt,"model.train()"),Xgt.forEach(t),r$e.forEach(t),Pzo=i(ca),T(D5.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Rqe=i(f),od=n(f,"H2",{class:!0});var qje=s(od);G5=n(qje,"A",{id:!0,class:!0,href:!0});var zgt=s(G5);Ghe=n(zgt,"SPAN",{});var Wgt=s(Ghe);T(Iy.$$.fragment,Wgt),Wgt.forEach(t),zgt.forEach(t),Bzo=i(qje),Ohe=n(qje,"SPAN",{});var Qgt=s(Ohe);Izo=r(Qgt,"AutoModelForTableQuestionAnswering"),Qgt.forEach(t),qje.forEach(t),Pqe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(qy.$$.fragment,Ks),qzo=i(Ks),rd=n(Ks,"P",{});var dZ=s(rd);Nzo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OV=n(dZ,"A",{href:!0});var Hgt=s(OV);jzo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),Dzo=r(dZ," class method or the "),VV=n(dZ,"A",{href:!0});var Ugt=s(VV);Gzo=r(Ugt,"from_config()"),Ugt.forEach(t),Ozo=r(dZ,` class
method.`),dZ.forEach(t),Vzo=i(Ks),Ny=n(Ks,"P",{});var Nje=s(Ny);Xzo=r(Nje,"This class cannot be instantiated directly using "),Vhe=n(Nje,"CODE",{});var Jgt=s(Vhe);zzo=r(Jgt,"__init__()"),Jgt.forEach(t),Wzo=r(Nje," (throws an error)."),Nje.forEach(t),Qzo=i(Ks),gt=n(Ks,"DIV",{class:!0});var N0=s(gt);T(jy.$$.fragment,N0),Hzo=i(N0),Xhe=n(N0,"P",{});var Ygt=s(Xhe);Uzo=r(Ygt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ygt.forEach(t),Jzo=i(N0),td=n(N0,"P",{});var cZ=s(td);Yzo=r(cZ,`Note:
Loading a model from its configuration file does `),zhe=n(cZ,"STRONG",{});var Kgt=s(zhe);Kzo=r(Kgt,"not"),Kgt.forEach(t),Zzo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(cZ,"A",{href:!0});var Zgt=s(XV);eWo=r(Zgt,"from_pretrained()"),Zgt.forEach(t),oWo=r(cZ," to load the model weights."),cZ.forEach(t),rWo=i(N0),T(O5.$$.fragment,N0),N0.forEach(t),tWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Dy.$$.fragment,fa),aWo=i(fa),Whe=n(fa,"P",{});var eht=s(Whe);nWo=r(eht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eht.forEach(t),sWo=i(fa),Na=n(fa,"P",{});var j0=s(Na);lWo=r(j0,"The model class to instantiate is selected based on the "),Qhe=n(j0,"CODE",{});var oht=s(Qhe);iWo=r(oht,"model_type"),oht.forEach(t),dWo=r(j0,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(j0,"CODE",{});var rht=s(Hhe);cWo=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),fWo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(j0,"CODE",{});var tht=s(Uhe);mWo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),gWo=r(j0,":"),j0.forEach(t),hWo=i(fa),Jhe=n(fa,"UL",{});var aht=s(Jhe);V5=n(aht,"LI",{});var t$e=s(V5);Yhe=n(t$e,"STRONG",{});var nht=s(Yhe);pWo=r(nht,"tapas"),nht.forEach(t),_Wo=r(t$e," \u2014 "),zV=n(t$e,"A",{href:!0});var sht=s(zV);uWo=r(sht,"TapasForQuestionAnswering"),sht.forEach(t),bWo=r(t$e," (TAPAS model)"),t$e.forEach(t),aht.forEach(t),vWo=i(fa),X5=n(fa,"P",{});var a$e=s(X5);FWo=r(a$e,"The model is set in evaluation mode by default using "),Khe=n(a$e,"CODE",{});var lht=s(Khe);TWo=r(lht,"model.eval()"),lht.forEach(t),MWo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(a$e,"CODE",{});var iht=s(Zhe);EWo=r(iht,"model.train()"),iht.forEach(t),a$e.forEach(t),CWo=i(fa),T(z5.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Bqe=i(f),ad=n(f,"H2",{class:!0});var jje=s(ad);W5=n(jje,"A",{id:!0,class:!0,href:!0});var dht=s(W5);epe=n(dht,"SPAN",{});var cht=s(epe);T(Gy.$$.fragment,cht),cht.forEach(t),dht.forEach(t),wWo=i(jje),ope=n(jje,"SPAN",{});var fht=s(ope);AWo=r(fht,"AutoModelForImageClassification"),fht.forEach(t),jje.forEach(t),Iqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(Oy.$$.fragment,Zs),yWo=i(Zs),nd=n(Zs,"P",{});var fZ=s(nd);LWo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=n(fZ,"A",{href:!0});var mht=s(WV);xWo=r(mht,"from_pretrained()"),mht.forEach(t),$Wo=r(fZ," class method or the "),QV=n(fZ,"A",{href:!0});var ght=s(QV);kWo=r(ght,"from_config()"),ght.forEach(t),SWo=r(fZ,` class
method.`),fZ.forEach(t),RWo=i(Zs),Vy=n(Zs,"P",{});var Dje=s(Vy);PWo=r(Dje,"This class cannot be instantiated directly using "),rpe=n(Dje,"CODE",{});var hht=s(rpe);BWo=r(hht,"__init__()"),hht.forEach(t),IWo=r(Dje," (throws an error)."),Dje.forEach(t),qWo=i(Zs),ht=n(Zs,"DIV",{class:!0});var D0=s(ht);T(Xy.$$.fragment,D0),NWo=i(D0),tpe=n(D0,"P",{});var pht=s(tpe);jWo=r(pht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pht.forEach(t),DWo=i(D0),sd=n(D0,"P",{});var mZ=s(sd);GWo=r(mZ,`Note:
Loading a model from its configuration file does `),ape=n(mZ,"STRONG",{});var _ht=s(ape);OWo=r(_ht,"not"),_ht.forEach(t),VWo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(mZ,"A",{href:!0});var uht=s(HV);XWo=r(uht,"from_pretrained()"),uht.forEach(t),zWo=r(mZ," to load the model weights."),mZ.forEach(t),WWo=i(D0),T(Q5.$$.fragment,D0),D0.forEach(t),QWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(zy.$$.fragment,ma),HWo=i(ma),npe=n(ma,"P",{});var bht=s(npe);UWo=r(bht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bht.forEach(t),JWo=i(ma),ja=n(ma,"P",{});var G0=s(ja);YWo=r(G0,"The model class to instantiate is selected based on the "),spe=n(G0,"CODE",{});var vht=s(spe);KWo=r(vht,"model_type"),vht.forEach(t),ZWo=r(G0,` property of the config object (either
passed as an argument or loaded from `),lpe=n(G0,"CODE",{});var Fht=s(lpe);eQo=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),oQo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(G0,"CODE",{});var Tht=s(ipe);rQo=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),tQo=r(G0,":"),G0.forEach(t),aQo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);H5=n(Te,"LI",{});var n$e=s(H5);dpe=n(n$e,"STRONG",{});var Mht=s(dpe);nQo=r(Mht,"beit"),Mht.forEach(t),sQo=r(n$e," \u2014 "),UV=n(n$e,"A",{href:!0});var Eht=s(UV);lQo=r(Eht,"BeitForImageClassification"),Eht.forEach(t),iQo=r(n$e," (BEiT model)"),n$e.forEach(t),dQo=i(Te),U5=n(Te,"LI",{});var s$e=s(U5);cpe=n(s$e,"STRONG",{});var Cht=s(cpe);cQo=r(Cht,"convnext"),Cht.forEach(t),fQo=r(s$e," \u2014 "),JV=n(s$e,"A",{href:!0});var wht=s(JV);mQo=r(wht,"ConvNextForImageClassification"),wht.forEach(t),gQo=r(s$e," (ConvNext model)"),s$e.forEach(t),hQo=i(Te),J5=n(Te,"LI",{});var l$e=s(J5);fpe=n(l$e,"STRONG",{});var Aht=s(fpe);pQo=r(Aht,"cvt"),Aht.forEach(t),_Qo=r(l$e," \u2014 "),YV=n(l$e,"A",{href:!0});var yht=s(YV);uQo=r(yht,"CvtForImageClassification"),yht.forEach(t),bQo=r(l$e," (CvT model)"),l$e.forEach(t),vQo=i(Te),Y5=n(Te,"LI",{});var i$e=s(Y5);mpe=n(i$e,"STRONG",{});var Lht=s(mpe);FQo=r(Lht,"data2vec-vision"),Lht.forEach(t),TQo=r(i$e," \u2014 "),KV=n(i$e,"A",{href:!0});var xht=s(KV);MQo=r(xht,"Data2VecVisionForImageClassification"),xht.forEach(t),EQo=r(i$e," (Data2VecVision model)"),i$e.forEach(t),CQo=i(Te),Bs=n(Te,"LI",{});var $$=s(Bs);gpe=n($$,"STRONG",{});var $ht=s(gpe);wQo=r($ht,"deit"),$ht.forEach(t),AQo=r($$," \u2014 "),ZV=n($$,"A",{href:!0});var kht=s(ZV);yQo=r(kht,"DeiTForImageClassification"),kht.forEach(t),LQo=r($$," or "),eX=n($$,"A",{href:!0});var Sht=s(eX);xQo=r(Sht,"DeiTForImageClassificationWithTeacher"),Sht.forEach(t),$Qo=r($$," (DeiT model)"),$$.forEach(t),kQo=i(Te),K5=n(Te,"LI",{});var d$e=s(K5);hpe=n(d$e,"STRONG",{});var Rht=s(hpe);SQo=r(Rht,"imagegpt"),Rht.forEach(t),RQo=r(d$e," \u2014 "),oX=n(d$e,"A",{href:!0});var Pht=s(oX);PQo=r(Pht,"ImageGPTForImageClassification"),Pht.forEach(t),BQo=r(d$e," (ImageGPT model)"),d$e.forEach(t),IQo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);ppe=n(hf,"STRONG",{});var Bht=s(ppe);qQo=r(Bht,"perceiver"),Bht.forEach(t),NQo=r(hf," \u2014 "),rX=n(hf,"A",{href:!0});var Iht=s(rX);jQo=r(Iht,"PerceiverForImageClassificationLearned"),Iht.forEach(t),DQo=r(hf," or "),tX=n(hf,"A",{href:!0});var qht=s(tX);GQo=r(qht,"PerceiverForImageClassificationFourier"),qht.forEach(t),OQo=r(hf," or "),aX=n(hf,"A",{href:!0});var Nht=s(aX);VQo=r(Nht,"PerceiverForImageClassificationConvProcessing"),Nht.forEach(t),XQo=r(hf," (Perceiver model)"),hf.forEach(t),zQo=i(Te),Z5=n(Te,"LI",{});var c$e=s(Z5);_pe=n(c$e,"STRONG",{});var jht=s(_pe);WQo=r(jht,"poolformer"),jht.forEach(t),QQo=r(c$e," \u2014 "),nX=n(c$e,"A",{href:!0});var Dht=s(nX);HQo=r(Dht,"PoolFormerForImageClassification"),Dht.forEach(t),UQo=r(c$e," (PoolFormer model)"),c$e.forEach(t),JQo=i(Te),ev=n(Te,"LI",{});var f$e=s(ev);upe=n(f$e,"STRONG",{});var Ght=s(upe);YQo=r(Ght,"regnet"),Ght.forEach(t),KQo=r(f$e," \u2014 "),sX=n(f$e,"A",{href:!0});var Oht=s(sX);ZQo=r(Oht,"RegNetForImageClassification"),Oht.forEach(t),eHo=r(f$e," (RegNet model)"),f$e.forEach(t),oHo=i(Te),ov=n(Te,"LI",{});var m$e=s(ov);bpe=n(m$e,"STRONG",{});var Vht=s(bpe);rHo=r(Vht,"resnet"),Vht.forEach(t),tHo=r(m$e," \u2014 "),lX=n(m$e,"A",{href:!0});var Xht=s(lX);aHo=r(Xht,"ResNetForImageClassification"),Xht.forEach(t),nHo=r(m$e," (ResNet model)"),m$e.forEach(t),sHo=i(Te),rv=n(Te,"LI",{});var g$e=s(rv);vpe=n(g$e,"STRONG",{});var zht=s(vpe);lHo=r(zht,"segformer"),zht.forEach(t),iHo=r(g$e," \u2014 "),iX=n(g$e,"A",{href:!0});var Wht=s(iX);dHo=r(Wht,"SegformerForImageClassification"),Wht.forEach(t),cHo=r(g$e," (SegFormer model)"),g$e.forEach(t),fHo=i(Te),tv=n(Te,"LI",{});var h$e=s(tv);Fpe=n(h$e,"STRONG",{});var Qht=s(Fpe);mHo=r(Qht,"swin"),Qht.forEach(t),gHo=r(h$e," \u2014 "),dX=n(h$e,"A",{href:!0});var Hht=s(dX);hHo=r(Hht,"SwinForImageClassification"),Hht.forEach(t),pHo=r(h$e," (Swin model)"),h$e.forEach(t),_Ho=i(Te),av=n(Te,"LI",{});var p$e=s(av);Tpe=n(p$e,"STRONG",{});var Uht=s(Tpe);uHo=r(Uht,"van"),Uht.forEach(t),bHo=r(p$e," \u2014 "),cX=n(p$e,"A",{href:!0});var Jht=s(cX);vHo=r(Jht,"VanForImageClassification"),Jht.forEach(t),FHo=r(p$e," (VAN model)"),p$e.forEach(t),THo=i(Te),nv=n(Te,"LI",{});var _$e=s(nv);Mpe=n(_$e,"STRONG",{});var Yht=s(Mpe);MHo=r(Yht,"vit"),Yht.forEach(t),EHo=r(_$e," \u2014 "),fX=n(_$e,"A",{href:!0});var Kht=s(fX);CHo=r(Kht,"ViTForImageClassification"),Kht.forEach(t),wHo=r(_$e," (ViT model)"),_$e.forEach(t),Te.forEach(t),AHo=i(ma),sv=n(ma,"P",{});var u$e=s(sv);yHo=r(u$e,"The model is set in evaluation mode by default using "),Epe=n(u$e,"CODE",{});var Zht=s(Epe);LHo=r(Zht,"model.eval()"),Zht.forEach(t),xHo=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(u$e,"CODE",{});var ept=s(Cpe);$Ho=r(ept,"model.train()"),ept.forEach(t),u$e.forEach(t),kHo=i(ma),T(lv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),qqe=i(f),ld=n(f,"H2",{class:!0});var Gje=s(ld);iv=n(Gje,"A",{id:!0,class:!0,href:!0});var opt=s(iv);wpe=n(opt,"SPAN",{});var rpt=s(wpe);T(Wy.$$.fragment,rpt),rpt.forEach(t),opt.forEach(t),SHo=i(Gje),Ape=n(Gje,"SPAN",{});var tpt=s(Ape);RHo=r(tpt,"AutoModelForVision2Seq"),tpt.forEach(t),Gje.forEach(t),Nqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(Qy.$$.fragment,el),PHo=i(el),id=n(el,"P",{});var gZ=s(id);BHo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mX=n(gZ,"A",{href:!0});var apt=s(mX);IHo=r(apt,"from_pretrained()"),apt.forEach(t),qHo=r(gZ," class method or the "),gX=n(gZ,"A",{href:!0});var npt=s(gX);NHo=r(npt,"from_config()"),npt.forEach(t),jHo=r(gZ,` class
method.`),gZ.forEach(t),DHo=i(el),Hy=n(el,"P",{});var Oje=s(Hy);GHo=r(Oje,"This class cannot be instantiated directly using "),ype=n(Oje,"CODE",{});var spt=s(ype);OHo=r(spt,"__init__()"),spt.forEach(t),VHo=r(Oje," (throws an error)."),Oje.forEach(t),XHo=i(el),_t=n(el,"DIV",{class:!0});var O0=s(_t);T(Uy.$$.fragment,O0),zHo=i(O0),Lpe=n(O0,"P",{});var lpt=s(Lpe);WHo=r(lpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lpt.forEach(t),QHo=i(O0),dd=n(O0,"P",{});var hZ=s(dd);HHo=r(hZ,`Note:
Loading a model from its configuration file does `),xpe=n(hZ,"STRONG",{});var ipt=s(xpe);UHo=r(ipt,"not"),ipt.forEach(t),JHo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(hZ,"A",{href:!0});var dpt=s(hX);YHo=r(dpt,"from_pretrained()"),dpt.forEach(t),KHo=r(hZ," to load the model weights."),hZ.forEach(t),ZHo=i(O0),T(dv.$$.fragment,O0),O0.forEach(t),eUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Jy.$$.fragment,ga),oUo=i(ga),$pe=n(ga,"P",{});var cpt=s($pe);rUo=r(cpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cpt.forEach(t),tUo=i(ga),Da=n(ga,"P",{});var V0=s(Da);aUo=r(V0,"The model class to instantiate is selected based on the "),kpe=n(V0,"CODE",{});var fpt=s(kpe);nUo=r(fpt,"model_type"),fpt.forEach(t),sUo=r(V0,` property of the config object (either
passed as an argument or loaded from `),Spe=n(V0,"CODE",{});var mpt=s(Spe);lUo=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),iUo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(V0,"CODE",{});var gpt=s(Rpe);dUo=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),cUo=r(V0,":"),V0.forEach(t),fUo=i(ga),Ppe=n(ga,"UL",{});var hpt=s(Ppe);cv=n(hpt,"LI",{});var b$e=s(cv);Bpe=n(b$e,"STRONG",{});var ppt=s(Bpe);mUo=r(ppt,"vision-encoder-decoder"),ppt.forEach(t),gUo=r(b$e," \u2014 "),pX=n(b$e,"A",{href:!0});var _pt=s(pX);hUo=r(_pt,"VisionEncoderDecoderModel"),_pt.forEach(t),pUo=r(b$e," (Vision Encoder decoder model)"),b$e.forEach(t),hpt.forEach(t),_Uo=i(ga),fv=n(ga,"P",{});var v$e=s(fv);uUo=r(v$e,"The model is set in evaluation mode by default using "),Ipe=n(v$e,"CODE",{});var upt=s(Ipe);bUo=r(upt,"model.eval()"),upt.forEach(t),vUo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(v$e,"CODE",{});var bpt=s(qpe);FUo=r(bpt,"model.train()"),bpt.forEach(t),v$e.forEach(t),TUo=i(ga),T(mv.$$.fragment,ga),ga.forEach(t),el.forEach(t),jqe=i(f),cd=n(f,"H2",{class:!0});var Vje=s(cd);gv=n(Vje,"A",{id:!0,class:!0,href:!0});var vpt=s(gv);Npe=n(vpt,"SPAN",{});var Fpt=s(Npe);T(Yy.$$.fragment,Fpt),Fpt.forEach(t),vpt.forEach(t),MUo=i(Vje),jpe=n(Vje,"SPAN",{});var Tpt=s(jpe);EUo=r(Tpt,"AutoModelForAudioClassification"),Tpt.forEach(t),Vje.forEach(t),Dqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(Ky.$$.fragment,ol),CUo=i(ol),fd=n(ol,"P",{});var pZ=s(fd);wUo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_X=n(pZ,"A",{href:!0});var Mpt=s(_X);AUo=r(Mpt,"from_pretrained()"),Mpt.forEach(t),yUo=r(pZ," class method or the "),uX=n(pZ,"A",{href:!0});var Ept=s(uX);LUo=r(Ept,"from_config()"),Ept.forEach(t),xUo=r(pZ,` class
method.`),pZ.forEach(t),$Uo=i(ol),Zy=n(ol,"P",{});var Xje=s(Zy);kUo=r(Xje,"This class cannot be instantiated directly using "),Dpe=n(Xje,"CODE",{});var Cpt=s(Dpe);SUo=r(Cpt,"__init__()"),Cpt.forEach(t),RUo=r(Xje," (throws an error)."),Xje.forEach(t),PUo=i(ol),ut=n(ol,"DIV",{class:!0});var X0=s(ut);T(eL.$$.fragment,X0),BUo=i(X0),Gpe=n(X0,"P",{});var wpt=s(Gpe);IUo=r(wpt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wpt.forEach(t),qUo=i(X0),md=n(X0,"P",{});var _Z=s(md);NUo=r(_Z,`Note:
Loading a model from its configuration file does `),Ope=n(_Z,"STRONG",{});var Apt=s(Ope);jUo=r(Apt,"not"),Apt.forEach(t),DUo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(_Z,"A",{href:!0});var ypt=s(bX);GUo=r(ypt,"from_pretrained()"),ypt.forEach(t),OUo=r(_Z," to load the model weights."),_Z.forEach(t),VUo=i(X0),T(hv.$$.fragment,X0),X0.forEach(t),XUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(oL.$$.fragment,ha),zUo=i(ha),Vpe=n(ha,"P",{});var Lpt=s(Vpe);WUo=r(Lpt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Lpt.forEach(t),QUo=i(ha),Ga=n(ha,"P",{});var z0=s(Ga);HUo=r(z0,"The model class to instantiate is selected based on the "),Xpe=n(z0,"CODE",{});var xpt=s(Xpe);UUo=r(xpt,"model_type"),xpt.forEach(t),JUo=r(z0,` property of the config object (either
passed as an argument or loaded from `),zpe=n(z0,"CODE",{});var $pt=s(zpe);YUo=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),KUo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(z0,"CODE",{});var kpt=s(Wpe);ZUo=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),eJo=r(z0,":"),z0.forEach(t),oJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);pv=n(Oe,"LI",{});var F$e=s(pv);Qpe=n(F$e,"STRONG",{});var Spt=s(Qpe);rJo=r(Spt,"data2vec-audio"),Spt.forEach(t),tJo=r(F$e," \u2014 "),vX=n(F$e,"A",{href:!0});var Rpt=s(vX);aJo=r(Rpt,"Data2VecAudioForSequenceClassification"),Rpt.forEach(t),nJo=r(F$e," (Data2VecAudio model)"),F$e.forEach(t),sJo=i(Oe),_v=n(Oe,"LI",{});var T$e=s(_v);Hpe=n(T$e,"STRONG",{});var Ppt=s(Hpe);lJo=r(Ppt,"hubert"),Ppt.forEach(t),iJo=r(T$e," \u2014 "),FX=n(T$e,"A",{href:!0});var Bpt=s(FX);dJo=r(Bpt,"HubertForSequenceClassification"),Bpt.forEach(t),cJo=r(T$e," (Hubert model)"),T$e.forEach(t),fJo=i(Oe),uv=n(Oe,"LI",{});var M$e=s(uv);Upe=n(M$e,"STRONG",{});var Ipt=s(Upe);mJo=r(Ipt,"sew"),Ipt.forEach(t),gJo=r(M$e," \u2014 "),TX=n(M$e,"A",{href:!0});var qpt=s(TX);hJo=r(qpt,"SEWForSequenceClassification"),qpt.forEach(t),pJo=r(M$e," (SEW model)"),M$e.forEach(t),_Jo=i(Oe),bv=n(Oe,"LI",{});var E$e=s(bv);Jpe=n(E$e,"STRONG",{});var Npt=s(Jpe);uJo=r(Npt,"sew-d"),Npt.forEach(t),bJo=r(E$e," \u2014 "),MX=n(E$e,"A",{href:!0});var jpt=s(MX);vJo=r(jpt,"SEWDForSequenceClassification"),jpt.forEach(t),FJo=r(E$e," (SEW-D model)"),E$e.forEach(t),TJo=i(Oe),vv=n(Oe,"LI",{});var C$e=s(vv);Ype=n(C$e,"STRONG",{});var Dpt=s(Ype);MJo=r(Dpt,"unispeech"),Dpt.forEach(t),EJo=r(C$e," \u2014 "),EX=n(C$e,"A",{href:!0});var Gpt=s(EX);CJo=r(Gpt,"UniSpeechForSequenceClassification"),Gpt.forEach(t),wJo=r(C$e," (UniSpeech model)"),C$e.forEach(t),AJo=i(Oe),Fv=n(Oe,"LI",{});var w$e=s(Fv);Kpe=n(w$e,"STRONG",{});var Opt=s(Kpe);yJo=r(Opt,"unispeech-sat"),Opt.forEach(t),LJo=r(w$e," \u2014 "),CX=n(w$e,"A",{href:!0});var Vpt=s(CX);xJo=r(Vpt,"UniSpeechSatForSequenceClassification"),Vpt.forEach(t),$Jo=r(w$e," (UniSpeechSat model)"),w$e.forEach(t),kJo=i(Oe),Tv=n(Oe,"LI",{});var A$e=s(Tv);Zpe=n(A$e,"STRONG",{});var Xpt=s(Zpe);SJo=r(Xpt,"wav2vec2"),Xpt.forEach(t),RJo=r(A$e," \u2014 "),wX=n(A$e,"A",{href:!0});var zpt=s(wX);PJo=r(zpt,"Wav2Vec2ForSequenceClassification"),zpt.forEach(t),BJo=r(A$e," (Wav2Vec2 model)"),A$e.forEach(t),IJo=i(Oe),Mv=n(Oe,"LI",{});var y$e=s(Mv);e_e=n(y$e,"STRONG",{});var Wpt=s(e_e);qJo=r(Wpt,"wav2vec2-conformer"),Wpt.forEach(t),NJo=r(y$e," \u2014 "),AX=n(y$e,"A",{href:!0});var Qpt=s(AX);jJo=r(Qpt,"Wav2Vec2ConformerForSequenceClassification"),Qpt.forEach(t),DJo=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),GJo=i(Oe),Ev=n(Oe,"LI",{});var L$e=s(Ev);o_e=n(L$e,"STRONG",{});var Hpt=s(o_e);OJo=r(Hpt,"wavlm"),Hpt.forEach(t),VJo=r(L$e," \u2014 "),yX=n(L$e,"A",{href:!0});var Upt=s(yX);XJo=r(Upt,"WavLMForSequenceClassification"),Upt.forEach(t),zJo=r(L$e," (WavLM model)"),L$e.forEach(t),Oe.forEach(t),WJo=i(ha),Cv=n(ha,"P",{});var x$e=s(Cv);QJo=r(x$e,"The model is set in evaluation mode by default using "),r_e=n(x$e,"CODE",{});var Jpt=s(r_e);HJo=r(Jpt,"model.eval()"),Jpt.forEach(t),UJo=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(x$e,"CODE",{});var Ypt=s(t_e);JJo=r(Ypt,"model.train()"),Ypt.forEach(t),x$e.forEach(t),YJo=i(ha),T(wv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),Gqe=i(f),gd=n(f,"H2",{class:!0});var zje=s(gd);Av=n(zje,"A",{id:!0,class:!0,href:!0});var Kpt=s(Av);a_e=n(Kpt,"SPAN",{});var Zpt=s(a_e);T(rL.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),KJo=i(zje),n_e=n(zje,"SPAN",{});var e_t=s(n_e);ZJo=r(e_t,"AutoModelForAudioFrameClassification"),e_t.forEach(t),zje.forEach(t),Oqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(tL.$$.fragment,rl),eYo=i(rl),hd=n(rl,"P",{});var uZ=s(hd);oYo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LX=n(uZ,"A",{href:!0});var o_t=s(LX);rYo=r(o_t,"from_pretrained()"),o_t.forEach(t),tYo=r(uZ," class method or the "),xX=n(uZ,"A",{href:!0});var r_t=s(xX);aYo=r(r_t,"from_config()"),r_t.forEach(t),nYo=r(uZ,` class
method.`),uZ.forEach(t),sYo=i(rl),aL=n(rl,"P",{});var Wje=s(aL);lYo=r(Wje,"This class cannot be instantiated directly using "),s_e=n(Wje,"CODE",{});var t_t=s(s_e);iYo=r(t_t,"__init__()"),t_t.forEach(t),dYo=r(Wje," (throws an error)."),Wje.forEach(t),cYo=i(rl),bt=n(rl,"DIV",{class:!0});var W0=s(bt);T(nL.$$.fragment,W0),fYo=i(W0),l_e=n(W0,"P",{});var a_t=s(l_e);mYo=r(a_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),a_t.forEach(t),gYo=i(W0),pd=n(W0,"P",{});var bZ=s(pd);hYo=r(bZ,`Note:
Loading a model from its configuration file does `),i_e=n(bZ,"STRONG",{});var n_t=s(i_e);pYo=r(n_t,"not"),n_t.forEach(t),_Yo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(bZ,"A",{href:!0});var s_t=s($X);uYo=r(s_t,"from_pretrained()"),s_t.forEach(t),bYo=r(bZ," to load the model weights."),bZ.forEach(t),vYo=i(W0),T(yv.$$.fragment,W0),W0.forEach(t),FYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(sL.$$.fragment,pa),TYo=i(pa),d_e=n(pa,"P",{});var l_t=s(d_e);MYo=r(l_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),l_t.forEach(t),EYo=i(pa),Oa=n(pa,"P",{});var Q0=s(Oa);CYo=r(Q0,"The model class to instantiate is selected based on the "),c_e=n(Q0,"CODE",{});var i_t=s(c_e);wYo=r(i_t,"model_type"),i_t.forEach(t),AYo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),f_e=n(Q0,"CODE",{});var d_t=s(f_e);yYo=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),LYo=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(Q0,"CODE",{});var c_t=s(m_e);xYo=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),$Yo=r(Q0,":"),Q0.forEach(t),kYo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Lv=n(tl,"LI",{});var $$e=s(Lv);g_e=n($$e,"STRONG",{});var f_t=s(g_e);SYo=r(f_t,"data2vec-audio"),f_t.forEach(t),RYo=r($$e," \u2014 "),kX=n($$e,"A",{href:!0});var m_t=s(kX);PYo=r(m_t,"Data2VecAudioForAudioFrameClassification"),m_t.forEach(t),BYo=r($$e," (Data2VecAudio model)"),$$e.forEach(t),IYo=i(tl),xv=n(tl,"LI",{});var k$e=s(xv);h_e=n(k$e,"STRONG",{});var g_t=s(h_e);qYo=r(g_t,"unispeech-sat"),g_t.forEach(t),NYo=r(k$e," \u2014 "),SX=n(k$e,"A",{href:!0});var h_t=s(SX);jYo=r(h_t,"UniSpeechSatForAudioFrameClassification"),h_t.forEach(t),DYo=r(k$e," (UniSpeechSat model)"),k$e.forEach(t),GYo=i(tl),$v=n(tl,"LI",{});var S$e=s($v);p_e=n(S$e,"STRONG",{});var p_t=s(p_e);OYo=r(p_t,"wav2vec2"),p_t.forEach(t),VYo=r(S$e," \u2014 "),RX=n(S$e,"A",{href:!0});var __t=s(RX);XYo=r(__t,"Wav2Vec2ForAudioFrameClassification"),__t.forEach(t),zYo=r(S$e," (Wav2Vec2 model)"),S$e.forEach(t),WYo=i(tl),kv=n(tl,"LI",{});var R$e=s(kv);__e=n(R$e,"STRONG",{});var u_t=s(__e);QYo=r(u_t,"wav2vec2-conformer"),u_t.forEach(t),HYo=r(R$e," \u2014 "),PX=n(R$e,"A",{href:!0});var b_t=s(PX);UYo=r(b_t,"Wav2Vec2ConformerForAudioFrameClassification"),b_t.forEach(t),JYo=r(R$e," (Wav2Vec2-Conformer model)"),R$e.forEach(t),YYo=i(tl),Sv=n(tl,"LI",{});var P$e=s(Sv);u_e=n(P$e,"STRONG",{});var v_t=s(u_e);KYo=r(v_t,"wavlm"),v_t.forEach(t),ZYo=r(P$e," \u2014 "),BX=n(P$e,"A",{href:!0});var F_t=s(BX);eKo=r(F_t,"WavLMForAudioFrameClassification"),F_t.forEach(t),oKo=r(P$e," (WavLM model)"),P$e.forEach(t),tl.forEach(t),rKo=i(pa),Rv=n(pa,"P",{});var B$e=s(Rv);tKo=r(B$e,"The model is set in evaluation mode by default using "),b_e=n(B$e,"CODE",{});var T_t=s(b_e);aKo=r(T_t,"model.eval()"),T_t.forEach(t),nKo=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(B$e,"CODE",{});var M_t=s(v_e);sKo=r(M_t,"model.train()"),M_t.forEach(t),B$e.forEach(t),lKo=i(pa),T(Pv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Vqe=i(f),_d=n(f,"H2",{class:!0});var Qje=s(_d);Bv=n(Qje,"A",{id:!0,class:!0,href:!0});var E_t=s(Bv);F_e=n(E_t,"SPAN",{});var C_t=s(F_e);T(lL.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),iKo=i(Qje),T_e=n(Qje,"SPAN",{});var w_t=s(T_e);dKo=r(w_t,"AutoModelForCTC"),w_t.forEach(t),Qje.forEach(t),Xqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(iL.$$.fragment,al),cKo=i(al),ud=n(al,"P",{});var vZ=s(ud);fKo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IX=n(vZ,"A",{href:!0});var A_t=s(IX);mKo=r(A_t,"from_pretrained()"),A_t.forEach(t),gKo=r(vZ," class method or the "),qX=n(vZ,"A",{href:!0});var y_t=s(qX);hKo=r(y_t,"from_config()"),y_t.forEach(t),pKo=r(vZ,` class
method.`),vZ.forEach(t),_Ko=i(al),dL=n(al,"P",{});var Hje=s(dL);uKo=r(Hje,"This class cannot be instantiated directly using "),M_e=n(Hje,"CODE",{});var L_t=s(M_e);bKo=r(L_t,"__init__()"),L_t.forEach(t),vKo=r(Hje," (throws an error)."),Hje.forEach(t),FKo=i(al),vt=n(al,"DIV",{class:!0});var H0=s(vt);T(cL.$$.fragment,H0),TKo=i(H0),E_e=n(H0,"P",{});var x_t=s(E_e);MKo=r(x_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),x_t.forEach(t),EKo=i(H0),bd=n(H0,"P",{});var FZ=s(bd);CKo=r(FZ,`Note:
Loading a model from its configuration file does `),C_e=n(FZ,"STRONG",{});var $_t=s(C_e);wKo=r($_t,"not"),$_t.forEach(t),AKo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(FZ,"A",{href:!0});var k_t=s(NX);yKo=r(k_t,"from_pretrained()"),k_t.forEach(t),LKo=r(FZ," to load the model weights."),FZ.forEach(t),xKo=i(H0),T(Iv.$$.fragment,H0),H0.forEach(t),$Ko=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(fL.$$.fragment,_a),kKo=i(_a),w_e=n(_a,"P",{});var S_t=s(w_e);SKo=r(S_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),S_t.forEach(t),RKo=i(_a),Va=n(_a,"P",{});var U0=s(Va);PKo=r(U0,"The model class to instantiate is selected based on the "),A_e=n(U0,"CODE",{});var R_t=s(A_e);BKo=r(R_t,"model_type"),R_t.forEach(t),IKo=r(U0,` property of the config object (either
passed as an argument or loaded from `),y_e=n(U0,"CODE",{});var P_t=s(y_e);qKo=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),NKo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(U0,"CODE",{});var B_t=s(L_e);jKo=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),DKo=r(U0,":"),U0.forEach(t),GKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);qv=n(Ve,"LI",{});var I$e=s(qv);x_e=n(I$e,"STRONG",{});var I_t=s(x_e);OKo=r(I_t,"data2vec-audio"),I_t.forEach(t),VKo=r(I$e," \u2014 "),jX=n(I$e,"A",{href:!0});var q_t=s(jX);XKo=r(q_t,"Data2VecAudioForCTC"),q_t.forEach(t),zKo=r(I$e," (Data2VecAudio model)"),I$e.forEach(t),WKo=i(Ve),Nv=n(Ve,"LI",{});var q$e=s(Nv);$_e=n(q$e,"STRONG",{});var N_t=s($_e);QKo=r(N_t,"hubert"),N_t.forEach(t),HKo=r(q$e," \u2014 "),DX=n(q$e,"A",{href:!0});var j_t=s(DX);UKo=r(j_t,"HubertForCTC"),j_t.forEach(t),JKo=r(q$e," (Hubert model)"),q$e.forEach(t),YKo=i(Ve),jv=n(Ve,"LI",{});var N$e=s(jv);k_e=n(N$e,"STRONG",{});var D_t=s(k_e);KKo=r(D_t,"sew"),D_t.forEach(t),ZKo=r(N$e," \u2014 "),GX=n(N$e,"A",{href:!0});var G_t=s(GX);eZo=r(G_t,"SEWForCTC"),G_t.forEach(t),oZo=r(N$e," (SEW model)"),N$e.forEach(t),rZo=i(Ve),Dv=n(Ve,"LI",{});var j$e=s(Dv);S_e=n(j$e,"STRONG",{});var O_t=s(S_e);tZo=r(O_t,"sew-d"),O_t.forEach(t),aZo=r(j$e," \u2014 "),OX=n(j$e,"A",{href:!0});var V_t=s(OX);nZo=r(V_t,"SEWDForCTC"),V_t.forEach(t),sZo=r(j$e," (SEW-D model)"),j$e.forEach(t),lZo=i(Ve),Gv=n(Ve,"LI",{});var D$e=s(Gv);R_e=n(D$e,"STRONG",{});var X_t=s(R_e);iZo=r(X_t,"unispeech"),X_t.forEach(t),dZo=r(D$e," \u2014 "),VX=n(D$e,"A",{href:!0});var z_t=s(VX);cZo=r(z_t,"UniSpeechForCTC"),z_t.forEach(t),fZo=r(D$e," (UniSpeech model)"),D$e.forEach(t),mZo=i(Ve),Ov=n(Ve,"LI",{});var G$e=s(Ov);P_e=n(G$e,"STRONG",{});var W_t=s(P_e);gZo=r(W_t,"unispeech-sat"),W_t.forEach(t),hZo=r(G$e," \u2014 "),XX=n(G$e,"A",{href:!0});var Q_t=s(XX);pZo=r(Q_t,"UniSpeechSatForCTC"),Q_t.forEach(t),_Zo=r(G$e," (UniSpeechSat model)"),G$e.forEach(t),uZo=i(Ve),Vv=n(Ve,"LI",{});var O$e=s(Vv);B_e=n(O$e,"STRONG",{});var H_t=s(B_e);bZo=r(H_t,"wav2vec2"),H_t.forEach(t),vZo=r(O$e," \u2014 "),zX=n(O$e,"A",{href:!0});var U_t=s(zX);FZo=r(U_t,"Wav2Vec2ForCTC"),U_t.forEach(t),TZo=r(O$e," (Wav2Vec2 model)"),O$e.forEach(t),MZo=i(Ve),Xv=n(Ve,"LI",{});var V$e=s(Xv);I_e=n(V$e,"STRONG",{});var J_t=s(I_e);EZo=r(J_t,"wav2vec2-conformer"),J_t.forEach(t),CZo=r(V$e," \u2014 "),WX=n(V$e,"A",{href:!0});var Y_t=s(WX);wZo=r(Y_t,"Wav2Vec2ConformerForCTC"),Y_t.forEach(t),AZo=r(V$e," (Wav2Vec2-Conformer model)"),V$e.forEach(t),yZo=i(Ve),zv=n(Ve,"LI",{});var X$e=s(zv);q_e=n(X$e,"STRONG",{});var K_t=s(q_e);LZo=r(K_t,"wavlm"),K_t.forEach(t),xZo=r(X$e," \u2014 "),QX=n(X$e,"A",{href:!0});var Z_t=s(QX);$Zo=r(Z_t,"WavLMForCTC"),Z_t.forEach(t),kZo=r(X$e," (WavLM model)"),X$e.forEach(t),Ve.forEach(t),SZo=i(_a),Wv=n(_a,"P",{});var z$e=s(Wv);RZo=r(z$e,"The model is set in evaluation mode by default using "),N_e=n(z$e,"CODE",{});var eut=s(N_e);PZo=r(eut,"model.eval()"),eut.forEach(t),BZo=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=n(z$e,"CODE",{});var out=s(j_e);IZo=r(out,"model.train()"),out.forEach(t),z$e.forEach(t),qZo=i(_a),T(Qv.$$.fragment,_a),_a.forEach(t),al.forEach(t),zqe=i(f),vd=n(f,"H2",{class:!0});var Uje=s(vd);Hv=n(Uje,"A",{id:!0,class:!0,href:!0});var rut=s(Hv);D_e=n(rut,"SPAN",{});var tut=s(D_e);T(mL.$$.fragment,tut),tut.forEach(t),rut.forEach(t),NZo=i(Uje),G_e=n(Uje,"SPAN",{});var aut=s(G_e);jZo=r(aut,"AutoModelForSpeechSeq2Seq"),aut.forEach(t),Uje.forEach(t),Wqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(gL.$$.fragment,nl),DZo=i(nl),Fd=n(nl,"P",{});var TZ=s(Fd);GZo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HX=n(TZ,"A",{href:!0});var nut=s(HX);OZo=r(nut,"from_pretrained()"),nut.forEach(t),VZo=r(TZ," class method or the "),UX=n(TZ,"A",{href:!0});var sut=s(UX);XZo=r(sut,"from_config()"),sut.forEach(t),zZo=r(TZ,` class
method.`),TZ.forEach(t),WZo=i(nl),hL=n(nl,"P",{});var Jje=s(hL);QZo=r(Jje,"This class cannot be instantiated directly using "),O_e=n(Jje,"CODE",{});var lut=s(O_e);HZo=r(lut,"__init__()"),lut.forEach(t),UZo=r(Jje," (throws an error)."),Jje.forEach(t),JZo=i(nl),Ft=n(nl,"DIV",{class:!0});var J0=s(Ft);T(pL.$$.fragment,J0),YZo=i(J0),V_e=n(J0,"P",{});var iut=s(V_e);KZo=r(iut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iut.forEach(t),ZZo=i(J0),Td=n(J0,"P",{});var MZ=s(Td);eer=r(MZ,`Note:
Loading a model from its configuration file does `),X_e=n(MZ,"STRONG",{});var dut=s(X_e);oer=r(dut,"not"),dut.forEach(t),rer=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(MZ,"A",{href:!0});var cut=s(JX);ter=r(cut,"from_pretrained()"),cut.forEach(t),aer=r(MZ," to load the model weights."),MZ.forEach(t),ner=i(J0),T(Uv.$$.fragment,J0),J0.forEach(t),ser=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(_L.$$.fragment,ua),ler=i(ua),z_e=n(ua,"P",{});var fut=s(z_e);ier=r(fut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fut.forEach(t),der=i(ua),Xa=n(ua,"P",{});var Y0=s(Xa);cer=r(Y0,"The model class to instantiate is selected based on the "),W_e=n(Y0,"CODE",{});var mut=s(W_e);fer=r(mut,"model_type"),mut.forEach(t),mer=r(Y0,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(Y0,"CODE",{});var gut=s(Q_e);ger=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),her=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(Y0,"CODE",{});var hut=s(H_e);per=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),_er=r(Y0,":"),Y0.forEach(t),uer=i(ua),uL=n(ua,"UL",{});var Yje=s(uL);Jv=n(Yje,"LI",{});var W$e=s(Jv);U_e=n(W$e,"STRONG",{});var put=s(U_e);ber=r(put,"speech-encoder-decoder"),put.forEach(t),ver=r(W$e," \u2014 "),YX=n(W$e,"A",{href:!0});var _ut=s(YX);Fer=r(_ut,"SpeechEncoderDecoderModel"),_ut.forEach(t),Ter=r(W$e," (Speech Encoder decoder model)"),W$e.forEach(t),Mer=i(Yje),Yv=n(Yje,"LI",{});var Q$e=s(Yv);J_e=n(Q$e,"STRONG",{});var uut=s(J_e);Eer=r(uut,"speech_to_text"),uut.forEach(t),Cer=r(Q$e," \u2014 "),KX=n(Q$e,"A",{href:!0});var but=s(KX);wer=r(but,"Speech2TextForConditionalGeneration"),but.forEach(t),Aer=r(Q$e," (Speech2Text model)"),Q$e.forEach(t),Yje.forEach(t),yer=i(ua),Kv=n(ua,"P",{});var H$e=s(Kv);Ler=r(H$e,"The model is set in evaluation mode by default using "),Y_e=n(H$e,"CODE",{});var vut=s(Y_e);xer=r(vut,"model.eval()"),vut.forEach(t),$er=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(H$e,"CODE",{});var Fut=s(K_e);ker=r(Fut,"model.train()"),Fut.forEach(t),H$e.forEach(t),Ser=i(ua),T(Zv.$$.fragment,ua),ua.forEach(t),nl.forEach(t),Qqe=i(f),Md=n(f,"H2",{class:!0});var Kje=s(Md);eF=n(Kje,"A",{id:!0,class:!0,href:!0});var Tut=s(eF);Z_e=n(Tut,"SPAN",{});var Mut=s(Z_e);T(bL.$$.fragment,Mut),Mut.forEach(t),Tut.forEach(t),Rer=i(Kje),eue=n(Kje,"SPAN",{});var Eut=s(eue);Per=r(Eut,"AutoModelForAudioXVector"),Eut.forEach(t),Kje.forEach(t),Hqe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(vL.$$.fragment,sl),Ber=i(sl),Ed=n(sl,"P",{});var EZ=s(Ed);Ier=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZX=n(EZ,"A",{href:!0});var Cut=s(ZX);qer=r(Cut,"from_pretrained()"),Cut.forEach(t),Ner=r(EZ," class method or the "),ez=n(EZ,"A",{href:!0});var wut=s(ez);jer=r(wut,"from_config()"),wut.forEach(t),Der=r(EZ,` class
method.`),EZ.forEach(t),Ger=i(sl),FL=n(sl,"P",{});var Zje=s(FL);Oer=r(Zje,"This class cannot be instantiated directly using "),oue=n(Zje,"CODE",{});var Aut=s(oue);Ver=r(Aut,"__init__()"),Aut.forEach(t),Xer=r(Zje," (throws an error)."),Zje.forEach(t),zer=i(sl),Tt=n(sl,"DIV",{class:!0});var K0=s(Tt);T(TL.$$.fragment,K0),Wer=i(K0),rue=n(K0,"P",{});var yut=s(rue);Qer=r(yut,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),yut.forEach(t),Her=i(K0),Cd=n(K0,"P",{});var CZ=s(Cd);Uer=r(CZ,`Note:
Loading a model from its configuration file does `),tue=n(CZ,"STRONG",{});var Lut=s(tue);Jer=r(Lut,"not"),Lut.forEach(t),Yer=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(CZ,"A",{href:!0});var xut=s(oz);Ker=r(xut,"from_pretrained()"),xut.forEach(t),Zer=r(CZ," to load the model weights."),CZ.forEach(t),eor=i(K0),T(oF.$$.fragment,K0),K0.forEach(t),oor=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(ML.$$.fragment,ba),ror=i(ba),aue=n(ba,"P",{});var $ut=s(aue);tor=r($ut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$ut.forEach(t),aor=i(ba),za=n(ba,"P",{});var Z0=s(za);nor=r(Z0,"The model class to instantiate is selected based on the "),nue=n(Z0,"CODE",{});var kut=s(nue);sor=r(kut,"model_type"),kut.forEach(t),lor=r(Z0,` property of the config object (either
passed as an argument or loaded from `),sue=n(Z0,"CODE",{});var Sut=s(sue);ior=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),dor=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(Z0,"CODE",{});var Rut=s(lue);cor=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),mor=r(Z0,":"),Z0.forEach(t),gor=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);rF=n(ll,"LI",{});var U$e=s(rF);iue=n(U$e,"STRONG",{});var Put=s(iue);hor=r(Put,"data2vec-audio"),Put.forEach(t),por=r(U$e," \u2014 "),rz=n(U$e,"A",{href:!0});var But=s(rz);_or=r(But,"Data2VecAudioForXVector"),But.forEach(t),uor=r(U$e," (Data2VecAudio model)"),U$e.forEach(t),bor=i(ll),tF=n(ll,"LI",{});var J$e=s(tF);due=n(J$e,"STRONG",{});var Iut=s(due);vor=r(Iut,"unispeech-sat"),Iut.forEach(t),For=r(J$e," \u2014 "),tz=n(J$e,"A",{href:!0});var qut=s(tz);Tor=r(qut,"UniSpeechSatForXVector"),qut.forEach(t),Mor=r(J$e," (UniSpeechSat model)"),J$e.forEach(t),Eor=i(ll),aF=n(ll,"LI",{});var Y$e=s(aF);cue=n(Y$e,"STRONG",{});var Nut=s(cue);Cor=r(Nut,"wav2vec2"),Nut.forEach(t),wor=r(Y$e," \u2014 "),az=n(Y$e,"A",{href:!0});var jut=s(az);Aor=r(jut,"Wav2Vec2ForXVector"),jut.forEach(t),yor=r(Y$e," (Wav2Vec2 model)"),Y$e.forEach(t),Lor=i(ll),nF=n(ll,"LI",{});var K$e=s(nF);fue=n(K$e,"STRONG",{});var Dut=s(fue);xor=r(Dut,"wav2vec2-conformer"),Dut.forEach(t),$or=r(K$e," \u2014 "),nz=n(K$e,"A",{href:!0});var Gut=s(nz);kor=r(Gut,"Wav2Vec2ConformerForXVector"),Gut.forEach(t),Sor=r(K$e," (Wav2Vec2-Conformer model)"),K$e.forEach(t),Ror=i(ll),sF=n(ll,"LI",{});var Z$e=s(sF);mue=n(Z$e,"STRONG",{});var Out=s(mue);Por=r(Out,"wavlm"),Out.forEach(t),Bor=r(Z$e," \u2014 "),sz=n(Z$e,"A",{href:!0});var Vut=s(sz);Ior=r(Vut,"WavLMForXVector"),Vut.forEach(t),qor=r(Z$e," (WavLM model)"),Z$e.forEach(t),ll.forEach(t),Nor=i(ba),lF=n(ba,"P",{});var eke=s(lF);jor=r(eke,"The model is set in evaluation mode by default using "),gue=n(eke,"CODE",{});var Xut=s(gue);Dor=r(Xut,"model.eval()"),Xut.forEach(t),Gor=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=n(eke,"CODE",{});var zut=s(hue);Oor=r(zut,"model.train()"),zut.forEach(t),eke.forEach(t),Vor=i(ba),T(iF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),Uqe=i(f),wd=n(f,"H2",{class:!0});var eDe=s(wd);dF=n(eDe,"A",{id:!0,class:!0,href:!0});var Wut=s(dF);pue=n(Wut,"SPAN",{});var Qut=s(pue);T(EL.$$.fragment,Qut),Qut.forEach(t),Wut.forEach(t),Xor=i(eDe),_ue=n(eDe,"SPAN",{});var Hut=s(_ue);zor=r(Hut,"AutoModelForMaskedImageModeling"),Hut.forEach(t),eDe.forEach(t),Jqe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(CL.$$.fragment,il),Wor=i(il),Ad=n(il,"P",{});var wZ=s(Ad);Qor=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lz=n(wZ,"A",{href:!0});var Uut=s(lz);Hor=r(Uut,"from_pretrained()"),Uut.forEach(t),Uor=r(wZ," class method or the "),iz=n(wZ,"A",{href:!0});var Jut=s(iz);Jor=r(Jut,"from_config()"),Jut.forEach(t),Yor=r(wZ,` class
method.`),wZ.forEach(t),Kor=i(il),wL=n(il,"P",{});var oDe=s(wL);Zor=r(oDe,"This class cannot be instantiated directly using "),uue=n(oDe,"CODE",{});var Yut=s(uue);err=r(Yut,"__init__()"),Yut.forEach(t),orr=r(oDe," (throws an error)."),oDe.forEach(t),rrr=i(il),Mt=n(il,"DIV",{class:!0});var eA=s(Mt);T(AL.$$.fragment,eA),trr=i(eA),bue=n(eA,"P",{});var Kut=s(bue);arr=r(Kut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Kut.forEach(t),nrr=i(eA),yd=n(eA,"P",{});var AZ=s(yd);srr=r(AZ,`Note:
Loading a model from its configuration file does `),vue=n(AZ,"STRONG",{});var Zut=s(vue);lrr=r(Zut,"not"),Zut.forEach(t),irr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(AZ,"A",{href:!0});var e2t=s(dz);drr=r(e2t,"from_pretrained()"),e2t.forEach(t),crr=r(AZ," to load the model weights."),AZ.forEach(t),frr=i(eA),T(cF.$$.fragment,eA),eA.forEach(t),mrr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(yL.$$.fragment,va),grr=i(va),Fue=n(va,"P",{});var o2t=s(Fue);hrr=r(o2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),o2t.forEach(t),prr=i(va),Wa=n(va,"P",{});var oA=s(Wa);_rr=r(oA,"The model class to instantiate is selected based on the "),Tue=n(oA,"CODE",{});var r2t=s(Tue);urr=r(r2t,"model_type"),r2t.forEach(t),brr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Mue=n(oA,"CODE",{});var t2t=s(Mue);vrr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),Frr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(oA,"CODE",{});var a2t=s(Eue);Trr=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),Mrr=r(oA,":"),oA.forEach(t),Err=i(va),Ld=n(va,"UL",{});var yZ=s(Ld);fF=n(yZ,"LI",{});var oke=s(fF);Cue=n(oke,"STRONG",{});var n2t=s(Cue);Crr=r(n2t,"deit"),n2t.forEach(t),wrr=r(oke," \u2014 "),cz=n(oke,"A",{href:!0});var s2t=s(cz);Arr=r(s2t,"DeiTForMaskedImageModeling"),s2t.forEach(t),yrr=r(oke," (DeiT model)"),oke.forEach(t),Lrr=i(yZ),mF=n(yZ,"LI",{});var rke=s(mF);wue=n(rke,"STRONG",{});var l2t=s(wue);xrr=r(l2t,"swin"),l2t.forEach(t),$rr=r(rke," \u2014 "),fz=n(rke,"A",{href:!0});var i2t=s(fz);krr=r(i2t,"SwinForMaskedImageModeling"),i2t.forEach(t),Srr=r(rke," (Swin model)"),rke.forEach(t),Rrr=i(yZ),gF=n(yZ,"LI",{});var tke=s(gF);Aue=n(tke,"STRONG",{});var d2t=s(Aue);Prr=r(d2t,"vit"),d2t.forEach(t),Brr=r(tke," \u2014 "),mz=n(tke,"A",{href:!0});var c2t=s(mz);Irr=r(c2t,"ViTForMaskedImageModeling"),c2t.forEach(t),qrr=r(tke," (ViT model)"),tke.forEach(t),yZ.forEach(t),Nrr=i(va),hF=n(va,"P",{});var ake=s(hF);jrr=r(ake,"The model is set in evaluation mode by default using "),yue=n(ake,"CODE",{});var f2t=s(yue);Drr=r(f2t,"model.eval()"),f2t.forEach(t),Grr=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(ake,"CODE",{});var m2t=s(Lue);Orr=r(m2t,"model.train()"),m2t.forEach(t),ake.forEach(t),Vrr=i(va),T(pF.$$.fragment,va),va.forEach(t),il.forEach(t),Yqe=i(f),xd=n(f,"H2",{class:!0});var rDe=s(xd);_F=n(rDe,"A",{id:!0,class:!0,href:!0});var g2t=s(_F);xue=n(g2t,"SPAN",{});var h2t=s(xue);T(LL.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),Xrr=i(rDe),$ue=n(rDe,"SPAN",{});var p2t=s($ue);zrr=r(p2t,"AutoModelForObjectDetection"),p2t.forEach(t),rDe.forEach(t),Kqe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(xL.$$.fragment,dl),Wrr=i(dl),$d=n(dl,"P",{});var LZ=s($d);Qrr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gz=n(LZ,"A",{href:!0});var _2t=s(gz);Hrr=r(_2t,"from_pretrained()"),_2t.forEach(t),Urr=r(LZ," class method or the "),hz=n(LZ,"A",{href:!0});var u2t=s(hz);Jrr=r(u2t,"from_config()"),u2t.forEach(t),Yrr=r(LZ,` class
method.`),LZ.forEach(t),Krr=i(dl),$L=n(dl,"P",{});var tDe=s($L);Zrr=r(tDe,"This class cannot be instantiated directly using "),kue=n(tDe,"CODE",{});var b2t=s(kue);etr=r(b2t,"__init__()"),b2t.forEach(t),otr=r(tDe," (throws an error)."),tDe.forEach(t),rtr=i(dl),Et=n(dl,"DIV",{class:!0});var rA=s(Et);T(kL.$$.fragment,rA),ttr=i(rA),Sue=n(rA,"P",{});var v2t=s(Sue);atr=r(v2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),v2t.forEach(t),ntr=i(rA),kd=n(rA,"P",{});var xZ=s(kd);str=r(xZ,`Note:
Loading a model from its configuration file does `),Rue=n(xZ,"STRONG",{});var F2t=s(Rue);ltr=r(F2t,"not"),F2t.forEach(t),itr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(xZ,"A",{href:!0});var T2t=s(pz);dtr=r(T2t,"from_pretrained()"),T2t.forEach(t),ctr=r(xZ," to load the model weights."),xZ.forEach(t),ftr=i(rA),T(uF.$$.fragment,rA),rA.forEach(t),mtr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(SL.$$.fragment,Fa),gtr=i(Fa),Pue=n(Fa,"P",{});var M2t=s(Pue);htr=r(M2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),M2t.forEach(t),ptr=i(Fa),Qa=n(Fa,"P",{});var tA=s(Qa);_tr=r(tA,"The model class to instantiate is selected based on the "),Bue=n(tA,"CODE",{});var E2t=s(Bue);utr=r(E2t,"model_type"),E2t.forEach(t),btr=r(tA,` property of the config object (either
passed as an argument or loaded from `),Iue=n(tA,"CODE",{});var C2t=s(Iue);vtr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),Ftr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(tA,"CODE",{});var w2t=s(que);Ttr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Mtr=r(tA,":"),tA.forEach(t),Etr=i(Fa),RL=n(Fa,"UL",{});var aDe=s(RL);bF=n(aDe,"LI",{});var nke=s(bF);Nue=n(nke,"STRONG",{});var A2t=s(Nue);Ctr=r(A2t,"detr"),A2t.forEach(t),wtr=r(nke," \u2014 "),_z=n(nke,"A",{href:!0});var y2t=s(_z);Atr=r(y2t,"DetrForObjectDetection"),y2t.forEach(t),ytr=r(nke," (DETR model)"),nke.forEach(t),Ltr=i(aDe),vF=n(aDe,"LI",{});var ske=s(vF);jue=n(ske,"STRONG",{});var L2t=s(jue);xtr=r(L2t,"yolos"),L2t.forEach(t),$tr=r(ske," \u2014 "),uz=n(ske,"A",{href:!0});var x2t=s(uz);ktr=r(x2t,"YolosForObjectDetection"),x2t.forEach(t),Str=r(ske," (YOLOS model)"),ske.forEach(t),aDe.forEach(t),Rtr=i(Fa),FF=n(Fa,"P",{});var lke=s(FF);Ptr=r(lke,"The model is set in evaluation mode by default using "),Due=n(lke,"CODE",{});var $2t=s(Due);Btr=r($2t,"model.eval()"),$2t.forEach(t),Itr=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(lke,"CODE",{});var k2t=s(Gue);qtr=r(k2t,"model.train()"),k2t.forEach(t),lke.forEach(t),Ntr=i(Fa),T(TF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),Zqe=i(f),Sd=n(f,"H2",{class:!0});var nDe=s(Sd);MF=n(nDe,"A",{id:!0,class:!0,href:!0});var S2t=s(MF);Oue=n(S2t,"SPAN",{});var R2t=s(Oue);T(PL.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),jtr=i(nDe),Vue=n(nDe,"SPAN",{});var P2t=s(Vue);Dtr=r(P2t,"AutoModelForImageSegmentation"),P2t.forEach(t),nDe.forEach(t),eNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(BL.$$.fragment,cl),Gtr=i(cl),Rd=n(cl,"P",{});var $Z=s(Rd);Otr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bz=n($Z,"A",{href:!0});var B2t=s(bz);Vtr=r(B2t,"from_pretrained()"),B2t.forEach(t),Xtr=r($Z," class method or the "),vz=n($Z,"A",{href:!0});var I2t=s(vz);ztr=r(I2t,"from_config()"),I2t.forEach(t),Wtr=r($Z,` class
method.`),$Z.forEach(t),Qtr=i(cl),IL=n(cl,"P",{});var sDe=s(IL);Htr=r(sDe,"This class cannot be instantiated directly using "),Xue=n(sDe,"CODE",{});var q2t=s(Xue);Utr=r(q2t,"__init__()"),q2t.forEach(t),Jtr=r(sDe," (throws an error)."),sDe.forEach(t),Ytr=i(cl),Ct=n(cl,"DIV",{class:!0});var aA=s(Ct);T(qL.$$.fragment,aA),Ktr=i(aA),zue=n(aA,"P",{});var N2t=s(zue);Ztr=r(N2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),N2t.forEach(t),ear=i(aA),Pd=n(aA,"P",{});var kZ=s(Pd);oar=r(kZ,`Note:
Loading a model from its configuration file does `),Wue=n(kZ,"STRONG",{});var j2t=s(Wue);rar=r(j2t,"not"),j2t.forEach(t),tar=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(kZ,"A",{href:!0});var D2t=s(Fz);aar=r(D2t,"from_pretrained()"),D2t.forEach(t),nar=r(kZ," to load the model weights."),kZ.forEach(t),sar=i(aA),T(EF.$$.fragment,aA),aA.forEach(t),lar=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(NL.$$.fragment,Ta),iar=i(Ta),Que=n(Ta,"P",{});var G2t=s(Que);dar=r(G2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),G2t.forEach(t),car=i(Ta),Ha=n(Ta,"P",{});var nA=s(Ha);far=r(nA,"The model class to instantiate is selected based on the "),Hue=n(nA,"CODE",{});var O2t=s(Hue);mar=r(O2t,"model_type"),O2t.forEach(t),gar=r(nA,` property of the config object (either
passed as an argument or loaded from `),Uue=n(nA,"CODE",{});var V2t=s(Uue);har=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),par=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(nA,"CODE",{});var X2t=s(Jue);_ar=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),uar=r(nA,":"),nA.forEach(t),bar=i(Ta),Yue=n(Ta,"UL",{});var z2t=s(Yue);CF=n(z2t,"LI",{});var ike=s(CF);Kue=n(ike,"STRONG",{});var W2t=s(Kue);Far=r(W2t,"detr"),W2t.forEach(t),Tar=r(ike," \u2014 "),Tz=n(ike,"A",{href:!0});var Q2t=s(Tz);Mar=r(Q2t,"DetrForSegmentation"),Q2t.forEach(t),Ear=r(ike," (DETR model)"),ike.forEach(t),z2t.forEach(t),Car=i(Ta),wF=n(Ta,"P",{});var dke=s(wF);war=r(dke,"The model is set in evaluation mode by default using "),Zue=n(dke,"CODE",{});var H2t=s(Zue);Aar=r(H2t,"model.eval()"),H2t.forEach(t),yar=r(dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(dke,"CODE",{});var U2t=s(e2e);Lar=r(U2t,"model.train()"),U2t.forEach(t),dke.forEach(t),xar=i(Ta),T(AF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),oNe=i(f),Bd=n(f,"H2",{class:!0});var lDe=s(Bd);yF=n(lDe,"A",{id:!0,class:!0,href:!0});var J2t=s(yF);o2e=n(J2t,"SPAN",{});var Y2t=s(o2e);T(jL.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),$ar=i(lDe),r2e=n(lDe,"SPAN",{});var K2t=s(r2e);kar=r(K2t,"AutoModelForSemanticSegmentation"),K2t.forEach(t),lDe.forEach(t),rNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(DL.$$.fragment,fl),Sar=i(fl),Id=n(fl,"P",{});var SZ=s(Id);Rar=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mz=n(SZ,"A",{href:!0});var Z2t=s(Mz);Par=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Bar=r(SZ," class method or the "),Ez=n(SZ,"A",{href:!0});var e1t=s(Ez);Iar=r(e1t,"from_config()"),e1t.forEach(t),qar=r(SZ,` class
method.`),SZ.forEach(t),Nar=i(fl),GL=n(fl,"P",{});var iDe=s(GL);jar=r(iDe,"This class cannot be instantiated directly using "),t2e=n(iDe,"CODE",{});var o1t=s(t2e);Dar=r(o1t,"__init__()"),o1t.forEach(t),Gar=r(iDe," (throws an error)."),iDe.forEach(t),Oar=i(fl),wt=n(fl,"DIV",{class:!0});var sA=s(wt);T(OL.$$.fragment,sA),Var=i(sA),a2e=n(sA,"P",{});var r1t=s(a2e);Xar=r(r1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),r1t.forEach(t),zar=i(sA),qd=n(sA,"P",{});var RZ=s(qd);War=r(RZ,`Note:
Loading a model from its configuration file does `),n2e=n(RZ,"STRONG",{});var t1t=s(n2e);Qar=r(t1t,"not"),t1t.forEach(t),Har=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(RZ,"A",{href:!0});var a1t=s(Cz);Uar=r(a1t,"from_pretrained()"),a1t.forEach(t),Jar=r(RZ," to load the model weights."),RZ.forEach(t),Yar=i(sA),T(LF.$$.fragment,sA),sA.forEach(t),Kar=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(VL.$$.fragment,Ma),Zar=i(Ma),s2e=n(Ma,"P",{});var n1t=s(s2e);enr=r(n1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),n1t.forEach(t),onr=i(Ma),Ua=n(Ma,"P",{});var lA=s(Ua);rnr=r(lA,"The model class to instantiate is selected based on the "),l2e=n(lA,"CODE",{});var s1t=s(l2e);tnr=r(s1t,"model_type"),s1t.forEach(t),anr=r(lA,` property of the config object (either
passed as an argument or loaded from `),i2e=n(lA,"CODE",{});var l1t=s(i2e);nnr=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),snr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(lA,"CODE",{});var i1t=s(d2e);lnr=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),inr=r(lA,":"),lA.forEach(t),dnr=i(Ma),Ja=n(Ma,"UL",{});var iA=s(Ja);xF=n(iA,"LI",{});var cke=s(xF);c2e=n(cke,"STRONG",{});var d1t=s(c2e);cnr=r(d1t,"beit"),d1t.forEach(t),fnr=r(cke," \u2014 "),wz=n(cke,"A",{href:!0});var c1t=s(wz);mnr=r(c1t,"BeitForSemanticSegmentation"),c1t.forEach(t),gnr=r(cke," (BEiT model)"),cke.forEach(t),hnr=i(iA),$F=n(iA,"LI",{});var fke=s($F);f2e=n(fke,"STRONG",{});var f1t=s(f2e);pnr=r(f1t,"data2vec-vision"),f1t.forEach(t),_nr=r(fke," \u2014 "),Az=n(fke,"A",{href:!0});var m1t=s(Az);unr=r(m1t,"Data2VecVisionForSemanticSegmentation"),m1t.forEach(t),bnr=r(fke," (Data2VecVision model)"),fke.forEach(t),vnr=i(iA),kF=n(iA,"LI",{});var mke=s(kF);m2e=n(mke,"STRONG",{});var g1t=s(m2e);Fnr=r(g1t,"dpt"),g1t.forEach(t),Tnr=r(mke," \u2014 "),yz=n(mke,"A",{href:!0});var h1t=s(yz);Mnr=r(h1t,"DPTForSemanticSegmentation"),h1t.forEach(t),Enr=r(mke," (DPT model)"),mke.forEach(t),Cnr=i(iA),SF=n(iA,"LI",{});var gke=s(SF);g2e=n(gke,"STRONG",{});var p1t=s(g2e);wnr=r(p1t,"segformer"),p1t.forEach(t),Anr=r(gke," \u2014 "),Lz=n(gke,"A",{href:!0});var _1t=s(Lz);ynr=r(_1t,"SegformerForSemanticSegmentation"),_1t.forEach(t),Lnr=r(gke," (SegFormer model)"),gke.forEach(t),iA.forEach(t),xnr=i(Ma),RF=n(Ma,"P",{});var hke=s(RF);$nr=r(hke,"The model is set in evaluation mode by default using "),h2e=n(hke,"CODE",{});var u1t=s(h2e);knr=r(u1t,"model.eval()"),u1t.forEach(t),Snr=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=n(hke,"CODE",{});var b1t=s(p2e);Rnr=r(b1t,"model.train()"),b1t.forEach(t),hke.forEach(t),Pnr=i(Ma),T(PF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),tNe=i(f),Nd=n(f,"H2",{class:!0});var dDe=s(Nd);BF=n(dDe,"A",{id:!0,class:!0,href:!0});var v1t=s(BF);_2e=n(v1t,"SPAN",{});var F1t=s(_2e);T(XL.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),Bnr=i(dDe),u2e=n(dDe,"SPAN",{});var T1t=s(u2e);Inr=r(T1t,"AutoModelForInstanceSegmentation"),T1t.forEach(t),dDe.forEach(t),aNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(zL.$$.fragment,ml),qnr=i(ml),jd=n(ml,"P",{});var PZ=s(jd);Nnr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xz=n(PZ,"A",{href:!0});var M1t=s(xz);jnr=r(M1t,"from_pretrained()"),M1t.forEach(t),Dnr=r(PZ," class method or the "),$z=n(PZ,"A",{href:!0});var E1t=s($z);Gnr=r(E1t,"from_config()"),E1t.forEach(t),Onr=r(PZ,` class
method.`),PZ.forEach(t),Vnr=i(ml),WL=n(ml,"P",{});var cDe=s(WL);Xnr=r(cDe,"This class cannot be instantiated directly using "),b2e=n(cDe,"CODE",{});var C1t=s(b2e);znr=r(C1t,"__init__()"),C1t.forEach(t),Wnr=r(cDe," (throws an error)."),cDe.forEach(t),Qnr=i(ml),At=n(ml,"DIV",{class:!0});var dA=s(At);T(QL.$$.fragment,dA),Hnr=i(dA),v2e=n(dA,"P",{});var w1t=s(v2e);Unr=r(w1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),w1t.forEach(t),Jnr=i(dA),Dd=n(dA,"P",{});var BZ=s(Dd);Ynr=r(BZ,`Note:
Loading a model from its configuration file does `),F2e=n(BZ,"STRONG",{});var A1t=s(F2e);Knr=r(A1t,"not"),A1t.forEach(t),Znr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(BZ,"A",{href:!0});var y1t=s(kz);esr=r(y1t,"from_pretrained()"),y1t.forEach(t),osr=r(BZ," to load the model weights."),BZ.forEach(t),rsr=i(dA),T(IF.$$.fragment,dA),dA.forEach(t),tsr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(HL.$$.fragment,Ea),asr=i(Ea),T2e=n(Ea,"P",{});var L1t=s(T2e);nsr=r(L1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),L1t.forEach(t),ssr=i(Ea),Ya=n(Ea,"P",{});var cA=s(Ya);lsr=r(cA,"The model class to instantiate is selected based on the "),M2e=n(cA,"CODE",{});var x1t=s(M2e);isr=r(x1t,"model_type"),x1t.forEach(t),dsr=r(cA,` property of the config object (either
passed as an argument or loaded from `),E2e=n(cA,"CODE",{});var $1t=s(E2e);csr=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),fsr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(cA,"CODE",{});var k1t=s(C2e);msr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),gsr=r(cA,":"),cA.forEach(t),hsr=i(Ea),w2e=n(Ea,"UL",{});var S1t=s(w2e);qF=n(S1t,"LI",{});var pke=s(qF);A2e=n(pke,"STRONG",{});var R1t=s(A2e);psr=r(R1t,"maskformer"),R1t.forEach(t),_sr=r(pke," \u2014 "),Sz=n(pke,"A",{href:!0});var P1t=s(Sz);usr=r(P1t,"MaskFormerForInstanceSegmentation"),P1t.forEach(t),bsr=r(pke," (MaskFormer model)"),pke.forEach(t),S1t.forEach(t),vsr=i(Ea),NF=n(Ea,"P",{});var _ke=s(NF);Fsr=r(_ke,"The model is set in evaluation mode by default using "),y2e=n(_ke,"CODE",{});var B1t=s(y2e);Tsr=r(B1t,"model.eval()"),B1t.forEach(t),Msr=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(_ke,"CODE",{});var I1t=s(L2e);Esr=r(I1t,"model.train()"),I1t.forEach(t),_ke.forEach(t),Csr=i(Ea),T(jF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),nNe=i(f),Gd=n(f,"H2",{class:!0});var fDe=s(Gd);DF=n(fDe,"A",{id:!0,class:!0,href:!0});var q1t=s(DF);x2e=n(q1t,"SPAN",{});var N1t=s(x2e);T(UL.$$.fragment,N1t),N1t.forEach(t),q1t.forEach(t),wsr=i(fDe),$2e=n(fDe,"SPAN",{});var j1t=s($2e);Asr=r(j1t,"TFAutoModel"),j1t.forEach(t),fDe.forEach(t),sNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(JL.$$.fragment,gl),ysr=i(gl),Od=n(gl,"P",{});var IZ=s(Od);Lsr=r(IZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rz=n(IZ,"A",{href:!0});var D1t=s(Rz);xsr=r(D1t,"from_pretrained()"),D1t.forEach(t),$sr=r(IZ," class method or the "),Pz=n(IZ,"A",{href:!0});var G1t=s(Pz);ksr=r(G1t,"from_config()"),G1t.forEach(t),Ssr=r(IZ,` class
method.`),IZ.forEach(t),Rsr=i(gl),YL=n(gl,"P",{});var mDe=s(YL);Psr=r(mDe,"This class cannot be instantiated directly using "),k2e=n(mDe,"CODE",{});var O1t=s(k2e);Bsr=r(O1t,"__init__()"),O1t.forEach(t),Isr=r(mDe," (throws an error)."),mDe.forEach(t),qsr=i(gl),yt=n(gl,"DIV",{class:!0});var fA=s(yt);T(KL.$$.fragment,fA),Nsr=i(fA),S2e=n(fA,"P",{});var V1t=s(S2e);jsr=r(V1t,"Instantiates one of the base model classes of the library from a configuration."),V1t.forEach(t),Dsr=i(fA),Vd=n(fA,"P",{});var qZ=s(Vd);Gsr=r(qZ,`Note:
Loading a model from its configuration file does `),R2e=n(qZ,"STRONG",{});var X1t=s(R2e);Osr=r(X1t,"not"),X1t.forEach(t),Vsr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(qZ,"A",{href:!0});var z1t=s(Bz);Xsr=r(z1t,"from_pretrained()"),z1t.forEach(t),zsr=r(qZ," to load the model weights."),qZ.forEach(t),Wsr=i(fA),T(GF.$$.fragment,fA),fA.forEach(t),Qsr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(ZL.$$.fragment,hl),Hsr=i(hl),P2e=n(hl,"P",{});var W1t=s(P2e);Usr=r(W1t,"Instantiate one of the base model classes of the library from a pretrained model."),W1t.forEach(t),Jsr=i(hl),Ka=n(hl,"P",{});var mA=s(Ka);Ysr=r(mA,"The model class to instantiate is selected based on the "),B2e=n(mA,"CODE",{});var Q1t=s(B2e);Ksr=r(Q1t,"model_type"),Q1t.forEach(t),Zsr=r(mA,` property of the config object (either
passed as an argument or loaded from `),I2e=n(mA,"CODE",{});var H1t=s(I2e);elr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),olr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(mA,"CODE",{});var U1t=s(q2e);rlr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),tlr=r(mA,":"),mA.forEach(t),alr=i(hl),N=n(hl,"UL",{});var D=s(N);OF=n(D,"LI",{});var uke=s(OF);N2e=n(uke,"STRONG",{});var J1t=s(N2e);nlr=r(J1t,"albert"),J1t.forEach(t),slr=r(uke," \u2014 "),Iz=n(uke,"A",{href:!0});var Y1t=s(Iz);llr=r(Y1t,"TFAlbertModel"),Y1t.forEach(t),ilr=r(uke," (ALBERT model)"),uke.forEach(t),dlr=i(D),VF=n(D,"LI",{});var bke=s(VF);j2e=n(bke,"STRONG",{});var K1t=s(j2e);clr=r(K1t,"bart"),K1t.forEach(t),flr=r(bke," \u2014 "),qz=n(bke,"A",{href:!0});var Z1t=s(qz);mlr=r(Z1t,"TFBartModel"),Z1t.forEach(t),glr=r(bke," (BART model)"),bke.forEach(t),hlr=i(D),XF=n(D,"LI",{});var vke=s(XF);D2e=n(vke,"STRONG",{});var ebt=s(D2e);plr=r(ebt,"bert"),ebt.forEach(t),_lr=r(vke," \u2014 "),Nz=n(vke,"A",{href:!0});var obt=s(Nz);ulr=r(obt,"TFBertModel"),obt.forEach(t),blr=r(vke," (BERT model)"),vke.forEach(t),vlr=i(D),zF=n(D,"LI",{});var Fke=s(zF);G2e=n(Fke,"STRONG",{});var rbt=s(G2e);Flr=r(rbt,"blenderbot"),rbt.forEach(t),Tlr=r(Fke," \u2014 "),jz=n(Fke,"A",{href:!0});var tbt=s(jz);Mlr=r(tbt,"TFBlenderbotModel"),tbt.forEach(t),Elr=r(Fke," (Blenderbot model)"),Fke.forEach(t),Clr=i(D),WF=n(D,"LI",{});var Tke=s(WF);O2e=n(Tke,"STRONG",{});var abt=s(O2e);wlr=r(abt,"blenderbot-small"),abt.forEach(t),Alr=r(Tke," \u2014 "),Dz=n(Tke,"A",{href:!0});var nbt=s(Dz);ylr=r(nbt,"TFBlenderbotSmallModel"),nbt.forEach(t),Llr=r(Tke," (BlenderbotSmall model)"),Tke.forEach(t),xlr=i(D),QF=n(D,"LI",{});var Mke=s(QF);V2e=n(Mke,"STRONG",{});var sbt=s(V2e);$lr=r(sbt,"camembert"),sbt.forEach(t),klr=r(Mke," \u2014 "),Gz=n(Mke,"A",{href:!0});var lbt=s(Gz);Slr=r(lbt,"TFCamembertModel"),lbt.forEach(t),Rlr=r(Mke," (CamemBERT model)"),Mke.forEach(t),Plr=i(D),HF=n(D,"LI",{});var Eke=s(HF);X2e=n(Eke,"STRONG",{});var ibt=s(X2e);Blr=r(ibt,"clip"),ibt.forEach(t),Ilr=r(Eke," \u2014 "),Oz=n(Eke,"A",{href:!0});var dbt=s(Oz);qlr=r(dbt,"TFCLIPModel"),dbt.forEach(t),Nlr=r(Eke," (CLIP model)"),Eke.forEach(t),jlr=i(D),UF=n(D,"LI",{});var Cke=s(UF);z2e=n(Cke,"STRONG",{});var cbt=s(z2e);Dlr=r(cbt,"convbert"),cbt.forEach(t),Glr=r(Cke," \u2014 "),Vz=n(Cke,"A",{href:!0});var fbt=s(Vz);Olr=r(fbt,"TFConvBertModel"),fbt.forEach(t),Vlr=r(Cke," (ConvBERT model)"),Cke.forEach(t),Xlr=i(D),JF=n(D,"LI",{});var wke=s(JF);W2e=n(wke,"STRONG",{});var mbt=s(W2e);zlr=r(mbt,"convnext"),mbt.forEach(t),Wlr=r(wke," \u2014 "),Xz=n(wke,"A",{href:!0});var gbt=s(Xz);Qlr=r(gbt,"TFConvNextModel"),gbt.forEach(t),Hlr=r(wke," (ConvNext model)"),wke.forEach(t),Ulr=i(D),YF=n(D,"LI",{});var Ake=s(YF);Q2e=n(Ake,"STRONG",{});var hbt=s(Q2e);Jlr=r(hbt,"ctrl"),hbt.forEach(t),Ylr=r(Ake," \u2014 "),zz=n(Ake,"A",{href:!0});var pbt=s(zz);Klr=r(pbt,"TFCTRLModel"),pbt.forEach(t),Zlr=r(Ake," (CTRL model)"),Ake.forEach(t),eir=i(D),KF=n(D,"LI",{});var yke=s(KF);H2e=n(yke,"STRONG",{});var _bt=s(H2e);oir=r(_bt,"data2vec-vision"),_bt.forEach(t),rir=r(yke," \u2014 "),Wz=n(yke,"A",{href:!0});var ubt=s(Wz);tir=r(ubt,"TFData2VecVisionModel"),ubt.forEach(t),air=r(yke," (Data2VecVision model)"),yke.forEach(t),nir=i(D),ZF=n(D,"LI",{});var Lke=s(ZF);U2e=n(Lke,"STRONG",{});var bbt=s(U2e);sir=r(bbt,"deberta"),bbt.forEach(t),lir=r(Lke," \u2014 "),Qz=n(Lke,"A",{href:!0});var vbt=s(Qz);iir=r(vbt,"TFDebertaModel"),vbt.forEach(t),dir=r(Lke," (DeBERTa model)"),Lke.forEach(t),cir=i(D),eT=n(D,"LI",{});var xke=s(eT);J2e=n(xke,"STRONG",{});var Fbt=s(J2e);fir=r(Fbt,"deberta-v2"),Fbt.forEach(t),mir=r(xke," \u2014 "),Hz=n(xke,"A",{href:!0});var Tbt=s(Hz);gir=r(Tbt,"TFDebertaV2Model"),Tbt.forEach(t),hir=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),pir=i(D),oT=n(D,"LI",{});var $ke=s(oT);Y2e=n($ke,"STRONG",{});var Mbt=s(Y2e);_ir=r(Mbt,"distilbert"),Mbt.forEach(t),uir=r($ke," \u2014 "),Uz=n($ke,"A",{href:!0});var Ebt=s(Uz);bir=r(Ebt,"TFDistilBertModel"),Ebt.forEach(t),vir=r($ke," (DistilBERT model)"),$ke.forEach(t),Fir=i(D),rT=n(D,"LI",{});var kke=s(rT);K2e=n(kke,"STRONG",{});var Cbt=s(K2e);Tir=r(Cbt,"dpr"),Cbt.forEach(t),Mir=r(kke," \u2014 "),Jz=n(kke,"A",{href:!0});var wbt=s(Jz);Eir=r(wbt,"TFDPRQuestionEncoder"),wbt.forEach(t),Cir=r(kke," (DPR model)"),kke.forEach(t),wir=i(D),tT=n(D,"LI",{});var Ske=s(tT);Z2e=n(Ske,"STRONG",{});var Abt=s(Z2e);Air=r(Abt,"electra"),Abt.forEach(t),yir=r(Ske," \u2014 "),Yz=n(Ske,"A",{href:!0});var ybt=s(Yz);Lir=r(ybt,"TFElectraModel"),ybt.forEach(t),xir=r(Ske," (ELECTRA model)"),Ske.forEach(t),$ir=i(D),aT=n(D,"LI",{});var Rke=s(aT);e1e=n(Rke,"STRONG",{});var Lbt=s(e1e);kir=r(Lbt,"flaubert"),Lbt.forEach(t),Sir=r(Rke," \u2014 "),Kz=n(Rke,"A",{href:!0});var xbt=s(Kz);Rir=r(xbt,"TFFlaubertModel"),xbt.forEach(t),Pir=r(Rke," (FlauBERT model)"),Rke.forEach(t),Bir=i(D),Is=n(D,"LI",{});var k$=s(Is);o1e=n(k$,"STRONG",{});var $bt=s(o1e);Iir=r($bt,"funnel"),$bt.forEach(t),qir=r(k$," \u2014 "),Zz=n(k$,"A",{href:!0});var kbt=s(Zz);Nir=r(kbt,"TFFunnelModel"),kbt.forEach(t),jir=r(k$," or "),eW=n(k$,"A",{href:!0});var Sbt=s(eW);Dir=r(Sbt,"TFFunnelBaseModel"),Sbt.forEach(t),Gir=r(k$," (Funnel Transformer model)"),k$.forEach(t),Oir=i(D),nT=n(D,"LI",{});var Pke=s(nT);r1e=n(Pke,"STRONG",{});var Rbt=s(r1e);Vir=r(Rbt,"gpt2"),Rbt.forEach(t),Xir=r(Pke," \u2014 "),oW=n(Pke,"A",{href:!0});var Pbt=s(oW);zir=r(Pbt,"TFGPT2Model"),Pbt.forEach(t),Wir=r(Pke," (OpenAI GPT-2 model)"),Pke.forEach(t),Qir=i(D),sT=n(D,"LI",{});var Bke=s(sT);t1e=n(Bke,"STRONG",{});var Bbt=s(t1e);Hir=r(Bbt,"gptj"),Bbt.forEach(t),Uir=r(Bke," \u2014 "),rW=n(Bke,"A",{href:!0});var Ibt=s(rW);Jir=r(Ibt,"TFGPTJModel"),Ibt.forEach(t),Yir=r(Bke," (GPT-J model)"),Bke.forEach(t),Kir=i(D),lT=n(D,"LI",{});var Ike=s(lT);a1e=n(Ike,"STRONG",{});var qbt=s(a1e);Zir=r(qbt,"hubert"),qbt.forEach(t),edr=r(Ike," \u2014 "),tW=n(Ike,"A",{href:!0});var Nbt=s(tW);odr=r(Nbt,"TFHubertModel"),Nbt.forEach(t),rdr=r(Ike," (Hubert model)"),Ike.forEach(t),tdr=i(D),iT=n(D,"LI",{});var qke=s(iT);n1e=n(qke,"STRONG",{});var jbt=s(n1e);adr=r(jbt,"layoutlm"),jbt.forEach(t),ndr=r(qke," \u2014 "),aW=n(qke,"A",{href:!0});var Dbt=s(aW);sdr=r(Dbt,"TFLayoutLMModel"),Dbt.forEach(t),ldr=r(qke," (LayoutLM model)"),qke.forEach(t),idr=i(D),dT=n(D,"LI",{});var Nke=s(dT);s1e=n(Nke,"STRONG",{});var Gbt=s(s1e);ddr=r(Gbt,"led"),Gbt.forEach(t),cdr=r(Nke," \u2014 "),nW=n(Nke,"A",{href:!0});var Obt=s(nW);fdr=r(Obt,"TFLEDModel"),Obt.forEach(t),mdr=r(Nke," (LED model)"),Nke.forEach(t),gdr=i(D),cT=n(D,"LI",{});var jke=s(cT);l1e=n(jke,"STRONG",{});var Vbt=s(l1e);hdr=r(Vbt,"longformer"),Vbt.forEach(t),pdr=r(jke," \u2014 "),sW=n(jke,"A",{href:!0});var Xbt=s(sW);_dr=r(Xbt,"TFLongformerModel"),Xbt.forEach(t),udr=r(jke," (Longformer model)"),jke.forEach(t),bdr=i(D),fT=n(D,"LI",{});var Dke=s(fT);i1e=n(Dke,"STRONG",{});var zbt=s(i1e);vdr=r(zbt,"lxmert"),zbt.forEach(t),Fdr=r(Dke," \u2014 "),lW=n(Dke,"A",{href:!0});var Wbt=s(lW);Tdr=r(Wbt,"TFLxmertModel"),Wbt.forEach(t),Mdr=r(Dke," (LXMERT model)"),Dke.forEach(t),Edr=i(D),mT=n(D,"LI",{});var Gke=s(mT);d1e=n(Gke,"STRONG",{});var Qbt=s(d1e);Cdr=r(Qbt,"marian"),Qbt.forEach(t),wdr=r(Gke," \u2014 "),iW=n(Gke,"A",{href:!0});var Hbt=s(iW);Adr=r(Hbt,"TFMarianModel"),Hbt.forEach(t),ydr=r(Gke," (Marian model)"),Gke.forEach(t),Ldr=i(D),gT=n(D,"LI",{});var Oke=s(gT);c1e=n(Oke,"STRONG",{});var Ubt=s(c1e);xdr=r(Ubt,"mbart"),Ubt.forEach(t),$dr=r(Oke," \u2014 "),dW=n(Oke,"A",{href:!0});var Jbt=s(dW);kdr=r(Jbt,"TFMBartModel"),Jbt.forEach(t),Sdr=r(Oke," (mBART model)"),Oke.forEach(t),Rdr=i(D),hT=n(D,"LI",{});var Vke=s(hT);f1e=n(Vke,"STRONG",{});var Ybt=s(f1e);Pdr=r(Ybt,"mobilebert"),Ybt.forEach(t),Bdr=r(Vke," \u2014 "),cW=n(Vke,"A",{href:!0});var Kbt=s(cW);Idr=r(Kbt,"TFMobileBertModel"),Kbt.forEach(t),qdr=r(Vke," (MobileBERT model)"),Vke.forEach(t),Ndr=i(D),pT=n(D,"LI",{});var Xke=s(pT);m1e=n(Xke,"STRONG",{});var Zbt=s(m1e);jdr=r(Zbt,"mpnet"),Zbt.forEach(t),Ddr=r(Xke," \u2014 "),fW=n(Xke,"A",{href:!0});var e4t=s(fW);Gdr=r(e4t,"TFMPNetModel"),e4t.forEach(t),Odr=r(Xke," (MPNet model)"),Xke.forEach(t),Vdr=i(D),_T=n(D,"LI",{});var zke=s(_T);g1e=n(zke,"STRONG",{});var o4t=s(g1e);Xdr=r(o4t,"mt5"),o4t.forEach(t),zdr=r(zke," \u2014 "),mW=n(zke,"A",{href:!0});var r4t=s(mW);Wdr=r(r4t,"TFMT5Model"),r4t.forEach(t),Qdr=r(zke," (mT5 model)"),zke.forEach(t),Hdr=i(D),uT=n(D,"LI",{});var Wke=s(uT);h1e=n(Wke,"STRONG",{});var t4t=s(h1e);Udr=r(t4t,"openai-gpt"),t4t.forEach(t),Jdr=r(Wke," \u2014 "),gW=n(Wke,"A",{href:!0});var a4t=s(gW);Ydr=r(a4t,"TFOpenAIGPTModel"),a4t.forEach(t),Kdr=r(Wke," (OpenAI GPT model)"),Wke.forEach(t),Zdr=i(D),bT=n(D,"LI",{});var Qke=s(bT);p1e=n(Qke,"STRONG",{});var n4t=s(p1e);ecr=r(n4t,"pegasus"),n4t.forEach(t),ocr=r(Qke," \u2014 "),hW=n(Qke,"A",{href:!0});var s4t=s(hW);rcr=r(s4t,"TFPegasusModel"),s4t.forEach(t),tcr=r(Qke," (Pegasus model)"),Qke.forEach(t),acr=i(D),vT=n(D,"LI",{});var Hke=s(vT);_1e=n(Hke,"STRONG",{});var l4t=s(_1e);ncr=r(l4t,"rembert"),l4t.forEach(t),scr=r(Hke," \u2014 "),pW=n(Hke,"A",{href:!0});var i4t=s(pW);lcr=r(i4t,"TFRemBertModel"),i4t.forEach(t),icr=r(Hke," (RemBERT model)"),Hke.forEach(t),dcr=i(D),FT=n(D,"LI",{});var Uke=s(FT);u1e=n(Uke,"STRONG",{});var d4t=s(u1e);ccr=r(d4t,"roberta"),d4t.forEach(t),fcr=r(Uke," \u2014 "),_W=n(Uke,"A",{href:!0});var c4t=s(_W);mcr=r(c4t,"TFRobertaModel"),c4t.forEach(t),gcr=r(Uke," (RoBERTa model)"),Uke.forEach(t),hcr=i(D),TT=n(D,"LI",{});var Jke=s(TT);b1e=n(Jke,"STRONG",{});var f4t=s(b1e);pcr=r(f4t,"roformer"),f4t.forEach(t),_cr=r(Jke," \u2014 "),uW=n(Jke,"A",{href:!0});var m4t=s(uW);ucr=r(m4t,"TFRoFormerModel"),m4t.forEach(t),bcr=r(Jke," (RoFormer model)"),Jke.forEach(t),vcr=i(D),MT=n(D,"LI",{});var Yke=s(MT);v1e=n(Yke,"STRONG",{});var g4t=s(v1e);Fcr=r(g4t,"speech_to_text"),g4t.forEach(t),Tcr=r(Yke," \u2014 "),bW=n(Yke,"A",{href:!0});var h4t=s(bW);Mcr=r(h4t,"TFSpeech2TextModel"),h4t.forEach(t),Ecr=r(Yke," (Speech2Text model)"),Yke.forEach(t),Ccr=i(D),ET=n(D,"LI",{});var Kke=s(ET);F1e=n(Kke,"STRONG",{});var p4t=s(F1e);wcr=r(p4t,"swin"),p4t.forEach(t),Acr=r(Kke," \u2014 "),vW=n(Kke,"A",{href:!0});var _4t=s(vW);ycr=r(_4t,"TFSwinModel"),_4t.forEach(t),Lcr=r(Kke," (Swin model)"),Kke.forEach(t),xcr=i(D),CT=n(D,"LI",{});var Zke=s(CT);T1e=n(Zke,"STRONG",{});var u4t=s(T1e);$cr=r(u4t,"t5"),u4t.forEach(t),kcr=r(Zke," \u2014 "),FW=n(Zke,"A",{href:!0});var b4t=s(FW);Scr=r(b4t,"TFT5Model"),b4t.forEach(t),Rcr=r(Zke," (T5 model)"),Zke.forEach(t),Pcr=i(D),wT=n(D,"LI",{});var eSe=s(wT);M1e=n(eSe,"STRONG",{});var v4t=s(M1e);Bcr=r(v4t,"tapas"),v4t.forEach(t),Icr=r(eSe," \u2014 "),TW=n(eSe,"A",{href:!0});var F4t=s(TW);qcr=r(F4t,"TFTapasModel"),F4t.forEach(t),Ncr=r(eSe," (TAPAS model)"),eSe.forEach(t),jcr=i(D),AT=n(D,"LI",{});var oSe=s(AT);E1e=n(oSe,"STRONG",{});var T4t=s(E1e);Dcr=r(T4t,"transfo-xl"),T4t.forEach(t),Gcr=r(oSe," \u2014 "),MW=n(oSe,"A",{href:!0});var M4t=s(MW);Ocr=r(M4t,"TFTransfoXLModel"),M4t.forEach(t),Vcr=r(oSe," (Transformer-XL model)"),oSe.forEach(t),Xcr=i(D),yT=n(D,"LI",{});var rSe=s(yT);C1e=n(rSe,"STRONG",{});var E4t=s(C1e);zcr=r(E4t,"vit"),E4t.forEach(t),Wcr=r(rSe," \u2014 "),EW=n(rSe,"A",{href:!0});var C4t=s(EW);Qcr=r(C4t,"TFViTModel"),C4t.forEach(t),Hcr=r(rSe," (ViT model)"),rSe.forEach(t),Ucr=i(D),LT=n(D,"LI",{});var tSe=s(LT);w1e=n(tSe,"STRONG",{});var w4t=s(w1e);Jcr=r(w4t,"vit_mae"),w4t.forEach(t),Ycr=r(tSe," \u2014 "),CW=n(tSe,"A",{href:!0});var A4t=s(CW);Kcr=r(A4t,"TFViTMAEModel"),A4t.forEach(t),Zcr=r(tSe," (ViTMAE model)"),tSe.forEach(t),efr=i(D),xT=n(D,"LI",{});var aSe=s(xT);A1e=n(aSe,"STRONG",{});var y4t=s(A1e);ofr=r(y4t,"wav2vec2"),y4t.forEach(t),rfr=r(aSe," \u2014 "),wW=n(aSe,"A",{href:!0});var L4t=s(wW);tfr=r(L4t,"TFWav2Vec2Model"),L4t.forEach(t),afr=r(aSe," (Wav2Vec2 model)"),aSe.forEach(t),nfr=i(D),$T=n(D,"LI",{});var nSe=s($T);y1e=n(nSe,"STRONG",{});var x4t=s(y1e);sfr=r(x4t,"xlm"),x4t.forEach(t),lfr=r(nSe," \u2014 "),AW=n(nSe,"A",{href:!0});var $4t=s(AW);ifr=r($4t,"TFXLMModel"),$4t.forEach(t),dfr=r(nSe," (XLM model)"),nSe.forEach(t),cfr=i(D),kT=n(D,"LI",{});var sSe=s(kT);L1e=n(sSe,"STRONG",{});var k4t=s(L1e);ffr=r(k4t,"xlm-roberta"),k4t.forEach(t),mfr=r(sSe," \u2014 "),yW=n(sSe,"A",{href:!0});var S4t=s(yW);gfr=r(S4t,"TFXLMRobertaModel"),S4t.forEach(t),hfr=r(sSe," (XLM-RoBERTa model)"),sSe.forEach(t),pfr=i(D),ST=n(D,"LI",{});var lSe=s(ST);x1e=n(lSe,"STRONG",{});var R4t=s(x1e);_fr=r(R4t,"xlnet"),R4t.forEach(t),ufr=r(lSe," \u2014 "),LW=n(lSe,"A",{href:!0});var P4t=s(LW);bfr=r(P4t,"TFXLNetModel"),P4t.forEach(t),vfr=r(lSe," (XLNet model)"),lSe.forEach(t),D.forEach(t),Ffr=i(hl),T(RT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),lNe=i(f),Xd=n(f,"H2",{class:!0});var gDe=s(Xd);PT=n(gDe,"A",{id:!0,class:!0,href:!0});var B4t=s(PT);$1e=n(B4t,"SPAN",{});var I4t=s($1e);T(e8.$$.fragment,I4t),I4t.forEach(t),B4t.forEach(t),Tfr=i(gDe),k1e=n(gDe,"SPAN",{});var q4t=s(k1e);Mfr=r(q4t,"TFAutoModelForPreTraining"),q4t.forEach(t),gDe.forEach(t),iNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(o8.$$.fragment,pl),Efr=i(pl),zd=n(pl,"P",{});var NZ=s(zd);Cfr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xW=n(NZ,"A",{href:!0});var N4t=s(xW);wfr=r(N4t,"from_pretrained()"),N4t.forEach(t),Afr=r(NZ," class method or the "),$W=n(NZ,"A",{href:!0});var j4t=s($W);yfr=r(j4t,"from_config()"),j4t.forEach(t),Lfr=r(NZ,` class
method.`),NZ.forEach(t),xfr=i(pl),r8=n(pl,"P",{});var hDe=s(r8);$fr=r(hDe,"This class cannot be instantiated directly using "),S1e=n(hDe,"CODE",{});var D4t=s(S1e);kfr=r(D4t,"__init__()"),D4t.forEach(t),Sfr=r(hDe," (throws an error)."),hDe.forEach(t),Rfr=i(pl),Lt=n(pl,"DIV",{class:!0});var gA=s(Lt);T(t8.$$.fragment,gA),Pfr=i(gA),R1e=n(gA,"P",{});var G4t=s(R1e);Bfr=r(G4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),G4t.forEach(t),Ifr=i(gA),Wd=n(gA,"P",{});var jZ=s(Wd);qfr=r(jZ,`Note:
Loading a model from its configuration file does `),P1e=n(jZ,"STRONG",{});var O4t=s(P1e);Nfr=r(O4t,"not"),O4t.forEach(t),jfr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(jZ,"A",{href:!0});var V4t=s(kW);Dfr=r(V4t,"from_pretrained()"),V4t.forEach(t),Gfr=r(jZ," to load the model weights."),jZ.forEach(t),Ofr=i(gA),T(BT.$$.fragment,gA),gA.forEach(t),Vfr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(a8.$$.fragment,_l),Xfr=i(_l),B1e=n(_l,"P",{});var X4t=s(B1e);zfr=r(X4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X4t.forEach(t),Wfr=i(_l),Za=n(_l,"P",{});var hA=s(Za);Qfr=r(hA,"The model class to instantiate is selected based on the "),I1e=n(hA,"CODE",{});var z4t=s(I1e);Hfr=r(z4t,"model_type"),z4t.forEach(t),Ufr=r(hA,` property of the config object (either
passed as an argument or loaded from `),q1e=n(hA,"CODE",{});var W4t=s(q1e);Jfr=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),Yfr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(hA,"CODE",{});var Q4t=s(N1e);Kfr=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),Zfr=r(hA,":"),hA.forEach(t),emr=i(_l),se=n(_l,"UL",{});var le=s(se);IT=n(le,"LI",{});var iSe=s(IT);j1e=n(iSe,"STRONG",{});var H4t=s(j1e);omr=r(H4t,"albert"),H4t.forEach(t),rmr=r(iSe," \u2014 "),SW=n(iSe,"A",{href:!0});var U4t=s(SW);tmr=r(U4t,"TFAlbertForPreTraining"),U4t.forEach(t),amr=r(iSe," (ALBERT model)"),iSe.forEach(t),nmr=i(le),qT=n(le,"LI",{});var dSe=s(qT);D1e=n(dSe,"STRONG",{});var J4t=s(D1e);smr=r(J4t,"bart"),J4t.forEach(t),lmr=r(dSe," \u2014 "),RW=n(dSe,"A",{href:!0});var Y4t=s(RW);imr=r(Y4t,"TFBartForConditionalGeneration"),Y4t.forEach(t),dmr=r(dSe," (BART model)"),dSe.forEach(t),cmr=i(le),NT=n(le,"LI",{});var cSe=s(NT);G1e=n(cSe,"STRONG",{});var K4t=s(G1e);fmr=r(K4t,"bert"),K4t.forEach(t),mmr=r(cSe," \u2014 "),PW=n(cSe,"A",{href:!0});var Z4t=s(PW);gmr=r(Z4t,"TFBertForPreTraining"),Z4t.forEach(t),hmr=r(cSe," (BERT model)"),cSe.forEach(t),pmr=i(le),jT=n(le,"LI",{});var fSe=s(jT);O1e=n(fSe,"STRONG",{});var e5t=s(O1e);_mr=r(e5t,"camembert"),e5t.forEach(t),umr=r(fSe," \u2014 "),BW=n(fSe,"A",{href:!0});var o5t=s(BW);bmr=r(o5t,"TFCamembertForMaskedLM"),o5t.forEach(t),vmr=r(fSe," (CamemBERT model)"),fSe.forEach(t),Fmr=i(le),DT=n(le,"LI",{});var mSe=s(DT);V1e=n(mSe,"STRONG",{});var r5t=s(V1e);Tmr=r(r5t,"ctrl"),r5t.forEach(t),Mmr=r(mSe," \u2014 "),IW=n(mSe,"A",{href:!0});var t5t=s(IW);Emr=r(t5t,"TFCTRLLMHeadModel"),t5t.forEach(t),Cmr=r(mSe," (CTRL model)"),mSe.forEach(t),wmr=i(le),GT=n(le,"LI",{});var gSe=s(GT);X1e=n(gSe,"STRONG",{});var a5t=s(X1e);Amr=r(a5t,"distilbert"),a5t.forEach(t),ymr=r(gSe," \u2014 "),qW=n(gSe,"A",{href:!0});var n5t=s(qW);Lmr=r(n5t,"TFDistilBertForMaskedLM"),n5t.forEach(t),xmr=r(gSe," (DistilBERT model)"),gSe.forEach(t),$mr=i(le),OT=n(le,"LI",{});var hSe=s(OT);z1e=n(hSe,"STRONG",{});var s5t=s(z1e);kmr=r(s5t,"electra"),s5t.forEach(t),Smr=r(hSe," \u2014 "),NW=n(hSe,"A",{href:!0});var l5t=s(NW);Rmr=r(l5t,"TFElectraForPreTraining"),l5t.forEach(t),Pmr=r(hSe," (ELECTRA model)"),hSe.forEach(t),Bmr=i(le),VT=n(le,"LI",{});var pSe=s(VT);W1e=n(pSe,"STRONG",{});var i5t=s(W1e);Imr=r(i5t,"flaubert"),i5t.forEach(t),qmr=r(pSe," \u2014 "),jW=n(pSe,"A",{href:!0});var d5t=s(jW);Nmr=r(d5t,"TFFlaubertWithLMHeadModel"),d5t.forEach(t),jmr=r(pSe," (FlauBERT model)"),pSe.forEach(t),Dmr=i(le),XT=n(le,"LI",{});var _Se=s(XT);Q1e=n(_Se,"STRONG",{});var c5t=s(Q1e);Gmr=r(c5t,"funnel"),c5t.forEach(t),Omr=r(_Se," \u2014 "),DW=n(_Se,"A",{href:!0});var f5t=s(DW);Vmr=r(f5t,"TFFunnelForPreTraining"),f5t.forEach(t),Xmr=r(_Se," (Funnel Transformer model)"),_Se.forEach(t),zmr=i(le),zT=n(le,"LI",{});var uSe=s(zT);H1e=n(uSe,"STRONG",{});var m5t=s(H1e);Wmr=r(m5t,"gpt2"),m5t.forEach(t),Qmr=r(uSe," \u2014 "),GW=n(uSe,"A",{href:!0});var g5t=s(GW);Hmr=r(g5t,"TFGPT2LMHeadModel"),g5t.forEach(t),Umr=r(uSe," (OpenAI GPT-2 model)"),uSe.forEach(t),Jmr=i(le),WT=n(le,"LI",{});var bSe=s(WT);U1e=n(bSe,"STRONG",{});var h5t=s(U1e);Ymr=r(h5t,"layoutlm"),h5t.forEach(t),Kmr=r(bSe," \u2014 "),OW=n(bSe,"A",{href:!0});var p5t=s(OW);Zmr=r(p5t,"TFLayoutLMForMaskedLM"),p5t.forEach(t),egr=r(bSe," (LayoutLM model)"),bSe.forEach(t),ogr=i(le),QT=n(le,"LI",{});var vSe=s(QT);J1e=n(vSe,"STRONG",{});var _5t=s(J1e);rgr=r(_5t,"lxmert"),_5t.forEach(t),tgr=r(vSe," \u2014 "),VW=n(vSe,"A",{href:!0});var u5t=s(VW);agr=r(u5t,"TFLxmertForPreTraining"),u5t.forEach(t),ngr=r(vSe," (LXMERT model)"),vSe.forEach(t),sgr=i(le),HT=n(le,"LI",{});var FSe=s(HT);Y1e=n(FSe,"STRONG",{});var b5t=s(Y1e);lgr=r(b5t,"mobilebert"),b5t.forEach(t),igr=r(FSe," \u2014 "),XW=n(FSe,"A",{href:!0});var v5t=s(XW);dgr=r(v5t,"TFMobileBertForPreTraining"),v5t.forEach(t),cgr=r(FSe," (MobileBERT model)"),FSe.forEach(t),fgr=i(le),UT=n(le,"LI",{});var TSe=s(UT);K1e=n(TSe,"STRONG",{});var F5t=s(K1e);mgr=r(F5t,"mpnet"),F5t.forEach(t),ggr=r(TSe," \u2014 "),zW=n(TSe,"A",{href:!0});var T5t=s(zW);hgr=r(T5t,"TFMPNetForMaskedLM"),T5t.forEach(t),pgr=r(TSe," (MPNet model)"),TSe.forEach(t),_gr=i(le),JT=n(le,"LI",{});var MSe=s(JT);Z1e=n(MSe,"STRONG",{});var M5t=s(Z1e);ugr=r(M5t,"openai-gpt"),M5t.forEach(t),bgr=r(MSe," \u2014 "),WW=n(MSe,"A",{href:!0});var E5t=s(WW);vgr=r(E5t,"TFOpenAIGPTLMHeadModel"),E5t.forEach(t),Fgr=r(MSe," (OpenAI GPT model)"),MSe.forEach(t),Tgr=i(le),YT=n(le,"LI",{});var ESe=s(YT);ebe=n(ESe,"STRONG",{});var C5t=s(ebe);Mgr=r(C5t,"roberta"),C5t.forEach(t),Egr=r(ESe," \u2014 "),QW=n(ESe,"A",{href:!0});var w5t=s(QW);Cgr=r(w5t,"TFRobertaForMaskedLM"),w5t.forEach(t),wgr=r(ESe," (RoBERTa model)"),ESe.forEach(t),Agr=i(le),KT=n(le,"LI",{});var CSe=s(KT);obe=n(CSe,"STRONG",{});var A5t=s(obe);ygr=r(A5t,"t5"),A5t.forEach(t),Lgr=r(CSe," \u2014 "),HW=n(CSe,"A",{href:!0});var y5t=s(HW);xgr=r(y5t,"TFT5ForConditionalGeneration"),y5t.forEach(t),$gr=r(CSe," (T5 model)"),CSe.forEach(t),kgr=i(le),ZT=n(le,"LI",{});var wSe=s(ZT);rbe=n(wSe,"STRONG",{});var L5t=s(rbe);Sgr=r(L5t,"tapas"),L5t.forEach(t),Rgr=r(wSe," \u2014 "),UW=n(wSe,"A",{href:!0});var x5t=s(UW);Pgr=r(x5t,"TFTapasForMaskedLM"),x5t.forEach(t),Bgr=r(wSe," (TAPAS model)"),wSe.forEach(t),Igr=i(le),e7=n(le,"LI",{});var ASe=s(e7);tbe=n(ASe,"STRONG",{});var $5t=s(tbe);qgr=r($5t,"transfo-xl"),$5t.forEach(t),Ngr=r(ASe," \u2014 "),JW=n(ASe,"A",{href:!0});var k5t=s(JW);jgr=r(k5t,"TFTransfoXLLMHeadModel"),k5t.forEach(t),Dgr=r(ASe," (Transformer-XL model)"),ASe.forEach(t),Ggr=i(le),o7=n(le,"LI",{});var ySe=s(o7);abe=n(ySe,"STRONG",{});var S5t=s(abe);Ogr=r(S5t,"vit_mae"),S5t.forEach(t),Vgr=r(ySe," \u2014 "),YW=n(ySe,"A",{href:!0});var R5t=s(YW);Xgr=r(R5t,"TFViTMAEForPreTraining"),R5t.forEach(t),zgr=r(ySe," (ViTMAE model)"),ySe.forEach(t),Wgr=i(le),r7=n(le,"LI",{});var LSe=s(r7);nbe=n(LSe,"STRONG",{});var P5t=s(nbe);Qgr=r(P5t,"xlm"),P5t.forEach(t),Hgr=r(LSe," \u2014 "),KW=n(LSe,"A",{href:!0});var B5t=s(KW);Ugr=r(B5t,"TFXLMWithLMHeadModel"),B5t.forEach(t),Jgr=r(LSe," (XLM model)"),LSe.forEach(t),Ygr=i(le),t7=n(le,"LI",{});var xSe=s(t7);sbe=n(xSe,"STRONG",{});var I5t=s(sbe);Kgr=r(I5t,"xlm-roberta"),I5t.forEach(t),Zgr=r(xSe," \u2014 "),ZW=n(xSe,"A",{href:!0});var q5t=s(ZW);ehr=r(q5t,"TFXLMRobertaForMaskedLM"),q5t.forEach(t),ohr=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),rhr=i(le),a7=n(le,"LI",{});var $Se=s(a7);lbe=n($Se,"STRONG",{});var N5t=s(lbe);thr=r(N5t,"xlnet"),N5t.forEach(t),ahr=r($Se," \u2014 "),eQ=n($Se,"A",{href:!0});var j5t=s(eQ);nhr=r(j5t,"TFXLNetLMHeadModel"),j5t.forEach(t),shr=r($Se," (XLNet model)"),$Se.forEach(t),le.forEach(t),lhr=i(_l),T(n7.$$.fragment,_l),_l.forEach(t),pl.forEach(t),dNe=i(f),Qd=n(f,"H2",{class:!0});var pDe=s(Qd);s7=n(pDe,"A",{id:!0,class:!0,href:!0});var D5t=s(s7);ibe=n(D5t,"SPAN",{});var G5t=s(ibe);T(n8.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),ihr=i(pDe),dbe=n(pDe,"SPAN",{});var O5t=s(dbe);dhr=r(O5t,"TFAutoModelForCausalLM"),O5t.forEach(t),pDe.forEach(t),cNe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(s8.$$.fragment,ul),chr=i(ul),Hd=n(ul,"P",{});var DZ=s(Hd);fhr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oQ=n(DZ,"A",{href:!0});var V5t=s(oQ);mhr=r(V5t,"from_pretrained()"),V5t.forEach(t),ghr=r(DZ," class method or the "),rQ=n(DZ,"A",{href:!0});var X5t=s(rQ);hhr=r(X5t,"from_config()"),X5t.forEach(t),phr=r(DZ,` class
method.`),DZ.forEach(t),_hr=i(ul),l8=n(ul,"P",{});var _De=s(l8);uhr=r(_De,"This class cannot be instantiated directly using "),cbe=n(_De,"CODE",{});var z5t=s(cbe);bhr=r(z5t,"__init__()"),z5t.forEach(t),vhr=r(_De," (throws an error)."),_De.forEach(t),Fhr=i(ul),xt=n(ul,"DIV",{class:!0});var pA=s(xt);T(i8.$$.fragment,pA),Thr=i(pA),fbe=n(pA,"P",{});var W5t=s(fbe);Mhr=r(W5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W5t.forEach(t),Ehr=i(pA),Ud=n(pA,"P",{});var GZ=s(Ud);Chr=r(GZ,`Note:
Loading a model from its configuration file does `),mbe=n(GZ,"STRONG",{});var Q5t=s(mbe);whr=r(Q5t,"not"),Q5t.forEach(t),Ahr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(GZ,"A",{href:!0});var H5t=s(tQ);yhr=r(H5t,"from_pretrained()"),H5t.forEach(t),Lhr=r(GZ," to load the model weights."),GZ.forEach(t),xhr=i(pA),T(l7.$$.fragment,pA),pA.forEach(t),$hr=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(d8.$$.fragment,bl),khr=i(bl),gbe=n(bl,"P",{});var U5t=s(gbe);Shr=r(U5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),U5t.forEach(t),Rhr=i(bl),en=n(bl,"P",{});var _A=s(en);Phr=r(_A,"The model class to instantiate is selected based on the "),hbe=n(_A,"CODE",{});var J5t=s(hbe);Bhr=r(J5t,"model_type"),J5t.forEach(t),Ihr=r(_A,` property of the config object (either
passed as an argument or loaded from `),pbe=n(_A,"CODE",{});var Y5t=s(pbe);qhr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),Nhr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(_A,"CODE",{});var K5t=s(_be);jhr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),Dhr=r(_A,":"),_A.forEach(t),Ghr=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);i7=n(Ce,"LI",{});var kSe=s(i7);ube=n(kSe,"STRONG",{});var Z5t=s(ube);Ohr=r(Z5t,"bert"),Z5t.forEach(t),Vhr=r(kSe," \u2014 "),aQ=n(kSe,"A",{href:!0});var evt=s(aQ);Xhr=r(evt,"TFBertLMHeadModel"),evt.forEach(t),zhr=r(kSe," (BERT model)"),kSe.forEach(t),Whr=i(Ce),d7=n(Ce,"LI",{});var SSe=s(d7);bbe=n(SSe,"STRONG",{});var ovt=s(bbe);Qhr=r(ovt,"camembert"),ovt.forEach(t),Hhr=r(SSe," \u2014 "),nQ=n(SSe,"A",{href:!0});var rvt=s(nQ);Uhr=r(rvt,"TFCamembertForCausalLM"),rvt.forEach(t),Jhr=r(SSe," (CamemBERT model)"),SSe.forEach(t),Yhr=i(Ce),c7=n(Ce,"LI",{});var RSe=s(c7);vbe=n(RSe,"STRONG",{});var tvt=s(vbe);Khr=r(tvt,"ctrl"),tvt.forEach(t),Zhr=r(RSe," \u2014 "),sQ=n(RSe,"A",{href:!0});var avt=s(sQ);epr=r(avt,"TFCTRLLMHeadModel"),avt.forEach(t),opr=r(RSe," (CTRL model)"),RSe.forEach(t),rpr=i(Ce),f7=n(Ce,"LI",{});var PSe=s(f7);Fbe=n(PSe,"STRONG",{});var nvt=s(Fbe);tpr=r(nvt,"gpt2"),nvt.forEach(t),apr=r(PSe," \u2014 "),lQ=n(PSe,"A",{href:!0});var svt=s(lQ);npr=r(svt,"TFGPT2LMHeadModel"),svt.forEach(t),spr=r(PSe," (OpenAI GPT-2 model)"),PSe.forEach(t),lpr=i(Ce),m7=n(Ce,"LI",{});var BSe=s(m7);Tbe=n(BSe,"STRONG",{});var lvt=s(Tbe);ipr=r(lvt,"gptj"),lvt.forEach(t),dpr=r(BSe," \u2014 "),iQ=n(BSe,"A",{href:!0});var ivt=s(iQ);cpr=r(ivt,"TFGPTJForCausalLM"),ivt.forEach(t),fpr=r(BSe," (GPT-J model)"),BSe.forEach(t),mpr=i(Ce),g7=n(Ce,"LI",{});var ISe=s(g7);Mbe=n(ISe,"STRONG",{});var dvt=s(Mbe);gpr=r(dvt,"openai-gpt"),dvt.forEach(t),hpr=r(ISe," \u2014 "),dQ=n(ISe,"A",{href:!0});var cvt=s(dQ);ppr=r(cvt,"TFOpenAIGPTLMHeadModel"),cvt.forEach(t),_pr=r(ISe," (OpenAI GPT model)"),ISe.forEach(t),upr=i(Ce),h7=n(Ce,"LI",{});var qSe=s(h7);Ebe=n(qSe,"STRONG",{});var fvt=s(Ebe);bpr=r(fvt,"rembert"),fvt.forEach(t),vpr=r(qSe," \u2014 "),cQ=n(qSe,"A",{href:!0});var mvt=s(cQ);Fpr=r(mvt,"TFRemBertForCausalLM"),mvt.forEach(t),Tpr=r(qSe," (RemBERT model)"),qSe.forEach(t),Mpr=i(Ce),p7=n(Ce,"LI",{});var NSe=s(p7);Cbe=n(NSe,"STRONG",{});var gvt=s(Cbe);Epr=r(gvt,"roberta"),gvt.forEach(t),Cpr=r(NSe," \u2014 "),fQ=n(NSe,"A",{href:!0});var hvt=s(fQ);wpr=r(hvt,"TFRobertaForCausalLM"),hvt.forEach(t),Apr=r(NSe," (RoBERTa model)"),NSe.forEach(t),ypr=i(Ce),_7=n(Ce,"LI",{});var jSe=s(_7);wbe=n(jSe,"STRONG",{});var pvt=s(wbe);Lpr=r(pvt,"roformer"),pvt.forEach(t),xpr=r(jSe," \u2014 "),mQ=n(jSe,"A",{href:!0});var _vt=s(mQ);$pr=r(_vt,"TFRoFormerForCausalLM"),_vt.forEach(t),kpr=r(jSe," (RoFormer model)"),jSe.forEach(t),Spr=i(Ce),u7=n(Ce,"LI",{});var DSe=s(u7);Abe=n(DSe,"STRONG",{});var uvt=s(Abe);Rpr=r(uvt,"transfo-xl"),uvt.forEach(t),Ppr=r(DSe," \u2014 "),gQ=n(DSe,"A",{href:!0});var bvt=s(gQ);Bpr=r(bvt,"TFTransfoXLLMHeadModel"),bvt.forEach(t),Ipr=r(DSe," (Transformer-XL model)"),DSe.forEach(t),qpr=i(Ce),b7=n(Ce,"LI",{});var GSe=s(b7);ybe=n(GSe,"STRONG",{});var vvt=s(ybe);Npr=r(vvt,"xlm"),vvt.forEach(t),jpr=r(GSe," \u2014 "),hQ=n(GSe,"A",{href:!0});var Fvt=s(hQ);Dpr=r(Fvt,"TFXLMWithLMHeadModel"),Fvt.forEach(t),Gpr=r(GSe," (XLM model)"),GSe.forEach(t),Opr=i(Ce),v7=n(Ce,"LI",{});var OSe=s(v7);Lbe=n(OSe,"STRONG",{});var Tvt=s(Lbe);Vpr=r(Tvt,"xlnet"),Tvt.forEach(t),Xpr=r(OSe," \u2014 "),pQ=n(OSe,"A",{href:!0});var Mvt=s(pQ);zpr=r(Mvt,"TFXLNetLMHeadModel"),Mvt.forEach(t),Wpr=r(OSe," (XLNet model)"),OSe.forEach(t),Ce.forEach(t),Qpr=i(bl),T(F7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),fNe=i(f),Jd=n(f,"H2",{class:!0});var uDe=s(Jd);T7=n(uDe,"A",{id:!0,class:!0,href:!0});var Evt=s(T7);xbe=n(Evt,"SPAN",{});var Cvt=s(xbe);T(c8.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),Hpr=i(uDe),$be=n(uDe,"SPAN",{});var wvt=s($be);Upr=r(wvt,"TFAutoModelForImageClassification"),wvt.forEach(t),uDe.forEach(t),mNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(f8.$$.fragment,vl),Jpr=i(vl),Yd=n(vl,"P",{});var OZ=s(Yd);Ypr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=n(OZ,"A",{href:!0});var Avt=s(_Q);Kpr=r(Avt,"from_pretrained()"),Avt.forEach(t),Zpr=r(OZ," class method or the "),uQ=n(OZ,"A",{href:!0});var yvt=s(uQ);e_r=r(yvt,"from_config()"),yvt.forEach(t),o_r=r(OZ,` class
method.`),OZ.forEach(t),r_r=i(vl),m8=n(vl,"P",{});var bDe=s(m8);t_r=r(bDe,"This class cannot be instantiated directly using "),kbe=n(bDe,"CODE",{});var Lvt=s(kbe);a_r=r(Lvt,"__init__()"),Lvt.forEach(t),n_r=r(bDe," (throws an error)."),bDe.forEach(t),s_r=i(vl),$t=n(vl,"DIV",{class:!0});var uA=s($t);T(g8.$$.fragment,uA),l_r=i(uA),Sbe=n(uA,"P",{});var xvt=s(Sbe);i_r=r(xvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xvt.forEach(t),d_r=i(uA),Kd=n(uA,"P",{});var VZ=s(Kd);c_r=r(VZ,`Note:
Loading a model from its configuration file does `),Rbe=n(VZ,"STRONG",{});var $vt=s(Rbe);f_r=r($vt,"not"),$vt.forEach(t),m_r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(VZ,"A",{href:!0});var kvt=s(bQ);g_r=r(kvt,"from_pretrained()"),kvt.forEach(t),h_r=r(VZ," to load the model weights."),VZ.forEach(t),p_r=i(uA),T(M7.$$.fragment,uA),uA.forEach(t),__r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(h8.$$.fragment,Fl),u_r=i(Fl),Pbe=n(Fl,"P",{});var Svt=s(Pbe);b_r=r(Svt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Svt.forEach(t),v_r=i(Fl),on=n(Fl,"P",{});var bA=s(on);F_r=r(bA,"The model class to instantiate is selected based on the "),Bbe=n(bA,"CODE",{});var Rvt=s(Bbe);T_r=r(Rvt,"model_type"),Rvt.forEach(t),M_r=r(bA,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(bA,"CODE",{});var Pvt=s(Ibe);E_r=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),C_r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(bA,"CODE",{});var Bvt=s(qbe);w_r=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),A_r=r(bA,":"),bA.forEach(t),y_r=i(Fl),rn=n(Fl,"UL",{});var vA=s(rn);E7=n(vA,"LI",{});var VSe=s(E7);Nbe=n(VSe,"STRONG",{});var Ivt=s(Nbe);L_r=r(Ivt,"convnext"),Ivt.forEach(t),x_r=r(VSe," \u2014 "),vQ=n(VSe,"A",{href:!0});var qvt=s(vQ);$_r=r(qvt,"TFConvNextForImageClassification"),qvt.forEach(t),k_r=r(VSe," (ConvNext model)"),VSe.forEach(t),S_r=i(vA),C7=n(vA,"LI",{});var XSe=s(C7);jbe=n(XSe,"STRONG",{});var Nvt=s(jbe);R_r=r(Nvt,"data2vec-vision"),Nvt.forEach(t),P_r=r(XSe," \u2014 "),FQ=n(XSe,"A",{href:!0});var jvt=s(FQ);B_r=r(jvt,"TFData2VecVisionForImageClassification"),jvt.forEach(t),I_r=r(XSe," (Data2VecVision model)"),XSe.forEach(t),q_r=i(vA),w7=n(vA,"LI",{});var zSe=s(w7);Dbe=n(zSe,"STRONG",{});var Dvt=s(Dbe);N_r=r(Dvt,"swin"),Dvt.forEach(t),j_r=r(zSe," \u2014 "),TQ=n(zSe,"A",{href:!0});var Gvt=s(TQ);D_r=r(Gvt,"TFSwinForImageClassification"),Gvt.forEach(t),G_r=r(zSe," (Swin model)"),zSe.forEach(t),O_r=i(vA),A7=n(vA,"LI",{});var WSe=s(A7);Gbe=n(WSe,"STRONG",{});var Ovt=s(Gbe);V_r=r(Ovt,"vit"),Ovt.forEach(t),X_r=r(WSe," \u2014 "),MQ=n(WSe,"A",{href:!0});var Vvt=s(MQ);z_r=r(Vvt,"TFViTForImageClassification"),Vvt.forEach(t),W_r=r(WSe," (ViT model)"),WSe.forEach(t),vA.forEach(t),Q_r=i(Fl),T(y7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),gNe=i(f),Zd=n(f,"H2",{class:!0});var vDe=s(Zd);L7=n(vDe,"A",{id:!0,class:!0,href:!0});var Xvt=s(L7);Obe=n(Xvt,"SPAN",{});var zvt=s(Obe);T(p8.$$.fragment,zvt),zvt.forEach(t),Xvt.forEach(t),H_r=i(vDe),Vbe=n(vDe,"SPAN",{});var Wvt=s(Vbe);U_r=r(Wvt,"TFAutoModelForMaskedLM"),Wvt.forEach(t),vDe.forEach(t),hNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(_8.$$.fragment,Tl),J_r=i(Tl),ec=n(Tl,"P",{});var XZ=s(ec);Y_r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=n(XZ,"A",{href:!0});var Qvt=s(EQ);K_r=r(Qvt,"from_pretrained()"),Qvt.forEach(t),Z_r=r(XZ," class method or the "),CQ=n(XZ,"A",{href:!0});var Hvt=s(CQ);eur=r(Hvt,"from_config()"),Hvt.forEach(t),our=r(XZ,` class
method.`),XZ.forEach(t),rur=i(Tl),u8=n(Tl,"P",{});var FDe=s(u8);tur=r(FDe,"This class cannot be instantiated directly using "),Xbe=n(FDe,"CODE",{});var Uvt=s(Xbe);aur=r(Uvt,"__init__()"),Uvt.forEach(t),nur=r(FDe," (throws an error)."),FDe.forEach(t),sur=i(Tl),kt=n(Tl,"DIV",{class:!0});var FA=s(kt);T(b8.$$.fragment,FA),lur=i(FA),zbe=n(FA,"P",{});var Jvt=s(zbe);iur=r(Jvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jvt.forEach(t),dur=i(FA),oc=n(FA,"P",{});var zZ=s(oc);cur=r(zZ,`Note:
Loading a model from its configuration file does `),Wbe=n(zZ,"STRONG",{});var Yvt=s(Wbe);fur=r(Yvt,"not"),Yvt.forEach(t),mur=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(zZ,"A",{href:!0});var Kvt=s(wQ);gur=r(Kvt,"from_pretrained()"),Kvt.forEach(t),hur=r(zZ," to load the model weights."),zZ.forEach(t),pur=i(FA),T(x7.$$.fragment,FA),FA.forEach(t),_ur=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(v8.$$.fragment,Ml),uur=i(Ml),Qbe=n(Ml,"P",{});var Zvt=s(Qbe);bur=r(Zvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zvt.forEach(t),vur=i(Ml),tn=n(Ml,"P",{});var TA=s(tn);Fur=r(TA,"The model class to instantiate is selected based on the "),Hbe=n(TA,"CODE",{});var eFt=s(Hbe);Tur=r(eFt,"model_type"),eFt.forEach(t),Mur=r(TA,` property of the config object (either
passed as an argument or loaded from `),Ube=n(TA,"CODE",{});var oFt=s(Ube);Eur=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),Cur=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(TA,"CODE",{});var rFt=s(Jbe);wur=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),Aur=r(TA,":"),TA.forEach(t),yur=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);$7=n(fe,"LI",{});var QSe=s($7);Ybe=n(QSe,"STRONG",{});var tFt=s(Ybe);Lur=r(tFt,"albert"),tFt.forEach(t),xur=r(QSe," \u2014 "),AQ=n(QSe,"A",{href:!0});var aFt=s(AQ);$ur=r(aFt,"TFAlbertForMaskedLM"),aFt.forEach(t),kur=r(QSe," (ALBERT model)"),QSe.forEach(t),Sur=i(fe),k7=n(fe,"LI",{});var HSe=s(k7);Kbe=n(HSe,"STRONG",{});var nFt=s(Kbe);Rur=r(nFt,"bert"),nFt.forEach(t),Pur=r(HSe," \u2014 "),yQ=n(HSe,"A",{href:!0});var sFt=s(yQ);Bur=r(sFt,"TFBertForMaskedLM"),sFt.forEach(t),Iur=r(HSe," (BERT model)"),HSe.forEach(t),qur=i(fe),S7=n(fe,"LI",{});var USe=s(S7);Zbe=n(USe,"STRONG",{});var lFt=s(Zbe);Nur=r(lFt,"camembert"),lFt.forEach(t),jur=r(USe," \u2014 "),LQ=n(USe,"A",{href:!0});var iFt=s(LQ);Dur=r(iFt,"TFCamembertForMaskedLM"),iFt.forEach(t),Gur=r(USe," (CamemBERT model)"),USe.forEach(t),Our=i(fe),R7=n(fe,"LI",{});var JSe=s(R7);e4e=n(JSe,"STRONG",{});var dFt=s(e4e);Vur=r(dFt,"convbert"),dFt.forEach(t),Xur=r(JSe," \u2014 "),xQ=n(JSe,"A",{href:!0});var cFt=s(xQ);zur=r(cFt,"TFConvBertForMaskedLM"),cFt.forEach(t),Wur=r(JSe," (ConvBERT model)"),JSe.forEach(t),Qur=i(fe),P7=n(fe,"LI",{});var YSe=s(P7);o4e=n(YSe,"STRONG",{});var fFt=s(o4e);Hur=r(fFt,"deberta"),fFt.forEach(t),Uur=r(YSe," \u2014 "),$Q=n(YSe,"A",{href:!0});var mFt=s($Q);Jur=r(mFt,"TFDebertaForMaskedLM"),mFt.forEach(t),Yur=r(YSe," (DeBERTa model)"),YSe.forEach(t),Kur=i(fe),B7=n(fe,"LI",{});var KSe=s(B7);r4e=n(KSe,"STRONG",{});var gFt=s(r4e);Zur=r(gFt,"deberta-v2"),gFt.forEach(t),e2r=r(KSe," \u2014 "),kQ=n(KSe,"A",{href:!0});var hFt=s(kQ);o2r=r(hFt,"TFDebertaV2ForMaskedLM"),hFt.forEach(t),r2r=r(KSe," (DeBERTa-v2 model)"),KSe.forEach(t),t2r=i(fe),I7=n(fe,"LI",{});var ZSe=s(I7);t4e=n(ZSe,"STRONG",{});var pFt=s(t4e);a2r=r(pFt,"distilbert"),pFt.forEach(t),n2r=r(ZSe," \u2014 "),SQ=n(ZSe,"A",{href:!0});var _Ft=s(SQ);s2r=r(_Ft,"TFDistilBertForMaskedLM"),_Ft.forEach(t),l2r=r(ZSe," (DistilBERT model)"),ZSe.forEach(t),i2r=i(fe),q7=n(fe,"LI",{});var eRe=s(q7);a4e=n(eRe,"STRONG",{});var uFt=s(a4e);d2r=r(uFt,"electra"),uFt.forEach(t),c2r=r(eRe," \u2014 "),RQ=n(eRe,"A",{href:!0});var bFt=s(RQ);f2r=r(bFt,"TFElectraForMaskedLM"),bFt.forEach(t),m2r=r(eRe," (ELECTRA model)"),eRe.forEach(t),g2r=i(fe),N7=n(fe,"LI",{});var oRe=s(N7);n4e=n(oRe,"STRONG",{});var vFt=s(n4e);h2r=r(vFt,"flaubert"),vFt.forEach(t),p2r=r(oRe," \u2014 "),PQ=n(oRe,"A",{href:!0});var FFt=s(PQ);_2r=r(FFt,"TFFlaubertWithLMHeadModel"),FFt.forEach(t),u2r=r(oRe," (FlauBERT model)"),oRe.forEach(t),b2r=i(fe),j7=n(fe,"LI",{});var rRe=s(j7);s4e=n(rRe,"STRONG",{});var TFt=s(s4e);v2r=r(TFt,"funnel"),TFt.forEach(t),F2r=r(rRe," \u2014 "),BQ=n(rRe,"A",{href:!0});var MFt=s(BQ);T2r=r(MFt,"TFFunnelForMaskedLM"),MFt.forEach(t),M2r=r(rRe," (Funnel Transformer model)"),rRe.forEach(t),E2r=i(fe),D7=n(fe,"LI",{});var tRe=s(D7);l4e=n(tRe,"STRONG",{});var EFt=s(l4e);C2r=r(EFt,"layoutlm"),EFt.forEach(t),w2r=r(tRe," \u2014 "),IQ=n(tRe,"A",{href:!0});var CFt=s(IQ);A2r=r(CFt,"TFLayoutLMForMaskedLM"),CFt.forEach(t),y2r=r(tRe," (LayoutLM model)"),tRe.forEach(t),L2r=i(fe),G7=n(fe,"LI",{});var aRe=s(G7);i4e=n(aRe,"STRONG",{});var wFt=s(i4e);x2r=r(wFt,"longformer"),wFt.forEach(t),$2r=r(aRe," \u2014 "),qQ=n(aRe,"A",{href:!0});var AFt=s(qQ);k2r=r(AFt,"TFLongformerForMaskedLM"),AFt.forEach(t),S2r=r(aRe," (Longformer model)"),aRe.forEach(t),R2r=i(fe),O7=n(fe,"LI",{});var nRe=s(O7);d4e=n(nRe,"STRONG",{});var yFt=s(d4e);P2r=r(yFt,"mobilebert"),yFt.forEach(t),B2r=r(nRe," \u2014 "),NQ=n(nRe,"A",{href:!0});var LFt=s(NQ);I2r=r(LFt,"TFMobileBertForMaskedLM"),LFt.forEach(t),q2r=r(nRe," (MobileBERT model)"),nRe.forEach(t),N2r=i(fe),V7=n(fe,"LI",{});var sRe=s(V7);c4e=n(sRe,"STRONG",{});var xFt=s(c4e);j2r=r(xFt,"mpnet"),xFt.forEach(t),D2r=r(sRe," \u2014 "),jQ=n(sRe,"A",{href:!0});var $Ft=s(jQ);G2r=r($Ft,"TFMPNetForMaskedLM"),$Ft.forEach(t),O2r=r(sRe," (MPNet model)"),sRe.forEach(t),V2r=i(fe),X7=n(fe,"LI",{});var lRe=s(X7);f4e=n(lRe,"STRONG",{});var kFt=s(f4e);X2r=r(kFt,"rembert"),kFt.forEach(t),z2r=r(lRe," \u2014 "),DQ=n(lRe,"A",{href:!0});var SFt=s(DQ);W2r=r(SFt,"TFRemBertForMaskedLM"),SFt.forEach(t),Q2r=r(lRe," (RemBERT model)"),lRe.forEach(t),H2r=i(fe),z7=n(fe,"LI",{});var iRe=s(z7);m4e=n(iRe,"STRONG",{});var RFt=s(m4e);U2r=r(RFt,"roberta"),RFt.forEach(t),J2r=r(iRe," \u2014 "),GQ=n(iRe,"A",{href:!0});var PFt=s(GQ);Y2r=r(PFt,"TFRobertaForMaskedLM"),PFt.forEach(t),K2r=r(iRe," (RoBERTa model)"),iRe.forEach(t),Z2r=i(fe),W7=n(fe,"LI",{});var dRe=s(W7);g4e=n(dRe,"STRONG",{});var BFt=s(g4e);e1r=r(BFt,"roformer"),BFt.forEach(t),o1r=r(dRe," \u2014 "),OQ=n(dRe,"A",{href:!0});var IFt=s(OQ);r1r=r(IFt,"TFRoFormerForMaskedLM"),IFt.forEach(t),t1r=r(dRe," (RoFormer model)"),dRe.forEach(t),a1r=i(fe),Q7=n(fe,"LI",{});var cRe=s(Q7);h4e=n(cRe,"STRONG",{});var qFt=s(h4e);n1r=r(qFt,"tapas"),qFt.forEach(t),s1r=r(cRe," \u2014 "),VQ=n(cRe,"A",{href:!0});var NFt=s(VQ);l1r=r(NFt,"TFTapasForMaskedLM"),NFt.forEach(t),i1r=r(cRe," (TAPAS model)"),cRe.forEach(t),d1r=i(fe),H7=n(fe,"LI",{});var fRe=s(H7);p4e=n(fRe,"STRONG",{});var jFt=s(p4e);c1r=r(jFt,"xlm"),jFt.forEach(t),f1r=r(fRe," \u2014 "),XQ=n(fRe,"A",{href:!0});var DFt=s(XQ);m1r=r(DFt,"TFXLMWithLMHeadModel"),DFt.forEach(t),g1r=r(fRe," (XLM model)"),fRe.forEach(t),h1r=i(fe),U7=n(fe,"LI",{});var mRe=s(U7);_4e=n(mRe,"STRONG",{});var GFt=s(_4e);p1r=r(GFt,"xlm-roberta"),GFt.forEach(t),_1r=r(mRe," \u2014 "),zQ=n(mRe,"A",{href:!0});var OFt=s(zQ);u1r=r(OFt,"TFXLMRobertaForMaskedLM"),OFt.forEach(t),b1r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),fe.forEach(t),v1r=i(Ml),T(J7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),pNe=i(f),rc=n(f,"H2",{class:!0});var TDe=s(rc);Y7=n(TDe,"A",{id:!0,class:!0,href:!0});var VFt=s(Y7);u4e=n(VFt,"SPAN",{});var XFt=s(u4e);T(F8.$$.fragment,XFt),XFt.forEach(t),VFt.forEach(t),F1r=i(TDe),b4e=n(TDe,"SPAN",{});var zFt=s(b4e);T1r=r(zFt,"TFAutoModelForSeq2SeqLM"),zFt.forEach(t),TDe.forEach(t),_Ne=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(T8.$$.fragment,El),M1r=i(El),tc=n(El,"P",{});var WZ=s(tc);E1r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WQ=n(WZ,"A",{href:!0});var WFt=s(WQ);C1r=r(WFt,"from_pretrained()"),WFt.forEach(t),w1r=r(WZ," class method or the "),QQ=n(WZ,"A",{href:!0});var QFt=s(QQ);A1r=r(QFt,"from_config()"),QFt.forEach(t),y1r=r(WZ,` class
method.`),WZ.forEach(t),L1r=i(El),M8=n(El,"P",{});var MDe=s(M8);x1r=r(MDe,"This class cannot be instantiated directly using "),v4e=n(MDe,"CODE",{});var HFt=s(v4e);$1r=r(HFt,"__init__()"),HFt.forEach(t),k1r=r(MDe," (throws an error)."),MDe.forEach(t),S1r=i(El),St=n(El,"DIV",{class:!0});var MA=s(St);T(E8.$$.fragment,MA),R1r=i(MA),F4e=n(MA,"P",{});var UFt=s(F4e);P1r=r(UFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UFt.forEach(t),B1r=i(MA),ac=n(MA,"P",{});var QZ=s(ac);I1r=r(QZ,`Note:
Loading a model from its configuration file does `),T4e=n(QZ,"STRONG",{});var JFt=s(T4e);q1r=r(JFt,"not"),JFt.forEach(t),N1r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(QZ,"A",{href:!0});var YFt=s(HQ);j1r=r(YFt,"from_pretrained()"),YFt.forEach(t),D1r=r(QZ," to load the model weights."),QZ.forEach(t),G1r=i(MA),T(K7.$$.fragment,MA),MA.forEach(t),O1r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(C8.$$.fragment,Cl),V1r=i(Cl),M4e=n(Cl,"P",{});var KFt=s(M4e);X1r=r(KFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KFt.forEach(t),z1r=i(Cl),an=n(Cl,"P",{});var EA=s(an);W1r=r(EA,"The model class to instantiate is selected based on the "),E4e=n(EA,"CODE",{});var ZFt=s(E4e);Q1r=r(ZFt,"model_type"),ZFt.forEach(t),H1r=r(EA,` property of the config object (either
passed as an argument or loaded from `),C4e=n(EA,"CODE",{});var eTt=s(C4e);U1r=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),J1r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(EA,"CODE",{});var oTt=s(w4e);Y1r=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),K1r=r(EA,":"),EA.forEach(t),Z1r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);Z7=n(Be,"LI",{});var gRe=s(Z7);A4e=n(gRe,"STRONG",{});var rTt=s(A4e);ebr=r(rTt,"bart"),rTt.forEach(t),obr=r(gRe," \u2014 "),UQ=n(gRe,"A",{href:!0});var tTt=s(UQ);rbr=r(tTt,"TFBartForConditionalGeneration"),tTt.forEach(t),tbr=r(gRe," (BART model)"),gRe.forEach(t),abr=i(Be),eM=n(Be,"LI",{});var hRe=s(eM);y4e=n(hRe,"STRONG",{});var aTt=s(y4e);nbr=r(aTt,"blenderbot"),aTt.forEach(t),sbr=r(hRe," \u2014 "),JQ=n(hRe,"A",{href:!0});var nTt=s(JQ);lbr=r(nTt,"TFBlenderbotForConditionalGeneration"),nTt.forEach(t),ibr=r(hRe," (Blenderbot model)"),hRe.forEach(t),dbr=i(Be),oM=n(Be,"LI",{});var pRe=s(oM);L4e=n(pRe,"STRONG",{});var sTt=s(L4e);cbr=r(sTt,"blenderbot-small"),sTt.forEach(t),fbr=r(pRe," \u2014 "),YQ=n(pRe,"A",{href:!0});var lTt=s(YQ);mbr=r(lTt,"TFBlenderbotSmallForConditionalGeneration"),lTt.forEach(t),gbr=r(pRe," (BlenderbotSmall model)"),pRe.forEach(t),hbr=i(Be),rM=n(Be,"LI",{});var _Re=s(rM);x4e=n(_Re,"STRONG",{});var iTt=s(x4e);pbr=r(iTt,"encoder-decoder"),iTt.forEach(t),_br=r(_Re," \u2014 "),KQ=n(_Re,"A",{href:!0});var dTt=s(KQ);ubr=r(dTt,"TFEncoderDecoderModel"),dTt.forEach(t),bbr=r(_Re," (Encoder decoder model)"),_Re.forEach(t),vbr=i(Be),tM=n(Be,"LI",{});var uRe=s(tM);$4e=n(uRe,"STRONG",{});var cTt=s($4e);Fbr=r(cTt,"led"),cTt.forEach(t),Tbr=r(uRe," \u2014 "),ZQ=n(uRe,"A",{href:!0});var fTt=s(ZQ);Mbr=r(fTt,"TFLEDForConditionalGeneration"),fTt.forEach(t),Ebr=r(uRe," (LED model)"),uRe.forEach(t),Cbr=i(Be),aM=n(Be,"LI",{});var bRe=s(aM);k4e=n(bRe,"STRONG",{});var mTt=s(k4e);wbr=r(mTt,"marian"),mTt.forEach(t),Abr=r(bRe," \u2014 "),eH=n(bRe,"A",{href:!0});var gTt=s(eH);ybr=r(gTt,"TFMarianMTModel"),gTt.forEach(t),Lbr=r(bRe," (Marian model)"),bRe.forEach(t),xbr=i(Be),nM=n(Be,"LI",{});var vRe=s(nM);S4e=n(vRe,"STRONG",{});var hTt=s(S4e);$br=r(hTt,"mbart"),hTt.forEach(t),kbr=r(vRe," \u2014 "),oH=n(vRe,"A",{href:!0});var pTt=s(oH);Sbr=r(pTt,"TFMBartForConditionalGeneration"),pTt.forEach(t),Rbr=r(vRe," (mBART model)"),vRe.forEach(t),Pbr=i(Be),sM=n(Be,"LI",{});var FRe=s(sM);R4e=n(FRe,"STRONG",{});var _Tt=s(R4e);Bbr=r(_Tt,"mt5"),_Tt.forEach(t),Ibr=r(FRe," \u2014 "),rH=n(FRe,"A",{href:!0});var uTt=s(rH);qbr=r(uTt,"TFMT5ForConditionalGeneration"),uTt.forEach(t),Nbr=r(FRe," (mT5 model)"),FRe.forEach(t),jbr=i(Be),lM=n(Be,"LI",{});var TRe=s(lM);P4e=n(TRe,"STRONG",{});var bTt=s(P4e);Dbr=r(bTt,"pegasus"),bTt.forEach(t),Gbr=r(TRe," \u2014 "),tH=n(TRe,"A",{href:!0});var vTt=s(tH);Obr=r(vTt,"TFPegasusForConditionalGeneration"),vTt.forEach(t),Vbr=r(TRe," (Pegasus model)"),TRe.forEach(t),Xbr=i(Be),iM=n(Be,"LI",{});var MRe=s(iM);B4e=n(MRe,"STRONG",{});var FTt=s(B4e);zbr=r(FTt,"t5"),FTt.forEach(t),Wbr=r(MRe," \u2014 "),aH=n(MRe,"A",{href:!0});var TTt=s(aH);Qbr=r(TTt,"TFT5ForConditionalGeneration"),TTt.forEach(t),Hbr=r(MRe," (T5 model)"),MRe.forEach(t),Be.forEach(t),Ubr=i(Cl),T(dM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),uNe=i(f),nc=n(f,"H2",{class:!0});var EDe=s(nc);cM=n(EDe,"A",{id:!0,class:!0,href:!0});var MTt=s(cM);I4e=n(MTt,"SPAN",{});var ETt=s(I4e);T(w8.$$.fragment,ETt),ETt.forEach(t),MTt.forEach(t),Jbr=i(EDe),q4e=n(EDe,"SPAN",{});var CTt=s(q4e);Ybr=r(CTt,"TFAutoModelForSequenceClassification"),CTt.forEach(t),EDe.forEach(t),bNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(A8.$$.fragment,wl),Kbr=i(wl),sc=n(wl,"P",{});var HZ=s(sc);Zbr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=n(HZ,"A",{href:!0});var wTt=s(nH);e4r=r(wTt,"from_pretrained()"),wTt.forEach(t),o4r=r(HZ," class method or the "),sH=n(HZ,"A",{href:!0});var ATt=s(sH);r4r=r(ATt,"from_config()"),ATt.forEach(t),t4r=r(HZ,` class
method.`),HZ.forEach(t),a4r=i(wl),y8=n(wl,"P",{});var CDe=s(y8);n4r=r(CDe,"This class cannot be instantiated directly using "),N4e=n(CDe,"CODE",{});var yTt=s(N4e);s4r=r(yTt,"__init__()"),yTt.forEach(t),l4r=r(CDe," (throws an error)."),CDe.forEach(t),i4r=i(wl),Rt=n(wl,"DIV",{class:!0});var CA=s(Rt);T(L8.$$.fragment,CA),d4r=i(CA),j4e=n(CA,"P",{});var LTt=s(j4e);c4r=r(LTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LTt.forEach(t),f4r=i(CA),lc=n(CA,"P",{});var UZ=s(lc);m4r=r(UZ,`Note:
Loading a model from its configuration file does `),D4e=n(UZ,"STRONG",{});var xTt=s(D4e);g4r=r(xTt,"not"),xTt.forEach(t),h4r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(UZ,"A",{href:!0});var $Tt=s(lH);p4r=r($Tt,"from_pretrained()"),$Tt.forEach(t),_4r=r(UZ," to load the model weights."),UZ.forEach(t),u4r=i(CA),T(fM.$$.fragment,CA),CA.forEach(t),b4r=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(x8.$$.fragment,Al),v4r=i(Al),G4e=n(Al,"P",{});var kTt=s(G4e);F4r=r(kTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kTt.forEach(t),T4r=i(Al),nn=n(Al,"P",{});var wA=s(nn);M4r=r(wA,"The model class to instantiate is selected based on the "),O4e=n(wA,"CODE",{});var STt=s(O4e);E4r=r(STt,"model_type"),STt.forEach(t),C4r=r(wA,` property of the config object (either
passed as an argument or loaded from `),V4e=n(wA,"CODE",{});var RTt=s(V4e);w4r=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),A4r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(wA,"CODE",{});var PTt=s(X4e);y4r=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),L4r=r(wA,":"),wA.forEach(t),x4r=i(Al),ee=n(Al,"UL",{});var ae=s(ee);mM=n(ae,"LI",{});var ERe=s(mM);z4e=n(ERe,"STRONG",{});var BTt=s(z4e);$4r=r(BTt,"albert"),BTt.forEach(t),k4r=r(ERe," \u2014 "),iH=n(ERe,"A",{href:!0});var ITt=s(iH);S4r=r(ITt,"TFAlbertForSequenceClassification"),ITt.forEach(t),R4r=r(ERe," (ALBERT model)"),ERe.forEach(t),P4r=i(ae),gM=n(ae,"LI",{});var CRe=s(gM);W4e=n(CRe,"STRONG",{});var qTt=s(W4e);B4r=r(qTt,"bert"),qTt.forEach(t),I4r=r(CRe," \u2014 "),dH=n(CRe,"A",{href:!0});var NTt=s(dH);q4r=r(NTt,"TFBertForSequenceClassification"),NTt.forEach(t),N4r=r(CRe," (BERT model)"),CRe.forEach(t),j4r=i(ae),hM=n(ae,"LI",{});var wRe=s(hM);Q4e=n(wRe,"STRONG",{});var jTt=s(Q4e);D4r=r(jTt,"camembert"),jTt.forEach(t),G4r=r(wRe," \u2014 "),cH=n(wRe,"A",{href:!0});var DTt=s(cH);O4r=r(DTt,"TFCamembertForSequenceClassification"),DTt.forEach(t),V4r=r(wRe," (CamemBERT model)"),wRe.forEach(t),X4r=i(ae),pM=n(ae,"LI",{});var ARe=s(pM);H4e=n(ARe,"STRONG",{});var GTt=s(H4e);z4r=r(GTt,"convbert"),GTt.forEach(t),W4r=r(ARe," \u2014 "),fH=n(ARe,"A",{href:!0});var OTt=s(fH);Q4r=r(OTt,"TFConvBertForSequenceClassification"),OTt.forEach(t),H4r=r(ARe," (ConvBERT model)"),ARe.forEach(t),U4r=i(ae),_M=n(ae,"LI",{});var yRe=s(_M);U4e=n(yRe,"STRONG",{});var VTt=s(U4e);J4r=r(VTt,"ctrl"),VTt.forEach(t),Y4r=r(yRe," \u2014 "),mH=n(yRe,"A",{href:!0});var XTt=s(mH);K4r=r(XTt,"TFCTRLForSequenceClassification"),XTt.forEach(t),Z4r=r(yRe," (CTRL model)"),yRe.forEach(t),e5r=i(ae),uM=n(ae,"LI",{});var LRe=s(uM);J4e=n(LRe,"STRONG",{});var zTt=s(J4e);o5r=r(zTt,"deberta"),zTt.forEach(t),r5r=r(LRe," \u2014 "),gH=n(LRe,"A",{href:!0});var WTt=s(gH);t5r=r(WTt,"TFDebertaForSequenceClassification"),WTt.forEach(t),a5r=r(LRe," (DeBERTa model)"),LRe.forEach(t),n5r=i(ae),bM=n(ae,"LI",{});var xRe=s(bM);Y4e=n(xRe,"STRONG",{});var QTt=s(Y4e);s5r=r(QTt,"deberta-v2"),QTt.forEach(t),l5r=r(xRe," \u2014 "),hH=n(xRe,"A",{href:!0});var HTt=s(hH);i5r=r(HTt,"TFDebertaV2ForSequenceClassification"),HTt.forEach(t),d5r=r(xRe," (DeBERTa-v2 model)"),xRe.forEach(t),c5r=i(ae),vM=n(ae,"LI",{});var $Re=s(vM);K4e=n($Re,"STRONG",{});var UTt=s(K4e);f5r=r(UTt,"distilbert"),UTt.forEach(t),m5r=r($Re," \u2014 "),pH=n($Re,"A",{href:!0});var JTt=s(pH);g5r=r(JTt,"TFDistilBertForSequenceClassification"),JTt.forEach(t),h5r=r($Re," (DistilBERT model)"),$Re.forEach(t),p5r=i(ae),FM=n(ae,"LI",{});var kRe=s(FM);Z4e=n(kRe,"STRONG",{});var YTt=s(Z4e);_5r=r(YTt,"electra"),YTt.forEach(t),u5r=r(kRe," \u2014 "),_H=n(kRe,"A",{href:!0});var KTt=s(_H);b5r=r(KTt,"TFElectraForSequenceClassification"),KTt.forEach(t),v5r=r(kRe," (ELECTRA model)"),kRe.forEach(t),F5r=i(ae),TM=n(ae,"LI",{});var SRe=s(TM);e5e=n(SRe,"STRONG",{});var ZTt=s(e5e);T5r=r(ZTt,"flaubert"),ZTt.forEach(t),M5r=r(SRe," \u2014 "),uH=n(SRe,"A",{href:!0});var e7t=s(uH);E5r=r(e7t,"TFFlaubertForSequenceClassification"),e7t.forEach(t),C5r=r(SRe," (FlauBERT model)"),SRe.forEach(t),w5r=i(ae),MM=n(ae,"LI",{});var RRe=s(MM);o5e=n(RRe,"STRONG",{});var o7t=s(o5e);A5r=r(o7t,"funnel"),o7t.forEach(t),y5r=r(RRe," \u2014 "),bH=n(RRe,"A",{href:!0});var r7t=s(bH);L5r=r(r7t,"TFFunnelForSequenceClassification"),r7t.forEach(t),x5r=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),$5r=i(ae),EM=n(ae,"LI",{});var PRe=s(EM);r5e=n(PRe,"STRONG",{});var t7t=s(r5e);k5r=r(t7t,"gpt2"),t7t.forEach(t),S5r=r(PRe," \u2014 "),vH=n(PRe,"A",{href:!0});var a7t=s(vH);R5r=r(a7t,"TFGPT2ForSequenceClassification"),a7t.forEach(t),P5r=r(PRe," (OpenAI GPT-2 model)"),PRe.forEach(t),B5r=i(ae),CM=n(ae,"LI",{});var BRe=s(CM);t5e=n(BRe,"STRONG",{});var n7t=s(t5e);I5r=r(n7t,"gptj"),n7t.forEach(t),q5r=r(BRe," \u2014 "),FH=n(BRe,"A",{href:!0});var s7t=s(FH);N5r=r(s7t,"TFGPTJForSequenceClassification"),s7t.forEach(t),j5r=r(BRe," (GPT-J model)"),BRe.forEach(t),D5r=i(ae),wM=n(ae,"LI",{});var IRe=s(wM);a5e=n(IRe,"STRONG",{});var l7t=s(a5e);G5r=r(l7t,"layoutlm"),l7t.forEach(t),O5r=r(IRe," \u2014 "),TH=n(IRe,"A",{href:!0});var i7t=s(TH);V5r=r(i7t,"TFLayoutLMForSequenceClassification"),i7t.forEach(t),X5r=r(IRe," (LayoutLM model)"),IRe.forEach(t),z5r=i(ae),AM=n(ae,"LI",{});var qRe=s(AM);n5e=n(qRe,"STRONG",{});var d7t=s(n5e);W5r=r(d7t,"longformer"),d7t.forEach(t),Q5r=r(qRe," \u2014 "),MH=n(qRe,"A",{href:!0});var c7t=s(MH);H5r=r(c7t,"TFLongformerForSequenceClassification"),c7t.forEach(t),U5r=r(qRe," (Longformer model)"),qRe.forEach(t),J5r=i(ae),yM=n(ae,"LI",{});var NRe=s(yM);s5e=n(NRe,"STRONG",{});var f7t=s(s5e);Y5r=r(f7t,"mobilebert"),f7t.forEach(t),K5r=r(NRe," \u2014 "),EH=n(NRe,"A",{href:!0});var m7t=s(EH);Z5r=r(m7t,"TFMobileBertForSequenceClassification"),m7t.forEach(t),evr=r(NRe," (MobileBERT model)"),NRe.forEach(t),ovr=i(ae),LM=n(ae,"LI",{});var jRe=s(LM);l5e=n(jRe,"STRONG",{});var g7t=s(l5e);rvr=r(g7t,"mpnet"),g7t.forEach(t),tvr=r(jRe," \u2014 "),CH=n(jRe,"A",{href:!0});var h7t=s(CH);avr=r(h7t,"TFMPNetForSequenceClassification"),h7t.forEach(t),nvr=r(jRe," (MPNet model)"),jRe.forEach(t),svr=i(ae),xM=n(ae,"LI",{});var DRe=s(xM);i5e=n(DRe,"STRONG",{});var p7t=s(i5e);lvr=r(p7t,"openai-gpt"),p7t.forEach(t),ivr=r(DRe," \u2014 "),wH=n(DRe,"A",{href:!0});var _7t=s(wH);dvr=r(_7t,"TFOpenAIGPTForSequenceClassification"),_7t.forEach(t),cvr=r(DRe," (OpenAI GPT model)"),DRe.forEach(t),fvr=i(ae),$M=n(ae,"LI",{});var GRe=s($M);d5e=n(GRe,"STRONG",{});var u7t=s(d5e);mvr=r(u7t,"rembert"),u7t.forEach(t),gvr=r(GRe," \u2014 "),AH=n(GRe,"A",{href:!0});var b7t=s(AH);hvr=r(b7t,"TFRemBertForSequenceClassification"),b7t.forEach(t),pvr=r(GRe," (RemBERT model)"),GRe.forEach(t),_vr=i(ae),kM=n(ae,"LI",{});var ORe=s(kM);c5e=n(ORe,"STRONG",{});var v7t=s(c5e);uvr=r(v7t,"roberta"),v7t.forEach(t),bvr=r(ORe," \u2014 "),yH=n(ORe,"A",{href:!0});var F7t=s(yH);vvr=r(F7t,"TFRobertaForSequenceClassification"),F7t.forEach(t),Fvr=r(ORe," (RoBERTa model)"),ORe.forEach(t),Tvr=i(ae),SM=n(ae,"LI",{});var VRe=s(SM);f5e=n(VRe,"STRONG",{});var T7t=s(f5e);Mvr=r(T7t,"roformer"),T7t.forEach(t),Evr=r(VRe," \u2014 "),LH=n(VRe,"A",{href:!0});var M7t=s(LH);Cvr=r(M7t,"TFRoFormerForSequenceClassification"),M7t.forEach(t),wvr=r(VRe," (RoFormer model)"),VRe.forEach(t),Avr=i(ae),RM=n(ae,"LI",{});var XRe=s(RM);m5e=n(XRe,"STRONG",{});var E7t=s(m5e);yvr=r(E7t,"tapas"),E7t.forEach(t),Lvr=r(XRe," \u2014 "),xH=n(XRe,"A",{href:!0});var C7t=s(xH);xvr=r(C7t,"TFTapasForSequenceClassification"),C7t.forEach(t),$vr=r(XRe," (TAPAS model)"),XRe.forEach(t),kvr=i(ae),PM=n(ae,"LI",{});var zRe=s(PM);g5e=n(zRe,"STRONG",{});var w7t=s(g5e);Svr=r(w7t,"transfo-xl"),w7t.forEach(t),Rvr=r(zRe," \u2014 "),$H=n(zRe,"A",{href:!0});var A7t=s($H);Pvr=r(A7t,"TFTransfoXLForSequenceClassification"),A7t.forEach(t),Bvr=r(zRe," (Transformer-XL model)"),zRe.forEach(t),Ivr=i(ae),BM=n(ae,"LI",{});var WRe=s(BM);h5e=n(WRe,"STRONG",{});var y7t=s(h5e);qvr=r(y7t,"xlm"),y7t.forEach(t),Nvr=r(WRe," \u2014 "),kH=n(WRe,"A",{href:!0});var L7t=s(kH);jvr=r(L7t,"TFXLMForSequenceClassification"),L7t.forEach(t),Dvr=r(WRe," (XLM model)"),WRe.forEach(t),Gvr=i(ae),IM=n(ae,"LI",{});var QRe=s(IM);p5e=n(QRe,"STRONG",{});var x7t=s(p5e);Ovr=r(x7t,"xlm-roberta"),x7t.forEach(t),Vvr=r(QRe," \u2014 "),SH=n(QRe,"A",{href:!0});var $7t=s(SH);Xvr=r($7t,"TFXLMRobertaForSequenceClassification"),$7t.forEach(t),zvr=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),Wvr=i(ae),qM=n(ae,"LI",{});var HRe=s(qM);_5e=n(HRe,"STRONG",{});var k7t=s(_5e);Qvr=r(k7t,"xlnet"),k7t.forEach(t),Hvr=r(HRe," \u2014 "),RH=n(HRe,"A",{href:!0});var S7t=s(RH);Uvr=r(S7t,"TFXLNetForSequenceClassification"),S7t.forEach(t),Jvr=r(HRe," (XLNet model)"),HRe.forEach(t),ae.forEach(t),Yvr=i(Al),T(NM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),vNe=i(f),ic=n(f,"H2",{class:!0});var wDe=s(ic);jM=n(wDe,"A",{id:!0,class:!0,href:!0});var R7t=s(jM);u5e=n(R7t,"SPAN",{});var P7t=s(u5e);T($8.$$.fragment,P7t),P7t.forEach(t),R7t.forEach(t),Kvr=i(wDe),b5e=n(wDe,"SPAN",{});var B7t=s(b5e);Zvr=r(B7t,"TFAutoModelForMultipleChoice"),B7t.forEach(t),wDe.forEach(t),FNe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(k8.$$.fragment,yl),eFr=i(yl),dc=n(yl,"P",{});var JZ=s(dc);oFr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PH=n(JZ,"A",{href:!0});var I7t=s(PH);rFr=r(I7t,"from_pretrained()"),I7t.forEach(t),tFr=r(JZ," class method or the "),BH=n(JZ,"A",{href:!0});var q7t=s(BH);aFr=r(q7t,"from_config()"),q7t.forEach(t),nFr=r(JZ,` class
method.`),JZ.forEach(t),sFr=i(yl),S8=n(yl,"P",{});var ADe=s(S8);lFr=r(ADe,"This class cannot be instantiated directly using "),v5e=n(ADe,"CODE",{});var N7t=s(v5e);iFr=r(N7t,"__init__()"),N7t.forEach(t),dFr=r(ADe," (throws an error)."),ADe.forEach(t),cFr=i(yl),Pt=n(yl,"DIV",{class:!0});var AA=s(Pt);T(R8.$$.fragment,AA),fFr=i(AA),F5e=n(AA,"P",{});var j7t=s(F5e);mFr=r(j7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j7t.forEach(t),gFr=i(AA),cc=n(AA,"P",{});var YZ=s(cc);hFr=r(YZ,`Note:
Loading a model from its configuration file does `),T5e=n(YZ,"STRONG",{});var D7t=s(T5e);pFr=r(D7t,"not"),D7t.forEach(t),_Fr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(YZ,"A",{href:!0});var G7t=s(IH);uFr=r(G7t,"from_pretrained()"),G7t.forEach(t),bFr=r(YZ," to load the model weights."),YZ.forEach(t),vFr=i(AA),T(DM.$$.fragment,AA),AA.forEach(t),FFr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(P8.$$.fragment,Ll),TFr=i(Ll),M5e=n(Ll,"P",{});var O7t=s(M5e);MFr=r(O7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O7t.forEach(t),EFr=i(Ll),sn=n(Ll,"P",{});var yA=s(sn);CFr=r(yA,"The model class to instantiate is selected based on the "),E5e=n(yA,"CODE",{});var V7t=s(E5e);wFr=r(V7t,"model_type"),V7t.forEach(t),AFr=r(yA,` property of the config object (either
passed as an argument or loaded from `),C5e=n(yA,"CODE",{});var X7t=s(C5e);yFr=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),LFr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(yA,"CODE",{});var z7t=s(w5e);xFr=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),$Fr=r(yA,":"),yA.forEach(t),kFr=i(Ll),he=n(Ll,"UL",{});var ue=s(he);GM=n(ue,"LI",{});var URe=s(GM);A5e=n(URe,"STRONG",{});var W7t=s(A5e);SFr=r(W7t,"albert"),W7t.forEach(t),RFr=r(URe," \u2014 "),qH=n(URe,"A",{href:!0});var Q7t=s(qH);PFr=r(Q7t,"TFAlbertForMultipleChoice"),Q7t.forEach(t),BFr=r(URe," (ALBERT model)"),URe.forEach(t),IFr=i(ue),OM=n(ue,"LI",{});var JRe=s(OM);y5e=n(JRe,"STRONG",{});var H7t=s(y5e);qFr=r(H7t,"bert"),H7t.forEach(t),NFr=r(JRe," \u2014 "),NH=n(JRe,"A",{href:!0});var U7t=s(NH);jFr=r(U7t,"TFBertForMultipleChoice"),U7t.forEach(t),DFr=r(JRe," (BERT model)"),JRe.forEach(t),GFr=i(ue),VM=n(ue,"LI",{});var YRe=s(VM);L5e=n(YRe,"STRONG",{});var J7t=s(L5e);OFr=r(J7t,"camembert"),J7t.forEach(t),VFr=r(YRe," \u2014 "),jH=n(YRe,"A",{href:!0});var Y7t=s(jH);XFr=r(Y7t,"TFCamembertForMultipleChoice"),Y7t.forEach(t),zFr=r(YRe," (CamemBERT model)"),YRe.forEach(t),WFr=i(ue),XM=n(ue,"LI",{});var KRe=s(XM);x5e=n(KRe,"STRONG",{});var K7t=s(x5e);QFr=r(K7t,"convbert"),K7t.forEach(t),HFr=r(KRe," \u2014 "),DH=n(KRe,"A",{href:!0});var Z7t=s(DH);UFr=r(Z7t,"TFConvBertForMultipleChoice"),Z7t.forEach(t),JFr=r(KRe," (ConvBERT model)"),KRe.forEach(t),YFr=i(ue),zM=n(ue,"LI",{});var ZRe=s(zM);$5e=n(ZRe,"STRONG",{});var eMt=s($5e);KFr=r(eMt,"distilbert"),eMt.forEach(t),ZFr=r(ZRe," \u2014 "),GH=n(ZRe,"A",{href:!0});var oMt=s(GH);eTr=r(oMt,"TFDistilBertForMultipleChoice"),oMt.forEach(t),oTr=r(ZRe," (DistilBERT model)"),ZRe.forEach(t),rTr=i(ue),WM=n(ue,"LI",{});var ePe=s(WM);k5e=n(ePe,"STRONG",{});var rMt=s(k5e);tTr=r(rMt,"electra"),rMt.forEach(t),aTr=r(ePe," \u2014 "),OH=n(ePe,"A",{href:!0});var tMt=s(OH);nTr=r(tMt,"TFElectraForMultipleChoice"),tMt.forEach(t),sTr=r(ePe," (ELECTRA model)"),ePe.forEach(t),lTr=i(ue),QM=n(ue,"LI",{});var oPe=s(QM);S5e=n(oPe,"STRONG",{});var aMt=s(S5e);iTr=r(aMt,"flaubert"),aMt.forEach(t),dTr=r(oPe," \u2014 "),VH=n(oPe,"A",{href:!0});var nMt=s(VH);cTr=r(nMt,"TFFlaubertForMultipleChoice"),nMt.forEach(t),fTr=r(oPe," (FlauBERT model)"),oPe.forEach(t),mTr=i(ue),HM=n(ue,"LI",{});var rPe=s(HM);R5e=n(rPe,"STRONG",{});var sMt=s(R5e);gTr=r(sMt,"funnel"),sMt.forEach(t),hTr=r(rPe," \u2014 "),XH=n(rPe,"A",{href:!0});var lMt=s(XH);pTr=r(lMt,"TFFunnelForMultipleChoice"),lMt.forEach(t),_Tr=r(rPe," (Funnel Transformer model)"),rPe.forEach(t),uTr=i(ue),UM=n(ue,"LI",{});var tPe=s(UM);P5e=n(tPe,"STRONG",{});var iMt=s(P5e);bTr=r(iMt,"longformer"),iMt.forEach(t),vTr=r(tPe," \u2014 "),zH=n(tPe,"A",{href:!0});var dMt=s(zH);FTr=r(dMt,"TFLongformerForMultipleChoice"),dMt.forEach(t),TTr=r(tPe," (Longformer model)"),tPe.forEach(t),MTr=i(ue),JM=n(ue,"LI",{});var aPe=s(JM);B5e=n(aPe,"STRONG",{});var cMt=s(B5e);ETr=r(cMt,"mobilebert"),cMt.forEach(t),CTr=r(aPe," \u2014 "),WH=n(aPe,"A",{href:!0});var fMt=s(WH);wTr=r(fMt,"TFMobileBertForMultipleChoice"),fMt.forEach(t),ATr=r(aPe," (MobileBERT model)"),aPe.forEach(t),yTr=i(ue),YM=n(ue,"LI",{});var nPe=s(YM);I5e=n(nPe,"STRONG",{});var mMt=s(I5e);LTr=r(mMt,"mpnet"),mMt.forEach(t),xTr=r(nPe," \u2014 "),QH=n(nPe,"A",{href:!0});var gMt=s(QH);$Tr=r(gMt,"TFMPNetForMultipleChoice"),gMt.forEach(t),kTr=r(nPe," (MPNet model)"),nPe.forEach(t),STr=i(ue),KM=n(ue,"LI",{});var sPe=s(KM);q5e=n(sPe,"STRONG",{});var hMt=s(q5e);RTr=r(hMt,"rembert"),hMt.forEach(t),PTr=r(sPe," \u2014 "),HH=n(sPe,"A",{href:!0});var pMt=s(HH);BTr=r(pMt,"TFRemBertForMultipleChoice"),pMt.forEach(t),ITr=r(sPe," (RemBERT model)"),sPe.forEach(t),qTr=i(ue),ZM=n(ue,"LI",{});var lPe=s(ZM);N5e=n(lPe,"STRONG",{});var _Mt=s(N5e);NTr=r(_Mt,"roberta"),_Mt.forEach(t),jTr=r(lPe," \u2014 "),UH=n(lPe,"A",{href:!0});var uMt=s(UH);DTr=r(uMt,"TFRobertaForMultipleChoice"),uMt.forEach(t),GTr=r(lPe," (RoBERTa model)"),lPe.forEach(t),OTr=i(ue),eE=n(ue,"LI",{});var iPe=s(eE);j5e=n(iPe,"STRONG",{});var bMt=s(j5e);VTr=r(bMt,"roformer"),bMt.forEach(t),XTr=r(iPe," \u2014 "),JH=n(iPe,"A",{href:!0});var vMt=s(JH);zTr=r(vMt,"TFRoFormerForMultipleChoice"),vMt.forEach(t),WTr=r(iPe," (RoFormer model)"),iPe.forEach(t),QTr=i(ue),oE=n(ue,"LI",{});var dPe=s(oE);D5e=n(dPe,"STRONG",{});var FMt=s(D5e);HTr=r(FMt,"xlm"),FMt.forEach(t),UTr=r(dPe," \u2014 "),YH=n(dPe,"A",{href:!0});var TMt=s(YH);JTr=r(TMt,"TFXLMForMultipleChoice"),TMt.forEach(t),YTr=r(dPe," (XLM model)"),dPe.forEach(t),KTr=i(ue),rE=n(ue,"LI",{});var cPe=s(rE);G5e=n(cPe,"STRONG",{});var MMt=s(G5e);ZTr=r(MMt,"xlm-roberta"),MMt.forEach(t),e7r=r(cPe," \u2014 "),KH=n(cPe,"A",{href:!0});var EMt=s(KH);o7r=r(EMt,"TFXLMRobertaForMultipleChoice"),EMt.forEach(t),r7r=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),t7r=i(ue),tE=n(ue,"LI",{});var fPe=s(tE);O5e=n(fPe,"STRONG",{});var CMt=s(O5e);a7r=r(CMt,"xlnet"),CMt.forEach(t),n7r=r(fPe," \u2014 "),ZH=n(fPe,"A",{href:!0});var wMt=s(ZH);s7r=r(wMt,"TFXLNetForMultipleChoice"),wMt.forEach(t),l7r=r(fPe," (XLNet model)"),fPe.forEach(t),ue.forEach(t),i7r=i(Ll),T(aE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),TNe=i(f),fc=n(f,"H2",{class:!0});var yDe=s(fc);nE=n(yDe,"A",{id:!0,class:!0,href:!0});var AMt=s(nE);V5e=n(AMt,"SPAN",{});var yMt=s(V5e);T(B8.$$.fragment,yMt),yMt.forEach(t),AMt.forEach(t),d7r=i(yDe),X5e=n(yDe,"SPAN",{});var LMt=s(X5e);c7r=r(LMt,"TFAutoModelForNextSentencePrediction"),LMt.forEach(t),yDe.forEach(t),MNe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(I8.$$.fragment,xl),f7r=i(xl),mc=n(xl,"P",{});var KZ=s(mc);m7r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=n(KZ,"A",{href:!0});var xMt=s(eU);g7r=r(xMt,"from_pretrained()"),xMt.forEach(t),h7r=r(KZ," class method or the "),oU=n(KZ,"A",{href:!0});var $Mt=s(oU);p7r=r($Mt,"from_config()"),$Mt.forEach(t),_7r=r(KZ,` class
method.`),KZ.forEach(t),u7r=i(xl),q8=n(xl,"P",{});var LDe=s(q8);b7r=r(LDe,"This class cannot be instantiated directly using "),z5e=n(LDe,"CODE",{});var kMt=s(z5e);v7r=r(kMt,"__init__()"),kMt.forEach(t),F7r=r(LDe," (throws an error)."),LDe.forEach(t),T7r=i(xl),Bt=n(xl,"DIV",{class:!0});var LA=s(Bt);T(N8.$$.fragment,LA),M7r=i(LA),W5e=n(LA,"P",{});var SMt=s(W5e);E7r=r(SMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SMt.forEach(t),C7r=i(LA),gc=n(LA,"P",{});var ZZ=s(gc);w7r=r(ZZ,`Note:
Loading a model from its configuration file does `),Q5e=n(ZZ,"STRONG",{});var RMt=s(Q5e);A7r=r(RMt,"not"),RMt.forEach(t),y7r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(ZZ,"A",{href:!0});var PMt=s(rU);L7r=r(PMt,"from_pretrained()"),PMt.forEach(t),x7r=r(ZZ," to load the model weights."),ZZ.forEach(t),$7r=i(LA),T(sE.$$.fragment,LA),LA.forEach(t),k7r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(j8.$$.fragment,$l),S7r=i($l),H5e=n($l,"P",{});var BMt=s(H5e);R7r=r(BMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BMt.forEach(t),P7r=i($l),ln=n($l,"P",{});var xA=s(ln);B7r=r(xA,"The model class to instantiate is selected based on the "),U5e=n(xA,"CODE",{});var IMt=s(U5e);I7r=r(IMt,"model_type"),IMt.forEach(t),q7r=r(xA,` property of the config object (either
passed as an argument or loaded from `),J5e=n(xA,"CODE",{});var qMt=s(J5e);N7r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),j7r=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(xA,"CODE",{});var NMt=s(Y5e);D7r=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),G7r=r(xA,":"),xA.forEach(t),O7r=i($l),D8=n($l,"UL",{});var xDe=s(D8);lE=n(xDe,"LI",{});var mPe=s(lE);K5e=n(mPe,"STRONG",{});var jMt=s(K5e);V7r=r(jMt,"bert"),jMt.forEach(t),X7r=r(mPe," \u2014 "),tU=n(mPe,"A",{href:!0});var DMt=s(tU);z7r=r(DMt,"TFBertForNextSentencePrediction"),DMt.forEach(t),W7r=r(mPe," (BERT model)"),mPe.forEach(t),Q7r=i(xDe),iE=n(xDe,"LI",{});var gPe=s(iE);Z5e=n(gPe,"STRONG",{});var GMt=s(Z5e);H7r=r(GMt,"mobilebert"),GMt.forEach(t),U7r=r(gPe," \u2014 "),aU=n(gPe,"A",{href:!0});var OMt=s(aU);J7r=r(OMt,"TFMobileBertForNextSentencePrediction"),OMt.forEach(t),Y7r=r(gPe," (MobileBERT model)"),gPe.forEach(t),xDe.forEach(t),K7r=i($l),T(dE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),ENe=i(f),hc=n(f,"H2",{class:!0});var $De=s(hc);cE=n($De,"A",{id:!0,class:!0,href:!0});var VMt=s(cE);eve=n(VMt,"SPAN",{});var XMt=s(eve);T(G8.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),Z7r=i($De),ove=n($De,"SPAN",{});var zMt=s(ove);eMr=r(zMt,"TFAutoModelForTableQuestionAnswering"),zMt.forEach(t),$De.forEach(t),CNe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(O8.$$.fragment,kl),oMr=i(kl),pc=n(kl,"P",{});var eee=s(pc);rMr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nU=n(eee,"A",{href:!0});var WMt=s(nU);tMr=r(WMt,"from_pretrained()"),WMt.forEach(t),aMr=r(eee," class method or the "),sU=n(eee,"A",{href:!0});var QMt=s(sU);nMr=r(QMt,"from_config()"),QMt.forEach(t),sMr=r(eee,` class
method.`),eee.forEach(t),lMr=i(kl),V8=n(kl,"P",{});var kDe=s(V8);iMr=r(kDe,"This class cannot be instantiated directly using "),rve=n(kDe,"CODE",{});var HMt=s(rve);dMr=r(HMt,"__init__()"),HMt.forEach(t),cMr=r(kDe," (throws an error)."),kDe.forEach(t),fMr=i(kl),It=n(kl,"DIV",{class:!0});var $A=s(It);T(X8.$$.fragment,$A),mMr=i($A),tve=n($A,"P",{});var UMt=s(tve);gMr=r(UMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UMt.forEach(t),hMr=i($A),_c=n($A,"P",{});var oee=s(_c);pMr=r(oee,`Note:
Loading a model from its configuration file does `),ave=n(oee,"STRONG",{});var JMt=s(ave);_Mr=r(JMt,"not"),JMt.forEach(t),uMr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(oee,"A",{href:!0});var YMt=s(lU);bMr=r(YMt,"from_pretrained()"),YMt.forEach(t),vMr=r(oee," to load the model weights."),oee.forEach(t),FMr=i($A),T(fE.$$.fragment,$A),$A.forEach(t),TMr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(z8.$$.fragment,Sl),MMr=i(Sl),nve=n(Sl,"P",{});var KMt=s(nve);EMr=r(KMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KMt.forEach(t),CMr=i(Sl),dn=n(Sl,"P",{});var kA=s(dn);wMr=r(kA,"The model class to instantiate is selected based on the "),sve=n(kA,"CODE",{});var ZMt=s(sve);AMr=r(ZMt,"model_type"),ZMt.forEach(t),yMr=r(kA,` property of the config object (either
passed as an argument or loaded from `),lve=n(kA,"CODE",{});var eEt=s(lve);LMr=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),xMr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(kA,"CODE",{});var oEt=s(ive);$Mr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),kMr=r(kA,":"),kA.forEach(t),SMr=i(Sl),dve=n(Sl,"UL",{});var rEt=s(dve);mE=n(rEt,"LI",{});var hPe=s(mE);cve=n(hPe,"STRONG",{});var tEt=s(cve);RMr=r(tEt,"tapas"),tEt.forEach(t),PMr=r(hPe," \u2014 "),iU=n(hPe,"A",{href:!0});var aEt=s(iU);BMr=r(aEt,"TFTapasForQuestionAnswering"),aEt.forEach(t),IMr=r(hPe," (TAPAS model)"),hPe.forEach(t),rEt.forEach(t),qMr=i(Sl),T(gE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),wNe=i(f),uc=n(f,"H2",{class:!0});var SDe=s(uc);hE=n(SDe,"A",{id:!0,class:!0,href:!0});var nEt=s(hE);fve=n(nEt,"SPAN",{});var sEt=s(fve);T(W8.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),NMr=i(SDe),mve=n(SDe,"SPAN",{});var lEt=s(mve);jMr=r(lEt,"TFAutoModelForTokenClassification"),lEt.forEach(t),SDe.forEach(t),ANe=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(Q8.$$.fragment,Rl),DMr=i(Rl),bc=n(Rl,"P",{});var ree=s(bc);GMr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dU=n(ree,"A",{href:!0});var iEt=s(dU);OMr=r(iEt,"from_pretrained()"),iEt.forEach(t),VMr=r(ree," class method or the "),cU=n(ree,"A",{href:!0});var dEt=s(cU);XMr=r(dEt,"from_config()"),dEt.forEach(t),zMr=r(ree,` class
method.`),ree.forEach(t),WMr=i(Rl),H8=n(Rl,"P",{});var RDe=s(H8);QMr=r(RDe,"This class cannot be instantiated directly using "),gve=n(RDe,"CODE",{});var cEt=s(gve);HMr=r(cEt,"__init__()"),cEt.forEach(t),UMr=r(RDe," (throws an error)."),RDe.forEach(t),JMr=i(Rl),qt=n(Rl,"DIV",{class:!0});var SA=s(qt);T(U8.$$.fragment,SA),YMr=i(SA),hve=n(SA,"P",{});var fEt=s(hve);KMr=r(fEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fEt.forEach(t),ZMr=i(SA),vc=n(SA,"P",{});var tee=s(vc);eEr=r(tee,`Note:
Loading a model from its configuration file does `),pve=n(tee,"STRONG",{});var mEt=s(pve);oEr=r(mEt,"not"),mEt.forEach(t),rEr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(tee,"A",{href:!0});var gEt=s(fU);tEr=r(gEt,"from_pretrained()"),gEt.forEach(t),aEr=r(tee," to load the model weights."),tee.forEach(t),nEr=i(SA),T(pE.$$.fragment,SA),SA.forEach(t),sEr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(J8.$$.fragment,Pl),lEr=i(Pl),_ve=n(Pl,"P",{});var hEt=s(_ve);iEr=r(hEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hEt.forEach(t),dEr=i(Pl),cn=n(Pl,"P",{});var RA=s(cn);cEr=r(RA,"The model class to instantiate is selected based on the "),uve=n(RA,"CODE",{});var pEt=s(uve);fEr=r(pEt,"model_type"),pEt.forEach(t),mEr=r(RA,` property of the config object (either
passed as an argument or loaded from `),bve=n(RA,"CODE",{});var _Et=s(bve);gEr=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),hEr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(RA,"CODE",{});var uEt=s(vve);pEr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),_Er=r(RA,":"),RA.forEach(t),uEr=i(Pl),de=n(Pl,"UL",{});var me=s(de);_E=n(me,"LI",{});var pPe=s(_E);Fve=n(pPe,"STRONG",{});var bEt=s(Fve);bEr=r(bEt,"albert"),bEt.forEach(t),vEr=r(pPe," \u2014 "),mU=n(pPe,"A",{href:!0});var vEt=s(mU);FEr=r(vEt,"TFAlbertForTokenClassification"),vEt.forEach(t),TEr=r(pPe," (ALBERT model)"),pPe.forEach(t),MEr=i(me),uE=n(me,"LI",{});var _Pe=s(uE);Tve=n(_Pe,"STRONG",{});var FEt=s(Tve);EEr=r(FEt,"bert"),FEt.forEach(t),CEr=r(_Pe," \u2014 "),gU=n(_Pe,"A",{href:!0});var TEt=s(gU);wEr=r(TEt,"TFBertForTokenClassification"),TEt.forEach(t),AEr=r(_Pe," (BERT model)"),_Pe.forEach(t),yEr=i(me),bE=n(me,"LI",{});var uPe=s(bE);Mve=n(uPe,"STRONG",{});var MEt=s(Mve);LEr=r(MEt,"camembert"),MEt.forEach(t),xEr=r(uPe," \u2014 "),hU=n(uPe,"A",{href:!0});var EEt=s(hU);$Er=r(EEt,"TFCamembertForTokenClassification"),EEt.forEach(t),kEr=r(uPe," (CamemBERT model)"),uPe.forEach(t),SEr=i(me),vE=n(me,"LI",{});var bPe=s(vE);Eve=n(bPe,"STRONG",{});var CEt=s(Eve);REr=r(CEt,"convbert"),CEt.forEach(t),PEr=r(bPe," \u2014 "),pU=n(bPe,"A",{href:!0});var wEt=s(pU);BEr=r(wEt,"TFConvBertForTokenClassification"),wEt.forEach(t),IEr=r(bPe," (ConvBERT model)"),bPe.forEach(t),qEr=i(me),FE=n(me,"LI",{});var vPe=s(FE);Cve=n(vPe,"STRONG",{});var AEt=s(Cve);NEr=r(AEt,"deberta"),AEt.forEach(t),jEr=r(vPe," \u2014 "),_U=n(vPe,"A",{href:!0});var yEt=s(_U);DEr=r(yEt,"TFDebertaForTokenClassification"),yEt.forEach(t),GEr=r(vPe," (DeBERTa model)"),vPe.forEach(t),OEr=i(me),TE=n(me,"LI",{});var FPe=s(TE);wve=n(FPe,"STRONG",{});var LEt=s(wve);VEr=r(LEt,"deberta-v2"),LEt.forEach(t),XEr=r(FPe," \u2014 "),uU=n(FPe,"A",{href:!0});var xEt=s(uU);zEr=r(xEt,"TFDebertaV2ForTokenClassification"),xEt.forEach(t),WEr=r(FPe," (DeBERTa-v2 model)"),FPe.forEach(t),QEr=i(me),ME=n(me,"LI",{});var TPe=s(ME);Ave=n(TPe,"STRONG",{});var $Et=s(Ave);HEr=r($Et,"distilbert"),$Et.forEach(t),UEr=r(TPe," \u2014 "),bU=n(TPe,"A",{href:!0});var kEt=s(bU);JEr=r(kEt,"TFDistilBertForTokenClassification"),kEt.forEach(t),YEr=r(TPe," (DistilBERT model)"),TPe.forEach(t),KEr=i(me),EE=n(me,"LI",{});var MPe=s(EE);yve=n(MPe,"STRONG",{});var SEt=s(yve);ZEr=r(SEt,"electra"),SEt.forEach(t),eCr=r(MPe," \u2014 "),vU=n(MPe,"A",{href:!0});var REt=s(vU);oCr=r(REt,"TFElectraForTokenClassification"),REt.forEach(t),rCr=r(MPe," (ELECTRA model)"),MPe.forEach(t),tCr=i(me),CE=n(me,"LI",{});var EPe=s(CE);Lve=n(EPe,"STRONG",{});var PEt=s(Lve);aCr=r(PEt,"flaubert"),PEt.forEach(t),nCr=r(EPe," \u2014 "),FU=n(EPe,"A",{href:!0});var BEt=s(FU);sCr=r(BEt,"TFFlaubertForTokenClassification"),BEt.forEach(t),lCr=r(EPe," (FlauBERT model)"),EPe.forEach(t),iCr=i(me),wE=n(me,"LI",{});var CPe=s(wE);xve=n(CPe,"STRONG",{});var IEt=s(xve);dCr=r(IEt,"funnel"),IEt.forEach(t),cCr=r(CPe," \u2014 "),TU=n(CPe,"A",{href:!0});var qEt=s(TU);fCr=r(qEt,"TFFunnelForTokenClassification"),qEt.forEach(t),mCr=r(CPe," (Funnel Transformer model)"),CPe.forEach(t),gCr=i(me),AE=n(me,"LI",{});var wPe=s(AE);$ve=n(wPe,"STRONG",{});var NEt=s($ve);hCr=r(NEt,"layoutlm"),NEt.forEach(t),pCr=r(wPe," \u2014 "),MU=n(wPe,"A",{href:!0});var jEt=s(MU);_Cr=r(jEt,"TFLayoutLMForTokenClassification"),jEt.forEach(t),uCr=r(wPe," (LayoutLM model)"),wPe.forEach(t),bCr=i(me),yE=n(me,"LI",{});var APe=s(yE);kve=n(APe,"STRONG",{});var DEt=s(kve);vCr=r(DEt,"longformer"),DEt.forEach(t),FCr=r(APe," \u2014 "),EU=n(APe,"A",{href:!0});var GEt=s(EU);TCr=r(GEt,"TFLongformerForTokenClassification"),GEt.forEach(t),MCr=r(APe," (Longformer model)"),APe.forEach(t),ECr=i(me),LE=n(me,"LI",{});var yPe=s(LE);Sve=n(yPe,"STRONG",{});var OEt=s(Sve);CCr=r(OEt,"mobilebert"),OEt.forEach(t),wCr=r(yPe," \u2014 "),CU=n(yPe,"A",{href:!0});var VEt=s(CU);ACr=r(VEt,"TFMobileBertForTokenClassification"),VEt.forEach(t),yCr=r(yPe," (MobileBERT model)"),yPe.forEach(t),LCr=i(me),xE=n(me,"LI",{});var LPe=s(xE);Rve=n(LPe,"STRONG",{});var XEt=s(Rve);xCr=r(XEt,"mpnet"),XEt.forEach(t),$Cr=r(LPe," \u2014 "),wU=n(LPe,"A",{href:!0});var zEt=s(wU);kCr=r(zEt,"TFMPNetForTokenClassification"),zEt.forEach(t),SCr=r(LPe," (MPNet model)"),LPe.forEach(t),RCr=i(me),$E=n(me,"LI",{});var xPe=s($E);Pve=n(xPe,"STRONG",{});var WEt=s(Pve);PCr=r(WEt,"rembert"),WEt.forEach(t),BCr=r(xPe," \u2014 "),AU=n(xPe,"A",{href:!0});var QEt=s(AU);ICr=r(QEt,"TFRemBertForTokenClassification"),QEt.forEach(t),qCr=r(xPe," (RemBERT model)"),xPe.forEach(t),NCr=i(me),kE=n(me,"LI",{});var $Pe=s(kE);Bve=n($Pe,"STRONG",{});var HEt=s(Bve);jCr=r(HEt,"roberta"),HEt.forEach(t),DCr=r($Pe," \u2014 "),yU=n($Pe,"A",{href:!0});var UEt=s(yU);GCr=r(UEt,"TFRobertaForTokenClassification"),UEt.forEach(t),OCr=r($Pe," (RoBERTa model)"),$Pe.forEach(t),VCr=i(me),SE=n(me,"LI",{});var kPe=s(SE);Ive=n(kPe,"STRONG",{});var JEt=s(Ive);XCr=r(JEt,"roformer"),JEt.forEach(t),zCr=r(kPe," \u2014 "),LU=n(kPe,"A",{href:!0});var YEt=s(LU);WCr=r(YEt,"TFRoFormerForTokenClassification"),YEt.forEach(t),QCr=r(kPe," (RoFormer model)"),kPe.forEach(t),HCr=i(me),RE=n(me,"LI",{});var SPe=s(RE);qve=n(SPe,"STRONG",{});var KEt=s(qve);UCr=r(KEt,"xlm"),KEt.forEach(t),JCr=r(SPe," \u2014 "),xU=n(SPe,"A",{href:!0});var ZEt=s(xU);YCr=r(ZEt,"TFXLMForTokenClassification"),ZEt.forEach(t),KCr=r(SPe," (XLM model)"),SPe.forEach(t),ZCr=i(me),PE=n(me,"LI",{});var RPe=s(PE);Nve=n(RPe,"STRONG",{});var eCt=s(Nve);e3r=r(eCt,"xlm-roberta"),eCt.forEach(t),o3r=r(RPe," \u2014 "),$U=n(RPe,"A",{href:!0});var oCt=s($U);r3r=r(oCt,"TFXLMRobertaForTokenClassification"),oCt.forEach(t),t3r=r(RPe," (XLM-RoBERTa model)"),RPe.forEach(t),a3r=i(me),BE=n(me,"LI",{});var PPe=s(BE);jve=n(PPe,"STRONG",{});var rCt=s(jve);n3r=r(rCt,"xlnet"),rCt.forEach(t),s3r=r(PPe," \u2014 "),kU=n(PPe,"A",{href:!0});var tCt=s(kU);l3r=r(tCt,"TFXLNetForTokenClassification"),tCt.forEach(t),i3r=r(PPe," (XLNet model)"),PPe.forEach(t),me.forEach(t),d3r=i(Pl),T(IE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),yNe=i(f),Fc=n(f,"H2",{class:!0});var PDe=s(Fc);qE=n(PDe,"A",{id:!0,class:!0,href:!0});var aCt=s(qE);Dve=n(aCt,"SPAN",{});var nCt=s(Dve);T(Y8.$$.fragment,nCt),nCt.forEach(t),aCt.forEach(t),c3r=i(PDe),Gve=n(PDe,"SPAN",{});var sCt=s(Gve);f3r=r(sCt,"TFAutoModelForQuestionAnswering"),sCt.forEach(t),PDe.forEach(t),LNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(K8.$$.fragment,Bl),m3r=i(Bl),Tc=n(Bl,"P",{});var aee=s(Tc);g3r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SU=n(aee,"A",{href:!0});var lCt=s(SU);h3r=r(lCt,"from_pretrained()"),lCt.forEach(t),p3r=r(aee," class method or the "),RU=n(aee,"A",{href:!0});var iCt=s(RU);_3r=r(iCt,"from_config()"),iCt.forEach(t),u3r=r(aee,` class
method.`),aee.forEach(t),b3r=i(Bl),Z8=n(Bl,"P",{});var BDe=s(Z8);v3r=r(BDe,"This class cannot be instantiated directly using "),Ove=n(BDe,"CODE",{});var dCt=s(Ove);F3r=r(dCt,"__init__()"),dCt.forEach(t),T3r=r(BDe," (throws an error)."),BDe.forEach(t),M3r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var PA=s(Nt);T(e9.$$.fragment,PA),E3r=i(PA),Vve=n(PA,"P",{});var cCt=s(Vve);C3r=r(cCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cCt.forEach(t),w3r=i(PA),Mc=n(PA,"P",{});var nee=s(Mc);A3r=r(nee,`Note:
Loading a model from its configuration file does `),Xve=n(nee,"STRONG",{});var fCt=s(Xve);y3r=r(fCt,"not"),fCt.forEach(t),L3r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(nee,"A",{href:!0});var mCt=s(PU);x3r=r(mCt,"from_pretrained()"),mCt.forEach(t),$3r=r(nee," to load the model weights."),nee.forEach(t),k3r=i(PA),T(NE.$$.fragment,PA),PA.forEach(t),S3r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(o9.$$.fragment,Il),R3r=i(Il),zve=n(Il,"P",{});var gCt=s(zve);P3r=r(gCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gCt.forEach(t),B3r=i(Il),fn=n(Il,"P",{});var BA=s(fn);I3r=r(BA,"The model class to instantiate is selected based on the "),Wve=n(BA,"CODE",{});var hCt=s(Wve);q3r=r(hCt,"model_type"),hCt.forEach(t),N3r=r(BA,` property of the config object (either
passed as an argument or loaded from `),Qve=n(BA,"CODE",{});var pCt=s(Qve);j3r=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),D3r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(BA,"CODE",{});var _Ct=s(Hve);G3r=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),O3r=r(BA,":"),BA.forEach(t),V3r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);jE=n(ge,"LI",{});var BPe=s(jE);Uve=n(BPe,"STRONG",{});var uCt=s(Uve);X3r=r(uCt,"albert"),uCt.forEach(t),z3r=r(BPe," \u2014 "),BU=n(BPe,"A",{href:!0});var bCt=s(BU);W3r=r(bCt,"TFAlbertForQuestionAnswering"),bCt.forEach(t),Q3r=r(BPe," (ALBERT model)"),BPe.forEach(t),H3r=i(ge),DE=n(ge,"LI",{});var IPe=s(DE);Jve=n(IPe,"STRONG",{});var vCt=s(Jve);U3r=r(vCt,"bert"),vCt.forEach(t),J3r=r(IPe," \u2014 "),IU=n(IPe,"A",{href:!0});var FCt=s(IU);Y3r=r(FCt,"TFBertForQuestionAnswering"),FCt.forEach(t),K3r=r(IPe," (BERT model)"),IPe.forEach(t),Z3r=i(ge),GE=n(ge,"LI",{});var qPe=s(GE);Yve=n(qPe,"STRONG",{});var TCt=s(Yve);ewr=r(TCt,"camembert"),TCt.forEach(t),owr=r(qPe," \u2014 "),qU=n(qPe,"A",{href:!0});var MCt=s(qU);rwr=r(MCt,"TFCamembertForQuestionAnswering"),MCt.forEach(t),twr=r(qPe," (CamemBERT model)"),qPe.forEach(t),awr=i(ge),OE=n(ge,"LI",{});var NPe=s(OE);Kve=n(NPe,"STRONG",{});var ECt=s(Kve);nwr=r(ECt,"convbert"),ECt.forEach(t),swr=r(NPe," \u2014 "),NU=n(NPe,"A",{href:!0});var CCt=s(NU);lwr=r(CCt,"TFConvBertForQuestionAnswering"),CCt.forEach(t),iwr=r(NPe," (ConvBERT model)"),NPe.forEach(t),dwr=i(ge),VE=n(ge,"LI",{});var jPe=s(VE);Zve=n(jPe,"STRONG",{});var wCt=s(Zve);cwr=r(wCt,"deberta"),wCt.forEach(t),fwr=r(jPe," \u2014 "),jU=n(jPe,"A",{href:!0});var ACt=s(jU);mwr=r(ACt,"TFDebertaForQuestionAnswering"),ACt.forEach(t),gwr=r(jPe," (DeBERTa model)"),jPe.forEach(t),hwr=i(ge),XE=n(ge,"LI",{});var DPe=s(XE);eFe=n(DPe,"STRONG",{});var yCt=s(eFe);pwr=r(yCt,"deberta-v2"),yCt.forEach(t),_wr=r(DPe," \u2014 "),DU=n(DPe,"A",{href:!0});var LCt=s(DU);uwr=r(LCt,"TFDebertaV2ForQuestionAnswering"),LCt.forEach(t),bwr=r(DPe," (DeBERTa-v2 model)"),DPe.forEach(t),vwr=i(ge),zE=n(ge,"LI",{});var GPe=s(zE);oFe=n(GPe,"STRONG",{});var xCt=s(oFe);Fwr=r(xCt,"distilbert"),xCt.forEach(t),Twr=r(GPe," \u2014 "),GU=n(GPe,"A",{href:!0});var $Ct=s(GU);Mwr=r($Ct,"TFDistilBertForQuestionAnswering"),$Ct.forEach(t),Ewr=r(GPe," (DistilBERT model)"),GPe.forEach(t),Cwr=i(ge),WE=n(ge,"LI",{});var OPe=s(WE);rFe=n(OPe,"STRONG",{});var kCt=s(rFe);wwr=r(kCt,"electra"),kCt.forEach(t),Awr=r(OPe," \u2014 "),OU=n(OPe,"A",{href:!0});var SCt=s(OU);ywr=r(SCt,"TFElectraForQuestionAnswering"),SCt.forEach(t),Lwr=r(OPe," (ELECTRA model)"),OPe.forEach(t),xwr=i(ge),QE=n(ge,"LI",{});var VPe=s(QE);tFe=n(VPe,"STRONG",{});var RCt=s(tFe);$wr=r(RCt,"flaubert"),RCt.forEach(t),kwr=r(VPe," \u2014 "),VU=n(VPe,"A",{href:!0});var PCt=s(VU);Swr=r(PCt,"TFFlaubertForQuestionAnsweringSimple"),PCt.forEach(t),Rwr=r(VPe," (FlauBERT model)"),VPe.forEach(t),Pwr=i(ge),HE=n(ge,"LI",{});var XPe=s(HE);aFe=n(XPe,"STRONG",{});var BCt=s(aFe);Bwr=r(BCt,"funnel"),BCt.forEach(t),Iwr=r(XPe," \u2014 "),XU=n(XPe,"A",{href:!0});var ICt=s(XU);qwr=r(ICt,"TFFunnelForQuestionAnswering"),ICt.forEach(t),Nwr=r(XPe," (Funnel Transformer model)"),XPe.forEach(t),jwr=i(ge),UE=n(ge,"LI",{});var zPe=s(UE);nFe=n(zPe,"STRONG",{});var qCt=s(nFe);Dwr=r(qCt,"gptj"),qCt.forEach(t),Gwr=r(zPe," \u2014 "),zU=n(zPe,"A",{href:!0});var NCt=s(zU);Owr=r(NCt,"TFGPTJForQuestionAnswering"),NCt.forEach(t),Vwr=r(zPe," (GPT-J model)"),zPe.forEach(t),Xwr=i(ge),JE=n(ge,"LI",{});var WPe=s(JE);sFe=n(WPe,"STRONG",{});var jCt=s(sFe);zwr=r(jCt,"longformer"),jCt.forEach(t),Wwr=r(WPe," \u2014 "),WU=n(WPe,"A",{href:!0});var DCt=s(WU);Qwr=r(DCt,"TFLongformerForQuestionAnswering"),DCt.forEach(t),Hwr=r(WPe," (Longformer model)"),WPe.forEach(t),Uwr=i(ge),YE=n(ge,"LI",{});var QPe=s(YE);lFe=n(QPe,"STRONG",{});var GCt=s(lFe);Jwr=r(GCt,"mobilebert"),GCt.forEach(t),Ywr=r(QPe," \u2014 "),QU=n(QPe,"A",{href:!0});var OCt=s(QU);Kwr=r(OCt,"TFMobileBertForQuestionAnswering"),OCt.forEach(t),Zwr=r(QPe," (MobileBERT model)"),QPe.forEach(t),e0r=i(ge),KE=n(ge,"LI",{});var HPe=s(KE);iFe=n(HPe,"STRONG",{});var VCt=s(iFe);o0r=r(VCt,"mpnet"),VCt.forEach(t),r0r=r(HPe," \u2014 "),HU=n(HPe,"A",{href:!0});var XCt=s(HU);t0r=r(XCt,"TFMPNetForQuestionAnswering"),XCt.forEach(t),a0r=r(HPe," (MPNet model)"),HPe.forEach(t),n0r=i(ge),ZE=n(ge,"LI",{});var UPe=s(ZE);dFe=n(UPe,"STRONG",{});var zCt=s(dFe);s0r=r(zCt,"rembert"),zCt.forEach(t),l0r=r(UPe," \u2014 "),UU=n(UPe,"A",{href:!0});var WCt=s(UU);i0r=r(WCt,"TFRemBertForQuestionAnswering"),WCt.forEach(t),d0r=r(UPe," (RemBERT model)"),UPe.forEach(t),c0r=i(ge),eC=n(ge,"LI",{});var JPe=s(eC);cFe=n(JPe,"STRONG",{});var QCt=s(cFe);f0r=r(QCt,"roberta"),QCt.forEach(t),m0r=r(JPe," \u2014 "),JU=n(JPe,"A",{href:!0});var HCt=s(JU);g0r=r(HCt,"TFRobertaForQuestionAnswering"),HCt.forEach(t),h0r=r(JPe," (RoBERTa model)"),JPe.forEach(t),p0r=i(ge),oC=n(ge,"LI",{});var YPe=s(oC);fFe=n(YPe,"STRONG",{});var UCt=s(fFe);_0r=r(UCt,"roformer"),UCt.forEach(t),u0r=r(YPe," \u2014 "),YU=n(YPe,"A",{href:!0});var JCt=s(YU);b0r=r(JCt,"TFRoFormerForQuestionAnswering"),JCt.forEach(t),v0r=r(YPe," (RoFormer model)"),YPe.forEach(t),F0r=i(ge),rC=n(ge,"LI",{});var KPe=s(rC);mFe=n(KPe,"STRONG",{});var YCt=s(mFe);T0r=r(YCt,"xlm"),YCt.forEach(t),M0r=r(KPe," \u2014 "),KU=n(KPe,"A",{href:!0});var KCt=s(KU);E0r=r(KCt,"TFXLMForQuestionAnsweringSimple"),KCt.forEach(t),C0r=r(KPe," (XLM model)"),KPe.forEach(t),w0r=i(ge),tC=n(ge,"LI",{});var ZPe=s(tC);gFe=n(ZPe,"STRONG",{});var ZCt=s(gFe);A0r=r(ZCt,"xlm-roberta"),ZCt.forEach(t),y0r=r(ZPe," \u2014 "),ZU=n(ZPe,"A",{href:!0});var e3t=s(ZU);L0r=r(e3t,"TFXLMRobertaForQuestionAnswering"),e3t.forEach(t),x0r=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),$0r=i(ge),aC=n(ge,"LI",{});var eBe=s(aC);hFe=n(eBe,"STRONG",{});var o3t=s(hFe);k0r=r(o3t,"xlnet"),o3t.forEach(t),S0r=r(eBe," \u2014 "),eJ=n(eBe,"A",{href:!0});var r3t=s(eJ);R0r=r(r3t,"TFXLNetForQuestionAnsweringSimple"),r3t.forEach(t),P0r=r(eBe," (XLNet model)"),eBe.forEach(t),ge.forEach(t),B0r=i(Il),T(nC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),xNe=i(f),Ec=n(f,"H2",{class:!0});var IDe=s(Ec);sC=n(IDe,"A",{id:!0,class:!0,href:!0});var t3t=s(sC);pFe=n(t3t,"SPAN",{});var a3t=s(pFe);T(r9.$$.fragment,a3t),a3t.forEach(t),t3t.forEach(t),I0r=i(IDe),_Fe=n(IDe,"SPAN",{});var n3t=s(_Fe);q0r=r(n3t,"TFAutoModelForVision2Seq"),n3t.forEach(t),IDe.forEach(t),$Ne=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(t9.$$.fragment,ql),N0r=i(ql),Cc=n(ql,"P",{});var see=s(Cc);j0r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oJ=n(see,"A",{href:!0});var s3t=s(oJ);D0r=r(s3t,"from_pretrained()"),s3t.forEach(t),G0r=r(see," class method or the "),rJ=n(see,"A",{href:!0});var l3t=s(rJ);O0r=r(l3t,"from_config()"),l3t.forEach(t),V0r=r(see,` class
method.`),see.forEach(t),X0r=i(ql),a9=n(ql,"P",{});var qDe=s(a9);z0r=r(qDe,"This class cannot be instantiated directly using "),uFe=n(qDe,"CODE",{});var i3t=s(uFe);W0r=r(i3t,"__init__()"),i3t.forEach(t),Q0r=r(qDe," (throws an error)."),qDe.forEach(t),H0r=i(ql),jt=n(ql,"DIV",{class:!0});var IA=s(jt);T(n9.$$.fragment,IA),U0r=i(IA),bFe=n(IA,"P",{});var d3t=s(bFe);J0r=r(d3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),d3t.forEach(t),Y0r=i(IA),wc=n(IA,"P",{});var lee=s(wc);K0r=r(lee,`Note:
Loading a model from its configuration file does `),vFe=n(lee,"STRONG",{});var c3t=s(vFe);Z0r=r(c3t,"not"),c3t.forEach(t),eAr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(lee,"A",{href:!0});var f3t=s(tJ);oAr=r(f3t,"from_pretrained()"),f3t.forEach(t),rAr=r(lee," to load the model weights."),lee.forEach(t),tAr=i(IA),T(lC.$$.fragment,IA),IA.forEach(t),aAr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(s9.$$.fragment,Nl),nAr=i(Nl),FFe=n(Nl,"P",{});var m3t=s(FFe);sAr=r(m3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m3t.forEach(t),lAr=i(Nl),mn=n(Nl,"P",{});var qA=s(mn);iAr=r(qA,"The model class to instantiate is selected based on the "),TFe=n(qA,"CODE",{});var g3t=s(TFe);dAr=r(g3t,"model_type"),g3t.forEach(t),cAr=r(qA,` property of the config object (either
passed as an argument or loaded from `),MFe=n(qA,"CODE",{});var h3t=s(MFe);fAr=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),mAr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(qA,"CODE",{});var p3t=s(EFe);gAr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),hAr=r(qA,":"),qA.forEach(t),pAr=i(Nl),CFe=n(Nl,"UL",{});var _3t=s(CFe);iC=n(_3t,"LI",{});var oBe=s(iC);wFe=n(oBe,"STRONG",{});var u3t=s(wFe);_Ar=r(u3t,"vision-encoder-decoder"),u3t.forEach(t),uAr=r(oBe," \u2014 "),aJ=n(oBe,"A",{href:!0});var b3t=s(aJ);bAr=r(b3t,"TFVisionEncoderDecoderModel"),b3t.forEach(t),vAr=r(oBe," (Vision Encoder decoder model)"),oBe.forEach(t),_3t.forEach(t),FAr=i(Nl),T(dC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),kNe=i(f),Ac=n(f,"H2",{class:!0});var NDe=s(Ac);cC=n(NDe,"A",{id:!0,class:!0,href:!0});var v3t=s(cC);AFe=n(v3t,"SPAN",{});var F3t=s(AFe);T(l9.$$.fragment,F3t),F3t.forEach(t),v3t.forEach(t),TAr=i(NDe),yFe=n(NDe,"SPAN",{});var T3t=s(yFe);MAr=r(T3t,"TFAutoModelForSpeechSeq2Seq"),T3t.forEach(t),NDe.forEach(t),SNe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(i9.$$.fragment,jl),EAr=i(jl),yc=n(jl,"P",{});var iee=s(yc);CAr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nJ=n(iee,"A",{href:!0});var M3t=s(nJ);wAr=r(M3t,"from_pretrained()"),M3t.forEach(t),AAr=r(iee," class method or the "),sJ=n(iee,"A",{href:!0});var E3t=s(sJ);yAr=r(E3t,"from_config()"),E3t.forEach(t),LAr=r(iee,` class
method.`),iee.forEach(t),xAr=i(jl),d9=n(jl,"P",{});var jDe=s(d9);$Ar=r(jDe,"This class cannot be instantiated directly using "),LFe=n(jDe,"CODE",{});var C3t=s(LFe);kAr=r(C3t,"__init__()"),C3t.forEach(t),SAr=r(jDe," (throws an error)."),jDe.forEach(t),RAr=i(jl),Dt=n(jl,"DIV",{class:!0});var NA=s(Dt);T(c9.$$.fragment,NA),PAr=i(NA),xFe=n(NA,"P",{});var w3t=s(xFe);BAr=r(w3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),w3t.forEach(t),IAr=i(NA),Lc=n(NA,"P",{});var dee=s(Lc);qAr=r(dee,`Note:
Loading a model from its configuration file does `),$Fe=n(dee,"STRONG",{});var A3t=s($Fe);NAr=r(A3t,"not"),A3t.forEach(t),jAr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(dee,"A",{href:!0});var y3t=s(lJ);DAr=r(y3t,"from_pretrained()"),y3t.forEach(t),GAr=r(dee," to load the model weights."),dee.forEach(t),OAr=i(NA),T(fC.$$.fragment,NA),NA.forEach(t),VAr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(f9.$$.fragment,Dl),XAr=i(Dl),kFe=n(Dl,"P",{});var L3t=s(kFe);zAr=r(L3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),L3t.forEach(t),WAr=i(Dl),gn=n(Dl,"P",{});var jA=s(gn);QAr=r(jA,"The model class to instantiate is selected based on the "),SFe=n(jA,"CODE",{});var x3t=s(SFe);HAr=r(x3t,"model_type"),x3t.forEach(t),UAr=r(jA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(jA,"CODE",{});var $3t=s(RFe);JAr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),YAr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(jA,"CODE",{});var k3t=s(PFe);KAr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),ZAr=r(jA,":"),jA.forEach(t),e6r=i(Dl),BFe=n(Dl,"UL",{});var S3t=s(BFe);mC=n(S3t,"LI",{});var rBe=s(mC);IFe=n(rBe,"STRONG",{});var R3t=s(IFe);o6r=r(R3t,"speech_to_text"),R3t.forEach(t),r6r=r(rBe," \u2014 "),iJ=n(rBe,"A",{href:!0});var P3t=s(iJ);t6r=r(P3t,"TFSpeech2TextForConditionalGeneration"),P3t.forEach(t),a6r=r(rBe," (Speech2Text model)"),rBe.forEach(t),S3t.forEach(t),n6r=i(Dl),T(gC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),RNe=i(f),xc=n(f,"H2",{class:!0});var DDe=s(xc);hC=n(DDe,"A",{id:!0,class:!0,href:!0});var B3t=s(hC);qFe=n(B3t,"SPAN",{});var I3t=s(qFe);T(m9.$$.fragment,I3t),I3t.forEach(t),B3t.forEach(t),s6r=i(DDe),NFe=n(DDe,"SPAN",{});var q3t=s(NFe);l6r=r(q3t,"FlaxAutoModel"),q3t.forEach(t),DDe.forEach(t),PNe=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(g9.$$.fragment,Gl),i6r=i(Gl),$c=n(Gl,"P",{});var cee=s($c);d6r=r(cee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dJ=n(cee,"A",{href:!0});var N3t=s(dJ);c6r=r(N3t,"from_pretrained()"),N3t.forEach(t),f6r=r(cee," class method or the "),cJ=n(cee,"A",{href:!0});var j3t=s(cJ);m6r=r(j3t,"from_config()"),j3t.forEach(t),g6r=r(cee,` class
method.`),cee.forEach(t),h6r=i(Gl),h9=n(Gl,"P",{});var GDe=s(h9);p6r=r(GDe,"This class cannot be instantiated directly using "),jFe=n(GDe,"CODE",{});var D3t=s(jFe);_6r=r(D3t,"__init__()"),D3t.forEach(t),u6r=r(GDe," (throws an error)."),GDe.forEach(t),b6r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var DA=s(Gt);T(p9.$$.fragment,DA),v6r=i(DA),DFe=n(DA,"P",{});var G3t=s(DFe);F6r=r(G3t,"Instantiates one of the base model classes of the library from a configuration."),G3t.forEach(t),T6r=i(DA),kc=n(DA,"P",{});var fee=s(kc);M6r=r(fee,`Note:
Loading a model from its configuration file does `),GFe=n(fee,"STRONG",{});var O3t=s(GFe);E6r=r(O3t,"not"),O3t.forEach(t),C6r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(fee,"A",{href:!0});var V3t=s(fJ);w6r=r(V3t,"from_pretrained()"),V3t.forEach(t),A6r=r(fee," to load the model weights."),fee.forEach(t),y6r=i(DA),T(pC.$$.fragment,DA),DA.forEach(t),L6r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(_9.$$.fragment,Ol),x6r=i(Ol),OFe=n(Ol,"P",{});var X3t=s(OFe);$6r=r(X3t,"Instantiate one of the base model classes of the library from a pretrained model."),X3t.forEach(t),k6r=i(Ol),hn=n(Ol,"P",{});var GA=s(hn);S6r=r(GA,"The model class to instantiate is selected based on the "),VFe=n(GA,"CODE",{});var z3t=s(VFe);R6r=r(z3t,"model_type"),z3t.forEach(t),P6r=r(GA,` property of the config object (either
passed as an argument or loaded from `),XFe=n(GA,"CODE",{});var W3t=s(XFe);B6r=r(W3t,"pretrained_model_name_or_path"),W3t.forEach(t),I6r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(GA,"CODE",{});var Q3t=s(zFe);q6r=r(Q3t,"pretrained_model_name_or_path"),Q3t.forEach(t),N6r=r(GA,":"),GA.forEach(t),j6r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);_C=n(ne,"LI",{});var tBe=s(_C);WFe=n(tBe,"STRONG",{});var H3t=s(WFe);D6r=r(H3t,"albert"),H3t.forEach(t),G6r=r(tBe," \u2014 "),mJ=n(tBe,"A",{href:!0});var U3t=s(mJ);O6r=r(U3t,"FlaxAlbertModel"),U3t.forEach(t),V6r=r(tBe," (ALBERT model)"),tBe.forEach(t),X6r=i(ne),uC=n(ne,"LI",{});var aBe=s(uC);QFe=n(aBe,"STRONG",{});var J3t=s(QFe);z6r=r(J3t,"bart"),J3t.forEach(t),W6r=r(aBe," \u2014 "),gJ=n(aBe,"A",{href:!0});var Y3t=s(gJ);Q6r=r(Y3t,"FlaxBartModel"),Y3t.forEach(t),H6r=r(aBe," (BART model)"),aBe.forEach(t),U6r=i(ne),bC=n(ne,"LI",{});var nBe=s(bC);HFe=n(nBe,"STRONG",{});var K3t=s(HFe);J6r=r(K3t,"beit"),K3t.forEach(t),Y6r=r(nBe," \u2014 "),hJ=n(nBe,"A",{href:!0});var Z3t=s(hJ);K6r=r(Z3t,"FlaxBeitModel"),Z3t.forEach(t),Z6r=r(nBe," (BEiT model)"),nBe.forEach(t),eyr=i(ne),vC=n(ne,"LI",{});var sBe=s(vC);UFe=n(sBe,"STRONG",{});var ewt=s(UFe);oyr=r(ewt,"bert"),ewt.forEach(t),ryr=r(sBe," \u2014 "),pJ=n(sBe,"A",{href:!0});var owt=s(pJ);tyr=r(owt,"FlaxBertModel"),owt.forEach(t),ayr=r(sBe," (BERT model)"),sBe.forEach(t),nyr=i(ne),FC=n(ne,"LI",{});var lBe=s(FC);JFe=n(lBe,"STRONG",{});var rwt=s(JFe);syr=r(rwt,"big_bird"),rwt.forEach(t),lyr=r(lBe," \u2014 "),_J=n(lBe,"A",{href:!0});var twt=s(_J);iyr=r(twt,"FlaxBigBirdModel"),twt.forEach(t),dyr=r(lBe," (BigBird model)"),lBe.forEach(t),cyr=i(ne),TC=n(ne,"LI",{});var iBe=s(TC);YFe=n(iBe,"STRONG",{});var awt=s(YFe);fyr=r(awt,"blenderbot"),awt.forEach(t),myr=r(iBe," \u2014 "),uJ=n(iBe,"A",{href:!0});var nwt=s(uJ);gyr=r(nwt,"FlaxBlenderbotModel"),nwt.forEach(t),hyr=r(iBe," (Blenderbot model)"),iBe.forEach(t),pyr=i(ne),MC=n(ne,"LI",{});var dBe=s(MC);KFe=n(dBe,"STRONG",{});var swt=s(KFe);_yr=r(swt,"blenderbot-small"),swt.forEach(t),uyr=r(dBe," \u2014 "),bJ=n(dBe,"A",{href:!0});var lwt=s(bJ);byr=r(lwt,"FlaxBlenderbotSmallModel"),lwt.forEach(t),vyr=r(dBe," (BlenderbotSmall model)"),dBe.forEach(t),Fyr=i(ne),EC=n(ne,"LI",{});var cBe=s(EC);ZFe=n(cBe,"STRONG",{});var iwt=s(ZFe);Tyr=r(iwt,"clip"),iwt.forEach(t),Myr=r(cBe," \u2014 "),vJ=n(cBe,"A",{href:!0});var dwt=s(vJ);Eyr=r(dwt,"FlaxCLIPModel"),dwt.forEach(t),Cyr=r(cBe," (CLIP model)"),cBe.forEach(t),wyr=i(ne),CC=n(ne,"LI",{});var fBe=s(CC);eTe=n(fBe,"STRONG",{});var cwt=s(eTe);Ayr=r(cwt,"distilbert"),cwt.forEach(t),yyr=r(fBe," \u2014 "),FJ=n(fBe,"A",{href:!0});var fwt=s(FJ);Lyr=r(fwt,"FlaxDistilBertModel"),fwt.forEach(t),xyr=r(fBe," (DistilBERT model)"),fBe.forEach(t),$yr=i(ne),wC=n(ne,"LI",{});var mBe=s(wC);oTe=n(mBe,"STRONG",{});var mwt=s(oTe);kyr=r(mwt,"electra"),mwt.forEach(t),Syr=r(mBe," \u2014 "),TJ=n(mBe,"A",{href:!0});var gwt=s(TJ);Ryr=r(gwt,"FlaxElectraModel"),gwt.forEach(t),Pyr=r(mBe," (ELECTRA model)"),mBe.forEach(t),Byr=i(ne),AC=n(ne,"LI",{});var gBe=s(AC);rTe=n(gBe,"STRONG",{});var hwt=s(rTe);Iyr=r(hwt,"gpt2"),hwt.forEach(t),qyr=r(gBe," \u2014 "),MJ=n(gBe,"A",{href:!0});var pwt=s(MJ);Nyr=r(pwt,"FlaxGPT2Model"),pwt.forEach(t),jyr=r(gBe," (OpenAI GPT-2 model)"),gBe.forEach(t),Dyr=i(ne),yC=n(ne,"LI",{});var hBe=s(yC);tTe=n(hBe,"STRONG",{});var _wt=s(tTe);Gyr=r(_wt,"gpt_neo"),_wt.forEach(t),Oyr=r(hBe," \u2014 "),EJ=n(hBe,"A",{href:!0});var uwt=s(EJ);Vyr=r(uwt,"FlaxGPTNeoModel"),uwt.forEach(t),Xyr=r(hBe," (GPT Neo model)"),hBe.forEach(t),zyr=i(ne),LC=n(ne,"LI",{});var pBe=s(LC);aTe=n(pBe,"STRONG",{});var bwt=s(aTe);Wyr=r(bwt,"gptj"),bwt.forEach(t),Qyr=r(pBe," \u2014 "),CJ=n(pBe,"A",{href:!0});var vwt=s(CJ);Hyr=r(vwt,"FlaxGPTJModel"),vwt.forEach(t),Uyr=r(pBe," (GPT-J model)"),pBe.forEach(t),Jyr=i(ne),xC=n(ne,"LI",{});var _Be=s(xC);nTe=n(_Be,"STRONG",{});var Fwt=s(nTe);Yyr=r(Fwt,"marian"),Fwt.forEach(t),Kyr=r(_Be," \u2014 "),wJ=n(_Be,"A",{href:!0});var Twt=s(wJ);Zyr=r(Twt,"FlaxMarianModel"),Twt.forEach(t),eLr=r(_Be," (Marian model)"),_Be.forEach(t),oLr=i(ne),$C=n(ne,"LI",{});var uBe=s($C);sTe=n(uBe,"STRONG",{});var Mwt=s(sTe);rLr=r(Mwt,"mbart"),Mwt.forEach(t),tLr=r(uBe," \u2014 "),AJ=n(uBe,"A",{href:!0});var Ewt=s(AJ);aLr=r(Ewt,"FlaxMBartModel"),Ewt.forEach(t),nLr=r(uBe," (mBART model)"),uBe.forEach(t),sLr=i(ne),kC=n(ne,"LI",{});var bBe=s(kC);lTe=n(bBe,"STRONG",{});var Cwt=s(lTe);lLr=r(Cwt,"mt5"),Cwt.forEach(t),iLr=r(bBe," \u2014 "),yJ=n(bBe,"A",{href:!0});var wwt=s(yJ);dLr=r(wwt,"FlaxMT5Model"),wwt.forEach(t),cLr=r(bBe," (mT5 model)"),bBe.forEach(t),fLr=i(ne),SC=n(ne,"LI",{});var vBe=s(SC);iTe=n(vBe,"STRONG",{});var Awt=s(iTe);mLr=r(Awt,"pegasus"),Awt.forEach(t),gLr=r(vBe," \u2014 "),LJ=n(vBe,"A",{href:!0});var ywt=s(LJ);hLr=r(ywt,"FlaxPegasusModel"),ywt.forEach(t),pLr=r(vBe," (Pegasus model)"),vBe.forEach(t),_Lr=i(ne),RC=n(ne,"LI",{});var FBe=s(RC);dTe=n(FBe,"STRONG",{});var Lwt=s(dTe);uLr=r(Lwt,"roberta"),Lwt.forEach(t),bLr=r(FBe," \u2014 "),xJ=n(FBe,"A",{href:!0});var xwt=s(xJ);vLr=r(xwt,"FlaxRobertaModel"),xwt.forEach(t),FLr=r(FBe," (RoBERTa model)"),FBe.forEach(t),TLr=i(ne),PC=n(ne,"LI",{});var TBe=s(PC);cTe=n(TBe,"STRONG",{});var $wt=s(cTe);MLr=r($wt,"roformer"),$wt.forEach(t),ELr=r(TBe," \u2014 "),$J=n(TBe,"A",{href:!0});var kwt=s($J);CLr=r(kwt,"FlaxRoFormerModel"),kwt.forEach(t),wLr=r(TBe," (RoFormer model)"),TBe.forEach(t),ALr=i(ne),BC=n(ne,"LI",{});var MBe=s(BC);fTe=n(MBe,"STRONG",{});var Swt=s(fTe);yLr=r(Swt,"t5"),Swt.forEach(t),LLr=r(MBe," \u2014 "),kJ=n(MBe,"A",{href:!0});var Rwt=s(kJ);xLr=r(Rwt,"FlaxT5Model"),Rwt.forEach(t),$Lr=r(MBe," (T5 model)"),MBe.forEach(t),kLr=i(ne),IC=n(ne,"LI",{});var EBe=s(IC);mTe=n(EBe,"STRONG",{});var Pwt=s(mTe);SLr=r(Pwt,"vision-text-dual-encoder"),Pwt.forEach(t),RLr=r(EBe," \u2014 "),SJ=n(EBe,"A",{href:!0});var Bwt=s(SJ);PLr=r(Bwt,"FlaxVisionTextDualEncoderModel"),Bwt.forEach(t),BLr=r(EBe," (VisionTextDualEncoder model)"),EBe.forEach(t),ILr=i(ne),qC=n(ne,"LI",{});var CBe=s(qC);gTe=n(CBe,"STRONG",{});var Iwt=s(gTe);qLr=r(Iwt,"vit"),Iwt.forEach(t),NLr=r(CBe," \u2014 "),RJ=n(CBe,"A",{href:!0});var qwt=s(RJ);jLr=r(qwt,"FlaxViTModel"),qwt.forEach(t),DLr=r(CBe," (ViT model)"),CBe.forEach(t),GLr=i(ne),NC=n(ne,"LI",{});var wBe=s(NC);hTe=n(wBe,"STRONG",{});var Nwt=s(hTe);OLr=r(Nwt,"wav2vec2"),Nwt.forEach(t),VLr=r(wBe," \u2014 "),PJ=n(wBe,"A",{href:!0});var jwt=s(PJ);XLr=r(jwt,"FlaxWav2Vec2Model"),jwt.forEach(t),zLr=r(wBe," (Wav2Vec2 model)"),wBe.forEach(t),WLr=i(ne),jC=n(ne,"LI",{});var ABe=s(jC);pTe=n(ABe,"STRONG",{});var Dwt=s(pTe);QLr=r(Dwt,"xglm"),Dwt.forEach(t),HLr=r(ABe," \u2014 "),BJ=n(ABe,"A",{href:!0});var Gwt=s(BJ);ULr=r(Gwt,"FlaxXGLMModel"),Gwt.forEach(t),JLr=r(ABe," (XGLM model)"),ABe.forEach(t),YLr=i(ne),DC=n(ne,"LI",{});var yBe=s(DC);_Te=n(yBe,"STRONG",{});var Owt=s(_Te);KLr=r(Owt,"xlm-roberta"),Owt.forEach(t),ZLr=r(yBe," \u2014 "),IJ=n(yBe,"A",{href:!0});var Vwt=s(IJ);e8r=r(Vwt,"FlaxXLMRobertaModel"),Vwt.forEach(t),o8r=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),ne.forEach(t),r8r=i(Ol),T(GC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),BNe=i(f),Sc=n(f,"H2",{class:!0});var ODe=s(Sc);OC=n(ODe,"A",{id:!0,class:!0,href:!0});var Xwt=s(OC);uTe=n(Xwt,"SPAN",{});var zwt=s(uTe);T(u9.$$.fragment,zwt),zwt.forEach(t),Xwt.forEach(t),t8r=i(ODe),bTe=n(ODe,"SPAN",{});var Wwt=s(bTe);a8r=r(Wwt,"FlaxAutoModelForCausalLM"),Wwt.forEach(t),ODe.forEach(t),INe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(b9.$$.fragment,Vl),n8r=i(Vl),Rc=n(Vl,"P",{});var mee=s(Rc);s8r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=n(mee,"A",{href:!0});var Qwt=s(qJ);l8r=r(Qwt,"from_pretrained()"),Qwt.forEach(t),i8r=r(mee," class method or the "),NJ=n(mee,"A",{href:!0});var Hwt=s(NJ);d8r=r(Hwt,"from_config()"),Hwt.forEach(t),c8r=r(mee,` class
method.`),mee.forEach(t),f8r=i(Vl),v9=n(Vl,"P",{});var VDe=s(v9);m8r=r(VDe,"This class cannot be instantiated directly using "),vTe=n(VDe,"CODE",{});var Uwt=s(vTe);g8r=r(Uwt,"__init__()"),Uwt.forEach(t),h8r=r(VDe," (throws an error)."),VDe.forEach(t),p8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var OA=s(Ot);T(F9.$$.fragment,OA),_8r=i(OA),FTe=n(OA,"P",{});var Jwt=s(FTe);u8r=r(Jwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jwt.forEach(t),b8r=i(OA),Pc=n(OA,"P",{});var gee=s(Pc);v8r=r(gee,`Note:
Loading a model from its configuration file does `),TTe=n(gee,"STRONG",{});var Ywt=s(TTe);F8r=r(Ywt,"not"),Ywt.forEach(t),T8r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(gee,"A",{href:!0});var Kwt=s(jJ);M8r=r(Kwt,"from_pretrained()"),Kwt.forEach(t),E8r=r(gee," to load the model weights."),gee.forEach(t),C8r=i(OA),T(VC.$$.fragment,OA),OA.forEach(t),w8r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(T9.$$.fragment,Xl),A8r=i(Xl),MTe=n(Xl,"P",{});var Zwt=s(MTe);y8r=r(Zwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zwt.forEach(t),L8r=i(Xl),pn=n(Xl,"P",{});var VA=s(pn);x8r=r(VA,"The model class to instantiate is selected based on the "),ETe=n(VA,"CODE",{});var e0t=s(ETe);$8r=r(e0t,"model_type"),e0t.forEach(t),k8r=r(VA,` property of the config object (either
passed as an argument or loaded from `),CTe=n(VA,"CODE",{});var o0t=s(CTe);S8r=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),R8r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(VA,"CODE",{});var r0t=s(wTe);P8r=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),B8r=r(VA,":"),VA.forEach(t),I8r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);XC=n(Xe,"LI",{});var LBe=s(XC);ATe=n(LBe,"STRONG",{});var t0t=s(ATe);q8r=r(t0t,"bart"),t0t.forEach(t),N8r=r(LBe," \u2014 "),DJ=n(LBe,"A",{href:!0});var a0t=s(DJ);j8r=r(a0t,"FlaxBartForCausalLM"),a0t.forEach(t),D8r=r(LBe," (BART model)"),LBe.forEach(t),G8r=i(Xe),zC=n(Xe,"LI",{});var xBe=s(zC);yTe=n(xBe,"STRONG",{});var n0t=s(yTe);O8r=r(n0t,"bert"),n0t.forEach(t),V8r=r(xBe," \u2014 "),GJ=n(xBe,"A",{href:!0});var s0t=s(GJ);X8r=r(s0t,"FlaxBertForCausalLM"),s0t.forEach(t),z8r=r(xBe," (BERT model)"),xBe.forEach(t),W8r=i(Xe),WC=n(Xe,"LI",{});var $Be=s(WC);LTe=n($Be,"STRONG",{});var l0t=s(LTe);Q8r=r(l0t,"big_bird"),l0t.forEach(t),H8r=r($Be," \u2014 "),OJ=n($Be,"A",{href:!0});var i0t=s(OJ);U8r=r(i0t,"FlaxBigBirdForCausalLM"),i0t.forEach(t),J8r=r($Be," (BigBird model)"),$Be.forEach(t),Y8r=i(Xe),QC=n(Xe,"LI",{});var kBe=s(QC);xTe=n(kBe,"STRONG",{});var d0t=s(xTe);K8r=r(d0t,"electra"),d0t.forEach(t),Z8r=r(kBe," \u2014 "),VJ=n(kBe,"A",{href:!0});var c0t=s(VJ);e9r=r(c0t,"FlaxElectraForCausalLM"),c0t.forEach(t),o9r=r(kBe," (ELECTRA model)"),kBe.forEach(t),r9r=i(Xe),HC=n(Xe,"LI",{});var SBe=s(HC);$Te=n(SBe,"STRONG",{});var f0t=s($Te);t9r=r(f0t,"gpt2"),f0t.forEach(t),a9r=r(SBe," \u2014 "),XJ=n(SBe,"A",{href:!0});var m0t=s(XJ);n9r=r(m0t,"FlaxGPT2LMHeadModel"),m0t.forEach(t),s9r=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),l9r=i(Xe),UC=n(Xe,"LI",{});var RBe=s(UC);kTe=n(RBe,"STRONG",{});var g0t=s(kTe);i9r=r(g0t,"gpt_neo"),g0t.forEach(t),d9r=r(RBe," \u2014 "),zJ=n(RBe,"A",{href:!0});var h0t=s(zJ);c9r=r(h0t,"FlaxGPTNeoForCausalLM"),h0t.forEach(t),f9r=r(RBe," (GPT Neo model)"),RBe.forEach(t),m9r=i(Xe),JC=n(Xe,"LI",{});var PBe=s(JC);STe=n(PBe,"STRONG",{});var p0t=s(STe);g9r=r(p0t,"gptj"),p0t.forEach(t),h9r=r(PBe," \u2014 "),WJ=n(PBe,"A",{href:!0});var _0t=s(WJ);p9r=r(_0t,"FlaxGPTJForCausalLM"),_0t.forEach(t),_9r=r(PBe," (GPT-J model)"),PBe.forEach(t),u9r=i(Xe),YC=n(Xe,"LI",{});var BBe=s(YC);RTe=n(BBe,"STRONG",{});var u0t=s(RTe);b9r=r(u0t,"roberta"),u0t.forEach(t),v9r=r(BBe," \u2014 "),QJ=n(BBe,"A",{href:!0});var b0t=s(QJ);F9r=r(b0t,"FlaxRobertaForCausalLM"),b0t.forEach(t),T9r=r(BBe," (RoBERTa model)"),BBe.forEach(t),M9r=i(Xe),KC=n(Xe,"LI",{});var IBe=s(KC);PTe=n(IBe,"STRONG",{});var v0t=s(PTe);E9r=r(v0t,"xglm"),v0t.forEach(t),C9r=r(IBe," \u2014 "),HJ=n(IBe,"A",{href:!0});var F0t=s(HJ);w9r=r(F0t,"FlaxXGLMForCausalLM"),F0t.forEach(t),A9r=r(IBe," (XGLM model)"),IBe.forEach(t),Xe.forEach(t),y9r=i(Xl),T(ZC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),qNe=i(f),Bc=n(f,"H2",{class:!0});var XDe=s(Bc);e3=n(XDe,"A",{id:!0,class:!0,href:!0});var T0t=s(e3);BTe=n(T0t,"SPAN",{});var M0t=s(BTe);T(M9.$$.fragment,M0t),M0t.forEach(t),T0t.forEach(t),L9r=i(XDe),ITe=n(XDe,"SPAN",{});var E0t=s(ITe);x9r=r(E0t,"FlaxAutoModelForPreTraining"),E0t.forEach(t),XDe.forEach(t),NNe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(E9.$$.fragment,zl),$9r=i(zl),Ic=n(zl,"P",{});var hee=s(Ic);k9r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=n(hee,"A",{href:!0});var C0t=s(UJ);S9r=r(C0t,"from_pretrained()"),C0t.forEach(t),R9r=r(hee," class method or the "),JJ=n(hee,"A",{href:!0});var w0t=s(JJ);P9r=r(w0t,"from_config()"),w0t.forEach(t),B9r=r(hee,` class
method.`),hee.forEach(t),I9r=i(zl),C9=n(zl,"P",{});var zDe=s(C9);q9r=r(zDe,"This class cannot be instantiated directly using "),qTe=n(zDe,"CODE",{});var A0t=s(qTe);N9r=r(A0t,"__init__()"),A0t.forEach(t),j9r=r(zDe," (throws an error)."),zDe.forEach(t),D9r=i(zl),Vt=n(zl,"DIV",{class:!0});var XA=s(Vt);T(w9.$$.fragment,XA),G9r=i(XA),NTe=n(XA,"P",{});var y0t=s(NTe);O9r=r(y0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y0t.forEach(t),V9r=i(XA),qc=n(XA,"P",{});var pee=s(qc);X9r=r(pee,`Note:
Loading a model from its configuration file does `),jTe=n(pee,"STRONG",{});var L0t=s(jTe);z9r=r(L0t,"not"),L0t.forEach(t),W9r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(pee,"A",{href:!0});var x0t=s(YJ);Q9r=r(x0t,"from_pretrained()"),x0t.forEach(t),H9r=r(pee," to load the model weights."),pee.forEach(t),U9r=i(XA),T(o3.$$.fragment,XA),XA.forEach(t),J9r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(A9.$$.fragment,Wl),Y9r=i(Wl),DTe=n(Wl,"P",{});var $0t=s(DTe);K9r=r($0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$0t.forEach(t),Z9r=i(Wl),_n=n(Wl,"P",{});var zA=s(_n);exr=r(zA,"The model class to instantiate is selected based on the "),GTe=n(zA,"CODE",{});var k0t=s(GTe);oxr=r(k0t,"model_type"),k0t.forEach(t),rxr=r(zA,` property of the config object (either
passed as an argument or loaded from `),OTe=n(zA,"CODE",{});var S0t=s(OTe);txr=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),axr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(zA,"CODE",{});var R0t=s(VTe);nxr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),sxr=r(zA,":"),zA.forEach(t),lxr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);r3=n(we,"LI",{});var qBe=s(r3);XTe=n(qBe,"STRONG",{});var P0t=s(XTe);ixr=r(P0t,"albert"),P0t.forEach(t),dxr=r(qBe," \u2014 "),KJ=n(qBe,"A",{href:!0});var B0t=s(KJ);cxr=r(B0t,"FlaxAlbertForPreTraining"),B0t.forEach(t),fxr=r(qBe," (ALBERT model)"),qBe.forEach(t),mxr=i(we),t3=n(we,"LI",{});var NBe=s(t3);zTe=n(NBe,"STRONG",{});var I0t=s(zTe);gxr=r(I0t,"bart"),I0t.forEach(t),hxr=r(NBe," \u2014 "),ZJ=n(NBe,"A",{href:!0});var q0t=s(ZJ);pxr=r(q0t,"FlaxBartForConditionalGeneration"),q0t.forEach(t),_xr=r(NBe," (BART model)"),NBe.forEach(t),uxr=i(we),a3=n(we,"LI",{});var jBe=s(a3);WTe=n(jBe,"STRONG",{});var N0t=s(WTe);bxr=r(N0t,"bert"),N0t.forEach(t),vxr=r(jBe," \u2014 "),eY=n(jBe,"A",{href:!0});var j0t=s(eY);Fxr=r(j0t,"FlaxBertForPreTraining"),j0t.forEach(t),Txr=r(jBe," (BERT model)"),jBe.forEach(t),Mxr=i(we),n3=n(we,"LI",{});var DBe=s(n3);QTe=n(DBe,"STRONG",{});var D0t=s(QTe);Exr=r(D0t,"big_bird"),D0t.forEach(t),Cxr=r(DBe," \u2014 "),oY=n(DBe,"A",{href:!0});var G0t=s(oY);wxr=r(G0t,"FlaxBigBirdForPreTraining"),G0t.forEach(t),Axr=r(DBe," (BigBird model)"),DBe.forEach(t),yxr=i(we),s3=n(we,"LI",{});var GBe=s(s3);HTe=n(GBe,"STRONG",{});var O0t=s(HTe);Lxr=r(O0t,"electra"),O0t.forEach(t),xxr=r(GBe," \u2014 "),rY=n(GBe,"A",{href:!0});var V0t=s(rY);$xr=r(V0t,"FlaxElectraForPreTraining"),V0t.forEach(t),kxr=r(GBe," (ELECTRA model)"),GBe.forEach(t),Sxr=i(we),l3=n(we,"LI",{});var OBe=s(l3);UTe=n(OBe,"STRONG",{});var X0t=s(UTe);Rxr=r(X0t,"mbart"),X0t.forEach(t),Pxr=r(OBe," \u2014 "),tY=n(OBe,"A",{href:!0});var z0t=s(tY);Bxr=r(z0t,"FlaxMBartForConditionalGeneration"),z0t.forEach(t),Ixr=r(OBe," (mBART model)"),OBe.forEach(t),qxr=i(we),i3=n(we,"LI",{});var VBe=s(i3);JTe=n(VBe,"STRONG",{});var W0t=s(JTe);Nxr=r(W0t,"mt5"),W0t.forEach(t),jxr=r(VBe," \u2014 "),aY=n(VBe,"A",{href:!0});var Q0t=s(aY);Dxr=r(Q0t,"FlaxMT5ForConditionalGeneration"),Q0t.forEach(t),Gxr=r(VBe," (mT5 model)"),VBe.forEach(t),Oxr=i(we),d3=n(we,"LI",{});var XBe=s(d3);YTe=n(XBe,"STRONG",{});var H0t=s(YTe);Vxr=r(H0t,"roberta"),H0t.forEach(t),Xxr=r(XBe," \u2014 "),nY=n(XBe,"A",{href:!0});var U0t=s(nY);zxr=r(U0t,"FlaxRobertaForMaskedLM"),U0t.forEach(t),Wxr=r(XBe," (RoBERTa model)"),XBe.forEach(t),Qxr=i(we),c3=n(we,"LI",{});var zBe=s(c3);KTe=n(zBe,"STRONG",{});var J0t=s(KTe);Hxr=r(J0t,"roformer"),J0t.forEach(t),Uxr=r(zBe," \u2014 "),sY=n(zBe,"A",{href:!0});var Y0t=s(sY);Jxr=r(Y0t,"FlaxRoFormerForMaskedLM"),Y0t.forEach(t),Yxr=r(zBe," (RoFormer model)"),zBe.forEach(t),Kxr=i(we),f3=n(we,"LI",{});var WBe=s(f3);ZTe=n(WBe,"STRONG",{});var K0t=s(ZTe);Zxr=r(K0t,"t5"),K0t.forEach(t),e$r=r(WBe," \u2014 "),lY=n(WBe,"A",{href:!0});var Z0t=s(lY);o$r=r(Z0t,"FlaxT5ForConditionalGeneration"),Z0t.forEach(t),r$r=r(WBe," (T5 model)"),WBe.forEach(t),t$r=i(we),m3=n(we,"LI",{});var QBe=s(m3);e7e=n(QBe,"STRONG",{});var eAt=s(e7e);a$r=r(eAt,"wav2vec2"),eAt.forEach(t),n$r=r(QBe," \u2014 "),iY=n(QBe,"A",{href:!0});var oAt=s(iY);s$r=r(oAt,"FlaxWav2Vec2ForPreTraining"),oAt.forEach(t),l$r=r(QBe," (Wav2Vec2 model)"),QBe.forEach(t),i$r=i(we),g3=n(we,"LI",{});var HBe=s(g3);o7e=n(HBe,"STRONG",{});var rAt=s(o7e);d$r=r(rAt,"xlm-roberta"),rAt.forEach(t),c$r=r(HBe," \u2014 "),dY=n(HBe,"A",{href:!0});var tAt=s(dY);f$r=r(tAt,"FlaxXLMRobertaForMaskedLM"),tAt.forEach(t),m$r=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),we.forEach(t),g$r=i(Wl),T(h3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),jNe=i(f),Nc=n(f,"H2",{class:!0});var WDe=s(Nc);p3=n(WDe,"A",{id:!0,class:!0,href:!0});var aAt=s(p3);r7e=n(aAt,"SPAN",{});var nAt=s(r7e);T(y9.$$.fragment,nAt),nAt.forEach(t),aAt.forEach(t),h$r=i(WDe),t7e=n(WDe,"SPAN",{});var sAt=s(t7e);p$r=r(sAt,"FlaxAutoModelForMaskedLM"),sAt.forEach(t),WDe.forEach(t),DNe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(L9.$$.fragment,Ql),_$r=i(Ql),jc=n(Ql,"P",{});var _ee=s(jc);u$r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=n(_ee,"A",{href:!0});var lAt=s(cY);b$r=r(lAt,"from_pretrained()"),lAt.forEach(t),v$r=r(_ee," class method or the "),fY=n(_ee,"A",{href:!0});var iAt=s(fY);F$r=r(iAt,"from_config()"),iAt.forEach(t),T$r=r(_ee,` class
method.`),_ee.forEach(t),M$r=i(Ql),x9=n(Ql,"P",{});var QDe=s(x9);E$r=r(QDe,"This class cannot be instantiated directly using "),a7e=n(QDe,"CODE",{});var dAt=s(a7e);C$r=r(dAt,"__init__()"),dAt.forEach(t),w$r=r(QDe," (throws an error)."),QDe.forEach(t),A$r=i(Ql),Xt=n(Ql,"DIV",{class:!0});var WA=s(Xt);T($9.$$.fragment,WA),y$r=i(WA),n7e=n(WA,"P",{});var cAt=s(n7e);L$r=r(cAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cAt.forEach(t),x$r=i(WA),Dc=n(WA,"P",{});var uee=s(Dc);$$r=r(uee,`Note:
Loading a model from its configuration file does `),s7e=n(uee,"STRONG",{});var fAt=s(s7e);k$r=r(fAt,"not"),fAt.forEach(t),S$r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(uee,"A",{href:!0});var mAt=s(mY);R$r=r(mAt,"from_pretrained()"),mAt.forEach(t),P$r=r(uee," to load the model weights."),uee.forEach(t),B$r=i(WA),T(_3.$$.fragment,WA),WA.forEach(t),I$r=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(k9.$$.fragment,Hl),q$r=i(Hl),l7e=n(Hl,"P",{});var gAt=s(l7e);N$r=r(gAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gAt.forEach(t),j$r=i(Hl),un=n(Hl,"P",{});var QA=s(un);D$r=r(QA,"The model class to instantiate is selected based on the "),i7e=n(QA,"CODE",{});var hAt=s(i7e);G$r=r(hAt,"model_type"),hAt.forEach(t),O$r=r(QA,` property of the config object (either
passed as an argument or loaded from `),d7e=n(QA,"CODE",{});var pAt=s(d7e);V$r=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),X$r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(QA,"CODE",{});var _At=s(c7e);z$r=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),W$r=r(QA,":"),QA.forEach(t),Q$r=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);u3=n(Ie,"LI",{});var UBe=s(u3);f7e=n(UBe,"STRONG",{});var uAt=s(f7e);H$r=r(uAt,"albert"),uAt.forEach(t),U$r=r(UBe," \u2014 "),gY=n(UBe,"A",{href:!0});var bAt=s(gY);J$r=r(bAt,"FlaxAlbertForMaskedLM"),bAt.forEach(t),Y$r=r(UBe," (ALBERT model)"),UBe.forEach(t),K$r=i(Ie),b3=n(Ie,"LI",{});var JBe=s(b3);m7e=n(JBe,"STRONG",{});var vAt=s(m7e);Z$r=r(vAt,"bart"),vAt.forEach(t),ekr=r(JBe," \u2014 "),hY=n(JBe,"A",{href:!0});var FAt=s(hY);okr=r(FAt,"FlaxBartForConditionalGeneration"),FAt.forEach(t),rkr=r(JBe," (BART model)"),JBe.forEach(t),tkr=i(Ie),v3=n(Ie,"LI",{});var YBe=s(v3);g7e=n(YBe,"STRONG",{});var TAt=s(g7e);akr=r(TAt,"bert"),TAt.forEach(t),nkr=r(YBe," \u2014 "),pY=n(YBe,"A",{href:!0});var MAt=s(pY);skr=r(MAt,"FlaxBertForMaskedLM"),MAt.forEach(t),lkr=r(YBe," (BERT model)"),YBe.forEach(t),ikr=i(Ie),F3=n(Ie,"LI",{});var KBe=s(F3);h7e=n(KBe,"STRONG",{});var EAt=s(h7e);dkr=r(EAt,"big_bird"),EAt.forEach(t),ckr=r(KBe," \u2014 "),_Y=n(KBe,"A",{href:!0});var CAt=s(_Y);fkr=r(CAt,"FlaxBigBirdForMaskedLM"),CAt.forEach(t),mkr=r(KBe," (BigBird model)"),KBe.forEach(t),gkr=i(Ie),T3=n(Ie,"LI",{});var ZBe=s(T3);p7e=n(ZBe,"STRONG",{});var wAt=s(p7e);hkr=r(wAt,"distilbert"),wAt.forEach(t),pkr=r(ZBe," \u2014 "),uY=n(ZBe,"A",{href:!0});var AAt=s(uY);_kr=r(AAt,"FlaxDistilBertForMaskedLM"),AAt.forEach(t),ukr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),bkr=i(Ie),M3=n(Ie,"LI",{});var eIe=s(M3);_7e=n(eIe,"STRONG",{});var yAt=s(_7e);vkr=r(yAt,"electra"),yAt.forEach(t),Fkr=r(eIe," \u2014 "),bY=n(eIe,"A",{href:!0});var LAt=s(bY);Tkr=r(LAt,"FlaxElectraForMaskedLM"),LAt.forEach(t),Mkr=r(eIe," (ELECTRA model)"),eIe.forEach(t),Ekr=i(Ie),E3=n(Ie,"LI",{});var oIe=s(E3);u7e=n(oIe,"STRONG",{});var xAt=s(u7e);Ckr=r(xAt,"mbart"),xAt.forEach(t),wkr=r(oIe," \u2014 "),vY=n(oIe,"A",{href:!0});var $At=s(vY);Akr=r($At,"FlaxMBartForConditionalGeneration"),$At.forEach(t),ykr=r(oIe," (mBART model)"),oIe.forEach(t),Lkr=i(Ie),C3=n(Ie,"LI",{});var rIe=s(C3);b7e=n(rIe,"STRONG",{});var kAt=s(b7e);xkr=r(kAt,"roberta"),kAt.forEach(t),$kr=r(rIe," \u2014 "),FY=n(rIe,"A",{href:!0});var SAt=s(FY);kkr=r(SAt,"FlaxRobertaForMaskedLM"),SAt.forEach(t),Skr=r(rIe," (RoBERTa model)"),rIe.forEach(t),Rkr=i(Ie),w3=n(Ie,"LI",{});var tIe=s(w3);v7e=n(tIe,"STRONG",{});var RAt=s(v7e);Pkr=r(RAt,"roformer"),RAt.forEach(t),Bkr=r(tIe," \u2014 "),TY=n(tIe,"A",{href:!0});var PAt=s(TY);Ikr=r(PAt,"FlaxRoFormerForMaskedLM"),PAt.forEach(t),qkr=r(tIe," (RoFormer model)"),tIe.forEach(t),Nkr=i(Ie),A3=n(Ie,"LI",{});var aIe=s(A3);F7e=n(aIe,"STRONG",{});var BAt=s(F7e);jkr=r(BAt,"xlm-roberta"),BAt.forEach(t),Dkr=r(aIe," \u2014 "),MY=n(aIe,"A",{href:!0});var IAt=s(MY);Gkr=r(IAt,"FlaxXLMRobertaForMaskedLM"),IAt.forEach(t),Okr=r(aIe," (XLM-RoBERTa model)"),aIe.forEach(t),Ie.forEach(t),Vkr=i(Hl),T(y3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),GNe=i(f),Gc=n(f,"H2",{class:!0});var HDe=s(Gc);L3=n(HDe,"A",{id:!0,class:!0,href:!0});var qAt=s(L3);T7e=n(qAt,"SPAN",{});var NAt=s(T7e);T(S9.$$.fragment,NAt),NAt.forEach(t),qAt.forEach(t),Xkr=i(HDe),M7e=n(HDe,"SPAN",{});var jAt=s(M7e);zkr=r(jAt,"FlaxAutoModelForSeq2SeqLM"),jAt.forEach(t),HDe.forEach(t),ONe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(R9.$$.fragment,Ul),Wkr=i(Ul),Oc=n(Ul,"P",{});var bee=s(Oc);Qkr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=n(bee,"A",{href:!0});var DAt=s(EY);Hkr=r(DAt,"from_pretrained()"),DAt.forEach(t),Ukr=r(bee," class method or the "),CY=n(bee,"A",{href:!0});var GAt=s(CY);Jkr=r(GAt,"from_config()"),GAt.forEach(t),Ykr=r(bee,` class
method.`),bee.forEach(t),Kkr=i(Ul),P9=n(Ul,"P",{});var UDe=s(P9);Zkr=r(UDe,"This class cannot be instantiated directly using "),E7e=n(UDe,"CODE",{});var OAt=s(E7e);eSr=r(OAt,"__init__()"),OAt.forEach(t),oSr=r(UDe," (throws an error)."),UDe.forEach(t),rSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var HA=s(zt);T(B9.$$.fragment,HA),tSr=i(HA),C7e=n(HA,"P",{});var VAt=s(C7e);aSr=r(VAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VAt.forEach(t),nSr=i(HA),Vc=n(HA,"P",{});var vee=s(Vc);sSr=r(vee,`Note:
Loading a model from its configuration file does `),w7e=n(vee,"STRONG",{});var XAt=s(w7e);lSr=r(XAt,"not"),XAt.forEach(t),iSr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(vee,"A",{href:!0});var zAt=s(wY);dSr=r(zAt,"from_pretrained()"),zAt.forEach(t),cSr=r(vee," to load the model weights."),vee.forEach(t),fSr=i(HA),T(x3.$$.fragment,HA),HA.forEach(t),mSr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(I9.$$.fragment,Jl),gSr=i(Jl),A7e=n(Jl,"P",{});var WAt=s(A7e);hSr=r(WAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WAt.forEach(t),pSr=i(Jl),bn=n(Jl,"P",{});var UA=s(bn);_Sr=r(UA,"The model class to instantiate is selected based on the "),y7e=n(UA,"CODE",{});var QAt=s(y7e);uSr=r(QAt,"model_type"),QAt.forEach(t),bSr=r(UA,` property of the config object (either
passed as an argument or loaded from `),L7e=n(UA,"CODE",{});var HAt=s(L7e);vSr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),FSr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=n(UA,"CODE",{});var UAt=s(x7e);TSr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),MSr=r(UA,":"),UA.forEach(t),ESr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);$3=n(ze,"LI",{});var nIe=s($3);$7e=n(nIe,"STRONG",{});var JAt=s($7e);CSr=r(JAt,"bart"),JAt.forEach(t),wSr=r(nIe," \u2014 "),AY=n(nIe,"A",{href:!0});var YAt=s(AY);ASr=r(YAt,"FlaxBartForConditionalGeneration"),YAt.forEach(t),ySr=r(nIe," (BART model)"),nIe.forEach(t),LSr=i(ze),k3=n(ze,"LI",{});var sIe=s(k3);k7e=n(sIe,"STRONG",{});var KAt=s(k7e);xSr=r(KAt,"blenderbot"),KAt.forEach(t),$Sr=r(sIe," \u2014 "),yY=n(sIe,"A",{href:!0});var ZAt=s(yY);kSr=r(ZAt,"FlaxBlenderbotForConditionalGeneration"),ZAt.forEach(t),SSr=r(sIe," (Blenderbot model)"),sIe.forEach(t),RSr=i(ze),S3=n(ze,"LI",{});var lIe=s(S3);S7e=n(lIe,"STRONG",{});var e6t=s(S7e);PSr=r(e6t,"blenderbot-small"),e6t.forEach(t),BSr=r(lIe," \u2014 "),LY=n(lIe,"A",{href:!0});var o6t=s(LY);ISr=r(o6t,"FlaxBlenderbotSmallForConditionalGeneration"),o6t.forEach(t),qSr=r(lIe," (BlenderbotSmall model)"),lIe.forEach(t),NSr=i(ze),R3=n(ze,"LI",{});var iIe=s(R3);R7e=n(iIe,"STRONG",{});var r6t=s(R7e);jSr=r(r6t,"encoder-decoder"),r6t.forEach(t),DSr=r(iIe," \u2014 "),xY=n(iIe,"A",{href:!0});var t6t=s(xY);GSr=r(t6t,"FlaxEncoderDecoderModel"),t6t.forEach(t),OSr=r(iIe," (Encoder decoder model)"),iIe.forEach(t),VSr=i(ze),P3=n(ze,"LI",{});var dIe=s(P3);P7e=n(dIe,"STRONG",{});var a6t=s(P7e);XSr=r(a6t,"marian"),a6t.forEach(t),zSr=r(dIe," \u2014 "),$Y=n(dIe,"A",{href:!0});var n6t=s($Y);WSr=r(n6t,"FlaxMarianMTModel"),n6t.forEach(t),QSr=r(dIe," (Marian model)"),dIe.forEach(t),HSr=i(ze),B3=n(ze,"LI",{});var cIe=s(B3);B7e=n(cIe,"STRONG",{});var s6t=s(B7e);USr=r(s6t,"mbart"),s6t.forEach(t),JSr=r(cIe," \u2014 "),kY=n(cIe,"A",{href:!0});var l6t=s(kY);YSr=r(l6t,"FlaxMBartForConditionalGeneration"),l6t.forEach(t),KSr=r(cIe," (mBART model)"),cIe.forEach(t),ZSr=i(ze),I3=n(ze,"LI",{});var fIe=s(I3);I7e=n(fIe,"STRONG",{});var i6t=s(I7e);eRr=r(i6t,"mt5"),i6t.forEach(t),oRr=r(fIe," \u2014 "),SY=n(fIe,"A",{href:!0});var d6t=s(SY);rRr=r(d6t,"FlaxMT5ForConditionalGeneration"),d6t.forEach(t),tRr=r(fIe," (mT5 model)"),fIe.forEach(t),aRr=i(ze),q3=n(ze,"LI",{});var mIe=s(q3);q7e=n(mIe,"STRONG",{});var c6t=s(q7e);nRr=r(c6t,"pegasus"),c6t.forEach(t),sRr=r(mIe," \u2014 "),RY=n(mIe,"A",{href:!0});var f6t=s(RY);lRr=r(f6t,"FlaxPegasusForConditionalGeneration"),f6t.forEach(t),iRr=r(mIe," (Pegasus model)"),mIe.forEach(t),dRr=i(ze),N3=n(ze,"LI",{});var gIe=s(N3);N7e=n(gIe,"STRONG",{});var m6t=s(N7e);cRr=r(m6t,"t5"),m6t.forEach(t),fRr=r(gIe," \u2014 "),PY=n(gIe,"A",{href:!0});var g6t=s(PY);mRr=r(g6t,"FlaxT5ForConditionalGeneration"),g6t.forEach(t),gRr=r(gIe," (T5 model)"),gIe.forEach(t),ze.forEach(t),hRr=i(Jl),T(j3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),VNe=i(f),Xc=n(f,"H2",{class:!0});var JDe=s(Xc);D3=n(JDe,"A",{id:!0,class:!0,href:!0});var h6t=s(D3);j7e=n(h6t,"SPAN",{});var p6t=s(j7e);T(q9.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),pRr=i(JDe),D7e=n(JDe,"SPAN",{});var _6t=s(D7e);_Rr=r(_6t,"FlaxAutoModelForSequenceClassification"),_6t.forEach(t),JDe.forEach(t),XNe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(N9.$$.fragment,Yl),uRr=i(Yl),zc=n(Yl,"P",{});var Fee=s(zc);bRr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BY=n(Fee,"A",{href:!0});var u6t=s(BY);vRr=r(u6t,"from_pretrained()"),u6t.forEach(t),FRr=r(Fee," class method or the "),IY=n(Fee,"A",{href:!0});var b6t=s(IY);TRr=r(b6t,"from_config()"),b6t.forEach(t),MRr=r(Fee,` class
method.`),Fee.forEach(t),ERr=i(Yl),j9=n(Yl,"P",{});var YDe=s(j9);CRr=r(YDe,"This class cannot be instantiated directly using "),G7e=n(YDe,"CODE",{});var v6t=s(G7e);wRr=r(v6t,"__init__()"),v6t.forEach(t),ARr=r(YDe," (throws an error)."),YDe.forEach(t),yRr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var JA=s(Wt);T(D9.$$.fragment,JA),LRr=i(JA),O7e=n(JA,"P",{});var F6t=s(O7e);xRr=r(F6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F6t.forEach(t),$Rr=i(JA),Wc=n(JA,"P",{});var Tee=s(Wc);kRr=r(Tee,`Note:
Loading a model from its configuration file does `),V7e=n(Tee,"STRONG",{});var T6t=s(V7e);SRr=r(T6t,"not"),T6t.forEach(t),RRr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Tee,"A",{href:!0});var M6t=s(qY);PRr=r(M6t,"from_pretrained()"),M6t.forEach(t),BRr=r(Tee," to load the model weights."),Tee.forEach(t),IRr=i(JA),T(G3.$$.fragment,JA),JA.forEach(t),qRr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(G9.$$.fragment,Kl),NRr=i(Kl),X7e=n(Kl,"P",{});var E6t=s(X7e);jRr=r(E6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),E6t.forEach(t),DRr=i(Kl),vn=n(Kl,"P",{});var YA=s(vn);GRr=r(YA,"The model class to instantiate is selected based on the "),z7e=n(YA,"CODE",{});var C6t=s(z7e);ORr=r(C6t,"model_type"),C6t.forEach(t),VRr=r(YA,` property of the config object (either
passed as an argument or loaded from `),W7e=n(YA,"CODE",{});var w6t=s(W7e);XRr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),zRr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(YA,"CODE",{});var A6t=s(Q7e);WRr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),QRr=r(YA,":"),YA.forEach(t),HRr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);O3=n(qe,"LI",{});var hIe=s(O3);H7e=n(hIe,"STRONG",{});var y6t=s(H7e);URr=r(y6t,"albert"),y6t.forEach(t),JRr=r(hIe," \u2014 "),NY=n(hIe,"A",{href:!0});var L6t=s(NY);YRr=r(L6t,"FlaxAlbertForSequenceClassification"),L6t.forEach(t),KRr=r(hIe," (ALBERT model)"),hIe.forEach(t),ZRr=i(qe),V3=n(qe,"LI",{});var pIe=s(V3);U7e=n(pIe,"STRONG",{});var x6t=s(U7e);ePr=r(x6t,"bart"),x6t.forEach(t),oPr=r(pIe," \u2014 "),jY=n(pIe,"A",{href:!0});var $6t=s(jY);rPr=r($6t,"FlaxBartForSequenceClassification"),$6t.forEach(t),tPr=r(pIe," (BART model)"),pIe.forEach(t),aPr=i(qe),X3=n(qe,"LI",{});var _Ie=s(X3);J7e=n(_Ie,"STRONG",{});var k6t=s(J7e);nPr=r(k6t,"bert"),k6t.forEach(t),sPr=r(_Ie," \u2014 "),DY=n(_Ie,"A",{href:!0});var S6t=s(DY);lPr=r(S6t,"FlaxBertForSequenceClassification"),S6t.forEach(t),iPr=r(_Ie," (BERT model)"),_Ie.forEach(t),dPr=i(qe),z3=n(qe,"LI",{});var uIe=s(z3);Y7e=n(uIe,"STRONG",{});var R6t=s(Y7e);cPr=r(R6t,"big_bird"),R6t.forEach(t),fPr=r(uIe," \u2014 "),GY=n(uIe,"A",{href:!0});var P6t=s(GY);mPr=r(P6t,"FlaxBigBirdForSequenceClassification"),P6t.forEach(t),gPr=r(uIe," (BigBird model)"),uIe.forEach(t),hPr=i(qe),W3=n(qe,"LI",{});var bIe=s(W3);K7e=n(bIe,"STRONG",{});var B6t=s(K7e);pPr=r(B6t,"distilbert"),B6t.forEach(t),_Pr=r(bIe," \u2014 "),OY=n(bIe,"A",{href:!0});var I6t=s(OY);uPr=r(I6t,"FlaxDistilBertForSequenceClassification"),I6t.forEach(t),bPr=r(bIe," (DistilBERT model)"),bIe.forEach(t),vPr=i(qe),Q3=n(qe,"LI",{});var vIe=s(Q3);Z7e=n(vIe,"STRONG",{});var q6t=s(Z7e);FPr=r(q6t,"electra"),q6t.forEach(t),TPr=r(vIe," \u2014 "),VY=n(vIe,"A",{href:!0});var N6t=s(VY);MPr=r(N6t,"FlaxElectraForSequenceClassification"),N6t.forEach(t),EPr=r(vIe," (ELECTRA model)"),vIe.forEach(t),CPr=i(qe),H3=n(qe,"LI",{});var FIe=s(H3);eMe=n(FIe,"STRONG",{});var j6t=s(eMe);wPr=r(j6t,"mbart"),j6t.forEach(t),APr=r(FIe," \u2014 "),XY=n(FIe,"A",{href:!0});var D6t=s(XY);yPr=r(D6t,"FlaxMBartForSequenceClassification"),D6t.forEach(t),LPr=r(FIe," (mBART model)"),FIe.forEach(t),xPr=i(qe),U3=n(qe,"LI",{});var TIe=s(U3);oMe=n(TIe,"STRONG",{});var G6t=s(oMe);$Pr=r(G6t,"roberta"),G6t.forEach(t),kPr=r(TIe," \u2014 "),zY=n(TIe,"A",{href:!0});var O6t=s(zY);SPr=r(O6t,"FlaxRobertaForSequenceClassification"),O6t.forEach(t),RPr=r(TIe," (RoBERTa model)"),TIe.forEach(t),PPr=i(qe),J3=n(qe,"LI",{});var MIe=s(J3);rMe=n(MIe,"STRONG",{});var V6t=s(rMe);BPr=r(V6t,"roformer"),V6t.forEach(t),IPr=r(MIe," \u2014 "),WY=n(MIe,"A",{href:!0});var X6t=s(WY);qPr=r(X6t,"FlaxRoFormerForSequenceClassification"),X6t.forEach(t),NPr=r(MIe," (RoFormer model)"),MIe.forEach(t),jPr=i(qe),Y3=n(qe,"LI",{});var EIe=s(Y3);tMe=n(EIe,"STRONG",{});var z6t=s(tMe);DPr=r(z6t,"xlm-roberta"),z6t.forEach(t),GPr=r(EIe," \u2014 "),QY=n(EIe,"A",{href:!0});var W6t=s(QY);OPr=r(W6t,"FlaxXLMRobertaForSequenceClassification"),W6t.forEach(t),VPr=r(EIe," (XLM-RoBERTa model)"),EIe.forEach(t),qe.forEach(t),XPr=i(Kl),T(K3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),zNe=i(f),Qc=n(f,"H2",{class:!0});var KDe=s(Qc);Z3=n(KDe,"A",{id:!0,class:!0,href:!0});var Q6t=s(Z3);aMe=n(Q6t,"SPAN",{});var H6t=s(aMe);T(O9.$$.fragment,H6t),H6t.forEach(t),Q6t.forEach(t),zPr=i(KDe),nMe=n(KDe,"SPAN",{});var U6t=s(nMe);WPr=r(U6t,"FlaxAutoModelForQuestionAnswering"),U6t.forEach(t),KDe.forEach(t),WNe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(V9.$$.fragment,Zl),QPr=i(Zl),Hc=n(Zl,"P",{});var Mee=s(Hc);HPr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HY=n(Mee,"A",{href:!0});var J6t=s(HY);UPr=r(J6t,"from_pretrained()"),J6t.forEach(t),JPr=r(Mee," class method or the "),UY=n(Mee,"A",{href:!0});var Y6t=s(UY);YPr=r(Y6t,"from_config()"),Y6t.forEach(t),KPr=r(Mee,` class
method.`),Mee.forEach(t),ZPr=i(Zl),X9=n(Zl,"P",{});var ZDe=s(X9);eBr=r(ZDe,"This class cannot be instantiated directly using "),sMe=n(ZDe,"CODE",{});var K6t=s(sMe);oBr=r(K6t,"__init__()"),K6t.forEach(t),rBr=r(ZDe," (throws an error)."),ZDe.forEach(t),tBr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var KA=s(Qt);T(z9.$$.fragment,KA),aBr=i(KA),lMe=n(KA,"P",{});var Z6t=s(lMe);nBr=r(Z6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z6t.forEach(t),sBr=i(KA),Uc=n(KA,"P",{});var Eee=s(Uc);lBr=r(Eee,`Note:
Loading a model from its configuration file does `),iMe=n(Eee,"STRONG",{});var eyt=s(iMe);iBr=r(eyt,"not"),eyt.forEach(t),dBr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Eee,"A",{href:!0});var oyt=s(JY);cBr=r(oyt,"from_pretrained()"),oyt.forEach(t),fBr=r(Eee," to load the model weights."),Eee.forEach(t),mBr=i(KA),T(ew.$$.fragment,KA),KA.forEach(t),gBr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(W9.$$.fragment,ei),hBr=i(ei),dMe=n(ei,"P",{});var ryt=s(dMe);pBr=r(ryt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ryt.forEach(t),_Br=i(ei),Fn=n(ei,"P",{});var ZA=s(Fn);uBr=r(ZA,"The model class to instantiate is selected based on the "),cMe=n(ZA,"CODE",{});var tyt=s(cMe);bBr=r(tyt,"model_type"),tyt.forEach(t),vBr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),fMe=n(ZA,"CODE",{});var ayt=s(fMe);FBr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),TBr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(ZA,"CODE",{});var nyt=s(mMe);MBr=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),EBr=r(ZA,":"),ZA.forEach(t),CBr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);ow=n(Ne,"LI",{});var CIe=s(ow);gMe=n(CIe,"STRONG",{});var syt=s(gMe);wBr=r(syt,"albert"),syt.forEach(t),ABr=r(CIe," \u2014 "),YY=n(CIe,"A",{href:!0});var lyt=s(YY);yBr=r(lyt,"FlaxAlbertForQuestionAnswering"),lyt.forEach(t),LBr=r(CIe," (ALBERT model)"),CIe.forEach(t),xBr=i(Ne),rw=n(Ne,"LI",{});var wIe=s(rw);hMe=n(wIe,"STRONG",{});var iyt=s(hMe);$Br=r(iyt,"bart"),iyt.forEach(t),kBr=r(wIe," \u2014 "),KY=n(wIe,"A",{href:!0});var dyt=s(KY);SBr=r(dyt,"FlaxBartForQuestionAnswering"),dyt.forEach(t),RBr=r(wIe," (BART model)"),wIe.forEach(t),PBr=i(Ne),tw=n(Ne,"LI",{});var AIe=s(tw);pMe=n(AIe,"STRONG",{});var cyt=s(pMe);BBr=r(cyt,"bert"),cyt.forEach(t),IBr=r(AIe," \u2014 "),ZY=n(AIe,"A",{href:!0});var fyt=s(ZY);qBr=r(fyt,"FlaxBertForQuestionAnswering"),fyt.forEach(t),NBr=r(AIe," (BERT model)"),AIe.forEach(t),jBr=i(Ne),aw=n(Ne,"LI",{});var yIe=s(aw);_Me=n(yIe,"STRONG",{});var myt=s(_Me);DBr=r(myt,"big_bird"),myt.forEach(t),GBr=r(yIe," \u2014 "),eK=n(yIe,"A",{href:!0});var gyt=s(eK);OBr=r(gyt,"FlaxBigBirdForQuestionAnswering"),gyt.forEach(t),VBr=r(yIe," (BigBird model)"),yIe.forEach(t),XBr=i(Ne),nw=n(Ne,"LI",{});var LIe=s(nw);uMe=n(LIe,"STRONG",{});var hyt=s(uMe);zBr=r(hyt,"distilbert"),hyt.forEach(t),WBr=r(LIe," \u2014 "),oK=n(LIe,"A",{href:!0});var pyt=s(oK);QBr=r(pyt,"FlaxDistilBertForQuestionAnswering"),pyt.forEach(t),HBr=r(LIe," (DistilBERT model)"),LIe.forEach(t),UBr=i(Ne),sw=n(Ne,"LI",{});var xIe=s(sw);bMe=n(xIe,"STRONG",{});var _yt=s(bMe);JBr=r(_yt,"electra"),_yt.forEach(t),YBr=r(xIe," \u2014 "),rK=n(xIe,"A",{href:!0});var uyt=s(rK);KBr=r(uyt,"FlaxElectraForQuestionAnswering"),uyt.forEach(t),ZBr=r(xIe," (ELECTRA model)"),xIe.forEach(t),eIr=i(Ne),lw=n(Ne,"LI",{});var $Ie=s(lw);vMe=n($Ie,"STRONG",{});var byt=s(vMe);oIr=r(byt,"mbart"),byt.forEach(t),rIr=r($Ie," \u2014 "),tK=n($Ie,"A",{href:!0});var vyt=s(tK);tIr=r(vyt,"FlaxMBartForQuestionAnswering"),vyt.forEach(t),aIr=r($Ie," (mBART model)"),$Ie.forEach(t),nIr=i(Ne),iw=n(Ne,"LI",{});var kIe=s(iw);FMe=n(kIe,"STRONG",{});var Fyt=s(FMe);sIr=r(Fyt,"roberta"),Fyt.forEach(t),lIr=r(kIe," \u2014 "),aK=n(kIe,"A",{href:!0});var Tyt=s(aK);iIr=r(Tyt,"FlaxRobertaForQuestionAnswering"),Tyt.forEach(t),dIr=r(kIe," (RoBERTa model)"),kIe.forEach(t),cIr=i(Ne),dw=n(Ne,"LI",{});var SIe=s(dw);TMe=n(SIe,"STRONG",{});var Myt=s(TMe);fIr=r(Myt,"roformer"),Myt.forEach(t),mIr=r(SIe," \u2014 "),nK=n(SIe,"A",{href:!0});var Eyt=s(nK);gIr=r(Eyt,"FlaxRoFormerForQuestionAnswering"),Eyt.forEach(t),hIr=r(SIe," (RoFormer model)"),SIe.forEach(t),pIr=i(Ne),cw=n(Ne,"LI",{});var RIe=s(cw);MMe=n(RIe,"STRONG",{});var Cyt=s(MMe);_Ir=r(Cyt,"xlm-roberta"),Cyt.forEach(t),uIr=r(RIe," \u2014 "),sK=n(RIe,"A",{href:!0});var wyt=s(sK);bIr=r(wyt,"FlaxXLMRobertaForQuestionAnswering"),wyt.forEach(t),vIr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),Ne.forEach(t),FIr=i(ei),T(fw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),QNe=i(f),Jc=n(f,"H2",{class:!0});var eGe=s(Jc);mw=n(eGe,"A",{id:!0,class:!0,href:!0});var Ayt=s(mw);EMe=n(Ayt,"SPAN",{});var yyt=s(EMe);T(Q9.$$.fragment,yyt),yyt.forEach(t),Ayt.forEach(t),TIr=i(eGe),CMe=n(eGe,"SPAN",{});var Lyt=s(CMe);MIr=r(Lyt,"FlaxAutoModelForTokenClassification"),Lyt.forEach(t),eGe.forEach(t),HNe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(H9.$$.fragment,oi),EIr=i(oi),Yc=n(oi,"P",{});var Cee=s(Yc);CIr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lK=n(Cee,"A",{href:!0});var xyt=s(lK);wIr=r(xyt,"from_pretrained()"),xyt.forEach(t),AIr=r(Cee," class method or the "),iK=n(Cee,"A",{href:!0});var $yt=s(iK);yIr=r($yt,"from_config()"),$yt.forEach(t),LIr=r(Cee,` class
method.`),Cee.forEach(t),xIr=i(oi),U9=n(oi,"P",{});var oGe=s(U9);$Ir=r(oGe,"This class cannot be instantiated directly using "),wMe=n(oGe,"CODE",{});var kyt=s(wMe);kIr=r(kyt,"__init__()"),kyt.forEach(t),SIr=r(oGe," (throws an error)."),oGe.forEach(t),RIr=i(oi),Ht=n(oi,"DIV",{class:!0});var e6=s(Ht);T(J9.$$.fragment,e6),PIr=i(e6),AMe=n(e6,"P",{});var Syt=s(AMe);BIr=r(Syt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Syt.forEach(t),IIr=i(e6),Kc=n(e6,"P",{});var wee=s(Kc);qIr=r(wee,`Note:
Loading a model from its configuration file does `),yMe=n(wee,"STRONG",{});var Ryt=s(yMe);NIr=r(Ryt,"not"),Ryt.forEach(t),jIr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(wee,"A",{href:!0});var Pyt=s(dK);DIr=r(Pyt,"from_pretrained()"),Pyt.forEach(t),GIr=r(wee," to load the model weights."),wee.forEach(t),OIr=i(e6),T(gw.$$.fragment,e6),e6.forEach(t),VIr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(Y9.$$.fragment,ri),XIr=i(ri),LMe=n(ri,"P",{});var Byt=s(LMe);zIr=r(Byt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Byt.forEach(t),WIr=i(ri),Tn=n(ri,"P",{});var o6=s(Tn);QIr=r(o6,"The model class to instantiate is selected based on the "),xMe=n(o6,"CODE",{});var Iyt=s(xMe);HIr=r(Iyt,"model_type"),Iyt.forEach(t),UIr=r(o6,` property of the config object (either
passed as an argument or loaded from `),$Me=n(o6,"CODE",{});var qyt=s($Me);JIr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),YIr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(o6,"CODE",{});var Nyt=s(kMe);KIr=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),ZIr=r(o6,":"),o6.forEach(t),eqr=i(ri),De=n(ri,"UL",{});var Fo=s(De);hw=n(Fo,"LI",{});var PIe=s(hw);SMe=n(PIe,"STRONG",{});var jyt=s(SMe);oqr=r(jyt,"albert"),jyt.forEach(t),rqr=r(PIe," \u2014 "),cK=n(PIe,"A",{href:!0});var Dyt=s(cK);tqr=r(Dyt,"FlaxAlbertForTokenClassification"),Dyt.forEach(t),aqr=r(PIe," (ALBERT model)"),PIe.forEach(t),nqr=i(Fo),pw=n(Fo,"LI",{});var BIe=s(pw);RMe=n(BIe,"STRONG",{});var Gyt=s(RMe);sqr=r(Gyt,"bert"),Gyt.forEach(t),lqr=r(BIe," \u2014 "),fK=n(BIe,"A",{href:!0});var Oyt=s(fK);iqr=r(Oyt,"FlaxBertForTokenClassification"),Oyt.forEach(t),dqr=r(BIe," (BERT model)"),BIe.forEach(t),cqr=i(Fo),_w=n(Fo,"LI",{});var IIe=s(_w);PMe=n(IIe,"STRONG",{});var Vyt=s(PMe);fqr=r(Vyt,"big_bird"),Vyt.forEach(t),mqr=r(IIe," \u2014 "),mK=n(IIe,"A",{href:!0});var Xyt=s(mK);gqr=r(Xyt,"FlaxBigBirdForTokenClassification"),Xyt.forEach(t),hqr=r(IIe," (BigBird model)"),IIe.forEach(t),pqr=i(Fo),uw=n(Fo,"LI",{});var qIe=s(uw);BMe=n(qIe,"STRONG",{});var zyt=s(BMe);_qr=r(zyt,"distilbert"),zyt.forEach(t),uqr=r(qIe," \u2014 "),gK=n(qIe,"A",{href:!0});var Wyt=s(gK);bqr=r(Wyt,"FlaxDistilBertForTokenClassification"),Wyt.forEach(t),vqr=r(qIe," (DistilBERT model)"),qIe.forEach(t),Fqr=i(Fo),bw=n(Fo,"LI",{});var NIe=s(bw);IMe=n(NIe,"STRONG",{});var Qyt=s(IMe);Tqr=r(Qyt,"electra"),Qyt.forEach(t),Mqr=r(NIe," \u2014 "),hK=n(NIe,"A",{href:!0});var Hyt=s(hK);Eqr=r(Hyt,"FlaxElectraForTokenClassification"),Hyt.forEach(t),Cqr=r(NIe," (ELECTRA model)"),NIe.forEach(t),wqr=i(Fo),vw=n(Fo,"LI",{});var jIe=s(vw);qMe=n(jIe,"STRONG",{});var Uyt=s(qMe);Aqr=r(Uyt,"roberta"),Uyt.forEach(t),yqr=r(jIe," \u2014 "),pK=n(jIe,"A",{href:!0});var Jyt=s(pK);Lqr=r(Jyt,"FlaxRobertaForTokenClassification"),Jyt.forEach(t),xqr=r(jIe," (RoBERTa model)"),jIe.forEach(t),$qr=i(Fo),Fw=n(Fo,"LI",{});var DIe=s(Fw);NMe=n(DIe,"STRONG",{});var Yyt=s(NMe);kqr=r(Yyt,"roformer"),Yyt.forEach(t),Sqr=r(DIe," \u2014 "),_K=n(DIe,"A",{href:!0});var Kyt=s(_K);Rqr=r(Kyt,"FlaxRoFormerForTokenClassification"),Kyt.forEach(t),Pqr=r(DIe," (RoFormer model)"),DIe.forEach(t),Bqr=i(Fo),Tw=n(Fo,"LI",{});var GIe=s(Tw);jMe=n(GIe,"STRONG",{});var Zyt=s(jMe);Iqr=r(Zyt,"xlm-roberta"),Zyt.forEach(t),qqr=r(GIe," \u2014 "),uK=n(GIe,"A",{href:!0});var eLt=s(uK);Nqr=r(eLt,"FlaxXLMRobertaForTokenClassification"),eLt.forEach(t),jqr=r(GIe," (XLM-RoBERTa model)"),GIe.forEach(t),Fo.forEach(t),Dqr=i(ri),T(Mw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),UNe=i(f),Zc=n(f,"H2",{class:!0});var rGe=s(Zc);Ew=n(rGe,"A",{id:!0,class:!0,href:!0});var oLt=s(Ew);DMe=n(oLt,"SPAN",{});var rLt=s(DMe);T(K9.$$.fragment,rLt),rLt.forEach(t),oLt.forEach(t),Gqr=i(rGe),GMe=n(rGe,"SPAN",{});var tLt=s(GMe);Oqr=r(tLt,"FlaxAutoModelForMultipleChoice"),tLt.forEach(t),rGe.forEach(t),JNe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(Z9.$$.fragment,ti),Vqr=i(ti),ef=n(ti,"P",{});var Aee=s(ef);Xqr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bK=n(Aee,"A",{href:!0});var aLt=s(bK);zqr=r(aLt,"from_pretrained()"),aLt.forEach(t),Wqr=r(Aee," class method or the "),vK=n(Aee,"A",{href:!0});var nLt=s(vK);Qqr=r(nLt,"from_config()"),nLt.forEach(t),Hqr=r(Aee,` class
method.`),Aee.forEach(t),Uqr=i(ti),ex=n(ti,"P",{});var tGe=s(ex);Jqr=r(tGe,"This class cannot be instantiated directly using "),OMe=n(tGe,"CODE",{});var sLt=s(OMe);Yqr=r(sLt,"__init__()"),sLt.forEach(t),Kqr=r(tGe," (throws an error)."),tGe.forEach(t),Zqr=i(ti),Ut=n(ti,"DIV",{class:!0});var r6=s(Ut);T(ox.$$.fragment,r6),eNr=i(r6),VMe=n(r6,"P",{});var lLt=s(VMe);oNr=r(lLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lLt.forEach(t),rNr=i(r6),of=n(r6,"P",{});var yee=s(of);tNr=r(yee,`Note:
Loading a model from its configuration file does `),XMe=n(yee,"STRONG",{});var iLt=s(XMe);aNr=r(iLt,"not"),iLt.forEach(t),nNr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(yee,"A",{href:!0});var dLt=s(FK);sNr=r(dLt,"from_pretrained()"),dLt.forEach(t),lNr=r(yee," to load the model weights."),yee.forEach(t),iNr=i(r6),T(Cw.$$.fragment,r6),r6.forEach(t),dNr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(rx.$$.fragment,ai),cNr=i(ai),zMe=n(ai,"P",{});var cLt=s(zMe);fNr=r(cLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cLt.forEach(t),mNr=i(ai),Mn=n(ai,"P",{});var t6=s(Mn);gNr=r(t6,"The model class to instantiate is selected based on the "),WMe=n(t6,"CODE",{});var fLt=s(WMe);hNr=r(fLt,"model_type"),fLt.forEach(t),pNr=r(t6,` property of the config object (either
passed as an argument or loaded from `),QMe=n(t6,"CODE",{});var mLt=s(QMe);_Nr=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),uNr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n(t6,"CODE",{});var gLt=s(HMe);bNr=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),vNr=r(t6,":"),t6.forEach(t),FNr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);ww=n(To,"LI",{});var OIe=s(ww);UMe=n(OIe,"STRONG",{});var hLt=s(UMe);TNr=r(hLt,"albert"),hLt.forEach(t),MNr=r(OIe," \u2014 "),TK=n(OIe,"A",{href:!0});var pLt=s(TK);ENr=r(pLt,"FlaxAlbertForMultipleChoice"),pLt.forEach(t),CNr=r(OIe," (ALBERT model)"),OIe.forEach(t),wNr=i(To),Aw=n(To,"LI",{});var VIe=s(Aw);JMe=n(VIe,"STRONG",{});var _Lt=s(JMe);ANr=r(_Lt,"bert"),_Lt.forEach(t),yNr=r(VIe," \u2014 "),MK=n(VIe,"A",{href:!0});var uLt=s(MK);LNr=r(uLt,"FlaxBertForMultipleChoice"),uLt.forEach(t),xNr=r(VIe," (BERT model)"),VIe.forEach(t),$Nr=i(To),yw=n(To,"LI",{});var XIe=s(yw);YMe=n(XIe,"STRONG",{});var bLt=s(YMe);kNr=r(bLt,"big_bird"),bLt.forEach(t),SNr=r(XIe," \u2014 "),EK=n(XIe,"A",{href:!0});var vLt=s(EK);RNr=r(vLt,"FlaxBigBirdForMultipleChoice"),vLt.forEach(t),PNr=r(XIe," (BigBird model)"),XIe.forEach(t),BNr=i(To),Lw=n(To,"LI",{});var zIe=s(Lw);KMe=n(zIe,"STRONG",{});var FLt=s(KMe);INr=r(FLt,"distilbert"),FLt.forEach(t),qNr=r(zIe," \u2014 "),CK=n(zIe,"A",{href:!0});var TLt=s(CK);NNr=r(TLt,"FlaxDistilBertForMultipleChoice"),TLt.forEach(t),jNr=r(zIe," (DistilBERT model)"),zIe.forEach(t),DNr=i(To),xw=n(To,"LI",{});var WIe=s(xw);ZMe=n(WIe,"STRONG",{});var MLt=s(ZMe);GNr=r(MLt,"electra"),MLt.forEach(t),ONr=r(WIe," \u2014 "),wK=n(WIe,"A",{href:!0});var ELt=s(wK);VNr=r(ELt,"FlaxElectraForMultipleChoice"),ELt.forEach(t),XNr=r(WIe," (ELECTRA model)"),WIe.forEach(t),zNr=i(To),$w=n(To,"LI",{});var QIe=s($w);eEe=n(QIe,"STRONG",{});var CLt=s(eEe);WNr=r(CLt,"roberta"),CLt.forEach(t),QNr=r(QIe," \u2014 "),AK=n(QIe,"A",{href:!0});var wLt=s(AK);HNr=r(wLt,"FlaxRobertaForMultipleChoice"),wLt.forEach(t),UNr=r(QIe," (RoBERTa model)"),QIe.forEach(t),JNr=i(To),kw=n(To,"LI",{});var HIe=s(kw);oEe=n(HIe,"STRONG",{});var ALt=s(oEe);YNr=r(ALt,"roformer"),ALt.forEach(t),KNr=r(HIe," \u2014 "),yK=n(HIe,"A",{href:!0});var yLt=s(yK);ZNr=r(yLt,"FlaxRoFormerForMultipleChoice"),yLt.forEach(t),ejr=r(HIe," (RoFormer model)"),HIe.forEach(t),ojr=i(To),Sw=n(To,"LI",{});var UIe=s(Sw);rEe=n(UIe,"STRONG",{});var LLt=s(rEe);rjr=r(LLt,"xlm-roberta"),LLt.forEach(t),tjr=r(UIe," \u2014 "),LK=n(UIe,"A",{href:!0});var xLt=s(LK);ajr=r(xLt,"FlaxXLMRobertaForMultipleChoice"),xLt.forEach(t),njr=r(UIe," (XLM-RoBERTa model)"),UIe.forEach(t),To.forEach(t),sjr=i(ai),T(Rw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),YNe=i(f),rf=n(f,"H2",{class:!0});var aGe=s(rf);Pw=n(aGe,"A",{id:!0,class:!0,href:!0});var $Lt=s(Pw);tEe=n($Lt,"SPAN",{});var kLt=s(tEe);T(tx.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),ljr=i(aGe),aEe=n(aGe,"SPAN",{});var SLt=s(aEe);ijr=r(SLt,"FlaxAutoModelForNextSentencePrediction"),SLt.forEach(t),aGe.forEach(t),KNe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(ax.$$.fragment,ni),djr=i(ni),tf=n(ni,"P",{});var Lee=s(tf);cjr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xK=n(Lee,"A",{href:!0});var RLt=s(xK);fjr=r(RLt,"from_pretrained()"),RLt.forEach(t),mjr=r(Lee," class method or the "),$K=n(Lee,"A",{href:!0});var PLt=s($K);gjr=r(PLt,"from_config()"),PLt.forEach(t),hjr=r(Lee,` class
method.`),Lee.forEach(t),pjr=i(ni),nx=n(ni,"P",{});var nGe=s(nx);_jr=r(nGe,"This class cannot be instantiated directly using "),nEe=n(nGe,"CODE",{});var BLt=s(nEe);ujr=r(BLt,"__init__()"),BLt.forEach(t),bjr=r(nGe," (throws an error)."),nGe.forEach(t),vjr=i(ni),Jt=n(ni,"DIV",{class:!0});var a6=s(Jt);T(sx.$$.fragment,a6),Fjr=i(a6),sEe=n(a6,"P",{});var ILt=s(sEe);Tjr=r(ILt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ILt.forEach(t),Mjr=i(a6),af=n(a6,"P",{});var xee=s(af);Ejr=r(xee,`Note:
Loading a model from its configuration file does `),lEe=n(xee,"STRONG",{});var qLt=s(lEe);Cjr=r(qLt,"not"),qLt.forEach(t),wjr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(xee,"A",{href:!0});var NLt=s(kK);Ajr=r(NLt,"from_pretrained()"),NLt.forEach(t),yjr=r(xee," to load the model weights."),xee.forEach(t),Ljr=i(a6),T(Bw.$$.fragment,a6),a6.forEach(t),xjr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(lx.$$.fragment,si),$jr=i(si),iEe=n(si,"P",{});var jLt=s(iEe);kjr=r(jLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jLt.forEach(t),Sjr=i(si),En=n(si,"P",{});var n6=s(En);Rjr=r(n6,"The model class to instantiate is selected based on the "),dEe=n(n6,"CODE",{});var DLt=s(dEe);Pjr=r(DLt,"model_type"),DLt.forEach(t),Bjr=r(n6,` property of the config object (either
passed as an argument or loaded from `),cEe=n(n6,"CODE",{});var GLt=s(cEe);Ijr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),qjr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(n6,"CODE",{});var OLt=s(fEe);Njr=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),jjr=r(n6,":"),n6.forEach(t),Djr=i(si),mEe=n(si,"UL",{});var VLt=s(mEe);Iw=n(VLt,"LI",{});var JIe=s(Iw);gEe=n(JIe,"STRONG",{});var XLt=s(gEe);Gjr=r(XLt,"bert"),XLt.forEach(t),Ojr=r(JIe," \u2014 "),SK=n(JIe,"A",{href:!0});var zLt=s(SK);Vjr=r(zLt,"FlaxBertForNextSentencePrediction"),zLt.forEach(t),Xjr=r(JIe," (BERT model)"),JIe.forEach(t),VLt.forEach(t),zjr=i(si),T(qw.$$.fragment,si),si.forEach(t),ni.forEach(t),ZNe=i(f),nf=n(f,"H2",{class:!0});var sGe=s(nf);Nw=n(sGe,"A",{id:!0,class:!0,href:!0});var WLt=s(Nw);hEe=n(WLt,"SPAN",{});var QLt=s(hEe);T(ix.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),Wjr=i(sGe),pEe=n(sGe,"SPAN",{});var HLt=s(pEe);Qjr=r(HLt,"FlaxAutoModelForImageClassification"),HLt.forEach(t),sGe.forEach(t),eje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(dx.$$.fragment,li),Hjr=i(li),sf=n(li,"P",{});var $ee=s(sf);Ujr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RK=n($ee,"A",{href:!0});var ULt=s(RK);Jjr=r(ULt,"from_pretrained()"),ULt.forEach(t),Yjr=r($ee," class method or the "),PK=n($ee,"A",{href:!0});var JLt=s(PK);Kjr=r(JLt,"from_config()"),JLt.forEach(t),Zjr=r($ee,` class
method.`),$ee.forEach(t),eDr=i(li),cx=n(li,"P",{});var lGe=s(cx);oDr=r(lGe,"This class cannot be instantiated directly using "),_Ee=n(lGe,"CODE",{});var YLt=s(_Ee);rDr=r(YLt,"__init__()"),YLt.forEach(t),tDr=r(lGe," (throws an error)."),lGe.forEach(t),aDr=i(li),Yt=n(li,"DIV",{class:!0});var s6=s(Yt);T(fx.$$.fragment,s6),nDr=i(s6),uEe=n(s6,"P",{});var KLt=s(uEe);sDr=r(KLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KLt.forEach(t),lDr=i(s6),lf=n(s6,"P",{});var kee=s(lf);iDr=r(kee,`Note:
Loading a model from its configuration file does `),bEe=n(kee,"STRONG",{});var ZLt=s(bEe);dDr=r(ZLt,"not"),ZLt.forEach(t),cDr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(kee,"A",{href:!0});var e8t=s(BK);fDr=r(e8t,"from_pretrained()"),e8t.forEach(t),mDr=r(kee," to load the model weights."),kee.forEach(t),gDr=i(s6),T(jw.$$.fragment,s6),s6.forEach(t),hDr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(mx.$$.fragment,ii),pDr=i(ii),vEe=n(ii,"P",{});var o8t=s(vEe);_Dr=r(o8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o8t.forEach(t),uDr=i(ii),Cn=n(ii,"P",{});var l6=s(Cn);bDr=r(l6,"The model class to instantiate is selected based on the "),FEe=n(l6,"CODE",{});var r8t=s(FEe);vDr=r(r8t,"model_type"),r8t.forEach(t),FDr=r(l6,` property of the config object (either
passed as an argument or loaded from `),TEe=n(l6,"CODE",{});var t8t=s(TEe);TDr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),MDr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(l6,"CODE",{});var a8t=s(MEe);EDr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),CDr=r(l6,":"),l6.forEach(t),wDr=i(ii),gx=n(ii,"UL",{});var iGe=s(gx);Dw=n(iGe,"LI",{});var YIe=s(Dw);EEe=n(YIe,"STRONG",{});var n8t=s(EEe);ADr=r(n8t,"beit"),n8t.forEach(t),yDr=r(YIe," \u2014 "),IK=n(YIe,"A",{href:!0});var s8t=s(IK);LDr=r(s8t,"FlaxBeitForImageClassification"),s8t.forEach(t),xDr=r(YIe," (BEiT model)"),YIe.forEach(t),$Dr=i(iGe),Gw=n(iGe,"LI",{});var KIe=s(Gw);CEe=n(KIe,"STRONG",{});var l8t=s(CEe);kDr=r(l8t,"vit"),l8t.forEach(t),SDr=r(KIe," \u2014 "),qK=n(KIe,"A",{href:!0});var i8t=s(qK);RDr=r(i8t,"FlaxViTForImageClassification"),i8t.forEach(t),PDr=r(KIe," (ViT model)"),KIe.forEach(t),iGe.forEach(t),BDr=i(ii),T(Ow.$$.fragment,ii),ii.forEach(t),li.forEach(t),oje=i(f),df=n(f,"H2",{class:!0});var dGe=s(df);Vw=n(dGe,"A",{id:!0,class:!0,href:!0});var d8t=s(Vw);wEe=n(d8t,"SPAN",{});var c8t=s(wEe);T(hx.$$.fragment,c8t),c8t.forEach(t),d8t.forEach(t),IDr=i(dGe),AEe=n(dGe,"SPAN",{});var f8t=s(AEe);qDr=r(f8t,"FlaxAutoModelForVision2Seq"),f8t.forEach(t),dGe.forEach(t),rje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(px.$$.fragment,di),NDr=i(di),cf=n(di,"P",{});var See=s(cf);jDr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=n(See,"A",{href:!0});var m8t=s(NK);DDr=r(m8t,"from_pretrained()"),m8t.forEach(t),GDr=r(See," class method or the "),jK=n(See,"A",{href:!0});var g8t=s(jK);ODr=r(g8t,"from_config()"),g8t.forEach(t),VDr=r(See,` class
method.`),See.forEach(t),XDr=i(di),_x=n(di,"P",{});var cGe=s(_x);zDr=r(cGe,"This class cannot be instantiated directly using "),yEe=n(cGe,"CODE",{});var h8t=s(yEe);WDr=r(h8t,"__init__()"),h8t.forEach(t),QDr=r(cGe," (throws an error)."),cGe.forEach(t),HDr=i(di),Kt=n(di,"DIV",{class:!0});var i6=s(Kt);T(ux.$$.fragment,i6),UDr=i(i6),LEe=n(i6,"P",{});var p8t=s(LEe);JDr=r(p8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p8t.forEach(t),YDr=i(i6),ff=n(i6,"P",{});var Ree=s(ff);KDr=r(Ree,`Note:
Loading a model from its configuration file does `),xEe=n(Ree,"STRONG",{});var _8t=s(xEe);ZDr=r(_8t,"not"),_8t.forEach(t),eGr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(Ree,"A",{href:!0});var u8t=s(DK);oGr=r(u8t,"from_pretrained()"),u8t.forEach(t),rGr=r(Ree," to load the model weights."),Ree.forEach(t),tGr=i(i6),T(Xw.$$.fragment,i6),i6.forEach(t),aGr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(bx.$$.fragment,ci),nGr=i(ci),$Ee=n(ci,"P",{});var b8t=s($Ee);sGr=r(b8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b8t.forEach(t),lGr=i(ci),wn=n(ci,"P",{});var d6=s(wn);iGr=r(d6,"The model class to instantiate is selected based on the "),kEe=n(d6,"CODE",{});var v8t=s(kEe);dGr=r(v8t,"model_type"),v8t.forEach(t),cGr=r(d6,` property of the config object (either
passed as an argument or loaded from `),SEe=n(d6,"CODE",{});var F8t=s(SEe);fGr=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),mGr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(d6,"CODE",{});var T8t=s(REe);gGr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),hGr=r(d6,":"),d6.forEach(t),pGr=i(ci),PEe=n(ci,"UL",{});var M8t=s(PEe);zw=n(M8t,"LI",{});var ZIe=s(zw);BEe=n(ZIe,"STRONG",{});var E8t=s(BEe);_Gr=r(E8t,"vision-encoder-decoder"),E8t.forEach(t),uGr=r(ZIe," \u2014 "),GK=n(ZIe,"A",{href:!0});var C8t=s(GK);bGr=r(C8t,"FlaxVisionEncoderDecoderModel"),C8t.forEach(t),vGr=r(ZIe," (Vision Encoder decoder model)"),ZIe.forEach(t),M8t.forEach(t),FGr=i(ci),T(Ww.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Lxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(N$,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(j$,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig"),c(D$,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig"),c(G$,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig"),c(O$,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig"),c(V$,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(X$,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig"),c(z$,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(W$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Q$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(H$,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig"),c(U$,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig"),c(J$,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig"),c(Y$,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig"),c(K$,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig"),c(Z$,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig"),c(ek,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig"),c(ok,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rk,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tk,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ak,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig"),c(nk,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sk,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lk,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig"),c(ik,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig"),c(dk,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ck,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig"),c(fk,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig"),c(mk,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig"),c(gk,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig"),c(pk,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig"),c(_k,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig"),c(uk,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig"),c(bk,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig"),c(vk,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig"),c(Fk,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config"),c(Tk,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Mk,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig"),c(Ek,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig"),c(Ck,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig"),c(wk,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ak,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(yk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Lk,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig"),c(xk,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig"),c($k,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig"),c(kk,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig"),c(Sk,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config"),c(Rk,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig"),c(Pk,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Bk,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig"),c(Ik,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(qk,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Nk,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig"),c(jk,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config"),c(Dk,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Gk,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ok,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig"),c(Vk,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig"),c(Xk,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig"),c(zk,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig"),c(Wk,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Qk,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Hk,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Uk,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagConfig"),c(Jk,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmConfig"),c(Yk,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig"),c(Kk,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig"),c(Zk,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig"),c(eS,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig"),c(oS,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig"),c(rS,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig"),c(tS,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig"),c(aS,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig"),c(nS,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig"),c(sS,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig"),c(lS,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(iS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(dS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(cS,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig"),c(fS,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(mS,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig"),c(gS,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config"),c(hS,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig"),c(pS,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(_S,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uS,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig"),c(bS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(vS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(FS,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig"),c(TS,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig"),c(MS,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(CS,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(wS,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig"),c(AS,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(yS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(LS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(xS,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig"),c($S,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig"),c(kS,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig"),c(SS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(RS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(PS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(BS,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig"),c(IS,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig"),c(qS,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"id","transformers.AutoTokenizer"),c(Eg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(NS,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(jS,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(DS,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(GS,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizer"),c(OS,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizerFast"),c(VS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizer"),c(XS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(zS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(WS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizerFast"),c(QS,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(HS,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(US,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(JS,"href","/docs/transformers/pr_17254/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(YS,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(KS,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(ZS,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(eR,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(oR,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(rR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(tR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(aR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(nR,"href","/docs/transformers/pr_17254/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(sR,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizer"),c(lR,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineTokenizer"),c(dR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(cR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(fR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(mR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizer"),c(hR,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(pR,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(_R,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizer"),c(vR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(FR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(TR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(MR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ER,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(wR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(AR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizer"),c(yR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(LR,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(xR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizer"),c($R,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(kR,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(SR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizer"),c(RR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(PR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(jR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(DR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizer"),c(GR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(WR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(QR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(HR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(UR,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(JR,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(YR,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizer"),c(KR,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizer"),c(eP,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(oP,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeTokenizer"),c(rP,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(tP,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(aP,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(nP,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianTokenizer"),c(sP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizer"),c(lP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(iP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(dP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(cP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(fP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(mP,"href","/docs/transformers/pr_17254/en/model_doc/mluke#transformers.MLukeTokenizer"),c(gP,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(hP,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(_P,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(uP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(bP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(vP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(FP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(MP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(EP,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AP,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(yP,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizer"),c(LP,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartTokenizer"),c(xP,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c($P,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(kP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagTokenizer"),c(RP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizer"),c(PP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizerFast"),c(BP,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizer"),c(IP,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(qP,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizer"),c(NP,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(DP,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VP,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(XP,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(zP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(WP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(QP,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizer"),c(HP,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(UP,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(JP,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(KP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(ZP,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasTokenizer"),c(eB,"href","/docs/transformers/pr_17254/en/model_doc/tapex#transformers.TapexTokenizer"),c(oB,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(rB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(tB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(lB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizer"),c(iB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(dB,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMTokenizer"),c(cB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(fB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(mB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(gB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_B,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(bB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(vB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(FB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TB,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c($B,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoProcessor"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(QB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(HB,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPProcessor"),c(UB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(JB,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(YB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(eI,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oI,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aI,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltProcessor"),c(nI,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(sI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoModel"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(dI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mI,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel"),c(gI,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel"),c(hI,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel"),c(pI,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(_I,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(uI,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel"),c(bI,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(vI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(FI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(TI,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel"),c(MI,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel"),c(EI,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel"),c(CI,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel"),c(wI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel"),c(AI,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel"),c(yI,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel"),c(LI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(xI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel"),c($I,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(kI,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel"),c(SI,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(RI,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(PI,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel"),c(BI,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel"),c(II,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel"),c(qI,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(NI,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel"),c(jI,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel"),c(DI,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel"),c(GI,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel"),c(OI,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel"),c(VI,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel"),c(XI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel"),c(zI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel"),c(WI,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel"),c(QI,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model"),c(HI,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(UI,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel"),c(JI,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel"),c(YI,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel"),c(KI,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(ZI,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(eq,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(oq,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel"),c(rq,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel"),c(tq,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel"),c(aq,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel"),c(nq,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model"),c(sq,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel"),c(lq,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel"),c(iq,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel"),c(dq,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cq,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fq,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel"),c(mq,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model"),c(gq,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hq,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pq,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel"),c(_q,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel"),c(uq,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel"),c(bq,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel"),c(vq,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Fq,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Tq,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Mq,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel"),c(Eq,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel"),c(Cq,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel"),c(wq,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel"),c(Aq,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(yq,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel"),c(Lq,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel"),c(xq,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel"),c($q,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel"),c(kq,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel"),c(Sq,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Rq,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel"),c(Pq,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Bq,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel"),c(Iq,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model"),c(qq,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel"),c(Nq,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(jq,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Dq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Gq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Oq,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel"),c(Vq,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel"),c(Xq,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(zq,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Wq,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel"),c(Qq,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Hq,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Uq,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Jq,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel"),c(Yq,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel"),c(Kq,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel"),c(Zq,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(eN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(oN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(rN,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel"),c(tN,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel"),c(aN,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForPreTraining"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(nN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iN,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining"),c(dN,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cN,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining"),c(fN,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(mN,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gN,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hN,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pN,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uN,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bN,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vN,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FN,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining"),c(TN,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining"),c(MN,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(EN,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(CN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wN,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yN,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LN,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xN,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($N,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kN,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SN,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RN,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(PN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BN,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IN,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(NN,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jN,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ON,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VN,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(WN,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UN,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModelForCausalLM"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(JN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZN,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM"),c(ej,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel"),c(oj,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rj,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tj,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aj,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nj,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sj,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lj,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ij,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dj,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cj,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fj,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mj,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(gj,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM"),c(hj,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM"),c(pj,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(_j,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uj,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM"),c(bj,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(vj,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Fj,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Tj,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Mj,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Ej,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Cj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(wj,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Aj,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yj,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(xj,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM"),c($j,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Sj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Rj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Pj,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForMaskedLM"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Bj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ij,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nj,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zj,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Jj,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eD,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nD,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sD,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lD,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dD,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fD,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(mD,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hD,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_D,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(uD,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForSeq2SeqLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(bD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AD,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel"),c($D,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForSequenceClassification"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(qD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DD,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c($G,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForMultipleChoice"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(SG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.AutoModelForNextSentencePrediction"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(cO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(hO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(pO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(_O,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(uO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.AutoModelForTokenClassification"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(bO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(CO,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AO,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(LO,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xO,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($O,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SO,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PO,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BO,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IO,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(NO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jO,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(DO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(OO,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(VO,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(XO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(zO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(WO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(QO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(HO,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(JO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(YO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(KO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.AutoModelForQuestionAnswering"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(eV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uV,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(NV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(GV,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.AutoModelForTableQuestionAnswering"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(OV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.AutoModelForImageClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(WV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification"),c(JV,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(YV,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification"),c(KV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(ZV,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification"),c(eX,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(oX,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(rX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(tX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(aX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nX,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(sX,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(lX,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(iX,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(dX,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification"),c(cX,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification"),c(fX,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iv,"id","transformers.AutoModelForVision2Seq"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(mX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForAudioClassification"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForAudioFrameClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(SX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(RX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(PX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(BX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForCTC"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(IX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(DX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC"),c(GX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC"),c(OX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC"),c(VX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(XX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(zX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(WX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(QX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(HX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(KX,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForAudioXVector"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(tz,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(az,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(nz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(sz,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForMaskedImageModeling"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(lz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(fz,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(mz,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForObjectDetection"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(gz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection"),c(uz,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForImageSegmentation"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(bz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForSemanticSegmentation"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Az,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(yz,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Lz,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForInstanceSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(xz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.TFAutoModel"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel"),c(qz,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel"),c(Nz,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel"),c(jz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Dz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Gz,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel"),c(Oz,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel"),c(Vz,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel"),c(Xz,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel"),c(zz,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Wz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Qz,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel"),c(Hz,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Uz,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Jz,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Yz,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel"),c(Kz,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Zz,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel"),c(eW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(oW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model"),c(rW,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel"),c(tW,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel"),c(aW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(nW,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel"),c(sW,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel"),c(lW,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel"),c(iW,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel"),c(dW,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel"),c(cW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(fW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel"),c(mW,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model"),c(gW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(hW,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel"),c(pW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel"),c(_W,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel"),c(uW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel"),c(bW,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(vW,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel"),c(FW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model"),c(TW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel"),c(MW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(EW,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel"),c(CW,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(wW,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(AW,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel"),c(yW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(LW,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModelForPreTraining"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(xW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(RW,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PW,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining"),c(BW,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IW,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qW,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(jW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(GW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(VW,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(XW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(zW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(WW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(HW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(UW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(JW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YW,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(KW,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.TFAutoModelForCausalLM"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(sQ,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iQ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(dQ,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(fQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(mQ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(gQ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModelForImageClassification"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(FQ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(TQ,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(MQ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.TFAutoModelForMaskedLM"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(WQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZQ,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel"),c(oH,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tH,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSequenceClassification"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(nH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($H,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForMultipleChoice"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(PH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(eU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForTokenClassification"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(dU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(pU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(_U,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(FU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MU,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(LU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($U,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForQuestionAnswering"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForVision2Seq"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModel"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel"),c(hJ,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel"),c(pJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel"),c(_J,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vJ,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel"),c(FJ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel"),c(MJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wJ,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel"),c(AJ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yJ,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model"),c(LJ,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($J,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kJ,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model"),c(SJ,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RJ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel"),c(PJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(BJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(IJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForCausalLM"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(GJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(OJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(VJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(XJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(WJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(QJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForPreTraining"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(sY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForMaskedLM"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(cY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(uY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($Y,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(kY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForTokenClassification"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(lK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(_K,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(uK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(bK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(xK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForImageClassification"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(RK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(qK,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(NK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,c6),e(rt,_f),b(f,je,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,f6),e(We,Ln),e(We,xn),e(xn,m6),e(We,pi),e(We,$n),e($n,g6),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,S$),e(Ae,ui),e(ui,R$),e(Ae,P$),b(f,Eo,u),b(f,wa,u),e(wa,B$),e(wa,bf),e(bf,I$),e(wa,fGe),b(f,eqe,u),b(f,bi,u),e(bi,vf),e(vf,Pee),M(h6,Pee,null),e(bi,mGe),e(bi,Bee),e(Bee,gGe),b(f,oqe,u),b(f,kn,u),e(kn,hGe),e(kn,Iee),e(Iee,pGe),e(kn,_Ge),e(kn,qee),e(qee,uGe),e(kn,bGe),b(f,rqe,u),M(p6,f,u),b(f,tqe,u),b(f,q$,u),e(q$,vGe),b(f,aqe,u),M(Ff,f,u),b(f,nqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Nee),M(_6,Nee,null),e(vi,FGe),e(vi,jee),e(jee,TGe),b(f,sqe,u),b(f,Co,u),M(u6,Co,null),e(Co,MGe),e(Co,b6),e(b6,EGe),e(b6,N$),e(N$,CGe),e(b6,wGe),e(Co,AGe),e(Co,v6),e(v6,yGe),e(v6,Dee),e(Dee,LGe),e(v6,xGe),e(Co,$Ge),e(Co,Er),M(F6,Er,null),e(Er,kGe),e(Er,Gee),e(Gee,SGe),e(Er,RGe),e(Er,Fi),e(Fi,PGe),e(Fi,Oee),e(Oee,BGe),e(Fi,IGe),e(Fi,Vee),e(Vee,qGe),e(Fi,NGe),e(Er,jGe),e(Er,A),e(A,Mf),e(Mf,Xee),e(Xee,DGe),e(Mf,GGe),e(Mf,j$),e(j$,OGe),e(Mf,VGe),e(A,XGe),e(A,Ef),e(Ef,zee),e(zee,zGe),e(Ef,WGe),e(Ef,D$),e(D$,QGe),e(Ef,HGe),e(A,UGe),e(A,Cf),e(Cf,Wee),e(Wee,JGe),e(Cf,YGe),e(Cf,G$),e(G$,KGe),e(Cf,ZGe),e(A,eOe),e(A,wf),e(wf,Qee),e(Qee,oOe),e(wf,rOe),e(wf,O$),e(O$,tOe),e(wf,aOe),e(A,nOe),e(A,Af),e(Af,Hee),e(Hee,sOe),e(Af,lOe),e(Af,V$),e(V$,iOe),e(Af,dOe),e(A,cOe),e(A,yf),e(yf,Uee),e(Uee,fOe),e(yf,mOe),e(yf,X$),e(X$,gOe),e(yf,hOe),e(A,pOe),e(A,Lf),e(Lf,Jee),e(Jee,_Oe),e(Lf,uOe),e(Lf,z$),e(z$,bOe),e(Lf,vOe),e(A,FOe),e(A,xf),e(xf,Yee),e(Yee,TOe),e(xf,MOe),e(xf,W$),e(W$,EOe),e(xf,COe),e(A,wOe),e(A,$f),e($f,Kee),e(Kee,AOe),e($f,yOe),e($f,Q$),e(Q$,LOe),e($f,xOe),e(A,$Oe),e(A,kf),e(kf,Zee),e(Zee,kOe),e(kf,SOe),e(kf,H$),e(H$,ROe),e(kf,POe),e(A,BOe),e(A,Sf),e(Sf,eoe),e(eoe,IOe),e(Sf,qOe),e(Sf,U$),e(U$,NOe),e(Sf,jOe),e(A,DOe),e(A,Rf),e(Rf,ooe),e(ooe,GOe),e(Rf,OOe),e(Rf,J$),e(J$,VOe),e(Rf,XOe),e(A,zOe),e(A,Pf),e(Pf,roe),e(roe,WOe),e(Pf,QOe),e(Pf,Y$),e(Y$,HOe),e(Pf,UOe),e(A,JOe),e(A,Bf),e(Bf,toe),e(toe,YOe),e(Bf,KOe),e(Bf,K$),e(K$,ZOe),e(Bf,eVe),e(A,oVe),e(A,If),e(If,aoe),e(aoe,rVe),e(If,tVe),e(If,Z$),e(Z$,aVe),e(If,nVe),e(A,sVe),e(A,qf),e(qf,noe),e(noe,lVe),e(qf,iVe),e(qf,ek),e(ek,dVe),e(qf,cVe),e(A,fVe),e(A,Nf),e(Nf,soe),e(soe,mVe),e(Nf,gVe),e(Nf,ok),e(ok,hVe),e(Nf,pVe),e(A,_Ve),e(A,jf),e(jf,loe),e(loe,uVe),e(jf,bVe),e(jf,rk),e(rk,vVe),e(jf,FVe),e(A,TVe),e(A,Df),e(Df,ioe),e(ioe,MVe),e(Df,EVe),e(Df,tk),e(tk,CVe),e(Df,wVe),e(A,AVe),e(A,Gf),e(Gf,doe),e(doe,yVe),e(Gf,LVe),e(Gf,ak),e(ak,xVe),e(Gf,$Ve),e(A,kVe),e(A,Of),e(Of,coe),e(coe,SVe),e(Of,RVe),e(Of,nk),e(nk,PVe),e(Of,BVe),e(A,IVe),e(A,Vf),e(Vf,foe),e(foe,qVe),e(Vf,NVe),e(Vf,sk),e(sk,jVe),e(Vf,DVe),e(A,GVe),e(A,Xf),e(Xf,moe),e(moe,OVe),e(Xf,VVe),e(Xf,lk),e(lk,XVe),e(Xf,zVe),e(A,WVe),e(A,zf),e(zf,goe),e(goe,QVe),e(zf,HVe),e(zf,ik),e(ik,UVe),e(zf,JVe),e(A,YVe),e(A,Wf),e(Wf,hoe),e(hoe,KVe),e(Wf,ZVe),e(Wf,dk),e(dk,eXe),e(Wf,oXe),e(A,rXe),e(A,Qf),e(Qf,poe),e(poe,tXe),e(Qf,aXe),e(Qf,ck),e(ck,nXe),e(Qf,sXe),e(A,lXe),e(A,Hf),e(Hf,_oe),e(_oe,iXe),e(Hf,dXe),e(Hf,fk),e(fk,cXe),e(Hf,fXe),e(A,mXe),e(A,Uf),e(Uf,uoe),e(uoe,gXe),e(Uf,hXe),e(Uf,mk),e(mk,pXe),e(Uf,_Xe),e(A,uXe),e(A,Jf),e(Jf,boe),e(boe,bXe),e(Jf,vXe),e(Jf,gk),e(gk,FXe),e(Jf,TXe),e(A,MXe),e(A,Yf),e(Yf,voe),e(voe,EXe),e(Yf,CXe),e(Yf,hk),e(hk,wXe),e(Yf,AXe),e(A,yXe),e(A,Kf),e(Kf,Foe),e(Foe,LXe),e(Kf,xXe),e(Kf,pk),e(pk,$Xe),e(Kf,kXe),e(A,SXe),e(A,Zf),e(Zf,Toe),e(Toe,RXe),e(Zf,PXe),e(Zf,_k),e(_k,BXe),e(Zf,IXe),e(A,qXe),e(A,em),e(em,Moe),e(Moe,NXe),e(em,jXe),e(em,uk),e(uk,DXe),e(em,GXe),e(A,OXe),e(A,om),e(om,Eoe),e(Eoe,VXe),e(om,XXe),e(om,bk),e(bk,zXe),e(om,WXe),e(A,QXe),e(A,rm),e(rm,Coe),e(Coe,HXe),e(rm,UXe),e(rm,vk),e(vk,JXe),e(rm,YXe),e(A,KXe),e(A,tm),e(tm,woe),e(woe,ZXe),e(tm,eze),e(tm,Fk),e(Fk,oze),e(tm,rze),e(A,tze),e(A,am),e(am,Aoe),e(Aoe,aze),e(am,nze),e(am,Tk),e(Tk,sze),e(am,lze),e(A,ize),e(A,nm),e(nm,yoe),e(yoe,dze),e(nm,cze),e(nm,Mk),e(Mk,fze),e(nm,mze),e(A,gze),e(A,sm),e(sm,Loe),e(Loe,hze),e(sm,pze),e(sm,Ek),e(Ek,_ze),e(sm,uze),e(A,bze),e(A,lm),e(lm,xoe),e(xoe,vze),e(lm,Fze),e(lm,Ck),e(Ck,Tze),e(lm,Mze),e(A,Eze),e(A,im),e(im,$oe),e($oe,Cze),e(im,wze),e(im,wk),e(wk,Aze),e(im,yze),e(A,Lze),e(A,dm),e(dm,koe),e(koe,xze),e(dm,$ze),e(dm,Ak),e(Ak,kze),e(dm,Sze),e(A,Rze),e(A,cm),e(cm,Soe),e(Soe,Pze),e(cm,Bze),e(cm,yk),e(yk,Ize),e(cm,qze),e(A,Nze),e(A,fm),e(fm,Roe),e(Roe,jze),e(fm,Dze),e(fm,Lk),e(Lk,Gze),e(fm,Oze),e(A,Vze),e(A,mm),e(mm,Poe),e(Poe,Xze),e(mm,zze),e(mm,xk),e(xk,Wze),e(mm,Qze),e(A,Hze),e(A,gm),e(gm,Boe),e(Boe,Uze),e(gm,Jze),e(gm,$k),e($k,Yze),e(gm,Kze),e(A,Zze),e(A,hm),e(hm,Ioe),e(Ioe,eWe),e(hm,oWe),e(hm,kk),e(kk,rWe),e(hm,tWe),e(A,aWe),e(A,pm),e(pm,qoe),e(qoe,nWe),e(pm,sWe),e(pm,Sk),e(Sk,lWe),e(pm,iWe),e(A,dWe),e(A,_m),e(_m,Noe),e(Noe,cWe),e(_m,fWe),e(_m,Rk),e(Rk,mWe),e(_m,gWe),e(A,hWe),e(A,um),e(um,joe),e(joe,pWe),e(um,_We),e(um,Pk),e(Pk,uWe),e(um,bWe),e(A,vWe),e(A,bm),e(bm,Doe),e(Doe,FWe),e(bm,TWe),e(bm,Bk),e(Bk,MWe),e(bm,EWe),e(A,CWe),e(A,vm),e(vm,Goe),e(Goe,wWe),e(vm,AWe),e(vm,Ik),e(Ik,yWe),e(vm,LWe),e(A,xWe),e(A,Fm),e(Fm,Ooe),e(Ooe,$We),e(Fm,kWe),e(Fm,qk),e(qk,SWe),e(Fm,RWe),e(A,PWe),e(A,Tm),e(Tm,Voe),e(Voe,BWe),e(Tm,IWe),e(Tm,Nk),e(Nk,qWe),e(Tm,NWe),e(A,jWe),e(A,Mm),e(Mm,Xoe),e(Xoe,DWe),e(Mm,GWe),e(Mm,jk),e(jk,OWe),e(Mm,VWe),e(A,XWe),e(A,Em),e(Em,zoe),e(zoe,zWe),e(Em,WWe),e(Em,Dk),e(Dk,QWe),e(Em,HWe),e(A,UWe),e(A,Cm),e(Cm,Woe),e(Woe,JWe),e(Cm,YWe),e(Cm,Gk),e(Gk,KWe),e(Cm,ZWe),e(A,eQe),e(A,wm),e(wm,Qoe),e(Qoe,oQe),e(wm,rQe),e(wm,Ok),e(Ok,tQe),e(wm,aQe),e(A,nQe),e(A,Am),e(Am,Hoe),e(Hoe,sQe),e(Am,lQe),e(Am,Vk),e(Vk,iQe),e(Am,dQe),e(A,cQe),e(A,ym),e(ym,Uoe),e(Uoe,fQe),e(ym,mQe),e(ym,Xk),e(Xk,gQe),e(ym,hQe),e(A,pQe),e(A,Lm),e(Lm,Joe),e(Joe,_Qe),e(Lm,uQe),e(Lm,zk),e(zk,bQe),e(Lm,vQe),e(A,FQe),e(A,xm),e(xm,Yoe),e(Yoe,TQe),e(xm,MQe),e(xm,Wk),e(Wk,EQe),e(xm,CQe),e(A,wQe),e(A,$m),e($m,Koe),e(Koe,AQe),e($m,yQe),e($m,Qk),e(Qk,LQe),e($m,xQe),e(A,$Qe),e(A,km),e(km,Zoe),e(Zoe,kQe),e(km,SQe),e(km,Hk),e(Hk,RQe),e(km,PQe),e(A,BQe),e(A,Sm),e(Sm,ere),e(ere,IQe),e(Sm,qQe),e(Sm,Uk),e(Uk,NQe),e(Sm,jQe),e(A,DQe),e(A,Rm),e(Rm,ore),e(ore,GQe),e(Rm,OQe),e(Rm,Jk),e(Jk,VQe),e(Rm,XQe),e(A,zQe),e(A,Pm),e(Pm,rre),e(rre,WQe),e(Pm,QQe),e(Pm,Yk),e(Yk,HQe),e(Pm,UQe),e(A,JQe),e(A,Bm),e(Bm,tre),e(tre,YQe),e(Bm,KQe),e(Bm,Kk),e(Kk,ZQe),e(Bm,eHe),e(A,oHe),e(A,Im),e(Im,are),e(are,rHe),e(Im,tHe),e(Im,Zk),e(Zk,aHe),e(Im,nHe),e(A,sHe),e(A,qm),e(qm,nre),e(nre,lHe),e(qm,iHe),e(qm,eS),e(eS,dHe),e(qm,cHe),e(A,fHe),e(A,Nm),e(Nm,sre),e(sre,mHe),e(Nm,gHe),e(Nm,oS),e(oS,hHe),e(Nm,pHe),e(A,_He),e(A,jm),e(jm,lre),e(lre,uHe),e(jm,bHe),e(jm,rS),e(rS,vHe),e(jm,FHe),e(A,THe),e(A,Dm),e(Dm,ire),e(ire,MHe),e(Dm,EHe),e(Dm,tS),e(tS,CHe),e(Dm,wHe),e(A,AHe),e(A,Gm),e(Gm,dre),e(dre,yHe),e(Gm,LHe),e(Gm,aS),e(aS,xHe),e(Gm,$He),e(A,kHe),e(A,Om),e(Om,cre),e(cre,SHe),e(Om,RHe),e(Om,nS),e(nS,PHe),e(Om,BHe),e(A,IHe),e(A,Vm),e(Vm,fre),e(fre,qHe),e(Vm,NHe),e(Vm,sS),e(sS,jHe),e(Vm,DHe),e(A,GHe),e(A,Xm),e(Xm,mre),e(mre,OHe),e(Xm,VHe),e(Xm,lS),e(lS,XHe),e(Xm,zHe),e(A,WHe),e(A,zm),e(zm,gre),e(gre,QHe),e(zm,HHe),e(zm,iS),e(iS,UHe),e(zm,JHe),e(A,YHe),e(A,Wm),e(Wm,hre),e(hre,KHe),e(Wm,ZHe),e(Wm,dS),e(dS,eUe),e(Wm,oUe),e(A,rUe),e(A,Qm),e(Qm,pre),e(pre,tUe),e(Qm,aUe),e(Qm,cS),e(cS,nUe),e(Qm,sUe),e(A,lUe),e(A,Hm),e(Hm,_re),e(_re,iUe),e(Hm,dUe),e(Hm,fS),e(fS,cUe),e(Hm,fUe),e(A,mUe),e(A,Um),e(Um,ure),e(ure,gUe),e(Um,hUe),e(Um,mS),e(mS,pUe),e(Um,_Ue),e(A,uUe),e(A,Jm),e(Jm,bre),e(bre,bUe),e(Jm,vUe),e(Jm,gS),e(gS,FUe),e(Jm,TUe),e(A,MUe),e(A,Ym),e(Ym,vre),e(vre,EUe),e(Ym,CUe),e(Ym,hS),e(hS,wUe),e(Ym,AUe),e(A,yUe),e(A,Km),e(Km,Fre),e(Fre,LUe),e(Km,xUe),e(Km,pS),e(pS,$Ue),e(Km,kUe),e(A,SUe),e(A,Zm),e(Zm,Tre),e(Tre,RUe),e(Zm,PUe),e(Zm,_S),e(_S,BUe),e(Zm,IUe),e(A,qUe),e(A,eg),e(eg,Mre),e(Mre,NUe),e(eg,jUe),e(eg,uS),e(uS,DUe),e(eg,GUe),e(A,OUe),e(A,og),e(og,Ere),e(Ere,VUe),e(og,XUe),e(og,bS),e(bS,zUe),e(og,WUe),e(A,QUe),e(A,rg),e(rg,Cre),e(Cre,HUe),e(rg,UUe),e(rg,vS),e(vS,JUe),e(rg,YUe),e(A,KUe),e(A,tg),e(tg,wre),e(wre,ZUe),e(tg,eJe),e(tg,FS),e(FS,oJe),e(tg,rJe),e(A,tJe),e(A,ag),e(ag,Are),e(Are,aJe),e(ag,nJe),e(ag,TS),e(TS,sJe),e(ag,lJe),e(A,iJe),e(A,ng),e(ng,yre),e(yre,dJe),e(ng,cJe),e(ng,MS),e(MS,fJe),e(ng,mJe),e(A,gJe),e(A,sg),e(sg,Lre),e(Lre,hJe),e(sg,pJe),e(sg,ES),e(ES,_Je),e(sg,uJe),e(A,bJe),e(A,lg),e(lg,xre),e(xre,vJe),e(lg,FJe),e(lg,CS),e(CS,TJe),e(lg,MJe),e(A,EJe),e(A,ig),e(ig,$re),e($re,CJe),e(ig,wJe),e(ig,wS),e(wS,AJe),e(ig,yJe),e(A,LJe),e(A,dg),e(dg,kre),e(kre,xJe),e(dg,$Je),e(dg,AS),e(AS,kJe),e(dg,SJe),e(A,RJe),e(A,cg),e(cg,Sre),e(Sre,PJe),e(cg,BJe),e(cg,yS),e(yS,IJe),e(cg,qJe),e(A,NJe),e(A,fg),e(fg,Rre),e(Rre,jJe),e(fg,DJe),e(fg,LS),e(LS,GJe),e(fg,OJe),e(A,VJe),e(A,mg),e(mg,Pre),e(Pre,XJe),e(mg,zJe),e(mg,xS),e(xS,WJe),e(mg,QJe),e(A,HJe),e(A,gg),e(gg,Bre),e(Bre,UJe),e(gg,JJe),e(gg,$S),e($S,YJe),e(gg,KJe),e(A,ZJe),e(A,hg),e(hg,Ire),e(Ire,eYe),e(hg,oYe),e(hg,kS),e(kS,rYe),e(hg,tYe),e(A,aYe),e(A,pg),e(pg,qre),e(qre,nYe),e(pg,sYe),e(pg,SS),e(SS,lYe),e(pg,iYe),e(A,dYe),e(A,_g),e(_g,Nre),e(Nre,cYe),e(_g,fYe),e(_g,RS),e(RS,mYe),e(_g,gYe),e(A,hYe),e(A,ug),e(ug,jre),e(jre,pYe),e(ug,_Ye),e(ug,PS),e(PS,uYe),e(ug,bYe),e(A,vYe),e(A,bg),e(bg,Dre),e(Dre,FYe),e(bg,TYe),e(bg,BS),e(BS,MYe),e(bg,EYe),e(A,CYe),e(A,vg),e(vg,Gre),e(Gre,wYe),e(vg,AYe),e(vg,IS),e(IS,yYe),e(vg,LYe),e(A,xYe),e(A,Fg),e(Fg,Ore),e(Ore,$Ye),e(Fg,kYe),e(Fg,qS),e(qS,SYe),e(Fg,RYe),e(Er,PYe),M(Tg,Er,null),e(Co,BYe),e(Co,Mg),M(T6,Mg,null),e(Mg,IYe),e(Mg,Vre),e(Vre,qYe),b(f,lqe,u),b(f,Ti,u),e(Ti,Eg),e(Eg,Xre),M(M6,Xre,null),e(Ti,NYe),e(Ti,zre),e(zre,jYe),b(f,iqe,u),b(f,wo,u),M(E6,wo,null),e(wo,DYe),e(wo,C6),e(C6,GYe),e(C6,NS),e(NS,OYe),e(C6,VYe),e(wo,XYe),e(wo,w6),e(w6,zYe),e(w6,Wre),e(Wre,WYe),e(w6,QYe),e(wo,HYe),e(wo,Cr),M(A6,Cr,null),e(Cr,UYe),e(Cr,Qre),e(Qre,JYe),e(Cr,YYe),e(Cr,Aa),e(Aa,KYe),e(Aa,Hre),e(Hre,ZYe),e(Aa,eKe),e(Aa,Ure),e(Ure,oKe),e(Aa,rKe),e(Aa,Jre),e(Jre,tKe),e(Aa,aKe),e(Cr,nKe),e(Cr,k),e(k,Sn),e(Sn,Yre),e(Yre,sKe),e(Sn,lKe),e(Sn,jS),e(jS,iKe),e(Sn,dKe),e(Sn,DS),e(DS,cKe),e(Sn,fKe),e(k,mKe),e(k,Rn),e(Rn,Kre),e(Kre,gKe),e(Rn,hKe),e(Rn,GS),e(GS,pKe),e(Rn,_Ke),e(Rn,OS),e(OS,uKe),e(Rn,bKe),e(k,vKe),e(k,Pn),e(Pn,Zre),e(Zre,FKe),e(Pn,TKe),e(Pn,VS),e(VS,MKe),e(Pn,EKe),e(Pn,XS),e(XS,CKe),e(Pn,wKe),e(k,AKe),e(k,Bn),e(Bn,ete),e(ete,yKe),e(Bn,LKe),e(Bn,zS),e(zS,xKe),e(Bn,$Ke),e(Bn,WS),e(WS,kKe),e(Bn,SKe),e(k,RKe),e(k,In),e(In,ote),e(ote,PKe),e(In,BKe),e(In,QS),e(QS,IKe),e(In,qKe),e(In,HS),e(HS,NKe),e(In,jKe),e(k,DKe),e(k,Cg),e(Cg,rte),e(rte,GKe),e(Cg,OKe),e(Cg,US),e(US,VKe),e(Cg,XKe),e(k,zKe),e(k,wg),e(wg,tte),e(tte,WKe),e(wg,QKe),e(wg,JS),e(JS,HKe),e(wg,UKe),e(k,JKe),e(k,Ag),e(Ag,ate),e(ate,YKe),e(Ag,KKe),e(Ag,YS),e(YS,ZKe),e(Ag,eZe),e(k,oZe),e(k,qn),e(qn,nte),e(nte,rZe),e(qn,tZe),e(qn,KS),e(KS,aZe),e(qn,nZe),e(qn,ZS),e(ZS,sZe),e(qn,lZe),e(k,iZe),e(k,Nn),e(Nn,ste),e(ste,dZe),e(Nn,cZe),e(Nn,eR),e(eR,fZe),e(Nn,mZe),e(Nn,oR),e(oR,gZe),e(Nn,hZe),e(k,pZe),e(k,jn),e(jn,lte),e(lte,_Ze),e(jn,uZe),e(jn,rR),e(rR,bZe),e(jn,vZe),e(jn,tR),e(tR,FZe),e(jn,TZe),e(k,MZe),e(k,yg),e(yg,ite),e(ite,EZe),e(yg,CZe),e(yg,aR),e(aR,wZe),e(yg,AZe),e(k,yZe),e(k,Lg),e(Lg,dte),e(dte,LZe),e(Lg,xZe),e(Lg,nR),e(nR,$Ze),e(Lg,kZe),e(k,SZe),e(k,Dn),e(Dn,cte),e(cte,RZe),e(Dn,PZe),e(Dn,sR),e(sR,BZe),e(Dn,IZe),e(Dn,lR),e(lR,qZe),e(Dn,NZe),e(k,jZe),e(k,xg),e(xg,fte),e(fte,DZe),e(xg,GZe),e(xg,iR),e(iR,OZe),e(xg,VZe),e(k,XZe),e(k,Gn),e(Gn,mte),e(mte,zZe),e(Gn,WZe),e(Gn,dR),e(dR,QZe),e(Gn,HZe),e(Gn,cR),e(cR,UZe),e(Gn,JZe),e(k,YZe),e(k,On),e(On,gte),e(gte,KZe),e(On,ZZe),e(On,fR),e(fR,eeo),e(On,oeo),e(On,mR),e(mR,reo),e(On,teo),e(k,aeo),e(k,Vn),e(Vn,hte),e(hte,neo),e(Vn,seo),e(Vn,gR),e(gR,leo),e(Vn,ieo),e(Vn,hR),e(hR,deo),e(Vn,ceo),e(k,feo),e(k,$g),e($g,pte),e(pte,meo),e($g,geo),e($g,pR),e(pR,heo),e($g,peo),e(k,_eo),e(k,Xn),e(Xn,_te),e(_te,ueo),e(Xn,beo),e(Xn,_R),e(_R,veo),e(Xn,Feo),e(Xn,uR),e(uR,Teo),e(Xn,Meo),e(k,Eeo),e(k,zn),e(zn,ute),e(ute,Ceo),e(zn,weo),e(zn,bR),e(bR,Aeo),e(zn,yeo),e(zn,vR),e(vR,Leo),e(zn,xeo),e(k,$eo),e(k,Wn),e(Wn,bte),e(bte,keo),e(Wn,Seo),e(Wn,FR),e(FR,Reo),e(Wn,Peo),e(Wn,TR),e(TR,Beo),e(Wn,Ieo),e(k,qeo),e(k,Qn),e(Qn,vte),e(vte,Neo),e(Qn,jeo),e(Qn,MR),e(MR,Deo),e(Qn,Geo),e(Qn,ER),e(ER,Oeo),e(Qn,Veo),e(k,Xeo),e(k,Hn),e(Hn,Fte),e(Fte,zeo),e(Hn,Weo),e(Hn,CR),e(CR,Qeo),e(Hn,Heo),e(Hn,wR),e(wR,Ueo),e(Hn,Jeo),e(k,Yeo),e(k,Un),e(Un,Tte),e(Tte,Keo),e(Un,Zeo),e(Un,AR),e(AR,eoo),e(Un,ooo),e(Un,yR),e(yR,roo),e(Un,too),e(k,aoo),e(k,kg),e(kg,Mte),e(Mte,noo),e(kg,soo),e(kg,LR),e(LR,loo),e(kg,ioo),e(k,doo),e(k,Jn),e(Jn,Ete),e(Ete,coo),e(Jn,foo),e(Jn,xR),e(xR,moo),e(Jn,goo),e(Jn,$R),e($R,hoo),e(Jn,poo),e(k,_oo),e(k,Sg),e(Sg,Cte),e(Cte,uoo),e(Sg,boo),e(Sg,kR),e(kR,voo),e(Sg,Foo),e(k,Too),e(k,Yn),e(Yn,wte),e(wte,Moo),e(Yn,Eoo),e(Yn,SR),e(SR,Coo),e(Yn,woo),e(Yn,RR),e(RR,Aoo),e(Yn,yoo),e(k,Loo),e(k,Kn),e(Kn,Ate),e(Ate,xoo),e(Kn,$oo),e(Kn,PR),e(PR,koo),e(Kn,Soo),e(Kn,BR),e(BR,Roo),e(Kn,Poo),e(k,Boo),e(k,Zn),e(Zn,yte),e(yte,Ioo),e(Zn,qoo),e(Zn,IR),e(IR,Noo),e(Zn,joo),e(Zn,qR),e(qR,Doo),e(Zn,Goo),e(k,Ooo),e(k,es),e(es,Lte),e(Lte,Voo),e(es,Xoo),e(es,NR),e(NR,zoo),e(es,Woo),e(es,jR),e(jR,Qoo),e(es,Hoo),e(k,Uoo),e(k,os),e(os,xte),e(xte,Joo),e(os,Yoo),e(os,DR),e(DR,Koo),e(os,Zoo),e(os,GR),e(GR,ero),e(os,oro),e(k,rro),e(k,Rg),e(Rg,$te),e($te,tro),e(Rg,aro),e(Rg,OR),e(OR,nro),e(Rg,sro),e(k,lro),e(k,rs),e(rs,kte),e(kte,iro),e(rs,dro),e(rs,VR),e(VR,cro),e(rs,fro),e(rs,XR),e(XR,mro),e(rs,gro),e(k,hro),e(k,ts),e(ts,Ste),e(Ste,pro),e(ts,_ro),e(ts,zR),e(zR,uro),e(ts,bro),e(ts,WR),e(WR,vro),e(ts,Fro),e(k,Tro),e(k,as),e(as,Rte),e(Rte,Mro),e(as,Ero),e(as,QR),e(QR,Cro),e(as,wro),e(as,HR),e(HR,Aro),e(as,yro),e(k,Lro),e(k,ns),e(ns,Pte),e(Pte,xro),e(ns,$ro),e(ns,UR),e(UR,kro),e(ns,Sro),e(ns,JR),e(JR,Rro),e(ns,Pro),e(k,Bro),e(k,ss),e(ss,Bte),e(Bte,Iro),e(ss,qro),e(ss,YR),e(YR,Nro),e(ss,jro),e(ss,KR),e(KR,Dro),e(ss,Gro),e(k,Oro),e(k,ls),e(ls,Ite),e(Ite,Vro),e(ls,Xro),e(ls,ZR),e(ZR,zro),e(ls,Wro),e(ls,eP),e(eP,Qro),e(ls,Hro),e(k,Uro),e(k,Pg),e(Pg,qte),e(qte,Jro),e(Pg,Yro),e(Pg,oP),e(oP,Kro),e(Pg,Zro),e(k,eto),e(k,is),e(is,Nte),e(Nte,oto),e(is,rto),e(is,rP),e(rP,tto),e(is,ato),e(is,tP),e(tP,nto),e(is,sto),e(k,lto),e(k,Bg),e(Bg,jte),e(jte,ito),e(Bg,dto),e(Bg,aP),e(aP,cto),e(Bg,fto),e(k,mto),e(k,Ig),e(Ig,Dte),e(Dte,gto),e(Ig,hto),e(Ig,nP),e(nP,pto),e(Ig,_to),e(k,uto),e(k,ds),e(ds,Gte),e(Gte,bto),e(ds,vto),e(ds,sP),e(sP,Fto),e(ds,Tto),e(ds,lP),e(lP,Mto),e(ds,Eto),e(k,Cto),e(k,cs),e(cs,Ote),e(Ote,wto),e(cs,Ato),e(cs,iP),e(iP,yto),e(cs,Lto),e(cs,dP),e(dP,xto),e(cs,$to),e(k,kto),e(k,fs),e(fs,Vte),e(Vte,Sto),e(fs,Rto),e(fs,cP),e(cP,Pto),e(fs,Bto),e(fs,fP),e(fP,Ito),e(fs,qto),e(k,Nto),e(k,qg),e(qg,Xte),e(Xte,jto),e(qg,Dto),e(qg,mP),e(mP,Gto),e(qg,Oto),e(k,Vto),e(k,ms),e(ms,zte),e(zte,Xto),e(ms,zto),e(ms,gP),e(gP,Wto),e(ms,Qto),e(ms,hP),e(hP,Hto),e(ms,Uto),e(k,Jto),e(k,gs),e(gs,Wte),e(Wte,Yto),e(gs,Kto),e(gs,pP),e(pP,Zto),e(gs,eao),e(gs,_P),e(_P,oao),e(gs,rao),e(k,tao),e(k,hs),e(hs,Qte),e(Qte,aao),e(hs,nao),e(hs,uP),e(uP,sao),e(hs,lao),e(hs,bP),e(bP,iao),e(hs,dao),e(k,cao),e(k,ps),e(ps,Hte),e(Hte,fao),e(ps,mao),e(ps,vP),e(vP,gao),e(ps,hao),e(ps,FP),e(FP,pao),e(ps,_ao),e(k,uao),e(k,_s),e(_s,Ute),e(Ute,bao),e(_s,vao),e(_s,TP),e(TP,Fao),e(_s,Tao),e(_s,MP),e(MP,Mao),e(_s,Eao),e(k,Cao),e(k,Ng),e(Ng,Jte),e(Jte,wao),e(Ng,Aao),e(Ng,EP),e(EP,yao),e(Ng,Lao),e(k,xao),e(k,us),e(us,Yte),e(Yte,$ao),e(us,kao),e(us,CP),e(CP,Sao),e(us,Rao),e(us,wP),e(wP,Pao),e(us,Bao),e(k,Iao),e(k,jg),e(jg,Kte),e(Kte,qao),e(jg,Nao),e(jg,AP),e(AP,jao),e(jg,Dao),e(k,Gao),e(k,Dg),e(Dg,Zte),e(Zte,Oao),e(Dg,Vao),e(Dg,yP),e(yP,Xao),e(Dg,zao),e(k,Wao),e(k,Gg),e(Gg,eae),e(eae,Qao),e(Gg,Hao),e(Gg,LP),e(LP,Uao),e(Gg,Jao),e(k,Yao),e(k,Og),e(Og,oae),e(oae,Kao),e(Og,Zao),e(Og,xP),e(xP,eno),e(Og,ono),e(k,rno),e(k,bs),e(bs,rae),e(rae,tno),e(bs,ano),e(bs,$P),e($P,nno),e(bs,sno),e(bs,kP),e(kP,lno),e(bs,ino),e(k,dno),e(k,Vg),e(Vg,tae),e(tae,cno),e(Vg,fno),e(Vg,SP),e(SP,mno),e(Vg,gno),e(k,hno),e(k,vs),e(vs,aae),e(aae,pno),e(vs,_no),e(vs,RP),e(RP,uno),e(vs,bno),e(vs,PP),e(PP,vno),e(vs,Fno),e(k,Tno),e(k,Fs),e(Fs,nae),e(nae,Mno),e(Fs,Eno),e(Fs,BP),e(BP,Cno),e(Fs,wno),e(Fs,IP),e(IP,Ano),e(Fs,yno),e(k,Lno),e(k,Ts),e(Ts,sae),e(sae,xno),e(Ts,$no),e(Ts,qP),e(qP,kno),e(Ts,Sno),e(Ts,NP),e(NP,Rno),e(Ts,Pno),e(k,Bno),e(k,Ms),e(Ms,lae),e(lae,Ino),e(Ms,qno),e(Ms,jP),e(jP,Nno),e(Ms,jno),e(Ms,DP),e(DP,Dno),e(Ms,Gno),e(k,Ono),e(k,Es),e(Es,iae),e(iae,Vno),e(Es,Xno),e(Es,GP),e(GP,zno),e(Es,Wno),e(Es,OP),e(OP,Qno),e(Es,Hno),e(k,Uno),e(k,Cs),e(Cs,dae),e(dae,Jno),e(Cs,Yno),e(Cs,VP),e(VP,Kno),e(Cs,Zno),e(Cs,XP),e(XP,eso),e(Cs,oso),e(k,rso),e(k,Xg),e(Xg,cae),e(cae,tso),e(Xg,aso),e(Xg,zP),e(zP,nso),e(Xg,sso),e(k,lso),e(k,zg),e(zg,fae),e(fae,iso),e(zg,dso),e(zg,WP),e(WP,cso),e(zg,fso),e(k,mso),e(k,ws),e(ws,mae),e(mae,gso),e(ws,hso),e(ws,QP),e(QP,pso),e(ws,_so),e(ws,HP),e(HP,uso),e(ws,bso),e(k,vso),e(k,As),e(As,gae),e(gae,Fso),e(As,Tso),e(As,UP),e(UP,Mso),e(As,Eso),e(As,JP),e(JP,Cso),e(As,wso),e(k,Aso),e(k,ys),e(ys,hae),e(hae,yso),e(ys,Lso),e(ys,YP),e(YP,xso),e(ys,$so),e(ys,KP),e(KP,kso),e(ys,Sso),e(k,Rso),e(k,Wg),e(Wg,pae),e(pae,Pso),e(Wg,Bso),e(Wg,ZP),e(ZP,Iso),e(Wg,qso),e(k,Nso),e(k,Qg),e(Qg,_ae),e(_ae,jso),e(Qg,Dso),e(Qg,eB),e(eB,Gso),e(Qg,Oso),e(k,Vso),e(k,Hg),e(Hg,uae),e(uae,Xso),e(Hg,zso),e(Hg,oB),e(oB,Wso),e(Hg,Qso),e(k,Hso),e(k,Ls),e(Ls,bae),e(bae,Uso),e(Ls,Jso),e(Ls,rB),e(rB,Yso),e(Ls,Kso),e(Ls,tB),e(tB,Zso),e(Ls,elo),e(k,olo),e(k,Ug),e(Ug,vae),e(vae,rlo),e(Ug,tlo),e(Ug,aB),e(aB,alo),e(Ug,nlo),e(k,slo),e(k,Jg),e(Jg,Fae),e(Fae,llo),e(Jg,ilo),e(Jg,nB),e(nB,dlo),e(Jg,clo),e(k,flo),e(k,Yg),e(Yg,Tae),e(Tae,mlo),e(Yg,glo),e(Yg,sB),e(sB,hlo),e(Yg,plo),e(k,_lo),e(k,xs),e(xs,Mae),e(Mae,ulo),e(xs,blo),e(xs,lB),e(lB,vlo),e(xs,Flo),e(xs,iB),e(iB,Tlo),e(xs,Mlo),e(k,Elo),e(k,Kg),e(Kg,Eae),e(Eae,Clo),e(Kg,wlo),e(Kg,dB),e(dB,Alo),e(Kg,ylo),e(k,Llo),e(k,Zg),e(Zg,Cae),e(Cae,xlo),e(Zg,$lo),e(Zg,cB),e(cB,klo),e(Zg,Slo),e(k,Rlo),e(k,$s),e($s,wae),e(wae,Plo),e($s,Blo),e($s,fB),e(fB,Ilo),e($s,qlo),e($s,mB),e(mB,Nlo),e($s,jlo),e(k,Dlo),e(k,ks),e(ks,Aae),e(Aae,Glo),e(ks,Olo),e(ks,gB),e(gB,Vlo),e(ks,Xlo),e(ks,hB),e(hB,zlo),e(ks,Wlo),e(k,Qlo),e(k,Ss),e(Ss,yae),e(yae,Hlo),e(Ss,Ulo),e(Ss,pB),e(pB,Jlo),e(Ss,Ylo),e(Ss,_B),e(_B,Klo),e(Ss,Zlo),e(k,eio),e(k,Rs),e(Rs,Lae),e(Lae,oio),e(Rs,rio),e(Rs,uB),e(uB,tio),e(Rs,aio),e(Rs,bB),e(bB,nio),e(Rs,sio),e(Cr,lio),M(eh,Cr,null),e(wo,iio),e(wo,oh),M(y6,oh,null),e(oh,dio),e(oh,xae),e(xae,cio),b(f,dqe,u),b(f,Mi,u),e(Mi,rh),e(rh,$ae),M(L6,$ae,null),e(Mi,fio),e(Mi,kae),e(kae,mio),b(f,cqe,u),b(f,Ao,u),M(x6,Ao,null),e(Ao,gio),e(Ao,$6),e($6,hio),e($6,vB),e(vB,pio),e($6,_io),e(Ao,uio),e(Ao,k6),e(k6,bio),e(k6,Sae),e(Sae,vio),e(k6,Fio),e(Ao,Tio),e(Ao,He),M(S6,He,null),e(He,Mio),e(He,Rae),e(Rae,Eio),e(He,Cio),e(He,ya),e(ya,wio),e(ya,Pae),e(Pae,Aio),e(ya,yio),e(ya,Bae),e(Bae,Lio),e(ya,xio),e(ya,Iae),e(Iae,$io),e(ya,kio),e(He,Sio),e(He,Z),e(Z,th),e(th,qae),e(qae,Rio),e(th,Pio),e(th,FB),e(FB,Bio),e(th,Iio),e(Z,qio),e(Z,ah),e(ah,Nae),e(Nae,Nio),e(ah,jio),e(ah,TB),e(TB,Dio),e(ah,Gio),e(Z,Oio),e(Z,nh),e(nh,jae),e(jae,Vio),e(nh,Xio),e(nh,MB),e(MB,zio),e(nh,Wio),e(Z,Qio),e(Z,sh),e(sh,Dae),e(Dae,Hio),e(sh,Uio),e(sh,EB),e(EB,Jio),e(sh,Yio),e(Z,Kio),e(Z,lh),e(lh,Gae),e(Gae,Zio),e(lh,edo),e(lh,CB),e(CB,odo),e(lh,rdo),e(Z,tdo),e(Z,ih),e(ih,Oae),e(Oae,ado),e(ih,ndo),e(ih,wB),e(wB,sdo),e(ih,ldo),e(Z,ido),e(Z,dh),e(dh,Vae),e(Vae,ddo),e(dh,cdo),e(dh,AB),e(AB,fdo),e(dh,mdo),e(Z,gdo),e(Z,ch),e(ch,Xae),e(Xae,hdo),e(ch,pdo),e(ch,yB),e(yB,_do),e(ch,udo),e(Z,bdo),e(Z,fh),e(fh,zae),e(zae,vdo),e(fh,Fdo),e(fh,LB),e(LB,Tdo),e(fh,Mdo),e(Z,Edo),e(Z,mh),e(mh,Wae),e(Wae,Cdo),e(mh,wdo),e(mh,xB),e(xB,Ado),e(mh,ydo),e(Z,Ldo),e(Z,gh),e(gh,Qae),e(Qae,xdo),e(gh,$do),e(gh,$B),e($B,kdo),e(gh,Sdo),e(Z,Rdo),e(Z,hh),e(hh,Hae),e(Hae,Pdo),e(hh,Bdo),e(hh,kB),e(kB,Ido),e(hh,qdo),e(Z,Ndo),e(Z,ph),e(ph,Uae),e(Uae,jdo),e(ph,Ddo),e(ph,SB),e(SB,Gdo),e(ph,Odo),e(Z,Vdo),e(Z,_h),e(_h,Jae),e(Jae,Xdo),e(_h,zdo),e(_h,RB),e(RB,Wdo),e(_h,Qdo),e(Z,Hdo),e(Z,uh),e(uh,Yae),e(Yae,Udo),e(uh,Jdo),e(uh,PB),e(PB,Ydo),e(uh,Kdo),e(Z,Zdo),e(Z,bh),e(bh,Kae),e(Kae,eco),e(bh,oco),e(bh,BB),e(BB,rco),e(bh,tco),e(Z,aco),e(Z,vh),e(vh,Zae),e(Zae,nco),e(vh,sco),e(vh,IB),e(IB,lco),e(vh,ico),e(Z,dco),e(Z,Fh),e(Fh,ene),e(ene,cco),e(Fh,fco),e(Fh,qB),e(qB,mco),e(Fh,gco),e(Z,hco),e(Z,Th),e(Th,one),e(one,pco),e(Th,_co),e(Th,NB),e(NB,uco),e(Th,bco),e(Z,vco),e(Z,Mh),e(Mh,rne),e(rne,Fco),e(Mh,Tco),e(Mh,jB),e(jB,Mco),e(Mh,Eco),e(Z,Cco),e(Z,Eh),e(Eh,tne),e(tne,wco),e(Eh,Aco),e(Eh,DB),e(DB,yco),e(Eh,Lco),e(Z,xco),e(Z,Ch),e(Ch,ane),e(ane,$co),e(Ch,kco),e(Ch,GB),e(GB,Sco),e(Ch,Rco),e(Z,Pco),e(Z,wh),e(wh,nne),e(nne,Bco),e(wh,Ico),e(wh,OB),e(OB,qco),e(wh,Nco),e(Z,jco),e(Z,Ah),e(Ah,sne),e(sne,Dco),e(Ah,Gco),e(Ah,VB),e(VB,Oco),e(Ah,Vco),e(Z,Xco),e(Z,yh),e(yh,lne),e(lne,zco),e(yh,Wco),e(yh,XB),e(XB,Qco),e(yh,Hco),e(Z,Uco),e(Z,Lh),e(Lh,ine),e(ine,Jco),e(Lh,Yco),e(Lh,zB),e(zB,Kco),e(Lh,Zco),e(Z,efo),e(Z,xh),e(xh,dne),e(dne,ofo),e(xh,rfo),e(xh,WB),e(WB,tfo),e(xh,afo),e(He,nfo),M($h,He,null),e(He,sfo),M(kh,He,null),e(Ao,lfo),e(Ao,Sh),M(R6,Sh,null),e(Sh,ifo),e(Sh,cne),e(cne,dfo),b(f,fqe,u),b(f,Ei,u),e(Ei,Rh),e(Rh,fne),M(P6,fne,null),e(Ei,cfo),e(Ei,mne),e(mne,ffo),b(f,mqe,u),b(f,yo,u),M(B6,yo,null),e(yo,mfo),e(yo,I6),e(I6,gfo),e(I6,QB),e(QB,hfo),e(I6,pfo),e(yo,_fo),e(yo,q6),e(q6,ufo),e(q6,gne),e(gne,bfo),e(q6,vfo),e(yo,Ffo),e(yo,Ue),M(N6,Ue,null),e(Ue,Tfo),e(Ue,hne),e(hne,Mfo),e(Ue,Efo),e(Ue,Ci),e(Ci,Cfo),e(Ci,pne),e(pne,wfo),e(Ci,Afo),e(Ci,_ne),e(_ne,yfo),e(Ci,Lfo),e(Ue,xfo),e(Ue,pe),e(pe,Ph),e(Ph,une),e(une,$fo),e(Ph,kfo),e(Ph,HB),e(HB,Sfo),e(Ph,Rfo),e(pe,Pfo),e(pe,Bh),e(Bh,bne),e(bne,Bfo),e(Bh,Ifo),e(Bh,vne),e(vne,qfo),e(Bh,Nfo),e(pe,jfo),e(pe,Ih),e(Ih,Fne),e(Fne,Dfo),e(Ih,Gfo),e(Ih,UB),e(UB,Ofo),e(Ih,Vfo),e(pe,Xfo),e(pe,qh),e(qh,Tne),e(Tne,zfo),e(qh,Wfo),e(qh,JB),e(JB,Qfo),e(qh,Hfo),e(pe,Ufo),e(pe,Nh),e(Nh,Mne),e(Mne,Jfo),e(Nh,Yfo),e(Nh,YB),e(YB,Kfo),e(Nh,Zfo),e(pe,emo),e(pe,jh),e(jh,Ene),e(Ene,omo),e(jh,rmo),e(jh,KB),e(KB,tmo),e(jh,amo),e(pe,nmo),e(pe,Dh),e(Dh,Cne),e(Cne,smo),e(Dh,lmo),e(Dh,ZB),e(ZB,imo),e(Dh,dmo),e(pe,cmo),e(pe,Gh),e(Gh,wne),e(wne,fmo),e(Gh,mmo),e(Gh,eI),e(eI,gmo),e(Gh,hmo),e(pe,pmo),e(pe,Oh),e(Oh,Ane),e(Ane,_mo),e(Oh,umo),e(Oh,oI),e(oI,bmo),e(Oh,vmo),e(pe,Fmo),e(pe,Vh),e(Vh,yne),e(yne,Tmo),e(Vh,Mmo),e(Vh,rI),e(rI,Emo),e(Vh,Cmo),e(pe,wmo),e(pe,Xh),e(Xh,Lne),e(Lne,Amo),e(Xh,ymo),e(Xh,tI),e(tI,Lmo),e(Xh,xmo),e(pe,$mo),e(pe,zh),e(zh,xne),e(xne,kmo),e(zh,Smo),e(zh,aI),e(aI,Rmo),e(zh,Pmo),e(pe,Bmo),e(pe,Wh),e(Wh,$ne),e($ne,Imo),e(Wh,qmo),e(Wh,nI),e(nI,Nmo),e(Wh,jmo),e(pe,Dmo),e(pe,Qh),e(Qh,kne),e(kne,Gmo),e(Qh,Omo),e(Qh,sI),e(sI,Vmo),e(Qh,Xmo),e(pe,zmo),e(pe,Hh),e(Hh,Sne),e(Sne,Wmo),e(Hh,Qmo),e(Hh,lI),e(lI,Hmo),e(Hh,Umo),e(pe,Jmo),e(pe,Uh),e(Uh,Rne),e(Rne,Ymo),e(Uh,Kmo),e(Uh,iI),e(iI,Zmo),e(Uh,ego),e(Ue,ogo),M(Jh,Ue,null),e(Ue,rgo),M(Yh,Ue,null),e(yo,tgo),e(yo,Kh),M(j6,Kh,null),e(Kh,ago),e(Kh,Pne),e(Pne,ngo),b(f,gqe,u),b(f,wi,u),e(wi,Zh),e(Zh,Bne),M(D6,Bne,null),e(wi,sgo),e(wi,Ine),e(Ine,lgo),b(f,hqe,u),b(f,Lo,u),M(G6,Lo,null),e(Lo,igo),e(Lo,Ai),e(Ai,dgo),e(Ai,dI),e(dI,cgo),e(Ai,fgo),e(Ai,cI),e(cI,mgo),e(Ai,ggo),e(Lo,hgo),e(Lo,O6),e(O6,pgo),e(O6,qne),e(qne,_go),e(O6,ugo),e(Lo,bgo),e(Lo,tt),M(V6,tt,null),e(tt,vgo),e(tt,Nne),e(Nne,Fgo),e(tt,Tgo),e(tt,yi),e(yi,Mgo),e(yi,jne),e(jne,Ego),e(yi,Cgo),e(yi,fI),e(fI,wgo),e(yi,Ago),e(tt,ygo),M(ep,tt,null),e(Lo,Lgo),e(Lo,Je),M(X6,Je,null),e(Je,xgo),e(Je,Dne),e(Dne,$go),e(Je,kgo),e(Je,La),e(La,Sgo),e(La,Gne),e(Gne,Rgo),e(La,Pgo),e(La,One),e(One,Bgo),e(La,Igo),e(La,Vne),e(Vne,qgo),e(La,Ngo),e(Je,jgo),e(Je,x),e(x,op),e(op,Xne),e(Xne,Dgo),e(op,Ggo),e(op,mI),e(mI,Ogo),e(op,Vgo),e(x,Xgo),e(x,rp),e(rp,zne),e(zne,zgo),e(rp,Wgo),e(rp,gI),e(gI,Qgo),e(rp,Hgo),e(x,Ugo),e(x,tp),e(tp,Wne),e(Wne,Jgo),e(tp,Ygo),e(tp,hI),e(hI,Kgo),e(tp,Zgo),e(x,eho),e(x,ap),e(ap,Qne),e(Qne,oho),e(ap,rho),e(ap,pI),e(pI,tho),e(ap,aho),e(x,nho),e(x,np),e(np,Hne),e(Hne,sho),e(np,lho),e(np,_I),e(_I,iho),e(np,dho),e(x,cho),e(x,sp),e(sp,Une),e(Une,fho),e(sp,mho),e(sp,uI),e(uI,gho),e(sp,hho),e(x,pho),e(x,lp),e(lp,Jne),e(Jne,_ho),e(lp,uho),e(lp,bI),e(bI,bho),e(lp,vho),e(x,Fho),e(x,ip),e(ip,Yne),e(Yne,Tho),e(ip,Mho),e(ip,vI),e(vI,Eho),e(ip,Cho),e(x,who),e(x,dp),e(dp,Kne),e(Kne,Aho),e(dp,yho),e(dp,FI),e(FI,Lho),e(dp,xho),e(x,$ho),e(x,cp),e(cp,Zne),e(Zne,kho),e(cp,Sho),e(cp,TI),e(TI,Rho),e(cp,Pho),e(x,Bho),e(x,fp),e(fp,ese),e(ese,Iho),e(fp,qho),e(fp,MI),e(MI,Nho),e(fp,jho),e(x,Dho),e(x,mp),e(mp,ose),e(ose,Gho),e(mp,Oho),e(mp,EI),e(EI,Vho),e(mp,Xho),e(x,zho),e(x,gp),e(gp,rse),e(rse,Who),e(gp,Qho),e(gp,CI),e(CI,Hho),e(gp,Uho),e(x,Jho),e(x,hp),e(hp,tse),e(tse,Yho),e(hp,Kho),e(hp,wI),e(wI,Zho),e(hp,epo),e(x,opo),e(x,pp),e(pp,ase),e(ase,rpo),e(pp,tpo),e(pp,AI),e(AI,apo),e(pp,npo),e(x,spo),e(x,_p),e(_p,nse),e(nse,lpo),e(_p,ipo),e(_p,yI),e(yI,dpo),e(_p,cpo),e(x,fpo),e(x,up),e(up,sse),e(sse,mpo),e(up,gpo),e(up,LI),e(LI,hpo),e(up,ppo),e(x,_po),e(x,bp),e(bp,lse),e(lse,upo),e(bp,bpo),e(bp,xI),e(xI,vpo),e(bp,Fpo),e(x,Tpo),e(x,vp),e(vp,ise),e(ise,Mpo),e(vp,Epo),e(vp,$I),e($I,Cpo),e(vp,wpo),e(x,Apo),e(x,Fp),e(Fp,dse),e(dse,ypo),e(Fp,Lpo),e(Fp,kI),e(kI,xpo),e(Fp,$po),e(x,kpo),e(x,Tp),e(Tp,cse),e(cse,Spo),e(Tp,Rpo),e(Tp,SI),e(SI,Ppo),e(Tp,Bpo),e(x,Ipo),e(x,Mp),e(Mp,fse),e(fse,qpo),e(Mp,Npo),e(Mp,RI),e(RI,jpo),e(Mp,Dpo),e(x,Gpo),e(x,Ep),e(Ep,mse),e(mse,Opo),e(Ep,Vpo),e(Ep,PI),e(PI,Xpo),e(Ep,zpo),e(x,Wpo),e(x,Cp),e(Cp,gse),e(gse,Qpo),e(Cp,Hpo),e(Cp,BI),e(BI,Upo),e(Cp,Jpo),e(x,Ypo),e(x,wp),e(wp,hse),e(hse,Kpo),e(wp,Zpo),e(wp,II),e(II,e_o),e(wp,o_o),e(x,r_o),e(x,Ap),e(Ap,pse),e(pse,t_o),e(Ap,a_o),e(Ap,qI),e(qI,n_o),e(Ap,s_o),e(x,l_o),e(x,yp),e(yp,_se),e(_se,i_o),e(yp,d_o),e(yp,NI),e(NI,c_o),e(yp,f_o),e(x,m_o),e(x,Lp),e(Lp,use),e(use,g_o),e(Lp,h_o),e(Lp,jI),e(jI,p_o),e(Lp,__o),e(x,u_o),e(x,xp),e(xp,bse),e(bse,b_o),e(xp,v_o),e(xp,DI),e(DI,F_o),e(xp,T_o),e(x,M_o),e(x,$p),e($p,vse),e(vse,E_o),e($p,C_o),e($p,GI),e(GI,w_o),e($p,A_o),e(x,y_o),e(x,kp),e(kp,Fse),e(Fse,L_o),e(kp,x_o),e(kp,OI),e(OI,$_o),e(kp,k_o),e(x,S_o),e(x,Sp),e(Sp,Tse),e(Tse,R_o),e(Sp,P_o),e(Sp,VI),e(VI,B_o),e(Sp,I_o),e(x,q_o),e(x,Ps),e(Ps,Mse),e(Mse,N_o),e(Ps,j_o),e(Ps,XI),e(XI,D_o),e(Ps,G_o),e(Ps,zI),e(zI,O_o),e(Ps,V_o),e(x,X_o),e(x,Rp),e(Rp,Ese),e(Ese,z_o),e(Rp,W_o),e(Rp,WI),e(WI,Q_o),e(Rp,H_o),e(x,U_o),e(x,Pp),e(Pp,Cse),e(Cse,J_o),e(Pp,Y_o),e(Pp,QI),e(QI,K_o),e(Pp,Z_o),e(x,euo),e(x,Bp),e(Bp,wse),e(wse,ouo),e(Bp,ruo),e(Bp,HI),e(HI,tuo),e(Bp,auo),e(x,nuo),e(x,Ip),e(Ip,Ase),e(Ase,suo),e(Ip,luo),e(Ip,UI),e(UI,iuo),e(Ip,duo),e(x,cuo),e(x,qp),e(qp,yse),e(yse,fuo),e(qp,muo),e(qp,JI),e(JI,guo),e(qp,huo),e(x,puo),e(x,Np),e(Np,Lse),e(Lse,_uo),e(Np,uuo),e(Np,YI),e(YI,buo),e(Np,vuo),e(x,Fuo),e(x,jp),e(jp,xse),e(xse,Tuo),e(jp,Muo),e(jp,KI),e(KI,Euo),e(jp,Cuo),e(x,wuo),e(x,Dp),e(Dp,$se),e($se,Auo),e(Dp,yuo),e(Dp,ZI),e(ZI,Luo),e(Dp,xuo),e(x,$uo),e(x,Gp),e(Gp,kse),e(kse,kuo),e(Gp,Suo),e(Gp,eq),e(eq,Ruo),e(Gp,Puo),e(x,Buo),e(x,Op),e(Op,Sse),e(Sse,Iuo),e(Op,quo),e(Op,oq),e(oq,Nuo),e(Op,juo),e(x,Duo),e(x,Vp),e(Vp,Rse),e(Rse,Guo),e(Vp,Ouo),e(Vp,rq),e(rq,Vuo),e(Vp,Xuo),e(x,zuo),e(x,Xp),e(Xp,Pse),e(Pse,Wuo),e(Xp,Quo),e(Xp,tq),e(tq,Huo),e(Xp,Uuo),e(x,Juo),e(x,zp),e(zp,Bse),e(Bse,Yuo),e(zp,Kuo),e(zp,aq),e(aq,Zuo),e(zp,e2o),e(x,o2o),e(x,Wp),e(Wp,Ise),e(Ise,r2o),e(Wp,t2o),e(Wp,nq),e(nq,a2o),e(Wp,n2o),e(x,s2o),e(x,Qp),e(Qp,qse),e(qse,l2o),e(Qp,i2o),e(Qp,sq),e(sq,d2o),e(Qp,c2o),e(x,f2o),e(x,Hp),e(Hp,Nse),e(Nse,m2o),e(Hp,g2o),e(Hp,lq),e(lq,h2o),e(Hp,p2o),e(x,_2o),e(x,Up),e(Up,jse),e(jse,u2o),e(Up,b2o),e(Up,iq),e(iq,v2o),e(Up,F2o),e(x,T2o),e(x,Jp),e(Jp,Dse),e(Dse,M2o),e(Jp,E2o),e(Jp,dq),e(dq,C2o),e(Jp,w2o),e(x,A2o),e(x,Yp),e(Yp,Gse),e(Gse,y2o),e(Yp,L2o),e(Yp,cq),e(cq,x2o),e(Yp,$2o),e(x,k2o),e(x,Kp),e(Kp,Ose),e(Ose,S2o),e(Kp,R2o),e(Kp,fq),e(fq,P2o),e(Kp,B2o),e(x,I2o),e(x,Zp),e(Zp,Vse),e(Vse,q2o),e(Zp,N2o),e(Zp,mq),e(mq,j2o),e(Zp,D2o),e(x,G2o),e(x,e_),e(e_,Xse),e(Xse,O2o),e(e_,V2o),e(e_,gq),e(gq,X2o),e(e_,z2o),e(x,W2o),e(x,o_),e(o_,zse),e(zse,Q2o),e(o_,H2o),e(o_,hq),e(hq,U2o),e(o_,J2o),e(x,Y2o),e(x,r_),e(r_,Wse),e(Wse,K2o),e(r_,Z2o),e(r_,pq),e(pq,e1o),e(r_,o1o),e(x,r1o),e(x,t_),e(t_,Qse),e(Qse,t1o),e(t_,a1o),e(t_,_q),e(_q,n1o),e(t_,s1o),e(x,l1o),e(x,a_),e(a_,Hse),e(Hse,i1o),e(a_,d1o),e(a_,uq),e(uq,c1o),e(a_,f1o),e(x,m1o),e(x,n_),e(n_,Use),e(Use,g1o),e(n_,h1o),e(n_,bq),e(bq,p1o),e(n_,_1o),e(x,u1o),e(x,s_),e(s_,Jse),e(Jse,b1o),e(s_,v1o),e(s_,vq),e(vq,F1o),e(s_,T1o),e(x,M1o),e(x,l_),e(l_,Yse),e(Yse,E1o),e(l_,C1o),e(l_,Fq),e(Fq,w1o),e(l_,A1o),e(x,y1o),e(x,i_),e(i_,Kse),e(Kse,L1o),e(i_,x1o),e(i_,Tq),e(Tq,$1o),e(i_,k1o),e(x,S1o),e(x,d_),e(d_,Zse),e(Zse,R1o),e(d_,P1o),e(d_,Mq),e(Mq,B1o),e(d_,I1o),e(x,q1o),e(x,c_),e(c_,ele),e(ele,N1o),e(c_,j1o),e(c_,Eq),e(Eq,D1o),e(c_,G1o),e(x,O1o),e(x,f_),e(f_,ole),e(ole,V1o),e(f_,X1o),e(f_,Cq),e(Cq,z1o),e(f_,W1o),e(x,Q1o),e(x,m_),e(m_,rle),e(rle,H1o),e(m_,U1o),e(m_,wq),e(wq,J1o),e(m_,Y1o),e(x,K1o),e(x,g_),e(g_,tle),e(tle,Z1o),e(g_,ebo),e(g_,Aq),e(Aq,obo),e(g_,rbo),e(x,tbo),e(x,h_),e(h_,ale),e(ale,abo),e(h_,nbo),e(h_,yq),e(yq,sbo),e(h_,lbo),e(x,ibo),e(x,p_),e(p_,nle),e(nle,dbo),e(p_,cbo),e(p_,Lq),e(Lq,fbo),e(p_,mbo),e(x,gbo),e(x,__),e(__,sle),e(sle,hbo),e(__,pbo),e(__,xq),e(xq,_bo),e(__,ubo),e(x,bbo),e(x,u_),e(u_,lle),e(lle,vbo),e(u_,Fbo),e(u_,$q),e($q,Tbo),e(u_,Mbo),e(x,Ebo),e(x,b_),e(b_,ile),e(ile,Cbo),e(b_,wbo),e(b_,kq),e(kq,Abo),e(b_,ybo),e(x,Lbo),e(x,v_),e(v_,dle),e(dle,xbo),e(v_,$bo),e(v_,Sq),e(Sq,kbo),e(v_,Sbo),e(x,Rbo),e(x,F_),e(F_,cle),e(cle,Pbo),e(F_,Bbo),e(F_,Rq),e(Rq,Ibo),e(F_,qbo),e(x,Nbo),e(x,T_),e(T_,fle),e(fle,jbo),e(T_,Dbo),e(T_,Pq),e(Pq,Gbo),e(T_,Obo),e(x,Vbo),e(x,M_),e(M_,mle),e(mle,Xbo),e(M_,zbo),e(M_,Bq),e(Bq,Wbo),e(M_,Qbo),e(x,Hbo),e(x,E_),e(E_,gle),e(gle,Ubo),e(E_,Jbo),e(E_,Iq),e(Iq,Ybo),e(E_,Kbo),e(x,Zbo),e(x,C_),e(C_,hle),e(hle,e4o),e(C_,o4o),e(C_,qq),e(qq,r4o),e(C_,t4o),e(x,a4o),e(x,w_),e(w_,ple),e(ple,n4o),e(w_,s4o),e(w_,Nq),e(Nq,l4o),e(w_,i4o),e(x,d4o),e(x,A_),e(A_,_le),e(_le,c4o),e(A_,f4o),e(A_,jq),e(jq,m4o),e(A_,g4o),e(x,h4o),e(x,y_),e(y_,ule),e(ule,p4o),e(y_,_4o),e(y_,Dq),e(Dq,u4o),e(y_,b4o),e(x,v4o),e(x,L_),e(L_,ble),e(ble,F4o),e(L_,T4o),e(L_,Gq),e(Gq,M4o),e(L_,E4o),e(x,C4o),e(x,x_),e(x_,vle),e(vle,w4o),e(x_,A4o),e(x_,Oq),e(Oq,y4o),e(x_,L4o),e(x,x4o),e(x,$_),e($_,Fle),e(Fle,$4o),e($_,k4o),e($_,Vq),e(Vq,S4o),e($_,R4o),e(x,P4o),e(x,k_),e(k_,Tle),e(Tle,B4o),e(k_,I4o),e(k_,Xq),e(Xq,q4o),e(k_,N4o),e(x,j4o),e(x,S_),e(S_,Mle),e(Mle,D4o),e(S_,G4o),e(S_,zq),e(zq,O4o),e(S_,V4o),e(x,X4o),e(x,R_),e(R_,Ele),e(Ele,z4o),e(R_,W4o),e(R_,Wq),e(Wq,Q4o),e(R_,H4o),e(x,U4o),e(x,P_),e(P_,Cle),e(Cle,J4o),e(P_,Y4o),e(P_,Qq),e(Qq,K4o),e(P_,Z4o),e(x,e5o),e(x,B_),e(B_,wle),e(wle,o5o),e(B_,r5o),e(B_,Hq),e(Hq,t5o),e(B_,a5o),e(x,n5o),e(x,I_),e(I_,Ale),e(Ale,s5o),e(I_,l5o),e(I_,Uq),e(Uq,i5o),e(I_,d5o),e(x,c5o),e(x,q_),e(q_,yle),e(yle,f5o),e(q_,m5o),e(q_,Jq),e(Jq,g5o),e(q_,h5o),e(x,p5o),e(x,N_),e(N_,Lle),e(Lle,_5o),e(N_,u5o),e(N_,Yq),e(Yq,b5o),e(N_,v5o),e(x,F5o),e(x,j_),e(j_,xle),e(xle,T5o),e(j_,M5o),e(j_,Kq),e(Kq,E5o),e(j_,C5o),e(x,w5o),e(x,D_),e(D_,$le),e($le,A5o),e(D_,y5o),e(D_,Zq),e(Zq,L5o),e(D_,x5o),e(x,$5o),e(x,G_),e(G_,kle),e(kle,k5o),e(G_,S5o),e(G_,eN),e(eN,R5o),e(G_,P5o),e(x,B5o),e(x,O_),e(O_,Sle),e(Sle,I5o),e(O_,q5o),e(O_,oN),e(oN,N5o),e(O_,j5o),e(x,D5o),e(x,V_),e(V_,Rle),e(Rle,G5o),e(V_,O5o),e(V_,rN),e(rN,V5o),e(V_,X5o),e(x,z5o),e(x,X_),e(X_,Ple),e(Ple,W5o),e(X_,Q5o),e(X_,tN),e(tN,H5o),e(X_,U5o),e(x,J5o),e(x,z_),e(z_,Ble),e(Ble,Y5o),e(z_,K5o),e(z_,aN),e(aN,Z5o),e(z_,evo),e(Je,ovo),e(Je,W_),e(W_,rvo),e(W_,Ile),e(Ile,tvo),e(W_,avo),e(W_,qle),e(qle,nvo),e(Je,svo),M(Q_,Je,null),b(f,pqe,u),b(f,Li,u),e(Li,H_),e(H_,Nle),M(z6,Nle,null),e(Li,lvo),e(Li,jle),e(jle,ivo),b(f,_qe,u),b(f,xo,u),M(W6,xo,null),e(xo,dvo),e(xo,xi),e(xi,cvo),e(xi,nN),e(nN,fvo),e(xi,mvo),e(xi,sN),e(sN,gvo),e(xi,hvo),e(xo,pvo),e(xo,Q6),e(Q6,_vo),e(Q6,Dle),e(Dle,uvo),e(Q6,bvo),e(xo,vvo),e(xo,at),M(H6,at,null),e(at,Fvo),e(at,Gle),e(Gle,Tvo),e(at,Mvo),e(at,$i),e($i,Evo),e($i,Ole),e(Ole,Cvo),e($i,wvo),e($i,lN),e(lN,Avo),e($i,yvo),e(at,Lvo),M(U_,at,null),e(xo,xvo),e(xo,Ye),M(U6,Ye,null),e(Ye,$vo),e(Ye,Vle),e(Vle,kvo),e(Ye,Svo),e(Ye,xa),e(xa,Rvo),e(xa,Xle),e(Xle,Pvo),e(xa,Bvo),e(xa,zle),e(zle,Ivo),e(xa,qvo),e(xa,Wle),e(Wle,Nvo),e(xa,jvo),e(Ye,Dvo),e(Ye,G),e(G,J_),e(J_,Qle),e(Qle,Gvo),e(J_,Ovo),e(J_,iN),e(iN,Vvo),e(J_,Xvo),e(G,zvo),e(G,Y_),e(Y_,Hle),e(Hle,Wvo),e(Y_,Qvo),e(Y_,dN),e(dN,Hvo),e(Y_,Uvo),e(G,Jvo),e(G,K_),e(K_,Ule),e(Ule,Yvo),e(K_,Kvo),e(K_,cN),e(cN,Zvo),e(K_,eFo),e(G,oFo),e(G,Z_),e(Z_,Jle),e(Jle,rFo),e(Z_,tFo),e(Z_,fN),e(fN,aFo),e(Z_,nFo),e(G,sFo),e(G,eu),e(eu,Yle),e(Yle,lFo),e(eu,iFo),e(eu,mN),e(mN,dFo),e(eu,cFo),e(G,fFo),e(G,ou),e(ou,Kle),e(Kle,mFo),e(ou,gFo),e(ou,gN),e(gN,hFo),e(ou,pFo),e(G,_Fo),e(G,ru),e(ru,Zle),e(Zle,uFo),e(ru,bFo),e(ru,hN),e(hN,vFo),e(ru,FFo),e(G,TFo),e(G,tu),e(tu,eie),e(eie,MFo),e(tu,EFo),e(tu,pN),e(pN,CFo),e(tu,wFo),e(G,AFo),e(G,au),e(au,oie),e(oie,yFo),e(au,LFo),e(au,_N),e(_N,xFo),e(au,$Fo),e(G,kFo),e(G,nu),e(nu,rie),e(rie,SFo),e(nu,RFo),e(nu,uN),e(uN,PFo),e(nu,BFo),e(G,IFo),e(G,su),e(su,tie),e(tie,qFo),e(su,NFo),e(su,bN),e(bN,jFo),e(su,DFo),e(G,GFo),e(G,lu),e(lu,aie),e(aie,OFo),e(lu,VFo),e(lu,vN),e(vN,XFo),e(lu,zFo),e(G,WFo),e(G,iu),e(iu,nie),e(nie,QFo),e(iu,HFo),e(iu,FN),e(FN,UFo),e(iu,JFo),e(G,YFo),e(G,du),e(du,sie),e(sie,KFo),e(du,ZFo),e(du,TN),e(TN,eTo),e(du,oTo),e(G,rTo),e(G,cu),e(cu,lie),e(lie,tTo),e(cu,aTo),e(cu,MN),e(MN,nTo),e(cu,sTo),e(G,lTo),e(G,fu),e(fu,iie),e(iie,iTo),e(fu,dTo),e(fu,EN),e(EN,cTo),e(fu,fTo),e(G,mTo),e(G,mu),e(mu,die),e(die,gTo),e(mu,hTo),e(mu,CN),e(CN,pTo),e(mu,_To),e(G,uTo),e(G,gu),e(gu,cie),e(cie,bTo),e(gu,vTo),e(gu,wN),e(wN,FTo),e(gu,TTo),e(G,MTo),e(G,hu),e(hu,fie),e(fie,ETo),e(hu,CTo),e(hu,AN),e(AN,wTo),e(hu,ATo),e(G,yTo),e(G,pu),e(pu,mie),e(mie,LTo),e(pu,xTo),e(pu,yN),e(yN,$To),e(pu,kTo),e(G,STo),e(G,_u),e(_u,gie),e(gie,RTo),e(_u,PTo),e(_u,LN),e(LN,BTo),e(_u,ITo),e(G,qTo),e(G,uu),e(uu,hie),e(hie,NTo),e(uu,jTo),e(uu,xN),e(xN,DTo),e(uu,GTo),e(G,OTo),e(G,bu),e(bu,pie),e(pie,VTo),e(bu,XTo),e(bu,$N),e($N,zTo),e(bu,WTo),e(G,QTo),e(G,vu),e(vu,_ie),e(_ie,HTo),e(vu,UTo),e(vu,kN),e(kN,JTo),e(vu,YTo),e(G,KTo),e(G,Fu),e(Fu,uie),e(uie,ZTo),e(Fu,e7o),e(Fu,SN),e(SN,o7o),e(Fu,r7o),e(G,t7o),e(G,Tu),e(Tu,bie),e(bie,a7o),e(Tu,n7o),e(Tu,RN),e(RN,s7o),e(Tu,l7o),e(G,i7o),e(G,Mu),e(Mu,vie),e(vie,d7o),e(Mu,c7o),e(Mu,PN),e(PN,f7o),e(Mu,m7o),e(G,g7o),e(G,Eu),e(Eu,Fie),e(Fie,h7o),e(Eu,p7o),e(Eu,BN),e(BN,_7o),e(Eu,u7o),e(G,b7o),e(G,Cu),e(Cu,Tie),e(Tie,v7o),e(Cu,F7o),e(Cu,IN),e(IN,T7o),e(Cu,M7o),e(G,E7o),e(G,wu),e(wu,Mie),e(Mie,C7o),e(wu,w7o),e(wu,qN),e(qN,A7o),e(wu,y7o),e(G,L7o),e(G,Au),e(Au,Eie),e(Eie,x7o),e(Au,$7o),e(Au,NN),e(NN,k7o),e(Au,S7o),e(G,R7o),e(G,yu),e(yu,Cie),e(Cie,P7o),e(yu,B7o),e(yu,jN),e(jN,I7o),e(yu,q7o),e(G,N7o),e(G,Lu),e(Lu,wie),e(wie,j7o),e(Lu,D7o),e(Lu,DN),e(DN,G7o),e(Lu,O7o),e(G,V7o),e(G,xu),e(xu,Aie),e(Aie,X7o),e(xu,z7o),e(xu,GN),e(GN,W7o),e(xu,Q7o),e(G,H7o),e(G,$u),e($u,yie),e(yie,U7o),e($u,J7o),e($u,ON),e(ON,Y7o),e($u,K7o),e(G,Z7o),e(G,ku),e(ku,Lie),e(Lie,eMo),e(ku,oMo),e(ku,VN),e(VN,rMo),e(ku,tMo),e(G,aMo),e(G,Su),e(Su,xie),e(xie,nMo),e(Su,sMo),e(Su,XN),e(XN,lMo),e(Su,iMo),e(G,dMo),e(G,Ru),e(Ru,$ie),e($ie,cMo),e(Ru,fMo),e(Ru,zN),e(zN,mMo),e(Ru,gMo),e(G,hMo),e(G,Pu),e(Pu,kie),e(kie,pMo),e(Pu,_Mo),e(Pu,WN),e(WN,uMo),e(Pu,bMo),e(G,vMo),e(G,Bu),e(Bu,Sie),e(Sie,FMo),e(Bu,TMo),e(Bu,QN),e(QN,MMo),e(Bu,EMo),e(G,CMo),e(G,Iu),e(Iu,Rie),e(Rie,wMo),e(Iu,AMo),e(Iu,HN),e(HN,yMo),e(Iu,LMo),e(G,xMo),e(G,qu),e(qu,Pie),e(Pie,$Mo),e(qu,kMo),e(qu,UN),e(UN,SMo),e(qu,RMo),e(Ye,PMo),e(Ye,Nu),e(Nu,BMo),e(Nu,Bie),e(Bie,IMo),e(Nu,qMo),e(Nu,Iie),e(Iie,NMo),e(Ye,jMo),M(ju,Ye,null),b(f,uqe,u),b(f,ki,u),e(ki,Du),e(Du,qie),M(J6,qie,null),e(ki,DMo),e(ki,Nie),e(Nie,GMo),b(f,bqe,u),b(f,$o,u),M(Y6,$o,null),e($o,OMo),e($o,Si),e(Si,VMo),e(Si,JN),e(JN,XMo),e(Si,zMo),e(Si,YN),e(YN,WMo),e(Si,QMo),e($o,HMo),e($o,K6),e(K6,UMo),e(K6,jie),e(jie,JMo),e(K6,YMo),e($o,KMo),e($o,nt),M(Z6,nt,null),e(nt,ZMo),e(nt,Die),e(Die,eEo),e(nt,oEo),e(nt,Ri),e(Ri,rEo),e(Ri,Gie),e(Gie,tEo),e(Ri,aEo),e(Ri,KN),e(KN,nEo),e(Ri,sEo),e(nt,lEo),M(Gu,nt,null),e($o,iEo),e($o,Ke),M(ey,Ke,null),e(Ke,dEo),e(Ke,Oie),e(Oie,cEo),e(Ke,fEo),e(Ke,$a),e($a,mEo),e($a,Vie),e(Vie,gEo),e($a,hEo),e($a,Xie),e(Xie,pEo),e($a,_Eo),e($a,zie),e(zie,uEo),e($a,bEo),e(Ke,vEo),e(Ke,z),e(z,Ou),e(Ou,Wie),e(Wie,FEo),e(Ou,TEo),e(Ou,ZN),e(ZN,MEo),e(Ou,EEo),e(z,CEo),e(z,Vu),e(Vu,Qie),e(Qie,wEo),e(Vu,AEo),e(Vu,ej),e(ej,yEo),e(Vu,LEo),e(z,xEo),e(z,Xu),e(Xu,Hie),e(Hie,$Eo),e(Xu,kEo),e(Xu,oj),e(oj,SEo),e(Xu,REo),e(z,PEo),e(z,zu),e(zu,Uie),e(Uie,BEo),e(zu,IEo),e(zu,rj),e(rj,qEo),e(zu,NEo),e(z,jEo),e(z,Wu),e(Wu,Jie),e(Jie,DEo),e(Wu,GEo),e(Wu,tj),e(tj,OEo),e(Wu,VEo),e(z,XEo),e(z,Qu),e(Qu,Yie),e(Yie,zEo),e(Qu,WEo),e(Qu,aj),e(aj,QEo),e(Qu,HEo),e(z,UEo),e(z,Hu),e(Hu,Kie),e(Kie,JEo),e(Hu,YEo),e(Hu,nj),e(nj,KEo),e(Hu,ZEo),e(z,eCo),e(z,Uu),e(Uu,Zie),e(Zie,oCo),e(Uu,rCo),e(Uu,sj),e(sj,tCo),e(Uu,aCo),e(z,nCo),e(z,Ju),e(Ju,ede),e(ede,sCo),e(Ju,lCo),e(Ju,lj),e(lj,iCo),e(Ju,dCo),e(z,cCo),e(z,Yu),e(Yu,ode),e(ode,fCo),e(Yu,mCo),e(Yu,ij),e(ij,gCo),e(Yu,hCo),e(z,pCo),e(z,Ku),e(Ku,rde),e(rde,_Co),e(Ku,uCo),e(Ku,dj),e(dj,bCo),e(Ku,vCo),e(z,FCo),e(z,Zu),e(Zu,tde),e(tde,TCo),e(Zu,MCo),e(Zu,cj),e(cj,ECo),e(Zu,CCo),e(z,wCo),e(z,e2),e(e2,ade),e(ade,ACo),e(e2,yCo),e(e2,fj),e(fj,LCo),e(e2,xCo),e(z,$Co),e(z,o2),e(o2,nde),e(nde,kCo),e(o2,SCo),e(o2,mj),e(mj,RCo),e(o2,PCo),e(z,BCo),e(z,r2),e(r2,sde),e(sde,ICo),e(r2,qCo),e(r2,gj),e(gj,NCo),e(r2,jCo),e(z,DCo),e(z,t2),e(t2,lde),e(lde,GCo),e(t2,OCo),e(t2,hj),e(hj,VCo),e(t2,XCo),e(z,zCo),e(z,a2),e(a2,ide),e(ide,WCo),e(a2,QCo),e(a2,pj),e(pj,HCo),e(a2,UCo),e(z,JCo),e(z,n2),e(n2,dde),e(dde,YCo),e(n2,KCo),e(n2,_j),e(_j,ZCo),e(n2,e3o),e(z,o3o),e(z,s2),e(s2,cde),e(cde,r3o),e(s2,t3o),e(s2,uj),e(uj,a3o),e(s2,n3o),e(z,s3o),e(z,l2),e(l2,fde),e(fde,l3o),e(l2,i3o),e(l2,bj),e(bj,d3o),e(l2,c3o),e(z,f3o),e(z,i2),e(i2,mde),e(mde,m3o),e(i2,g3o),e(i2,vj),e(vj,h3o),e(i2,p3o),e(z,_3o),e(z,d2),e(d2,gde),e(gde,u3o),e(d2,b3o),e(d2,Fj),e(Fj,v3o),e(d2,F3o),e(z,T3o),e(z,c2),e(c2,hde),e(hde,M3o),e(c2,E3o),e(c2,Tj),e(Tj,C3o),e(c2,w3o),e(z,A3o),e(z,f2),e(f2,pde),e(pde,y3o),e(f2,L3o),e(f2,Mj),e(Mj,x3o),e(f2,$3o),e(z,k3o),e(z,m2),e(m2,_de),e(_de,S3o),e(m2,R3o),e(m2,Ej),e(Ej,P3o),e(m2,B3o),e(z,I3o),e(z,g2),e(g2,ude),e(ude,q3o),e(g2,N3o),e(g2,Cj),e(Cj,j3o),e(g2,D3o),e(z,G3o),e(z,h2),e(h2,bde),e(bde,O3o),e(h2,V3o),e(h2,wj),e(wj,X3o),e(h2,z3o),e(z,W3o),e(z,p2),e(p2,vde),e(vde,Q3o),e(p2,H3o),e(p2,Aj),e(Aj,U3o),e(p2,J3o),e(z,Y3o),e(z,_2),e(_2,Fde),e(Fde,K3o),e(_2,Z3o),e(_2,yj),e(yj,ewo),e(_2,owo),e(z,rwo),e(z,u2),e(u2,Tde),e(Tde,two),e(u2,awo),e(u2,Lj),e(Lj,nwo),e(u2,swo),e(z,lwo),e(z,b2),e(b2,Mde),e(Mde,iwo),e(b2,dwo),e(b2,xj),e(xj,cwo),e(b2,fwo),e(z,mwo),e(z,v2),e(v2,Ede),e(Ede,gwo),e(v2,hwo),e(v2,$j),e($j,pwo),e(v2,_wo),e(z,uwo),e(z,F2),e(F2,Cde),e(Cde,bwo),e(F2,vwo),e(F2,kj),e(kj,Fwo),e(F2,Two),e(z,Mwo),e(z,T2),e(T2,wde),e(wde,Ewo),e(T2,Cwo),e(T2,Sj),e(Sj,wwo),e(T2,Awo),e(z,ywo),e(z,M2),e(M2,Ade),e(Ade,Lwo),e(M2,xwo),e(M2,Rj),e(Rj,$wo),e(M2,kwo),e(z,Swo),e(z,E2),e(E2,yde),e(yde,Rwo),e(E2,Pwo),e(E2,Pj),e(Pj,Bwo),e(E2,Iwo),e(Ke,qwo),e(Ke,C2),e(C2,Nwo),e(C2,Lde),e(Lde,jwo),e(C2,Dwo),e(C2,xde),e(xde,Gwo),e(Ke,Owo),M(w2,Ke,null),b(f,vqe,u),b(f,Pi,u),e(Pi,A2),e(A2,$de),M(oy,$de,null),e(Pi,Vwo),e(Pi,kde),e(kde,Xwo),b(f,Fqe,u),b(f,ko,u),M(ry,ko,null),e(ko,zwo),e(ko,Bi),e(Bi,Wwo),e(Bi,Bj),e(Bj,Qwo),e(Bi,Hwo),e(Bi,Ij),e(Ij,Uwo),e(Bi,Jwo),e(ko,Ywo),e(ko,ty),e(ty,Kwo),e(ty,Sde),e(Sde,Zwo),e(ty,e0o),e(ko,o0o),e(ko,st),M(ay,st,null),e(st,r0o),e(st,Rde),e(Rde,t0o),e(st,a0o),e(st,Ii),e(Ii,n0o),e(Ii,Pde),e(Pde,s0o),e(Ii,l0o),e(Ii,qj),e(qj,i0o),e(Ii,d0o),e(st,c0o),M(y2,st,null),e(ko,f0o),e(ko,Ze),M(ny,Ze,null),e(Ze,m0o),e(Ze,Bde),e(Bde,g0o),e(Ze,h0o),e(Ze,ka),e(ka,p0o),e(ka,Ide),e(Ide,_0o),e(ka,u0o),e(ka,qde),e(qde,b0o),e(ka,v0o),e(ka,Nde),e(Nde,F0o),e(ka,T0o),e(Ze,M0o),e(Ze,W),e(W,L2),e(L2,jde),e(jde,E0o),e(L2,C0o),e(L2,Nj),e(Nj,w0o),e(L2,A0o),e(W,y0o),e(W,x2),e(x2,Dde),e(Dde,L0o),e(x2,x0o),e(x2,jj),e(jj,$0o),e(x2,k0o),e(W,S0o),e(W,$2),e($2,Gde),e(Gde,R0o),e($2,P0o),e($2,Dj),e(Dj,B0o),e($2,I0o),e(W,q0o),e(W,k2),e(k2,Ode),e(Ode,N0o),e(k2,j0o),e(k2,Gj),e(Gj,D0o),e(k2,G0o),e(W,O0o),e(W,S2),e(S2,Vde),e(Vde,V0o),e(S2,X0o),e(S2,Oj),e(Oj,z0o),e(S2,W0o),e(W,Q0o),e(W,R2),e(R2,Xde),e(Xde,H0o),e(R2,U0o),e(R2,Vj),e(Vj,J0o),e(R2,Y0o),e(W,K0o),e(W,P2),e(P2,zde),e(zde,Z0o),e(P2,eAo),e(P2,Xj),e(Xj,oAo),e(P2,rAo),e(W,tAo),e(W,B2),e(B2,Wde),e(Wde,aAo),e(B2,nAo),e(B2,zj),e(zj,sAo),e(B2,lAo),e(W,iAo),e(W,I2),e(I2,Qde),e(Qde,dAo),e(I2,cAo),e(I2,Wj),e(Wj,fAo),e(I2,mAo),e(W,gAo),e(W,q2),e(q2,Hde),e(Hde,hAo),e(q2,pAo),e(q2,Qj),e(Qj,_Ao),e(q2,uAo),e(W,bAo),e(W,N2),e(N2,Ude),e(Ude,vAo),e(N2,FAo),e(N2,Hj),e(Hj,TAo),e(N2,MAo),e(W,EAo),e(W,j2),e(j2,Jde),e(Jde,CAo),e(j2,wAo),e(j2,Uj),e(Uj,AAo),e(j2,yAo),e(W,LAo),e(W,D2),e(D2,Yde),e(Yde,xAo),e(D2,$Ao),e(D2,Jj),e(Jj,kAo),e(D2,SAo),e(W,RAo),e(W,G2),e(G2,Kde),e(Kde,PAo),e(G2,BAo),e(G2,Yj),e(Yj,IAo),e(G2,qAo),e(W,NAo),e(W,O2),e(O2,Zde),e(Zde,jAo),e(O2,DAo),e(O2,Kj),e(Kj,GAo),e(O2,OAo),e(W,VAo),e(W,V2),e(V2,ece),e(ece,XAo),e(V2,zAo),e(V2,Zj),e(Zj,WAo),e(V2,QAo),e(W,HAo),e(W,X2),e(X2,oce),e(oce,UAo),e(X2,JAo),e(X2,eD),e(eD,YAo),e(X2,KAo),e(W,ZAo),e(W,z2),e(z2,rce),e(rce,e6o),e(z2,o6o),e(z2,oD),e(oD,r6o),e(z2,t6o),e(W,a6o),e(W,W2),e(W2,tce),e(tce,n6o),e(W2,s6o),e(W2,rD),e(rD,l6o),e(W2,i6o),e(W,d6o),e(W,Q2),e(Q2,ace),e(ace,c6o),e(Q2,f6o),e(Q2,tD),e(tD,m6o),e(Q2,g6o),e(W,h6o),e(W,H2),e(H2,nce),e(nce,p6o),e(H2,_6o),e(H2,aD),e(aD,u6o),e(H2,b6o),e(W,v6o),e(W,U2),e(U2,sce),e(sce,F6o),e(U2,T6o),e(U2,nD),e(nD,M6o),e(U2,E6o),e(W,C6o),e(W,J2),e(J2,lce),e(lce,w6o),e(J2,A6o),e(J2,sD),e(sD,y6o),e(J2,L6o),e(W,x6o),e(W,Y2),e(Y2,ice),e(ice,$6o),e(Y2,k6o),e(Y2,lD),e(lD,S6o),e(Y2,R6o),e(W,P6o),e(W,K2),e(K2,dce),e(dce,B6o),e(K2,I6o),e(K2,iD),e(iD,q6o),e(K2,N6o),e(W,j6o),e(W,Z2),e(Z2,cce),e(cce,D6o),e(Z2,G6o),e(Z2,dD),e(dD,O6o),e(Z2,V6o),e(W,X6o),e(W,e1),e(e1,fce),e(fce,z6o),e(e1,W6o),e(e1,cD),e(cD,Q6o),e(e1,H6o),e(W,U6o),e(W,o1),e(o1,mce),e(mce,J6o),e(o1,Y6o),e(o1,fD),e(fD,K6o),e(o1,Z6o),e(W,eyo),e(W,r1),e(r1,gce),e(gce,oyo),e(r1,ryo),e(r1,mD),e(mD,tyo),e(r1,ayo),e(W,nyo),e(W,t1),e(t1,hce),e(hce,syo),e(t1,lyo),e(t1,gD),e(gD,iyo),e(t1,dyo),e(W,cyo),e(W,a1),e(a1,pce),e(pce,fyo),e(a1,myo),e(a1,_ce),e(_ce,gyo),e(a1,hyo),e(W,pyo),e(W,n1),e(n1,uce),e(uce,_yo),e(n1,uyo),e(n1,hD),e(hD,byo),e(n1,vyo),e(W,Fyo),e(W,s1),e(s1,bce),e(bce,Tyo),e(s1,Myo),e(s1,pD),e(pD,Eyo),e(s1,Cyo),e(W,wyo),e(W,l1),e(l1,vce),e(vce,Ayo),e(l1,yyo),e(l1,_D),e(_D,Lyo),e(l1,xyo),e(W,$yo),e(W,i1),e(i1,Fce),e(Fce,kyo),e(i1,Syo),e(i1,uD),e(uD,Ryo),e(i1,Pyo),e(Ze,Byo),e(Ze,d1),e(d1,Iyo),e(d1,Tce),e(Tce,qyo),e(d1,Nyo),e(d1,Mce),e(Mce,jyo),e(Ze,Dyo),M(c1,Ze,null),b(f,Tqe,u),b(f,qi,u),e(qi,f1),e(f1,Ece),M(sy,Ece,null),e(qi,Gyo),e(qi,Cce),e(Cce,Oyo),b(f,Mqe,u),b(f,So,u),M(ly,So,null),e(So,Vyo),e(So,Ni),e(Ni,Xyo),e(Ni,bD),e(bD,zyo),e(Ni,Wyo),e(Ni,vD),e(vD,Qyo),e(Ni,Hyo),e(So,Uyo),e(So,iy),e(iy,Jyo),e(iy,wce),e(wce,Yyo),e(iy,Kyo),e(So,Zyo),e(So,lt),M(dy,lt,null),e(lt,eLo),e(lt,Ace),e(Ace,oLo),e(lt,rLo),e(lt,ji),e(ji,tLo),e(ji,yce),e(yce,aLo),e(ji,nLo),e(ji,FD),e(FD,sLo),e(ji,lLo),e(lt,iLo),M(m1,lt,null),e(So,dLo),e(So,eo),M(cy,eo,null),e(eo,cLo),e(eo,Lce),e(Lce,fLo),e(eo,mLo),e(eo,Sa),e(Sa,gLo),e(Sa,xce),e(xce,hLo),e(Sa,pLo),e(Sa,$ce),e($ce,_Lo),e(Sa,uLo),e(Sa,kce),e(kce,bLo),e(Sa,vLo),e(eo,FLo),e(eo,_e),e(_e,g1),e(g1,Sce),e(Sce,TLo),e(g1,MLo),e(g1,TD),e(TD,ELo),e(g1,CLo),e(_e,wLo),e(_e,h1),e(h1,Rce),e(Rce,ALo),e(h1,yLo),e(h1,MD),e(MD,LLo),e(h1,xLo),e(_e,$Lo),e(_e,p1),e(p1,Pce),e(Pce,kLo),e(p1,SLo),e(p1,ED),e(ED,RLo),e(p1,PLo),e(_e,BLo),e(_e,_1),e(_1,Bce),e(Bce,ILo),e(_1,qLo),e(_1,CD),e(CD,NLo),e(_1,jLo),e(_e,DLo),e(_e,u1),e(u1,Ice),e(Ice,GLo),e(u1,OLo),e(u1,wD),e(wD,VLo),e(u1,XLo),e(_e,zLo),e(_e,b1),e(b1,qce),e(qce,WLo),e(b1,QLo),e(b1,AD),e(AD,HLo),e(b1,ULo),e(_e,JLo),e(_e,v1),e(v1,Nce),e(Nce,YLo),e(v1,KLo),e(v1,yD),e(yD,ZLo),e(v1,e8o),e(_e,o8o),e(_e,F1),e(F1,jce),e(jce,r8o),e(F1,t8o),e(F1,LD),e(LD,a8o),e(F1,n8o),e(_e,s8o),e(_e,T1),e(T1,Dce),e(Dce,l8o),e(T1,i8o),e(T1,xD),e(xD,d8o),e(T1,c8o),e(_e,f8o),e(_e,M1),e(M1,Gce),e(Gce,m8o),e(M1,g8o),e(M1,$D),e($D,h8o),e(M1,p8o),e(_e,_8o),e(_e,E1),e(E1,Oce),e(Oce,u8o),e(E1,b8o),e(E1,kD),e(kD,v8o),e(E1,F8o),e(_e,T8o),e(_e,C1),e(C1,Vce),e(Vce,M8o),e(C1,E8o),e(C1,SD),e(SD,C8o),e(C1,w8o),e(_e,A8o),e(_e,w1),e(w1,Xce),e(Xce,y8o),e(w1,L8o),e(w1,RD),e(RD,x8o),e(w1,$8o),e(_e,k8o),e(_e,A1),e(A1,zce),e(zce,S8o),e(A1,R8o),e(A1,PD),e(PD,P8o),e(A1,B8o),e(_e,I8o),e(_e,y1),e(y1,Wce),e(Wce,q8o),e(y1,N8o),e(y1,BD),e(BD,j8o),e(y1,D8o),e(_e,G8o),e(_e,L1),e(L1,Qce),e(Qce,O8o),e(L1,V8o),e(L1,ID),e(ID,X8o),e(L1,z8o),e(eo,W8o),e(eo,x1),e(x1,Q8o),e(x1,Hce),e(Hce,H8o),e(x1,U8o),e(x1,Uce),e(Uce,J8o),e(eo,Y8o),M($1,eo,null),b(f,Eqe,u),b(f,Di,u),e(Di,k1),e(k1,Jce),M(fy,Jce,null),e(Di,K8o),e(Di,Yce),e(Yce,Z8o),b(f,Cqe,u),b(f,Ro,u),M(my,Ro,null),e(Ro,e9o),e(Ro,Gi),e(Gi,o9o),e(Gi,qD),e(qD,r9o),e(Gi,t9o),e(Gi,ND),e(ND,a9o),e(Gi,n9o),e(Ro,s9o),e(Ro,gy),e(gy,l9o),e(gy,Kce),e(Kce,i9o),e(gy,d9o),e(Ro,c9o),e(Ro,it),M(hy,it,null),e(it,f9o),e(it,Zce),e(Zce,m9o),e(it,g9o),e(it,Oi),e(Oi,h9o),e(Oi,efe),e(efe,p9o),e(Oi,_9o),e(Oi,jD),e(jD,u9o),e(Oi,b9o),e(it,v9o),M(S1,it,null),e(Ro,F9o),e(Ro,oo),M(py,oo,null),e(oo,T9o),e(oo,ofe),e(ofe,M9o),e(oo,E9o),e(oo,Ra),e(Ra,C9o),e(Ra,rfe),e(rfe,w9o),e(Ra,A9o),e(Ra,tfe),e(tfe,y9o),e(Ra,L9o),e(Ra,afe),e(afe,x9o),e(Ra,$9o),e(oo,k9o),e(oo,q),e(q,R1),e(R1,nfe),e(nfe,S9o),e(R1,R9o),e(R1,DD),e(DD,P9o),e(R1,B9o),e(q,I9o),e(q,P1),e(P1,sfe),e(sfe,q9o),e(P1,N9o),e(P1,GD),e(GD,j9o),e(P1,D9o),e(q,G9o),e(q,B1),e(B1,lfe),e(lfe,O9o),e(B1,V9o),e(B1,OD),e(OD,X9o),e(B1,z9o),e(q,W9o),e(q,I1),e(I1,ife),e(ife,Q9o),e(I1,H9o),e(I1,VD),e(VD,U9o),e(I1,J9o),e(q,Y9o),e(q,q1),e(q1,dfe),e(dfe,K9o),e(q1,Z9o),e(q1,XD),e(XD,exo),e(q1,oxo),e(q,rxo),e(q,N1),e(N1,cfe),e(cfe,txo),e(N1,axo),e(N1,zD),e(zD,nxo),e(N1,sxo),e(q,lxo),e(q,j1),e(j1,ffe),e(ffe,ixo),e(j1,dxo),e(j1,WD),e(WD,cxo),e(j1,fxo),e(q,mxo),e(q,D1),e(D1,mfe),e(mfe,gxo),e(D1,hxo),e(D1,QD),e(QD,pxo),e(D1,_xo),e(q,uxo),e(q,G1),e(G1,gfe),e(gfe,bxo),e(G1,vxo),e(G1,HD),e(HD,Fxo),e(G1,Txo),e(q,Mxo),e(q,O1),e(O1,hfe),e(hfe,Exo),e(O1,Cxo),e(O1,UD),e(UD,wxo),e(O1,Axo),e(q,yxo),e(q,V1),e(V1,pfe),e(pfe,Lxo),e(V1,xxo),e(V1,JD),e(JD,$xo),e(V1,kxo),e(q,Sxo),e(q,X1),e(X1,_fe),e(_fe,Rxo),e(X1,Pxo),e(X1,YD),e(YD,Bxo),e(X1,Ixo),e(q,qxo),e(q,z1),e(z1,ufe),e(ufe,Nxo),e(z1,jxo),e(z1,KD),e(KD,Dxo),e(z1,Gxo),e(q,Oxo),e(q,W1),e(W1,bfe),e(bfe,Vxo),e(W1,Xxo),e(W1,ZD),e(ZD,zxo),e(W1,Wxo),e(q,Qxo),e(q,Q1),e(Q1,vfe),e(vfe,Hxo),e(Q1,Uxo),e(Q1,eG),e(eG,Jxo),e(Q1,Yxo),e(q,Kxo),e(q,H1),e(H1,Ffe),e(Ffe,Zxo),e(H1,e$o),e(H1,oG),e(oG,o$o),e(H1,r$o),e(q,t$o),e(q,U1),e(U1,Tfe),e(Tfe,a$o),e(U1,n$o),e(U1,rG),e(rG,s$o),e(U1,l$o),e(q,i$o),e(q,J1),e(J1,Mfe),e(Mfe,d$o),e(J1,c$o),e(J1,tG),e(tG,f$o),e(J1,m$o),e(q,g$o),e(q,Y1),e(Y1,Efe),e(Efe,h$o),e(Y1,p$o),e(Y1,aG),e(aG,_$o),e(Y1,u$o),e(q,b$o),e(q,K1),e(K1,Cfe),e(Cfe,v$o),e(K1,F$o),e(K1,nG),e(nG,T$o),e(K1,M$o),e(q,E$o),e(q,Z1),e(Z1,wfe),e(wfe,C$o),e(Z1,w$o),e(Z1,sG),e(sG,A$o),e(Z1,y$o),e(q,L$o),e(q,eb),e(eb,Afe),e(Afe,x$o),e(eb,$$o),e(eb,lG),e(lG,k$o),e(eb,S$o),e(q,R$o),e(q,ob),e(ob,yfe),e(yfe,P$o),e(ob,B$o),e(ob,iG),e(iG,I$o),e(ob,q$o),e(q,N$o),e(q,rb),e(rb,Lfe),e(Lfe,j$o),e(rb,D$o),e(rb,dG),e(dG,G$o),e(rb,O$o),e(q,V$o),e(q,tb),e(tb,xfe),e(xfe,X$o),e(tb,z$o),e(tb,cG),e(cG,W$o),e(tb,Q$o),e(q,H$o),e(q,ab),e(ab,$fe),e($fe,U$o),e(ab,J$o),e(ab,fG),e(fG,Y$o),e(ab,K$o),e(q,Z$o),e(q,nb),e(nb,kfe),e(kfe,eko),e(nb,oko),e(nb,mG),e(mG,rko),e(nb,tko),e(q,ako),e(q,sb),e(sb,Sfe),e(Sfe,nko),e(sb,sko),e(sb,gG),e(gG,lko),e(sb,iko),e(q,dko),e(q,lb),e(lb,Rfe),e(Rfe,cko),e(lb,fko),e(lb,hG),e(hG,mko),e(lb,gko),e(q,hko),e(q,ib),e(ib,Pfe),e(Pfe,pko),e(ib,_ko),e(ib,pG),e(pG,uko),e(ib,bko),e(q,vko),e(q,db),e(db,Bfe),e(Bfe,Fko),e(db,Tko),e(db,_G),e(_G,Mko),e(db,Eko),e(q,Cko),e(q,cb),e(cb,Ife),e(Ife,wko),e(cb,Ako),e(cb,uG),e(uG,yko),e(cb,Lko),e(q,xko),e(q,fb),e(fb,qfe),e(qfe,$ko),e(fb,kko),e(fb,bG),e(bG,Sko),e(fb,Rko),e(q,Pko),e(q,mb),e(mb,Nfe),e(Nfe,Bko),e(mb,Iko),e(mb,vG),e(vG,qko),e(mb,Nko),e(q,jko),e(q,gb),e(gb,jfe),e(jfe,Dko),e(gb,Gko),e(gb,FG),e(FG,Oko),e(gb,Vko),e(q,Xko),e(q,hb),e(hb,Dfe),e(Dfe,zko),e(hb,Wko),e(hb,TG),e(TG,Qko),e(hb,Hko),e(q,Uko),e(q,pb),e(pb,Gfe),e(Gfe,Jko),e(pb,Yko),e(pb,MG),e(MG,Kko),e(pb,Zko),e(q,eSo),e(q,_b),e(_b,Ofe),e(Ofe,oSo),e(_b,rSo),e(_b,EG),e(EG,tSo),e(_b,aSo),e(q,nSo),e(q,ub),e(ub,Vfe),e(Vfe,sSo),e(ub,lSo),e(ub,CG),e(CG,iSo),e(ub,dSo),e(q,cSo),e(q,bb),e(bb,Xfe),e(Xfe,fSo),e(bb,mSo),e(bb,wG),e(wG,gSo),e(bb,hSo),e(q,pSo),e(q,vb),e(vb,zfe),e(zfe,_So),e(vb,uSo),e(vb,AG),e(AG,bSo),e(vb,vSo),e(q,FSo),e(q,Fb),e(Fb,Wfe),e(Wfe,TSo),e(Fb,MSo),e(Fb,yG),e(yG,ESo),e(Fb,CSo),e(q,wSo),e(q,Tb),e(Tb,Qfe),e(Qfe,ASo),e(Tb,ySo),e(Tb,LG),e(LG,LSo),e(Tb,xSo),e(q,$So),e(q,Mb),e(Mb,Hfe),e(Hfe,kSo),e(Mb,SSo),e(Mb,xG),e(xG,RSo),e(Mb,PSo),e(q,BSo),e(q,Eb),e(Eb,Ufe),e(Ufe,ISo),e(Eb,qSo),e(Eb,$G),e($G,NSo),e(Eb,jSo),e(q,DSo),e(q,Cb),e(Cb,Jfe),e(Jfe,GSo),e(Cb,OSo),e(Cb,kG),e(kG,VSo),e(Cb,XSo),e(oo,zSo),e(oo,wb),e(wb,WSo),e(wb,Yfe),e(Yfe,QSo),e(wb,HSo),e(wb,Kfe),e(Kfe,USo),e(oo,JSo),M(Ab,oo,null),b(f,wqe,u),b(f,Vi,u),e(Vi,yb),e(yb,Zfe),M(_y,Zfe,null),e(Vi,YSo),e(Vi,eme),e(eme,KSo),b(f,Aqe,u),b(f,Po,u),M(uy,Po,null),e(Po,ZSo),e(Po,Xi),e(Xi,eRo),e(Xi,SG),e(SG,oRo),e(Xi,rRo),e(Xi,RG),e(RG,tRo),e(Xi,aRo),e(Po,nRo),e(Po,by),e(by,sRo),e(by,ome),e(ome,lRo),e(by,iRo),e(Po,dRo),e(Po,dt),M(vy,dt,null),e(dt,cRo),e(dt,rme),e(rme,fRo),e(dt,mRo),e(dt,zi),e(zi,gRo),e(zi,tme),e(tme,hRo),e(zi,pRo),e(zi,PG),e(PG,_Ro),e(zi,uRo),e(dt,bRo),M(Lb,dt,null),e(Po,vRo),e(Po,ro),M(Fy,ro,null),e(ro,FRo),e(ro,ame),e(ame,TRo),e(ro,MRo),e(ro,Pa),e(Pa,ERo),e(Pa,nme),e(nme,CRo),e(Pa,wRo),e(Pa,sme),e(sme,ARo),e(Pa,yRo),e(Pa,lme),e(lme,LRo),e(Pa,xRo),e(ro,$Ro),e(ro,Y),e(Y,xb),e(xb,ime),e(ime,kRo),e(xb,SRo),e(xb,BG),e(BG,RRo),e(xb,PRo),e(Y,BRo),e(Y,$b),e($b,dme),e(dme,IRo),e($b,qRo),e($b,IG),e(IG,NRo),e($b,jRo),e(Y,DRo),e(Y,kb),e(kb,cme),e(cme,GRo),e(kb,ORo),e(kb,qG),e(qG,VRo),e(kb,XRo),e(Y,zRo),e(Y,Sb),e(Sb,fme),e(fme,WRo),e(Sb,QRo),e(Sb,NG),e(NG,HRo),e(Sb,URo),e(Y,JRo),e(Y,Rb),e(Rb,mme),e(mme,YRo),e(Rb,KRo),e(Rb,jG),e(jG,ZRo),e(Rb,ePo),e(Y,oPo),e(Y,Pb),e(Pb,gme),e(gme,rPo),e(Pb,tPo),e(Pb,DG),e(DG,aPo),e(Pb,nPo),e(Y,sPo),e(Y,Bb),e(Bb,hme),e(hme,lPo),e(Bb,iPo),e(Bb,GG),e(GG,dPo),e(Bb,cPo),e(Y,fPo),e(Y,Ib),e(Ib,pme),e(pme,mPo),e(Ib,gPo),e(Ib,OG),e(OG,hPo),e(Ib,pPo),e(Y,_Po),e(Y,qb),e(qb,_me),e(_me,uPo),e(qb,bPo),e(qb,VG),e(VG,vPo),e(qb,FPo),e(Y,TPo),e(Y,Nb),e(Nb,ume),e(ume,MPo),e(Nb,EPo),e(Nb,XG),e(XG,CPo),e(Nb,wPo),e(Y,APo),e(Y,jb),e(jb,bme),e(bme,yPo),e(jb,LPo),e(jb,zG),e(zG,xPo),e(jb,$Po),e(Y,kPo),e(Y,Db),e(Db,vme),e(vme,SPo),e(Db,RPo),e(Db,WG),e(WG,PPo),e(Db,BPo),e(Y,IPo),e(Y,Gb),e(Gb,Fme),e(Fme,qPo),e(Gb,NPo),e(Gb,QG),e(QG,jPo),e(Gb,DPo),e(Y,GPo),e(Y,Ob),e(Ob,Tme),e(Tme,OPo),e(Ob,VPo),e(Ob,HG),e(HG,XPo),e(Ob,zPo),e(Y,WPo),e(Y,Vb),e(Vb,Mme),e(Mme,QPo),e(Vb,HPo),e(Vb,UG),e(UG,UPo),e(Vb,JPo),e(Y,YPo),e(Y,Xb),e(Xb,Eme),e(Eme,KPo),e(Xb,ZPo),e(Xb,JG),e(JG,eBo),e(Xb,oBo),e(Y,rBo),e(Y,zb),e(zb,Cme),e(Cme,tBo),e(zb,aBo),e(zb,YG),e(YG,nBo),e(zb,sBo),e(Y,lBo),e(Y,Wb),e(Wb,wme),e(wme,iBo),e(Wb,dBo),e(Wb,KG),e(KG,cBo),e(Wb,fBo),e(Y,mBo),e(Y,Qb),e(Qb,Ame),e(Ame,gBo),e(Qb,hBo),e(Qb,ZG),e(ZG,pBo),e(Qb,_Bo),e(Y,uBo),e(Y,Hb),e(Hb,yme),e(yme,bBo),e(Hb,vBo),e(Hb,eO),e(eO,FBo),e(Hb,TBo),e(Y,MBo),e(Y,Ub),e(Ub,Lme),e(Lme,EBo),e(Ub,CBo),e(Ub,oO),e(oO,wBo),e(Ub,ABo),e(Y,yBo),e(Y,Jb),e(Jb,xme),e(xme,LBo),e(Jb,xBo),e(Jb,rO),e(rO,$Bo),e(Jb,kBo),e(Y,SBo),e(Y,Yb),e(Yb,$me),e($me,RBo),e(Yb,PBo),e(Yb,tO),e(tO,BBo),e(Yb,IBo),e(Y,qBo),e(Y,Kb),e(Kb,kme),e(kme,NBo),e(Kb,jBo),e(Kb,aO),e(aO,DBo),e(Kb,GBo),e(Y,OBo),e(Y,Zb),e(Zb,Sme),e(Sme,VBo),e(Zb,XBo),e(Zb,nO),e(nO,zBo),e(Zb,WBo),e(Y,QBo),e(Y,e4),e(e4,Rme),e(Rme,HBo),e(e4,UBo),e(e4,sO),e(sO,JBo),e(e4,YBo),e(Y,KBo),e(Y,o4),e(o4,Pme),e(Pme,ZBo),e(o4,eIo),e(o4,lO),e(lO,oIo),e(o4,rIo),e(Y,tIo),e(Y,r4),e(r4,Bme),e(Bme,aIo),e(r4,nIo),e(r4,iO),e(iO,sIo),e(r4,lIo),e(Y,iIo),e(Y,t4),e(t4,Ime),e(Ime,dIo),e(t4,cIo),e(t4,dO),e(dO,fIo),e(t4,mIo),e(ro,gIo),e(ro,a4),e(a4,hIo),e(a4,qme),e(qme,pIo),e(a4,_Io),e(a4,Nme),e(Nme,uIo),e(ro,bIo),M(n4,ro,null),b(f,yqe,u),b(f,Wi,u),e(Wi,s4),e(s4,jme),M(Ty,jme,null),e(Wi,vIo),e(Wi,Dme),e(Dme,FIo),b(f,Lqe,u),b(f,Bo,u),M(My,Bo,null),e(Bo,TIo),e(Bo,Qi),e(Qi,MIo),e(Qi,cO),e(cO,EIo),e(Qi,CIo),e(Qi,fO),e(fO,wIo),e(Qi,AIo),e(Bo,yIo),e(Bo,Ey),e(Ey,LIo),e(Ey,Gme),e(Gme,xIo),e(Ey,$Io),e(Bo,kIo),e(Bo,ct),M(Cy,ct,null),e(ct,SIo),e(ct,Ome),e(Ome,RIo),e(ct,PIo),e(ct,Hi),e(Hi,BIo),e(Hi,Vme),e(Vme,IIo),e(Hi,qIo),e(Hi,mO),e(mO,NIo),e(Hi,jIo),e(ct,DIo),M(l4,ct,null),e(Bo,GIo),e(Bo,to),M(wy,to,null),e(to,OIo),e(to,Xme),e(Xme,VIo),e(to,XIo),e(to,Ba),e(Ba,zIo),e(Ba,zme),e(zme,WIo),e(Ba,QIo),e(Ba,Wme),e(Wme,HIo),e(Ba,UIo),e(Ba,Qme),e(Qme,JIo),e(Ba,YIo),e(to,KIo),e(to,Yr),e(Yr,i4),e(i4,Hme),e(Hme,ZIo),e(i4,eqo),e(i4,gO),e(gO,oqo),e(i4,rqo),e(Yr,tqo),e(Yr,d4),e(d4,Ume),e(Ume,aqo),e(d4,nqo),e(d4,hO),e(hO,sqo),e(d4,lqo),e(Yr,iqo),e(Yr,c4),e(c4,Jme),e(Jme,dqo),e(c4,cqo),e(c4,pO),e(pO,fqo),e(c4,mqo),e(Yr,gqo),e(Yr,f4),e(f4,Yme),e(Yme,hqo),e(f4,pqo),e(f4,_O),e(_O,_qo),e(f4,uqo),e(Yr,bqo),e(Yr,m4),e(m4,Kme),e(Kme,vqo),e(m4,Fqo),e(m4,uO),e(uO,Tqo),e(m4,Mqo),e(to,Eqo),e(to,g4),e(g4,Cqo),e(g4,Zme),e(Zme,wqo),e(g4,Aqo),e(g4,ege),e(ege,yqo),e(to,Lqo),M(h4,to,null),b(f,xqe,u),b(f,Ui,u),e(Ui,p4),e(p4,oge),M(Ay,oge,null),e(Ui,xqo),e(Ui,rge),e(rge,$qo),b(f,$qe,u),b(f,Io,u),M(yy,Io,null),e(Io,kqo),e(Io,Ji),e(Ji,Sqo),e(Ji,bO),e(bO,Rqo),e(Ji,Pqo),e(Ji,vO),e(vO,Bqo),e(Ji,Iqo),e(Io,qqo),e(Io,Ly),e(Ly,Nqo),e(Ly,tge),e(tge,jqo),e(Ly,Dqo),e(Io,Gqo),e(Io,ft),M(xy,ft,null),e(ft,Oqo),e(ft,age),e(age,Vqo),e(ft,Xqo),e(ft,Yi),e(Yi,zqo),e(Yi,nge),e(nge,Wqo),e(Yi,Qqo),e(Yi,FO),e(FO,Hqo),e(Yi,Uqo),e(ft,Jqo),M(_4,ft,null),e(Io,Yqo),e(Io,ao),M($y,ao,null),e(ao,Kqo),e(ao,sge),e(sge,Zqo),e(ao,eNo),e(ao,Ia),e(Ia,oNo),e(Ia,lge),e(lge,rNo),e(Ia,tNo),e(Ia,ige),e(ige,aNo),e(Ia,nNo),e(Ia,dge),e(dge,sNo),e(Ia,lNo),e(ao,iNo),e(ao,U),e(U,u4),e(u4,cge),e(cge,dNo),e(u4,cNo),e(u4,TO),e(TO,fNo),e(u4,mNo),e(U,gNo),e(U,b4),e(b4,fge),e(fge,hNo),e(b4,pNo),e(b4,MO),e(MO,_No),e(b4,uNo),e(U,bNo),e(U,v4),e(v4,mge),e(mge,vNo),e(v4,FNo),e(v4,EO),e(EO,TNo),e(v4,MNo),e(U,ENo),e(U,F4),e(F4,gge),e(gge,CNo),e(F4,wNo),e(F4,CO),e(CO,ANo),e(F4,yNo),e(U,LNo),e(U,T4),e(T4,hge),e(hge,xNo),e(T4,$No),e(T4,wO),e(wO,kNo),e(T4,SNo),e(U,RNo),e(U,M4),e(M4,pge),e(pge,PNo),e(M4,BNo),e(M4,AO),e(AO,INo),e(M4,qNo),e(U,NNo),e(U,E4),e(E4,_ge),e(_ge,jNo),e(E4,DNo),e(E4,yO),e(yO,GNo),e(E4,ONo),e(U,VNo),e(U,C4),e(C4,uge),e(uge,XNo),e(C4,zNo),e(C4,LO),e(LO,WNo),e(C4,QNo),e(U,HNo),e(U,w4),e(w4,bge),e(bge,UNo),e(w4,JNo),e(w4,xO),e(xO,YNo),e(w4,KNo),e(U,ZNo),e(U,A4),e(A4,vge),e(vge,ejo),e(A4,ojo),e(A4,$O),e($O,rjo),e(A4,tjo),e(U,ajo),e(U,y4),e(y4,Fge),e(Fge,njo),e(y4,sjo),e(y4,kO),e(kO,ljo),e(y4,ijo),e(U,djo),e(U,L4),e(L4,Tge),e(Tge,cjo),e(L4,fjo),e(L4,SO),e(SO,mjo),e(L4,gjo),e(U,hjo),e(U,x4),e(x4,Mge),e(Mge,pjo),e(x4,_jo),e(x4,RO),e(RO,ujo),e(x4,bjo),e(U,vjo),e(U,$4),e($4,Ege),e(Ege,Fjo),e($4,Tjo),e($4,PO),e(PO,Mjo),e($4,Ejo),e(U,Cjo),e(U,k4),e(k4,Cge),e(Cge,wjo),e(k4,Ajo),e(k4,BO),e(BO,yjo),e(k4,Ljo),e(U,xjo),e(U,S4),e(S4,wge),e(wge,$jo),e(S4,kjo),e(S4,IO),e(IO,Sjo),e(S4,Rjo),e(U,Pjo),e(U,R4),e(R4,Age),e(Age,Bjo),e(R4,Ijo),e(R4,qO),e(qO,qjo),e(R4,Njo),e(U,jjo),e(U,P4),e(P4,yge),e(yge,Djo),e(P4,Gjo),e(P4,NO),e(NO,Ojo),e(P4,Vjo),e(U,Xjo),e(U,B4),e(B4,Lge),e(Lge,zjo),e(B4,Wjo),e(B4,jO),e(jO,Qjo),e(B4,Hjo),e(U,Ujo),e(U,I4),e(I4,xge),e(xge,Jjo),e(I4,Yjo),e(I4,DO),e(DO,Kjo),e(I4,Zjo),e(U,eDo),e(U,q4),e(q4,$ge),e($ge,oDo),e(q4,rDo),e(q4,GO),e(GO,tDo),e(q4,aDo),e(U,nDo),e(U,N4),e(N4,kge),e(kge,sDo),e(N4,lDo),e(N4,OO),e(OO,iDo),e(N4,dDo),e(U,cDo),e(U,j4),e(j4,Sge),e(Sge,fDo),e(j4,mDo),e(j4,VO),e(VO,gDo),e(j4,hDo),e(U,pDo),e(U,D4),e(D4,Rge),e(Rge,_Do),e(D4,uDo),e(D4,XO),e(XO,bDo),e(D4,vDo),e(U,FDo),e(U,G4),e(G4,Pge),e(Pge,TDo),e(G4,MDo),e(G4,zO),e(zO,EDo),e(G4,CDo),e(U,wDo),e(U,O4),e(O4,Bge),e(Bge,ADo),e(O4,yDo),e(O4,WO),e(WO,LDo),e(O4,xDo),e(U,$Do),e(U,V4),e(V4,Ige),e(Ige,kDo),e(V4,SDo),e(V4,QO),e(QO,RDo),e(V4,PDo),e(U,BDo),e(U,X4),e(X4,qge),e(qge,IDo),e(X4,qDo),e(X4,HO),e(HO,NDo),e(X4,jDo),e(U,DDo),e(U,z4),e(z4,Nge),e(Nge,GDo),e(z4,ODo),e(z4,UO),e(UO,VDo),e(z4,XDo),e(U,zDo),e(U,W4),e(W4,jge),e(jge,WDo),e(W4,QDo),e(W4,JO),e(JO,HDo),e(W4,UDo),e(U,JDo),e(U,Q4),e(Q4,Dge),e(Dge,YDo),e(Q4,KDo),e(Q4,YO),e(YO,ZDo),e(Q4,eGo),e(U,oGo),e(U,H4),e(H4,Gge),e(Gge,rGo),e(H4,tGo),e(H4,KO),e(KO,aGo),e(H4,nGo),e(U,sGo),e(U,U4),e(U4,Oge),e(Oge,lGo),e(U4,iGo),e(U4,ZO),e(ZO,dGo),e(U4,cGo),e(ao,fGo),e(ao,J4),e(J4,mGo),e(J4,Vge),e(Vge,gGo),e(J4,hGo),e(J4,Xge),e(Xge,pGo),e(ao,_Go),M(Y4,ao,null),b(f,kqe,u),b(f,Ki,u),e(Ki,K4),e(K4,zge),M(ky,zge,null),e(Ki,uGo),e(Ki,Wge),e(Wge,bGo),b(f,Sqe,u),b(f,qo,u),M(Sy,qo,null),e(qo,vGo),e(qo,Zi),e(Zi,FGo),e(Zi,eV),e(eV,TGo),e(Zi,MGo),e(Zi,oV),e(oV,EGo),e(Zi,CGo),e(qo,wGo),e(qo,Ry),e(Ry,AGo),e(Ry,Qge),e(Qge,yGo),e(Ry,LGo),e(qo,xGo),e(qo,mt),M(Py,mt,null),e(mt,$Go),e(mt,Hge),e(Hge,kGo),e(mt,SGo),e(mt,ed),e(ed,RGo),e(ed,Uge),e(Uge,PGo),e(ed,BGo),e(ed,rV),e(rV,IGo),e(ed,qGo),e(mt,NGo),M(Z4,mt,null),e(qo,jGo),e(qo,no),M(By,no,null),e(no,DGo),e(no,Jge),e(Jge,GGo),e(no,OGo),e(no,qa),e(qa,VGo),e(qa,Yge),e(Yge,XGo),e(qa,zGo),e(qa,Kge),e(Kge,WGo),e(qa,QGo),e(qa,Zge),e(Zge,HGo),e(qa,UGo),e(no,JGo),e(no,V),e(V,e5),e(e5,ehe),e(ehe,YGo),e(e5,KGo),e(e5,tV),e(tV,ZGo),e(e5,eOo),e(V,oOo),e(V,o5),e(o5,ohe),e(ohe,rOo),e(o5,tOo),e(o5,aV),e(aV,aOo),e(o5,nOo),e(V,sOo),e(V,r5),e(r5,rhe),e(rhe,lOo),e(r5,iOo),e(r5,nV),e(nV,dOo),e(r5,cOo),e(V,fOo),e(V,t5),e(t5,the),e(the,mOo),e(t5,gOo),e(t5,sV),e(sV,hOo),e(t5,pOo),e(V,_Oo),e(V,a5),e(a5,ahe),e(ahe,uOo),e(a5,bOo),e(a5,lV),e(lV,vOo),e(a5,FOo),e(V,TOo),e(V,n5),e(n5,nhe),e(nhe,MOo),e(n5,EOo),e(n5,iV),e(iV,COo),e(n5,wOo),e(V,AOo),e(V,s5),e(s5,she),e(she,yOo),e(s5,LOo),e(s5,dV),e(dV,xOo),e(s5,$Oo),e(V,kOo),e(V,l5),e(l5,lhe),e(lhe,SOo),e(l5,ROo),e(l5,cV),e(cV,POo),e(l5,BOo),e(V,IOo),e(V,i5),e(i5,ihe),e(ihe,qOo),e(i5,NOo),e(i5,fV),e(fV,jOo),e(i5,DOo),e(V,GOo),e(V,d5),e(d5,dhe),e(dhe,OOo),e(d5,VOo),e(d5,mV),e(mV,XOo),e(d5,zOo),e(V,WOo),e(V,c5),e(c5,che),e(che,QOo),e(c5,HOo),e(c5,gV),e(gV,UOo),e(c5,JOo),e(V,YOo),e(V,f5),e(f5,fhe),e(fhe,KOo),e(f5,ZOo),e(f5,hV),e(hV,eVo),e(f5,oVo),e(V,rVo),e(V,m5),e(m5,mhe),e(mhe,tVo),e(m5,aVo),e(m5,pV),e(pV,nVo),e(m5,sVo),e(V,lVo),e(V,g5),e(g5,ghe),e(ghe,iVo),e(g5,dVo),e(g5,_V),e(_V,cVo),e(g5,fVo),e(V,mVo),e(V,h5),e(h5,hhe),e(hhe,gVo),e(h5,hVo),e(h5,uV),e(uV,pVo),e(h5,_Vo),e(V,uVo),e(V,p5),e(p5,phe),e(phe,bVo),e(p5,vVo),e(p5,bV),e(bV,FVo),e(p5,TVo),e(V,MVo),e(V,_5),e(_5,_he),e(_he,EVo),e(_5,CVo),e(_5,vV),e(vV,wVo),e(_5,AVo),e(V,yVo),e(V,u5),e(u5,uhe),e(uhe,LVo),e(u5,xVo),e(u5,FV),e(FV,$Vo),e(u5,kVo),e(V,SVo),e(V,b5),e(b5,bhe),e(bhe,RVo),e(b5,PVo),e(b5,TV),e(TV,BVo),e(b5,IVo),e(V,qVo),e(V,v5),e(v5,vhe),e(vhe,NVo),e(v5,jVo),e(v5,MV),e(MV,DVo),e(v5,GVo),e(V,OVo),e(V,F5),e(F5,Fhe),e(Fhe,VVo),e(F5,XVo),e(F5,EV),e(EV,zVo),e(F5,WVo),e(V,QVo),e(V,T5),e(T5,The),e(The,HVo),e(T5,UVo),e(T5,CV),e(CV,JVo),e(T5,YVo),e(V,KVo),e(V,M5),e(M5,Mhe),e(Mhe,ZVo),e(M5,eXo),e(M5,wV),e(wV,oXo),e(M5,rXo),e(V,tXo),e(V,E5),e(E5,Ehe),e(Ehe,aXo),e(E5,nXo),e(E5,AV),e(AV,sXo),e(E5,lXo),e(V,iXo),e(V,C5),e(C5,Che),e(Che,dXo),e(C5,cXo),e(C5,yV),e(yV,fXo),e(C5,mXo),e(V,gXo),e(V,w5),e(w5,whe),e(whe,hXo),e(w5,pXo),e(w5,LV),e(LV,_Xo),e(w5,uXo),e(V,bXo),e(V,A5),e(A5,Ahe),e(Ahe,vXo),e(A5,FXo),e(A5,xV),e(xV,TXo),e(A5,MXo),e(V,EXo),e(V,y5),e(y5,yhe),e(yhe,CXo),e(y5,wXo),e(y5,$V),e($V,AXo),e(y5,yXo),e(V,LXo),e(V,L5),e(L5,Lhe),e(Lhe,xXo),e(L5,$Xo),e(L5,kV),e(kV,kXo),e(L5,SXo),e(V,RXo),e(V,x5),e(x5,xhe),e(xhe,PXo),e(x5,BXo),e(x5,SV),e(SV,IXo),e(x5,qXo),e(V,NXo),e(V,$5),e($5,$he),e($he,jXo),e($5,DXo),e($5,RV),e(RV,GXo),e($5,OXo),e(V,VXo),e(V,k5),e(k5,khe),e(khe,XXo),e(k5,zXo),e(k5,PV),e(PV,WXo),e(k5,QXo),e(V,HXo),e(V,S5),e(S5,She),e(She,UXo),e(S5,JXo),e(S5,BV),e(BV,YXo),e(S5,KXo),e(V,ZXo),e(V,R5),e(R5,Rhe),e(Rhe,ezo),e(R5,ozo),e(R5,IV),e(IV,rzo),e(R5,tzo),e(V,azo),e(V,P5),e(P5,Phe),e(Phe,nzo),e(P5,szo),e(P5,qV),e(qV,lzo),e(P5,izo),e(V,dzo),e(V,B5),e(B5,Bhe),e(Bhe,czo),e(B5,fzo),e(B5,NV),e(NV,mzo),e(B5,gzo),e(V,hzo),e(V,I5),e(I5,Ihe),e(Ihe,pzo),e(I5,_zo),e(I5,jV),e(jV,uzo),e(I5,bzo),e(V,vzo),e(V,q5),e(q5,qhe),e(qhe,Fzo),e(q5,Tzo),e(q5,DV),e(DV,Mzo),e(q5,Ezo),e(V,Czo),e(V,N5),e(N5,Nhe),e(Nhe,wzo),e(N5,Azo),e(N5,GV),e(GV,yzo),e(N5,Lzo),e(no,xzo),e(no,j5),e(j5,$zo),e(j5,jhe),e(jhe,kzo),e(j5,Szo),e(j5,Dhe),e(Dhe,Rzo),e(no,Pzo),M(D5,no,null),b(f,Rqe,u),b(f,od,u),e(od,G5),e(G5,Ghe),M(Iy,Ghe,null),e(od,Bzo),e(od,Ohe),e(Ohe,Izo),b(f,Pqe,u),b(f,No,u),M(qy,No,null),e(No,qzo),e(No,rd),e(rd,Nzo),e(rd,OV),e(OV,jzo),e(rd,Dzo),e(rd,VV),e(VV,Gzo),e(rd,Ozo),e(No,Vzo),e(No,Ny),e(Ny,Xzo),e(Ny,Vhe),e(Vhe,zzo),e(Ny,Wzo),e(No,Qzo),e(No,gt),M(jy,gt,null),e(gt,Hzo),e(gt,Xhe),e(Xhe,Uzo),e(gt,Jzo),e(gt,td),e(td,Yzo),e(td,zhe),e(zhe,Kzo),e(td,Zzo),e(td,XV),e(XV,eWo),e(td,oWo),e(gt,rWo),M(O5,gt,null),e(No,tWo),e(No,so),M(Dy,so,null),e(so,aWo),e(so,Whe),e(Whe,nWo),e(so,sWo),e(so,Na),e(Na,lWo),e(Na,Qhe),e(Qhe,iWo),e(Na,dWo),e(Na,Hhe),e(Hhe,cWo),e(Na,fWo),e(Na,Uhe),e(Uhe,mWo),e(Na,gWo),e(so,hWo),e(so,Jhe),e(Jhe,V5),e(V5,Yhe),e(Yhe,pWo),e(V5,_Wo),e(V5,zV),e(zV,uWo),e(V5,bWo),e(so,vWo),e(so,X5),e(X5,FWo),e(X5,Khe),e(Khe,TWo),e(X5,MWo),e(X5,Zhe),e(Zhe,EWo),e(so,CWo),M(z5,so,null),b(f,Bqe,u),b(f,ad,u),e(ad,W5),e(W5,epe),M(Gy,epe,null),e(ad,wWo),e(ad,ope),e(ope,AWo),b(f,Iqe,u),b(f,jo,u),M(Oy,jo,null),e(jo,yWo),e(jo,nd),e(nd,LWo),e(nd,WV),e(WV,xWo),e(nd,$Wo),e(nd,QV),e(QV,kWo),e(nd,SWo),e(jo,RWo),e(jo,Vy),e(Vy,PWo),e(Vy,rpe),e(rpe,BWo),e(Vy,IWo),e(jo,qWo),e(jo,ht),M(Xy,ht,null),e(ht,NWo),e(ht,tpe),e(tpe,jWo),e(ht,DWo),e(ht,sd),e(sd,GWo),e(sd,ape),e(ape,OWo),e(sd,VWo),e(sd,HV),e(HV,XWo),e(sd,zWo),e(ht,WWo),M(Q5,ht,null),e(jo,QWo),e(jo,lo),M(zy,lo,null),e(lo,HWo),e(lo,npe),e(npe,UWo),e(lo,JWo),e(lo,ja),e(ja,YWo),e(ja,spe),e(spe,KWo),e(ja,ZWo),e(ja,lpe),e(lpe,eQo),e(ja,oQo),e(ja,ipe),e(ipe,rQo),e(ja,tQo),e(lo,aQo),e(lo,Fe),e(Fe,H5),e(H5,dpe),e(dpe,nQo),e(H5,sQo),e(H5,UV),e(UV,lQo),e(H5,iQo),e(Fe,dQo),e(Fe,U5),e(U5,cpe),e(cpe,cQo),e(U5,fQo),e(U5,JV),e(JV,mQo),e(U5,gQo),e(Fe,hQo),e(Fe,J5),e(J5,fpe),e(fpe,pQo),e(J5,_Qo),e(J5,YV),e(YV,uQo),e(J5,bQo),e(Fe,vQo),e(Fe,Y5),e(Y5,mpe),e(mpe,FQo),e(Y5,TQo),e(Y5,KV),e(KV,MQo),e(Y5,EQo),e(Fe,CQo),e(Fe,Bs),e(Bs,gpe),e(gpe,wQo),e(Bs,AQo),e(Bs,ZV),e(ZV,yQo),e(Bs,LQo),e(Bs,eX),e(eX,xQo),e(Bs,$Qo),e(Fe,kQo),e(Fe,K5),e(K5,hpe),e(hpe,SQo),e(K5,RQo),e(K5,oX),e(oX,PQo),e(K5,BQo),e(Fe,IQo),e(Fe,pt),e(pt,ppe),e(ppe,qQo),e(pt,NQo),e(pt,rX),e(rX,jQo),e(pt,DQo),e(pt,tX),e(tX,GQo),e(pt,OQo),e(pt,aX),e(aX,VQo),e(pt,XQo),e(Fe,zQo),e(Fe,Z5),e(Z5,_pe),e(_pe,WQo),e(Z5,QQo),e(Z5,nX),e(nX,HQo),e(Z5,UQo),e(Fe,JQo),e(Fe,ev),e(ev,upe),e(upe,YQo),e(ev,KQo),e(ev,sX),e(sX,ZQo),e(ev,eHo),e(Fe,oHo),e(Fe,ov),e(ov,bpe),e(bpe,rHo),e(ov,tHo),e(ov,lX),e(lX,aHo),e(ov,nHo),e(Fe,sHo),e(Fe,rv),e(rv,vpe),e(vpe,lHo),e(rv,iHo),e(rv,iX),e(iX,dHo),e(rv,cHo),e(Fe,fHo),e(Fe,tv),e(tv,Fpe),e(Fpe,mHo),e(tv,gHo),e(tv,dX),e(dX,hHo),e(tv,pHo),e(Fe,_Ho),e(Fe,av),e(av,Tpe),e(Tpe,uHo),e(av,bHo),e(av,cX),e(cX,vHo),e(av,FHo),e(Fe,THo),e(Fe,nv),e(nv,Mpe),e(Mpe,MHo),e(nv,EHo),e(nv,fX),e(fX,CHo),e(nv,wHo),e(lo,AHo),e(lo,sv),e(sv,yHo),e(sv,Epe),e(Epe,LHo),e(sv,xHo),e(sv,Cpe),e(Cpe,$Ho),e(lo,kHo),M(lv,lo,null),b(f,qqe,u),b(f,ld,u),e(ld,iv),e(iv,wpe),M(Wy,wpe,null),e(ld,SHo),e(ld,Ape),e(Ape,RHo),b(f,Nqe,u),b(f,Do,u),M(Qy,Do,null),e(Do,PHo),e(Do,id),e(id,BHo),e(id,mX),e(mX,IHo),e(id,qHo),e(id,gX),e(gX,NHo),e(id,jHo),e(Do,DHo),e(Do,Hy),e(Hy,GHo),e(Hy,ype),e(ype,OHo),e(Hy,VHo),e(Do,XHo),e(Do,_t),M(Uy,_t,null),e(_t,zHo),e(_t,Lpe),e(Lpe,WHo),e(_t,QHo),e(_t,dd),e(dd,HHo),e(dd,xpe),e(xpe,UHo),e(dd,JHo),e(dd,hX),e(hX,YHo),e(dd,KHo),e(_t,ZHo),M(dv,_t,null),e(Do,eUo),e(Do,io),M(Jy,io,null),e(io,oUo),e(io,$pe),e($pe,rUo),e(io,tUo),e(io,Da),e(Da,aUo),e(Da,kpe),e(kpe,nUo),e(Da,sUo),e(Da,Spe),e(Spe,lUo),e(Da,iUo),e(Da,Rpe),e(Rpe,dUo),e(Da,cUo),e(io,fUo),e(io,Ppe),e(Ppe,cv),e(cv,Bpe),e(Bpe,mUo),e(cv,gUo),e(cv,pX),e(pX,hUo),e(cv,pUo),e(io,_Uo),e(io,fv),e(fv,uUo),e(fv,Ipe),e(Ipe,bUo),e(fv,vUo),e(fv,qpe),e(qpe,FUo),e(io,TUo),M(mv,io,null),b(f,jqe,u),b(f,cd,u),e(cd,gv),e(gv,Npe),M(Yy,Npe,null),e(cd,MUo),e(cd,jpe),e(jpe,EUo),b(f,Dqe,u),b(f,Go,u),M(Ky,Go,null),e(Go,CUo),e(Go,fd),e(fd,wUo),e(fd,_X),e(_X,AUo),e(fd,yUo),e(fd,uX),e(uX,LUo),e(fd,xUo),e(Go,$Uo),e(Go,Zy),e(Zy,kUo),e(Zy,Dpe),e(Dpe,SUo),e(Zy,RUo),e(Go,PUo),e(Go,ut),M(eL,ut,null),e(ut,BUo),e(ut,Gpe),e(Gpe,IUo),e(ut,qUo),e(ut,md),e(md,NUo),e(md,Ope),e(Ope,jUo),e(md,DUo),e(md,bX),e(bX,GUo),e(md,OUo),e(ut,VUo),M(hv,ut,null),e(Go,XUo),e(Go,co),M(oL,co,null),e(co,zUo),e(co,Vpe),e(Vpe,WUo),e(co,QUo),e(co,Ga),e(Ga,HUo),e(Ga,Xpe),e(Xpe,UUo),e(Ga,JUo),e(Ga,zpe),e(zpe,YUo),e(Ga,KUo),e(Ga,Wpe),e(Wpe,ZUo),e(Ga,eJo),e(co,oJo),e(co,ke),e(ke,pv),e(pv,Qpe),e(Qpe,rJo),e(pv,tJo),e(pv,vX),e(vX,aJo),e(pv,nJo),e(ke,sJo),e(ke,_v),e(_v,Hpe),e(Hpe,lJo),e(_v,iJo),e(_v,FX),e(FX,dJo),e(_v,cJo),e(ke,fJo),e(ke,uv),e(uv,Upe),e(Upe,mJo),e(uv,gJo),e(uv,TX),e(TX,hJo),e(uv,pJo),e(ke,_Jo),e(ke,bv),e(bv,Jpe),e(Jpe,uJo),e(bv,bJo),e(bv,MX),e(MX,vJo),e(bv,FJo),e(ke,TJo),e(ke,vv),e(vv,Ype),e(Ype,MJo),e(vv,EJo),e(vv,EX),e(EX,CJo),e(vv,wJo),e(ke,AJo),e(ke,Fv),e(Fv,Kpe),e(Kpe,yJo),e(Fv,LJo),e(Fv,CX),e(CX,xJo),e(Fv,$Jo),e(ke,kJo),e(ke,Tv),e(Tv,Zpe),e(Zpe,SJo),e(Tv,RJo),e(Tv,wX),e(wX,PJo),e(Tv,BJo),e(ke,IJo),e(ke,Mv),e(Mv,e_e),e(e_e,qJo),e(Mv,NJo),e(Mv,AX),e(AX,jJo),e(Mv,DJo),e(ke,GJo),e(ke,Ev),e(Ev,o_e),e(o_e,OJo),e(Ev,VJo),e(Ev,yX),e(yX,XJo),e(Ev,zJo),e(co,WJo),e(co,Cv),e(Cv,QJo),e(Cv,r_e),e(r_e,HJo),e(Cv,UJo),e(Cv,t_e),e(t_e,JJo),e(co,YJo),M(wv,co,null),b(f,Gqe,u),b(f,gd,u),e(gd,Av),e(Av,a_e),M(rL,a_e,null),e(gd,KJo),e(gd,n_e),e(n_e,ZJo),b(f,Oqe,u),b(f,Oo,u),M(tL,Oo,null),e(Oo,eYo),e(Oo,hd),e(hd,oYo),e(hd,LX),e(LX,rYo),e(hd,tYo),e(hd,xX),e(xX,aYo),e(hd,nYo),e(Oo,sYo),e(Oo,aL),e(aL,lYo),e(aL,s_e),e(s_e,iYo),e(aL,dYo),e(Oo,cYo),e(Oo,bt),M(nL,bt,null),e(bt,fYo),e(bt,l_e),e(l_e,mYo),e(bt,gYo),e(bt,pd),e(pd,hYo),e(pd,i_e),e(i_e,pYo),e(pd,_Yo),e(pd,$X),e($X,uYo),e(pd,bYo),e(bt,vYo),M(yv,bt,null),e(Oo,FYo),e(Oo,fo),M(sL,fo,null),e(fo,TYo),e(fo,d_e),e(d_e,MYo),e(fo,EYo),e(fo,Oa),e(Oa,CYo),e(Oa,c_e),e(c_e,wYo),e(Oa,AYo),e(Oa,f_e),e(f_e,yYo),e(Oa,LYo),e(Oa,m_e),e(m_e,xYo),e(Oa,$Yo),e(fo,kYo),e(fo,Kr),e(Kr,Lv),e(Lv,g_e),e(g_e,SYo),e(Lv,RYo),e(Lv,kX),e(kX,PYo),e(Lv,BYo),e(Kr,IYo),e(Kr,xv),e(xv,h_e),e(h_e,qYo),e(xv,NYo),e(xv,SX),e(SX,jYo),e(xv,DYo),e(Kr,GYo),e(Kr,$v),e($v,p_e),e(p_e,OYo),e($v,VYo),e($v,RX),e(RX,XYo),e($v,zYo),e(Kr,WYo),e(Kr,kv),e(kv,__e),e(__e,QYo),e(kv,HYo),e(kv,PX),e(PX,UYo),e(kv,JYo),e(Kr,YYo),e(Kr,Sv),e(Sv,u_e),e(u_e,KYo),e(Sv,ZYo),e(Sv,BX),e(BX,eKo),e(Sv,oKo),e(fo,rKo),e(fo,Rv),e(Rv,tKo),e(Rv,b_e),e(b_e,aKo),e(Rv,nKo),e(Rv,v_e),e(v_e,sKo),e(fo,lKo),M(Pv,fo,null),b(f,Vqe,u),b(f,_d,u),e(_d,Bv),e(Bv,F_e),M(lL,F_e,null),e(_d,iKo),e(_d,T_e),e(T_e,dKo),b(f,Xqe,u),b(f,Vo,u),M(iL,Vo,null),e(Vo,cKo),e(Vo,ud),e(ud,fKo),e(ud,IX),e(IX,mKo),e(ud,gKo),e(ud,qX),e(qX,hKo),e(ud,pKo),e(Vo,_Ko),e(Vo,dL),e(dL,uKo),e(dL,M_e),e(M_e,bKo),e(dL,vKo),e(Vo,FKo),e(Vo,vt),M(cL,vt,null),e(vt,TKo),e(vt,E_e),e(E_e,MKo),e(vt,EKo),e(vt,bd),e(bd,CKo),e(bd,C_e),e(C_e,wKo),e(bd,AKo),e(bd,NX),e(NX,yKo),e(bd,LKo),e(vt,xKo),M(Iv,vt,null),e(Vo,$Ko),e(Vo,mo),M(fL,mo,null),e(mo,kKo),e(mo,w_e),e(w_e,SKo),e(mo,RKo),e(mo,Va),e(Va,PKo),e(Va,A_e),e(A_e,BKo),e(Va,IKo),e(Va,y_e),e(y_e,qKo),e(Va,NKo),e(Va,L_e),e(L_e,jKo),e(Va,DKo),e(mo,GKo),e(mo,Se),e(Se,qv),e(qv,x_e),e(x_e,OKo),e(qv,VKo),e(qv,jX),e(jX,XKo),e(qv,zKo),e(Se,WKo),e(Se,Nv),e(Nv,$_e),e($_e,QKo),e(Nv,HKo),e(Nv,DX),e(DX,UKo),e(Nv,JKo),e(Se,YKo),e(Se,jv),e(jv,k_e),e(k_e,KKo),e(jv,ZKo),e(jv,GX),e(GX,eZo),e(jv,oZo),e(Se,rZo),e(Se,Dv),e(Dv,S_e),e(S_e,tZo),e(Dv,aZo),e(Dv,OX),e(OX,nZo),e(Dv,sZo),e(Se,lZo),e(Se,Gv),e(Gv,R_e),e(R_e,iZo),e(Gv,dZo),e(Gv,VX),e(VX,cZo),e(Gv,fZo),e(Se,mZo),e(Se,Ov),e(Ov,P_e),e(P_e,gZo),e(Ov,hZo),e(Ov,XX),e(XX,pZo),e(Ov,_Zo),e(Se,uZo),e(Se,Vv),e(Vv,B_e),e(B_e,bZo),e(Vv,vZo),e(Vv,zX),e(zX,FZo),e(Vv,TZo),e(Se,MZo),e(Se,Xv),e(Xv,I_e),e(I_e,EZo),e(Xv,CZo),e(Xv,WX),e(WX,wZo),e(Xv,AZo),e(Se,yZo),e(Se,zv),e(zv,q_e),e(q_e,LZo),e(zv,xZo),e(zv,QX),e(QX,$Zo),e(zv,kZo),e(mo,SZo),e(mo,Wv),e(Wv,RZo),e(Wv,N_e),e(N_e,PZo),e(Wv,BZo),e(Wv,j_e),e(j_e,IZo),e(mo,qZo),M(Qv,mo,null),b(f,zqe,u),b(f,vd,u),e(vd,Hv),e(Hv,D_e),M(mL,D_e,null),e(vd,NZo),e(vd,G_e),e(G_e,jZo),b(f,Wqe,u),b(f,Xo,u),M(gL,Xo,null),e(Xo,DZo),e(Xo,Fd),e(Fd,GZo),e(Fd,HX),e(HX,OZo),e(Fd,VZo),e(Fd,UX),e(UX,XZo),e(Fd,zZo),e(Xo,WZo),e(Xo,hL),e(hL,QZo),e(hL,O_e),e(O_e,HZo),e(hL,UZo),e(Xo,JZo),e(Xo,Ft),M(pL,Ft,null),e(Ft,YZo),e(Ft,V_e),e(V_e,KZo),e(Ft,ZZo),e(Ft,Td),e(Td,eer),e(Td,X_e),e(X_e,oer),e(Td,rer),e(Td,JX),e(JX,ter),e(Td,aer),e(Ft,ner),M(Uv,Ft,null),e(Xo,ser),e(Xo,go),M(_L,go,null),e(go,ler),e(go,z_e),e(z_e,ier),e(go,der),e(go,Xa),e(Xa,cer),e(Xa,W_e),e(W_e,fer),e(Xa,mer),e(Xa,Q_e),e(Q_e,ger),e(Xa,her),e(Xa,H_e),e(H_e,per),e(Xa,_er),e(go,uer),e(go,uL),e(uL,Jv),e(Jv,U_e),e(U_e,ber),e(Jv,ver),e(Jv,YX),e(YX,Fer),e(Jv,Ter),e(uL,Mer),e(uL,Yv),e(Yv,J_e),e(J_e,Eer),e(Yv,Cer),e(Yv,KX),e(KX,wer),e(Yv,Aer),e(go,yer),e(go,Kv),e(Kv,Ler),e(Kv,Y_e),e(Y_e,xer),e(Kv,$er),e(Kv,K_e),e(K_e,ker),e(go,Ser),M(Zv,go,null),b(f,Qqe,u),b(f,Md,u),e(Md,eF),e(eF,Z_e),M(bL,Z_e,null),e(Md,Rer),e(Md,eue),e(eue,Per),b(f,Hqe,u),b(f,zo,u),M(vL,zo,null),e(zo,Ber),e(zo,Ed),e(Ed,Ier),e(Ed,ZX),e(ZX,qer),e(Ed,Ner),e(Ed,ez),e(ez,jer),e(Ed,Der),e(zo,Ger),e(zo,FL),e(FL,Oer),e(FL,oue),e(oue,Ver),e(FL,Xer),e(zo,zer),e(zo,Tt),M(TL,Tt,null),e(Tt,Wer),e(Tt,rue),e(rue,Qer),e(Tt,Her),e(Tt,Cd),e(Cd,Uer),e(Cd,tue),e(tue,Jer),e(Cd,Yer),e(Cd,oz),e(oz,Ker),e(Cd,Zer),e(Tt,eor),M(oF,Tt,null),e(zo,oor),e(zo,ho),M(ML,ho,null),e(ho,ror),e(ho,aue),e(aue,tor),e(ho,aor),e(ho,za),e(za,nor),e(za,nue),e(nue,sor),e(za,lor),e(za,sue),e(sue,ior),e(za,dor),e(za,lue),e(lue,cor),e(za,mor),e(ho,gor),e(ho,Zr),e(Zr,rF),e(rF,iue),e(iue,hor),e(rF,por),e(rF,rz),e(rz,_or),e(rF,uor),e(Zr,bor),e(Zr,tF),e(tF,due),e(due,vor),e(tF,For),e(tF,tz),e(tz,Tor),e(tF,Mor),e(Zr,Eor),e(Zr,aF),e(aF,cue),e(cue,Cor),e(aF,wor),e(aF,az),e(az,Aor),e(aF,yor),e(Zr,Lor),e(Zr,nF),e(nF,fue),e(fue,xor),e(nF,$or),e(nF,nz),e(nz,kor),e(nF,Sor),e(Zr,Ror),e(Zr,sF),e(sF,mue),e(mue,Por),e(sF,Bor),e(sF,sz),e(sz,Ior),e(sF,qor),e(ho,Nor),e(ho,lF),e(lF,jor),e(lF,gue),e(gue,Dor),e(lF,Gor),e(lF,hue),e(hue,Oor),e(ho,Vor),M(iF,ho,null),b(f,Uqe,u),b(f,wd,u),e(wd,dF),e(dF,pue),M(EL,pue,null),e(wd,Xor),e(wd,_ue),e(_ue,zor),b(f,Jqe,u),b(f,Wo,u),M(CL,Wo,null),e(Wo,Wor),e(Wo,Ad),e(Ad,Qor),e(Ad,lz),e(lz,Hor),e(Ad,Uor),e(Ad,iz),e(iz,Jor),e(Ad,Yor),e(Wo,Kor),e(Wo,wL),e(wL,Zor),e(wL,uue),e(uue,err),e(wL,orr),e(Wo,rrr),e(Wo,Mt),M(AL,Mt,null),e(Mt,trr),e(Mt,bue),e(bue,arr),e(Mt,nrr),e(Mt,yd),e(yd,srr),e(yd,vue),e(vue,lrr),e(yd,irr),e(yd,dz),e(dz,drr),e(yd,crr),e(Mt,frr),M(cF,Mt,null),e(Wo,mrr),e(Wo,po),M(yL,po,null),e(po,grr),e(po,Fue),e(Fue,hrr),e(po,prr),e(po,Wa),e(Wa,_rr),e(Wa,Tue),e(Tue,urr),e(Wa,brr),e(Wa,Mue),e(Mue,vrr),e(Wa,Frr),e(Wa,Eue),e(Eue,Trr),e(Wa,Mrr),e(po,Err),e(po,Ld),e(Ld,fF),e(fF,Cue),e(Cue,Crr),e(fF,wrr),e(fF,cz),e(cz,Arr),e(fF,yrr),e(Ld,Lrr),e(Ld,mF),e(mF,wue),e(wue,xrr),e(mF,$rr),e(mF,fz),e(fz,krr),e(mF,Srr),e(Ld,Rrr),e(Ld,gF),e(gF,Aue),e(Aue,Prr),e(gF,Brr),e(gF,mz),e(mz,Irr),e(gF,qrr),e(po,Nrr),e(po,hF),e(hF,jrr),e(hF,yue),e(yue,Drr),e(hF,Grr),e(hF,Lue),e(Lue,Orr),e(po,Vrr),M(pF,po,null),b(f,Yqe,u),b(f,xd,u),e(xd,_F),e(_F,xue),M(LL,xue,null),e(xd,Xrr),e(xd,$ue),e($ue,zrr),b(f,Kqe,u),b(f,Qo,u),M(xL,Qo,null),e(Qo,Wrr),e(Qo,$d),e($d,Qrr),e($d,gz),e(gz,Hrr),e($d,Urr),e($d,hz),e(hz,Jrr),e($d,Yrr),e(Qo,Krr),e(Qo,$L),e($L,Zrr),e($L,kue),e(kue,etr),e($L,otr),e(Qo,rtr),e(Qo,Et),M(kL,Et,null),e(Et,ttr),e(Et,Sue),e(Sue,atr),e(Et,ntr),e(Et,kd),e(kd,str),e(kd,Rue),e(Rue,ltr),e(kd,itr),e(kd,pz),e(pz,dtr),e(kd,ctr),e(Et,ftr),M(uF,Et,null),e(Qo,mtr),e(Qo,_o),M(SL,_o,null),e(_o,gtr),e(_o,Pue),e(Pue,htr),e(_o,ptr),e(_o,Qa),e(Qa,_tr),e(Qa,Bue),e(Bue,utr),e(Qa,btr),e(Qa,Iue),e(Iue,vtr),e(Qa,Ftr),e(Qa,que),e(que,Ttr),e(Qa,Mtr),e(_o,Etr),e(_o,RL),e(RL,bF),e(bF,Nue),e(Nue,Ctr),e(bF,wtr),e(bF,_z),e(_z,Atr),e(bF,ytr),e(RL,Ltr),e(RL,vF),e(vF,jue),e(jue,xtr),e(vF,$tr),e(vF,uz),e(uz,ktr),e(vF,Str),e(_o,Rtr),e(_o,FF),e(FF,Ptr),e(FF,Due),e(Due,Btr),e(FF,Itr),e(FF,Gue),e(Gue,qtr),e(_o,Ntr),M(TF,_o,null),b(f,Zqe,u),b(f,Sd,u),e(Sd,MF),e(MF,Oue),M(PL,Oue,null),e(Sd,jtr),e(Sd,Vue),e(Vue,Dtr),b(f,eNe,u),b(f,Ho,u),M(BL,Ho,null),e(Ho,Gtr),e(Ho,Rd),e(Rd,Otr),e(Rd,bz),e(bz,Vtr),e(Rd,Xtr),e(Rd,vz),e(vz,ztr),e(Rd,Wtr),e(Ho,Qtr),e(Ho,IL),e(IL,Htr),e(IL,Xue),e(Xue,Utr),e(IL,Jtr),e(Ho,Ytr),e(Ho,Ct),M(qL,Ct,null),e(Ct,Ktr),e(Ct,zue),e(zue,Ztr),e(Ct,ear),e(Ct,Pd),e(Pd,oar),e(Pd,Wue),e(Wue,rar),e(Pd,tar),e(Pd,Fz),e(Fz,aar),e(Pd,nar),e(Ct,sar),M(EF,Ct,null),e(Ho,lar),e(Ho,uo),M(NL,uo,null),e(uo,iar),e(uo,Que),e(Que,dar),e(uo,car),e(uo,Ha),e(Ha,far),e(Ha,Hue),e(Hue,mar),e(Ha,gar),e(Ha,Uue),e(Uue,har),e(Ha,par),e(Ha,Jue),e(Jue,_ar),e(Ha,uar),e(uo,bar),e(uo,Yue),e(Yue,CF),e(CF,Kue),e(Kue,Far),e(CF,Tar),e(CF,Tz),e(Tz,Mar),e(CF,Ear),e(uo,Car),e(uo,wF),e(wF,war),e(wF,Zue),e(Zue,Aar),e(wF,yar),e(wF,e2e),e(e2e,Lar),e(uo,xar),M(AF,uo,null),b(f,oNe,u),b(f,Bd,u),e(Bd,yF),e(yF,o2e),M(jL,o2e,null),e(Bd,$ar),e(Bd,r2e),e(r2e,kar),b(f,rNe,u),b(f,Uo,u),M(DL,Uo,null),e(Uo,Sar),e(Uo,Id),e(Id,Rar),e(Id,Mz),e(Mz,Par),e(Id,Bar),e(Id,Ez),e(Ez,Iar),e(Id,qar),e(Uo,Nar),e(Uo,GL),e(GL,jar),e(GL,t2e),e(t2e,Dar),e(GL,Gar),e(Uo,Oar),e(Uo,wt),M(OL,wt,null),e(wt,Var),e(wt,a2e),e(a2e,Xar),e(wt,zar),e(wt,qd),e(qd,War),e(qd,n2e),e(n2e,Qar),e(qd,Har),e(qd,Cz),e(Cz,Uar),e(qd,Jar),e(wt,Yar),M(LF,wt,null),e(Uo,Kar),e(Uo,bo),M(VL,bo,null),e(bo,Zar),e(bo,s2e),e(s2e,enr),e(bo,onr),e(bo,Ua),e(Ua,rnr),e(Ua,l2e),e(l2e,tnr),e(Ua,anr),e(Ua,i2e),e(i2e,nnr),e(Ua,snr),e(Ua,d2e),e(d2e,lnr),e(Ua,inr),e(bo,dnr),e(bo,Ja),e(Ja,xF),e(xF,c2e),e(c2e,cnr),e(xF,fnr),e(xF,wz),e(wz,mnr),e(xF,gnr),e(Ja,hnr),e(Ja,$F),e($F,f2e),e(f2e,pnr),e($F,_nr),e($F,Az),e(Az,unr),e($F,bnr),e(Ja,vnr),e(Ja,kF),e(kF,m2e),e(m2e,Fnr),e(kF,Tnr),e(kF,yz),e(yz,Mnr),e(kF,Enr),e(Ja,Cnr),e(Ja,SF),e(SF,g2e),e(g2e,wnr),e(SF,Anr),e(SF,Lz),e(Lz,ynr),e(SF,Lnr),e(bo,xnr),e(bo,RF),e(RF,$nr),e(RF,h2e),e(h2e,knr),e(RF,Snr),e(RF,p2e),e(p2e,Rnr),e(bo,Pnr),M(PF,bo,null),b(f,tNe,u),b(f,Nd,u),e(Nd,BF),e(BF,_2e),M(XL,_2e,null),e(Nd,Bnr),e(Nd,u2e),e(u2e,Inr),b(f,aNe,u),b(f,Jo,u),M(zL,Jo,null),e(Jo,qnr),e(Jo,jd),e(jd,Nnr),e(jd,xz),e(xz,jnr),e(jd,Dnr),e(jd,$z),e($z,Gnr),e(jd,Onr),e(Jo,Vnr),e(Jo,WL),e(WL,Xnr),e(WL,b2e),e(b2e,znr),e(WL,Wnr),e(Jo,Qnr),e(Jo,At),M(QL,At,null),e(At,Hnr),e(At,v2e),e(v2e,Unr),e(At,Jnr),e(At,Dd),e(Dd,Ynr),e(Dd,F2e),e(F2e,Knr),e(Dd,Znr),e(Dd,kz),e(kz,esr),e(Dd,osr),e(At,rsr),M(IF,At,null),e(Jo,tsr),e(Jo,vo),M(HL,vo,null),e(vo,asr),e(vo,T2e),e(T2e,nsr),e(vo,ssr),e(vo,Ya),e(Ya,lsr),e(Ya,M2e),e(M2e,isr),e(Ya,dsr),e(Ya,E2e),e(E2e,csr),e(Ya,fsr),e(Ya,C2e),e(C2e,msr),e(Ya,gsr),e(vo,hsr),e(vo,w2e),e(w2e,qF),e(qF,A2e),e(A2e,psr),e(qF,_sr),e(qF,Sz),e(Sz,usr),e(qF,bsr),e(vo,vsr),e(vo,NF),e(NF,Fsr),e(NF,y2e),e(y2e,Tsr),e(NF,Msr),e(NF,L2e),e(L2e,Esr),e(vo,Csr),M(jF,vo,null),b(f,nNe,u),b(f,Gd,u),e(Gd,DF),e(DF,x2e),M(UL,x2e,null),e(Gd,wsr),e(Gd,$2e),e($2e,Asr),b(f,sNe,u),b(f,Yo,u),M(JL,Yo,null),e(Yo,ysr),e(Yo,Od),e(Od,Lsr),e(Od,Rz),e(Rz,xsr),e(Od,$sr),e(Od,Pz),e(Pz,ksr),e(Od,Ssr),e(Yo,Rsr),e(Yo,YL),e(YL,Psr),e(YL,k2e),e(k2e,Bsr),e(YL,Isr),e(Yo,qsr),e(Yo,yt),M(KL,yt,null),e(yt,Nsr),e(yt,S2e),e(S2e,jsr),e(yt,Dsr),e(yt,Vd),e(Vd,Gsr),e(Vd,R2e),e(R2e,Osr),e(Vd,Vsr),e(Vd,Bz),e(Bz,Xsr),e(Vd,zsr),e(yt,Wsr),M(GF,yt,null),e(Yo,Qsr),e(Yo,wr),M(ZL,wr,null),e(wr,Hsr),e(wr,P2e),e(P2e,Usr),e(wr,Jsr),e(wr,Ka),e(Ka,Ysr),e(Ka,B2e),e(B2e,Ksr),e(Ka,Zsr),e(Ka,I2e),e(I2e,elr),e(Ka,olr),e(Ka,q2e),e(q2e,rlr),e(Ka,tlr),e(wr,alr),e(wr,N),e(N,OF),e(OF,N2e),e(N2e,nlr),e(OF,slr),e(OF,Iz),e(Iz,llr),e(OF,ilr),e(N,dlr),e(N,VF),e(VF,j2e),e(j2e,clr),e(VF,flr),e(VF,qz),e(qz,mlr),e(VF,glr),e(N,hlr),e(N,XF),e(XF,D2e),e(D2e,plr),e(XF,_lr),e(XF,Nz),e(Nz,ulr),e(XF,blr),e(N,vlr),e(N,zF),e(zF,G2e),e(G2e,Flr),e(zF,Tlr),e(zF,jz),e(jz,Mlr),e(zF,Elr),e(N,Clr),e(N,WF),e(WF,O2e),e(O2e,wlr),e(WF,Alr),e(WF,Dz),e(Dz,ylr),e(WF,Llr),e(N,xlr),e(N,QF),e(QF,V2e),e(V2e,$lr),e(QF,klr),e(QF,Gz),e(Gz,Slr),e(QF,Rlr),e(N,Plr),e(N,HF),e(HF,X2e),e(X2e,Blr),e(HF,Ilr),e(HF,Oz),e(Oz,qlr),e(HF,Nlr),e(N,jlr),e(N,UF),e(UF,z2e),e(z2e,Dlr),e(UF,Glr),e(UF,Vz),e(Vz,Olr),e(UF,Vlr),e(N,Xlr),e(N,JF),e(JF,W2e),e(W2e,zlr),e(JF,Wlr),e(JF,Xz),e(Xz,Qlr),e(JF,Hlr),e(N,Ulr),e(N,YF),e(YF,Q2e),e(Q2e,Jlr),e(YF,Ylr),e(YF,zz),e(zz,Klr),e(YF,Zlr),e(N,eir),e(N,KF),e(KF,H2e),e(H2e,oir),e(KF,rir),e(KF,Wz),e(Wz,tir),e(KF,air),e(N,nir),e(N,ZF),e(ZF,U2e),e(U2e,sir),e(ZF,lir),e(ZF,Qz),e(Qz,iir),e(ZF,dir),e(N,cir),e(N,eT),e(eT,J2e),e(J2e,fir),e(eT,mir),e(eT,Hz),e(Hz,gir),e(eT,hir),e(N,pir),e(N,oT),e(oT,Y2e),e(Y2e,_ir),e(oT,uir),e(oT,Uz),e(Uz,bir),e(oT,vir),e(N,Fir),e(N,rT),e(rT,K2e),e(K2e,Tir),e(rT,Mir),e(rT,Jz),e(Jz,Eir),e(rT,Cir),e(N,wir),e(N,tT),e(tT,Z2e),e(Z2e,Air),e(tT,yir),e(tT,Yz),e(Yz,Lir),e(tT,xir),e(N,$ir),e(N,aT),e(aT,e1e),e(e1e,kir),e(aT,Sir),e(aT,Kz),e(Kz,Rir),e(aT,Pir),e(N,Bir),e(N,Is),e(Is,o1e),e(o1e,Iir),e(Is,qir),e(Is,Zz),e(Zz,Nir),e(Is,jir),e(Is,eW),e(eW,Dir),e(Is,Gir),e(N,Oir),e(N,nT),e(nT,r1e),e(r1e,Vir),e(nT,Xir),e(nT,oW),e(oW,zir),e(nT,Wir),e(N,Qir),e(N,sT),e(sT,t1e),e(t1e,Hir),e(sT,Uir),e(sT,rW),e(rW,Jir),e(sT,Yir),e(N,Kir),e(N,lT),e(lT,a1e),e(a1e,Zir),e(lT,edr),e(lT,tW),e(tW,odr),e(lT,rdr),e(N,tdr),e(N,iT),e(iT,n1e),e(n1e,adr),e(iT,ndr),e(iT,aW),e(aW,sdr),e(iT,ldr),e(N,idr),e(N,dT),e(dT,s1e),e(s1e,ddr),e(dT,cdr),e(dT,nW),e(nW,fdr),e(dT,mdr),e(N,gdr),e(N,cT),e(cT,l1e),e(l1e,hdr),e(cT,pdr),e(cT,sW),e(sW,_dr),e(cT,udr),e(N,bdr),e(N,fT),e(fT,i1e),e(i1e,vdr),e(fT,Fdr),e(fT,lW),e(lW,Tdr),e(fT,Mdr),e(N,Edr),e(N,mT),e(mT,d1e),e(d1e,Cdr),e(mT,wdr),e(mT,iW),e(iW,Adr),e(mT,ydr),e(N,Ldr),e(N,gT),e(gT,c1e),e(c1e,xdr),e(gT,$dr),e(gT,dW),e(dW,kdr),e(gT,Sdr),e(N,Rdr),e(N,hT),e(hT,f1e),e(f1e,Pdr),e(hT,Bdr),e(hT,cW),e(cW,Idr),e(hT,qdr),e(N,Ndr),e(N,pT),e(pT,m1e),e(m1e,jdr),e(pT,Ddr),e(pT,fW),e(fW,Gdr),e(pT,Odr),e(N,Vdr),e(N,_T),e(_T,g1e),e(g1e,Xdr),e(_T,zdr),e(_T,mW),e(mW,Wdr),e(_T,Qdr),e(N,Hdr),e(N,uT),e(uT,h1e),e(h1e,Udr),e(uT,Jdr),e(uT,gW),e(gW,Ydr),e(uT,Kdr),e(N,Zdr),e(N,bT),e(bT,p1e),e(p1e,ecr),e(bT,ocr),e(bT,hW),e(hW,rcr),e(bT,tcr),e(N,acr),e(N,vT),e(vT,_1e),e(_1e,ncr),e(vT,scr),e(vT,pW),e(pW,lcr),e(vT,icr),e(N,dcr),e(N,FT),e(FT,u1e),e(u1e,ccr),e(FT,fcr),e(FT,_W),e(_W,mcr),e(FT,gcr),e(N,hcr),e(N,TT),e(TT,b1e),e(b1e,pcr),e(TT,_cr),e(TT,uW),e(uW,ucr),e(TT,bcr),e(N,vcr),e(N,MT),e(MT,v1e),e(v1e,Fcr),e(MT,Tcr),e(MT,bW),e(bW,Mcr),e(MT,Ecr),e(N,Ccr),e(N,ET),e(ET,F1e),e(F1e,wcr),e(ET,Acr),e(ET,vW),e(vW,ycr),e(ET,Lcr),e(N,xcr),e(N,CT),e(CT,T1e),e(T1e,$cr),e(CT,kcr),e(CT,FW),e(FW,Scr),e(CT,Rcr),e(N,Pcr),e(N,wT),e(wT,M1e),e(M1e,Bcr),e(wT,Icr),e(wT,TW),e(TW,qcr),e(wT,Ncr),e(N,jcr),e(N,AT),e(AT,E1e),e(E1e,Dcr),e(AT,Gcr),e(AT,MW),e(MW,Ocr),e(AT,Vcr),e(N,Xcr),e(N,yT),e(yT,C1e),e(C1e,zcr),e(yT,Wcr),e(yT,EW),e(EW,Qcr),e(yT,Hcr),e(N,Ucr),e(N,LT),e(LT,w1e),e(w1e,Jcr),e(LT,Ycr),e(LT,CW),e(CW,Kcr),e(LT,Zcr),e(N,efr),e(N,xT),e(xT,A1e),e(A1e,ofr),e(xT,rfr),e(xT,wW),e(wW,tfr),e(xT,afr),e(N,nfr),e(N,$T),e($T,y1e),e(y1e,sfr),e($T,lfr),e($T,AW),e(AW,ifr),e($T,dfr),e(N,cfr),e(N,kT),e(kT,L1e),e(L1e,ffr),e(kT,mfr),e(kT,yW),e(yW,gfr),e(kT,hfr),e(N,pfr),e(N,ST),e(ST,x1e),e(x1e,_fr),e(ST,ufr),e(ST,LW),e(LW,bfr),e(ST,vfr),e(wr,Ffr),M(RT,wr,null),b(f,lNe,u),b(f,Xd,u),e(Xd,PT),e(PT,$1e),M(e8,$1e,null),e(Xd,Tfr),e(Xd,k1e),e(k1e,Mfr),b(f,iNe,u),b(f,Ko,u),M(o8,Ko,null),e(Ko,Efr),e(Ko,zd),e(zd,Cfr),e(zd,xW),e(xW,wfr),e(zd,Afr),e(zd,$W),e($W,yfr),e(zd,Lfr),e(Ko,xfr),e(Ko,r8),e(r8,$fr),e(r8,S1e),e(S1e,kfr),e(r8,Sfr),e(Ko,Rfr),e(Ko,Lt),M(t8,Lt,null),e(Lt,Pfr),e(Lt,R1e),e(R1e,Bfr),e(Lt,Ifr),e(Lt,Wd),e(Wd,qfr),e(Wd,P1e),e(P1e,Nfr),e(Wd,jfr),e(Wd,kW),e(kW,Dfr),e(Wd,Gfr),e(Lt,Ofr),M(BT,Lt,null),e(Ko,Vfr),e(Ko,Ar),M(a8,Ar,null),e(Ar,Xfr),e(Ar,B1e),e(B1e,zfr),e(Ar,Wfr),e(Ar,Za),e(Za,Qfr),e(Za,I1e),e(I1e,Hfr),e(Za,Ufr),e(Za,q1e),e(q1e,Jfr),e(Za,Yfr),e(Za,N1e),e(N1e,Kfr),e(Za,Zfr),e(Ar,emr),e(Ar,se),e(se,IT),e(IT,j1e),e(j1e,omr),e(IT,rmr),e(IT,SW),e(SW,tmr),e(IT,amr),e(se,nmr),e(se,qT),e(qT,D1e),e(D1e,smr),e(qT,lmr),e(qT,RW),e(RW,imr),e(qT,dmr),e(se,cmr),e(se,NT),e(NT,G1e),e(G1e,fmr),e(NT,mmr),e(NT,PW),e(PW,gmr),e(NT,hmr),e(se,pmr),e(se,jT),e(jT,O1e),e(O1e,_mr),e(jT,umr),e(jT,BW),e(BW,bmr),e(jT,vmr),e(se,Fmr),e(se,DT),e(DT,V1e),e(V1e,Tmr),e(DT,Mmr),e(DT,IW),e(IW,Emr),e(DT,Cmr),e(se,wmr),e(se,GT),e(GT,X1e),e(X1e,Amr),e(GT,ymr),e(GT,qW),e(qW,Lmr),e(GT,xmr),e(se,$mr),e(se,OT),e(OT,z1e),e(z1e,kmr),e(OT,Smr),e(OT,NW),e(NW,Rmr),e(OT,Pmr),e(se,Bmr),e(se,VT),e(VT,W1e),e(W1e,Imr),e(VT,qmr),e(VT,jW),e(jW,Nmr),e(VT,jmr),e(se,Dmr),e(se,XT),e(XT,Q1e),e(Q1e,Gmr),e(XT,Omr),e(XT,DW),e(DW,Vmr),e(XT,Xmr),e(se,zmr),e(se,zT),e(zT,H1e),e(H1e,Wmr),e(zT,Qmr),e(zT,GW),e(GW,Hmr),e(zT,Umr),e(se,Jmr),e(se,WT),e(WT,U1e),e(U1e,Ymr),e(WT,Kmr),e(WT,OW),e(OW,Zmr),e(WT,egr),e(se,ogr),e(se,QT),e(QT,J1e),e(J1e,rgr),e(QT,tgr),e(QT,VW),e(VW,agr),e(QT,ngr),e(se,sgr),e(se,HT),e(HT,Y1e),e(Y1e,lgr),e(HT,igr),e(HT,XW),e(XW,dgr),e(HT,cgr),e(se,fgr),e(se,UT),e(UT,K1e),e(K1e,mgr),e(UT,ggr),e(UT,zW),e(zW,hgr),e(UT,pgr),e(se,_gr),e(se,JT),e(JT,Z1e),e(Z1e,ugr),e(JT,bgr),e(JT,WW),e(WW,vgr),e(JT,Fgr),e(se,Tgr),e(se,YT),e(YT,ebe),e(ebe,Mgr),e(YT,Egr),e(YT,QW),e(QW,Cgr),e(YT,wgr),e(se,Agr),e(se,KT),e(KT,obe),e(obe,ygr),e(KT,Lgr),e(KT,HW),e(HW,xgr),e(KT,$gr),e(se,kgr),e(se,ZT),e(ZT,rbe),e(rbe,Sgr),e(ZT,Rgr),e(ZT,UW),e(UW,Pgr),e(ZT,Bgr),e(se,Igr),e(se,e7),e(e7,tbe),e(tbe,qgr),e(e7,Ngr),e(e7,JW),e(JW,jgr),e(e7,Dgr),e(se,Ggr),e(se,o7),e(o7,abe),e(abe,Ogr),e(o7,Vgr),e(o7,YW),e(YW,Xgr),e(o7,zgr),e(se,Wgr),e(se,r7),e(r7,nbe),e(nbe,Qgr),e(r7,Hgr),e(r7,KW),e(KW,Ugr),e(r7,Jgr),e(se,Ygr),e(se,t7),e(t7,sbe),e(sbe,Kgr),e(t7,Zgr),e(t7,ZW),e(ZW,ehr),e(t7,ohr),e(se,rhr),e(se,a7),e(a7,lbe),e(lbe,thr),e(a7,ahr),e(a7,eQ),e(eQ,nhr),e(a7,shr),e(Ar,lhr),M(n7,Ar,null),b(f,dNe,u),b(f,Qd,u),e(Qd,s7),e(s7,ibe),M(n8,ibe,null),e(Qd,ihr),e(Qd,dbe),e(dbe,dhr),b(f,cNe,u),b(f,Zo,u),M(s8,Zo,null),e(Zo,chr),e(Zo,Hd),e(Hd,fhr),e(Hd,oQ),e(oQ,mhr),e(Hd,ghr),e(Hd,rQ),e(rQ,hhr),e(Hd,phr),e(Zo,_hr),e(Zo,l8),e(l8,uhr),e(l8,cbe),e(cbe,bhr),e(l8,vhr),e(Zo,Fhr),e(Zo,xt),M(i8,xt,null),e(xt,Thr),e(xt,fbe),e(fbe,Mhr),e(xt,Ehr),e(xt,Ud),e(Ud,Chr),e(Ud,mbe),e(mbe,whr),e(Ud,Ahr),e(Ud,tQ),e(tQ,yhr),e(Ud,Lhr),e(xt,xhr),M(l7,xt,null),e(Zo,$hr),e(Zo,yr),M(d8,yr,null),e(yr,khr),e(yr,gbe),e(gbe,Shr),e(yr,Rhr),e(yr,en),e(en,Phr),e(en,hbe),e(hbe,Bhr),e(en,Ihr),e(en,pbe),e(pbe,qhr),e(en,Nhr),e(en,_be),e(_be,jhr),e(en,Dhr),e(yr,Ghr),e(yr,Me),e(Me,i7),e(i7,ube),e(ube,Ohr),e(i7,Vhr),e(i7,aQ),e(aQ,Xhr),e(i7,zhr),e(Me,Whr),e(Me,d7),e(d7,bbe),e(bbe,Qhr),e(d7,Hhr),e(d7,nQ),e(nQ,Uhr),e(d7,Jhr),e(Me,Yhr),e(Me,c7),e(c7,vbe),e(vbe,Khr),e(c7,Zhr),e(c7,sQ),e(sQ,epr),e(c7,opr),e(Me,rpr),e(Me,f7),e(f7,Fbe),e(Fbe,tpr),e(f7,apr),e(f7,lQ),e(lQ,npr),e(f7,spr),e(Me,lpr),e(Me,m7),e(m7,Tbe),e(Tbe,ipr),e(m7,dpr),e(m7,iQ),e(iQ,cpr),e(m7,fpr),e(Me,mpr),e(Me,g7),e(g7,Mbe),e(Mbe,gpr),e(g7,hpr),e(g7,dQ),e(dQ,ppr),e(g7,_pr),e(Me,upr),e(Me,h7),e(h7,Ebe),e(Ebe,bpr),e(h7,vpr),e(h7,cQ),e(cQ,Fpr),e(h7,Tpr),e(Me,Mpr),e(Me,p7),e(p7,Cbe),e(Cbe,Epr),e(p7,Cpr),e(p7,fQ),e(fQ,wpr),e(p7,Apr),e(Me,ypr),e(Me,_7),e(_7,wbe),e(wbe,Lpr),e(_7,xpr),e(_7,mQ),e(mQ,$pr),e(_7,kpr),e(Me,Spr),e(Me,u7),e(u7,Abe),e(Abe,Rpr),e(u7,Ppr),e(u7,gQ),e(gQ,Bpr),e(u7,Ipr),e(Me,qpr),e(Me,b7),e(b7,ybe),e(ybe,Npr),e(b7,jpr),e(b7,hQ),e(hQ,Dpr),e(b7,Gpr),e(Me,Opr),e(Me,v7),e(v7,Lbe),e(Lbe,Vpr),e(v7,Xpr),e(v7,pQ),e(pQ,zpr),e(v7,Wpr),e(yr,Qpr),M(F7,yr,null),b(f,fNe,u),b(f,Jd,u),e(Jd,T7),e(T7,xbe),M(c8,xbe,null),e(Jd,Hpr),e(Jd,$be),e($be,Upr),b(f,mNe,u),b(f,er,u),M(f8,er,null),e(er,Jpr),e(er,Yd),e(Yd,Ypr),e(Yd,_Q),e(_Q,Kpr),e(Yd,Zpr),e(Yd,uQ),e(uQ,e_r),e(Yd,o_r),e(er,r_r),e(er,m8),e(m8,t_r),e(m8,kbe),e(kbe,a_r),e(m8,n_r),e(er,s_r),e(er,$t),M(g8,$t,null),e($t,l_r),e($t,Sbe),e(Sbe,i_r),e($t,d_r),e($t,Kd),e(Kd,c_r),e(Kd,Rbe),e(Rbe,f_r),e(Kd,m_r),e(Kd,bQ),e(bQ,g_r),e(Kd,h_r),e($t,p_r),M(M7,$t,null),e(er,__r),e(er,Lr),M(h8,Lr,null),e(Lr,u_r),e(Lr,Pbe),e(Pbe,b_r),e(Lr,v_r),e(Lr,on),e(on,F_r),e(on,Bbe),e(Bbe,T_r),e(on,M_r),e(on,Ibe),e(Ibe,E_r),e(on,C_r),e(on,qbe),e(qbe,w_r),e(on,A_r),e(Lr,y_r),e(Lr,rn),e(rn,E7),e(E7,Nbe),e(Nbe,L_r),e(E7,x_r),e(E7,vQ),e(vQ,$_r),e(E7,k_r),e(rn,S_r),e(rn,C7),e(C7,jbe),e(jbe,R_r),e(C7,P_r),e(C7,FQ),e(FQ,B_r),e(C7,I_r),e(rn,q_r),e(rn,w7),e(w7,Dbe),e(Dbe,N_r),e(w7,j_r),e(w7,TQ),e(TQ,D_r),e(w7,G_r),e(rn,O_r),e(rn,A7),e(A7,Gbe),e(Gbe,V_r),e(A7,X_r),e(A7,MQ),e(MQ,z_r),e(A7,W_r),e(Lr,Q_r),M(y7,Lr,null),b(f,gNe,u),b(f,Zd,u),e(Zd,L7),e(L7,Obe),M(p8,Obe,null),e(Zd,H_r),e(Zd,Vbe),e(Vbe,U_r),b(f,hNe,u),b(f,or,u),M(_8,or,null),e(or,J_r),e(or,ec),e(ec,Y_r),e(ec,EQ),e(EQ,K_r),e(ec,Z_r),e(ec,CQ),e(CQ,eur),e(ec,our),e(or,rur),e(or,u8),e(u8,tur),e(u8,Xbe),e(Xbe,aur),e(u8,nur),e(or,sur),e(or,kt),M(b8,kt,null),e(kt,lur),e(kt,zbe),e(zbe,iur),e(kt,dur),e(kt,oc),e(oc,cur),e(oc,Wbe),e(Wbe,fur),e(oc,mur),e(oc,wQ),e(wQ,gur),e(oc,hur),e(kt,pur),M(x7,kt,null),e(or,_ur),e(or,xr),M(v8,xr,null),e(xr,uur),e(xr,Qbe),e(Qbe,bur),e(xr,vur),e(xr,tn),e(tn,Fur),e(tn,Hbe),e(Hbe,Tur),e(tn,Mur),e(tn,Ube),e(Ube,Eur),e(tn,Cur),e(tn,Jbe),e(Jbe,wur),e(tn,Aur),e(xr,yur),e(xr,ie),e(ie,$7),e($7,Ybe),e(Ybe,Lur),e($7,xur),e($7,AQ),e(AQ,$ur),e($7,kur),e(ie,Sur),e(ie,k7),e(k7,Kbe),e(Kbe,Rur),e(k7,Pur),e(k7,yQ),e(yQ,Bur),e(k7,Iur),e(ie,qur),e(ie,S7),e(S7,Zbe),e(Zbe,Nur),e(S7,jur),e(S7,LQ),e(LQ,Dur),e(S7,Gur),e(ie,Our),e(ie,R7),e(R7,e4e),e(e4e,Vur),e(R7,Xur),e(R7,xQ),e(xQ,zur),e(R7,Wur),e(ie,Qur),e(ie,P7),e(P7,o4e),e(o4e,Hur),e(P7,Uur),e(P7,$Q),e($Q,Jur),e(P7,Yur),e(ie,Kur),e(ie,B7),e(B7,r4e),e(r4e,Zur),e(B7,e2r),e(B7,kQ),e(kQ,o2r),e(B7,r2r),e(ie,t2r),e(ie,I7),e(I7,t4e),e(t4e,a2r),e(I7,n2r),e(I7,SQ),e(SQ,s2r),e(I7,l2r),e(ie,i2r),e(ie,q7),e(q7,a4e),e(a4e,d2r),e(q7,c2r),e(q7,RQ),e(RQ,f2r),e(q7,m2r),e(ie,g2r),e(ie,N7),e(N7,n4e),e(n4e,h2r),e(N7,p2r),e(N7,PQ),e(PQ,_2r),e(N7,u2r),e(ie,b2r),e(ie,j7),e(j7,s4e),e(s4e,v2r),e(j7,F2r),e(j7,BQ),e(BQ,T2r),e(j7,M2r),e(ie,E2r),e(ie,D7),e(D7,l4e),e(l4e,C2r),e(D7,w2r),e(D7,IQ),e(IQ,A2r),e(D7,y2r),e(ie,L2r),e(ie,G7),e(G7,i4e),e(i4e,x2r),e(G7,$2r),e(G7,qQ),e(qQ,k2r),e(G7,S2r),e(ie,R2r),e(ie,O7),e(O7,d4e),e(d4e,P2r),e(O7,B2r),e(O7,NQ),e(NQ,I2r),e(O7,q2r),e(ie,N2r),e(ie,V7),e(V7,c4e),e(c4e,j2r),e(V7,D2r),e(V7,jQ),e(jQ,G2r),e(V7,O2r),e(ie,V2r),e(ie,X7),e(X7,f4e),e(f4e,X2r),e(X7,z2r),e(X7,DQ),e(DQ,W2r),e(X7,Q2r),e(ie,H2r),e(ie,z7),e(z7,m4e),e(m4e,U2r),e(z7,J2r),e(z7,GQ),e(GQ,Y2r),e(z7,K2r),e(ie,Z2r),e(ie,W7),e(W7,g4e),e(g4e,e1r),e(W7,o1r),e(W7,OQ),e(OQ,r1r),e(W7,t1r),e(ie,a1r),e(ie,Q7),e(Q7,h4e),e(h4e,n1r),e(Q7,s1r),e(Q7,VQ),e(VQ,l1r),e(Q7,i1r),e(ie,d1r),e(ie,H7),e(H7,p4e),e(p4e,c1r),e(H7,f1r),e(H7,XQ),e(XQ,m1r),e(H7,g1r),e(ie,h1r),e(ie,U7),e(U7,_4e),e(_4e,p1r),e(U7,_1r),e(U7,zQ),e(zQ,u1r),e(U7,b1r),e(xr,v1r),M(J7,xr,null),b(f,pNe,u),b(f,rc,u),e(rc,Y7),e(Y7,u4e),M(F8,u4e,null),e(rc,F1r),e(rc,b4e),e(b4e,T1r),b(f,_Ne,u),b(f,rr,u),M(T8,rr,null),e(rr,M1r),e(rr,tc),e(tc,E1r),e(tc,WQ),e(WQ,C1r),e(tc,w1r),e(tc,QQ),e(QQ,A1r),e(tc,y1r),e(rr,L1r),e(rr,M8),e(M8,x1r),e(M8,v4e),e(v4e,$1r),e(M8,k1r),e(rr,S1r),e(rr,St),M(E8,St,null),e(St,R1r),e(St,F4e),e(F4e,P1r),e(St,B1r),e(St,ac),e(ac,I1r),e(ac,T4e),e(T4e,q1r),e(ac,N1r),e(ac,HQ),e(HQ,j1r),e(ac,D1r),e(St,G1r),M(K7,St,null),e(rr,O1r),e(rr,$r),M(C8,$r,null),e($r,V1r),e($r,M4e),e(M4e,X1r),e($r,z1r),e($r,an),e(an,W1r),e(an,E4e),e(E4e,Q1r),e(an,H1r),e(an,C4e),e(C4e,U1r),e(an,J1r),e(an,w4e),e(w4e,Y1r),e(an,K1r),e($r,Z1r),e($r,ye),e(ye,Z7),e(Z7,A4e),e(A4e,ebr),e(Z7,obr),e(Z7,UQ),e(UQ,rbr),e(Z7,tbr),e(ye,abr),e(ye,eM),e(eM,y4e),e(y4e,nbr),e(eM,sbr),e(eM,JQ),e(JQ,lbr),e(eM,ibr),e(ye,dbr),e(ye,oM),e(oM,L4e),e(L4e,cbr),e(oM,fbr),e(oM,YQ),e(YQ,mbr),e(oM,gbr),e(ye,hbr),e(ye,rM),e(rM,x4e),e(x4e,pbr),e(rM,_br),e(rM,KQ),e(KQ,ubr),e(rM,bbr),e(ye,vbr),e(ye,tM),e(tM,$4e),e($4e,Fbr),e(tM,Tbr),e(tM,ZQ),e(ZQ,Mbr),e(tM,Ebr),e(ye,Cbr),e(ye,aM),e(aM,k4e),e(k4e,wbr),e(aM,Abr),e(aM,eH),e(eH,ybr),e(aM,Lbr),e(ye,xbr),e(ye,nM),e(nM,S4e),e(S4e,$br),e(nM,kbr),e(nM,oH),e(oH,Sbr),e(nM,Rbr),e(ye,Pbr),e(ye,sM),e(sM,R4e),e(R4e,Bbr),e(sM,Ibr),e(sM,rH),e(rH,qbr),e(sM,Nbr),e(ye,jbr),e(ye,lM),e(lM,P4e),e(P4e,Dbr),e(lM,Gbr),e(lM,tH),e(tH,Obr),e(lM,Vbr),e(ye,Xbr),e(ye,iM),e(iM,B4e),e(B4e,zbr),e(iM,Wbr),e(iM,aH),e(aH,Qbr),e(iM,Hbr),e($r,Ubr),M(dM,$r,null),b(f,uNe,u),b(f,nc,u),e(nc,cM),e(cM,I4e),M(w8,I4e,null),e(nc,Jbr),e(nc,q4e),e(q4e,Ybr),b(f,bNe,u),b(f,tr,u),M(A8,tr,null),e(tr,Kbr),e(tr,sc),e(sc,Zbr),e(sc,nH),e(nH,e4r),e(sc,o4r),e(sc,sH),e(sH,r4r),e(sc,t4r),e(tr,a4r),e(tr,y8),e(y8,n4r),e(y8,N4e),e(N4e,s4r),e(y8,l4r),e(tr,i4r),e(tr,Rt),M(L8,Rt,null),e(Rt,d4r),e(Rt,j4e),e(j4e,c4r),e(Rt,f4r),e(Rt,lc),e(lc,m4r),e(lc,D4e),e(D4e,g4r),e(lc,h4r),e(lc,lH),e(lH,p4r),e(lc,_4r),e(Rt,u4r),M(fM,Rt,null),e(tr,b4r),e(tr,kr),M(x8,kr,null),e(kr,v4r),e(kr,G4e),e(G4e,F4r),e(kr,T4r),e(kr,nn),e(nn,M4r),e(nn,O4e),e(O4e,E4r),e(nn,C4r),e(nn,V4e),e(V4e,w4r),e(nn,A4r),e(nn,X4e),e(X4e,y4r),e(nn,L4r),e(kr,x4r),e(kr,ee),e(ee,mM),e(mM,z4e),e(z4e,$4r),e(mM,k4r),e(mM,iH),e(iH,S4r),e(mM,R4r),e(ee,P4r),e(ee,gM),e(gM,W4e),e(W4e,B4r),e(gM,I4r),e(gM,dH),e(dH,q4r),e(gM,N4r),e(ee,j4r),e(ee,hM),e(hM,Q4e),e(Q4e,D4r),e(hM,G4r),e(hM,cH),e(cH,O4r),e(hM,V4r),e(ee,X4r),e(ee,pM),e(pM,H4e),e(H4e,z4r),e(pM,W4r),e(pM,fH),e(fH,Q4r),e(pM,H4r),e(ee,U4r),e(ee,_M),e(_M,U4e),e(U4e,J4r),e(_M,Y4r),e(_M,mH),e(mH,K4r),e(_M,Z4r),e(ee,e5r),e(ee,uM),e(uM,J4e),e(J4e,o5r),e(uM,r5r),e(uM,gH),e(gH,t5r),e(uM,a5r),e(ee,n5r),e(ee,bM),e(bM,Y4e),e(Y4e,s5r),e(bM,l5r),e(bM,hH),e(hH,i5r),e(bM,d5r),e(ee,c5r),e(ee,vM),e(vM,K4e),e(K4e,f5r),e(vM,m5r),e(vM,pH),e(pH,g5r),e(vM,h5r),e(ee,p5r),e(ee,FM),e(FM,Z4e),e(Z4e,_5r),e(FM,u5r),e(FM,_H),e(_H,b5r),e(FM,v5r),e(ee,F5r),e(ee,TM),e(TM,e5e),e(e5e,T5r),e(TM,M5r),e(TM,uH),e(uH,E5r),e(TM,C5r),e(ee,w5r),e(ee,MM),e(MM,o5e),e(o5e,A5r),e(MM,y5r),e(MM,bH),e(bH,L5r),e(MM,x5r),e(ee,$5r),e(ee,EM),e(EM,r5e),e(r5e,k5r),e(EM,S5r),e(EM,vH),e(vH,R5r),e(EM,P5r),e(ee,B5r),e(ee,CM),e(CM,t5e),e(t5e,I5r),e(CM,q5r),e(CM,FH),e(FH,N5r),e(CM,j5r),e(ee,D5r),e(ee,wM),e(wM,a5e),e(a5e,G5r),e(wM,O5r),e(wM,TH),e(TH,V5r),e(wM,X5r),e(ee,z5r),e(ee,AM),e(AM,n5e),e(n5e,W5r),e(AM,Q5r),e(AM,MH),e(MH,H5r),e(AM,U5r),e(ee,J5r),e(ee,yM),e(yM,s5e),e(s5e,Y5r),e(yM,K5r),e(yM,EH),e(EH,Z5r),e(yM,evr),e(ee,ovr),e(ee,LM),e(LM,l5e),e(l5e,rvr),e(LM,tvr),e(LM,CH),e(CH,avr),e(LM,nvr),e(ee,svr),e(ee,xM),e(xM,i5e),e(i5e,lvr),e(xM,ivr),e(xM,wH),e(wH,dvr),e(xM,cvr),e(ee,fvr),e(ee,$M),e($M,d5e),e(d5e,mvr),e($M,gvr),e($M,AH),e(AH,hvr),e($M,pvr),e(ee,_vr),e(ee,kM),e(kM,c5e),e(c5e,uvr),e(kM,bvr),e(kM,yH),e(yH,vvr),e(kM,Fvr),e(ee,Tvr),e(ee,SM),e(SM,f5e),e(f5e,Mvr),e(SM,Evr),e(SM,LH),e(LH,Cvr),e(SM,wvr),e(ee,Avr),e(ee,RM),e(RM,m5e),e(m5e,yvr),e(RM,Lvr),e(RM,xH),e(xH,xvr),e(RM,$vr),e(ee,kvr),e(ee,PM),e(PM,g5e),e(g5e,Svr),e(PM,Rvr),e(PM,$H),e($H,Pvr),e(PM,Bvr),e(ee,Ivr),e(ee,BM),e(BM,h5e),e(h5e,qvr),e(BM,Nvr),e(BM,kH),e(kH,jvr),e(BM,Dvr),e(ee,Gvr),e(ee,IM),e(IM,p5e),e(p5e,Ovr),e(IM,Vvr),e(IM,SH),e(SH,Xvr),e(IM,zvr),e(ee,Wvr),e(ee,qM),e(qM,_5e),e(_5e,Qvr),e(qM,Hvr),e(qM,RH),e(RH,Uvr),e(qM,Jvr),e(kr,Yvr),M(NM,kr,null),b(f,vNe,u),b(f,ic,u),e(ic,jM),e(jM,u5e),M($8,u5e,null),e(ic,Kvr),e(ic,b5e),e(b5e,Zvr),b(f,FNe,u),b(f,ar,u),M(k8,ar,null),e(ar,eFr),e(ar,dc),e(dc,oFr),e(dc,PH),e(PH,rFr),e(dc,tFr),e(dc,BH),e(BH,aFr),e(dc,nFr),e(ar,sFr),e(ar,S8),e(S8,lFr),e(S8,v5e),e(v5e,iFr),e(S8,dFr),e(ar,cFr),e(ar,Pt),M(R8,Pt,null),e(Pt,fFr),e(Pt,F5e),e(F5e,mFr),e(Pt,gFr),e(Pt,cc),e(cc,hFr),e(cc,T5e),e(T5e,pFr),e(cc,_Fr),e(cc,IH),e(IH,uFr),e(cc,bFr),e(Pt,vFr),M(DM,Pt,null),e(ar,FFr),e(ar,Sr),M(P8,Sr,null),e(Sr,TFr),e(Sr,M5e),e(M5e,MFr),e(Sr,EFr),e(Sr,sn),e(sn,CFr),e(sn,E5e),e(E5e,wFr),e(sn,AFr),e(sn,C5e),e(C5e,yFr),e(sn,LFr),e(sn,w5e),e(w5e,xFr),e(sn,$Fr),e(Sr,kFr),e(Sr,he),e(he,GM),e(GM,A5e),e(A5e,SFr),e(GM,RFr),e(GM,qH),e(qH,PFr),e(GM,BFr),e(he,IFr),e(he,OM),e(OM,y5e),e(y5e,qFr),e(OM,NFr),e(OM,NH),e(NH,jFr),e(OM,DFr),e(he,GFr),e(he,VM),e(VM,L5e),e(L5e,OFr),e(VM,VFr),e(VM,jH),e(jH,XFr),e(VM,zFr),e(he,WFr),e(he,XM),e(XM,x5e),e(x5e,QFr),e(XM,HFr),e(XM,DH),e(DH,UFr),e(XM,JFr),e(he,YFr),e(he,zM),e(zM,$5e),e($5e,KFr),e(zM,ZFr),e(zM,GH),e(GH,eTr),e(zM,oTr),e(he,rTr),e(he,WM),e(WM,k5e),e(k5e,tTr),e(WM,aTr),e(WM,OH),e(OH,nTr),e(WM,sTr),e(he,lTr),e(he,QM),e(QM,S5e),e(S5e,iTr),e(QM,dTr),e(QM,VH),e(VH,cTr),e(QM,fTr),e(he,mTr),e(he,HM),e(HM,R5e),e(R5e,gTr),e(HM,hTr),e(HM,XH),e(XH,pTr),e(HM,_Tr),e(he,uTr),e(he,UM),e(UM,P5e),e(P5e,bTr),e(UM,vTr),e(UM,zH),e(zH,FTr),e(UM,TTr),e(he,MTr),e(he,JM),e(JM,B5e),e(B5e,ETr),e(JM,CTr),e(JM,WH),e(WH,wTr),e(JM,ATr),e(he,yTr),e(he,YM),e(YM,I5e),e(I5e,LTr),e(YM,xTr),e(YM,QH),e(QH,$Tr),e(YM,kTr),e(he,STr),e(he,KM),e(KM,q5e),e(q5e,RTr),e(KM,PTr),e(KM,HH),e(HH,BTr),e(KM,ITr),e(he,qTr),e(he,ZM),e(ZM,N5e),e(N5e,NTr),e(ZM,jTr),e(ZM,UH),e(UH,DTr),e(ZM,GTr),e(he,OTr),e(he,eE),e(eE,j5e),e(j5e,VTr),e(eE,XTr),e(eE,JH),e(JH,zTr),e(eE,WTr),e(he,QTr),e(he,oE),e(oE,D5e),e(D5e,HTr),e(oE,UTr),e(oE,YH),e(YH,JTr),e(oE,YTr),e(he,KTr),e(he,rE),e(rE,G5e),e(G5e,ZTr),e(rE,e7r),e(rE,KH),e(KH,o7r),e(rE,r7r),e(he,t7r),e(he,tE),e(tE,O5e),e(O5e,a7r),e(tE,n7r),e(tE,ZH),e(ZH,s7r),e(tE,l7r),e(Sr,i7r),M(aE,Sr,null),b(f,TNe,u),b(f,fc,u),e(fc,nE),e(nE,V5e),M(B8,V5e,null),e(fc,d7r),e(fc,X5e),e(X5e,c7r),b(f,MNe,u),b(f,nr,u),M(I8,nr,null),e(nr,f7r),e(nr,mc),e(mc,m7r),e(mc,eU),e(eU,g7r),e(mc,h7r),e(mc,oU),e(oU,p7r),e(mc,_7r),e(nr,u7r),e(nr,q8),e(q8,b7r),e(q8,z5e),e(z5e,v7r),e(q8,F7r),e(nr,T7r),e(nr,Bt),M(N8,Bt,null),e(Bt,M7r),e(Bt,W5e),e(W5e,E7r),e(Bt,C7r),e(Bt,gc),e(gc,w7r),e(gc,Q5e),e(Q5e,A7r),e(gc,y7r),e(gc,rU),e(rU,L7r),e(gc,x7r),e(Bt,$7r),M(sE,Bt,null),e(nr,k7r),e(nr,Rr),M(j8,Rr,null),e(Rr,S7r),e(Rr,H5e),e(H5e,R7r),e(Rr,P7r),e(Rr,ln),e(ln,B7r),e(ln,U5e),e(U5e,I7r),e(ln,q7r),e(ln,J5e),e(J5e,N7r),e(ln,j7r),e(ln,Y5e),e(Y5e,D7r),e(ln,G7r),e(Rr,O7r),e(Rr,D8),e(D8,lE),e(lE,K5e),e(K5e,V7r),e(lE,X7r),e(lE,tU),e(tU,z7r),e(lE,W7r),e(D8,Q7r),e(D8,iE),e(iE,Z5e),e(Z5e,H7r),e(iE,U7r),e(iE,aU),e(aU,J7r),e(iE,Y7r),e(Rr,K7r),M(dE,Rr,null),b(f,ENe,u),b(f,hc,u),e(hc,cE),e(cE,eve),M(G8,eve,null),e(hc,Z7r),e(hc,ove),e(ove,eMr),b(f,CNe,u),b(f,sr,u),M(O8,sr,null),e(sr,oMr),e(sr,pc),e(pc,rMr),e(pc,nU),e(nU,tMr),e(pc,aMr),e(pc,sU),e(sU,nMr),e(pc,sMr),e(sr,lMr),e(sr,V8),e(V8,iMr),e(V8,rve),e(rve,dMr),e(V8,cMr),e(sr,fMr),e(sr,It),M(X8,It,null),e(It,mMr),e(It,tve),e(tve,gMr),e(It,hMr),e(It,_c),e(_c,pMr),e(_c,ave),e(ave,_Mr),e(_c,uMr),e(_c,lU),e(lU,bMr),e(_c,vMr),e(It,FMr),M(fE,It,null),e(sr,TMr),e(sr,Pr),M(z8,Pr,null),e(Pr,MMr),e(Pr,nve),e(nve,EMr),e(Pr,CMr),e(Pr,dn),e(dn,wMr),e(dn,sve),e(sve,AMr),e(dn,yMr),e(dn,lve),e(lve,LMr),e(dn,xMr),e(dn,ive),e(ive,$Mr),e(dn,kMr),e(Pr,SMr),e(Pr,dve),e(dve,mE),e(mE,cve),e(cve,RMr),e(mE,PMr),e(mE,iU),e(iU,BMr),e(mE,IMr),e(Pr,qMr),M(gE,Pr,null),b(f,wNe,u),b(f,uc,u),e(uc,hE),e(hE,fve),M(W8,fve,null),e(uc,NMr),e(uc,mve),e(mve,jMr),b(f,ANe,u),b(f,lr,u),M(Q8,lr,null),e(lr,DMr),e(lr,bc),e(bc,GMr),e(bc,dU),e(dU,OMr),e(bc,VMr),e(bc,cU),e(cU,XMr),e(bc,zMr),e(lr,WMr),e(lr,H8),e(H8,QMr),e(H8,gve),e(gve,HMr),e(H8,UMr),e(lr,JMr),e(lr,qt),M(U8,qt,null),e(qt,YMr),e(qt,hve),e(hve,KMr),e(qt,ZMr),e(qt,vc),e(vc,eEr),e(vc,pve),e(pve,oEr),e(vc,rEr),e(vc,fU),e(fU,tEr),e(vc,aEr),e(qt,nEr),M(pE,qt,null),e(lr,sEr),e(lr,Br),M(J8,Br,null),e(Br,lEr),e(Br,_ve),e(_ve,iEr),e(Br,dEr),e(Br,cn),e(cn,cEr),e(cn,uve),e(uve,fEr),e(cn,mEr),e(cn,bve),e(bve,gEr),e(cn,hEr),e(cn,vve),e(vve,pEr),e(cn,_Er),e(Br,uEr),e(Br,de),e(de,_E),e(_E,Fve),e(Fve,bEr),e(_E,vEr),e(_E,mU),e(mU,FEr),e(_E,TEr),e(de,MEr),e(de,uE),e(uE,Tve),e(Tve,EEr),e(uE,CEr),e(uE,gU),e(gU,wEr),e(uE,AEr),e(de,yEr),e(de,bE),e(bE,Mve),e(Mve,LEr),e(bE,xEr),e(bE,hU),e(hU,$Er),e(bE,kEr),e(de,SEr),e(de,vE),e(vE,Eve),e(Eve,REr),e(vE,PEr),e(vE,pU),e(pU,BEr),e(vE,IEr),e(de,qEr),e(de,FE),e(FE,Cve),e(Cve,NEr),e(FE,jEr),e(FE,_U),e(_U,DEr),e(FE,GEr),e(de,OEr),e(de,TE),e(TE,wve),e(wve,VEr),e(TE,XEr),e(TE,uU),e(uU,zEr),e(TE,WEr),e(de,QEr),e(de,ME),e(ME,Ave),e(Ave,HEr),e(ME,UEr),e(ME,bU),e(bU,JEr),e(ME,YEr),e(de,KEr),e(de,EE),e(EE,yve),e(yve,ZEr),e(EE,eCr),e(EE,vU),e(vU,oCr),e(EE,rCr),e(de,tCr),e(de,CE),e(CE,Lve),e(Lve,aCr),e(CE,nCr),e(CE,FU),e(FU,sCr),e(CE,lCr),e(de,iCr),e(de,wE),e(wE,xve),e(xve,dCr),e(wE,cCr),e(wE,TU),e(TU,fCr),e(wE,mCr),e(de,gCr),e(de,AE),e(AE,$ve),e($ve,hCr),e(AE,pCr),e(AE,MU),e(MU,_Cr),e(AE,uCr),e(de,bCr),e(de,yE),e(yE,kve),e(kve,vCr),e(yE,FCr),e(yE,EU),e(EU,TCr),e(yE,MCr),e(de,ECr),e(de,LE),e(LE,Sve),e(Sve,CCr),e(LE,wCr),e(LE,CU),e(CU,ACr),e(LE,yCr),e(de,LCr),e(de,xE),e(xE,Rve),e(Rve,xCr),e(xE,$Cr),e(xE,wU),e(wU,kCr),e(xE,SCr),e(de,RCr),e(de,$E),e($E,Pve),e(Pve,PCr),e($E,BCr),e($E,AU),e(AU,ICr),e($E,qCr),e(de,NCr),e(de,kE),e(kE,Bve),e(Bve,jCr),e(kE,DCr),e(kE,yU),e(yU,GCr),e(kE,OCr),e(de,VCr),e(de,SE),e(SE,Ive),e(Ive,XCr),e(SE,zCr),e(SE,LU),e(LU,WCr),e(SE,QCr),e(de,HCr),e(de,RE),e(RE,qve),e(qve,UCr),e(RE,JCr),e(RE,xU),e(xU,YCr),e(RE,KCr),e(de,ZCr),e(de,PE),e(PE,Nve),e(Nve,e3r),e(PE,o3r),e(PE,$U),e($U,r3r),e(PE,t3r),e(de,a3r),e(de,BE),e(BE,jve),e(jve,n3r),e(BE,s3r),e(BE,kU),e(kU,l3r),e(BE,i3r),e(Br,d3r),M(IE,Br,null),b(f,yNe,u),b(f,Fc,u),e(Fc,qE),e(qE,Dve),M(Y8,Dve,null),e(Fc,c3r),e(Fc,Gve),e(Gve,f3r),b(f,LNe,u),b(f,ir,u),M(K8,ir,null),e(ir,m3r),e(ir,Tc),e(Tc,g3r),e(Tc,SU),e(SU,h3r),e(Tc,p3r),e(Tc,RU),e(RU,_3r),e(Tc,u3r),e(ir,b3r),e(ir,Z8),e(Z8,v3r),e(Z8,Ove),e(Ove,F3r),e(Z8,T3r),e(ir,M3r),e(ir,Nt),M(e9,Nt,null),e(Nt,E3r),e(Nt,Vve),e(Vve,C3r),e(Nt,w3r),e(Nt,Mc),e(Mc,A3r),e(Mc,Xve),e(Xve,y3r),e(Mc,L3r),e(Mc,PU),e(PU,x3r),e(Mc,$3r),e(Nt,k3r),M(NE,Nt,null),e(ir,S3r),e(ir,Ir),M(o9,Ir,null),e(Ir,R3r),e(Ir,zve),e(zve,P3r),e(Ir,B3r),e(Ir,fn),e(fn,I3r),e(fn,Wve),e(Wve,q3r),e(fn,N3r),e(fn,Qve),e(Qve,j3r),e(fn,D3r),e(fn,Hve),e(Hve,G3r),e(fn,O3r),e(Ir,V3r),e(Ir,ce),e(ce,jE),e(jE,Uve),e(Uve,X3r),e(jE,z3r),e(jE,BU),e(BU,W3r),e(jE,Q3r),e(ce,H3r),e(ce,DE),e(DE,Jve),e(Jve,U3r),e(DE,J3r),e(DE,IU),e(IU,Y3r),e(DE,K3r),e(ce,Z3r),e(ce,GE),e(GE,Yve),e(Yve,ewr),e(GE,owr),e(GE,qU),e(qU,rwr),e(GE,twr),e(ce,awr),e(ce,OE),e(OE,Kve),e(Kve,nwr),e(OE,swr),e(OE,NU),e(NU,lwr),e(OE,iwr),e(ce,dwr),e(ce,VE),e(VE,Zve),e(Zve,cwr),e(VE,fwr),e(VE,jU),e(jU,mwr),e(VE,gwr),e(ce,hwr),e(ce,XE),e(XE,eFe),e(eFe,pwr),e(XE,_wr),e(XE,DU),e(DU,uwr),e(XE,bwr),e(ce,vwr),e(ce,zE),e(zE,oFe),e(oFe,Fwr),e(zE,Twr),e(zE,GU),e(GU,Mwr),e(zE,Ewr),e(ce,Cwr),e(ce,WE),e(WE,rFe),e(rFe,wwr),e(WE,Awr),e(WE,OU),e(OU,ywr),e(WE,Lwr),e(ce,xwr),e(ce,QE),e(QE,tFe),e(tFe,$wr),e(QE,kwr),e(QE,VU),e(VU,Swr),e(QE,Rwr),e(ce,Pwr),e(ce,HE),e(HE,aFe),e(aFe,Bwr),e(HE,Iwr),e(HE,XU),e(XU,qwr),e(HE,Nwr),e(ce,jwr),e(ce,UE),e(UE,nFe),e(nFe,Dwr),e(UE,Gwr),e(UE,zU),e(zU,Owr),e(UE,Vwr),e(ce,Xwr),e(ce,JE),e(JE,sFe),e(sFe,zwr),e(JE,Wwr),e(JE,WU),e(WU,Qwr),e(JE,Hwr),e(ce,Uwr),e(ce,YE),e(YE,lFe),e(lFe,Jwr),e(YE,Ywr),e(YE,QU),e(QU,Kwr),e(YE,Zwr),e(ce,e0r),e(ce,KE),e(KE,iFe),e(iFe,o0r),e(KE,r0r),e(KE,HU),e(HU,t0r),e(KE,a0r),e(ce,n0r),e(ce,ZE),e(ZE,dFe),e(dFe,s0r),e(ZE,l0r),e(ZE,UU),e(UU,i0r),e(ZE,d0r),e(ce,c0r),e(ce,eC),e(eC,cFe),e(cFe,f0r),e(eC,m0r),e(eC,JU),e(JU,g0r),e(eC,h0r),e(ce,p0r),e(ce,oC),e(oC,fFe),e(fFe,_0r),e(oC,u0r),e(oC,YU),e(YU,b0r),e(oC,v0r),e(ce,F0r),e(ce,rC),e(rC,mFe),e(mFe,T0r),e(rC,M0r),e(rC,KU),e(KU,E0r),e(rC,C0r),e(ce,w0r),e(ce,tC),e(tC,gFe),e(gFe,A0r),e(tC,y0r),e(tC,ZU),e(ZU,L0r),e(tC,x0r),e(ce,$0r),e(ce,aC),e(aC,hFe),e(hFe,k0r),e(aC,S0r),e(aC,eJ),e(eJ,R0r),e(aC,P0r),e(Ir,B0r),M(nC,Ir,null),b(f,xNe,u),b(f,Ec,u),e(Ec,sC),e(sC,pFe),M(r9,pFe,null),e(Ec,I0r),e(Ec,_Fe),e(_Fe,q0r),b(f,$Ne,u),b(f,dr,u),M(t9,dr,null),e(dr,N0r),e(dr,Cc),e(Cc,j0r),e(Cc,oJ),e(oJ,D0r),e(Cc,G0r),e(Cc,rJ),e(rJ,O0r),e(Cc,V0r),e(dr,X0r),e(dr,a9),e(a9,z0r),e(a9,uFe),e(uFe,W0r),e(a9,Q0r),e(dr,H0r),e(dr,jt),M(n9,jt,null),e(jt,U0r),e(jt,bFe),e(bFe,J0r),e(jt,Y0r),e(jt,wc),e(wc,K0r),e(wc,vFe),e(vFe,Z0r),e(wc,eAr),e(wc,tJ),e(tJ,oAr),e(wc,rAr),e(jt,tAr),M(lC,jt,null),e(dr,aAr),e(dr,qr),M(s9,qr,null),e(qr,nAr),e(qr,FFe),e(FFe,sAr),e(qr,lAr),e(qr,mn),e(mn,iAr),e(mn,TFe),e(TFe,dAr),e(mn,cAr),e(mn,MFe),e(MFe,fAr),e(mn,mAr),e(mn,EFe),e(EFe,gAr),e(mn,hAr),e(qr,pAr),e(qr,CFe),e(CFe,iC),e(iC,wFe),e(wFe,_Ar),e(iC,uAr),e(iC,aJ),e(aJ,bAr),e(iC,vAr),e(qr,FAr),M(dC,qr,null),b(f,kNe,u),b(f,Ac,u),e(Ac,cC),e(cC,AFe),M(l9,AFe,null),e(Ac,TAr),e(Ac,yFe),e(yFe,MAr),b(f,SNe,u),b(f,cr,u),M(i9,cr,null),e(cr,EAr),e(cr,yc),e(yc,CAr),e(yc,nJ),e(nJ,wAr),e(yc,AAr),e(yc,sJ),e(sJ,yAr),e(yc,LAr),e(cr,xAr),e(cr,d9),e(d9,$Ar),e(d9,LFe),e(LFe,kAr),e(d9,SAr),e(cr,RAr),e(cr,Dt),M(c9,Dt,null),e(Dt,PAr),e(Dt,xFe),e(xFe,BAr),e(Dt,IAr),e(Dt,Lc),e(Lc,qAr),e(Lc,$Fe),e($Fe,NAr),e(Lc,jAr),e(Lc,lJ),e(lJ,DAr),e(Lc,GAr),e(Dt,OAr),M(fC,Dt,null),e(cr,VAr),e(cr,Nr),M(f9,Nr,null),e(Nr,XAr),e(Nr,kFe),e(kFe,zAr),e(Nr,WAr),e(Nr,gn),e(gn,QAr),e(gn,SFe),e(SFe,HAr),e(gn,UAr),e(gn,RFe),e(RFe,JAr),e(gn,YAr),e(gn,PFe),e(PFe,KAr),e(gn,ZAr),e(Nr,e6r),e(Nr,BFe),e(BFe,mC),e(mC,IFe),e(IFe,o6r),e(mC,r6r),e(mC,iJ),e(iJ,t6r),e(mC,a6r),e(Nr,n6r),M(gC,Nr,null),b(f,RNe,u),b(f,xc,u),e(xc,hC),e(hC,qFe),M(m9,qFe,null),e(xc,s6r),e(xc,NFe),e(NFe,l6r),b(f,PNe,u),b(f,fr,u),M(g9,fr,null),e(fr,i6r),e(fr,$c),e($c,d6r),e($c,dJ),e(dJ,c6r),e($c,f6r),e($c,cJ),e(cJ,m6r),e($c,g6r),e(fr,h6r),e(fr,h9),e(h9,p6r),e(h9,jFe),e(jFe,_6r),e(h9,u6r),e(fr,b6r),e(fr,Gt),M(p9,Gt,null),e(Gt,v6r),e(Gt,DFe),e(DFe,F6r),e(Gt,T6r),e(Gt,kc),e(kc,M6r),e(kc,GFe),e(GFe,E6r),e(kc,C6r),e(kc,fJ),e(fJ,w6r),e(kc,A6r),e(Gt,y6r),M(pC,Gt,null),e(fr,L6r),e(fr,jr),M(_9,jr,null),e(jr,x6r),e(jr,OFe),e(OFe,$6r),e(jr,k6r),e(jr,hn),e(hn,S6r),e(hn,VFe),e(VFe,R6r),e(hn,P6r),e(hn,XFe),e(XFe,B6r),e(hn,I6r),e(hn,zFe),e(zFe,q6r),e(hn,N6r),e(jr,j6r),e(jr,te),e(te,_C),e(_C,WFe),e(WFe,D6r),e(_C,G6r),e(_C,mJ),e(mJ,O6r),e(_C,V6r),e(te,X6r),e(te,uC),e(uC,QFe),e(QFe,z6r),e(uC,W6r),e(uC,gJ),e(gJ,Q6r),e(uC,H6r),e(te,U6r),e(te,bC),e(bC,HFe),e(HFe,J6r),e(bC,Y6r),e(bC,hJ),e(hJ,K6r),e(bC,Z6r),e(te,eyr),e(te,vC),e(vC,UFe),e(UFe,oyr),e(vC,ryr),e(vC,pJ),e(pJ,tyr),e(vC,ayr),e(te,nyr),e(te,FC),e(FC,JFe),e(JFe,syr),e(FC,lyr),e(FC,_J),e(_J,iyr),e(FC,dyr),e(te,cyr),e(te,TC),e(TC,YFe),e(YFe,fyr),e(TC,myr),e(TC,uJ),e(uJ,gyr),e(TC,hyr),e(te,pyr),e(te,MC),e(MC,KFe),e(KFe,_yr),e(MC,uyr),e(MC,bJ),e(bJ,byr),e(MC,vyr),e(te,Fyr),e(te,EC),e(EC,ZFe),e(ZFe,Tyr),e(EC,Myr),e(EC,vJ),e(vJ,Eyr),e(EC,Cyr),e(te,wyr),e(te,CC),e(CC,eTe),e(eTe,Ayr),e(CC,yyr),e(CC,FJ),e(FJ,Lyr),e(CC,xyr),e(te,$yr),e(te,wC),e(wC,oTe),e(oTe,kyr),e(wC,Syr),e(wC,TJ),e(TJ,Ryr),e(wC,Pyr),e(te,Byr),e(te,AC),e(AC,rTe),e(rTe,Iyr),e(AC,qyr),e(AC,MJ),e(MJ,Nyr),e(AC,jyr),e(te,Dyr),e(te,yC),e(yC,tTe),e(tTe,Gyr),e(yC,Oyr),e(yC,EJ),e(EJ,Vyr),e(yC,Xyr),e(te,zyr),e(te,LC),e(LC,aTe),e(aTe,Wyr),e(LC,Qyr),e(LC,CJ),e(CJ,Hyr),e(LC,Uyr),e(te,Jyr),e(te,xC),e(xC,nTe),e(nTe,Yyr),e(xC,Kyr),e(xC,wJ),e(wJ,Zyr),e(xC,eLr),e(te,oLr),e(te,$C),e($C,sTe),e(sTe,rLr),e($C,tLr),e($C,AJ),e(AJ,aLr),e($C,nLr),e(te,sLr),e(te,kC),e(kC,lTe),e(lTe,lLr),e(kC,iLr),e(kC,yJ),e(yJ,dLr),e(kC,cLr),e(te,fLr),e(te,SC),e(SC,iTe),e(iTe,mLr),e(SC,gLr),e(SC,LJ),e(LJ,hLr),e(SC,pLr),e(te,_Lr),e(te,RC),e(RC,dTe),e(dTe,uLr),e(RC,bLr),e(RC,xJ),e(xJ,vLr),e(RC,FLr),e(te,TLr),e(te,PC),e(PC,cTe),e(cTe,MLr),e(PC,ELr),e(PC,$J),e($J,CLr),e(PC,wLr),e(te,ALr),e(te,BC),e(BC,fTe),e(fTe,yLr),e(BC,LLr),e(BC,kJ),e(kJ,xLr),e(BC,$Lr),e(te,kLr),e(te,IC),e(IC,mTe),e(mTe,SLr),e(IC,RLr),e(IC,SJ),e(SJ,PLr),e(IC,BLr),e(te,ILr),e(te,qC),e(qC,gTe),e(gTe,qLr),e(qC,NLr),e(qC,RJ),e(RJ,jLr),e(qC,DLr),e(te,GLr),e(te,NC),e(NC,hTe),e(hTe,OLr),e(NC,VLr),e(NC,PJ),e(PJ,XLr),e(NC,zLr),e(te,WLr),e(te,jC),e(jC,pTe),e(pTe,QLr),e(jC,HLr),e(jC,BJ),e(BJ,ULr),e(jC,JLr),e(te,YLr),e(te,DC),e(DC,_Te),e(_Te,KLr),e(DC,ZLr),e(DC,IJ),e(IJ,e8r),e(DC,o8r),e(jr,r8r),M(GC,jr,null),b(f,BNe,u),b(f,Sc,u),e(Sc,OC),e(OC,uTe),M(u9,uTe,null),e(Sc,t8r),e(Sc,bTe),e(bTe,a8r),b(f,INe,u),b(f,mr,u),M(b9,mr,null),e(mr,n8r),e(mr,Rc),e(Rc,s8r),e(Rc,qJ),e(qJ,l8r),e(Rc,i8r),e(Rc,NJ),e(NJ,d8r),e(Rc,c8r),e(mr,f8r),e(mr,v9),e(v9,m8r),e(v9,vTe),e(vTe,g8r),e(v9,h8r),e(mr,p8r),e(mr,Ot),M(F9,Ot,null),e(Ot,_8r),e(Ot,FTe),e(FTe,u8r),e(Ot,b8r),e(Ot,Pc),e(Pc,v8r),e(Pc,TTe),e(TTe,F8r),e(Pc,T8r),e(Pc,jJ),e(jJ,M8r),e(Pc,E8r),e(Ot,C8r),M(VC,Ot,null),e(mr,w8r),e(mr,Dr),M(T9,Dr,null),e(Dr,A8r),e(Dr,MTe),e(MTe,y8r),e(Dr,L8r),e(Dr,pn),e(pn,x8r),e(pn,ETe),e(ETe,$8r),e(pn,k8r),e(pn,CTe),e(CTe,S8r),e(pn,R8r),e(pn,wTe),e(wTe,P8r),e(pn,B8r),e(Dr,I8r),e(Dr,Re),e(Re,XC),e(XC,ATe),e(ATe,q8r),e(XC,N8r),e(XC,DJ),e(DJ,j8r),e(XC,D8r),e(Re,G8r),e(Re,zC),e(zC,yTe),e(yTe,O8r),e(zC,V8r),e(zC,GJ),e(GJ,X8r),e(zC,z8r),e(Re,W8r),e(Re,WC),e(WC,LTe),e(LTe,Q8r),e(WC,H8r),e(WC,OJ),e(OJ,U8r),e(WC,J8r),e(Re,Y8r),e(Re,QC),e(QC,xTe),e(xTe,K8r),e(QC,Z8r),e(QC,VJ),e(VJ,e9r),e(QC,o9r),e(Re,r9r),e(Re,HC),e(HC,$Te),e($Te,t9r),e(HC,a9r),e(HC,XJ),e(XJ,n9r),e(HC,s9r),e(Re,l9r),e(Re,UC),e(UC,kTe),e(kTe,i9r),e(UC,d9r),e(UC,zJ),e(zJ,c9r),e(UC,f9r),e(Re,m9r),e(Re,JC),e(JC,STe),e(STe,g9r),e(JC,h9r),e(JC,WJ),e(WJ,p9r),e(JC,_9r),e(Re,u9r),e(Re,YC),e(YC,RTe),e(RTe,b9r),e(YC,v9r),e(YC,QJ),e(QJ,F9r),e(YC,T9r),e(Re,M9r),e(Re,KC),e(KC,PTe),e(PTe,E9r),e(KC,C9r),e(KC,HJ),e(HJ,w9r),e(KC,A9r),e(Dr,y9r),M(ZC,Dr,null),b(f,qNe,u),b(f,Bc,u),e(Bc,e3),e(e3,BTe),M(M9,BTe,null),e(Bc,L9r),e(Bc,ITe),e(ITe,x9r),b(f,NNe,u),b(f,gr,u),M(E9,gr,null),e(gr,$9r),e(gr,Ic),e(Ic,k9r),e(Ic,UJ),e(UJ,S9r),e(Ic,R9r),e(Ic,JJ),e(JJ,P9r),e(Ic,B9r),e(gr,I9r),e(gr,C9),e(C9,q9r),e(C9,qTe),e(qTe,N9r),e(C9,j9r),e(gr,D9r),e(gr,Vt),M(w9,Vt,null),e(Vt,G9r),e(Vt,NTe),e(NTe,O9r),e(Vt,V9r),e(Vt,qc),e(qc,X9r),e(qc,jTe),e(jTe,z9r),e(qc,W9r),e(qc,YJ),e(YJ,Q9r),e(qc,H9r),e(Vt,U9r),M(o3,Vt,null),e(gr,J9r),e(gr,Gr),M(A9,Gr,null),e(Gr,Y9r),e(Gr,DTe),e(DTe,K9r),e(Gr,Z9r),e(Gr,_n),e(_n,exr),e(_n,GTe),e(GTe,oxr),e(_n,rxr),e(_n,OTe),e(OTe,txr),e(_n,axr),e(_n,VTe),e(VTe,nxr),e(_n,sxr),e(Gr,lxr),e(Gr,Ee),e(Ee,r3),e(r3,XTe),e(XTe,ixr),e(r3,dxr),e(r3,KJ),e(KJ,cxr),e(r3,fxr),e(Ee,mxr),e(Ee,t3),e(t3,zTe),e(zTe,gxr),e(t3,hxr),e(t3,ZJ),e(ZJ,pxr),e(t3,_xr),e(Ee,uxr),e(Ee,a3),e(a3,WTe),e(WTe,bxr),e(a3,vxr),e(a3,eY),e(eY,Fxr),e(a3,Txr),e(Ee,Mxr),e(Ee,n3),e(n3,QTe),e(QTe,Exr),e(n3,Cxr),e(n3,oY),e(oY,wxr),e(n3,Axr),e(Ee,yxr),e(Ee,s3),e(s3,HTe),e(HTe,Lxr),e(s3,xxr),e(s3,rY),e(rY,$xr),e(s3,kxr),e(Ee,Sxr),e(Ee,l3),e(l3,UTe),e(UTe,Rxr),e(l3,Pxr),e(l3,tY),e(tY,Bxr),e(l3,Ixr),e(Ee,qxr),e(Ee,i3),e(i3,JTe),e(JTe,Nxr),e(i3,jxr),e(i3,aY),e(aY,Dxr),e(i3,Gxr),e(Ee,Oxr),e(Ee,d3),e(d3,YTe),e(YTe,Vxr),e(d3,Xxr),e(d3,nY),e(nY,zxr),e(d3,Wxr),e(Ee,Qxr),e(Ee,c3),e(c3,KTe),e(KTe,Hxr),e(c3,Uxr),e(c3,sY),e(sY,Jxr),e(c3,Yxr),e(Ee,Kxr),e(Ee,f3),e(f3,ZTe),e(ZTe,Zxr),e(f3,e$r),e(f3,lY),e(lY,o$r),e(f3,r$r),e(Ee,t$r),e(Ee,m3),e(m3,e7e),e(e7e,a$r),e(m3,n$r),e(m3,iY),e(iY,s$r),e(m3,l$r),e(Ee,i$r),e(Ee,g3),e(g3,o7e),e(o7e,d$r),e(g3,c$r),e(g3,dY),e(dY,f$r),e(g3,m$r),e(Gr,g$r),M(h3,Gr,null),b(f,jNe,u),b(f,Nc,u),e(Nc,p3),e(p3,r7e),M(y9,r7e,null),e(Nc,h$r),e(Nc,t7e),e(t7e,p$r),b(f,DNe,u),b(f,hr,u),M(L9,hr,null),e(hr,_$r),e(hr,jc),e(jc,u$r),e(jc,cY),e(cY,b$r),e(jc,v$r),e(jc,fY),e(fY,F$r),e(jc,T$r),e(hr,M$r),e(hr,x9),e(x9,E$r),e(x9,a7e),e(a7e,C$r),e(x9,w$r),e(hr,A$r),e(hr,Xt),M($9,Xt,null),e(Xt,y$r),e(Xt,n7e),e(n7e,L$r),e(Xt,x$r),e(Xt,Dc),e(Dc,$$r),e(Dc,s7e),e(s7e,k$r),e(Dc,S$r),e(Dc,mY),e(mY,R$r),e(Dc,P$r),e(Xt,B$r),M(_3,Xt,null),e(hr,I$r),e(hr,Or),M(k9,Or,null),e(Or,q$r),e(Or,l7e),e(l7e,N$r),e(Or,j$r),e(Or,un),e(un,D$r),e(un,i7e),e(i7e,G$r),e(un,O$r),e(un,d7e),e(d7e,V$r),e(un,X$r),e(un,c7e),e(c7e,z$r),e(un,W$r),e(Or,Q$r),e(Or,Le),e(Le,u3),e(u3,f7e),e(f7e,H$r),e(u3,U$r),e(u3,gY),e(gY,J$r),e(u3,Y$r),e(Le,K$r),e(Le,b3),e(b3,m7e),e(m7e,Z$r),e(b3,ekr),e(b3,hY),e(hY,okr),e(b3,rkr),e(Le,tkr),e(Le,v3),e(v3,g7e),e(g7e,akr),e(v3,nkr),e(v3,pY),e(pY,skr),e(v3,lkr),e(Le,ikr),e(Le,F3),e(F3,h7e),e(h7e,dkr),e(F3,ckr),e(F3,_Y),e(_Y,fkr),e(F3,mkr),e(Le,gkr),e(Le,T3),e(T3,p7e),e(p7e,hkr),e(T3,pkr),e(T3,uY),e(uY,_kr),e(T3,ukr),e(Le,bkr),e(Le,M3),e(M3,_7e),e(_7e,vkr),e(M3,Fkr),e(M3,bY),e(bY,Tkr),e(M3,Mkr),e(Le,Ekr),e(Le,E3),e(E3,u7e),e(u7e,Ckr),e(E3,wkr),e(E3,vY),e(vY,Akr),e(E3,ykr),e(Le,Lkr),e(Le,C3),e(C3,b7e),e(b7e,xkr),e(C3,$kr),e(C3,FY),e(FY,kkr),e(C3,Skr),e(Le,Rkr),e(Le,w3),e(w3,v7e),e(v7e,Pkr),e(w3,Bkr),e(w3,TY),e(TY,Ikr),e(w3,qkr),e(Le,Nkr),e(Le,A3),e(A3,F7e),e(F7e,jkr),e(A3,Dkr),e(A3,MY),e(MY,Gkr),e(A3,Okr),e(Or,Vkr),M(y3,Or,null),b(f,GNe,u),b(f,Gc,u),e(Gc,L3),e(L3,T7e),M(S9,T7e,null),e(Gc,Xkr),e(Gc,M7e),e(M7e,zkr),b(f,ONe,u),b(f,pr,u),M(R9,pr,null),e(pr,Wkr),e(pr,Oc),e(Oc,Qkr),e(Oc,EY),e(EY,Hkr),e(Oc,Ukr),e(Oc,CY),e(CY,Jkr),e(Oc,Ykr),e(pr,Kkr),e(pr,P9),e(P9,Zkr),e(P9,E7e),e(E7e,eSr),e(P9,oSr),e(pr,rSr),e(pr,zt),M(B9,zt,null),e(zt,tSr),e(zt,C7e),e(C7e,aSr),e(zt,nSr),e(zt,Vc),e(Vc,sSr),e(Vc,w7e),e(w7e,lSr),e(Vc,iSr),e(Vc,wY),e(wY,dSr),e(Vc,cSr),e(zt,fSr),M(x3,zt,null),e(pr,mSr),e(pr,Vr),M(I9,Vr,null),e(Vr,gSr),e(Vr,A7e),e(A7e,hSr),e(Vr,pSr),e(Vr,bn),e(bn,_Sr),e(bn,y7e),e(y7e,uSr),e(bn,bSr),e(bn,L7e),e(L7e,vSr),e(bn,FSr),e(bn,x7e),e(x7e,TSr),e(bn,MSr),e(Vr,ESr),e(Vr,Pe),e(Pe,$3),e($3,$7e),e($7e,CSr),e($3,wSr),e($3,AY),e(AY,ASr),e($3,ySr),e(Pe,LSr),e(Pe,k3),e(k3,k7e),e(k7e,xSr),e(k3,$Sr),e(k3,yY),e(yY,kSr),e(k3,SSr),e(Pe,RSr),e(Pe,S3),e(S3,S7e),e(S7e,PSr),e(S3,BSr),e(S3,LY),e(LY,ISr),e(S3,qSr),e(Pe,NSr),e(Pe,R3),e(R3,R7e),e(R7e,jSr),e(R3,DSr),e(R3,xY),e(xY,GSr),e(R3,OSr),e(Pe,VSr),e(Pe,P3),e(P3,P7e),e(P7e,XSr),e(P3,zSr),e(P3,$Y),e($Y,WSr),e(P3,QSr),e(Pe,HSr),e(Pe,B3),e(B3,B7e),e(B7e,USr),e(B3,JSr),e(B3,kY),e(kY,YSr),e(B3,KSr),e(Pe,ZSr),e(Pe,I3),e(I3,I7e),e(I7e,eRr),e(I3,oRr),e(I3,SY),e(SY,rRr),e(I3,tRr),e(Pe,aRr),e(Pe,q3),e(q3,q7e),e(q7e,nRr),e(q3,sRr),e(q3,RY),e(RY,lRr),e(q3,iRr),e(Pe,dRr),e(Pe,N3),e(N3,N7e),e(N7e,cRr),e(N3,fRr),e(N3,PY),e(PY,mRr),e(N3,gRr),e(Vr,hRr),M(j3,Vr,null),b(f,VNe,u),b(f,Xc,u),e(Xc,D3),e(D3,j7e),M(q9,j7e,null),e(Xc,pRr),e(Xc,D7e),e(D7e,_Rr),b(f,XNe,u),b(f,_r,u),M(N9,_r,null),e(_r,uRr),e(_r,zc),e(zc,bRr),e(zc,BY),e(BY,vRr),e(zc,FRr),e(zc,IY),e(IY,TRr),e(zc,MRr),e(_r,ERr),e(_r,j9),e(j9,CRr),e(j9,G7e),e(G7e,wRr),e(j9,ARr),e(_r,yRr),e(_r,Wt),M(D9,Wt,null),e(Wt,LRr),e(Wt,O7e),e(O7e,xRr),e(Wt,$Rr),e(Wt,Wc),e(Wc,kRr),e(Wc,V7e),e(V7e,SRr),e(Wc,RRr),e(Wc,qY),e(qY,PRr),e(Wc,BRr),e(Wt,IRr),M(G3,Wt,null),e(_r,qRr),e(_r,Xr),M(G9,Xr,null),e(Xr,NRr),e(Xr,X7e),e(X7e,jRr),e(Xr,DRr),e(Xr,vn),e(vn,GRr),e(vn,z7e),e(z7e,ORr),e(vn,VRr),e(vn,W7e),e(W7e,XRr),e(vn,zRr),e(vn,Q7e),e(Q7e,WRr),e(vn,QRr),e(Xr,HRr),e(Xr,xe),e(xe,O3),e(O3,H7e),e(H7e,URr),e(O3,JRr),e(O3,NY),e(NY,YRr),e(O3,KRr),e(xe,ZRr),e(xe,V3),e(V3,U7e),e(U7e,ePr),e(V3,oPr),e(V3,jY),e(jY,rPr),e(V3,tPr),e(xe,aPr),e(xe,X3),e(X3,J7e),e(J7e,nPr),e(X3,sPr),e(X3,DY),e(DY,lPr),e(X3,iPr),e(xe,dPr),e(xe,z3),e(z3,Y7e),e(Y7e,cPr),e(z3,fPr),e(z3,GY),e(GY,mPr),e(z3,gPr),e(xe,hPr),e(xe,W3),e(W3,K7e),e(K7e,pPr),e(W3,_Pr),e(W3,OY),e(OY,uPr),e(W3,bPr),e(xe,vPr),e(xe,Q3),e(Q3,Z7e),e(Z7e,FPr),e(Q3,TPr),e(Q3,VY),e(VY,MPr),e(Q3,EPr),e(xe,CPr),e(xe,H3),e(H3,eMe),e(eMe,wPr),e(H3,APr),e(H3,XY),e(XY,yPr),e(H3,LPr),e(xe,xPr),e(xe,U3),e(U3,oMe),e(oMe,$Pr),e(U3,kPr),e(U3,zY),e(zY,SPr),e(U3,RPr),e(xe,PPr),e(xe,J3),e(J3,rMe),e(rMe,BPr),e(J3,IPr),e(J3,WY),e(WY,qPr),e(J3,NPr),e(xe,jPr),e(xe,Y3),e(Y3,tMe),e(tMe,DPr),e(Y3,GPr),e(Y3,QY),e(QY,OPr),e(Y3,VPr),e(Xr,XPr),M(K3,Xr,null),b(f,zNe,u),b(f,Qc,u),e(Qc,Z3),e(Z3,aMe),M(O9,aMe,null),e(Qc,zPr),e(Qc,nMe),e(nMe,WPr),b(f,WNe,u),b(f,ur,u),M(V9,ur,null),e(ur,QPr),e(ur,Hc),e(Hc,HPr),e(Hc,HY),e(HY,UPr),e(Hc,JPr),e(Hc,UY),e(UY,YPr),e(Hc,KPr),e(ur,ZPr),e(ur,X9),e(X9,eBr),e(X9,sMe),e(sMe,oBr),e(X9,rBr),e(ur,tBr),e(ur,Qt),M(z9,Qt,null),e(Qt,aBr),e(Qt,lMe),e(lMe,nBr),e(Qt,sBr),e(Qt,Uc),e(Uc,lBr),e(Uc,iMe),e(iMe,iBr),e(Uc,dBr),e(Uc,JY),e(JY,cBr),e(Uc,fBr),e(Qt,mBr),M(ew,Qt,null),e(ur,gBr),e(ur,zr),M(W9,zr,null),e(zr,hBr),e(zr,dMe),e(dMe,pBr),e(zr,_Br),e(zr,Fn),e(Fn,uBr),e(Fn,cMe),e(cMe,bBr),e(Fn,vBr),e(Fn,fMe),e(fMe,FBr),e(Fn,TBr),e(Fn,mMe),e(mMe,MBr),e(Fn,EBr),e(zr,CBr),e(zr,$e),e($e,ow),e(ow,gMe),e(gMe,wBr),e(ow,ABr),e(ow,YY),e(YY,yBr),e(ow,LBr),e($e,xBr),e($e,rw),e(rw,hMe),e(hMe,$Br),e(rw,kBr),e(rw,KY),e(KY,SBr),e(rw,RBr),e($e,PBr),e($e,tw),e(tw,pMe),e(pMe,BBr),e(tw,IBr),e(tw,ZY),e(ZY,qBr),e(tw,NBr),e($e,jBr),e($e,aw),e(aw,_Me),e(_Me,DBr),e(aw,GBr),e(aw,eK),e(eK,OBr),e(aw,VBr),e($e,XBr),e($e,nw),e(nw,uMe),e(uMe,zBr),e(nw,WBr),e(nw,oK),e(oK,QBr),e(nw,HBr),e($e,UBr),e($e,sw),e(sw,bMe),e(bMe,JBr),e(sw,YBr),e(sw,rK),e(rK,KBr),e(sw,ZBr),e($e,eIr),e($e,lw),e(lw,vMe),e(vMe,oIr),e(lw,rIr),e(lw,tK),e(tK,tIr),e(lw,aIr),e($e,nIr),e($e,iw),e(iw,FMe),e(FMe,sIr),e(iw,lIr),e(iw,aK),e(aK,iIr),e(iw,dIr),e($e,cIr),e($e,dw),e(dw,TMe),e(TMe,fIr),e(dw,mIr),e(dw,nK),e(nK,gIr),e(dw,hIr),e($e,pIr),e($e,cw),e(cw,MMe),e(MMe,_Ir),e(cw,uIr),e(cw,sK),e(sK,bIr),e(cw,vIr),e(zr,FIr),M(fw,zr,null),b(f,QNe,u),b(f,Jc,u),e(Jc,mw),e(mw,EMe),M(Q9,EMe,null),e(Jc,TIr),e(Jc,CMe),e(CMe,MIr),b(f,HNe,u),b(f,br,u),M(H9,br,null),e(br,EIr),e(br,Yc),e(Yc,CIr),e(Yc,lK),e(lK,wIr),e(Yc,AIr),e(Yc,iK),e(iK,yIr),e(Yc,LIr),e(br,xIr),e(br,U9),e(U9,$Ir),e(U9,wMe),e(wMe,kIr),e(U9,SIr),e(br,RIr),e(br,Ht),M(J9,Ht,null),e(Ht,PIr),e(Ht,AMe),e(AMe,BIr),e(Ht,IIr),e(Ht,Kc),e(Kc,qIr),e(Kc,yMe),e(yMe,NIr),e(Kc,jIr),e(Kc,dK),e(dK,DIr),e(Kc,GIr),e(Ht,OIr),M(gw,Ht,null),e(br,VIr),e(br,Wr),M(Y9,Wr,null),e(Wr,XIr),e(Wr,LMe),e(LMe,zIr),e(Wr,WIr),e(Wr,Tn),e(Tn,QIr),e(Tn,xMe),e(xMe,HIr),e(Tn,UIr),e(Tn,$Me),e($Me,JIr),e(Tn,YIr),e(Tn,kMe),e(kMe,KIr),e(Tn,ZIr),e(Wr,eqr),e(Wr,De),e(De,hw),e(hw,SMe),e(SMe,oqr),e(hw,rqr),e(hw,cK),e(cK,tqr),e(hw,aqr),e(De,nqr),e(De,pw),e(pw,RMe),e(RMe,sqr),e(pw,lqr),e(pw,fK),e(fK,iqr),e(pw,dqr),e(De,cqr),e(De,_w),e(_w,PMe),e(PMe,fqr),e(_w,mqr),e(_w,mK),e(mK,gqr),e(_w,hqr),e(De,pqr),e(De,uw),e(uw,BMe),e(BMe,_qr),e(uw,uqr),e(uw,gK),e(gK,bqr),e(uw,vqr),e(De,Fqr),e(De,bw),e(bw,IMe),e(IMe,Tqr),e(bw,Mqr),e(bw,hK),e(hK,Eqr),e(bw,Cqr),e(De,wqr),e(De,vw),e(vw,qMe),e(qMe,Aqr),e(vw,yqr),e(vw,pK),e(pK,Lqr),e(vw,xqr),e(De,$qr),e(De,Fw),e(Fw,NMe),e(NMe,kqr),e(Fw,Sqr),e(Fw,_K),e(_K,Rqr),e(Fw,Pqr),e(De,Bqr),e(De,Tw),e(Tw,jMe),e(jMe,Iqr),e(Tw,qqr),e(Tw,uK),e(uK,Nqr),e(Tw,jqr),e(Wr,Dqr),M(Mw,Wr,null),b(f,UNe,u),b(f,Zc,u),e(Zc,Ew),e(Ew,DMe),M(K9,DMe,null),e(Zc,Gqr),e(Zc,GMe),e(GMe,Oqr),b(f,JNe,u),b(f,vr,u),M(Z9,vr,null),e(vr,Vqr),e(vr,ef),e(ef,Xqr),e(ef,bK),e(bK,zqr),e(ef,Wqr),e(ef,vK),e(vK,Qqr),e(ef,Hqr),e(vr,Uqr),e(vr,ex),e(ex,Jqr),e(ex,OMe),e(OMe,Yqr),e(ex,Kqr),e(vr,Zqr),e(vr,Ut),M(ox,Ut,null),e(Ut,eNr),e(Ut,VMe),e(VMe,oNr),e(Ut,rNr),e(Ut,of),e(of,tNr),e(of,XMe),e(XMe,aNr),e(of,nNr),e(of,FK),e(FK,sNr),e(of,lNr),e(Ut,iNr),M(Cw,Ut,null),e(vr,dNr),e(vr,Qr),M(rx,Qr,null),e(Qr,cNr),e(Qr,zMe),e(zMe,fNr),e(Qr,mNr),e(Qr,Mn),e(Mn,gNr),e(Mn,WMe),e(WMe,hNr),e(Mn,pNr),e(Mn,QMe),e(QMe,_Nr),e(Mn,uNr),e(Mn,HMe),e(HMe,bNr),e(Mn,vNr),e(Qr,FNr),e(Qr,Ge),e(Ge,ww),e(ww,UMe),e(UMe,TNr),e(ww,MNr),e(ww,TK),e(TK,ENr),e(ww,CNr),e(Ge,wNr),e(Ge,Aw),e(Aw,JMe),e(JMe,ANr),e(Aw,yNr),e(Aw,MK),e(MK,LNr),e(Aw,xNr),e(Ge,$Nr),e(Ge,yw),e(yw,YMe),e(YMe,kNr),e(yw,SNr),e(yw,EK),e(EK,RNr),e(yw,PNr),e(Ge,BNr),e(Ge,Lw),e(Lw,KMe),e(KMe,INr),e(Lw,qNr),e(Lw,CK),e(CK,NNr),e(Lw,jNr),e(Ge,DNr),e(Ge,xw),e(xw,ZMe),e(ZMe,GNr),e(xw,ONr),e(xw,wK),e(wK,VNr),e(xw,XNr),e(Ge,zNr),e(Ge,$w),e($w,eEe),e(eEe,WNr),e($w,QNr),e($w,AK),e(AK,HNr),e($w,UNr),e(Ge,JNr),e(Ge,kw),e(kw,oEe),e(oEe,YNr),e(kw,KNr),e(kw,yK),e(yK,ZNr),e(kw,ejr),e(Ge,ojr),e(Ge,Sw),e(Sw,rEe),e(rEe,rjr),e(Sw,tjr),e(Sw,LK),e(LK,ajr),e(Sw,njr),e(Qr,sjr),M(Rw,Qr,null),b(f,YNe,u),b(f,rf,u),e(rf,Pw),e(Pw,tEe),M(tx,tEe,null),e(rf,ljr),e(rf,aEe),e(aEe,ijr),b(f,KNe,u),b(f,Fr,u),M(ax,Fr,null),e(Fr,djr),e(Fr,tf),e(tf,cjr),e(tf,xK),e(xK,fjr),e(tf,mjr),e(tf,$K),e($K,gjr),e(tf,hjr),e(Fr,pjr),e(Fr,nx),e(nx,_jr),e(nx,nEe),e(nEe,ujr),e(nx,bjr),e(Fr,vjr),e(Fr,Jt),M(sx,Jt,null),e(Jt,Fjr),e(Jt,sEe),e(sEe,Tjr),e(Jt,Mjr),e(Jt,af),e(af,Ejr),e(af,lEe),e(lEe,Cjr),e(af,wjr),e(af,kK),e(kK,Ajr),e(af,yjr),e(Jt,Ljr),M(Bw,Jt,null),e(Fr,xjr),e(Fr,Hr),M(lx,Hr,null),e(Hr,$jr),e(Hr,iEe),e(iEe,kjr),e(Hr,Sjr),e(Hr,En),e(En,Rjr),e(En,dEe),e(dEe,Pjr),e(En,Bjr),e(En,cEe),e(cEe,Ijr),e(En,qjr),e(En,fEe),e(fEe,Njr),e(En,jjr),e(Hr,Djr),e(Hr,mEe),e(mEe,Iw),e(Iw,gEe),e(gEe,Gjr),e(Iw,Ojr),e(Iw,SK),e(SK,Vjr),e(Iw,Xjr),e(Hr,zjr),M(qw,Hr,null),b(f,ZNe,u),b(f,nf,u),e(nf,Nw),e(Nw,hEe),M(ix,hEe,null),e(nf,Wjr),e(nf,pEe),e(pEe,Qjr),b(f,eje,u),b(f,Tr,u),M(dx,Tr,null),e(Tr,Hjr),e(Tr,sf),e(sf,Ujr),e(sf,RK),e(RK,Jjr),e(sf,Yjr),e(sf,PK),e(PK,Kjr),e(sf,Zjr),e(Tr,eDr),e(Tr,cx),e(cx,oDr),e(cx,_Ee),e(_Ee,rDr),e(cx,tDr),e(Tr,aDr),e(Tr,Yt),M(fx,Yt,null),e(Yt,nDr),e(Yt,uEe),e(uEe,sDr),e(Yt,lDr),e(Yt,lf),e(lf,iDr),e(lf,bEe),e(bEe,dDr),e(lf,cDr),e(lf,BK),e(BK,fDr),e(lf,mDr),e(Yt,gDr),M(jw,Yt,null),e(Tr,hDr),e(Tr,Ur),M(mx,Ur,null),e(Ur,pDr),e(Ur,vEe),e(vEe,_Dr),e(Ur,uDr),e(Ur,Cn),e(Cn,bDr),e(Cn,FEe),e(FEe,vDr),e(Cn,FDr),e(Cn,TEe),e(TEe,TDr),e(Cn,MDr),e(Cn,MEe),e(MEe,EDr),e(Cn,CDr),e(Ur,wDr),e(Ur,gx),e(gx,Dw),e(Dw,EEe),e(EEe,ADr),e(Dw,yDr),e(Dw,IK),e(IK,LDr),e(Dw,xDr),e(gx,$Dr),e(gx,Gw),e(Gw,CEe),e(CEe,kDr),e(Gw,SDr),e(Gw,qK),e(qK,RDr),e(Gw,PDr),e(Ur,BDr),M(Ow,Ur,null),b(f,oje,u),b(f,df,u),e(df,Vw),e(Vw,wEe),M(hx,wEe,null),e(df,IDr),e(df,AEe),e(AEe,qDr),b(f,rje,u),b(f,Mr,u),M(px,Mr,null),e(Mr,NDr),e(Mr,cf),e(cf,jDr),e(cf,NK),e(NK,DDr),e(cf,GDr),e(cf,jK),e(jK,ODr),e(cf,VDr),e(Mr,XDr),e(Mr,_x),e(_x,zDr),e(_x,yEe),e(yEe,WDr),e(_x,QDr),e(Mr,HDr),e(Mr,Kt),M(ux,Kt,null),e(Kt,UDr),e(Kt,LEe),e(LEe,JDr),e(Kt,YDr),e(Kt,ff),e(ff,KDr),e(ff,xEe),e(xEe,ZDr),e(ff,eGr),e(ff,DK),e(DK,oGr),e(ff,rGr),e(Kt,tGr),M(Xw,Kt,null),e(Mr,aGr),e(Mr,Jr),M(bx,Jr,null),e(Jr,nGr),e(Jr,$Ee),e($Ee,sGr),e(Jr,lGr),e(Jr,wn),e(wn,iGr),e(wn,kEe),e(kEe,dGr),e(wn,cGr),e(wn,SEe),e(SEe,fGr),e(wn,mGr),e(wn,REe),e(REe,gGr),e(wn,hGr),e(Jr,pGr),e(Jr,PEe),e(PEe,zw),e(zw,BEe),e(BEe,_Gr),e(zw,uGr),e(zw,GK),e(GK,bGr),e(zw,vGr),e(Jr,FGr),M(Ww,Jr,null),tje=!0},p(f,[u]){const vx={};u&2&&(vx.$$scope={dirty:u,ctx:f}),Ff.$set(vx);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),Tg.$set(IEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),eh.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),$h.$set(NEe);const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),kh.$set(Fx);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),Jh.$set(jEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Yh.$set(An);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),ep.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),Q_.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),U_.$set(OEe);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),ju.$set(Tx);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),Gu.$set(VEe);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),w2.$set(Mx);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),y2.$set(XEe);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),c1.$set(Ex);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),m1.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),$1.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),S1.$set(QEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),Ab.$set(mf);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),Lb.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),n4.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),l4.$set(JEe);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),h4.$set(Cx);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),_4.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),Y4.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),Z4.$set(ZEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),D5.$set(et);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),O5.$set(wx);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),z5.$set(eCe);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),Q5.$set(Ax);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),lv.$set(oCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),dv.$set(ot);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),mv.$set(rCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),hv.$set(gf);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),wv.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),yv.$set(aCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Pv.$set(y);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),Iv.$set(Qw);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),Qv.$set(nCe);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),Uv.$set(sCe);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),Zv.$set(Hw);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),oF.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),iF.$set(iCe);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),cF.$set(Uw);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),pF.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),uF.$set(cCe);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),TF.$set(Jw);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),EF.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),AF.$set(mCe);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),LF.$set(Yw);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),PF.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),IF.$set(hCe);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),jF.$set(Kw);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),GF.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),RT.$set(_Ce);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),BT.$set(Zw);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),n7.$set(uCe);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),l7.$set(bCe);const e0={};u&2&&(e0.$$scope={dirty:u,ctx:f}),F7.$set(e0);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),M7.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),y7.$set(FCe);const o0={};u&2&&(o0.$$scope={dirty:u,ctx:f}),x7.$set(o0);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),J7.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),K7.$set(MCe);const r0={};u&2&&(r0.$$scope={dirty:u,ctx:f}),dM.$set(r0);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),fM.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),NM.$set(CCe);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),DM.$set(t0);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),aE.$set(wCe);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),sE.$set(ACe);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),dE.$set(a0);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),fE.$set(yCe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),gE.$set(LCe);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),pE.$set(n0);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),IE.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),NE.$set($Ce);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),nC.$set(s0);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),lC.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),dC.$set(SCe);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),fC.$set(l0);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),gC.$set(RCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),pC.$set(PCe);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),GC.$set(i0);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),VC.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),ZC.$set(ICe);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),o3.$set(d0);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),h3.$set(qCe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),_3.$set(NCe);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),y3.$set(c0);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),x3.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),j3.$set(DCe);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),G3.$set(f0);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),K3.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),ew.$set(OCe);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),fw.$set(m0);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),gw.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),Mw.$set(XCe);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),Cw.$set(g0);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),Rw.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),Bw.$set(WCe);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),qw.$set(h0);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),jw.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),Ow.$set(HCe);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),Xw.$set(p0);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),Ww.$set(UCe)},i(f){tje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(Ff.$$.fragment,f),E(_6.$$.fragment,f),E(u6.$$.fragment,f),E(F6.$$.fragment,f),E(Tg.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(A6.$$.fragment,f),E(eh.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(S6.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(N6.$$.fragment,f),E(Jh.$$.fragment,f),E(Yh.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(V6.$$.fragment,f),E(ep.$$.fragment,f),E(X6.$$.fragment,f),E(Q_.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(U_.$$.fragment,f),E(U6.$$.fragment,f),E(ju.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(Gu.$$.fragment,f),E(ey.$$.fragment,f),E(w2.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(y2.$$.fragment,f),E(ny.$$.fragment,f),E(c1.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(m1.$$.fragment,f),E(cy.$$.fragment,f),E($1.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(S1.$$.fragment,f),E(py.$$.fragment,f),E(Ab.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(Lb.$$.fragment,f),E(Fy.$$.fragment,f),E(n4.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(l4.$$.fragment,f),E(wy.$$.fragment,f),E(h4.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(_4.$$.fragment,f),E($y.$$.fragment,f),E(Y4.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(Z4.$$.fragment,f),E(By.$$.fragment,f),E(D5.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(O5.$$.fragment,f),E(Dy.$$.fragment,f),E(z5.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Q5.$$.fragment,f),E(zy.$$.fragment,f),E(lv.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(dv.$$.fragment,f),E(Jy.$$.fragment,f),E(mv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(hv.$$.fragment,f),E(oL.$$.fragment,f),E(wv.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(yv.$$.fragment,f),E(sL.$$.fragment,f),E(Pv.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(Iv.$$.fragment,f),E(fL.$$.fragment,f),E(Qv.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(Uv.$$.fragment,f),E(_L.$$.fragment,f),E(Zv.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(oF.$$.fragment,f),E(ML.$$.fragment,f),E(iF.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(cF.$$.fragment,f),E(yL.$$.fragment,f),E(pF.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(uF.$$.fragment,f),E(SL.$$.fragment,f),E(TF.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(EF.$$.fragment,f),E(NL.$$.fragment,f),E(AF.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(LF.$$.fragment,f),E(VL.$$.fragment,f),E(PF.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(IF.$$.fragment,f),E(HL.$$.fragment,f),E(jF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(GF.$$.fragment,f),E(ZL.$$.fragment,f),E(RT.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(BT.$$.fragment,f),E(a8.$$.fragment,f),E(n7.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(l7.$$.fragment,f),E(d8.$$.fragment,f),E(F7.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(M7.$$.fragment,f),E(h8.$$.fragment,f),E(y7.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(x7.$$.fragment,f),E(v8.$$.fragment,f),E(J7.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(K7.$$.fragment,f),E(C8.$$.fragment,f),E(dM.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(fM.$$.fragment,f),E(x8.$$.fragment,f),E(NM.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(DM.$$.fragment,f),E(P8.$$.fragment,f),E(aE.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(sE.$$.fragment,f),E(j8.$$.fragment,f),E(dE.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(fE.$$.fragment,f),E(z8.$$.fragment,f),E(gE.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(pE.$$.fragment,f),E(J8.$$.fragment,f),E(IE.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(NE.$$.fragment,f),E(o9.$$.fragment,f),E(nC.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(lC.$$.fragment,f),E(s9.$$.fragment,f),E(dC.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(fC.$$.fragment,f),E(f9.$$.fragment,f),E(gC.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(pC.$$.fragment,f),E(_9.$$.fragment,f),E(GC.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(VC.$$.fragment,f),E(T9.$$.fragment,f),E(ZC.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(o3.$$.fragment,f),E(A9.$$.fragment,f),E(h3.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(_3.$$.fragment,f),E(k9.$$.fragment,f),E(y3.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(x3.$$.fragment,f),E(I9.$$.fragment,f),E(j3.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(G3.$$.fragment,f),E(G9.$$.fragment,f),E(K3.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(ew.$$.fragment,f),E(W9.$$.fragment,f),E(fw.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(gw.$$.fragment,f),E(Y9.$$.fragment,f),E(Mw.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(Cw.$$.fragment,f),E(rx.$$.fragment,f),E(Rw.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(Bw.$$.fragment,f),E(lx.$$.fragment,f),E(qw.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(jw.$$.fragment,f),E(mx.$$.fragment,f),E(Ow.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(Xw.$$.fragment,f),E(bx.$$.fragment,f),E(Ww.$$.fragment,f),tje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(Ff.$$.fragment,f),C(_6.$$.fragment,f),C(u6.$$.fragment,f),C(F6.$$.fragment,f),C(Tg.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(A6.$$.fragment,f),C(eh.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(S6.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(N6.$$.fragment,f),C(Jh.$$.fragment,f),C(Yh.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(V6.$$.fragment,f),C(ep.$$.fragment,f),C(X6.$$.fragment,f),C(Q_.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(U_.$$.fragment,f),C(U6.$$.fragment,f),C(ju.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(Gu.$$.fragment,f),C(ey.$$.fragment,f),C(w2.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(y2.$$.fragment,f),C(ny.$$.fragment,f),C(c1.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(m1.$$.fragment,f),C(cy.$$.fragment,f),C($1.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(S1.$$.fragment,f),C(py.$$.fragment,f),C(Ab.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(Lb.$$.fragment,f),C(Fy.$$.fragment,f),C(n4.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(l4.$$.fragment,f),C(wy.$$.fragment,f),C(h4.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(_4.$$.fragment,f),C($y.$$.fragment,f),C(Y4.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(Z4.$$.fragment,f),C(By.$$.fragment,f),C(D5.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(O5.$$.fragment,f),C(Dy.$$.fragment,f),C(z5.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Q5.$$.fragment,f),C(zy.$$.fragment,f),C(lv.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(dv.$$.fragment,f),C(Jy.$$.fragment,f),C(mv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(hv.$$.fragment,f),C(oL.$$.fragment,f),C(wv.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(yv.$$.fragment,f),C(sL.$$.fragment,f),C(Pv.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(Iv.$$.fragment,f),C(fL.$$.fragment,f),C(Qv.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(Uv.$$.fragment,f),C(_L.$$.fragment,f),C(Zv.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(oF.$$.fragment,f),C(ML.$$.fragment,f),C(iF.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(cF.$$.fragment,f),C(yL.$$.fragment,f),C(pF.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(uF.$$.fragment,f),C(SL.$$.fragment,f),C(TF.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(EF.$$.fragment,f),C(NL.$$.fragment,f),C(AF.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(LF.$$.fragment,f),C(VL.$$.fragment,f),C(PF.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(IF.$$.fragment,f),C(HL.$$.fragment,f),C(jF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(GF.$$.fragment,f),C(ZL.$$.fragment,f),C(RT.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(BT.$$.fragment,f),C(a8.$$.fragment,f),C(n7.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(l7.$$.fragment,f),C(d8.$$.fragment,f),C(F7.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(M7.$$.fragment,f),C(h8.$$.fragment,f),C(y7.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(x7.$$.fragment,f),C(v8.$$.fragment,f),C(J7.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(K7.$$.fragment,f),C(C8.$$.fragment,f),C(dM.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(fM.$$.fragment,f),C(x8.$$.fragment,f),C(NM.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(DM.$$.fragment,f),C(P8.$$.fragment,f),C(aE.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(sE.$$.fragment,f),C(j8.$$.fragment,f),C(dE.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(fE.$$.fragment,f),C(z8.$$.fragment,f),C(gE.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(pE.$$.fragment,f),C(J8.$$.fragment,f),C(IE.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(NE.$$.fragment,f),C(o9.$$.fragment,f),C(nC.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(lC.$$.fragment,f),C(s9.$$.fragment,f),C(dC.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(fC.$$.fragment,f),C(f9.$$.fragment,f),C(gC.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(pC.$$.fragment,f),C(_9.$$.fragment,f),C(GC.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(VC.$$.fragment,f),C(T9.$$.fragment,f),C(ZC.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(o3.$$.fragment,f),C(A9.$$.fragment,f),C(h3.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(_3.$$.fragment,f),C(k9.$$.fragment,f),C(y3.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(x3.$$.fragment,f),C(I9.$$.fragment,f),C(j3.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(G3.$$.fragment,f),C(G9.$$.fragment,f),C(K3.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(ew.$$.fragment,f),C(W9.$$.fragment,f),C(fw.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(gw.$$.fragment,f),C(Y9.$$.fragment,f),C(Mw.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(Cw.$$.fragment,f),C(rx.$$.fragment,f),C(Rw.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(Bw.$$.fragment,f),C(lx.$$.fragment,f),C(qw.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(jw.$$.fragment,f),C(mx.$$.fragment,f),C(Ow.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(Xw.$$.fragment,f),C(bx.$$.fragment,f),C(Ww.$$.fragment,f),tje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(eqe),f&&t(bi),w(h6),f&&t(oqe),f&&t(kn),f&&t(rqe),w(p6,f),f&&t(tqe),f&&t(q$),f&&t(aqe),w(Ff,f),f&&t(nqe),f&&t(vi),w(_6),f&&t(sqe),f&&t(Co),w(u6),w(F6),w(Tg),w(T6),f&&t(lqe),f&&t(Ti),w(M6),f&&t(iqe),f&&t(wo),w(E6),w(A6),w(eh),w(y6),f&&t(dqe),f&&t(Mi),w(L6),f&&t(cqe),f&&t(Ao),w(x6),w(S6),w($h),w(kh),w(R6),f&&t(fqe),f&&t(Ei),w(P6),f&&t(mqe),f&&t(yo),w(B6),w(N6),w(Jh),w(Yh),w(j6),f&&t(gqe),f&&t(wi),w(D6),f&&t(hqe),f&&t(Lo),w(G6),w(V6),w(ep),w(X6),w(Q_),f&&t(pqe),f&&t(Li),w(z6),f&&t(_qe),f&&t(xo),w(W6),w(H6),w(U_),w(U6),w(ju),f&&t(uqe),f&&t(ki),w(J6),f&&t(bqe),f&&t($o),w(Y6),w(Z6),w(Gu),w(ey),w(w2),f&&t(vqe),f&&t(Pi),w(oy),f&&t(Fqe),f&&t(ko),w(ry),w(ay),w(y2),w(ny),w(c1),f&&t(Tqe),f&&t(qi),w(sy),f&&t(Mqe),f&&t(So),w(ly),w(dy),w(m1),w(cy),w($1),f&&t(Eqe),f&&t(Di),w(fy),f&&t(Cqe),f&&t(Ro),w(my),w(hy),w(S1),w(py),w(Ab),f&&t(wqe),f&&t(Vi),w(_y),f&&t(Aqe),f&&t(Po),w(uy),w(vy),w(Lb),w(Fy),w(n4),f&&t(yqe),f&&t(Wi),w(Ty),f&&t(Lqe),f&&t(Bo),w(My),w(Cy),w(l4),w(wy),w(h4),f&&t(xqe),f&&t(Ui),w(Ay),f&&t($qe),f&&t(Io),w(yy),w(xy),w(_4),w($y),w(Y4),f&&t(kqe),f&&t(Ki),w(ky),f&&t(Sqe),f&&t(qo),w(Sy),w(Py),w(Z4),w(By),w(D5),f&&t(Rqe),f&&t(od),w(Iy),f&&t(Pqe),f&&t(No),w(qy),w(jy),w(O5),w(Dy),w(z5),f&&t(Bqe),f&&t(ad),w(Gy),f&&t(Iqe),f&&t(jo),w(Oy),w(Xy),w(Q5),w(zy),w(lv),f&&t(qqe),f&&t(ld),w(Wy),f&&t(Nqe),f&&t(Do),w(Qy),w(Uy),w(dv),w(Jy),w(mv),f&&t(jqe),f&&t(cd),w(Yy),f&&t(Dqe),f&&t(Go),w(Ky),w(eL),w(hv),w(oL),w(wv),f&&t(Gqe),f&&t(gd),w(rL),f&&t(Oqe),f&&t(Oo),w(tL),w(nL),w(yv),w(sL),w(Pv),f&&t(Vqe),f&&t(_d),w(lL),f&&t(Xqe),f&&t(Vo),w(iL),w(cL),w(Iv),w(fL),w(Qv),f&&t(zqe),f&&t(vd),w(mL),f&&t(Wqe),f&&t(Xo),w(gL),w(pL),w(Uv),w(_L),w(Zv),f&&t(Qqe),f&&t(Md),w(bL),f&&t(Hqe),f&&t(zo),w(vL),w(TL),w(oF),w(ML),w(iF),f&&t(Uqe),f&&t(wd),w(EL),f&&t(Jqe),f&&t(Wo),w(CL),w(AL),w(cF),w(yL),w(pF),f&&t(Yqe),f&&t(xd),w(LL),f&&t(Kqe),f&&t(Qo),w(xL),w(kL),w(uF),w(SL),w(TF),f&&t(Zqe),f&&t(Sd),w(PL),f&&t(eNe),f&&t(Ho),w(BL),w(qL),w(EF),w(NL),w(AF),f&&t(oNe),f&&t(Bd),w(jL),f&&t(rNe),f&&t(Uo),w(DL),w(OL),w(LF),w(VL),w(PF),f&&t(tNe),f&&t(Nd),w(XL),f&&t(aNe),f&&t(Jo),w(zL),w(QL),w(IF),w(HL),w(jF),f&&t(nNe),f&&t(Gd),w(UL),f&&t(sNe),f&&t(Yo),w(JL),w(KL),w(GF),w(ZL),w(RT),f&&t(lNe),f&&t(Xd),w(e8),f&&t(iNe),f&&t(Ko),w(o8),w(t8),w(BT),w(a8),w(n7),f&&t(dNe),f&&t(Qd),w(n8),f&&t(cNe),f&&t(Zo),w(s8),w(i8),w(l7),w(d8),w(F7),f&&t(fNe),f&&t(Jd),w(c8),f&&t(mNe),f&&t(er),w(f8),w(g8),w(M7),w(h8),w(y7),f&&t(gNe),f&&t(Zd),w(p8),f&&t(hNe),f&&t(or),w(_8),w(b8),w(x7),w(v8),w(J7),f&&t(pNe),f&&t(rc),w(F8),f&&t(_Ne),f&&t(rr),w(T8),w(E8),w(K7),w(C8),w(dM),f&&t(uNe),f&&t(nc),w(w8),f&&t(bNe),f&&t(tr),w(A8),w(L8),w(fM),w(x8),w(NM),f&&t(vNe),f&&t(ic),w($8),f&&t(FNe),f&&t(ar),w(k8),w(R8),w(DM),w(P8),w(aE),f&&t(TNe),f&&t(fc),w(B8),f&&t(MNe),f&&t(nr),w(I8),w(N8),w(sE),w(j8),w(dE),f&&t(ENe),f&&t(hc),w(G8),f&&t(CNe),f&&t(sr),w(O8),w(X8),w(fE),w(z8),w(gE),f&&t(wNe),f&&t(uc),w(W8),f&&t(ANe),f&&t(lr),w(Q8),w(U8),w(pE),w(J8),w(IE),f&&t(yNe),f&&t(Fc),w(Y8),f&&t(LNe),f&&t(ir),w(K8),w(e9),w(NE),w(o9),w(nC),f&&t(xNe),f&&t(Ec),w(r9),f&&t($Ne),f&&t(dr),w(t9),w(n9),w(lC),w(s9),w(dC),f&&t(kNe),f&&t(Ac),w(l9),f&&t(SNe),f&&t(cr),w(i9),w(c9),w(fC),w(f9),w(gC),f&&t(RNe),f&&t(xc),w(m9),f&&t(PNe),f&&t(fr),w(g9),w(p9),w(pC),w(_9),w(GC),f&&t(BNe),f&&t(Sc),w(u9),f&&t(INe),f&&t(mr),w(b9),w(F9),w(VC),w(T9),w(ZC),f&&t(qNe),f&&t(Bc),w(M9),f&&t(NNe),f&&t(gr),w(E9),w(w9),w(o3),w(A9),w(h3),f&&t(jNe),f&&t(Nc),w(y9),f&&t(DNe),f&&t(hr),w(L9),w($9),w(_3),w(k9),w(y3),f&&t(GNe),f&&t(Gc),w(S9),f&&t(ONe),f&&t(pr),w(R9),w(B9),w(x3),w(I9),w(j3),f&&t(VNe),f&&t(Xc),w(q9),f&&t(XNe),f&&t(_r),w(N9),w(D9),w(G3),w(G9),w(K3),f&&t(zNe),f&&t(Qc),w(O9),f&&t(WNe),f&&t(ur),w(V9),w(z9),w(ew),w(W9),w(fw),f&&t(QNe),f&&t(Jc),w(Q9),f&&t(HNe),f&&t(br),w(H9),w(J9),w(gw),w(Y9),w(Mw),f&&t(UNe),f&&t(Zc),w(K9),f&&t(JNe),f&&t(vr),w(Z9),w(ox),w(Cw),w(rx),w(Rw),f&&t(YNe),f&&t(rf),w(tx),f&&t(KNe),f&&t(Fr),w(ax),w(sx),w(Bw),w(lx),w(qw),f&&t(ZNe),f&&t(nf),w(ix),f&&t(eje),f&&t(Tr),w(dx),w(fx),w(jw),w(mx),w(Ow),f&&t(oje),f&&t(df),w(hx),f&&t(rje),f&&t(Mr),w(px),w(ux),w(Xw),w(bx),w(Ww)}}}const Lxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function xxt(L){return x8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ixt extends w8t{constructor(g){super();A8t(this,g,xxt,yxt,y8t,{})}}export{Ixt as default,Lxt as metadata};
