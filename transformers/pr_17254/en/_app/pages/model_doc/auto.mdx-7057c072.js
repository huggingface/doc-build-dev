import{S as rLt,i as tLt,s as aLt,e as a,k as l,w as F,t as o,M as nLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as sLt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as mDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function lLt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,t0,uf,je,We,hi,yn,a0,Ln,xn,n0,pi,$n,s0,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),t0=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),a0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),n0=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),s0=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var w$=s(p);m=r(w$,"NewModelConfig"),w$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var A$=s(fi);pf=r(A$,"model_type"),A$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var y$=s(mi);gi=r(y$,'"new-model"'),y$.forEach(t),t0=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),a0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var L$=s(Ln);xn=r(L$,"PreTrainedModel"),L$.forEach(t),n0=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),s0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var x$=s(ui);_f=r(x$,"NewModelConfig"),x$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,t0),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,a0),e(je,Ln),e(Ln,xn),e(je,n0),e(je,pi),e(pi,$n),e(je,s0),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function iLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function fLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function gLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,t0,uf,je,We,hi,yn,a0,Ln,xn,n0,pi,$n,s0,ui,_f,Ca,Qe,Ae,w$,_i,A$,y$,Eo,wa,L$,bf,x$,qDe,AIe,bi,vf,Fee,l0,NDe,Tee,jDe,yIe,kn,DDe,Mee,GDe,ODe,Eee,VDe,XDe,LIe,i0,xIe,$$,zDe,$Ie,Ff,kIe,vi,Tf,Cee,d0,WDe,wee,QDe,SIe,Co,c0,HDe,f0,UDe,k$,JDe,YDe,KDe,m0,ZDe,Aee,eGe,oGe,rGe,Er,g0,tGe,yee,aGe,nGe,Fi,sGe,Lee,lGe,iGe,xee,dGe,cGe,fGe,A,Mf,$ee,mGe,gGe,S$,hGe,pGe,uGe,Ef,kee,_Ge,bGe,R$,vGe,FGe,TGe,Cf,See,MGe,EGe,P$,CGe,wGe,AGe,wf,Ree,yGe,LGe,B$,xGe,$Ge,kGe,Af,Pee,SGe,RGe,I$,PGe,BGe,IGe,yf,Bee,qGe,NGe,q$,jGe,DGe,GGe,Lf,Iee,OGe,VGe,N$,XGe,zGe,WGe,xf,qee,QGe,HGe,j$,UGe,JGe,YGe,$f,Nee,KGe,ZGe,D$,eOe,oOe,rOe,kf,jee,tOe,aOe,G$,nOe,sOe,lOe,Sf,Dee,iOe,dOe,O$,cOe,fOe,mOe,Rf,Gee,gOe,hOe,V$,pOe,uOe,_Oe,Pf,Oee,bOe,vOe,X$,FOe,TOe,MOe,Bf,Vee,EOe,COe,z$,wOe,AOe,yOe,If,Xee,LOe,xOe,W$,$Oe,kOe,SOe,qf,zee,ROe,POe,Q$,BOe,IOe,qOe,Nf,Wee,NOe,jOe,H$,DOe,GOe,OOe,jf,Qee,VOe,XOe,U$,zOe,WOe,QOe,Df,Hee,HOe,UOe,J$,JOe,YOe,KOe,Gf,Uee,ZOe,eVe,Y$,oVe,rVe,tVe,Of,Jee,aVe,nVe,K$,sVe,lVe,iVe,Vf,Yee,dVe,cVe,Z$,fVe,mVe,gVe,Xf,Kee,hVe,pVe,ek,uVe,_Ve,bVe,zf,Zee,vVe,FVe,ok,TVe,MVe,EVe,Wf,eoe,CVe,wVe,rk,AVe,yVe,LVe,Qf,ooe,xVe,$Ve,tk,kVe,SVe,RVe,Hf,roe,PVe,BVe,ak,IVe,qVe,NVe,Uf,toe,jVe,DVe,nk,GVe,OVe,VVe,Jf,aoe,XVe,zVe,sk,WVe,QVe,HVe,Yf,noe,UVe,JVe,lk,YVe,KVe,ZVe,Kf,soe,eXe,oXe,ik,rXe,tXe,aXe,Zf,loe,nXe,sXe,dk,lXe,iXe,dXe,em,ioe,cXe,fXe,ck,mXe,gXe,hXe,om,doe,pXe,uXe,fk,_Xe,bXe,vXe,rm,coe,FXe,TXe,mk,MXe,EXe,CXe,tm,foe,wXe,AXe,gk,yXe,LXe,xXe,am,moe,$Xe,kXe,hk,SXe,RXe,PXe,nm,goe,BXe,IXe,pk,qXe,NXe,jXe,sm,hoe,DXe,GXe,uk,OXe,VXe,XXe,lm,poe,zXe,WXe,_k,QXe,HXe,UXe,im,uoe,JXe,YXe,bk,KXe,ZXe,eze,dm,_oe,oze,rze,vk,tze,aze,nze,cm,boe,sze,lze,Fk,ize,dze,cze,fm,voe,fze,mze,Tk,gze,hze,pze,mm,Foe,uze,_ze,Mk,bze,vze,Fze,gm,Toe,Tze,Mze,Ek,Eze,Cze,wze,hm,Moe,Aze,yze,Ck,Lze,xze,$ze,pm,Eoe,kze,Sze,wk,Rze,Pze,Bze,um,Coe,Ize,qze,Ak,Nze,jze,Dze,_m,woe,Gze,Oze,yk,Vze,Xze,zze,bm,Aoe,Wze,Qze,Lk,Hze,Uze,Jze,vm,yoe,Yze,Kze,xk,Zze,eWe,oWe,Fm,Loe,rWe,tWe,$k,aWe,nWe,sWe,Tm,xoe,lWe,iWe,kk,dWe,cWe,fWe,Mm,$oe,mWe,gWe,Sk,hWe,pWe,uWe,Em,koe,_We,bWe,Rk,vWe,FWe,TWe,Cm,Soe,MWe,EWe,Pk,CWe,wWe,AWe,wm,Roe,yWe,LWe,Bk,xWe,$We,kWe,Am,Poe,SWe,RWe,Ik,PWe,BWe,IWe,ym,Boe,qWe,NWe,qk,jWe,DWe,GWe,Lm,Ioe,OWe,VWe,Nk,XWe,zWe,WWe,xm,qoe,QWe,HWe,jk,UWe,JWe,YWe,$m,Noe,KWe,ZWe,Dk,eQe,oQe,rQe,km,joe,tQe,aQe,Gk,nQe,sQe,lQe,Sm,Doe,iQe,dQe,Ok,cQe,fQe,mQe,Rm,Goe,gQe,hQe,Vk,pQe,uQe,_Qe,Pm,Ooe,bQe,vQe,Xk,FQe,TQe,MQe,Bm,Voe,EQe,CQe,zk,wQe,AQe,yQe,Im,Xoe,LQe,xQe,Wk,$Qe,kQe,SQe,qm,zoe,RQe,PQe,Qk,BQe,IQe,qQe,Nm,Woe,NQe,jQe,Hk,DQe,GQe,OQe,jm,Qoe,VQe,XQe,Uk,zQe,WQe,QQe,Dm,Hoe,HQe,UQe,Jk,JQe,YQe,KQe,Gm,Uoe,ZQe,eHe,Yk,oHe,rHe,tHe,Om,Joe,aHe,nHe,Kk,sHe,lHe,iHe,Vm,Yoe,dHe,cHe,Zk,fHe,mHe,gHe,Xm,Koe,hHe,pHe,eS,uHe,_He,bHe,zm,Zoe,vHe,FHe,oS,THe,MHe,EHe,Wm,ere,CHe,wHe,rS,AHe,yHe,LHe,Qm,ore,xHe,$He,tS,kHe,SHe,RHe,Hm,rre,PHe,BHe,aS,IHe,qHe,NHe,Um,tre,jHe,DHe,nS,GHe,OHe,VHe,Jm,are,XHe,zHe,sS,WHe,QHe,HHe,Ym,nre,UHe,JHe,lS,YHe,KHe,ZHe,Km,sre,eUe,oUe,iS,rUe,tUe,aUe,Zm,lre,nUe,sUe,dS,lUe,iUe,dUe,eg,ire,cUe,fUe,cS,mUe,gUe,hUe,og,dre,pUe,uUe,fS,_Ue,bUe,vUe,rg,cre,FUe,TUe,mS,MUe,EUe,CUe,tg,fre,wUe,AUe,gS,yUe,LUe,xUe,ag,mre,$Ue,kUe,hS,SUe,RUe,PUe,ng,gre,BUe,IUe,pS,qUe,NUe,jUe,sg,hre,DUe,GUe,uS,OUe,VUe,XUe,lg,pre,zUe,WUe,_S,QUe,HUe,UUe,ig,ure,JUe,YUe,bS,KUe,ZUe,eJe,dg,_re,oJe,rJe,vS,tJe,aJe,nJe,cg,bre,sJe,lJe,FS,iJe,dJe,cJe,fg,vre,fJe,mJe,TS,gJe,hJe,pJe,mg,Fre,uJe,_Je,MS,bJe,vJe,FJe,gg,Tre,TJe,MJe,ES,EJe,CJe,wJe,hg,Mre,AJe,yJe,CS,LJe,xJe,$Je,pg,Ere,kJe,SJe,wS,RJe,PJe,BJe,ug,Cre,IJe,qJe,AS,NJe,jJe,DJe,_g,wre,GJe,OJe,yS,VJe,XJe,zJe,bg,Are,WJe,QJe,LS,HJe,UJe,JJe,vg,YJe,Fg,h0,KJe,yre,ZJe,RIe,Ti,Tg,Lre,p0,eYe,xre,oYe,PIe,wo,u0,rYe,_0,tYe,xS,aYe,nYe,sYe,b0,lYe,$re,iYe,dYe,cYe,Cr,v0,fYe,kre,mYe,gYe,Aa,hYe,Sre,pYe,uYe,Rre,_Ye,bYe,Pre,vYe,FYe,TYe,k,Sn,Bre,MYe,EYe,$S,CYe,wYe,kS,AYe,yYe,LYe,Rn,Ire,xYe,$Ye,SS,kYe,SYe,RS,RYe,PYe,BYe,Pn,qre,IYe,qYe,PS,NYe,jYe,BS,DYe,GYe,OYe,Bn,Nre,VYe,XYe,IS,zYe,WYe,qS,QYe,HYe,UYe,In,jre,JYe,YYe,NS,KYe,ZYe,jS,eKe,oKe,rKe,Mg,Dre,tKe,aKe,DS,nKe,sKe,lKe,Eg,Gre,iKe,dKe,GS,cKe,fKe,mKe,Cg,Ore,gKe,hKe,OS,pKe,uKe,_Ke,qn,Vre,bKe,vKe,VS,FKe,TKe,XS,MKe,EKe,CKe,Nn,Xre,wKe,AKe,zS,yKe,LKe,WS,xKe,$Ke,kKe,jn,zre,SKe,RKe,QS,PKe,BKe,HS,IKe,qKe,NKe,wg,Wre,jKe,DKe,US,GKe,OKe,VKe,Ag,Qre,XKe,zKe,JS,WKe,QKe,HKe,Dn,Hre,UKe,JKe,YS,YKe,KKe,KS,ZKe,eZe,oZe,yg,Ure,rZe,tZe,ZS,aZe,nZe,sZe,Gn,Jre,lZe,iZe,eR,dZe,cZe,oR,fZe,mZe,gZe,On,Yre,hZe,pZe,rR,uZe,_Ze,tR,bZe,vZe,FZe,Vn,Kre,TZe,MZe,aR,EZe,CZe,nR,wZe,AZe,yZe,Lg,Zre,LZe,xZe,sR,$Ze,kZe,SZe,Xn,ete,RZe,PZe,lR,BZe,IZe,iR,qZe,NZe,jZe,zn,ote,DZe,GZe,dR,OZe,VZe,cR,XZe,zZe,WZe,Wn,rte,QZe,HZe,fR,UZe,JZe,mR,YZe,KZe,ZZe,Qn,tte,eeo,oeo,gR,reo,teo,hR,aeo,neo,seo,Hn,ate,leo,ieo,pR,deo,ceo,uR,feo,meo,geo,Un,nte,heo,peo,_R,ueo,_eo,bR,beo,veo,Feo,xg,ste,Teo,Meo,vR,Eeo,Ceo,weo,Jn,lte,Aeo,yeo,FR,Leo,xeo,TR,$eo,keo,Seo,$g,ite,Reo,Peo,MR,Beo,Ieo,qeo,Yn,dte,Neo,jeo,ER,Deo,Geo,CR,Oeo,Veo,Xeo,Kn,cte,zeo,Weo,wR,Qeo,Heo,AR,Ueo,Jeo,Yeo,Zn,fte,Keo,Zeo,yR,eoo,ooo,LR,roo,too,aoo,es,mte,noo,soo,xR,loo,ioo,$R,doo,coo,foo,os,gte,moo,goo,kR,hoo,poo,SR,uoo,_oo,boo,kg,hte,voo,Foo,RR,Too,Moo,Eoo,rs,pte,Coo,woo,PR,Aoo,yoo,BR,Loo,xoo,$oo,ts,ute,koo,Soo,IR,Roo,Poo,qR,Boo,Ioo,qoo,as,_te,Noo,joo,NR,Doo,Goo,jR,Ooo,Voo,Xoo,ns,bte,zoo,Woo,DR,Qoo,Hoo,GR,Uoo,Joo,Yoo,ss,vte,Koo,Zoo,OR,ero,oro,VR,rro,tro,aro,ls,Fte,nro,sro,XR,lro,iro,zR,dro,cro,fro,Sg,Tte,mro,gro,WR,hro,pro,uro,is,Mte,_ro,bro,QR,vro,Fro,HR,Tro,Mro,Ero,Rg,Ete,Cro,wro,UR,Aro,yro,Lro,Pg,Cte,xro,$ro,JR,kro,Sro,Rro,ds,wte,Pro,Bro,YR,Iro,qro,KR,Nro,jro,Dro,cs,Ate,Gro,Oro,ZR,Vro,Xro,eP,zro,Wro,Qro,fs,yte,Hro,Uro,oP,Jro,Yro,rP,Kro,Zro,eto,Bg,Lte,oto,rto,tP,tto,ato,nto,ms,xte,sto,lto,aP,ito,dto,nP,cto,fto,mto,gs,$te,gto,hto,sP,pto,uto,lP,_to,bto,vto,hs,kte,Fto,Tto,iP,Mto,Eto,dP,Cto,wto,Ato,ps,Ste,yto,Lto,cP,xto,$to,fP,kto,Sto,Rto,us,Rte,Pto,Bto,mP,Ito,qto,gP,Nto,jto,Dto,Ig,Pte,Gto,Oto,hP,Vto,Xto,zto,_s,Bte,Wto,Qto,pP,Hto,Uto,uP,Jto,Yto,Kto,qg,Ite,Zto,eao,_P,oao,rao,tao,Ng,qte,aao,nao,bP,sao,lao,iao,jg,Nte,dao,cao,vP,fao,mao,gao,Dg,jte,hao,pao,FP,uao,_ao,bao,bs,Dte,vao,Fao,TP,Tao,Mao,MP,Eao,Cao,wao,Gg,Gte,Aao,yao,EP,Lao,xao,$ao,vs,Ote,kao,Sao,CP,Rao,Pao,wP,Bao,Iao,qao,Fs,Vte,Nao,jao,AP,Dao,Gao,yP,Oao,Vao,Xao,Ts,Xte,zao,Wao,LP,Qao,Hao,xP,Uao,Jao,Yao,Ms,zte,Kao,Zao,$P,eno,ono,kP,rno,tno,ano,Es,Wte,nno,sno,SP,lno,ino,RP,dno,cno,fno,Cs,Qte,mno,gno,PP,hno,pno,BP,uno,_no,bno,Og,Hte,vno,Fno,IP,Tno,Mno,Eno,Vg,Ute,Cno,wno,qP,Ano,yno,Lno,ws,Jte,xno,$no,NP,kno,Sno,jP,Rno,Pno,Bno,As,Yte,Ino,qno,DP,Nno,jno,GP,Dno,Gno,Ono,ys,Kte,Vno,Xno,OP,zno,Wno,VP,Qno,Hno,Uno,Xg,Zte,Jno,Yno,XP,Kno,Zno,eso,zg,eae,oso,rso,zP,tso,aso,nso,Wg,oae,sso,lso,WP,iso,dso,cso,Ls,rae,fso,mso,QP,gso,hso,HP,pso,uso,_so,Qg,tae,bso,vso,UP,Fso,Tso,Mso,Hg,aae,Eso,Cso,JP,wso,Aso,yso,Ug,nae,Lso,xso,YP,$so,kso,Sso,xs,sae,Rso,Pso,KP,Bso,Iso,ZP,qso,Nso,jso,Jg,lae,Dso,Gso,eB,Oso,Vso,Xso,Yg,iae,zso,Wso,oB,Qso,Hso,Uso,$s,dae,Jso,Yso,rB,Kso,Zso,tB,elo,olo,rlo,ks,cae,tlo,alo,aB,nlo,slo,nB,llo,ilo,dlo,Ss,fae,clo,flo,sB,mlo,glo,lB,hlo,plo,ulo,Rs,mae,_lo,blo,iB,vlo,Flo,dB,Tlo,Mlo,Elo,Kg,Clo,Zg,F0,wlo,gae,Alo,BIe,Mi,eh,hae,T0,ylo,pae,Llo,IIe,Ao,M0,xlo,E0,$lo,cB,klo,Slo,Rlo,C0,Plo,uae,Blo,Ilo,qlo,He,w0,Nlo,_ae,jlo,Dlo,ya,Glo,bae,Olo,Vlo,vae,Xlo,zlo,Fae,Wlo,Qlo,Hlo,Z,oh,Tae,Ulo,Jlo,fB,Ylo,Klo,Zlo,rh,Mae,eio,oio,mB,rio,tio,aio,th,Eae,nio,sio,gB,lio,iio,dio,ah,Cae,cio,fio,hB,mio,gio,hio,nh,wae,pio,uio,pB,_io,bio,vio,sh,Aae,Fio,Tio,uB,Mio,Eio,Cio,lh,yae,wio,Aio,_B,yio,Lio,xio,ih,Lae,$io,kio,bB,Sio,Rio,Pio,dh,xae,Bio,Iio,vB,qio,Nio,jio,ch,$ae,Dio,Gio,FB,Oio,Vio,Xio,fh,kae,zio,Wio,TB,Qio,Hio,Uio,mh,Sae,Jio,Yio,MB,Kio,Zio,edo,gh,Rae,odo,rdo,EB,tdo,ado,ndo,hh,Pae,sdo,ldo,CB,ido,ddo,cdo,ph,Bae,fdo,mdo,wB,gdo,hdo,pdo,uh,Iae,udo,_do,AB,bdo,vdo,Fdo,_h,qae,Tdo,Mdo,yB,Edo,Cdo,wdo,bh,Nae,Ado,ydo,LB,Ldo,xdo,$do,vh,jae,kdo,Sdo,xB,Rdo,Pdo,Bdo,Fh,Dae,Ido,qdo,$B,Ndo,jdo,Ddo,Th,Gae,Gdo,Odo,kB,Vdo,Xdo,zdo,Mh,Oae,Wdo,Qdo,SB,Hdo,Udo,Jdo,Eh,Vae,Ydo,Kdo,RB,Zdo,eco,oco,Ch,Xae,rco,tco,PB,aco,nco,sco,wh,zae,lco,ico,BB,dco,cco,fco,Ah,Wae,mco,gco,IB,hco,pco,uco,yh,_co,Lh,bco,xh,A0,vco,Qae,Fco,qIe,Ei,$h,Hae,y0,Tco,Uae,Mco,NIe,yo,L0,Eco,x0,Cco,qB,wco,Aco,yco,$0,Lco,Jae,xco,$co,kco,Ue,k0,Sco,Yae,Rco,Pco,Ci,Bco,Kae,Ico,qco,Zae,Nco,jco,Dco,pe,kh,ene,Gco,Oco,NB,Vco,Xco,zco,Sh,one,Wco,Qco,rne,Hco,Uco,Jco,Rh,tne,Yco,Kco,jB,Zco,efo,ofo,Ph,ane,rfo,tfo,DB,afo,nfo,sfo,Bh,nne,lfo,ifo,GB,dfo,cfo,ffo,Ih,sne,mfo,gfo,OB,hfo,pfo,ufo,qh,lne,_fo,bfo,VB,vfo,Ffo,Tfo,Nh,ine,Mfo,Efo,XB,Cfo,wfo,Afo,jh,dne,yfo,Lfo,zB,xfo,$fo,kfo,Dh,cne,Sfo,Rfo,WB,Pfo,Bfo,Ifo,Gh,fne,qfo,Nfo,QB,jfo,Dfo,Gfo,Oh,mne,Ofo,Vfo,HB,Xfo,zfo,Wfo,Vh,gne,Qfo,Hfo,UB,Ufo,Jfo,Yfo,Xh,hne,Kfo,Zfo,JB,emo,omo,rmo,zh,pne,tmo,amo,YB,nmo,smo,lmo,Wh,une,imo,dmo,KB,cmo,fmo,mmo,Qh,gmo,Hh,hmo,Uh,S0,pmo,_ne,umo,jIe,wi,Jh,bne,R0,_mo,vne,bmo,DIe,Lo,P0,vmo,Ai,Fmo,ZB,Tmo,Mmo,eI,Emo,Cmo,wmo,B0,Amo,Fne,ymo,Lmo,xmo,tt,I0,$mo,Tne,kmo,Smo,yi,Rmo,Mne,Pmo,Bmo,oI,Imo,qmo,Nmo,Yh,jmo,Je,q0,Dmo,Ene,Gmo,Omo,La,Vmo,Cne,Xmo,zmo,wne,Wmo,Qmo,Ane,Hmo,Umo,Jmo,x,Kh,yne,Ymo,Kmo,rI,Zmo,ego,ogo,Zh,Lne,rgo,tgo,tI,ago,ngo,sgo,ep,xne,lgo,igo,aI,dgo,cgo,fgo,op,$ne,mgo,ggo,nI,hgo,pgo,ugo,rp,kne,_go,bgo,sI,vgo,Fgo,Tgo,tp,Sne,Mgo,Ego,lI,Cgo,wgo,Ago,ap,Rne,ygo,Lgo,iI,xgo,$go,kgo,np,Pne,Sgo,Rgo,dI,Pgo,Bgo,Igo,sp,Bne,qgo,Ngo,cI,jgo,Dgo,Ggo,lp,Ine,Ogo,Vgo,fI,Xgo,zgo,Wgo,ip,qne,Qgo,Hgo,mI,Ugo,Jgo,Ygo,dp,Nne,Kgo,Zgo,gI,eho,oho,rho,cp,jne,tho,aho,hI,nho,sho,lho,fp,Dne,iho,dho,pI,cho,fho,mho,mp,Gne,gho,hho,uI,pho,uho,_ho,gp,One,bho,vho,_I,Fho,Tho,Mho,hp,Vne,Eho,Cho,bI,who,Aho,yho,pp,Xne,Lho,xho,vI,$ho,kho,Sho,up,zne,Rho,Pho,FI,Bho,Iho,qho,_p,Wne,Nho,jho,TI,Dho,Gho,Oho,bp,Qne,Vho,Xho,MI,zho,Who,Qho,vp,Hne,Hho,Uho,EI,Jho,Yho,Kho,Fp,Une,Zho,epo,CI,opo,rpo,tpo,Tp,Jne,apo,npo,wI,spo,lpo,ipo,Mp,Yne,dpo,cpo,AI,fpo,mpo,gpo,Ep,Kne,hpo,ppo,yI,upo,_po,bpo,Cp,Zne,vpo,Fpo,LI,Tpo,Mpo,Epo,wp,ese,Cpo,wpo,xI,Apo,ypo,Lpo,Ap,ose,xpo,$po,$I,kpo,Spo,Rpo,yp,rse,Ppo,Bpo,kI,Ipo,qpo,Npo,Lp,tse,jpo,Dpo,SI,Gpo,Opo,Vpo,Ps,ase,Xpo,zpo,RI,Wpo,Qpo,PI,Hpo,Upo,Jpo,xp,nse,Ypo,Kpo,BI,Zpo,euo,ouo,$p,sse,ruo,tuo,II,auo,nuo,suo,kp,lse,luo,iuo,qI,duo,cuo,fuo,Sp,ise,muo,guo,NI,huo,puo,uuo,Rp,dse,_uo,buo,jI,vuo,Fuo,Tuo,Pp,cse,Muo,Euo,DI,Cuo,wuo,Auo,Bp,fse,yuo,Luo,GI,xuo,$uo,kuo,Ip,mse,Suo,Ruo,OI,Puo,Buo,Iuo,qp,gse,quo,Nuo,VI,juo,Duo,Guo,Np,hse,Ouo,Vuo,XI,Xuo,zuo,Wuo,jp,pse,Quo,Huo,zI,Uuo,Juo,Yuo,Dp,use,Kuo,Zuo,WI,e_o,o_o,r_o,Gp,_se,t_o,a_o,QI,n_o,s_o,l_o,Op,bse,i_o,d_o,HI,c_o,f_o,m_o,Vp,vse,g_o,h_o,UI,p_o,u_o,__o,Xp,Fse,b_o,v_o,JI,F_o,T_o,M_o,zp,Tse,E_o,C_o,YI,w_o,A_o,y_o,Wp,Mse,L_o,x_o,KI,$_o,k_o,S_o,Qp,Ese,R_o,P_o,ZI,B_o,I_o,q_o,Hp,Cse,N_o,j_o,eq,D_o,G_o,O_o,Up,wse,V_o,X_o,oq,z_o,W_o,Q_o,Jp,Ase,H_o,U_o,rq,J_o,Y_o,K_o,Yp,yse,Z_o,e2o,tq,o2o,r2o,t2o,Kp,Lse,a2o,n2o,aq,s2o,l2o,i2o,Zp,xse,d2o,c2o,nq,f2o,m2o,g2o,eu,$se,h2o,p2o,sq,u2o,_2o,b2o,ou,kse,v2o,F2o,lq,T2o,M2o,E2o,ru,Sse,C2o,w2o,iq,A2o,y2o,L2o,tu,Rse,x2o,$2o,dq,k2o,S2o,R2o,au,Pse,P2o,B2o,cq,I2o,q2o,N2o,nu,Bse,j2o,D2o,fq,G2o,O2o,V2o,su,Ise,X2o,z2o,mq,W2o,Q2o,H2o,lu,qse,U2o,J2o,gq,Y2o,K2o,Z2o,iu,Nse,e1o,o1o,hq,r1o,t1o,a1o,du,jse,n1o,s1o,pq,l1o,i1o,d1o,cu,Dse,c1o,f1o,uq,m1o,g1o,h1o,fu,Gse,p1o,u1o,_q,_1o,b1o,v1o,mu,Ose,F1o,T1o,bq,M1o,E1o,C1o,gu,Vse,w1o,A1o,vq,y1o,L1o,x1o,hu,Xse,$1o,k1o,Fq,S1o,R1o,P1o,pu,zse,B1o,I1o,Tq,q1o,N1o,j1o,uu,Wse,D1o,G1o,Mq,O1o,V1o,X1o,_u,Qse,z1o,W1o,Eq,Q1o,H1o,U1o,bu,Hse,J1o,Y1o,Cq,K1o,Z1o,ebo,vu,Use,obo,rbo,wq,tbo,abo,nbo,Fu,Jse,sbo,lbo,Aq,ibo,dbo,cbo,Tu,Yse,fbo,mbo,yq,gbo,hbo,pbo,Mu,Kse,ubo,_bo,Lq,bbo,vbo,Fbo,Eu,Zse,Tbo,Mbo,xq,Ebo,Cbo,wbo,Cu,ele,Abo,ybo,$q,Lbo,xbo,$bo,wu,ole,kbo,Sbo,kq,Rbo,Pbo,Bbo,Au,rle,Ibo,qbo,Sq,Nbo,jbo,Dbo,yu,tle,Gbo,Obo,Rq,Vbo,Xbo,zbo,Lu,ale,Wbo,Qbo,Pq,Hbo,Ubo,Jbo,xu,nle,Ybo,Kbo,Bq,Zbo,e4o,o4o,$u,sle,r4o,t4o,Iq,a4o,n4o,s4o,ku,lle,l4o,i4o,qq,d4o,c4o,f4o,Su,ile,m4o,g4o,Nq,h4o,p4o,u4o,Ru,dle,_4o,b4o,jq,v4o,F4o,T4o,Pu,cle,M4o,E4o,Dq,C4o,w4o,A4o,Bu,fle,y4o,L4o,Gq,x4o,$4o,k4o,Iu,mle,S4o,R4o,Oq,P4o,B4o,I4o,qu,gle,q4o,N4o,Vq,j4o,D4o,G4o,Nu,hle,O4o,V4o,Xq,X4o,z4o,W4o,ju,ple,Q4o,H4o,zq,U4o,J4o,Y4o,Du,ule,K4o,Z4o,Wq,e5o,o5o,r5o,Gu,t5o,_le,a5o,n5o,ble,s5o,l5o,Ou,GIe,Li,Vu,vle,N0,i5o,Fle,d5o,OIe,xo,j0,c5o,xi,f5o,Qq,m5o,g5o,Hq,h5o,p5o,u5o,D0,_5o,Tle,b5o,v5o,F5o,at,G0,T5o,Mle,M5o,E5o,$i,C5o,Ele,w5o,A5o,Uq,y5o,L5o,x5o,Xu,$5o,Ye,O0,k5o,Cle,S5o,R5o,xa,P5o,wle,B5o,I5o,Ale,q5o,N5o,yle,j5o,D5o,G5o,G,zu,Lle,O5o,V5o,Jq,X5o,z5o,W5o,Wu,xle,Q5o,H5o,Yq,U5o,J5o,Y5o,Qu,$le,K5o,Z5o,Kq,evo,ovo,rvo,Hu,kle,tvo,avo,Zq,nvo,svo,lvo,Uu,Sle,ivo,dvo,eN,cvo,fvo,mvo,Ju,Rle,gvo,hvo,oN,pvo,uvo,_vo,Yu,Ple,bvo,vvo,rN,Fvo,Tvo,Mvo,Ku,Ble,Evo,Cvo,tN,wvo,Avo,yvo,Zu,Ile,Lvo,xvo,aN,$vo,kvo,Svo,e_,qle,Rvo,Pvo,nN,Bvo,Ivo,qvo,o_,Nle,Nvo,jvo,sN,Dvo,Gvo,Ovo,r_,jle,Vvo,Xvo,lN,zvo,Wvo,Qvo,t_,Dle,Hvo,Uvo,iN,Jvo,Yvo,Kvo,a_,Gle,Zvo,eFo,dN,oFo,rFo,tFo,n_,Ole,aFo,nFo,cN,sFo,lFo,iFo,s_,Vle,dFo,cFo,fN,fFo,mFo,gFo,l_,Xle,hFo,pFo,mN,uFo,_Fo,bFo,i_,zle,vFo,FFo,gN,TFo,MFo,EFo,d_,Wle,CFo,wFo,hN,AFo,yFo,LFo,c_,Qle,xFo,$Fo,pN,kFo,SFo,RFo,f_,Hle,PFo,BFo,uN,IFo,qFo,NFo,m_,Ule,jFo,DFo,_N,GFo,OFo,VFo,g_,Jle,XFo,zFo,bN,WFo,QFo,HFo,h_,Yle,UFo,JFo,vN,YFo,KFo,ZFo,p_,Kle,eTo,oTo,FN,rTo,tTo,aTo,u_,Zle,nTo,sTo,TN,lTo,iTo,dTo,__,eie,cTo,fTo,MN,mTo,gTo,hTo,b_,oie,pTo,uTo,EN,_To,bTo,vTo,v_,rie,FTo,TTo,CN,MTo,ETo,CTo,F_,tie,wTo,ATo,wN,yTo,LTo,xTo,T_,aie,$To,kTo,AN,STo,RTo,PTo,M_,nie,BTo,ITo,yN,qTo,NTo,jTo,E_,sie,DTo,GTo,LN,OTo,VTo,XTo,C_,lie,zTo,WTo,xN,QTo,HTo,UTo,w_,iie,JTo,YTo,$N,KTo,ZTo,e7o,A_,die,o7o,r7o,kN,t7o,a7o,n7o,y_,cie,s7o,l7o,SN,i7o,d7o,c7o,L_,fie,f7o,m7o,RN,g7o,h7o,p7o,x_,mie,u7o,_7o,PN,b7o,v7o,F7o,$_,gie,T7o,M7o,BN,E7o,C7o,w7o,k_,hie,A7o,y7o,IN,L7o,x7o,$7o,S_,k7o,pie,S7o,R7o,uie,P7o,B7o,R_,VIe,ki,P_,_ie,V0,I7o,bie,q7o,XIe,$o,X0,N7o,Si,j7o,qN,D7o,G7o,NN,O7o,V7o,X7o,z0,z7o,vie,W7o,Q7o,H7o,nt,W0,U7o,Fie,J7o,Y7o,Ri,K7o,Tie,Z7o,eMo,jN,oMo,rMo,tMo,B_,aMo,Ke,Q0,nMo,Mie,sMo,lMo,$a,iMo,Eie,dMo,cMo,Cie,fMo,mMo,wie,gMo,hMo,pMo,z,I_,Aie,uMo,_Mo,DN,bMo,vMo,FMo,q_,yie,TMo,MMo,GN,EMo,CMo,wMo,N_,Lie,AMo,yMo,ON,LMo,xMo,$Mo,j_,xie,kMo,SMo,VN,RMo,PMo,BMo,D_,$ie,IMo,qMo,XN,NMo,jMo,DMo,G_,kie,GMo,OMo,zN,VMo,XMo,zMo,O_,Sie,WMo,QMo,WN,HMo,UMo,JMo,V_,Rie,YMo,KMo,QN,ZMo,eEo,oEo,X_,Pie,rEo,tEo,HN,aEo,nEo,sEo,z_,Bie,lEo,iEo,UN,dEo,cEo,fEo,W_,Iie,mEo,gEo,JN,hEo,pEo,uEo,Q_,qie,_Eo,bEo,YN,vEo,FEo,TEo,H_,Nie,MEo,EEo,KN,CEo,wEo,AEo,U_,jie,yEo,LEo,ZN,xEo,$Eo,kEo,J_,Die,SEo,REo,ej,PEo,BEo,IEo,Y_,Gie,qEo,NEo,oj,jEo,DEo,GEo,K_,Oie,OEo,VEo,rj,XEo,zEo,WEo,Z_,Vie,QEo,HEo,tj,UEo,JEo,YEo,e2,Xie,KEo,ZEo,aj,eCo,oCo,rCo,o2,zie,tCo,aCo,nj,nCo,sCo,lCo,r2,Wie,iCo,dCo,sj,cCo,fCo,mCo,t2,Qie,gCo,hCo,lj,pCo,uCo,_Co,a2,Hie,bCo,vCo,ij,FCo,TCo,MCo,n2,Uie,ECo,CCo,dj,wCo,ACo,yCo,s2,Jie,LCo,xCo,cj,$Co,kCo,SCo,l2,Yie,RCo,PCo,fj,BCo,ICo,qCo,i2,Kie,NCo,jCo,mj,DCo,GCo,OCo,d2,Zie,VCo,XCo,gj,zCo,WCo,QCo,c2,ede,HCo,UCo,hj,JCo,YCo,KCo,f2,ode,ZCo,e3o,pj,o3o,r3o,t3o,m2,rde,a3o,n3o,uj,s3o,l3o,i3o,g2,tde,d3o,c3o,_j,f3o,m3o,g3o,h2,ade,h3o,p3o,bj,u3o,_3o,b3o,p2,nde,v3o,F3o,vj,T3o,M3o,E3o,u2,sde,C3o,w3o,Fj,A3o,y3o,L3o,_2,lde,x3o,$3o,Tj,k3o,S3o,R3o,b2,P3o,ide,B3o,I3o,dde,q3o,N3o,v2,zIe,Pi,F2,cde,H0,j3o,fde,D3o,WIe,ko,U0,G3o,Bi,O3o,Mj,V3o,X3o,Ej,z3o,W3o,Q3o,J0,H3o,mde,U3o,J3o,Y3o,st,Y0,K3o,gde,Z3o,ewo,Ii,owo,hde,rwo,two,Cj,awo,nwo,swo,T2,lwo,Ze,K0,iwo,pde,dwo,cwo,ka,fwo,ude,mwo,gwo,_de,hwo,pwo,bde,uwo,_wo,bwo,W,M2,vde,vwo,Fwo,wj,Two,Mwo,Ewo,E2,Fde,Cwo,wwo,Aj,Awo,ywo,Lwo,C2,Tde,xwo,$wo,yj,kwo,Swo,Rwo,w2,Mde,Pwo,Bwo,Lj,Iwo,qwo,Nwo,A2,Ede,jwo,Dwo,xj,Gwo,Owo,Vwo,y2,Cde,Xwo,zwo,$j,Wwo,Qwo,Hwo,L2,wde,Uwo,Jwo,kj,Ywo,Kwo,Zwo,x2,Ade,eAo,oAo,Sj,rAo,tAo,aAo,$2,yde,nAo,sAo,Rj,lAo,iAo,dAo,k2,Lde,cAo,fAo,Pj,mAo,gAo,hAo,S2,xde,pAo,uAo,Bj,_Ao,bAo,vAo,R2,$de,FAo,TAo,Ij,MAo,EAo,CAo,P2,kde,wAo,AAo,qj,yAo,LAo,xAo,B2,Sde,$Ao,kAo,Nj,SAo,RAo,PAo,I2,Rde,BAo,IAo,jj,qAo,NAo,jAo,q2,Pde,DAo,GAo,Dj,OAo,VAo,XAo,N2,Bde,zAo,WAo,Gj,QAo,HAo,UAo,j2,Ide,JAo,YAo,Oj,KAo,ZAo,e6o,D2,qde,o6o,r6o,Vj,t6o,a6o,n6o,G2,Nde,s6o,l6o,Xj,i6o,d6o,c6o,O2,jde,f6o,m6o,zj,g6o,h6o,p6o,V2,Dde,u6o,_6o,Wj,b6o,v6o,F6o,X2,Gde,T6o,M6o,Qj,E6o,C6o,w6o,z2,Ode,A6o,y6o,Hj,L6o,x6o,$6o,W2,Vde,k6o,S6o,Uj,R6o,P6o,B6o,Q2,Xde,I6o,q6o,Jj,N6o,j6o,D6o,H2,zde,G6o,O6o,Yj,V6o,X6o,z6o,U2,Wde,W6o,Q6o,Kj,H6o,U6o,J6o,J2,Qde,Y6o,K6o,Zj,Z6o,e0o,o0o,Y2,Hde,r0o,t0o,eD,a0o,n0o,s0o,K2,Ude,l0o,i0o,Jde,d0o,c0o,f0o,Z2,Yde,m0o,g0o,oD,h0o,p0o,u0o,e1,Kde,_0o,b0o,rD,v0o,F0o,T0o,o1,Zde,M0o,E0o,tD,C0o,w0o,A0o,r1,ece,y0o,L0o,aD,x0o,$0o,k0o,t1,S0o,oce,R0o,P0o,rce,B0o,I0o,a1,QIe,qi,n1,tce,Z0,q0o,ace,N0o,HIe,So,ey,j0o,Ni,D0o,nD,G0o,O0o,sD,V0o,X0o,z0o,oy,W0o,nce,Q0o,H0o,U0o,lt,ry,J0o,sce,Y0o,K0o,ji,Z0o,lce,eyo,oyo,lD,ryo,tyo,ayo,s1,nyo,eo,ty,syo,ice,lyo,iyo,Sa,dyo,dce,cyo,fyo,cce,myo,gyo,fce,hyo,pyo,uyo,ue,l1,mce,_yo,byo,iD,vyo,Fyo,Tyo,i1,gce,Myo,Eyo,dD,Cyo,wyo,Ayo,d1,hce,yyo,Lyo,cD,xyo,$yo,kyo,c1,pce,Syo,Ryo,fD,Pyo,Byo,Iyo,f1,uce,qyo,Nyo,mD,jyo,Dyo,Gyo,m1,_ce,Oyo,Vyo,gD,Xyo,zyo,Wyo,g1,bce,Qyo,Hyo,hD,Uyo,Jyo,Yyo,h1,vce,Kyo,Zyo,pD,eLo,oLo,rLo,p1,Fce,tLo,aLo,uD,nLo,sLo,lLo,u1,Tce,iLo,dLo,_D,cLo,fLo,mLo,_1,Mce,gLo,hLo,bD,pLo,uLo,_Lo,b1,Ece,bLo,vLo,vD,FLo,TLo,MLo,v1,Cce,ELo,CLo,FD,wLo,ALo,yLo,F1,wce,LLo,xLo,TD,$Lo,kLo,SLo,T1,Ace,RLo,PLo,MD,BLo,ILo,qLo,M1,yce,NLo,jLo,ED,DLo,GLo,OLo,E1,VLo,Lce,XLo,zLo,xce,WLo,QLo,C1,UIe,Di,w1,$ce,ay,HLo,kce,ULo,JIe,Ro,ny,JLo,Gi,YLo,CD,KLo,ZLo,wD,e8o,o8o,r8o,sy,t8o,Sce,a8o,n8o,s8o,it,ly,l8o,Rce,i8o,d8o,Oi,c8o,Pce,f8o,m8o,AD,g8o,h8o,p8o,A1,u8o,oo,iy,_8o,Bce,b8o,v8o,Ra,F8o,Ice,T8o,M8o,qce,E8o,C8o,Nce,w8o,A8o,y8o,q,y1,jce,L8o,x8o,yD,$8o,k8o,S8o,L1,Dce,R8o,P8o,LD,B8o,I8o,q8o,x1,Gce,N8o,j8o,xD,D8o,G8o,O8o,$1,Oce,V8o,X8o,$D,z8o,W8o,Q8o,k1,Vce,H8o,U8o,kD,J8o,Y8o,K8o,S1,Xce,Z8o,exo,SD,oxo,rxo,txo,R1,zce,axo,nxo,RD,sxo,lxo,ixo,P1,Wce,dxo,cxo,PD,fxo,mxo,gxo,B1,Qce,hxo,pxo,BD,uxo,_xo,bxo,I1,Hce,vxo,Fxo,ID,Txo,Mxo,Exo,q1,Uce,Cxo,wxo,qD,Axo,yxo,Lxo,N1,Jce,xxo,$xo,ND,kxo,Sxo,Rxo,j1,Yce,Pxo,Bxo,jD,Ixo,qxo,Nxo,D1,Kce,jxo,Dxo,DD,Gxo,Oxo,Vxo,G1,Zce,Xxo,zxo,GD,Wxo,Qxo,Hxo,O1,efe,Uxo,Jxo,OD,Yxo,Kxo,Zxo,V1,ofe,e9o,o9o,VD,r9o,t9o,a9o,X1,rfe,n9o,s9o,XD,l9o,i9o,d9o,z1,tfe,c9o,f9o,zD,m9o,g9o,h9o,W1,afe,p9o,u9o,WD,_9o,b9o,v9o,Q1,nfe,F9o,T9o,QD,M9o,E9o,C9o,H1,sfe,w9o,A9o,HD,y9o,L9o,x9o,U1,lfe,$9o,k9o,UD,S9o,R9o,P9o,J1,ife,B9o,I9o,JD,q9o,N9o,j9o,Y1,dfe,D9o,G9o,YD,O9o,V9o,X9o,K1,cfe,z9o,W9o,KD,Q9o,H9o,U9o,Z1,ffe,J9o,Y9o,ZD,K9o,Z9o,e$o,eb,mfe,o$o,r$o,eG,t$o,a$o,n$o,ob,gfe,s$o,l$o,oG,i$o,d$o,c$o,rb,hfe,f$o,m$o,rG,g$o,h$o,p$o,tb,pfe,u$o,_$o,tG,b$o,v$o,F$o,ab,ufe,T$o,M$o,aG,E$o,C$o,w$o,nb,_fe,A$o,y$o,nG,L$o,x$o,$$o,sb,bfe,k$o,S$o,sG,R$o,P$o,B$o,lb,vfe,I$o,q$o,lG,N$o,j$o,D$o,ib,Ffe,G$o,O$o,iG,V$o,X$o,z$o,db,Tfe,W$o,Q$o,dG,H$o,U$o,J$o,cb,Mfe,Y$o,K$o,cG,Z$o,eko,oko,fb,Efe,rko,tko,fG,ako,nko,sko,mb,Cfe,lko,iko,mG,dko,cko,fko,gb,wfe,mko,gko,gG,hko,pko,uko,hb,Afe,_ko,bko,hG,vko,Fko,Tko,pb,yfe,Mko,Eko,pG,Cko,wko,Ako,ub,Lfe,yko,Lko,uG,xko,$ko,kko,_b,xfe,Sko,Rko,_G,Pko,Bko,Iko,bb,$fe,qko,Nko,bG,jko,Dko,Gko,vb,Oko,kfe,Vko,Xko,Sfe,zko,Wko,Fb,YIe,Vi,Tb,Rfe,dy,Qko,Pfe,Hko,KIe,Po,cy,Uko,Xi,Jko,vG,Yko,Kko,FG,Zko,eSo,oSo,fy,rSo,Bfe,tSo,aSo,nSo,dt,my,sSo,Ife,lSo,iSo,zi,dSo,qfe,cSo,fSo,TG,mSo,gSo,hSo,Mb,pSo,ro,gy,uSo,Nfe,_So,bSo,Pa,vSo,jfe,FSo,TSo,Dfe,MSo,ESo,Gfe,CSo,wSo,ASo,Y,Eb,Ofe,ySo,LSo,MG,xSo,$So,kSo,Cb,Vfe,SSo,RSo,EG,PSo,BSo,ISo,wb,Xfe,qSo,NSo,CG,jSo,DSo,GSo,Ab,zfe,OSo,VSo,wG,XSo,zSo,WSo,yb,Wfe,QSo,HSo,AG,USo,JSo,YSo,Lb,Qfe,KSo,ZSo,yG,eRo,oRo,rRo,xb,Hfe,tRo,aRo,LG,nRo,sRo,lRo,$b,Ufe,iRo,dRo,xG,cRo,fRo,mRo,kb,Jfe,gRo,hRo,$G,pRo,uRo,_Ro,Sb,Yfe,bRo,vRo,kG,FRo,TRo,MRo,Rb,Kfe,ERo,CRo,SG,wRo,ARo,yRo,Pb,Zfe,LRo,xRo,RG,$Ro,kRo,SRo,Bb,eme,RRo,PRo,PG,BRo,IRo,qRo,Ib,ome,NRo,jRo,BG,DRo,GRo,ORo,qb,rme,VRo,XRo,IG,zRo,WRo,QRo,Nb,tme,HRo,URo,qG,JRo,YRo,KRo,jb,ame,ZRo,ePo,NG,oPo,rPo,tPo,Db,nme,aPo,nPo,jG,sPo,lPo,iPo,Gb,sme,dPo,cPo,DG,fPo,mPo,gPo,Ob,lme,hPo,pPo,GG,uPo,_Po,bPo,Vb,ime,vPo,FPo,OG,TPo,MPo,EPo,Xb,dme,CPo,wPo,VG,APo,yPo,LPo,zb,cme,xPo,$Po,XG,kPo,SPo,RPo,Wb,fme,PPo,BPo,zG,IPo,qPo,NPo,Qb,mme,jPo,DPo,WG,GPo,OPo,VPo,Hb,gme,XPo,zPo,QG,WPo,QPo,HPo,Ub,hme,UPo,JPo,HG,YPo,KPo,ZPo,Jb,pme,eBo,oBo,UG,rBo,tBo,aBo,Yb,ume,nBo,sBo,JG,lBo,iBo,dBo,Kb,cBo,_me,fBo,mBo,bme,gBo,hBo,Zb,ZIe,Wi,e4,vme,hy,pBo,Fme,uBo,eqe,Bo,py,_Bo,Qi,bBo,YG,vBo,FBo,KG,TBo,MBo,EBo,uy,CBo,Tme,wBo,ABo,yBo,ct,_y,LBo,Mme,xBo,$Bo,Hi,kBo,Eme,SBo,RBo,ZG,PBo,BBo,IBo,o4,qBo,to,by,NBo,Cme,jBo,DBo,Ba,GBo,wme,OBo,VBo,Ame,XBo,zBo,yme,WBo,QBo,HBo,Yr,r4,Lme,UBo,JBo,eO,YBo,KBo,ZBo,t4,xme,eIo,oIo,oO,rIo,tIo,aIo,a4,$me,nIo,sIo,rO,lIo,iIo,dIo,n4,kme,cIo,fIo,tO,mIo,gIo,hIo,s4,Sme,pIo,uIo,aO,_Io,bIo,vIo,l4,FIo,Rme,TIo,MIo,Pme,EIo,CIo,i4,oqe,Ui,d4,Bme,vy,wIo,Ime,AIo,rqe,Io,Fy,yIo,Ji,LIo,nO,xIo,$Io,sO,kIo,SIo,RIo,Ty,PIo,qme,BIo,IIo,qIo,ft,My,NIo,Nme,jIo,DIo,Yi,GIo,jme,OIo,VIo,lO,XIo,zIo,WIo,c4,QIo,ao,Ey,HIo,Dme,UIo,JIo,Ia,YIo,Gme,KIo,ZIo,Ome,eqo,oqo,Vme,rqo,tqo,aqo,U,f4,Xme,nqo,sqo,iO,lqo,iqo,dqo,m4,zme,cqo,fqo,dO,mqo,gqo,hqo,g4,Wme,pqo,uqo,cO,_qo,bqo,vqo,h4,Qme,Fqo,Tqo,fO,Mqo,Eqo,Cqo,p4,Hme,wqo,Aqo,mO,yqo,Lqo,xqo,u4,Ume,$qo,kqo,gO,Sqo,Rqo,Pqo,_4,Jme,Bqo,Iqo,hO,qqo,Nqo,jqo,b4,Yme,Dqo,Gqo,pO,Oqo,Vqo,Xqo,v4,Kme,zqo,Wqo,uO,Qqo,Hqo,Uqo,F4,Zme,Jqo,Yqo,_O,Kqo,Zqo,eNo,T4,ege,oNo,rNo,bO,tNo,aNo,nNo,M4,oge,sNo,lNo,vO,iNo,dNo,cNo,E4,rge,fNo,mNo,FO,gNo,hNo,pNo,C4,tge,uNo,_No,TO,bNo,vNo,FNo,w4,age,TNo,MNo,MO,ENo,CNo,wNo,A4,nge,ANo,yNo,EO,LNo,xNo,$No,y4,sge,kNo,SNo,CO,RNo,PNo,BNo,L4,lge,INo,qNo,wO,NNo,jNo,DNo,x4,ige,GNo,ONo,AO,VNo,XNo,zNo,$4,dge,WNo,QNo,yO,HNo,UNo,JNo,k4,cge,YNo,KNo,LO,ZNo,ejo,ojo,S4,fge,rjo,tjo,xO,ajo,njo,sjo,R4,mge,ljo,ijo,$O,djo,cjo,fjo,P4,gge,mjo,gjo,kO,hjo,pjo,ujo,B4,hge,_jo,bjo,SO,vjo,Fjo,Tjo,I4,pge,Mjo,Ejo,RO,Cjo,wjo,Ajo,q4,uge,yjo,Ljo,PO,xjo,$jo,kjo,N4,_ge,Sjo,Rjo,BO,Pjo,Bjo,Ijo,j4,bge,qjo,Njo,IO,jjo,Djo,Gjo,D4,vge,Ojo,Vjo,qO,Xjo,zjo,Wjo,G4,Fge,Qjo,Hjo,NO,Ujo,Jjo,Yjo,O4,Tge,Kjo,Zjo,jO,eDo,oDo,rDo,V4,Mge,tDo,aDo,DO,nDo,sDo,lDo,X4,iDo,Ege,dDo,cDo,Cge,fDo,mDo,z4,tqe,Ki,W4,wge,Cy,gDo,Age,hDo,aqe,qo,wy,pDo,Zi,uDo,GO,_Do,bDo,OO,vDo,FDo,TDo,Ay,MDo,yge,EDo,CDo,wDo,mt,yy,ADo,Lge,yDo,LDo,ed,xDo,xge,$Do,kDo,VO,SDo,RDo,PDo,Q4,BDo,no,Ly,IDo,$ge,qDo,NDo,qa,jDo,kge,DDo,GDo,Sge,ODo,VDo,Rge,XDo,zDo,WDo,V,H4,Pge,QDo,HDo,XO,UDo,JDo,YDo,U4,Bge,KDo,ZDo,zO,eGo,oGo,rGo,J4,Ige,tGo,aGo,WO,nGo,sGo,lGo,Y4,qge,iGo,dGo,QO,cGo,fGo,mGo,K4,Nge,gGo,hGo,HO,pGo,uGo,_Go,Z4,jge,bGo,vGo,UO,FGo,TGo,MGo,e5,Dge,EGo,CGo,JO,wGo,AGo,yGo,o5,Gge,LGo,xGo,YO,$Go,kGo,SGo,r5,Oge,RGo,PGo,KO,BGo,IGo,qGo,t5,Vge,NGo,jGo,ZO,DGo,GGo,OGo,a5,Xge,VGo,XGo,eV,zGo,WGo,QGo,n5,zge,HGo,UGo,oV,JGo,YGo,KGo,s5,Wge,ZGo,eOo,rV,oOo,rOo,tOo,l5,Qge,aOo,nOo,tV,sOo,lOo,iOo,i5,Hge,dOo,cOo,aV,fOo,mOo,gOo,d5,Uge,hOo,pOo,nV,uOo,_Oo,bOo,c5,Jge,vOo,FOo,sV,TOo,MOo,EOo,f5,Yge,COo,wOo,lV,AOo,yOo,LOo,m5,Kge,xOo,$Oo,iV,kOo,SOo,ROo,g5,Zge,POo,BOo,dV,IOo,qOo,NOo,h5,ehe,jOo,DOo,cV,GOo,OOo,VOo,p5,ohe,XOo,zOo,fV,WOo,QOo,HOo,u5,rhe,UOo,JOo,mV,YOo,KOo,ZOo,_5,the,eVo,oVo,gV,rVo,tVo,aVo,b5,ahe,nVo,sVo,hV,lVo,iVo,dVo,v5,nhe,cVo,fVo,pV,mVo,gVo,hVo,F5,she,pVo,uVo,uV,_Vo,bVo,vVo,T5,lhe,FVo,TVo,_V,MVo,EVo,CVo,M5,ihe,wVo,AVo,bV,yVo,LVo,xVo,E5,dhe,$Vo,kVo,vV,SVo,RVo,PVo,C5,che,BVo,IVo,FV,qVo,NVo,jVo,w5,fhe,DVo,GVo,TV,OVo,VVo,XVo,A5,mhe,zVo,WVo,MV,QVo,HVo,UVo,y5,ghe,JVo,YVo,EV,KVo,ZVo,eXo,L5,hhe,oXo,rXo,CV,tXo,aXo,nXo,x5,phe,sXo,lXo,wV,iXo,dXo,cXo,$5,uhe,fXo,mXo,AV,gXo,hXo,pXo,k5,_he,uXo,_Xo,yV,bXo,vXo,FXo,S5,bhe,TXo,MXo,LV,EXo,CXo,wXo,R5,AXo,vhe,yXo,LXo,Fhe,xXo,$Xo,P5,nqe,od,B5,The,xy,kXo,Mhe,SXo,sqe,No,$y,RXo,rd,PXo,xV,BXo,IXo,$V,qXo,NXo,jXo,ky,DXo,Ehe,GXo,OXo,VXo,gt,Sy,XXo,Che,zXo,WXo,td,QXo,whe,HXo,UXo,kV,JXo,YXo,KXo,I5,ZXo,so,Ry,ezo,Ahe,ozo,rzo,Na,tzo,yhe,azo,nzo,Lhe,szo,lzo,xhe,izo,dzo,czo,$he,q5,khe,fzo,mzo,SV,gzo,hzo,pzo,N5,uzo,She,_zo,bzo,Rhe,vzo,Fzo,j5,lqe,ad,D5,Phe,Py,Tzo,Bhe,Mzo,iqe,jo,By,Ezo,nd,Czo,RV,wzo,Azo,PV,yzo,Lzo,xzo,Iy,$zo,Ihe,kzo,Szo,Rzo,ht,qy,Pzo,qhe,Bzo,Izo,sd,qzo,Nhe,Nzo,jzo,BV,Dzo,Gzo,Ozo,G5,Vzo,lo,Ny,Xzo,jhe,zzo,Wzo,ja,Qzo,Dhe,Hzo,Uzo,Ghe,Jzo,Yzo,Ohe,Kzo,Zzo,eWo,Fe,O5,Vhe,oWo,rWo,IV,tWo,aWo,nWo,V5,Xhe,sWo,lWo,qV,iWo,dWo,cWo,X5,zhe,fWo,mWo,NV,gWo,hWo,pWo,Bs,Whe,uWo,_Wo,jV,bWo,vWo,DV,FWo,TWo,MWo,z5,Qhe,EWo,CWo,GV,wWo,AWo,yWo,pt,Hhe,LWo,xWo,OV,$Wo,kWo,VV,SWo,RWo,XV,PWo,BWo,IWo,W5,Uhe,qWo,NWo,zV,jWo,DWo,GWo,Q5,Jhe,OWo,VWo,WV,XWo,zWo,WWo,H5,Yhe,QWo,HWo,QV,UWo,JWo,YWo,U5,Khe,KWo,ZWo,HV,eQo,oQo,rQo,J5,Zhe,tQo,aQo,UV,nQo,sQo,lQo,Y5,epe,iQo,dQo,JV,cQo,fQo,mQo,K5,ope,gQo,hQo,YV,pQo,uQo,_Qo,Z5,bQo,rpe,vQo,FQo,tpe,TQo,MQo,ev,dqe,ld,ov,ape,jy,EQo,npe,CQo,cqe,Do,Dy,wQo,id,AQo,KV,yQo,LQo,ZV,xQo,$Qo,kQo,Gy,SQo,spe,RQo,PQo,BQo,ut,Oy,IQo,lpe,qQo,NQo,dd,jQo,ipe,DQo,GQo,eX,OQo,VQo,XQo,rv,zQo,io,Vy,WQo,dpe,QQo,HQo,Da,UQo,cpe,JQo,YQo,fpe,KQo,ZQo,mpe,eHo,oHo,rHo,gpe,tv,hpe,tHo,aHo,oX,nHo,sHo,lHo,av,iHo,ppe,dHo,cHo,upe,fHo,mHo,nv,fqe,cd,sv,_pe,Xy,gHo,bpe,hHo,mqe,Go,zy,pHo,fd,uHo,rX,_Ho,bHo,tX,vHo,FHo,THo,Wy,MHo,vpe,EHo,CHo,wHo,_t,Qy,AHo,Fpe,yHo,LHo,md,xHo,Tpe,$Ho,kHo,aX,SHo,RHo,PHo,lv,BHo,co,Hy,IHo,Mpe,qHo,NHo,Ga,jHo,Epe,DHo,GHo,Cpe,OHo,VHo,wpe,XHo,zHo,WHo,ke,iv,Ape,QHo,HHo,nX,UHo,JHo,YHo,dv,ype,KHo,ZHo,sX,eUo,oUo,rUo,cv,Lpe,tUo,aUo,lX,nUo,sUo,lUo,fv,xpe,iUo,dUo,iX,cUo,fUo,mUo,mv,$pe,gUo,hUo,dX,pUo,uUo,_Uo,gv,kpe,bUo,vUo,cX,FUo,TUo,MUo,hv,Spe,EUo,CUo,fX,wUo,AUo,yUo,pv,Rpe,LUo,xUo,mX,$Uo,kUo,SUo,uv,Ppe,RUo,PUo,gX,BUo,IUo,qUo,_v,NUo,Bpe,jUo,DUo,Ipe,GUo,OUo,bv,gqe,gd,vv,qpe,Uy,VUo,Npe,XUo,hqe,Oo,Jy,zUo,hd,WUo,hX,QUo,HUo,pX,UUo,JUo,YUo,Yy,KUo,jpe,ZUo,eJo,oJo,bt,Ky,rJo,Dpe,tJo,aJo,pd,nJo,Gpe,sJo,lJo,uX,iJo,dJo,cJo,Fv,fJo,fo,Zy,mJo,Ope,gJo,hJo,Oa,pJo,Vpe,uJo,_Jo,Xpe,bJo,vJo,zpe,FJo,TJo,MJo,Kr,Tv,Wpe,EJo,CJo,_X,wJo,AJo,yJo,Mv,Qpe,LJo,xJo,bX,$Jo,kJo,SJo,Ev,Hpe,RJo,PJo,vX,BJo,IJo,qJo,Cv,Upe,NJo,jJo,FX,DJo,GJo,OJo,wv,Jpe,VJo,XJo,TX,zJo,WJo,QJo,Av,HJo,Ype,UJo,JJo,Kpe,YJo,KJo,yv,pqe,ud,Lv,Zpe,eL,ZJo,eue,eYo,uqe,Vo,oL,oYo,_d,rYo,MX,tYo,aYo,EX,nYo,sYo,lYo,rL,iYo,oue,dYo,cYo,fYo,vt,tL,mYo,rue,gYo,hYo,bd,pYo,tue,uYo,_Yo,CX,bYo,vYo,FYo,xv,TYo,mo,aL,MYo,aue,EYo,CYo,Va,wYo,nue,AYo,yYo,sue,LYo,xYo,lue,$Yo,kYo,SYo,Se,$v,iue,RYo,PYo,wX,BYo,IYo,qYo,kv,due,NYo,jYo,AX,DYo,GYo,OYo,Sv,cue,VYo,XYo,yX,zYo,WYo,QYo,Rv,fue,HYo,UYo,LX,JYo,YYo,KYo,Pv,mue,ZYo,eKo,xX,oKo,rKo,tKo,Bv,gue,aKo,nKo,$X,sKo,lKo,iKo,Iv,hue,dKo,cKo,kX,fKo,mKo,gKo,qv,pue,hKo,pKo,SX,uKo,_Ko,bKo,Nv,uue,vKo,FKo,RX,TKo,MKo,EKo,jv,CKo,_ue,wKo,AKo,bue,yKo,LKo,Dv,_qe,vd,Gv,vue,nL,xKo,Fue,$Ko,bqe,Xo,sL,kKo,Fd,SKo,PX,RKo,PKo,BX,BKo,IKo,qKo,lL,NKo,Tue,jKo,DKo,GKo,Ft,iL,OKo,Mue,VKo,XKo,Td,zKo,Eue,WKo,QKo,IX,HKo,UKo,JKo,Ov,YKo,go,dL,KKo,Cue,ZKo,eZo,Xa,oZo,wue,rZo,tZo,Aue,aZo,nZo,yue,sZo,lZo,iZo,cL,Vv,Lue,dZo,cZo,qX,fZo,mZo,gZo,Xv,xue,hZo,pZo,NX,uZo,_Zo,bZo,zv,vZo,$ue,FZo,TZo,kue,MZo,EZo,Wv,vqe,Md,Qv,Sue,fL,CZo,Rue,wZo,Fqe,zo,mL,AZo,Ed,yZo,jX,LZo,xZo,DX,$Zo,kZo,SZo,gL,RZo,Pue,PZo,BZo,IZo,Tt,hL,qZo,Bue,NZo,jZo,Cd,DZo,Iue,GZo,OZo,GX,VZo,XZo,zZo,Hv,WZo,ho,pL,QZo,que,HZo,UZo,za,JZo,Nue,YZo,KZo,jue,ZZo,eer,Due,oer,rer,ter,Zr,Uv,Gue,aer,ner,OX,ser,ler,ier,Jv,Oue,der,cer,VX,fer,mer,ger,Yv,Vue,her,per,XX,uer,_er,ber,Kv,Xue,ver,Fer,zX,Ter,Mer,Eer,Zv,zue,Cer,wer,WX,Aer,yer,Ler,eF,xer,Wue,$er,ker,Que,Ser,Rer,oF,Tqe,wd,rF,Hue,uL,Per,Uue,Ber,Mqe,Wo,_L,Ier,Ad,qer,QX,Ner,jer,HX,Der,Ger,Oer,bL,Ver,Jue,Xer,zer,Wer,Mt,vL,Qer,Yue,Her,Uer,yd,Jer,Kue,Yer,Ker,UX,Zer,eor,oor,tF,ror,po,FL,tor,Zue,aor,nor,Wa,sor,e_e,lor,ior,o_e,dor,cor,r_e,mor,gor,hor,Ld,aF,t_e,por,uor,JX,_or,bor,vor,nF,a_e,For,Tor,YX,Mor,Eor,Cor,sF,n_e,wor,Aor,KX,yor,Lor,xor,lF,$or,s_e,kor,Sor,l_e,Ror,Por,iF,Eqe,xd,dF,i_e,TL,Bor,d_e,Ior,Cqe,Qo,ML,qor,$d,Nor,ZX,jor,Dor,ez,Gor,Oor,Vor,EL,Xor,c_e,zor,Wor,Qor,Et,CL,Hor,f_e,Uor,Jor,kd,Yor,m_e,Kor,Zor,oz,err,orr,rrr,cF,trr,uo,wL,arr,g_e,nrr,srr,Qa,lrr,h_e,irr,drr,p_e,crr,frr,u_e,mrr,grr,hrr,AL,fF,__e,prr,urr,rz,_rr,brr,vrr,mF,b_e,Frr,Trr,tz,Mrr,Err,Crr,gF,wrr,v_e,Arr,yrr,F_e,Lrr,xrr,hF,wqe,Sd,pF,T_e,yL,$rr,M_e,krr,Aqe,Ho,LL,Srr,Rd,Rrr,az,Prr,Brr,nz,Irr,qrr,Nrr,xL,jrr,E_e,Drr,Grr,Orr,Ct,$L,Vrr,C_e,Xrr,zrr,Pd,Wrr,w_e,Qrr,Hrr,sz,Urr,Jrr,Yrr,uF,Krr,_o,kL,Zrr,A_e,etr,otr,Ha,rtr,y_e,ttr,atr,L_e,ntr,str,x_e,ltr,itr,dtr,$_e,_F,k_e,ctr,ftr,lz,mtr,gtr,htr,bF,ptr,S_e,utr,_tr,R_e,btr,vtr,vF,yqe,Bd,FF,P_e,SL,Ftr,B_e,Ttr,Lqe,Uo,RL,Mtr,Id,Etr,iz,Ctr,wtr,dz,Atr,ytr,Ltr,PL,xtr,I_e,$tr,ktr,Str,wt,BL,Rtr,q_e,Ptr,Btr,qd,Itr,N_e,qtr,Ntr,cz,jtr,Dtr,Gtr,TF,Otr,bo,IL,Vtr,j_e,Xtr,ztr,Ua,Wtr,D_e,Qtr,Htr,G_e,Utr,Jtr,O_e,Ytr,Ktr,Ztr,Ja,MF,V_e,ear,oar,fz,rar,tar,aar,EF,X_e,nar,sar,mz,lar,iar,dar,CF,z_e,car,far,gz,mar,gar,har,wF,W_e,par,uar,hz,_ar,bar,Far,AF,Tar,Q_e,Mar,Ear,H_e,Car,war,yF,xqe,Nd,LF,U_e,qL,Aar,J_e,yar,$qe,Jo,NL,Lar,jd,xar,pz,$ar,kar,uz,Sar,Rar,Par,jL,Bar,Y_e,Iar,qar,Nar,At,DL,jar,K_e,Dar,Gar,Dd,Oar,Z_e,Var,Xar,_z,zar,War,Qar,xF,Har,vo,GL,Uar,e2e,Jar,Yar,Ya,Kar,o2e,Zar,enr,r2e,onr,rnr,t2e,tnr,anr,nnr,a2e,$F,n2e,snr,lnr,bz,inr,dnr,cnr,kF,fnr,s2e,mnr,gnr,l2e,hnr,pnr,SF,kqe,Gd,RF,i2e,OL,unr,d2e,_nr,Sqe,Yo,VL,bnr,Od,vnr,vz,Fnr,Tnr,Fz,Mnr,Enr,Cnr,XL,wnr,c2e,Anr,ynr,Lnr,yt,zL,xnr,f2e,$nr,knr,Vd,Snr,m2e,Rnr,Pnr,Tz,Bnr,Inr,qnr,PF,Nnr,wr,WL,jnr,g2e,Dnr,Gnr,Ka,Onr,h2e,Vnr,Xnr,p2e,znr,Wnr,u2e,Qnr,Hnr,Unr,N,BF,_2e,Jnr,Ynr,Mz,Knr,Znr,esr,IF,b2e,osr,rsr,Ez,tsr,asr,nsr,qF,v2e,ssr,lsr,Cz,isr,dsr,csr,NF,F2e,fsr,msr,wz,gsr,hsr,psr,jF,T2e,usr,_sr,Az,bsr,vsr,Fsr,DF,M2e,Tsr,Msr,yz,Esr,Csr,wsr,GF,E2e,Asr,ysr,Lz,Lsr,xsr,$sr,OF,C2e,ksr,Ssr,xz,Rsr,Psr,Bsr,VF,w2e,Isr,qsr,$z,Nsr,jsr,Dsr,XF,A2e,Gsr,Osr,kz,Vsr,Xsr,zsr,zF,y2e,Wsr,Qsr,Sz,Hsr,Usr,Jsr,WF,L2e,Ysr,Ksr,Rz,Zsr,elr,olr,QF,x2e,rlr,tlr,Pz,alr,nlr,slr,HF,$2e,llr,ilr,Bz,dlr,clr,flr,UF,k2e,mlr,glr,Iz,hlr,plr,ulr,JF,S2e,_lr,blr,qz,vlr,Flr,Tlr,YF,R2e,Mlr,Elr,Nz,Clr,wlr,Alr,Is,P2e,ylr,Llr,jz,xlr,$lr,Dz,klr,Slr,Rlr,KF,B2e,Plr,Blr,Gz,Ilr,qlr,Nlr,ZF,I2e,jlr,Dlr,Oz,Glr,Olr,Vlr,eT,q2e,Xlr,zlr,Vz,Wlr,Qlr,Hlr,oT,N2e,Ulr,Jlr,Xz,Ylr,Klr,Zlr,rT,j2e,eir,oir,zz,rir,tir,air,tT,D2e,nir,sir,Wz,lir,iir,dir,aT,G2e,cir,fir,Qz,mir,gir,hir,nT,O2e,pir,uir,Hz,_ir,bir,vir,sT,V2e,Fir,Tir,Uz,Mir,Eir,Cir,lT,X2e,wir,Air,Jz,yir,Lir,xir,iT,z2e,$ir,kir,Yz,Sir,Rir,Pir,dT,W2e,Bir,Iir,Kz,qir,Nir,jir,cT,Q2e,Dir,Gir,Zz,Oir,Vir,Xir,fT,H2e,zir,Wir,eW,Qir,Hir,Uir,mT,U2e,Jir,Yir,oW,Kir,Zir,edr,gT,J2e,odr,rdr,rW,tdr,adr,ndr,hT,Y2e,sdr,ldr,tW,idr,ddr,cdr,pT,K2e,fdr,mdr,aW,gdr,hdr,pdr,uT,Z2e,udr,_dr,nW,bdr,vdr,Fdr,_T,e1e,Tdr,Mdr,sW,Edr,Cdr,wdr,bT,o1e,Adr,ydr,lW,Ldr,xdr,$dr,vT,r1e,kdr,Sdr,iW,Rdr,Pdr,Bdr,FT,t1e,Idr,qdr,dW,Ndr,jdr,Ddr,TT,a1e,Gdr,Odr,cW,Vdr,Xdr,zdr,MT,n1e,Wdr,Qdr,fW,Hdr,Udr,Jdr,ET,s1e,Ydr,Kdr,mW,Zdr,ecr,ocr,CT,l1e,rcr,tcr,gW,acr,ncr,scr,wT,i1e,lcr,icr,hW,dcr,ccr,fcr,AT,Rqe,Xd,yT,d1e,QL,mcr,c1e,gcr,Pqe,Ko,HL,hcr,zd,pcr,pW,ucr,_cr,uW,bcr,vcr,Fcr,UL,Tcr,f1e,Mcr,Ecr,Ccr,Lt,JL,wcr,m1e,Acr,ycr,Wd,Lcr,g1e,xcr,$cr,_W,kcr,Scr,Rcr,LT,Pcr,Ar,YL,Bcr,h1e,Icr,qcr,Za,Ncr,p1e,jcr,Dcr,u1e,Gcr,Ocr,_1e,Vcr,Xcr,zcr,se,xT,b1e,Wcr,Qcr,bW,Hcr,Ucr,Jcr,$T,v1e,Ycr,Kcr,vW,Zcr,efr,ofr,kT,F1e,rfr,tfr,FW,afr,nfr,sfr,ST,T1e,lfr,ifr,TW,dfr,cfr,ffr,RT,M1e,mfr,gfr,MW,hfr,pfr,ufr,PT,E1e,_fr,bfr,EW,vfr,Ffr,Tfr,BT,C1e,Mfr,Efr,CW,Cfr,wfr,Afr,IT,w1e,yfr,Lfr,wW,xfr,$fr,kfr,qT,A1e,Sfr,Rfr,AW,Pfr,Bfr,Ifr,NT,y1e,qfr,Nfr,yW,jfr,Dfr,Gfr,jT,L1e,Ofr,Vfr,LW,Xfr,zfr,Wfr,DT,x1e,Qfr,Hfr,xW,Ufr,Jfr,Yfr,GT,$1e,Kfr,Zfr,$W,emr,omr,rmr,OT,k1e,tmr,amr,kW,nmr,smr,lmr,VT,S1e,imr,dmr,SW,cmr,fmr,mmr,XT,R1e,gmr,hmr,RW,pmr,umr,_mr,zT,P1e,bmr,vmr,PW,Fmr,Tmr,Mmr,WT,B1e,Emr,Cmr,BW,wmr,Amr,ymr,QT,I1e,Lmr,xmr,IW,$mr,kmr,Smr,HT,q1e,Rmr,Pmr,qW,Bmr,Imr,qmr,UT,N1e,Nmr,jmr,NW,Dmr,Gmr,Omr,JT,j1e,Vmr,Xmr,jW,zmr,Wmr,Qmr,YT,D1e,Hmr,Umr,DW,Jmr,Ymr,Kmr,KT,Bqe,Qd,ZT,G1e,KL,Zmr,O1e,egr,Iqe,Zo,ZL,ogr,Hd,rgr,GW,tgr,agr,OW,ngr,sgr,lgr,e8,igr,V1e,dgr,cgr,fgr,xt,o8,mgr,X1e,ggr,hgr,Ud,pgr,z1e,ugr,_gr,VW,bgr,vgr,Fgr,e7,Tgr,yr,r8,Mgr,W1e,Egr,Cgr,en,wgr,Q1e,Agr,ygr,H1e,Lgr,xgr,U1e,$gr,kgr,Sgr,Te,o7,J1e,Rgr,Pgr,XW,Bgr,Igr,qgr,r7,Y1e,Ngr,jgr,zW,Dgr,Ggr,Ogr,t7,K1e,Vgr,Xgr,WW,zgr,Wgr,Qgr,a7,Z1e,Hgr,Ugr,QW,Jgr,Ygr,Kgr,n7,ebe,Zgr,ehr,HW,ohr,rhr,thr,s7,obe,ahr,nhr,UW,shr,lhr,ihr,l7,rbe,dhr,chr,JW,fhr,mhr,ghr,i7,tbe,hhr,phr,YW,uhr,_hr,bhr,d7,abe,vhr,Fhr,KW,Thr,Mhr,Ehr,c7,nbe,Chr,whr,ZW,Ahr,yhr,Lhr,f7,sbe,xhr,$hr,eQ,khr,Shr,Rhr,m7,lbe,Phr,Bhr,oQ,Ihr,qhr,Nhr,g7,qqe,Jd,h7,ibe,t8,jhr,dbe,Dhr,Nqe,er,a8,Ghr,Yd,Ohr,rQ,Vhr,Xhr,tQ,zhr,Whr,Qhr,n8,Hhr,cbe,Uhr,Jhr,Yhr,$t,s8,Khr,fbe,Zhr,epr,Kd,opr,mbe,rpr,tpr,aQ,apr,npr,spr,p7,lpr,Lr,l8,ipr,gbe,dpr,cpr,on,fpr,hbe,mpr,gpr,pbe,hpr,ppr,ube,upr,_pr,bpr,rn,u7,_be,vpr,Fpr,nQ,Tpr,Mpr,Epr,_7,bbe,Cpr,wpr,sQ,Apr,ypr,Lpr,b7,vbe,xpr,$pr,lQ,kpr,Spr,Rpr,v7,Fbe,Ppr,Bpr,iQ,Ipr,qpr,Npr,F7,jqe,Zd,T7,Tbe,i8,jpr,Mbe,Dpr,Dqe,or,d8,Gpr,ec,Opr,dQ,Vpr,Xpr,cQ,zpr,Wpr,Qpr,c8,Hpr,Ebe,Upr,Jpr,Ypr,kt,f8,Kpr,Cbe,Zpr,eur,oc,our,wbe,rur,tur,fQ,aur,nur,sur,M7,lur,xr,m8,iur,Abe,dur,cur,tn,fur,ybe,mur,gur,Lbe,hur,pur,xbe,uur,_ur,bur,ie,E7,$be,vur,Fur,mQ,Tur,Mur,Eur,C7,kbe,Cur,wur,gQ,Aur,yur,Lur,w7,Sbe,xur,$ur,hQ,kur,Sur,Rur,A7,Rbe,Pur,Bur,pQ,Iur,qur,Nur,y7,Pbe,jur,Dur,uQ,Gur,Our,Vur,L7,Bbe,Xur,zur,_Q,Wur,Qur,Hur,x7,Ibe,Uur,Jur,bQ,Yur,Kur,Zur,$7,qbe,e_r,o_r,vQ,r_r,t_r,a_r,k7,Nbe,n_r,s_r,FQ,l_r,i_r,d_r,S7,jbe,c_r,f_r,TQ,m_r,g_r,h_r,R7,Dbe,p_r,u_r,MQ,__r,b_r,v_r,P7,Gbe,F_r,T_r,EQ,M_r,E_r,C_r,B7,Obe,w_r,A_r,CQ,y_r,L_r,x_r,I7,Vbe,$_r,k_r,wQ,S_r,R_r,P_r,q7,Xbe,B_r,I_r,AQ,q_r,N_r,j_r,N7,zbe,D_r,G_r,yQ,O_r,V_r,X_r,j7,Wbe,z_r,W_r,LQ,Q_r,H_r,U_r,D7,Qbe,J_r,Y_r,xQ,K_r,Z_r,e2r,G7,Hbe,o2r,r2r,$Q,t2r,a2r,n2r,O7,Ube,s2r,l2r,kQ,i2r,d2r,c2r,V7,Gqe,rc,X7,Jbe,g8,f2r,Ybe,m2r,Oqe,rr,h8,g2r,tc,h2r,SQ,p2r,u2r,RQ,_2r,b2r,v2r,p8,F2r,Kbe,T2r,M2r,E2r,St,u8,C2r,Zbe,w2r,A2r,ac,y2r,e4e,L2r,x2r,PQ,$2r,k2r,S2r,z7,R2r,$r,_8,P2r,o4e,B2r,I2r,an,q2r,r4e,N2r,j2r,t4e,D2r,G2r,a4e,O2r,V2r,X2r,ye,W7,n4e,z2r,W2r,BQ,Q2r,H2r,U2r,Q7,s4e,J2r,Y2r,IQ,K2r,Z2r,e1r,H7,l4e,o1r,r1r,qQ,t1r,a1r,n1r,U7,i4e,s1r,l1r,NQ,i1r,d1r,c1r,J7,d4e,f1r,m1r,jQ,g1r,h1r,p1r,Y7,c4e,u1r,_1r,DQ,b1r,v1r,F1r,K7,f4e,T1r,M1r,GQ,E1r,C1r,w1r,Z7,m4e,A1r,y1r,OQ,L1r,x1r,$1r,eM,g4e,k1r,S1r,VQ,R1r,P1r,B1r,oM,h4e,I1r,q1r,XQ,N1r,j1r,D1r,rM,Vqe,nc,tM,p4e,b8,G1r,u4e,O1r,Xqe,tr,v8,V1r,sc,X1r,zQ,z1r,W1r,WQ,Q1r,H1r,U1r,F8,J1r,_4e,Y1r,K1r,Z1r,Rt,T8,ebr,b4e,obr,rbr,lc,tbr,v4e,abr,nbr,QQ,sbr,lbr,ibr,aM,dbr,kr,M8,cbr,F4e,fbr,mbr,nn,gbr,T4e,hbr,pbr,M4e,ubr,_br,E4e,bbr,vbr,Fbr,ee,nM,C4e,Tbr,Mbr,HQ,Ebr,Cbr,wbr,sM,w4e,Abr,ybr,UQ,Lbr,xbr,$br,lM,A4e,kbr,Sbr,JQ,Rbr,Pbr,Bbr,iM,y4e,Ibr,qbr,YQ,Nbr,jbr,Dbr,dM,L4e,Gbr,Obr,KQ,Vbr,Xbr,zbr,cM,x4e,Wbr,Qbr,ZQ,Hbr,Ubr,Jbr,fM,$4e,Ybr,Kbr,eH,Zbr,e4r,o4r,mM,k4e,r4r,t4r,oH,a4r,n4r,s4r,gM,S4e,l4r,i4r,rH,d4r,c4r,f4r,hM,R4e,m4r,g4r,tH,h4r,p4r,u4r,pM,P4e,_4r,b4r,aH,v4r,F4r,T4r,uM,B4e,M4r,E4r,nH,C4r,w4r,A4r,_M,I4e,y4r,L4r,sH,x4r,$4r,k4r,bM,q4e,S4r,R4r,lH,P4r,B4r,I4r,vM,N4e,q4r,N4r,iH,j4r,D4r,G4r,FM,j4e,O4r,V4r,dH,X4r,z4r,W4r,TM,D4e,Q4r,H4r,cH,U4r,J4r,Y4r,MM,G4e,K4r,Z4r,fH,e5r,o5r,r5r,EM,O4e,t5r,a5r,mH,n5r,s5r,l5r,CM,V4e,i5r,d5r,gH,c5r,f5r,m5r,wM,X4e,g5r,h5r,hH,p5r,u5r,_5r,AM,z4e,b5r,v5r,pH,F5r,T5r,M5r,yM,W4e,E5r,C5r,uH,w5r,A5r,y5r,LM,Q4e,L5r,x5r,_H,$5r,k5r,S5r,xM,H4e,R5r,P5r,bH,B5r,I5r,q5r,$M,U4e,N5r,j5r,vH,D5r,G5r,O5r,kM,zqe,ic,SM,J4e,E8,V5r,Y4e,X5r,Wqe,ar,C8,z5r,dc,W5r,FH,Q5r,H5r,TH,U5r,J5r,Y5r,w8,K5r,K4e,Z5r,evr,ovr,Pt,A8,rvr,Z4e,tvr,avr,cc,nvr,e5e,svr,lvr,MH,ivr,dvr,cvr,RM,fvr,Sr,y8,mvr,o5e,gvr,hvr,sn,pvr,r5e,uvr,_vr,t5e,bvr,vvr,a5e,Fvr,Tvr,Mvr,he,PM,n5e,Evr,Cvr,EH,wvr,Avr,yvr,BM,s5e,Lvr,xvr,CH,$vr,kvr,Svr,IM,l5e,Rvr,Pvr,wH,Bvr,Ivr,qvr,qM,i5e,Nvr,jvr,AH,Dvr,Gvr,Ovr,NM,d5e,Vvr,Xvr,yH,zvr,Wvr,Qvr,jM,c5e,Hvr,Uvr,LH,Jvr,Yvr,Kvr,DM,f5e,Zvr,eFr,xH,oFr,rFr,tFr,GM,m5e,aFr,nFr,$H,sFr,lFr,iFr,OM,g5e,dFr,cFr,kH,fFr,mFr,gFr,VM,h5e,hFr,pFr,SH,uFr,_Fr,bFr,XM,p5e,vFr,FFr,RH,TFr,MFr,EFr,zM,u5e,CFr,wFr,PH,AFr,yFr,LFr,WM,_5e,xFr,$Fr,BH,kFr,SFr,RFr,QM,b5e,PFr,BFr,IH,IFr,qFr,NFr,HM,v5e,jFr,DFr,qH,GFr,OFr,VFr,UM,F5e,XFr,zFr,NH,WFr,QFr,HFr,JM,T5e,UFr,JFr,jH,YFr,KFr,ZFr,YM,Qqe,fc,KM,M5e,L8,eTr,E5e,oTr,Hqe,nr,x8,rTr,mc,tTr,DH,aTr,nTr,GH,sTr,lTr,iTr,$8,dTr,C5e,cTr,fTr,mTr,Bt,k8,gTr,w5e,hTr,pTr,gc,uTr,A5e,_Tr,bTr,OH,vTr,FTr,TTr,ZM,MTr,Rr,S8,ETr,y5e,CTr,wTr,ln,ATr,L5e,yTr,LTr,x5e,xTr,$Tr,$5e,kTr,STr,RTr,R8,eE,k5e,PTr,BTr,VH,ITr,qTr,NTr,oE,S5e,jTr,DTr,XH,GTr,OTr,VTr,rE,Uqe,hc,tE,R5e,P8,XTr,P5e,zTr,Jqe,sr,B8,WTr,pc,QTr,zH,HTr,UTr,WH,JTr,YTr,KTr,I8,ZTr,B5e,e7r,o7r,r7r,It,q8,t7r,I5e,a7r,n7r,uc,s7r,q5e,l7r,i7r,QH,d7r,c7r,f7r,aE,m7r,Pr,N8,g7r,N5e,h7r,p7r,dn,u7r,j5e,_7r,b7r,D5e,v7r,F7r,G5e,T7r,M7r,E7r,O5e,nE,V5e,C7r,w7r,HH,A7r,y7r,L7r,sE,Yqe,_c,lE,X5e,j8,x7r,z5e,$7r,Kqe,lr,D8,k7r,bc,S7r,UH,R7r,P7r,JH,B7r,I7r,q7r,G8,N7r,W5e,j7r,D7r,G7r,qt,O8,O7r,Q5e,V7r,X7r,vc,z7r,H5e,W7r,Q7r,YH,H7r,U7r,J7r,iE,Y7r,Br,V8,K7r,U5e,Z7r,eMr,cn,oMr,J5e,rMr,tMr,Y5e,aMr,nMr,K5e,sMr,lMr,iMr,de,dE,Z5e,dMr,cMr,KH,fMr,mMr,gMr,cE,eve,hMr,pMr,ZH,uMr,_Mr,bMr,fE,ove,vMr,FMr,eU,TMr,MMr,EMr,mE,rve,CMr,wMr,oU,AMr,yMr,LMr,gE,tve,xMr,$Mr,rU,kMr,SMr,RMr,hE,ave,PMr,BMr,tU,IMr,qMr,NMr,pE,nve,jMr,DMr,aU,GMr,OMr,VMr,uE,sve,XMr,zMr,nU,WMr,QMr,HMr,_E,lve,UMr,JMr,sU,YMr,KMr,ZMr,bE,ive,eEr,oEr,lU,rEr,tEr,aEr,vE,dve,nEr,sEr,iU,lEr,iEr,dEr,FE,cve,cEr,fEr,dU,mEr,gEr,hEr,TE,fve,pEr,uEr,cU,_Er,bEr,vEr,ME,mve,FEr,TEr,fU,MEr,EEr,CEr,EE,gve,wEr,AEr,mU,yEr,LEr,xEr,CE,hve,$Er,kEr,gU,SEr,REr,PEr,wE,pve,BEr,IEr,hU,qEr,NEr,jEr,AE,uve,DEr,GEr,pU,OEr,VEr,XEr,yE,_ve,zEr,WEr,uU,QEr,HEr,UEr,LE,bve,JEr,YEr,_U,KEr,ZEr,eCr,xE,Zqe,Fc,$E,vve,X8,oCr,Fve,rCr,eNe,ir,z8,tCr,Tc,aCr,bU,nCr,sCr,vU,lCr,iCr,dCr,W8,cCr,Tve,fCr,mCr,gCr,Nt,Q8,hCr,Mve,pCr,uCr,Mc,_Cr,Eve,bCr,vCr,FU,FCr,TCr,MCr,kE,ECr,Ir,H8,CCr,Cve,wCr,ACr,fn,yCr,wve,LCr,xCr,Ave,$Cr,kCr,yve,SCr,RCr,PCr,ce,SE,Lve,BCr,ICr,TU,qCr,NCr,jCr,RE,xve,DCr,GCr,MU,OCr,VCr,XCr,PE,$ve,zCr,WCr,EU,QCr,HCr,UCr,BE,kve,JCr,YCr,CU,KCr,ZCr,e3r,IE,Sve,o3r,r3r,wU,t3r,a3r,n3r,qE,Rve,s3r,l3r,AU,i3r,d3r,c3r,NE,Pve,f3r,m3r,yU,g3r,h3r,p3r,jE,Bve,u3r,_3r,LU,b3r,v3r,F3r,DE,Ive,T3r,M3r,xU,E3r,C3r,w3r,GE,qve,A3r,y3r,$U,L3r,x3r,$3r,OE,Nve,k3r,S3r,kU,R3r,P3r,B3r,VE,jve,I3r,q3r,SU,N3r,j3r,D3r,XE,Dve,G3r,O3r,RU,V3r,X3r,z3r,zE,Gve,W3r,Q3r,PU,H3r,U3r,J3r,WE,Ove,Y3r,K3r,BU,Z3r,ewr,owr,QE,Vve,rwr,twr,IU,awr,nwr,swr,HE,Xve,lwr,iwr,qU,dwr,cwr,fwr,UE,zve,mwr,gwr,NU,hwr,pwr,uwr,JE,Wve,_wr,bwr,jU,vwr,Fwr,Twr,YE,Qve,Mwr,Ewr,DU,Cwr,wwr,Awr,KE,oNe,Ec,ZE,Hve,U8,ywr,Uve,Lwr,rNe,dr,J8,xwr,Cc,$wr,GU,kwr,Swr,OU,Rwr,Pwr,Bwr,Y8,Iwr,Jve,qwr,Nwr,jwr,jt,K8,Dwr,Yve,Gwr,Owr,wc,Vwr,Kve,Xwr,zwr,VU,Wwr,Qwr,Hwr,eC,Uwr,qr,Z8,Jwr,Zve,Ywr,Kwr,mn,Zwr,eFe,eAr,oAr,oFe,rAr,tAr,rFe,aAr,nAr,sAr,tFe,oC,aFe,lAr,iAr,XU,dAr,cAr,fAr,rC,tNe,Ac,tC,nFe,ex,mAr,sFe,gAr,aNe,cr,ox,hAr,yc,pAr,zU,uAr,_Ar,WU,bAr,vAr,FAr,rx,TAr,lFe,MAr,EAr,CAr,Dt,tx,wAr,iFe,AAr,yAr,Lc,LAr,dFe,xAr,$Ar,QU,kAr,SAr,RAr,aC,PAr,Nr,ax,BAr,cFe,IAr,qAr,gn,NAr,fFe,jAr,DAr,mFe,GAr,OAr,gFe,VAr,XAr,zAr,hFe,nC,pFe,WAr,QAr,HU,HAr,UAr,JAr,sC,nNe,xc,lC,uFe,nx,YAr,_Fe,KAr,sNe,fr,sx,ZAr,$c,e6r,UU,o6r,r6r,JU,t6r,a6r,n6r,lx,s6r,bFe,l6r,i6r,d6r,Gt,ix,c6r,vFe,f6r,m6r,kc,g6r,FFe,h6r,p6r,YU,u6r,_6r,b6r,iC,v6r,jr,dx,F6r,TFe,T6r,M6r,hn,E6r,MFe,C6r,w6r,EFe,A6r,y6r,CFe,L6r,x6r,$6r,re,dC,wFe,k6r,S6r,KU,R6r,P6r,B6r,cC,AFe,I6r,q6r,ZU,N6r,j6r,D6r,fC,yFe,G6r,O6r,eJ,V6r,X6r,z6r,mC,LFe,W6r,Q6r,oJ,H6r,U6r,J6r,gC,xFe,Y6r,K6r,rJ,Z6r,e0r,o0r,hC,$Fe,r0r,t0r,tJ,a0r,n0r,s0r,pC,kFe,l0r,i0r,aJ,d0r,c0r,f0r,uC,SFe,m0r,g0r,nJ,h0r,p0r,u0r,_C,RFe,_0r,b0r,sJ,v0r,F0r,T0r,bC,PFe,M0r,E0r,lJ,C0r,w0r,A0r,vC,BFe,y0r,L0r,iJ,x0r,$0r,k0r,FC,IFe,S0r,R0r,dJ,P0r,B0r,I0r,TC,qFe,q0r,N0r,cJ,j0r,D0r,G0r,MC,NFe,O0r,V0r,fJ,X0r,z0r,W0r,EC,jFe,Q0r,H0r,mJ,U0r,J0r,Y0r,CC,DFe,K0r,Z0r,gJ,eyr,oyr,ryr,wC,GFe,tyr,ayr,hJ,nyr,syr,lyr,AC,OFe,iyr,dyr,pJ,cyr,fyr,myr,yC,VFe,gyr,hyr,uJ,pyr,uyr,_yr,LC,XFe,byr,vyr,_J,Fyr,Tyr,Myr,xC,zFe,Eyr,Cyr,bJ,wyr,Ayr,yyr,$C,WFe,Lyr,xyr,vJ,$yr,kyr,Syr,kC,QFe,Ryr,Pyr,FJ,Byr,Iyr,qyr,SC,HFe,Nyr,jyr,TJ,Dyr,Gyr,Oyr,RC,UFe,Vyr,Xyr,MJ,zyr,Wyr,Qyr,PC,lNe,Sc,BC,JFe,cx,Hyr,YFe,Uyr,iNe,mr,fx,Jyr,Rc,Yyr,EJ,Kyr,Zyr,CJ,eLr,oLr,rLr,mx,tLr,KFe,aLr,nLr,sLr,Ot,gx,lLr,ZFe,iLr,dLr,Pc,cLr,eTe,fLr,mLr,wJ,gLr,hLr,pLr,IC,uLr,Dr,hx,_Lr,oTe,bLr,vLr,pn,FLr,rTe,TLr,MLr,tTe,ELr,CLr,aTe,wLr,ALr,yLr,Re,qC,nTe,LLr,xLr,AJ,$Lr,kLr,SLr,NC,sTe,RLr,PLr,yJ,BLr,ILr,qLr,jC,lTe,NLr,jLr,LJ,DLr,GLr,OLr,DC,iTe,VLr,XLr,xJ,zLr,WLr,QLr,GC,dTe,HLr,ULr,$J,JLr,YLr,KLr,OC,cTe,ZLr,e8r,kJ,o8r,r8r,t8r,VC,fTe,a8r,n8r,SJ,s8r,l8r,i8r,XC,mTe,d8r,c8r,RJ,f8r,m8r,g8r,zC,gTe,h8r,p8r,PJ,u8r,_8r,b8r,WC,dNe,Bc,QC,hTe,px,v8r,pTe,F8r,cNe,gr,ux,T8r,Ic,M8r,BJ,E8r,C8r,IJ,w8r,A8r,y8r,_x,L8r,uTe,x8r,$8r,k8r,Vt,bx,S8r,_Te,R8r,P8r,qc,B8r,bTe,I8r,q8r,qJ,N8r,j8r,D8r,HC,G8r,Gr,vx,O8r,vTe,V8r,X8r,un,z8r,FTe,W8r,Q8r,TTe,H8r,U8r,MTe,J8r,Y8r,K8r,Me,UC,ETe,Z8r,exr,NJ,oxr,rxr,txr,JC,CTe,axr,nxr,jJ,sxr,lxr,ixr,YC,wTe,dxr,cxr,DJ,fxr,mxr,gxr,KC,ATe,hxr,pxr,GJ,uxr,_xr,bxr,ZC,yTe,vxr,Fxr,OJ,Txr,Mxr,Exr,e3,LTe,Cxr,wxr,VJ,Axr,yxr,Lxr,o3,xTe,xxr,$xr,XJ,kxr,Sxr,Rxr,r3,$Te,Pxr,Bxr,zJ,Ixr,qxr,Nxr,t3,kTe,jxr,Dxr,WJ,Gxr,Oxr,Vxr,a3,STe,Xxr,zxr,QJ,Wxr,Qxr,Hxr,n3,RTe,Uxr,Jxr,HJ,Yxr,Kxr,Zxr,s3,PTe,e9r,o9r,UJ,r9r,t9r,a9r,l3,fNe,Nc,i3,BTe,Fx,n9r,ITe,s9r,mNe,hr,Tx,l9r,jc,i9r,JJ,d9r,c9r,YJ,f9r,m9r,g9r,Mx,h9r,qTe,p9r,u9r,_9r,Xt,Ex,b9r,NTe,v9r,F9r,Dc,T9r,jTe,M9r,E9r,KJ,C9r,w9r,A9r,d3,y9r,Or,Cx,L9r,DTe,x9r,$9r,_n,k9r,GTe,S9r,R9r,OTe,P9r,B9r,VTe,I9r,q9r,N9r,Le,c3,XTe,j9r,D9r,ZJ,G9r,O9r,V9r,f3,zTe,X9r,z9r,eY,W9r,Q9r,H9r,m3,WTe,U9r,J9r,oY,Y9r,K9r,Z9r,g3,QTe,e$r,o$r,rY,r$r,t$r,a$r,h3,HTe,n$r,s$r,tY,l$r,i$r,d$r,p3,UTe,c$r,f$r,aY,m$r,g$r,h$r,u3,JTe,p$r,u$r,nY,_$r,b$r,v$r,_3,YTe,F$r,T$r,sY,M$r,E$r,C$r,b3,KTe,w$r,A$r,lY,y$r,L$r,x$r,v3,ZTe,$$r,k$r,iY,S$r,R$r,P$r,F3,gNe,Gc,T3,e7e,wx,B$r,o7e,I$r,hNe,pr,Ax,q$r,Oc,N$r,dY,j$r,D$r,cY,G$r,O$r,V$r,yx,X$r,r7e,z$r,W$r,Q$r,zt,Lx,H$r,t7e,U$r,J$r,Vc,Y$r,a7e,K$r,Z$r,fY,ekr,okr,rkr,M3,tkr,Vr,xx,akr,n7e,nkr,skr,bn,lkr,s7e,ikr,dkr,l7e,ckr,fkr,i7e,mkr,gkr,hkr,Pe,E3,d7e,pkr,ukr,mY,_kr,bkr,vkr,C3,c7e,Fkr,Tkr,gY,Mkr,Ekr,Ckr,w3,f7e,wkr,Akr,hY,ykr,Lkr,xkr,A3,m7e,$kr,kkr,pY,Skr,Rkr,Pkr,y3,g7e,Bkr,Ikr,uY,qkr,Nkr,jkr,L3,h7e,Dkr,Gkr,_Y,Okr,Vkr,Xkr,x3,p7e,zkr,Wkr,bY,Qkr,Hkr,Ukr,$3,u7e,Jkr,Ykr,vY,Kkr,Zkr,eSr,k3,_7e,oSr,rSr,FY,tSr,aSr,nSr,S3,pNe,Xc,R3,b7e,$x,sSr,v7e,lSr,uNe,ur,kx,iSr,zc,dSr,TY,cSr,fSr,MY,mSr,gSr,hSr,Sx,pSr,F7e,uSr,_Sr,bSr,Wt,Rx,vSr,T7e,FSr,TSr,Wc,MSr,M7e,ESr,CSr,EY,wSr,ASr,ySr,P3,LSr,Xr,Px,xSr,E7e,$Sr,kSr,vn,SSr,C7e,RSr,PSr,w7e,BSr,ISr,A7e,qSr,NSr,jSr,xe,B3,y7e,DSr,GSr,CY,OSr,VSr,XSr,I3,L7e,zSr,WSr,wY,QSr,HSr,USr,q3,x7e,JSr,YSr,AY,KSr,ZSr,eRr,N3,$7e,oRr,rRr,yY,tRr,aRr,nRr,j3,k7e,sRr,lRr,LY,iRr,dRr,cRr,D3,S7e,fRr,mRr,xY,gRr,hRr,pRr,G3,R7e,uRr,_Rr,$Y,bRr,vRr,FRr,O3,P7e,TRr,MRr,kY,ERr,CRr,wRr,V3,B7e,ARr,yRr,SY,LRr,xRr,$Rr,X3,I7e,kRr,SRr,RY,RRr,PRr,BRr,z3,_Ne,Qc,W3,q7e,Bx,IRr,N7e,qRr,bNe,_r,Ix,NRr,Hc,jRr,PY,DRr,GRr,BY,ORr,VRr,XRr,qx,zRr,j7e,WRr,QRr,HRr,Qt,Nx,URr,D7e,JRr,YRr,Uc,KRr,G7e,ZRr,ePr,IY,oPr,rPr,tPr,Q3,aPr,zr,jx,nPr,O7e,sPr,lPr,Fn,iPr,V7e,dPr,cPr,X7e,fPr,mPr,z7e,gPr,hPr,pPr,$e,H3,W7e,uPr,_Pr,qY,bPr,vPr,FPr,U3,Q7e,TPr,MPr,NY,EPr,CPr,wPr,J3,H7e,APr,yPr,jY,LPr,xPr,$Pr,Y3,U7e,kPr,SPr,DY,RPr,PPr,BPr,K3,J7e,IPr,qPr,GY,NPr,jPr,DPr,Z3,Y7e,GPr,OPr,OY,VPr,XPr,zPr,ew,K7e,WPr,QPr,VY,HPr,UPr,JPr,ow,Z7e,YPr,KPr,XY,ZPr,eBr,oBr,rw,eMe,rBr,tBr,zY,aBr,nBr,sBr,tw,oMe,lBr,iBr,WY,dBr,cBr,fBr,aw,vNe,Jc,nw,rMe,Dx,mBr,tMe,gBr,FNe,br,Gx,hBr,Yc,pBr,QY,uBr,_Br,HY,bBr,vBr,FBr,Ox,TBr,aMe,MBr,EBr,CBr,Ht,Vx,wBr,nMe,ABr,yBr,Kc,LBr,sMe,xBr,$Br,UY,kBr,SBr,RBr,sw,PBr,Wr,Xx,BBr,lMe,IBr,qBr,Tn,NBr,iMe,jBr,DBr,dMe,GBr,OBr,cMe,VBr,XBr,zBr,De,lw,fMe,WBr,QBr,JY,HBr,UBr,JBr,iw,mMe,YBr,KBr,YY,ZBr,eIr,oIr,dw,gMe,rIr,tIr,KY,aIr,nIr,sIr,cw,hMe,lIr,iIr,ZY,dIr,cIr,fIr,fw,pMe,mIr,gIr,eK,hIr,pIr,uIr,mw,uMe,_Ir,bIr,oK,vIr,FIr,TIr,gw,_Me,MIr,EIr,rK,CIr,wIr,AIr,hw,bMe,yIr,LIr,tK,xIr,$Ir,kIr,pw,TNe,Zc,uw,vMe,zx,SIr,FMe,RIr,MNe,vr,Wx,PIr,ef,BIr,aK,IIr,qIr,nK,NIr,jIr,DIr,Qx,GIr,TMe,OIr,VIr,XIr,Ut,Hx,zIr,MMe,WIr,QIr,of,HIr,EMe,UIr,JIr,sK,YIr,KIr,ZIr,_w,eqr,Qr,Ux,oqr,CMe,rqr,tqr,Mn,aqr,wMe,nqr,sqr,AMe,lqr,iqr,yMe,dqr,cqr,fqr,Ge,bw,LMe,mqr,gqr,lK,hqr,pqr,uqr,vw,xMe,_qr,bqr,iK,vqr,Fqr,Tqr,Fw,$Me,Mqr,Eqr,dK,Cqr,wqr,Aqr,Tw,kMe,yqr,Lqr,cK,xqr,$qr,kqr,Mw,SMe,Sqr,Rqr,fK,Pqr,Bqr,Iqr,Ew,RMe,qqr,Nqr,mK,jqr,Dqr,Gqr,Cw,PMe,Oqr,Vqr,gK,Xqr,zqr,Wqr,ww,BMe,Qqr,Hqr,hK,Uqr,Jqr,Yqr,Aw,ENe,rf,yw,IMe,Jx,Kqr,qMe,Zqr,CNe,Fr,Yx,eNr,tf,oNr,pK,rNr,tNr,uK,aNr,nNr,sNr,Kx,lNr,NMe,iNr,dNr,cNr,Jt,Zx,fNr,jMe,mNr,gNr,af,hNr,DMe,pNr,uNr,_K,_Nr,bNr,vNr,Lw,FNr,Hr,e9,TNr,GMe,MNr,ENr,En,CNr,OMe,wNr,ANr,VMe,yNr,LNr,XMe,xNr,$Nr,kNr,zMe,xw,WMe,SNr,RNr,bK,PNr,BNr,INr,$w,wNe,nf,kw,QMe,o9,qNr,HMe,NNr,ANe,Tr,r9,jNr,sf,DNr,vK,GNr,ONr,FK,VNr,XNr,zNr,t9,WNr,UMe,QNr,HNr,UNr,Yt,a9,JNr,JMe,YNr,KNr,lf,ZNr,YMe,ejr,ojr,TK,rjr,tjr,ajr,Sw,njr,Ur,n9,sjr,KMe,ljr,ijr,Cn,djr,ZMe,cjr,fjr,eEe,mjr,gjr,oEe,hjr,pjr,ujr,s9,Rw,rEe,_jr,bjr,MK,vjr,Fjr,Tjr,Pw,tEe,Mjr,Ejr,EK,Cjr,wjr,Ajr,Bw,yNe,df,Iw,aEe,l9,yjr,nEe,Ljr,LNe,Mr,i9,xjr,cf,$jr,CK,kjr,Sjr,wK,Rjr,Pjr,Bjr,d9,Ijr,sEe,qjr,Njr,jjr,Kt,c9,Djr,lEe,Gjr,Ojr,ff,Vjr,iEe,Xjr,zjr,AK,Wjr,Qjr,Hjr,qw,Ujr,Jr,f9,Jjr,dEe,Yjr,Kjr,wn,Zjr,cEe,eDr,oDr,fEe,rDr,tDr,mEe,aDr,nDr,sDr,gEe,Nw,hEe,lDr,iDr,yK,dDr,cDr,fDr,jw,xNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),l0=new oe({}),i0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new mDr({props:{warning:!0,$$slots:{default:[lLt]},$$scope:{ctx:L}}}),d0=new oe({}),c0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L573"}}),g0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L596"}}),vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),h0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L719"}}),p0=new oe({}),u0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L394"}}),v0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17254/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L408"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),F0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L604"}}),T0=new oe({}),M0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),w0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),yh=new mDr({props:{$$slots:{default:[cLt]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),A0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),y0=new oe({}),L0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L87"}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L101"}}),Qh=new mDr({props:{$$slots:{default:[mLt]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),S0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L254"}}),R0=new oe({}),P0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L725"}}),I0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ou=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),N0=new oe({}),j0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L732"}}),G0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Xu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),O0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),R_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),V0=new oe({}),X0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L747"}}),W0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),B_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),H0=new oe({}),U0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L754"}}),Y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),a1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),Z0=new oe({}),ey=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L761"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),s1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),ay=new oe({}),ny=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L770"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L804"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L811"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L797"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L779"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),xy=new oe({}),$y=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L786"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),Py=new oe({}),By=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L820"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L859"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L866"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),Uy=new oe({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L889"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),eL=new oe({}),oL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L873"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L880"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L898"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L905"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L852"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),yL=new oe({}),LL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L827"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L834"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L843"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),QL=new oe({}),HL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),t8=new oe({}),a8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),i8=new oe({}),d8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),g8=new oe({}),h8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),b8=new oe({}),v8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),E8=new oe({}),C8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),P8=new oe({}),B8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),U8=new oe({}),J8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),px=new oe({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),a9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),c9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),t0=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),a0=o("AutoConfig"),Ln=o(", "),xn=a("a"),n0=o("AutoModel"),pi=o(`, and
`),$n=a("a"),s0=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),w$=o("will create a model that is an instance of "),_i=a("a"),A$=o("BertModel"),y$=o("."),Eo=l(),wa=a("p"),L$=o("There is one class of "),bf=a("code"),x$=o("AutoModel"),qDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),AIe=l(),bi=a("h2"),vf=a("a"),Fee=a("span"),F(l0.$$.fragment),NDe=l(),Tee=a("span"),jDe=o("Extending the Auto Classes"),yIe=l(),kn=a("p"),DDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mee=a("code"),GDe=o("NewModel"),ODe=o(", make sure you have a "),Eee=a("code"),VDe=o("NewModelConfig"),XDe=o(` then you can add those to the auto
classes like this:`),LIe=l(),F(i0.$$.fragment),xIe=l(),$$=a("p"),zDe=o("You will then be able to use the auto classes like you would usually do!"),$Ie=l(),F(Ff.$$.fragment),kIe=l(),vi=a("h2"),Tf=a("a"),Cee=a("span"),F(d0.$$.fragment),WDe=l(),wee=a("span"),QDe=o("AutoConfig"),SIe=l(),Co=a("div"),F(c0.$$.fragment),HDe=l(),f0=a("p"),UDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k$=a("a"),JDe=o("from_pretrained()"),YDe=o(" class method."),KDe=l(),m0=a("p"),ZDe=o("This class cannot be instantiated directly using "),Aee=a("code"),eGe=o("__init__()"),oGe=o(" (throws an error)."),rGe=l(),Er=a("div"),F(g0.$$.fragment),tGe=l(),yee=a("p"),aGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nGe=l(),Fi=a("p"),sGe=o("The configuration class to instantiate is selected based on the "),Lee=a("code"),lGe=o("model_type"),iGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xee=a("code"),dGe=o("pretrained_model_name_or_path"),cGe=o(":"),fGe=l(),A=a("ul"),Mf=a("li"),$ee=a("strong"),mGe=o("albert"),gGe=o(" \u2014 "),S$=a("a"),hGe=o("AlbertConfig"),pGe=o(" (ALBERT model)"),uGe=l(),Ef=a("li"),kee=a("strong"),_Ge=o("bart"),bGe=o(" \u2014 "),R$=a("a"),vGe=o("BartConfig"),FGe=o(" (BART model)"),TGe=l(),Cf=a("li"),See=a("strong"),MGe=o("beit"),EGe=o(" \u2014 "),P$=a("a"),CGe=o("BeitConfig"),wGe=o(" (BEiT model)"),AGe=l(),wf=a("li"),Ree=a("strong"),yGe=o("bert"),LGe=o(" \u2014 "),B$=a("a"),xGe=o("BertConfig"),$Ge=o(" (BERT model)"),kGe=l(),Af=a("li"),Pee=a("strong"),SGe=o("bert-generation"),RGe=o(" \u2014 "),I$=a("a"),PGe=o("BertGenerationConfig"),BGe=o(" (Bert Generation model)"),IGe=l(),yf=a("li"),Bee=a("strong"),qGe=o("big_bird"),NGe=o(" \u2014 "),q$=a("a"),jGe=o("BigBirdConfig"),DGe=o(" (BigBird model)"),GGe=l(),Lf=a("li"),Iee=a("strong"),OGe=o("bigbird_pegasus"),VGe=o(" \u2014 "),N$=a("a"),XGe=o("BigBirdPegasusConfig"),zGe=o(" (BigBirdPegasus model)"),WGe=l(),xf=a("li"),qee=a("strong"),QGe=o("blenderbot"),HGe=o(" \u2014 "),j$=a("a"),UGe=o("BlenderbotConfig"),JGe=o(" (Blenderbot model)"),YGe=l(),$f=a("li"),Nee=a("strong"),KGe=o("blenderbot-small"),ZGe=o(" \u2014 "),D$=a("a"),eOe=o("BlenderbotSmallConfig"),oOe=o(" (BlenderbotSmall model)"),rOe=l(),kf=a("li"),jee=a("strong"),tOe=o("camembert"),aOe=o(" \u2014 "),G$=a("a"),nOe=o("CamembertConfig"),sOe=o(" (CamemBERT model)"),lOe=l(),Sf=a("li"),Dee=a("strong"),iOe=o("canine"),dOe=o(" \u2014 "),O$=a("a"),cOe=o("CanineConfig"),fOe=o(" (Canine model)"),mOe=l(),Rf=a("li"),Gee=a("strong"),gOe=o("clip"),hOe=o(" \u2014 "),V$=a("a"),pOe=o("CLIPConfig"),uOe=o(" (CLIP model)"),_Oe=l(),Pf=a("li"),Oee=a("strong"),bOe=o("convbert"),vOe=o(" \u2014 "),X$=a("a"),FOe=o("ConvBertConfig"),TOe=o(" (ConvBERT model)"),MOe=l(),Bf=a("li"),Vee=a("strong"),EOe=o("convnext"),COe=o(" \u2014 "),z$=a("a"),wOe=o("ConvNextConfig"),AOe=o(" (ConvNext model)"),yOe=l(),If=a("li"),Xee=a("strong"),LOe=o("ctrl"),xOe=o(" \u2014 "),W$=a("a"),$Oe=o("CTRLConfig"),kOe=o(" (CTRL model)"),SOe=l(),qf=a("li"),zee=a("strong"),ROe=o("data2vec-audio"),POe=o(" \u2014 "),Q$=a("a"),BOe=o("Data2VecAudioConfig"),IOe=o(" (Data2VecAudio model)"),qOe=l(),Nf=a("li"),Wee=a("strong"),NOe=o("data2vec-text"),jOe=o(" \u2014 "),H$=a("a"),DOe=o("Data2VecTextConfig"),GOe=o(" (Data2VecText model)"),OOe=l(),jf=a("li"),Qee=a("strong"),VOe=o("data2vec-vision"),XOe=o(" \u2014 "),U$=a("a"),zOe=o("Data2VecVisionConfig"),WOe=o(" (Data2VecVision model)"),QOe=l(),Df=a("li"),Hee=a("strong"),HOe=o("deberta"),UOe=o(" \u2014 "),J$=a("a"),JOe=o("DebertaConfig"),YOe=o(" (DeBERTa model)"),KOe=l(),Gf=a("li"),Uee=a("strong"),ZOe=o("deberta-v2"),eVe=o(" \u2014 "),Y$=a("a"),oVe=o("DebertaV2Config"),rVe=o(" (DeBERTa-v2 model)"),tVe=l(),Of=a("li"),Jee=a("strong"),aVe=o("decision_transformer"),nVe=o(" \u2014 "),K$=a("a"),sVe=o("DecisionTransformerConfig"),lVe=o(" (Decision Transformer model)"),iVe=l(),Vf=a("li"),Yee=a("strong"),dVe=o("deit"),cVe=o(" \u2014 "),Z$=a("a"),fVe=o("DeiTConfig"),mVe=o(" (DeiT model)"),gVe=l(),Xf=a("li"),Kee=a("strong"),hVe=o("detr"),pVe=o(" \u2014 "),ek=a("a"),uVe=o("DetrConfig"),_Ve=o(" (DETR model)"),bVe=l(),zf=a("li"),Zee=a("strong"),vVe=o("distilbert"),FVe=o(" \u2014 "),ok=a("a"),TVe=o("DistilBertConfig"),MVe=o(" (DistilBERT model)"),EVe=l(),Wf=a("li"),eoe=a("strong"),CVe=o("dpr"),wVe=o(" \u2014 "),rk=a("a"),AVe=o("DPRConfig"),yVe=o(" (DPR model)"),LVe=l(),Qf=a("li"),ooe=a("strong"),xVe=o("dpt"),$Ve=o(" \u2014 "),tk=a("a"),kVe=o("DPTConfig"),SVe=o(" (DPT model)"),RVe=l(),Hf=a("li"),roe=a("strong"),PVe=o("electra"),BVe=o(" \u2014 "),ak=a("a"),IVe=o("ElectraConfig"),qVe=o(" (ELECTRA model)"),NVe=l(),Uf=a("li"),toe=a("strong"),jVe=o("encoder-decoder"),DVe=o(" \u2014 "),nk=a("a"),GVe=o("EncoderDecoderConfig"),OVe=o(" (Encoder decoder model)"),VVe=l(),Jf=a("li"),aoe=a("strong"),XVe=o("flaubert"),zVe=o(" \u2014 "),sk=a("a"),WVe=o("FlaubertConfig"),QVe=o(" (FlauBERT model)"),HVe=l(),Yf=a("li"),noe=a("strong"),UVe=o("flava"),JVe=o(" \u2014 "),lk=a("a"),YVe=o("FlavaConfig"),KVe=o(" (Flava model)"),ZVe=l(),Kf=a("li"),soe=a("strong"),eXe=o("fnet"),oXe=o(" \u2014 "),ik=a("a"),rXe=o("FNetConfig"),tXe=o(" (FNet model)"),aXe=l(),Zf=a("li"),loe=a("strong"),nXe=o("fsmt"),sXe=o(" \u2014 "),dk=a("a"),lXe=o("FSMTConfig"),iXe=o(" (FairSeq Machine-Translation model)"),dXe=l(),em=a("li"),ioe=a("strong"),cXe=o("funnel"),fXe=o(" \u2014 "),ck=a("a"),mXe=o("FunnelConfig"),gXe=o(" (Funnel Transformer model)"),hXe=l(),om=a("li"),doe=a("strong"),pXe=o("glpn"),uXe=o(" \u2014 "),fk=a("a"),_Xe=o("GLPNConfig"),bXe=o(" (GLPN model)"),vXe=l(),rm=a("li"),coe=a("strong"),FXe=o("gpt2"),TXe=o(" \u2014 "),mk=a("a"),MXe=o("GPT2Config"),EXe=o(" (OpenAI GPT-2 model)"),CXe=l(),tm=a("li"),foe=a("strong"),wXe=o("gpt_neo"),AXe=o(" \u2014 "),gk=a("a"),yXe=o("GPTNeoConfig"),LXe=o(" (GPT Neo model)"),xXe=l(),am=a("li"),moe=a("strong"),$Xe=o("gptj"),kXe=o(" \u2014 "),hk=a("a"),SXe=o("GPTJConfig"),RXe=o(" (GPT-J model)"),PXe=l(),nm=a("li"),goe=a("strong"),BXe=o("hubert"),IXe=o(" \u2014 "),pk=a("a"),qXe=o("HubertConfig"),NXe=o(" (Hubert model)"),jXe=l(),sm=a("li"),hoe=a("strong"),DXe=o("ibert"),GXe=o(" \u2014 "),uk=a("a"),OXe=o("IBertConfig"),VXe=o(" (I-BERT model)"),XXe=l(),lm=a("li"),poe=a("strong"),zXe=o("imagegpt"),WXe=o(" \u2014 "),_k=a("a"),QXe=o("ImageGPTConfig"),HXe=o(" (ImageGPT model)"),UXe=l(),im=a("li"),uoe=a("strong"),JXe=o("layoutlm"),YXe=o(" \u2014 "),bk=a("a"),KXe=o("LayoutLMConfig"),ZXe=o(" (LayoutLM model)"),eze=l(),dm=a("li"),_oe=a("strong"),oze=o("layoutlmv2"),rze=o(" \u2014 "),vk=a("a"),tze=o("LayoutLMv2Config"),aze=o(" (LayoutLMv2 model)"),nze=l(),cm=a("li"),boe=a("strong"),sze=o("led"),lze=o(" \u2014 "),Fk=a("a"),ize=o("LEDConfig"),dze=o(" (LED model)"),cze=l(),fm=a("li"),voe=a("strong"),fze=o("longformer"),mze=o(" \u2014 "),Tk=a("a"),gze=o("LongformerConfig"),hze=o(" (Longformer model)"),pze=l(),mm=a("li"),Foe=a("strong"),uze=o("luke"),_ze=o(" \u2014 "),Mk=a("a"),bze=o("LukeConfig"),vze=o(" (LUKE model)"),Fze=l(),gm=a("li"),Toe=a("strong"),Tze=o("lxmert"),Mze=o(" \u2014 "),Ek=a("a"),Eze=o("LxmertConfig"),Cze=o(" (LXMERT model)"),wze=l(),hm=a("li"),Moe=a("strong"),Aze=o("m2m_100"),yze=o(" \u2014 "),Ck=a("a"),Lze=o("M2M100Config"),xze=o(" (M2M100 model)"),$ze=l(),pm=a("li"),Eoe=a("strong"),kze=o("marian"),Sze=o(" \u2014 "),wk=a("a"),Rze=o("MarianConfig"),Pze=o(" (Marian model)"),Bze=l(),um=a("li"),Coe=a("strong"),Ize=o("maskformer"),qze=o(" \u2014 "),Ak=a("a"),Nze=o("MaskFormerConfig"),jze=o(" (MaskFormer model)"),Dze=l(),_m=a("li"),woe=a("strong"),Gze=o("mbart"),Oze=o(" \u2014 "),yk=a("a"),Vze=o("MBartConfig"),Xze=o(" (mBART model)"),zze=l(),bm=a("li"),Aoe=a("strong"),Wze=o("megatron-bert"),Qze=o(" \u2014 "),Lk=a("a"),Hze=o("MegatronBertConfig"),Uze=o(" (MegatronBert model)"),Jze=l(),vm=a("li"),yoe=a("strong"),Yze=o("mobilebert"),Kze=o(" \u2014 "),xk=a("a"),Zze=o("MobileBertConfig"),eWe=o(" (MobileBERT model)"),oWe=l(),Fm=a("li"),Loe=a("strong"),rWe=o("mpnet"),tWe=o(" \u2014 "),$k=a("a"),aWe=o("MPNetConfig"),nWe=o(" (MPNet model)"),sWe=l(),Tm=a("li"),xoe=a("strong"),lWe=o("mt5"),iWe=o(" \u2014 "),kk=a("a"),dWe=o("MT5Config"),cWe=o(" (mT5 model)"),fWe=l(),Mm=a("li"),$oe=a("strong"),mWe=o("nystromformer"),gWe=o(" \u2014 "),Sk=a("a"),hWe=o("NystromformerConfig"),pWe=o(" (Nystromformer model)"),uWe=l(),Em=a("li"),koe=a("strong"),_We=o("openai-gpt"),bWe=o(" \u2014 "),Rk=a("a"),vWe=o("OpenAIGPTConfig"),FWe=o(" (OpenAI GPT model)"),TWe=l(),Cm=a("li"),Soe=a("strong"),MWe=o("opt"),EWe=o(" \u2014 "),Pk=a("a"),CWe=o("OPTConfig"),wWe=o(" (OPT model)"),AWe=l(),wm=a("li"),Roe=a("strong"),yWe=o("pegasus"),LWe=o(" \u2014 "),Bk=a("a"),xWe=o("PegasusConfig"),$We=o(" (Pegasus model)"),kWe=l(),Am=a("li"),Poe=a("strong"),SWe=o("perceiver"),RWe=o(" \u2014 "),Ik=a("a"),PWe=o("PerceiverConfig"),BWe=o(" (Perceiver model)"),IWe=l(),ym=a("li"),Boe=a("strong"),qWe=o("plbart"),NWe=o(" \u2014 "),qk=a("a"),jWe=o("PLBartConfig"),DWe=o(" (PLBart model)"),GWe=l(),Lm=a("li"),Ioe=a("strong"),OWe=o("poolformer"),VWe=o(" \u2014 "),Nk=a("a"),XWe=o("PoolFormerConfig"),zWe=o(" (PoolFormer model)"),WWe=l(),xm=a("li"),qoe=a("strong"),QWe=o("prophetnet"),HWe=o(" \u2014 "),jk=a("a"),UWe=o("ProphetNetConfig"),JWe=o(" (ProphetNet model)"),YWe=l(),$m=a("li"),Noe=a("strong"),KWe=o("qdqbert"),ZWe=o(" \u2014 "),Dk=a("a"),eQe=o("QDQBertConfig"),oQe=o(" (QDQBert model)"),rQe=l(),km=a("li"),joe=a("strong"),tQe=o("rag"),aQe=o(" \u2014 "),Gk=a("a"),nQe=o("RagConfig"),sQe=o(" (RAG model)"),lQe=l(),Sm=a("li"),Doe=a("strong"),iQe=o("realm"),dQe=o(" \u2014 "),Ok=a("a"),cQe=o("RealmConfig"),fQe=o(" (Realm model)"),mQe=l(),Rm=a("li"),Goe=a("strong"),gQe=o("reformer"),hQe=o(" \u2014 "),Vk=a("a"),pQe=o("ReformerConfig"),uQe=o(" (Reformer model)"),_Qe=l(),Pm=a("li"),Ooe=a("strong"),bQe=o("regnet"),vQe=o(" \u2014 "),Xk=a("a"),FQe=o("RegNetConfig"),TQe=o(" (RegNet model)"),MQe=l(),Bm=a("li"),Voe=a("strong"),EQe=o("rembert"),CQe=o(" \u2014 "),zk=a("a"),wQe=o("RemBertConfig"),AQe=o(" (RemBERT model)"),yQe=l(),Im=a("li"),Xoe=a("strong"),LQe=o("resnet"),xQe=o(" \u2014 "),Wk=a("a"),$Qe=o("ResNetConfig"),kQe=o(" (ResNet model)"),SQe=l(),qm=a("li"),zoe=a("strong"),RQe=o("retribert"),PQe=o(" \u2014 "),Qk=a("a"),BQe=o("RetriBertConfig"),IQe=o(" (RetriBERT model)"),qQe=l(),Nm=a("li"),Woe=a("strong"),NQe=o("roberta"),jQe=o(" \u2014 "),Hk=a("a"),DQe=o("RobertaConfig"),GQe=o(" (RoBERTa model)"),OQe=l(),jm=a("li"),Qoe=a("strong"),VQe=o("roformer"),XQe=o(" \u2014 "),Uk=a("a"),zQe=o("RoFormerConfig"),WQe=o(" (RoFormer model)"),QQe=l(),Dm=a("li"),Hoe=a("strong"),HQe=o("segformer"),UQe=o(" \u2014 "),Jk=a("a"),JQe=o("SegformerConfig"),YQe=o(" (SegFormer model)"),KQe=l(),Gm=a("li"),Uoe=a("strong"),ZQe=o("sew"),eHe=o(" \u2014 "),Yk=a("a"),oHe=o("SEWConfig"),rHe=o(" (SEW model)"),tHe=l(),Om=a("li"),Joe=a("strong"),aHe=o("sew-d"),nHe=o(" \u2014 "),Kk=a("a"),sHe=o("SEWDConfig"),lHe=o(" (SEW-D model)"),iHe=l(),Vm=a("li"),Yoe=a("strong"),dHe=o("speech-encoder-decoder"),cHe=o(" \u2014 "),Zk=a("a"),fHe=o("SpeechEncoderDecoderConfig"),mHe=o(" (Speech Encoder decoder model)"),gHe=l(),Xm=a("li"),Koe=a("strong"),hHe=o("speech_to_text"),pHe=o(" \u2014 "),eS=a("a"),uHe=o("Speech2TextConfig"),_He=o(" (Speech2Text model)"),bHe=l(),zm=a("li"),Zoe=a("strong"),vHe=o("speech_to_text_2"),FHe=o(" \u2014 "),oS=a("a"),THe=o("Speech2Text2Config"),MHe=o(" (Speech2Text2 model)"),EHe=l(),Wm=a("li"),ere=a("strong"),CHe=o("splinter"),wHe=o(" \u2014 "),rS=a("a"),AHe=o("SplinterConfig"),yHe=o(" (Splinter model)"),LHe=l(),Qm=a("li"),ore=a("strong"),xHe=o("squeezebert"),$He=o(" \u2014 "),tS=a("a"),kHe=o("SqueezeBertConfig"),SHe=o(" (SqueezeBERT model)"),RHe=l(),Hm=a("li"),rre=a("strong"),PHe=o("swin"),BHe=o(" \u2014 "),aS=a("a"),IHe=o("SwinConfig"),qHe=o(" (Swin model)"),NHe=l(),Um=a("li"),tre=a("strong"),jHe=o("t5"),DHe=o(" \u2014 "),nS=a("a"),GHe=o("T5Config"),OHe=o(" (T5 model)"),VHe=l(),Jm=a("li"),are=a("strong"),XHe=o("tapas"),zHe=o(" \u2014 "),sS=a("a"),WHe=o("TapasConfig"),QHe=o(" (TAPAS model)"),HHe=l(),Ym=a("li"),nre=a("strong"),UHe=o("transfo-xl"),JHe=o(" \u2014 "),lS=a("a"),YHe=o("TransfoXLConfig"),KHe=o(" (Transformer-XL model)"),ZHe=l(),Km=a("li"),sre=a("strong"),eUe=o("trocr"),oUe=o(" \u2014 "),iS=a("a"),rUe=o("TrOCRConfig"),tUe=o(" (TrOCR model)"),aUe=l(),Zm=a("li"),lre=a("strong"),nUe=o("unispeech"),sUe=o(" \u2014 "),dS=a("a"),lUe=o("UniSpeechConfig"),iUe=o(" (UniSpeech model)"),dUe=l(),eg=a("li"),ire=a("strong"),cUe=o("unispeech-sat"),fUe=o(" \u2014 "),cS=a("a"),mUe=o("UniSpeechSatConfig"),gUe=o(" (UniSpeechSat model)"),hUe=l(),og=a("li"),dre=a("strong"),pUe=o("van"),uUe=o(" \u2014 "),fS=a("a"),_Ue=o("VanConfig"),bUe=o(" (VAN model)"),vUe=l(),rg=a("li"),cre=a("strong"),FUe=o("vilt"),TUe=o(" \u2014 "),mS=a("a"),MUe=o("ViltConfig"),EUe=o(" (ViLT model)"),CUe=l(),tg=a("li"),fre=a("strong"),wUe=o("vision-encoder-decoder"),AUe=o(" \u2014 "),gS=a("a"),yUe=o("VisionEncoderDecoderConfig"),LUe=o(" (Vision Encoder decoder model)"),xUe=l(),ag=a("li"),mre=a("strong"),$Ue=o("vision-text-dual-encoder"),kUe=o(" \u2014 "),hS=a("a"),SUe=o("VisionTextDualEncoderConfig"),RUe=o(" (VisionTextDualEncoder model)"),PUe=l(),ng=a("li"),gre=a("strong"),BUe=o("visual_bert"),IUe=o(" \u2014 "),pS=a("a"),qUe=o("VisualBertConfig"),NUe=o(" (VisualBert model)"),jUe=l(),sg=a("li"),hre=a("strong"),DUe=o("vit"),GUe=o(" \u2014 "),uS=a("a"),OUe=o("ViTConfig"),VUe=o(" (ViT model)"),XUe=l(),lg=a("li"),pre=a("strong"),zUe=o("vit_mae"),WUe=o(" \u2014 "),_S=a("a"),QUe=o("ViTMAEConfig"),HUe=o(" (ViTMAE model)"),UUe=l(),ig=a("li"),ure=a("strong"),JUe=o("wav2vec2"),YUe=o(" \u2014 "),bS=a("a"),KUe=o("Wav2Vec2Config"),ZUe=o(" (Wav2Vec2 model)"),eJe=l(),dg=a("li"),_re=a("strong"),oJe=o("wav2vec2-conformer"),rJe=o(" \u2014 "),vS=a("a"),tJe=o("Wav2Vec2ConformerConfig"),aJe=o(" (Wav2Vec2-Conformer model)"),nJe=l(),cg=a("li"),bre=a("strong"),sJe=o("wavlm"),lJe=o(" \u2014 "),FS=a("a"),iJe=o("WavLMConfig"),dJe=o(" (WavLM model)"),cJe=l(),fg=a("li"),vre=a("strong"),fJe=o("xglm"),mJe=o(" \u2014 "),TS=a("a"),gJe=o("XGLMConfig"),hJe=o(" (XGLM model)"),pJe=l(),mg=a("li"),Fre=a("strong"),uJe=o("xlm"),_Je=o(" \u2014 "),MS=a("a"),bJe=o("XLMConfig"),vJe=o(" (XLM model)"),FJe=l(),gg=a("li"),Tre=a("strong"),TJe=o("xlm-prophetnet"),MJe=o(" \u2014 "),ES=a("a"),EJe=o("XLMProphetNetConfig"),CJe=o(" (XLMProphetNet model)"),wJe=l(),hg=a("li"),Mre=a("strong"),AJe=o("xlm-roberta"),yJe=o(" \u2014 "),CS=a("a"),LJe=o("XLMRobertaConfig"),xJe=o(" (XLM-RoBERTa model)"),$Je=l(),pg=a("li"),Ere=a("strong"),kJe=o("xlm-roberta-xl"),SJe=o(" \u2014 "),wS=a("a"),RJe=o("XLMRobertaXLConfig"),PJe=o(" (XLM-RoBERTa-XL model)"),BJe=l(),ug=a("li"),Cre=a("strong"),IJe=o("xlnet"),qJe=o(" \u2014 "),AS=a("a"),NJe=o("XLNetConfig"),jJe=o(" (XLNet model)"),DJe=l(),_g=a("li"),wre=a("strong"),GJe=o("yolos"),OJe=o(" \u2014 "),yS=a("a"),VJe=o("YolosConfig"),XJe=o(" (YOLOS model)"),zJe=l(),bg=a("li"),Are=a("strong"),WJe=o("yoso"),QJe=o(" \u2014 "),LS=a("a"),HJe=o("YosoConfig"),UJe=o(" (YOSO model)"),JJe=l(),F(vg.$$.fragment),YJe=l(),Fg=a("div"),F(h0.$$.fragment),KJe=l(),yre=a("p"),ZJe=o("Register a new configuration for this class."),RIe=l(),Ti=a("h2"),Tg=a("a"),Lre=a("span"),F(p0.$$.fragment),eYe=l(),xre=a("span"),oYe=o("AutoTokenizer"),PIe=l(),wo=a("div"),F(u0.$$.fragment),rYe=l(),_0=a("p"),tYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xS=a("a"),aYe=o("AutoTokenizer.from_pretrained()"),nYe=o(" class method."),sYe=l(),b0=a("p"),lYe=o("This class cannot be instantiated directly using "),$re=a("code"),iYe=o("__init__()"),dYe=o(" (throws an error)."),cYe=l(),Cr=a("div"),F(v0.$$.fragment),fYe=l(),kre=a("p"),mYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gYe=l(),Aa=a("p"),hYe=o("The tokenizer class to instantiate is selected based on the "),Sre=a("code"),pYe=o("model_type"),uYe=o(` property of the config object (either
passed as an argument or loaded from `),Rre=a("code"),_Ye=o("pretrained_model_name_or_path"),bYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),vYe=o("pretrained_model_name_or_path"),FYe=o(":"),TYe=l(),k=a("ul"),Sn=a("li"),Bre=a("strong"),MYe=o("albert"),EYe=o(" \u2014 "),$S=a("a"),CYe=o("AlbertTokenizer"),wYe=o(" or "),kS=a("a"),AYe=o("AlbertTokenizerFast"),yYe=o(" (ALBERT model)"),LYe=l(),Rn=a("li"),Ire=a("strong"),xYe=o("bart"),$Ye=o(" \u2014 "),SS=a("a"),kYe=o("BartTokenizer"),SYe=o(" or "),RS=a("a"),RYe=o("BartTokenizerFast"),PYe=o(" (BART model)"),BYe=l(),Pn=a("li"),qre=a("strong"),IYe=o("barthez"),qYe=o(" \u2014 "),PS=a("a"),NYe=o("BarthezTokenizer"),jYe=o(" or "),BS=a("a"),DYe=o("BarthezTokenizerFast"),GYe=o(" (BARThez model)"),OYe=l(),Bn=a("li"),Nre=a("strong"),VYe=o("bartpho"),XYe=o(" \u2014 "),IS=a("a"),zYe=o("BartphoTokenizer"),WYe=o(" or "),qS=a("a"),QYe=o("BartphoTokenizerFast"),HYe=o(" (BARTpho model)"),UYe=l(),In=a("li"),jre=a("strong"),JYe=o("bert"),YYe=o(" \u2014 "),NS=a("a"),KYe=o("BertTokenizer"),ZYe=o(" or "),jS=a("a"),eKe=o("BertTokenizerFast"),oKe=o(" (BERT model)"),rKe=l(),Mg=a("li"),Dre=a("strong"),tKe=o("bert-generation"),aKe=o(" \u2014 "),DS=a("a"),nKe=o("BertGenerationTokenizer"),sKe=o(" (Bert Generation model)"),lKe=l(),Eg=a("li"),Gre=a("strong"),iKe=o("bert-japanese"),dKe=o(" \u2014 "),GS=a("a"),cKe=o("BertJapaneseTokenizer"),fKe=o(" (BertJapanese model)"),mKe=l(),Cg=a("li"),Ore=a("strong"),gKe=o("bertweet"),hKe=o(" \u2014 "),OS=a("a"),pKe=o("BertweetTokenizer"),uKe=o(" (Bertweet model)"),_Ke=l(),qn=a("li"),Vre=a("strong"),bKe=o("big_bird"),vKe=o(" \u2014 "),VS=a("a"),FKe=o("BigBirdTokenizer"),TKe=o(" or "),XS=a("a"),MKe=o("BigBirdTokenizerFast"),EKe=o(" (BigBird model)"),CKe=l(),Nn=a("li"),Xre=a("strong"),wKe=o("bigbird_pegasus"),AKe=o(" \u2014 "),zS=a("a"),yKe=o("PegasusTokenizer"),LKe=o(" or "),WS=a("a"),xKe=o("PegasusTokenizerFast"),$Ke=o(" (BigBirdPegasus model)"),kKe=l(),jn=a("li"),zre=a("strong"),SKe=o("blenderbot"),RKe=o(" \u2014 "),QS=a("a"),PKe=o("BlenderbotTokenizer"),BKe=o(" or "),HS=a("a"),IKe=o("BlenderbotTokenizerFast"),qKe=o(" (Blenderbot model)"),NKe=l(),wg=a("li"),Wre=a("strong"),jKe=o("blenderbot-small"),DKe=o(" \u2014 "),US=a("a"),GKe=o("BlenderbotSmallTokenizer"),OKe=o(" (BlenderbotSmall model)"),VKe=l(),Ag=a("li"),Qre=a("strong"),XKe=o("byt5"),zKe=o(" \u2014 "),JS=a("a"),WKe=o("ByT5Tokenizer"),QKe=o(" (ByT5 model)"),HKe=l(),Dn=a("li"),Hre=a("strong"),UKe=o("camembert"),JKe=o(" \u2014 "),YS=a("a"),YKe=o("CamembertTokenizer"),KKe=o(" or "),KS=a("a"),ZKe=o("CamembertTokenizerFast"),eZe=o(" (CamemBERT model)"),oZe=l(),yg=a("li"),Ure=a("strong"),rZe=o("canine"),tZe=o(" \u2014 "),ZS=a("a"),aZe=o("CanineTokenizer"),nZe=o(" (Canine model)"),sZe=l(),Gn=a("li"),Jre=a("strong"),lZe=o("clip"),iZe=o(" \u2014 "),eR=a("a"),dZe=o("CLIPTokenizer"),cZe=o(" or "),oR=a("a"),fZe=o("CLIPTokenizerFast"),mZe=o(" (CLIP model)"),gZe=l(),On=a("li"),Yre=a("strong"),hZe=o("convbert"),pZe=o(" \u2014 "),rR=a("a"),uZe=o("ConvBertTokenizer"),_Ze=o(" or "),tR=a("a"),bZe=o("ConvBertTokenizerFast"),vZe=o(" (ConvBERT model)"),FZe=l(),Vn=a("li"),Kre=a("strong"),TZe=o("cpm"),MZe=o(" \u2014 "),aR=a("a"),EZe=o("CpmTokenizer"),CZe=o(" or "),nR=a("a"),wZe=o("CpmTokenizerFast"),AZe=o(" (CPM model)"),yZe=l(),Lg=a("li"),Zre=a("strong"),LZe=o("ctrl"),xZe=o(" \u2014 "),sR=a("a"),$Ze=o("CTRLTokenizer"),kZe=o(" (CTRL model)"),SZe=l(),Xn=a("li"),ete=a("strong"),RZe=o("data2vec-text"),PZe=o(" \u2014 "),lR=a("a"),BZe=o("RobertaTokenizer"),IZe=o(" or "),iR=a("a"),qZe=o("RobertaTokenizerFast"),NZe=o(" (Data2VecText model)"),jZe=l(),zn=a("li"),ote=a("strong"),DZe=o("deberta"),GZe=o(" \u2014 "),dR=a("a"),OZe=o("DebertaTokenizer"),VZe=o(" or "),cR=a("a"),XZe=o("DebertaTokenizerFast"),zZe=o(" (DeBERTa model)"),WZe=l(),Wn=a("li"),rte=a("strong"),QZe=o("deberta-v2"),HZe=o(" \u2014 "),fR=a("a"),UZe=o("DebertaV2Tokenizer"),JZe=o(" or "),mR=a("a"),YZe=o("DebertaV2TokenizerFast"),KZe=o(" (DeBERTa-v2 model)"),ZZe=l(),Qn=a("li"),tte=a("strong"),eeo=o("distilbert"),oeo=o(" \u2014 "),gR=a("a"),reo=o("DistilBertTokenizer"),teo=o(" or "),hR=a("a"),aeo=o("DistilBertTokenizerFast"),neo=o(" (DistilBERT model)"),seo=l(),Hn=a("li"),ate=a("strong"),leo=o("dpr"),ieo=o(" \u2014 "),pR=a("a"),deo=o("DPRQuestionEncoderTokenizer"),ceo=o(" or "),uR=a("a"),feo=o("DPRQuestionEncoderTokenizerFast"),meo=o(" (DPR model)"),geo=l(),Un=a("li"),nte=a("strong"),heo=o("electra"),peo=o(" \u2014 "),_R=a("a"),ueo=o("ElectraTokenizer"),_eo=o(" or "),bR=a("a"),beo=o("ElectraTokenizerFast"),veo=o(" (ELECTRA model)"),Feo=l(),xg=a("li"),ste=a("strong"),Teo=o("flaubert"),Meo=o(" \u2014 "),vR=a("a"),Eeo=o("FlaubertTokenizer"),Ceo=o(" (FlauBERT model)"),weo=l(),Jn=a("li"),lte=a("strong"),Aeo=o("fnet"),yeo=o(" \u2014 "),FR=a("a"),Leo=o("FNetTokenizer"),xeo=o(" or "),TR=a("a"),$eo=o("FNetTokenizerFast"),keo=o(" (FNet model)"),Seo=l(),$g=a("li"),ite=a("strong"),Reo=o("fsmt"),Peo=o(" \u2014 "),MR=a("a"),Beo=o("FSMTTokenizer"),Ieo=o(" (FairSeq Machine-Translation model)"),qeo=l(),Yn=a("li"),dte=a("strong"),Neo=o("funnel"),jeo=o(" \u2014 "),ER=a("a"),Deo=o("FunnelTokenizer"),Geo=o(" or "),CR=a("a"),Oeo=o("FunnelTokenizerFast"),Veo=o(" (Funnel Transformer model)"),Xeo=l(),Kn=a("li"),cte=a("strong"),zeo=o("gpt2"),Weo=o(" \u2014 "),wR=a("a"),Qeo=o("GPT2Tokenizer"),Heo=o(" or "),AR=a("a"),Ueo=o("GPT2TokenizerFast"),Jeo=o(" (OpenAI GPT-2 model)"),Yeo=l(),Zn=a("li"),fte=a("strong"),Keo=o("gpt_neo"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("GPT2Tokenizer"),ooo=o(" or "),LR=a("a"),roo=o("GPT2TokenizerFast"),too=o(" (GPT Neo model)"),aoo=l(),es=a("li"),mte=a("strong"),noo=o("gptj"),soo=o(" \u2014 "),xR=a("a"),loo=o("GPT2Tokenizer"),ioo=o(" or "),$R=a("a"),doo=o("GPT2TokenizerFast"),coo=o(" (GPT-J model)"),foo=l(),os=a("li"),gte=a("strong"),moo=o("herbert"),goo=o(" \u2014 "),kR=a("a"),hoo=o("HerbertTokenizer"),poo=o(" or "),SR=a("a"),uoo=o("HerbertTokenizerFast"),_oo=o(" (HerBERT model)"),boo=l(),kg=a("li"),hte=a("strong"),voo=o("hubert"),Foo=o(" \u2014 "),RR=a("a"),Too=o("Wav2Vec2CTCTokenizer"),Moo=o(" (Hubert model)"),Eoo=l(),rs=a("li"),pte=a("strong"),Coo=o("ibert"),woo=o(" \u2014 "),PR=a("a"),Aoo=o("RobertaTokenizer"),yoo=o(" or "),BR=a("a"),Loo=o("RobertaTokenizerFast"),xoo=o(" (I-BERT model)"),$oo=l(),ts=a("li"),ute=a("strong"),koo=o("layoutlm"),Soo=o(" \u2014 "),IR=a("a"),Roo=o("LayoutLMTokenizer"),Poo=o(" or "),qR=a("a"),Boo=o("LayoutLMTokenizerFast"),Ioo=o(" (LayoutLM model)"),qoo=l(),as=a("li"),_te=a("strong"),Noo=o("layoutlmv2"),joo=o(" \u2014 "),NR=a("a"),Doo=o("LayoutLMv2Tokenizer"),Goo=o(" or "),jR=a("a"),Ooo=o("LayoutLMv2TokenizerFast"),Voo=o(" (LayoutLMv2 model)"),Xoo=l(),ns=a("li"),bte=a("strong"),zoo=o("layoutxlm"),Woo=o(" \u2014 "),DR=a("a"),Qoo=o("LayoutXLMTokenizer"),Hoo=o(" or "),GR=a("a"),Uoo=o("LayoutXLMTokenizerFast"),Joo=o(" (LayoutXLM model)"),Yoo=l(),ss=a("li"),vte=a("strong"),Koo=o("led"),Zoo=o(" \u2014 "),OR=a("a"),ero=o("LEDTokenizer"),oro=o(" or "),VR=a("a"),rro=o("LEDTokenizerFast"),tro=o(" (LED model)"),aro=l(),ls=a("li"),Fte=a("strong"),nro=o("longformer"),sro=o(" \u2014 "),XR=a("a"),lro=o("LongformerTokenizer"),iro=o(" or "),zR=a("a"),dro=o("LongformerTokenizerFast"),cro=o(" (Longformer model)"),fro=l(),Sg=a("li"),Tte=a("strong"),mro=o("luke"),gro=o(" \u2014 "),WR=a("a"),hro=o("LukeTokenizer"),pro=o(" (LUKE model)"),uro=l(),is=a("li"),Mte=a("strong"),_ro=o("lxmert"),bro=o(" \u2014 "),QR=a("a"),vro=o("LxmertTokenizer"),Fro=o(" or "),HR=a("a"),Tro=o("LxmertTokenizerFast"),Mro=o(" (LXMERT model)"),Ero=l(),Rg=a("li"),Ete=a("strong"),Cro=o("m2m_100"),wro=o(" \u2014 "),UR=a("a"),Aro=o("M2M100Tokenizer"),yro=o(" (M2M100 model)"),Lro=l(),Pg=a("li"),Cte=a("strong"),xro=o("marian"),$ro=o(" \u2014 "),JR=a("a"),kro=o("MarianTokenizer"),Sro=o(" (Marian model)"),Rro=l(),ds=a("li"),wte=a("strong"),Pro=o("mbart"),Bro=o(" \u2014 "),YR=a("a"),Iro=o("MBartTokenizer"),qro=o(" or "),KR=a("a"),Nro=o("MBartTokenizerFast"),jro=o(" (mBART model)"),Dro=l(),cs=a("li"),Ate=a("strong"),Gro=o("mbart50"),Oro=o(" \u2014 "),ZR=a("a"),Vro=o("MBart50Tokenizer"),Xro=o(" or "),eP=a("a"),zro=o("MBart50TokenizerFast"),Wro=o(" (mBART-50 model)"),Qro=l(),fs=a("li"),yte=a("strong"),Hro=o("megatron-bert"),Uro=o(" \u2014 "),oP=a("a"),Jro=o("BertTokenizer"),Yro=o(" or "),rP=a("a"),Kro=o("BertTokenizerFast"),Zro=o(" (MegatronBert model)"),eto=l(),Bg=a("li"),Lte=a("strong"),oto=o("mluke"),rto=o(" \u2014 "),tP=a("a"),tto=o("MLukeTokenizer"),ato=o(" (mLUKE model)"),nto=l(),ms=a("li"),xte=a("strong"),sto=o("mobilebert"),lto=o(" \u2014 "),aP=a("a"),ito=o("MobileBertTokenizer"),dto=o(" or "),nP=a("a"),cto=o("MobileBertTokenizerFast"),fto=o(" (MobileBERT model)"),mto=l(),gs=a("li"),$te=a("strong"),gto=o("mpnet"),hto=o(" \u2014 "),sP=a("a"),pto=o("MPNetTokenizer"),uto=o(" or "),lP=a("a"),_to=o("MPNetTokenizerFast"),bto=o(" (MPNet model)"),vto=l(),hs=a("li"),kte=a("strong"),Fto=o("mt5"),Tto=o(" \u2014 "),iP=a("a"),Mto=o("MT5Tokenizer"),Eto=o(" or "),dP=a("a"),Cto=o("MT5TokenizerFast"),wto=o(" (mT5 model)"),Ato=l(),ps=a("li"),Ste=a("strong"),yto=o("nystromformer"),Lto=o(" \u2014 "),cP=a("a"),xto=o("AlbertTokenizer"),$to=o(" or "),fP=a("a"),kto=o("AlbertTokenizerFast"),Sto=o(" (Nystromformer model)"),Rto=l(),us=a("li"),Rte=a("strong"),Pto=o("openai-gpt"),Bto=o(" \u2014 "),mP=a("a"),Ito=o("OpenAIGPTTokenizer"),qto=o(" or "),gP=a("a"),Nto=o("OpenAIGPTTokenizerFast"),jto=o(" (OpenAI GPT model)"),Dto=l(),Ig=a("li"),Pte=a("strong"),Gto=o("opt"),Oto=o(" \u2014 "),hP=a("a"),Vto=o("GPT2Tokenizer"),Xto=o(" (OPT model)"),zto=l(),_s=a("li"),Bte=a("strong"),Wto=o("pegasus"),Qto=o(" \u2014 "),pP=a("a"),Hto=o("PegasusTokenizer"),Uto=o(" or "),uP=a("a"),Jto=o("PegasusTokenizerFast"),Yto=o(" (Pegasus model)"),Kto=l(),qg=a("li"),Ite=a("strong"),Zto=o("perceiver"),eao=o(" \u2014 "),_P=a("a"),oao=o("PerceiverTokenizer"),rao=o(" (Perceiver model)"),tao=l(),Ng=a("li"),qte=a("strong"),aao=o("phobert"),nao=o(" \u2014 "),bP=a("a"),sao=o("PhobertTokenizer"),lao=o(" (PhoBERT model)"),iao=l(),jg=a("li"),Nte=a("strong"),dao=o("plbart"),cao=o(" \u2014 "),vP=a("a"),fao=o("PLBartTokenizer"),mao=o(" (PLBart model)"),gao=l(),Dg=a("li"),jte=a("strong"),hao=o("prophetnet"),pao=o(" \u2014 "),FP=a("a"),uao=o("ProphetNetTokenizer"),_ao=o(" (ProphetNet model)"),bao=l(),bs=a("li"),Dte=a("strong"),vao=o("qdqbert"),Fao=o(" \u2014 "),TP=a("a"),Tao=o("BertTokenizer"),Mao=o(" or "),MP=a("a"),Eao=o("BertTokenizerFast"),Cao=o(" (QDQBert model)"),wao=l(),Gg=a("li"),Gte=a("strong"),Aao=o("rag"),yao=o(" \u2014 "),EP=a("a"),Lao=o("RagTokenizer"),xao=o(" (RAG model)"),$ao=l(),vs=a("li"),Ote=a("strong"),kao=o("realm"),Sao=o(" \u2014 "),CP=a("a"),Rao=o("RealmTokenizer"),Pao=o(" or "),wP=a("a"),Bao=o("RealmTokenizerFast"),Iao=o(" (Realm model)"),qao=l(),Fs=a("li"),Vte=a("strong"),Nao=o("reformer"),jao=o(" \u2014 "),AP=a("a"),Dao=o("ReformerTokenizer"),Gao=o(" or "),yP=a("a"),Oao=o("ReformerTokenizerFast"),Vao=o(" (Reformer model)"),Xao=l(),Ts=a("li"),Xte=a("strong"),zao=o("rembert"),Wao=o(" \u2014 "),LP=a("a"),Qao=o("RemBertTokenizer"),Hao=o(" or "),xP=a("a"),Uao=o("RemBertTokenizerFast"),Jao=o(" (RemBERT model)"),Yao=l(),Ms=a("li"),zte=a("strong"),Kao=o("retribert"),Zao=o(" \u2014 "),$P=a("a"),eno=o("RetriBertTokenizer"),ono=o(" or "),kP=a("a"),rno=o("RetriBertTokenizerFast"),tno=o(" (RetriBERT model)"),ano=l(),Es=a("li"),Wte=a("strong"),nno=o("roberta"),sno=o(" \u2014 "),SP=a("a"),lno=o("RobertaTokenizer"),ino=o(" or "),RP=a("a"),dno=o("RobertaTokenizerFast"),cno=o(" (RoBERTa model)"),fno=l(),Cs=a("li"),Qte=a("strong"),mno=o("roformer"),gno=o(" \u2014 "),PP=a("a"),hno=o("RoFormerTokenizer"),pno=o(" or "),BP=a("a"),uno=o("RoFormerTokenizerFast"),_no=o(" (RoFormer model)"),bno=l(),Og=a("li"),Hte=a("strong"),vno=o("speech_to_text"),Fno=o(" \u2014 "),IP=a("a"),Tno=o("Speech2TextTokenizer"),Mno=o(" (Speech2Text model)"),Eno=l(),Vg=a("li"),Ute=a("strong"),Cno=o("speech_to_text_2"),wno=o(" \u2014 "),qP=a("a"),Ano=o("Speech2Text2Tokenizer"),yno=o(" (Speech2Text2 model)"),Lno=l(),ws=a("li"),Jte=a("strong"),xno=o("splinter"),$no=o(" \u2014 "),NP=a("a"),kno=o("SplinterTokenizer"),Sno=o(" or "),jP=a("a"),Rno=o("SplinterTokenizerFast"),Pno=o(" (Splinter model)"),Bno=l(),As=a("li"),Yte=a("strong"),Ino=o("squeezebert"),qno=o(" \u2014 "),DP=a("a"),Nno=o("SqueezeBertTokenizer"),jno=o(" or "),GP=a("a"),Dno=o("SqueezeBertTokenizerFast"),Gno=o(" (SqueezeBERT model)"),Ono=l(),ys=a("li"),Kte=a("strong"),Vno=o("t5"),Xno=o(" \u2014 "),OP=a("a"),zno=o("T5Tokenizer"),Wno=o(" or "),VP=a("a"),Qno=o("T5TokenizerFast"),Hno=o(" (T5 model)"),Uno=l(),Xg=a("li"),Zte=a("strong"),Jno=o("tapas"),Yno=o(" \u2014 "),XP=a("a"),Kno=o("TapasTokenizer"),Zno=o(" (TAPAS model)"),eso=l(),zg=a("li"),eae=a("strong"),oso=o("tapex"),rso=o(" \u2014 "),zP=a("a"),tso=o("TapexTokenizer"),aso=o(" (TAPEX model)"),nso=l(),Wg=a("li"),oae=a("strong"),sso=o("transfo-xl"),lso=o(" \u2014 "),WP=a("a"),iso=o("TransfoXLTokenizer"),dso=o(" (Transformer-XL model)"),cso=l(),Ls=a("li"),rae=a("strong"),fso=o("visual_bert"),mso=o(" \u2014 "),QP=a("a"),gso=o("BertTokenizer"),hso=o(" or "),HP=a("a"),pso=o("BertTokenizerFast"),uso=o(" (VisualBert model)"),_so=l(),Qg=a("li"),tae=a("strong"),bso=o("wav2vec2"),vso=o(" \u2014 "),UP=a("a"),Fso=o("Wav2Vec2CTCTokenizer"),Tso=o(" (Wav2Vec2 model)"),Mso=l(),Hg=a("li"),aae=a("strong"),Eso=o("wav2vec2-conformer"),Cso=o(" \u2014 "),JP=a("a"),wso=o("Wav2Vec2CTCTokenizer"),Aso=o(" (Wav2Vec2-Conformer model)"),yso=l(),Ug=a("li"),nae=a("strong"),Lso=o("wav2vec2_phoneme"),xso=o(" \u2014 "),YP=a("a"),$so=o("Wav2Vec2PhonemeCTCTokenizer"),kso=o(" (Wav2Vec2Phoneme model)"),Sso=l(),xs=a("li"),sae=a("strong"),Rso=o("xglm"),Pso=o(" \u2014 "),KP=a("a"),Bso=o("XGLMTokenizer"),Iso=o(" or "),ZP=a("a"),qso=o("XGLMTokenizerFast"),Nso=o(" (XGLM model)"),jso=l(),Jg=a("li"),lae=a("strong"),Dso=o("xlm"),Gso=o(" \u2014 "),eB=a("a"),Oso=o("XLMTokenizer"),Vso=o(" (XLM model)"),Xso=l(),Yg=a("li"),iae=a("strong"),zso=o("xlm-prophetnet"),Wso=o(" \u2014 "),oB=a("a"),Qso=o("XLMProphetNetTokenizer"),Hso=o(" (XLMProphetNet model)"),Uso=l(),$s=a("li"),dae=a("strong"),Jso=o("xlm-roberta"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("XLMRobertaTokenizer"),Zso=o(" or "),tB=a("a"),elo=o("XLMRobertaTokenizerFast"),olo=o(" (XLM-RoBERTa model)"),rlo=l(),ks=a("li"),cae=a("strong"),tlo=o("xlm-roberta-xl"),alo=o(" \u2014 "),aB=a("a"),nlo=o("RobertaTokenizer"),slo=o(" or "),nB=a("a"),llo=o("RobertaTokenizerFast"),ilo=o(" (XLM-RoBERTa-XL model)"),dlo=l(),Ss=a("li"),fae=a("strong"),clo=o("xlnet"),flo=o(" \u2014 "),sB=a("a"),mlo=o("XLNetTokenizer"),glo=o(" or "),lB=a("a"),hlo=o("XLNetTokenizerFast"),plo=o(" (XLNet model)"),ulo=l(),Rs=a("li"),mae=a("strong"),_lo=o("yoso"),blo=o(" \u2014 "),iB=a("a"),vlo=o("AlbertTokenizer"),Flo=o(" or "),dB=a("a"),Tlo=o("AlbertTokenizerFast"),Mlo=o(" (YOSO model)"),Elo=l(),F(Kg.$$.fragment),Clo=l(),Zg=a("div"),F(F0.$$.fragment),wlo=l(),gae=a("p"),Alo=o("Register a new tokenizer in this mapping."),BIe=l(),Mi=a("h2"),eh=a("a"),hae=a("span"),F(T0.$$.fragment),ylo=l(),pae=a("span"),Llo=o("AutoFeatureExtractor"),IIe=l(),Ao=a("div"),F(M0.$$.fragment),xlo=l(),E0=a("p"),$lo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cB=a("a"),klo=o("AutoFeatureExtractor.from_pretrained()"),Slo=o(" class method."),Rlo=l(),C0=a("p"),Plo=o("This class cannot be instantiated directly using "),uae=a("code"),Blo=o("__init__()"),Ilo=o(" (throws an error)."),qlo=l(),He=a("div"),F(w0.$$.fragment),Nlo=l(),_ae=a("p"),jlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Dlo=l(),ya=a("p"),Glo=o("The feature extractor class to instantiate is selected based on the "),bae=a("code"),Olo=o("model_type"),Vlo=o(` property of the config object
(either passed as an argument or loaded from `),vae=a("code"),Xlo=o("pretrained_model_name_or_path"),zlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fae=a("code"),Wlo=o("pretrained_model_name_or_path"),Qlo=o(":"),Hlo=l(),Z=a("ul"),oh=a("li"),Tae=a("strong"),Ulo=o("beit"),Jlo=o(" \u2014 "),fB=a("a"),Ylo=o("BeitFeatureExtractor"),Klo=o(" (BEiT model)"),Zlo=l(),rh=a("li"),Mae=a("strong"),eio=o("clip"),oio=o(" \u2014 "),mB=a("a"),rio=o("CLIPFeatureExtractor"),tio=o(" (CLIP model)"),aio=l(),th=a("li"),Eae=a("strong"),nio=o("convnext"),sio=o(" \u2014 "),gB=a("a"),lio=o("ConvNextFeatureExtractor"),iio=o(" (ConvNext model)"),dio=l(),ah=a("li"),Cae=a("strong"),cio=o("data2vec-audio"),fio=o(" \u2014 "),hB=a("a"),mio=o("Wav2Vec2FeatureExtractor"),gio=o(" (Data2VecAudio model)"),hio=l(),nh=a("li"),wae=a("strong"),pio=o("data2vec-vision"),uio=o(" \u2014 "),pB=a("a"),_io=o("BeitFeatureExtractor"),bio=o(" (Data2VecVision model)"),vio=l(),sh=a("li"),Aae=a("strong"),Fio=o("deit"),Tio=o(" \u2014 "),uB=a("a"),Mio=o("DeiTFeatureExtractor"),Eio=o(" (DeiT model)"),Cio=l(),lh=a("li"),yae=a("strong"),wio=o("detr"),Aio=o(" \u2014 "),_B=a("a"),yio=o("DetrFeatureExtractor"),Lio=o(" (DETR model)"),xio=l(),ih=a("li"),Lae=a("strong"),$io=o("dpt"),kio=o(" \u2014 "),bB=a("a"),Sio=o("DPTFeatureExtractor"),Rio=o(" (DPT model)"),Pio=l(),dh=a("li"),xae=a("strong"),Bio=o("flava"),Iio=o(" \u2014 "),vB=a("a"),qio=o("FlavaFeatureExtractor"),Nio=o(" (Flava model)"),jio=l(),ch=a("li"),$ae=a("strong"),Dio=o("glpn"),Gio=o(" \u2014 "),FB=a("a"),Oio=o("GLPNFeatureExtractor"),Vio=o(" (GLPN model)"),Xio=l(),fh=a("li"),kae=a("strong"),zio=o("hubert"),Wio=o(" \u2014 "),TB=a("a"),Qio=o("Wav2Vec2FeatureExtractor"),Hio=o(" (Hubert model)"),Uio=l(),mh=a("li"),Sae=a("strong"),Jio=o("layoutlmv2"),Yio=o(" \u2014 "),MB=a("a"),Kio=o("LayoutLMv2FeatureExtractor"),Zio=o(" (LayoutLMv2 model)"),edo=l(),gh=a("li"),Rae=a("strong"),odo=o("maskformer"),rdo=o(" \u2014 "),EB=a("a"),tdo=o("MaskFormerFeatureExtractor"),ado=o(" (MaskFormer model)"),ndo=l(),hh=a("li"),Pae=a("strong"),sdo=o("perceiver"),ldo=o(" \u2014 "),CB=a("a"),ido=o("PerceiverFeatureExtractor"),ddo=o(" (Perceiver model)"),cdo=l(),ph=a("li"),Bae=a("strong"),fdo=o("poolformer"),mdo=o(" \u2014 "),wB=a("a"),gdo=o("PoolFormerFeatureExtractor"),hdo=o(" (PoolFormer model)"),pdo=l(),uh=a("li"),Iae=a("strong"),udo=o("regnet"),_do=o(" \u2014 "),AB=a("a"),bdo=o("ConvNextFeatureExtractor"),vdo=o(" (RegNet model)"),Fdo=l(),_h=a("li"),qae=a("strong"),Tdo=o("resnet"),Mdo=o(" \u2014 "),yB=a("a"),Edo=o("ConvNextFeatureExtractor"),Cdo=o(" (ResNet model)"),wdo=l(),bh=a("li"),Nae=a("strong"),Ado=o("segformer"),ydo=o(" \u2014 "),LB=a("a"),Ldo=o("SegformerFeatureExtractor"),xdo=o(" (SegFormer model)"),$do=l(),vh=a("li"),jae=a("strong"),kdo=o("speech_to_text"),Sdo=o(" \u2014 "),xB=a("a"),Rdo=o("Speech2TextFeatureExtractor"),Pdo=o(" (Speech2Text model)"),Bdo=l(),Fh=a("li"),Dae=a("strong"),Ido=o("swin"),qdo=o(" \u2014 "),$B=a("a"),Ndo=o("ViTFeatureExtractor"),jdo=o(" (Swin model)"),Ddo=l(),Th=a("li"),Gae=a("strong"),Gdo=o("van"),Odo=o(" \u2014 "),kB=a("a"),Vdo=o("ConvNextFeatureExtractor"),Xdo=o(" (VAN model)"),zdo=l(),Mh=a("li"),Oae=a("strong"),Wdo=o("vit"),Qdo=o(" \u2014 "),SB=a("a"),Hdo=o("ViTFeatureExtractor"),Udo=o(" (ViT model)"),Jdo=l(),Eh=a("li"),Vae=a("strong"),Ydo=o("vit_mae"),Kdo=o(" \u2014 "),RB=a("a"),Zdo=o("ViTFeatureExtractor"),eco=o(" (ViTMAE model)"),oco=l(),Ch=a("li"),Xae=a("strong"),rco=o("wav2vec2"),tco=o(" \u2014 "),PB=a("a"),aco=o("Wav2Vec2FeatureExtractor"),nco=o(" (Wav2Vec2 model)"),sco=l(),wh=a("li"),zae=a("strong"),lco=o("wav2vec2-conformer"),ico=o(" \u2014 "),BB=a("a"),dco=o("Wav2Vec2FeatureExtractor"),cco=o(" (Wav2Vec2-Conformer model)"),fco=l(),Ah=a("li"),Wae=a("strong"),mco=o("yolos"),gco=o(" \u2014 "),IB=a("a"),hco=o("YolosFeatureExtractor"),pco=o(" (YOLOS model)"),uco=l(),F(yh.$$.fragment),_co=l(),F(Lh.$$.fragment),bco=l(),xh=a("div"),F(A0.$$.fragment),vco=l(),Qae=a("p"),Fco=o("Register a new feature extractor for this class."),qIe=l(),Ei=a("h2"),$h=a("a"),Hae=a("span"),F(y0.$$.fragment),Tco=l(),Uae=a("span"),Mco=o("AutoProcessor"),NIe=l(),yo=a("div"),F(L0.$$.fragment),Eco=l(),x0=a("p"),Cco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qB=a("a"),wco=o("AutoProcessor.from_pretrained()"),Aco=o(" class method."),yco=l(),$0=a("p"),Lco=o("This class cannot be instantiated directly using "),Jae=a("code"),xco=o("__init__()"),$co=o(" (throws an error)."),kco=l(),Ue=a("div"),F(k0.$$.fragment),Sco=l(),Yae=a("p"),Rco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Pco=l(),Ci=a("p"),Bco=o("The processor class to instantiate is selected based on the "),Kae=a("code"),Ico=o("model_type"),qco=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),Nco=o("pretrained_model_name_or_path"),jco=o(" if possible):"),Dco=l(),pe=a("ul"),kh=a("li"),ene=a("strong"),Gco=o("clip"),Oco=o(" \u2014 "),NB=a("a"),Vco=o("CLIPProcessor"),Xco=o(" (CLIP model)"),zco=l(),Sh=a("li"),one=a("strong"),Wco=o("flava"),Qco=o(" \u2014 "),rne=a("code"),Hco=o("FLAVAProcessor"),Uco=o(" (Flava model)"),Jco=l(),Rh=a("li"),tne=a("strong"),Yco=o("layoutlmv2"),Kco=o(" \u2014 "),jB=a("a"),Zco=o("LayoutLMv2Processor"),efo=o(" (LayoutLMv2 model)"),ofo=l(),Ph=a("li"),ane=a("strong"),rfo=o("layoutxlm"),tfo=o(" \u2014 "),DB=a("a"),afo=o("LayoutXLMProcessor"),nfo=o(" (LayoutXLM model)"),sfo=l(),Bh=a("li"),nne=a("strong"),lfo=o("sew"),ifo=o(" \u2014 "),GB=a("a"),dfo=o("Wav2Vec2Processor"),cfo=o(" (SEW model)"),ffo=l(),Ih=a("li"),sne=a("strong"),mfo=o("sew-d"),gfo=o(" \u2014 "),OB=a("a"),hfo=o("Wav2Vec2Processor"),pfo=o(" (SEW-D model)"),ufo=l(),qh=a("li"),lne=a("strong"),_fo=o("speech_to_text"),bfo=o(" \u2014 "),VB=a("a"),vfo=o("Speech2TextProcessor"),Ffo=o(" (Speech2Text model)"),Tfo=l(),Nh=a("li"),ine=a("strong"),Mfo=o("speech_to_text_2"),Efo=o(" \u2014 "),XB=a("a"),Cfo=o("Speech2Text2Processor"),wfo=o(" (Speech2Text2 model)"),Afo=l(),jh=a("li"),dne=a("strong"),yfo=o("trocr"),Lfo=o(" \u2014 "),zB=a("a"),xfo=o("TrOCRProcessor"),$fo=o(" (TrOCR model)"),kfo=l(),Dh=a("li"),cne=a("strong"),Sfo=o("unispeech"),Rfo=o(" \u2014 "),WB=a("a"),Pfo=o("Wav2Vec2Processor"),Bfo=o(" (UniSpeech model)"),Ifo=l(),Gh=a("li"),fne=a("strong"),qfo=o("unispeech-sat"),Nfo=o(" \u2014 "),QB=a("a"),jfo=o("Wav2Vec2Processor"),Dfo=o(" (UniSpeechSat model)"),Gfo=l(),Oh=a("li"),mne=a("strong"),Ofo=o("vilt"),Vfo=o(" \u2014 "),HB=a("a"),Xfo=o("ViltProcessor"),zfo=o(" (ViLT model)"),Wfo=l(),Vh=a("li"),gne=a("strong"),Qfo=o("vision-text-dual-encoder"),Hfo=o(" \u2014 "),UB=a("a"),Ufo=o("VisionTextDualEncoderProcessor"),Jfo=o(" (VisionTextDualEncoder model)"),Yfo=l(),Xh=a("li"),hne=a("strong"),Kfo=o("wav2vec2"),Zfo=o(" \u2014 "),JB=a("a"),emo=o("Wav2Vec2Processor"),omo=o(" (Wav2Vec2 model)"),rmo=l(),zh=a("li"),pne=a("strong"),tmo=o("wav2vec2-conformer"),amo=o(" \u2014 "),YB=a("a"),nmo=o("Wav2Vec2Processor"),smo=o(" (Wav2Vec2-Conformer model)"),lmo=l(),Wh=a("li"),une=a("strong"),imo=o("wavlm"),dmo=o(" \u2014 "),KB=a("a"),cmo=o("Wav2Vec2Processor"),fmo=o(" (WavLM model)"),mmo=l(),F(Qh.$$.fragment),gmo=l(),F(Hh.$$.fragment),hmo=l(),Uh=a("div"),F(S0.$$.fragment),pmo=l(),_ne=a("p"),umo=o("Register a new processor for this class."),jIe=l(),wi=a("h2"),Jh=a("a"),bne=a("span"),F(R0.$$.fragment),_mo=l(),vne=a("span"),bmo=o("AutoModel"),DIe=l(),Lo=a("div"),F(P0.$$.fragment),vmo=l(),Ai=a("p"),Fmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=a("a"),Tmo=o("from_pretrained()"),Mmo=o(" class method or the "),eI=a("a"),Emo=o("from_config()"),Cmo=o(` class
method.`),wmo=l(),B0=a("p"),Amo=o("This class cannot be instantiated directly using "),Fne=a("code"),ymo=o("__init__()"),Lmo=o(" (throws an error)."),xmo=l(),tt=a("div"),F(I0.$$.fragment),$mo=l(),Tne=a("p"),kmo=o("Instantiates one of the base model classes of the library from a configuration."),Smo=l(),yi=a("p"),Rmo=o(`Note:
Loading a model from its configuration file does `),Mne=a("strong"),Pmo=o("not"),Bmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oI=a("a"),Imo=o("from_pretrained()"),qmo=o(" to load the model weights."),Nmo=l(),F(Yh.$$.fragment),jmo=l(),Je=a("div"),F(q0.$$.fragment),Dmo=l(),Ene=a("p"),Gmo=o("Instantiate one of the base model classes of the library from a pretrained model."),Omo=l(),La=a("p"),Vmo=o("The model class to instantiate is selected based on the "),Cne=a("code"),Xmo=o("model_type"),zmo=o(` property of the config object (either
passed as an argument or loaded from `),wne=a("code"),Wmo=o("pretrained_model_name_or_path"),Qmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=a("code"),Hmo=o("pretrained_model_name_or_path"),Umo=o(":"),Jmo=l(),x=a("ul"),Kh=a("li"),yne=a("strong"),Ymo=o("albert"),Kmo=o(" \u2014 "),rI=a("a"),Zmo=o("AlbertModel"),ego=o(" (ALBERT model)"),ogo=l(),Zh=a("li"),Lne=a("strong"),rgo=o("bart"),tgo=o(" \u2014 "),tI=a("a"),ago=o("BartModel"),ngo=o(" (BART model)"),sgo=l(),ep=a("li"),xne=a("strong"),lgo=o("beit"),igo=o(" \u2014 "),aI=a("a"),dgo=o("BeitModel"),cgo=o(" (BEiT model)"),fgo=l(),op=a("li"),$ne=a("strong"),mgo=o("bert"),ggo=o(" \u2014 "),nI=a("a"),hgo=o("BertModel"),pgo=o(" (BERT model)"),ugo=l(),rp=a("li"),kne=a("strong"),_go=o("bert-generation"),bgo=o(" \u2014 "),sI=a("a"),vgo=o("BertGenerationEncoder"),Fgo=o(" (Bert Generation model)"),Tgo=l(),tp=a("li"),Sne=a("strong"),Mgo=o("big_bird"),Ego=o(" \u2014 "),lI=a("a"),Cgo=o("BigBirdModel"),wgo=o(" (BigBird model)"),Ago=l(),ap=a("li"),Rne=a("strong"),ygo=o("bigbird_pegasus"),Lgo=o(" \u2014 "),iI=a("a"),xgo=o("BigBirdPegasusModel"),$go=o(" (BigBirdPegasus model)"),kgo=l(),np=a("li"),Pne=a("strong"),Sgo=o("blenderbot"),Rgo=o(" \u2014 "),dI=a("a"),Pgo=o("BlenderbotModel"),Bgo=o(" (Blenderbot model)"),Igo=l(),sp=a("li"),Bne=a("strong"),qgo=o("blenderbot-small"),Ngo=o(" \u2014 "),cI=a("a"),jgo=o("BlenderbotSmallModel"),Dgo=o(" (BlenderbotSmall model)"),Ggo=l(),lp=a("li"),Ine=a("strong"),Ogo=o("camembert"),Vgo=o(" \u2014 "),fI=a("a"),Xgo=o("CamembertModel"),zgo=o(" (CamemBERT model)"),Wgo=l(),ip=a("li"),qne=a("strong"),Qgo=o("canine"),Hgo=o(" \u2014 "),mI=a("a"),Ugo=o("CanineModel"),Jgo=o(" (Canine model)"),Ygo=l(),dp=a("li"),Nne=a("strong"),Kgo=o("clip"),Zgo=o(" \u2014 "),gI=a("a"),eho=o("CLIPModel"),oho=o(" (CLIP model)"),rho=l(),cp=a("li"),jne=a("strong"),tho=o("convbert"),aho=o(" \u2014 "),hI=a("a"),nho=o("ConvBertModel"),sho=o(" (ConvBERT model)"),lho=l(),fp=a("li"),Dne=a("strong"),iho=o("convnext"),dho=o(" \u2014 "),pI=a("a"),cho=o("ConvNextModel"),fho=o(" (ConvNext model)"),mho=l(),mp=a("li"),Gne=a("strong"),gho=o("ctrl"),hho=o(" \u2014 "),uI=a("a"),pho=o("CTRLModel"),uho=o(" (CTRL model)"),_ho=l(),gp=a("li"),One=a("strong"),bho=o("data2vec-audio"),vho=o(" \u2014 "),_I=a("a"),Fho=o("Data2VecAudioModel"),Tho=o(" (Data2VecAudio model)"),Mho=l(),hp=a("li"),Vne=a("strong"),Eho=o("data2vec-text"),Cho=o(" \u2014 "),bI=a("a"),who=o("Data2VecTextModel"),Aho=o(" (Data2VecText model)"),yho=l(),pp=a("li"),Xne=a("strong"),Lho=o("data2vec-vision"),xho=o(" \u2014 "),vI=a("a"),$ho=o("Data2VecVisionModel"),kho=o(" (Data2VecVision model)"),Sho=l(),up=a("li"),zne=a("strong"),Rho=o("deberta"),Pho=o(" \u2014 "),FI=a("a"),Bho=o("DebertaModel"),Iho=o(" (DeBERTa model)"),qho=l(),_p=a("li"),Wne=a("strong"),Nho=o("deberta-v2"),jho=o(" \u2014 "),TI=a("a"),Dho=o("DebertaV2Model"),Gho=o(" (DeBERTa-v2 model)"),Oho=l(),bp=a("li"),Qne=a("strong"),Vho=o("decision_transformer"),Xho=o(" \u2014 "),MI=a("a"),zho=o("DecisionTransformerModel"),Who=o(" (Decision Transformer model)"),Qho=l(),vp=a("li"),Hne=a("strong"),Hho=o("deit"),Uho=o(" \u2014 "),EI=a("a"),Jho=o("DeiTModel"),Yho=o(" (DeiT model)"),Kho=l(),Fp=a("li"),Une=a("strong"),Zho=o("detr"),epo=o(" \u2014 "),CI=a("a"),opo=o("DetrModel"),rpo=o(" (DETR model)"),tpo=l(),Tp=a("li"),Jne=a("strong"),apo=o("distilbert"),npo=o(" \u2014 "),wI=a("a"),spo=o("DistilBertModel"),lpo=o(" (DistilBERT model)"),ipo=l(),Mp=a("li"),Yne=a("strong"),dpo=o("dpr"),cpo=o(" \u2014 "),AI=a("a"),fpo=o("DPRQuestionEncoder"),mpo=o(" (DPR model)"),gpo=l(),Ep=a("li"),Kne=a("strong"),hpo=o("dpt"),ppo=o(" \u2014 "),yI=a("a"),upo=o("DPTModel"),_po=o(" (DPT model)"),bpo=l(),Cp=a("li"),Zne=a("strong"),vpo=o("electra"),Fpo=o(" \u2014 "),LI=a("a"),Tpo=o("ElectraModel"),Mpo=o(" (ELECTRA model)"),Epo=l(),wp=a("li"),ese=a("strong"),Cpo=o("flaubert"),wpo=o(" \u2014 "),xI=a("a"),Apo=o("FlaubertModel"),ypo=o(" (FlauBERT model)"),Lpo=l(),Ap=a("li"),ose=a("strong"),xpo=o("flava"),$po=o(" \u2014 "),$I=a("a"),kpo=o("FlavaModel"),Spo=o(" (Flava model)"),Rpo=l(),yp=a("li"),rse=a("strong"),Ppo=o("fnet"),Bpo=o(" \u2014 "),kI=a("a"),Ipo=o("FNetModel"),qpo=o(" (FNet model)"),Npo=l(),Lp=a("li"),tse=a("strong"),jpo=o("fsmt"),Dpo=o(" \u2014 "),SI=a("a"),Gpo=o("FSMTModel"),Opo=o(" (FairSeq Machine-Translation model)"),Vpo=l(),Ps=a("li"),ase=a("strong"),Xpo=o("funnel"),zpo=o(" \u2014 "),RI=a("a"),Wpo=o("FunnelModel"),Qpo=o(" or "),PI=a("a"),Hpo=o("FunnelBaseModel"),Upo=o(" (Funnel Transformer model)"),Jpo=l(),xp=a("li"),nse=a("strong"),Ypo=o("glpn"),Kpo=o(" \u2014 "),BI=a("a"),Zpo=o("GLPNModel"),euo=o(" (GLPN model)"),ouo=l(),$p=a("li"),sse=a("strong"),ruo=o("gpt2"),tuo=o(" \u2014 "),II=a("a"),auo=o("GPT2Model"),nuo=o(" (OpenAI GPT-2 model)"),suo=l(),kp=a("li"),lse=a("strong"),luo=o("gpt_neo"),iuo=o(" \u2014 "),qI=a("a"),duo=o("GPTNeoModel"),cuo=o(" (GPT Neo model)"),fuo=l(),Sp=a("li"),ise=a("strong"),muo=o("gptj"),guo=o(" \u2014 "),NI=a("a"),huo=o("GPTJModel"),puo=o(" (GPT-J model)"),uuo=l(),Rp=a("li"),dse=a("strong"),_uo=o("hubert"),buo=o(" \u2014 "),jI=a("a"),vuo=o("HubertModel"),Fuo=o(" (Hubert model)"),Tuo=l(),Pp=a("li"),cse=a("strong"),Muo=o("ibert"),Euo=o(" \u2014 "),DI=a("a"),Cuo=o("IBertModel"),wuo=o(" (I-BERT model)"),Auo=l(),Bp=a("li"),fse=a("strong"),yuo=o("imagegpt"),Luo=o(" \u2014 "),GI=a("a"),xuo=o("ImageGPTModel"),$uo=o(" (ImageGPT model)"),kuo=l(),Ip=a("li"),mse=a("strong"),Suo=o("layoutlm"),Ruo=o(" \u2014 "),OI=a("a"),Puo=o("LayoutLMModel"),Buo=o(" (LayoutLM model)"),Iuo=l(),qp=a("li"),gse=a("strong"),quo=o("layoutlmv2"),Nuo=o(" \u2014 "),VI=a("a"),juo=o("LayoutLMv2Model"),Duo=o(" (LayoutLMv2 model)"),Guo=l(),Np=a("li"),hse=a("strong"),Ouo=o("led"),Vuo=o(" \u2014 "),XI=a("a"),Xuo=o("LEDModel"),zuo=o(" (LED model)"),Wuo=l(),jp=a("li"),pse=a("strong"),Quo=o("longformer"),Huo=o(" \u2014 "),zI=a("a"),Uuo=o("LongformerModel"),Juo=o(" (Longformer model)"),Yuo=l(),Dp=a("li"),use=a("strong"),Kuo=o("luke"),Zuo=o(" \u2014 "),WI=a("a"),e_o=o("LukeModel"),o_o=o(" (LUKE model)"),r_o=l(),Gp=a("li"),_se=a("strong"),t_o=o("lxmert"),a_o=o(" \u2014 "),QI=a("a"),n_o=o("LxmertModel"),s_o=o(" (LXMERT model)"),l_o=l(),Op=a("li"),bse=a("strong"),i_o=o("m2m_100"),d_o=o(" \u2014 "),HI=a("a"),c_o=o("M2M100Model"),f_o=o(" (M2M100 model)"),m_o=l(),Vp=a("li"),vse=a("strong"),g_o=o("marian"),h_o=o(" \u2014 "),UI=a("a"),p_o=o("MarianModel"),u_o=o(" (Marian model)"),__o=l(),Xp=a("li"),Fse=a("strong"),b_o=o("maskformer"),v_o=o(" \u2014 "),JI=a("a"),F_o=o("MaskFormerModel"),T_o=o(" (MaskFormer model)"),M_o=l(),zp=a("li"),Tse=a("strong"),E_o=o("mbart"),C_o=o(" \u2014 "),YI=a("a"),w_o=o("MBartModel"),A_o=o(" (mBART model)"),y_o=l(),Wp=a("li"),Mse=a("strong"),L_o=o("megatron-bert"),x_o=o(" \u2014 "),KI=a("a"),$_o=o("MegatronBertModel"),k_o=o(" (MegatronBert model)"),S_o=l(),Qp=a("li"),Ese=a("strong"),R_o=o("mobilebert"),P_o=o(" \u2014 "),ZI=a("a"),B_o=o("MobileBertModel"),I_o=o(" (MobileBERT model)"),q_o=l(),Hp=a("li"),Cse=a("strong"),N_o=o("mpnet"),j_o=o(" \u2014 "),eq=a("a"),D_o=o("MPNetModel"),G_o=o(" (MPNet model)"),O_o=l(),Up=a("li"),wse=a("strong"),V_o=o("mt5"),X_o=o(" \u2014 "),oq=a("a"),z_o=o("MT5Model"),W_o=o(" (mT5 model)"),Q_o=l(),Jp=a("li"),Ase=a("strong"),H_o=o("nystromformer"),U_o=o(" \u2014 "),rq=a("a"),J_o=o("NystromformerModel"),Y_o=o(" (Nystromformer model)"),K_o=l(),Yp=a("li"),yse=a("strong"),Z_o=o("openai-gpt"),e2o=o(" \u2014 "),tq=a("a"),o2o=o("OpenAIGPTModel"),r2o=o(" (OpenAI GPT model)"),t2o=l(),Kp=a("li"),Lse=a("strong"),a2o=o("opt"),n2o=o(" \u2014 "),aq=a("a"),s2o=o("OPTModel"),l2o=o(" (OPT model)"),i2o=l(),Zp=a("li"),xse=a("strong"),d2o=o("pegasus"),c2o=o(" \u2014 "),nq=a("a"),f2o=o("PegasusModel"),m2o=o(" (Pegasus model)"),g2o=l(),eu=a("li"),$se=a("strong"),h2o=o("perceiver"),p2o=o(" \u2014 "),sq=a("a"),u2o=o("PerceiverModel"),_2o=o(" (Perceiver model)"),b2o=l(),ou=a("li"),kse=a("strong"),v2o=o("plbart"),F2o=o(" \u2014 "),lq=a("a"),T2o=o("PLBartModel"),M2o=o(" (PLBart model)"),E2o=l(),ru=a("li"),Sse=a("strong"),C2o=o("poolformer"),w2o=o(" \u2014 "),iq=a("a"),A2o=o("PoolFormerModel"),y2o=o(" (PoolFormer model)"),L2o=l(),tu=a("li"),Rse=a("strong"),x2o=o("prophetnet"),$2o=o(" \u2014 "),dq=a("a"),k2o=o("ProphetNetModel"),S2o=o(" (ProphetNet model)"),R2o=l(),au=a("li"),Pse=a("strong"),P2o=o("qdqbert"),B2o=o(" \u2014 "),cq=a("a"),I2o=o("QDQBertModel"),q2o=o(" (QDQBert model)"),N2o=l(),nu=a("li"),Bse=a("strong"),j2o=o("reformer"),D2o=o(" \u2014 "),fq=a("a"),G2o=o("ReformerModel"),O2o=o(" (Reformer model)"),V2o=l(),su=a("li"),Ise=a("strong"),X2o=o("regnet"),z2o=o(" \u2014 "),mq=a("a"),W2o=o("RegNetModel"),Q2o=o(" (RegNet model)"),H2o=l(),lu=a("li"),qse=a("strong"),U2o=o("rembert"),J2o=o(" \u2014 "),gq=a("a"),Y2o=o("RemBertModel"),K2o=o(" (RemBERT model)"),Z2o=l(),iu=a("li"),Nse=a("strong"),e1o=o("resnet"),o1o=o(" \u2014 "),hq=a("a"),r1o=o("ResNetModel"),t1o=o(" (ResNet model)"),a1o=l(),du=a("li"),jse=a("strong"),n1o=o("retribert"),s1o=o(" \u2014 "),pq=a("a"),l1o=o("RetriBertModel"),i1o=o(" (RetriBERT model)"),d1o=l(),cu=a("li"),Dse=a("strong"),c1o=o("roberta"),f1o=o(" \u2014 "),uq=a("a"),m1o=o("RobertaModel"),g1o=o(" (RoBERTa model)"),h1o=l(),fu=a("li"),Gse=a("strong"),p1o=o("roformer"),u1o=o(" \u2014 "),_q=a("a"),_1o=o("RoFormerModel"),b1o=o(" (RoFormer model)"),v1o=l(),mu=a("li"),Ose=a("strong"),F1o=o("segformer"),T1o=o(" \u2014 "),bq=a("a"),M1o=o("SegformerModel"),E1o=o(" (SegFormer model)"),C1o=l(),gu=a("li"),Vse=a("strong"),w1o=o("sew"),A1o=o(" \u2014 "),vq=a("a"),y1o=o("SEWModel"),L1o=o(" (SEW model)"),x1o=l(),hu=a("li"),Xse=a("strong"),$1o=o("sew-d"),k1o=o(" \u2014 "),Fq=a("a"),S1o=o("SEWDModel"),R1o=o(" (SEW-D model)"),P1o=l(),pu=a("li"),zse=a("strong"),B1o=o("speech_to_text"),I1o=o(" \u2014 "),Tq=a("a"),q1o=o("Speech2TextModel"),N1o=o(" (Speech2Text model)"),j1o=l(),uu=a("li"),Wse=a("strong"),D1o=o("splinter"),G1o=o(" \u2014 "),Mq=a("a"),O1o=o("SplinterModel"),V1o=o(" (Splinter model)"),X1o=l(),_u=a("li"),Qse=a("strong"),z1o=o("squeezebert"),W1o=o(" \u2014 "),Eq=a("a"),Q1o=o("SqueezeBertModel"),H1o=o(" (SqueezeBERT model)"),U1o=l(),bu=a("li"),Hse=a("strong"),J1o=o("swin"),Y1o=o(" \u2014 "),Cq=a("a"),K1o=o("SwinModel"),Z1o=o(" (Swin model)"),ebo=l(),vu=a("li"),Use=a("strong"),obo=o("t5"),rbo=o(" \u2014 "),wq=a("a"),tbo=o("T5Model"),abo=o(" (T5 model)"),nbo=l(),Fu=a("li"),Jse=a("strong"),sbo=o("tapas"),lbo=o(" \u2014 "),Aq=a("a"),ibo=o("TapasModel"),dbo=o(" (TAPAS model)"),cbo=l(),Tu=a("li"),Yse=a("strong"),fbo=o("transfo-xl"),mbo=o(" \u2014 "),yq=a("a"),gbo=o("TransfoXLModel"),hbo=o(" (Transformer-XL model)"),pbo=l(),Mu=a("li"),Kse=a("strong"),ubo=o("unispeech"),_bo=o(" \u2014 "),Lq=a("a"),bbo=o("UniSpeechModel"),vbo=o(" (UniSpeech model)"),Fbo=l(),Eu=a("li"),Zse=a("strong"),Tbo=o("unispeech-sat"),Mbo=o(" \u2014 "),xq=a("a"),Ebo=o("UniSpeechSatModel"),Cbo=o(" (UniSpeechSat model)"),wbo=l(),Cu=a("li"),ele=a("strong"),Abo=o("van"),ybo=o(" \u2014 "),$q=a("a"),Lbo=o("VanModel"),xbo=o(" (VAN model)"),$bo=l(),wu=a("li"),ole=a("strong"),kbo=o("vilt"),Sbo=o(" \u2014 "),kq=a("a"),Rbo=o("ViltModel"),Pbo=o(" (ViLT model)"),Bbo=l(),Au=a("li"),rle=a("strong"),Ibo=o("vision-text-dual-encoder"),qbo=o(" \u2014 "),Sq=a("a"),Nbo=o("VisionTextDualEncoderModel"),jbo=o(" (VisionTextDualEncoder model)"),Dbo=l(),yu=a("li"),tle=a("strong"),Gbo=o("visual_bert"),Obo=o(" \u2014 "),Rq=a("a"),Vbo=o("VisualBertModel"),Xbo=o(" (VisualBert model)"),zbo=l(),Lu=a("li"),ale=a("strong"),Wbo=o("vit"),Qbo=o(" \u2014 "),Pq=a("a"),Hbo=o("ViTModel"),Ubo=o(" (ViT model)"),Jbo=l(),xu=a("li"),nle=a("strong"),Ybo=o("vit_mae"),Kbo=o(" \u2014 "),Bq=a("a"),Zbo=o("ViTMAEModel"),e4o=o(" (ViTMAE model)"),o4o=l(),$u=a("li"),sle=a("strong"),r4o=o("wav2vec2"),t4o=o(" \u2014 "),Iq=a("a"),a4o=o("Wav2Vec2Model"),n4o=o(" (Wav2Vec2 model)"),s4o=l(),ku=a("li"),lle=a("strong"),l4o=o("wav2vec2-conformer"),i4o=o(" \u2014 "),qq=a("a"),d4o=o("Wav2Vec2ConformerModel"),c4o=o(" (Wav2Vec2-Conformer model)"),f4o=l(),Su=a("li"),ile=a("strong"),m4o=o("wavlm"),g4o=o(" \u2014 "),Nq=a("a"),h4o=o("WavLMModel"),p4o=o(" (WavLM model)"),u4o=l(),Ru=a("li"),dle=a("strong"),_4o=o("xglm"),b4o=o(" \u2014 "),jq=a("a"),v4o=o("XGLMModel"),F4o=o(" (XGLM model)"),T4o=l(),Pu=a("li"),cle=a("strong"),M4o=o("xlm"),E4o=o(" \u2014 "),Dq=a("a"),C4o=o("XLMModel"),w4o=o(" (XLM model)"),A4o=l(),Bu=a("li"),fle=a("strong"),y4o=o("xlm-prophetnet"),L4o=o(" \u2014 "),Gq=a("a"),x4o=o("XLMProphetNetModel"),$4o=o(" (XLMProphetNet model)"),k4o=l(),Iu=a("li"),mle=a("strong"),S4o=o("xlm-roberta"),R4o=o(" \u2014 "),Oq=a("a"),P4o=o("XLMRobertaModel"),B4o=o(" (XLM-RoBERTa model)"),I4o=l(),qu=a("li"),gle=a("strong"),q4o=o("xlm-roberta-xl"),N4o=o(" \u2014 "),Vq=a("a"),j4o=o("XLMRobertaXLModel"),D4o=o(" (XLM-RoBERTa-XL model)"),G4o=l(),Nu=a("li"),hle=a("strong"),O4o=o("xlnet"),V4o=o(" \u2014 "),Xq=a("a"),X4o=o("XLNetModel"),z4o=o(" (XLNet model)"),W4o=l(),ju=a("li"),ple=a("strong"),Q4o=o("yolos"),H4o=o(" \u2014 "),zq=a("a"),U4o=o("YolosModel"),J4o=o(" (YOLOS model)"),Y4o=l(),Du=a("li"),ule=a("strong"),K4o=o("yoso"),Z4o=o(" \u2014 "),Wq=a("a"),e5o=o("YosoModel"),o5o=o(" (YOSO model)"),r5o=l(),Gu=a("p"),t5o=o("The model is set in evaluation mode by default using "),_le=a("code"),a5o=o("model.eval()"),n5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=a("code"),s5o=o("model.train()"),l5o=l(),F(Ou.$$.fragment),GIe=l(),Li=a("h2"),Vu=a("a"),vle=a("span"),F(N0.$$.fragment),i5o=l(),Fle=a("span"),d5o=o("AutoModelForPreTraining"),OIe=l(),xo=a("div"),F(j0.$$.fragment),c5o=l(),xi=a("p"),f5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qq=a("a"),m5o=o("from_pretrained()"),g5o=o(" class method or the "),Hq=a("a"),h5o=o("from_config()"),p5o=o(` class
method.`),u5o=l(),D0=a("p"),_5o=o("This class cannot be instantiated directly using "),Tle=a("code"),b5o=o("__init__()"),v5o=o(" (throws an error)."),F5o=l(),at=a("div"),F(G0.$$.fragment),T5o=l(),Mle=a("p"),M5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E5o=l(),$i=a("p"),C5o=o(`Note:
Loading a model from its configuration file does `),Ele=a("strong"),w5o=o("not"),A5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=a("a"),y5o=o("from_pretrained()"),L5o=o(" to load the model weights."),x5o=l(),F(Xu.$$.fragment),$5o=l(),Ye=a("div"),F(O0.$$.fragment),k5o=l(),Cle=a("p"),S5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R5o=l(),xa=a("p"),P5o=o("The model class to instantiate is selected based on the "),wle=a("code"),B5o=o("model_type"),I5o=o(` property of the config object (either
passed as an argument or loaded from `),Ale=a("code"),q5o=o("pretrained_model_name_or_path"),N5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),j5o=o("pretrained_model_name_or_path"),D5o=o(":"),G5o=l(),G=a("ul"),zu=a("li"),Lle=a("strong"),O5o=o("albert"),V5o=o(" \u2014 "),Jq=a("a"),X5o=o("AlbertForPreTraining"),z5o=o(" (ALBERT model)"),W5o=l(),Wu=a("li"),xle=a("strong"),Q5o=o("bart"),H5o=o(" \u2014 "),Yq=a("a"),U5o=o("BartForConditionalGeneration"),J5o=o(" (BART model)"),Y5o=l(),Qu=a("li"),$le=a("strong"),K5o=o("bert"),Z5o=o(" \u2014 "),Kq=a("a"),evo=o("BertForPreTraining"),ovo=o(" (BERT model)"),rvo=l(),Hu=a("li"),kle=a("strong"),tvo=o("big_bird"),avo=o(" \u2014 "),Zq=a("a"),nvo=o("BigBirdForPreTraining"),svo=o(" (BigBird model)"),lvo=l(),Uu=a("li"),Sle=a("strong"),ivo=o("camembert"),dvo=o(" \u2014 "),eN=a("a"),cvo=o("CamembertForMaskedLM"),fvo=o(" (CamemBERT model)"),mvo=l(),Ju=a("li"),Rle=a("strong"),gvo=o("ctrl"),hvo=o(" \u2014 "),oN=a("a"),pvo=o("CTRLLMHeadModel"),uvo=o(" (CTRL model)"),_vo=l(),Yu=a("li"),Ple=a("strong"),bvo=o("data2vec-text"),vvo=o(" \u2014 "),rN=a("a"),Fvo=o("Data2VecTextForMaskedLM"),Tvo=o(" (Data2VecText model)"),Mvo=l(),Ku=a("li"),Ble=a("strong"),Evo=o("deberta"),Cvo=o(" \u2014 "),tN=a("a"),wvo=o("DebertaForMaskedLM"),Avo=o(" (DeBERTa model)"),yvo=l(),Zu=a("li"),Ile=a("strong"),Lvo=o("deberta-v2"),xvo=o(" \u2014 "),aN=a("a"),$vo=o("DebertaV2ForMaskedLM"),kvo=o(" (DeBERTa-v2 model)"),Svo=l(),e_=a("li"),qle=a("strong"),Rvo=o("distilbert"),Pvo=o(" \u2014 "),nN=a("a"),Bvo=o("DistilBertForMaskedLM"),Ivo=o(" (DistilBERT model)"),qvo=l(),o_=a("li"),Nle=a("strong"),Nvo=o("electra"),jvo=o(" \u2014 "),sN=a("a"),Dvo=o("ElectraForPreTraining"),Gvo=o(" (ELECTRA model)"),Ovo=l(),r_=a("li"),jle=a("strong"),Vvo=o("flaubert"),Xvo=o(" \u2014 "),lN=a("a"),zvo=o("FlaubertWithLMHeadModel"),Wvo=o(" (FlauBERT model)"),Qvo=l(),t_=a("li"),Dle=a("strong"),Hvo=o("flava"),Uvo=o(" \u2014 "),iN=a("a"),Jvo=o("FlavaForPreTraining"),Yvo=o(" (Flava model)"),Kvo=l(),a_=a("li"),Gle=a("strong"),Zvo=o("fnet"),eFo=o(" \u2014 "),dN=a("a"),oFo=o("FNetForPreTraining"),rFo=o(" (FNet model)"),tFo=l(),n_=a("li"),Ole=a("strong"),aFo=o("fsmt"),nFo=o(" \u2014 "),cN=a("a"),sFo=o("FSMTForConditionalGeneration"),lFo=o(" (FairSeq Machine-Translation model)"),iFo=l(),s_=a("li"),Vle=a("strong"),dFo=o("funnel"),cFo=o(" \u2014 "),fN=a("a"),fFo=o("FunnelForPreTraining"),mFo=o(" (Funnel Transformer model)"),gFo=l(),l_=a("li"),Xle=a("strong"),hFo=o("gpt2"),pFo=o(" \u2014 "),mN=a("a"),uFo=o("GPT2LMHeadModel"),_Fo=o(" (OpenAI GPT-2 model)"),bFo=l(),i_=a("li"),zle=a("strong"),vFo=o("ibert"),FFo=o(" \u2014 "),gN=a("a"),TFo=o("IBertForMaskedLM"),MFo=o(" (I-BERT model)"),EFo=l(),d_=a("li"),Wle=a("strong"),CFo=o("layoutlm"),wFo=o(" \u2014 "),hN=a("a"),AFo=o("LayoutLMForMaskedLM"),yFo=o(" (LayoutLM model)"),LFo=l(),c_=a("li"),Qle=a("strong"),xFo=o("longformer"),$Fo=o(" \u2014 "),pN=a("a"),kFo=o("LongformerForMaskedLM"),SFo=o(" (Longformer model)"),RFo=l(),f_=a("li"),Hle=a("strong"),PFo=o("lxmert"),BFo=o(" \u2014 "),uN=a("a"),IFo=o("LxmertForPreTraining"),qFo=o(" (LXMERT model)"),NFo=l(),m_=a("li"),Ule=a("strong"),jFo=o("megatron-bert"),DFo=o(" \u2014 "),_N=a("a"),GFo=o("MegatronBertForPreTraining"),OFo=o(" (MegatronBert model)"),VFo=l(),g_=a("li"),Jle=a("strong"),XFo=o("mobilebert"),zFo=o(" \u2014 "),bN=a("a"),WFo=o("MobileBertForPreTraining"),QFo=o(" (MobileBERT model)"),HFo=l(),h_=a("li"),Yle=a("strong"),UFo=o("mpnet"),JFo=o(" \u2014 "),vN=a("a"),YFo=o("MPNetForMaskedLM"),KFo=o(" (MPNet model)"),ZFo=l(),p_=a("li"),Kle=a("strong"),eTo=o("openai-gpt"),oTo=o(" \u2014 "),FN=a("a"),rTo=o("OpenAIGPTLMHeadModel"),tTo=o(" (OpenAI GPT model)"),aTo=l(),u_=a("li"),Zle=a("strong"),nTo=o("retribert"),sTo=o(" \u2014 "),TN=a("a"),lTo=o("RetriBertModel"),iTo=o(" (RetriBERT model)"),dTo=l(),__=a("li"),eie=a("strong"),cTo=o("roberta"),fTo=o(" \u2014 "),MN=a("a"),mTo=o("RobertaForMaskedLM"),gTo=o(" (RoBERTa model)"),hTo=l(),b_=a("li"),oie=a("strong"),pTo=o("squeezebert"),uTo=o(" \u2014 "),EN=a("a"),_To=o("SqueezeBertForMaskedLM"),bTo=o(" (SqueezeBERT model)"),vTo=l(),v_=a("li"),rie=a("strong"),FTo=o("t5"),TTo=o(" \u2014 "),CN=a("a"),MTo=o("T5ForConditionalGeneration"),ETo=o(" (T5 model)"),CTo=l(),F_=a("li"),tie=a("strong"),wTo=o("tapas"),ATo=o(" \u2014 "),wN=a("a"),yTo=o("TapasForMaskedLM"),LTo=o(" (TAPAS model)"),xTo=l(),T_=a("li"),aie=a("strong"),$To=o("transfo-xl"),kTo=o(" \u2014 "),AN=a("a"),STo=o("TransfoXLLMHeadModel"),RTo=o(" (Transformer-XL model)"),PTo=l(),M_=a("li"),nie=a("strong"),BTo=o("unispeech"),ITo=o(" \u2014 "),yN=a("a"),qTo=o("UniSpeechForPreTraining"),NTo=o(" (UniSpeech model)"),jTo=l(),E_=a("li"),sie=a("strong"),DTo=o("unispeech-sat"),GTo=o(" \u2014 "),LN=a("a"),OTo=o("UniSpeechSatForPreTraining"),VTo=o(" (UniSpeechSat model)"),XTo=l(),C_=a("li"),lie=a("strong"),zTo=o("visual_bert"),WTo=o(" \u2014 "),xN=a("a"),QTo=o("VisualBertForPreTraining"),HTo=o(" (VisualBert model)"),UTo=l(),w_=a("li"),iie=a("strong"),JTo=o("vit_mae"),YTo=o(" \u2014 "),$N=a("a"),KTo=o("ViTMAEForPreTraining"),ZTo=o(" (ViTMAE model)"),e7o=l(),A_=a("li"),die=a("strong"),o7o=o("wav2vec2"),r7o=o(" \u2014 "),kN=a("a"),t7o=o("Wav2Vec2ForPreTraining"),a7o=o(" (Wav2Vec2 model)"),n7o=l(),y_=a("li"),cie=a("strong"),s7o=o("wav2vec2-conformer"),l7o=o(" \u2014 "),SN=a("a"),i7o=o("Wav2Vec2ConformerForPreTraining"),d7o=o(" (Wav2Vec2-Conformer model)"),c7o=l(),L_=a("li"),fie=a("strong"),f7o=o("xlm"),m7o=o(" \u2014 "),RN=a("a"),g7o=o("XLMWithLMHeadModel"),h7o=o(" (XLM model)"),p7o=l(),x_=a("li"),mie=a("strong"),u7o=o("xlm-roberta"),_7o=o(" \u2014 "),PN=a("a"),b7o=o("XLMRobertaForMaskedLM"),v7o=o(" (XLM-RoBERTa model)"),F7o=l(),$_=a("li"),gie=a("strong"),T7o=o("xlm-roberta-xl"),M7o=o(" \u2014 "),BN=a("a"),E7o=o("XLMRobertaXLForMaskedLM"),C7o=o(" (XLM-RoBERTa-XL model)"),w7o=l(),k_=a("li"),hie=a("strong"),A7o=o("xlnet"),y7o=o(" \u2014 "),IN=a("a"),L7o=o("XLNetLMHeadModel"),x7o=o(" (XLNet model)"),$7o=l(),S_=a("p"),k7o=o("The model is set in evaluation mode by default using "),pie=a("code"),S7o=o("model.eval()"),R7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uie=a("code"),P7o=o("model.train()"),B7o=l(),F(R_.$$.fragment),VIe=l(),ki=a("h2"),P_=a("a"),_ie=a("span"),F(V0.$$.fragment),I7o=l(),bie=a("span"),q7o=o("AutoModelForCausalLM"),XIe=l(),$o=a("div"),F(X0.$$.fragment),N7o=l(),Si=a("p"),j7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=a("a"),D7o=o("from_pretrained()"),G7o=o(" class method or the "),NN=a("a"),O7o=o("from_config()"),V7o=o(` class
method.`),X7o=l(),z0=a("p"),z7o=o("This class cannot be instantiated directly using "),vie=a("code"),W7o=o("__init__()"),Q7o=o(" (throws an error)."),H7o=l(),nt=a("div"),F(W0.$$.fragment),U7o=l(),Fie=a("p"),J7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y7o=l(),Ri=a("p"),K7o=o(`Note:
Loading a model from its configuration file does `),Tie=a("strong"),Z7o=o("not"),eMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=a("a"),oMo=o("from_pretrained()"),rMo=o(" to load the model weights."),tMo=l(),F(B_.$$.fragment),aMo=l(),Ke=a("div"),F(Q0.$$.fragment),nMo=l(),Mie=a("p"),sMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lMo=l(),$a=a("p"),iMo=o("The model class to instantiate is selected based on the "),Eie=a("code"),dMo=o("model_type"),cMo=o(` property of the config object (either
passed as an argument or loaded from `),Cie=a("code"),fMo=o("pretrained_model_name_or_path"),mMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=a("code"),gMo=o("pretrained_model_name_or_path"),hMo=o(":"),pMo=l(),z=a("ul"),I_=a("li"),Aie=a("strong"),uMo=o("bart"),_Mo=o(" \u2014 "),DN=a("a"),bMo=o("BartForCausalLM"),vMo=o(" (BART model)"),FMo=l(),q_=a("li"),yie=a("strong"),TMo=o("bert"),MMo=o(" \u2014 "),GN=a("a"),EMo=o("BertLMHeadModel"),CMo=o(" (BERT model)"),wMo=l(),N_=a("li"),Lie=a("strong"),AMo=o("bert-generation"),yMo=o(" \u2014 "),ON=a("a"),LMo=o("BertGenerationDecoder"),xMo=o(" (Bert Generation model)"),$Mo=l(),j_=a("li"),xie=a("strong"),kMo=o("big_bird"),SMo=o(" \u2014 "),VN=a("a"),RMo=o("BigBirdForCausalLM"),PMo=o(" (BigBird model)"),BMo=l(),D_=a("li"),$ie=a("strong"),IMo=o("bigbird_pegasus"),qMo=o(" \u2014 "),XN=a("a"),NMo=o("BigBirdPegasusForCausalLM"),jMo=o(" (BigBirdPegasus model)"),DMo=l(),G_=a("li"),kie=a("strong"),GMo=o("blenderbot"),OMo=o(" \u2014 "),zN=a("a"),VMo=o("BlenderbotForCausalLM"),XMo=o(" (Blenderbot model)"),zMo=l(),O_=a("li"),Sie=a("strong"),WMo=o("blenderbot-small"),QMo=o(" \u2014 "),WN=a("a"),HMo=o("BlenderbotSmallForCausalLM"),UMo=o(" (BlenderbotSmall model)"),JMo=l(),V_=a("li"),Rie=a("strong"),YMo=o("camembert"),KMo=o(" \u2014 "),QN=a("a"),ZMo=o("CamembertForCausalLM"),eEo=o(" (CamemBERT model)"),oEo=l(),X_=a("li"),Pie=a("strong"),rEo=o("ctrl"),tEo=o(" \u2014 "),HN=a("a"),aEo=o("CTRLLMHeadModel"),nEo=o(" (CTRL model)"),sEo=l(),z_=a("li"),Bie=a("strong"),lEo=o("data2vec-text"),iEo=o(" \u2014 "),UN=a("a"),dEo=o("Data2VecTextForCausalLM"),cEo=o(" (Data2VecText model)"),fEo=l(),W_=a("li"),Iie=a("strong"),mEo=o("electra"),gEo=o(" \u2014 "),JN=a("a"),hEo=o("ElectraForCausalLM"),pEo=o(" (ELECTRA model)"),uEo=l(),Q_=a("li"),qie=a("strong"),_Eo=o("gpt2"),bEo=o(" \u2014 "),YN=a("a"),vEo=o("GPT2LMHeadModel"),FEo=o(" (OpenAI GPT-2 model)"),TEo=l(),H_=a("li"),Nie=a("strong"),MEo=o("gpt_neo"),EEo=o(" \u2014 "),KN=a("a"),CEo=o("GPTNeoForCausalLM"),wEo=o(" (GPT Neo model)"),AEo=l(),U_=a("li"),jie=a("strong"),yEo=o("gptj"),LEo=o(" \u2014 "),ZN=a("a"),xEo=o("GPTJForCausalLM"),$Eo=o(" (GPT-J model)"),kEo=l(),J_=a("li"),Die=a("strong"),SEo=o("marian"),REo=o(" \u2014 "),ej=a("a"),PEo=o("MarianForCausalLM"),BEo=o(" (Marian model)"),IEo=l(),Y_=a("li"),Gie=a("strong"),qEo=o("mbart"),NEo=o(" \u2014 "),oj=a("a"),jEo=o("MBartForCausalLM"),DEo=o(" (mBART model)"),GEo=l(),K_=a("li"),Oie=a("strong"),OEo=o("megatron-bert"),VEo=o(" \u2014 "),rj=a("a"),XEo=o("MegatronBertForCausalLM"),zEo=o(" (MegatronBert model)"),WEo=l(),Z_=a("li"),Vie=a("strong"),QEo=o("openai-gpt"),HEo=o(" \u2014 "),tj=a("a"),UEo=o("OpenAIGPTLMHeadModel"),JEo=o(" (OpenAI GPT model)"),YEo=l(),e2=a("li"),Xie=a("strong"),KEo=o("opt"),ZEo=o(" \u2014 "),aj=a("a"),eCo=o("OPTForCausalLM"),oCo=o(" (OPT model)"),rCo=l(),o2=a("li"),zie=a("strong"),tCo=o("pegasus"),aCo=o(" \u2014 "),nj=a("a"),nCo=o("PegasusForCausalLM"),sCo=o(" (Pegasus model)"),lCo=l(),r2=a("li"),Wie=a("strong"),iCo=o("plbart"),dCo=o(" \u2014 "),sj=a("a"),cCo=o("PLBartForCausalLM"),fCo=o(" (PLBart model)"),mCo=l(),t2=a("li"),Qie=a("strong"),gCo=o("prophetnet"),hCo=o(" \u2014 "),lj=a("a"),pCo=o("ProphetNetForCausalLM"),uCo=o(" (ProphetNet model)"),_Co=l(),a2=a("li"),Hie=a("strong"),bCo=o("qdqbert"),vCo=o(" \u2014 "),ij=a("a"),FCo=o("QDQBertLMHeadModel"),TCo=o(" (QDQBert model)"),MCo=l(),n2=a("li"),Uie=a("strong"),ECo=o("reformer"),CCo=o(" \u2014 "),dj=a("a"),wCo=o("ReformerModelWithLMHead"),ACo=o(" (Reformer model)"),yCo=l(),s2=a("li"),Jie=a("strong"),LCo=o("rembert"),xCo=o(" \u2014 "),cj=a("a"),$Co=o("RemBertForCausalLM"),kCo=o(" (RemBERT model)"),SCo=l(),l2=a("li"),Yie=a("strong"),RCo=o("roberta"),PCo=o(" \u2014 "),fj=a("a"),BCo=o("RobertaForCausalLM"),ICo=o(" (RoBERTa model)"),qCo=l(),i2=a("li"),Kie=a("strong"),NCo=o("roformer"),jCo=o(" \u2014 "),mj=a("a"),DCo=o("RoFormerForCausalLM"),GCo=o(" (RoFormer model)"),OCo=l(),d2=a("li"),Zie=a("strong"),VCo=o("speech_to_text_2"),XCo=o(" \u2014 "),gj=a("a"),zCo=o("Speech2Text2ForCausalLM"),WCo=o(" (Speech2Text2 model)"),QCo=l(),c2=a("li"),ede=a("strong"),HCo=o("transfo-xl"),UCo=o(" \u2014 "),hj=a("a"),JCo=o("TransfoXLLMHeadModel"),YCo=o(" (Transformer-XL model)"),KCo=l(),f2=a("li"),ode=a("strong"),ZCo=o("trocr"),e3o=o(" \u2014 "),pj=a("a"),o3o=o("TrOCRForCausalLM"),r3o=o(" (TrOCR model)"),t3o=l(),m2=a("li"),rde=a("strong"),a3o=o("xglm"),n3o=o(" \u2014 "),uj=a("a"),s3o=o("XGLMForCausalLM"),l3o=o(" (XGLM model)"),i3o=l(),g2=a("li"),tde=a("strong"),d3o=o("xlm"),c3o=o(" \u2014 "),_j=a("a"),f3o=o("XLMWithLMHeadModel"),m3o=o(" (XLM model)"),g3o=l(),h2=a("li"),ade=a("strong"),h3o=o("xlm-prophetnet"),p3o=o(" \u2014 "),bj=a("a"),u3o=o("XLMProphetNetForCausalLM"),_3o=o(" (XLMProphetNet model)"),b3o=l(),p2=a("li"),nde=a("strong"),v3o=o("xlm-roberta"),F3o=o(" \u2014 "),vj=a("a"),T3o=o("XLMRobertaForCausalLM"),M3o=o(" (XLM-RoBERTa model)"),E3o=l(),u2=a("li"),sde=a("strong"),C3o=o("xlm-roberta-xl"),w3o=o(" \u2014 "),Fj=a("a"),A3o=o("XLMRobertaXLForCausalLM"),y3o=o(" (XLM-RoBERTa-XL model)"),L3o=l(),_2=a("li"),lde=a("strong"),x3o=o("xlnet"),$3o=o(" \u2014 "),Tj=a("a"),k3o=o("XLNetLMHeadModel"),S3o=o(" (XLNet model)"),R3o=l(),b2=a("p"),P3o=o("The model is set in evaluation mode by default using "),ide=a("code"),B3o=o("model.eval()"),I3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=a("code"),q3o=o("model.train()"),N3o=l(),F(v2.$$.fragment),zIe=l(),Pi=a("h2"),F2=a("a"),cde=a("span"),F(H0.$$.fragment),j3o=l(),fde=a("span"),D3o=o("AutoModelForMaskedLM"),WIe=l(),ko=a("div"),F(U0.$$.fragment),G3o=l(),Bi=a("p"),O3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=a("a"),V3o=o("from_pretrained()"),X3o=o(" class method or the "),Ej=a("a"),z3o=o("from_config()"),W3o=o(` class
method.`),Q3o=l(),J0=a("p"),H3o=o("This class cannot be instantiated directly using "),mde=a("code"),U3o=o("__init__()"),J3o=o(" (throws an error)."),Y3o=l(),st=a("div"),F(Y0.$$.fragment),K3o=l(),gde=a("p"),Z3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ewo=l(),Ii=a("p"),owo=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),rwo=o("not"),two=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),awo=o("from_pretrained()"),nwo=o(" to load the model weights."),swo=l(),F(T2.$$.fragment),lwo=l(),Ze=a("div"),F(K0.$$.fragment),iwo=l(),pde=a("p"),dwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cwo=l(),ka=a("p"),fwo=o("The model class to instantiate is selected based on the "),ude=a("code"),mwo=o("model_type"),gwo=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),hwo=o("pretrained_model_name_or_path"),pwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=a("code"),uwo=o("pretrained_model_name_or_path"),_wo=o(":"),bwo=l(),W=a("ul"),M2=a("li"),vde=a("strong"),vwo=o("albert"),Fwo=o(" \u2014 "),wj=a("a"),Two=o("AlbertForMaskedLM"),Mwo=o(" (ALBERT model)"),Ewo=l(),E2=a("li"),Fde=a("strong"),Cwo=o("bart"),wwo=o(" \u2014 "),Aj=a("a"),Awo=o("BartForConditionalGeneration"),ywo=o(" (BART model)"),Lwo=l(),C2=a("li"),Tde=a("strong"),xwo=o("bert"),$wo=o(" \u2014 "),yj=a("a"),kwo=o("BertForMaskedLM"),Swo=o(" (BERT model)"),Rwo=l(),w2=a("li"),Mde=a("strong"),Pwo=o("big_bird"),Bwo=o(" \u2014 "),Lj=a("a"),Iwo=o("BigBirdForMaskedLM"),qwo=o(" (BigBird model)"),Nwo=l(),A2=a("li"),Ede=a("strong"),jwo=o("camembert"),Dwo=o(" \u2014 "),xj=a("a"),Gwo=o("CamembertForMaskedLM"),Owo=o(" (CamemBERT model)"),Vwo=l(),y2=a("li"),Cde=a("strong"),Xwo=o("convbert"),zwo=o(" \u2014 "),$j=a("a"),Wwo=o("ConvBertForMaskedLM"),Qwo=o(" (ConvBERT model)"),Hwo=l(),L2=a("li"),wde=a("strong"),Uwo=o("data2vec-text"),Jwo=o(" \u2014 "),kj=a("a"),Ywo=o("Data2VecTextForMaskedLM"),Kwo=o(" (Data2VecText model)"),Zwo=l(),x2=a("li"),Ade=a("strong"),eAo=o("deberta"),oAo=o(" \u2014 "),Sj=a("a"),rAo=o("DebertaForMaskedLM"),tAo=o(" (DeBERTa model)"),aAo=l(),$2=a("li"),yde=a("strong"),nAo=o("deberta-v2"),sAo=o(" \u2014 "),Rj=a("a"),lAo=o("DebertaV2ForMaskedLM"),iAo=o(" (DeBERTa-v2 model)"),dAo=l(),k2=a("li"),Lde=a("strong"),cAo=o("distilbert"),fAo=o(" \u2014 "),Pj=a("a"),mAo=o("DistilBertForMaskedLM"),gAo=o(" (DistilBERT model)"),hAo=l(),S2=a("li"),xde=a("strong"),pAo=o("electra"),uAo=o(" \u2014 "),Bj=a("a"),_Ao=o("ElectraForMaskedLM"),bAo=o(" (ELECTRA model)"),vAo=l(),R2=a("li"),$de=a("strong"),FAo=o("flaubert"),TAo=o(" \u2014 "),Ij=a("a"),MAo=o("FlaubertWithLMHeadModel"),EAo=o(" (FlauBERT model)"),CAo=l(),P2=a("li"),kde=a("strong"),wAo=o("fnet"),AAo=o(" \u2014 "),qj=a("a"),yAo=o("FNetForMaskedLM"),LAo=o(" (FNet model)"),xAo=l(),B2=a("li"),Sde=a("strong"),$Ao=o("funnel"),kAo=o(" \u2014 "),Nj=a("a"),SAo=o("FunnelForMaskedLM"),RAo=o(" (Funnel Transformer model)"),PAo=l(),I2=a("li"),Rde=a("strong"),BAo=o("ibert"),IAo=o(" \u2014 "),jj=a("a"),qAo=o("IBertForMaskedLM"),NAo=o(" (I-BERT model)"),jAo=l(),q2=a("li"),Pde=a("strong"),DAo=o("layoutlm"),GAo=o(" \u2014 "),Dj=a("a"),OAo=o("LayoutLMForMaskedLM"),VAo=o(" (LayoutLM model)"),XAo=l(),N2=a("li"),Bde=a("strong"),zAo=o("longformer"),WAo=o(" \u2014 "),Gj=a("a"),QAo=o("LongformerForMaskedLM"),HAo=o(" (Longformer model)"),UAo=l(),j2=a("li"),Ide=a("strong"),JAo=o("mbart"),YAo=o(" \u2014 "),Oj=a("a"),KAo=o("MBartForConditionalGeneration"),ZAo=o(" (mBART model)"),e6o=l(),D2=a("li"),qde=a("strong"),o6o=o("megatron-bert"),r6o=o(" \u2014 "),Vj=a("a"),t6o=o("MegatronBertForMaskedLM"),a6o=o(" (MegatronBert model)"),n6o=l(),G2=a("li"),Nde=a("strong"),s6o=o("mobilebert"),l6o=o(" \u2014 "),Xj=a("a"),i6o=o("MobileBertForMaskedLM"),d6o=o(" (MobileBERT model)"),c6o=l(),O2=a("li"),jde=a("strong"),f6o=o("mpnet"),m6o=o(" \u2014 "),zj=a("a"),g6o=o("MPNetForMaskedLM"),h6o=o(" (MPNet model)"),p6o=l(),V2=a("li"),Dde=a("strong"),u6o=o("nystromformer"),_6o=o(" \u2014 "),Wj=a("a"),b6o=o("NystromformerForMaskedLM"),v6o=o(" (Nystromformer model)"),F6o=l(),X2=a("li"),Gde=a("strong"),T6o=o("perceiver"),M6o=o(" \u2014 "),Qj=a("a"),E6o=o("PerceiverForMaskedLM"),C6o=o(" (Perceiver model)"),w6o=l(),z2=a("li"),Ode=a("strong"),A6o=o("qdqbert"),y6o=o(" \u2014 "),Hj=a("a"),L6o=o("QDQBertForMaskedLM"),x6o=o(" (QDQBert model)"),$6o=l(),W2=a("li"),Vde=a("strong"),k6o=o("reformer"),S6o=o(" \u2014 "),Uj=a("a"),R6o=o("ReformerForMaskedLM"),P6o=o(" (Reformer model)"),B6o=l(),Q2=a("li"),Xde=a("strong"),I6o=o("rembert"),q6o=o(" \u2014 "),Jj=a("a"),N6o=o("RemBertForMaskedLM"),j6o=o(" (RemBERT model)"),D6o=l(),H2=a("li"),zde=a("strong"),G6o=o("roberta"),O6o=o(" \u2014 "),Yj=a("a"),V6o=o("RobertaForMaskedLM"),X6o=o(" (RoBERTa model)"),z6o=l(),U2=a("li"),Wde=a("strong"),W6o=o("roformer"),Q6o=o(" \u2014 "),Kj=a("a"),H6o=o("RoFormerForMaskedLM"),U6o=o(" (RoFormer model)"),J6o=l(),J2=a("li"),Qde=a("strong"),Y6o=o("squeezebert"),K6o=o(" \u2014 "),Zj=a("a"),Z6o=o("SqueezeBertForMaskedLM"),e0o=o(" (SqueezeBERT model)"),o0o=l(),Y2=a("li"),Hde=a("strong"),r0o=o("tapas"),t0o=o(" \u2014 "),eD=a("a"),a0o=o("TapasForMaskedLM"),n0o=o(" (TAPAS model)"),s0o=l(),K2=a("li"),Ude=a("strong"),l0o=o("wav2vec2"),i0o=o(" \u2014 "),Jde=a("code"),d0o=o("Wav2Vec2ForMaskedLM"),c0o=o(" (Wav2Vec2 model)"),f0o=l(),Z2=a("li"),Yde=a("strong"),m0o=o("xlm"),g0o=o(" \u2014 "),oD=a("a"),h0o=o("XLMWithLMHeadModel"),p0o=o(" (XLM model)"),u0o=l(),e1=a("li"),Kde=a("strong"),_0o=o("xlm-roberta"),b0o=o(" \u2014 "),rD=a("a"),v0o=o("XLMRobertaForMaskedLM"),F0o=o(" (XLM-RoBERTa model)"),T0o=l(),o1=a("li"),Zde=a("strong"),M0o=o("xlm-roberta-xl"),E0o=o(" \u2014 "),tD=a("a"),C0o=o("XLMRobertaXLForMaskedLM"),w0o=o(" (XLM-RoBERTa-XL model)"),A0o=l(),r1=a("li"),ece=a("strong"),y0o=o("yoso"),L0o=o(" \u2014 "),aD=a("a"),x0o=o("YosoForMaskedLM"),$0o=o(" (YOSO model)"),k0o=l(),t1=a("p"),S0o=o("The model is set in evaluation mode by default using "),oce=a("code"),R0o=o("model.eval()"),P0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rce=a("code"),B0o=o("model.train()"),I0o=l(),F(a1.$$.fragment),QIe=l(),qi=a("h2"),n1=a("a"),tce=a("span"),F(Z0.$$.fragment),q0o=l(),ace=a("span"),N0o=o("AutoModelForSeq2SeqLM"),HIe=l(),So=a("div"),F(ey.$$.fragment),j0o=l(),Ni=a("p"),D0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=a("a"),G0o=o("from_pretrained()"),O0o=o(" class method or the "),sD=a("a"),V0o=o("from_config()"),X0o=o(` class
method.`),z0o=l(),oy=a("p"),W0o=o("This class cannot be instantiated directly using "),nce=a("code"),Q0o=o("__init__()"),H0o=o(" (throws an error)."),U0o=l(),lt=a("div"),F(ry.$$.fragment),J0o=l(),sce=a("p"),Y0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K0o=l(),ji=a("p"),Z0o=o(`Note:
Loading a model from its configuration file does `),lce=a("strong"),eyo=o("not"),oyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),ryo=o("from_pretrained()"),tyo=o(" to load the model weights."),ayo=l(),F(s1.$$.fragment),nyo=l(),eo=a("div"),F(ty.$$.fragment),syo=l(),ice=a("p"),lyo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iyo=l(),Sa=a("p"),dyo=o("The model class to instantiate is selected based on the "),dce=a("code"),cyo=o("model_type"),fyo=o(` property of the config object (either
passed as an argument or loaded from `),cce=a("code"),myo=o("pretrained_model_name_or_path"),gyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=a("code"),hyo=o("pretrained_model_name_or_path"),pyo=o(":"),uyo=l(),ue=a("ul"),l1=a("li"),mce=a("strong"),_yo=o("bart"),byo=o(" \u2014 "),iD=a("a"),vyo=o("BartForConditionalGeneration"),Fyo=o(" (BART model)"),Tyo=l(),i1=a("li"),gce=a("strong"),Myo=o("bigbird_pegasus"),Eyo=o(" \u2014 "),dD=a("a"),Cyo=o("BigBirdPegasusForConditionalGeneration"),wyo=o(" (BigBirdPegasus model)"),Ayo=l(),d1=a("li"),hce=a("strong"),yyo=o("blenderbot"),Lyo=o(" \u2014 "),cD=a("a"),xyo=o("BlenderbotForConditionalGeneration"),$yo=o(" (Blenderbot model)"),kyo=l(),c1=a("li"),pce=a("strong"),Syo=o("blenderbot-small"),Ryo=o(" \u2014 "),fD=a("a"),Pyo=o("BlenderbotSmallForConditionalGeneration"),Byo=o(" (BlenderbotSmall model)"),Iyo=l(),f1=a("li"),uce=a("strong"),qyo=o("encoder-decoder"),Nyo=o(" \u2014 "),mD=a("a"),jyo=o("EncoderDecoderModel"),Dyo=o(" (Encoder decoder model)"),Gyo=l(),m1=a("li"),_ce=a("strong"),Oyo=o("fsmt"),Vyo=o(" \u2014 "),gD=a("a"),Xyo=o("FSMTForConditionalGeneration"),zyo=o(" (FairSeq Machine-Translation model)"),Wyo=l(),g1=a("li"),bce=a("strong"),Qyo=o("led"),Hyo=o(" \u2014 "),hD=a("a"),Uyo=o("LEDForConditionalGeneration"),Jyo=o(" (LED model)"),Yyo=l(),h1=a("li"),vce=a("strong"),Kyo=o("m2m_100"),Zyo=o(" \u2014 "),pD=a("a"),eLo=o("M2M100ForConditionalGeneration"),oLo=o(" (M2M100 model)"),rLo=l(),p1=a("li"),Fce=a("strong"),tLo=o("marian"),aLo=o(" \u2014 "),uD=a("a"),nLo=o("MarianMTModel"),sLo=o(" (Marian model)"),lLo=l(),u1=a("li"),Tce=a("strong"),iLo=o("mbart"),dLo=o(" \u2014 "),_D=a("a"),cLo=o("MBartForConditionalGeneration"),fLo=o(" (mBART model)"),mLo=l(),_1=a("li"),Mce=a("strong"),gLo=o("mt5"),hLo=o(" \u2014 "),bD=a("a"),pLo=o("MT5ForConditionalGeneration"),uLo=o(" (mT5 model)"),_Lo=l(),b1=a("li"),Ece=a("strong"),bLo=o("pegasus"),vLo=o(" \u2014 "),vD=a("a"),FLo=o("PegasusForConditionalGeneration"),TLo=o(" (Pegasus model)"),MLo=l(),v1=a("li"),Cce=a("strong"),ELo=o("plbart"),CLo=o(" \u2014 "),FD=a("a"),wLo=o("PLBartForConditionalGeneration"),ALo=o(" (PLBart model)"),yLo=l(),F1=a("li"),wce=a("strong"),LLo=o("prophetnet"),xLo=o(" \u2014 "),TD=a("a"),$Lo=o("ProphetNetForConditionalGeneration"),kLo=o(" (ProphetNet model)"),SLo=l(),T1=a("li"),Ace=a("strong"),RLo=o("t5"),PLo=o(" \u2014 "),MD=a("a"),BLo=o("T5ForConditionalGeneration"),ILo=o(" (T5 model)"),qLo=l(),M1=a("li"),yce=a("strong"),NLo=o("xlm-prophetnet"),jLo=o(" \u2014 "),ED=a("a"),DLo=o("XLMProphetNetForConditionalGeneration"),GLo=o(" (XLMProphetNet model)"),OLo=l(),E1=a("p"),VLo=o("The model is set in evaluation mode by default using "),Lce=a("code"),XLo=o("model.eval()"),zLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),WLo=o("model.train()"),QLo=l(),F(C1.$$.fragment),UIe=l(),Di=a("h2"),w1=a("a"),$ce=a("span"),F(ay.$$.fragment),HLo=l(),kce=a("span"),ULo=o("AutoModelForSequenceClassification"),JIe=l(),Ro=a("div"),F(ny.$$.fragment),JLo=l(),Gi=a("p"),YLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=a("a"),KLo=o("from_pretrained()"),ZLo=o(" class method or the "),wD=a("a"),e8o=o("from_config()"),o8o=o(` class
method.`),r8o=l(),sy=a("p"),t8o=o("This class cannot be instantiated directly using "),Sce=a("code"),a8o=o("__init__()"),n8o=o(" (throws an error)."),s8o=l(),it=a("div"),F(ly.$$.fragment),l8o=l(),Rce=a("p"),i8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d8o=l(),Oi=a("p"),c8o=o(`Note:
Loading a model from its configuration file does `),Pce=a("strong"),f8o=o("not"),m8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),g8o=o("from_pretrained()"),h8o=o(" to load the model weights."),p8o=l(),F(A1.$$.fragment),u8o=l(),oo=a("div"),F(iy.$$.fragment),_8o=l(),Bce=a("p"),b8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v8o=l(),Ra=a("p"),F8o=o("The model class to instantiate is selected based on the "),Ice=a("code"),T8o=o("model_type"),M8o=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),E8o=o("pretrained_model_name_or_path"),C8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=a("code"),w8o=o("pretrained_model_name_or_path"),A8o=o(":"),y8o=l(),q=a("ul"),y1=a("li"),jce=a("strong"),L8o=o("albert"),x8o=o(" \u2014 "),yD=a("a"),$8o=o("AlbertForSequenceClassification"),k8o=o(" (ALBERT model)"),S8o=l(),L1=a("li"),Dce=a("strong"),R8o=o("bart"),P8o=o(" \u2014 "),LD=a("a"),B8o=o("BartForSequenceClassification"),I8o=o(" (BART model)"),q8o=l(),x1=a("li"),Gce=a("strong"),N8o=o("bert"),j8o=o(" \u2014 "),xD=a("a"),D8o=o("BertForSequenceClassification"),G8o=o(" (BERT model)"),O8o=l(),$1=a("li"),Oce=a("strong"),V8o=o("big_bird"),X8o=o(" \u2014 "),$D=a("a"),z8o=o("BigBirdForSequenceClassification"),W8o=o(" (BigBird model)"),Q8o=l(),k1=a("li"),Vce=a("strong"),H8o=o("bigbird_pegasus"),U8o=o(" \u2014 "),kD=a("a"),J8o=o("BigBirdPegasusForSequenceClassification"),Y8o=o(" (BigBirdPegasus model)"),K8o=l(),S1=a("li"),Xce=a("strong"),Z8o=o("camembert"),exo=o(" \u2014 "),SD=a("a"),oxo=o("CamembertForSequenceClassification"),rxo=o(" (CamemBERT model)"),txo=l(),R1=a("li"),zce=a("strong"),axo=o("canine"),nxo=o(" \u2014 "),RD=a("a"),sxo=o("CanineForSequenceClassification"),lxo=o(" (Canine model)"),ixo=l(),P1=a("li"),Wce=a("strong"),dxo=o("convbert"),cxo=o(" \u2014 "),PD=a("a"),fxo=o("ConvBertForSequenceClassification"),mxo=o(" (ConvBERT model)"),gxo=l(),B1=a("li"),Qce=a("strong"),hxo=o("ctrl"),pxo=o(" \u2014 "),BD=a("a"),uxo=o("CTRLForSequenceClassification"),_xo=o(" (CTRL model)"),bxo=l(),I1=a("li"),Hce=a("strong"),vxo=o("data2vec-text"),Fxo=o(" \u2014 "),ID=a("a"),Txo=o("Data2VecTextForSequenceClassification"),Mxo=o(" (Data2VecText model)"),Exo=l(),q1=a("li"),Uce=a("strong"),Cxo=o("deberta"),wxo=o(" \u2014 "),qD=a("a"),Axo=o("DebertaForSequenceClassification"),yxo=o(" (DeBERTa model)"),Lxo=l(),N1=a("li"),Jce=a("strong"),xxo=o("deberta-v2"),$xo=o(" \u2014 "),ND=a("a"),kxo=o("DebertaV2ForSequenceClassification"),Sxo=o(" (DeBERTa-v2 model)"),Rxo=l(),j1=a("li"),Yce=a("strong"),Pxo=o("distilbert"),Bxo=o(" \u2014 "),jD=a("a"),Ixo=o("DistilBertForSequenceClassification"),qxo=o(" (DistilBERT model)"),Nxo=l(),D1=a("li"),Kce=a("strong"),jxo=o("electra"),Dxo=o(" \u2014 "),DD=a("a"),Gxo=o("ElectraForSequenceClassification"),Oxo=o(" (ELECTRA model)"),Vxo=l(),G1=a("li"),Zce=a("strong"),Xxo=o("flaubert"),zxo=o(" \u2014 "),GD=a("a"),Wxo=o("FlaubertForSequenceClassification"),Qxo=o(" (FlauBERT model)"),Hxo=l(),O1=a("li"),efe=a("strong"),Uxo=o("fnet"),Jxo=o(" \u2014 "),OD=a("a"),Yxo=o("FNetForSequenceClassification"),Kxo=o(" (FNet model)"),Zxo=l(),V1=a("li"),ofe=a("strong"),e9o=o("funnel"),o9o=o(" \u2014 "),VD=a("a"),r9o=o("FunnelForSequenceClassification"),t9o=o(" (Funnel Transformer model)"),a9o=l(),X1=a("li"),rfe=a("strong"),n9o=o("gpt2"),s9o=o(" \u2014 "),XD=a("a"),l9o=o("GPT2ForSequenceClassification"),i9o=o(" (OpenAI GPT-2 model)"),d9o=l(),z1=a("li"),tfe=a("strong"),c9o=o("gpt_neo"),f9o=o(" \u2014 "),zD=a("a"),m9o=o("GPTNeoForSequenceClassification"),g9o=o(" (GPT Neo model)"),h9o=l(),W1=a("li"),afe=a("strong"),p9o=o("gptj"),u9o=o(" \u2014 "),WD=a("a"),_9o=o("GPTJForSequenceClassification"),b9o=o(" (GPT-J model)"),v9o=l(),Q1=a("li"),nfe=a("strong"),F9o=o("ibert"),T9o=o(" \u2014 "),QD=a("a"),M9o=o("IBertForSequenceClassification"),E9o=o(" (I-BERT model)"),C9o=l(),H1=a("li"),sfe=a("strong"),w9o=o("layoutlm"),A9o=o(" \u2014 "),HD=a("a"),y9o=o("LayoutLMForSequenceClassification"),L9o=o(" (LayoutLM model)"),x9o=l(),U1=a("li"),lfe=a("strong"),$9o=o("layoutlmv2"),k9o=o(" \u2014 "),UD=a("a"),S9o=o("LayoutLMv2ForSequenceClassification"),R9o=o(" (LayoutLMv2 model)"),P9o=l(),J1=a("li"),ife=a("strong"),B9o=o("led"),I9o=o(" \u2014 "),JD=a("a"),q9o=o("LEDForSequenceClassification"),N9o=o(" (LED model)"),j9o=l(),Y1=a("li"),dfe=a("strong"),D9o=o("longformer"),G9o=o(" \u2014 "),YD=a("a"),O9o=o("LongformerForSequenceClassification"),V9o=o(" (Longformer model)"),X9o=l(),K1=a("li"),cfe=a("strong"),z9o=o("mbart"),W9o=o(" \u2014 "),KD=a("a"),Q9o=o("MBartForSequenceClassification"),H9o=o(" (mBART model)"),U9o=l(),Z1=a("li"),ffe=a("strong"),J9o=o("megatron-bert"),Y9o=o(" \u2014 "),ZD=a("a"),K9o=o("MegatronBertForSequenceClassification"),Z9o=o(" (MegatronBert model)"),e$o=l(),eb=a("li"),mfe=a("strong"),o$o=o("mobilebert"),r$o=o(" \u2014 "),eG=a("a"),t$o=o("MobileBertForSequenceClassification"),a$o=o(" (MobileBERT model)"),n$o=l(),ob=a("li"),gfe=a("strong"),s$o=o("mpnet"),l$o=o(" \u2014 "),oG=a("a"),i$o=o("MPNetForSequenceClassification"),d$o=o(" (MPNet model)"),c$o=l(),rb=a("li"),hfe=a("strong"),f$o=o("nystromformer"),m$o=o(" \u2014 "),rG=a("a"),g$o=o("NystromformerForSequenceClassification"),h$o=o(" (Nystromformer model)"),p$o=l(),tb=a("li"),pfe=a("strong"),u$o=o("openai-gpt"),_$o=o(" \u2014 "),tG=a("a"),b$o=o("OpenAIGPTForSequenceClassification"),v$o=o(" (OpenAI GPT model)"),F$o=l(),ab=a("li"),ufe=a("strong"),T$o=o("perceiver"),M$o=o(" \u2014 "),aG=a("a"),E$o=o("PerceiverForSequenceClassification"),C$o=o(" (Perceiver model)"),w$o=l(),nb=a("li"),_fe=a("strong"),A$o=o("plbart"),y$o=o(" \u2014 "),nG=a("a"),L$o=o("PLBartForSequenceClassification"),x$o=o(" (PLBart model)"),$$o=l(),sb=a("li"),bfe=a("strong"),k$o=o("qdqbert"),S$o=o(" \u2014 "),sG=a("a"),R$o=o("QDQBertForSequenceClassification"),P$o=o(" (QDQBert model)"),B$o=l(),lb=a("li"),vfe=a("strong"),I$o=o("reformer"),q$o=o(" \u2014 "),lG=a("a"),N$o=o("ReformerForSequenceClassification"),j$o=o(" (Reformer model)"),D$o=l(),ib=a("li"),Ffe=a("strong"),G$o=o("rembert"),O$o=o(" \u2014 "),iG=a("a"),V$o=o("RemBertForSequenceClassification"),X$o=o(" (RemBERT model)"),z$o=l(),db=a("li"),Tfe=a("strong"),W$o=o("roberta"),Q$o=o(" \u2014 "),dG=a("a"),H$o=o("RobertaForSequenceClassification"),U$o=o(" (RoBERTa model)"),J$o=l(),cb=a("li"),Mfe=a("strong"),Y$o=o("roformer"),K$o=o(" \u2014 "),cG=a("a"),Z$o=o("RoFormerForSequenceClassification"),eko=o(" (RoFormer model)"),oko=l(),fb=a("li"),Efe=a("strong"),rko=o("squeezebert"),tko=o(" \u2014 "),fG=a("a"),ako=o("SqueezeBertForSequenceClassification"),nko=o(" (SqueezeBERT model)"),sko=l(),mb=a("li"),Cfe=a("strong"),lko=o("tapas"),iko=o(" \u2014 "),mG=a("a"),dko=o("TapasForSequenceClassification"),cko=o(" (TAPAS model)"),fko=l(),gb=a("li"),wfe=a("strong"),mko=o("transfo-xl"),gko=o(" \u2014 "),gG=a("a"),hko=o("TransfoXLForSequenceClassification"),pko=o(" (Transformer-XL model)"),uko=l(),hb=a("li"),Afe=a("strong"),_ko=o("xlm"),bko=o(" \u2014 "),hG=a("a"),vko=o("XLMForSequenceClassification"),Fko=o(" (XLM model)"),Tko=l(),pb=a("li"),yfe=a("strong"),Mko=o("xlm-roberta"),Eko=o(" \u2014 "),pG=a("a"),Cko=o("XLMRobertaForSequenceClassification"),wko=o(" (XLM-RoBERTa model)"),Ako=l(),ub=a("li"),Lfe=a("strong"),yko=o("xlm-roberta-xl"),Lko=o(" \u2014 "),uG=a("a"),xko=o("XLMRobertaXLForSequenceClassification"),$ko=o(" (XLM-RoBERTa-XL model)"),kko=l(),_b=a("li"),xfe=a("strong"),Sko=o("xlnet"),Rko=o(" \u2014 "),_G=a("a"),Pko=o("XLNetForSequenceClassification"),Bko=o(" (XLNet model)"),Iko=l(),bb=a("li"),$fe=a("strong"),qko=o("yoso"),Nko=o(" \u2014 "),bG=a("a"),jko=o("YosoForSequenceClassification"),Dko=o(" (YOSO model)"),Gko=l(),vb=a("p"),Oko=o("The model is set in evaluation mode by default using "),kfe=a("code"),Vko=o("model.eval()"),Xko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),zko=o("model.train()"),Wko=l(),F(Fb.$$.fragment),YIe=l(),Vi=a("h2"),Tb=a("a"),Rfe=a("span"),F(dy.$$.fragment),Qko=l(),Pfe=a("span"),Hko=o("AutoModelForMultipleChoice"),KIe=l(),Po=a("div"),F(cy.$$.fragment),Uko=l(),Xi=a("p"),Jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=a("a"),Yko=o("from_pretrained()"),Kko=o(" class method or the "),FG=a("a"),Zko=o("from_config()"),eSo=o(` class
method.`),oSo=l(),fy=a("p"),rSo=o("This class cannot be instantiated directly using "),Bfe=a("code"),tSo=o("__init__()"),aSo=o(" (throws an error)."),nSo=l(),dt=a("div"),F(my.$$.fragment),sSo=l(),Ife=a("p"),lSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iSo=l(),zi=a("p"),dSo=o(`Note:
Loading a model from its configuration file does `),qfe=a("strong"),cSo=o("not"),fSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),mSo=o("from_pretrained()"),gSo=o(" to load the model weights."),hSo=l(),F(Mb.$$.fragment),pSo=l(),ro=a("div"),F(gy.$$.fragment),uSo=l(),Nfe=a("p"),_So=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bSo=l(),Pa=a("p"),vSo=o("The model class to instantiate is selected based on the "),jfe=a("code"),FSo=o("model_type"),TSo=o(` property of the config object (either
passed as an argument or loaded from `),Dfe=a("code"),MSo=o("pretrained_model_name_or_path"),ESo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=a("code"),CSo=o("pretrained_model_name_or_path"),wSo=o(":"),ASo=l(),Y=a("ul"),Eb=a("li"),Ofe=a("strong"),ySo=o("albert"),LSo=o(" \u2014 "),MG=a("a"),xSo=o("AlbertForMultipleChoice"),$So=o(" (ALBERT model)"),kSo=l(),Cb=a("li"),Vfe=a("strong"),SSo=o("bert"),RSo=o(" \u2014 "),EG=a("a"),PSo=o("BertForMultipleChoice"),BSo=o(" (BERT model)"),ISo=l(),wb=a("li"),Xfe=a("strong"),qSo=o("big_bird"),NSo=o(" \u2014 "),CG=a("a"),jSo=o("BigBirdForMultipleChoice"),DSo=o(" (BigBird model)"),GSo=l(),Ab=a("li"),zfe=a("strong"),OSo=o("camembert"),VSo=o(" \u2014 "),wG=a("a"),XSo=o("CamembertForMultipleChoice"),zSo=o(" (CamemBERT model)"),WSo=l(),yb=a("li"),Wfe=a("strong"),QSo=o("canine"),HSo=o(" \u2014 "),AG=a("a"),USo=o("CanineForMultipleChoice"),JSo=o(" (Canine model)"),YSo=l(),Lb=a("li"),Qfe=a("strong"),KSo=o("convbert"),ZSo=o(" \u2014 "),yG=a("a"),eRo=o("ConvBertForMultipleChoice"),oRo=o(" (ConvBERT model)"),rRo=l(),xb=a("li"),Hfe=a("strong"),tRo=o("data2vec-text"),aRo=o(" \u2014 "),LG=a("a"),nRo=o("Data2VecTextForMultipleChoice"),sRo=o(" (Data2VecText model)"),lRo=l(),$b=a("li"),Ufe=a("strong"),iRo=o("deberta-v2"),dRo=o(" \u2014 "),xG=a("a"),cRo=o("DebertaV2ForMultipleChoice"),fRo=o(" (DeBERTa-v2 model)"),mRo=l(),kb=a("li"),Jfe=a("strong"),gRo=o("distilbert"),hRo=o(" \u2014 "),$G=a("a"),pRo=o("DistilBertForMultipleChoice"),uRo=o(" (DistilBERT model)"),_Ro=l(),Sb=a("li"),Yfe=a("strong"),bRo=o("electra"),vRo=o(" \u2014 "),kG=a("a"),FRo=o("ElectraForMultipleChoice"),TRo=o(" (ELECTRA model)"),MRo=l(),Rb=a("li"),Kfe=a("strong"),ERo=o("flaubert"),CRo=o(" \u2014 "),SG=a("a"),wRo=o("FlaubertForMultipleChoice"),ARo=o(" (FlauBERT model)"),yRo=l(),Pb=a("li"),Zfe=a("strong"),LRo=o("fnet"),xRo=o(" \u2014 "),RG=a("a"),$Ro=o("FNetForMultipleChoice"),kRo=o(" (FNet model)"),SRo=l(),Bb=a("li"),eme=a("strong"),RRo=o("funnel"),PRo=o(" \u2014 "),PG=a("a"),BRo=o("FunnelForMultipleChoice"),IRo=o(" (Funnel Transformer model)"),qRo=l(),Ib=a("li"),ome=a("strong"),NRo=o("ibert"),jRo=o(" \u2014 "),BG=a("a"),DRo=o("IBertForMultipleChoice"),GRo=o(" (I-BERT model)"),ORo=l(),qb=a("li"),rme=a("strong"),VRo=o("longformer"),XRo=o(" \u2014 "),IG=a("a"),zRo=o("LongformerForMultipleChoice"),WRo=o(" (Longformer model)"),QRo=l(),Nb=a("li"),tme=a("strong"),HRo=o("megatron-bert"),URo=o(" \u2014 "),qG=a("a"),JRo=o("MegatronBertForMultipleChoice"),YRo=o(" (MegatronBert model)"),KRo=l(),jb=a("li"),ame=a("strong"),ZRo=o("mobilebert"),ePo=o(" \u2014 "),NG=a("a"),oPo=o("MobileBertForMultipleChoice"),rPo=o(" (MobileBERT model)"),tPo=l(),Db=a("li"),nme=a("strong"),aPo=o("mpnet"),nPo=o(" \u2014 "),jG=a("a"),sPo=o("MPNetForMultipleChoice"),lPo=o(" (MPNet model)"),iPo=l(),Gb=a("li"),sme=a("strong"),dPo=o("nystromformer"),cPo=o(" \u2014 "),DG=a("a"),fPo=o("NystromformerForMultipleChoice"),mPo=o(" (Nystromformer model)"),gPo=l(),Ob=a("li"),lme=a("strong"),hPo=o("qdqbert"),pPo=o(" \u2014 "),GG=a("a"),uPo=o("QDQBertForMultipleChoice"),_Po=o(" (QDQBert model)"),bPo=l(),Vb=a("li"),ime=a("strong"),vPo=o("rembert"),FPo=o(" \u2014 "),OG=a("a"),TPo=o("RemBertForMultipleChoice"),MPo=o(" (RemBERT model)"),EPo=l(),Xb=a("li"),dme=a("strong"),CPo=o("roberta"),wPo=o(" \u2014 "),VG=a("a"),APo=o("RobertaForMultipleChoice"),yPo=o(" (RoBERTa model)"),LPo=l(),zb=a("li"),cme=a("strong"),xPo=o("roformer"),$Po=o(" \u2014 "),XG=a("a"),kPo=o("RoFormerForMultipleChoice"),SPo=o(" (RoFormer model)"),RPo=l(),Wb=a("li"),fme=a("strong"),PPo=o("squeezebert"),BPo=o(" \u2014 "),zG=a("a"),IPo=o("SqueezeBertForMultipleChoice"),qPo=o(" (SqueezeBERT model)"),NPo=l(),Qb=a("li"),mme=a("strong"),jPo=o("xlm"),DPo=o(" \u2014 "),WG=a("a"),GPo=o("XLMForMultipleChoice"),OPo=o(" (XLM model)"),VPo=l(),Hb=a("li"),gme=a("strong"),XPo=o("xlm-roberta"),zPo=o(" \u2014 "),QG=a("a"),WPo=o("XLMRobertaForMultipleChoice"),QPo=o(" (XLM-RoBERTa model)"),HPo=l(),Ub=a("li"),hme=a("strong"),UPo=o("xlm-roberta-xl"),JPo=o(" \u2014 "),HG=a("a"),YPo=o("XLMRobertaXLForMultipleChoice"),KPo=o(" (XLM-RoBERTa-XL model)"),ZPo=l(),Jb=a("li"),pme=a("strong"),eBo=o("xlnet"),oBo=o(" \u2014 "),UG=a("a"),rBo=o("XLNetForMultipleChoice"),tBo=o(" (XLNet model)"),aBo=l(),Yb=a("li"),ume=a("strong"),nBo=o("yoso"),sBo=o(" \u2014 "),JG=a("a"),lBo=o("YosoForMultipleChoice"),iBo=o(" (YOSO model)"),dBo=l(),Kb=a("p"),cBo=o("The model is set in evaluation mode by default using "),_me=a("code"),fBo=o("model.eval()"),mBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),gBo=o("model.train()"),hBo=l(),F(Zb.$$.fragment),ZIe=l(),Wi=a("h2"),e4=a("a"),vme=a("span"),F(hy.$$.fragment),pBo=l(),Fme=a("span"),uBo=o("AutoModelForNextSentencePrediction"),eqe=l(),Bo=a("div"),F(py.$$.fragment),_Bo=l(),Qi=a("p"),bBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=a("a"),vBo=o("from_pretrained()"),FBo=o(" class method or the "),KG=a("a"),TBo=o("from_config()"),MBo=o(` class
method.`),EBo=l(),uy=a("p"),CBo=o("This class cannot be instantiated directly using "),Tme=a("code"),wBo=o("__init__()"),ABo=o(" (throws an error)."),yBo=l(),ct=a("div"),F(_y.$$.fragment),LBo=l(),Mme=a("p"),xBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Bo=l(),Hi=a("p"),kBo=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),SBo=o("not"),RBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),PBo=o("from_pretrained()"),BBo=o(" to load the model weights."),IBo=l(),F(o4.$$.fragment),qBo=l(),to=a("div"),F(by.$$.fragment),NBo=l(),Cme=a("p"),jBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DBo=l(),Ba=a("p"),GBo=o("The model class to instantiate is selected based on the "),wme=a("code"),OBo=o("model_type"),VBo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),XBo=o("pretrained_model_name_or_path"),zBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),WBo=o("pretrained_model_name_or_path"),QBo=o(":"),HBo=l(),Yr=a("ul"),r4=a("li"),Lme=a("strong"),UBo=o("bert"),JBo=o(" \u2014 "),eO=a("a"),YBo=o("BertForNextSentencePrediction"),KBo=o(" (BERT model)"),ZBo=l(),t4=a("li"),xme=a("strong"),eIo=o("fnet"),oIo=o(" \u2014 "),oO=a("a"),rIo=o("FNetForNextSentencePrediction"),tIo=o(" (FNet model)"),aIo=l(),a4=a("li"),$me=a("strong"),nIo=o("megatron-bert"),sIo=o(" \u2014 "),rO=a("a"),lIo=o("MegatronBertForNextSentencePrediction"),iIo=o(" (MegatronBert model)"),dIo=l(),n4=a("li"),kme=a("strong"),cIo=o("mobilebert"),fIo=o(" \u2014 "),tO=a("a"),mIo=o("MobileBertForNextSentencePrediction"),gIo=o(" (MobileBERT model)"),hIo=l(),s4=a("li"),Sme=a("strong"),pIo=o("qdqbert"),uIo=o(" \u2014 "),aO=a("a"),_Io=o("QDQBertForNextSentencePrediction"),bIo=o(" (QDQBert model)"),vIo=l(),l4=a("p"),FIo=o("The model is set in evaluation mode by default using "),Rme=a("code"),TIo=o("model.eval()"),MIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),EIo=o("model.train()"),CIo=l(),F(i4.$$.fragment),oqe=l(),Ui=a("h2"),d4=a("a"),Bme=a("span"),F(vy.$$.fragment),wIo=l(),Ime=a("span"),AIo=o("AutoModelForTokenClassification"),rqe=l(),Io=a("div"),F(Fy.$$.fragment),yIo=l(),Ji=a("p"),LIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=a("a"),xIo=o("from_pretrained()"),$Io=o(" class method or the "),sO=a("a"),kIo=o("from_config()"),SIo=o(` class
method.`),RIo=l(),Ty=a("p"),PIo=o("This class cannot be instantiated directly using "),qme=a("code"),BIo=o("__init__()"),IIo=o(" (throws an error)."),qIo=l(),ft=a("div"),F(My.$$.fragment),NIo=l(),Nme=a("p"),jIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DIo=l(),Yi=a("p"),GIo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),OIo=o("not"),VIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),XIo=o("from_pretrained()"),zIo=o(" to load the model weights."),WIo=l(),F(c4.$$.fragment),QIo=l(),ao=a("div"),F(Ey.$$.fragment),HIo=l(),Dme=a("p"),UIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JIo=l(),Ia=a("p"),YIo=o("The model class to instantiate is selected based on the "),Gme=a("code"),KIo=o("model_type"),ZIo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),eqo=o("pretrained_model_name_or_path"),oqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),rqo=o("pretrained_model_name_or_path"),tqo=o(":"),aqo=l(),U=a("ul"),f4=a("li"),Xme=a("strong"),nqo=o("albert"),sqo=o(" \u2014 "),iO=a("a"),lqo=o("AlbertForTokenClassification"),iqo=o(" (ALBERT model)"),dqo=l(),m4=a("li"),zme=a("strong"),cqo=o("bert"),fqo=o(" \u2014 "),dO=a("a"),mqo=o("BertForTokenClassification"),gqo=o(" (BERT model)"),hqo=l(),g4=a("li"),Wme=a("strong"),pqo=o("big_bird"),uqo=o(" \u2014 "),cO=a("a"),_qo=o("BigBirdForTokenClassification"),bqo=o(" (BigBird model)"),vqo=l(),h4=a("li"),Qme=a("strong"),Fqo=o("camembert"),Tqo=o(" \u2014 "),fO=a("a"),Mqo=o("CamembertForTokenClassification"),Eqo=o(" (CamemBERT model)"),Cqo=l(),p4=a("li"),Hme=a("strong"),wqo=o("canine"),Aqo=o(" \u2014 "),mO=a("a"),yqo=o("CanineForTokenClassification"),Lqo=o(" (Canine model)"),xqo=l(),u4=a("li"),Ume=a("strong"),$qo=o("convbert"),kqo=o(" \u2014 "),gO=a("a"),Sqo=o("ConvBertForTokenClassification"),Rqo=o(" (ConvBERT model)"),Pqo=l(),_4=a("li"),Jme=a("strong"),Bqo=o("data2vec-text"),Iqo=o(" \u2014 "),hO=a("a"),qqo=o("Data2VecTextForTokenClassification"),Nqo=o(" (Data2VecText model)"),jqo=l(),b4=a("li"),Yme=a("strong"),Dqo=o("deberta"),Gqo=o(" \u2014 "),pO=a("a"),Oqo=o("DebertaForTokenClassification"),Vqo=o(" (DeBERTa model)"),Xqo=l(),v4=a("li"),Kme=a("strong"),zqo=o("deberta-v2"),Wqo=o(" \u2014 "),uO=a("a"),Qqo=o("DebertaV2ForTokenClassification"),Hqo=o(" (DeBERTa-v2 model)"),Uqo=l(),F4=a("li"),Zme=a("strong"),Jqo=o("distilbert"),Yqo=o(" \u2014 "),_O=a("a"),Kqo=o("DistilBertForTokenClassification"),Zqo=o(" (DistilBERT model)"),eNo=l(),T4=a("li"),ege=a("strong"),oNo=o("electra"),rNo=o(" \u2014 "),bO=a("a"),tNo=o("ElectraForTokenClassification"),aNo=o(" (ELECTRA model)"),nNo=l(),M4=a("li"),oge=a("strong"),sNo=o("flaubert"),lNo=o(" \u2014 "),vO=a("a"),iNo=o("FlaubertForTokenClassification"),dNo=o(" (FlauBERT model)"),cNo=l(),E4=a("li"),rge=a("strong"),fNo=o("fnet"),mNo=o(" \u2014 "),FO=a("a"),gNo=o("FNetForTokenClassification"),hNo=o(" (FNet model)"),pNo=l(),C4=a("li"),tge=a("strong"),uNo=o("funnel"),_No=o(" \u2014 "),TO=a("a"),bNo=o("FunnelForTokenClassification"),vNo=o(" (Funnel Transformer model)"),FNo=l(),w4=a("li"),age=a("strong"),TNo=o("gpt2"),MNo=o(" \u2014 "),MO=a("a"),ENo=o("GPT2ForTokenClassification"),CNo=o(" (OpenAI GPT-2 model)"),wNo=l(),A4=a("li"),nge=a("strong"),ANo=o("ibert"),yNo=o(" \u2014 "),EO=a("a"),LNo=o("IBertForTokenClassification"),xNo=o(" (I-BERT model)"),$No=l(),y4=a("li"),sge=a("strong"),kNo=o("layoutlm"),SNo=o(" \u2014 "),CO=a("a"),RNo=o("LayoutLMForTokenClassification"),PNo=o(" (LayoutLM model)"),BNo=l(),L4=a("li"),lge=a("strong"),INo=o("layoutlmv2"),qNo=o(" \u2014 "),wO=a("a"),NNo=o("LayoutLMv2ForTokenClassification"),jNo=o(" (LayoutLMv2 model)"),DNo=l(),x4=a("li"),ige=a("strong"),GNo=o("longformer"),ONo=o(" \u2014 "),AO=a("a"),VNo=o("LongformerForTokenClassification"),XNo=o(" (Longformer model)"),zNo=l(),$4=a("li"),dge=a("strong"),WNo=o("megatron-bert"),QNo=o(" \u2014 "),yO=a("a"),HNo=o("MegatronBertForTokenClassification"),UNo=o(" (MegatronBert model)"),JNo=l(),k4=a("li"),cge=a("strong"),YNo=o("mobilebert"),KNo=o(" \u2014 "),LO=a("a"),ZNo=o("MobileBertForTokenClassification"),ejo=o(" (MobileBERT model)"),ojo=l(),S4=a("li"),fge=a("strong"),rjo=o("mpnet"),tjo=o(" \u2014 "),xO=a("a"),ajo=o("MPNetForTokenClassification"),njo=o(" (MPNet model)"),sjo=l(),R4=a("li"),mge=a("strong"),ljo=o("nystromformer"),ijo=o(" \u2014 "),$O=a("a"),djo=o("NystromformerForTokenClassification"),cjo=o(" (Nystromformer model)"),fjo=l(),P4=a("li"),gge=a("strong"),mjo=o("qdqbert"),gjo=o(" \u2014 "),kO=a("a"),hjo=o("QDQBertForTokenClassification"),pjo=o(" (QDQBert model)"),ujo=l(),B4=a("li"),hge=a("strong"),_jo=o("rembert"),bjo=o(" \u2014 "),SO=a("a"),vjo=o("RemBertForTokenClassification"),Fjo=o(" (RemBERT model)"),Tjo=l(),I4=a("li"),pge=a("strong"),Mjo=o("roberta"),Ejo=o(" \u2014 "),RO=a("a"),Cjo=o("RobertaForTokenClassification"),wjo=o(" (RoBERTa model)"),Ajo=l(),q4=a("li"),uge=a("strong"),yjo=o("roformer"),Ljo=o(" \u2014 "),PO=a("a"),xjo=o("RoFormerForTokenClassification"),$jo=o(" (RoFormer model)"),kjo=l(),N4=a("li"),_ge=a("strong"),Sjo=o("squeezebert"),Rjo=o(" \u2014 "),BO=a("a"),Pjo=o("SqueezeBertForTokenClassification"),Bjo=o(" (SqueezeBERT model)"),Ijo=l(),j4=a("li"),bge=a("strong"),qjo=o("xlm"),Njo=o(" \u2014 "),IO=a("a"),jjo=o("XLMForTokenClassification"),Djo=o(" (XLM model)"),Gjo=l(),D4=a("li"),vge=a("strong"),Ojo=o("xlm-roberta"),Vjo=o(" \u2014 "),qO=a("a"),Xjo=o("XLMRobertaForTokenClassification"),zjo=o(" (XLM-RoBERTa model)"),Wjo=l(),G4=a("li"),Fge=a("strong"),Qjo=o("xlm-roberta-xl"),Hjo=o(" \u2014 "),NO=a("a"),Ujo=o("XLMRobertaXLForTokenClassification"),Jjo=o(" (XLM-RoBERTa-XL model)"),Yjo=l(),O4=a("li"),Tge=a("strong"),Kjo=o("xlnet"),Zjo=o(" \u2014 "),jO=a("a"),eDo=o("XLNetForTokenClassification"),oDo=o(" (XLNet model)"),rDo=l(),V4=a("li"),Mge=a("strong"),tDo=o("yoso"),aDo=o(" \u2014 "),DO=a("a"),nDo=o("YosoForTokenClassification"),sDo=o(" (YOSO model)"),lDo=l(),X4=a("p"),iDo=o("The model is set in evaluation mode by default using "),Ege=a("code"),dDo=o("model.eval()"),cDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=a("code"),fDo=o("model.train()"),mDo=l(),F(z4.$$.fragment),tqe=l(),Ki=a("h2"),W4=a("a"),wge=a("span"),F(Cy.$$.fragment),gDo=l(),Age=a("span"),hDo=o("AutoModelForQuestionAnswering"),aqe=l(),qo=a("div"),F(wy.$$.fragment),pDo=l(),Zi=a("p"),uDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=a("a"),_Do=o("from_pretrained()"),bDo=o(" class method or the "),OO=a("a"),vDo=o("from_config()"),FDo=o(` class
method.`),TDo=l(),Ay=a("p"),MDo=o("This class cannot be instantiated directly using "),yge=a("code"),EDo=o("__init__()"),CDo=o(" (throws an error)."),wDo=l(),mt=a("div"),F(yy.$$.fragment),ADo=l(),Lge=a("p"),yDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LDo=l(),ed=a("p"),xDo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),$Do=o("not"),kDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),SDo=o("from_pretrained()"),RDo=o(" to load the model weights."),PDo=l(),F(Q4.$$.fragment),BDo=l(),no=a("div"),F(Ly.$$.fragment),IDo=l(),$ge=a("p"),qDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NDo=l(),qa=a("p"),jDo=o("The model class to instantiate is selected based on the "),kge=a("code"),DDo=o("model_type"),GDo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),ODo=o("pretrained_model_name_or_path"),VDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(":"),WDo=l(),V=a("ul"),H4=a("li"),Pge=a("strong"),QDo=o("albert"),HDo=o(" \u2014 "),XO=a("a"),UDo=o("AlbertForQuestionAnswering"),JDo=o(" (ALBERT model)"),YDo=l(),U4=a("li"),Bge=a("strong"),KDo=o("bart"),ZDo=o(" \u2014 "),zO=a("a"),eGo=o("BartForQuestionAnswering"),oGo=o(" (BART model)"),rGo=l(),J4=a("li"),Ige=a("strong"),tGo=o("bert"),aGo=o(" \u2014 "),WO=a("a"),nGo=o("BertForQuestionAnswering"),sGo=o(" (BERT model)"),lGo=l(),Y4=a("li"),qge=a("strong"),iGo=o("big_bird"),dGo=o(" \u2014 "),QO=a("a"),cGo=o("BigBirdForQuestionAnswering"),fGo=o(" (BigBird model)"),mGo=l(),K4=a("li"),Nge=a("strong"),gGo=o("bigbird_pegasus"),hGo=o(" \u2014 "),HO=a("a"),pGo=o("BigBirdPegasusForQuestionAnswering"),uGo=o(" (BigBirdPegasus model)"),_Go=l(),Z4=a("li"),jge=a("strong"),bGo=o("camembert"),vGo=o(" \u2014 "),UO=a("a"),FGo=o("CamembertForQuestionAnswering"),TGo=o(" (CamemBERT model)"),MGo=l(),e5=a("li"),Dge=a("strong"),EGo=o("canine"),CGo=o(" \u2014 "),JO=a("a"),wGo=o("CanineForQuestionAnswering"),AGo=o(" (Canine model)"),yGo=l(),o5=a("li"),Gge=a("strong"),LGo=o("convbert"),xGo=o(" \u2014 "),YO=a("a"),$Go=o("ConvBertForQuestionAnswering"),kGo=o(" (ConvBERT model)"),SGo=l(),r5=a("li"),Oge=a("strong"),RGo=o("data2vec-text"),PGo=o(" \u2014 "),KO=a("a"),BGo=o("Data2VecTextForQuestionAnswering"),IGo=o(" (Data2VecText model)"),qGo=l(),t5=a("li"),Vge=a("strong"),NGo=o("deberta"),jGo=o(" \u2014 "),ZO=a("a"),DGo=o("DebertaForQuestionAnswering"),GGo=o(" (DeBERTa model)"),OGo=l(),a5=a("li"),Xge=a("strong"),VGo=o("deberta-v2"),XGo=o(" \u2014 "),eV=a("a"),zGo=o("DebertaV2ForQuestionAnswering"),WGo=o(" (DeBERTa-v2 model)"),QGo=l(),n5=a("li"),zge=a("strong"),HGo=o("distilbert"),UGo=o(" \u2014 "),oV=a("a"),JGo=o("DistilBertForQuestionAnswering"),YGo=o(" (DistilBERT model)"),KGo=l(),s5=a("li"),Wge=a("strong"),ZGo=o("electra"),eOo=o(" \u2014 "),rV=a("a"),oOo=o("ElectraForQuestionAnswering"),rOo=o(" (ELECTRA model)"),tOo=l(),l5=a("li"),Qge=a("strong"),aOo=o("flaubert"),nOo=o(" \u2014 "),tV=a("a"),sOo=o("FlaubertForQuestionAnsweringSimple"),lOo=o(" (FlauBERT model)"),iOo=l(),i5=a("li"),Hge=a("strong"),dOo=o("fnet"),cOo=o(" \u2014 "),aV=a("a"),fOo=o("FNetForQuestionAnswering"),mOo=o(" (FNet model)"),gOo=l(),d5=a("li"),Uge=a("strong"),hOo=o("funnel"),pOo=o(" \u2014 "),nV=a("a"),uOo=o("FunnelForQuestionAnswering"),_Oo=o(" (Funnel Transformer model)"),bOo=l(),c5=a("li"),Jge=a("strong"),vOo=o("gptj"),FOo=o(" \u2014 "),sV=a("a"),TOo=o("GPTJForQuestionAnswering"),MOo=o(" (GPT-J model)"),EOo=l(),f5=a("li"),Yge=a("strong"),COo=o("ibert"),wOo=o(" \u2014 "),lV=a("a"),AOo=o("IBertForQuestionAnswering"),yOo=o(" (I-BERT model)"),LOo=l(),m5=a("li"),Kge=a("strong"),xOo=o("layoutlmv2"),$Oo=o(" \u2014 "),iV=a("a"),kOo=o("LayoutLMv2ForQuestionAnswering"),SOo=o(" (LayoutLMv2 model)"),ROo=l(),g5=a("li"),Zge=a("strong"),POo=o("led"),BOo=o(" \u2014 "),dV=a("a"),IOo=o("LEDForQuestionAnswering"),qOo=o(" (LED model)"),NOo=l(),h5=a("li"),ehe=a("strong"),jOo=o("longformer"),DOo=o(" \u2014 "),cV=a("a"),GOo=o("LongformerForQuestionAnswering"),OOo=o(" (Longformer model)"),VOo=l(),p5=a("li"),ohe=a("strong"),XOo=o("lxmert"),zOo=o(" \u2014 "),fV=a("a"),WOo=o("LxmertForQuestionAnswering"),QOo=o(" (LXMERT model)"),HOo=l(),u5=a("li"),rhe=a("strong"),UOo=o("mbart"),JOo=o(" \u2014 "),mV=a("a"),YOo=o("MBartForQuestionAnswering"),KOo=o(" (mBART model)"),ZOo=l(),_5=a("li"),the=a("strong"),eVo=o("megatron-bert"),oVo=o(" \u2014 "),gV=a("a"),rVo=o("MegatronBertForQuestionAnswering"),tVo=o(" (MegatronBert model)"),aVo=l(),b5=a("li"),ahe=a("strong"),nVo=o("mobilebert"),sVo=o(" \u2014 "),hV=a("a"),lVo=o("MobileBertForQuestionAnswering"),iVo=o(" (MobileBERT model)"),dVo=l(),v5=a("li"),nhe=a("strong"),cVo=o("mpnet"),fVo=o(" \u2014 "),pV=a("a"),mVo=o("MPNetForQuestionAnswering"),gVo=o(" (MPNet model)"),hVo=l(),F5=a("li"),she=a("strong"),pVo=o("nystromformer"),uVo=o(" \u2014 "),uV=a("a"),_Vo=o("NystromformerForQuestionAnswering"),bVo=o(" (Nystromformer model)"),vVo=l(),T5=a("li"),lhe=a("strong"),FVo=o("qdqbert"),TVo=o(" \u2014 "),_V=a("a"),MVo=o("QDQBertForQuestionAnswering"),EVo=o(" (QDQBert model)"),CVo=l(),M5=a("li"),ihe=a("strong"),wVo=o("reformer"),AVo=o(" \u2014 "),bV=a("a"),yVo=o("ReformerForQuestionAnswering"),LVo=o(" (Reformer model)"),xVo=l(),E5=a("li"),dhe=a("strong"),$Vo=o("rembert"),kVo=o(" \u2014 "),vV=a("a"),SVo=o("RemBertForQuestionAnswering"),RVo=o(" (RemBERT model)"),PVo=l(),C5=a("li"),che=a("strong"),BVo=o("roberta"),IVo=o(" \u2014 "),FV=a("a"),qVo=o("RobertaForQuestionAnswering"),NVo=o(" (RoBERTa model)"),jVo=l(),w5=a("li"),fhe=a("strong"),DVo=o("roformer"),GVo=o(" \u2014 "),TV=a("a"),OVo=o("RoFormerForQuestionAnswering"),VVo=o(" (RoFormer model)"),XVo=l(),A5=a("li"),mhe=a("strong"),zVo=o("splinter"),WVo=o(" \u2014 "),MV=a("a"),QVo=o("SplinterForQuestionAnswering"),HVo=o(" (Splinter model)"),UVo=l(),y5=a("li"),ghe=a("strong"),JVo=o("squeezebert"),YVo=o(" \u2014 "),EV=a("a"),KVo=o("SqueezeBertForQuestionAnswering"),ZVo=o(" (SqueezeBERT model)"),eXo=l(),L5=a("li"),hhe=a("strong"),oXo=o("xlm"),rXo=o(" \u2014 "),CV=a("a"),tXo=o("XLMForQuestionAnsweringSimple"),aXo=o(" (XLM model)"),nXo=l(),x5=a("li"),phe=a("strong"),sXo=o("xlm-roberta"),lXo=o(" \u2014 "),wV=a("a"),iXo=o("XLMRobertaForQuestionAnswering"),dXo=o(" (XLM-RoBERTa model)"),cXo=l(),$5=a("li"),uhe=a("strong"),fXo=o("xlm-roberta-xl"),mXo=o(" \u2014 "),AV=a("a"),gXo=o("XLMRobertaXLForQuestionAnswering"),hXo=o(" (XLM-RoBERTa-XL model)"),pXo=l(),k5=a("li"),_he=a("strong"),uXo=o("xlnet"),_Xo=o(" \u2014 "),yV=a("a"),bXo=o("XLNetForQuestionAnsweringSimple"),vXo=o(" (XLNet model)"),FXo=l(),S5=a("li"),bhe=a("strong"),TXo=o("yoso"),MXo=o(" \u2014 "),LV=a("a"),EXo=o("YosoForQuestionAnswering"),CXo=o(" (YOSO model)"),wXo=l(),R5=a("p"),AXo=o("The model is set in evaluation mode by default using "),vhe=a("code"),yXo=o("model.eval()"),LXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),xXo=o("model.train()"),$Xo=l(),F(P5.$$.fragment),nqe=l(),od=a("h2"),B5=a("a"),The=a("span"),F(xy.$$.fragment),kXo=l(),Mhe=a("span"),SXo=o("AutoModelForTableQuestionAnswering"),sqe=l(),No=a("div"),F($y.$$.fragment),RXo=l(),rd=a("p"),PXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=a("a"),BXo=o("from_pretrained()"),IXo=o(" class method or the "),$V=a("a"),qXo=o("from_config()"),NXo=o(` class
method.`),jXo=l(),ky=a("p"),DXo=o("This class cannot be instantiated directly using "),Ehe=a("code"),GXo=o("__init__()"),OXo=o(" (throws an error)."),VXo=l(),gt=a("div"),F(Sy.$$.fragment),XXo=l(),Che=a("p"),zXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),WXo=l(),td=a("p"),QXo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),HXo=o("not"),UXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),JXo=o("from_pretrained()"),YXo=o(" to load the model weights."),KXo=l(),F(I5.$$.fragment),ZXo=l(),so=a("div"),F(Ry.$$.fragment),ezo=l(),Ahe=a("p"),ozo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rzo=l(),Na=a("p"),tzo=o("The model class to instantiate is selected based on the "),yhe=a("code"),azo=o("model_type"),nzo=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),szo=o("pretrained_model_name_or_path"),lzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=a("code"),izo=o("pretrained_model_name_or_path"),dzo=o(":"),czo=l(),$he=a("ul"),q5=a("li"),khe=a("strong"),fzo=o("tapas"),mzo=o(" \u2014 "),SV=a("a"),gzo=o("TapasForQuestionAnswering"),hzo=o(" (TAPAS model)"),pzo=l(),N5=a("p"),uzo=o("The model is set in evaluation mode by default using "),She=a("code"),_zo=o("model.eval()"),bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),vzo=o("model.train()"),Fzo=l(),F(j5.$$.fragment),lqe=l(),ad=a("h2"),D5=a("a"),Phe=a("span"),F(Py.$$.fragment),Tzo=l(),Bhe=a("span"),Mzo=o("AutoModelForImageClassification"),iqe=l(),jo=a("div"),F(By.$$.fragment),Ezo=l(),nd=a("p"),Czo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=a("a"),wzo=o("from_pretrained()"),Azo=o(" class method or the "),PV=a("a"),yzo=o("from_config()"),Lzo=o(` class
method.`),xzo=l(),Iy=a("p"),$zo=o("This class cannot be instantiated directly using "),Ihe=a("code"),kzo=o("__init__()"),Szo=o(" (throws an error)."),Rzo=l(),ht=a("div"),F(qy.$$.fragment),Pzo=l(),qhe=a("p"),Bzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Izo=l(),sd=a("p"),qzo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),Nzo=o("not"),jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),Dzo=o("from_pretrained()"),Gzo=o(" to load the model weights."),Ozo=l(),F(G5.$$.fragment),Vzo=l(),lo=a("div"),F(Ny.$$.fragment),Xzo=l(),jhe=a("p"),zzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wzo=l(),ja=a("p"),Qzo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),Hzo=o("model_type"),Uzo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),Jzo=o("pretrained_model_name_or_path"),Yzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),Kzo=o("pretrained_model_name_or_path"),Zzo=o(":"),eWo=l(),Fe=a("ul"),O5=a("li"),Vhe=a("strong"),oWo=o("beit"),rWo=o(" \u2014 "),IV=a("a"),tWo=o("BeitForImageClassification"),aWo=o(" (BEiT model)"),nWo=l(),V5=a("li"),Xhe=a("strong"),sWo=o("convnext"),lWo=o(" \u2014 "),qV=a("a"),iWo=o("ConvNextForImageClassification"),dWo=o(" (ConvNext model)"),cWo=l(),X5=a("li"),zhe=a("strong"),fWo=o("data2vec-vision"),mWo=o(" \u2014 "),NV=a("a"),gWo=o("Data2VecVisionForImageClassification"),hWo=o(" (Data2VecVision model)"),pWo=l(),Bs=a("li"),Whe=a("strong"),uWo=o("deit"),_Wo=o(" \u2014 "),jV=a("a"),bWo=o("DeiTForImageClassification"),vWo=o(" or "),DV=a("a"),FWo=o("DeiTForImageClassificationWithTeacher"),TWo=o(" (DeiT model)"),MWo=l(),z5=a("li"),Qhe=a("strong"),EWo=o("imagegpt"),CWo=o(" \u2014 "),GV=a("a"),wWo=o("ImageGPTForImageClassification"),AWo=o(" (ImageGPT model)"),yWo=l(),pt=a("li"),Hhe=a("strong"),LWo=o("perceiver"),xWo=o(" \u2014 "),OV=a("a"),$Wo=o("PerceiverForImageClassificationLearned"),kWo=o(" or "),VV=a("a"),SWo=o("PerceiverForImageClassificationFourier"),RWo=o(" or "),XV=a("a"),PWo=o("PerceiverForImageClassificationConvProcessing"),BWo=o(" (Perceiver model)"),IWo=l(),W5=a("li"),Uhe=a("strong"),qWo=o("poolformer"),NWo=o(" \u2014 "),zV=a("a"),jWo=o("PoolFormerForImageClassification"),DWo=o(" (PoolFormer model)"),GWo=l(),Q5=a("li"),Jhe=a("strong"),OWo=o("regnet"),VWo=o(" \u2014 "),WV=a("a"),XWo=o("RegNetForImageClassification"),zWo=o(" (RegNet model)"),WWo=l(),H5=a("li"),Yhe=a("strong"),QWo=o("resnet"),HWo=o(" \u2014 "),QV=a("a"),UWo=o("ResNetForImageClassification"),JWo=o(" (ResNet model)"),YWo=l(),U5=a("li"),Khe=a("strong"),KWo=o("segformer"),ZWo=o(" \u2014 "),HV=a("a"),eQo=o("SegformerForImageClassification"),oQo=o(" (SegFormer model)"),rQo=l(),J5=a("li"),Zhe=a("strong"),tQo=o("swin"),aQo=o(" \u2014 "),UV=a("a"),nQo=o("SwinForImageClassification"),sQo=o(" (Swin model)"),lQo=l(),Y5=a("li"),epe=a("strong"),iQo=o("van"),dQo=o(" \u2014 "),JV=a("a"),cQo=o("VanForImageClassification"),fQo=o(" (VAN model)"),mQo=l(),K5=a("li"),ope=a("strong"),gQo=o("vit"),hQo=o(" \u2014 "),YV=a("a"),pQo=o("ViTForImageClassification"),uQo=o(" (ViT model)"),_Qo=l(),Z5=a("p"),bQo=o("The model is set in evaluation mode by default using "),rpe=a("code"),vQo=o("model.eval()"),FQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),TQo=o("model.train()"),MQo=l(),F(ev.$$.fragment),dqe=l(),ld=a("h2"),ov=a("a"),ape=a("span"),F(jy.$$.fragment),EQo=l(),npe=a("span"),CQo=o("AutoModelForVision2Seq"),cqe=l(),Do=a("div"),F(Dy.$$.fragment),wQo=l(),id=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=a("a"),yQo=o("from_pretrained()"),LQo=o(" class method or the "),ZV=a("a"),xQo=o("from_config()"),$Qo=o(` class
method.`),kQo=l(),Gy=a("p"),SQo=o("This class cannot be instantiated directly using "),spe=a("code"),RQo=o("__init__()"),PQo=o(" (throws an error)."),BQo=l(),ut=a("div"),F(Oy.$$.fragment),IQo=l(),lpe=a("p"),qQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NQo=l(),dd=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),F(rv.$$.fragment),zQo=l(),io=a("div"),F(Vy.$$.fragment),WQo=l(),dpe=a("p"),QQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HQo=l(),Da=a("p"),UQo=o("The model class to instantiate is selected based on the "),cpe=a("code"),JQo=o("model_type"),YQo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),KQo=o("pretrained_model_name_or_path"),ZQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),eHo=o("pretrained_model_name_or_path"),oHo=o(":"),rHo=l(),gpe=a("ul"),tv=a("li"),hpe=a("strong"),tHo=o("vision-encoder-decoder"),aHo=o(" \u2014 "),oX=a("a"),nHo=o("VisionEncoderDecoderModel"),sHo=o(" (Vision Encoder decoder model)"),lHo=l(),av=a("p"),iHo=o("The model is set in evaluation mode by default using "),ppe=a("code"),dHo=o("model.eval()"),cHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),fHo=o("model.train()"),mHo=l(),F(nv.$$.fragment),fqe=l(),cd=a("h2"),sv=a("a"),_pe=a("span"),F(Xy.$$.fragment),gHo=l(),bpe=a("span"),hHo=o("AutoModelForAudioClassification"),mqe=l(),Go=a("div"),F(zy.$$.fragment),pHo=l(),fd=a("p"),uHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=a("a"),_Ho=o("from_pretrained()"),bHo=o(" class method or the "),tX=a("a"),vHo=o("from_config()"),FHo=o(` class
method.`),THo=l(),Wy=a("p"),MHo=o("This class cannot be instantiated directly using "),vpe=a("code"),EHo=o("__init__()"),CHo=o(" (throws an error)."),wHo=l(),_t=a("div"),F(Qy.$$.fragment),AHo=l(),Fpe=a("p"),yHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),LHo=l(),md=a("p"),xHo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),$Ho=o("not"),kHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),SHo=o("from_pretrained()"),RHo=o(" to load the model weights."),PHo=l(),F(lv.$$.fragment),BHo=l(),co=a("div"),F(Hy.$$.fragment),IHo=l(),Mpe=a("p"),qHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NHo=l(),Ga=a("p"),jHo=o("The model class to instantiate is selected based on the "),Epe=a("code"),DHo=o("model_type"),GHo=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),OHo=o("pretrained_model_name_or_path"),VHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),XHo=o("pretrained_model_name_or_path"),zHo=o(":"),WHo=l(),ke=a("ul"),iv=a("li"),Ape=a("strong"),QHo=o("data2vec-audio"),HHo=o(" \u2014 "),nX=a("a"),UHo=o("Data2VecAudioForSequenceClassification"),JHo=o(" (Data2VecAudio model)"),YHo=l(),dv=a("li"),ype=a("strong"),KHo=o("hubert"),ZHo=o(" \u2014 "),sX=a("a"),eUo=o("HubertForSequenceClassification"),oUo=o(" (Hubert model)"),rUo=l(),cv=a("li"),Lpe=a("strong"),tUo=o("sew"),aUo=o(" \u2014 "),lX=a("a"),nUo=o("SEWForSequenceClassification"),sUo=o(" (SEW model)"),lUo=l(),fv=a("li"),xpe=a("strong"),iUo=o("sew-d"),dUo=o(" \u2014 "),iX=a("a"),cUo=o("SEWDForSequenceClassification"),fUo=o(" (SEW-D model)"),mUo=l(),mv=a("li"),$pe=a("strong"),gUo=o("unispeech"),hUo=o(" \u2014 "),dX=a("a"),pUo=o("UniSpeechForSequenceClassification"),uUo=o(" (UniSpeech model)"),_Uo=l(),gv=a("li"),kpe=a("strong"),bUo=o("unispeech-sat"),vUo=o(" \u2014 "),cX=a("a"),FUo=o("UniSpeechSatForSequenceClassification"),TUo=o(" (UniSpeechSat model)"),MUo=l(),hv=a("li"),Spe=a("strong"),EUo=o("wav2vec2"),CUo=o(" \u2014 "),fX=a("a"),wUo=o("Wav2Vec2ForSequenceClassification"),AUo=o(" (Wav2Vec2 model)"),yUo=l(),pv=a("li"),Rpe=a("strong"),LUo=o("wav2vec2-conformer"),xUo=o(" \u2014 "),mX=a("a"),$Uo=o("Wav2Vec2ConformerForSequenceClassification"),kUo=o(" (Wav2Vec2-Conformer model)"),SUo=l(),uv=a("li"),Ppe=a("strong"),RUo=o("wavlm"),PUo=o(" \u2014 "),gX=a("a"),BUo=o("WavLMForSequenceClassification"),IUo=o(" (WavLM model)"),qUo=l(),_v=a("p"),NUo=o("The model is set in evaluation mode by default using "),Bpe=a("code"),jUo=o("model.eval()"),DUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),GUo=o("model.train()"),OUo=l(),F(bv.$$.fragment),gqe=l(),gd=a("h2"),vv=a("a"),qpe=a("span"),F(Uy.$$.fragment),VUo=l(),Npe=a("span"),XUo=o("AutoModelForAudioFrameClassification"),hqe=l(),Oo=a("div"),F(Jy.$$.fragment),zUo=l(),hd=a("p"),WUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=a("a"),QUo=o("from_pretrained()"),HUo=o(" class method or the "),pX=a("a"),UUo=o("from_config()"),JUo=o(` class
method.`),YUo=l(),Yy=a("p"),KUo=o("This class cannot be instantiated directly using "),jpe=a("code"),ZUo=o("__init__()"),eJo=o(" (throws an error)."),oJo=l(),bt=a("div"),F(Ky.$$.fragment),rJo=l(),Dpe=a("p"),tJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),aJo=l(),pd=a("p"),nJo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),sJo=o("not"),lJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),iJo=o("from_pretrained()"),dJo=o(" to load the model weights."),cJo=l(),F(Fv.$$.fragment),fJo=l(),fo=a("div"),F(Zy.$$.fragment),mJo=l(),Ope=a("p"),gJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hJo=l(),Oa=a("p"),pJo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),uJo=o("model_type"),_Jo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),FJo=o("pretrained_model_name_or_path"),TJo=o(":"),MJo=l(),Kr=a("ul"),Tv=a("li"),Wpe=a("strong"),EJo=o("data2vec-audio"),CJo=o(" \u2014 "),_X=a("a"),wJo=o("Data2VecAudioForAudioFrameClassification"),AJo=o(" (Data2VecAudio model)"),yJo=l(),Mv=a("li"),Qpe=a("strong"),LJo=o("unispeech-sat"),xJo=o(" \u2014 "),bX=a("a"),$Jo=o("UniSpeechSatForAudioFrameClassification"),kJo=o(" (UniSpeechSat model)"),SJo=l(),Ev=a("li"),Hpe=a("strong"),RJo=o("wav2vec2"),PJo=o(" \u2014 "),vX=a("a"),BJo=o("Wav2Vec2ForAudioFrameClassification"),IJo=o(" (Wav2Vec2 model)"),qJo=l(),Cv=a("li"),Upe=a("strong"),NJo=o("wav2vec2-conformer"),jJo=o(" \u2014 "),FX=a("a"),DJo=o("Wav2Vec2ConformerForAudioFrameClassification"),GJo=o(" (Wav2Vec2-Conformer model)"),OJo=l(),wv=a("li"),Jpe=a("strong"),VJo=o("wavlm"),XJo=o(" \u2014 "),TX=a("a"),zJo=o("WavLMForAudioFrameClassification"),WJo=o(" (WavLM model)"),QJo=l(),Av=a("p"),HJo=o("The model is set in evaluation mode by default using "),Ype=a("code"),UJo=o("model.eval()"),JJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),YJo=o("model.train()"),KJo=l(),F(yv.$$.fragment),pqe=l(),ud=a("h2"),Lv=a("a"),Zpe=a("span"),F(eL.$$.fragment),ZJo=l(),eue=a("span"),eYo=o("AutoModelForCTC"),uqe=l(),Vo=a("div"),F(oL.$$.fragment),oYo=l(),_d=a("p"),rYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=a("a"),tYo=o("from_pretrained()"),aYo=o(" class method or the "),EX=a("a"),nYo=o("from_config()"),sYo=o(` class
method.`),lYo=l(),rL=a("p"),iYo=o("This class cannot be instantiated directly using "),oue=a("code"),dYo=o("__init__()"),cYo=o(" (throws an error)."),fYo=l(),vt=a("div"),F(tL.$$.fragment),mYo=l(),rue=a("p"),gYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),hYo=l(),bd=a("p"),pYo=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),uYo=o("not"),_Yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),bYo=o("from_pretrained()"),vYo=o(" to load the model weights."),FYo=l(),F(xv.$$.fragment),TYo=l(),mo=a("div"),F(aL.$$.fragment),MYo=l(),aue=a("p"),EYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CYo=l(),Va=a("p"),wYo=o("The model class to instantiate is selected based on the "),nue=a("code"),AYo=o("model_type"),yYo=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),LYo=o("pretrained_model_name_or_path"),xYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),$Yo=o("pretrained_model_name_or_path"),kYo=o(":"),SYo=l(),Se=a("ul"),$v=a("li"),iue=a("strong"),RYo=o("data2vec-audio"),PYo=o(" \u2014 "),wX=a("a"),BYo=o("Data2VecAudioForCTC"),IYo=o(" (Data2VecAudio model)"),qYo=l(),kv=a("li"),due=a("strong"),NYo=o("hubert"),jYo=o(" \u2014 "),AX=a("a"),DYo=o("HubertForCTC"),GYo=o(" (Hubert model)"),OYo=l(),Sv=a("li"),cue=a("strong"),VYo=o("sew"),XYo=o(" \u2014 "),yX=a("a"),zYo=o("SEWForCTC"),WYo=o(" (SEW model)"),QYo=l(),Rv=a("li"),fue=a("strong"),HYo=o("sew-d"),UYo=o(" \u2014 "),LX=a("a"),JYo=o("SEWDForCTC"),YYo=o(" (SEW-D model)"),KYo=l(),Pv=a("li"),mue=a("strong"),ZYo=o("unispeech"),eKo=o(" \u2014 "),xX=a("a"),oKo=o("UniSpeechForCTC"),rKo=o(" (UniSpeech model)"),tKo=l(),Bv=a("li"),gue=a("strong"),aKo=o("unispeech-sat"),nKo=o(" \u2014 "),$X=a("a"),sKo=o("UniSpeechSatForCTC"),lKo=o(" (UniSpeechSat model)"),iKo=l(),Iv=a("li"),hue=a("strong"),dKo=o("wav2vec2"),cKo=o(" \u2014 "),kX=a("a"),fKo=o("Wav2Vec2ForCTC"),mKo=o(" (Wav2Vec2 model)"),gKo=l(),qv=a("li"),pue=a("strong"),hKo=o("wav2vec2-conformer"),pKo=o(" \u2014 "),SX=a("a"),uKo=o("Wav2Vec2ConformerForCTC"),_Ko=o(" (Wav2Vec2-Conformer model)"),bKo=l(),Nv=a("li"),uue=a("strong"),vKo=o("wavlm"),FKo=o(" \u2014 "),RX=a("a"),TKo=o("WavLMForCTC"),MKo=o(" (WavLM model)"),EKo=l(),jv=a("p"),CKo=o("The model is set in evaluation mode by default using "),_ue=a("code"),wKo=o("model.eval()"),AKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),yKo=o("model.train()"),LKo=l(),F(Dv.$$.fragment),_qe=l(),vd=a("h2"),Gv=a("a"),vue=a("span"),F(nL.$$.fragment),xKo=l(),Fue=a("span"),$Ko=o("AutoModelForSpeechSeq2Seq"),bqe=l(),Xo=a("div"),F(sL.$$.fragment),kKo=l(),Fd=a("p"),SKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=a("a"),RKo=o("from_pretrained()"),PKo=o(" class method or the "),BX=a("a"),BKo=o("from_config()"),IKo=o(` class
method.`),qKo=l(),lL=a("p"),NKo=o("This class cannot be instantiated directly using "),Tue=a("code"),jKo=o("__init__()"),DKo=o(" (throws an error)."),GKo=l(),Ft=a("div"),F(iL.$$.fragment),OKo=l(),Mue=a("p"),VKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),XKo=l(),Td=a("p"),zKo=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),WKo=o("not"),QKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),HKo=o("from_pretrained()"),UKo=o(" to load the model weights."),JKo=l(),F(Ov.$$.fragment),YKo=l(),go=a("div"),F(dL.$$.fragment),KKo=l(),Cue=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eZo=l(),Xa=a("p"),oZo=o("The model class to instantiate is selected based on the "),wue=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),cL=a("ul"),Vv=a("li"),Lue=a("strong"),dZo=o("speech-encoder-decoder"),cZo=o(" \u2014 "),qX=a("a"),fZo=o("SpeechEncoderDecoderModel"),mZo=o(" (Speech Encoder decoder model)"),gZo=l(),Xv=a("li"),xue=a("strong"),hZo=o("speech_to_text"),pZo=o(" \u2014 "),NX=a("a"),uZo=o("Speech2TextForConditionalGeneration"),_Zo=o(" (Speech2Text model)"),bZo=l(),zv=a("p"),vZo=o("The model is set in evaluation mode by default using "),$ue=a("code"),FZo=o("model.eval()"),TZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=a("code"),MZo=o("model.train()"),EZo=l(),F(Wv.$$.fragment),vqe=l(),Md=a("h2"),Qv=a("a"),Sue=a("span"),F(fL.$$.fragment),CZo=l(),Rue=a("span"),wZo=o("AutoModelForAudioXVector"),Fqe=l(),zo=a("div"),F(mL.$$.fragment),AZo=l(),Ed=a("p"),yZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=a("a"),LZo=o("from_pretrained()"),xZo=o(" class method or the "),DX=a("a"),$Zo=o("from_config()"),kZo=o(` class
method.`),SZo=l(),gL=a("p"),RZo=o("This class cannot be instantiated directly using "),Pue=a("code"),PZo=o("__init__()"),BZo=o(" (throws an error)."),IZo=l(),Tt=a("div"),F(hL.$$.fragment),qZo=l(),Bue=a("p"),NZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jZo=l(),Cd=a("p"),DZo=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),GZo=o("not"),OZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),VZo=o("from_pretrained()"),XZo=o(" to load the model weights."),zZo=l(),F(Hv.$$.fragment),WZo=l(),ho=a("div"),F(pL.$$.fragment),QZo=l(),que=a("p"),HZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UZo=l(),za=a("p"),JZo=o("The model class to instantiate is selected based on the "),Nue=a("code"),YZo=o("model_type"),KZo=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),ZZo=o("pretrained_model_name_or_path"),eer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(":"),ter=l(),Zr=a("ul"),Uv=a("li"),Gue=a("strong"),aer=o("data2vec-audio"),ner=o(" \u2014 "),OX=a("a"),ser=o("Data2VecAudioForXVector"),ler=o(" (Data2VecAudio model)"),ier=l(),Jv=a("li"),Oue=a("strong"),der=o("unispeech-sat"),cer=o(" \u2014 "),VX=a("a"),fer=o("UniSpeechSatForXVector"),mer=o(" (UniSpeechSat model)"),ger=l(),Yv=a("li"),Vue=a("strong"),her=o("wav2vec2"),per=o(" \u2014 "),XX=a("a"),uer=o("Wav2Vec2ForXVector"),_er=o(" (Wav2Vec2 model)"),ber=l(),Kv=a("li"),Xue=a("strong"),ver=o("wav2vec2-conformer"),Fer=o(" \u2014 "),zX=a("a"),Ter=o("Wav2Vec2ConformerForXVector"),Mer=o(" (Wav2Vec2-Conformer model)"),Eer=l(),Zv=a("li"),zue=a("strong"),Cer=o("wavlm"),wer=o(" \u2014 "),WX=a("a"),Aer=o("WavLMForXVector"),yer=o(" (WavLM model)"),Ler=l(),eF=a("p"),xer=o("The model is set in evaluation mode by default using "),Wue=a("code"),$er=o("model.eval()"),ker=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),Ser=o("model.train()"),Rer=l(),F(oF.$$.fragment),Tqe=l(),wd=a("h2"),rF=a("a"),Hue=a("span"),F(uL.$$.fragment),Per=l(),Uue=a("span"),Ber=o("AutoModelForMaskedImageModeling"),Mqe=l(),Wo=a("div"),F(_L.$$.fragment),Ier=l(),Ad=a("p"),qer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=a("a"),Ner=o("from_pretrained()"),jer=o(" class method or the "),HX=a("a"),Der=o("from_config()"),Ger=o(` class
method.`),Oer=l(),bL=a("p"),Ver=o("This class cannot be instantiated directly using "),Jue=a("code"),Xer=o("__init__()"),zer=o(" (throws an error)."),Wer=l(),Mt=a("div"),F(vL.$$.fragment),Qer=l(),Yue=a("p"),Her=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Uer=l(),yd=a("p"),Jer=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),Yer=o("not"),Ker=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),Zer=o("from_pretrained()"),eor=o(" to load the model weights."),oor=l(),F(tF.$$.fragment),ror=l(),po=a("div"),F(FL.$$.fragment),tor=l(),Zue=a("p"),aor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nor=l(),Wa=a("p"),sor=o("The model class to instantiate is selected based on the "),e_e=a("code"),lor=o("model_type"),ior=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),dor=o("pretrained_model_name_or_path"),cor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),mor=o("pretrained_model_name_or_path"),gor=o(":"),hor=l(),Ld=a("ul"),aF=a("li"),t_e=a("strong"),por=o("deit"),uor=o(" \u2014 "),JX=a("a"),_or=o("DeiTForMaskedImageModeling"),bor=o(" (DeiT model)"),vor=l(),nF=a("li"),a_e=a("strong"),For=o("swin"),Tor=o(" \u2014 "),YX=a("a"),Mor=o("SwinForMaskedImageModeling"),Eor=o(" (Swin model)"),Cor=l(),sF=a("li"),n_e=a("strong"),wor=o("vit"),Aor=o(" \u2014 "),KX=a("a"),yor=o("ViTForMaskedImageModeling"),Lor=o(" (ViT model)"),xor=l(),lF=a("p"),$or=o("The model is set in evaluation mode by default using "),s_e=a("code"),kor=o("model.eval()"),Sor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),Ror=o("model.train()"),Por=l(),F(iF.$$.fragment),Eqe=l(),xd=a("h2"),dF=a("a"),i_e=a("span"),F(TL.$$.fragment),Bor=l(),d_e=a("span"),Ior=o("AutoModelForObjectDetection"),Cqe=l(),Qo=a("div"),F(ML.$$.fragment),qor=l(),$d=a("p"),Nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=a("a"),jor=o("from_pretrained()"),Dor=o(" class method or the "),ez=a("a"),Gor=o("from_config()"),Oor=o(` class
method.`),Vor=l(),EL=a("p"),Xor=o("This class cannot be instantiated directly using "),c_e=a("code"),zor=o("__init__()"),Wor=o(" (throws an error)."),Qor=l(),Et=a("div"),F(CL.$$.fragment),Hor=l(),f_e=a("p"),Uor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Jor=l(),kd=a("p"),Yor=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),Kor=o("not"),Zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),err=o("from_pretrained()"),orr=o(" to load the model weights."),rrr=l(),F(cF.$$.fragment),trr=l(),uo=a("div"),F(wL.$$.fragment),arr=l(),g_e=a("p"),nrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),srr=l(),Qa=a("p"),lrr=o("The model class to instantiate is selected based on the "),h_e=a("code"),irr=o("model_type"),drr=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),crr=o("pretrained_model_name_or_path"),frr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),mrr=o("pretrained_model_name_or_path"),grr=o(":"),hrr=l(),AL=a("ul"),fF=a("li"),__e=a("strong"),prr=o("detr"),urr=o(" \u2014 "),rz=a("a"),_rr=o("DetrForObjectDetection"),brr=o(" (DETR model)"),vrr=l(),mF=a("li"),b_e=a("strong"),Frr=o("yolos"),Trr=o(" \u2014 "),tz=a("a"),Mrr=o("YolosForObjectDetection"),Err=o(" (YOLOS model)"),Crr=l(),gF=a("p"),wrr=o("The model is set in evaluation mode by default using "),v_e=a("code"),Arr=o("model.eval()"),yrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),Lrr=o("model.train()"),xrr=l(),F(hF.$$.fragment),wqe=l(),Sd=a("h2"),pF=a("a"),T_e=a("span"),F(yL.$$.fragment),$rr=l(),M_e=a("span"),krr=o("AutoModelForImageSegmentation"),Aqe=l(),Ho=a("div"),F(LL.$$.fragment),Srr=l(),Rd=a("p"),Rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=a("a"),Prr=o("from_pretrained()"),Brr=o(" class method or the "),nz=a("a"),Irr=o("from_config()"),qrr=o(` class
method.`),Nrr=l(),xL=a("p"),jrr=o("This class cannot be instantiated directly using "),E_e=a("code"),Drr=o("__init__()"),Grr=o(" (throws an error)."),Orr=l(),Ct=a("div"),F($L.$$.fragment),Vrr=l(),C_e=a("p"),Xrr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zrr=l(),Pd=a("p"),Wrr=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),Qrr=o("not"),Hrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),Urr=o("from_pretrained()"),Jrr=o(" to load the model weights."),Yrr=l(),F(uF.$$.fragment),Krr=l(),_o=a("div"),F(kL.$$.fragment),Zrr=l(),A_e=a("p"),etr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),otr=l(),Ha=a("p"),rtr=o("The model class to instantiate is selected based on the "),y_e=a("code"),ttr=o("model_type"),atr=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),ntr=o("pretrained_model_name_or_path"),str=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(":"),dtr=l(),$_e=a("ul"),_F=a("li"),k_e=a("strong"),ctr=o("detr"),ftr=o(" \u2014 "),lz=a("a"),mtr=o("DetrForSegmentation"),gtr=o(" (DETR model)"),htr=l(),bF=a("p"),ptr=o("The model is set in evaluation mode by default using "),S_e=a("code"),utr=o("model.eval()"),_tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),btr=o("model.train()"),vtr=l(),F(vF.$$.fragment),yqe=l(),Bd=a("h2"),FF=a("a"),P_e=a("span"),F(SL.$$.fragment),Ftr=l(),B_e=a("span"),Ttr=o("AutoModelForSemanticSegmentation"),Lqe=l(),Uo=a("div"),F(RL.$$.fragment),Mtr=l(),Id=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=a("a"),Ctr=o("from_pretrained()"),wtr=o(" class method or the "),dz=a("a"),Atr=o("from_config()"),ytr=o(` class
method.`),Ltr=l(),PL=a("p"),xtr=o("This class cannot be instantiated directly using "),I_e=a("code"),$tr=o("__init__()"),ktr=o(" (throws an error)."),Str=l(),wt=a("div"),F(BL.$$.fragment),Rtr=l(),q_e=a("p"),Ptr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Btr=l(),qd=a("p"),Itr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),qtr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),jtr=o("from_pretrained()"),Dtr=o(" to load the model weights."),Gtr=l(),F(TF.$$.fragment),Otr=l(),bo=a("div"),F(IL.$$.fragment),Vtr=l(),j_e=a("p"),Xtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ztr=l(),Ua=a("p"),Wtr=o("The model class to instantiate is selected based on the "),D_e=a("code"),Qtr=o("model_type"),Htr=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),Utr=o("pretrained_model_name_or_path"),Jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(":"),Ztr=l(),Ja=a("ul"),MF=a("li"),V_e=a("strong"),ear=o("beit"),oar=o(" \u2014 "),fz=a("a"),rar=o("BeitForSemanticSegmentation"),tar=o(" (BEiT model)"),aar=l(),EF=a("li"),X_e=a("strong"),nar=o("data2vec-vision"),sar=o(" \u2014 "),mz=a("a"),lar=o("Data2VecVisionForSemanticSegmentation"),iar=o(" (Data2VecVision model)"),dar=l(),CF=a("li"),z_e=a("strong"),car=o("dpt"),far=o(" \u2014 "),gz=a("a"),mar=o("DPTForSemanticSegmentation"),gar=o(" (DPT model)"),har=l(),wF=a("li"),W_e=a("strong"),par=o("segformer"),uar=o(" \u2014 "),hz=a("a"),_ar=o("SegformerForSemanticSegmentation"),bar=o(" (SegFormer model)"),Far=l(),AF=a("p"),Tar=o("The model is set in evaluation mode by default using "),Q_e=a("code"),Mar=o("model.eval()"),Ear=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),Car=o("model.train()"),war=l(),F(yF.$$.fragment),xqe=l(),Nd=a("h2"),LF=a("a"),U_e=a("span"),F(qL.$$.fragment),Aar=l(),J_e=a("span"),yar=o("AutoModelForInstanceSegmentation"),$qe=l(),Jo=a("div"),F(NL.$$.fragment),Lar=l(),jd=a("p"),xar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pz=a("a"),$ar=o("from_pretrained()"),kar=o(" class method or the "),uz=a("a"),Sar=o("from_config()"),Rar=o(` class
method.`),Par=l(),jL=a("p"),Bar=o("This class cannot be instantiated directly using "),Y_e=a("code"),Iar=o("__init__()"),qar=o(" (throws an error)."),Nar=l(),At=a("div"),F(DL.$$.fragment),jar=l(),K_e=a("p"),Dar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Gar=l(),Dd=a("p"),Oar=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),Var=o("not"),Xar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),zar=o("from_pretrained()"),War=o(" to load the model weights."),Qar=l(),F(xF.$$.fragment),Har=l(),vo=a("div"),F(GL.$$.fragment),Uar=l(),e2e=a("p"),Jar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Yar=l(),Ya=a("p"),Kar=o("The model class to instantiate is selected based on the "),o2e=a("code"),Zar=o("model_type"),enr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),onr=o("pretrained_model_name_or_path"),rnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),tnr=o("pretrained_model_name_or_path"),anr=o(":"),nnr=l(),a2e=a("ul"),$F=a("li"),n2e=a("strong"),snr=o("maskformer"),lnr=o(" \u2014 "),bz=a("a"),inr=o("MaskFormerForInstanceSegmentation"),dnr=o(" (MaskFormer model)"),cnr=l(),kF=a("p"),fnr=o("The model is set in evaluation mode by default using "),s2e=a("code"),mnr=o("model.eval()"),gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=a("code"),hnr=o("model.train()"),pnr=l(),F(SF.$$.fragment),kqe=l(),Gd=a("h2"),RF=a("a"),i2e=a("span"),F(OL.$$.fragment),unr=l(),d2e=a("span"),_nr=o("TFAutoModel"),Sqe=l(),Yo=a("div"),F(VL.$$.fragment),bnr=l(),Od=a("p"),vnr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" class method or the "),Fz=a("a"),Mnr=o("from_config()"),Enr=o(` class
method.`),Cnr=l(),XL=a("p"),wnr=o("This class cannot be instantiated directly using "),c2e=a("code"),Anr=o("__init__()"),ynr=o(" (throws an error)."),Lnr=l(),yt=a("div"),F(zL.$$.fragment),xnr=l(),f2e=a("p"),$nr=o("Instantiates one of the base model classes of the library from a configuration."),knr=l(),Vd=a("p"),Snr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),Rnr=o("not"),Pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),Bnr=o("from_pretrained()"),Inr=o(" to load the model weights."),qnr=l(),F(PF.$$.fragment),Nnr=l(),wr=a("div"),F(WL.$$.fragment),jnr=l(),g2e=a("p"),Dnr=o("Instantiate one of the base model classes of the library from a pretrained model."),Gnr=l(),Ka=a("p"),Onr=o("The model class to instantiate is selected based on the "),h2e=a("code"),Vnr=o("model_type"),Xnr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),znr=o("pretrained_model_name_or_path"),Wnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(":"),Unr=l(),N=a("ul"),BF=a("li"),_2e=a("strong"),Jnr=o("albert"),Ynr=o(" \u2014 "),Mz=a("a"),Knr=o("TFAlbertModel"),Znr=o(" (ALBERT model)"),esr=l(),IF=a("li"),b2e=a("strong"),osr=o("bart"),rsr=o(" \u2014 "),Ez=a("a"),tsr=o("TFBartModel"),asr=o(" (BART model)"),nsr=l(),qF=a("li"),v2e=a("strong"),ssr=o("bert"),lsr=o(" \u2014 "),Cz=a("a"),isr=o("TFBertModel"),dsr=o(" (BERT model)"),csr=l(),NF=a("li"),F2e=a("strong"),fsr=o("blenderbot"),msr=o(" \u2014 "),wz=a("a"),gsr=o("TFBlenderbotModel"),hsr=o(" (Blenderbot model)"),psr=l(),jF=a("li"),T2e=a("strong"),usr=o("blenderbot-small"),_sr=o(" \u2014 "),Az=a("a"),bsr=o("TFBlenderbotSmallModel"),vsr=o(" (BlenderbotSmall model)"),Fsr=l(),DF=a("li"),M2e=a("strong"),Tsr=o("camembert"),Msr=o(" \u2014 "),yz=a("a"),Esr=o("TFCamembertModel"),Csr=o(" (CamemBERT model)"),wsr=l(),GF=a("li"),E2e=a("strong"),Asr=o("clip"),ysr=o(" \u2014 "),Lz=a("a"),Lsr=o("TFCLIPModel"),xsr=o(" (CLIP model)"),$sr=l(),OF=a("li"),C2e=a("strong"),ksr=o("convbert"),Ssr=o(" \u2014 "),xz=a("a"),Rsr=o("TFConvBertModel"),Psr=o(" (ConvBERT model)"),Bsr=l(),VF=a("li"),w2e=a("strong"),Isr=o("convnext"),qsr=o(" \u2014 "),$z=a("a"),Nsr=o("TFConvNextModel"),jsr=o(" (ConvNext model)"),Dsr=l(),XF=a("li"),A2e=a("strong"),Gsr=o("ctrl"),Osr=o(" \u2014 "),kz=a("a"),Vsr=o("TFCTRLModel"),Xsr=o(" (CTRL model)"),zsr=l(),zF=a("li"),y2e=a("strong"),Wsr=o("data2vec-vision"),Qsr=o(" \u2014 "),Sz=a("a"),Hsr=o("TFData2VecVisionModel"),Usr=o(" (Data2VecVision model)"),Jsr=l(),WF=a("li"),L2e=a("strong"),Ysr=o("deberta"),Ksr=o(" \u2014 "),Rz=a("a"),Zsr=o("TFDebertaModel"),elr=o(" (DeBERTa model)"),olr=l(),QF=a("li"),x2e=a("strong"),rlr=o("deberta-v2"),tlr=o(" \u2014 "),Pz=a("a"),alr=o("TFDebertaV2Model"),nlr=o(" (DeBERTa-v2 model)"),slr=l(),HF=a("li"),$2e=a("strong"),llr=o("distilbert"),ilr=o(" \u2014 "),Bz=a("a"),dlr=o("TFDistilBertModel"),clr=o(" (DistilBERT model)"),flr=l(),UF=a("li"),k2e=a("strong"),mlr=o("dpr"),glr=o(" \u2014 "),Iz=a("a"),hlr=o("TFDPRQuestionEncoder"),plr=o(" (DPR model)"),ulr=l(),JF=a("li"),S2e=a("strong"),_lr=o("electra"),blr=o(" \u2014 "),qz=a("a"),vlr=o("TFElectraModel"),Flr=o(" (ELECTRA model)"),Tlr=l(),YF=a("li"),R2e=a("strong"),Mlr=o("flaubert"),Elr=o(" \u2014 "),Nz=a("a"),Clr=o("TFFlaubertModel"),wlr=o(" (FlauBERT model)"),Alr=l(),Is=a("li"),P2e=a("strong"),ylr=o("funnel"),Llr=o(" \u2014 "),jz=a("a"),xlr=o("TFFunnelModel"),$lr=o(" or "),Dz=a("a"),klr=o("TFFunnelBaseModel"),Slr=o(" (Funnel Transformer model)"),Rlr=l(),KF=a("li"),B2e=a("strong"),Plr=o("gpt2"),Blr=o(" \u2014 "),Gz=a("a"),Ilr=o("TFGPT2Model"),qlr=o(" (OpenAI GPT-2 model)"),Nlr=l(),ZF=a("li"),I2e=a("strong"),jlr=o("gptj"),Dlr=o(" \u2014 "),Oz=a("a"),Glr=o("TFGPTJModel"),Olr=o(" (GPT-J model)"),Vlr=l(),eT=a("li"),q2e=a("strong"),Xlr=o("hubert"),zlr=o(" \u2014 "),Vz=a("a"),Wlr=o("TFHubertModel"),Qlr=o(" (Hubert model)"),Hlr=l(),oT=a("li"),N2e=a("strong"),Ulr=o("layoutlm"),Jlr=o(" \u2014 "),Xz=a("a"),Ylr=o("TFLayoutLMModel"),Klr=o(" (LayoutLM model)"),Zlr=l(),rT=a("li"),j2e=a("strong"),eir=o("led"),oir=o(" \u2014 "),zz=a("a"),rir=o("TFLEDModel"),tir=o(" (LED model)"),air=l(),tT=a("li"),D2e=a("strong"),nir=o("longformer"),sir=o(" \u2014 "),Wz=a("a"),lir=o("TFLongformerModel"),iir=o(" (Longformer model)"),dir=l(),aT=a("li"),G2e=a("strong"),cir=o("lxmert"),fir=o(" \u2014 "),Qz=a("a"),mir=o("TFLxmertModel"),gir=o(" (LXMERT model)"),hir=l(),nT=a("li"),O2e=a("strong"),pir=o("marian"),uir=o(" \u2014 "),Hz=a("a"),_ir=o("TFMarianModel"),bir=o(" (Marian model)"),vir=l(),sT=a("li"),V2e=a("strong"),Fir=o("mbart"),Tir=o(" \u2014 "),Uz=a("a"),Mir=o("TFMBartModel"),Eir=o(" (mBART model)"),Cir=l(),lT=a("li"),X2e=a("strong"),wir=o("mobilebert"),Air=o(" \u2014 "),Jz=a("a"),yir=o("TFMobileBertModel"),Lir=o(" (MobileBERT model)"),xir=l(),iT=a("li"),z2e=a("strong"),$ir=o("mpnet"),kir=o(" \u2014 "),Yz=a("a"),Sir=o("TFMPNetModel"),Rir=o(" (MPNet model)"),Pir=l(),dT=a("li"),W2e=a("strong"),Bir=o("mt5"),Iir=o(" \u2014 "),Kz=a("a"),qir=o("TFMT5Model"),Nir=o(" (mT5 model)"),jir=l(),cT=a("li"),Q2e=a("strong"),Dir=o("openai-gpt"),Gir=o(" \u2014 "),Zz=a("a"),Oir=o("TFOpenAIGPTModel"),Vir=o(" (OpenAI GPT model)"),Xir=l(),fT=a("li"),H2e=a("strong"),zir=o("pegasus"),Wir=o(" \u2014 "),eW=a("a"),Qir=o("TFPegasusModel"),Hir=o(" (Pegasus model)"),Uir=l(),mT=a("li"),U2e=a("strong"),Jir=o("rembert"),Yir=o(" \u2014 "),oW=a("a"),Kir=o("TFRemBertModel"),Zir=o(" (RemBERT model)"),edr=l(),gT=a("li"),J2e=a("strong"),odr=o("roberta"),rdr=o(" \u2014 "),rW=a("a"),tdr=o("TFRobertaModel"),adr=o(" (RoBERTa model)"),ndr=l(),hT=a("li"),Y2e=a("strong"),sdr=o("roformer"),ldr=o(" \u2014 "),tW=a("a"),idr=o("TFRoFormerModel"),ddr=o(" (RoFormer model)"),cdr=l(),pT=a("li"),K2e=a("strong"),fdr=o("speech_to_text"),mdr=o(" \u2014 "),aW=a("a"),gdr=o("TFSpeech2TextModel"),hdr=o(" (Speech2Text model)"),pdr=l(),uT=a("li"),Z2e=a("strong"),udr=o("swin"),_dr=o(" \u2014 "),nW=a("a"),bdr=o("TFSwinModel"),vdr=o(" (Swin model)"),Fdr=l(),_T=a("li"),e1e=a("strong"),Tdr=o("t5"),Mdr=o(" \u2014 "),sW=a("a"),Edr=o("TFT5Model"),Cdr=o(" (T5 model)"),wdr=l(),bT=a("li"),o1e=a("strong"),Adr=o("tapas"),ydr=o(" \u2014 "),lW=a("a"),Ldr=o("TFTapasModel"),xdr=o(" (TAPAS model)"),$dr=l(),vT=a("li"),r1e=a("strong"),kdr=o("transfo-xl"),Sdr=o(" \u2014 "),iW=a("a"),Rdr=o("TFTransfoXLModel"),Pdr=o(" (Transformer-XL model)"),Bdr=l(),FT=a("li"),t1e=a("strong"),Idr=o("vit"),qdr=o(" \u2014 "),dW=a("a"),Ndr=o("TFViTModel"),jdr=o(" (ViT model)"),Ddr=l(),TT=a("li"),a1e=a("strong"),Gdr=o("vit_mae"),Odr=o(" \u2014 "),cW=a("a"),Vdr=o("TFViTMAEModel"),Xdr=o(" (ViTMAE model)"),zdr=l(),MT=a("li"),n1e=a("strong"),Wdr=o("wav2vec2"),Qdr=o(" \u2014 "),fW=a("a"),Hdr=o("TFWav2Vec2Model"),Udr=o(" (Wav2Vec2 model)"),Jdr=l(),ET=a("li"),s1e=a("strong"),Ydr=o("xlm"),Kdr=o(" \u2014 "),mW=a("a"),Zdr=o("TFXLMModel"),ecr=o(" (XLM model)"),ocr=l(),CT=a("li"),l1e=a("strong"),rcr=o("xlm-roberta"),tcr=o(" \u2014 "),gW=a("a"),acr=o("TFXLMRobertaModel"),ncr=o(" (XLM-RoBERTa model)"),scr=l(),wT=a("li"),i1e=a("strong"),lcr=o("xlnet"),icr=o(" \u2014 "),hW=a("a"),dcr=o("TFXLNetModel"),ccr=o(" (XLNet model)"),fcr=l(),F(AT.$$.fragment),Rqe=l(),Xd=a("h2"),yT=a("a"),d1e=a("span"),F(QL.$$.fragment),mcr=l(),c1e=a("span"),gcr=o("TFAutoModelForPreTraining"),Pqe=l(),Ko=a("div"),F(HL.$$.fragment),hcr=l(),zd=a("p"),pcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=a("a"),ucr=o("from_pretrained()"),_cr=o(" class method or the "),uW=a("a"),bcr=o("from_config()"),vcr=o(` class
method.`),Fcr=l(),UL=a("p"),Tcr=o("This class cannot be instantiated directly using "),f1e=a("code"),Mcr=o("__init__()"),Ecr=o(" (throws an error)."),Ccr=l(),Lt=a("div"),F(JL.$$.fragment),wcr=l(),m1e=a("p"),Acr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ycr=l(),Wd=a("p"),Lcr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),xcr=o("not"),$cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),kcr=o("from_pretrained()"),Scr=o(" to load the model weights."),Rcr=l(),F(LT.$$.fragment),Pcr=l(),Ar=a("div"),F(YL.$$.fragment),Bcr=l(),h1e=a("p"),Icr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qcr=l(),Za=a("p"),Ncr=o("The model class to instantiate is selected based on the "),p1e=a("code"),jcr=o("model_type"),Dcr=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),Gcr=o("pretrained_model_name_or_path"),Ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Vcr=o("pretrained_model_name_or_path"),Xcr=o(":"),zcr=l(),se=a("ul"),xT=a("li"),b1e=a("strong"),Wcr=o("albert"),Qcr=o(" \u2014 "),bW=a("a"),Hcr=o("TFAlbertForPreTraining"),Ucr=o(" (ALBERT model)"),Jcr=l(),$T=a("li"),v1e=a("strong"),Ycr=o("bart"),Kcr=o(" \u2014 "),vW=a("a"),Zcr=o("TFBartForConditionalGeneration"),efr=o(" (BART model)"),ofr=l(),kT=a("li"),F1e=a("strong"),rfr=o("bert"),tfr=o(" \u2014 "),FW=a("a"),afr=o("TFBertForPreTraining"),nfr=o(" (BERT model)"),sfr=l(),ST=a("li"),T1e=a("strong"),lfr=o("camembert"),ifr=o(" \u2014 "),TW=a("a"),dfr=o("TFCamembertForMaskedLM"),cfr=o(" (CamemBERT model)"),ffr=l(),RT=a("li"),M1e=a("strong"),mfr=o("ctrl"),gfr=o(" \u2014 "),MW=a("a"),hfr=o("TFCTRLLMHeadModel"),pfr=o(" (CTRL model)"),ufr=l(),PT=a("li"),E1e=a("strong"),_fr=o("distilbert"),bfr=o(" \u2014 "),EW=a("a"),vfr=o("TFDistilBertForMaskedLM"),Ffr=o(" (DistilBERT model)"),Tfr=l(),BT=a("li"),C1e=a("strong"),Mfr=o("electra"),Efr=o(" \u2014 "),CW=a("a"),Cfr=o("TFElectraForPreTraining"),wfr=o(" (ELECTRA model)"),Afr=l(),IT=a("li"),w1e=a("strong"),yfr=o("flaubert"),Lfr=o(" \u2014 "),wW=a("a"),xfr=o("TFFlaubertWithLMHeadModel"),$fr=o(" (FlauBERT model)"),kfr=l(),qT=a("li"),A1e=a("strong"),Sfr=o("funnel"),Rfr=o(" \u2014 "),AW=a("a"),Pfr=o("TFFunnelForPreTraining"),Bfr=o(" (Funnel Transformer model)"),Ifr=l(),NT=a("li"),y1e=a("strong"),qfr=o("gpt2"),Nfr=o(" \u2014 "),yW=a("a"),jfr=o("TFGPT2LMHeadModel"),Dfr=o(" (OpenAI GPT-2 model)"),Gfr=l(),jT=a("li"),L1e=a("strong"),Ofr=o("layoutlm"),Vfr=o(" \u2014 "),LW=a("a"),Xfr=o("TFLayoutLMForMaskedLM"),zfr=o(" (LayoutLM model)"),Wfr=l(),DT=a("li"),x1e=a("strong"),Qfr=o("lxmert"),Hfr=o(" \u2014 "),xW=a("a"),Ufr=o("TFLxmertForPreTraining"),Jfr=o(" (LXMERT model)"),Yfr=l(),GT=a("li"),$1e=a("strong"),Kfr=o("mobilebert"),Zfr=o(" \u2014 "),$W=a("a"),emr=o("TFMobileBertForPreTraining"),omr=o(" (MobileBERT model)"),rmr=l(),OT=a("li"),k1e=a("strong"),tmr=o("mpnet"),amr=o(" \u2014 "),kW=a("a"),nmr=o("TFMPNetForMaskedLM"),smr=o(" (MPNet model)"),lmr=l(),VT=a("li"),S1e=a("strong"),imr=o("openai-gpt"),dmr=o(" \u2014 "),SW=a("a"),cmr=o("TFOpenAIGPTLMHeadModel"),fmr=o(" (OpenAI GPT model)"),mmr=l(),XT=a("li"),R1e=a("strong"),gmr=o("roberta"),hmr=o(" \u2014 "),RW=a("a"),pmr=o("TFRobertaForMaskedLM"),umr=o(" (RoBERTa model)"),_mr=l(),zT=a("li"),P1e=a("strong"),bmr=o("t5"),vmr=o(" \u2014 "),PW=a("a"),Fmr=o("TFT5ForConditionalGeneration"),Tmr=o(" (T5 model)"),Mmr=l(),WT=a("li"),B1e=a("strong"),Emr=o("tapas"),Cmr=o(" \u2014 "),BW=a("a"),wmr=o("TFTapasForMaskedLM"),Amr=o(" (TAPAS model)"),ymr=l(),QT=a("li"),I1e=a("strong"),Lmr=o("transfo-xl"),xmr=o(" \u2014 "),IW=a("a"),$mr=o("TFTransfoXLLMHeadModel"),kmr=o(" (Transformer-XL model)"),Smr=l(),HT=a("li"),q1e=a("strong"),Rmr=o("vit_mae"),Pmr=o(" \u2014 "),qW=a("a"),Bmr=o("TFViTMAEForPreTraining"),Imr=o(" (ViTMAE model)"),qmr=l(),UT=a("li"),N1e=a("strong"),Nmr=o("xlm"),jmr=o(" \u2014 "),NW=a("a"),Dmr=o("TFXLMWithLMHeadModel"),Gmr=o(" (XLM model)"),Omr=l(),JT=a("li"),j1e=a("strong"),Vmr=o("xlm-roberta"),Xmr=o(" \u2014 "),jW=a("a"),zmr=o("TFXLMRobertaForMaskedLM"),Wmr=o(" (XLM-RoBERTa model)"),Qmr=l(),YT=a("li"),D1e=a("strong"),Hmr=o("xlnet"),Umr=o(" \u2014 "),DW=a("a"),Jmr=o("TFXLNetLMHeadModel"),Ymr=o(" (XLNet model)"),Kmr=l(),F(KT.$$.fragment),Bqe=l(),Qd=a("h2"),ZT=a("a"),G1e=a("span"),F(KL.$$.fragment),Zmr=l(),O1e=a("span"),egr=o("TFAutoModelForCausalLM"),Iqe=l(),Zo=a("div"),F(ZL.$$.fragment),ogr=l(),Hd=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GW=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),OW=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),e8=a("p"),igr=o("This class cannot be instantiated directly using "),V1e=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),fgr=l(),xt=a("div"),F(o8.$$.fragment),mgr=l(),X1e=a("p"),ggr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hgr=l(),Ud=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),ugr=o("not"),_gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(e7.$$.fragment),Tgr=l(),yr=a("div"),F(r8.$$.fragment),Mgr=l(),W1e=a("p"),Egr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cgr=l(),en=a("p"),wgr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),Agr=o("model_type"),ygr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),Lgr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),Te=a("ul"),o7=a("li"),J1e=a("strong"),Rgr=o("bert"),Pgr=o(" \u2014 "),XW=a("a"),Bgr=o("TFBertLMHeadModel"),Igr=o(" (BERT model)"),qgr=l(),r7=a("li"),Y1e=a("strong"),Ngr=o("camembert"),jgr=o(" \u2014 "),zW=a("a"),Dgr=o("TFCamembertForCausalLM"),Ggr=o(" (CamemBERT model)"),Ogr=l(),t7=a("li"),K1e=a("strong"),Vgr=o("ctrl"),Xgr=o(" \u2014 "),WW=a("a"),zgr=o("TFCTRLLMHeadModel"),Wgr=o(" (CTRL model)"),Qgr=l(),a7=a("li"),Z1e=a("strong"),Hgr=o("gpt2"),Ugr=o(" \u2014 "),QW=a("a"),Jgr=o("TFGPT2LMHeadModel"),Ygr=o(" (OpenAI GPT-2 model)"),Kgr=l(),n7=a("li"),ebe=a("strong"),Zgr=o("gptj"),ehr=o(" \u2014 "),HW=a("a"),ohr=o("TFGPTJForCausalLM"),rhr=o(" (GPT-J model)"),thr=l(),s7=a("li"),obe=a("strong"),ahr=o("openai-gpt"),nhr=o(" \u2014 "),UW=a("a"),shr=o("TFOpenAIGPTLMHeadModel"),lhr=o(" (OpenAI GPT model)"),ihr=l(),l7=a("li"),rbe=a("strong"),dhr=o("rembert"),chr=o(" \u2014 "),JW=a("a"),fhr=o("TFRemBertForCausalLM"),mhr=o(" (RemBERT model)"),ghr=l(),i7=a("li"),tbe=a("strong"),hhr=o("roberta"),phr=o(" \u2014 "),YW=a("a"),uhr=o("TFRobertaForCausalLM"),_hr=o(" (RoBERTa model)"),bhr=l(),d7=a("li"),abe=a("strong"),vhr=o("roformer"),Fhr=o(" \u2014 "),KW=a("a"),Thr=o("TFRoFormerForCausalLM"),Mhr=o(" (RoFormer model)"),Ehr=l(),c7=a("li"),nbe=a("strong"),Chr=o("transfo-xl"),whr=o(" \u2014 "),ZW=a("a"),Ahr=o("TFTransfoXLLMHeadModel"),yhr=o(" (Transformer-XL model)"),Lhr=l(),f7=a("li"),sbe=a("strong"),xhr=o("xlm"),$hr=o(" \u2014 "),eQ=a("a"),khr=o("TFXLMWithLMHeadModel"),Shr=o(" (XLM model)"),Rhr=l(),m7=a("li"),lbe=a("strong"),Phr=o("xlnet"),Bhr=o(" \u2014 "),oQ=a("a"),Ihr=o("TFXLNetLMHeadModel"),qhr=o(" (XLNet model)"),Nhr=l(),F(g7.$$.fragment),qqe=l(),Jd=a("h2"),h7=a("a"),ibe=a("span"),F(t8.$$.fragment),jhr=l(),dbe=a("span"),Dhr=o("TFAutoModelForImageClassification"),Nqe=l(),er=a("div"),F(a8.$$.fragment),Ghr=l(),Yd=a("p"),Ohr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=a("a"),Vhr=o("from_pretrained()"),Xhr=o(" class method or the "),tQ=a("a"),zhr=o("from_config()"),Whr=o(` class
method.`),Qhr=l(),n8=a("p"),Hhr=o("This class cannot be instantiated directly using "),cbe=a("code"),Uhr=o("__init__()"),Jhr=o(" (throws an error)."),Yhr=l(),$t=a("div"),F(s8.$$.fragment),Khr=l(),fbe=a("p"),Zhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),epr=l(),Kd=a("p"),opr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),rpr=o("not"),tpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),apr=o("from_pretrained()"),npr=o(" to load the model weights."),spr=l(),F(p7.$$.fragment),lpr=l(),Lr=a("div"),F(l8.$$.fragment),ipr=l(),gbe=a("p"),dpr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cpr=l(),on=a("p"),fpr=o("The model class to instantiate is selected based on the "),hbe=a("code"),mpr=o("model_type"),gpr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),hpr=o("pretrained_model_name_or_path"),ppr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),upr=o("pretrained_model_name_or_path"),_pr=o(":"),bpr=l(),rn=a("ul"),u7=a("li"),_be=a("strong"),vpr=o("convnext"),Fpr=o(" \u2014 "),nQ=a("a"),Tpr=o("TFConvNextForImageClassification"),Mpr=o(" (ConvNext model)"),Epr=l(),_7=a("li"),bbe=a("strong"),Cpr=o("data2vec-vision"),wpr=o(" \u2014 "),sQ=a("a"),Apr=o("TFData2VecVisionForImageClassification"),ypr=o(" (Data2VecVision model)"),Lpr=l(),b7=a("li"),vbe=a("strong"),xpr=o("swin"),$pr=o(" \u2014 "),lQ=a("a"),kpr=o("TFSwinForImageClassification"),Spr=o(" (Swin model)"),Rpr=l(),v7=a("li"),Fbe=a("strong"),Ppr=o("vit"),Bpr=o(" \u2014 "),iQ=a("a"),Ipr=o("TFViTForImageClassification"),qpr=o(" (ViT model)"),Npr=l(),F(F7.$$.fragment),jqe=l(),Zd=a("h2"),T7=a("a"),Tbe=a("span"),F(i8.$$.fragment),jpr=l(),Mbe=a("span"),Dpr=o("TFAutoModelForMaskedLM"),Dqe=l(),or=a("div"),F(d8.$$.fragment),Gpr=l(),ec=a("p"),Opr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dQ=a("a"),Vpr=o("from_pretrained()"),Xpr=o(" class method or the "),cQ=a("a"),zpr=o("from_config()"),Wpr=o(` class
method.`),Qpr=l(),c8=a("p"),Hpr=o("This class cannot be instantiated directly using "),Ebe=a("code"),Upr=o("__init__()"),Jpr=o(" (throws an error)."),Ypr=l(),kt=a("div"),F(f8.$$.fragment),Kpr=l(),Cbe=a("p"),Zpr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eur=l(),oc=a("p"),our=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),rur=o("not"),tur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),aur=o("from_pretrained()"),nur=o(" to load the model weights."),sur=l(),F(M7.$$.fragment),lur=l(),xr=a("div"),F(m8.$$.fragment),iur=l(),Abe=a("p"),dur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cur=l(),tn=a("p"),fur=o("The model class to instantiate is selected based on the "),ybe=a("code"),mur=o("model_type"),gur=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),hur=o("pretrained_model_name_or_path"),pur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),uur=o("pretrained_model_name_or_path"),_ur=o(":"),bur=l(),ie=a("ul"),E7=a("li"),$be=a("strong"),vur=o("albert"),Fur=o(" \u2014 "),mQ=a("a"),Tur=o("TFAlbertForMaskedLM"),Mur=o(" (ALBERT model)"),Eur=l(),C7=a("li"),kbe=a("strong"),Cur=o("bert"),wur=o(" \u2014 "),gQ=a("a"),Aur=o("TFBertForMaskedLM"),yur=o(" (BERT model)"),Lur=l(),w7=a("li"),Sbe=a("strong"),xur=o("camembert"),$ur=o(" \u2014 "),hQ=a("a"),kur=o("TFCamembertForMaskedLM"),Sur=o(" (CamemBERT model)"),Rur=l(),A7=a("li"),Rbe=a("strong"),Pur=o("convbert"),Bur=o(" \u2014 "),pQ=a("a"),Iur=o("TFConvBertForMaskedLM"),qur=o(" (ConvBERT model)"),Nur=l(),y7=a("li"),Pbe=a("strong"),jur=o("deberta"),Dur=o(" \u2014 "),uQ=a("a"),Gur=o("TFDebertaForMaskedLM"),Our=o(" (DeBERTa model)"),Vur=l(),L7=a("li"),Bbe=a("strong"),Xur=o("deberta-v2"),zur=o(" \u2014 "),_Q=a("a"),Wur=o("TFDebertaV2ForMaskedLM"),Qur=o(" (DeBERTa-v2 model)"),Hur=l(),x7=a("li"),Ibe=a("strong"),Uur=o("distilbert"),Jur=o(" \u2014 "),bQ=a("a"),Yur=o("TFDistilBertForMaskedLM"),Kur=o(" (DistilBERT model)"),Zur=l(),$7=a("li"),qbe=a("strong"),e_r=o("electra"),o_r=o(" \u2014 "),vQ=a("a"),r_r=o("TFElectraForMaskedLM"),t_r=o(" (ELECTRA model)"),a_r=l(),k7=a("li"),Nbe=a("strong"),n_r=o("flaubert"),s_r=o(" \u2014 "),FQ=a("a"),l_r=o("TFFlaubertWithLMHeadModel"),i_r=o(" (FlauBERT model)"),d_r=l(),S7=a("li"),jbe=a("strong"),c_r=o("funnel"),f_r=o(" \u2014 "),TQ=a("a"),m_r=o("TFFunnelForMaskedLM"),g_r=o(" (Funnel Transformer model)"),h_r=l(),R7=a("li"),Dbe=a("strong"),p_r=o("layoutlm"),u_r=o(" \u2014 "),MQ=a("a"),__r=o("TFLayoutLMForMaskedLM"),b_r=o(" (LayoutLM model)"),v_r=l(),P7=a("li"),Gbe=a("strong"),F_r=o("longformer"),T_r=o(" \u2014 "),EQ=a("a"),M_r=o("TFLongformerForMaskedLM"),E_r=o(" (Longformer model)"),C_r=l(),B7=a("li"),Obe=a("strong"),w_r=o("mobilebert"),A_r=o(" \u2014 "),CQ=a("a"),y_r=o("TFMobileBertForMaskedLM"),L_r=o(" (MobileBERT model)"),x_r=l(),I7=a("li"),Vbe=a("strong"),$_r=o("mpnet"),k_r=o(" \u2014 "),wQ=a("a"),S_r=o("TFMPNetForMaskedLM"),R_r=o(" (MPNet model)"),P_r=l(),q7=a("li"),Xbe=a("strong"),B_r=o("rembert"),I_r=o(" \u2014 "),AQ=a("a"),q_r=o("TFRemBertForMaskedLM"),N_r=o(" (RemBERT model)"),j_r=l(),N7=a("li"),zbe=a("strong"),D_r=o("roberta"),G_r=o(" \u2014 "),yQ=a("a"),O_r=o("TFRobertaForMaskedLM"),V_r=o(" (RoBERTa model)"),X_r=l(),j7=a("li"),Wbe=a("strong"),z_r=o("roformer"),W_r=o(" \u2014 "),LQ=a("a"),Q_r=o("TFRoFormerForMaskedLM"),H_r=o(" (RoFormer model)"),U_r=l(),D7=a("li"),Qbe=a("strong"),J_r=o("tapas"),Y_r=o(" \u2014 "),xQ=a("a"),K_r=o("TFTapasForMaskedLM"),Z_r=o(" (TAPAS model)"),e2r=l(),G7=a("li"),Hbe=a("strong"),o2r=o("xlm"),r2r=o(" \u2014 "),$Q=a("a"),t2r=o("TFXLMWithLMHeadModel"),a2r=o(" (XLM model)"),n2r=l(),O7=a("li"),Ube=a("strong"),s2r=o("xlm-roberta"),l2r=o(" \u2014 "),kQ=a("a"),i2r=o("TFXLMRobertaForMaskedLM"),d2r=o(" (XLM-RoBERTa model)"),c2r=l(),F(V7.$$.fragment),Gqe=l(),rc=a("h2"),X7=a("a"),Jbe=a("span"),F(g8.$$.fragment),f2r=l(),Ybe=a("span"),m2r=o("TFAutoModelForSeq2SeqLM"),Oqe=l(),rr=a("div"),F(h8.$$.fragment),g2r=l(),tc=a("p"),h2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SQ=a("a"),p2r=o("from_pretrained()"),u2r=o(" class method or the "),RQ=a("a"),_2r=o("from_config()"),b2r=o(` class
method.`),v2r=l(),p8=a("p"),F2r=o("This class cannot be instantiated directly using "),Kbe=a("code"),T2r=o("__init__()"),M2r=o(" (throws an error)."),E2r=l(),St=a("div"),F(u8.$$.fragment),C2r=l(),Zbe=a("p"),w2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A2r=l(),ac=a("p"),y2r=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),L2r=o("not"),x2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),$2r=o("from_pretrained()"),k2r=o(" to load the model weights."),S2r=l(),F(z7.$$.fragment),R2r=l(),$r=a("div"),F(_8.$$.fragment),P2r=l(),o4e=a("p"),B2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I2r=l(),an=a("p"),q2r=o("The model class to instantiate is selected based on the "),r4e=a("code"),N2r=o("model_type"),j2r=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),D2r=o("pretrained_model_name_or_path"),G2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),O2r=o("pretrained_model_name_or_path"),V2r=o(":"),X2r=l(),ye=a("ul"),W7=a("li"),n4e=a("strong"),z2r=o("bart"),W2r=o(" \u2014 "),BQ=a("a"),Q2r=o("TFBartForConditionalGeneration"),H2r=o(" (BART model)"),U2r=l(),Q7=a("li"),s4e=a("strong"),J2r=o("blenderbot"),Y2r=o(" \u2014 "),IQ=a("a"),K2r=o("TFBlenderbotForConditionalGeneration"),Z2r=o(" (Blenderbot model)"),e1r=l(),H7=a("li"),l4e=a("strong"),o1r=o("blenderbot-small"),r1r=o(" \u2014 "),qQ=a("a"),t1r=o("TFBlenderbotSmallForConditionalGeneration"),a1r=o(" (BlenderbotSmall model)"),n1r=l(),U7=a("li"),i4e=a("strong"),s1r=o("encoder-decoder"),l1r=o(" \u2014 "),NQ=a("a"),i1r=o("TFEncoderDecoderModel"),d1r=o(" (Encoder decoder model)"),c1r=l(),J7=a("li"),d4e=a("strong"),f1r=o("led"),m1r=o(" \u2014 "),jQ=a("a"),g1r=o("TFLEDForConditionalGeneration"),h1r=o(" (LED model)"),p1r=l(),Y7=a("li"),c4e=a("strong"),u1r=o("marian"),_1r=o(" \u2014 "),DQ=a("a"),b1r=o("TFMarianMTModel"),v1r=o(" (Marian model)"),F1r=l(),K7=a("li"),f4e=a("strong"),T1r=o("mbart"),M1r=o(" \u2014 "),GQ=a("a"),E1r=o("TFMBartForConditionalGeneration"),C1r=o(" (mBART model)"),w1r=l(),Z7=a("li"),m4e=a("strong"),A1r=o("mt5"),y1r=o(" \u2014 "),OQ=a("a"),L1r=o("TFMT5ForConditionalGeneration"),x1r=o(" (mT5 model)"),$1r=l(),eM=a("li"),g4e=a("strong"),k1r=o("pegasus"),S1r=o(" \u2014 "),VQ=a("a"),R1r=o("TFPegasusForConditionalGeneration"),P1r=o(" (Pegasus model)"),B1r=l(),oM=a("li"),h4e=a("strong"),I1r=o("t5"),q1r=o(" \u2014 "),XQ=a("a"),N1r=o("TFT5ForConditionalGeneration"),j1r=o(" (T5 model)"),D1r=l(),F(rM.$$.fragment),Vqe=l(),nc=a("h2"),tM=a("a"),p4e=a("span"),F(b8.$$.fragment),G1r=l(),u4e=a("span"),O1r=o("TFAutoModelForSequenceClassification"),Xqe=l(),tr=a("div"),F(v8.$$.fragment),V1r=l(),sc=a("p"),X1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zQ=a("a"),z1r=o("from_pretrained()"),W1r=o(" class method or the "),WQ=a("a"),Q1r=o("from_config()"),H1r=o(` class
method.`),U1r=l(),F8=a("p"),J1r=o("This class cannot be instantiated directly using "),_4e=a("code"),Y1r=o("__init__()"),K1r=o(" (throws an error)."),Z1r=l(),Rt=a("div"),F(T8.$$.fragment),ebr=l(),b4e=a("p"),obr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rbr=l(),lc=a("p"),tbr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),abr=o("not"),nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),sbr=o("from_pretrained()"),lbr=o(" to load the model weights."),ibr=l(),F(aM.$$.fragment),dbr=l(),kr=a("div"),F(M8.$$.fragment),cbr=l(),F4e=a("p"),fbr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mbr=l(),nn=a("p"),gbr=o("The model class to instantiate is selected based on the "),T4e=a("code"),hbr=o("model_type"),pbr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),ubr=o("pretrained_model_name_or_path"),_br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),bbr=o("pretrained_model_name_or_path"),vbr=o(":"),Fbr=l(),ee=a("ul"),nM=a("li"),C4e=a("strong"),Tbr=o("albert"),Mbr=o(" \u2014 "),HQ=a("a"),Ebr=o("TFAlbertForSequenceClassification"),Cbr=o(" (ALBERT model)"),wbr=l(),sM=a("li"),w4e=a("strong"),Abr=o("bert"),ybr=o(" \u2014 "),UQ=a("a"),Lbr=o("TFBertForSequenceClassification"),xbr=o(" (BERT model)"),$br=l(),lM=a("li"),A4e=a("strong"),kbr=o("camembert"),Sbr=o(" \u2014 "),JQ=a("a"),Rbr=o("TFCamembertForSequenceClassification"),Pbr=o(" (CamemBERT model)"),Bbr=l(),iM=a("li"),y4e=a("strong"),Ibr=o("convbert"),qbr=o(" \u2014 "),YQ=a("a"),Nbr=o("TFConvBertForSequenceClassification"),jbr=o(" (ConvBERT model)"),Dbr=l(),dM=a("li"),L4e=a("strong"),Gbr=o("ctrl"),Obr=o(" \u2014 "),KQ=a("a"),Vbr=o("TFCTRLForSequenceClassification"),Xbr=o(" (CTRL model)"),zbr=l(),cM=a("li"),x4e=a("strong"),Wbr=o("deberta"),Qbr=o(" \u2014 "),ZQ=a("a"),Hbr=o("TFDebertaForSequenceClassification"),Ubr=o(" (DeBERTa model)"),Jbr=l(),fM=a("li"),$4e=a("strong"),Ybr=o("deberta-v2"),Kbr=o(" \u2014 "),eH=a("a"),Zbr=o("TFDebertaV2ForSequenceClassification"),e4r=o(" (DeBERTa-v2 model)"),o4r=l(),mM=a("li"),k4e=a("strong"),r4r=o("distilbert"),t4r=o(" \u2014 "),oH=a("a"),a4r=o("TFDistilBertForSequenceClassification"),n4r=o(" (DistilBERT model)"),s4r=l(),gM=a("li"),S4e=a("strong"),l4r=o("electra"),i4r=o(" \u2014 "),rH=a("a"),d4r=o("TFElectraForSequenceClassification"),c4r=o(" (ELECTRA model)"),f4r=l(),hM=a("li"),R4e=a("strong"),m4r=o("flaubert"),g4r=o(" \u2014 "),tH=a("a"),h4r=o("TFFlaubertForSequenceClassification"),p4r=o(" (FlauBERT model)"),u4r=l(),pM=a("li"),P4e=a("strong"),_4r=o("funnel"),b4r=o(" \u2014 "),aH=a("a"),v4r=o("TFFunnelForSequenceClassification"),F4r=o(" (Funnel Transformer model)"),T4r=l(),uM=a("li"),B4e=a("strong"),M4r=o("gpt2"),E4r=o(" \u2014 "),nH=a("a"),C4r=o("TFGPT2ForSequenceClassification"),w4r=o(" (OpenAI GPT-2 model)"),A4r=l(),_M=a("li"),I4e=a("strong"),y4r=o("gptj"),L4r=o(" \u2014 "),sH=a("a"),x4r=o("TFGPTJForSequenceClassification"),$4r=o(" (GPT-J model)"),k4r=l(),bM=a("li"),q4e=a("strong"),S4r=o("layoutlm"),R4r=o(" \u2014 "),lH=a("a"),P4r=o("TFLayoutLMForSequenceClassification"),B4r=o(" (LayoutLM model)"),I4r=l(),vM=a("li"),N4e=a("strong"),q4r=o("longformer"),N4r=o(" \u2014 "),iH=a("a"),j4r=o("TFLongformerForSequenceClassification"),D4r=o(" (Longformer model)"),G4r=l(),FM=a("li"),j4e=a("strong"),O4r=o("mobilebert"),V4r=o(" \u2014 "),dH=a("a"),X4r=o("TFMobileBertForSequenceClassification"),z4r=o(" (MobileBERT model)"),W4r=l(),TM=a("li"),D4e=a("strong"),Q4r=o("mpnet"),H4r=o(" \u2014 "),cH=a("a"),U4r=o("TFMPNetForSequenceClassification"),J4r=o(" (MPNet model)"),Y4r=l(),MM=a("li"),G4e=a("strong"),K4r=o("openai-gpt"),Z4r=o(" \u2014 "),fH=a("a"),e5r=o("TFOpenAIGPTForSequenceClassification"),o5r=o(" (OpenAI GPT model)"),r5r=l(),EM=a("li"),O4e=a("strong"),t5r=o("rembert"),a5r=o(" \u2014 "),mH=a("a"),n5r=o("TFRemBertForSequenceClassification"),s5r=o(" (RemBERT model)"),l5r=l(),CM=a("li"),V4e=a("strong"),i5r=o("roberta"),d5r=o(" \u2014 "),gH=a("a"),c5r=o("TFRobertaForSequenceClassification"),f5r=o(" (RoBERTa model)"),m5r=l(),wM=a("li"),X4e=a("strong"),g5r=o("roformer"),h5r=o(" \u2014 "),hH=a("a"),p5r=o("TFRoFormerForSequenceClassification"),u5r=o(" (RoFormer model)"),_5r=l(),AM=a("li"),z4e=a("strong"),b5r=o("tapas"),v5r=o(" \u2014 "),pH=a("a"),F5r=o("TFTapasForSequenceClassification"),T5r=o(" (TAPAS model)"),M5r=l(),yM=a("li"),W4e=a("strong"),E5r=o("transfo-xl"),C5r=o(" \u2014 "),uH=a("a"),w5r=o("TFTransfoXLForSequenceClassification"),A5r=o(" (Transformer-XL model)"),y5r=l(),LM=a("li"),Q4e=a("strong"),L5r=o("xlm"),x5r=o(" \u2014 "),_H=a("a"),$5r=o("TFXLMForSequenceClassification"),k5r=o(" (XLM model)"),S5r=l(),xM=a("li"),H4e=a("strong"),R5r=o("xlm-roberta"),P5r=o(" \u2014 "),bH=a("a"),B5r=o("TFXLMRobertaForSequenceClassification"),I5r=o(" (XLM-RoBERTa model)"),q5r=l(),$M=a("li"),U4e=a("strong"),N5r=o("xlnet"),j5r=o(" \u2014 "),vH=a("a"),D5r=o("TFXLNetForSequenceClassification"),G5r=o(" (XLNet model)"),O5r=l(),F(kM.$$.fragment),zqe=l(),ic=a("h2"),SM=a("a"),J4e=a("span"),F(E8.$$.fragment),V5r=l(),Y4e=a("span"),X5r=o("TFAutoModelForMultipleChoice"),Wqe=l(),ar=a("div"),F(C8.$$.fragment),z5r=l(),dc=a("p"),W5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FH=a("a"),Q5r=o("from_pretrained()"),H5r=o(" class method or the "),TH=a("a"),U5r=o("from_config()"),J5r=o(` class
method.`),Y5r=l(),w8=a("p"),K5r=o("This class cannot be instantiated directly using "),K4e=a("code"),Z5r=o("__init__()"),evr=o(" (throws an error)."),ovr=l(),Pt=a("div"),F(A8.$$.fragment),rvr=l(),Z4e=a("p"),tvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),avr=l(),cc=a("p"),nvr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),svr=o("not"),lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),ivr=o("from_pretrained()"),dvr=o(" to load the model weights."),cvr=l(),F(RM.$$.fragment),fvr=l(),Sr=a("div"),F(y8.$$.fragment),mvr=l(),o5e=a("p"),gvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hvr=l(),sn=a("p"),pvr=o("The model class to instantiate is selected based on the "),r5e=a("code"),uvr=o("model_type"),_vr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),Fvr=o("pretrained_model_name_or_path"),Tvr=o(":"),Mvr=l(),he=a("ul"),PM=a("li"),n5e=a("strong"),Evr=o("albert"),Cvr=o(" \u2014 "),EH=a("a"),wvr=o("TFAlbertForMultipleChoice"),Avr=o(" (ALBERT model)"),yvr=l(),BM=a("li"),s5e=a("strong"),Lvr=o("bert"),xvr=o(" \u2014 "),CH=a("a"),$vr=o("TFBertForMultipleChoice"),kvr=o(" (BERT model)"),Svr=l(),IM=a("li"),l5e=a("strong"),Rvr=o("camembert"),Pvr=o(" \u2014 "),wH=a("a"),Bvr=o("TFCamembertForMultipleChoice"),Ivr=o(" (CamemBERT model)"),qvr=l(),qM=a("li"),i5e=a("strong"),Nvr=o("convbert"),jvr=o(" \u2014 "),AH=a("a"),Dvr=o("TFConvBertForMultipleChoice"),Gvr=o(" (ConvBERT model)"),Ovr=l(),NM=a("li"),d5e=a("strong"),Vvr=o("distilbert"),Xvr=o(" \u2014 "),yH=a("a"),zvr=o("TFDistilBertForMultipleChoice"),Wvr=o(" (DistilBERT model)"),Qvr=l(),jM=a("li"),c5e=a("strong"),Hvr=o("electra"),Uvr=o(" \u2014 "),LH=a("a"),Jvr=o("TFElectraForMultipleChoice"),Yvr=o(" (ELECTRA model)"),Kvr=l(),DM=a("li"),f5e=a("strong"),Zvr=o("flaubert"),eFr=o(" \u2014 "),xH=a("a"),oFr=o("TFFlaubertForMultipleChoice"),rFr=o(" (FlauBERT model)"),tFr=l(),GM=a("li"),m5e=a("strong"),aFr=o("funnel"),nFr=o(" \u2014 "),$H=a("a"),sFr=o("TFFunnelForMultipleChoice"),lFr=o(" (Funnel Transformer model)"),iFr=l(),OM=a("li"),g5e=a("strong"),dFr=o("longformer"),cFr=o(" \u2014 "),kH=a("a"),fFr=o("TFLongformerForMultipleChoice"),mFr=o(" (Longformer model)"),gFr=l(),VM=a("li"),h5e=a("strong"),hFr=o("mobilebert"),pFr=o(" \u2014 "),SH=a("a"),uFr=o("TFMobileBertForMultipleChoice"),_Fr=o(" (MobileBERT model)"),bFr=l(),XM=a("li"),p5e=a("strong"),vFr=o("mpnet"),FFr=o(" \u2014 "),RH=a("a"),TFr=o("TFMPNetForMultipleChoice"),MFr=o(" (MPNet model)"),EFr=l(),zM=a("li"),u5e=a("strong"),CFr=o("rembert"),wFr=o(" \u2014 "),PH=a("a"),AFr=o("TFRemBertForMultipleChoice"),yFr=o(" (RemBERT model)"),LFr=l(),WM=a("li"),_5e=a("strong"),xFr=o("roberta"),$Fr=o(" \u2014 "),BH=a("a"),kFr=o("TFRobertaForMultipleChoice"),SFr=o(" (RoBERTa model)"),RFr=l(),QM=a("li"),b5e=a("strong"),PFr=o("roformer"),BFr=o(" \u2014 "),IH=a("a"),IFr=o("TFRoFormerForMultipleChoice"),qFr=o(" (RoFormer model)"),NFr=l(),HM=a("li"),v5e=a("strong"),jFr=o("xlm"),DFr=o(" \u2014 "),qH=a("a"),GFr=o("TFXLMForMultipleChoice"),OFr=o(" (XLM model)"),VFr=l(),UM=a("li"),F5e=a("strong"),XFr=o("xlm-roberta"),zFr=o(" \u2014 "),NH=a("a"),WFr=o("TFXLMRobertaForMultipleChoice"),QFr=o(" (XLM-RoBERTa model)"),HFr=l(),JM=a("li"),T5e=a("strong"),UFr=o("xlnet"),JFr=o(" \u2014 "),jH=a("a"),YFr=o("TFXLNetForMultipleChoice"),KFr=o(" (XLNet model)"),ZFr=l(),F(YM.$$.fragment),Qqe=l(),fc=a("h2"),KM=a("a"),M5e=a("span"),F(L8.$$.fragment),eTr=l(),E5e=a("span"),oTr=o("TFAutoModelForNextSentencePrediction"),Hqe=l(),nr=a("div"),F(x8.$$.fragment),rTr=l(),mc=a("p"),tTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DH=a("a"),aTr=o("from_pretrained()"),nTr=o(" class method or the "),GH=a("a"),sTr=o("from_config()"),lTr=o(` class
method.`),iTr=l(),$8=a("p"),dTr=o("This class cannot be instantiated directly using "),C5e=a("code"),cTr=o("__init__()"),fTr=o(" (throws an error)."),mTr=l(),Bt=a("div"),F(k8.$$.fragment),gTr=l(),w5e=a("p"),hTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pTr=l(),gc=a("p"),uTr=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),_Tr=o("not"),bTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),vTr=o("from_pretrained()"),FTr=o(" to load the model weights."),TTr=l(),F(ZM.$$.fragment),MTr=l(),Rr=a("div"),F(S8.$$.fragment),ETr=l(),y5e=a("p"),CTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wTr=l(),ln=a("p"),ATr=o("The model class to instantiate is selected based on the "),L5e=a("code"),yTr=o("model_type"),LTr=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),xTr=o("pretrained_model_name_or_path"),$Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(":"),RTr=l(),R8=a("ul"),eE=a("li"),k5e=a("strong"),PTr=o("bert"),BTr=o(" \u2014 "),VH=a("a"),ITr=o("TFBertForNextSentencePrediction"),qTr=o(" (BERT model)"),NTr=l(),oE=a("li"),S5e=a("strong"),jTr=o("mobilebert"),DTr=o(" \u2014 "),XH=a("a"),GTr=o("TFMobileBertForNextSentencePrediction"),OTr=o(" (MobileBERT model)"),VTr=l(),F(rE.$$.fragment),Uqe=l(),hc=a("h2"),tE=a("a"),R5e=a("span"),F(P8.$$.fragment),XTr=l(),P5e=a("span"),zTr=o("TFAutoModelForTableQuestionAnswering"),Jqe=l(),sr=a("div"),F(B8.$$.fragment),WTr=l(),pc=a("p"),QTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zH=a("a"),HTr=o("from_pretrained()"),UTr=o(" class method or the "),WH=a("a"),JTr=o("from_config()"),YTr=o(` class
method.`),KTr=l(),I8=a("p"),ZTr=o("This class cannot be instantiated directly using "),B5e=a("code"),e7r=o("__init__()"),o7r=o(" (throws an error)."),r7r=l(),It=a("div"),F(q8.$$.fragment),t7r=l(),I5e=a("p"),a7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n7r=l(),uc=a("p"),s7r=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),l7r=o("not"),i7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),d7r=o("from_pretrained()"),c7r=o(" to load the model weights."),f7r=l(),F(aE.$$.fragment),m7r=l(),Pr=a("div"),F(N8.$$.fragment),g7r=l(),N5e=a("p"),h7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),p7r=l(),dn=a("p"),u7r=o("The model class to instantiate is selected based on the "),j5e=a("code"),_7r=o("model_type"),b7r=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),v7r=o("pretrained_model_name_or_path"),F7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=a("code"),T7r=o("pretrained_model_name_or_path"),M7r=o(":"),E7r=l(),O5e=a("ul"),nE=a("li"),V5e=a("strong"),C7r=o("tapas"),w7r=o(" \u2014 "),HH=a("a"),A7r=o("TFTapasForQuestionAnswering"),y7r=o(" (TAPAS model)"),L7r=l(),F(sE.$$.fragment),Yqe=l(),_c=a("h2"),lE=a("a"),X5e=a("span"),F(j8.$$.fragment),x7r=l(),z5e=a("span"),$7r=o("TFAutoModelForTokenClassification"),Kqe=l(),lr=a("div"),F(D8.$$.fragment),k7r=l(),bc=a("p"),S7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UH=a("a"),R7r=o("from_pretrained()"),P7r=o(" class method or the "),JH=a("a"),B7r=o("from_config()"),I7r=o(` class
method.`),q7r=l(),G8=a("p"),N7r=o("This class cannot be instantiated directly using "),W5e=a("code"),j7r=o("__init__()"),D7r=o(" (throws an error)."),G7r=l(),qt=a("div"),F(O8.$$.fragment),O7r=l(),Q5e=a("p"),V7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X7r=l(),vc=a("p"),z7r=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),W7r=o("not"),Q7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),H7r=o("from_pretrained()"),U7r=o(" to load the model weights."),J7r=l(),F(iE.$$.fragment),Y7r=l(),Br=a("div"),F(V8.$$.fragment),K7r=l(),U5e=a("p"),Z7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eMr=l(),cn=a("p"),oMr=o("The model class to instantiate is selected based on the "),J5e=a("code"),rMr=o("model_type"),tMr=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(":"),iMr=l(),de=a("ul"),dE=a("li"),Z5e=a("strong"),dMr=o("albert"),cMr=o(" \u2014 "),KH=a("a"),fMr=o("TFAlbertForTokenClassification"),mMr=o(" (ALBERT model)"),gMr=l(),cE=a("li"),eve=a("strong"),hMr=o("bert"),pMr=o(" \u2014 "),ZH=a("a"),uMr=o("TFBertForTokenClassification"),_Mr=o(" (BERT model)"),bMr=l(),fE=a("li"),ove=a("strong"),vMr=o("camembert"),FMr=o(" \u2014 "),eU=a("a"),TMr=o("TFCamembertForTokenClassification"),MMr=o(" (CamemBERT model)"),EMr=l(),mE=a("li"),rve=a("strong"),CMr=o("convbert"),wMr=o(" \u2014 "),oU=a("a"),AMr=o("TFConvBertForTokenClassification"),yMr=o(" (ConvBERT model)"),LMr=l(),gE=a("li"),tve=a("strong"),xMr=o("deberta"),$Mr=o(" \u2014 "),rU=a("a"),kMr=o("TFDebertaForTokenClassification"),SMr=o(" (DeBERTa model)"),RMr=l(),hE=a("li"),ave=a("strong"),PMr=o("deberta-v2"),BMr=o(" \u2014 "),tU=a("a"),IMr=o("TFDebertaV2ForTokenClassification"),qMr=o(" (DeBERTa-v2 model)"),NMr=l(),pE=a("li"),nve=a("strong"),jMr=o("distilbert"),DMr=o(" \u2014 "),aU=a("a"),GMr=o("TFDistilBertForTokenClassification"),OMr=o(" (DistilBERT model)"),VMr=l(),uE=a("li"),sve=a("strong"),XMr=o("electra"),zMr=o(" \u2014 "),nU=a("a"),WMr=o("TFElectraForTokenClassification"),QMr=o(" (ELECTRA model)"),HMr=l(),_E=a("li"),lve=a("strong"),UMr=o("flaubert"),JMr=o(" \u2014 "),sU=a("a"),YMr=o("TFFlaubertForTokenClassification"),KMr=o(" (FlauBERT model)"),ZMr=l(),bE=a("li"),ive=a("strong"),eEr=o("funnel"),oEr=o(" \u2014 "),lU=a("a"),rEr=o("TFFunnelForTokenClassification"),tEr=o(" (Funnel Transformer model)"),aEr=l(),vE=a("li"),dve=a("strong"),nEr=o("layoutlm"),sEr=o(" \u2014 "),iU=a("a"),lEr=o("TFLayoutLMForTokenClassification"),iEr=o(" (LayoutLM model)"),dEr=l(),FE=a("li"),cve=a("strong"),cEr=o("longformer"),fEr=o(" \u2014 "),dU=a("a"),mEr=o("TFLongformerForTokenClassification"),gEr=o(" (Longformer model)"),hEr=l(),TE=a("li"),fve=a("strong"),pEr=o("mobilebert"),uEr=o(" \u2014 "),cU=a("a"),_Er=o("TFMobileBertForTokenClassification"),bEr=o(" (MobileBERT model)"),vEr=l(),ME=a("li"),mve=a("strong"),FEr=o("mpnet"),TEr=o(" \u2014 "),fU=a("a"),MEr=o("TFMPNetForTokenClassification"),EEr=o(" (MPNet model)"),CEr=l(),EE=a("li"),gve=a("strong"),wEr=o("rembert"),AEr=o(" \u2014 "),mU=a("a"),yEr=o("TFRemBertForTokenClassification"),LEr=o(" (RemBERT model)"),xEr=l(),CE=a("li"),hve=a("strong"),$Er=o("roberta"),kEr=o(" \u2014 "),gU=a("a"),SEr=o("TFRobertaForTokenClassification"),REr=o(" (RoBERTa model)"),PEr=l(),wE=a("li"),pve=a("strong"),BEr=o("roformer"),IEr=o(" \u2014 "),hU=a("a"),qEr=o("TFRoFormerForTokenClassification"),NEr=o(" (RoFormer model)"),jEr=l(),AE=a("li"),uve=a("strong"),DEr=o("xlm"),GEr=o(" \u2014 "),pU=a("a"),OEr=o("TFXLMForTokenClassification"),VEr=o(" (XLM model)"),XEr=l(),yE=a("li"),_ve=a("strong"),zEr=o("xlm-roberta"),WEr=o(" \u2014 "),uU=a("a"),QEr=o("TFXLMRobertaForTokenClassification"),HEr=o(" (XLM-RoBERTa model)"),UEr=l(),LE=a("li"),bve=a("strong"),JEr=o("xlnet"),YEr=o(" \u2014 "),_U=a("a"),KEr=o("TFXLNetForTokenClassification"),ZEr=o(" (XLNet model)"),eCr=l(),F(xE.$$.fragment),Zqe=l(),Fc=a("h2"),$E=a("a"),vve=a("span"),F(X8.$$.fragment),oCr=l(),Fve=a("span"),rCr=o("TFAutoModelForQuestionAnswering"),eNe=l(),ir=a("div"),F(z8.$$.fragment),tCr=l(),Tc=a("p"),aCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bU=a("a"),nCr=o("from_pretrained()"),sCr=o(" class method or the "),vU=a("a"),lCr=o("from_config()"),iCr=o(` class
method.`),dCr=l(),W8=a("p"),cCr=o("This class cannot be instantiated directly using "),Tve=a("code"),fCr=o("__init__()"),mCr=o(" (throws an error)."),gCr=l(),Nt=a("div"),F(Q8.$$.fragment),hCr=l(),Mve=a("p"),pCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uCr=l(),Mc=a("p"),_Cr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),bCr=o("not"),vCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),FCr=o("from_pretrained()"),TCr=o(" to load the model weights."),MCr=l(),F(kE.$$.fragment),ECr=l(),Ir=a("div"),F(H8.$$.fragment),CCr=l(),Cve=a("p"),wCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ACr=l(),fn=a("p"),yCr=o("The model class to instantiate is selected based on the "),wve=a("code"),LCr=o("model_type"),xCr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),$Cr=o("pretrained_model_name_or_path"),kCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),SCr=o("pretrained_model_name_or_path"),RCr=o(":"),PCr=l(),ce=a("ul"),SE=a("li"),Lve=a("strong"),BCr=o("albert"),ICr=o(" \u2014 "),TU=a("a"),qCr=o("TFAlbertForQuestionAnswering"),NCr=o(" (ALBERT model)"),jCr=l(),RE=a("li"),xve=a("strong"),DCr=o("bert"),GCr=o(" \u2014 "),MU=a("a"),OCr=o("TFBertForQuestionAnswering"),VCr=o(" (BERT model)"),XCr=l(),PE=a("li"),$ve=a("strong"),zCr=o("camembert"),WCr=o(" \u2014 "),EU=a("a"),QCr=o("TFCamembertForQuestionAnswering"),HCr=o(" (CamemBERT model)"),UCr=l(),BE=a("li"),kve=a("strong"),JCr=o("convbert"),YCr=o(" \u2014 "),CU=a("a"),KCr=o("TFConvBertForQuestionAnswering"),ZCr=o(" (ConvBERT model)"),e3r=l(),IE=a("li"),Sve=a("strong"),o3r=o("deberta"),r3r=o(" \u2014 "),wU=a("a"),t3r=o("TFDebertaForQuestionAnswering"),a3r=o(" (DeBERTa model)"),n3r=l(),qE=a("li"),Rve=a("strong"),s3r=o("deberta-v2"),l3r=o(" \u2014 "),AU=a("a"),i3r=o("TFDebertaV2ForQuestionAnswering"),d3r=o(" (DeBERTa-v2 model)"),c3r=l(),NE=a("li"),Pve=a("strong"),f3r=o("distilbert"),m3r=o(" \u2014 "),yU=a("a"),g3r=o("TFDistilBertForQuestionAnswering"),h3r=o(" (DistilBERT model)"),p3r=l(),jE=a("li"),Bve=a("strong"),u3r=o("electra"),_3r=o(" \u2014 "),LU=a("a"),b3r=o("TFElectraForQuestionAnswering"),v3r=o(" (ELECTRA model)"),F3r=l(),DE=a("li"),Ive=a("strong"),T3r=o("flaubert"),M3r=o(" \u2014 "),xU=a("a"),E3r=o("TFFlaubertForQuestionAnsweringSimple"),C3r=o(" (FlauBERT model)"),w3r=l(),GE=a("li"),qve=a("strong"),A3r=o("funnel"),y3r=o(" \u2014 "),$U=a("a"),L3r=o("TFFunnelForQuestionAnswering"),x3r=o(" (Funnel Transformer model)"),$3r=l(),OE=a("li"),Nve=a("strong"),k3r=o("gptj"),S3r=o(" \u2014 "),kU=a("a"),R3r=o("TFGPTJForQuestionAnswering"),P3r=o(" (GPT-J model)"),B3r=l(),VE=a("li"),jve=a("strong"),I3r=o("longformer"),q3r=o(" \u2014 "),SU=a("a"),N3r=o("TFLongformerForQuestionAnswering"),j3r=o(" (Longformer model)"),D3r=l(),XE=a("li"),Dve=a("strong"),G3r=o("mobilebert"),O3r=o(" \u2014 "),RU=a("a"),V3r=o("TFMobileBertForQuestionAnswering"),X3r=o(" (MobileBERT model)"),z3r=l(),zE=a("li"),Gve=a("strong"),W3r=o("mpnet"),Q3r=o(" \u2014 "),PU=a("a"),H3r=o("TFMPNetForQuestionAnswering"),U3r=o(" (MPNet model)"),J3r=l(),WE=a("li"),Ove=a("strong"),Y3r=o("rembert"),K3r=o(" \u2014 "),BU=a("a"),Z3r=o("TFRemBertForQuestionAnswering"),ewr=o(" (RemBERT model)"),owr=l(),QE=a("li"),Vve=a("strong"),rwr=o("roberta"),twr=o(" \u2014 "),IU=a("a"),awr=o("TFRobertaForQuestionAnswering"),nwr=o(" (RoBERTa model)"),swr=l(),HE=a("li"),Xve=a("strong"),lwr=o("roformer"),iwr=o(" \u2014 "),qU=a("a"),dwr=o("TFRoFormerForQuestionAnswering"),cwr=o(" (RoFormer model)"),fwr=l(),UE=a("li"),zve=a("strong"),mwr=o("xlm"),gwr=o(" \u2014 "),NU=a("a"),hwr=o("TFXLMForQuestionAnsweringSimple"),pwr=o(" (XLM model)"),uwr=l(),JE=a("li"),Wve=a("strong"),_wr=o("xlm-roberta"),bwr=o(" \u2014 "),jU=a("a"),vwr=o("TFXLMRobertaForQuestionAnswering"),Fwr=o(" (XLM-RoBERTa model)"),Twr=l(),YE=a("li"),Qve=a("strong"),Mwr=o("xlnet"),Ewr=o(" \u2014 "),DU=a("a"),Cwr=o("TFXLNetForQuestionAnsweringSimple"),wwr=o(" (XLNet model)"),Awr=l(),F(KE.$$.fragment),oNe=l(),Ec=a("h2"),ZE=a("a"),Hve=a("span"),F(U8.$$.fragment),ywr=l(),Uve=a("span"),Lwr=o("TFAutoModelForVision2Seq"),rNe=l(),dr=a("div"),F(J8.$$.fragment),xwr=l(),Cc=a("p"),$wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GU=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),OU=a("a"),Rwr=o("from_config()"),Pwr=o(` class
method.`),Bwr=l(),Y8=a("p"),Iwr=o("This class cannot be instantiated directly using "),Jve=a("code"),qwr=o("__init__()"),Nwr=o(" (throws an error)."),jwr=l(),jt=a("div"),F(K8.$$.fragment),Dwr=l(),Yve=a("p"),Gwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Owr=l(),wc=a("p"),Vwr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),Xwr=o("not"),zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),Wwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Hwr=l(),F(eC.$$.fragment),Uwr=l(),qr=a("div"),F(Z8.$$.fragment),Jwr=l(),Zve=a("p"),Ywr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kwr=l(),mn=a("p"),Zwr=o("The model class to instantiate is selected based on the "),eFe=a("code"),eAr=o("model_type"),oAr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),rAr=o("pretrained_model_name_or_path"),tAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),aAr=o("pretrained_model_name_or_path"),nAr=o(":"),sAr=l(),tFe=a("ul"),oC=a("li"),aFe=a("strong"),lAr=o("vision-encoder-decoder"),iAr=o(" \u2014 "),XU=a("a"),dAr=o("TFVisionEncoderDecoderModel"),cAr=o(" (Vision Encoder decoder model)"),fAr=l(),F(rC.$$.fragment),tNe=l(),Ac=a("h2"),tC=a("a"),nFe=a("span"),F(ex.$$.fragment),mAr=l(),sFe=a("span"),gAr=o("TFAutoModelForSpeechSeq2Seq"),aNe=l(),cr=a("div"),F(ox.$$.fragment),hAr=l(),yc=a("p"),pAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=a("a"),uAr=o("from_pretrained()"),_Ar=o(" class method or the "),WU=a("a"),bAr=o("from_config()"),vAr=o(` class
method.`),FAr=l(),rx=a("p"),TAr=o("This class cannot be instantiated directly using "),lFe=a("code"),MAr=o("__init__()"),EAr=o(" (throws an error)."),CAr=l(),Dt=a("div"),F(tx.$$.fragment),wAr=l(),iFe=a("p"),AAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yAr=l(),Lc=a("p"),LAr=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),xAr=o("not"),$Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),kAr=o("from_pretrained()"),SAr=o(" to load the model weights."),RAr=l(),F(aC.$$.fragment),PAr=l(),Nr=a("div"),F(ax.$$.fragment),BAr=l(),cFe=a("p"),IAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qAr=l(),gn=a("p"),NAr=o("The model class to instantiate is selected based on the "),fFe=a("code"),jAr=o("model_type"),DAr=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),VAr=o("pretrained_model_name_or_path"),XAr=o(":"),zAr=l(),hFe=a("ul"),nC=a("li"),pFe=a("strong"),WAr=o("speech_to_text"),QAr=o(" \u2014 "),HU=a("a"),HAr=o("TFSpeech2TextForConditionalGeneration"),UAr=o(" (Speech2Text model)"),JAr=l(),F(sC.$$.fragment),nNe=l(),xc=a("h2"),lC=a("a"),uFe=a("span"),F(nx.$$.fragment),YAr=l(),_Fe=a("span"),KAr=o("FlaxAutoModel"),sNe=l(),fr=a("div"),F(sx.$$.fragment),ZAr=l(),$c=a("p"),e6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=a("a"),o6r=o("from_pretrained()"),r6r=o(" class method or the "),JU=a("a"),t6r=o("from_config()"),a6r=o(` class
method.`),n6r=l(),lx=a("p"),s6r=o("This class cannot be instantiated directly using "),bFe=a("code"),l6r=o("__init__()"),i6r=o(" (throws an error)."),d6r=l(),Gt=a("div"),F(ix.$$.fragment),c6r=l(),vFe=a("p"),f6r=o("Instantiates one of the base model classes of the library from a configuration."),m6r=l(),kc=a("p"),g6r=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),h6r=o("not"),p6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),u6r=o("from_pretrained()"),_6r=o(" to load the model weights."),b6r=l(),F(iC.$$.fragment),v6r=l(),jr=a("div"),F(dx.$$.fragment),F6r=l(),TFe=a("p"),T6r=o("Instantiate one of the base model classes of the library from a pretrained model."),M6r=l(),hn=a("p"),E6r=o("The model class to instantiate is selected based on the "),MFe=a("code"),C6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),A6r=o("pretrained_model_name_or_path"),y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),L6r=o("pretrained_model_name_or_path"),x6r=o(":"),$6r=l(),re=a("ul"),dC=a("li"),wFe=a("strong"),k6r=o("albert"),S6r=o(" \u2014 "),KU=a("a"),R6r=o("FlaxAlbertModel"),P6r=o(" (ALBERT model)"),B6r=l(),cC=a("li"),AFe=a("strong"),I6r=o("bart"),q6r=o(" \u2014 "),ZU=a("a"),N6r=o("FlaxBartModel"),j6r=o(" (BART model)"),D6r=l(),fC=a("li"),yFe=a("strong"),G6r=o("beit"),O6r=o(" \u2014 "),eJ=a("a"),V6r=o("FlaxBeitModel"),X6r=o(" (BEiT model)"),z6r=l(),mC=a("li"),LFe=a("strong"),W6r=o("bert"),Q6r=o(" \u2014 "),oJ=a("a"),H6r=o("FlaxBertModel"),U6r=o(" (BERT model)"),J6r=l(),gC=a("li"),xFe=a("strong"),Y6r=o("big_bird"),K6r=o(" \u2014 "),rJ=a("a"),Z6r=o("FlaxBigBirdModel"),e0r=o(" (BigBird model)"),o0r=l(),hC=a("li"),$Fe=a("strong"),r0r=o("blenderbot"),t0r=o(" \u2014 "),tJ=a("a"),a0r=o("FlaxBlenderbotModel"),n0r=o(" (Blenderbot model)"),s0r=l(),pC=a("li"),kFe=a("strong"),l0r=o("blenderbot-small"),i0r=o(" \u2014 "),aJ=a("a"),d0r=o("FlaxBlenderbotSmallModel"),c0r=o(" (BlenderbotSmall model)"),f0r=l(),uC=a("li"),SFe=a("strong"),m0r=o("clip"),g0r=o(" \u2014 "),nJ=a("a"),h0r=o("FlaxCLIPModel"),p0r=o(" (CLIP model)"),u0r=l(),_C=a("li"),RFe=a("strong"),_0r=o("distilbert"),b0r=o(" \u2014 "),sJ=a("a"),v0r=o("FlaxDistilBertModel"),F0r=o(" (DistilBERT model)"),T0r=l(),bC=a("li"),PFe=a("strong"),M0r=o("electra"),E0r=o(" \u2014 "),lJ=a("a"),C0r=o("FlaxElectraModel"),w0r=o(" (ELECTRA model)"),A0r=l(),vC=a("li"),BFe=a("strong"),y0r=o("gpt2"),L0r=o(" \u2014 "),iJ=a("a"),x0r=o("FlaxGPT2Model"),$0r=o(" (OpenAI GPT-2 model)"),k0r=l(),FC=a("li"),IFe=a("strong"),S0r=o("gpt_neo"),R0r=o(" \u2014 "),dJ=a("a"),P0r=o("FlaxGPTNeoModel"),B0r=o(" (GPT Neo model)"),I0r=l(),TC=a("li"),qFe=a("strong"),q0r=o("gptj"),N0r=o(" \u2014 "),cJ=a("a"),j0r=o("FlaxGPTJModel"),D0r=o(" (GPT-J model)"),G0r=l(),MC=a("li"),NFe=a("strong"),O0r=o("marian"),V0r=o(" \u2014 "),fJ=a("a"),X0r=o("FlaxMarianModel"),z0r=o(" (Marian model)"),W0r=l(),EC=a("li"),jFe=a("strong"),Q0r=o("mbart"),H0r=o(" \u2014 "),mJ=a("a"),U0r=o("FlaxMBartModel"),J0r=o(" (mBART model)"),Y0r=l(),CC=a("li"),DFe=a("strong"),K0r=o("mt5"),Z0r=o(" \u2014 "),gJ=a("a"),eyr=o("FlaxMT5Model"),oyr=o(" (mT5 model)"),ryr=l(),wC=a("li"),GFe=a("strong"),tyr=o("pegasus"),ayr=o(" \u2014 "),hJ=a("a"),nyr=o("FlaxPegasusModel"),syr=o(" (Pegasus model)"),lyr=l(),AC=a("li"),OFe=a("strong"),iyr=o("roberta"),dyr=o(" \u2014 "),pJ=a("a"),cyr=o("FlaxRobertaModel"),fyr=o(" (RoBERTa model)"),myr=l(),yC=a("li"),VFe=a("strong"),gyr=o("roformer"),hyr=o(" \u2014 "),uJ=a("a"),pyr=o("FlaxRoFormerModel"),uyr=o(" (RoFormer model)"),_yr=l(),LC=a("li"),XFe=a("strong"),byr=o("t5"),vyr=o(" \u2014 "),_J=a("a"),Fyr=o("FlaxT5Model"),Tyr=o(" (T5 model)"),Myr=l(),xC=a("li"),zFe=a("strong"),Eyr=o("vision-text-dual-encoder"),Cyr=o(" \u2014 "),bJ=a("a"),wyr=o("FlaxVisionTextDualEncoderModel"),Ayr=o(" (VisionTextDualEncoder model)"),yyr=l(),$C=a("li"),WFe=a("strong"),Lyr=o("vit"),xyr=o(" \u2014 "),vJ=a("a"),$yr=o("FlaxViTModel"),kyr=o(" (ViT model)"),Syr=l(),kC=a("li"),QFe=a("strong"),Ryr=o("wav2vec2"),Pyr=o(" \u2014 "),FJ=a("a"),Byr=o("FlaxWav2Vec2Model"),Iyr=o(" (Wav2Vec2 model)"),qyr=l(),SC=a("li"),HFe=a("strong"),Nyr=o("xglm"),jyr=o(" \u2014 "),TJ=a("a"),Dyr=o("FlaxXGLMModel"),Gyr=o(" (XGLM model)"),Oyr=l(),RC=a("li"),UFe=a("strong"),Vyr=o("xlm-roberta"),Xyr=o(" \u2014 "),MJ=a("a"),zyr=o("FlaxXLMRobertaModel"),Wyr=o(" (XLM-RoBERTa model)"),Qyr=l(),F(PC.$$.fragment),lNe=l(),Sc=a("h2"),BC=a("a"),JFe=a("span"),F(cx.$$.fragment),Hyr=l(),YFe=a("span"),Uyr=o("FlaxAutoModelForCausalLM"),iNe=l(),mr=a("div"),F(fx.$$.fragment),Jyr=l(),Rc=a("p"),Yyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EJ=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" class method or the "),CJ=a("a"),eLr=o("from_config()"),oLr=o(` class
method.`),rLr=l(),mx=a("p"),tLr=o("This class cannot be instantiated directly using "),KFe=a("code"),aLr=o("__init__()"),nLr=o(" (throws an error)."),sLr=l(),Ot=a("div"),F(gx.$$.fragment),lLr=l(),ZFe=a("p"),iLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dLr=l(),Pc=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),fLr=o("not"),mLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" to load the model weights."),pLr=l(),F(IC.$$.fragment),uLr=l(),Dr=a("div"),F(hx.$$.fragment),_Lr=l(),oTe=a("p"),bLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vLr=l(),pn=a("p"),FLr=o("The model class to instantiate is selected based on the "),rTe=a("code"),TLr=o("model_type"),MLr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(":"),yLr=l(),Re=a("ul"),qC=a("li"),nTe=a("strong"),LLr=o("bart"),xLr=o(" \u2014 "),AJ=a("a"),$Lr=o("FlaxBartForCausalLM"),kLr=o(" (BART model)"),SLr=l(),NC=a("li"),sTe=a("strong"),RLr=o("bert"),PLr=o(" \u2014 "),yJ=a("a"),BLr=o("FlaxBertForCausalLM"),ILr=o(" (BERT model)"),qLr=l(),jC=a("li"),lTe=a("strong"),NLr=o("big_bird"),jLr=o(" \u2014 "),LJ=a("a"),DLr=o("FlaxBigBirdForCausalLM"),GLr=o(" (BigBird model)"),OLr=l(),DC=a("li"),iTe=a("strong"),VLr=o("electra"),XLr=o(" \u2014 "),xJ=a("a"),zLr=o("FlaxElectraForCausalLM"),WLr=o(" (ELECTRA model)"),QLr=l(),GC=a("li"),dTe=a("strong"),HLr=o("gpt2"),ULr=o(" \u2014 "),$J=a("a"),JLr=o("FlaxGPT2LMHeadModel"),YLr=o(" (OpenAI GPT-2 model)"),KLr=l(),OC=a("li"),cTe=a("strong"),ZLr=o("gpt_neo"),e8r=o(" \u2014 "),kJ=a("a"),o8r=o("FlaxGPTNeoForCausalLM"),r8r=o(" (GPT Neo model)"),t8r=l(),VC=a("li"),fTe=a("strong"),a8r=o("gptj"),n8r=o(" \u2014 "),SJ=a("a"),s8r=o("FlaxGPTJForCausalLM"),l8r=o(" (GPT-J model)"),i8r=l(),XC=a("li"),mTe=a("strong"),d8r=o("roberta"),c8r=o(" \u2014 "),RJ=a("a"),f8r=o("FlaxRobertaForCausalLM"),m8r=o(" (RoBERTa model)"),g8r=l(),zC=a("li"),gTe=a("strong"),h8r=o("xglm"),p8r=o(" \u2014 "),PJ=a("a"),u8r=o("FlaxXGLMForCausalLM"),_8r=o(" (XGLM model)"),b8r=l(),F(WC.$$.fragment),dNe=l(),Bc=a("h2"),QC=a("a"),hTe=a("span"),F(px.$$.fragment),v8r=l(),pTe=a("span"),F8r=o("FlaxAutoModelForPreTraining"),cNe=l(),gr=a("div"),F(ux.$$.fragment),T8r=l(),Ic=a("p"),M8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BJ=a("a"),E8r=o("from_pretrained()"),C8r=o(" class method or the "),IJ=a("a"),w8r=o("from_config()"),A8r=o(` class
method.`),y8r=l(),_x=a("p"),L8r=o("This class cannot be instantiated directly using "),uTe=a("code"),x8r=o("__init__()"),$8r=o(" (throws an error)."),k8r=l(),Vt=a("div"),F(bx.$$.fragment),S8r=l(),_Te=a("p"),R8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P8r=l(),qc=a("p"),B8r=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),I8r=o("not"),q8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),N8r=o("from_pretrained()"),j8r=o(" to load the model weights."),D8r=l(),F(HC.$$.fragment),G8r=l(),Gr=a("div"),F(vx.$$.fragment),O8r=l(),vTe=a("p"),V8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X8r=l(),un=a("p"),z8r=o("The model class to instantiate is selected based on the "),FTe=a("code"),W8r=o("model_type"),Q8r=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),H8r=o("pretrained_model_name_or_path"),U8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),J8r=o("pretrained_model_name_or_path"),Y8r=o(":"),K8r=l(),Me=a("ul"),UC=a("li"),ETe=a("strong"),Z8r=o("albert"),exr=o(" \u2014 "),NJ=a("a"),oxr=o("FlaxAlbertForPreTraining"),rxr=o(" (ALBERT model)"),txr=l(),JC=a("li"),CTe=a("strong"),axr=o("bart"),nxr=o(" \u2014 "),jJ=a("a"),sxr=o("FlaxBartForConditionalGeneration"),lxr=o(" (BART model)"),ixr=l(),YC=a("li"),wTe=a("strong"),dxr=o("bert"),cxr=o(" \u2014 "),DJ=a("a"),fxr=o("FlaxBertForPreTraining"),mxr=o(" (BERT model)"),gxr=l(),KC=a("li"),ATe=a("strong"),hxr=o("big_bird"),pxr=o(" \u2014 "),GJ=a("a"),uxr=o("FlaxBigBirdForPreTraining"),_xr=o(" (BigBird model)"),bxr=l(),ZC=a("li"),yTe=a("strong"),vxr=o("electra"),Fxr=o(" \u2014 "),OJ=a("a"),Txr=o("FlaxElectraForPreTraining"),Mxr=o(" (ELECTRA model)"),Exr=l(),e3=a("li"),LTe=a("strong"),Cxr=o("mbart"),wxr=o(" \u2014 "),VJ=a("a"),Axr=o("FlaxMBartForConditionalGeneration"),yxr=o(" (mBART model)"),Lxr=l(),o3=a("li"),xTe=a("strong"),xxr=o("mt5"),$xr=o(" \u2014 "),XJ=a("a"),kxr=o("FlaxMT5ForConditionalGeneration"),Sxr=o(" (mT5 model)"),Rxr=l(),r3=a("li"),$Te=a("strong"),Pxr=o("roberta"),Bxr=o(" \u2014 "),zJ=a("a"),Ixr=o("FlaxRobertaForMaskedLM"),qxr=o(" (RoBERTa model)"),Nxr=l(),t3=a("li"),kTe=a("strong"),jxr=o("roformer"),Dxr=o(" \u2014 "),WJ=a("a"),Gxr=o("FlaxRoFormerForMaskedLM"),Oxr=o(" (RoFormer model)"),Vxr=l(),a3=a("li"),STe=a("strong"),Xxr=o("t5"),zxr=o(" \u2014 "),QJ=a("a"),Wxr=o("FlaxT5ForConditionalGeneration"),Qxr=o(" (T5 model)"),Hxr=l(),n3=a("li"),RTe=a("strong"),Uxr=o("wav2vec2"),Jxr=o(" \u2014 "),HJ=a("a"),Yxr=o("FlaxWav2Vec2ForPreTraining"),Kxr=o(" (Wav2Vec2 model)"),Zxr=l(),s3=a("li"),PTe=a("strong"),e9r=o("xlm-roberta"),o9r=o(" \u2014 "),UJ=a("a"),r9r=o("FlaxXLMRobertaForMaskedLM"),t9r=o(" (XLM-RoBERTa model)"),a9r=l(),F(l3.$$.fragment),fNe=l(),Nc=a("h2"),i3=a("a"),BTe=a("span"),F(Fx.$$.fragment),n9r=l(),ITe=a("span"),s9r=o("FlaxAutoModelForMaskedLM"),mNe=l(),hr=a("div"),F(Tx.$$.fragment),l9r=l(),jc=a("p"),i9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=a("a"),d9r=o("from_pretrained()"),c9r=o(" class method or the "),YJ=a("a"),f9r=o("from_config()"),m9r=o(` class
method.`),g9r=l(),Mx=a("p"),h9r=o("This class cannot be instantiated directly using "),qTe=a("code"),p9r=o("__init__()"),u9r=o(" (throws an error)."),_9r=l(),Xt=a("div"),F(Ex.$$.fragment),b9r=l(),NTe=a("p"),v9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),F9r=l(),Dc=a("p"),T9r=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),M9r=o("not"),E9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),C9r=o("from_pretrained()"),w9r=o(" to load the model weights."),A9r=l(),F(d3.$$.fragment),y9r=l(),Or=a("div"),F(Cx.$$.fragment),L9r=l(),DTe=a("p"),x9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$9r=l(),_n=a("p"),k9r=o("The model class to instantiate is selected based on the "),GTe=a("code"),S9r=o("model_type"),R9r=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),P9r=o("pretrained_model_name_or_path"),B9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(":"),N9r=l(),Le=a("ul"),c3=a("li"),XTe=a("strong"),j9r=o("albert"),D9r=o(" \u2014 "),ZJ=a("a"),G9r=o("FlaxAlbertForMaskedLM"),O9r=o(" (ALBERT model)"),V9r=l(),f3=a("li"),zTe=a("strong"),X9r=o("bart"),z9r=o(" \u2014 "),eY=a("a"),W9r=o("FlaxBartForConditionalGeneration"),Q9r=o(" (BART model)"),H9r=l(),m3=a("li"),WTe=a("strong"),U9r=o("bert"),J9r=o(" \u2014 "),oY=a("a"),Y9r=o("FlaxBertForMaskedLM"),K9r=o(" (BERT model)"),Z9r=l(),g3=a("li"),QTe=a("strong"),e$r=o("big_bird"),o$r=o(" \u2014 "),rY=a("a"),r$r=o("FlaxBigBirdForMaskedLM"),t$r=o(" (BigBird model)"),a$r=l(),h3=a("li"),HTe=a("strong"),n$r=o("distilbert"),s$r=o(" \u2014 "),tY=a("a"),l$r=o("FlaxDistilBertForMaskedLM"),i$r=o(" (DistilBERT model)"),d$r=l(),p3=a("li"),UTe=a("strong"),c$r=o("electra"),f$r=o(" \u2014 "),aY=a("a"),m$r=o("FlaxElectraForMaskedLM"),g$r=o(" (ELECTRA model)"),h$r=l(),u3=a("li"),JTe=a("strong"),p$r=o("mbart"),u$r=o(" \u2014 "),nY=a("a"),_$r=o("FlaxMBartForConditionalGeneration"),b$r=o(" (mBART model)"),v$r=l(),_3=a("li"),YTe=a("strong"),F$r=o("roberta"),T$r=o(" \u2014 "),sY=a("a"),M$r=o("FlaxRobertaForMaskedLM"),E$r=o(" (RoBERTa model)"),C$r=l(),b3=a("li"),KTe=a("strong"),w$r=o("roformer"),A$r=o(" \u2014 "),lY=a("a"),y$r=o("FlaxRoFormerForMaskedLM"),L$r=o(" (RoFormer model)"),x$r=l(),v3=a("li"),ZTe=a("strong"),$$r=o("xlm-roberta"),k$r=o(" \u2014 "),iY=a("a"),S$r=o("FlaxXLMRobertaForMaskedLM"),R$r=o(" (XLM-RoBERTa model)"),P$r=l(),F(F3.$$.fragment),gNe=l(),Gc=a("h2"),T3=a("a"),e7e=a("span"),F(wx.$$.fragment),B$r=l(),o7e=a("span"),I$r=o("FlaxAutoModelForSeq2SeqLM"),hNe=l(),pr=a("div"),F(Ax.$$.fragment),q$r=l(),Oc=a("p"),N$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=a("a"),j$r=o("from_pretrained()"),D$r=o(" class method or the "),cY=a("a"),G$r=o("from_config()"),O$r=o(` class
method.`),V$r=l(),yx=a("p"),X$r=o("This class cannot be instantiated directly using "),r7e=a("code"),z$r=o("__init__()"),W$r=o(" (throws an error)."),Q$r=l(),zt=a("div"),F(Lx.$$.fragment),H$r=l(),t7e=a("p"),U$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J$r=l(),Vc=a("p"),Y$r=o(`Note:
Loading a model from its configuration file does `),a7e=a("strong"),K$r=o("not"),Z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),ekr=o("from_pretrained()"),okr=o(" to load the model weights."),rkr=l(),F(M3.$$.fragment),tkr=l(),Vr=a("div"),F(xx.$$.fragment),akr=l(),n7e=a("p"),nkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),skr=l(),bn=a("p"),lkr=o("The model class to instantiate is selected based on the "),s7e=a("code"),ikr=o("model_type"),dkr=o(` property of the config object (either
passed as an argument or loaded from `),l7e=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(":"),hkr=l(),Pe=a("ul"),E3=a("li"),d7e=a("strong"),pkr=o("bart"),ukr=o(" \u2014 "),mY=a("a"),_kr=o("FlaxBartForConditionalGeneration"),bkr=o(" (BART model)"),vkr=l(),C3=a("li"),c7e=a("strong"),Fkr=o("blenderbot"),Tkr=o(" \u2014 "),gY=a("a"),Mkr=o("FlaxBlenderbotForConditionalGeneration"),Ekr=o(" (Blenderbot model)"),Ckr=l(),w3=a("li"),f7e=a("strong"),wkr=o("blenderbot-small"),Akr=o(" \u2014 "),hY=a("a"),ykr=o("FlaxBlenderbotSmallForConditionalGeneration"),Lkr=o(" (BlenderbotSmall model)"),xkr=l(),A3=a("li"),m7e=a("strong"),$kr=o("encoder-decoder"),kkr=o(" \u2014 "),pY=a("a"),Skr=o("FlaxEncoderDecoderModel"),Rkr=o(" (Encoder decoder model)"),Pkr=l(),y3=a("li"),g7e=a("strong"),Bkr=o("marian"),Ikr=o(" \u2014 "),uY=a("a"),qkr=o("FlaxMarianMTModel"),Nkr=o(" (Marian model)"),jkr=l(),L3=a("li"),h7e=a("strong"),Dkr=o("mbart"),Gkr=o(" \u2014 "),_Y=a("a"),Okr=o("FlaxMBartForConditionalGeneration"),Vkr=o(" (mBART model)"),Xkr=l(),x3=a("li"),p7e=a("strong"),zkr=o("mt5"),Wkr=o(" \u2014 "),bY=a("a"),Qkr=o("FlaxMT5ForConditionalGeneration"),Hkr=o(" (mT5 model)"),Ukr=l(),$3=a("li"),u7e=a("strong"),Jkr=o("pegasus"),Ykr=o(" \u2014 "),vY=a("a"),Kkr=o("FlaxPegasusForConditionalGeneration"),Zkr=o(" (Pegasus model)"),eSr=l(),k3=a("li"),_7e=a("strong"),oSr=o("t5"),rSr=o(" \u2014 "),FY=a("a"),tSr=o("FlaxT5ForConditionalGeneration"),aSr=o(" (T5 model)"),nSr=l(),F(S3.$$.fragment),pNe=l(),Xc=a("h2"),R3=a("a"),b7e=a("span"),F($x.$$.fragment),sSr=l(),v7e=a("span"),lSr=o("FlaxAutoModelForSequenceClassification"),uNe=l(),ur=a("div"),F(kx.$$.fragment),iSr=l(),zc=a("p"),dSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TY=a("a"),cSr=o("from_pretrained()"),fSr=o(" class method or the "),MY=a("a"),mSr=o("from_config()"),gSr=o(` class
method.`),hSr=l(),Sx=a("p"),pSr=o("This class cannot be instantiated directly using "),F7e=a("code"),uSr=o("__init__()"),_Sr=o(" (throws an error)."),bSr=l(),Wt=a("div"),F(Rx.$$.fragment),vSr=l(),T7e=a("p"),FSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TSr=l(),Wc=a("p"),MSr=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),ESr=o("not"),CSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),wSr=o("from_pretrained()"),ASr=o(" to load the model weights."),ySr=l(),F(P3.$$.fragment),LSr=l(),Xr=a("div"),F(Px.$$.fragment),xSr=l(),E7e=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kSr=l(),vn=a("p"),SSr=o("The model class to instantiate is selected based on the "),C7e=a("code"),RSr=o("model_type"),PSr=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),qSr=o("pretrained_model_name_or_path"),NSr=o(":"),jSr=l(),xe=a("ul"),B3=a("li"),y7e=a("strong"),DSr=o("albert"),GSr=o(" \u2014 "),CY=a("a"),OSr=o("FlaxAlbertForSequenceClassification"),VSr=o(" (ALBERT model)"),XSr=l(),I3=a("li"),L7e=a("strong"),zSr=o("bart"),WSr=o(" \u2014 "),wY=a("a"),QSr=o("FlaxBartForSequenceClassification"),HSr=o(" (BART model)"),USr=l(),q3=a("li"),x7e=a("strong"),JSr=o("bert"),YSr=o(" \u2014 "),AY=a("a"),KSr=o("FlaxBertForSequenceClassification"),ZSr=o(" (BERT model)"),eRr=l(),N3=a("li"),$7e=a("strong"),oRr=o("big_bird"),rRr=o(" \u2014 "),yY=a("a"),tRr=o("FlaxBigBirdForSequenceClassification"),aRr=o(" (BigBird model)"),nRr=l(),j3=a("li"),k7e=a("strong"),sRr=o("distilbert"),lRr=o(" \u2014 "),LY=a("a"),iRr=o("FlaxDistilBertForSequenceClassification"),dRr=o(" (DistilBERT model)"),cRr=l(),D3=a("li"),S7e=a("strong"),fRr=o("electra"),mRr=o(" \u2014 "),xY=a("a"),gRr=o("FlaxElectraForSequenceClassification"),hRr=o(" (ELECTRA model)"),pRr=l(),G3=a("li"),R7e=a("strong"),uRr=o("mbart"),_Rr=o(" \u2014 "),$Y=a("a"),bRr=o("FlaxMBartForSequenceClassification"),vRr=o(" (mBART model)"),FRr=l(),O3=a("li"),P7e=a("strong"),TRr=o("roberta"),MRr=o(" \u2014 "),kY=a("a"),ERr=o("FlaxRobertaForSequenceClassification"),CRr=o(" (RoBERTa model)"),wRr=l(),V3=a("li"),B7e=a("strong"),ARr=o("roformer"),yRr=o(" \u2014 "),SY=a("a"),LRr=o("FlaxRoFormerForSequenceClassification"),xRr=o(" (RoFormer model)"),$Rr=l(),X3=a("li"),I7e=a("strong"),kRr=o("xlm-roberta"),SRr=o(" \u2014 "),RY=a("a"),RRr=o("FlaxXLMRobertaForSequenceClassification"),PRr=o(" (XLM-RoBERTa model)"),BRr=l(),F(z3.$$.fragment),_Ne=l(),Qc=a("h2"),W3=a("a"),q7e=a("span"),F(Bx.$$.fragment),IRr=l(),N7e=a("span"),qRr=o("FlaxAutoModelForQuestionAnswering"),bNe=l(),_r=a("div"),F(Ix.$$.fragment),NRr=l(),Hc=a("p"),jRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PY=a("a"),DRr=o("from_pretrained()"),GRr=o(" class method or the "),BY=a("a"),ORr=o("from_config()"),VRr=o(` class
method.`),XRr=l(),qx=a("p"),zRr=o("This class cannot be instantiated directly using "),j7e=a("code"),WRr=o("__init__()"),QRr=o(" (throws an error)."),HRr=l(),Qt=a("div"),F(Nx.$$.fragment),URr=l(),D7e=a("p"),JRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YRr=l(),Uc=a("p"),KRr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),ZRr=o("not"),ePr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),oPr=o("from_pretrained()"),rPr=o(" to load the model weights."),tPr=l(),F(Q3.$$.fragment),aPr=l(),zr=a("div"),F(jx.$$.fragment),nPr=l(),O7e=a("p"),sPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lPr=l(),Fn=a("p"),iPr=o("The model class to instantiate is selected based on the "),V7e=a("code"),dPr=o("model_type"),cPr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),fPr=o("pretrained_model_name_or_path"),mPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),gPr=o("pretrained_model_name_or_path"),hPr=o(":"),pPr=l(),$e=a("ul"),H3=a("li"),W7e=a("strong"),uPr=o("albert"),_Pr=o(" \u2014 "),qY=a("a"),bPr=o("FlaxAlbertForQuestionAnswering"),vPr=o(" (ALBERT model)"),FPr=l(),U3=a("li"),Q7e=a("strong"),TPr=o("bart"),MPr=o(" \u2014 "),NY=a("a"),EPr=o("FlaxBartForQuestionAnswering"),CPr=o(" (BART model)"),wPr=l(),J3=a("li"),H7e=a("strong"),APr=o("bert"),yPr=o(" \u2014 "),jY=a("a"),LPr=o("FlaxBertForQuestionAnswering"),xPr=o(" (BERT model)"),$Pr=l(),Y3=a("li"),U7e=a("strong"),kPr=o("big_bird"),SPr=o(" \u2014 "),DY=a("a"),RPr=o("FlaxBigBirdForQuestionAnswering"),PPr=o(" (BigBird model)"),BPr=l(),K3=a("li"),J7e=a("strong"),IPr=o("distilbert"),qPr=o(" \u2014 "),GY=a("a"),NPr=o("FlaxDistilBertForQuestionAnswering"),jPr=o(" (DistilBERT model)"),DPr=l(),Z3=a("li"),Y7e=a("strong"),GPr=o("electra"),OPr=o(" \u2014 "),OY=a("a"),VPr=o("FlaxElectraForQuestionAnswering"),XPr=o(" (ELECTRA model)"),zPr=l(),ew=a("li"),K7e=a("strong"),WPr=o("mbart"),QPr=o(" \u2014 "),VY=a("a"),HPr=o("FlaxMBartForQuestionAnswering"),UPr=o(" (mBART model)"),JPr=l(),ow=a("li"),Z7e=a("strong"),YPr=o("roberta"),KPr=o(" \u2014 "),XY=a("a"),ZPr=o("FlaxRobertaForQuestionAnswering"),eBr=o(" (RoBERTa model)"),oBr=l(),rw=a("li"),eMe=a("strong"),rBr=o("roformer"),tBr=o(" \u2014 "),zY=a("a"),aBr=o("FlaxRoFormerForQuestionAnswering"),nBr=o(" (RoFormer model)"),sBr=l(),tw=a("li"),oMe=a("strong"),lBr=o("xlm-roberta"),iBr=o(" \u2014 "),WY=a("a"),dBr=o("FlaxXLMRobertaForQuestionAnswering"),cBr=o(" (XLM-RoBERTa model)"),fBr=l(),F(aw.$$.fragment),vNe=l(),Jc=a("h2"),nw=a("a"),rMe=a("span"),F(Dx.$$.fragment),mBr=l(),tMe=a("span"),gBr=o("FlaxAutoModelForTokenClassification"),FNe=l(),br=a("div"),F(Gx.$$.fragment),hBr=l(),Yc=a("p"),pBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=a("a"),uBr=o("from_pretrained()"),_Br=o(" class method or the "),HY=a("a"),bBr=o("from_config()"),vBr=o(` class
method.`),FBr=l(),Ox=a("p"),TBr=o("This class cannot be instantiated directly using "),aMe=a("code"),MBr=o("__init__()"),EBr=o(" (throws an error)."),CBr=l(),Ht=a("div"),F(Vx.$$.fragment),wBr=l(),nMe=a("p"),ABr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yBr=l(),Kc=a("p"),LBr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),xBr=o("not"),$Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),kBr=o("from_pretrained()"),SBr=o(" to load the model weights."),RBr=l(),F(sw.$$.fragment),PBr=l(),Wr=a("div"),F(Xx.$$.fragment),BBr=l(),lMe=a("p"),IBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qBr=l(),Tn=a("p"),NBr=o("The model class to instantiate is selected based on the "),iMe=a("code"),jBr=o("model_type"),DBr=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),GBr=o("pretrained_model_name_or_path"),OBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),VBr=o("pretrained_model_name_or_path"),XBr=o(":"),zBr=l(),De=a("ul"),lw=a("li"),fMe=a("strong"),WBr=o("albert"),QBr=o(" \u2014 "),JY=a("a"),HBr=o("FlaxAlbertForTokenClassification"),UBr=o(" (ALBERT model)"),JBr=l(),iw=a("li"),mMe=a("strong"),YBr=o("bert"),KBr=o(" \u2014 "),YY=a("a"),ZBr=o("FlaxBertForTokenClassification"),eIr=o(" (BERT model)"),oIr=l(),dw=a("li"),gMe=a("strong"),rIr=o("big_bird"),tIr=o(" \u2014 "),KY=a("a"),aIr=o("FlaxBigBirdForTokenClassification"),nIr=o(" (BigBird model)"),sIr=l(),cw=a("li"),hMe=a("strong"),lIr=o("distilbert"),iIr=o(" \u2014 "),ZY=a("a"),dIr=o("FlaxDistilBertForTokenClassification"),cIr=o(" (DistilBERT model)"),fIr=l(),fw=a("li"),pMe=a("strong"),mIr=o("electra"),gIr=o(" \u2014 "),eK=a("a"),hIr=o("FlaxElectraForTokenClassification"),pIr=o(" (ELECTRA model)"),uIr=l(),mw=a("li"),uMe=a("strong"),_Ir=o("roberta"),bIr=o(" \u2014 "),oK=a("a"),vIr=o("FlaxRobertaForTokenClassification"),FIr=o(" (RoBERTa model)"),TIr=l(),gw=a("li"),_Me=a("strong"),MIr=o("roformer"),EIr=o(" \u2014 "),rK=a("a"),CIr=o("FlaxRoFormerForTokenClassification"),wIr=o(" (RoFormer model)"),AIr=l(),hw=a("li"),bMe=a("strong"),yIr=o("xlm-roberta"),LIr=o(" \u2014 "),tK=a("a"),xIr=o("FlaxXLMRobertaForTokenClassification"),$Ir=o(" (XLM-RoBERTa model)"),kIr=l(),F(pw.$$.fragment),TNe=l(),Zc=a("h2"),uw=a("a"),vMe=a("span"),F(zx.$$.fragment),SIr=l(),FMe=a("span"),RIr=o("FlaxAutoModelForMultipleChoice"),MNe=l(),vr=a("div"),F(Wx.$$.fragment),PIr=l(),ef=a("p"),BIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aK=a("a"),IIr=o("from_pretrained()"),qIr=o(" class method or the "),nK=a("a"),NIr=o("from_config()"),jIr=o(` class
method.`),DIr=l(),Qx=a("p"),GIr=o("This class cannot be instantiated directly using "),TMe=a("code"),OIr=o("__init__()"),VIr=o(" (throws an error)."),XIr=l(),Ut=a("div"),F(Hx.$$.fragment),zIr=l(),MMe=a("p"),WIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QIr=l(),of=a("p"),HIr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),UIr=o("not"),JIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),YIr=o("from_pretrained()"),KIr=o(" to load the model weights."),ZIr=l(),F(_w.$$.fragment),eqr=l(),Qr=a("div"),F(Ux.$$.fragment),oqr=l(),CMe=a("p"),rqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tqr=l(),Mn=a("p"),aqr=o("The model class to instantiate is selected based on the "),wMe=a("code"),nqr=o("model_type"),sqr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),lqr=o("pretrained_model_name_or_path"),iqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=a("code"),dqr=o("pretrained_model_name_or_path"),cqr=o(":"),fqr=l(),Ge=a("ul"),bw=a("li"),LMe=a("strong"),mqr=o("albert"),gqr=o(" \u2014 "),lK=a("a"),hqr=o("FlaxAlbertForMultipleChoice"),pqr=o(" (ALBERT model)"),uqr=l(),vw=a("li"),xMe=a("strong"),_qr=o("bert"),bqr=o(" \u2014 "),iK=a("a"),vqr=o("FlaxBertForMultipleChoice"),Fqr=o(" (BERT model)"),Tqr=l(),Fw=a("li"),$Me=a("strong"),Mqr=o("big_bird"),Eqr=o(" \u2014 "),dK=a("a"),Cqr=o("FlaxBigBirdForMultipleChoice"),wqr=o(" (BigBird model)"),Aqr=l(),Tw=a("li"),kMe=a("strong"),yqr=o("distilbert"),Lqr=o(" \u2014 "),cK=a("a"),xqr=o("FlaxDistilBertForMultipleChoice"),$qr=o(" (DistilBERT model)"),kqr=l(),Mw=a("li"),SMe=a("strong"),Sqr=o("electra"),Rqr=o(" \u2014 "),fK=a("a"),Pqr=o("FlaxElectraForMultipleChoice"),Bqr=o(" (ELECTRA model)"),Iqr=l(),Ew=a("li"),RMe=a("strong"),qqr=o("roberta"),Nqr=o(" \u2014 "),mK=a("a"),jqr=o("FlaxRobertaForMultipleChoice"),Dqr=o(" (RoBERTa model)"),Gqr=l(),Cw=a("li"),PMe=a("strong"),Oqr=o("roformer"),Vqr=o(" \u2014 "),gK=a("a"),Xqr=o("FlaxRoFormerForMultipleChoice"),zqr=o(" (RoFormer model)"),Wqr=l(),ww=a("li"),BMe=a("strong"),Qqr=o("xlm-roberta"),Hqr=o(" \u2014 "),hK=a("a"),Uqr=o("FlaxXLMRobertaForMultipleChoice"),Jqr=o(" (XLM-RoBERTa model)"),Yqr=l(),F(Aw.$$.fragment),ENe=l(),rf=a("h2"),yw=a("a"),IMe=a("span"),F(Jx.$$.fragment),Kqr=l(),qMe=a("span"),Zqr=o("FlaxAutoModelForNextSentencePrediction"),CNe=l(),Fr=a("div"),F(Yx.$$.fragment),eNr=l(),tf=a("p"),oNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pK=a("a"),rNr=o("from_pretrained()"),tNr=o(" class method or the "),uK=a("a"),aNr=o("from_config()"),nNr=o(` class
method.`),sNr=l(),Kx=a("p"),lNr=o("This class cannot be instantiated directly using "),NMe=a("code"),iNr=o("__init__()"),dNr=o(" (throws an error)."),cNr=l(),Jt=a("div"),F(Zx.$$.fragment),fNr=l(),jMe=a("p"),mNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gNr=l(),af=a("p"),hNr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),pNr=o("not"),uNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),_Nr=o("from_pretrained()"),bNr=o(" to load the model weights."),vNr=l(),F(Lw.$$.fragment),FNr=l(),Hr=a("div"),F(e9.$$.fragment),TNr=l(),GMe=a("p"),MNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ENr=l(),En=a("p"),CNr=o("The model class to instantiate is selected based on the "),OMe=a("code"),wNr=o("model_type"),ANr=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),yNr=o("pretrained_model_name_or_path"),LNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(":"),kNr=l(),zMe=a("ul"),xw=a("li"),WMe=a("strong"),SNr=o("bert"),RNr=o(" \u2014 "),bK=a("a"),PNr=o("FlaxBertForNextSentencePrediction"),BNr=o(" (BERT model)"),INr=l(),F($w.$$.fragment),wNe=l(),nf=a("h2"),kw=a("a"),QMe=a("span"),F(o9.$$.fragment),qNr=l(),HMe=a("span"),NNr=o("FlaxAutoModelForImageClassification"),ANe=l(),Tr=a("div"),F(r9.$$.fragment),jNr=l(),sf=a("p"),DNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vK=a("a"),GNr=o("from_pretrained()"),ONr=o(" class method or the "),FK=a("a"),VNr=o("from_config()"),XNr=o(` class
method.`),zNr=l(),t9=a("p"),WNr=o("This class cannot be instantiated directly using "),UMe=a("code"),QNr=o("__init__()"),HNr=o(" (throws an error)."),UNr=l(),Yt=a("div"),F(a9.$$.fragment),JNr=l(),JMe=a("p"),YNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KNr=l(),lf=a("p"),ZNr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),ejr=o("not"),ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),rjr=o("from_pretrained()"),tjr=o(" to load the model weights."),ajr=l(),F(Sw.$$.fragment),njr=l(),Ur=a("div"),F(n9.$$.fragment),sjr=l(),KMe=a("p"),ljr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ijr=l(),Cn=a("p"),djr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),cjr=o("model_type"),fjr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),mjr=o("pretrained_model_name_or_path"),gjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),hjr=o("pretrained_model_name_or_path"),pjr=o(":"),ujr=l(),s9=a("ul"),Rw=a("li"),rEe=a("strong"),_jr=o("beit"),bjr=o(" \u2014 "),MK=a("a"),vjr=o("FlaxBeitForImageClassification"),Fjr=o(" (BEiT model)"),Tjr=l(),Pw=a("li"),tEe=a("strong"),Mjr=o("vit"),Ejr=o(" \u2014 "),EK=a("a"),Cjr=o("FlaxViTForImageClassification"),wjr=o(" (ViT model)"),Ajr=l(),F(Bw.$$.fragment),yNe=l(),df=a("h2"),Iw=a("a"),aEe=a("span"),F(l9.$$.fragment),yjr=l(),nEe=a("span"),Ljr=o("FlaxAutoModelForVision2Seq"),LNe=l(),Mr=a("div"),F(i9.$$.fragment),xjr=l(),cf=a("p"),$jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=a("a"),kjr=o("from_pretrained()"),Sjr=o(" class method or the "),wK=a("a"),Rjr=o("from_config()"),Pjr=o(` class
method.`),Bjr=l(),d9=a("p"),Ijr=o("This class cannot be instantiated directly using "),sEe=a("code"),qjr=o("__init__()"),Njr=o(" (throws an error)."),jjr=l(),Kt=a("div"),F(c9.$$.fragment),Djr=l(),lEe=a("p"),Gjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ojr=l(),ff=a("p"),Vjr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),Xjr=o("not"),zjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" to load the model weights."),Hjr=l(),F(qw.$$.fragment),Ujr=l(),Jr=a("div"),F(f9.$$.fragment),Jjr=l(),dEe=a("p"),Yjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kjr=l(),wn=a("p"),Zjr=o("The model class to instantiate is selected based on the "),cEe=a("code"),eDr=o("model_type"),oDr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),rDr=o("pretrained_model_name_or_path"),tDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),aDr=o("pretrained_model_name_or_path"),nDr=o(":"),sDr=l(),gEe=a("ul"),Nw=a("li"),hEe=a("strong"),lDr=o("vision-encoder-decoder"),iDr=o(" \u2014 "),yK=a("a"),dDr=o("FlaxVisionEncoderDecoderModel"),cDr=o(" (Vision Encoder decoder model)"),fDr=l(),F(jw.$$.fragment),this.h()},l(f){const _=nLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var m9=s(p);m=n(m9,"A",{id:!0,class:!0,href:!0});var pEe=s(m);u=n(pEe,"SPAN",{});var uEe=s(u);T(d.$$.fragment,uEe),uEe.forEach(t),pEe.forEach(t),h=i(m9),Mo=n(m9,"SPAN",{});var _Ee=s(Mo);fi=r(_Ee,"Auto Classes"),_Ee.forEach(t),m9.forEach(t),pf=i(f),rt=n(f,"P",{});var g9=s(rt);mi=r(g9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(g9,"CODE",{});var bEe=s(gi);t0=r(bEe,"from_pretrained()"),bEe.forEach(t),uf=r(g9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),g9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var vEe=s(yn);a0=r(vEe,"AutoConfig"),vEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var FEe=s(xn);n0=r(FEe,"AutoModel"),FEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var TEe=s($n);s0=r(TEe,"AutoTokenizer"),TEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var h9=s(Ae);w$=r(h9,"will create a model that is an instance of "),_i=n(h9,"A",{href:!0});var MEe=s(_i);A$=r(MEe,"BertModel"),MEe.forEach(t),y$=r(h9,"."),h9.forEach(t),Eo=i(f),wa=n(f,"P",{});var p9=s(wa);L$=r(p9,"There is one class of "),bf=n(p9,"CODE",{});var EEe=s(bf);x$=r(EEe,"AutoModel"),EEe.forEach(t),qDe=r(p9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),p9.forEach(t),AIe=i(f),bi=n(f,"H2",{class:!0});var u9=s(bi);vf=n(u9,"A",{id:!0,class:!0,href:!0});var CEe=s(vf);Fee=n(CEe,"SPAN",{});var wEe=s(Fee);T(l0.$$.fragment,wEe),wEe.forEach(t),CEe.forEach(t),NDe=i(u9),Tee=n(u9,"SPAN",{});var AEe=s(Tee);jDe=r(AEe,"Extending the Auto Classes"),AEe.forEach(t),u9.forEach(t),yIe=i(f),kn=n(f,"P",{});var mf=s(kn);DDe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mee=n(mf,"CODE",{});var yEe=s(Mee);GDe=r(yEe,"NewModel"),yEe.forEach(t),ODe=r(mf,", make sure you have a "),Eee=n(mf,"CODE",{});var LEe=s(Eee);VDe=r(LEe,"NewModelConfig"),LEe.forEach(t),XDe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),LIe=i(f),T(i0.$$.fragment,f),xIe=i(f),$$=n(f,"P",{});var xEe=s($$);zDe=r(xEe,"You will then be able to use the auto classes like you would usually do!"),xEe.forEach(t),$Ie=i(f),T(Ff.$$.fragment,f),kIe=i(f),vi=n(f,"H2",{class:!0});var _9=s(vi);Tf=n(_9,"A",{id:!0,class:!0,href:!0});var $Ee=s(Tf);Cee=n($Ee,"SPAN",{});var kEe=s(Cee);T(d0.$$.fragment,kEe),kEe.forEach(t),$Ee.forEach(t),WDe=i(_9),wee=n(_9,"SPAN",{});var SEe=s(wee);QDe=r(SEe,"AutoConfig"),SEe.forEach(t),_9.forEach(t),SIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(c0.$$.fragment,et),HDe=i(et),f0=n(et,"P",{});var b9=s(f0);UDe=r(b9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k$=n(b9,"A",{href:!0});var REe=s(k$);JDe=r(REe,"from_pretrained()"),REe.forEach(t),YDe=r(b9," class method."),b9.forEach(t),KDe=i(et),m0=n(et,"P",{});var v9=s(m0);ZDe=r(v9,"This class cannot be instantiated directly using "),Aee=n(v9,"CODE",{});var PEe=s(Aee);eGe=r(PEe,"__init__()"),PEe.forEach(t),oGe=r(v9," (throws an error)."),v9.forEach(t),rGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(g0.$$.fragment,ot),tGe=i(ot),yee=n(ot,"P",{});var BEe=s(yee);aGe=r(BEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),BEe.forEach(t),nGe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);sGe=r(gf,"The configuration class to instantiate is selected based on the "),Lee=n(gf,"CODE",{});var IEe=s(Lee);lGe=r(IEe,"model_type"),IEe.forEach(t),iGe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xee=n(gf,"CODE",{});var qEe=s(xee);dGe=r(qEe,"pretrained_model_name_or_path"),qEe.forEach(t),cGe=r(gf,":"),gf.forEach(t),fGe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var Dw=s(Mf);$ee=n(Dw,"STRONG",{});var NEe=s($ee);mGe=r(NEe,"albert"),NEe.forEach(t),gGe=r(Dw," \u2014 "),S$=n(Dw,"A",{href:!0});var jEe=s(S$);hGe=r(jEe,"AlbertConfig"),jEe.forEach(t),pGe=r(Dw," (ALBERT model)"),Dw.forEach(t),uGe=i(y),Ef=n(y,"LI",{});var Gw=s(Ef);kee=n(Gw,"STRONG",{});var DEe=s(kee);_Ge=r(DEe,"bart"),DEe.forEach(t),bGe=r(Gw," \u2014 "),R$=n(Gw,"A",{href:!0});var GEe=s(R$);vGe=r(GEe,"BartConfig"),GEe.forEach(t),FGe=r(Gw," (BART model)"),Gw.forEach(t),TGe=i(y),Cf=n(y,"LI",{});var Ow=s(Cf);See=n(Ow,"STRONG",{});var OEe=s(See);MGe=r(OEe,"beit"),OEe.forEach(t),EGe=r(Ow," \u2014 "),P$=n(Ow,"A",{href:!0});var VEe=s(P$);CGe=r(VEe,"BeitConfig"),VEe.forEach(t),wGe=r(Ow," (BEiT model)"),Ow.forEach(t),AGe=i(y),wf=n(y,"LI",{});var Vw=s(wf);Ree=n(Vw,"STRONG",{});var XEe=s(Ree);yGe=r(XEe,"bert"),XEe.forEach(t),LGe=r(Vw," \u2014 "),B$=n(Vw,"A",{href:!0});var zEe=s(B$);xGe=r(zEe,"BertConfig"),zEe.forEach(t),$Ge=r(Vw," (BERT model)"),Vw.forEach(t),kGe=i(y),Af=n(y,"LI",{});var Xw=s(Af);Pee=n(Xw,"STRONG",{});var WEe=s(Pee);SGe=r(WEe,"bert-generation"),WEe.forEach(t),RGe=r(Xw," \u2014 "),I$=n(Xw,"A",{href:!0});var QEe=s(I$);PGe=r(QEe,"BertGenerationConfig"),QEe.forEach(t),BGe=r(Xw," (Bert Generation model)"),Xw.forEach(t),IGe=i(y),yf=n(y,"LI",{});var zw=s(yf);Bee=n(zw,"STRONG",{});var HEe=s(Bee);qGe=r(HEe,"big_bird"),HEe.forEach(t),NGe=r(zw," \u2014 "),q$=n(zw,"A",{href:!0});var UEe=s(q$);jGe=r(UEe,"BigBirdConfig"),UEe.forEach(t),DGe=r(zw," (BigBird model)"),zw.forEach(t),GGe=i(y),Lf=n(y,"LI",{});var Ww=s(Lf);Iee=n(Ww,"STRONG",{});var JEe=s(Iee);OGe=r(JEe,"bigbird_pegasus"),JEe.forEach(t),VGe=r(Ww," \u2014 "),N$=n(Ww,"A",{href:!0});var YEe=s(N$);XGe=r(YEe,"BigBirdPegasusConfig"),YEe.forEach(t),zGe=r(Ww," (BigBirdPegasus model)"),Ww.forEach(t),WGe=i(y),xf=n(y,"LI",{});var Qw=s(xf);qee=n(Qw,"STRONG",{});var KEe=s(qee);QGe=r(KEe,"blenderbot"),KEe.forEach(t),HGe=r(Qw," \u2014 "),j$=n(Qw,"A",{href:!0});var ZEe=s(j$);UGe=r(ZEe,"BlenderbotConfig"),ZEe.forEach(t),JGe=r(Qw," (Blenderbot model)"),Qw.forEach(t),YGe=i(y),$f=n(y,"LI",{});var Hw=s($f);Nee=n(Hw,"STRONG",{});var eCe=s(Nee);KGe=r(eCe,"blenderbot-small"),eCe.forEach(t),ZGe=r(Hw," \u2014 "),D$=n(Hw,"A",{href:!0});var oCe=s(D$);eOe=r(oCe,"BlenderbotSmallConfig"),oCe.forEach(t),oOe=r(Hw," (BlenderbotSmall model)"),Hw.forEach(t),rOe=i(y),kf=n(y,"LI",{});var Uw=s(kf);jee=n(Uw,"STRONG",{});var rCe=s(jee);tOe=r(rCe,"camembert"),rCe.forEach(t),aOe=r(Uw," \u2014 "),G$=n(Uw,"A",{href:!0});var tCe=s(G$);nOe=r(tCe,"CamembertConfig"),tCe.forEach(t),sOe=r(Uw," (CamemBERT model)"),Uw.forEach(t),lOe=i(y),Sf=n(y,"LI",{});var Jw=s(Sf);Dee=n(Jw,"STRONG",{});var aCe=s(Dee);iOe=r(aCe,"canine"),aCe.forEach(t),dOe=r(Jw," \u2014 "),O$=n(Jw,"A",{href:!0});var nCe=s(O$);cOe=r(nCe,"CanineConfig"),nCe.forEach(t),fOe=r(Jw," (Canine model)"),Jw.forEach(t),mOe=i(y),Rf=n(y,"LI",{});var Yw=s(Rf);Gee=n(Yw,"STRONG",{});var sCe=s(Gee);gOe=r(sCe,"clip"),sCe.forEach(t),hOe=r(Yw," \u2014 "),V$=n(Yw,"A",{href:!0});var lCe=s(V$);pOe=r(lCe,"CLIPConfig"),lCe.forEach(t),uOe=r(Yw," (CLIP model)"),Yw.forEach(t),_Oe=i(y),Pf=n(y,"LI",{});var Kw=s(Pf);Oee=n(Kw,"STRONG",{});var iCe=s(Oee);bOe=r(iCe,"convbert"),iCe.forEach(t),vOe=r(Kw," \u2014 "),X$=n(Kw,"A",{href:!0});var dCe=s(X$);FOe=r(dCe,"ConvBertConfig"),dCe.forEach(t),TOe=r(Kw," (ConvBERT model)"),Kw.forEach(t),MOe=i(y),Bf=n(y,"LI",{});var Zw=s(Bf);Vee=n(Zw,"STRONG",{});var cCe=s(Vee);EOe=r(cCe,"convnext"),cCe.forEach(t),COe=r(Zw," \u2014 "),z$=n(Zw,"A",{href:!0});var fCe=s(z$);wOe=r(fCe,"ConvNextConfig"),fCe.forEach(t),AOe=r(Zw," (ConvNext model)"),Zw.forEach(t),yOe=i(y),If=n(y,"LI",{});var eA=s(If);Xee=n(eA,"STRONG",{});var mCe=s(Xee);LOe=r(mCe,"ctrl"),mCe.forEach(t),xOe=r(eA," \u2014 "),W$=n(eA,"A",{href:!0});var gCe=s(W$);$Oe=r(gCe,"CTRLConfig"),gCe.forEach(t),kOe=r(eA," (CTRL model)"),eA.forEach(t),SOe=i(y),qf=n(y,"LI",{});var oA=s(qf);zee=n(oA,"STRONG",{});var hCe=s(zee);ROe=r(hCe,"data2vec-audio"),hCe.forEach(t),POe=r(oA," \u2014 "),Q$=n(oA,"A",{href:!0});var pCe=s(Q$);BOe=r(pCe,"Data2VecAudioConfig"),pCe.forEach(t),IOe=r(oA," (Data2VecAudio model)"),oA.forEach(t),qOe=i(y),Nf=n(y,"LI",{});var rA=s(Nf);Wee=n(rA,"STRONG",{});var uCe=s(Wee);NOe=r(uCe,"data2vec-text"),uCe.forEach(t),jOe=r(rA," \u2014 "),H$=n(rA,"A",{href:!0});var _Ce=s(H$);DOe=r(_Ce,"Data2VecTextConfig"),_Ce.forEach(t),GOe=r(rA," (Data2VecText model)"),rA.forEach(t),OOe=i(y),jf=n(y,"LI",{});var tA=s(jf);Qee=n(tA,"STRONG",{});var bCe=s(Qee);VOe=r(bCe,"data2vec-vision"),bCe.forEach(t),XOe=r(tA," \u2014 "),U$=n(tA,"A",{href:!0});var vCe=s(U$);zOe=r(vCe,"Data2VecVisionConfig"),vCe.forEach(t),WOe=r(tA," (Data2VecVision model)"),tA.forEach(t),QOe=i(y),Df=n(y,"LI",{});var aA=s(Df);Hee=n(aA,"STRONG",{});var FCe=s(Hee);HOe=r(FCe,"deberta"),FCe.forEach(t),UOe=r(aA," \u2014 "),J$=n(aA,"A",{href:!0});var TCe=s(J$);JOe=r(TCe,"DebertaConfig"),TCe.forEach(t),YOe=r(aA," (DeBERTa model)"),aA.forEach(t),KOe=i(y),Gf=n(y,"LI",{});var nA=s(Gf);Uee=n(nA,"STRONG",{});var MCe=s(Uee);ZOe=r(MCe,"deberta-v2"),MCe.forEach(t),eVe=r(nA," \u2014 "),Y$=n(nA,"A",{href:!0});var ECe=s(Y$);oVe=r(ECe,"DebertaV2Config"),ECe.forEach(t),rVe=r(nA," (DeBERTa-v2 model)"),nA.forEach(t),tVe=i(y),Of=n(y,"LI",{});var sA=s(Of);Jee=n(sA,"STRONG",{});var CCe=s(Jee);aVe=r(CCe,"decision_transformer"),CCe.forEach(t),nVe=r(sA," \u2014 "),K$=n(sA,"A",{href:!0});var wCe=s(K$);sVe=r(wCe,"DecisionTransformerConfig"),wCe.forEach(t),lVe=r(sA," (Decision Transformer model)"),sA.forEach(t),iVe=i(y),Vf=n(y,"LI",{});var lA=s(Vf);Yee=n(lA,"STRONG",{});var ACe=s(Yee);dVe=r(ACe,"deit"),ACe.forEach(t),cVe=r(lA," \u2014 "),Z$=n(lA,"A",{href:!0});var yCe=s(Z$);fVe=r(yCe,"DeiTConfig"),yCe.forEach(t),mVe=r(lA," (DeiT model)"),lA.forEach(t),gVe=i(y),Xf=n(y,"LI",{});var iA=s(Xf);Kee=n(iA,"STRONG",{});var LCe=s(Kee);hVe=r(LCe,"detr"),LCe.forEach(t),pVe=r(iA," \u2014 "),ek=n(iA,"A",{href:!0});var gDr=s(ek);uVe=r(gDr,"DetrConfig"),gDr.forEach(t),_Ve=r(iA," (DETR model)"),iA.forEach(t),bVe=i(y),zf=n(y,"LI",{});var xCe=s(zf);Zee=n(xCe,"STRONG",{});var hDr=s(Zee);vVe=r(hDr,"distilbert"),hDr.forEach(t),FVe=r(xCe," \u2014 "),ok=n(xCe,"A",{href:!0});var pDr=s(ok);TVe=r(pDr,"DistilBertConfig"),pDr.forEach(t),MVe=r(xCe," (DistilBERT model)"),xCe.forEach(t),EVe=i(y),Wf=n(y,"LI",{});var $Ce=s(Wf);eoe=n($Ce,"STRONG",{});var uDr=s(eoe);CVe=r(uDr,"dpr"),uDr.forEach(t),wVe=r($Ce," \u2014 "),rk=n($Ce,"A",{href:!0});var _Dr=s(rk);AVe=r(_Dr,"DPRConfig"),_Dr.forEach(t),yVe=r($Ce," (DPR model)"),$Ce.forEach(t),LVe=i(y),Qf=n(y,"LI",{});var kCe=s(Qf);ooe=n(kCe,"STRONG",{});var bDr=s(ooe);xVe=r(bDr,"dpt"),bDr.forEach(t),$Ve=r(kCe," \u2014 "),tk=n(kCe,"A",{href:!0});var vDr=s(tk);kVe=r(vDr,"DPTConfig"),vDr.forEach(t),SVe=r(kCe," (DPT model)"),kCe.forEach(t),RVe=i(y),Hf=n(y,"LI",{});var SCe=s(Hf);roe=n(SCe,"STRONG",{});var FDr=s(roe);PVe=r(FDr,"electra"),FDr.forEach(t),BVe=r(SCe," \u2014 "),ak=n(SCe,"A",{href:!0});var TDr=s(ak);IVe=r(TDr,"ElectraConfig"),TDr.forEach(t),qVe=r(SCe," (ELECTRA model)"),SCe.forEach(t),NVe=i(y),Uf=n(y,"LI",{});var RCe=s(Uf);toe=n(RCe,"STRONG",{});var MDr=s(toe);jVe=r(MDr,"encoder-decoder"),MDr.forEach(t),DVe=r(RCe," \u2014 "),nk=n(RCe,"A",{href:!0});var EDr=s(nk);GVe=r(EDr,"EncoderDecoderConfig"),EDr.forEach(t),OVe=r(RCe," (Encoder decoder model)"),RCe.forEach(t),VVe=i(y),Jf=n(y,"LI",{});var PCe=s(Jf);aoe=n(PCe,"STRONG",{});var CDr=s(aoe);XVe=r(CDr,"flaubert"),CDr.forEach(t),zVe=r(PCe," \u2014 "),sk=n(PCe,"A",{href:!0});var wDr=s(sk);WVe=r(wDr,"FlaubertConfig"),wDr.forEach(t),QVe=r(PCe," (FlauBERT model)"),PCe.forEach(t),HVe=i(y),Yf=n(y,"LI",{});var BCe=s(Yf);noe=n(BCe,"STRONG",{});var ADr=s(noe);UVe=r(ADr,"flava"),ADr.forEach(t),JVe=r(BCe," \u2014 "),lk=n(BCe,"A",{href:!0});var yDr=s(lk);YVe=r(yDr,"FlavaConfig"),yDr.forEach(t),KVe=r(BCe," (Flava model)"),BCe.forEach(t),ZVe=i(y),Kf=n(y,"LI",{});var ICe=s(Kf);soe=n(ICe,"STRONG",{});var LDr=s(soe);eXe=r(LDr,"fnet"),LDr.forEach(t),oXe=r(ICe," \u2014 "),ik=n(ICe,"A",{href:!0});var xDr=s(ik);rXe=r(xDr,"FNetConfig"),xDr.forEach(t),tXe=r(ICe," (FNet model)"),ICe.forEach(t),aXe=i(y),Zf=n(y,"LI",{});var qCe=s(Zf);loe=n(qCe,"STRONG",{});var $Dr=s(loe);nXe=r($Dr,"fsmt"),$Dr.forEach(t),sXe=r(qCe," \u2014 "),dk=n(qCe,"A",{href:!0});var kDr=s(dk);lXe=r(kDr,"FSMTConfig"),kDr.forEach(t),iXe=r(qCe," (FairSeq Machine-Translation model)"),qCe.forEach(t),dXe=i(y),em=n(y,"LI",{});var NCe=s(em);ioe=n(NCe,"STRONG",{});var SDr=s(ioe);cXe=r(SDr,"funnel"),SDr.forEach(t),fXe=r(NCe," \u2014 "),ck=n(NCe,"A",{href:!0});var RDr=s(ck);mXe=r(RDr,"FunnelConfig"),RDr.forEach(t),gXe=r(NCe," (Funnel Transformer model)"),NCe.forEach(t),hXe=i(y),om=n(y,"LI",{});var jCe=s(om);doe=n(jCe,"STRONG",{});var PDr=s(doe);pXe=r(PDr,"glpn"),PDr.forEach(t),uXe=r(jCe," \u2014 "),fk=n(jCe,"A",{href:!0});var BDr=s(fk);_Xe=r(BDr,"GLPNConfig"),BDr.forEach(t),bXe=r(jCe," (GLPN model)"),jCe.forEach(t),vXe=i(y),rm=n(y,"LI",{});var DCe=s(rm);coe=n(DCe,"STRONG",{});var IDr=s(coe);FXe=r(IDr,"gpt2"),IDr.forEach(t),TXe=r(DCe," \u2014 "),mk=n(DCe,"A",{href:!0});var qDr=s(mk);MXe=r(qDr,"GPT2Config"),qDr.forEach(t),EXe=r(DCe," (OpenAI GPT-2 model)"),DCe.forEach(t),CXe=i(y),tm=n(y,"LI",{});var GCe=s(tm);foe=n(GCe,"STRONG",{});var NDr=s(foe);wXe=r(NDr,"gpt_neo"),NDr.forEach(t),AXe=r(GCe," \u2014 "),gk=n(GCe,"A",{href:!0});var jDr=s(gk);yXe=r(jDr,"GPTNeoConfig"),jDr.forEach(t),LXe=r(GCe," (GPT Neo model)"),GCe.forEach(t),xXe=i(y),am=n(y,"LI",{});var OCe=s(am);moe=n(OCe,"STRONG",{});var DDr=s(moe);$Xe=r(DDr,"gptj"),DDr.forEach(t),kXe=r(OCe," \u2014 "),hk=n(OCe,"A",{href:!0});var GDr=s(hk);SXe=r(GDr,"GPTJConfig"),GDr.forEach(t),RXe=r(OCe," (GPT-J model)"),OCe.forEach(t),PXe=i(y),nm=n(y,"LI",{});var VCe=s(nm);goe=n(VCe,"STRONG",{});var ODr=s(goe);BXe=r(ODr,"hubert"),ODr.forEach(t),IXe=r(VCe," \u2014 "),pk=n(VCe,"A",{href:!0});var VDr=s(pk);qXe=r(VDr,"HubertConfig"),VDr.forEach(t),NXe=r(VCe," (Hubert model)"),VCe.forEach(t),jXe=i(y),sm=n(y,"LI",{});var XCe=s(sm);hoe=n(XCe,"STRONG",{});var XDr=s(hoe);DXe=r(XDr,"ibert"),XDr.forEach(t),GXe=r(XCe," \u2014 "),uk=n(XCe,"A",{href:!0});var zDr=s(uk);OXe=r(zDr,"IBertConfig"),zDr.forEach(t),VXe=r(XCe," (I-BERT model)"),XCe.forEach(t),XXe=i(y),lm=n(y,"LI",{});var zCe=s(lm);poe=n(zCe,"STRONG",{});var WDr=s(poe);zXe=r(WDr,"imagegpt"),WDr.forEach(t),WXe=r(zCe," \u2014 "),_k=n(zCe,"A",{href:!0});var QDr=s(_k);QXe=r(QDr,"ImageGPTConfig"),QDr.forEach(t),HXe=r(zCe," (ImageGPT model)"),zCe.forEach(t),UXe=i(y),im=n(y,"LI",{});var WCe=s(im);uoe=n(WCe,"STRONG",{});var HDr=s(uoe);JXe=r(HDr,"layoutlm"),HDr.forEach(t),YXe=r(WCe," \u2014 "),bk=n(WCe,"A",{href:!0});var UDr=s(bk);KXe=r(UDr,"LayoutLMConfig"),UDr.forEach(t),ZXe=r(WCe," (LayoutLM model)"),WCe.forEach(t),eze=i(y),dm=n(y,"LI",{});var QCe=s(dm);_oe=n(QCe,"STRONG",{});var JDr=s(_oe);oze=r(JDr,"layoutlmv2"),JDr.forEach(t),rze=r(QCe," \u2014 "),vk=n(QCe,"A",{href:!0});var YDr=s(vk);tze=r(YDr,"LayoutLMv2Config"),YDr.forEach(t),aze=r(QCe," (LayoutLMv2 model)"),QCe.forEach(t),nze=i(y),cm=n(y,"LI",{});var HCe=s(cm);boe=n(HCe,"STRONG",{});var KDr=s(boe);sze=r(KDr,"led"),KDr.forEach(t),lze=r(HCe," \u2014 "),Fk=n(HCe,"A",{href:!0});var ZDr=s(Fk);ize=r(ZDr,"LEDConfig"),ZDr.forEach(t),dze=r(HCe," (LED model)"),HCe.forEach(t),cze=i(y),fm=n(y,"LI",{});var UCe=s(fm);voe=n(UCe,"STRONG",{});var eGr=s(voe);fze=r(eGr,"longformer"),eGr.forEach(t),mze=r(UCe," \u2014 "),Tk=n(UCe,"A",{href:!0});var oGr=s(Tk);gze=r(oGr,"LongformerConfig"),oGr.forEach(t),hze=r(UCe," (Longformer model)"),UCe.forEach(t),pze=i(y),mm=n(y,"LI",{});var JCe=s(mm);Foe=n(JCe,"STRONG",{});var rGr=s(Foe);uze=r(rGr,"luke"),rGr.forEach(t),_ze=r(JCe," \u2014 "),Mk=n(JCe,"A",{href:!0});var tGr=s(Mk);bze=r(tGr,"LukeConfig"),tGr.forEach(t),vze=r(JCe," (LUKE model)"),JCe.forEach(t),Fze=i(y),gm=n(y,"LI",{});var YCe=s(gm);Toe=n(YCe,"STRONG",{});var aGr=s(Toe);Tze=r(aGr,"lxmert"),aGr.forEach(t),Mze=r(YCe," \u2014 "),Ek=n(YCe,"A",{href:!0});var nGr=s(Ek);Eze=r(nGr,"LxmertConfig"),nGr.forEach(t),Cze=r(YCe," (LXMERT model)"),YCe.forEach(t),wze=i(y),hm=n(y,"LI",{});var KCe=s(hm);Moe=n(KCe,"STRONG",{});var sGr=s(Moe);Aze=r(sGr,"m2m_100"),sGr.forEach(t),yze=r(KCe," \u2014 "),Ck=n(KCe,"A",{href:!0});var lGr=s(Ck);Lze=r(lGr,"M2M100Config"),lGr.forEach(t),xze=r(KCe," (M2M100 model)"),KCe.forEach(t),$ze=i(y),pm=n(y,"LI",{});var ZCe=s(pm);Eoe=n(ZCe,"STRONG",{});var iGr=s(Eoe);kze=r(iGr,"marian"),iGr.forEach(t),Sze=r(ZCe," \u2014 "),wk=n(ZCe,"A",{href:!0});var dGr=s(wk);Rze=r(dGr,"MarianConfig"),dGr.forEach(t),Pze=r(ZCe," (Marian model)"),ZCe.forEach(t),Bze=i(y),um=n(y,"LI",{});var e3e=s(um);Coe=n(e3e,"STRONG",{});var cGr=s(Coe);Ize=r(cGr,"maskformer"),cGr.forEach(t),qze=r(e3e," \u2014 "),Ak=n(e3e,"A",{href:!0});var fGr=s(Ak);Nze=r(fGr,"MaskFormerConfig"),fGr.forEach(t),jze=r(e3e," (MaskFormer model)"),e3e.forEach(t),Dze=i(y),_m=n(y,"LI",{});var o3e=s(_m);woe=n(o3e,"STRONG",{});var mGr=s(woe);Gze=r(mGr,"mbart"),mGr.forEach(t),Oze=r(o3e," \u2014 "),yk=n(o3e,"A",{href:!0});var gGr=s(yk);Vze=r(gGr,"MBartConfig"),gGr.forEach(t),Xze=r(o3e," (mBART model)"),o3e.forEach(t),zze=i(y),bm=n(y,"LI",{});var r3e=s(bm);Aoe=n(r3e,"STRONG",{});var hGr=s(Aoe);Wze=r(hGr,"megatron-bert"),hGr.forEach(t),Qze=r(r3e," \u2014 "),Lk=n(r3e,"A",{href:!0});var pGr=s(Lk);Hze=r(pGr,"MegatronBertConfig"),pGr.forEach(t),Uze=r(r3e," (MegatronBert model)"),r3e.forEach(t),Jze=i(y),vm=n(y,"LI",{});var t3e=s(vm);yoe=n(t3e,"STRONG",{});var uGr=s(yoe);Yze=r(uGr,"mobilebert"),uGr.forEach(t),Kze=r(t3e," \u2014 "),xk=n(t3e,"A",{href:!0});var _Gr=s(xk);Zze=r(_Gr,"MobileBertConfig"),_Gr.forEach(t),eWe=r(t3e," (MobileBERT model)"),t3e.forEach(t),oWe=i(y),Fm=n(y,"LI",{});var a3e=s(Fm);Loe=n(a3e,"STRONG",{});var bGr=s(Loe);rWe=r(bGr,"mpnet"),bGr.forEach(t),tWe=r(a3e," \u2014 "),$k=n(a3e,"A",{href:!0});var vGr=s($k);aWe=r(vGr,"MPNetConfig"),vGr.forEach(t),nWe=r(a3e," (MPNet model)"),a3e.forEach(t),sWe=i(y),Tm=n(y,"LI",{});var n3e=s(Tm);xoe=n(n3e,"STRONG",{});var FGr=s(xoe);lWe=r(FGr,"mt5"),FGr.forEach(t),iWe=r(n3e," \u2014 "),kk=n(n3e,"A",{href:!0});var TGr=s(kk);dWe=r(TGr,"MT5Config"),TGr.forEach(t),cWe=r(n3e," (mT5 model)"),n3e.forEach(t),fWe=i(y),Mm=n(y,"LI",{});var s3e=s(Mm);$oe=n(s3e,"STRONG",{});var MGr=s($oe);mWe=r(MGr,"nystromformer"),MGr.forEach(t),gWe=r(s3e," \u2014 "),Sk=n(s3e,"A",{href:!0});var EGr=s(Sk);hWe=r(EGr,"NystromformerConfig"),EGr.forEach(t),pWe=r(s3e," (Nystromformer model)"),s3e.forEach(t),uWe=i(y),Em=n(y,"LI",{});var l3e=s(Em);koe=n(l3e,"STRONG",{});var CGr=s(koe);_We=r(CGr,"openai-gpt"),CGr.forEach(t),bWe=r(l3e," \u2014 "),Rk=n(l3e,"A",{href:!0});var wGr=s(Rk);vWe=r(wGr,"OpenAIGPTConfig"),wGr.forEach(t),FWe=r(l3e," (OpenAI GPT model)"),l3e.forEach(t),TWe=i(y),Cm=n(y,"LI",{});var i3e=s(Cm);Soe=n(i3e,"STRONG",{});var AGr=s(Soe);MWe=r(AGr,"opt"),AGr.forEach(t),EWe=r(i3e," \u2014 "),Pk=n(i3e,"A",{href:!0});var yGr=s(Pk);CWe=r(yGr,"OPTConfig"),yGr.forEach(t),wWe=r(i3e," (OPT model)"),i3e.forEach(t),AWe=i(y),wm=n(y,"LI",{});var d3e=s(wm);Roe=n(d3e,"STRONG",{});var LGr=s(Roe);yWe=r(LGr,"pegasus"),LGr.forEach(t),LWe=r(d3e," \u2014 "),Bk=n(d3e,"A",{href:!0});var xGr=s(Bk);xWe=r(xGr,"PegasusConfig"),xGr.forEach(t),$We=r(d3e," (Pegasus model)"),d3e.forEach(t),kWe=i(y),Am=n(y,"LI",{});var c3e=s(Am);Poe=n(c3e,"STRONG",{});var $Gr=s(Poe);SWe=r($Gr,"perceiver"),$Gr.forEach(t),RWe=r(c3e," \u2014 "),Ik=n(c3e,"A",{href:!0});var kGr=s(Ik);PWe=r(kGr,"PerceiverConfig"),kGr.forEach(t),BWe=r(c3e," (Perceiver model)"),c3e.forEach(t),IWe=i(y),ym=n(y,"LI",{});var f3e=s(ym);Boe=n(f3e,"STRONG",{});var SGr=s(Boe);qWe=r(SGr,"plbart"),SGr.forEach(t),NWe=r(f3e," \u2014 "),qk=n(f3e,"A",{href:!0});var RGr=s(qk);jWe=r(RGr,"PLBartConfig"),RGr.forEach(t),DWe=r(f3e," (PLBart model)"),f3e.forEach(t),GWe=i(y),Lm=n(y,"LI",{});var m3e=s(Lm);Ioe=n(m3e,"STRONG",{});var PGr=s(Ioe);OWe=r(PGr,"poolformer"),PGr.forEach(t),VWe=r(m3e," \u2014 "),Nk=n(m3e,"A",{href:!0});var BGr=s(Nk);XWe=r(BGr,"PoolFormerConfig"),BGr.forEach(t),zWe=r(m3e," (PoolFormer model)"),m3e.forEach(t),WWe=i(y),xm=n(y,"LI",{});var g3e=s(xm);qoe=n(g3e,"STRONG",{});var IGr=s(qoe);QWe=r(IGr,"prophetnet"),IGr.forEach(t),HWe=r(g3e," \u2014 "),jk=n(g3e,"A",{href:!0});var qGr=s(jk);UWe=r(qGr,"ProphetNetConfig"),qGr.forEach(t),JWe=r(g3e," (ProphetNet model)"),g3e.forEach(t),YWe=i(y),$m=n(y,"LI",{});var h3e=s($m);Noe=n(h3e,"STRONG",{});var NGr=s(Noe);KWe=r(NGr,"qdqbert"),NGr.forEach(t),ZWe=r(h3e," \u2014 "),Dk=n(h3e,"A",{href:!0});var jGr=s(Dk);eQe=r(jGr,"QDQBertConfig"),jGr.forEach(t),oQe=r(h3e," (QDQBert model)"),h3e.forEach(t),rQe=i(y),km=n(y,"LI",{});var p3e=s(km);joe=n(p3e,"STRONG",{});var DGr=s(joe);tQe=r(DGr,"rag"),DGr.forEach(t),aQe=r(p3e," \u2014 "),Gk=n(p3e,"A",{href:!0});var GGr=s(Gk);nQe=r(GGr,"RagConfig"),GGr.forEach(t),sQe=r(p3e," (RAG model)"),p3e.forEach(t),lQe=i(y),Sm=n(y,"LI",{});var u3e=s(Sm);Doe=n(u3e,"STRONG",{});var OGr=s(Doe);iQe=r(OGr,"realm"),OGr.forEach(t),dQe=r(u3e," \u2014 "),Ok=n(u3e,"A",{href:!0});var VGr=s(Ok);cQe=r(VGr,"RealmConfig"),VGr.forEach(t),fQe=r(u3e," (Realm model)"),u3e.forEach(t),mQe=i(y),Rm=n(y,"LI",{});var _3e=s(Rm);Goe=n(_3e,"STRONG",{});var XGr=s(Goe);gQe=r(XGr,"reformer"),XGr.forEach(t),hQe=r(_3e," \u2014 "),Vk=n(_3e,"A",{href:!0});var zGr=s(Vk);pQe=r(zGr,"ReformerConfig"),zGr.forEach(t),uQe=r(_3e," (Reformer model)"),_3e.forEach(t),_Qe=i(y),Pm=n(y,"LI",{});var b3e=s(Pm);Ooe=n(b3e,"STRONG",{});var WGr=s(Ooe);bQe=r(WGr,"regnet"),WGr.forEach(t),vQe=r(b3e," \u2014 "),Xk=n(b3e,"A",{href:!0});var QGr=s(Xk);FQe=r(QGr,"RegNetConfig"),QGr.forEach(t),TQe=r(b3e," (RegNet model)"),b3e.forEach(t),MQe=i(y),Bm=n(y,"LI",{});var v3e=s(Bm);Voe=n(v3e,"STRONG",{});var HGr=s(Voe);EQe=r(HGr,"rembert"),HGr.forEach(t),CQe=r(v3e," \u2014 "),zk=n(v3e,"A",{href:!0});var UGr=s(zk);wQe=r(UGr,"RemBertConfig"),UGr.forEach(t),AQe=r(v3e," (RemBERT model)"),v3e.forEach(t),yQe=i(y),Im=n(y,"LI",{});var F3e=s(Im);Xoe=n(F3e,"STRONG",{});var JGr=s(Xoe);LQe=r(JGr,"resnet"),JGr.forEach(t),xQe=r(F3e," \u2014 "),Wk=n(F3e,"A",{href:!0});var YGr=s(Wk);$Qe=r(YGr,"ResNetConfig"),YGr.forEach(t),kQe=r(F3e," (ResNet model)"),F3e.forEach(t),SQe=i(y),qm=n(y,"LI",{});var T3e=s(qm);zoe=n(T3e,"STRONG",{});var KGr=s(zoe);RQe=r(KGr,"retribert"),KGr.forEach(t),PQe=r(T3e," \u2014 "),Qk=n(T3e,"A",{href:!0});var ZGr=s(Qk);BQe=r(ZGr,"RetriBertConfig"),ZGr.forEach(t),IQe=r(T3e," (RetriBERT model)"),T3e.forEach(t),qQe=i(y),Nm=n(y,"LI",{});var M3e=s(Nm);Woe=n(M3e,"STRONG",{});var eOr=s(Woe);NQe=r(eOr,"roberta"),eOr.forEach(t),jQe=r(M3e," \u2014 "),Hk=n(M3e,"A",{href:!0});var oOr=s(Hk);DQe=r(oOr,"RobertaConfig"),oOr.forEach(t),GQe=r(M3e," (RoBERTa model)"),M3e.forEach(t),OQe=i(y),jm=n(y,"LI",{});var E3e=s(jm);Qoe=n(E3e,"STRONG",{});var rOr=s(Qoe);VQe=r(rOr,"roformer"),rOr.forEach(t),XQe=r(E3e," \u2014 "),Uk=n(E3e,"A",{href:!0});var tOr=s(Uk);zQe=r(tOr,"RoFormerConfig"),tOr.forEach(t),WQe=r(E3e," (RoFormer model)"),E3e.forEach(t),QQe=i(y),Dm=n(y,"LI",{});var C3e=s(Dm);Hoe=n(C3e,"STRONG",{});var aOr=s(Hoe);HQe=r(aOr,"segformer"),aOr.forEach(t),UQe=r(C3e," \u2014 "),Jk=n(C3e,"A",{href:!0});var nOr=s(Jk);JQe=r(nOr,"SegformerConfig"),nOr.forEach(t),YQe=r(C3e," (SegFormer model)"),C3e.forEach(t),KQe=i(y),Gm=n(y,"LI",{});var w3e=s(Gm);Uoe=n(w3e,"STRONG",{});var sOr=s(Uoe);ZQe=r(sOr,"sew"),sOr.forEach(t),eHe=r(w3e," \u2014 "),Yk=n(w3e,"A",{href:!0});var lOr=s(Yk);oHe=r(lOr,"SEWConfig"),lOr.forEach(t),rHe=r(w3e," (SEW model)"),w3e.forEach(t),tHe=i(y),Om=n(y,"LI",{});var A3e=s(Om);Joe=n(A3e,"STRONG",{});var iOr=s(Joe);aHe=r(iOr,"sew-d"),iOr.forEach(t),nHe=r(A3e," \u2014 "),Kk=n(A3e,"A",{href:!0});var dOr=s(Kk);sHe=r(dOr,"SEWDConfig"),dOr.forEach(t),lHe=r(A3e," (SEW-D model)"),A3e.forEach(t),iHe=i(y),Vm=n(y,"LI",{});var y3e=s(Vm);Yoe=n(y3e,"STRONG",{});var cOr=s(Yoe);dHe=r(cOr,"speech-encoder-decoder"),cOr.forEach(t),cHe=r(y3e," \u2014 "),Zk=n(y3e,"A",{href:!0});var fOr=s(Zk);fHe=r(fOr,"SpeechEncoderDecoderConfig"),fOr.forEach(t),mHe=r(y3e," (Speech Encoder decoder model)"),y3e.forEach(t),gHe=i(y),Xm=n(y,"LI",{});var L3e=s(Xm);Koe=n(L3e,"STRONG",{});var mOr=s(Koe);hHe=r(mOr,"speech_to_text"),mOr.forEach(t),pHe=r(L3e," \u2014 "),eS=n(L3e,"A",{href:!0});var gOr=s(eS);uHe=r(gOr,"Speech2TextConfig"),gOr.forEach(t),_He=r(L3e," (Speech2Text model)"),L3e.forEach(t),bHe=i(y),zm=n(y,"LI",{});var x3e=s(zm);Zoe=n(x3e,"STRONG",{});var hOr=s(Zoe);vHe=r(hOr,"speech_to_text_2"),hOr.forEach(t),FHe=r(x3e," \u2014 "),oS=n(x3e,"A",{href:!0});var pOr=s(oS);THe=r(pOr,"Speech2Text2Config"),pOr.forEach(t),MHe=r(x3e," (Speech2Text2 model)"),x3e.forEach(t),EHe=i(y),Wm=n(y,"LI",{});var $3e=s(Wm);ere=n($3e,"STRONG",{});var uOr=s(ere);CHe=r(uOr,"splinter"),uOr.forEach(t),wHe=r($3e," \u2014 "),rS=n($3e,"A",{href:!0});var _Or=s(rS);AHe=r(_Or,"SplinterConfig"),_Or.forEach(t),yHe=r($3e," (Splinter model)"),$3e.forEach(t),LHe=i(y),Qm=n(y,"LI",{});var k3e=s(Qm);ore=n(k3e,"STRONG",{});var bOr=s(ore);xHe=r(bOr,"squeezebert"),bOr.forEach(t),$He=r(k3e," \u2014 "),tS=n(k3e,"A",{href:!0});var vOr=s(tS);kHe=r(vOr,"SqueezeBertConfig"),vOr.forEach(t),SHe=r(k3e," (SqueezeBERT model)"),k3e.forEach(t),RHe=i(y),Hm=n(y,"LI",{});var S3e=s(Hm);rre=n(S3e,"STRONG",{});var FOr=s(rre);PHe=r(FOr,"swin"),FOr.forEach(t),BHe=r(S3e," \u2014 "),aS=n(S3e,"A",{href:!0});var TOr=s(aS);IHe=r(TOr,"SwinConfig"),TOr.forEach(t),qHe=r(S3e," (Swin model)"),S3e.forEach(t),NHe=i(y),Um=n(y,"LI",{});var R3e=s(Um);tre=n(R3e,"STRONG",{});var MOr=s(tre);jHe=r(MOr,"t5"),MOr.forEach(t),DHe=r(R3e," \u2014 "),nS=n(R3e,"A",{href:!0});var EOr=s(nS);GHe=r(EOr,"T5Config"),EOr.forEach(t),OHe=r(R3e," (T5 model)"),R3e.forEach(t),VHe=i(y),Jm=n(y,"LI",{});var P3e=s(Jm);are=n(P3e,"STRONG",{});var COr=s(are);XHe=r(COr,"tapas"),COr.forEach(t),zHe=r(P3e," \u2014 "),sS=n(P3e,"A",{href:!0});var wOr=s(sS);WHe=r(wOr,"TapasConfig"),wOr.forEach(t),QHe=r(P3e," (TAPAS model)"),P3e.forEach(t),HHe=i(y),Ym=n(y,"LI",{});var B3e=s(Ym);nre=n(B3e,"STRONG",{});var AOr=s(nre);UHe=r(AOr,"transfo-xl"),AOr.forEach(t),JHe=r(B3e," \u2014 "),lS=n(B3e,"A",{href:!0});var yOr=s(lS);YHe=r(yOr,"TransfoXLConfig"),yOr.forEach(t),KHe=r(B3e," (Transformer-XL model)"),B3e.forEach(t),ZHe=i(y),Km=n(y,"LI",{});var I3e=s(Km);sre=n(I3e,"STRONG",{});var LOr=s(sre);eUe=r(LOr,"trocr"),LOr.forEach(t),oUe=r(I3e," \u2014 "),iS=n(I3e,"A",{href:!0});var xOr=s(iS);rUe=r(xOr,"TrOCRConfig"),xOr.forEach(t),tUe=r(I3e," (TrOCR model)"),I3e.forEach(t),aUe=i(y),Zm=n(y,"LI",{});var q3e=s(Zm);lre=n(q3e,"STRONG",{});var $Or=s(lre);nUe=r($Or,"unispeech"),$Or.forEach(t),sUe=r(q3e," \u2014 "),dS=n(q3e,"A",{href:!0});var kOr=s(dS);lUe=r(kOr,"UniSpeechConfig"),kOr.forEach(t),iUe=r(q3e," (UniSpeech model)"),q3e.forEach(t),dUe=i(y),eg=n(y,"LI",{});var N3e=s(eg);ire=n(N3e,"STRONG",{});var SOr=s(ire);cUe=r(SOr,"unispeech-sat"),SOr.forEach(t),fUe=r(N3e," \u2014 "),cS=n(N3e,"A",{href:!0});var ROr=s(cS);mUe=r(ROr,"UniSpeechSatConfig"),ROr.forEach(t),gUe=r(N3e," (UniSpeechSat model)"),N3e.forEach(t),hUe=i(y),og=n(y,"LI",{});var j3e=s(og);dre=n(j3e,"STRONG",{});var POr=s(dre);pUe=r(POr,"van"),POr.forEach(t),uUe=r(j3e," \u2014 "),fS=n(j3e,"A",{href:!0});var BOr=s(fS);_Ue=r(BOr,"VanConfig"),BOr.forEach(t),bUe=r(j3e," (VAN model)"),j3e.forEach(t),vUe=i(y),rg=n(y,"LI",{});var D3e=s(rg);cre=n(D3e,"STRONG",{});var IOr=s(cre);FUe=r(IOr,"vilt"),IOr.forEach(t),TUe=r(D3e," \u2014 "),mS=n(D3e,"A",{href:!0});var qOr=s(mS);MUe=r(qOr,"ViltConfig"),qOr.forEach(t),EUe=r(D3e," (ViLT model)"),D3e.forEach(t),CUe=i(y),tg=n(y,"LI",{});var G3e=s(tg);fre=n(G3e,"STRONG",{});var NOr=s(fre);wUe=r(NOr,"vision-encoder-decoder"),NOr.forEach(t),AUe=r(G3e," \u2014 "),gS=n(G3e,"A",{href:!0});var jOr=s(gS);yUe=r(jOr,"VisionEncoderDecoderConfig"),jOr.forEach(t),LUe=r(G3e," (Vision Encoder decoder model)"),G3e.forEach(t),xUe=i(y),ag=n(y,"LI",{});var O3e=s(ag);mre=n(O3e,"STRONG",{});var DOr=s(mre);$Ue=r(DOr,"vision-text-dual-encoder"),DOr.forEach(t),kUe=r(O3e," \u2014 "),hS=n(O3e,"A",{href:!0});var GOr=s(hS);SUe=r(GOr,"VisionTextDualEncoderConfig"),GOr.forEach(t),RUe=r(O3e," (VisionTextDualEncoder model)"),O3e.forEach(t),PUe=i(y),ng=n(y,"LI",{});var V3e=s(ng);gre=n(V3e,"STRONG",{});var OOr=s(gre);BUe=r(OOr,"visual_bert"),OOr.forEach(t),IUe=r(V3e," \u2014 "),pS=n(V3e,"A",{href:!0});var VOr=s(pS);qUe=r(VOr,"VisualBertConfig"),VOr.forEach(t),NUe=r(V3e," (VisualBert model)"),V3e.forEach(t),jUe=i(y),sg=n(y,"LI",{});var X3e=s(sg);hre=n(X3e,"STRONG",{});var XOr=s(hre);DUe=r(XOr,"vit"),XOr.forEach(t),GUe=r(X3e," \u2014 "),uS=n(X3e,"A",{href:!0});var zOr=s(uS);OUe=r(zOr,"ViTConfig"),zOr.forEach(t),VUe=r(X3e," (ViT model)"),X3e.forEach(t),XUe=i(y),lg=n(y,"LI",{});var z3e=s(lg);pre=n(z3e,"STRONG",{});var WOr=s(pre);zUe=r(WOr,"vit_mae"),WOr.forEach(t),WUe=r(z3e," \u2014 "),_S=n(z3e,"A",{href:!0});var QOr=s(_S);QUe=r(QOr,"ViTMAEConfig"),QOr.forEach(t),HUe=r(z3e," (ViTMAE model)"),z3e.forEach(t),UUe=i(y),ig=n(y,"LI",{});var W3e=s(ig);ure=n(W3e,"STRONG",{});var HOr=s(ure);JUe=r(HOr,"wav2vec2"),HOr.forEach(t),YUe=r(W3e," \u2014 "),bS=n(W3e,"A",{href:!0});var UOr=s(bS);KUe=r(UOr,"Wav2Vec2Config"),UOr.forEach(t),ZUe=r(W3e," (Wav2Vec2 model)"),W3e.forEach(t),eJe=i(y),dg=n(y,"LI",{});var Q3e=s(dg);_re=n(Q3e,"STRONG",{});var JOr=s(_re);oJe=r(JOr,"wav2vec2-conformer"),JOr.forEach(t),rJe=r(Q3e," \u2014 "),vS=n(Q3e,"A",{href:!0});var YOr=s(vS);tJe=r(YOr,"Wav2Vec2ConformerConfig"),YOr.forEach(t),aJe=r(Q3e," (Wav2Vec2-Conformer model)"),Q3e.forEach(t),nJe=i(y),cg=n(y,"LI",{});var H3e=s(cg);bre=n(H3e,"STRONG",{});var KOr=s(bre);sJe=r(KOr,"wavlm"),KOr.forEach(t),lJe=r(H3e," \u2014 "),FS=n(H3e,"A",{href:!0});var ZOr=s(FS);iJe=r(ZOr,"WavLMConfig"),ZOr.forEach(t),dJe=r(H3e," (WavLM model)"),H3e.forEach(t),cJe=i(y),fg=n(y,"LI",{});var U3e=s(fg);vre=n(U3e,"STRONG",{});var eVr=s(vre);fJe=r(eVr,"xglm"),eVr.forEach(t),mJe=r(U3e," \u2014 "),TS=n(U3e,"A",{href:!0});var oVr=s(TS);gJe=r(oVr,"XGLMConfig"),oVr.forEach(t),hJe=r(U3e," (XGLM model)"),U3e.forEach(t),pJe=i(y),mg=n(y,"LI",{});var J3e=s(mg);Fre=n(J3e,"STRONG",{});var rVr=s(Fre);uJe=r(rVr,"xlm"),rVr.forEach(t),_Je=r(J3e," \u2014 "),MS=n(J3e,"A",{href:!0});var tVr=s(MS);bJe=r(tVr,"XLMConfig"),tVr.forEach(t),vJe=r(J3e," (XLM model)"),J3e.forEach(t),FJe=i(y),gg=n(y,"LI",{});var Y3e=s(gg);Tre=n(Y3e,"STRONG",{});var aVr=s(Tre);TJe=r(aVr,"xlm-prophetnet"),aVr.forEach(t),MJe=r(Y3e," \u2014 "),ES=n(Y3e,"A",{href:!0});var nVr=s(ES);EJe=r(nVr,"XLMProphetNetConfig"),nVr.forEach(t),CJe=r(Y3e," (XLMProphetNet model)"),Y3e.forEach(t),wJe=i(y),hg=n(y,"LI",{});var K3e=s(hg);Mre=n(K3e,"STRONG",{});var sVr=s(Mre);AJe=r(sVr,"xlm-roberta"),sVr.forEach(t),yJe=r(K3e," \u2014 "),CS=n(K3e,"A",{href:!0});var lVr=s(CS);LJe=r(lVr,"XLMRobertaConfig"),lVr.forEach(t),xJe=r(K3e," (XLM-RoBERTa model)"),K3e.forEach(t),$Je=i(y),pg=n(y,"LI",{});var Z3e=s(pg);Ere=n(Z3e,"STRONG",{});var iVr=s(Ere);kJe=r(iVr,"xlm-roberta-xl"),iVr.forEach(t),SJe=r(Z3e," \u2014 "),wS=n(Z3e,"A",{href:!0});var dVr=s(wS);RJe=r(dVr,"XLMRobertaXLConfig"),dVr.forEach(t),PJe=r(Z3e," (XLM-RoBERTa-XL model)"),Z3e.forEach(t),BJe=i(y),ug=n(y,"LI",{});var ewe=s(ug);Cre=n(ewe,"STRONG",{});var cVr=s(Cre);IJe=r(cVr,"xlnet"),cVr.forEach(t),qJe=r(ewe," \u2014 "),AS=n(ewe,"A",{href:!0});var fVr=s(AS);NJe=r(fVr,"XLNetConfig"),fVr.forEach(t),jJe=r(ewe," (XLNet model)"),ewe.forEach(t),DJe=i(y),_g=n(y,"LI",{});var owe=s(_g);wre=n(owe,"STRONG",{});var mVr=s(wre);GJe=r(mVr,"yolos"),mVr.forEach(t),OJe=r(owe," \u2014 "),yS=n(owe,"A",{href:!0});var gVr=s(yS);VJe=r(gVr,"YolosConfig"),gVr.forEach(t),XJe=r(owe," (YOLOS model)"),owe.forEach(t),zJe=i(y),bg=n(y,"LI",{});var rwe=s(bg);Are=n(rwe,"STRONG",{});var hVr=s(Are);WJe=r(hVr,"yoso"),hVr.forEach(t),QJe=r(rwe," \u2014 "),LS=n(rwe,"A",{href:!0});var pVr=s(LS);HJe=r(pVr,"YosoConfig"),pVr.forEach(t),UJe=r(rwe," (YOSO model)"),rwe.forEach(t),y.forEach(t),JJe=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),YJe=i(et),Fg=n(et,"DIV",{class:!0});var $Ne=s(Fg);T(h0.$$.fragment,$Ne),KJe=i($Ne),yre=n($Ne,"P",{});var uVr=s(yre);ZJe=r(uVr,"Register a new configuration for this class."),uVr.forEach(t),$Ne.forEach(t),et.forEach(t),RIe=i(f),Ti=n(f,"H2",{class:!0});var kNe=s(Ti);Tg=n(kNe,"A",{id:!0,class:!0,href:!0});var _Vr=s(Tg);Lre=n(_Vr,"SPAN",{});var bVr=s(Lre);T(p0.$$.fragment,bVr),bVr.forEach(t),_Vr.forEach(t),eYe=i(kNe),xre=n(kNe,"SPAN",{});var vVr=s(xre);oYe=r(vVr,"AutoTokenizer"),vVr.forEach(t),kNe.forEach(t),PIe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(u0.$$.fragment,qs),rYe=i(qs),_0=n(qs,"P",{});var SNe=s(_0);tYe=r(SNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xS=n(SNe,"A",{href:!0});var FVr=s(xS);aYe=r(FVr,"AutoTokenizer.from_pretrained()"),FVr.forEach(t),nYe=r(SNe," class method."),SNe.forEach(t),sYe=i(qs),b0=n(qs,"P",{});var RNe=s(b0);lYe=r(RNe,"This class cannot be instantiated directly using "),$re=n(RNe,"CODE",{});var TVr=s($re);iYe=r(TVr,"__init__()"),TVr.forEach(t),dYe=r(RNe," (throws an error)."),RNe.forEach(t),cYe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(v0.$$.fragment,Ns),fYe=i(Ns),kre=n(Ns,"P",{});var MVr=s(kre);mYe=r(MVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),MVr.forEach(t),gYe=i(Ns),Aa=n(Ns,"P",{});var dA=s(Aa);hYe=r(dA,"The tokenizer class to instantiate is selected based on the "),Sre=n(dA,"CODE",{});var EVr=s(Sre);pYe=r(EVr,"model_type"),EVr.forEach(t),uYe=r(dA,` property of the config object (either
passed as an argument or loaded from `),Rre=n(dA,"CODE",{});var CVr=s(Rre);_Ye=r(CVr,"pretrained_model_name_or_path"),CVr.forEach(t),bYe=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=n(dA,"CODE",{});var wVr=s(Pre);vYe=r(wVr,"pretrained_model_name_or_path"),wVr.forEach(t),FYe=r(dA,":"),dA.forEach(t),TYe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var F9=s(Sn);Bre=n(F9,"STRONG",{});var AVr=s(Bre);MYe=r(AVr,"albert"),AVr.forEach(t),EYe=r(F9," \u2014 "),$S=n(F9,"A",{href:!0});var yVr=s($S);CYe=r(yVr,"AlbertTokenizer"),yVr.forEach(t),wYe=r(F9," or "),kS=n(F9,"A",{href:!0});var LVr=s(kS);AYe=r(LVr,"AlbertTokenizerFast"),LVr.forEach(t),yYe=r(F9," (ALBERT model)"),F9.forEach(t),LYe=i(S),Rn=n(S,"LI",{});var T9=s(Rn);Ire=n(T9,"STRONG",{});var xVr=s(Ire);xYe=r(xVr,"bart"),xVr.forEach(t),$Ye=r(T9," \u2014 "),SS=n(T9,"A",{href:!0});var $Vr=s(SS);kYe=r($Vr,"BartTokenizer"),$Vr.forEach(t),SYe=r(T9," or "),RS=n(T9,"A",{href:!0});var kVr=s(RS);RYe=r(kVr,"BartTokenizerFast"),kVr.forEach(t),PYe=r(T9," (BART model)"),T9.forEach(t),BYe=i(S),Pn=n(S,"LI",{});var M9=s(Pn);qre=n(M9,"STRONG",{});var SVr=s(qre);IYe=r(SVr,"barthez"),SVr.forEach(t),qYe=r(M9," \u2014 "),PS=n(M9,"A",{href:!0});var RVr=s(PS);NYe=r(RVr,"BarthezTokenizer"),RVr.forEach(t),jYe=r(M9," or "),BS=n(M9,"A",{href:!0});var PVr=s(BS);DYe=r(PVr,"BarthezTokenizerFast"),PVr.forEach(t),GYe=r(M9," (BARThez model)"),M9.forEach(t),OYe=i(S),Bn=n(S,"LI",{});var E9=s(Bn);Nre=n(E9,"STRONG",{});var BVr=s(Nre);VYe=r(BVr,"bartpho"),BVr.forEach(t),XYe=r(E9," \u2014 "),IS=n(E9,"A",{href:!0});var IVr=s(IS);zYe=r(IVr,"BartphoTokenizer"),IVr.forEach(t),WYe=r(E9," or "),qS=n(E9,"A",{href:!0});var qVr=s(qS);QYe=r(qVr,"BartphoTokenizerFast"),qVr.forEach(t),HYe=r(E9," (BARTpho model)"),E9.forEach(t),UYe=i(S),In=n(S,"LI",{});var C9=s(In);jre=n(C9,"STRONG",{});var NVr=s(jre);JYe=r(NVr,"bert"),NVr.forEach(t),YYe=r(C9," \u2014 "),NS=n(C9,"A",{href:!0});var jVr=s(NS);KYe=r(jVr,"BertTokenizer"),jVr.forEach(t),ZYe=r(C9," or "),jS=n(C9,"A",{href:!0});var DVr=s(jS);eKe=r(DVr,"BertTokenizerFast"),DVr.forEach(t),oKe=r(C9," (BERT model)"),C9.forEach(t),rKe=i(S),Mg=n(S,"LI",{});var twe=s(Mg);Dre=n(twe,"STRONG",{});var GVr=s(Dre);tKe=r(GVr,"bert-generation"),GVr.forEach(t),aKe=r(twe," \u2014 "),DS=n(twe,"A",{href:!0});var OVr=s(DS);nKe=r(OVr,"BertGenerationTokenizer"),OVr.forEach(t),sKe=r(twe," (Bert Generation model)"),twe.forEach(t),lKe=i(S),Eg=n(S,"LI",{});var awe=s(Eg);Gre=n(awe,"STRONG",{});var VVr=s(Gre);iKe=r(VVr,"bert-japanese"),VVr.forEach(t),dKe=r(awe," \u2014 "),GS=n(awe,"A",{href:!0});var XVr=s(GS);cKe=r(XVr,"BertJapaneseTokenizer"),XVr.forEach(t),fKe=r(awe," (BertJapanese model)"),awe.forEach(t),mKe=i(S),Cg=n(S,"LI",{});var nwe=s(Cg);Ore=n(nwe,"STRONG",{});var zVr=s(Ore);gKe=r(zVr,"bertweet"),zVr.forEach(t),hKe=r(nwe," \u2014 "),OS=n(nwe,"A",{href:!0});var WVr=s(OS);pKe=r(WVr,"BertweetTokenizer"),WVr.forEach(t),uKe=r(nwe," (Bertweet model)"),nwe.forEach(t),_Ke=i(S),qn=n(S,"LI",{});var w9=s(qn);Vre=n(w9,"STRONG",{});var QVr=s(Vre);bKe=r(QVr,"big_bird"),QVr.forEach(t),vKe=r(w9," \u2014 "),VS=n(w9,"A",{href:!0});var HVr=s(VS);FKe=r(HVr,"BigBirdTokenizer"),HVr.forEach(t),TKe=r(w9," or "),XS=n(w9,"A",{href:!0});var UVr=s(XS);MKe=r(UVr,"BigBirdTokenizerFast"),UVr.forEach(t),EKe=r(w9," (BigBird model)"),w9.forEach(t),CKe=i(S),Nn=n(S,"LI",{});var A9=s(Nn);Xre=n(A9,"STRONG",{});var JVr=s(Xre);wKe=r(JVr,"bigbird_pegasus"),JVr.forEach(t),AKe=r(A9," \u2014 "),zS=n(A9,"A",{href:!0});var YVr=s(zS);yKe=r(YVr,"PegasusTokenizer"),YVr.forEach(t),LKe=r(A9," or "),WS=n(A9,"A",{href:!0});var KVr=s(WS);xKe=r(KVr,"PegasusTokenizerFast"),KVr.forEach(t),$Ke=r(A9," (BigBirdPegasus model)"),A9.forEach(t),kKe=i(S),jn=n(S,"LI",{});var y9=s(jn);zre=n(y9,"STRONG",{});var ZVr=s(zre);SKe=r(ZVr,"blenderbot"),ZVr.forEach(t),RKe=r(y9," \u2014 "),QS=n(y9,"A",{href:!0});var eXr=s(QS);PKe=r(eXr,"BlenderbotTokenizer"),eXr.forEach(t),BKe=r(y9," or "),HS=n(y9,"A",{href:!0});var oXr=s(HS);IKe=r(oXr,"BlenderbotTokenizerFast"),oXr.forEach(t),qKe=r(y9," (Blenderbot model)"),y9.forEach(t),NKe=i(S),wg=n(S,"LI",{});var swe=s(wg);Wre=n(swe,"STRONG",{});var rXr=s(Wre);jKe=r(rXr,"blenderbot-small"),rXr.forEach(t),DKe=r(swe," \u2014 "),US=n(swe,"A",{href:!0});var tXr=s(US);GKe=r(tXr,"BlenderbotSmallTokenizer"),tXr.forEach(t),OKe=r(swe," (BlenderbotSmall model)"),swe.forEach(t),VKe=i(S),Ag=n(S,"LI",{});var lwe=s(Ag);Qre=n(lwe,"STRONG",{});var aXr=s(Qre);XKe=r(aXr,"byt5"),aXr.forEach(t),zKe=r(lwe," \u2014 "),JS=n(lwe,"A",{href:!0});var nXr=s(JS);WKe=r(nXr,"ByT5Tokenizer"),nXr.forEach(t),QKe=r(lwe," (ByT5 model)"),lwe.forEach(t),HKe=i(S),Dn=n(S,"LI",{});var L9=s(Dn);Hre=n(L9,"STRONG",{});var sXr=s(Hre);UKe=r(sXr,"camembert"),sXr.forEach(t),JKe=r(L9," \u2014 "),YS=n(L9,"A",{href:!0});var lXr=s(YS);YKe=r(lXr,"CamembertTokenizer"),lXr.forEach(t),KKe=r(L9," or "),KS=n(L9,"A",{href:!0});var iXr=s(KS);ZKe=r(iXr,"CamembertTokenizerFast"),iXr.forEach(t),eZe=r(L9," (CamemBERT model)"),L9.forEach(t),oZe=i(S),yg=n(S,"LI",{});var iwe=s(yg);Ure=n(iwe,"STRONG",{});var dXr=s(Ure);rZe=r(dXr,"canine"),dXr.forEach(t),tZe=r(iwe," \u2014 "),ZS=n(iwe,"A",{href:!0});var cXr=s(ZS);aZe=r(cXr,"CanineTokenizer"),cXr.forEach(t),nZe=r(iwe," (Canine model)"),iwe.forEach(t),sZe=i(S),Gn=n(S,"LI",{});var x9=s(Gn);Jre=n(x9,"STRONG",{});var fXr=s(Jre);lZe=r(fXr,"clip"),fXr.forEach(t),iZe=r(x9," \u2014 "),eR=n(x9,"A",{href:!0});var mXr=s(eR);dZe=r(mXr,"CLIPTokenizer"),mXr.forEach(t),cZe=r(x9," or "),oR=n(x9,"A",{href:!0});var gXr=s(oR);fZe=r(gXr,"CLIPTokenizerFast"),gXr.forEach(t),mZe=r(x9," (CLIP model)"),x9.forEach(t),gZe=i(S),On=n(S,"LI",{});var $9=s(On);Yre=n($9,"STRONG",{});var hXr=s(Yre);hZe=r(hXr,"convbert"),hXr.forEach(t),pZe=r($9," \u2014 "),rR=n($9,"A",{href:!0});var pXr=s(rR);uZe=r(pXr,"ConvBertTokenizer"),pXr.forEach(t),_Ze=r($9," or "),tR=n($9,"A",{href:!0});var uXr=s(tR);bZe=r(uXr,"ConvBertTokenizerFast"),uXr.forEach(t),vZe=r($9," (ConvBERT model)"),$9.forEach(t),FZe=i(S),Vn=n(S,"LI",{});var k9=s(Vn);Kre=n(k9,"STRONG",{});var _Xr=s(Kre);TZe=r(_Xr,"cpm"),_Xr.forEach(t),MZe=r(k9," \u2014 "),aR=n(k9,"A",{href:!0});var bXr=s(aR);EZe=r(bXr,"CpmTokenizer"),bXr.forEach(t),CZe=r(k9," or "),nR=n(k9,"A",{href:!0});var vXr=s(nR);wZe=r(vXr,"CpmTokenizerFast"),vXr.forEach(t),AZe=r(k9," (CPM model)"),k9.forEach(t),yZe=i(S),Lg=n(S,"LI",{});var dwe=s(Lg);Zre=n(dwe,"STRONG",{});var FXr=s(Zre);LZe=r(FXr,"ctrl"),FXr.forEach(t),xZe=r(dwe," \u2014 "),sR=n(dwe,"A",{href:!0});var TXr=s(sR);$Ze=r(TXr,"CTRLTokenizer"),TXr.forEach(t),kZe=r(dwe," (CTRL model)"),dwe.forEach(t),SZe=i(S),Xn=n(S,"LI",{});var S9=s(Xn);ete=n(S9,"STRONG",{});var MXr=s(ete);RZe=r(MXr,"data2vec-text"),MXr.forEach(t),PZe=r(S9," \u2014 "),lR=n(S9,"A",{href:!0});var EXr=s(lR);BZe=r(EXr,"RobertaTokenizer"),EXr.forEach(t),IZe=r(S9," or "),iR=n(S9,"A",{href:!0});var CXr=s(iR);qZe=r(CXr,"RobertaTokenizerFast"),CXr.forEach(t),NZe=r(S9," (Data2VecText model)"),S9.forEach(t),jZe=i(S),zn=n(S,"LI",{});var R9=s(zn);ote=n(R9,"STRONG",{});var wXr=s(ote);DZe=r(wXr,"deberta"),wXr.forEach(t),GZe=r(R9," \u2014 "),dR=n(R9,"A",{href:!0});var AXr=s(dR);OZe=r(AXr,"DebertaTokenizer"),AXr.forEach(t),VZe=r(R9," or "),cR=n(R9,"A",{href:!0});var yXr=s(cR);XZe=r(yXr,"DebertaTokenizerFast"),yXr.forEach(t),zZe=r(R9," (DeBERTa model)"),R9.forEach(t),WZe=i(S),Wn=n(S,"LI",{});var P9=s(Wn);rte=n(P9,"STRONG",{});var LXr=s(rte);QZe=r(LXr,"deberta-v2"),LXr.forEach(t),HZe=r(P9," \u2014 "),fR=n(P9,"A",{href:!0});var xXr=s(fR);UZe=r(xXr,"DebertaV2Tokenizer"),xXr.forEach(t),JZe=r(P9," or "),mR=n(P9,"A",{href:!0});var $Xr=s(mR);YZe=r($Xr,"DebertaV2TokenizerFast"),$Xr.forEach(t),KZe=r(P9," (DeBERTa-v2 model)"),P9.forEach(t),ZZe=i(S),Qn=n(S,"LI",{});var B9=s(Qn);tte=n(B9,"STRONG",{});var kXr=s(tte);eeo=r(kXr,"distilbert"),kXr.forEach(t),oeo=r(B9," \u2014 "),gR=n(B9,"A",{href:!0});var SXr=s(gR);reo=r(SXr,"DistilBertTokenizer"),SXr.forEach(t),teo=r(B9," or "),hR=n(B9,"A",{href:!0});var RXr=s(hR);aeo=r(RXr,"DistilBertTokenizerFast"),RXr.forEach(t),neo=r(B9," (DistilBERT model)"),B9.forEach(t),seo=i(S),Hn=n(S,"LI",{});var I9=s(Hn);ate=n(I9,"STRONG",{});var PXr=s(ate);leo=r(PXr,"dpr"),PXr.forEach(t),ieo=r(I9," \u2014 "),pR=n(I9,"A",{href:!0});var BXr=s(pR);deo=r(BXr,"DPRQuestionEncoderTokenizer"),BXr.forEach(t),ceo=r(I9," or "),uR=n(I9,"A",{href:!0});var IXr=s(uR);feo=r(IXr,"DPRQuestionEncoderTokenizerFast"),IXr.forEach(t),meo=r(I9," (DPR model)"),I9.forEach(t),geo=i(S),Un=n(S,"LI",{});var q9=s(Un);nte=n(q9,"STRONG",{});var qXr=s(nte);heo=r(qXr,"electra"),qXr.forEach(t),peo=r(q9," \u2014 "),_R=n(q9,"A",{href:!0});var NXr=s(_R);ueo=r(NXr,"ElectraTokenizer"),NXr.forEach(t),_eo=r(q9," or "),bR=n(q9,"A",{href:!0});var jXr=s(bR);beo=r(jXr,"ElectraTokenizerFast"),jXr.forEach(t),veo=r(q9," (ELECTRA model)"),q9.forEach(t),Feo=i(S),xg=n(S,"LI",{});var cwe=s(xg);ste=n(cwe,"STRONG",{});var DXr=s(ste);Teo=r(DXr,"flaubert"),DXr.forEach(t),Meo=r(cwe," \u2014 "),vR=n(cwe,"A",{href:!0});var GXr=s(vR);Eeo=r(GXr,"FlaubertTokenizer"),GXr.forEach(t),Ceo=r(cwe," (FlauBERT model)"),cwe.forEach(t),weo=i(S),Jn=n(S,"LI",{});var N9=s(Jn);lte=n(N9,"STRONG",{});var OXr=s(lte);Aeo=r(OXr,"fnet"),OXr.forEach(t),yeo=r(N9," \u2014 "),FR=n(N9,"A",{href:!0});var VXr=s(FR);Leo=r(VXr,"FNetTokenizer"),VXr.forEach(t),xeo=r(N9," or "),TR=n(N9,"A",{href:!0});var XXr=s(TR);$eo=r(XXr,"FNetTokenizerFast"),XXr.forEach(t),keo=r(N9," (FNet model)"),N9.forEach(t),Seo=i(S),$g=n(S,"LI",{});var fwe=s($g);ite=n(fwe,"STRONG",{});var zXr=s(ite);Reo=r(zXr,"fsmt"),zXr.forEach(t),Peo=r(fwe," \u2014 "),MR=n(fwe,"A",{href:!0});var WXr=s(MR);Beo=r(WXr,"FSMTTokenizer"),WXr.forEach(t),Ieo=r(fwe," (FairSeq Machine-Translation model)"),fwe.forEach(t),qeo=i(S),Yn=n(S,"LI",{});var j9=s(Yn);dte=n(j9,"STRONG",{});var QXr=s(dte);Neo=r(QXr,"funnel"),QXr.forEach(t),jeo=r(j9," \u2014 "),ER=n(j9,"A",{href:!0});var HXr=s(ER);Deo=r(HXr,"FunnelTokenizer"),HXr.forEach(t),Geo=r(j9," or "),CR=n(j9,"A",{href:!0});var UXr=s(CR);Oeo=r(UXr,"FunnelTokenizerFast"),UXr.forEach(t),Veo=r(j9," (Funnel Transformer model)"),j9.forEach(t),Xeo=i(S),Kn=n(S,"LI",{});var D9=s(Kn);cte=n(D9,"STRONG",{});var JXr=s(cte);zeo=r(JXr,"gpt2"),JXr.forEach(t),Weo=r(D9," \u2014 "),wR=n(D9,"A",{href:!0});var YXr=s(wR);Qeo=r(YXr,"GPT2Tokenizer"),YXr.forEach(t),Heo=r(D9," or "),AR=n(D9,"A",{href:!0});var KXr=s(AR);Ueo=r(KXr,"GPT2TokenizerFast"),KXr.forEach(t),Jeo=r(D9," (OpenAI GPT-2 model)"),D9.forEach(t),Yeo=i(S),Zn=n(S,"LI",{});var G9=s(Zn);fte=n(G9,"STRONG",{});var ZXr=s(fte);Keo=r(ZXr,"gpt_neo"),ZXr.forEach(t),Zeo=r(G9," \u2014 "),yR=n(G9,"A",{href:!0});var ezr=s(yR);eoo=r(ezr,"GPT2Tokenizer"),ezr.forEach(t),ooo=r(G9," or "),LR=n(G9,"A",{href:!0});var ozr=s(LR);roo=r(ozr,"GPT2TokenizerFast"),ozr.forEach(t),too=r(G9," (GPT Neo model)"),G9.forEach(t),aoo=i(S),es=n(S,"LI",{});var O9=s(es);mte=n(O9,"STRONG",{});var rzr=s(mte);noo=r(rzr,"gptj"),rzr.forEach(t),soo=r(O9," \u2014 "),xR=n(O9,"A",{href:!0});var tzr=s(xR);loo=r(tzr,"GPT2Tokenizer"),tzr.forEach(t),ioo=r(O9," or "),$R=n(O9,"A",{href:!0});var azr=s($R);doo=r(azr,"GPT2TokenizerFast"),azr.forEach(t),coo=r(O9," (GPT-J model)"),O9.forEach(t),foo=i(S),os=n(S,"LI",{});var V9=s(os);gte=n(V9,"STRONG",{});var nzr=s(gte);moo=r(nzr,"herbert"),nzr.forEach(t),goo=r(V9," \u2014 "),kR=n(V9,"A",{href:!0});var szr=s(kR);hoo=r(szr,"HerbertTokenizer"),szr.forEach(t),poo=r(V9," or "),SR=n(V9,"A",{href:!0});var lzr=s(SR);uoo=r(lzr,"HerbertTokenizerFast"),lzr.forEach(t),_oo=r(V9," (HerBERT model)"),V9.forEach(t),boo=i(S),kg=n(S,"LI",{});var mwe=s(kg);hte=n(mwe,"STRONG",{});var izr=s(hte);voo=r(izr,"hubert"),izr.forEach(t),Foo=r(mwe," \u2014 "),RR=n(mwe,"A",{href:!0});var dzr=s(RR);Too=r(dzr,"Wav2Vec2CTCTokenizer"),dzr.forEach(t),Moo=r(mwe," (Hubert model)"),mwe.forEach(t),Eoo=i(S),rs=n(S,"LI",{});var X9=s(rs);pte=n(X9,"STRONG",{});var czr=s(pte);Coo=r(czr,"ibert"),czr.forEach(t),woo=r(X9," \u2014 "),PR=n(X9,"A",{href:!0});var fzr=s(PR);Aoo=r(fzr,"RobertaTokenizer"),fzr.forEach(t),yoo=r(X9," or "),BR=n(X9,"A",{href:!0});var mzr=s(BR);Loo=r(mzr,"RobertaTokenizerFast"),mzr.forEach(t),xoo=r(X9," (I-BERT model)"),X9.forEach(t),$oo=i(S),ts=n(S,"LI",{});var z9=s(ts);ute=n(z9,"STRONG",{});var gzr=s(ute);koo=r(gzr,"layoutlm"),gzr.forEach(t),Soo=r(z9," \u2014 "),IR=n(z9,"A",{href:!0});var hzr=s(IR);Roo=r(hzr,"LayoutLMTokenizer"),hzr.forEach(t),Poo=r(z9," or "),qR=n(z9,"A",{href:!0});var pzr=s(qR);Boo=r(pzr,"LayoutLMTokenizerFast"),pzr.forEach(t),Ioo=r(z9," (LayoutLM model)"),z9.forEach(t),qoo=i(S),as=n(S,"LI",{});var W9=s(as);_te=n(W9,"STRONG",{});var uzr=s(_te);Noo=r(uzr,"layoutlmv2"),uzr.forEach(t),joo=r(W9," \u2014 "),NR=n(W9,"A",{href:!0});var _zr=s(NR);Doo=r(_zr,"LayoutLMv2Tokenizer"),_zr.forEach(t),Goo=r(W9," or "),jR=n(W9,"A",{href:!0});var bzr=s(jR);Ooo=r(bzr,"LayoutLMv2TokenizerFast"),bzr.forEach(t),Voo=r(W9," (LayoutLMv2 model)"),W9.forEach(t),Xoo=i(S),ns=n(S,"LI",{});var Q9=s(ns);bte=n(Q9,"STRONG",{});var vzr=s(bte);zoo=r(vzr,"layoutxlm"),vzr.forEach(t),Woo=r(Q9," \u2014 "),DR=n(Q9,"A",{href:!0});var Fzr=s(DR);Qoo=r(Fzr,"LayoutXLMTokenizer"),Fzr.forEach(t),Hoo=r(Q9," or "),GR=n(Q9,"A",{href:!0});var Tzr=s(GR);Uoo=r(Tzr,"LayoutXLMTokenizerFast"),Tzr.forEach(t),Joo=r(Q9," (LayoutXLM model)"),Q9.forEach(t),Yoo=i(S),ss=n(S,"LI",{});var H9=s(ss);vte=n(H9,"STRONG",{});var Mzr=s(vte);Koo=r(Mzr,"led"),Mzr.forEach(t),Zoo=r(H9," \u2014 "),OR=n(H9,"A",{href:!0});var Ezr=s(OR);ero=r(Ezr,"LEDTokenizer"),Ezr.forEach(t),oro=r(H9," or "),VR=n(H9,"A",{href:!0});var Czr=s(VR);rro=r(Czr,"LEDTokenizerFast"),Czr.forEach(t),tro=r(H9," (LED model)"),H9.forEach(t),aro=i(S),ls=n(S,"LI",{});var U9=s(ls);Fte=n(U9,"STRONG",{});var wzr=s(Fte);nro=r(wzr,"longformer"),wzr.forEach(t),sro=r(U9," \u2014 "),XR=n(U9,"A",{href:!0});var Azr=s(XR);lro=r(Azr,"LongformerTokenizer"),Azr.forEach(t),iro=r(U9," or "),zR=n(U9,"A",{href:!0});var yzr=s(zR);dro=r(yzr,"LongformerTokenizerFast"),yzr.forEach(t),cro=r(U9," (Longformer model)"),U9.forEach(t),fro=i(S),Sg=n(S,"LI",{});var gwe=s(Sg);Tte=n(gwe,"STRONG",{});var Lzr=s(Tte);mro=r(Lzr,"luke"),Lzr.forEach(t),gro=r(gwe," \u2014 "),WR=n(gwe,"A",{href:!0});var xzr=s(WR);hro=r(xzr,"LukeTokenizer"),xzr.forEach(t),pro=r(gwe," (LUKE model)"),gwe.forEach(t),uro=i(S),is=n(S,"LI",{});var J9=s(is);Mte=n(J9,"STRONG",{});var $zr=s(Mte);_ro=r($zr,"lxmert"),$zr.forEach(t),bro=r(J9," \u2014 "),QR=n(J9,"A",{href:!0});var kzr=s(QR);vro=r(kzr,"LxmertTokenizer"),kzr.forEach(t),Fro=r(J9," or "),HR=n(J9,"A",{href:!0});var Szr=s(HR);Tro=r(Szr,"LxmertTokenizerFast"),Szr.forEach(t),Mro=r(J9," (LXMERT model)"),J9.forEach(t),Ero=i(S),Rg=n(S,"LI",{});var hwe=s(Rg);Ete=n(hwe,"STRONG",{});var Rzr=s(Ete);Cro=r(Rzr,"m2m_100"),Rzr.forEach(t),wro=r(hwe," \u2014 "),UR=n(hwe,"A",{href:!0});var Pzr=s(UR);Aro=r(Pzr,"M2M100Tokenizer"),Pzr.forEach(t),yro=r(hwe," (M2M100 model)"),hwe.forEach(t),Lro=i(S),Pg=n(S,"LI",{});var pwe=s(Pg);Cte=n(pwe,"STRONG",{});var Bzr=s(Cte);xro=r(Bzr,"marian"),Bzr.forEach(t),$ro=r(pwe," \u2014 "),JR=n(pwe,"A",{href:!0});var Izr=s(JR);kro=r(Izr,"MarianTokenizer"),Izr.forEach(t),Sro=r(pwe," (Marian model)"),pwe.forEach(t),Rro=i(S),ds=n(S,"LI",{});var Y9=s(ds);wte=n(Y9,"STRONG",{});var qzr=s(wte);Pro=r(qzr,"mbart"),qzr.forEach(t),Bro=r(Y9," \u2014 "),YR=n(Y9,"A",{href:!0});var Nzr=s(YR);Iro=r(Nzr,"MBartTokenizer"),Nzr.forEach(t),qro=r(Y9," or "),KR=n(Y9,"A",{href:!0});var jzr=s(KR);Nro=r(jzr,"MBartTokenizerFast"),jzr.forEach(t),jro=r(Y9," (mBART model)"),Y9.forEach(t),Dro=i(S),cs=n(S,"LI",{});var K9=s(cs);Ate=n(K9,"STRONG",{});var Dzr=s(Ate);Gro=r(Dzr,"mbart50"),Dzr.forEach(t),Oro=r(K9," \u2014 "),ZR=n(K9,"A",{href:!0});var Gzr=s(ZR);Vro=r(Gzr,"MBart50Tokenizer"),Gzr.forEach(t),Xro=r(K9," or "),eP=n(K9,"A",{href:!0});var Ozr=s(eP);zro=r(Ozr,"MBart50TokenizerFast"),Ozr.forEach(t),Wro=r(K9," (mBART-50 model)"),K9.forEach(t),Qro=i(S),fs=n(S,"LI",{});var Z9=s(fs);yte=n(Z9,"STRONG",{});var Vzr=s(yte);Hro=r(Vzr,"megatron-bert"),Vzr.forEach(t),Uro=r(Z9," \u2014 "),oP=n(Z9,"A",{href:!0});var Xzr=s(oP);Jro=r(Xzr,"BertTokenizer"),Xzr.forEach(t),Yro=r(Z9," or "),rP=n(Z9,"A",{href:!0});var zzr=s(rP);Kro=r(zzr,"BertTokenizerFast"),zzr.forEach(t),Zro=r(Z9," (MegatronBert model)"),Z9.forEach(t),eto=i(S),Bg=n(S,"LI",{});var uwe=s(Bg);Lte=n(uwe,"STRONG",{});var Wzr=s(Lte);oto=r(Wzr,"mluke"),Wzr.forEach(t),rto=r(uwe," \u2014 "),tP=n(uwe,"A",{href:!0});var Qzr=s(tP);tto=r(Qzr,"MLukeTokenizer"),Qzr.forEach(t),ato=r(uwe," (mLUKE model)"),uwe.forEach(t),nto=i(S),ms=n(S,"LI",{});var e$=s(ms);xte=n(e$,"STRONG",{});var Hzr=s(xte);sto=r(Hzr,"mobilebert"),Hzr.forEach(t),lto=r(e$," \u2014 "),aP=n(e$,"A",{href:!0});var Uzr=s(aP);ito=r(Uzr,"MobileBertTokenizer"),Uzr.forEach(t),dto=r(e$," or "),nP=n(e$,"A",{href:!0});var Jzr=s(nP);cto=r(Jzr,"MobileBertTokenizerFast"),Jzr.forEach(t),fto=r(e$," (MobileBERT model)"),e$.forEach(t),mto=i(S),gs=n(S,"LI",{});var o$=s(gs);$te=n(o$,"STRONG",{});var Yzr=s($te);gto=r(Yzr,"mpnet"),Yzr.forEach(t),hto=r(o$," \u2014 "),sP=n(o$,"A",{href:!0});var Kzr=s(sP);pto=r(Kzr,"MPNetTokenizer"),Kzr.forEach(t),uto=r(o$," or "),lP=n(o$,"A",{href:!0});var Zzr=s(lP);_to=r(Zzr,"MPNetTokenizerFast"),Zzr.forEach(t),bto=r(o$," (MPNet model)"),o$.forEach(t),vto=i(S),hs=n(S,"LI",{});var r$=s(hs);kte=n(r$,"STRONG",{});var eWr=s(kte);Fto=r(eWr,"mt5"),eWr.forEach(t),Tto=r(r$," \u2014 "),iP=n(r$,"A",{href:!0});var oWr=s(iP);Mto=r(oWr,"MT5Tokenizer"),oWr.forEach(t),Eto=r(r$," or "),dP=n(r$,"A",{href:!0});var rWr=s(dP);Cto=r(rWr,"MT5TokenizerFast"),rWr.forEach(t),wto=r(r$," (mT5 model)"),r$.forEach(t),Ato=i(S),ps=n(S,"LI",{});var t$=s(ps);Ste=n(t$,"STRONG",{});var tWr=s(Ste);yto=r(tWr,"nystromformer"),tWr.forEach(t),Lto=r(t$," \u2014 "),cP=n(t$,"A",{href:!0});var aWr=s(cP);xto=r(aWr,"AlbertTokenizer"),aWr.forEach(t),$to=r(t$," or "),fP=n(t$,"A",{href:!0});var nWr=s(fP);kto=r(nWr,"AlbertTokenizerFast"),nWr.forEach(t),Sto=r(t$," (Nystromformer model)"),t$.forEach(t),Rto=i(S),us=n(S,"LI",{});var a$=s(us);Rte=n(a$,"STRONG",{});var sWr=s(Rte);Pto=r(sWr,"openai-gpt"),sWr.forEach(t),Bto=r(a$," \u2014 "),mP=n(a$,"A",{href:!0});var lWr=s(mP);Ito=r(lWr,"OpenAIGPTTokenizer"),lWr.forEach(t),qto=r(a$," or "),gP=n(a$,"A",{href:!0});var iWr=s(gP);Nto=r(iWr,"OpenAIGPTTokenizerFast"),iWr.forEach(t),jto=r(a$," (OpenAI GPT model)"),a$.forEach(t),Dto=i(S),Ig=n(S,"LI",{});var _we=s(Ig);Pte=n(_we,"STRONG",{});var dWr=s(Pte);Gto=r(dWr,"opt"),dWr.forEach(t),Oto=r(_we," \u2014 "),hP=n(_we,"A",{href:!0});var cWr=s(hP);Vto=r(cWr,"GPT2Tokenizer"),cWr.forEach(t),Xto=r(_we," (OPT model)"),_we.forEach(t),zto=i(S),_s=n(S,"LI",{});var n$=s(_s);Bte=n(n$,"STRONG",{});var fWr=s(Bte);Wto=r(fWr,"pegasus"),fWr.forEach(t),Qto=r(n$," \u2014 "),pP=n(n$,"A",{href:!0});var mWr=s(pP);Hto=r(mWr,"PegasusTokenizer"),mWr.forEach(t),Uto=r(n$," or "),uP=n(n$,"A",{href:!0});var gWr=s(uP);Jto=r(gWr,"PegasusTokenizerFast"),gWr.forEach(t),Yto=r(n$," (Pegasus model)"),n$.forEach(t),Kto=i(S),qg=n(S,"LI",{});var bwe=s(qg);Ite=n(bwe,"STRONG",{});var hWr=s(Ite);Zto=r(hWr,"perceiver"),hWr.forEach(t),eao=r(bwe," \u2014 "),_P=n(bwe,"A",{href:!0});var pWr=s(_P);oao=r(pWr,"PerceiverTokenizer"),pWr.forEach(t),rao=r(bwe," (Perceiver model)"),bwe.forEach(t),tao=i(S),Ng=n(S,"LI",{});var vwe=s(Ng);qte=n(vwe,"STRONG",{});var uWr=s(qte);aao=r(uWr,"phobert"),uWr.forEach(t),nao=r(vwe," \u2014 "),bP=n(vwe,"A",{href:!0});var _Wr=s(bP);sao=r(_Wr,"PhobertTokenizer"),_Wr.forEach(t),lao=r(vwe," (PhoBERT model)"),vwe.forEach(t),iao=i(S),jg=n(S,"LI",{});var Fwe=s(jg);Nte=n(Fwe,"STRONG",{});var bWr=s(Nte);dao=r(bWr,"plbart"),bWr.forEach(t),cao=r(Fwe," \u2014 "),vP=n(Fwe,"A",{href:!0});var vWr=s(vP);fao=r(vWr,"PLBartTokenizer"),vWr.forEach(t),mao=r(Fwe," (PLBart model)"),Fwe.forEach(t),gao=i(S),Dg=n(S,"LI",{});var Twe=s(Dg);jte=n(Twe,"STRONG",{});var FWr=s(jte);hao=r(FWr,"prophetnet"),FWr.forEach(t),pao=r(Twe," \u2014 "),FP=n(Twe,"A",{href:!0});var TWr=s(FP);uao=r(TWr,"ProphetNetTokenizer"),TWr.forEach(t),_ao=r(Twe," (ProphetNet model)"),Twe.forEach(t),bao=i(S),bs=n(S,"LI",{});var s$=s(bs);Dte=n(s$,"STRONG",{});var MWr=s(Dte);vao=r(MWr,"qdqbert"),MWr.forEach(t),Fao=r(s$," \u2014 "),TP=n(s$,"A",{href:!0});var EWr=s(TP);Tao=r(EWr,"BertTokenizer"),EWr.forEach(t),Mao=r(s$," or "),MP=n(s$,"A",{href:!0});var CWr=s(MP);Eao=r(CWr,"BertTokenizerFast"),CWr.forEach(t),Cao=r(s$," (QDQBert model)"),s$.forEach(t),wao=i(S),Gg=n(S,"LI",{});var Mwe=s(Gg);Gte=n(Mwe,"STRONG",{});var wWr=s(Gte);Aao=r(wWr,"rag"),wWr.forEach(t),yao=r(Mwe," \u2014 "),EP=n(Mwe,"A",{href:!0});var AWr=s(EP);Lao=r(AWr,"RagTokenizer"),AWr.forEach(t),xao=r(Mwe," (RAG model)"),Mwe.forEach(t),$ao=i(S),vs=n(S,"LI",{});var l$=s(vs);Ote=n(l$,"STRONG",{});var yWr=s(Ote);kao=r(yWr,"realm"),yWr.forEach(t),Sao=r(l$," \u2014 "),CP=n(l$,"A",{href:!0});var LWr=s(CP);Rao=r(LWr,"RealmTokenizer"),LWr.forEach(t),Pao=r(l$," or "),wP=n(l$,"A",{href:!0});var xWr=s(wP);Bao=r(xWr,"RealmTokenizerFast"),xWr.forEach(t),Iao=r(l$," (Realm model)"),l$.forEach(t),qao=i(S),Fs=n(S,"LI",{});var i$=s(Fs);Vte=n(i$,"STRONG",{});var $Wr=s(Vte);Nao=r($Wr,"reformer"),$Wr.forEach(t),jao=r(i$," \u2014 "),AP=n(i$,"A",{href:!0});var kWr=s(AP);Dao=r(kWr,"ReformerTokenizer"),kWr.forEach(t),Gao=r(i$," or "),yP=n(i$,"A",{href:!0});var SWr=s(yP);Oao=r(SWr,"ReformerTokenizerFast"),SWr.forEach(t),Vao=r(i$," (Reformer model)"),i$.forEach(t),Xao=i(S),Ts=n(S,"LI",{});var d$=s(Ts);Xte=n(d$,"STRONG",{});var RWr=s(Xte);zao=r(RWr,"rembert"),RWr.forEach(t),Wao=r(d$," \u2014 "),LP=n(d$,"A",{href:!0});var PWr=s(LP);Qao=r(PWr,"RemBertTokenizer"),PWr.forEach(t),Hao=r(d$," or "),xP=n(d$,"A",{href:!0});var BWr=s(xP);Uao=r(BWr,"RemBertTokenizerFast"),BWr.forEach(t),Jao=r(d$," (RemBERT model)"),d$.forEach(t),Yao=i(S),Ms=n(S,"LI",{});var c$=s(Ms);zte=n(c$,"STRONG",{});var IWr=s(zte);Kao=r(IWr,"retribert"),IWr.forEach(t),Zao=r(c$," \u2014 "),$P=n(c$,"A",{href:!0});var qWr=s($P);eno=r(qWr,"RetriBertTokenizer"),qWr.forEach(t),ono=r(c$," or "),kP=n(c$,"A",{href:!0});var NWr=s(kP);rno=r(NWr,"RetriBertTokenizerFast"),NWr.forEach(t),tno=r(c$," (RetriBERT model)"),c$.forEach(t),ano=i(S),Es=n(S,"LI",{});var f$=s(Es);Wte=n(f$,"STRONG",{});var jWr=s(Wte);nno=r(jWr,"roberta"),jWr.forEach(t),sno=r(f$," \u2014 "),SP=n(f$,"A",{href:!0});var DWr=s(SP);lno=r(DWr,"RobertaTokenizer"),DWr.forEach(t),ino=r(f$," or "),RP=n(f$,"A",{href:!0});var GWr=s(RP);dno=r(GWr,"RobertaTokenizerFast"),GWr.forEach(t),cno=r(f$," (RoBERTa model)"),f$.forEach(t),fno=i(S),Cs=n(S,"LI",{});var m$=s(Cs);Qte=n(m$,"STRONG",{});var OWr=s(Qte);mno=r(OWr,"roformer"),OWr.forEach(t),gno=r(m$," \u2014 "),PP=n(m$,"A",{href:!0});var VWr=s(PP);hno=r(VWr,"RoFormerTokenizer"),VWr.forEach(t),pno=r(m$," or "),BP=n(m$,"A",{href:!0});var XWr=s(BP);uno=r(XWr,"RoFormerTokenizerFast"),XWr.forEach(t),_no=r(m$," (RoFormer model)"),m$.forEach(t),bno=i(S),Og=n(S,"LI",{});var Ewe=s(Og);Hte=n(Ewe,"STRONG",{});var zWr=s(Hte);vno=r(zWr,"speech_to_text"),zWr.forEach(t),Fno=r(Ewe," \u2014 "),IP=n(Ewe,"A",{href:!0});var WWr=s(IP);Tno=r(WWr,"Speech2TextTokenizer"),WWr.forEach(t),Mno=r(Ewe," (Speech2Text model)"),Ewe.forEach(t),Eno=i(S),Vg=n(S,"LI",{});var Cwe=s(Vg);Ute=n(Cwe,"STRONG",{});var QWr=s(Ute);Cno=r(QWr,"speech_to_text_2"),QWr.forEach(t),wno=r(Cwe," \u2014 "),qP=n(Cwe,"A",{href:!0});var HWr=s(qP);Ano=r(HWr,"Speech2Text2Tokenizer"),HWr.forEach(t),yno=r(Cwe," (Speech2Text2 model)"),Cwe.forEach(t),Lno=i(S),ws=n(S,"LI",{});var g$=s(ws);Jte=n(g$,"STRONG",{});var UWr=s(Jte);xno=r(UWr,"splinter"),UWr.forEach(t),$no=r(g$," \u2014 "),NP=n(g$,"A",{href:!0});var JWr=s(NP);kno=r(JWr,"SplinterTokenizer"),JWr.forEach(t),Sno=r(g$," or "),jP=n(g$,"A",{href:!0});var YWr=s(jP);Rno=r(YWr,"SplinterTokenizerFast"),YWr.forEach(t),Pno=r(g$," (Splinter model)"),g$.forEach(t),Bno=i(S),As=n(S,"LI",{});var h$=s(As);Yte=n(h$,"STRONG",{});var KWr=s(Yte);Ino=r(KWr,"squeezebert"),KWr.forEach(t),qno=r(h$," \u2014 "),DP=n(h$,"A",{href:!0});var ZWr=s(DP);Nno=r(ZWr,"SqueezeBertTokenizer"),ZWr.forEach(t),jno=r(h$," or "),GP=n(h$,"A",{href:!0});var eQr=s(GP);Dno=r(eQr,"SqueezeBertTokenizerFast"),eQr.forEach(t),Gno=r(h$," (SqueezeBERT model)"),h$.forEach(t),Ono=i(S),ys=n(S,"LI",{});var p$=s(ys);Kte=n(p$,"STRONG",{});var oQr=s(Kte);Vno=r(oQr,"t5"),oQr.forEach(t),Xno=r(p$," \u2014 "),OP=n(p$,"A",{href:!0});var rQr=s(OP);zno=r(rQr,"T5Tokenizer"),rQr.forEach(t),Wno=r(p$," or "),VP=n(p$,"A",{href:!0});var tQr=s(VP);Qno=r(tQr,"T5TokenizerFast"),tQr.forEach(t),Hno=r(p$," (T5 model)"),p$.forEach(t),Uno=i(S),Xg=n(S,"LI",{});var wwe=s(Xg);Zte=n(wwe,"STRONG",{});var aQr=s(Zte);Jno=r(aQr,"tapas"),aQr.forEach(t),Yno=r(wwe," \u2014 "),XP=n(wwe,"A",{href:!0});var nQr=s(XP);Kno=r(nQr,"TapasTokenizer"),nQr.forEach(t),Zno=r(wwe," (TAPAS model)"),wwe.forEach(t),eso=i(S),zg=n(S,"LI",{});var Awe=s(zg);eae=n(Awe,"STRONG",{});var sQr=s(eae);oso=r(sQr,"tapex"),sQr.forEach(t),rso=r(Awe," \u2014 "),zP=n(Awe,"A",{href:!0});var lQr=s(zP);tso=r(lQr,"TapexTokenizer"),lQr.forEach(t),aso=r(Awe," (TAPEX model)"),Awe.forEach(t),nso=i(S),Wg=n(S,"LI",{});var ywe=s(Wg);oae=n(ywe,"STRONG",{});var iQr=s(oae);sso=r(iQr,"transfo-xl"),iQr.forEach(t),lso=r(ywe," \u2014 "),WP=n(ywe,"A",{href:!0});var dQr=s(WP);iso=r(dQr,"TransfoXLTokenizer"),dQr.forEach(t),dso=r(ywe," (Transformer-XL model)"),ywe.forEach(t),cso=i(S),Ls=n(S,"LI",{});var u$=s(Ls);rae=n(u$,"STRONG",{});var cQr=s(rae);fso=r(cQr,"visual_bert"),cQr.forEach(t),mso=r(u$," \u2014 "),QP=n(u$,"A",{href:!0});var fQr=s(QP);gso=r(fQr,"BertTokenizer"),fQr.forEach(t),hso=r(u$," or "),HP=n(u$,"A",{href:!0});var mQr=s(HP);pso=r(mQr,"BertTokenizerFast"),mQr.forEach(t),uso=r(u$," (VisualBert model)"),u$.forEach(t),_so=i(S),Qg=n(S,"LI",{});var Lwe=s(Qg);tae=n(Lwe,"STRONG",{});var gQr=s(tae);bso=r(gQr,"wav2vec2"),gQr.forEach(t),vso=r(Lwe," \u2014 "),UP=n(Lwe,"A",{href:!0});var hQr=s(UP);Fso=r(hQr,"Wav2Vec2CTCTokenizer"),hQr.forEach(t),Tso=r(Lwe," (Wav2Vec2 model)"),Lwe.forEach(t),Mso=i(S),Hg=n(S,"LI",{});var xwe=s(Hg);aae=n(xwe,"STRONG",{});var pQr=s(aae);Eso=r(pQr,"wav2vec2-conformer"),pQr.forEach(t),Cso=r(xwe," \u2014 "),JP=n(xwe,"A",{href:!0});var uQr=s(JP);wso=r(uQr,"Wav2Vec2CTCTokenizer"),uQr.forEach(t),Aso=r(xwe," (Wav2Vec2-Conformer model)"),xwe.forEach(t),yso=i(S),Ug=n(S,"LI",{});var $we=s(Ug);nae=n($we,"STRONG",{});var _Qr=s(nae);Lso=r(_Qr,"wav2vec2_phoneme"),_Qr.forEach(t),xso=r($we," \u2014 "),YP=n($we,"A",{href:!0});var bQr=s(YP);$so=r(bQr,"Wav2Vec2PhonemeCTCTokenizer"),bQr.forEach(t),kso=r($we," (Wav2Vec2Phoneme model)"),$we.forEach(t),Sso=i(S),xs=n(S,"LI",{});var _$=s(xs);sae=n(_$,"STRONG",{});var vQr=s(sae);Rso=r(vQr,"xglm"),vQr.forEach(t),Pso=r(_$," \u2014 "),KP=n(_$,"A",{href:!0});var FQr=s(KP);Bso=r(FQr,"XGLMTokenizer"),FQr.forEach(t),Iso=r(_$," or "),ZP=n(_$,"A",{href:!0});var TQr=s(ZP);qso=r(TQr,"XGLMTokenizerFast"),TQr.forEach(t),Nso=r(_$," (XGLM model)"),_$.forEach(t),jso=i(S),Jg=n(S,"LI",{});var kwe=s(Jg);lae=n(kwe,"STRONG",{});var MQr=s(lae);Dso=r(MQr,"xlm"),MQr.forEach(t),Gso=r(kwe," \u2014 "),eB=n(kwe,"A",{href:!0});var EQr=s(eB);Oso=r(EQr,"XLMTokenizer"),EQr.forEach(t),Vso=r(kwe," (XLM model)"),kwe.forEach(t),Xso=i(S),Yg=n(S,"LI",{});var Swe=s(Yg);iae=n(Swe,"STRONG",{});var CQr=s(iae);zso=r(CQr,"xlm-prophetnet"),CQr.forEach(t),Wso=r(Swe," \u2014 "),oB=n(Swe,"A",{href:!0});var wQr=s(oB);Qso=r(wQr,"XLMProphetNetTokenizer"),wQr.forEach(t),Hso=r(Swe," (XLMProphetNet model)"),Swe.forEach(t),Uso=i(S),$s=n(S,"LI",{});var b$=s($s);dae=n(b$,"STRONG",{});var AQr=s(dae);Jso=r(AQr,"xlm-roberta"),AQr.forEach(t),Yso=r(b$," \u2014 "),rB=n(b$,"A",{href:!0});var yQr=s(rB);Kso=r(yQr,"XLMRobertaTokenizer"),yQr.forEach(t),Zso=r(b$," or "),tB=n(b$,"A",{href:!0});var LQr=s(tB);elo=r(LQr,"XLMRobertaTokenizerFast"),LQr.forEach(t),olo=r(b$," (XLM-RoBERTa model)"),b$.forEach(t),rlo=i(S),ks=n(S,"LI",{});var v$=s(ks);cae=n(v$,"STRONG",{});var xQr=s(cae);tlo=r(xQr,"xlm-roberta-xl"),xQr.forEach(t),alo=r(v$," \u2014 "),aB=n(v$,"A",{href:!0});var $Qr=s(aB);nlo=r($Qr,"RobertaTokenizer"),$Qr.forEach(t),slo=r(v$," or "),nB=n(v$,"A",{href:!0});var kQr=s(nB);llo=r(kQr,"RobertaTokenizerFast"),kQr.forEach(t),ilo=r(v$," (XLM-RoBERTa-XL model)"),v$.forEach(t),dlo=i(S),Ss=n(S,"LI",{});var F$=s(Ss);fae=n(F$,"STRONG",{});var SQr=s(fae);clo=r(SQr,"xlnet"),SQr.forEach(t),flo=r(F$," \u2014 "),sB=n(F$,"A",{href:!0});var RQr=s(sB);mlo=r(RQr,"XLNetTokenizer"),RQr.forEach(t),glo=r(F$," or "),lB=n(F$,"A",{href:!0});var PQr=s(lB);hlo=r(PQr,"XLNetTokenizerFast"),PQr.forEach(t),plo=r(F$," (XLNet model)"),F$.forEach(t),ulo=i(S),Rs=n(S,"LI",{});var T$=s(Rs);mae=n(T$,"STRONG",{});var BQr=s(mae);_lo=r(BQr,"yoso"),BQr.forEach(t),blo=r(T$," \u2014 "),iB=n(T$,"A",{href:!0});var IQr=s(iB);vlo=r(IQr,"AlbertTokenizer"),IQr.forEach(t),Flo=r(T$," or "),dB=n(T$,"A",{href:!0});var qQr=s(dB);Tlo=r(qQr,"AlbertTokenizerFast"),qQr.forEach(t),Mlo=r(T$," (YOSO model)"),T$.forEach(t),S.forEach(t),Elo=i(Ns),T(Kg.$$.fragment,Ns),Ns.forEach(t),Clo=i(qs),Zg=n(qs,"DIV",{class:!0});var PNe=s(Zg);T(F0.$$.fragment,PNe),wlo=i(PNe),gae=n(PNe,"P",{});var NQr=s(gae);Alo=r(NQr,"Register a new tokenizer in this mapping."),NQr.forEach(t),PNe.forEach(t),qs.forEach(t),BIe=i(f),Mi=n(f,"H2",{class:!0});var BNe=s(Mi);eh=n(BNe,"A",{id:!0,class:!0,href:!0});var jQr=s(eh);hae=n(jQr,"SPAN",{});var DQr=s(hae);T(T0.$$.fragment,DQr),DQr.forEach(t),jQr.forEach(t),ylo=i(BNe),pae=n(BNe,"SPAN",{});var GQr=s(pae);Llo=r(GQr,"AutoFeatureExtractor"),GQr.forEach(t),BNe.forEach(t),IIe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(M0.$$.fragment,js),xlo=i(js),E0=n(js,"P",{});var INe=s(E0);$lo=r(INe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cB=n(INe,"A",{href:!0});var OQr=s(cB);klo=r(OQr,"AutoFeatureExtractor.from_pretrained()"),OQr.forEach(t),Slo=r(INe," class method."),INe.forEach(t),Rlo=i(js),C0=n(js,"P",{});var qNe=s(C0);Plo=r(qNe,"This class cannot be instantiated directly using "),uae=n(qNe,"CODE",{});var VQr=s(uae);Blo=r(VQr,"__init__()"),VQr.forEach(t),Ilo=r(qNe," (throws an error)."),qNe.forEach(t),qlo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(w0.$$.fragment,Zt),Nlo=i(Zt),_ae=n(Zt,"P",{});var XQr=s(_ae);jlo=r(XQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),XQr.forEach(t),Dlo=i(Zt),ya=n(Zt,"P",{});var cA=s(ya);Glo=r(cA,"The feature extractor class to instantiate is selected based on the "),bae=n(cA,"CODE",{});var zQr=s(bae);Olo=r(zQr,"model_type"),zQr.forEach(t),Vlo=r(cA,` property of the config object
(either passed as an argument or loaded from `),vae=n(cA,"CODE",{});var WQr=s(vae);Xlo=r(WQr,"pretrained_model_name_or_path"),WQr.forEach(t),zlo=r(cA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fae=n(cA,"CODE",{});var QQr=s(Fae);Wlo=r(QQr,"pretrained_model_name_or_path"),QQr.forEach(t),Qlo=r(cA,":"),cA.forEach(t),Hlo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var Rwe=s(oh);Tae=n(Rwe,"STRONG",{});var HQr=s(Tae);Ulo=r(HQr,"beit"),HQr.forEach(t),Jlo=r(Rwe," \u2014 "),fB=n(Rwe,"A",{href:!0});var UQr=s(fB);Ylo=r(UQr,"BeitFeatureExtractor"),UQr.forEach(t),Klo=r(Rwe," (BEiT model)"),Rwe.forEach(t),Zlo=i(te),rh=n(te,"LI",{});var Pwe=s(rh);Mae=n(Pwe,"STRONG",{});var JQr=s(Mae);eio=r(JQr,"clip"),JQr.forEach(t),oio=r(Pwe," \u2014 "),mB=n(Pwe,"A",{href:!0});var YQr=s(mB);rio=r(YQr,"CLIPFeatureExtractor"),YQr.forEach(t),tio=r(Pwe," (CLIP model)"),Pwe.forEach(t),aio=i(te),th=n(te,"LI",{});var Bwe=s(th);Eae=n(Bwe,"STRONG",{});var KQr=s(Eae);nio=r(KQr,"convnext"),KQr.forEach(t),sio=r(Bwe," \u2014 "),gB=n(Bwe,"A",{href:!0});var ZQr=s(gB);lio=r(ZQr,"ConvNextFeatureExtractor"),ZQr.forEach(t),iio=r(Bwe," (ConvNext model)"),Bwe.forEach(t),dio=i(te),ah=n(te,"LI",{});var Iwe=s(ah);Cae=n(Iwe,"STRONG",{});var eHr=s(Cae);cio=r(eHr,"data2vec-audio"),eHr.forEach(t),fio=r(Iwe," \u2014 "),hB=n(Iwe,"A",{href:!0});var oHr=s(hB);mio=r(oHr,"Wav2Vec2FeatureExtractor"),oHr.forEach(t),gio=r(Iwe," (Data2VecAudio model)"),Iwe.forEach(t),hio=i(te),nh=n(te,"LI",{});var qwe=s(nh);wae=n(qwe,"STRONG",{});var rHr=s(wae);pio=r(rHr,"data2vec-vision"),rHr.forEach(t),uio=r(qwe," \u2014 "),pB=n(qwe,"A",{href:!0});var tHr=s(pB);_io=r(tHr,"BeitFeatureExtractor"),tHr.forEach(t),bio=r(qwe," (Data2VecVision model)"),qwe.forEach(t),vio=i(te),sh=n(te,"LI",{});var Nwe=s(sh);Aae=n(Nwe,"STRONG",{});var aHr=s(Aae);Fio=r(aHr,"deit"),aHr.forEach(t),Tio=r(Nwe," \u2014 "),uB=n(Nwe,"A",{href:!0});var nHr=s(uB);Mio=r(nHr,"DeiTFeatureExtractor"),nHr.forEach(t),Eio=r(Nwe," (DeiT model)"),Nwe.forEach(t),Cio=i(te),lh=n(te,"LI",{});var jwe=s(lh);yae=n(jwe,"STRONG",{});var sHr=s(yae);wio=r(sHr,"detr"),sHr.forEach(t),Aio=r(jwe," \u2014 "),_B=n(jwe,"A",{href:!0});var lHr=s(_B);yio=r(lHr,"DetrFeatureExtractor"),lHr.forEach(t),Lio=r(jwe," (DETR model)"),jwe.forEach(t),xio=i(te),ih=n(te,"LI",{});var Dwe=s(ih);Lae=n(Dwe,"STRONG",{});var iHr=s(Lae);$io=r(iHr,"dpt"),iHr.forEach(t),kio=r(Dwe," \u2014 "),bB=n(Dwe,"A",{href:!0});var dHr=s(bB);Sio=r(dHr,"DPTFeatureExtractor"),dHr.forEach(t),Rio=r(Dwe," (DPT model)"),Dwe.forEach(t),Pio=i(te),dh=n(te,"LI",{});var Gwe=s(dh);xae=n(Gwe,"STRONG",{});var cHr=s(xae);Bio=r(cHr,"flava"),cHr.forEach(t),Iio=r(Gwe," \u2014 "),vB=n(Gwe,"A",{href:!0});var fHr=s(vB);qio=r(fHr,"FlavaFeatureExtractor"),fHr.forEach(t),Nio=r(Gwe," (Flava model)"),Gwe.forEach(t),jio=i(te),ch=n(te,"LI",{});var Owe=s(ch);$ae=n(Owe,"STRONG",{});var mHr=s($ae);Dio=r(mHr,"glpn"),mHr.forEach(t),Gio=r(Owe," \u2014 "),FB=n(Owe,"A",{href:!0});var gHr=s(FB);Oio=r(gHr,"GLPNFeatureExtractor"),gHr.forEach(t),Vio=r(Owe," (GLPN model)"),Owe.forEach(t),Xio=i(te),fh=n(te,"LI",{});var Vwe=s(fh);kae=n(Vwe,"STRONG",{});var hHr=s(kae);zio=r(hHr,"hubert"),hHr.forEach(t),Wio=r(Vwe," \u2014 "),TB=n(Vwe,"A",{href:!0});var pHr=s(TB);Qio=r(pHr,"Wav2Vec2FeatureExtractor"),pHr.forEach(t),Hio=r(Vwe," (Hubert model)"),Vwe.forEach(t),Uio=i(te),mh=n(te,"LI",{});var Xwe=s(mh);Sae=n(Xwe,"STRONG",{});var uHr=s(Sae);Jio=r(uHr,"layoutlmv2"),uHr.forEach(t),Yio=r(Xwe," \u2014 "),MB=n(Xwe,"A",{href:!0});var _Hr=s(MB);Kio=r(_Hr,"LayoutLMv2FeatureExtractor"),_Hr.forEach(t),Zio=r(Xwe," (LayoutLMv2 model)"),Xwe.forEach(t),edo=i(te),gh=n(te,"LI",{});var zwe=s(gh);Rae=n(zwe,"STRONG",{});var bHr=s(Rae);odo=r(bHr,"maskformer"),bHr.forEach(t),rdo=r(zwe," \u2014 "),EB=n(zwe,"A",{href:!0});var vHr=s(EB);tdo=r(vHr,"MaskFormerFeatureExtractor"),vHr.forEach(t),ado=r(zwe," (MaskFormer model)"),zwe.forEach(t),ndo=i(te),hh=n(te,"LI",{});var Wwe=s(hh);Pae=n(Wwe,"STRONG",{});var FHr=s(Pae);sdo=r(FHr,"perceiver"),FHr.forEach(t),ldo=r(Wwe," \u2014 "),CB=n(Wwe,"A",{href:!0});var THr=s(CB);ido=r(THr,"PerceiverFeatureExtractor"),THr.forEach(t),ddo=r(Wwe," (Perceiver model)"),Wwe.forEach(t),cdo=i(te),ph=n(te,"LI",{});var Qwe=s(ph);Bae=n(Qwe,"STRONG",{});var MHr=s(Bae);fdo=r(MHr,"poolformer"),MHr.forEach(t),mdo=r(Qwe," \u2014 "),wB=n(Qwe,"A",{href:!0});var EHr=s(wB);gdo=r(EHr,"PoolFormerFeatureExtractor"),EHr.forEach(t),hdo=r(Qwe," (PoolFormer model)"),Qwe.forEach(t),pdo=i(te),uh=n(te,"LI",{});var Hwe=s(uh);Iae=n(Hwe,"STRONG",{});var CHr=s(Iae);udo=r(CHr,"regnet"),CHr.forEach(t),_do=r(Hwe," \u2014 "),AB=n(Hwe,"A",{href:!0});var wHr=s(AB);bdo=r(wHr,"ConvNextFeatureExtractor"),wHr.forEach(t),vdo=r(Hwe," (RegNet model)"),Hwe.forEach(t),Fdo=i(te),_h=n(te,"LI",{});var Uwe=s(_h);qae=n(Uwe,"STRONG",{});var AHr=s(qae);Tdo=r(AHr,"resnet"),AHr.forEach(t),Mdo=r(Uwe," \u2014 "),yB=n(Uwe,"A",{href:!0});var yHr=s(yB);Edo=r(yHr,"ConvNextFeatureExtractor"),yHr.forEach(t),Cdo=r(Uwe," (ResNet model)"),Uwe.forEach(t),wdo=i(te),bh=n(te,"LI",{});var Jwe=s(bh);Nae=n(Jwe,"STRONG",{});var LHr=s(Nae);Ado=r(LHr,"segformer"),LHr.forEach(t),ydo=r(Jwe," \u2014 "),LB=n(Jwe,"A",{href:!0});var xHr=s(LB);Ldo=r(xHr,"SegformerFeatureExtractor"),xHr.forEach(t),xdo=r(Jwe," (SegFormer model)"),Jwe.forEach(t),$do=i(te),vh=n(te,"LI",{});var Ywe=s(vh);jae=n(Ywe,"STRONG",{});var $Hr=s(jae);kdo=r($Hr,"speech_to_text"),$Hr.forEach(t),Sdo=r(Ywe," \u2014 "),xB=n(Ywe,"A",{href:!0});var kHr=s(xB);Rdo=r(kHr,"Speech2TextFeatureExtractor"),kHr.forEach(t),Pdo=r(Ywe," (Speech2Text model)"),Ywe.forEach(t),Bdo=i(te),Fh=n(te,"LI",{});var Kwe=s(Fh);Dae=n(Kwe,"STRONG",{});var SHr=s(Dae);Ido=r(SHr,"swin"),SHr.forEach(t),qdo=r(Kwe," \u2014 "),$B=n(Kwe,"A",{href:!0});var RHr=s($B);Ndo=r(RHr,"ViTFeatureExtractor"),RHr.forEach(t),jdo=r(Kwe," (Swin model)"),Kwe.forEach(t),Ddo=i(te),Th=n(te,"LI",{});var Zwe=s(Th);Gae=n(Zwe,"STRONG",{});var PHr=s(Gae);Gdo=r(PHr,"van"),PHr.forEach(t),Odo=r(Zwe," \u2014 "),kB=n(Zwe,"A",{href:!0});var BHr=s(kB);Vdo=r(BHr,"ConvNextFeatureExtractor"),BHr.forEach(t),Xdo=r(Zwe," (VAN model)"),Zwe.forEach(t),zdo=i(te),Mh=n(te,"LI",{});var eAe=s(Mh);Oae=n(eAe,"STRONG",{});var IHr=s(Oae);Wdo=r(IHr,"vit"),IHr.forEach(t),Qdo=r(eAe," \u2014 "),SB=n(eAe,"A",{href:!0});var qHr=s(SB);Hdo=r(qHr,"ViTFeatureExtractor"),qHr.forEach(t),Udo=r(eAe," (ViT model)"),eAe.forEach(t),Jdo=i(te),Eh=n(te,"LI",{});var oAe=s(Eh);Vae=n(oAe,"STRONG",{});var NHr=s(Vae);Ydo=r(NHr,"vit_mae"),NHr.forEach(t),Kdo=r(oAe," \u2014 "),RB=n(oAe,"A",{href:!0});var jHr=s(RB);Zdo=r(jHr,"ViTFeatureExtractor"),jHr.forEach(t),eco=r(oAe," (ViTMAE model)"),oAe.forEach(t),oco=i(te),Ch=n(te,"LI",{});var rAe=s(Ch);Xae=n(rAe,"STRONG",{});var DHr=s(Xae);rco=r(DHr,"wav2vec2"),DHr.forEach(t),tco=r(rAe," \u2014 "),PB=n(rAe,"A",{href:!0});var GHr=s(PB);aco=r(GHr,"Wav2Vec2FeatureExtractor"),GHr.forEach(t),nco=r(rAe," (Wav2Vec2 model)"),rAe.forEach(t),sco=i(te),wh=n(te,"LI",{});var tAe=s(wh);zae=n(tAe,"STRONG",{});var OHr=s(zae);lco=r(OHr,"wav2vec2-conformer"),OHr.forEach(t),ico=r(tAe," \u2014 "),BB=n(tAe,"A",{href:!0});var VHr=s(BB);dco=r(VHr,"Wav2Vec2FeatureExtractor"),VHr.forEach(t),cco=r(tAe," (Wav2Vec2-Conformer model)"),tAe.forEach(t),fco=i(te),Ah=n(te,"LI",{});var aAe=s(Ah);Wae=n(aAe,"STRONG",{});var XHr=s(Wae);mco=r(XHr,"yolos"),XHr.forEach(t),gco=r(aAe," \u2014 "),IB=n(aAe,"A",{href:!0});var zHr=s(IB);hco=r(zHr,"YolosFeatureExtractor"),zHr.forEach(t),pco=r(aAe," (YOLOS model)"),aAe.forEach(t),te.forEach(t),uco=i(Zt),T(yh.$$.fragment,Zt),_co=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),bco=i(js),xh=n(js,"DIV",{class:!0});var NNe=s(xh);T(A0.$$.fragment,NNe),vco=i(NNe),Qae=n(NNe,"P",{});var WHr=s(Qae);Fco=r(WHr,"Register a new feature extractor for this class."),WHr.forEach(t),NNe.forEach(t),js.forEach(t),qIe=i(f),Ei=n(f,"H2",{class:!0});var jNe=s(Ei);$h=n(jNe,"A",{id:!0,class:!0,href:!0});var QHr=s($h);Hae=n(QHr,"SPAN",{});var HHr=s(Hae);T(y0.$$.fragment,HHr),HHr.forEach(t),QHr.forEach(t),Tco=i(jNe),Uae=n(jNe,"SPAN",{});var UHr=s(Uae);Mco=r(UHr,"AutoProcessor"),UHr.forEach(t),jNe.forEach(t),NIe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(L0.$$.fragment,Ds),Eco=i(Ds),x0=n(Ds,"P",{});var DNe=s(x0);Cco=r(DNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qB=n(DNe,"A",{href:!0});var JHr=s(qB);wco=r(JHr,"AutoProcessor.from_pretrained()"),JHr.forEach(t),Aco=r(DNe," class method."),DNe.forEach(t),yco=i(Ds),$0=n(Ds,"P",{});var GNe=s($0);Lco=r(GNe,"This class cannot be instantiated directly using "),Jae=n(GNe,"CODE",{});var YHr=s(Jae);xco=r(YHr,"__init__()"),YHr.forEach(t),$co=r(GNe," (throws an error)."),GNe.forEach(t),kco=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(k0.$$.fragment,ea),Sco=i(ea),Yae=n(ea,"P",{});var KHr=s(Yae);Rco=r(KHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),KHr.forEach(t),Pco=i(ea),Ci=n(ea,"P",{});var LK=s(Ci);Bco=r(LK,"The processor class to instantiate is selected based on the "),Kae=n(LK,"CODE",{});var ZHr=s(Kae);Ico=r(ZHr,"model_type"),ZHr.forEach(t),qco=r(LK,` property of the config object (either
passed as an argument or loaded from `),Zae=n(LK,"CODE",{});var eUr=s(Zae);Nco=r(eUr,"pretrained_model_name_or_path"),eUr.forEach(t),jco=r(LK," if possible):"),LK.forEach(t),Dco=i(ea),pe=n(ea,"UL",{});var be=s(pe);kh=n(be,"LI",{});var nAe=s(kh);ene=n(nAe,"STRONG",{});var oUr=s(ene);Gco=r(oUr,"clip"),oUr.forEach(t),Oco=r(nAe," \u2014 "),NB=n(nAe,"A",{href:!0});var rUr=s(NB);Vco=r(rUr,"CLIPProcessor"),rUr.forEach(t),Xco=r(nAe," (CLIP model)"),nAe.forEach(t),zco=i(be),Sh=n(be,"LI",{});var sAe=s(Sh);one=n(sAe,"STRONG",{});var tUr=s(one);Wco=r(tUr,"flava"),tUr.forEach(t),Qco=r(sAe," \u2014 "),rne=n(sAe,"CODE",{});var aUr=s(rne);Hco=r(aUr,"FLAVAProcessor"),aUr.forEach(t),Uco=r(sAe," (Flava model)"),sAe.forEach(t),Jco=i(be),Rh=n(be,"LI",{});var lAe=s(Rh);tne=n(lAe,"STRONG",{});var nUr=s(tne);Yco=r(nUr,"layoutlmv2"),nUr.forEach(t),Kco=r(lAe," \u2014 "),jB=n(lAe,"A",{href:!0});var sUr=s(jB);Zco=r(sUr,"LayoutLMv2Processor"),sUr.forEach(t),efo=r(lAe," (LayoutLMv2 model)"),lAe.forEach(t),ofo=i(be),Ph=n(be,"LI",{});var iAe=s(Ph);ane=n(iAe,"STRONG",{});var lUr=s(ane);rfo=r(lUr,"layoutxlm"),lUr.forEach(t),tfo=r(iAe," \u2014 "),DB=n(iAe,"A",{href:!0});var iUr=s(DB);afo=r(iUr,"LayoutXLMProcessor"),iUr.forEach(t),nfo=r(iAe," (LayoutXLM model)"),iAe.forEach(t),sfo=i(be),Bh=n(be,"LI",{});var dAe=s(Bh);nne=n(dAe,"STRONG",{});var dUr=s(nne);lfo=r(dUr,"sew"),dUr.forEach(t),ifo=r(dAe," \u2014 "),GB=n(dAe,"A",{href:!0});var cUr=s(GB);dfo=r(cUr,"Wav2Vec2Processor"),cUr.forEach(t),cfo=r(dAe," (SEW model)"),dAe.forEach(t),ffo=i(be),Ih=n(be,"LI",{});var cAe=s(Ih);sne=n(cAe,"STRONG",{});var fUr=s(sne);mfo=r(fUr,"sew-d"),fUr.forEach(t),gfo=r(cAe," \u2014 "),OB=n(cAe,"A",{href:!0});var mUr=s(OB);hfo=r(mUr,"Wav2Vec2Processor"),mUr.forEach(t),pfo=r(cAe," (SEW-D model)"),cAe.forEach(t),ufo=i(be),qh=n(be,"LI",{});var fAe=s(qh);lne=n(fAe,"STRONG",{});var gUr=s(lne);_fo=r(gUr,"speech_to_text"),gUr.forEach(t),bfo=r(fAe," \u2014 "),VB=n(fAe,"A",{href:!0});var hUr=s(VB);vfo=r(hUr,"Speech2TextProcessor"),hUr.forEach(t),Ffo=r(fAe," (Speech2Text model)"),fAe.forEach(t),Tfo=i(be),Nh=n(be,"LI",{});var mAe=s(Nh);ine=n(mAe,"STRONG",{});var pUr=s(ine);Mfo=r(pUr,"speech_to_text_2"),pUr.forEach(t),Efo=r(mAe," \u2014 "),XB=n(mAe,"A",{href:!0});var uUr=s(XB);Cfo=r(uUr,"Speech2Text2Processor"),uUr.forEach(t),wfo=r(mAe," (Speech2Text2 model)"),mAe.forEach(t),Afo=i(be),jh=n(be,"LI",{});var gAe=s(jh);dne=n(gAe,"STRONG",{});var _Ur=s(dne);yfo=r(_Ur,"trocr"),_Ur.forEach(t),Lfo=r(gAe," \u2014 "),zB=n(gAe,"A",{href:!0});var bUr=s(zB);xfo=r(bUr,"TrOCRProcessor"),bUr.forEach(t),$fo=r(gAe," (TrOCR model)"),gAe.forEach(t),kfo=i(be),Dh=n(be,"LI",{});var hAe=s(Dh);cne=n(hAe,"STRONG",{});var vUr=s(cne);Sfo=r(vUr,"unispeech"),vUr.forEach(t),Rfo=r(hAe," \u2014 "),WB=n(hAe,"A",{href:!0});var FUr=s(WB);Pfo=r(FUr,"Wav2Vec2Processor"),FUr.forEach(t),Bfo=r(hAe," (UniSpeech model)"),hAe.forEach(t),Ifo=i(be),Gh=n(be,"LI",{});var pAe=s(Gh);fne=n(pAe,"STRONG",{});var TUr=s(fne);qfo=r(TUr,"unispeech-sat"),TUr.forEach(t),Nfo=r(pAe," \u2014 "),QB=n(pAe,"A",{href:!0});var MUr=s(QB);jfo=r(MUr,"Wav2Vec2Processor"),MUr.forEach(t),Dfo=r(pAe," (UniSpeechSat model)"),pAe.forEach(t),Gfo=i(be),Oh=n(be,"LI",{});var uAe=s(Oh);mne=n(uAe,"STRONG",{});var EUr=s(mne);Ofo=r(EUr,"vilt"),EUr.forEach(t),Vfo=r(uAe," \u2014 "),HB=n(uAe,"A",{href:!0});var CUr=s(HB);Xfo=r(CUr,"ViltProcessor"),CUr.forEach(t),zfo=r(uAe," (ViLT model)"),uAe.forEach(t),Wfo=i(be),Vh=n(be,"LI",{});var _Ae=s(Vh);gne=n(_Ae,"STRONG",{});var wUr=s(gne);Qfo=r(wUr,"vision-text-dual-encoder"),wUr.forEach(t),Hfo=r(_Ae," \u2014 "),UB=n(_Ae,"A",{href:!0});var AUr=s(UB);Ufo=r(AUr,"VisionTextDualEncoderProcessor"),AUr.forEach(t),Jfo=r(_Ae," (VisionTextDualEncoder model)"),_Ae.forEach(t),Yfo=i(be),Xh=n(be,"LI",{});var bAe=s(Xh);hne=n(bAe,"STRONG",{});var yUr=s(hne);Kfo=r(yUr,"wav2vec2"),yUr.forEach(t),Zfo=r(bAe," \u2014 "),JB=n(bAe,"A",{href:!0});var LUr=s(JB);emo=r(LUr,"Wav2Vec2Processor"),LUr.forEach(t),omo=r(bAe," (Wav2Vec2 model)"),bAe.forEach(t),rmo=i(be),zh=n(be,"LI",{});var vAe=s(zh);pne=n(vAe,"STRONG",{});var xUr=s(pne);tmo=r(xUr,"wav2vec2-conformer"),xUr.forEach(t),amo=r(vAe," \u2014 "),YB=n(vAe,"A",{href:!0});var $Ur=s(YB);nmo=r($Ur,"Wav2Vec2Processor"),$Ur.forEach(t),smo=r(vAe," (Wav2Vec2-Conformer model)"),vAe.forEach(t),lmo=i(be),Wh=n(be,"LI",{});var FAe=s(Wh);une=n(FAe,"STRONG",{});var kUr=s(une);imo=r(kUr,"wavlm"),kUr.forEach(t),dmo=r(FAe," \u2014 "),KB=n(FAe,"A",{href:!0});var SUr=s(KB);cmo=r(SUr,"Wav2Vec2Processor"),SUr.forEach(t),fmo=r(FAe," (WavLM model)"),FAe.forEach(t),be.forEach(t),mmo=i(ea),T(Qh.$$.fragment,ea),gmo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),hmo=i(Ds),Uh=n(Ds,"DIV",{class:!0});var ONe=s(Uh);T(S0.$$.fragment,ONe),pmo=i(ONe),_ne=n(ONe,"P",{});var RUr=s(_ne);umo=r(RUr,"Register a new processor for this class."),RUr.forEach(t),ONe.forEach(t),Ds.forEach(t),jIe=i(f),wi=n(f,"H2",{class:!0});var VNe=s(wi);Jh=n(VNe,"A",{id:!0,class:!0,href:!0});var PUr=s(Jh);bne=n(PUr,"SPAN",{});var BUr=s(bne);T(R0.$$.fragment,BUr),BUr.forEach(t),PUr.forEach(t),_mo=i(VNe),vne=n(VNe,"SPAN",{});var IUr=s(vne);bmo=r(IUr,"AutoModel"),IUr.forEach(t),VNe.forEach(t),DIe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(P0.$$.fragment,Gs),vmo=i(Gs),Ai=n(Gs,"P",{});var xK=s(Ai);Fmo=r(xK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=n(xK,"A",{href:!0});var qUr=s(ZB);Tmo=r(qUr,"from_pretrained()"),qUr.forEach(t),Mmo=r(xK," class method or the "),eI=n(xK,"A",{href:!0});var NUr=s(eI);Emo=r(NUr,"from_config()"),NUr.forEach(t),Cmo=r(xK,` class
method.`),xK.forEach(t),wmo=i(Gs),B0=n(Gs,"P",{});var XNe=s(B0);Amo=r(XNe,"This class cannot be instantiated directly using "),Fne=n(XNe,"CODE",{});var jUr=s(Fne);ymo=r(jUr,"__init__()"),jUr.forEach(t),Lmo=r(XNe," (throws an error)."),XNe.forEach(t),xmo=i(Gs),tt=n(Gs,"DIV",{class:!0});var fA=s(tt);T(I0.$$.fragment,fA),$mo=i(fA),Tne=n(fA,"P",{});var DUr=s(Tne);kmo=r(DUr,"Instantiates one of the base model classes of the library from a configuration."),DUr.forEach(t),Smo=i(fA),yi=n(fA,"P",{});var $K=s(yi);Rmo=r($K,`Note:
Loading a model from its configuration file does `),Mne=n($K,"STRONG",{});var GUr=s(Mne);Pmo=r(GUr,"not"),GUr.forEach(t),Bmo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),oI=n($K,"A",{href:!0});var OUr=s(oI);Imo=r(OUr,"from_pretrained()"),OUr.forEach(t),qmo=r($K," to load the model weights."),$K.forEach(t),Nmo=i(fA),T(Yh.$$.fragment,fA),fA.forEach(t),jmo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(q0.$$.fragment,oa),Dmo=i(oa),Ene=n(oa,"P",{});var VUr=s(Ene);Gmo=r(VUr,"Instantiate one of the base model classes of the library from a pretrained model."),VUr.forEach(t),Omo=i(oa),La=n(oa,"P",{});var mA=s(La);Vmo=r(mA,"The model class to instantiate is selected based on the "),Cne=n(mA,"CODE",{});var XUr=s(Cne);Xmo=r(XUr,"model_type"),XUr.forEach(t),zmo=r(mA,` property of the config object (either
passed as an argument or loaded from `),wne=n(mA,"CODE",{});var zUr=s(wne);Wmo=r(zUr,"pretrained_model_name_or_path"),zUr.forEach(t),Qmo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=n(mA,"CODE",{});var WUr=s(Ane);Hmo=r(WUr,"pretrained_model_name_or_path"),WUr.forEach(t),Umo=r(mA,":"),mA.forEach(t),Jmo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var TAe=s(Kh);yne=n(TAe,"STRONG",{});var QUr=s(yne);Ymo=r(QUr,"albert"),QUr.forEach(t),Kmo=r(TAe," \u2014 "),rI=n(TAe,"A",{href:!0});var HUr=s(rI);Zmo=r(HUr,"AlbertModel"),HUr.forEach(t),ego=r(TAe," (ALBERT model)"),TAe.forEach(t),ogo=i($),Zh=n($,"LI",{});var MAe=s(Zh);Lne=n(MAe,"STRONG",{});var UUr=s(Lne);rgo=r(UUr,"bart"),UUr.forEach(t),tgo=r(MAe," \u2014 "),tI=n(MAe,"A",{href:!0});var JUr=s(tI);ago=r(JUr,"BartModel"),JUr.forEach(t),ngo=r(MAe," (BART model)"),MAe.forEach(t),sgo=i($),ep=n($,"LI",{});var EAe=s(ep);xne=n(EAe,"STRONG",{});var YUr=s(xne);lgo=r(YUr,"beit"),YUr.forEach(t),igo=r(EAe," \u2014 "),aI=n(EAe,"A",{href:!0});var KUr=s(aI);dgo=r(KUr,"BeitModel"),KUr.forEach(t),cgo=r(EAe," (BEiT model)"),EAe.forEach(t),fgo=i($),op=n($,"LI",{});var CAe=s(op);$ne=n(CAe,"STRONG",{});var ZUr=s($ne);mgo=r(ZUr,"bert"),ZUr.forEach(t),ggo=r(CAe," \u2014 "),nI=n(CAe,"A",{href:!0});var eJr=s(nI);hgo=r(eJr,"BertModel"),eJr.forEach(t),pgo=r(CAe," (BERT model)"),CAe.forEach(t),ugo=i($),rp=n($,"LI",{});var wAe=s(rp);kne=n(wAe,"STRONG",{});var oJr=s(kne);_go=r(oJr,"bert-generation"),oJr.forEach(t),bgo=r(wAe," \u2014 "),sI=n(wAe,"A",{href:!0});var rJr=s(sI);vgo=r(rJr,"BertGenerationEncoder"),rJr.forEach(t),Fgo=r(wAe," (Bert Generation model)"),wAe.forEach(t),Tgo=i($),tp=n($,"LI",{});var AAe=s(tp);Sne=n(AAe,"STRONG",{});var tJr=s(Sne);Mgo=r(tJr,"big_bird"),tJr.forEach(t),Ego=r(AAe," \u2014 "),lI=n(AAe,"A",{href:!0});var aJr=s(lI);Cgo=r(aJr,"BigBirdModel"),aJr.forEach(t),wgo=r(AAe," (BigBird model)"),AAe.forEach(t),Ago=i($),ap=n($,"LI",{});var yAe=s(ap);Rne=n(yAe,"STRONG",{});var nJr=s(Rne);ygo=r(nJr,"bigbird_pegasus"),nJr.forEach(t),Lgo=r(yAe," \u2014 "),iI=n(yAe,"A",{href:!0});var sJr=s(iI);xgo=r(sJr,"BigBirdPegasusModel"),sJr.forEach(t),$go=r(yAe," (BigBirdPegasus model)"),yAe.forEach(t),kgo=i($),np=n($,"LI",{});var LAe=s(np);Pne=n(LAe,"STRONG",{});var lJr=s(Pne);Sgo=r(lJr,"blenderbot"),lJr.forEach(t),Rgo=r(LAe," \u2014 "),dI=n(LAe,"A",{href:!0});var iJr=s(dI);Pgo=r(iJr,"BlenderbotModel"),iJr.forEach(t),Bgo=r(LAe," (Blenderbot model)"),LAe.forEach(t),Igo=i($),sp=n($,"LI",{});var xAe=s(sp);Bne=n(xAe,"STRONG",{});var dJr=s(Bne);qgo=r(dJr,"blenderbot-small"),dJr.forEach(t),Ngo=r(xAe," \u2014 "),cI=n(xAe,"A",{href:!0});var cJr=s(cI);jgo=r(cJr,"BlenderbotSmallModel"),cJr.forEach(t),Dgo=r(xAe," (BlenderbotSmall model)"),xAe.forEach(t),Ggo=i($),lp=n($,"LI",{});var $Ae=s(lp);Ine=n($Ae,"STRONG",{});var fJr=s(Ine);Ogo=r(fJr,"camembert"),fJr.forEach(t),Vgo=r($Ae," \u2014 "),fI=n($Ae,"A",{href:!0});var mJr=s(fI);Xgo=r(mJr,"CamembertModel"),mJr.forEach(t),zgo=r($Ae," (CamemBERT model)"),$Ae.forEach(t),Wgo=i($),ip=n($,"LI",{});var kAe=s(ip);qne=n(kAe,"STRONG",{});var gJr=s(qne);Qgo=r(gJr,"canine"),gJr.forEach(t),Hgo=r(kAe," \u2014 "),mI=n(kAe,"A",{href:!0});var hJr=s(mI);Ugo=r(hJr,"CanineModel"),hJr.forEach(t),Jgo=r(kAe," (Canine model)"),kAe.forEach(t),Ygo=i($),dp=n($,"LI",{});var SAe=s(dp);Nne=n(SAe,"STRONG",{});var pJr=s(Nne);Kgo=r(pJr,"clip"),pJr.forEach(t),Zgo=r(SAe," \u2014 "),gI=n(SAe,"A",{href:!0});var uJr=s(gI);eho=r(uJr,"CLIPModel"),uJr.forEach(t),oho=r(SAe," (CLIP model)"),SAe.forEach(t),rho=i($),cp=n($,"LI",{});var RAe=s(cp);jne=n(RAe,"STRONG",{});var _Jr=s(jne);tho=r(_Jr,"convbert"),_Jr.forEach(t),aho=r(RAe," \u2014 "),hI=n(RAe,"A",{href:!0});var bJr=s(hI);nho=r(bJr,"ConvBertModel"),bJr.forEach(t),sho=r(RAe," (ConvBERT model)"),RAe.forEach(t),lho=i($),fp=n($,"LI",{});var PAe=s(fp);Dne=n(PAe,"STRONG",{});var vJr=s(Dne);iho=r(vJr,"convnext"),vJr.forEach(t),dho=r(PAe," \u2014 "),pI=n(PAe,"A",{href:!0});var FJr=s(pI);cho=r(FJr,"ConvNextModel"),FJr.forEach(t),fho=r(PAe," (ConvNext model)"),PAe.forEach(t),mho=i($),mp=n($,"LI",{});var BAe=s(mp);Gne=n(BAe,"STRONG",{});var TJr=s(Gne);gho=r(TJr,"ctrl"),TJr.forEach(t),hho=r(BAe," \u2014 "),uI=n(BAe,"A",{href:!0});var MJr=s(uI);pho=r(MJr,"CTRLModel"),MJr.forEach(t),uho=r(BAe," (CTRL model)"),BAe.forEach(t),_ho=i($),gp=n($,"LI",{});var IAe=s(gp);One=n(IAe,"STRONG",{});var EJr=s(One);bho=r(EJr,"data2vec-audio"),EJr.forEach(t),vho=r(IAe," \u2014 "),_I=n(IAe,"A",{href:!0});var CJr=s(_I);Fho=r(CJr,"Data2VecAudioModel"),CJr.forEach(t),Tho=r(IAe," (Data2VecAudio model)"),IAe.forEach(t),Mho=i($),hp=n($,"LI",{});var qAe=s(hp);Vne=n(qAe,"STRONG",{});var wJr=s(Vne);Eho=r(wJr,"data2vec-text"),wJr.forEach(t),Cho=r(qAe," \u2014 "),bI=n(qAe,"A",{href:!0});var AJr=s(bI);who=r(AJr,"Data2VecTextModel"),AJr.forEach(t),Aho=r(qAe," (Data2VecText model)"),qAe.forEach(t),yho=i($),pp=n($,"LI",{});var NAe=s(pp);Xne=n(NAe,"STRONG",{});var yJr=s(Xne);Lho=r(yJr,"data2vec-vision"),yJr.forEach(t),xho=r(NAe," \u2014 "),vI=n(NAe,"A",{href:!0});var LJr=s(vI);$ho=r(LJr,"Data2VecVisionModel"),LJr.forEach(t),kho=r(NAe," (Data2VecVision model)"),NAe.forEach(t),Sho=i($),up=n($,"LI",{});var jAe=s(up);zne=n(jAe,"STRONG",{});var xJr=s(zne);Rho=r(xJr,"deberta"),xJr.forEach(t),Pho=r(jAe," \u2014 "),FI=n(jAe,"A",{href:!0});var $Jr=s(FI);Bho=r($Jr,"DebertaModel"),$Jr.forEach(t),Iho=r(jAe," (DeBERTa model)"),jAe.forEach(t),qho=i($),_p=n($,"LI",{});var DAe=s(_p);Wne=n(DAe,"STRONG",{});var kJr=s(Wne);Nho=r(kJr,"deberta-v2"),kJr.forEach(t),jho=r(DAe," \u2014 "),TI=n(DAe,"A",{href:!0});var SJr=s(TI);Dho=r(SJr,"DebertaV2Model"),SJr.forEach(t),Gho=r(DAe," (DeBERTa-v2 model)"),DAe.forEach(t),Oho=i($),bp=n($,"LI",{});var GAe=s(bp);Qne=n(GAe,"STRONG",{});var RJr=s(Qne);Vho=r(RJr,"decision_transformer"),RJr.forEach(t),Xho=r(GAe," \u2014 "),MI=n(GAe,"A",{href:!0});var PJr=s(MI);zho=r(PJr,"DecisionTransformerModel"),PJr.forEach(t),Who=r(GAe," (Decision Transformer model)"),GAe.forEach(t),Qho=i($),vp=n($,"LI",{});var OAe=s(vp);Hne=n(OAe,"STRONG",{});var BJr=s(Hne);Hho=r(BJr,"deit"),BJr.forEach(t),Uho=r(OAe," \u2014 "),EI=n(OAe,"A",{href:!0});var IJr=s(EI);Jho=r(IJr,"DeiTModel"),IJr.forEach(t),Yho=r(OAe," (DeiT model)"),OAe.forEach(t),Kho=i($),Fp=n($,"LI",{});var VAe=s(Fp);Une=n(VAe,"STRONG",{});var qJr=s(Une);Zho=r(qJr,"detr"),qJr.forEach(t),epo=r(VAe," \u2014 "),CI=n(VAe,"A",{href:!0});var NJr=s(CI);opo=r(NJr,"DetrModel"),NJr.forEach(t),rpo=r(VAe," (DETR model)"),VAe.forEach(t),tpo=i($),Tp=n($,"LI",{});var XAe=s(Tp);Jne=n(XAe,"STRONG",{});var jJr=s(Jne);apo=r(jJr,"distilbert"),jJr.forEach(t),npo=r(XAe," \u2014 "),wI=n(XAe,"A",{href:!0});var DJr=s(wI);spo=r(DJr,"DistilBertModel"),DJr.forEach(t),lpo=r(XAe," (DistilBERT model)"),XAe.forEach(t),ipo=i($),Mp=n($,"LI",{});var zAe=s(Mp);Yne=n(zAe,"STRONG",{});var GJr=s(Yne);dpo=r(GJr,"dpr"),GJr.forEach(t),cpo=r(zAe," \u2014 "),AI=n(zAe,"A",{href:!0});var OJr=s(AI);fpo=r(OJr,"DPRQuestionEncoder"),OJr.forEach(t),mpo=r(zAe," (DPR model)"),zAe.forEach(t),gpo=i($),Ep=n($,"LI",{});var WAe=s(Ep);Kne=n(WAe,"STRONG",{});var VJr=s(Kne);hpo=r(VJr,"dpt"),VJr.forEach(t),ppo=r(WAe," \u2014 "),yI=n(WAe,"A",{href:!0});var XJr=s(yI);upo=r(XJr,"DPTModel"),XJr.forEach(t),_po=r(WAe," (DPT model)"),WAe.forEach(t),bpo=i($),Cp=n($,"LI",{});var QAe=s(Cp);Zne=n(QAe,"STRONG",{});var zJr=s(Zne);vpo=r(zJr,"electra"),zJr.forEach(t),Fpo=r(QAe," \u2014 "),LI=n(QAe,"A",{href:!0});var WJr=s(LI);Tpo=r(WJr,"ElectraModel"),WJr.forEach(t),Mpo=r(QAe," (ELECTRA model)"),QAe.forEach(t),Epo=i($),wp=n($,"LI",{});var HAe=s(wp);ese=n(HAe,"STRONG",{});var QJr=s(ese);Cpo=r(QJr,"flaubert"),QJr.forEach(t),wpo=r(HAe," \u2014 "),xI=n(HAe,"A",{href:!0});var HJr=s(xI);Apo=r(HJr,"FlaubertModel"),HJr.forEach(t),ypo=r(HAe," (FlauBERT model)"),HAe.forEach(t),Lpo=i($),Ap=n($,"LI",{});var UAe=s(Ap);ose=n(UAe,"STRONG",{});var UJr=s(ose);xpo=r(UJr,"flava"),UJr.forEach(t),$po=r(UAe," \u2014 "),$I=n(UAe,"A",{href:!0});var JJr=s($I);kpo=r(JJr,"FlavaModel"),JJr.forEach(t),Spo=r(UAe," (Flava model)"),UAe.forEach(t),Rpo=i($),yp=n($,"LI",{});var JAe=s(yp);rse=n(JAe,"STRONG",{});var YJr=s(rse);Ppo=r(YJr,"fnet"),YJr.forEach(t),Bpo=r(JAe," \u2014 "),kI=n(JAe,"A",{href:!0});var KJr=s(kI);Ipo=r(KJr,"FNetModel"),KJr.forEach(t),qpo=r(JAe," (FNet model)"),JAe.forEach(t),Npo=i($),Lp=n($,"LI",{});var YAe=s(Lp);tse=n(YAe,"STRONG",{});var ZJr=s(tse);jpo=r(ZJr,"fsmt"),ZJr.forEach(t),Dpo=r(YAe," \u2014 "),SI=n(YAe,"A",{href:!0});var eYr=s(SI);Gpo=r(eYr,"FSMTModel"),eYr.forEach(t),Opo=r(YAe," (FairSeq Machine-Translation model)"),YAe.forEach(t),Vpo=i($),Ps=n($,"LI",{});var M$=s(Ps);ase=n(M$,"STRONG",{});var oYr=s(ase);Xpo=r(oYr,"funnel"),oYr.forEach(t),zpo=r(M$," \u2014 "),RI=n(M$,"A",{href:!0});var rYr=s(RI);Wpo=r(rYr,"FunnelModel"),rYr.forEach(t),Qpo=r(M$," or "),PI=n(M$,"A",{href:!0});var tYr=s(PI);Hpo=r(tYr,"FunnelBaseModel"),tYr.forEach(t),Upo=r(M$," (Funnel Transformer model)"),M$.forEach(t),Jpo=i($),xp=n($,"LI",{});var KAe=s(xp);nse=n(KAe,"STRONG",{});var aYr=s(nse);Ypo=r(aYr,"glpn"),aYr.forEach(t),Kpo=r(KAe," \u2014 "),BI=n(KAe,"A",{href:!0});var nYr=s(BI);Zpo=r(nYr,"GLPNModel"),nYr.forEach(t),euo=r(KAe," (GLPN model)"),KAe.forEach(t),ouo=i($),$p=n($,"LI",{});var ZAe=s($p);sse=n(ZAe,"STRONG",{});var sYr=s(sse);ruo=r(sYr,"gpt2"),sYr.forEach(t),tuo=r(ZAe," \u2014 "),II=n(ZAe,"A",{href:!0});var lYr=s(II);auo=r(lYr,"GPT2Model"),lYr.forEach(t),nuo=r(ZAe," (OpenAI GPT-2 model)"),ZAe.forEach(t),suo=i($),kp=n($,"LI",{});var e6e=s(kp);lse=n(e6e,"STRONG",{});var iYr=s(lse);luo=r(iYr,"gpt_neo"),iYr.forEach(t),iuo=r(e6e," \u2014 "),qI=n(e6e,"A",{href:!0});var dYr=s(qI);duo=r(dYr,"GPTNeoModel"),dYr.forEach(t),cuo=r(e6e," (GPT Neo model)"),e6e.forEach(t),fuo=i($),Sp=n($,"LI",{});var o6e=s(Sp);ise=n(o6e,"STRONG",{});var cYr=s(ise);muo=r(cYr,"gptj"),cYr.forEach(t),guo=r(o6e," \u2014 "),NI=n(o6e,"A",{href:!0});var fYr=s(NI);huo=r(fYr,"GPTJModel"),fYr.forEach(t),puo=r(o6e," (GPT-J model)"),o6e.forEach(t),uuo=i($),Rp=n($,"LI",{});var r6e=s(Rp);dse=n(r6e,"STRONG",{});var mYr=s(dse);_uo=r(mYr,"hubert"),mYr.forEach(t),buo=r(r6e," \u2014 "),jI=n(r6e,"A",{href:!0});var gYr=s(jI);vuo=r(gYr,"HubertModel"),gYr.forEach(t),Fuo=r(r6e," (Hubert model)"),r6e.forEach(t),Tuo=i($),Pp=n($,"LI",{});var t6e=s(Pp);cse=n(t6e,"STRONG",{});var hYr=s(cse);Muo=r(hYr,"ibert"),hYr.forEach(t),Euo=r(t6e," \u2014 "),DI=n(t6e,"A",{href:!0});var pYr=s(DI);Cuo=r(pYr,"IBertModel"),pYr.forEach(t),wuo=r(t6e," (I-BERT model)"),t6e.forEach(t),Auo=i($),Bp=n($,"LI",{});var a6e=s(Bp);fse=n(a6e,"STRONG",{});var uYr=s(fse);yuo=r(uYr,"imagegpt"),uYr.forEach(t),Luo=r(a6e," \u2014 "),GI=n(a6e,"A",{href:!0});var _Yr=s(GI);xuo=r(_Yr,"ImageGPTModel"),_Yr.forEach(t),$uo=r(a6e," (ImageGPT model)"),a6e.forEach(t),kuo=i($),Ip=n($,"LI",{});var n6e=s(Ip);mse=n(n6e,"STRONG",{});var bYr=s(mse);Suo=r(bYr,"layoutlm"),bYr.forEach(t),Ruo=r(n6e," \u2014 "),OI=n(n6e,"A",{href:!0});var vYr=s(OI);Puo=r(vYr,"LayoutLMModel"),vYr.forEach(t),Buo=r(n6e," (LayoutLM model)"),n6e.forEach(t),Iuo=i($),qp=n($,"LI",{});var s6e=s(qp);gse=n(s6e,"STRONG",{});var FYr=s(gse);quo=r(FYr,"layoutlmv2"),FYr.forEach(t),Nuo=r(s6e," \u2014 "),VI=n(s6e,"A",{href:!0});var TYr=s(VI);juo=r(TYr,"LayoutLMv2Model"),TYr.forEach(t),Duo=r(s6e," (LayoutLMv2 model)"),s6e.forEach(t),Guo=i($),Np=n($,"LI",{});var l6e=s(Np);hse=n(l6e,"STRONG",{});var MYr=s(hse);Ouo=r(MYr,"led"),MYr.forEach(t),Vuo=r(l6e," \u2014 "),XI=n(l6e,"A",{href:!0});var EYr=s(XI);Xuo=r(EYr,"LEDModel"),EYr.forEach(t),zuo=r(l6e," (LED model)"),l6e.forEach(t),Wuo=i($),jp=n($,"LI",{});var i6e=s(jp);pse=n(i6e,"STRONG",{});var CYr=s(pse);Quo=r(CYr,"longformer"),CYr.forEach(t),Huo=r(i6e," \u2014 "),zI=n(i6e,"A",{href:!0});var wYr=s(zI);Uuo=r(wYr,"LongformerModel"),wYr.forEach(t),Juo=r(i6e," (Longformer model)"),i6e.forEach(t),Yuo=i($),Dp=n($,"LI",{});var d6e=s(Dp);use=n(d6e,"STRONG",{});var AYr=s(use);Kuo=r(AYr,"luke"),AYr.forEach(t),Zuo=r(d6e," \u2014 "),WI=n(d6e,"A",{href:!0});var yYr=s(WI);e_o=r(yYr,"LukeModel"),yYr.forEach(t),o_o=r(d6e," (LUKE model)"),d6e.forEach(t),r_o=i($),Gp=n($,"LI",{});var c6e=s(Gp);_se=n(c6e,"STRONG",{});var LYr=s(_se);t_o=r(LYr,"lxmert"),LYr.forEach(t),a_o=r(c6e," \u2014 "),QI=n(c6e,"A",{href:!0});var xYr=s(QI);n_o=r(xYr,"LxmertModel"),xYr.forEach(t),s_o=r(c6e," (LXMERT model)"),c6e.forEach(t),l_o=i($),Op=n($,"LI",{});var f6e=s(Op);bse=n(f6e,"STRONG",{});var $Yr=s(bse);i_o=r($Yr,"m2m_100"),$Yr.forEach(t),d_o=r(f6e," \u2014 "),HI=n(f6e,"A",{href:!0});var kYr=s(HI);c_o=r(kYr,"M2M100Model"),kYr.forEach(t),f_o=r(f6e," (M2M100 model)"),f6e.forEach(t),m_o=i($),Vp=n($,"LI",{});var m6e=s(Vp);vse=n(m6e,"STRONG",{});var SYr=s(vse);g_o=r(SYr,"marian"),SYr.forEach(t),h_o=r(m6e," \u2014 "),UI=n(m6e,"A",{href:!0});var RYr=s(UI);p_o=r(RYr,"MarianModel"),RYr.forEach(t),u_o=r(m6e," (Marian model)"),m6e.forEach(t),__o=i($),Xp=n($,"LI",{});var g6e=s(Xp);Fse=n(g6e,"STRONG",{});var PYr=s(Fse);b_o=r(PYr,"maskformer"),PYr.forEach(t),v_o=r(g6e," \u2014 "),JI=n(g6e,"A",{href:!0});var BYr=s(JI);F_o=r(BYr,"MaskFormerModel"),BYr.forEach(t),T_o=r(g6e," (MaskFormer model)"),g6e.forEach(t),M_o=i($),zp=n($,"LI",{});var h6e=s(zp);Tse=n(h6e,"STRONG",{});var IYr=s(Tse);E_o=r(IYr,"mbart"),IYr.forEach(t),C_o=r(h6e," \u2014 "),YI=n(h6e,"A",{href:!0});var qYr=s(YI);w_o=r(qYr,"MBartModel"),qYr.forEach(t),A_o=r(h6e," (mBART model)"),h6e.forEach(t),y_o=i($),Wp=n($,"LI",{});var p6e=s(Wp);Mse=n(p6e,"STRONG",{});var NYr=s(Mse);L_o=r(NYr,"megatron-bert"),NYr.forEach(t),x_o=r(p6e," \u2014 "),KI=n(p6e,"A",{href:!0});var jYr=s(KI);$_o=r(jYr,"MegatronBertModel"),jYr.forEach(t),k_o=r(p6e," (MegatronBert model)"),p6e.forEach(t),S_o=i($),Qp=n($,"LI",{});var u6e=s(Qp);Ese=n(u6e,"STRONG",{});var DYr=s(Ese);R_o=r(DYr,"mobilebert"),DYr.forEach(t),P_o=r(u6e," \u2014 "),ZI=n(u6e,"A",{href:!0});var GYr=s(ZI);B_o=r(GYr,"MobileBertModel"),GYr.forEach(t),I_o=r(u6e," (MobileBERT model)"),u6e.forEach(t),q_o=i($),Hp=n($,"LI",{});var _6e=s(Hp);Cse=n(_6e,"STRONG",{});var OYr=s(Cse);N_o=r(OYr,"mpnet"),OYr.forEach(t),j_o=r(_6e," \u2014 "),eq=n(_6e,"A",{href:!0});var VYr=s(eq);D_o=r(VYr,"MPNetModel"),VYr.forEach(t),G_o=r(_6e," (MPNet model)"),_6e.forEach(t),O_o=i($),Up=n($,"LI",{});var b6e=s(Up);wse=n(b6e,"STRONG",{});var XYr=s(wse);V_o=r(XYr,"mt5"),XYr.forEach(t),X_o=r(b6e," \u2014 "),oq=n(b6e,"A",{href:!0});var zYr=s(oq);z_o=r(zYr,"MT5Model"),zYr.forEach(t),W_o=r(b6e," (mT5 model)"),b6e.forEach(t),Q_o=i($),Jp=n($,"LI",{});var v6e=s(Jp);Ase=n(v6e,"STRONG",{});var WYr=s(Ase);H_o=r(WYr,"nystromformer"),WYr.forEach(t),U_o=r(v6e," \u2014 "),rq=n(v6e,"A",{href:!0});var QYr=s(rq);J_o=r(QYr,"NystromformerModel"),QYr.forEach(t),Y_o=r(v6e," (Nystromformer model)"),v6e.forEach(t),K_o=i($),Yp=n($,"LI",{});var F6e=s(Yp);yse=n(F6e,"STRONG",{});var HYr=s(yse);Z_o=r(HYr,"openai-gpt"),HYr.forEach(t),e2o=r(F6e," \u2014 "),tq=n(F6e,"A",{href:!0});var UYr=s(tq);o2o=r(UYr,"OpenAIGPTModel"),UYr.forEach(t),r2o=r(F6e," (OpenAI GPT model)"),F6e.forEach(t),t2o=i($),Kp=n($,"LI",{});var T6e=s(Kp);Lse=n(T6e,"STRONG",{});var JYr=s(Lse);a2o=r(JYr,"opt"),JYr.forEach(t),n2o=r(T6e," \u2014 "),aq=n(T6e,"A",{href:!0});var YYr=s(aq);s2o=r(YYr,"OPTModel"),YYr.forEach(t),l2o=r(T6e," (OPT model)"),T6e.forEach(t),i2o=i($),Zp=n($,"LI",{});var M6e=s(Zp);xse=n(M6e,"STRONG",{});var KYr=s(xse);d2o=r(KYr,"pegasus"),KYr.forEach(t),c2o=r(M6e," \u2014 "),nq=n(M6e,"A",{href:!0});var ZYr=s(nq);f2o=r(ZYr,"PegasusModel"),ZYr.forEach(t),m2o=r(M6e," (Pegasus model)"),M6e.forEach(t),g2o=i($),eu=n($,"LI",{});var E6e=s(eu);$se=n(E6e,"STRONG",{});var eKr=s($se);h2o=r(eKr,"perceiver"),eKr.forEach(t),p2o=r(E6e," \u2014 "),sq=n(E6e,"A",{href:!0});var oKr=s(sq);u2o=r(oKr,"PerceiverModel"),oKr.forEach(t),_2o=r(E6e," (Perceiver model)"),E6e.forEach(t),b2o=i($),ou=n($,"LI",{});var C6e=s(ou);kse=n(C6e,"STRONG",{});var rKr=s(kse);v2o=r(rKr,"plbart"),rKr.forEach(t),F2o=r(C6e," \u2014 "),lq=n(C6e,"A",{href:!0});var tKr=s(lq);T2o=r(tKr,"PLBartModel"),tKr.forEach(t),M2o=r(C6e," (PLBart model)"),C6e.forEach(t),E2o=i($),ru=n($,"LI",{});var w6e=s(ru);Sse=n(w6e,"STRONG",{});var aKr=s(Sse);C2o=r(aKr,"poolformer"),aKr.forEach(t),w2o=r(w6e," \u2014 "),iq=n(w6e,"A",{href:!0});var nKr=s(iq);A2o=r(nKr,"PoolFormerModel"),nKr.forEach(t),y2o=r(w6e," (PoolFormer model)"),w6e.forEach(t),L2o=i($),tu=n($,"LI",{});var A6e=s(tu);Rse=n(A6e,"STRONG",{});var sKr=s(Rse);x2o=r(sKr,"prophetnet"),sKr.forEach(t),$2o=r(A6e," \u2014 "),dq=n(A6e,"A",{href:!0});var lKr=s(dq);k2o=r(lKr,"ProphetNetModel"),lKr.forEach(t),S2o=r(A6e," (ProphetNet model)"),A6e.forEach(t),R2o=i($),au=n($,"LI",{});var y6e=s(au);Pse=n(y6e,"STRONG",{});var iKr=s(Pse);P2o=r(iKr,"qdqbert"),iKr.forEach(t),B2o=r(y6e," \u2014 "),cq=n(y6e,"A",{href:!0});var dKr=s(cq);I2o=r(dKr,"QDQBertModel"),dKr.forEach(t),q2o=r(y6e," (QDQBert model)"),y6e.forEach(t),N2o=i($),nu=n($,"LI",{});var L6e=s(nu);Bse=n(L6e,"STRONG",{});var cKr=s(Bse);j2o=r(cKr,"reformer"),cKr.forEach(t),D2o=r(L6e," \u2014 "),fq=n(L6e,"A",{href:!0});var fKr=s(fq);G2o=r(fKr,"ReformerModel"),fKr.forEach(t),O2o=r(L6e," (Reformer model)"),L6e.forEach(t),V2o=i($),su=n($,"LI",{});var x6e=s(su);Ise=n(x6e,"STRONG",{});var mKr=s(Ise);X2o=r(mKr,"regnet"),mKr.forEach(t),z2o=r(x6e," \u2014 "),mq=n(x6e,"A",{href:!0});var gKr=s(mq);W2o=r(gKr,"RegNetModel"),gKr.forEach(t),Q2o=r(x6e," (RegNet model)"),x6e.forEach(t),H2o=i($),lu=n($,"LI",{});var $6e=s(lu);qse=n($6e,"STRONG",{});var hKr=s(qse);U2o=r(hKr,"rembert"),hKr.forEach(t),J2o=r($6e," \u2014 "),gq=n($6e,"A",{href:!0});var pKr=s(gq);Y2o=r(pKr,"RemBertModel"),pKr.forEach(t),K2o=r($6e," (RemBERT model)"),$6e.forEach(t),Z2o=i($),iu=n($,"LI",{});var k6e=s(iu);Nse=n(k6e,"STRONG",{});var uKr=s(Nse);e1o=r(uKr,"resnet"),uKr.forEach(t),o1o=r(k6e," \u2014 "),hq=n(k6e,"A",{href:!0});var _Kr=s(hq);r1o=r(_Kr,"ResNetModel"),_Kr.forEach(t),t1o=r(k6e," (ResNet model)"),k6e.forEach(t),a1o=i($),du=n($,"LI",{});var S6e=s(du);jse=n(S6e,"STRONG",{});var bKr=s(jse);n1o=r(bKr,"retribert"),bKr.forEach(t),s1o=r(S6e," \u2014 "),pq=n(S6e,"A",{href:!0});var vKr=s(pq);l1o=r(vKr,"RetriBertModel"),vKr.forEach(t),i1o=r(S6e," (RetriBERT model)"),S6e.forEach(t),d1o=i($),cu=n($,"LI",{});var R6e=s(cu);Dse=n(R6e,"STRONG",{});var FKr=s(Dse);c1o=r(FKr,"roberta"),FKr.forEach(t),f1o=r(R6e," \u2014 "),uq=n(R6e,"A",{href:!0});var TKr=s(uq);m1o=r(TKr,"RobertaModel"),TKr.forEach(t),g1o=r(R6e," (RoBERTa model)"),R6e.forEach(t),h1o=i($),fu=n($,"LI",{});var P6e=s(fu);Gse=n(P6e,"STRONG",{});var MKr=s(Gse);p1o=r(MKr,"roformer"),MKr.forEach(t),u1o=r(P6e," \u2014 "),_q=n(P6e,"A",{href:!0});var EKr=s(_q);_1o=r(EKr,"RoFormerModel"),EKr.forEach(t),b1o=r(P6e," (RoFormer model)"),P6e.forEach(t),v1o=i($),mu=n($,"LI",{});var B6e=s(mu);Ose=n(B6e,"STRONG",{});var CKr=s(Ose);F1o=r(CKr,"segformer"),CKr.forEach(t),T1o=r(B6e," \u2014 "),bq=n(B6e,"A",{href:!0});var wKr=s(bq);M1o=r(wKr,"SegformerModel"),wKr.forEach(t),E1o=r(B6e," (SegFormer model)"),B6e.forEach(t),C1o=i($),gu=n($,"LI",{});var I6e=s(gu);Vse=n(I6e,"STRONG",{});var AKr=s(Vse);w1o=r(AKr,"sew"),AKr.forEach(t),A1o=r(I6e," \u2014 "),vq=n(I6e,"A",{href:!0});var yKr=s(vq);y1o=r(yKr,"SEWModel"),yKr.forEach(t),L1o=r(I6e," (SEW model)"),I6e.forEach(t),x1o=i($),hu=n($,"LI",{});var q6e=s(hu);Xse=n(q6e,"STRONG",{});var LKr=s(Xse);$1o=r(LKr,"sew-d"),LKr.forEach(t),k1o=r(q6e," \u2014 "),Fq=n(q6e,"A",{href:!0});var xKr=s(Fq);S1o=r(xKr,"SEWDModel"),xKr.forEach(t),R1o=r(q6e," (SEW-D model)"),q6e.forEach(t),P1o=i($),pu=n($,"LI",{});var N6e=s(pu);zse=n(N6e,"STRONG",{});var $Kr=s(zse);B1o=r($Kr,"speech_to_text"),$Kr.forEach(t),I1o=r(N6e," \u2014 "),Tq=n(N6e,"A",{href:!0});var kKr=s(Tq);q1o=r(kKr,"Speech2TextModel"),kKr.forEach(t),N1o=r(N6e," (Speech2Text model)"),N6e.forEach(t),j1o=i($),uu=n($,"LI",{});var j6e=s(uu);Wse=n(j6e,"STRONG",{});var SKr=s(Wse);D1o=r(SKr,"splinter"),SKr.forEach(t),G1o=r(j6e," \u2014 "),Mq=n(j6e,"A",{href:!0});var RKr=s(Mq);O1o=r(RKr,"SplinterModel"),RKr.forEach(t),V1o=r(j6e," (Splinter model)"),j6e.forEach(t),X1o=i($),_u=n($,"LI",{});var D6e=s(_u);Qse=n(D6e,"STRONG",{});var PKr=s(Qse);z1o=r(PKr,"squeezebert"),PKr.forEach(t),W1o=r(D6e," \u2014 "),Eq=n(D6e,"A",{href:!0});var BKr=s(Eq);Q1o=r(BKr,"SqueezeBertModel"),BKr.forEach(t),H1o=r(D6e," (SqueezeBERT model)"),D6e.forEach(t),U1o=i($),bu=n($,"LI",{});var G6e=s(bu);Hse=n(G6e,"STRONG",{});var IKr=s(Hse);J1o=r(IKr,"swin"),IKr.forEach(t),Y1o=r(G6e," \u2014 "),Cq=n(G6e,"A",{href:!0});var qKr=s(Cq);K1o=r(qKr,"SwinModel"),qKr.forEach(t),Z1o=r(G6e," (Swin model)"),G6e.forEach(t),ebo=i($),vu=n($,"LI",{});var O6e=s(vu);Use=n(O6e,"STRONG",{});var NKr=s(Use);obo=r(NKr,"t5"),NKr.forEach(t),rbo=r(O6e," \u2014 "),wq=n(O6e,"A",{href:!0});var jKr=s(wq);tbo=r(jKr,"T5Model"),jKr.forEach(t),abo=r(O6e," (T5 model)"),O6e.forEach(t),nbo=i($),Fu=n($,"LI",{});var V6e=s(Fu);Jse=n(V6e,"STRONG",{});var DKr=s(Jse);sbo=r(DKr,"tapas"),DKr.forEach(t),lbo=r(V6e," \u2014 "),Aq=n(V6e,"A",{href:!0});var GKr=s(Aq);ibo=r(GKr,"TapasModel"),GKr.forEach(t),dbo=r(V6e," (TAPAS model)"),V6e.forEach(t),cbo=i($),Tu=n($,"LI",{});var X6e=s(Tu);Yse=n(X6e,"STRONG",{});var OKr=s(Yse);fbo=r(OKr,"transfo-xl"),OKr.forEach(t),mbo=r(X6e," \u2014 "),yq=n(X6e,"A",{href:!0});var VKr=s(yq);gbo=r(VKr,"TransfoXLModel"),VKr.forEach(t),hbo=r(X6e," (Transformer-XL model)"),X6e.forEach(t),pbo=i($),Mu=n($,"LI",{});var z6e=s(Mu);Kse=n(z6e,"STRONG",{});var XKr=s(Kse);ubo=r(XKr,"unispeech"),XKr.forEach(t),_bo=r(z6e," \u2014 "),Lq=n(z6e,"A",{href:!0});var zKr=s(Lq);bbo=r(zKr,"UniSpeechModel"),zKr.forEach(t),vbo=r(z6e," (UniSpeech model)"),z6e.forEach(t),Fbo=i($),Eu=n($,"LI",{});var W6e=s(Eu);Zse=n(W6e,"STRONG",{});var WKr=s(Zse);Tbo=r(WKr,"unispeech-sat"),WKr.forEach(t),Mbo=r(W6e," \u2014 "),xq=n(W6e,"A",{href:!0});var QKr=s(xq);Ebo=r(QKr,"UniSpeechSatModel"),QKr.forEach(t),Cbo=r(W6e," (UniSpeechSat model)"),W6e.forEach(t),wbo=i($),Cu=n($,"LI",{});var Q6e=s(Cu);ele=n(Q6e,"STRONG",{});var HKr=s(ele);Abo=r(HKr,"van"),HKr.forEach(t),ybo=r(Q6e," \u2014 "),$q=n(Q6e,"A",{href:!0});var UKr=s($q);Lbo=r(UKr,"VanModel"),UKr.forEach(t),xbo=r(Q6e," (VAN model)"),Q6e.forEach(t),$bo=i($),wu=n($,"LI",{});var H6e=s(wu);ole=n(H6e,"STRONG",{});var JKr=s(ole);kbo=r(JKr,"vilt"),JKr.forEach(t),Sbo=r(H6e," \u2014 "),kq=n(H6e,"A",{href:!0});var YKr=s(kq);Rbo=r(YKr,"ViltModel"),YKr.forEach(t),Pbo=r(H6e," (ViLT model)"),H6e.forEach(t),Bbo=i($),Au=n($,"LI",{});var U6e=s(Au);rle=n(U6e,"STRONG",{});var KKr=s(rle);Ibo=r(KKr,"vision-text-dual-encoder"),KKr.forEach(t),qbo=r(U6e," \u2014 "),Sq=n(U6e,"A",{href:!0});var ZKr=s(Sq);Nbo=r(ZKr,"VisionTextDualEncoderModel"),ZKr.forEach(t),jbo=r(U6e," (VisionTextDualEncoder model)"),U6e.forEach(t),Dbo=i($),yu=n($,"LI",{});var J6e=s(yu);tle=n(J6e,"STRONG",{});var eZr=s(tle);Gbo=r(eZr,"visual_bert"),eZr.forEach(t),Obo=r(J6e," \u2014 "),Rq=n(J6e,"A",{href:!0});var oZr=s(Rq);Vbo=r(oZr,"VisualBertModel"),oZr.forEach(t),Xbo=r(J6e," (VisualBert model)"),J6e.forEach(t),zbo=i($),Lu=n($,"LI",{});var Y6e=s(Lu);ale=n(Y6e,"STRONG",{});var rZr=s(ale);Wbo=r(rZr,"vit"),rZr.forEach(t),Qbo=r(Y6e," \u2014 "),Pq=n(Y6e,"A",{href:!0});var tZr=s(Pq);Hbo=r(tZr,"ViTModel"),tZr.forEach(t),Ubo=r(Y6e," (ViT model)"),Y6e.forEach(t),Jbo=i($),xu=n($,"LI",{});var K6e=s(xu);nle=n(K6e,"STRONG",{});var aZr=s(nle);Ybo=r(aZr,"vit_mae"),aZr.forEach(t),Kbo=r(K6e," \u2014 "),Bq=n(K6e,"A",{href:!0});var nZr=s(Bq);Zbo=r(nZr,"ViTMAEModel"),nZr.forEach(t),e4o=r(K6e," (ViTMAE model)"),K6e.forEach(t),o4o=i($),$u=n($,"LI",{});var Z6e=s($u);sle=n(Z6e,"STRONG",{});var sZr=s(sle);r4o=r(sZr,"wav2vec2"),sZr.forEach(t),t4o=r(Z6e," \u2014 "),Iq=n(Z6e,"A",{href:!0});var lZr=s(Iq);a4o=r(lZr,"Wav2Vec2Model"),lZr.forEach(t),n4o=r(Z6e," (Wav2Vec2 model)"),Z6e.forEach(t),s4o=i($),ku=n($,"LI",{});var e0e=s(ku);lle=n(e0e,"STRONG",{});var iZr=s(lle);l4o=r(iZr,"wav2vec2-conformer"),iZr.forEach(t),i4o=r(e0e," \u2014 "),qq=n(e0e,"A",{href:!0});var dZr=s(qq);d4o=r(dZr,"Wav2Vec2ConformerModel"),dZr.forEach(t),c4o=r(e0e," (Wav2Vec2-Conformer model)"),e0e.forEach(t),f4o=i($),Su=n($,"LI",{});var o0e=s(Su);ile=n(o0e,"STRONG",{});var cZr=s(ile);m4o=r(cZr,"wavlm"),cZr.forEach(t),g4o=r(o0e," \u2014 "),Nq=n(o0e,"A",{href:!0});var fZr=s(Nq);h4o=r(fZr,"WavLMModel"),fZr.forEach(t),p4o=r(o0e," (WavLM model)"),o0e.forEach(t),u4o=i($),Ru=n($,"LI",{});var r0e=s(Ru);dle=n(r0e,"STRONG",{});var mZr=s(dle);_4o=r(mZr,"xglm"),mZr.forEach(t),b4o=r(r0e," \u2014 "),jq=n(r0e,"A",{href:!0});var gZr=s(jq);v4o=r(gZr,"XGLMModel"),gZr.forEach(t),F4o=r(r0e," (XGLM model)"),r0e.forEach(t),T4o=i($),Pu=n($,"LI",{});var t0e=s(Pu);cle=n(t0e,"STRONG",{});var hZr=s(cle);M4o=r(hZr,"xlm"),hZr.forEach(t),E4o=r(t0e," \u2014 "),Dq=n(t0e,"A",{href:!0});var pZr=s(Dq);C4o=r(pZr,"XLMModel"),pZr.forEach(t),w4o=r(t0e," (XLM model)"),t0e.forEach(t),A4o=i($),Bu=n($,"LI",{});var a0e=s(Bu);fle=n(a0e,"STRONG",{});var uZr=s(fle);y4o=r(uZr,"xlm-prophetnet"),uZr.forEach(t),L4o=r(a0e," \u2014 "),Gq=n(a0e,"A",{href:!0});var _Zr=s(Gq);x4o=r(_Zr,"XLMProphetNetModel"),_Zr.forEach(t),$4o=r(a0e," (XLMProphetNet model)"),a0e.forEach(t),k4o=i($),Iu=n($,"LI",{});var n0e=s(Iu);mle=n(n0e,"STRONG",{});var bZr=s(mle);S4o=r(bZr,"xlm-roberta"),bZr.forEach(t),R4o=r(n0e," \u2014 "),Oq=n(n0e,"A",{href:!0});var vZr=s(Oq);P4o=r(vZr,"XLMRobertaModel"),vZr.forEach(t),B4o=r(n0e," (XLM-RoBERTa model)"),n0e.forEach(t),I4o=i($),qu=n($,"LI",{});var s0e=s(qu);gle=n(s0e,"STRONG",{});var FZr=s(gle);q4o=r(FZr,"xlm-roberta-xl"),FZr.forEach(t),N4o=r(s0e," \u2014 "),Vq=n(s0e,"A",{href:!0});var TZr=s(Vq);j4o=r(TZr,"XLMRobertaXLModel"),TZr.forEach(t),D4o=r(s0e," (XLM-RoBERTa-XL model)"),s0e.forEach(t),G4o=i($),Nu=n($,"LI",{});var l0e=s(Nu);hle=n(l0e,"STRONG",{});var MZr=s(hle);O4o=r(MZr,"xlnet"),MZr.forEach(t),V4o=r(l0e," \u2014 "),Xq=n(l0e,"A",{href:!0});var EZr=s(Xq);X4o=r(EZr,"XLNetModel"),EZr.forEach(t),z4o=r(l0e," (XLNet model)"),l0e.forEach(t),W4o=i($),ju=n($,"LI",{});var i0e=s(ju);ple=n(i0e,"STRONG",{});var CZr=s(ple);Q4o=r(CZr,"yolos"),CZr.forEach(t),H4o=r(i0e," \u2014 "),zq=n(i0e,"A",{href:!0});var wZr=s(zq);U4o=r(wZr,"YolosModel"),wZr.forEach(t),J4o=r(i0e," (YOLOS model)"),i0e.forEach(t),Y4o=i($),Du=n($,"LI",{});var d0e=s(Du);ule=n(d0e,"STRONG",{});var AZr=s(ule);K4o=r(AZr,"yoso"),AZr.forEach(t),Z4o=r(d0e," \u2014 "),Wq=n(d0e,"A",{href:!0});var yZr=s(Wq);e5o=r(yZr,"YosoModel"),yZr.forEach(t),o5o=r(d0e," (YOSO model)"),d0e.forEach(t),$.forEach(t),r5o=i(oa),Gu=n(oa,"P",{});var c0e=s(Gu);t5o=r(c0e,"The model is set in evaluation mode by default using "),_le=n(c0e,"CODE",{});var LZr=s(_le);a5o=r(LZr,"model.eval()"),LZr.forEach(t),n5o=r(c0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=n(c0e,"CODE",{});var xZr=s(ble);s5o=r(xZr,"model.train()"),xZr.forEach(t),c0e.forEach(t),l5o=i(oa),T(Ou.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),GIe=i(f),Li=n(f,"H2",{class:!0});var zNe=s(Li);Vu=n(zNe,"A",{id:!0,class:!0,href:!0});var $Zr=s(Vu);vle=n($Zr,"SPAN",{});var kZr=s(vle);T(N0.$$.fragment,kZr),kZr.forEach(t),$Zr.forEach(t),i5o=i(zNe),Fle=n(zNe,"SPAN",{});var SZr=s(Fle);d5o=r(SZr,"AutoModelForPreTraining"),SZr.forEach(t),zNe.forEach(t),OIe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(j0.$$.fragment,Os),c5o=i(Os),xi=n(Os,"P",{});var kK=s(xi);f5o=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qq=n(kK,"A",{href:!0});var RZr=s(Qq);m5o=r(RZr,"from_pretrained()"),RZr.forEach(t),g5o=r(kK," class method or the "),Hq=n(kK,"A",{href:!0});var PZr=s(Hq);h5o=r(PZr,"from_config()"),PZr.forEach(t),p5o=r(kK,` class
method.`),kK.forEach(t),u5o=i(Os),D0=n(Os,"P",{});var WNe=s(D0);_5o=r(WNe,"This class cannot be instantiated directly using "),Tle=n(WNe,"CODE",{});var BZr=s(Tle);b5o=r(BZr,"__init__()"),BZr.forEach(t),v5o=r(WNe," (throws an error)."),WNe.forEach(t),F5o=i(Os),at=n(Os,"DIV",{class:!0});var gA=s(at);T(G0.$$.fragment,gA),T5o=i(gA),Mle=n(gA,"P",{});var IZr=s(Mle);M5o=r(IZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),IZr.forEach(t),E5o=i(gA),$i=n(gA,"P",{});var SK=s($i);C5o=r(SK,`Note:
Loading a model from its configuration file does `),Ele=n(SK,"STRONG",{});var qZr=s(Ele);w5o=r(qZr,"not"),qZr.forEach(t),A5o=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=n(SK,"A",{href:!0});var NZr=s(Uq);y5o=r(NZr,"from_pretrained()"),NZr.forEach(t),L5o=r(SK," to load the model weights."),SK.forEach(t),x5o=i(gA),T(Xu.$$.fragment,gA),gA.forEach(t),$5o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(O0.$$.fragment,ra),k5o=i(ra),Cle=n(ra,"P",{});var jZr=s(Cle);S5o=r(jZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jZr.forEach(t),R5o=i(ra),xa=n(ra,"P",{});var hA=s(xa);P5o=r(hA,"The model class to instantiate is selected based on the "),wle=n(hA,"CODE",{});var DZr=s(wle);B5o=r(DZr,"model_type"),DZr.forEach(t),I5o=r(hA,` property of the config object (either
passed as an argument or loaded from `),Ale=n(hA,"CODE",{});var GZr=s(Ale);q5o=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),N5o=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=n(hA,"CODE",{});var OZr=s(yle);j5o=r(OZr,"pretrained_model_name_or_path"),OZr.forEach(t),D5o=r(hA,":"),hA.forEach(t),G5o=i(ra),G=n(ra,"UL",{});var O=s(G);zu=n(O,"LI",{});var f0e=s(zu);Lle=n(f0e,"STRONG",{});var VZr=s(Lle);O5o=r(VZr,"albert"),VZr.forEach(t),V5o=r(f0e," \u2014 "),Jq=n(f0e,"A",{href:!0});var XZr=s(Jq);X5o=r(XZr,"AlbertForPreTraining"),XZr.forEach(t),z5o=r(f0e," (ALBERT model)"),f0e.forEach(t),W5o=i(O),Wu=n(O,"LI",{});var m0e=s(Wu);xle=n(m0e,"STRONG",{});var zZr=s(xle);Q5o=r(zZr,"bart"),zZr.forEach(t),H5o=r(m0e," \u2014 "),Yq=n(m0e,"A",{href:!0});var WZr=s(Yq);U5o=r(WZr,"BartForConditionalGeneration"),WZr.forEach(t),J5o=r(m0e," (BART model)"),m0e.forEach(t),Y5o=i(O),Qu=n(O,"LI",{});var g0e=s(Qu);$le=n(g0e,"STRONG",{});var QZr=s($le);K5o=r(QZr,"bert"),QZr.forEach(t),Z5o=r(g0e," \u2014 "),Kq=n(g0e,"A",{href:!0});var HZr=s(Kq);evo=r(HZr,"BertForPreTraining"),HZr.forEach(t),ovo=r(g0e," (BERT model)"),g0e.forEach(t),rvo=i(O),Hu=n(O,"LI",{});var h0e=s(Hu);kle=n(h0e,"STRONG",{});var UZr=s(kle);tvo=r(UZr,"big_bird"),UZr.forEach(t),avo=r(h0e," \u2014 "),Zq=n(h0e,"A",{href:!0});var JZr=s(Zq);nvo=r(JZr,"BigBirdForPreTraining"),JZr.forEach(t),svo=r(h0e," (BigBird model)"),h0e.forEach(t),lvo=i(O),Uu=n(O,"LI",{});var p0e=s(Uu);Sle=n(p0e,"STRONG",{});var YZr=s(Sle);ivo=r(YZr,"camembert"),YZr.forEach(t),dvo=r(p0e," \u2014 "),eN=n(p0e,"A",{href:!0});var KZr=s(eN);cvo=r(KZr,"CamembertForMaskedLM"),KZr.forEach(t),fvo=r(p0e," (CamemBERT model)"),p0e.forEach(t),mvo=i(O),Ju=n(O,"LI",{});var u0e=s(Ju);Rle=n(u0e,"STRONG",{});var ZZr=s(Rle);gvo=r(ZZr,"ctrl"),ZZr.forEach(t),hvo=r(u0e," \u2014 "),oN=n(u0e,"A",{href:!0});var eet=s(oN);pvo=r(eet,"CTRLLMHeadModel"),eet.forEach(t),uvo=r(u0e," (CTRL model)"),u0e.forEach(t),_vo=i(O),Yu=n(O,"LI",{});var _0e=s(Yu);Ple=n(_0e,"STRONG",{});var oet=s(Ple);bvo=r(oet,"data2vec-text"),oet.forEach(t),vvo=r(_0e," \u2014 "),rN=n(_0e,"A",{href:!0});var ret=s(rN);Fvo=r(ret,"Data2VecTextForMaskedLM"),ret.forEach(t),Tvo=r(_0e," (Data2VecText model)"),_0e.forEach(t),Mvo=i(O),Ku=n(O,"LI",{});var b0e=s(Ku);Ble=n(b0e,"STRONG",{});var tet=s(Ble);Evo=r(tet,"deberta"),tet.forEach(t),Cvo=r(b0e," \u2014 "),tN=n(b0e,"A",{href:!0});var aet=s(tN);wvo=r(aet,"DebertaForMaskedLM"),aet.forEach(t),Avo=r(b0e," (DeBERTa model)"),b0e.forEach(t),yvo=i(O),Zu=n(O,"LI",{});var v0e=s(Zu);Ile=n(v0e,"STRONG",{});var net=s(Ile);Lvo=r(net,"deberta-v2"),net.forEach(t),xvo=r(v0e," \u2014 "),aN=n(v0e,"A",{href:!0});var set=s(aN);$vo=r(set,"DebertaV2ForMaskedLM"),set.forEach(t),kvo=r(v0e," (DeBERTa-v2 model)"),v0e.forEach(t),Svo=i(O),e_=n(O,"LI",{});var F0e=s(e_);qle=n(F0e,"STRONG",{});var iet=s(qle);Rvo=r(iet,"distilbert"),iet.forEach(t),Pvo=r(F0e," \u2014 "),nN=n(F0e,"A",{href:!0});var det=s(nN);Bvo=r(det,"DistilBertForMaskedLM"),det.forEach(t),Ivo=r(F0e," (DistilBERT model)"),F0e.forEach(t),qvo=i(O),o_=n(O,"LI",{});var T0e=s(o_);Nle=n(T0e,"STRONG",{});var cet=s(Nle);Nvo=r(cet,"electra"),cet.forEach(t),jvo=r(T0e," \u2014 "),sN=n(T0e,"A",{href:!0});var fet=s(sN);Dvo=r(fet,"ElectraForPreTraining"),fet.forEach(t),Gvo=r(T0e," (ELECTRA model)"),T0e.forEach(t),Ovo=i(O),r_=n(O,"LI",{});var M0e=s(r_);jle=n(M0e,"STRONG",{});var met=s(jle);Vvo=r(met,"flaubert"),met.forEach(t),Xvo=r(M0e," \u2014 "),lN=n(M0e,"A",{href:!0});var get=s(lN);zvo=r(get,"FlaubertWithLMHeadModel"),get.forEach(t),Wvo=r(M0e," (FlauBERT model)"),M0e.forEach(t),Qvo=i(O),t_=n(O,"LI",{});var E0e=s(t_);Dle=n(E0e,"STRONG",{});var het=s(Dle);Hvo=r(het,"flava"),het.forEach(t),Uvo=r(E0e," \u2014 "),iN=n(E0e,"A",{href:!0});var pet=s(iN);Jvo=r(pet,"FlavaForPreTraining"),pet.forEach(t),Yvo=r(E0e," (Flava model)"),E0e.forEach(t),Kvo=i(O),a_=n(O,"LI",{});var C0e=s(a_);Gle=n(C0e,"STRONG",{});var uet=s(Gle);Zvo=r(uet,"fnet"),uet.forEach(t),eFo=r(C0e," \u2014 "),dN=n(C0e,"A",{href:!0});var _et=s(dN);oFo=r(_et,"FNetForPreTraining"),_et.forEach(t),rFo=r(C0e," (FNet model)"),C0e.forEach(t),tFo=i(O),n_=n(O,"LI",{});var w0e=s(n_);Ole=n(w0e,"STRONG",{});var bet=s(Ole);aFo=r(bet,"fsmt"),bet.forEach(t),nFo=r(w0e," \u2014 "),cN=n(w0e,"A",{href:!0});var vet=s(cN);sFo=r(vet,"FSMTForConditionalGeneration"),vet.forEach(t),lFo=r(w0e," (FairSeq Machine-Translation model)"),w0e.forEach(t),iFo=i(O),s_=n(O,"LI",{});var A0e=s(s_);Vle=n(A0e,"STRONG",{});var Fet=s(Vle);dFo=r(Fet,"funnel"),Fet.forEach(t),cFo=r(A0e," \u2014 "),fN=n(A0e,"A",{href:!0});var Tet=s(fN);fFo=r(Tet,"FunnelForPreTraining"),Tet.forEach(t),mFo=r(A0e," (Funnel Transformer model)"),A0e.forEach(t),gFo=i(O),l_=n(O,"LI",{});var y0e=s(l_);Xle=n(y0e,"STRONG",{});var Met=s(Xle);hFo=r(Met,"gpt2"),Met.forEach(t),pFo=r(y0e," \u2014 "),mN=n(y0e,"A",{href:!0});var Eet=s(mN);uFo=r(Eet,"GPT2LMHeadModel"),Eet.forEach(t),_Fo=r(y0e," (OpenAI GPT-2 model)"),y0e.forEach(t),bFo=i(O),i_=n(O,"LI",{});var L0e=s(i_);zle=n(L0e,"STRONG",{});var Cet=s(zle);vFo=r(Cet,"ibert"),Cet.forEach(t),FFo=r(L0e," \u2014 "),gN=n(L0e,"A",{href:!0});var wet=s(gN);TFo=r(wet,"IBertForMaskedLM"),wet.forEach(t),MFo=r(L0e," (I-BERT model)"),L0e.forEach(t),EFo=i(O),d_=n(O,"LI",{});var x0e=s(d_);Wle=n(x0e,"STRONG",{});var Aet=s(Wle);CFo=r(Aet,"layoutlm"),Aet.forEach(t),wFo=r(x0e," \u2014 "),hN=n(x0e,"A",{href:!0});var yet=s(hN);AFo=r(yet,"LayoutLMForMaskedLM"),yet.forEach(t),yFo=r(x0e," (LayoutLM model)"),x0e.forEach(t),LFo=i(O),c_=n(O,"LI",{});var $0e=s(c_);Qle=n($0e,"STRONG",{});var Let=s(Qle);xFo=r(Let,"longformer"),Let.forEach(t),$Fo=r($0e," \u2014 "),pN=n($0e,"A",{href:!0});var xet=s(pN);kFo=r(xet,"LongformerForMaskedLM"),xet.forEach(t),SFo=r($0e," (Longformer model)"),$0e.forEach(t),RFo=i(O),f_=n(O,"LI",{});var k0e=s(f_);Hle=n(k0e,"STRONG",{});var $et=s(Hle);PFo=r($et,"lxmert"),$et.forEach(t),BFo=r(k0e," \u2014 "),uN=n(k0e,"A",{href:!0});var ket=s(uN);IFo=r(ket,"LxmertForPreTraining"),ket.forEach(t),qFo=r(k0e," (LXMERT model)"),k0e.forEach(t),NFo=i(O),m_=n(O,"LI",{});var S0e=s(m_);Ule=n(S0e,"STRONG",{});var Set=s(Ule);jFo=r(Set,"megatron-bert"),Set.forEach(t),DFo=r(S0e," \u2014 "),_N=n(S0e,"A",{href:!0});var Ret=s(_N);GFo=r(Ret,"MegatronBertForPreTraining"),Ret.forEach(t),OFo=r(S0e," (MegatronBert model)"),S0e.forEach(t),VFo=i(O),g_=n(O,"LI",{});var R0e=s(g_);Jle=n(R0e,"STRONG",{});var Pet=s(Jle);XFo=r(Pet,"mobilebert"),Pet.forEach(t),zFo=r(R0e," \u2014 "),bN=n(R0e,"A",{href:!0});var Bet=s(bN);WFo=r(Bet,"MobileBertForPreTraining"),Bet.forEach(t),QFo=r(R0e," (MobileBERT model)"),R0e.forEach(t),HFo=i(O),h_=n(O,"LI",{});var P0e=s(h_);Yle=n(P0e,"STRONG",{});var Iet=s(Yle);UFo=r(Iet,"mpnet"),Iet.forEach(t),JFo=r(P0e," \u2014 "),vN=n(P0e,"A",{href:!0});var qet=s(vN);YFo=r(qet,"MPNetForMaskedLM"),qet.forEach(t),KFo=r(P0e," (MPNet model)"),P0e.forEach(t),ZFo=i(O),p_=n(O,"LI",{});var B0e=s(p_);Kle=n(B0e,"STRONG",{});var Net=s(Kle);eTo=r(Net,"openai-gpt"),Net.forEach(t),oTo=r(B0e," \u2014 "),FN=n(B0e,"A",{href:!0});var jet=s(FN);rTo=r(jet,"OpenAIGPTLMHeadModel"),jet.forEach(t),tTo=r(B0e," (OpenAI GPT model)"),B0e.forEach(t),aTo=i(O),u_=n(O,"LI",{});var I0e=s(u_);Zle=n(I0e,"STRONG",{});var Det=s(Zle);nTo=r(Det,"retribert"),Det.forEach(t),sTo=r(I0e," \u2014 "),TN=n(I0e,"A",{href:!0});var Get=s(TN);lTo=r(Get,"RetriBertModel"),Get.forEach(t),iTo=r(I0e," (RetriBERT model)"),I0e.forEach(t),dTo=i(O),__=n(O,"LI",{});var q0e=s(__);eie=n(q0e,"STRONG",{});var Oet=s(eie);cTo=r(Oet,"roberta"),Oet.forEach(t),fTo=r(q0e," \u2014 "),MN=n(q0e,"A",{href:!0});var Vet=s(MN);mTo=r(Vet,"RobertaForMaskedLM"),Vet.forEach(t),gTo=r(q0e," (RoBERTa model)"),q0e.forEach(t),hTo=i(O),b_=n(O,"LI",{});var N0e=s(b_);oie=n(N0e,"STRONG",{});var Xet=s(oie);pTo=r(Xet,"squeezebert"),Xet.forEach(t),uTo=r(N0e," \u2014 "),EN=n(N0e,"A",{href:!0});var zet=s(EN);_To=r(zet,"SqueezeBertForMaskedLM"),zet.forEach(t),bTo=r(N0e," (SqueezeBERT model)"),N0e.forEach(t),vTo=i(O),v_=n(O,"LI",{});var j0e=s(v_);rie=n(j0e,"STRONG",{});var Wet=s(rie);FTo=r(Wet,"t5"),Wet.forEach(t),TTo=r(j0e," \u2014 "),CN=n(j0e,"A",{href:!0});var Qet=s(CN);MTo=r(Qet,"T5ForConditionalGeneration"),Qet.forEach(t),ETo=r(j0e," (T5 model)"),j0e.forEach(t),CTo=i(O),F_=n(O,"LI",{});var D0e=s(F_);tie=n(D0e,"STRONG",{});var Het=s(tie);wTo=r(Het,"tapas"),Het.forEach(t),ATo=r(D0e," \u2014 "),wN=n(D0e,"A",{href:!0});var Uet=s(wN);yTo=r(Uet,"TapasForMaskedLM"),Uet.forEach(t),LTo=r(D0e," (TAPAS model)"),D0e.forEach(t),xTo=i(O),T_=n(O,"LI",{});var G0e=s(T_);aie=n(G0e,"STRONG",{});var Jet=s(aie);$To=r(Jet,"transfo-xl"),Jet.forEach(t),kTo=r(G0e," \u2014 "),AN=n(G0e,"A",{href:!0});var Yet=s(AN);STo=r(Yet,"TransfoXLLMHeadModel"),Yet.forEach(t),RTo=r(G0e," (Transformer-XL model)"),G0e.forEach(t),PTo=i(O),M_=n(O,"LI",{});var O0e=s(M_);nie=n(O0e,"STRONG",{});var Ket=s(nie);BTo=r(Ket,"unispeech"),Ket.forEach(t),ITo=r(O0e," \u2014 "),yN=n(O0e,"A",{href:!0});var Zet=s(yN);qTo=r(Zet,"UniSpeechForPreTraining"),Zet.forEach(t),NTo=r(O0e," (UniSpeech model)"),O0e.forEach(t),jTo=i(O),E_=n(O,"LI",{});var V0e=s(E_);sie=n(V0e,"STRONG",{});var eot=s(sie);DTo=r(eot,"unispeech-sat"),eot.forEach(t),GTo=r(V0e," \u2014 "),LN=n(V0e,"A",{href:!0});var oot=s(LN);OTo=r(oot,"UniSpeechSatForPreTraining"),oot.forEach(t),VTo=r(V0e," (UniSpeechSat model)"),V0e.forEach(t),XTo=i(O),C_=n(O,"LI",{});var X0e=s(C_);lie=n(X0e,"STRONG",{});var rot=s(lie);zTo=r(rot,"visual_bert"),rot.forEach(t),WTo=r(X0e," \u2014 "),xN=n(X0e,"A",{href:!0});var tot=s(xN);QTo=r(tot,"VisualBertForPreTraining"),tot.forEach(t),HTo=r(X0e," (VisualBert model)"),X0e.forEach(t),UTo=i(O),w_=n(O,"LI",{});var z0e=s(w_);iie=n(z0e,"STRONG",{});var aot=s(iie);JTo=r(aot,"vit_mae"),aot.forEach(t),YTo=r(z0e," \u2014 "),$N=n(z0e,"A",{href:!0});var not=s($N);KTo=r(not,"ViTMAEForPreTraining"),not.forEach(t),ZTo=r(z0e," (ViTMAE model)"),z0e.forEach(t),e7o=i(O),A_=n(O,"LI",{});var W0e=s(A_);die=n(W0e,"STRONG",{});var sot=s(die);o7o=r(sot,"wav2vec2"),sot.forEach(t),r7o=r(W0e," \u2014 "),kN=n(W0e,"A",{href:!0});var lot=s(kN);t7o=r(lot,"Wav2Vec2ForPreTraining"),lot.forEach(t),a7o=r(W0e," (Wav2Vec2 model)"),W0e.forEach(t),n7o=i(O),y_=n(O,"LI",{});var Q0e=s(y_);cie=n(Q0e,"STRONG",{});var iot=s(cie);s7o=r(iot,"wav2vec2-conformer"),iot.forEach(t),l7o=r(Q0e," \u2014 "),SN=n(Q0e,"A",{href:!0});var dot=s(SN);i7o=r(dot,"Wav2Vec2ConformerForPreTraining"),dot.forEach(t),d7o=r(Q0e," (Wav2Vec2-Conformer model)"),Q0e.forEach(t),c7o=i(O),L_=n(O,"LI",{});var H0e=s(L_);fie=n(H0e,"STRONG",{});var cot=s(fie);f7o=r(cot,"xlm"),cot.forEach(t),m7o=r(H0e," \u2014 "),RN=n(H0e,"A",{href:!0});var fot=s(RN);g7o=r(fot,"XLMWithLMHeadModel"),fot.forEach(t),h7o=r(H0e," (XLM model)"),H0e.forEach(t),p7o=i(O),x_=n(O,"LI",{});var U0e=s(x_);mie=n(U0e,"STRONG",{});var mot=s(mie);u7o=r(mot,"xlm-roberta"),mot.forEach(t),_7o=r(U0e," \u2014 "),PN=n(U0e,"A",{href:!0});var got=s(PN);b7o=r(got,"XLMRobertaForMaskedLM"),got.forEach(t),v7o=r(U0e," (XLM-RoBERTa model)"),U0e.forEach(t),F7o=i(O),$_=n(O,"LI",{});var J0e=s($_);gie=n(J0e,"STRONG",{});var hot=s(gie);T7o=r(hot,"xlm-roberta-xl"),hot.forEach(t),M7o=r(J0e," \u2014 "),BN=n(J0e,"A",{href:!0});var pot=s(BN);E7o=r(pot,"XLMRobertaXLForMaskedLM"),pot.forEach(t),C7o=r(J0e," (XLM-RoBERTa-XL model)"),J0e.forEach(t),w7o=i(O),k_=n(O,"LI",{});var Y0e=s(k_);hie=n(Y0e,"STRONG",{});var uot=s(hie);A7o=r(uot,"xlnet"),uot.forEach(t),y7o=r(Y0e," \u2014 "),IN=n(Y0e,"A",{href:!0});var _ot=s(IN);L7o=r(_ot,"XLNetLMHeadModel"),_ot.forEach(t),x7o=r(Y0e," (XLNet model)"),Y0e.forEach(t),O.forEach(t),$7o=i(ra),S_=n(ra,"P",{});var K0e=s(S_);k7o=r(K0e,"The model is set in evaluation mode by default using "),pie=n(K0e,"CODE",{});var bot=s(pie);S7o=r(bot,"model.eval()"),bot.forEach(t),R7o=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uie=n(K0e,"CODE",{});var vot=s(uie);P7o=r(vot,"model.train()"),vot.forEach(t),K0e.forEach(t),B7o=i(ra),T(R_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),VIe=i(f),ki=n(f,"H2",{class:!0});var QNe=s(ki);P_=n(QNe,"A",{id:!0,class:!0,href:!0});var Fot=s(P_);_ie=n(Fot,"SPAN",{});var Tot=s(_ie);T(V0.$$.fragment,Tot),Tot.forEach(t),Fot.forEach(t),I7o=i(QNe),bie=n(QNe,"SPAN",{});var Mot=s(bie);q7o=r(Mot,"AutoModelForCausalLM"),Mot.forEach(t),QNe.forEach(t),XIe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(X0.$$.fragment,Vs),N7o=i(Vs),Si=n(Vs,"P",{});var RK=s(Si);j7o=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=n(RK,"A",{href:!0});var Eot=s(qN);D7o=r(Eot,"from_pretrained()"),Eot.forEach(t),G7o=r(RK," class method or the "),NN=n(RK,"A",{href:!0});var Cot=s(NN);O7o=r(Cot,"from_config()"),Cot.forEach(t),V7o=r(RK,` class
method.`),RK.forEach(t),X7o=i(Vs),z0=n(Vs,"P",{});var HNe=s(z0);z7o=r(HNe,"This class cannot be instantiated directly using "),vie=n(HNe,"CODE",{});var wot=s(vie);W7o=r(wot,"__init__()"),wot.forEach(t),Q7o=r(HNe," (throws an error)."),HNe.forEach(t),H7o=i(Vs),nt=n(Vs,"DIV",{class:!0});var pA=s(nt);T(W0.$$.fragment,pA),U7o=i(pA),Fie=n(pA,"P",{});var Aot=s(Fie);J7o=r(Aot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Aot.forEach(t),Y7o=i(pA),Ri=n(pA,"P",{});var PK=s(Ri);K7o=r(PK,`Note:
Loading a model from its configuration file does `),Tie=n(PK,"STRONG",{});var yot=s(Tie);Z7o=r(yot,"not"),yot.forEach(t),eMo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=n(PK,"A",{href:!0});var Lot=s(jN);oMo=r(Lot,"from_pretrained()"),Lot.forEach(t),rMo=r(PK," to load the model weights."),PK.forEach(t),tMo=i(pA),T(B_.$$.fragment,pA),pA.forEach(t),aMo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Q0.$$.fragment,ta),nMo=i(ta),Mie=n(ta,"P",{});var xot=s(Mie);sMo=r(xot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xot.forEach(t),lMo=i(ta),$a=n(ta,"P",{});var uA=s($a);iMo=r(uA,"The model class to instantiate is selected based on the "),Eie=n(uA,"CODE",{});var $ot=s(Eie);dMo=r($ot,"model_type"),$ot.forEach(t),cMo=r(uA,` property of the config object (either
passed as an argument or loaded from `),Cie=n(uA,"CODE",{});var kot=s(Cie);fMo=r(kot,"pretrained_model_name_or_path"),kot.forEach(t),mMo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=n(uA,"CODE",{});var Sot=s(wie);gMo=r(Sot,"pretrained_model_name_or_path"),Sot.forEach(t),hMo=r(uA,":"),uA.forEach(t),pMo=i(ta),z=n(ta,"UL",{});var Q=s(z);I_=n(Q,"LI",{});var Z0e=s(I_);Aie=n(Z0e,"STRONG",{});var Rot=s(Aie);uMo=r(Rot,"bart"),Rot.forEach(t),_Mo=r(Z0e," \u2014 "),DN=n(Z0e,"A",{href:!0});var Pot=s(DN);bMo=r(Pot,"BartForCausalLM"),Pot.forEach(t),vMo=r(Z0e," (BART model)"),Z0e.forEach(t),FMo=i(Q),q_=n(Q,"LI",{});var eye=s(q_);yie=n(eye,"STRONG",{});var Bot=s(yie);TMo=r(Bot,"bert"),Bot.forEach(t),MMo=r(eye," \u2014 "),GN=n(eye,"A",{href:!0});var Iot=s(GN);EMo=r(Iot,"BertLMHeadModel"),Iot.forEach(t),CMo=r(eye," (BERT model)"),eye.forEach(t),wMo=i(Q),N_=n(Q,"LI",{});var oye=s(N_);Lie=n(oye,"STRONG",{});var qot=s(Lie);AMo=r(qot,"bert-generation"),qot.forEach(t),yMo=r(oye," \u2014 "),ON=n(oye,"A",{href:!0});var Not=s(ON);LMo=r(Not,"BertGenerationDecoder"),Not.forEach(t),xMo=r(oye," (Bert Generation model)"),oye.forEach(t),$Mo=i(Q),j_=n(Q,"LI",{});var rye=s(j_);xie=n(rye,"STRONG",{});var jot=s(xie);kMo=r(jot,"big_bird"),jot.forEach(t),SMo=r(rye," \u2014 "),VN=n(rye,"A",{href:!0});var Dot=s(VN);RMo=r(Dot,"BigBirdForCausalLM"),Dot.forEach(t),PMo=r(rye," (BigBird model)"),rye.forEach(t),BMo=i(Q),D_=n(Q,"LI",{});var tye=s(D_);$ie=n(tye,"STRONG",{});var Got=s($ie);IMo=r(Got,"bigbird_pegasus"),Got.forEach(t),qMo=r(tye," \u2014 "),XN=n(tye,"A",{href:!0});var Oot=s(XN);NMo=r(Oot,"BigBirdPegasusForCausalLM"),Oot.forEach(t),jMo=r(tye," (BigBirdPegasus model)"),tye.forEach(t),DMo=i(Q),G_=n(Q,"LI",{});var aye=s(G_);kie=n(aye,"STRONG",{});var Vot=s(kie);GMo=r(Vot,"blenderbot"),Vot.forEach(t),OMo=r(aye," \u2014 "),zN=n(aye,"A",{href:!0});var Xot=s(zN);VMo=r(Xot,"BlenderbotForCausalLM"),Xot.forEach(t),XMo=r(aye," (Blenderbot model)"),aye.forEach(t),zMo=i(Q),O_=n(Q,"LI",{});var nye=s(O_);Sie=n(nye,"STRONG",{});var zot=s(Sie);WMo=r(zot,"blenderbot-small"),zot.forEach(t),QMo=r(nye," \u2014 "),WN=n(nye,"A",{href:!0});var Wot=s(WN);HMo=r(Wot,"BlenderbotSmallForCausalLM"),Wot.forEach(t),UMo=r(nye," (BlenderbotSmall model)"),nye.forEach(t),JMo=i(Q),V_=n(Q,"LI",{});var sye=s(V_);Rie=n(sye,"STRONG",{});var Qot=s(Rie);YMo=r(Qot,"camembert"),Qot.forEach(t),KMo=r(sye," \u2014 "),QN=n(sye,"A",{href:!0});var Hot=s(QN);ZMo=r(Hot,"CamembertForCausalLM"),Hot.forEach(t),eEo=r(sye," (CamemBERT model)"),sye.forEach(t),oEo=i(Q),X_=n(Q,"LI",{});var lye=s(X_);Pie=n(lye,"STRONG",{});var Uot=s(Pie);rEo=r(Uot,"ctrl"),Uot.forEach(t),tEo=r(lye," \u2014 "),HN=n(lye,"A",{href:!0});var Jot=s(HN);aEo=r(Jot,"CTRLLMHeadModel"),Jot.forEach(t),nEo=r(lye," (CTRL model)"),lye.forEach(t),sEo=i(Q),z_=n(Q,"LI",{});var iye=s(z_);Bie=n(iye,"STRONG",{});var Yot=s(Bie);lEo=r(Yot,"data2vec-text"),Yot.forEach(t),iEo=r(iye," \u2014 "),UN=n(iye,"A",{href:!0});var Kot=s(UN);dEo=r(Kot,"Data2VecTextForCausalLM"),Kot.forEach(t),cEo=r(iye," (Data2VecText model)"),iye.forEach(t),fEo=i(Q),W_=n(Q,"LI",{});var dye=s(W_);Iie=n(dye,"STRONG",{});var Zot=s(Iie);mEo=r(Zot,"electra"),Zot.forEach(t),gEo=r(dye," \u2014 "),JN=n(dye,"A",{href:!0});var ert=s(JN);hEo=r(ert,"ElectraForCausalLM"),ert.forEach(t),pEo=r(dye," (ELECTRA model)"),dye.forEach(t),uEo=i(Q),Q_=n(Q,"LI",{});var cye=s(Q_);qie=n(cye,"STRONG",{});var ort=s(qie);_Eo=r(ort,"gpt2"),ort.forEach(t),bEo=r(cye," \u2014 "),YN=n(cye,"A",{href:!0});var rrt=s(YN);vEo=r(rrt,"GPT2LMHeadModel"),rrt.forEach(t),FEo=r(cye," (OpenAI GPT-2 model)"),cye.forEach(t),TEo=i(Q),H_=n(Q,"LI",{});var fye=s(H_);Nie=n(fye,"STRONG",{});var trt=s(Nie);MEo=r(trt,"gpt_neo"),trt.forEach(t),EEo=r(fye," \u2014 "),KN=n(fye,"A",{href:!0});var art=s(KN);CEo=r(art,"GPTNeoForCausalLM"),art.forEach(t),wEo=r(fye," (GPT Neo model)"),fye.forEach(t),AEo=i(Q),U_=n(Q,"LI",{});var mye=s(U_);jie=n(mye,"STRONG",{});var nrt=s(jie);yEo=r(nrt,"gptj"),nrt.forEach(t),LEo=r(mye," \u2014 "),ZN=n(mye,"A",{href:!0});var srt=s(ZN);xEo=r(srt,"GPTJForCausalLM"),srt.forEach(t),$Eo=r(mye," (GPT-J model)"),mye.forEach(t),kEo=i(Q),J_=n(Q,"LI",{});var gye=s(J_);Die=n(gye,"STRONG",{});var lrt=s(Die);SEo=r(lrt,"marian"),lrt.forEach(t),REo=r(gye," \u2014 "),ej=n(gye,"A",{href:!0});var irt=s(ej);PEo=r(irt,"MarianForCausalLM"),irt.forEach(t),BEo=r(gye," (Marian model)"),gye.forEach(t),IEo=i(Q),Y_=n(Q,"LI",{});var hye=s(Y_);Gie=n(hye,"STRONG",{});var drt=s(Gie);qEo=r(drt,"mbart"),drt.forEach(t),NEo=r(hye," \u2014 "),oj=n(hye,"A",{href:!0});var crt=s(oj);jEo=r(crt,"MBartForCausalLM"),crt.forEach(t),DEo=r(hye," (mBART model)"),hye.forEach(t),GEo=i(Q),K_=n(Q,"LI",{});var pye=s(K_);Oie=n(pye,"STRONG",{});var frt=s(Oie);OEo=r(frt,"megatron-bert"),frt.forEach(t),VEo=r(pye," \u2014 "),rj=n(pye,"A",{href:!0});var mrt=s(rj);XEo=r(mrt,"MegatronBertForCausalLM"),mrt.forEach(t),zEo=r(pye," (MegatronBert model)"),pye.forEach(t),WEo=i(Q),Z_=n(Q,"LI",{});var uye=s(Z_);Vie=n(uye,"STRONG",{});var grt=s(Vie);QEo=r(grt,"openai-gpt"),grt.forEach(t),HEo=r(uye," \u2014 "),tj=n(uye,"A",{href:!0});var hrt=s(tj);UEo=r(hrt,"OpenAIGPTLMHeadModel"),hrt.forEach(t),JEo=r(uye," (OpenAI GPT model)"),uye.forEach(t),YEo=i(Q),e2=n(Q,"LI",{});var _ye=s(e2);Xie=n(_ye,"STRONG",{});var prt=s(Xie);KEo=r(prt,"opt"),prt.forEach(t),ZEo=r(_ye," \u2014 "),aj=n(_ye,"A",{href:!0});var urt=s(aj);eCo=r(urt,"OPTForCausalLM"),urt.forEach(t),oCo=r(_ye," (OPT model)"),_ye.forEach(t),rCo=i(Q),o2=n(Q,"LI",{});var bye=s(o2);zie=n(bye,"STRONG",{});var _rt=s(zie);tCo=r(_rt,"pegasus"),_rt.forEach(t),aCo=r(bye," \u2014 "),nj=n(bye,"A",{href:!0});var brt=s(nj);nCo=r(brt,"PegasusForCausalLM"),brt.forEach(t),sCo=r(bye," (Pegasus model)"),bye.forEach(t),lCo=i(Q),r2=n(Q,"LI",{});var vye=s(r2);Wie=n(vye,"STRONG",{});var vrt=s(Wie);iCo=r(vrt,"plbart"),vrt.forEach(t),dCo=r(vye," \u2014 "),sj=n(vye,"A",{href:!0});var Frt=s(sj);cCo=r(Frt,"PLBartForCausalLM"),Frt.forEach(t),fCo=r(vye," (PLBart model)"),vye.forEach(t),mCo=i(Q),t2=n(Q,"LI",{});var Fye=s(t2);Qie=n(Fye,"STRONG",{});var Trt=s(Qie);gCo=r(Trt,"prophetnet"),Trt.forEach(t),hCo=r(Fye," \u2014 "),lj=n(Fye,"A",{href:!0});var Mrt=s(lj);pCo=r(Mrt,"ProphetNetForCausalLM"),Mrt.forEach(t),uCo=r(Fye," (ProphetNet model)"),Fye.forEach(t),_Co=i(Q),a2=n(Q,"LI",{});var Tye=s(a2);Hie=n(Tye,"STRONG",{});var Ert=s(Hie);bCo=r(Ert,"qdqbert"),Ert.forEach(t),vCo=r(Tye," \u2014 "),ij=n(Tye,"A",{href:!0});var Crt=s(ij);FCo=r(Crt,"QDQBertLMHeadModel"),Crt.forEach(t),TCo=r(Tye," (QDQBert model)"),Tye.forEach(t),MCo=i(Q),n2=n(Q,"LI",{});var Mye=s(n2);Uie=n(Mye,"STRONG",{});var wrt=s(Uie);ECo=r(wrt,"reformer"),wrt.forEach(t),CCo=r(Mye," \u2014 "),dj=n(Mye,"A",{href:!0});var Art=s(dj);wCo=r(Art,"ReformerModelWithLMHead"),Art.forEach(t),ACo=r(Mye," (Reformer model)"),Mye.forEach(t),yCo=i(Q),s2=n(Q,"LI",{});var Eye=s(s2);Jie=n(Eye,"STRONG",{});var yrt=s(Jie);LCo=r(yrt,"rembert"),yrt.forEach(t),xCo=r(Eye," \u2014 "),cj=n(Eye,"A",{href:!0});var Lrt=s(cj);$Co=r(Lrt,"RemBertForCausalLM"),Lrt.forEach(t),kCo=r(Eye," (RemBERT model)"),Eye.forEach(t),SCo=i(Q),l2=n(Q,"LI",{});var Cye=s(l2);Yie=n(Cye,"STRONG",{});var xrt=s(Yie);RCo=r(xrt,"roberta"),xrt.forEach(t),PCo=r(Cye," \u2014 "),fj=n(Cye,"A",{href:!0});var $rt=s(fj);BCo=r($rt,"RobertaForCausalLM"),$rt.forEach(t),ICo=r(Cye," (RoBERTa model)"),Cye.forEach(t),qCo=i(Q),i2=n(Q,"LI",{});var wye=s(i2);Kie=n(wye,"STRONG",{});var krt=s(Kie);NCo=r(krt,"roformer"),krt.forEach(t),jCo=r(wye," \u2014 "),mj=n(wye,"A",{href:!0});var Srt=s(mj);DCo=r(Srt,"RoFormerForCausalLM"),Srt.forEach(t),GCo=r(wye," (RoFormer model)"),wye.forEach(t),OCo=i(Q),d2=n(Q,"LI",{});var Aye=s(d2);Zie=n(Aye,"STRONG",{});var Rrt=s(Zie);VCo=r(Rrt,"speech_to_text_2"),Rrt.forEach(t),XCo=r(Aye," \u2014 "),gj=n(Aye,"A",{href:!0});var Prt=s(gj);zCo=r(Prt,"Speech2Text2ForCausalLM"),Prt.forEach(t),WCo=r(Aye," (Speech2Text2 model)"),Aye.forEach(t),QCo=i(Q),c2=n(Q,"LI",{});var yye=s(c2);ede=n(yye,"STRONG",{});var Brt=s(ede);HCo=r(Brt,"transfo-xl"),Brt.forEach(t),UCo=r(yye," \u2014 "),hj=n(yye,"A",{href:!0});var Irt=s(hj);JCo=r(Irt,"TransfoXLLMHeadModel"),Irt.forEach(t),YCo=r(yye," (Transformer-XL model)"),yye.forEach(t),KCo=i(Q),f2=n(Q,"LI",{});var Lye=s(f2);ode=n(Lye,"STRONG",{});var qrt=s(ode);ZCo=r(qrt,"trocr"),qrt.forEach(t),e3o=r(Lye," \u2014 "),pj=n(Lye,"A",{href:!0});var Nrt=s(pj);o3o=r(Nrt,"TrOCRForCausalLM"),Nrt.forEach(t),r3o=r(Lye," (TrOCR model)"),Lye.forEach(t),t3o=i(Q),m2=n(Q,"LI",{});var xye=s(m2);rde=n(xye,"STRONG",{});var jrt=s(rde);a3o=r(jrt,"xglm"),jrt.forEach(t),n3o=r(xye," \u2014 "),uj=n(xye,"A",{href:!0});var Drt=s(uj);s3o=r(Drt,"XGLMForCausalLM"),Drt.forEach(t),l3o=r(xye," (XGLM model)"),xye.forEach(t),i3o=i(Q),g2=n(Q,"LI",{});var $ye=s(g2);tde=n($ye,"STRONG",{});var Grt=s(tde);d3o=r(Grt,"xlm"),Grt.forEach(t),c3o=r($ye," \u2014 "),_j=n($ye,"A",{href:!0});var Ort=s(_j);f3o=r(Ort,"XLMWithLMHeadModel"),Ort.forEach(t),m3o=r($ye," (XLM model)"),$ye.forEach(t),g3o=i(Q),h2=n(Q,"LI",{});var kye=s(h2);ade=n(kye,"STRONG",{});var Vrt=s(ade);h3o=r(Vrt,"xlm-prophetnet"),Vrt.forEach(t),p3o=r(kye," \u2014 "),bj=n(kye,"A",{href:!0});var Xrt=s(bj);u3o=r(Xrt,"XLMProphetNetForCausalLM"),Xrt.forEach(t),_3o=r(kye," (XLMProphetNet model)"),kye.forEach(t),b3o=i(Q),p2=n(Q,"LI",{});var Sye=s(p2);nde=n(Sye,"STRONG",{});var zrt=s(nde);v3o=r(zrt,"xlm-roberta"),zrt.forEach(t),F3o=r(Sye," \u2014 "),vj=n(Sye,"A",{href:!0});var Wrt=s(vj);T3o=r(Wrt,"XLMRobertaForCausalLM"),Wrt.forEach(t),M3o=r(Sye," (XLM-RoBERTa model)"),Sye.forEach(t),E3o=i(Q),u2=n(Q,"LI",{});var Rye=s(u2);sde=n(Rye,"STRONG",{});var Qrt=s(sde);C3o=r(Qrt,"xlm-roberta-xl"),Qrt.forEach(t),w3o=r(Rye," \u2014 "),Fj=n(Rye,"A",{href:!0});var Hrt=s(Fj);A3o=r(Hrt,"XLMRobertaXLForCausalLM"),Hrt.forEach(t),y3o=r(Rye," (XLM-RoBERTa-XL model)"),Rye.forEach(t),L3o=i(Q),_2=n(Q,"LI",{});var Pye=s(_2);lde=n(Pye,"STRONG",{});var Urt=s(lde);x3o=r(Urt,"xlnet"),Urt.forEach(t),$3o=r(Pye," \u2014 "),Tj=n(Pye,"A",{href:!0});var Jrt=s(Tj);k3o=r(Jrt,"XLNetLMHeadModel"),Jrt.forEach(t),S3o=r(Pye," (XLNet model)"),Pye.forEach(t),Q.forEach(t),R3o=i(ta),b2=n(ta,"P",{});var Bye=s(b2);P3o=r(Bye,"The model is set in evaluation mode by default using "),ide=n(Bye,"CODE",{});var Yrt=s(ide);B3o=r(Yrt,"model.eval()"),Yrt.forEach(t),I3o=r(Bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=n(Bye,"CODE",{});var Krt=s(dde);q3o=r(Krt,"model.train()"),Krt.forEach(t),Bye.forEach(t),N3o=i(ta),T(v2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),zIe=i(f),Pi=n(f,"H2",{class:!0});var UNe=s(Pi);F2=n(UNe,"A",{id:!0,class:!0,href:!0});var Zrt=s(F2);cde=n(Zrt,"SPAN",{});var ett=s(cde);T(H0.$$.fragment,ett),ett.forEach(t),Zrt.forEach(t),j3o=i(UNe),fde=n(UNe,"SPAN",{});var ott=s(fde);D3o=r(ott,"AutoModelForMaskedLM"),ott.forEach(t),UNe.forEach(t),WIe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(U0.$$.fragment,Xs),G3o=i(Xs),Bi=n(Xs,"P",{});var BK=s(Bi);O3o=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=n(BK,"A",{href:!0});var rtt=s(Mj);V3o=r(rtt,"from_pretrained()"),rtt.forEach(t),X3o=r(BK," class method or the "),Ej=n(BK,"A",{href:!0});var ttt=s(Ej);z3o=r(ttt,"from_config()"),ttt.forEach(t),W3o=r(BK,` class
method.`),BK.forEach(t),Q3o=i(Xs),J0=n(Xs,"P",{});var JNe=s(J0);H3o=r(JNe,"This class cannot be instantiated directly using "),mde=n(JNe,"CODE",{});var att=s(mde);U3o=r(att,"__init__()"),att.forEach(t),J3o=r(JNe," (throws an error)."),JNe.forEach(t),Y3o=i(Xs),st=n(Xs,"DIV",{class:!0});var _A=s(st);T(Y0.$$.fragment,_A),K3o=i(_A),gde=n(_A,"P",{});var ntt=s(gde);Z3o=r(ntt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ntt.forEach(t),ewo=i(_A),Ii=n(_A,"P",{});var IK=s(Ii);owo=r(IK,`Note:
Loading a model from its configuration file does `),hde=n(IK,"STRONG",{});var stt=s(hde);rwo=r(stt,"not"),stt.forEach(t),two=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(IK,"A",{href:!0});var ltt=s(Cj);awo=r(ltt,"from_pretrained()"),ltt.forEach(t),nwo=r(IK," to load the model weights."),IK.forEach(t),swo=i(_A),T(T2.$$.fragment,_A),_A.forEach(t),lwo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(K0.$$.fragment,aa),iwo=i(aa),pde=n(aa,"P",{});var itt=s(pde);dwo=r(itt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),itt.forEach(t),cwo=i(aa),ka=n(aa,"P",{});var bA=s(ka);fwo=r(bA,"The model class to instantiate is selected based on the "),ude=n(bA,"CODE",{});var dtt=s(ude);mwo=r(dtt,"model_type"),dtt.forEach(t),gwo=r(bA,` property of the config object (either
passed as an argument or loaded from `),_de=n(bA,"CODE",{});var ctt=s(_de);hwo=r(ctt,"pretrained_model_name_or_path"),ctt.forEach(t),pwo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=n(bA,"CODE",{});var ftt=s(bde);uwo=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),_wo=r(bA,":"),bA.forEach(t),bwo=i(aa),W=n(aa,"UL",{});var H=s(W);M2=n(H,"LI",{});var Iye=s(M2);vde=n(Iye,"STRONG",{});var mtt=s(vde);vwo=r(mtt,"albert"),mtt.forEach(t),Fwo=r(Iye," \u2014 "),wj=n(Iye,"A",{href:!0});var gtt=s(wj);Two=r(gtt,"AlbertForMaskedLM"),gtt.forEach(t),Mwo=r(Iye," (ALBERT model)"),Iye.forEach(t),Ewo=i(H),E2=n(H,"LI",{});var qye=s(E2);Fde=n(qye,"STRONG",{});var htt=s(Fde);Cwo=r(htt,"bart"),htt.forEach(t),wwo=r(qye," \u2014 "),Aj=n(qye,"A",{href:!0});var ptt=s(Aj);Awo=r(ptt,"BartForConditionalGeneration"),ptt.forEach(t),ywo=r(qye," (BART model)"),qye.forEach(t),Lwo=i(H),C2=n(H,"LI",{});var Nye=s(C2);Tde=n(Nye,"STRONG",{});var utt=s(Tde);xwo=r(utt,"bert"),utt.forEach(t),$wo=r(Nye," \u2014 "),yj=n(Nye,"A",{href:!0});var _tt=s(yj);kwo=r(_tt,"BertForMaskedLM"),_tt.forEach(t),Swo=r(Nye," (BERT model)"),Nye.forEach(t),Rwo=i(H),w2=n(H,"LI",{});var jye=s(w2);Mde=n(jye,"STRONG",{});var btt=s(Mde);Pwo=r(btt,"big_bird"),btt.forEach(t),Bwo=r(jye," \u2014 "),Lj=n(jye,"A",{href:!0});var vtt=s(Lj);Iwo=r(vtt,"BigBirdForMaskedLM"),vtt.forEach(t),qwo=r(jye," (BigBird model)"),jye.forEach(t),Nwo=i(H),A2=n(H,"LI",{});var Dye=s(A2);Ede=n(Dye,"STRONG",{});var Ftt=s(Ede);jwo=r(Ftt,"camembert"),Ftt.forEach(t),Dwo=r(Dye," \u2014 "),xj=n(Dye,"A",{href:!0});var Ttt=s(xj);Gwo=r(Ttt,"CamembertForMaskedLM"),Ttt.forEach(t),Owo=r(Dye," (CamemBERT model)"),Dye.forEach(t),Vwo=i(H),y2=n(H,"LI",{});var Gye=s(y2);Cde=n(Gye,"STRONG",{});var Mtt=s(Cde);Xwo=r(Mtt,"convbert"),Mtt.forEach(t),zwo=r(Gye," \u2014 "),$j=n(Gye,"A",{href:!0});var Ett=s($j);Wwo=r(Ett,"ConvBertForMaskedLM"),Ett.forEach(t),Qwo=r(Gye," (ConvBERT model)"),Gye.forEach(t),Hwo=i(H),L2=n(H,"LI",{});var Oye=s(L2);wde=n(Oye,"STRONG",{});var Ctt=s(wde);Uwo=r(Ctt,"data2vec-text"),Ctt.forEach(t),Jwo=r(Oye," \u2014 "),kj=n(Oye,"A",{href:!0});var wtt=s(kj);Ywo=r(wtt,"Data2VecTextForMaskedLM"),wtt.forEach(t),Kwo=r(Oye," (Data2VecText model)"),Oye.forEach(t),Zwo=i(H),x2=n(H,"LI",{});var Vye=s(x2);Ade=n(Vye,"STRONG",{});var Att=s(Ade);eAo=r(Att,"deberta"),Att.forEach(t),oAo=r(Vye," \u2014 "),Sj=n(Vye,"A",{href:!0});var ytt=s(Sj);rAo=r(ytt,"DebertaForMaskedLM"),ytt.forEach(t),tAo=r(Vye," (DeBERTa model)"),Vye.forEach(t),aAo=i(H),$2=n(H,"LI",{});var Xye=s($2);yde=n(Xye,"STRONG",{});var Ltt=s(yde);nAo=r(Ltt,"deberta-v2"),Ltt.forEach(t),sAo=r(Xye," \u2014 "),Rj=n(Xye,"A",{href:!0});var xtt=s(Rj);lAo=r(xtt,"DebertaV2ForMaskedLM"),xtt.forEach(t),iAo=r(Xye," (DeBERTa-v2 model)"),Xye.forEach(t),dAo=i(H),k2=n(H,"LI",{});var zye=s(k2);Lde=n(zye,"STRONG",{});var $tt=s(Lde);cAo=r($tt,"distilbert"),$tt.forEach(t),fAo=r(zye," \u2014 "),Pj=n(zye,"A",{href:!0});var ktt=s(Pj);mAo=r(ktt,"DistilBertForMaskedLM"),ktt.forEach(t),gAo=r(zye," (DistilBERT model)"),zye.forEach(t),hAo=i(H),S2=n(H,"LI",{});var Wye=s(S2);xde=n(Wye,"STRONG",{});var Stt=s(xde);pAo=r(Stt,"electra"),Stt.forEach(t),uAo=r(Wye," \u2014 "),Bj=n(Wye,"A",{href:!0});var Rtt=s(Bj);_Ao=r(Rtt,"ElectraForMaskedLM"),Rtt.forEach(t),bAo=r(Wye," (ELECTRA model)"),Wye.forEach(t),vAo=i(H),R2=n(H,"LI",{});var Qye=s(R2);$de=n(Qye,"STRONG",{});var Ptt=s($de);FAo=r(Ptt,"flaubert"),Ptt.forEach(t),TAo=r(Qye," \u2014 "),Ij=n(Qye,"A",{href:!0});var Btt=s(Ij);MAo=r(Btt,"FlaubertWithLMHeadModel"),Btt.forEach(t),EAo=r(Qye," (FlauBERT model)"),Qye.forEach(t),CAo=i(H),P2=n(H,"LI",{});var Hye=s(P2);kde=n(Hye,"STRONG",{});var Itt=s(kde);wAo=r(Itt,"fnet"),Itt.forEach(t),AAo=r(Hye," \u2014 "),qj=n(Hye,"A",{href:!0});var qtt=s(qj);yAo=r(qtt,"FNetForMaskedLM"),qtt.forEach(t),LAo=r(Hye," (FNet model)"),Hye.forEach(t),xAo=i(H),B2=n(H,"LI",{});var Uye=s(B2);Sde=n(Uye,"STRONG",{});var Ntt=s(Sde);$Ao=r(Ntt,"funnel"),Ntt.forEach(t),kAo=r(Uye," \u2014 "),Nj=n(Uye,"A",{href:!0});var jtt=s(Nj);SAo=r(jtt,"FunnelForMaskedLM"),jtt.forEach(t),RAo=r(Uye," (Funnel Transformer model)"),Uye.forEach(t),PAo=i(H),I2=n(H,"LI",{});var Jye=s(I2);Rde=n(Jye,"STRONG",{});var Dtt=s(Rde);BAo=r(Dtt,"ibert"),Dtt.forEach(t),IAo=r(Jye," \u2014 "),jj=n(Jye,"A",{href:!0});var Gtt=s(jj);qAo=r(Gtt,"IBertForMaskedLM"),Gtt.forEach(t),NAo=r(Jye," (I-BERT model)"),Jye.forEach(t),jAo=i(H),q2=n(H,"LI",{});var Yye=s(q2);Pde=n(Yye,"STRONG",{});var Ott=s(Pde);DAo=r(Ott,"layoutlm"),Ott.forEach(t),GAo=r(Yye," \u2014 "),Dj=n(Yye,"A",{href:!0});var Vtt=s(Dj);OAo=r(Vtt,"LayoutLMForMaskedLM"),Vtt.forEach(t),VAo=r(Yye," (LayoutLM model)"),Yye.forEach(t),XAo=i(H),N2=n(H,"LI",{});var Kye=s(N2);Bde=n(Kye,"STRONG",{});var Xtt=s(Bde);zAo=r(Xtt,"longformer"),Xtt.forEach(t),WAo=r(Kye," \u2014 "),Gj=n(Kye,"A",{href:!0});var ztt=s(Gj);QAo=r(ztt,"LongformerForMaskedLM"),ztt.forEach(t),HAo=r(Kye," (Longformer model)"),Kye.forEach(t),UAo=i(H),j2=n(H,"LI",{});var Zye=s(j2);Ide=n(Zye,"STRONG",{});var Wtt=s(Ide);JAo=r(Wtt,"mbart"),Wtt.forEach(t),YAo=r(Zye," \u2014 "),Oj=n(Zye,"A",{href:!0});var Qtt=s(Oj);KAo=r(Qtt,"MBartForConditionalGeneration"),Qtt.forEach(t),ZAo=r(Zye," (mBART model)"),Zye.forEach(t),e6o=i(H),D2=n(H,"LI",{});var eLe=s(D2);qde=n(eLe,"STRONG",{});var Htt=s(qde);o6o=r(Htt,"megatron-bert"),Htt.forEach(t),r6o=r(eLe," \u2014 "),Vj=n(eLe,"A",{href:!0});var Utt=s(Vj);t6o=r(Utt,"MegatronBertForMaskedLM"),Utt.forEach(t),a6o=r(eLe," (MegatronBert model)"),eLe.forEach(t),n6o=i(H),G2=n(H,"LI",{});var oLe=s(G2);Nde=n(oLe,"STRONG",{});var Jtt=s(Nde);s6o=r(Jtt,"mobilebert"),Jtt.forEach(t),l6o=r(oLe," \u2014 "),Xj=n(oLe,"A",{href:!0});var Ytt=s(Xj);i6o=r(Ytt,"MobileBertForMaskedLM"),Ytt.forEach(t),d6o=r(oLe," (MobileBERT model)"),oLe.forEach(t),c6o=i(H),O2=n(H,"LI",{});var rLe=s(O2);jde=n(rLe,"STRONG",{});var Ktt=s(jde);f6o=r(Ktt,"mpnet"),Ktt.forEach(t),m6o=r(rLe," \u2014 "),zj=n(rLe,"A",{href:!0});var Ztt=s(zj);g6o=r(Ztt,"MPNetForMaskedLM"),Ztt.forEach(t),h6o=r(rLe," (MPNet model)"),rLe.forEach(t),p6o=i(H),V2=n(H,"LI",{});var tLe=s(V2);Dde=n(tLe,"STRONG",{});var eat=s(Dde);u6o=r(eat,"nystromformer"),eat.forEach(t),_6o=r(tLe," \u2014 "),Wj=n(tLe,"A",{href:!0});var oat=s(Wj);b6o=r(oat,"NystromformerForMaskedLM"),oat.forEach(t),v6o=r(tLe," (Nystromformer model)"),tLe.forEach(t),F6o=i(H),X2=n(H,"LI",{});var aLe=s(X2);Gde=n(aLe,"STRONG",{});var rat=s(Gde);T6o=r(rat,"perceiver"),rat.forEach(t),M6o=r(aLe," \u2014 "),Qj=n(aLe,"A",{href:!0});var tat=s(Qj);E6o=r(tat,"PerceiverForMaskedLM"),tat.forEach(t),C6o=r(aLe," (Perceiver model)"),aLe.forEach(t),w6o=i(H),z2=n(H,"LI",{});var nLe=s(z2);Ode=n(nLe,"STRONG",{});var aat=s(Ode);A6o=r(aat,"qdqbert"),aat.forEach(t),y6o=r(nLe," \u2014 "),Hj=n(nLe,"A",{href:!0});var nat=s(Hj);L6o=r(nat,"QDQBertForMaskedLM"),nat.forEach(t),x6o=r(nLe," (QDQBert model)"),nLe.forEach(t),$6o=i(H),W2=n(H,"LI",{});var sLe=s(W2);Vde=n(sLe,"STRONG",{});var sat=s(Vde);k6o=r(sat,"reformer"),sat.forEach(t),S6o=r(sLe," \u2014 "),Uj=n(sLe,"A",{href:!0});var lat=s(Uj);R6o=r(lat,"ReformerForMaskedLM"),lat.forEach(t),P6o=r(sLe," (Reformer model)"),sLe.forEach(t),B6o=i(H),Q2=n(H,"LI",{});var lLe=s(Q2);Xde=n(lLe,"STRONG",{});var iat=s(Xde);I6o=r(iat,"rembert"),iat.forEach(t),q6o=r(lLe," \u2014 "),Jj=n(lLe,"A",{href:!0});var dat=s(Jj);N6o=r(dat,"RemBertForMaskedLM"),dat.forEach(t),j6o=r(lLe," (RemBERT model)"),lLe.forEach(t),D6o=i(H),H2=n(H,"LI",{});var iLe=s(H2);zde=n(iLe,"STRONG",{});var cat=s(zde);G6o=r(cat,"roberta"),cat.forEach(t),O6o=r(iLe," \u2014 "),Yj=n(iLe,"A",{href:!0});var fat=s(Yj);V6o=r(fat,"RobertaForMaskedLM"),fat.forEach(t),X6o=r(iLe," (RoBERTa model)"),iLe.forEach(t),z6o=i(H),U2=n(H,"LI",{});var dLe=s(U2);Wde=n(dLe,"STRONG",{});var mat=s(Wde);W6o=r(mat,"roformer"),mat.forEach(t),Q6o=r(dLe," \u2014 "),Kj=n(dLe,"A",{href:!0});var gat=s(Kj);H6o=r(gat,"RoFormerForMaskedLM"),gat.forEach(t),U6o=r(dLe," (RoFormer model)"),dLe.forEach(t),J6o=i(H),J2=n(H,"LI",{});var cLe=s(J2);Qde=n(cLe,"STRONG",{});var hat=s(Qde);Y6o=r(hat,"squeezebert"),hat.forEach(t),K6o=r(cLe," \u2014 "),Zj=n(cLe,"A",{href:!0});var pat=s(Zj);Z6o=r(pat,"SqueezeBertForMaskedLM"),pat.forEach(t),e0o=r(cLe," (SqueezeBERT model)"),cLe.forEach(t),o0o=i(H),Y2=n(H,"LI",{});var fLe=s(Y2);Hde=n(fLe,"STRONG",{});var uat=s(Hde);r0o=r(uat,"tapas"),uat.forEach(t),t0o=r(fLe," \u2014 "),eD=n(fLe,"A",{href:!0});var _at=s(eD);a0o=r(_at,"TapasForMaskedLM"),_at.forEach(t),n0o=r(fLe," (TAPAS model)"),fLe.forEach(t),s0o=i(H),K2=n(H,"LI",{});var mLe=s(K2);Ude=n(mLe,"STRONG",{});var bat=s(Ude);l0o=r(bat,"wav2vec2"),bat.forEach(t),i0o=r(mLe," \u2014 "),Jde=n(mLe,"CODE",{});var vat=s(Jde);d0o=r(vat,"Wav2Vec2ForMaskedLM"),vat.forEach(t),c0o=r(mLe," (Wav2Vec2 model)"),mLe.forEach(t),f0o=i(H),Z2=n(H,"LI",{});var gLe=s(Z2);Yde=n(gLe,"STRONG",{});var Fat=s(Yde);m0o=r(Fat,"xlm"),Fat.forEach(t),g0o=r(gLe," \u2014 "),oD=n(gLe,"A",{href:!0});var Tat=s(oD);h0o=r(Tat,"XLMWithLMHeadModel"),Tat.forEach(t),p0o=r(gLe," (XLM model)"),gLe.forEach(t),u0o=i(H),e1=n(H,"LI",{});var hLe=s(e1);Kde=n(hLe,"STRONG",{});var Mat=s(Kde);_0o=r(Mat,"xlm-roberta"),Mat.forEach(t),b0o=r(hLe," \u2014 "),rD=n(hLe,"A",{href:!0});var Eat=s(rD);v0o=r(Eat,"XLMRobertaForMaskedLM"),Eat.forEach(t),F0o=r(hLe," (XLM-RoBERTa model)"),hLe.forEach(t),T0o=i(H),o1=n(H,"LI",{});var pLe=s(o1);Zde=n(pLe,"STRONG",{});var Cat=s(Zde);M0o=r(Cat,"xlm-roberta-xl"),Cat.forEach(t),E0o=r(pLe," \u2014 "),tD=n(pLe,"A",{href:!0});var wat=s(tD);C0o=r(wat,"XLMRobertaXLForMaskedLM"),wat.forEach(t),w0o=r(pLe," (XLM-RoBERTa-XL model)"),pLe.forEach(t),A0o=i(H),r1=n(H,"LI",{});var uLe=s(r1);ece=n(uLe,"STRONG",{});var Aat=s(ece);y0o=r(Aat,"yoso"),Aat.forEach(t),L0o=r(uLe," \u2014 "),aD=n(uLe,"A",{href:!0});var yat=s(aD);x0o=r(yat,"YosoForMaskedLM"),yat.forEach(t),$0o=r(uLe," (YOSO model)"),uLe.forEach(t),H.forEach(t),k0o=i(aa),t1=n(aa,"P",{});var _Le=s(t1);S0o=r(_Le,"The model is set in evaluation mode by default using "),oce=n(_Le,"CODE",{});var Lat=s(oce);R0o=r(Lat,"model.eval()"),Lat.forEach(t),P0o=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rce=n(_Le,"CODE",{});var xat=s(rce);B0o=r(xat,"model.train()"),xat.forEach(t),_Le.forEach(t),I0o=i(aa),T(a1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),QIe=i(f),qi=n(f,"H2",{class:!0});var YNe=s(qi);n1=n(YNe,"A",{id:!0,class:!0,href:!0});var $at=s(n1);tce=n($at,"SPAN",{});var kat=s(tce);T(Z0.$$.fragment,kat),kat.forEach(t),$at.forEach(t),q0o=i(YNe),ace=n(YNe,"SPAN",{});var Sat=s(ace);N0o=r(Sat,"AutoModelForSeq2SeqLM"),Sat.forEach(t),YNe.forEach(t),HIe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(ey.$$.fragment,zs),j0o=i(zs),Ni=n(zs,"P",{});var qK=s(Ni);D0o=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=n(qK,"A",{href:!0});var Rat=s(nD);G0o=r(Rat,"from_pretrained()"),Rat.forEach(t),O0o=r(qK," class method or the "),sD=n(qK,"A",{href:!0});var Pat=s(sD);V0o=r(Pat,"from_config()"),Pat.forEach(t),X0o=r(qK,` class
method.`),qK.forEach(t),z0o=i(zs),oy=n(zs,"P",{});var KNe=s(oy);W0o=r(KNe,"This class cannot be instantiated directly using "),nce=n(KNe,"CODE",{});var Bat=s(nce);Q0o=r(Bat,"__init__()"),Bat.forEach(t),H0o=r(KNe," (throws an error)."),KNe.forEach(t),U0o=i(zs),lt=n(zs,"DIV",{class:!0});var vA=s(lt);T(ry.$$.fragment,vA),J0o=i(vA),sce=n(vA,"P",{});var Iat=s(sce);Y0o=r(Iat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Iat.forEach(t),K0o=i(vA),ji=n(vA,"P",{});var NK=s(ji);Z0o=r(NK,`Note:
Loading a model from its configuration file does `),lce=n(NK,"STRONG",{});var qat=s(lce);eyo=r(qat,"not"),qat.forEach(t),oyo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(NK,"A",{href:!0});var Nat=s(lD);ryo=r(Nat,"from_pretrained()"),Nat.forEach(t),tyo=r(NK," to load the model weights."),NK.forEach(t),ayo=i(vA),T(s1.$$.fragment,vA),vA.forEach(t),nyo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(ty.$$.fragment,na),syo=i(na),ice=n(na,"P",{});var jat=s(ice);lyo=r(jat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jat.forEach(t),iyo=i(na),Sa=n(na,"P",{});var FA=s(Sa);dyo=r(FA,"The model class to instantiate is selected based on the "),dce=n(FA,"CODE",{});var Dat=s(dce);cyo=r(Dat,"model_type"),Dat.forEach(t),fyo=r(FA,` property of the config object (either
passed as an argument or loaded from `),cce=n(FA,"CODE",{});var Gat=s(cce);myo=r(Gat,"pretrained_model_name_or_path"),Gat.forEach(t),gyo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=n(FA,"CODE",{});var Oat=s(fce);hyo=r(Oat,"pretrained_model_name_or_path"),Oat.forEach(t),pyo=r(FA,":"),FA.forEach(t),uyo=i(na),ue=n(na,"UL",{});var ve=s(ue);l1=n(ve,"LI",{});var bLe=s(l1);mce=n(bLe,"STRONG",{});var Vat=s(mce);_yo=r(Vat,"bart"),Vat.forEach(t),byo=r(bLe," \u2014 "),iD=n(bLe,"A",{href:!0});var Xat=s(iD);vyo=r(Xat,"BartForConditionalGeneration"),Xat.forEach(t),Fyo=r(bLe," (BART model)"),bLe.forEach(t),Tyo=i(ve),i1=n(ve,"LI",{});var vLe=s(i1);gce=n(vLe,"STRONG",{});var zat=s(gce);Myo=r(zat,"bigbird_pegasus"),zat.forEach(t),Eyo=r(vLe," \u2014 "),dD=n(vLe,"A",{href:!0});var Wat=s(dD);Cyo=r(Wat,"BigBirdPegasusForConditionalGeneration"),Wat.forEach(t),wyo=r(vLe," (BigBirdPegasus model)"),vLe.forEach(t),Ayo=i(ve),d1=n(ve,"LI",{});var FLe=s(d1);hce=n(FLe,"STRONG",{});var Qat=s(hce);yyo=r(Qat,"blenderbot"),Qat.forEach(t),Lyo=r(FLe," \u2014 "),cD=n(FLe,"A",{href:!0});var Hat=s(cD);xyo=r(Hat,"BlenderbotForConditionalGeneration"),Hat.forEach(t),$yo=r(FLe," (Blenderbot model)"),FLe.forEach(t),kyo=i(ve),c1=n(ve,"LI",{});var TLe=s(c1);pce=n(TLe,"STRONG",{});var Uat=s(pce);Syo=r(Uat,"blenderbot-small"),Uat.forEach(t),Ryo=r(TLe," \u2014 "),fD=n(TLe,"A",{href:!0});var Jat=s(fD);Pyo=r(Jat,"BlenderbotSmallForConditionalGeneration"),Jat.forEach(t),Byo=r(TLe," (BlenderbotSmall model)"),TLe.forEach(t),Iyo=i(ve),f1=n(ve,"LI",{});var MLe=s(f1);uce=n(MLe,"STRONG",{});var Yat=s(uce);qyo=r(Yat,"encoder-decoder"),Yat.forEach(t),Nyo=r(MLe," \u2014 "),mD=n(MLe,"A",{href:!0});var Kat=s(mD);jyo=r(Kat,"EncoderDecoderModel"),Kat.forEach(t),Dyo=r(MLe," (Encoder decoder model)"),MLe.forEach(t),Gyo=i(ve),m1=n(ve,"LI",{});var ELe=s(m1);_ce=n(ELe,"STRONG",{});var Zat=s(_ce);Oyo=r(Zat,"fsmt"),Zat.forEach(t),Vyo=r(ELe," \u2014 "),gD=n(ELe,"A",{href:!0});var ent=s(gD);Xyo=r(ent,"FSMTForConditionalGeneration"),ent.forEach(t),zyo=r(ELe," (FairSeq Machine-Translation model)"),ELe.forEach(t),Wyo=i(ve),g1=n(ve,"LI",{});var CLe=s(g1);bce=n(CLe,"STRONG",{});var ont=s(bce);Qyo=r(ont,"led"),ont.forEach(t),Hyo=r(CLe," \u2014 "),hD=n(CLe,"A",{href:!0});var rnt=s(hD);Uyo=r(rnt,"LEDForConditionalGeneration"),rnt.forEach(t),Jyo=r(CLe," (LED model)"),CLe.forEach(t),Yyo=i(ve),h1=n(ve,"LI",{});var wLe=s(h1);vce=n(wLe,"STRONG",{});var tnt=s(vce);Kyo=r(tnt,"m2m_100"),tnt.forEach(t),Zyo=r(wLe," \u2014 "),pD=n(wLe,"A",{href:!0});var ant=s(pD);eLo=r(ant,"M2M100ForConditionalGeneration"),ant.forEach(t),oLo=r(wLe," (M2M100 model)"),wLe.forEach(t),rLo=i(ve),p1=n(ve,"LI",{});var ALe=s(p1);Fce=n(ALe,"STRONG",{});var nnt=s(Fce);tLo=r(nnt,"marian"),nnt.forEach(t),aLo=r(ALe," \u2014 "),uD=n(ALe,"A",{href:!0});var snt=s(uD);nLo=r(snt,"MarianMTModel"),snt.forEach(t),sLo=r(ALe," (Marian model)"),ALe.forEach(t),lLo=i(ve),u1=n(ve,"LI",{});var yLe=s(u1);Tce=n(yLe,"STRONG",{});var lnt=s(Tce);iLo=r(lnt,"mbart"),lnt.forEach(t),dLo=r(yLe," \u2014 "),_D=n(yLe,"A",{href:!0});var int=s(_D);cLo=r(int,"MBartForConditionalGeneration"),int.forEach(t),fLo=r(yLe," (mBART model)"),yLe.forEach(t),mLo=i(ve),_1=n(ve,"LI",{});var LLe=s(_1);Mce=n(LLe,"STRONG",{});var dnt=s(Mce);gLo=r(dnt,"mt5"),dnt.forEach(t),hLo=r(LLe," \u2014 "),bD=n(LLe,"A",{href:!0});var cnt=s(bD);pLo=r(cnt,"MT5ForConditionalGeneration"),cnt.forEach(t),uLo=r(LLe," (mT5 model)"),LLe.forEach(t),_Lo=i(ve),b1=n(ve,"LI",{});var xLe=s(b1);Ece=n(xLe,"STRONG",{});var fnt=s(Ece);bLo=r(fnt,"pegasus"),fnt.forEach(t),vLo=r(xLe," \u2014 "),vD=n(xLe,"A",{href:!0});var mnt=s(vD);FLo=r(mnt,"PegasusForConditionalGeneration"),mnt.forEach(t),TLo=r(xLe," (Pegasus model)"),xLe.forEach(t),MLo=i(ve),v1=n(ve,"LI",{});var $Le=s(v1);Cce=n($Le,"STRONG",{});var gnt=s(Cce);ELo=r(gnt,"plbart"),gnt.forEach(t),CLo=r($Le," \u2014 "),FD=n($Le,"A",{href:!0});var hnt=s(FD);wLo=r(hnt,"PLBartForConditionalGeneration"),hnt.forEach(t),ALo=r($Le," (PLBart model)"),$Le.forEach(t),yLo=i(ve),F1=n(ve,"LI",{});var kLe=s(F1);wce=n(kLe,"STRONG",{});var pnt=s(wce);LLo=r(pnt,"prophetnet"),pnt.forEach(t),xLo=r(kLe," \u2014 "),TD=n(kLe,"A",{href:!0});var unt=s(TD);$Lo=r(unt,"ProphetNetForConditionalGeneration"),unt.forEach(t),kLo=r(kLe," (ProphetNet model)"),kLe.forEach(t),SLo=i(ve),T1=n(ve,"LI",{});var SLe=s(T1);Ace=n(SLe,"STRONG",{});var _nt=s(Ace);RLo=r(_nt,"t5"),_nt.forEach(t),PLo=r(SLe," \u2014 "),MD=n(SLe,"A",{href:!0});var bnt=s(MD);BLo=r(bnt,"T5ForConditionalGeneration"),bnt.forEach(t),ILo=r(SLe," (T5 model)"),SLe.forEach(t),qLo=i(ve),M1=n(ve,"LI",{});var RLe=s(M1);yce=n(RLe,"STRONG",{});var vnt=s(yce);NLo=r(vnt,"xlm-prophetnet"),vnt.forEach(t),jLo=r(RLe," \u2014 "),ED=n(RLe,"A",{href:!0});var Fnt=s(ED);DLo=r(Fnt,"XLMProphetNetForConditionalGeneration"),Fnt.forEach(t),GLo=r(RLe," (XLMProphetNet model)"),RLe.forEach(t),ve.forEach(t),OLo=i(na),E1=n(na,"P",{});var PLe=s(E1);VLo=r(PLe,"The model is set in evaluation mode by default using "),Lce=n(PLe,"CODE",{});var Tnt=s(Lce);XLo=r(Tnt,"model.eval()"),Tnt.forEach(t),zLo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(PLe,"CODE",{});var Mnt=s(xce);WLo=r(Mnt,"model.train()"),Mnt.forEach(t),PLe.forEach(t),QLo=i(na),T(C1.$$.fragment,na),na.forEach(t),zs.forEach(t),UIe=i(f),Di=n(f,"H2",{class:!0});var ZNe=s(Di);w1=n(ZNe,"A",{id:!0,class:!0,href:!0});var Ent=s(w1);$ce=n(Ent,"SPAN",{});var Cnt=s($ce);T(ay.$$.fragment,Cnt),Cnt.forEach(t),Ent.forEach(t),HLo=i(ZNe),kce=n(ZNe,"SPAN",{});var wnt=s(kce);ULo=r(wnt,"AutoModelForSequenceClassification"),wnt.forEach(t),ZNe.forEach(t),JIe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(ny.$$.fragment,Ws),JLo=i(Ws),Gi=n(Ws,"P",{});var jK=s(Gi);YLo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=n(jK,"A",{href:!0});var Ant=s(CD);KLo=r(Ant,"from_pretrained()"),Ant.forEach(t),ZLo=r(jK," class method or the "),wD=n(jK,"A",{href:!0});var ynt=s(wD);e8o=r(ynt,"from_config()"),ynt.forEach(t),o8o=r(jK,` class
method.`),jK.forEach(t),r8o=i(Ws),sy=n(Ws,"P",{});var eje=s(sy);t8o=r(eje,"This class cannot be instantiated directly using "),Sce=n(eje,"CODE",{});var Lnt=s(Sce);a8o=r(Lnt,"__init__()"),Lnt.forEach(t),n8o=r(eje," (throws an error)."),eje.forEach(t),s8o=i(Ws),it=n(Ws,"DIV",{class:!0});var TA=s(it);T(ly.$$.fragment,TA),l8o=i(TA),Rce=n(TA,"P",{});var xnt=s(Rce);i8o=r(xnt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xnt.forEach(t),d8o=i(TA),Oi=n(TA,"P",{});var DK=s(Oi);c8o=r(DK,`Note:
Loading a model from its configuration file does `),Pce=n(DK,"STRONG",{});var $nt=s(Pce);f8o=r($nt,"not"),$nt.forEach(t),m8o=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(DK,"A",{href:!0});var knt=s(AD);g8o=r(knt,"from_pretrained()"),knt.forEach(t),h8o=r(DK," to load the model weights."),DK.forEach(t),p8o=i(TA),T(A1.$$.fragment,TA),TA.forEach(t),u8o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(iy.$$.fragment,sa),_8o=i(sa),Bce=n(sa,"P",{});var Snt=s(Bce);b8o=r(Snt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Snt.forEach(t),v8o=i(sa),Ra=n(sa,"P",{});var MA=s(Ra);F8o=r(MA,"The model class to instantiate is selected based on the "),Ice=n(MA,"CODE",{});var Rnt=s(Ice);T8o=r(Rnt,"model_type"),Rnt.forEach(t),M8o=r(MA,` property of the config object (either
passed as an argument or loaded from `),qce=n(MA,"CODE",{});var Pnt=s(qce);E8o=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),C8o=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=n(MA,"CODE",{});var Bnt=s(Nce);w8o=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),A8o=r(MA,":"),MA.forEach(t),y8o=i(sa),q=n(sa,"UL",{});var j=s(q);y1=n(j,"LI",{});var BLe=s(y1);jce=n(BLe,"STRONG",{});var Int=s(jce);L8o=r(Int,"albert"),Int.forEach(t),x8o=r(BLe," \u2014 "),yD=n(BLe,"A",{href:!0});var qnt=s(yD);$8o=r(qnt,"AlbertForSequenceClassification"),qnt.forEach(t),k8o=r(BLe," (ALBERT model)"),BLe.forEach(t),S8o=i(j),L1=n(j,"LI",{});var ILe=s(L1);Dce=n(ILe,"STRONG",{});var Nnt=s(Dce);R8o=r(Nnt,"bart"),Nnt.forEach(t),P8o=r(ILe," \u2014 "),LD=n(ILe,"A",{href:!0});var jnt=s(LD);B8o=r(jnt,"BartForSequenceClassification"),jnt.forEach(t),I8o=r(ILe," (BART model)"),ILe.forEach(t),q8o=i(j),x1=n(j,"LI",{});var qLe=s(x1);Gce=n(qLe,"STRONG",{});var Dnt=s(Gce);N8o=r(Dnt,"bert"),Dnt.forEach(t),j8o=r(qLe," \u2014 "),xD=n(qLe,"A",{href:!0});var Gnt=s(xD);D8o=r(Gnt,"BertForSequenceClassification"),Gnt.forEach(t),G8o=r(qLe," (BERT model)"),qLe.forEach(t),O8o=i(j),$1=n(j,"LI",{});var NLe=s($1);Oce=n(NLe,"STRONG",{});var Ont=s(Oce);V8o=r(Ont,"big_bird"),Ont.forEach(t),X8o=r(NLe," \u2014 "),$D=n(NLe,"A",{href:!0});var Vnt=s($D);z8o=r(Vnt,"BigBirdForSequenceClassification"),Vnt.forEach(t),W8o=r(NLe," (BigBird model)"),NLe.forEach(t),Q8o=i(j),k1=n(j,"LI",{});var jLe=s(k1);Vce=n(jLe,"STRONG",{});var Xnt=s(Vce);H8o=r(Xnt,"bigbird_pegasus"),Xnt.forEach(t),U8o=r(jLe," \u2014 "),kD=n(jLe,"A",{href:!0});var znt=s(kD);J8o=r(znt,"BigBirdPegasusForSequenceClassification"),znt.forEach(t),Y8o=r(jLe," (BigBirdPegasus model)"),jLe.forEach(t),K8o=i(j),S1=n(j,"LI",{});var DLe=s(S1);Xce=n(DLe,"STRONG",{});var Wnt=s(Xce);Z8o=r(Wnt,"camembert"),Wnt.forEach(t),exo=r(DLe," \u2014 "),SD=n(DLe,"A",{href:!0});var Qnt=s(SD);oxo=r(Qnt,"CamembertForSequenceClassification"),Qnt.forEach(t),rxo=r(DLe," (CamemBERT model)"),DLe.forEach(t),txo=i(j),R1=n(j,"LI",{});var GLe=s(R1);zce=n(GLe,"STRONG",{});var Hnt=s(zce);axo=r(Hnt,"canine"),Hnt.forEach(t),nxo=r(GLe," \u2014 "),RD=n(GLe,"A",{href:!0});var Unt=s(RD);sxo=r(Unt,"CanineForSequenceClassification"),Unt.forEach(t),lxo=r(GLe," (Canine model)"),GLe.forEach(t),ixo=i(j),P1=n(j,"LI",{});var OLe=s(P1);Wce=n(OLe,"STRONG",{});var Jnt=s(Wce);dxo=r(Jnt,"convbert"),Jnt.forEach(t),cxo=r(OLe," \u2014 "),PD=n(OLe,"A",{href:!0});var Ynt=s(PD);fxo=r(Ynt,"ConvBertForSequenceClassification"),Ynt.forEach(t),mxo=r(OLe," (ConvBERT model)"),OLe.forEach(t),gxo=i(j),B1=n(j,"LI",{});var VLe=s(B1);Qce=n(VLe,"STRONG",{});var Knt=s(Qce);hxo=r(Knt,"ctrl"),Knt.forEach(t),pxo=r(VLe," \u2014 "),BD=n(VLe,"A",{href:!0});var Znt=s(BD);uxo=r(Znt,"CTRLForSequenceClassification"),Znt.forEach(t),_xo=r(VLe," (CTRL model)"),VLe.forEach(t),bxo=i(j),I1=n(j,"LI",{});var XLe=s(I1);Hce=n(XLe,"STRONG",{});var est=s(Hce);vxo=r(est,"data2vec-text"),est.forEach(t),Fxo=r(XLe," \u2014 "),ID=n(XLe,"A",{href:!0});var ost=s(ID);Txo=r(ost,"Data2VecTextForSequenceClassification"),ost.forEach(t),Mxo=r(XLe," (Data2VecText model)"),XLe.forEach(t),Exo=i(j),q1=n(j,"LI",{});var zLe=s(q1);Uce=n(zLe,"STRONG",{});var rst=s(Uce);Cxo=r(rst,"deberta"),rst.forEach(t),wxo=r(zLe," \u2014 "),qD=n(zLe,"A",{href:!0});var tst=s(qD);Axo=r(tst,"DebertaForSequenceClassification"),tst.forEach(t),yxo=r(zLe," (DeBERTa model)"),zLe.forEach(t),Lxo=i(j),N1=n(j,"LI",{});var WLe=s(N1);Jce=n(WLe,"STRONG",{});var ast=s(Jce);xxo=r(ast,"deberta-v2"),ast.forEach(t),$xo=r(WLe," \u2014 "),ND=n(WLe,"A",{href:!0});var nst=s(ND);kxo=r(nst,"DebertaV2ForSequenceClassification"),nst.forEach(t),Sxo=r(WLe," (DeBERTa-v2 model)"),WLe.forEach(t),Rxo=i(j),j1=n(j,"LI",{});var QLe=s(j1);Yce=n(QLe,"STRONG",{});var sst=s(Yce);Pxo=r(sst,"distilbert"),sst.forEach(t),Bxo=r(QLe," \u2014 "),jD=n(QLe,"A",{href:!0});var lst=s(jD);Ixo=r(lst,"DistilBertForSequenceClassification"),lst.forEach(t),qxo=r(QLe," (DistilBERT model)"),QLe.forEach(t),Nxo=i(j),D1=n(j,"LI",{});var HLe=s(D1);Kce=n(HLe,"STRONG",{});var ist=s(Kce);jxo=r(ist,"electra"),ist.forEach(t),Dxo=r(HLe," \u2014 "),DD=n(HLe,"A",{href:!0});var dst=s(DD);Gxo=r(dst,"ElectraForSequenceClassification"),dst.forEach(t),Oxo=r(HLe," (ELECTRA model)"),HLe.forEach(t),Vxo=i(j),G1=n(j,"LI",{});var ULe=s(G1);Zce=n(ULe,"STRONG",{});var cst=s(Zce);Xxo=r(cst,"flaubert"),cst.forEach(t),zxo=r(ULe," \u2014 "),GD=n(ULe,"A",{href:!0});var fst=s(GD);Wxo=r(fst,"FlaubertForSequenceClassification"),fst.forEach(t),Qxo=r(ULe," (FlauBERT model)"),ULe.forEach(t),Hxo=i(j),O1=n(j,"LI",{});var JLe=s(O1);efe=n(JLe,"STRONG",{});var mst=s(efe);Uxo=r(mst,"fnet"),mst.forEach(t),Jxo=r(JLe," \u2014 "),OD=n(JLe,"A",{href:!0});var gst=s(OD);Yxo=r(gst,"FNetForSequenceClassification"),gst.forEach(t),Kxo=r(JLe," (FNet model)"),JLe.forEach(t),Zxo=i(j),V1=n(j,"LI",{});var YLe=s(V1);ofe=n(YLe,"STRONG",{});var hst=s(ofe);e9o=r(hst,"funnel"),hst.forEach(t),o9o=r(YLe," \u2014 "),VD=n(YLe,"A",{href:!0});var pst=s(VD);r9o=r(pst,"FunnelForSequenceClassification"),pst.forEach(t),t9o=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),a9o=i(j),X1=n(j,"LI",{});var KLe=s(X1);rfe=n(KLe,"STRONG",{});var ust=s(rfe);n9o=r(ust,"gpt2"),ust.forEach(t),s9o=r(KLe," \u2014 "),XD=n(KLe,"A",{href:!0});var _st=s(XD);l9o=r(_st,"GPT2ForSequenceClassification"),_st.forEach(t),i9o=r(KLe," (OpenAI GPT-2 model)"),KLe.forEach(t),d9o=i(j),z1=n(j,"LI",{});var ZLe=s(z1);tfe=n(ZLe,"STRONG",{});var bst=s(tfe);c9o=r(bst,"gpt_neo"),bst.forEach(t),f9o=r(ZLe," \u2014 "),zD=n(ZLe,"A",{href:!0});var vst=s(zD);m9o=r(vst,"GPTNeoForSequenceClassification"),vst.forEach(t),g9o=r(ZLe," (GPT Neo model)"),ZLe.forEach(t),h9o=i(j),W1=n(j,"LI",{});var e8e=s(W1);afe=n(e8e,"STRONG",{});var Fst=s(afe);p9o=r(Fst,"gptj"),Fst.forEach(t),u9o=r(e8e," \u2014 "),WD=n(e8e,"A",{href:!0});var Tst=s(WD);_9o=r(Tst,"GPTJForSequenceClassification"),Tst.forEach(t),b9o=r(e8e," (GPT-J model)"),e8e.forEach(t),v9o=i(j),Q1=n(j,"LI",{});var o8e=s(Q1);nfe=n(o8e,"STRONG",{});var Mst=s(nfe);F9o=r(Mst,"ibert"),Mst.forEach(t),T9o=r(o8e," \u2014 "),QD=n(o8e,"A",{href:!0});var Est=s(QD);M9o=r(Est,"IBertForSequenceClassification"),Est.forEach(t),E9o=r(o8e," (I-BERT model)"),o8e.forEach(t),C9o=i(j),H1=n(j,"LI",{});var r8e=s(H1);sfe=n(r8e,"STRONG",{});var Cst=s(sfe);w9o=r(Cst,"layoutlm"),Cst.forEach(t),A9o=r(r8e," \u2014 "),HD=n(r8e,"A",{href:!0});var wst=s(HD);y9o=r(wst,"LayoutLMForSequenceClassification"),wst.forEach(t),L9o=r(r8e," (LayoutLM model)"),r8e.forEach(t),x9o=i(j),U1=n(j,"LI",{});var t8e=s(U1);lfe=n(t8e,"STRONG",{});var Ast=s(lfe);$9o=r(Ast,"layoutlmv2"),Ast.forEach(t),k9o=r(t8e," \u2014 "),UD=n(t8e,"A",{href:!0});var yst=s(UD);S9o=r(yst,"LayoutLMv2ForSequenceClassification"),yst.forEach(t),R9o=r(t8e," (LayoutLMv2 model)"),t8e.forEach(t),P9o=i(j),J1=n(j,"LI",{});var a8e=s(J1);ife=n(a8e,"STRONG",{});var Lst=s(ife);B9o=r(Lst,"led"),Lst.forEach(t),I9o=r(a8e," \u2014 "),JD=n(a8e,"A",{href:!0});var xst=s(JD);q9o=r(xst,"LEDForSequenceClassification"),xst.forEach(t),N9o=r(a8e," (LED model)"),a8e.forEach(t),j9o=i(j),Y1=n(j,"LI",{});var n8e=s(Y1);dfe=n(n8e,"STRONG",{});var $st=s(dfe);D9o=r($st,"longformer"),$st.forEach(t),G9o=r(n8e," \u2014 "),YD=n(n8e,"A",{href:!0});var kst=s(YD);O9o=r(kst,"LongformerForSequenceClassification"),kst.forEach(t),V9o=r(n8e," (Longformer model)"),n8e.forEach(t),X9o=i(j),K1=n(j,"LI",{});var s8e=s(K1);cfe=n(s8e,"STRONG",{});var Sst=s(cfe);z9o=r(Sst,"mbart"),Sst.forEach(t),W9o=r(s8e," \u2014 "),KD=n(s8e,"A",{href:!0});var Rst=s(KD);Q9o=r(Rst,"MBartForSequenceClassification"),Rst.forEach(t),H9o=r(s8e," (mBART model)"),s8e.forEach(t),U9o=i(j),Z1=n(j,"LI",{});var l8e=s(Z1);ffe=n(l8e,"STRONG",{});var Pst=s(ffe);J9o=r(Pst,"megatron-bert"),Pst.forEach(t),Y9o=r(l8e," \u2014 "),ZD=n(l8e,"A",{href:!0});var Bst=s(ZD);K9o=r(Bst,"MegatronBertForSequenceClassification"),Bst.forEach(t),Z9o=r(l8e," (MegatronBert model)"),l8e.forEach(t),e$o=i(j),eb=n(j,"LI",{});var i8e=s(eb);mfe=n(i8e,"STRONG",{});var Ist=s(mfe);o$o=r(Ist,"mobilebert"),Ist.forEach(t),r$o=r(i8e," \u2014 "),eG=n(i8e,"A",{href:!0});var qst=s(eG);t$o=r(qst,"MobileBertForSequenceClassification"),qst.forEach(t),a$o=r(i8e," (MobileBERT model)"),i8e.forEach(t),n$o=i(j),ob=n(j,"LI",{});var d8e=s(ob);gfe=n(d8e,"STRONG",{});var Nst=s(gfe);s$o=r(Nst,"mpnet"),Nst.forEach(t),l$o=r(d8e," \u2014 "),oG=n(d8e,"A",{href:!0});var jst=s(oG);i$o=r(jst,"MPNetForSequenceClassification"),jst.forEach(t),d$o=r(d8e," (MPNet model)"),d8e.forEach(t),c$o=i(j),rb=n(j,"LI",{});var c8e=s(rb);hfe=n(c8e,"STRONG",{});var Dst=s(hfe);f$o=r(Dst,"nystromformer"),Dst.forEach(t),m$o=r(c8e," \u2014 "),rG=n(c8e,"A",{href:!0});var Gst=s(rG);g$o=r(Gst,"NystromformerForSequenceClassification"),Gst.forEach(t),h$o=r(c8e," (Nystromformer model)"),c8e.forEach(t),p$o=i(j),tb=n(j,"LI",{});var f8e=s(tb);pfe=n(f8e,"STRONG",{});var Ost=s(pfe);u$o=r(Ost,"openai-gpt"),Ost.forEach(t),_$o=r(f8e," \u2014 "),tG=n(f8e,"A",{href:!0});var Vst=s(tG);b$o=r(Vst,"OpenAIGPTForSequenceClassification"),Vst.forEach(t),v$o=r(f8e," (OpenAI GPT model)"),f8e.forEach(t),F$o=i(j),ab=n(j,"LI",{});var m8e=s(ab);ufe=n(m8e,"STRONG",{});var Xst=s(ufe);T$o=r(Xst,"perceiver"),Xst.forEach(t),M$o=r(m8e," \u2014 "),aG=n(m8e,"A",{href:!0});var zst=s(aG);E$o=r(zst,"PerceiverForSequenceClassification"),zst.forEach(t),C$o=r(m8e," (Perceiver model)"),m8e.forEach(t),w$o=i(j),nb=n(j,"LI",{});var g8e=s(nb);_fe=n(g8e,"STRONG",{});var Wst=s(_fe);A$o=r(Wst,"plbart"),Wst.forEach(t),y$o=r(g8e," \u2014 "),nG=n(g8e,"A",{href:!0});var Qst=s(nG);L$o=r(Qst,"PLBartForSequenceClassification"),Qst.forEach(t),x$o=r(g8e," (PLBart model)"),g8e.forEach(t),$$o=i(j),sb=n(j,"LI",{});var h8e=s(sb);bfe=n(h8e,"STRONG",{});var Hst=s(bfe);k$o=r(Hst,"qdqbert"),Hst.forEach(t),S$o=r(h8e," \u2014 "),sG=n(h8e,"A",{href:!0});var Ust=s(sG);R$o=r(Ust,"QDQBertForSequenceClassification"),Ust.forEach(t),P$o=r(h8e," (QDQBert model)"),h8e.forEach(t),B$o=i(j),lb=n(j,"LI",{});var p8e=s(lb);vfe=n(p8e,"STRONG",{});var Jst=s(vfe);I$o=r(Jst,"reformer"),Jst.forEach(t),q$o=r(p8e," \u2014 "),lG=n(p8e,"A",{href:!0});var Yst=s(lG);N$o=r(Yst,"ReformerForSequenceClassification"),Yst.forEach(t),j$o=r(p8e," (Reformer model)"),p8e.forEach(t),D$o=i(j),ib=n(j,"LI",{});var u8e=s(ib);Ffe=n(u8e,"STRONG",{});var Kst=s(Ffe);G$o=r(Kst,"rembert"),Kst.forEach(t),O$o=r(u8e," \u2014 "),iG=n(u8e,"A",{href:!0});var Zst=s(iG);V$o=r(Zst,"RemBertForSequenceClassification"),Zst.forEach(t),X$o=r(u8e," (RemBERT model)"),u8e.forEach(t),z$o=i(j),db=n(j,"LI",{});var _8e=s(db);Tfe=n(_8e,"STRONG",{});var elt=s(Tfe);W$o=r(elt,"roberta"),elt.forEach(t),Q$o=r(_8e," \u2014 "),dG=n(_8e,"A",{href:!0});var olt=s(dG);H$o=r(olt,"RobertaForSequenceClassification"),olt.forEach(t),U$o=r(_8e," (RoBERTa model)"),_8e.forEach(t),J$o=i(j),cb=n(j,"LI",{});var b8e=s(cb);Mfe=n(b8e,"STRONG",{});var rlt=s(Mfe);Y$o=r(rlt,"roformer"),rlt.forEach(t),K$o=r(b8e," \u2014 "),cG=n(b8e,"A",{href:!0});var tlt=s(cG);Z$o=r(tlt,"RoFormerForSequenceClassification"),tlt.forEach(t),eko=r(b8e," (RoFormer model)"),b8e.forEach(t),oko=i(j),fb=n(j,"LI",{});var v8e=s(fb);Efe=n(v8e,"STRONG",{});var alt=s(Efe);rko=r(alt,"squeezebert"),alt.forEach(t),tko=r(v8e," \u2014 "),fG=n(v8e,"A",{href:!0});var nlt=s(fG);ako=r(nlt,"SqueezeBertForSequenceClassification"),nlt.forEach(t),nko=r(v8e," (SqueezeBERT model)"),v8e.forEach(t),sko=i(j),mb=n(j,"LI",{});var F8e=s(mb);Cfe=n(F8e,"STRONG",{});var slt=s(Cfe);lko=r(slt,"tapas"),slt.forEach(t),iko=r(F8e," \u2014 "),mG=n(F8e,"A",{href:!0});var llt=s(mG);dko=r(llt,"TapasForSequenceClassification"),llt.forEach(t),cko=r(F8e," (TAPAS model)"),F8e.forEach(t),fko=i(j),gb=n(j,"LI",{});var T8e=s(gb);wfe=n(T8e,"STRONG",{});var ilt=s(wfe);mko=r(ilt,"transfo-xl"),ilt.forEach(t),gko=r(T8e," \u2014 "),gG=n(T8e,"A",{href:!0});var dlt=s(gG);hko=r(dlt,"TransfoXLForSequenceClassification"),dlt.forEach(t),pko=r(T8e," (Transformer-XL model)"),T8e.forEach(t),uko=i(j),hb=n(j,"LI",{});var M8e=s(hb);Afe=n(M8e,"STRONG",{});var clt=s(Afe);_ko=r(clt,"xlm"),clt.forEach(t),bko=r(M8e," \u2014 "),hG=n(M8e,"A",{href:!0});var flt=s(hG);vko=r(flt,"XLMForSequenceClassification"),flt.forEach(t),Fko=r(M8e," (XLM model)"),M8e.forEach(t),Tko=i(j),pb=n(j,"LI",{});var E8e=s(pb);yfe=n(E8e,"STRONG",{});var mlt=s(yfe);Mko=r(mlt,"xlm-roberta"),mlt.forEach(t),Eko=r(E8e," \u2014 "),pG=n(E8e,"A",{href:!0});var glt=s(pG);Cko=r(glt,"XLMRobertaForSequenceClassification"),glt.forEach(t),wko=r(E8e," (XLM-RoBERTa model)"),E8e.forEach(t),Ako=i(j),ub=n(j,"LI",{});var C8e=s(ub);Lfe=n(C8e,"STRONG",{});var hlt=s(Lfe);yko=r(hlt,"xlm-roberta-xl"),hlt.forEach(t),Lko=r(C8e," \u2014 "),uG=n(C8e,"A",{href:!0});var plt=s(uG);xko=r(plt,"XLMRobertaXLForSequenceClassification"),plt.forEach(t),$ko=r(C8e," (XLM-RoBERTa-XL model)"),C8e.forEach(t),kko=i(j),_b=n(j,"LI",{});var w8e=s(_b);xfe=n(w8e,"STRONG",{});var ult=s(xfe);Sko=r(ult,"xlnet"),ult.forEach(t),Rko=r(w8e," \u2014 "),_G=n(w8e,"A",{href:!0});var _lt=s(_G);Pko=r(_lt,"XLNetForSequenceClassification"),_lt.forEach(t),Bko=r(w8e," (XLNet model)"),w8e.forEach(t),Iko=i(j),bb=n(j,"LI",{});var A8e=s(bb);$fe=n(A8e,"STRONG",{});var blt=s($fe);qko=r(blt,"yoso"),blt.forEach(t),Nko=r(A8e," \u2014 "),bG=n(A8e,"A",{href:!0});var vlt=s(bG);jko=r(vlt,"YosoForSequenceClassification"),vlt.forEach(t),Dko=r(A8e," (YOSO model)"),A8e.forEach(t),j.forEach(t),Gko=i(sa),vb=n(sa,"P",{});var y8e=s(vb);Oko=r(y8e,"The model is set in evaluation mode by default using "),kfe=n(y8e,"CODE",{});var Flt=s(kfe);Vko=r(Flt,"model.eval()"),Flt.forEach(t),Xko=r(y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(y8e,"CODE",{});var Tlt=s(Sfe);zko=r(Tlt,"model.train()"),Tlt.forEach(t),y8e.forEach(t),Wko=i(sa),T(Fb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),YIe=i(f),Vi=n(f,"H2",{class:!0});var oje=s(Vi);Tb=n(oje,"A",{id:!0,class:!0,href:!0});var Mlt=s(Tb);Rfe=n(Mlt,"SPAN",{});var Elt=s(Rfe);T(dy.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),Qko=i(oje),Pfe=n(oje,"SPAN",{});var Clt=s(Pfe);Hko=r(Clt,"AutoModelForMultipleChoice"),Clt.forEach(t),oje.forEach(t),KIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(cy.$$.fragment,Qs),Uko=i(Qs),Xi=n(Qs,"P",{});var GK=s(Xi);Jko=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=n(GK,"A",{href:!0});var wlt=s(vG);Yko=r(wlt,"from_pretrained()"),wlt.forEach(t),Kko=r(GK," class method or the "),FG=n(GK,"A",{href:!0});var Alt=s(FG);Zko=r(Alt,"from_config()"),Alt.forEach(t),eSo=r(GK,` class
method.`),GK.forEach(t),oSo=i(Qs),fy=n(Qs,"P",{});var rje=s(fy);rSo=r(rje,"This class cannot be instantiated directly using "),Bfe=n(rje,"CODE",{});var ylt=s(Bfe);tSo=r(ylt,"__init__()"),ylt.forEach(t),aSo=r(rje," (throws an error)."),rje.forEach(t),nSo=i(Qs),dt=n(Qs,"DIV",{class:!0});var EA=s(dt);T(my.$$.fragment,EA),sSo=i(EA),Ife=n(EA,"P",{});var Llt=s(Ife);lSo=r(Llt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Llt.forEach(t),iSo=i(EA),zi=n(EA,"P",{});var OK=s(zi);dSo=r(OK,`Note:
Loading a model from its configuration file does `),qfe=n(OK,"STRONG",{});var xlt=s(qfe);cSo=r(xlt,"not"),xlt.forEach(t),fSo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(OK,"A",{href:!0});var $lt=s(TG);mSo=r($lt,"from_pretrained()"),$lt.forEach(t),gSo=r(OK," to load the model weights."),OK.forEach(t),hSo=i(EA),T(Mb.$$.fragment,EA),EA.forEach(t),pSo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(gy.$$.fragment,la),uSo=i(la),Nfe=n(la,"P",{});var klt=s(Nfe);_So=r(klt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),klt.forEach(t),bSo=i(la),Pa=n(la,"P",{});var CA=s(Pa);vSo=r(CA,"The model class to instantiate is selected based on the "),jfe=n(CA,"CODE",{});var Slt=s(jfe);FSo=r(Slt,"model_type"),Slt.forEach(t),TSo=r(CA,` property of the config object (either
passed as an argument or loaded from `),Dfe=n(CA,"CODE",{});var Rlt=s(Dfe);MSo=r(Rlt,"pretrained_model_name_or_path"),Rlt.forEach(t),ESo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=n(CA,"CODE",{});var Plt=s(Gfe);CSo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),wSo=r(CA,":"),CA.forEach(t),ASo=i(la),Y=n(la,"UL",{});var K=s(Y);Eb=n(K,"LI",{});var L8e=s(Eb);Ofe=n(L8e,"STRONG",{});var Blt=s(Ofe);ySo=r(Blt,"albert"),Blt.forEach(t),LSo=r(L8e," \u2014 "),MG=n(L8e,"A",{href:!0});var Ilt=s(MG);xSo=r(Ilt,"AlbertForMultipleChoice"),Ilt.forEach(t),$So=r(L8e," (ALBERT model)"),L8e.forEach(t),kSo=i(K),Cb=n(K,"LI",{});var x8e=s(Cb);Vfe=n(x8e,"STRONG",{});var qlt=s(Vfe);SSo=r(qlt,"bert"),qlt.forEach(t),RSo=r(x8e," \u2014 "),EG=n(x8e,"A",{href:!0});var Nlt=s(EG);PSo=r(Nlt,"BertForMultipleChoice"),Nlt.forEach(t),BSo=r(x8e," (BERT model)"),x8e.forEach(t),ISo=i(K),wb=n(K,"LI",{});var $8e=s(wb);Xfe=n($8e,"STRONG",{});var jlt=s(Xfe);qSo=r(jlt,"big_bird"),jlt.forEach(t),NSo=r($8e," \u2014 "),CG=n($8e,"A",{href:!0});var Dlt=s(CG);jSo=r(Dlt,"BigBirdForMultipleChoice"),Dlt.forEach(t),DSo=r($8e," (BigBird model)"),$8e.forEach(t),GSo=i(K),Ab=n(K,"LI",{});var k8e=s(Ab);zfe=n(k8e,"STRONG",{});var Glt=s(zfe);OSo=r(Glt,"camembert"),Glt.forEach(t),VSo=r(k8e," \u2014 "),wG=n(k8e,"A",{href:!0});var Olt=s(wG);XSo=r(Olt,"CamembertForMultipleChoice"),Olt.forEach(t),zSo=r(k8e," (CamemBERT model)"),k8e.forEach(t),WSo=i(K),yb=n(K,"LI",{});var S8e=s(yb);Wfe=n(S8e,"STRONG",{});var Vlt=s(Wfe);QSo=r(Vlt,"canine"),Vlt.forEach(t),HSo=r(S8e," \u2014 "),AG=n(S8e,"A",{href:!0});var Xlt=s(AG);USo=r(Xlt,"CanineForMultipleChoice"),Xlt.forEach(t),JSo=r(S8e," (Canine model)"),S8e.forEach(t),YSo=i(K),Lb=n(K,"LI",{});var R8e=s(Lb);Qfe=n(R8e,"STRONG",{});var zlt=s(Qfe);KSo=r(zlt,"convbert"),zlt.forEach(t),ZSo=r(R8e," \u2014 "),yG=n(R8e,"A",{href:!0});var Wlt=s(yG);eRo=r(Wlt,"ConvBertForMultipleChoice"),Wlt.forEach(t),oRo=r(R8e," (ConvBERT model)"),R8e.forEach(t),rRo=i(K),xb=n(K,"LI",{});var P8e=s(xb);Hfe=n(P8e,"STRONG",{});var Qlt=s(Hfe);tRo=r(Qlt,"data2vec-text"),Qlt.forEach(t),aRo=r(P8e," \u2014 "),LG=n(P8e,"A",{href:!0});var Hlt=s(LG);nRo=r(Hlt,"Data2VecTextForMultipleChoice"),Hlt.forEach(t),sRo=r(P8e," (Data2VecText model)"),P8e.forEach(t),lRo=i(K),$b=n(K,"LI",{});var B8e=s($b);Ufe=n(B8e,"STRONG",{});var Ult=s(Ufe);iRo=r(Ult,"deberta-v2"),Ult.forEach(t),dRo=r(B8e," \u2014 "),xG=n(B8e,"A",{href:!0});var Jlt=s(xG);cRo=r(Jlt,"DebertaV2ForMultipleChoice"),Jlt.forEach(t),fRo=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),mRo=i(K),kb=n(K,"LI",{});var I8e=s(kb);Jfe=n(I8e,"STRONG",{});var Ylt=s(Jfe);gRo=r(Ylt,"distilbert"),Ylt.forEach(t),hRo=r(I8e," \u2014 "),$G=n(I8e,"A",{href:!0});var Klt=s($G);pRo=r(Klt,"DistilBertForMultipleChoice"),Klt.forEach(t),uRo=r(I8e," (DistilBERT model)"),I8e.forEach(t),_Ro=i(K),Sb=n(K,"LI",{});var q8e=s(Sb);Yfe=n(q8e,"STRONG",{});var Zlt=s(Yfe);bRo=r(Zlt,"electra"),Zlt.forEach(t),vRo=r(q8e," \u2014 "),kG=n(q8e,"A",{href:!0});var eit=s(kG);FRo=r(eit,"ElectraForMultipleChoice"),eit.forEach(t),TRo=r(q8e," (ELECTRA model)"),q8e.forEach(t),MRo=i(K),Rb=n(K,"LI",{});var N8e=s(Rb);Kfe=n(N8e,"STRONG",{});var oit=s(Kfe);ERo=r(oit,"flaubert"),oit.forEach(t),CRo=r(N8e," \u2014 "),SG=n(N8e,"A",{href:!0});var rit=s(SG);wRo=r(rit,"FlaubertForMultipleChoice"),rit.forEach(t),ARo=r(N8e," (FlauBERT model)"),N8e.forEach(t),yRo=i(K),Pb=n(K,"LI",{});var j8e=s(Pb);Zfe=n(j8e,"STRONG",{});var tit=s(Zfe);LRo=r(tit,"fnet"),tit.forEach(t),xRo=r(j8e," \u2014 "),RG=n(j8e,"A",{href:!0});var ait=s(RG);$Ro=r(ait,"FNetForMultipleChoice"),ait.forEach(t),kRo=r(j8e," (FNet model)"),j8e.forEach(t),SRo=i(K),Bb=n(K,"LI",{});var D8e=s(Bb);eme=n(D8e,"STRONG",{});var nit=s(eme);RRo=r(nit,"funnel"),nit.forEach(t),PRo=r(D8e," \u2014 "),PG=n(D8e,"A",{href:!0});var sit=s(PG);BRo=r(sit,"FunnelForMultipleChoice"),sit.forEach(t),IRo=r(D8e," (Funnel Transformer model)"),D8e.forEach(t),qRo=i(K),Ib=n(K,"LI",{});var G8e=s(Ib);ome=n(G8e,"STRONG",{});var lit=s(ome);NRo=r(lit,"ibert"),lit.forEach(t),jRo=r(G8e," \u2014 "),BG=n(G8e,"A",{href:!0});var iit=s(BG);DRo=r(iit,"IBertForMultipleChoice"),iit.forEach(t),GRo=r(G8e," (I-BERT model)"),G8e.forEach(t),ORo=i(K),qb=n(K,"LI",{});var O8e=s(qb);rme=n(O8e,"STRONG",{});var dit=s(rme);VRo=r(dit,"longformer"),dit.forEach(t),XRo=r(O8e," \u2014 "),IG=n(O8e,"A",{href:!0});var cit=s(IG);zRo=r(cit,"LongformerForMultipleChoice"),cit.forEach(t),WRo=r(O8e," (Longformer model)"),O8e.forEach(t),QRo=i(K),Nb=n(K,"LI",{});var V8e=s(Nb);tme=n(V8e,"STRONG",{});var fit=s(tme);HRo=r(fit,"megatron-bert"),fit.forEach(t),URo=r(V8e," \u2014 "),qG=n(V8e,"A",{href:!0});var mit=s(qG);JRo=r(mit,"MegatronBertForMultipleChoice"),mit.forEach(t),YRo=r(V8e," (MegatronBert model)"),V8e.forEach(t),KRo=i(K),jb=n(K,"LI",{});var X8e=s(jb);ame=n(X8e,"STRONG",{});var git=s(ame);ZRo=r(git,"mobilebert"),git.forEach(t),ePo=r(X8e," \u2014 "),NG=n(X8e,"A",{href:!0});var hit=s(NG);oPo=r(hit,"MobileBertForMultipleChoice"),hit.forEach(t),rPo=r(X8e," (MobileBERT model)"),X8e.forEach(t),tPo=i(K),Db=n(K,"LI",{});var z8e=s(Db);nme=n(z8e,"STRONG",{});var pit=s(nme);aPo=r(pit,"mpnet"),pit.forEach(t),nPo=r(z8e," \u2014 "),jG=n(z8e,"A",{href:!0});var uit=s(jG);sPo=r(uit,"MPNetForMultipleChoice"),uit.forEach(t),lPo=r(z8e," (MPNet model)"),z8e.forEach(t),iPo=i(K),Gb=n(K,"LI",{});var W8e=s(Gb);sme=n(W8e,"STRONG",{});var _it=s(sme);dPo=r(_it,"nystromformer"),_it.forEach(t),cPo=r(W8e," \u2014 "),DG=n(W8e,"A",{href:!0});var bit=s(DG);fPo=r(bit,"NystromformerForMultipleChoice"),bit.forEach(t),mPo=r(W8e," (Nystromformer model)"),W8e.forEach(t),gPo=i(K),Ob=n(K,"LI",{});var Q8e=s(Ob);lme=n(Q8e,"STRONG",{});var vit=s(lme);hPo=r(vit,"qdqbert"),vit.forEach(t),pPo=r(Q8e," \u2014 "),GG=n(Q8e,"A",{href:!0});var Fit=s(GG);uPo=r(Fit,"QDQBertForMultipleChoice"),Fit.forEach(t),_Po=r(Q8e," (QDQBert model)"),Q8e.forEach(t),bPo=i(K),Vb=n(K,"LI",{});var H8e=s(Vb);ime=n(H8e,"STRONG",{});var Tit=s(ime);vPo=r(Tit,"rembert"),Tit.forEach(t),FPo=r(H8e," \u2014 "),OG=n(H8e,"A",{href:!0});var Mit=s(OG);TPo=r(Mit,"RemBertForMultipleChoice"),Mit.forEach(t),MPo=r(H8e," (RemBERT model)"),H8e.forEach(t),EPo=i(K),Xb=n(K,"LI",{});var U8e=s(Xb);dme=n(U8e,"STRONG",{});var Eit=s(dme);CPo=r(Eit,"roberta"),Eit.forEach(t),wPo=r(U8e," \u2014 "),VG=n(U8e,"A",{href:!0});var Cit=s(VG);APo=r(Cit,"RobertaForMultipleChoice"),Cit.forEach(t),yPo=r(U8e," (RoBERTa model)"),U8e.forEach(t),LPo=i(K),zb=n(K,"LI",{});var J8e=s(zb);cme=n(J8e,"STRONG",{});var wit=s(cme);xPo=r(wit,"roformer"),wit.forEach(t),$Po=r(J8e," \u2014 "),XG=n(J8e,"A",{href:!0});var Ait=s(XG);kPo=r(Ait,"RoFormerForMultipleChoice"),Ait.forEach(t),SPo=r(J8e," (RoFormer model)"),J8e.forEach(t),RPo=i(K),Wb=n(K,"LI",{});var Y8e=s(Wb);fme=n(Y8e,"STRONG",{});var yit=s(fme);PPo=r(yit,"squeezebert"),yit.forEach(t),BPo=r(Y8e," \u2014 "),zG=n(Y8e,"A",{href:!0});var Lit=s(zG);IPo=r(Lit,"SqueezeBertForMultipleChoice"),Lit.forEach(t),qPo=r(Y8e," (SqueezeBERT model)"),Y8e.forEach(t),NPo=i(K),Qb=n(K,"LI",{});var K8e=s(Qb);mme=n(K8e,"STRONG",{});var xit=s(mme);jPo=r(xit,"xlm"),xit.forEach(t),DPo=r(K8e," \u2014 "),WG=n(K8e,"A",{href:!0});var $it=s(WG);GPo=r($it,"XLMForMultipleChoice"),$it.forEach(t),OPo=r(K8e," (XLM model)"),K8e.forEach(t),VPo=i(K),Hb=n(K,"LI",{});var Z8e=s(Hb);gme=n(Z8e,"STRONG",{});var kit=s(gme);XPo=r(kit,"xlm-roberta"),kit.forEach(t),zPo=r(Z8e," \u2014 "),QG=n(Z8e,"A",{href:!0});var Sit=s(QG);WPo=r(Sit,"XLMRobertaForMultipleChoice"),Sit.forEach(t),QPo=r(Z8e," (XLM-RoBERTa model)"),Z8e.forEach(t),HPo=i(K),Ub=n(K,"LI",{});var exe=s(Ub);hme=n(exe,"STRONG",{});var Rit=s(hme);UPo=r(Rit,"xlm-roberta-xl"),Rit.forEach(t),JPo=r(exe," \u2014 "),HG=n(exe,"A",{href:!0});var Pit=s(HG);YPo=r(Pit,"XLMRobertaXLForMultipleChoice"),Pit.forEach(t),KPo=r(exe," (XLM-RoBERTa-XL model)"),exe.forEach(t),ZPo=i(K),Jb=n(K,"LI",{});var oxe=s(Jb);pme=n(oxe,"STRONG",{});var Bit=s(pme);eBo=r(Bit,"xlnet"),Bit.forEach(t),oBo=r(oxe," \u2014 "),UG=n(oxe,"A",{href:!0});var Iit=s(UG);rBo=r(Iit,"XLNetForMultipleChoice"),Iit.forEach(t),tBo=r(oxe," (XLNet model)"),oxe.forEach(t),aBo=i(K),Yb=n(K,"LI",{});var rxe=s(Yb);ume=n(rxe,"STRONG",{});var qit=s(ume);nBo=r(qit,"yoso"),qit.forEach(t),sBo=r(rxe," \u2014 "),JG=n(rxe,"A",{href:!0});var Nit=s(JG);lBo=r(Nit,"YosoForMultipleChoice"),Nit.forEach(t),iBo=r(rxe," (YOSO model)"),rxe.forEach(t),K.forEach(t),dBo=i(la),Kb=n(la,"P",{});var txe=s(Kb);cBo=r(txe,"The model is set in evaluation mode by default using "),_me=n(txe,"CODE",{});var jit=s(_me);fBo=r(jit,"model.eval()"),jit.forEach(t),mBo=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(txe,"CODE",{});var Dit=s(bme);gBo=r(Dit,"model.train()"),Dit.forEach(t),txe.forEach(t),hBo=i(la),T(Zb.$$.fragment,la),la.forEach(t),Qs.forEach(t),ZIe=i(f),Wi=n(f,"H2",{class:!0});var tje=s(Wi);e4=n(tje,"A",{id:!0,class:!0,href:!0});var Git=s(e4);vme=n(Git,"SPAN",{});var Oit=s(vme);T(hy.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),pBo=i(tje),Fme=n(tje,"SPAN",{});var Vit=s(Fme);uBo=r(Vit,"AutoModelForNextSentencePrediction"),Vit.forEach(t),tje.forEach(t),eqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(py.$$.fragment,Hs),_Bo=i(Hs),Qi=n(Hs,"P",{});var VK=s(Qi);bBo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=n(VK,"A",{href:!0});var Xit=s(YG);vBo=r(Xit,"from_pretrained()"),Xit.forEach(t),FBo=r(VK," class method or the "),KG=n(VK,"A",{href:!0});var zit=s(KG);TBo=r(zit,"from_config()"),zit.forEach(t),MBo=r(VK,` class
method.`),VK.forEach(t),EBo=i(Hs),uy=n(Hs,"P",{});var aje=s(uy);CBo=r(aje,"This class cannot be instantiated directly using "),Tme=n(aje,"CODE",{});var Wit=s(Tme);wBo=r(Wit,"__init__()"),Wit.forEach(t),ABo=r(aje," (throws an error)."),aje.forEach(t),yBo=i(Hs),ct=n(Hs,"DIV",{class:!0});var wA=s(ct);T(_y.$$.fragment,wA),LBo=i(wA),Mme=n(wA,"P",{});var Qit=s(Mme);xBo=r(Qit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qit.forEach(t),$Bo=i(wA),Hi=n(wA,"P",{});var XK=s(Hi);kBo=r(XK,`Note:
Loading a model from its configuration file does `),Eme=n(XK,"STRONG",{});var Hit=s(Eme);SBo=r(Hit,"not"),Hit.forEach(t),RBo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(XK,"A",{href:!0});var Uit=s(ZG);PBo=r(Uit,"from_pretrained()"),Uit.forEach(t),BBo=r(XK," to load the model weights."),XK.forEach(t),IBo=i(wA),T(o4.$$.fragment,wA),wA.forEach(t),qBo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(by.$$.fragment,ia),NBo=i(ia),Cme=n(ia,"P",{});var Jit=s(Cme);jBo=r(Jit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jit.forEach(t),DBo=i(ia),Ba=n(ia,"P",{});var AA=s(Ba);GBo=r(AA,"The model class to instantiate is selected based on the "),wme=n(AA,"CODE",{});var Yit=s(wme);OBo=r(Yit,"model_type"),Yit.forEach(t),VBo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Ame=n(AA,"CODE",{});var Kit=s(Ame);XBo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),zBo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(AA,"CODE",{});var Zit=s(yme);WBo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),QBo=r(AA,":"),AA.forEach(t),HBo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);r4=n(Us,"LI",{});var axe=s(r4);Lme=n(axe,"STRONG",{});var edt=s(Lme);UBo=r(edt,"bert"),edt.forEach(t),JBo=r(axe," \u2014 "),eO=n(axe,"A",{href:!0});var odt=s(eO);YBo=r(odt,"BertForNextSentencePrediction"),odt.forEach(t),KBo=r(axe," (BERT model)"),axe.forEach(t),ZBo=i(Us),t4=n(Us,"LI",{});var nxe=s(t4);xme=n(nxe,"STRONG",{});var rdt=s(xme);eIo=r(rdt,"fnet"),rdt.forEach(t),oIo=r(nxe," \u2014 "),oO=n(nxe,"A",{href:!0});var tdt=s(oO);rIo=r(tdt,"FNetForNextSentencePrediction"),tdt.forEach(t),tIo=r(nxe," (FNet model)"),nxe.forEach(t),aIo=i(Us),a4=n(Us,"LI",{});var sxe=s(a4);$me=n(sxe,"STRONG",{});var adt=s($me);nIo=r(adt,"megatron-bert"),adt.forEach(t),sIo=r(sxe," \u2014 "),rO=n(sxe,"A",{href:!0});var ndt=s(rO);lIo=r(ndt,"MegatronBertForNextSentencePrediction"),ndt.forEach(t),iIo=r(sxe," (MegatronBert model)"),sxe.forEach(t),dIo=i(Us),n4=n(Us,"LI",{});var lxe=s(n4);kme=n(lxe,"STRONG",{});var sdt=s(kme);cIo=r(sdt,"mobilebert"),sdt.forEach(t),fIo=r(lxe," \u2014 "),tO=n(lxe,"A",{href:!0});var ldt=s(tO);mIo=r(ldt,"MobileBertForNextSentencePrediction"),ldt.forEach(t),gIo=r(lxe," (MobileBERT model)"),lxe.forEach(t),hIo=i(Us),s4=n(Us,"LI",{});var ixe=s(s4);Sme=n(ixe,"STRONG",{});var idt=s(Sme);pIo=r(idt,"qdqbert"),idt.forEach(t),uIo=r(ixe," \u2014 "),aO=n(ixe,"A",{href:!0});var ddt=s(aO);_Io=r(ddt,"QDQBertForNextSentencePrediction"),ddt.forEach(t),bIo=r(ixe," (QDQBert model)"),ixe.forEach(t),Us.forEach(t),vIo=i(ia),l4=n(ia,"P",{});var dxe=s(l4);FIo=r(dxe,"The model is set in evaluation mode by default using "),Rme=n(dxe,"CODE",{});var cdt=s(Rme);TIo=r(cdt,"model.eval()"),cdt.forEach(t),MIo=r(dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n(dxe,"CODE",{});var fdt=s(Pme);EIo=r(fdt,"model.train()"),fdt.forEach(t),dxe.forEach(t),CIo=i(ia),T(i4.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),oqe=i(f),Ui=n(f,"H2",{class:!0});var nje=s(Ui);d4=n(nje,"A",{id:!0,class:!0,href:!0});var mdt=s(d4);Bme=n(mdt,"SPAN",{});var gdt=s(Bme);T(vy.$$.fragment,gdt),gdt.forEach(t),mdt.forEach(t),wIo=i(nje),Ime=n(nje,"SPAN",{});var hdt=s(Ime);AIo=r(hdt,"AutoModelForTokenClassification"),hdt.forEach(t),nje.forEach(t),rqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Fy.$$.fragment,Js),yIo=i(Js),Ji=n(Js,"P",{});var zK=s(Ji);LIo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=n(zK,"A",{href:!0});var pdt=s(nO);xIo=r(pdt,"from_pretrained()"),pdt.forEach(t),$Io=r(zK," class method or the "),sO=n(zK,"A",{href:!0});var udt=s(sO);kIo=r(udt,"from_config()"),udt.forEach(t),SIo=r(zK,` class
method.`),zK.forEach(t),RIo=i(Js),Ty=n(Js,"P",{});var sje=s(Ty);PIo=r(sje,"This class cannot be instantiated directly using "),qme=n(sje,"CODE",{});var _dt=s(qme);BIo=r(_dt,"__init__()"),_dt.forEach(t),IIo=r(sje," (throws an error)."),sje.forEach(t),qIo=i(Js),ft=n(Js,"DIV",{class:!0});var yA=s(ft);T(My.$$.fragment,yA),NIo=i(yA),Nme=n(yA,"P",{});var bdt=s(Nme);jIo=r(bdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bdt.forEach(t),DIo=i(yA),Yi=n(yA,"P",{});var WK=s(Yi);GIo=r(WK,`Note:
Loading a model from its configuration file does `),jme=n(WK,"STRONG",{});var vdt=s(jme);OIo=r(vdt,"not"),vdt.forEach(t),VIo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(WK,"A",{href:!0});var Fdt=s(lO);XIo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),zIo=r(WK," to load the model weights."),WK.forEach(t),WIo=i(yA),T(c4.$$.fragment,yA),yA.forEach(t),QIo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Ey.$$.fragment,da),HIo=i(da),Dme=n(da,"P",{});var Tdt=s(Dme);UIo=r(Tdt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tdt.forEach(t),JIo=i(da),Ia=n(da,"P",{});var LA=s(Ia);YIo=r(LA,"The model class to instantiate is selected based on the "),Gme=n(LA,"CODE",{});var Mdt=s(Gme);KIo=r(Mdt,"model_type"),Mdt.forEach(t),ZIo=r(LA,` property of the config object (either
passed as an argument or loaded from `),Ome=n(LA,"CODE",{});var Edt=s(Ome);eqo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),oqo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(LA,"CODE",{});var Cdt=s(Vme);rqo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),tqo=r(LA,":"),LA.forEach(t),aqo=i(da),U=n(da,"UL",{});var J=s(U);f4=n(J,"LI",{});var cxe=s(f4);Xme=n(cxe,"STRONG",{});var wdt=s(Xme);nqo=r(wdt,"albert"),wdt.forEach(t),sqo=r(cxe," \u2014 "),iO=n(cxe,"A",{href:!0});var Adt=s(iO);lqo=r(Adt,"AlbertForTokenClassification"),Adt.forEach(t),iqo=r(cxe," (ALBERT model)"),cxe.forEach(t),dqo=i(J),m4=n(J,"LI",{});var fxe=s(m4);zme=n(fxe,"STRONG",{});var ydt=s(zme);cqo=r(ydt,"bert"),ydt.forEach(t),fqo=r(fxe," \u2014 "),dO=n(fxe,"A",{href:!0});var Ldt=s(dO);mqo=r(Ldt,"BertForTokenClassification"),Ldt.forEach(t),gqo=r(fxe," (BERT model)"),fxe.forEach(t),hqo=i(J),g4=n(J,"LI",{});var mxe=s(g4);Wme=n(mxe,"STRONG",{});var xdt=s(Wme);pqo=r(xdt,"big_bird"),xdt.forEach(t),uqo=r(mxe," \u2014 "),cO=n(mxe,"A",{href:!0});var $dt=s(cO);_qo=r($dt,"BigBirdForTokenClassification"),$dt.forEach(t),bqo=r(mxe," (BigBird model)"),mxe.forEach(t),vqo=i(J),h4=n(J,"LI",{});var gxe=s(h4);Qme=n(gxe,"STRONG",{});var kdt=s(Qme);Fqo=r(kdt,"camembert"),kdt.forEach(t),Tqo=r(gxe," \u2014 "),fO=n(gxe,"A",{href:!0});var Sdt=s(fO);Mqo=r(Sdt,"CamembertForTokenClassification"),Sdt.forEach(t),Eqo=r(gxe," (CamemBERT model)"),gxe.forEach(t),Cqo=i(J),p4=n(J,"LI",{});var hxe=s(p4);Hme=n(hxe,"STRONG",{});var Rdt=s(Hme);wqo=r(Rdt,"canine"),Rdt.forEach(t),Aqo=r(hxe," \u2014 "),mO=n(hxe,"A",{href:!0});var Pdt=s(mO);yqo=r(Pdt,"CanineForTokenClassification"),Pdt.forEach(t),Lqo=r(hxe," (Canine model)"),hxe.forEach(t),xqo=i(J),u4=n(J,"LI",{});var pxe=s(u4);Ume=n(pxe,"STRONG",{});var Bdt=s(Ume);$qo=r(Bdt,"convbert"),Bdt.forEach(t),kqo=r(pxe," \u2014 "),gO=n(pxe,"A",{href:!0});var Idt=s(gO);Sqo=r(Idt,"ConvBertForTokenClassification"),Idt.forEach(t),Rqo=r(pxe," (ConvBERT model)"),pxe.forEach(t),Pqo=i(J),_4=n(J,"LI",{});var uxe=s(_4);Jme=n(uxe,"STRONG",{});var qdt=s(Jme);Bqo=r(qdt,"data2vec-text"),qdt.forEach(t),Iqo=r(uxe," \u2014 "),hO=n(uxe,"A",{href:!0});var Ndt=s(hO);qqo=r(Ndt,"Data2VecTextForTokenClassification"),Ndt.forEach(t),Nqo=r(uxe," (Data2VecText model)"),uxe.forEach(t),jqo=i(J),b4=n(J,"LI",{});var _xe=s(b4);Yme=n(_xe,"STRONG",{});var jdt=s(Yme);Dqo=r(jdt,"deberta"),jdt.forEach(t),Gqo=r(_xe," \u2014 "),pO=n(_xe,"A",{href:!0});var Ddt=s(pO);Oqo=r(Ddt,"DebertaForTokenClassification"),Ddt.forEach(t),Vqo=r(_xe," (DeBERTa model)"),_xe.forEach(t),Xqo=i(J),v4=n(J,"LI",{});var bxe=s(v4);Kme=n(bxe,"STRONG",{});var Gdt=s(Kme);zqo=r(Gdt,"deberta-v2"),Gdt.forEach(t),Wqo=r(bxe," \u2014 "),uO=n(bxe,"A",{href:!0});var Odt=s(uO);Qqo=r(Odt,"DebertaV2ForTokenClassification"),Odt.forEach(t),Hqo=r(bxe," (DeBERTa-v2 model)"),bxe.forEach(t),Uqo=i(J),F4=n(J,"LI",{});var vxe=s(F4);Zme=n(vxe,"STRONG",{});var Vdt=s(Zme);Jqo=r(Vdt,"distilbert"),Vdt.forEach(t),Yqo=r(vxe," \u2014 "),_O=n(vxe,"A",{href:!0});var Xdt=s(_O);Kqo=r(Xdt,"DistilBertForTokenClassification"),Xdt.forEach(t),Zqo=r(vxe," (DistilBERT model)"),vxe.forEach(t),eNo=i(J),T4=n(J,"LI",{});var Fxe=s(T4);ege=n(Fxe,"STRONG",{});var zdt=s(ege);oNo=r(zdt,"electra"),zdt.forEach(t),rNo=r(Fxe," \u2014 "),bO=n(Fxe,"A",{href:!0});var Wdt=s(bO);tNo=r(Wdt,"ElectraForTokenClassification"),Wdt.forEach(t),aNo=r(Fxe," (ELECTRA model)"),Fxe.forEach(t),nNo=i(J),M4=n(J,"LI",{});var Txe=s(M4);oge=n(Txe,"STRONG",{});var Qdt=s(oge);sNo=r(Qdt,"flaubert"),Qdt.forEach(t),lNo=r(Txe," \u2014 "),vO=n(Txe,"A",{href:!0});var Hdt=s(vO);iNo=r(Hdt,"FlaubertForTokenClassification"),Hdt.forEach(t),dNo=r(Txe," (FlauBERT model)"),Txe.forEach(t),cNo=i(J),E4=n(J,"LI",{});var Mxe=s(E4);rge=n(Mxe,"STRONG",{});var Udt=s(rge);fNo=r(Udt,"fnet"),Udt.forEach(t),mNo=r(Mxe," \u2014 "),FO=n(Mxe,"A",{href:!0});var Jdt=s(FO);gNo=r(Jdt,"FNetForTokenClassification"),Jdt.forEach(t),hNo=r(Mxe," (FNet model)"),Mxe.forEach(t),pNo=i(J),C4=n(J,"LI",{});var Exe=s(C4);tge=n(Exe,"STRONG",{});var Ydt=s(tge);uNo=r(Ydt,"funnel"),Ydt.forEach(t),_No=r(Exe," \u2014 "),TO=n(Exe,"A",{href:!0});var Kdt=s(TO);bNo=r(Kdt,"FunnelForTokenClassification"),Kdt.forEach(t),vNo=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),FNo=i(J),w4=n(J,"LI",{});var Cxe=s(w4);age=n(Cxe,"STRONG",{});var Zdt=s(age);TNo=r(Zdt,"gpt2"),Zdt.forEach(t),MNo=r(Cxe," \u2014 "),MO=n(Cxe,"A",{href:!0});var ect=s(MO);ENo=r(ect,"GPT2ForTokenClassification"),ect.forEach(t),CNo=r(Cxe," (OpenAI GPT-2 model)"),Cxe.forEach(t),wNo=i(J),A4=n(J,"LI",{});var wxe=s(A4);nge=n(wxe,"STRONG",{});var oct=s(nge);ANo=r(oct,"ibert"),oct.forEach(t),yNo=r(wxe," \u2014 "),EO=n(wxe,"A",{href:!0});var rct=s(EO);LNo=r(rct,"IBertForTokenClassification"),rct.forEach(t),xNo=r(wxe," (I-BERT model)"),wxe.forEach(t),$No=i(J),y4=n(J,"LI",{});var Axe=s(y4);sge=n(Axe,"STRONG",{});var tct=s(sge);kNo=r(tct,"layoutlm"),tct.forEach(t),SNo=r(Axe," \u2014 "),CO=n(Axe,"A",{href:!0});var act=s(CO);RNo=r(act,"LayoutLMForTokenClassification"),act.forEach(t),PNo=r(Axe," (LayoutLM model)"),Axe.forEach(t),BNo=i(J),L4=n(J,"LI",{});var yxe=s(L4);lge=n(yxe,"STRONG",{});var nct=s(lge);INo=r(nct,"layoutlmv2"),nct.forEach(t),qNo=r(yxe," \u2014 "),wO=n(yxe,"A",{href:!0});var sct=s(wO);NNo=r(sct,"LayoutLMv2ForTokenClassification"),sct.forEach(t),jNo=r(yxe," (LayoutLMv2 model)"),yxe.forEach(t),DNo=i(J),x4=n(J,"LI",{});var Lxe=s(x4);ige=n(Lxe,"STRONG",{});var lct=s(ige);GNo=r(lct,"longformer"),lct.forEach(t),ONo=r(Lxe," \u2014 "),AO=n(Lxe,"A",{href:!0});var ict=s(AO);VNo=r(ict,"LongformerForTokenClassification"),ict.forEach(t),XNo=r(Lxe," (Longformer model)"),Lxe.forEach(t),zNo=i(J),$4=n(J,"LI",{});var xxe=s($4);dge=n(xxe,"STRONG",{});var dct=s(dge);WNo=r(dct,"megatron-bert"),dct.forEach(t),QNo=r(xxe," \u2014 "),yO=n(xxe,"A",{href:!0});var cct=s(yO);HNo=r(cct,"MegatronBertForTokenClassification"),cct.forEach(t),UNo=r(xxe," (MegatronBert model)"),xxe.forEach(t),JNo=i(J),k4=n(J,"LI",{});var $xe=s(k4);cge=n($xe,"STRONG",{});var fct=s(cge);YNo=r(fct,"mobilebert"),fct.forEach(t),KNo=r($xe," \u2014 "),LO=n($xe,"A",{href:!0});var mct=s(LO);ZNo=r(mct,"MobileBertForTokenClassification"),mct.forEach(t),ejo=r($xe," (MobileBERT model)"),$xe.forEach(t),ojo=i(J),S4=n(J,"LI",{});var kxe=s(S4);fge=n(kxe,"STRONG",{});var gct=s(fge);rjo=r(gct,"mpnet"),gct.forEach(t),tjo=r(kxe," \u2014 "),xO=n(kxe,"A",{href:!0});var hct=s(xO);ajo=r(hct,"MPNetForTokenClassification"),hct.forEach(t),njo=r(kxe," (MPNet model)"),kxe.forEach(t),sjo=i(J),R4=n(J,"LI",{});var Sxe=s(R4);mge=n(Sxe,"STRONG",{});var pct=s(mge);ljo=r(pct,"nystromformer"),pct.forEach(t),ijo=r(Sxe," \u2014 "),$O=n(Sxe,"A",{href:!0});var uct=s($O);djo=r(uct,"NystromformerForTokenClassification"),uct.forEach(t),cjo=r(Sxe," (Nystromformer model)"),Sxe.forEach(t),fjo=i(J),P4=n(J,"LI",{});var Rxe=s(P4);gge=n(Rxe,"STRONG",{});var _ct=s(gge);mjo=r(_ct,"qdqbert"),_ct.forEach(t),gjo=r(Rxe," \u2014 "),kO=n(Rxe,"A",{href:!0});var bct=s(kO);hjo=r(bct,"QDQBertForTokenClassification"),bct.forEach(t),pjo=r(Rxe," (QDQBert model)"),Rxe.forEach(t),ujo=i(J),B4=n(J,"LI",{});var Pxe=s(B4);hge=n(Pxe,"STRONG",{});var vct=s(hge);_jo=r(vct,"rembert"),vct.forEach(t),bjo=r(Pxe," \u2014 "),SO=n(Pxe,"A",{href:!0});var Fct=s(SO);vjo=r(Fct,"RemBertForTokenClassification"),Fct.forEach(t),Fjo=r(Pxe," (RemBERT model)"),Pxe.forEach(t),Tjo=i(J),I4=n(J,"LI",{});var Bxe=s(I4);pge=n(Bxe,"STRONG",{});var Tct=s(pge);Mjo=r(Tct,"roberta"),Tct.forEach(t),Ejo=r(Bxe," \u2014 "),RO=n(Bxe,"A",{href:!0});var Mct=s(RO);Cjo=r(Mct,"RobertaForTokenClassification"),Mct.forEach(t),wjo=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),Ajo=i(J),q4=n(J,"LI",{});var Ixe=s(q4);uge=n(Ixe,"STRONG",{});var Ect=s(uge);yjo=r(Ect,"roformer"),Ect.forEach(t),Ljo=r(Ixe," \u2014 "),PO=n(Ixe,"A",{href:!0});var Cct=s(PO);xjo=r(Cct,"RoFormerForTokenClassification"),Cct.forEach(t),$jo=r(Ixe," (RoFormer model)"),Ixe.forEach(t),kjo=i(J),N4=n(J,"LI",{});var qxe=s(N4);_ge=n(qxe,"STRONG",{});var wct=s(_ge);Sjo=r(wct,"squeezebert"),wct.forEach(t),Rjo=r(qxe," \u2014 "),BO=n(qxe,"A",{href:!0});var Act=s(BO);Pjo=r(Act,"SqueezeBertForTokenClassification"),Act.forEach(t),Bjo=r(qxe," (SqueezeBERT model)"),qxe.forEach(t),Ijo=i(J),j4=n(J,"LI",{});var Nxe=s(j4);bge=n(Nxe,"STRONG",{});var yct=s(bge);qjo=r(yct,"xlm"),yct.forEach(t),Njo=r(Nxe," \u2014 "),IO=n(Nxe,"A",{href:!0});var Lct=s(IO);jjo=r(Lct,"XLMForTokenClassification"),Lct.forEach(t),Djo=r(Nxe," (XLM model)"),Nxe.forEach(t),Gjo=i(J),D4=n(J,"LI",{});var jxe=s(D4);vge=n(jxe,"STRONG",{});var xct=s(vge);Ojo=r(xct,"xlm-roberta"),xct.forEach(t),Vjo=r(jxe," \u2014 "),qO=n(jxe,"A",{href:!0});var $ct=s(qO);Xjo=r($ct,"XLMRobertaForTokenClassification"),$ct.forEach(t),zjo=r(jxe," (XLM-RoBERTa model)"),jxe.forEach(t),Wjo=i(J),G4=n(J,"LI",{});var Dxe=s(G4);Fge=n(Dxe,"STRONG",{});var kct=s(Fge);Qjo=r(kct,"xlm-roberta-xl"),kct.forEach(t),Hjo=r(Dxe," \u2014 "),NO=n(Dxe,"A",{href:!0});var Sct=s(NO);Ujo=r(Sct,"XLMRobertaXLForTokenClassification"),Sct.forEach(t),Jjo=r(Dxe," (XLM-RoBERTa-XL model)"),Dxe.forEach(t),Yjo=i(J),O4=n(J,"LI",{});var Gxe=s(O4);Tge=n(Gxe,"STRONG",{});var Rct=s(Tge);Kjo=r(Rct,"xlnet"),Rct.forEach(t),Zjo=r(Gxe," \u2014 "),jO=n(Gxe,"A",{href:!0});var Pct=s(jO);eDo=r(Pct,"XLNetForTokenClassification"),Pct.forEach(t),oDo=r(Gxe," (XLNet model)"),Gxe.forEach(t),rDo=i(J),V4=n(J,"LI",{});var Oxe=s(V4);Mge=n(Oxe,"STRONG",{});var Bct=s(Mge);tDo=r(Bct,"yoso"),Bct.forEach(t),aDo=r(Oxe," \u2014 "),DO=n(Oxe,"A",{href:!0});var Ict=s(DO);nDo=r(Ict,"YosoForTokenClassification"),Ict.forEach(t),sDo=r(Oxe," (YOSO model)"),Oxe.forEach(t),J.forEach(t),lDo=i(da),X4=n(da,"P",{});var Vxe=s(X4);iDo=r(Vxe,"The model is set in evaluation mode by default using "),Ege=n(Vxe,"CODE",{});var qct=s(Ege);dDo=r(qct,"model.eval()"),qct.forEach(t),cDo=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=n(Vxe,"CODE",{});var Nct=s(Cge);fDo=r(Nct,"model.train()"),Nct.forEach(t),Vxe.forEach(t),mDo=i(da),T(z4.$$.fragment,da),da.forEach(t),Js.forEach(t),tqe=i(f),Ki=n(f,"H2",{class:!0});var lje=s(Ki);W4=n(lje,"A",{id:!0,class:!0,href:!0});var jct=s(W4);wge=n(jct,"SPAN",{});var Dct=s(wge);T(Cy.$$.fragment,Dct),Dct.forEach(t),jct.forEach(t),gDo=i(lje),Age=n(lje,"SPAN",{});var Gct=s(Age);hDo=r(Gct,"AutoModelForQuestionAnswering"),Gct.forEach(t),lje.forEach(t),aqe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(wy.$$.fragment,Ys),pDo=i(Ys),Zi=n(Ys,"P",{});var QK=s(Zi);uDo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=n(QK,"A",{href:!0});var Oct=s(GO);_Do=r(Oct,"from_pretrained()"),Oct.forEach(t),bDo=r(QK," class method or the "),OO=n(QK,"A",{href:!0});var Vct=s(OO);vDo=r(Vct,"from_config()"),Vct.forEach(t),FDo=r(QK,` class
method.`),QK.forEach(t),TDo=i(Ys),Ay=n(Ys,"P",{});var ije=s(Ay);MDo=r(ije,"This class cannot be instantiated directly using "),yge=n(ije,"CODE",{});var Xct=s(yge);EDo=r(Xct,"__init__()"),Xct.forEach(t),CDo=r(ije," (throws an error)."),ije.forEach(t),wDo=i(Ys),mt=n(Ys,"DIV",{class:!0});var xA=s(mt);T(yy.$$.fragment,xA),ADo=i(xA),Lge=n(xA,"P",{});var zct=s(Lge);yDo=r(zct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zct.forEach(t),LDo=i(xA),ed=n(xA,"P",{});var HK=s(ed);xDo=r(HK,`Note:
Loading a model from its configuration file does `),xge=n(HK,"STRONG",{});var Wct=s(xge);$Do=r(Wct,"not"),Wct.forEach(t),kDo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(HK,"A",{href:!0});var Qct=s(VO);SDo=r(Qct,"from_pretrained()"),Qct.forEach(t),RDo=r(HK," to load the model weights."),HK.forEach(t),PDo=i(xA),T(Q4.$$.fragment,xA),xA.forEach(t),BDo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Ly.$$.fragment,ca),IDo=i(ca),$ge=n(ca,"P",{});var Hct=s($ge);qDo=r(Hct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hct.forEach(t),NDo=i(ca),qa=n(ca,"P",{});var $A=s(qa);jDo=r($A,"The model class to instantiate is selected based on the "),kge=n($A,"CODE",{});var Uct=s(kge);DDo=r(Uct,"model_type"),Uct.forEach(t),GDo=r($A,` property of the config object (either
passed as an argument or loaded from `),Sge=n($A,"CODE",{});var Jct=s(Sge);ODo=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),VDo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n($A,"CODE",{});var Yct=s(Rge);XDo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),zDo=r($A,":"),$A.forEach(t),WDo=i(ca),V=n(ca,"UL",{});var X=s(V);H4=n(X,"LI",{});var Xxe=s(H4);Pge=n(Xxe,"STRONG",{});var Kct=s(Pge);QDo=r(Kct,"albert"),Kct.forEach(t),HDo=r(Xxe," \u2014 "),XO=n(Xxe,"A",{href:!0});var Zct=s(XO);UDo=r(Zct,"AlbertForQuestionAnswering"),Zct.forEach(t),JDo=r(Xxe," (ALBERT model)"),Xxe.forEach(t),YDo=i(X),U4=n(X,"LI",{});var zxe=s(U4);Bge=n(zxe,"STRONG",{});var eft=s(Bge);KDo=r(eft,"bart"),eft.forEach(t),ZDo=r(zxe," \u2014 "),zO=n(zxe,"A",{href:!0});var oft=s(zO);eGo=r(oft,"BartForQuestionAnswering"),oft.forEach(t),oGo=r(zxe," (BART model)"),zxe.forEach(t),rGo=i(X),J4=n(X,"LI",{});var Wxe=s(J4);Ige=n(Wxe,"STRONG",{});var rft=s(Ige);tGo=r(rft,"bert"),rft.forEach(t),aGo=r(Wxe," \u2014 "),WO=n(Wxe,"A",{href:!0});var tft=s(WO);nGo=r(tft,"BertForQuestionAnswering"),tft.forEach(t),sGo=r(Wxe," (BERT model)"),Wxe.forEach(t),lGo=i(X),Y4=n(X,"LI",{});var Qxe=s(Y4);qge=n(Qxe,"STRONG",{});var aft=s(qge);iGo=r(aft,"big_bird"),aft.forEach(t),dGo=r(Qxe," \u2014 "),QO=n(Qxe,"A",{href:!0});var nft=s(QO);cGo=r(nft,"BigBirdForQuestionAnswering"),nft.forEach(t),fGo=r(Qxe," (BigBird model)"),Qxe.forEach(t),mGo=i(X),K4=n(X,"LI",{});var Hxe=s(K4);Nge=n(Hxe,"STRONG",{});var sft=s(Nge);gGo=r(sft,"bigbird_pegasus"),sft.forEach(t),hGo=r(Hxe," \u2014 "),HO=n(Hxe,"A",{href:!0});var lft=s(HO);pGo=r(lft,"BigBirdPegasusForQuestionAnswering"),lft.forEach(t),uGo=r(Hxe," (BigBirdPegasus model)"),Hxe.forEach(t),_Go=i(X),Z4=n(X,"LI",{});var Uxe=s(Z4);jge=n(Uxe,"STRONG",{});var ift=s(jge);bGo=r(ift,"camembert"),ift.forEach(t),vGo=r(Uxe," \u2014 "),UO=n(Uxe,"A",{href:!0});var dft=s(UO);FGo=r(dft,"CamembertForQuestionAnswering"),dft.forEach(t),TGo=r(Uxe," (CamemBERT model)"),Uxe.forEach(t),MGo=i(X),e5=n(X,"LI",{});var Jxe=s(e5);Dge=n(Jxe,"STRONG",{});var cft=s(Dge);EGo=r(cft,"canine"),cft.forEach(t),CGo=r(Jxe," \u2014 "),JO=n(Jxe,"A",{href:!0});var fft=s(JO);wGo=r(fft,"CanineForQuestionAnswering"),fft.forEach(t),AGo=r(Jxe," (Canine model)"),Jxe.forEach(t),yGo=i(X),o5=n(X,"LI",{});var Yxe=s(o5);Gge=n(Yxe,"STRONG",{});var mft=s(Gge);LGo=r(mft,"convbert"),mft.forEach(t),xGo=r(Yxe," \u2014 "),YO=n(Yxe,"A",{href:!0});var gft=s(YO);$Go=r(gft,"ConvBertForQuestionAnswering"),gft.forEach(t),kGo=r(Yxe," (ConvBERT model)"),Yxe.forEach(t),SGo=i(X),r5=n(X,"LI",{});var Kxe=s(r5);Oge=n(Kxe,"STRONG",{});var hft=s(Oge);RGo=r(hft,"data2vec-text"),hft.forEach(t),PGo=r(Kxe," \u2014 "),KO=n(Kxe,"A",{href:!0});var pft=s(KO);BGo=r(pft,"Data2VecTextForQuestionAnswering"),pft.forEach(t),IGo=r(Kxe," (Data2VecText model)"),Kxe.forEach(t),qGo=i(X),t5=n(X,"LI",{});var Zxe=s(t5);Vge=n(Zxe,"STRONG",{});var uft=s(Vge);NGo=r(uft,"deberta"),uft.forEach(t),jGo=r(Zxe," \u2014 "),ZO=n(Zxe,"A",{href:!0});var _ft=s(ZO);DGo=r(_ft,"DebertaForQuestionAnswering"),_ft.forEach(t),GGo=r(Zxe," (DeBERTa model)"),Zxe.forEach(t),OGo=i(X),a5=n(X,"LI",{});var e9e=s(a5);Xge=n(e9e,"STRONG",{});var bft=s(Xge);VGo=r(bft,"deberta-v2"),bft.forEach(t),XGo=r(e9e," \u2014 "),eV=n(e9e,"A",{href:!0});var vft=s(eV);zGo=r(vft,"DebertaV2ForQuestionAnswering"),vft.forEach(t),WGo=r(e9e," (DeBERTa-v2 model)"),e9e.forEach(t),QGo=i(X),n5=n(X,"LI",{});var o9e=s(n5);zge=n(o9e,"STRONG",{});var Fft=s(zge);HGo=r(Fft,"distilbert"),Fft.forEach(t),UGo=r(o9e," \u2014 "),oV=n(o9e,"A",{href:!0});var Tft=s(oV);JGo=r(Tft,"DistilBertForQuestionAnswering"),Tft.forEach(t),YGo=r(o9e," (DistilBERT model)"),o9e.forEach(t),KGo=i(X),s5=n(X,"LI",{});var r9e=s(s5);Wge=n(r9e,"STRONG",{});var Mft=s(Wge);ZGo=r(Mft,"electra"),Mft.forEach(t),eOo=r(r9e," \u2014 "),rV=n(r9e,"A",{href:!0});var Eft=s(rV);oOo=r(Eft,"ElectraForQuestionAnswering"),Eft.forEach(t),rOo=r(r9e," (ELECTRA model)"),r9e.forEach(t),tOo=i(X),l5=n(X,"LI",{});var t9e=s(l5);Qge=n(t9e,"STRONG",{});var Cft=s(Qge);aOo=r(Cft,"flaubert"),Cft.forEach(t),nOo=r(t9e," \u2014 "),tV=n(t9e,"A",{href:!0});var wft=s(tV);sOo=r(wft,"FlaubertForQuestionAnsweringSimple"),wft.forEach(t),lOo=r(t9e," (FlauBERT model)"),t9e.forEach(t),iOo=i(X),i5=n(X,"LI",{});var a9e=s(i5);Hge=n(a9e,"STRONG",{});var Aft=s(Hge);dOo=r(Aft,"fnet"),Aft.forEach(t),cOo=r(a9e," \u2014 "),aV=n(a9e,"A",{href:!0});var yft=s(aV);fOo=r(yft,"FNetForQuestionAnswering"),yft.forEach(t),mOo=r(a9e," (FNet model)"),a9e.forEach(t),gOo=i(X),d5=n(X,"LI",{});var n9e=s(d5);Uge=n(n9e,"STRONG",{});var Lft=s(Uge);hOo=r(Lft,"funnel"),Lft.forEach(t),pOo=r(n9e," \u2014 "),nV=n(n9e,"A",{href:!0});var xft=s(nV);uOo=r(xft,"FunnelForQuestionAnswering"),xft.forEach(t),_Oo=r(n9e," (Funnel Transformer model)"),n9e.forEach(t),bOo=i(X),c5=n(X,"LI",{});var s9e=s(c5);Jge=n(s9e,"STRONG",{});var $ft=s(Jge);vOo=r($ft,"gptj"),$ft.forEach(t),FOo=r(s9e," \u2014 "),sV=n(s9e,"A",{href:!0});var kft=s(sV);TOo=r(kft,"GPTJForQuestionAnswering"),kft.forEach(t),MOo=r(s9e," (GPT-J model)"),s9e.forEach(t),EOo=i(X),f5=n(X,"LI",{});var l9e=s(f5);Yge=n(l9e,"STRONG",{});var Sft=s(Yge);COo=r(Sft,"ibert"),Sft.forEach(t),wOo=r(l9e," \u2014 "),lV=n(l9e,"A",{href:!0});var Rft=s(lV);AOo=r(Rft,"IBertForQuestionAnswering"),Rft.forEach(t),yOo=r(l9e," (I-BERT model)"),l9e.forEach(t),LOo=i(X),m5=n(X,"LI",{});var i9e=s(m5);Kge=n(i9e,"STRONG",{});var Pft=s(Kge);xOo=r(Pft,"layoutlmv2"),Pft.forEach(t),$Oo=r(i9e," \u2014 "),iV=n(i9e,"A",{href:!0});var Bft=s(iV);kOo=r(Bft,"LayoutLMv2ForQuestionAnswering"),Bft.forEach(t),SOo=r(i9e," (LayoutLMv2 model)"),i9e.forEach(t),ROo=i(X),g5=n(X,"LI",{});var d9e=s(g5);Zge=n(d9e,"STRONG",{});var Ift=s(Zge);POo=r(Ift,"led"),Ift.forEach(t),BOo=r(d9e," \u2014 "),dV=n(d9e,"A",{href:!0});var qft=s(dV);IOo=r(qft,"LEDForQuestionAnswering"),qft.forEach(t),qOo=r(d9e," (LED model)"),d9e.forEach(t),NOo=i(X),h5=n(X,"LI",{});var c9e=s(h5);ehe=n(c9e,"STRONG",{});var Nft=s(ehe);jOo=r(Nft,"longformer"),Nft.forEach(t),DOo=r(c9e," \u2014 "),cV=n(c9e,"A",{href:!0});var jft=s(cV);GOo=r(jft,"LongformerForQuestionAnswering"),jft.forEach(t),OOo=r(c9e," (Longformer model)"),c9e.forEach(t),VOo=i(X),p5=n(X,"LI",{});var f9e=s(p5);ohe=n(f9e,"STRONG",{});var Dft=s(ohe);XOo=r(Dft,"lxmert"),Dft.forEach(t),zOo=r(f9e," \u2014 "),fV=n(f9e,"A",{href:!0});var Gft=s(fV);WOo=r(Gft,"LxmertForQuestionAnswering"),Gft.forEach(t),QOo=r(f9e," (LXMERT model)"),f9e.forEach(t),HOo=i(X),u5=n(X,"LI",{});var m9e=s(u5);rhe=n(m9e,"STRONG",{});var Oft=s(rhe);UOo=r(Oft,"mbart"),Oft.forEach(t),JOo=r(m9e," \u2014 "),mV=n(m9e,"A",{href:!0});var Vft=s(mV);YOo=r(Vft,"MBartForQuestionAnswering"),Vft.forEach(t),KOo=r(m9e," (mBART model)"),m9e.forEach(t),ZOo=i(X),_5=n(X,"LI",{});var g9e=s(_5);the=n(g9e,"STRONG",{});var Xft=s(the);eVo=r(Xft,"megatron-bert"),Xft.forEach(t),oVo=r(g9e," \u2014 "),gV=n(g9e,"A",{href:!0});var zft=s(gV);rVo=r(zft,"MegatronBertForQuestionAnswering"),zft.forEach(t),tVo=r(g9e," (MegatronBert model)"),g9e.forEach(t),aVo=i(X),b5=n(X,"LI",{});var h9e=s(b5);ahe=n(h9e,"STRONG",{});var Wft=s(ahe);nVo=r(Wft,"mobilebert"),Wft.forEach(t),sVo=r(h9e," \u2014 "),hV=n(h9e,"A",{href:!0});var Qft=s(hV);lVo=r(Qft,"MobileBertForQuestionAnswering"),Qft.forEach(t),iVo=r(h9e," (MobileBERT model)"),h9e.forEach(t),dVo=i(X),v5=n(X,"LI",{});var p9e=s(v5);nhe=n(p9e,"STRONG",{});var Hft=s(nhe);cVo=r(Hft,"mpnet"),Hft.forEach(t),fVo=r(p9e," \u2014 "),pV=n(p9e,"A",{href:!0});var Uft=s(pV);mVo=r(Uft,"MPNetForQuestionAnswering"),Uft.forEach(t),gVo=r(p9e," (MPNet model)"),p9e.forEach(t),hVo=i(X),F5=n(X,"LI",{});var u9e=s(F5);she=n(u9e,"STRONG",{});var Jft=s(she);pVo=r(Jft,"nystromformer"),Jft.forEach(t),uVo=r(u9e," \u2014 "),uV=n(u9e,"A",{href:!0});var Yft=s(uV);_Vo=r(Yft,"NystromformerForQuestionAnswering"),Yft.forEach(t),bVo=r(u9e," (Nystromformer model)"),u9e.forEach(t),vVo=i(X),T5=n(X,"LI",{});var _9e=s(T5);lhe=n(_9e,"STRONG",{});var Kft=s(lhe);FVo=r(Kft,"qdqbert"),Kft.forEach(t),TVo=r(_9e," \u2014 "),_V=n(_9e,"A",{href:!0});var Zft=s(_V);MVo=r(Zft,"QDQBertForQuestionAnswering"),Zft.forEach(t),EVo=r(_9e," (QDQBert model)"),_9e.forEach(t),CVo=i(X),M5=n(X,"LI",{});var b9e=s(M5);ihe=n(b9e,"STRONG",{});var emt=s(ihe);wVo=r(emt,"reformer"),emt.forEach(t),AVo=r(b9e," \u2014 "),bV=n(b9e,"A",{href:!0});var omt=s(bV);yVo=r(omt,"ReformerForQuestionAnswering"),omt.forEach(t),LVo=r(b9e," (Reformer model)"),b9e.forEach(t),xVo=i(X),E5=n(X,"LI",{});var v9e=s(E5);dhe=n(v9e,"STRONG",{});var rmt=s(dhe);$Vo=r(rmt,"rembert"),rmt.forEach(t),kVo=r(v9e," \u2014 "),vV=n(v9e,"A",{href:!0});var tmt=s(vV);SVo=r(tmt,"RemBertForQuestionAnswering"),tmt.forEach(t),RVo=r(v9e," (RemBERT model)"),v9e.forEach(t),PVo=i(X),C5=n(X,"LI",{});var F9e=s(C5);che=n(F9e,"STRONG",{});var amt=s(che);BVo=r(amt,"roberta"),amt.forEach(t),IVo=r(F9e," \u2014 "),FV=n(F9e,"A",{href:!0});var nmt=s(FV);qVo=r(nmt,"RobertaForQuestionAnswering"),nmt.forEach(t),NVo=r(F9e," (RoBERTa model)"),F9e.forEach(t),jVo=i(X),w5=n(X,"LI",{});var T9e=s(w5);fhe=n(T9e,"STRONG",{});var smt=s(fhe);DVo=r(smt,"roformer"),smt.forEach(t),GVo=r(T9e," \u2014 "),TV=n(T9e,"A",{href:!0});var lmt=s(TV);OVo=r(lmt,"RoFormerForQuestionAnswering"),lmt.forEach(t),VVo=r(T9e," (RoFormer model)"),T9e.forEach(t),XVo=i(X),A5=n(X,"LI",{});var M9e=s(A5);mhe=n(M9e,"STRONG",{});var imt=s(mhe);zVo=r(imt,"splinter"),imt.forEach(t),WVo=r(M9e," \u2014 "),MV=n(M9e,"A",{href:!0});var dmt=s(MV);QVo=r(dmt,"SplinterForQuestionAnswering"),dmt.forEach(t),HVo=r(M9e," (Splinter model)"),M9e.forEach(t),UVo=i(X),y5=n(X,"LI",{});var E9e=s(y5);ghe=n(E9e,"STRONG",{});var cmt=s(ghe);JVo=r(cmt,"squeezebert"),cmt.forEach(t),YVo=r(E9e," \u2014 "),EV=n(E9e,"A",{href:!0});var fmt=s(EV);KVo=r(fmt,"SqueezeBertForQuestionAnswering"),fmt.forEach(t),ZVo=r(E9e," (SqueezeBERT model)"),E9e.forEach(t),eXo=i(X),L5=n(X,"LI",{});var C9e=s(L5);hhe=n(C9e,"STRONG",{});var mmt=s(hhe);oXo=r(mmt,"xlm"),mmt.forEach(t),rXo=r(C9e," \u2014 "),CV=n(C9e,"A",{href:!0});var gmt=s(CV);tXo=r(gmt,"XLMForQuestionAnsweringSimple"),gmt.forEach(t),aXo=r(C9e," (XLM model)"),C9e.forEach(t),nXo=i(X),x5=n(X,"LI",{});var w9e=s(x5);phe=n(w9e,"STRONG",{});var hmt=s(phe);sXo=r(hmt,"xlm-roberta"),hmt.forEach(t),lXo=r(w9e," \u2014 "),wV=n(w9e,"A",{href:!0});var pmt=s(wV);iXo=r(pmt,"XLMRobertaForQuestionAnswering"),pmt.forEach(t),dXo=r(w9e," (XLM-RoBERTa model)"),w9e.forEach(t),cXo=i(X),$5=n(X,"LI",{});var A9e=s($5);uhe=n(A9e,"STRONG",{});var umt=s(uhe);fXo=r(umt,"xlm-roberta-xl"),umt.forEach(t),mXo=r(A9e," \u2014 "),AV=n(A9e,"A",{href:!0});var _mt=s(AV);gXo=r(_mt,"XLMRobertaXLForQuestionAnswering"),_mt.forEach(t),hXo=r(A9e," (XLM-RoBERTa-XL model)"),A9e.forEach(t),pXo=i(X),k5=n(X,"LI",{});var y9e=s(k5);_he=n(y9e,"STRONG",{});var bmt=s(_he);uXo=r(bmt,"xlnet"),bmt.forEach(t),_Xo=r(y9e," \u2014 "),yV=n(y9e,"A",{href:!0});var vmt=s(yV);bXo=r(vmt,"XLNetForQuestionAnsweringSimple"),vmt.forEach(t),vXo=r(y9e," (XLNet model)"),y9e.forEach(t),FXo=i(X),S5=n(X,"LI",{});var L9e=s(S5);bhe=n(L9e,"STRONG",{});var Fmt=s(bhe);TXo=r(Fmt,"yoso"),Fmt.forEach(t),MXo=r(L9e," \u2014 "),LV=n(L9e,"A",{href:!0});var Tmt=s(LV);EXo=r(Tmt,"YosoForQuestionAnswering"),Tmt.forEach(t),CXo=r(L9e," (YOSO model)"),L9e.forEach(t),X.forEach(t),wXo=i(ca),R5=n(ca,"P",{});var x9e=s(R5);AXo=r(x9e,"The model is set in evaluation mode by default using "),vhe=n(x9e,"CODE",{});var Mmt=s(vhe);yXo=r(Mmt,"model.eval()"),Mmt.forEach(t),LXo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n(x9e,"CODE",{});var Emt=s(Fhe);xXo=r(Emt,"model.train()"),Emt.forEach(t),x9e.forEach(t),$Xo=i(ca),T(P5.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),nqe=i(f),od=n(f,"H2",{class:!0});var dje=s(od);B5=n(dje,"A",{id:!0,class:!0,href:!0});var Cmt=s(B5);The=n(Cmt,"SPAN",{});var wmt=s(The);T(xy.$$.fragment,wmt),wmt.forEach(t),Cmt.forEach(t),kXo=i(dje),Mhe=n(dje,"SPAN",{});var Amt=s(Mhe);SXo=r(Amt,"AutoModelForTableQuestionAnswering"),Amt.forEach(t),dje.forEach(t),sqe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T($y.$$.fragment,Ks),RXo=i(Ks),rd=n(Ks,"P",{});var UK=s(rd);PXo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=n(UK,"A",{href:!0});var ymt=s(xV);BXo=r(ymt,"from_pretrained()"),ymt.forEach(t),IXo=r(UK," class method or the "),$V=n(UK,"A",{href:!0});var Lmt=s($V);qXo=r(Lmt,"from_config()"),Lmt.forEach(t),NXo=r(UK,` class
method.`),UK.forEach(t),jXo=i(Ks),ky=n(Ks,"P",{});var cje=s(ky);DXo=r(cje,"This class cannot be instantiated directly using "),Ehe=n(cje,"CODE",{});var xmt=s(Ehe);GXo=r(xmt,"__init__()"),xmt.forEach(t),OXo=r(cje," (throws an error)."),cje.forEach(t),VXo=i(Ks),gt=n(Ks,"DIV",{class:!0});var kA=s(gt);T(Sy.$$.fragment,kA),XXo=i(kA),Che=n(kA,"P",{});var $mt=s(Che);zXo=r($mt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$mt.forEach(t),WXo=i(kA),td=n(kA,"P",{});var JK=s(td);QXo=r(JK,`Note:
Loading a model from its configuration file does `),whe=n(JK,"STRONG",{});var kmt=s(whe);HXo=r(kmt,"not"),kmt.forEach(t),UXo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(JK,"A",{href:!0});var Smt=s(kV);JXo=r(Smt,"from_pretrained()"),Smt.forEach(t),YXo=r(JK," to load the model weights."),JK.forEach(t),KXo=i(kA),T(I5.$$.fragment,kA),kA.forEach(t),ZXo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Ry.$$.fragment,fa),ezo=i(fa),Ahe=n(fa,"P",{});var Rmt=s(Ahe);ozo=r(Rmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rmt.forEach(t),rzo=i(fa),Na=n(fa,"P",{});var SA=s(Na);tzo=r(SA,"The model class to instantiate is selected based on the "),yhe=n(SA,"CODE",{});var Pmt=s(yhe);azo=r(Pmt,"model_type"),Pmt.forEach(t),nzo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(SA,"CODE",{});var Bmt=s(Lhe);szo=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),lzo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=n(SA,"CODE",{});var Imt=s(xhe);izo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),dzo=r(SA,":"),SA.forEach(t),czo=i(fa),$he=n(fa,"UL",{});var qmt=s($he);q5=n(qmt,"LI",{});var $9e=s(q5);khe=n($9e,"STRONG",{});var Nmt=s(khe);fzo=r(Nmt,"tapas"),Nmt.forEach(t),mzo=r($9e," \u2014 "),SV=n($9e,"A",{href:!0});var jmt=s(SV);gzo=r(jmt,"TapasForQuestionAnswering"),jmt.forEach(t),hzo=r($9e," (TAPAS model)"),$9e.forEach(t),qmt.forEach(t),pzo=i(fa),N5=n(fa,"P",{});var k9e=s(N5);uzo=r(k9e,"The model is set in evaluation mode by default using "),She=n(k9e,"CODE",{});var Dmt=s(She);_zo=r(Dmt,"model.eval()"),Dmt.forEach(t),bzo=r(k9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(k9e,"CODE",{});var Gmt=s(Rhe);vzo=r(Gmt,"model.train()"),Gmt.forEach(t),k9e.forEach(t),Fzo=i(fa),T(j5.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),lqe=i(f),ad=n(f,"H2",{class:!0});var fje=s(ad);D5=n(fje,"A",{id:!0,class:!0,href:!0});var Omt=s(D5);Phe=n(Omt,"SPAN",{});var Vmt=s(Phe);T(Py.$$.fragment,Vmt),Vmt.forEach(t),Omt.forEach(t),Tzo=i(fje),Bhe=n(fje,"SPAN",{});var Xmt=s(Bhe);Mzo=r(Xmt,"AutoModelForImageClassification"),Xmt.forEach(t),fje.forEach(t),iqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(By.$$.fragment,Zs),Ezo=i(Zs),nd=n(Zs,"P",{});var YK=s(nd);Czo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=n(YK,"A",{href:!0});var zmt=s(RV);wzo=r(zmt,"from_pretrained()"),zmt.forEach(t),Azo=r(YK," class method or the "),PV=n(YK,"A",{href:!0});var Wmt=s(PV);yzo=r(Wmt,"from_config()"),Wmt.forEach(t),Lzo=r(YK,` class
method.`),YK.forEach(t),xzo=i(Zs),Iy=n(Zs,"P",{});var mje=s(Iy);$zo=r(mje,"This class cannot be instantiated directly using "),Ihe=n(mje,"CODE",{});var Qmt=s(Ihe);kzo=r(Qmt,"__init__()"),Qmt.forEach(t),Szo=r(mje," (throws an error)."),mje.forEach(t),Rzo=i(Zs),ht=n(Zs,"DIV",{class:!0});var RA=s(ht);T(qy.$$.fragment,RA),Pzo=i(RA),qhe=n(RA,"P",{});var Hmt=s(qhe);Bzo=r(Hmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hmt.forEach(t),Izo=i(RA),sd=n(RA,"P",{});var KK=s(sd);qzo=r(KK,`Note:
Loading a model from its configuration file does `),Nhe=n(KK,"STRONG",{});var Umt=s(Nhe);Nzo=r(Umt,"not"),Umt.forEach(t),jzo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(KK,"A",{href:!0});var Jmt=s(BV);Dzo=r(Jmt,"from_pretrained()"),Jmt.forEach(t),Gzo=r(KK," to load the model weights."),KK.forEach(t),Ozo=i(RA),T(G5.$$.fragment,RA),RA.forEach(t),Vzo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Ny.$$.fragment,ma),Xzo=i(ma),jhe=n(ma,"P",{});var Ymt=s(jhe);zzo=r(Ymt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ymt.forEach(t),Wzo=i(ma),ja=n(ma,"P",{});var PA=s(ja);Qzo=r(PA,"The model class to instantiate is selected based on the "),Dhe=n(PA,"CODE",{});var Kmt=s(Dhe);Hzo=r(Kmt,"model_type"),Kmt.forEach(t),Uzo=r(PA,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(PA,"CODE",{});var Zmt=s(Ghe);Jzo=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),Yzo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(PA,"CODE",{});var egt=s(Ohe);Kzo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),Zzo=r(PA,":"),PA.forEach(t),eWo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);O5=n(Ee,"LI",{});var S9e=s(O5);Vhe=n(S9e,"STRONG",{});var ogt=s(Vhe);oWo=r(ogt,"beit"),ogt.forEach(t),rWo=r(S9e," \u2014 "),IV=n(S9e,"A",{href:!0});var rgt=s(IV);tWo=r(rgt,"BeitForImageClassification"),rgt.forEach(t),aWo=r(S9e," (BEiT model)"),S9e.forEach(t),nWo=i(Ee),V5=n(Ee,"LI",{});var R9e=s(V5);Xhe=n(R9e,"STRONG",{});var tgt=s(Xhe);sWo=r(tgt,"convnext"),tgt.forEach(t),lWo=r(R9e," \u2014 "),qV=n(R9e,"A",{href:!0});var agt=s(qV);iWo=r(agt,"ConvNextForImageClassification"),agt.forEach(t),dWo=r(R9e," (ConvNext model)"),R9e.forEach(t),cWo=i(Ee),X5=n(Ee,"LI",{});var P9e=s(X5);zhe=n(P9e,"STRONG",{});var ngt=s(zhe);fWo=r(ngt,"data2vec-vision"),ngt.forEach(t),mWo=r(P9e," \u2014 "),NV=n(P9e,"A",{href:!0});var sgt=s(NV);gWo=r(sgt,"Data2VecVisionForImageClassification"),sgt.forEach(t),hWo=r(P9e," (Data2VecVision model)"),P9e.forEach(t),pWo=i(Ee),Bs=n(Ee,"LI",{});var E$=s(Bs);Whe=n(E$,"STRONG",{});var lgt=s(Whe);uWo=r(lgt,"deit"),lgt.forEach(t),_Wo=r(E$," \u2014 "),jV=n(E$,"A",{href:!0});var igt=s(jV);bWo=r(igt,"DeiTForImageClassification"),igt.forEach(t),vWo=r(E$," or "),DV=n(E$,"A",{href:!0});var dgt=s(DV);FWo=r(dgt,"DeiTForImageClassificationWithTeacher"),dgt.forEach(t),TWo=r(E$," (DeiT model)"),E$.forEach(t),MWo=i(Ee),z5=n(Ee,"LI",{});var B9e=s(z5);Qhe=n(B9e,"STRONG",{});var cgt=s(Qhe);EWo=r(cgt,"imagegpt"),cgt.forEach(t),CWo=r(B9e," \u2014 "),GV=n(B9e,"A",{href:!0});var fgt=s(GV);wWo=r(fgt,"ImageGPTForImageClassification"),fgt.forEach(t),AWo=r(B9e," (ImageGPT model)"),B9e.forEach(t),yWo=i(Ee),pt=n(Ee,"LI",{});var hf=s(pt);Hhe=n(hf,"STRONG",{});var mgt=s(Hhe);LWo=r(mgt,"perceiver"),mgt.forEach(t),xWo=r(hf," \u2014 "),OV=n(hf,"A",{href:!0});var ggt=s(OV);$Wo=r(ggt,"PerceiverForImageClassificationLearned"),ggt.forEach(t),kWo=r(hf," or "),VV=n(hf,"A",{href:!0});var hgt=s(VV);SWo=r(hgt,"PerceiverForImageClassificationFourier"),hgt.forEach(t),RWo=r(hf," or "),XV=n(hf,"A",{href:!0});var pgt=s(XV);PWo=r(pgt,"PerceiverForImageClassificationConvProcessing"),pgt.forEach(t),BWo=r(hf," (Perceiver model)"),hf.forEach(t),IWo=i(Ee),W5=n(Ee,"LI",{});var I9e=s(W5);Uhe=n(I9e,"STRONG",{});var ugt=s(Uhe);qWo=r(ugt,"poolformer"),ugt.forEach(t),NWo=r(I9e," \u2014 "),zV=n(I9e,"A",{href:!0});var _gt=s(zV);jWo=r(_gt,"PoolFormerForImageClassification"),_gt.forEach(t),DWo=r(I9e," (PoolFormer model)"),I9e.forEach(t),GWo=i(Ee),Q5=n(Ee,"LI",{});var q9e=s(Q5);Jhe=n(q9e,"STRONG",{});var bgt=s(Jhe);OWo=r(bgt,"regnet"),bgt.forEach(t),VWo=r(q9e," \u2014 "),WV=n(q9e,"A",{href:!0});var vgt=s(WV);XWo=r(vgt,"RegNetForImageClassification"),vgt.forEach(t),zWo=r(q9e," (RegNet model)"),q9e.forEach(t),WWo=i(Ee),H5=n(Ee,"LI",{});var N9e=s(H5);Yhe=n(N9e,"STRONG",{});var Fgt=s(Yhe);QWo=r(Fgt,"resnet"),Fgt.forEach(t),HWo=r(N9e," \u2014 "),QV=n(N9e,"A",{href:!0});var Tgt=s(QV);UWo=r(Tgt,"ResNetForImageClassification"),Tgt.forEach(t),JWo=r(N9e," (ResNet model)"),N9e.forEach(t),YWo=i(Ee),U5=n(Ee,"LI",{});var j9e=s(U5);Khe=n(j9e,"STRONG",{});var Mgt=s(Khe);KWo=r(Mgt,"segformer"),Mgt.forEach(t),ZWo=r(j9e," \u2014 "),HV=n(j9e,"A",{href:!0});var Egt=s(HV);eQo=r(Egt,"SegformerForImageClassification"),Egt.forEach(t),oQo=r(j9e," (SegFormer model)"),j9e.forEach(t),rQo=i(Ee),J5=n(Ee,"LI",{});var D9e=s(J5);Zhe=n(D9e,"STRONG",{});var Cgt=s(Zhe);tQo=r(Cgt,"swin"),Cgt.forEach(t),aQo=r(D9e," \u2014 "),UV=n(D9e,"A",{href:!0});var wgt=s(UV);nQo=r(wgt,"SwinForImageClassification"),wgt.forEach(t),sQo=r(D9e," (Swin model)"),D9e.forEach(t),lQo=i(Ee),Y5=n(Ee,"LI",{});var G9e=s(Y5);epe=n(G9e,"STRONG",{});var Agt=s(epe);iQo=r(Agt,"van"),Agt.forEach(t),dQo=r(G9e," \u2014 "),JV=n(G9e,"A",{href:!0});var ygt=s(JV);cQo=r(ygt,"VanForImageClassification"),ygt.forEach(t),fQo=r(G9e," (VAN model)"),G9e.forEach(t),mQo=i(Ee),K5=n(Ee,"LI",{});var O9e=s(K5);ope=n(O9e,"STRONG",{});var Lgt=s(ope);gQo=r(Lgt,"vit"),Lgt.forEach(t),hQo=r(O9e," \u2014 "),YV=n(O9e,"A",{href:!0});var xgt=s(YV);pQo=r(xgt,"ViTForImageClassification"),xgt.forEach(t),uQo=r(O9e," (ViT model)"),O9e.forEach(t),Ee.forEach(t),_Qo=i(ma),Z5=n(ma,"P",{});var V9e=s(Z5);bQo=r(V9e,"The model is set in evaluation mode by default using "),rpe=n(V9e,"CODE",{});var $gt=s(rpe);vQo=r($gt,"model.eval()"),$gt.forEach(t),FQo=r(V9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(V9e,"CODE",{});var kgt=s(tpe);TQo=r(kgt,"model.train()"),kgt.forEach(t),V9e.forEach(t),MQo=i(ma),T(ev.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),dqe=i(f),ld=n(f,"H2",{class:!0});var gje=s(ld);ov=n(gje,"A",{id:!0,class:!0,href:!0});var Sgt=s(ov);ape=n(Sgt,"SPAN",{});var Rgt=s(ape);T(jy.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),EQo=i(gje),npe=n(gje,"SPAN",{});var Pgt=s(npe);CQo=r(Pgt,"AutoModelForVision2Seq"),Pgt.forEach(t),gje.forEach(t),cqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(Dy.$$.fragment,el),wQo=i(el),id=n(el,"P",{});var ZK=s(id);AQo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=n(ZK,"A",{href:!0});var Bgt=s(KV);yQo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),LQo=r(ZK," class method or the "),ZV=n(ZK,"A",{href:!0});var Igt=s(ZV);xQo=r(Igt,"from_config()"),Igt.forEach(t),$Qo=r(ZK,` class
method.`),ZK.forEach(t),kQo=i(el),Gy=n(el,"P",{});var hje=s(Gy);SQo=r(hje,"This class cannot be instantiated directly using "),spe=n(hje,"CODE",{});var qgt=s(spe);RQo=r(qgt,"__init__()"),qgt.forEach(t),PQo=r(hje," (throws an error)."),hje.forEach(t),BQo=i(el),ut=n(el,"DIV",{class:!0});var BA=s(ut);T(Oy.$$.fragment,BA),IQo=i(BA),lpe=n(BA,"P",{});var Ngt=s(lpe);qQo=r(Ngt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ngt.forEach(t),NQo=i(BA),dd=n(BA,"P",{});var eZ=s(dd);jQo=r(eZ,`Note:
Loading a model from its configuration file does `),ipe=n(eZ,"STRONG",{});var jgt=s(ipe);DQo=r(jgt,"not"),jgt.forEach(t),GQo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(eZ,"A",{href:!0});var Dgt=s(eX);OQo=r(Dgt,"from_pretrained()"),Dgt.forEach(t),VQo=r(eZ," to load the model weights."),eZ.forEach(t),XQo=i(BA),T(rv.$$.fragment,BA),BA.forEach(t),zQo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Vy.$$.fragment,ga),WQo=i(ga),dpe=n(ga,"P",{});var Ggt=s(dpe);QQo=r(Ggt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ggt.forEach(t),HQo=i(ga),Da=n(ga,"P",{});var IA=s(Da);UQo=r(IA,"The model class to instantiate is selected based on the "),cpe=n(IA,"CODE",{});var Ogt=s(cpe);JQo=r(Ogt,"model_type"),Ogt.forEach(t),YQo=r(IA,` property of the config object (either
passed as an argument or loaded from `),fpe=n(IA,"CODE",{});var Vgt=s(fpe);KQo=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),ZQo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(IA,"CODE",{});var Xgt=s(mpe);eHo=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),oHo=r(IA,":"),IA.forEach(t),rHo=i(ga),gpe=n(ga,"UL",{});var zgt=s(gpe);tv=n(zgt,"LI",{});var X9e=s(tv);hpe=n(X9e,"STRONG",{});var Wgt=s(hpe);tHo=r(Wgt,"vision-encoder-decoder"),Wgt.forEach(t),aHo=r(X9e," \u2014 "),oX=n(X9e,"A",{href:!0});var Qgt=s(oX);nHo=r(Qgt,"VisionEncoderDecoderModel"),Qgt.forEach(t),sHo=r(X9e," (Vision Encoder decoder model)"),X9e.forEach(t),zgt.forEach(t),lHo=i(ga),av=n(ga,"P",{});var z9e=s(av);iHo=r(z9e,"The model is set in evaluation mode by default using "),ppe=n(z9e,"CODE",{});var Hgt=s(ppe);dHo=r(Hgt,"model.eval()"),Hgt.forEach(t),cHo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(z9e,"CODE",{});var Ugt=s(upe);fHo=r(Ugt,"model.train()"),Ugt.forEach(t),z9e.forEach(t),mHo=i(ga),T(nv.$$.fragment,ga),ga.forEach(t),el.forEach(t),fqe=i(f),cd=n(f,"H2",{class:!0});var pje=s(cd);sv=n(pje,"A",{id:!0,class:!0,href:!0});var Jgt=s(sv);_pe=n(Jgt,"SPAN",{});var Ygt=s(_pe);T(Xy.$$.fragment,Ygt),Ygt.forEach(t),Jgt.forEach(t),gHo=i(pje),bpe=n(pje,"SPAN",{});var Kgt=s(bpe);hHo=r(Kgt,"AutoModelForAudioClassification"),Kgt.forEach(t),pje.forEach(t),mqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(zy.$$.fragment,ol),pHo=i(ol),fd=n(ol,"P",{});var oZ=s(fd);uHo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=n(oZ,"A",{href:!0});var Zgt=s(rX);_Ho=r(Zgt,"from_pretrained()"),Zgt.forEach(t),bHo=r(oZ," class method or the "),tX=n(oZ,"A",{href:!0});var eht=s(tX);vHo=r(eht,"from_config()"),eht.forEach(t),FHo=r(oZ,` class
method.`),oZ.forEach(t),THo=i(ol),Wy=n(ol,"P",{});var uje=s(Wy);MHo=r(uje,"This class cannot be instantiated directly using "),vpe=n(uje,"CODE",{});var oht=s(vpe);EHo=r(oht,"__init__()"),oht.forEach(t),CHo=r(uje," (throws an error)."),uje.forEach(t),wHo=i(ol),_t=n(ol,"DIV",{class:!0});var qA=s(_t);T(Qy.$$.fragment,qA),AHo=i(qA),Fpe=n(qA,"P",{});var rht=s(Fpe);yHo=r(rht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rht.forEach(t),LHo=i(qA),md=n(qA,"P",{});var rZ=s(md);xHo=r(rZ,`Note:
Loading a model from its configuration file does `),Tpe=n(rZ,"STRONG",{});var tht=s(Tpe);$Ho=r(tht,"not"),tht.forEach(t),kHo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(rZ,"A",{href:!0});var aht=s(aX);SHo=r(aht,"from_pretrained()"),aht.forEach(t),RHo=r(rZ," to load the model weights."),rZ.forEach(t),PHo=i(qA),T(lv.$$.fragment,qA),qA.forEach(t),BHo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Hy.$$.fragment,ha),IHo=i(ha),Mpe=n(ha,"P",{});var nht=s(Mpe);qHo=r(nht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),nht.forEach(t),NHo=i(ha),Ga=n(ha,"P",{});var NA=s(Ga);jHo=r(NA,"The model class to instantiate is selected based on the "),Epe=n(NA,"CODE",{});var sht=s(Epe);DHo=r(sht,"model_type"),sht.forEach(t),GHo=r(NA,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(NA,"CODE",{});var lht=s(Cpe);OHo=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),VHo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(NA,"CODE",{});var iht=s(wpe);XHo=r(iht,"pretrained_model_name_or_path"),iht.forEach(t),zHo=r(NA,":"),NA.forEach(t),WHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);iv=n(Oe,"LI",{});var W9e=s(iv);Ape=n(W9e,"STRONG",{});var dht=s(Ape);QHo=r(dht,"data2vec-audio"),dht.forEach(t),HHo=r(W9e," \u2014 "),nX=n(W9e,"A",{href:!0});var cht=s(nX);UHo=r(cht,"Data2VecAudioForSequenceClassification"),cht.forEach(t),JHo=r(W9e," (Data2VecAudio model)"),W9e.forEach(t),YHo=i(Oe),dv=n(Oe,"LI",{});var Q9e=s(dv);ype=n(Q9e,"STRONG",{});var fht=s(ype);KHo=r(fht,"hubert"),fht.forEach(t),ZHo=r(Q9e," \u2014 "),sX=n(Q9e,"A",{href:!0});var mht=s(sX);eUo=r(mht,"HubertForSequenceClassification"),mht.forEach(t),oUo=r(Q9e," (Hubert model)"),Q9e.forEach(t),rUo=i(Oe),cv=n(Oe,"LI",{});var H9e=s(cv);Lpe=n(H9e,"STRONG",{});var ght=s(Lpe);tUo=r(ght,"sew"),ght.forEach(t),aUo=r(H9e," \u2014 "),lX=n(H9e,"A",{href:!0});var hht=s(lX);nUo=r(hht,"SEWForSequenceClassification"),hht.forEach(t),sUo=r(H9e," (SEW model)"),H9e.forEach(t),lUo=i(Oe),fv=n(Oe,"LI",{});var U9e=s(fv);xpe=n(U9e,"STRONG",{});var pht=s(xpe);iUo=r(pht,"sew-d"),pht.forEach(t),dUo=r(U9e," \u2014 "),iX=n(U9e,"A",{href:!0});var uht=s(iX);cUo=r(uht,"SEWDForSequenceClassification"),uht.forEach(t),fUo=r(U9e," (SEW-D model)"),U9e.forEach(t),mUo=i(Oe),mv=n(Oe,"LI",{});var J9e=s(mv);$pe=n(J9e,"STRONG",{});var _ht=s($pe);gUo=r(_ht,"unispeech"),_ht.forEach(t),hUo=r(J9e," \u2014 "),dX=n(J9e,"A",{href:!0});var bht=s(dX);pUo=r(bht,"UniSpeechForSequenceClassification"),bht.forEach(t),uUo=r(J9e," (UniSpeech model)"),J9e.forEach(t),_Uo=i(Oe),gv=n(Oe,"LI",{});var Y9e=s(gv);kpe=n(Y9e,"STRONG",{});var vht=s(kpe);bUo=r(vht,"unispeech-sat"),vht.forEach(t),vUo=r(Y9e," \u2014 "),cX=n(Y9e,"A",{href:!0});var Fht=s(cX);FUo=r(Fht,"UniSpeechSatForSequenceClassification"),Fht.forEach(t),TUo=r(Y9e," (UniSpeechSat model)"),Y9e.forEach(t),MUo=i(Oe),hv=n(Oe,"LI",{});var K9e=s(hv);Spe=n(K9e,"STRONG",{});var Tht=s(Spe);EUo=r(Tht,"wav2vec2"),Tht.forEach(t),CUo=r(K9e," \u2014 "),fX=n(K9e,"A",{href:!0});var Mht=s(fX);wUo=r(Mht,"Wav2Vec2ForSequenceClassification"),Mht.forEach(t),AUo=r(K9e," (Wav2Vec2 model)"),K9e.forEach(t),yUo=i(Oe),pv=n(Oe,"LI",{});var Z9e=s(pv);Rpe=n(Z9e,"STRONG",{});var Eht=s(Rpe);LUo=r(Eht,"wav2vec2-conformer"),Eht.forEach(t),xUo=r(Z9e," \u2014 "),mX=n(Z9e,"A",{href:!0});var Cht=s(mX);$Uo=r(Cht,"Wav2Vec2ConformerForSequenceClassification"),Cht.forEach(t),kUo=r(Z9e," (Wav2Vec2-Conformer model)"),Z9e.forEach(t),SUo=i(Oe),uv=n(Oe,"LI",{});var e$e=s(uv);Ppe=n(e$e,"STRONG",{});var wht=s(Ppe);RUo=r(wht,"wavlm"),wht.forEach(t),PUo=r(e$e," \u2014 "),gX=n(e$e,"A",{href:!0});var Aht=s(gX);BUo=r(Aht,"WavLMForSequenceClassification"),Aht.forEach(t),IUo=r(e$e," (WavLM model)"),e$e.forEach(t),Oe.forEach(t),qUo=i(ha),_v=n(ha,"P",{});var o$e=s(_v);NUo=r(o$e,"The model is set in evaluation mode by default using "),Bpe=n(o$e,"CODE",{});var yht=s(Bpe);jUo=r(yht,"model.eval()"),yht.forEach(t),DUo=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(o$e,"CODE",{});var Lht=s(Ipe);GUo=r(Lht,"model.train()"),Lht.forEach(t),o$e.forEach(t),OUo=i(ha),T(bv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),gqe=i(f),gd=n(f,"H2",{class:!0});var _je=s(gd);vv=n(_je,"A",{id:!0,class:!0,href:!0});var xht=s(vv);qpe=n(xht,"SPAN",{});var $ht=s(qpe);T(Uy.$$.fragment,$ht),$ht.forEach(t),xht.forEach(t),VUo=i(_je),Npe=n(_je,"SPAN",{});var kht=s(Npe);XUo=r(kht,"AutoModelForAudioFrameClassification"),kht.forEach(t),_je.forEach(t),hqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(Jy.$$.fragment,rl),zUo=i(rl),hd=n(rl,"P",{});var tZ=s(hd);WUo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=n(tZ,"A",{href:!0});var Sht=s(hX);QUo=r(Sht,"from_pretrained()"),Sht.forEach(t),HUo=r(tZ," class method or the "),pX=n(tZ,"A",{href:!0});var Rht=s(pX);UUo=r(Rht,"from_config()"),Rht.forEach(t),JUo=r(tZ,` class
method.`),tZ.forEach(t),YUo=i(rl),Yy=n(rl,"P",{});var bje=s(Yy);KUo=r(bje,"This class cannot be instantiated directly using "),jpe=n(bje,"CODE",{});var Pht=s(jpe);ZUo=r(Pht,"__init__()"),Pht.forEach(t),eJo=r(bje," (throws an error)."),bje.forEach(t),oJo=i(rl),bt=n(rl,"DIV",{class:!0});var jA=s(bt);T(Ky.$$.fragment,jA),rJo=i(jA),Dpe=n(jA,"P",{});var Bht=s(Dpe);tJo=r(Bht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Bht.forEach(t),aJo=i(jA),pd=n(jA,"P",{});var aZ=s(pd);nJo=r(aZ,`Note:
Loading a model from its configuration file does `),Gpe=n(aZ,"STRONG",{});var Iht=s(Gpe);sJo=r(Iht,"not"),Iht.forEach(t),lJo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(aZ,"A",{href:!0});var qht=s(uX);iJo=r(qht,"from_pretrained()"),qht.forEach(t),dJo=r(aZ," to load the model weights."),aZ.forEach(t),cJo=i(jA),T(Fv.$$.fragment,jA),jA.forEach(t),fJo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Zy.$$.fragment,pa),mJo=i(pa),Ope=n(pa,"P",{});var Nht=s(Ope);gJo=r(Nht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nht.forEach(t),hJo=i(pa),Oa=n(pa,"P",{});var DA=s(Oa);pJo=r(DA,"The model class to instantiate is selected based on the "),Vpe=n(DA,"CODE",{});var jht=s(Vpe);uJo=r(jht,"model_type"),jht.forEach(t),_Jo=r(DA,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(DA,"CODE",{});var Dht=s(Xpe);bJo=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),vJo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(DA,"CODE",{});var Ght=s(zpe);FJo=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),TJo=r(DA,":"),DA.forEach(t),MJo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Tv=n(tl,"LI",{});var r$e=s(Tv);Wpe=n(r$e,"STRONG",{});var Oht=s(Wpe);EJo=r(Oht,"data2vec-audio"),Oht.forEach(t),CJo=r(r$e," \u2014 "),_X=n(r$e,"A",{href:!0});var Vht=s(_X);wJo=r(Vht,"Data2VecAudioForAudioFrameClassification"),Vht.forEach(t),AJo=r(r$e," (Data2VecAudio model)"),r$e.forEach(t),yJo=i(tl),Mv=n(tl,"LI",{});var t$e=s(Mv);Qpe=n(t$e,"STRONG",{});var Xht=s(Qpe);LJo=r(Xht,"unispeech-sat"),Xht.forEach(t),xJo=r(t$e," \u2014 "),bX=n(t$e,"A",{href:!0});var zht=s(bX);$Jo=r(zht,"UniSpeechSatForAudioFrameClassification"),zht.forEach(t),kJo=r(t$e," (UniSpeechSat model)"),t$e.forEach(t),SJo=i(tl),Ev=n(tl,"LI",{});var a$e=s(Ev);Hpe=n(a$e,"STRONG",{});var Wht=s(Hpe);RJo=r(Wht,"wav2vec2"),Wht.forEach(t),PJo=r(a$e," \u2014 "),vX=n(a$e,"A",{href:!0});var Qht=s(vX);BJo=r(Qht,"Wav2Vec2ForAudioFrameClassification"),Qht.forEach(t),IJo=r(a$e," (Wav2Vec2 model)"),a$e.forEach(t),qJo=i(tl),Cv=n(tl,"LI",{});var n$e=s(Cv);Upe=n(n$e,"STRONG",{});var Hht=s(Upe);NJo=r(Hht,"wav2vec2-conformer"),Hht.forEach(t),jJo=r(n$e," \u2014 "),FX=n(n$e,"A",{href:!0});var Uht=s(FX);DJo=r(Uht,"Wav2Vec2ConformerForAudioFrameClassification"),Uht.forEach(t),GJo=r(n$e," (Wav2Vec2-Conformer model)"),n$e.forEach(t),OJo=i(tl),wv=n(tl,"LI",{});var s$e=s(wv);Jpe=n(s$e,"STRONG",{});var Jht=s(Jpe);VJo=r(Jht,"wavlm"),Jht.forEach(t),XJo=r(s$e," \u2014 "),TX=n(s$e,"A",{href:!0});var Yht=s(TX);zJo=r(Yht,"WavLMForAudioFrameClassification"),Yht.forEach(t),WJo=r(s$e," (WavLM model)"),s$e.forEach(t),tl.forEach(t),QJo=i(pa),Av=n(pa,"P",{});var l$e=s(Av);HJo=r(l$e,"The model is set in evaluation mode by default using "),Ype=n(l$e,"CODE",{});var Kht=s(Ype);UJo=r(Kht,"model.eval()"),Kht.forEach(t),JJo=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(l$e,"CODE",{});var Zht=s(Kpe);YJo=r(Zht,"model.train()"),Zht.forEach(t),l$e.forEach(t),KJo=i(pa),T(yv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),pqe=i(f),ud=n(f,"H2",{class:!0});var vje=s(ud);Lv=n(vje,"A",{id:!0,class:!0,href:!0});var ept=s(Lv);Zpe=n(ept,"SPAN",{});var opt=s(Zpe);T(eL.$$.fragment,opt),opt.forEach(t),ept.forEach(t),ZJo=i(vje),eue=n(vje,"SPAN",{});var rpt=s(eue);eYo=r(rpt,"AutoModelForCTC"),rpt.forEach(t),vje.forEach(t),uqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(oL.$$.fragment,al),oYo=i(al),_d=n(al,"P",{});var nZ=s(_d);rYo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=n(nZ,"A",{href:!0});var tpt=s(MX);tYo=r(tpt,"from_pretrained()"),tpt.forEach(t),aYo=r(nZ," class method or the "),EX=n(nZ,"A",{href:!0});var apt=s(EX);nYo=r(apt,"from_config()"),apt.forEach(t),sYo=r(nZ,` class
method.`),nZ.forEach(t),lYo=i(al),rL=n(al,"P",{});var Fje=s(rL);iYo=r(Fje,"This class cannot be instantiated directly using "),oue=n(Fje,"CODE",{});var npt=s(oue);dYo=r(npt,"__init__()"),npt.forEach(t),cYo=r(Fje," (throws an error)."),Fje.forEach(t),fYo=i(al),vt=n(al,"DIV",{class:!0});var GA=s(vt);T(tL.$$.fragment,GA),mYo=i(GA),rue=n(GA,"P",{});var spt=s(rue);gYo=r(spt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),spt.forEach(t),hYo=i(GA),bd=n(GA,"P",{});var sZ=s(bd);pYo=r(sZ,`Note:
Loading a model from its configuration file does `),tue=n(sZ,"STRONG",{});var lpt=s(tue);uYo=r(lpt,"not"),lpt.forEach(t),_Yo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(sZ,"A",{href:!0});var ipt=s(CX);bYo=r(ipt,"from_pretrained()"),ipt.forEach(t),vYo=r(sZ," to load the model weights."),sZ.forEach(t),FYo=i(GA),T(xv.$$.fragment,GA),GA.forEach(t),TYo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(aL.$$.fragment,ua),MYo=i(ua),aue=n(ua,"P",{});var dpt=s(aue);EYo=r(dpt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),dpt.forEach(t),CYo=i(ua),Va=n(ua,"P",{});var OA=s(Va);wYo=r(OA,"The model class to instantiate is selected based on the "),nue=n(OA,"CODE",{});var cpt=s(nue);AYo=r(cpt,"model_type"),cpt.forEach(t),yYo=r(OA,` property of the config object (either
passed as an argument or loaded from `),sue=n(OA,"CODE",{});var fpt=s(sue);LYo=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),xYo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(OA,"CODE",{});var mpt=s(lue);$Yo=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),kYo=r(OA,":"),OA.forEach(t),SYo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);$v=n(Ve,"LI",{});var i$e=s($v);iue=n(i$e,"STRONG",{});var gpt=s(iue);RYo=r(gpt,"data2vec-audio"),gpt.forEach(t),PYo=r(i$e," \u2014 "),wX=n(i$e,"A",{href:!0});var hpt=s(wX);BYo=r(hpt,"Data2VecAudioForCTC"),hpt.forEach(t),IYo=r(i$e," (Data2VecAudio model)"),i$e.forEach(t),qYo=i(Ve),kv=n(Ve,"LI",{});var d$e=s(kv);due=n(d$e,"STRONG",{});var ppt=s(due);NYo=r(ppt,"hubert"),ppt.forEach(t),jYo=r(d$e," \u2014 "),AX=n(d$e,"A",{href:!0});var upt=s(AX);DYo=r(upt,"HubertForCTC"),upt.forEach(t),GYo=r(d$e," (Hubert model)"),d$e.forEach(t),OYo=i(Ve),Sv=n(Ve,"LI",{});var c$e=s(Sv);cue=n(c$e,"STRONG",{});var _pt=s(cue);VYo=r(_pt,"sew"),_pt.forEach(t),XYo=r(c$e," \u2014 "),yX=n(c$e,"A",{href:!0});var bpt=s(yX);zYo=r(bpt,"SEWForCTC"),bpt.forEach(t),WYo=r(c$e," (SEW model)"),c$e.forEach(t),QYo=i(Ve),Rv=n(Ve,"LI",{});var f$e=s(Rv);fue=n(f$e,"STRONG",{});var vpt=s(fue);HYo=r(vpt,"sew-d"),vpt.forEach(t),UYo=r(f$e," \u2014 "),LX=n(f$e,"A",{href:!0});var Fpt=s(LX);JYo=r(Fpt,"SEWDForCTC"),Fpt.forEach(t),YYo=r(f$e," (SEW-D model)"),f$e.forEach(t),KYo=i(Ve),Pv=n(Ve,"LI",{});var m$e=s(Pv);mue=n(m$e,"STRONG",{});var Tpt=s(mue);ZYo=r(Tpt,"unispeech"),Tpt.forEach(t),eKo=r(m$e," \u2014 "),xX=n(m$e,"A",{href:!0});var Mpt=s(xX);oKo=r(Mpt,"UniSpeechForCTC"),Mpt.forEach(t),rKo=r(m$e," (UniSpeech model)"),m$e.forEach(t),tKo=i(Ve),Bv=n(Ve,"LI",{});var g$e=s(Bv);gue=n(g$e,"STRONG",{});var Ept=s(gue);aKo=r(Ept,"unispeech-sat"),Ept.forEach(t),nKo=r(g$e," \u2014 "),$X=n(g$e,"A",{href:!0});var Cpt=s($X);sKo=r(Cpt,"UniSpeechSatForCTC"),Cpt.forEach(t),lKo=r(g$e," (UniSpeechSat model)"),g$e.forEach(t),iKo=i(Ve),Iv=n(Ve,"LI",{});var h$e=s(Iv);hue=n(h$e,"STRONG",{});var wpt=s(hue);dKo=r(wpt,"wav2vec2"),wpt.forEach(t),cKo=r(h$e," \u2014 "),kX=n(h$e,"A",{href:!0});var Apt=s(kX);fKo=r(Apt,"Wav2Vec2ForCTC"),Apt.forEach(t),mKo=r(h$e," (Wav2Vec2 model)"),h$e.forEach(t),gKo=i(Ve),qv=n(Ve,"LI",{});var p$e=s(qv);pue=n(p$e,"STRONG",{});var ypt=s(pue);hKo=r(ypt,"wav2vec2-conformer"),ypt.forEach(t),pKo=r(p$e," \u2014 "),SX=n(p$e,"A",{href:!0});var Lpt=s(SX);uKo=r(Lpt,"Wav2Vec2ConformerForCTC"),Lpt.forEach(t),_Ko=r(p$e," (Wav2Vec2-Conformer model)"),p$e.forEach(t),bKo=i(Ve),Nv=n(Ve,"LI",{});var u$e=s(Nv);uue=n(u$e,"STRONG",{});var xpt=s(uue);vKo=r(xpt,"wavlm"),xpt.forEach(t),FKo=r(u$e," \u2014 "),RX=n(u$e,"A",{href:!0});var $pt=s(RX);TKo=r($pt,"WavLMForCTC"),$pt.forEach(t),MKo=r(u$e," (WavLM model)"),u$e.forEach(t),Ve.forEach(t),EKo=i(ua),jv=n(ua,"P",{});var _$e=s(jv);CKo=r(_$e,"The model is set in evaluation mode by default using "),_ue=n(_$e,"CODE",{});var kpt=s(_ue);wKo=r(kpt,"model.eval()"),kpt.forEach(t),AKo=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(_$e,"CODE",{});var Spt=s(bue);yKo=r(Spt,"model.train()"),Spt.forEach(t),_$e.forEach(t),LKo=i(ua),T(Dv.$$.fragment,ua),ua.forEach(t),al.forEach(t),_qe=i(f),vd=n(f,"H2",{class:!0});var Tje=s(vd);Gv=n(Tje,"A",{id:!0,class:!0,href:!0});var Rpt=s(Gv);vue=n(Rpt,"SPAN",{});var Ppt=s(vue);T(nL.$$.fragment,Ppt),Ppt.forEach(t),Rpt.forEach(t),xKo=i(Tje),Fue=n(Tje,"SPAN",{});var Bpt=s(Fue);$Ko=r(Bpt,"AutoModelForSpeechSeq2Seq"),Bpt.forEach(t),Tje.forEach(t),bqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(sL.$$.fragment,nl),kKo=i(nl),Fd=n(nl,"P",{});var lZ=s(Fd);SKo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=n(lZ,"A",{href:!0});var Ipt=s(PX);RKo=r(Ipt,"from_pretrained()"),Ipt.forEach(t),PKo=r(lZ," class method or the "),BX=n(lZ,"A",{href:!0});var qpt=s(BX);BKo=r(qpt,"from_config()"),qpt.forEach(t),IKo=r(lZ,` class
method.`),lZ.forEach(t),qKo=i(nl),lL=n(nl,"P",{});var Mje=s(lL);NKo=r(Mje,"This class cannot be instantiated directly using "),Tue=n(Mje,"CODE",{});var Npt=s(Tue);jKo=r(Npt,"__init__()"),Npt.forEach(t),DKo=r(Mje," (throws an error)."),Mje.forEach(t),GKo=i(nl),Ft=n(nl,"DIV",{class:!0});var VA=s(Ft);T(iL.$$.fragment,VA),OKo=i(VA),Mue=n(VA,"P",{});var jpt=s(Mue);VKo=r(jpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jpt.forEach(t),XKo=i(VA),Td=n(VA,"P",{});var iZ=s(Td);zKo=r(iZ,`Note:
Loading a model from its configuration file does `),Eue=n(iZ,"STRONG",{});var Dpt=s(Eue);WKo=r(Dpt,"not"),Dpt.forEach(t),QKo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(iZ,"A",{href:!0});var Gpt=s(IX);HKo=r(Gpt,"from_pretrained()"),Gpt.forEach(t),UKo=r(iZ," to load the model weights."),iZ.forEach(t),JKo=i(VA),T(Ov.$$.fragment,VA),VA.forEach(t),YKo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(dL.$$.fragment,_a),KKo=i(_a),Cue=n(_a,"P",{});var Opt=s(Cue);ZKo=r(Opt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Opt.forEach(t),eZo=i(_a),Xa=n(_a,"P",{});var XA=s(Xa);oZo=r(XA,"The model class to instantiate is selected based on the "),wue=n(XA,"CODE",{});var Vpt=s(wue);rZo=r(Vpt,"model_type"),Vpt.forEach(t),tZo=r(XA,` property of the config object (either
passed as an argument or loaded from `),Aue=n(XA,"CODE",{});var Xpt=s(Aue);aZo=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),nZo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(XA,"CODE",{});var zpt=s(yue);sZo=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),lZo=r(XA,":"),XA.forEach(t),iZo=i(_a),cL=n(_a,"UL",{});var Eje=s(cL);Vv=n(Eje,"LI",{});var b$e=s(Vv);Lue=n(b$e,"STRONG",{});var Wpt=s(Lue);dZo=r(Wpt,"speech-encoder-decoder"),Wpt.forEach(t),cZo=r(b$e," \u2014 "),qX=n(b$e,"A",{href:!0});var Qpt=s(qX);fZo=r(Qpt,"SpeechEncoderDecoderModel"),Qpt.forEach(t),mZo=r(b$e," (Speech Encoder decoder model)"),b$e.forEach(t),gZo=i(Eje),Xv=n(Eje,"LI",{});var v$e=s(Xv);xue=n(v$e,"STRONG",{});var Hpt=s(xue);hZo=r(Hpt,"speech_to_text"),Hpt.forEach(t),pZo=r(v$e," \u2014 "),NX=n(v$e,"A",{href:!0});var Upt=s(NX);uZo=r(Upt,"Speech2TextForConditionalGeneration"),Upt.forEach(t),_Zo=r(v$e," (Speech2Text model)"),v$e.forEach(t),Eje.forEach(t),bZo=i(_a),zv=n(_a,"P",{});var F$e=s(zv);vZo=r(F$e,"The model is set in evaluation mode by default using "),$ue=n(F$e,"CODE",{});var Jpt=s($ue);FZo=r(Jpt,"model.eval()"),Jpt.forEach(t),TZo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=n(F$e,"CODE",{});var Ypt=s(kue);MZo=r(Ypt,"model.train()"),Ypt.forEach(t),F$e.forEach(t),EZo=i(_a),T(Wv.$$.fragment,_a),_a.forEach(t),nl.forEach(t),vqe=i(f),Md=n(f,"H2",{class:!0});var Cje=s(Md);Qv=n(Cje,"A",{id:!0,class:!0,href:!0});var Kpt=s(Qv);Sue=n(Kpt,"SPAN",{});var Zpt=s(Sue);T(fL.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),CZo=i(Cje),Rue=n(Cje,"SPAN",{});var eut=s(Rue);wZo=r(eut,"AutoModelForAudioXVector"),eut.forEach(t),Cje.forEach(t),Fqe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(mL.$$.fragment,sl),AZo=i(sl),Ed=n(sl,"P",{});var dZ=s(Ed);yZo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=n(dZ,"A",{href:!0});var out=s(jX);LZo=r(out,"from_pretrained()"),out.forEach(t),xZo=r(dZ," class method or the "),DX=n(dZ,"A",{href:!0});var rut=s(DX);$Zo=r(rut,"from_config()"),rut.forEach(t),kZo=r(dZ,` class
method.`),dZ.forEach(t),SZo=i(sl),gL=n(sl,"P",{});var wje=s(gL);RZo=r(wje,"This class cannot be instantiated directly using "),Pue=n(wje,"CODE",{});var tut=s(Pue);PZo=r(tut,"__init__()"),tut.forEach(t),BZo=r(wje," (throws an error)."),wje.forEach(t),IZo=i(sl),Tt=n(sl,"DIV",{class:!0});var zA=s(Tt);T(hL.$$.fragment,zA),qZo=i(zA),Bue=n(zA,"P",{});var aut=s(Bue);NZo=r(aut,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),aut.forEach(t),jZo=i(zA),Cd=n(zA,"P",{});var cZ=s(Cd);DZo=r(cZ,`Note:
Loading a model from its configuration file does `),Iue=n(cZ,"STRONG",{});var nut=s(Iue);GZo=r(nut,"not"),nut.forEach(t),OZo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(cZ,"A",{href:!0});var sut=s(GX);VZo=r(sut,"from_pretrained()"),sut.forEach(t),XZo=r(cZ," to load the model weights."),cZ.forEach(t),zZo=i(zA),T(Hv.$$.fragment,zA),zA.forEach(t),WZo=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(pL.$$.fragment,ba),QZo=i(ba),que=n(ba,"P",{});var lut=s(que);HZo=r(lut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lut.forEach(t),UZo=i(ba),za=n(ba,"P",{});var WA=s(za);JZo=r(WA,"The model class to instantiate is selected based on the "),Nue=n(WA,"CODE",{});var iut=s(Nue);YZo=r(iut,"model_type"),iut.forEach(t),KZo=r(WA,` property of the config object (either
passed as an argument or loaded from `),jue=n(WA,"CODE",{});var dut=s(jue);ZZo=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),eer=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(WA,"CODE",{});var cut=s(Due);oer=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),rer=r(WA,":"),WA.forEach(t),ter=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);Uv=n(ll,"LI",{});var T$e=s(Uv);Gue=n(T$e,"STRONG",{});var fut=s(Gue);aer=r(fut,"data2vec-audio"),fut.forEach(t),ner=r(T$e," \u2014 "),OX=n(T$e,"A",{href:!0});var mut=s(OX);ser=r(mut,"Data2VecAudioForXVector"),mut.forEach(t),ler=r(T$e," (Data2VecAudio model)"),T$e.forEach(t),ier=i(ll),Jv=n(ll,"LI",{});var M$e=s(Jv);Oue=n(M$e,"STRONG",{});var gut=s(Oue);der=r(gut,"unispeech-sat"),gut.forEach(t),cer=r(M$e," \u2014 "),VX=n(M$e,"A",{href:!0});var hut=s(VX);fer=r(hut,"UniSpeechSatForXVector"),hut.forEach(t),mer=r(M$e," (UniSpeechSat model)"),M$e.forEach(t),ger=i(ll),Yv=n(ll,"LI",{});var E$e=s(Yv);Vue=n(E$e,"STRONG",{});var put=s(Vue);her=r(put,"wav2vec2"),put.forEach(t),per=r(E$e," \u2014 "),XX=n(E$e,"A",{href:!0});var uut=s(XX);uer=r(uut,"Wav2Vec2ForXVector"),uut.forEach(t),_er=r(E$e," (Wav2Vec2 model)"),E$e.forEach(t),ber=i(ll),Kv=n(ll,"LI",{});var C$e=s(Kv);Xue=n(C$e,"STRONG",{});var _ut=s(Xue);ver=r(_ut,"wav2vec2-conformer"),_ut.forEach(t),Fer=r(C$e," \u2014 "),zX=n(C$e,"A",{href:!0});var but=s(zX);Ter=r(but,"Wav2Vec2ConformerForXVector"),but.forEach(t),Mer=r(C$e," (Wav2Vec2-Conformer model)"),C$e.forEach(t),Eer=i(ll),Zv=n(ll,"LI",{});var w$e=s(Zv);zue=n(w$e,"STRONG",{});var vut=s(zue);Cer=r(vut,"wavlm"),vut.forEach(t),wer=r(w$e," \u2014 "),WX=n(w$e,"A",{href:!0});var Fut=s(WX);Aer=r(Fut,"WavLMForXVector"),Fut.forEach(t),yer=r(w$e," (WavLM model)"),w$e.forEach(t),ll.forEach(t),Ler=i(ba),eF=n(ba,"P",{});var A$e=s(eF);xer=r(A$e,"The model is set in evaluation mode by default using "),Wue=n(A$e,"CODE",{});var Tut=s(Wue);$er=r(Tut,"model.eval()"),Tut.forEach(t),ker=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(A$e,"CODE",{});var Mut=s(Que);Ser=r(Mut,"model.train()"),Mut.forEach(t),A$e.forEach(t),Rer=i(ba),T(oF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),Tqe=i(f),wd=n(f,"H2",{class:!0});var Aje=s(wd);rF=n(Aje,"A",{id:!0,class:!0,href:!0});var Eut=s(rF);Hue=n(Eut,"SPAN",{});var Cut=s(Hue);T(uL.$$.fragment,Cut),Cut.forEach(t),Eut.forEach(t),Per=i(Aje),Uue=n(Aje,"SPAN",{});var wut=s(Uue);Ber=r(wut,"AutoModelForMaskedImageModeling"),wut.forEach(t),Aje.forEach(t),Mqe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(_L.$$.fragment,il),Ier=i(il),Ad=n(il,"P",{});var fZ=s(Ad);qer=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=n(fZ,"A",{href:!0});var Aut=s(QX);Ner=r(Aut,"from_pretrained()"),Aut.forEach(t),jer=r(fZ," class method or the "),HX=n(fZ,"A",{href:!0});var yut=s(HX);Der=r(yut,"from_config()"),yut.forEach(t),Ger=r(fZ,` class
method.`),fZ.forEach(t),Oer=i(il),bL=n(il,"P",{});var yje=s(bL);Ver=r(yje,"This class cannot be instantiated directly using "),Jue=n(yje,"CODE",{});var Lut=s(Jue);Xer=r(Lut,"__init__()"),Lut.forEach(t),zer=r(yje," (throws an error)."),yje.forEach(t),Wer=i(il),Mt=n(il,"DIV",{class:!0});var QA=s(Mt);T(vL.$$.fragment,QA),Qer=i(QA),Yue=n(QA,"P",{});var xut=s(Yue);Her=r(xut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xut.forEach(t),Uer=i(QA),yd=n(QA,"P",{});var mZ=s(yd);Jer=r(mZ,`Note:
Loading a model from its configuration file does `),Kue=n(mZ,"STRONG",{});var $ut=s(Kue);Yer=r($ut,"not"),$ut.forEach(t),Ker=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(mZ,"A",{href:!0});var kut=s(UX);Zer=r(kut,"from_pretrained()"),kut.forEach(t),eor=r(mZ," to load the model weights."),mZ.forEach(t),oor=i(QA),T(tF.$$.fragment,QA),QA.forEach(t),ror=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(FL.$$.fragment,va),tor=i(va),Zue=n(va,"P",{});var Sut=s(Zue);aor=r(Sut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Sut.forEach(t),nor=i(va),Wa=n(va,"P",{});var HA=s(Wa);sor=r(HA,"The model class to instantiate is selected based on the "),e_e=n(HA,"CODE",{});var Rut=s(e_e);lor=r(Rut,"model_type"),Rut.forEach(t),ior=r(HA,` property of the config object (either
passed as an argument or loaded from `),o_e=n(HA,"CODE",{});var Put=s(o_e);dor=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),cor=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(HA,"CODE",{});var But=s(r_e);mor=r(But,"pretrained_model_name_or_path"),But.forEach(t),gor=r(HA,":"),HA.forEach(t),hor=i(va),Ld=n(va,"UL",{});var gZ=s(Ld);aF=n(gZ,"LI",{});var y$e=s(aF);t_e=n(y$e,"STRONG",{});var Iut=s(t_e);por=r(Iut,"deit"),Iut.forEach(t),uor=r(y$e," \u2014 "),JX=n(y$e,"A",{href:!0});var qut=s(JX);_or=r(qut,"DeiTForMaskedImageModeling"),qut.forEach(t),bor=r(y$e," (DeiT model)"),y$e.forEach(t),vor=i(gZ),nF=n(gZ,"LI",{});var L$e=s(nF);a_e=n(L$e,"STRONG",{});var Nut=s(a_e);For=r(Nut,"swin"),Nut.forEach(t),Tor=r(L$e," \u2014 "),YX=n(L$e,"A",{href:!0});var jut=s(YX);Mor=r(jut,"SwinForMaskedImageModeling"),jut.forEach(t),Eor=r(L$e," (Swin model)"),L$e.forEach(t),Cor=i(gZ),sF=n(gZ,"LI",{});var x$e=s(sF);n_e=n(x$e,"STRONG",{});var Dut=s(n_e);wor=r(Dut,"vit"),Dut.forEach(t),Aor=r(x$e," \u2014 "),KX=n(x$e,"A",{href:!0});var Gut=s(KX);yor=r(Gut,"ViTForMaskedImageModeling"),Gut.forEach(t),Lor=r(x$e," (ViT model)"),x$e.forEach(t),gZ.forEach(t),xor=i(va),lF=n(va,"P",{});var $$e=s(lF);$or=r($$e,"The model is set in evaluation mode by default using "),s_e=n($$e,"CODE",{});var Out=s(s_e);kor=r(Out,"model.eval()"),Out.forEach(t),Sor=r($$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n($$e,"CODE",{});var Vut=s(l_e);Ror=r(Vut,"model.train()"),Vut.forEach(t),$$e.forEach(t),Por=i(va),T(iF.$$.fragment,va),va.forEach(t),il.forEach(t),Eqe=i(f),xd=n(f,"H2",{class:!0});var Lje=s(xd);dF=n(Lje,"A",{id:!0,class:!0,href:!0});var Xut=s(dF);i_e=n(Xut,"SPAN",{});var zut=s(i_e);T(TL.$$.fragment,zut),zut.forEach(t),Xut.forEach(t),Bor=i(Lje),d_e=n(Lje,"SPAN",{});var Wut=s(d_e);Ior=r(Wut,"AutoModelForObjectDetection"),Wut.forEach(t),Lje.forEach(t),Cqe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(ML.$$.fragment,dl),qor=i(dl),$d=n(dl,"P",{});var hZ=s($d);Nor=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=n(hZ,"A",{href:!0});var Qut=s(ZX);jor=r(Qut,"from_pretrained()"),Qut.forEach(t),Dor=r(hZ," class method or the "),ez=n(hZ,"A",{href:!0});var Hut=s(ez);Gor=r(Hut,"from_config()"),Hut.forEach(t),Oor=r(hZ,` class
method.`),hZ.forEach(t),Vor=i(dl),EL=n(dl,"P",{});var xje=s(EL);Xor=r(xje,"This class cannot be instantiated directly using "),c_e=n(xje,"CODE",{});var Uut=s(c_e);zor=r(Uut,"__init__()"),Uut.forEach(t),Wor=r(xje," (throws an error)."),xje.forEach(t),Qor=i(dl),Et=n(dl,"DIV",{class:!0});var UA=s(Et);T(CL.$$.fragment,UA),Hor=i(UA),f_e=n(UA,"P",{});var Jut=s(f_e);Uor=r(Jut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Jut.forEach(t),Jor=i(UA),kd=n(UA,"P",{});var pZ=s(kd);Yor=r(pZ,`Note:
Loading a model from its configuration file does `),m_e=n(pZ,"STRONG",{});var Yut=s(m_e);Kor=r(Yut,"not"),Yut.forEach(t),Zor=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(pZ,"A",{href:!0});var Kut=s(oz);err=r(Kut,"from_pretrained()"),Kut.forEach(t),orr=r(pZ," to load the model weights."),pZ.forEach(t),rrr=i(UA),T(cF.$$.fragment,UA),UA.forEach(t),trr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(wL.$$.fragment,Fa),arr=i(Fa),g_e=n(Fa,"P",{});var Zut=s(g_e);nrr=r(Zut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Zut.forEach(t),srr=i(Fa),Qa=n(Fa,"P",{});var JA=s(Qa);lrr=r(JA,"The model class to instantiate is selected based on the "),h_e=n(JA,"CODE",{});var e_t=s(h_e);irr=r(e_t,"model_type"),e_t.forEach(t),drr=r(JA,` property of the config object (either
passed as an argument or loaded from `),p_e=n(JA,"CODE",{});var o_t=s(p_e);crr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),frr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(JA,"CODE",{});var r_t=s(u_e);mrr=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),grr=r(JA,":"),JA.forEach(t),hrr=i(Fa),AL=n(Fa,"UL",{});var $je=s(AL);fF=n($je,"LI",{});var k$e=s(fF);__e=n(k$e,"STRONG",{});var t_t=s(__e);prr=r(t_t,"detr"),t_t.forEach(t),urr=r(k$e," \u2014 "),rz=n(k$e,"A",{href:!0});var a_t=s(rz);_rr=r(a_t,"DetrForObjectDetection"),a_t.forEach(t),brr=r(k$e," (DETR model)"),k$e.forEach(t),vrr=i($je),mF=n($je,"LI",{});var S$e=s(mF);b_e=n(S$e,"STRONG",{});var n_t=s(b_e);Frr=r(n_t,"yolos"),n_t.forEach(t),Trr=r(S$e," \u2014 "),tz=n(S$e,"A",{href:!0});var s_t=s(tz);Mrr=r(s_t,"YolosForObjectDetection"),s_t.forEach(t),Err=r(S$e," (YOLOS model)"),S$e.forEach(t),$je.forEach(t),Crr=i(Fa),gF=n(Fa,"P",{});var R$e=s(gF);wrr=r(R$e,"The model is set in evaluation mode by default using "),v_e=n(R$e,"CODE",{});var l_t=s(v_e);Arr=r(l_t,"model.eval()"),l_t.forEach(t),yrr=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(R$e,"CODE",{});var i_t=s(F_e);Lrr=r(i_t,"model.train()"),i_t.forEach(t),R$e.forEach(t),xrr=i(Fa),T(hF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),wqe=i(f),Sd=n(f,"H2",{class:!0});var kje=s(Sd);pF=n(kje,"A",{id:!0,class:!0,href:!0});var d_t=s(pF);T_e=n(d_t,"SPAN",{});var c_t=s(T_e);T(yL.$$.fragment,c_t),c_t.forEach(t),d_t.forEach(t),$rr=i(kje),M_e=n(kje,"SPAN",{});var f_t=s(M_e);krr=r(f_t,"AutoModelForImageSegmentation"),f_t.forEach(t),kje.forEach(t),Aqe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(LL.$$.fragment,cl),Srr=i(cl),Rd=n(cl,"P",{});var uZ=s(Rd);Rrr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=n(uZ,"A",{href:!0});var m_t=s(az);Prr=r(m_t,"from_pretrained()"),m_t.forEach(t),Brr=r(uZ," class method or the "),nz=n(uZ,"A",{href:!0});var g_t=s(nz);Irr=r(g_t,"from_config()"),g_t.forEach(t),qrr=r(uZ,` class
method.`),uZ.forEach(t),Nrr=i(cl),xL=n(cl,"P",{});var Sje=s(xL);jrr=r(Sje,"This class cannot be instantiated directly using "),E_e=n(Sje,"CODE",{});var h_t=s(E_e);Drr=r(h_t,"__init__()"),h_t.forEach(t),Grr=r(Sje," (throws an error)."),Sje.forEach(t),Orr=i(cl),Ct=n(cl,"DIV",{class:!0});var YA=s(Ct);T($L.$$.fragment,YA),Vrr=i(YA),C_e=n(YA,"P",{});var p_t=s(C_e);Xrr=r(p_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),p_t.forEach(t),zrr=i(YA),Pd=n(YA,"P",{});var _Z=s(Pd);Wrr=r(_Z,`Note:
Loading a model from its configuration file does `),w_e=n(_Z,"STRONG",{});var u_t=s(w_e);Qrr=r(u_t,"not"),u_t.forEach(t),Hrr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(_Z,"A",{href:!0});var __t=s(sz);Urr=r(__t,"from_pretrained()"),__t.forEach(t),Jrr=r(_Z," to load the model weights."),_Z.forEach(t),Yrr=i(YA),T(uF.$$.fragment,YA),YA.forEach(t),Krr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(kL.$$.fragment,Ta),Zrr=i(Ta),A_e=n(Ta,"P",{});var b_t=s(A_e);etr=r(b_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),b_t.forEach(t),otr=i(Ta),Ha=n(Ta,"P",{});var KA=s(Ha);rtr=r(KA,"The model class to instantiate is selected based on the "),y_e=n(KA,"CODE",{});var v_t=s(y_e);ttr=r(v_t,"model_type"),v_t.forEach(t),atr=r(KA,` property of the config object (either
passed as an argument or loaded from `),L_e=n(KA,"CODE",{});var F_t=s(L_e);ntr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),str=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(KA,"CODE",{});var T_t=s(x_e);ltr=r(T_t,"pretrained_model_name_or_path"),T_t.forEach(t),itr=r(KA,":"),KA.forEach(t),dtr=i(Ta),$_e=n(Ta,"UL",{});var M_t=s($_e);_F=n(M_t,"LI",{});var P$e=s(_F);k_e=n(P$e,"STRONG",{});var E_t=s(k_e);ctr=r(E_t,"detr"),E_t.forEach(t),ftr=r(P$e," \u2014 "),lz=n(P$e,"A",{href:!0});var C_t=s(lz);mtr=r(C_t,"DetrForSegmentation"),C_t.forEach(t),gtr=r(P$e," (DETR model)"),P$e.forEach(t),M_t.forEach(t),htr=i(Ta),bF=n(Ta,"P",{});var B$e=s(bF);ptr=r(B$e,"The model is set in evaluation mode by default using "),S_e=n(B$e,"CODE",{});var w_t=s(S_e);utr=r(w_t,"model.eval()"),w_t.forEach(t),_tr=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(B$e,"CODE",{});var A_t=s(R_e);btr=r(A_t,"model.train()"),A_t.forEach(t),B$e.forEach(t),vtr=i(Ta),T(vF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),yqe=i(f),Bd=n(f,"H2",{class:!0});var Rje=s(Bd);FF=n(Rje,"A",{id:!0,class:!0,href:!0});var y_t=s(FF);P_e=n(y_t,"SPAN",{});var L_t=s(P_e);T(SL.$$.fragment,L_t),L_t.forEach(t),y_t.forEach(t),Ftr=i(Rje),B_e=n(Rje,"SPAN",{});var x_t=s(B_e);Ttr=r(x_t,"AutoModelForSemanticSegmentation"),x_t.forEach(t),Rje.forEach(t),Lqe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(RL.$$.fragment,fl),Mtr=i(fl),Id=n(fl,"P",{});var bZ=s(Id);Etr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=n(bZ,"A",{href:!0});var $_t=s(iz);Ctr=r($_t,"from_pretrained()"),$_t.forEach(t),wtr=r(bZ," class method or the "),dz=n(bZ,"A",{href:!0});var k_t=s(dz);Atr=r(k_t,"from_config()"),k_t.forEach(t),ytr=r(bZ,` class
method.`),bZ.forEach(t),Ltr=i(fl),PL=n(fl,"P",{});var Pje=s(PL);xtr=r(Pje,"This class cannot be instantiated directly using "),I_e=n(Pje,"CODE",{});var S_t=s(I_e);$tr=r(S_t,"__init__()"),S_t.forEach(t),ktr=r(Pje," (throws an error)."),Pje.forEach(t),Str=i(fl),wt=n(fl,"DIV",{class:!0});var ZA=s(wt);T(BL.$$.fragment,ZA),Rtr=i(ZA),q_e=n(ZA,"P",{});var R_t=s(q_e);Ptr=r(R_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),R_t.forEach(t),Btr=i(ZA),qd=n(ZA,"P",{});var vZ=s(qd);Itr=r(vZ,`Note:
Loading a model from its configuration file does `),N_e=n(vZ,"STRONG",{});var P_t=s(N_e);qtr=r(P_t,"not"),P_t.forEach(t),Ntr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(vZ,"A",{href:!0});var B_t=s(cz);jtr=r(B_t,"from_pretrained()"),B_t.forEach(t),Dtr=r(vZ," to load the model weights."),vZ.forEach(t),Gtr=i(ZA),T(TF.$$.fragment,ZA),ZA.forEach(t),Otr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(IL.$$.fragment,Ma),Vtr=i(Ma),j_e=n(Ma,"P",{});var I_t=s(j_e);Xtr=r(I_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),I_t.forEach(t),ztr=i(Ma),Ua=n(Ma,"P",{});var e6=s(Ua);Wtr=r(e6,"The model class to instantiate is selected based on the "),D_e=n(e6,"CODE",{});var q_t=s(D_e);Qtr=r(q_t,"model_type"),q_t.forEach(t),Htr=r(e6,` property of the config object (either
passed as an argument or loaded from `),G_e=n(e6,"CODE",{});var N_t=s(G_e);Utr=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),Jtr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(e6,"CODE",{});var j_t=s(O_e);Ytr=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),Ktr=r(e6,":"),e6.forEach(t),Ztr=i(Ma),Ja=n(Ma,"UL",{});var o6=s(Ja);MF=n(o6,"LI",{});var I$e=s(MF);V_e=n(I$e,"STRONG",{});var D_t=s(V_e);ear=r(D_t,"beit"),D_t.forEach(t),oar=r(I$e," \u2014 "),fz=n(I$e,"A",{href:!0});var G_t=s(fz);rar=r(G_t,"BeitForSemanticSegmentation"),G_t.forEach(t),tar=r(I$e," (BEiT model)"),I$e.forEach(t),aar=i(o6),EF=n(o6,"LI",{});var q$e=s(EF);X_e=n(q$e,"STRONG",{});var O_t=s(X_e);nar=r(O_t,"data2vec-vision"),O_t.forEach(t),sar=r(q$e," \u2014 "),mz=n(q$e,"A",{href:!0});var V_t=s(mz);lar=r(V_t,"Data2VecVisionForSemanticSegmentation"),V_t.forEach(t),iar=r(q$e," (Data2VecVision model)"),q$e.forEach(t),dar=i(o6),CF=n(o6,"LI",{});var N$e=s(CF);z_e=n(N$e,"STRONG",{});var X_t=s(z_e);car=r(X_t,"dpt"),X_t.forEach(t),far=r(N$e," \u2014 "),gz=n(N$e,"A",{href:!0});var z_t=s(gz);mar=r(z_t,"DPTForSemanticSegmentation"),z_t.forEach(t),gar=r(N$e," (DPT model)"),N$e.forEach(t),har=i(o6),wF=n(o6,"LI",{});var j$e=s(wF);W_e=n(j$e,"STRONG",{});var W_t=s(W_e);par=r(W_t,"segformer"),W_t.forEach(t),uar=r(j$e," \u2014 "),hz=n(j$e,"A",{href:!0});var Q_t=s(hz);_ar=r(Q_t,"SegformerForSemanticSegmentation"),Q_t.forEach(t),bar=r(j$e," (SegFormer model)"),j$e.forEach(t),o6.forEach(t),Far=i(Ma),AF=n(Ma,"P",{});var D$e=s(AF);Tar=r(D$e,"The model is set in evaluation mode by default using "),Q_e=n(D$e,"CODE",{});var H_t=s(Q_e);Mar=r(H_t,"model.eval()"),H_t.forEach(t),Ear=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(D$e,"CODE",{});var U_t=s(H_e);Car=r(U_t,"model.train()"),U_t.forEach(t),D$e.forEach(t),war=i(Ma),T(yF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),xqe=i(f),Nd=n(f,"H2",{class:!0});var Bje=s(Nd);LF=n(Bje,"A",{id:!0,class:!0,href:!0});var J_t=s(LF);U_e=n(J_t,"SPAN",{});var Y_t=s(U_e);T(qL.$$.fragment,Y_t),Y_t.forEach(t),J_t.forEach(t),Aar=i(Bje),J_e=n(Bje,"SPAN",{});var K_t=s(J_e);yar=r(K_t,"AutoModelForInstanceSegmentation"),K_t.forEach(t),Bje.forEach(t),$qe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(NL.$$.fragment,ml),Lar=i(ml),jd=n(ml,"P",{});var FZ=s(jd);xar=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pz=n(FZ,"A",{href:!0});var Z_t=s(pz);$ar=r(Z_t,"from_pretrained()"),Z_t.forEach(t),kar=r(FZ," class method or the "),uz=n(FZ,"A",{href:!0});var e2t=s(uz);Sar=r(e2t,"from_config()"),e2t.forEach(t),Rar=r(FZ,` class
method.`),FZ.forEach(t),Par=i(ml),jL=n(ml,"P",{});var Ije=s(jL);Bar=r(Ije,"This class cannot be instantiated directly using "),Y_e=n(Ije,"CODE",{});var o2t=s(Y_e);Iar=r(o2t,"__init__()"),o2t.forEach(t),qar=r(Ije," (throws an error)."),Ije.forEach(t),Nar=i(ml),At=n(ml,"DIV",{class:!0});var r6=s(At);T(DL.$$.fragment,r6),jar=i(r6),K_e=n(r6,"P",{});var r2t=s(K_e);Dar=r(r2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),r2t.forEach(t),Gar=i(r6),Dd=n(r6,"P",{});var TZ=s(Dd);Oar=r(TZ,`Note:
Loading a model from its configuration file does `),Z_e=n(TZ,"STRONG",{});var t2t=s(Z_e);Var=r(t2t,"not"),t2t.forEach(t),Xar=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(TZ,"A",{href:!0});var a2t=s(_z);zar=r(a2t,"from_pretrained()"),a2t.forEach(t),War=r(TZ," to load the model weights."),TZ.forEach(t),Qar=i(r6),T(xF.$$.fragment,r6),r6.forEach(t),Har=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(GL.$$.fragment,Ea),Uar=i(Ea),e2e=n(Ea,"P",{});var n2t=s(e2e);Jar=r(n2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),n2t.forEach(t),Yar=i(Ea),Ya=n(Ea,"P",{});var t6=s(Ya);Kar=r(t6,"The model class to instantiate is selected based on the "),o2e=n(t6,"CODE",{});var s2t=s(o2e);Zar=r(s2t,"model_type"),s2t.forEach(t),enr=r(t6,` property of the config object (either
passed as an argument or loaded from `),r2e=n(t6,"CODE",{});var l2t=s(r2e);onr=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),rnr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(t6,"CODE",{});var i2t=s(t2e);tnr=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),anr=r(t6,":"),t6.forEach(t),nnr=i(Ea),a2e=n(Ea,"UL",{});var d2t=s(a2e);$F=n(d2t,"LI",{});var G$e=s($F);n2e=n(G$e,"STRONG",{});var c2t=s(n2e);snr=r(c2t,"maskformer"),c2t.forEach(t),lnr=r(G$e," \u2014 "),bz=n(G$e,"A",{href:!0});var f2t=s(bz);inr=r(f2t,"MaskFormerForInstanceSegmentation"),f2t.forEach(t),dnr=r(G$e," (MaskFormer model)"),G$e.forEach(t),d2t.forEach(t),cnr=i(Ea),kF=n(Ea,"P",{});var O$e=s(kF);fnr=r(O$e,"The model is set in evaluation mode by default using "),s2e=n(O$e,"CODE",{});var m2t=s(s2e);mnr=r(m2t,"model.eval()"),m2t.forEach(t),gnr=r(O$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=n(O$e,"CODE",{});var g2t=s(l2e);hnr=r(g2t,"model.train()"),g2t.forEach(t),O$e.forEach(t),pnr=i(Ea),T(SF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),kqe=i(f),Gd=n(f,"H2",{class:!0});var qje=s(Gd);RF=n(qje,"A",{id:!0,class:!0,href:!0});var h2t=s(RF);i2e=n(h2t,"SPAN",{});var p2t=s(i2e);T(OL.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),unr=i(qje),d2e=n(qje,"SPAN",{});var u2t=s(d2e);_nr=r(u2t,"TFAutoModel"),u2t.forEach(t),qje.forEach(t),Sqe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(VL.$$.fragment,gl),bnr=i(gl),Od=n(gl,"P",{});var MZ=s(Od);vnr=r(MZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=n(MZ,"A",{href:!0});var _2t=s(vz);Fnr=r(_2t,"from_pretrained()"),_2t.forEach(t),Tnr=r(MZ," class method or the "),Fz=n(MZ,"A",{href:!0});var b2t=s(Fz);Mnr=r(b2t,"from_config()"),b2t.forEach(t),Enr=r(MZ,` class
method.`),MZ.forEach(t),Cnr=i(gl),XL=n(gl,"P",{});var Nje=s(XL);wnr=r(Nje,"This class cannot be instantiated directly using "),c2e=n(Nje,"CODE",{});var v2t=s(c2e);Anr=r(v2t,"__init__()"),v2t.forEach(t),ynr=r(Nje," (throws an error)."),Nje.forEach(t),Lnr=i(gl),yt=n(gl,"DIV",{class:!0});var a6=s(yt);T(zL.$$.fragment,a6),xnr=i(a6),f2e=n(a6,"P",{});var F2t=s(f2e);$nr=r(F2t,"Instantiates one of the base model classes of the library from a configuration."),F2t.forEach(t),knr=i(a6),Vd=n(a6,"P",{});var EZ=s(Vd);Snr=r(EZ,`Note:
Loading a model from its configuration file does `),m2e=n(EZ,"STRONG",{});var T2t=s(m2e);Rnr=r(T2t,"not"),T2t.forEach(t),Pnr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(EZ,"A",{href:!0});var M2t=s(Tz);Bnr=r(M2t,"from_pretrained()"),M2t.forEach(t),Inr=r(EZ," to load the model weights."),EZ.forEach(t),qnr=i(a6),T(PF.$$.fragment,a6),a6.forEach(t),Nnr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(WL.$$.fragment,hl),jnr=i(hl),g2e=n(hl,"P",{});var E2t=s(g2e);Dnr=r(E2t,"Instantiate one of the base model classes of the library from a pretrained model."),E2t.forEach(t),Gnr=i(hl),Ka=n(hl,"P",{});var n6=s(Ka);Onr=r(n6,"The model class to instantiate is selected based on the "),h2e=n(n6,"CODE",{});var C2t=s(h2e);Vnr=r(C2t,"model_type"),C2t.forEach(t),Xnr=r(n6,` property of the config object (either
passed as an argument or loaded from `),p2e=n(n6,"CODE",{});var w2t=s(p2e);znr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Wnr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(n6,"CODE",{});var A2t=s(u2e);Qnr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),Hnr=r(n6,":"),n6.forEach(t),Unr=i(hl),N=n(hl,"UL",{});var D=s(N);BF=n(D,"LI",{});var V$e=s(BF);_2e=n(V$e,"STRONG",{});var y2t=s(_2e);Jnr=r(y2t,"albert"),y2t.forEach(t),Ynr=r(V$e," \u2014 "),Mz=n(V$e,"A",{href:!0});var L2t=s(Mz);Knr=r(L2t,"TFAlbertModel"),L2t.forEach(t),Znr=r(V$e," (ALBERT model)"),V$e.forEach(t),esr=i(D),IF=n(D,"LI",{});var X$e=s(IF);b2e=n(X$e,"STRONG",{});var x2t=s(b2e);osr=r(x2t,"bart"),x2t.forEach(t),rsr=r(X$e," \u2014 "),Ez=n(X$e,"A",{href:!0});var $2t=s(Ez);tsr=r($2t,"TFBartModel"),$2t.forEach(t),asr=r(X$e," (BART model)"),X$e.forEach(t),nsr=i(D),qF=n(D,"LI",{});var z$e=s(qF);v2e=n(z$e,"STRONG",{});var k2t=s(v2e);ssr=r(k2t,"bert"),k2t.forEach(t),lsr=r(z$e," \u2014 "),Cz=n(z$e,"A",{href:!0});var S2t=s(Cz);isr=r(S2t,"TFBertModel"),S2t.forEach(t),dsr=r(z$e," (BERT model)"),z$e.forEach(t),csr=i(D),NF=n(D,"LI",{});var W$e=s(NF);F2e=n(W$e,"STRONG",{});var R2t=s(F2e);fsr=r(R2t,"blenderbot"),R2t.forEach(t),msr=r(W$e," \u2014 "),wz=n(W$e,"A",{href:!0});var P2t=s(wz);gsr=r(P2t,"TFBlenderbotModel"),P2t.forEach(t),hsr=r(W$e," (Blenderbot model)"),W$e.forEach(t),psr=i(D),jF=n(D,"LI",{});var Q$e=s(jF);T2e=n(Q$e,"STRONG",{});var B2t=s(T2e);usr=r(B2t,"blenderbot-small"),B2t.forEach(t),_sr=r(Q$e," \u2014 "),Az=n(Q$e,"A",{href:!0});var I2t=s(Az);bsr=r(I2t,"TFBlenderbotSmallModel"),I2t.forEach(t),vsr=r(Q$e," (BlenderbotSmall model)"),Q$e.forEach(t),Fsr=i(D),DF=n(D,"LI",{});var H$e=s(DF);M2e=n(H$e,"STRONG",{});var q2t=s(M2e);Tsr=r(q2t,"camembert"),q2t.forEach(t),Msr=r(H$e," \u2014 "),yz=n(H$e,"A",{href:!0});var N2t=s(yz);Esr=r(N2t,"TFCamembertModel"),N2t.forEach(t),Csr=r(H$e," (CamemBERT model)"),H$e.forEach(t),wsr=i(D),GF=n(D,"LI",{});var U$e=s(GF);E2e=n(U$e,"STRONG",{});var j2t=s(E2e);Asr=r(j2t,"clip"),j2t.forEach(t),ysr=r(U$e," \u2014 "),Lz=n(U$e,"A",{href:!0});var D2t=s(Lz);Lsr=r(D2t,"TFCLIPModel"),D2t.forEach(t),xsr=r(U$e," (CLIP model)"),U$e.forEach(t),$sr=i(D),OF=n(D,"LI",{});var J$e=s(OF);C2e=n(J$e,"STRONG",{});var G2t=s(C2e);ksr=r(G2t,"convbert"),G2t.forEach(t),Ssr=r(J$e," \u2014 "),xz=n(J$e,"A",{href:!0});var O2t=s(xz);Rsr=r(O2t,"TFConvBertModel"),O2t.forEach(t),Psr=r(J$e," (ConvBERT model)"),J$e.forEach(t),Bsr=i(D),VF=n(D,"LI",{});var Y$e=s(VF);w2e=n(Y$e,"STRONG",{});var V2t=s(w2e);Isr=r(V2t,"convnext"),V2t.forEach(t),qsr=r(Y$e," \u2014 "),$z=n(Y$e,"A",{href:!0});var X2t=s($z);Nsr=r(X2t,"TFConvNextModel"),X2t.forEach(t),jsr=r(Y$e," (ConvNext model)"),Y$e.forEach(t),Dsr=i(D),XF=n(D,"LI",{});var K$e=s(XF);A2e=n(K$e,"STRONG",{});var z2t=s(A2e);Gsr=r(z2t,"ctrl"),z2t.forEach(t),Osr=r(K$e," \u2014 "),kz=n(K$e,"A",{href:!0});var W2t=s(kz);Vsr=r(W2t,"TFCTRLModel"),W2t.forEach(t),Xsr=r(K$e," (CTRL model)"),K$e.forEach(t),zsr=i(D),zF=n(D,"LI",{});var Z$e=s(zF);y2e=n(Z$e,"STRONG",{});var Q2t=s(y2e);Wsr=r(Q2t,"data2vec-vision"),Q2t.forEach(t),Qsr=r(Z$e," \u2014 "),Sz=n(Z$e,"A",{href:!0});var H2t=s(Sz);Hsr=r(H2t,"TFData2VecVisionModel"),H2t.forEach(t),Usr=r(Z$e," (Data2VecVision model)"),Z$e.forEach(t),Jsr=i(D),WF=n(D,"LI",{});var eke=s(WF);L2e=n(eke,"STRONG",{});var U2t=s(L2e);Ysr=r(U2t,"deberta"),U2t.forEach(t),Ksr=r(eke," \u2014 "),Rz=n(eke,"A",{href:!0});var J2t=s(Rz);Zsr=r(J2t,"TFDebertaModel"),J2t.forEach(t),elr=r(eke," (DeBERTa model)"),eke.forEach(t),olr=i(D),QF=n(D,"LI",{});var oke=s(QF);x2e=n(oke,"STRONG",{});var Y2t=s(x2e);rlr=r(Y2t,"deberta-v2"),Y2t.forEach(t),tlr=r(oke," \u2014 "),Pz=n(oke,"A",{href:!0});var K2t=s(Pz);alr=r(K2t,"TFDebertaV2Model"),K2t.forEach(t),nlr=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),slr=i(D),HF=n(D,"LI",{});var rke=s(HF);$2e=n(rke,"STRONG",{});var Z2t=s($2e);llr=r(Z2t,"distilbert"),Z2t.forEach(t),ilr=r(rke," \u2014 "),Bz=n(rke,"A",{href:!0});var e1t=s(Bz);dlr=r(e1t,"TFDistilBertModel"),e1t.forEach(t),clr=r(rke," (DistilBERT model)"),rke.forEach(t),flr=i(D),UF=n(D,"LI",{});var tke=s(UF);k2e=n(tke,"STRONG",{});var o1t=s(k2e);mlr=r(o1t,"dpr"),o1t.forEach(t),glr=r(tke," \u2014 "),Iz=n(tke,"A",{href:!0});var r1t=s(Iz);hlr=r(r1t,"TFDPRQuestionEncoder"),r1t.forEach(t),plr=r(tke," (DPR model)"),tke.forEach(t),ulr=i(D),JF=n(D,"LI",{});var ake=s(JF);S2e=n(ake,"STRONG",{});var t1t=s(S2e);_lr=r(t1t,"electra"),t1t.forEach(t),blr=r(ake," \u2014 "),qz=n(ake,"A",{href:!0});var a1t=s(qz);vlr=r(a1t,"TFElectraModel"),a1t.forEach(t),Flr=r(ake," (ELECTRA model)"),ake.forEach(t),Tlr=i(D),YF=n(D,"LI",{});var nke=s(YF);R2e=n(nke,"STRONG",{});var n1t=s(R2e);Mlr=r(n1t,"flaubert"),n1t.forEach(t),Elr=r(nke," \u2014 "),Nz=n(nke,"A",{href:!0});var s1t=s(Nz);Clr=r(s1t,"TFFlaubertModel"),s1t.forEach(t),wlr=r(nke," (FlauBERT model)"),nke.forEach(t),Alr=i(D),Is=n(D,"LI",{});var C$=s(Is);P2e=n(C$,"STRONG",{});var l1t=s(P2e);ylr=r(l1t,"funnel"),l1t.forEach(t),Llr=r(C$," \u2014 "),jz=n(C$,"A",{href:!0});var i1t=s(jz);xlr=r(i1t,"TFFunnelModel"),i1t.forEach(t),$lr=r(C$," or "),Dz=n(C$,"A",{href:!0});var d1t=s(Dz);klr=r(d1t,"TFFunnelBaseModel"),d1t.forEach(t),Slr=r(C$," (Funnel Transformer model)"),C$.forEach(t),Rlr=i(D),KF=n(D,"LI",{});var ske=s(KF);B2e=n(ske,"STRONG",{});var c1t=s(B2e);Plr=r(c1t,"gpt2"),c1t.forEach(t),Blr=r(ske," \u2014 "),Gz=n(ske,"A",{href:!0});var f1t=s(Gz);Ilr=r(f1t,"TFGPT2Model"),f1t.forEach(t),qlr=r(ske," (OpenAI GPT-2 model)"),ske.forEach(t),Nlr=i(D),ZF=n(D,"LI",{});var lke=s(ZF);I2e=n(lke,"STRONG",{});var m1t=s(I2e);jlr=r(m1t,"gptj"),m1t.forEach(t),Dlr=r(lke," \u2014 "),Oz=n(lke,"A",{href:!0});var g1t=s(Oz);Glr=r(g1t,"TFGPTJModel"),g1t.forEach(t),Olr=r(lke," (GPT-J model)"),lke.forEach(t),Vlr=i(D),eT=n(D,"LI",{});var ike=s(eT);q2e=n(ike,"STRONG",{});var h1t=s(q2e);Xlr=r(h1t,"hubert"),h1t.forEach(t),zlr=r(ike," \u2014 "),Vz=n(ike,"A",{href:!0});var p1t=s(Vz);Wlr=r(p1t,"TFHubertModel"),p1t.forEach(t),Qlr=r(ike," (Hubert model)"),ike.forEach(t),Hlr=i(D),oT=n(D,"LI",{});var dke=s(oT);N2e=n(dke,"STRONG",{});var u1t=s(N2e);Ulr=r(u1t,"layoutlm"),u1t.forEach(t),Jlr=r(dke," \u2014 "),Xz=n(dke,"A",{href:!0});var _1t=s(Xz);Ylr=r(_1t,"TFLayoutLMModel"),_1t.forEach(t),Klr=r(dke," (LayoutLM model)"),dke.forEach(t),Zlr=i(D),rT=n(D,"LI",{});var cke=s(rT);j2e=n(cke,"STRONG",{});var b1t=s(j2e);eir=r(b1t,"led"),b1t.forEach(t),oir=r(cke," \u2014 "),zz=n(cke,"A",{href:!0});var v1t=s(zz);rir=r(v1t,"TFLEDModel"),v1t.forEach(t),tir=r(cke," (LED model)"),cke.forEach(t),air=i(D),tT=n(D,"LI",{});var fke=s(tT);D2e=n(fke,"STRONG",{});var F1t=s(D2e);nir=r(F1t,"longformer"),F1t.forEach(t),sir=r(fke," \u2014 "),Wz=n(fke,"A",{href:!0});var T1t=s(Wz);lir=r(T1t,"TFLongformerModel"),T1t.forEach(t),iir=r(fke," (Longformer model)"),fke.forEach(t),dir=i(D),aT=n(D,"LI",{});var mke=s(aT);G2e=n(mke,"STRONG",{});var M1t=s(G2e);cir=r(M1t,"lxmert"),M1t.forEach(t),fir=r(mke," \u2014 "),Qz=n(mke,"A",{href:!0});var E1t=s(Qz);mir=r(E1t,"TFLxmertModel"),E1t.forEach(t),gir=r(mke," (LXMERT model)"),mke.forEach(t),hir=i(D),nT=n(D,"LI",{});var gke=s(nT);O2e=n(gke,"STRONG",{});var C1t=s(O2e);pir=r(C1t,"marian"),C1t.forEach(t),uir=r(gke," \u2014 "),Hz=n(gke,"A",{href:!0});var w1t=s(Hz);_ir=r(w1t,"TFMarianModel"),w1t.forEach(t),bir=r(gke," (Marian model)"),gke.forEach(t),vir=i(D),sT=n(D,"LI",{});var hke=s(sT);V2e=n(hke,"STRONG",{});var A1t=s(V2e);Fir=r(A1t,"mbart"),A1t.forEach(t),Tir=r(hke," \u2014 "),Uz=n(hke,"A",{href:!0});var y1t=s(Uz);Mir=r(y1t,"TFMBartModel"),y1t.forEach(t),Eir=r(hke," (mBART model)"),hke.forEach(t),Cir=i(D),lT=n(D,"LI",{});var pke=s(lT);X2e=n(pke,"STRONG",{});var L1t=s(X2e);wir=r(L1t,"mobilebert"),L1t.forEach(t),Air=r(pke," \u2014 "),Jz=n(pke,"A",{href:!0});var x1t=s(Jz);yir=r(x1t,"TFMobileBertModel"),x1t.forEach(t),Lir=r(pke," (MobileBERT model)"),pke.forEach(t),xir=i(D),iT=n(D,"LI",{});var uke=s(iT);z2e=n(uke,"STRONG",{});var $1t=s(z2e);$ir=r($1t,"mpnet"),$1t.forEach(t),kir=r(uke," \u2014 "),Yz=n(uke,"A",{href:!0});var k1t=s(Yz);Sir=r(k1t,"TFMPNetModel"),k1t.forEach(t),Rir=r(uke," (MPNet model)"),uke.forEach(t),Pir=i(D),dT=n(D,"LI",{});var _ke=s(dT);W2e=n(_ke,"STRONG",{});var S1t=s(W2e);Bir=r(S1t,"mt5"),S1t.forEach(t),Iir=r(_ke," \u2014 "),Kz=n(_ke,"A",{href:!0});var R1t=s(Kz);qir=r(R1t,"TFMT5Model"),R1t.forEach(t),Nir=r(_ke," (mT5 model)"),_ke.forEach(t),jir=i(D),cT=n(D,"LI",{});var bke=s(cT);Q2e=n(bke,"STRONG",{});var P1t=s(Q2e);Dir=r(P1t,"openai-gpt"),P1t.forEach(t),Gir=r(bke," \u2014 "),Zz=n(bke,"A",{href:!0});var B1t=s(Zz);Oir=r(B1t,"TFOpenAIGPTModel"),B1t.forEach(t),Vir=r(bke," (OpenAI GPT model)"),bke.forEach(t),Xir=i(D),fT=n(D,"LI",{});var vke=s(fT);H2e=n(vke,"STRONG",{});var I1t=s(H2e);zir=r(I1t,"pegasus"),I1t.forEach(t),Wir=r(vke," \u2014 "),eW=n(vke,"A",{href:!0});var q1t=s(eW);Qir=r(q1t,"TFPegasusModel"),q1t.forEach(t),Hir=r(vke," (Pegasus model)"),vke.forEach(t),Uir=i(D),mT=n(D,"LI",{});var Fke=s(mT);U2e=n(Fke,"STRONG",{});var N1t=s(U2e);Jir=r(N1t,"rembert"),N1t.forEach(t),Yir=r(Fke," \u2014 "),oW=n(Fke,"A",{href:!0});var j1t=s(oW);Kir=r(j1t,"TFRemBertModel"),j1t.forEach(t),Zir=r(Fke," (RemBERT model)"),Fke.forEach(t),edr=i(D),gT=n(D,"LI",{});var Tke=s(gT);J2e=n(Tke,"STRONG",{});var D1t=s(J2e);odr=r(D1t,"roberta"),D1t.forEach(t),rdr=r(Tke," \u2014 "),rW=n(Tke,"A",{href:!0});var G1t=s(rW);tdr=r(G1t,"TFRobertaModel"),G1t.forEach(t),adr=r(Tke," (RoBERTa model)"),Tke.forEach(t),ndr=i(D),hT=n(D,"LI",{});var Mke=s(hT);Y2e=n(Mke,"STRONG",{});var O1t=s(Y2e);sdr=r(O1t,"roformer"),O1t.forEach(t),ldr=r(Mke," \u2014 "),tW=n(Mke,"A",{href:!0});var V1t=s(tW);idr=r(V1t,"TFRoFormerModel"),V1t.forEach(t),ddr=r(Mke," (RoFormer model)"),Mke.forEach(t),cdr=i(D),pT=n(D,"LI",{});var Eke=s(pT);K2e=n(Eke,"STRONG",{});var X1t=s(K2e);fdr=r(X1t,"speech_to_text"),X1t.forEach(t),mdr=r(Eke," \u2014 "),aW=n(Eke,"A",{href:!0});var z1t=s(aW);gdr=r(z1t,"TFSpeech2TextModel"),z1t.forEach(t),hdr=r(Eke," (Speech2Text model)"),Eke.forEach(t),pdr=i(D),uT=n(D,"LI",{});var Cke=s(uT);Z2e=n(Cke,"STRONG",{});var W1t=s(Z2e);udr=r(W1t,"swin"),W1t.forEach(t),_dr=r(Cke," \u2014 "),nW=n(Cke,"A",{href:!0});var Q1t=s(nW);bdr=r(Q1t,"TFSwinModel"),Q1t.forEach(t),vdr=r(Cke," (Swin model)"),Cke.forEach(t),Fdr=i(D),_T=n(D,"LI",{});var wke=s(_T);e1e=n(wke,"STRONG",{});var H1t=s(e1e);Tdr=r(H1t,"t5"),H1t.forEach(t),Mdr=r(wke," \u2014 "),sW=n(wke,"A",{href:!0});var U1t=s(sW);Edr=r(U1t,"TFT5Model"),U1t.forEach(t),Cdr=r(wke," (T5 model)"),wke.forEach(t),wdr=i(D),bT=n(D,"LI",{});var Ake=s(bT);o1e=n(Ake,"STRONG",{});var J1t=s(o1e);Adr=r(J1t,"tapas"),J1t.forEach(t),ydr=r(Ake," \u2014 "),lW=n(Ake,"A",{href:!0});var Y1t=s(lW);Ldr=r(Y1t,"TFTapasModel"),Y1t.forEach(t),xdr=r(Ake," (TAPAS model)"),Ake.forEach(t),$dr=i(D),vT=n(D,"LI",{});var yke=s(vT);r1e=n(yke,"STRONG",{});var K1t=s(r1e);kdr=r(K1t,"transfo-xl"),K1t.forEach(t),Sdr=r(yke," \u2014 "),iW=n(yke,"A",{href:!0});var Z1t=s(iW);Rdr=r(Z1t,"TFTransfoXLModel"),Z1t.forEach(t),Pdr=r(yke," (Transformer-XL model)"),yke.forEach(t),Bdr=i(D),FT=n(D,"LI",{});var Lke=s(FT);t1e=n(Lke,"STRONG",{});var ebt=s(t1e);Idr=r(ebt,"vit"),ebt.forEach(t),qdr=r(Lke," \u2014 "),dW=n(Lke,"A",{href:!0});var obt=s(dW);Ndr=r(obt,"TFViTModel"),obt.forEach(t),jdr=r(Lke," (ViT model)"),Lke.forEach(t),Ddr=i(D),TT=n(D,"LI",{});var xke=s(TT);a1e=n(xke,"STRONG",{});var rbt=s(a1e);Gdr=r(rbt,"vit_mae"),rbt.forEach(t),Odr=r(xke," \u2014 "),cW=n(xke,"A",{href:!0});var tbt=s(cW);Vdr=r(tbt,"TFViTMAEModel"),tbt.forEach(t),Xdr=r(xke," (ViTMAE model)"),xke.forEach(t),zdr=i(D),MT=n(D,"LI",{});var $ke=s(MT);n1e=n($ke,"STRONG",{});var abt=s(n1e);Wdr=r(abt,"wav2vec2"),abt.forEach(t),Qdr=r($ke," \u2014 "),fW=n($ke,"A",{href:!0});var nbt=s(fW);Hdr=r(nbt,"TFWav2Vec2Model"),nbt.forEach(t),Udr=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),Jdr=i(D),ET=n(D,"LI",{});var kke=s(ET);s1e=n(kke,"STRONG",{});var sbt=s(s1e);Ydr=r(sbt,"xlm"),sbt.forEach(t),Kdr=r(kke," \u2014 "),mW=n(kke,"A",{href:!0});var lbt=s(mW);Zdr=r(lbt,"TFXLMModel"),lbt.forEach(t),ecr=r(kke," (XLM model)"),kke.forEach(t),ocr=i(D),CT=n(D,"LI",{});var Ske=s(CT);l1e=n(Ske,"STRONG",{});var ibt=s(l1e);rcr=r(ibt,"xlm-roberta"),ibt.forEach(t),tcr=r(Ske," \u2014 "),gW=n(Ske,"A",{href:!0});var dbt=s(gW);acr=r(dbt,"TFXLMRobertaModel"),dbt.forEach(t),ncr=r(Ske," (XLM-RoBERTa model)"),Ske.forEach(t),scr=i(D),wT=n(D,"LI",{});var Rke=s(wT);i1e=n(Rke,"STRONG",{});var cbt=s(i1e);lcr=r(cbt,"xlnet"),cbt.forEach(t),icr=r(Rke," \u2014 "),hW=n(Rke,"A",{href:!0});var fbt=s(hW);dcr=r(fbt,"TFXLNetModel"),fbt.forEach(t),ccr=r(Rke," (XLNet model)"),Rke.forEach(t),D.forEach(t),fcr=i(hl),T(AT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Rqe=i(f),Xd=n(f,"H2",{class:!0});var jje=s(Xd);yT=n(jje,"A",{id:!0,class:!0,href:!0});var mbt=s(yT);d1e=n(mbt,"SPAN",{});var gbt=s(d1e);T(QL.$$.fragment,gbt),gbt.forEach(t),mbt.forEach(t),mcr=i(jje),c1e=n(jje,"SPAN",{});var hbt=s(c1e);gcr=r(hbt,"TFAutoModelForPreTraining"),hbt.forEach(t),jje.forEach(t),Pqe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(HL.$$.fragment,pl),hcr=i(pl),zd=n(pl,"P",{});var CZ=s(zd);pcr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=n(CZ,"A",{href:!0});var pbt=s(pW);ucr=r(pbt,"from_pretrained()"),pbt.forEach(t),_cr=r(CZ," class method or the "),uW=n(CZ,"A",{href:!0});var ubt=s(uW);bcr=r(ubt,"from_config()"),ubt.forEach(t),vcr=r(CZ,` class
method.`),CZ.forEach(t),Fcr=i(pl),UL=n(pl,"P",{});var Dje=s(UL);Tcr=r(Dje,"This class cannot be instantiated directly using "),f1e=n(Dje,"CODE",{});var _bt=s(f1e);Mcr=r(_bt,"__init__()"),_bt.forEach(t),Ecr=r(Dje," (throws an error)."),Dje.forEach(t),Ccr=i(pl),Lt=n(pl,"DIV",{class:!0});var s6=s(Lt);T(JL.$$.fragment,s6),wcr=i(s6),m1e=n(s6,"P",{});var bbt=s(m1e);Acr=r(bbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bbt.forEach(t),ycr=i(s6),Wd=n(s6,"P",{});var wZ=s(Wd);Lcr=r(wZ,`Note:
Loading a model from its configuration file does `),g1e=n(wZ,"STRONG",{});var vbt=s(g1e);xcr=r(vbt,"not"),vbt.forEach(t),$cr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(wZ,"A",{href:!0});var Fbt=s(_W);kcr=r(Fbt,"from_pretrained()"),Fbt.forEach(t),Scr=r(wZ," to load the model weights."),wZ.forEach(t),Rcr=i(s6),T(LT.$$.fragment,s6),s6.forEach(t),Pcr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(YL.$$.fragment,ul),Bcr=i(ul),h1e=n(ul,"P",{});var Tbt=s(h1e);Icr=r(Tbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tbt.forEach(t),qcr=i(ul),Za=n(ul,"P",{});var l6=s(Za);Ncr=r(l6,"The model class to instantiate is selected based on the "),p1e=n(l6,"CODE",{});var Mbt=s(p1e);jcr=r(Mbt,"model_type"),Mbt.forEach(t),Dcr=r(l6,` property of the config object (either
passed as an argument or loaded from `),u1e=n(l6,"CODE",{});var Ebt=s(u1e);Gcr=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),Ocr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(l6,"CODE",{});var Cbt=s(_1e);Vcr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Xcr=r(l6,":"),l6.forEach(t),zcr=i(ul),se=n(ul,"UL",{});var le=s(se);xT=n(le,"LI",{});var Pke=s(xT);b1e=n(Pke,"STRONG",{});var wbt=s(b1e);Wcr=r(wbt,"albert"),wbt.forEach(t),Qcr=r(Pke," \u2014 "),bW=n(Pke,"A",{href:!0});var Abt=s(bW);Hcr=r(Abt,"TFAlbertForPreTraining"),Abt.forEach(t),Ucr=r(Pke," (ALBERT model)"),Pke.forEach(t),Jcr=i(le),$T=n(le,"LI",{});var Bke=s($T);v1e=n(Bke,"STRONG",{});var ybt=s(v1e);Ycr=r(ybt,"bart"),ybt.forEach(t),Kcr=r(Bke," \u2014 "),vW=n(Bke,"A",{href:!0});var Lbt=s(vW);Zcr=r(Lbt,"TFBartForConditionalGeneration"),Lbt.forEach(t),efr=r(Bke," (BART model)"),Bke.forEach(t),ofr=i(le),kT=n(le,"LI",{});var Ike=s(kT);F1e=n(Ike,"STRONG",{});var xbt=s(F1e);rfr=r(xbt,"bert"),xbt.forEach(t),tfr=r(Ike," \u2014 "),FW=n(Ike,"A",{href:!0});var $bt=s(FW);afr=r($bt,"TFBertForPreTraining"),$bt.forEach(t),nfr=r(Ike," (BERT model)"),Ike.forEach(t),sfr=i(le),ST=n(le,"LI",{});var qke=s(ST);T1e=n(qke,"STRONG",{});var kbt=s(T1e);lfr=r(kbt,"camembert"),kbt.forEach(t),ifr=r(qke," \u2014 "),TW=n(qke,"A",{href:!0});var Sbt=s(TW);dfr=r(Sbt,"TFCamembertForMaskedLM"),Sbt.forEach(t),cfr=r(qke," (CamemBERT model)"),qke.forEach(t),ffr=i(le),RT=n(le,"LI",{});var Nke=s(RT);M1e=n(Nke,"STRONG",{});var Rbt=s(M1e);mfr=r(Rbt,"ctrl"),Rbt.forEach(t),gfr=r(Nke," \u2014 "),MW=n(Nke,"A",{href:!0});var Pbt=s(MW);hfr=r(Pbt,"TFCTRLLMHeadModel"),Pbt.forEach(t),pfr=r(Nke," (CTRL model)"),Nke.forEach(t),ufr=i(le),PT=n(le,"LI",{});var jke=s(PT);E1e=n(jke,"STRONG",{});var Bbt=s(E1e);_fr=r(Bbt,"distilbert"),Bbt.forEach(t),bfr=r(jke," \u2014 "),EW=n(jke,"A",{href:!0});var Ibt=s(EW);vfr=r(Ibt,"TFDistilBertForMaskedLM"),Ibt.forEach(t),Ffr=r(jke," (DistilBERT model)"),jke.forEach(t),Tfr=i(le),BT=n(le,"LI",{});var Dke=s(BT);C1e=n(Dke,"STRONG",{});var qbt=s(C1e);Mfr=r(qbt,"electra"),qbt.forEach(t),Efr=r(Dke," \u2014 "),CW=n(Dke,"A",{href:!0});var Nbt=s(CW);Cfr=r(Nbt,"TFElectraForPreTraining"),Nbt.forEach(t),wfr=r(Dke," (ELECTRA model)"),Dke.forEach(t),Afr=i(le),IT=n(le,"LI",{});var Gke=s(IT);w1e=n(Gke,"STRONG",{});var jbt=s(w1e);yfr=r(jbt,"flaubert"),jbt.forEach(t),Lfr=r(Gke," \u2014 "),wW=n(Gke,"A",{href:!0});var Dbt=s(wW);xfr=r(Dbt,"TFFlaubertWithLMHeadModel"),Dbt.forEach(t),$fr=r(Gke," (FlauBERT model)"),Gke.forEach(t),kfr=i(le),qT=n(le,"LI",{});var Oke=s(qT);A1e=n(Oke,"STRONG",{});var Gbt=s(A1e);Sfr=r(Gbt,"funnel"),Gbt.forEach(t),Rfr=r(Oke," \u2014 "),AW=n(Oke,"A",{href:!0});var Obt=s(AW);Pfr=r(Obt,"TFFunnelForPreTraining"),Obt.forEach(t),Bfr=r(Oke," (Funnel Transformer model)"),Oke.forEach(t),Ifr=i(le),NT=n(le,"LI",{});var Vke=s(NT);y1e=n(Vke,"STRONG",{});var Vbt=s(y1e);qfr=r(Vbt,"gpt2"),Vbt.forEach(t),Nfr=r(Vke," \u2014 "),yW=n(Vke,"A",{href:!0});var Xbt=s(yW);jfr=r(Xbt,"TFGPT2LMHeadModel"),Xbt.forEach(t),Dfr=r(Vke," (OpenAI GPT-2 model)"),Vke.forEach(t),Gfr=i(le),jT=n(le,"LI",{});var Xke=s(jT);L1e=n(Xke,"STRONG",{});var zbt=s(L1e);Ofr=r(zbt,"layoutlm"),zbt.forEach(t),Vfr=r(Xke," \u2014 "),LW=n(Xke,"A",{href:!0});var Wbt=s(LW);Xfr=r(Wbt,"TFLayoutLMForMaskedLM"),Wbt.forEach(t),zfr=r(Xke," (LayoutLM model)"),Xke.forEach(t),Wfr=i(le),DT=n(le,"LI",{});var zke=s(DT);x1e=n(zke,"STRONG",{});var Qbt=s(x1e);Qfr=r(Qbt,"lxmert"),Qbt.forEach(t),Hfr=r(zke," \u2014 "),xW=n(zke,"A",{href:!0});var Hbt=s(xW);Ufr=r(Hbt,"TFLxmertForPreTraining"),Hbt.forEach(t),Jfr=r(zke," (LXMERT model)"),zke.forEach(t),Yfr=i(le),GT=n(le,"LI",{});var Wke=s(GT);$1e=n(Wke,"STRONG",{});var Ubt=s($1e);Kfr=r(Ubt,"mobilebert"),Ubt.forEach(t),Zfr=r(Wke," \u2014 "),$W=n(Wke,"A",{href:!0});var Jbt=s($W);emr=r(Jbt,"TFMobileBertForPreTraining"),Jbt.forEach(t),omr=r(Wke," (MobileBERT model)"),Wke.forEach(t),rmr=i(le),OT=n(le,"LI",{});var Qke=s(OT);k1e=n(Qke,"STRONG",{});var Ybt=s(k1e);tmr=r(Ybt,"mpnet"),Ybt.forEach(t),amr=r(Qke," \u2014 "),kW=n(Qke,"A",{href:!0});var Kbt=s(kW);nmr=r(Kbt,"TFMPNetForMaskedLM"),Kbt.forEach(t),smr=r(Qke," (MPNet model)"),Qke.forEach(t),lmr=i(le),VT=n(le,"LI",{});var Hke=s(VT);S1e=n(Hke,"STRONG",{});var Zbt=s(S1e);imr=r(Zbt,"openai-gpt"),Zbt.forEach(t),dmr=r(Hke," \u2014 "),SW=n(Hke,"A",{href:!0});var e4t=s(SW);cmr=r(e4t,"TFOpenAIGPTLMHeadModel"),e4t.forEach(t),fmr=r(Hke," (OpenAI GPT model)"),Hke.forEach(t),mmr=i(le),XT=n(le,"LI",{});var Uke=s(XT);R1e=n(Uke,"STRONG",{});var o4t=s(R1e);gmr=r(o4t,"roberta"),o4t.forEach(t),hmr=r(Uke," \u2014 "),RW=n(Uke,"A",{href:!0});var r4t=s(RW);pmr=r(r4t,"TFRobertaForMaskedLM"),r4t.forEach(t),umr=r(Uke," (RoBERTa model)"),Uke.forEach(t),_mr=i(le),zT=n(le,"LI",{});var Jke=s(zT);P1e=n(Jke,"STRONG",{});var t4t=s(P1e);bmr=r(t4t,"t5"),t4t.forEach(t),vmr=r(Jke," \u2014 "),PW=n(Jke,"A",{href:!0});var a4t=s(PW);Fmr=r(a4t,"TFT5ForConditionalGeneration"),a4t.forEach(t),Tmr=r(Jke," (T5 model)"),Jke.forEach(t),Mmr=i(le),WT=n(le,"LI",{});var Yke=s(WT);B1e=n(Yke,"STRONG",{});var n4t=s(B1e);Emr=r(n4t,"tapas"),n4t.forEach(t),Cmr=r(Yke," \u2014 "),BW=n(Yke,"A",{href:!0});var s4t=s(BW);wmr=r(s4t,"TFTapasForMaskedLM"),s4t.forEach(t),Amr=r(Yke," (TAPAS model)"),Yke.forEach(t),ymr=i(le),QT=n(le,"LI",{});var Kke=s(QT);I1e=n(Kke,"STRONG",{});var l4t=s(I1e);Lmr=r(l4t,"transfo-xl"),l4t.forEach(t),xmr=r(Kke," \u2014 "),IW=n(Kke,"A",{href:!0});var i4t=s(IW);$mr=r(i4t,"TFTransfoXLLMHeadModel"),i4t.forEach(t),kmr=r(Kke," (Transformer-XL model)"),Kke.forEach(t),Smr=i(le),HT=n(le,"LI",{});var Zke=s(HT);q1e=n(Zke,"STRONG",{});var d4t=s(q1e);Rmr=r(d4t,"vit_mae"),d4t.forEach(t),Pmr=r(Zke," \u2014 "),qW=n(Zke,"A",{href:!0});var c4t=s(qW);Bmr=r(c4t,"TFViTMAEForPreTraining"),c4t.forEach(t),Imr=r(Zke," (ViTMAE model)"),Zke.forEach(t),qmr=i(le),UT=n(le,"LI",{});var eSe=s(UT);N1e=n(eSe,"STRONG",{});var f4t=s(N1e);Nmr=r(f4t,"xlm"),f4t.forEach(t),jmr=r(eSe," \u2014 "),NW=n(eSe,"A",{href:!0});var m4t=s(NW);Dmr=r(m4t,"TFXLMWithLMHeadModel"),m4t.forEach(t),Gmr=r(eSe," (XLM model)"),eSe.forEach(t),Omr=i(le),JT=n(le,"LI",{});var oSe=s(JT);j1e=n(oSe,"STRONG",{});var g4t=s(j1e);Vmr=r(g4t,"xlm-roberta"),g4t.forEach(t),Xmr=r(oSe," \u2014 "),jW=n(oSe,"A",{href:!0});var h4t=s(jW);zmr=r(h4t,"TFXLMRobertaForMaskedLM"),h4t.forEach(t),Wmr=r(oSe," (XLM-RoBERTa model)"),oSe.forEach(t),Qmr=i(le),YT=n(le,"LI",{});var rSe=s(YT);D1e=n(rSe,"STRONG",{});var p4t=s(D1e);Hmr=r(p4t,"xlnet"),p4t.forEach(t),Umr=r(rSe," \u2014 "),DW=n(rSe,"A",{href:!0});var u4t=s(DW);Jmr=r(u4t,"TFXLNetLMHeadModel"),u4t.forEach(t),Ymr=r(rSe," (XLNet model)"),rSe.forEach(t),le.forEach(t),Kmr=i(ul),T(KT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),Bqe=i(f),Qd=n(f,"H2",{class:!0});var Gje=s(Qd);ZT=n(Gje,"A",{id:!0,class:!0,href:!0});var _4t=s(ZT);G1e=n(_4t,"SPAN",{});var b4t=s(G1e);T(KL.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),Zmr=i(Gje),O1e=n(Gje,"SPAN",{});var v4t=s(O1e);egr=r(v4t,"TFAutoModelForCausalLM"),v4t.forEach(t),Gje.forEach(t),Iqe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(ZL.$$.fragment,_l),ogr=i(_l),Hd=n(_l,"P",{});var AZ=s(Hd);rgr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GW=n(AZ,"A",{href:!0});var F4t=s(GW);tgr=r(F4t,"from_pretrained()"),F4t.forEach(t),agr=r(AZ," class method or the "),OW=n(AZ,"A",{href:!0});var T4t=s(OW);ngr=r(T4t,"from_config()"),T4t.forEach(t),sgr=r(AZ,` class
method.`),AZ.forEach(t),lgr=i(_l),e8=n(_l,"P",{});var Oje=s(e8);igr=r(Oje,"This class cannot be instantiated directly using "),V1e=n(Oje,"CODE",{});var M4t=s(V1e);dgr=r(M4t,"__init__()"),M4t.forEach(t),cgr=r(Oje," (throws an error)."),Oje.forEach(t),fgr=i(_l),xt=n(_l,"DIV",{class:!0});var i6=s(xt);T(o8.$$.fragment,i6),mgr=i(i6),X1e=n(i6,"P",{});var E4t=s(X1e);ggr=r(E4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E4t.forEach(t),hgr=i(i6),Ud=n(i6,"P",{});var yZ=s(Ud);pgr=r(yZ,`Note:
Loading a model from its configuration file does `),z1e=n(yZ,"STRONG",{});var C4t=s(z1e);ugr=r(C4t,"not"),C4t.forEach(t),_gr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(yZ,"A",{href:!0});var w4t=s(VW);bgr=r(w4t,"from_pretrained()"),w4t.forEach(t),vgr=r(yZ," to load the model weights."),yZ.forEach(t),Fgr=i(i6),T(e7.$$.fragment,i6),i6.forEach(t),Tgr=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(r8.$$.fragment,bl),Mgr=i(bl),W1e=n(bl,"P",{});var A4t=s(W1e);Egr=r(A4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A4t.forEach(t),Cgr=i(bl),en=n(bl,"P",{});var d6=s(en);wgr=r(d6,"The model class to instantiate is selected based on the "),Q1e=n(d6,"CODE",{});var y4t=s(Q1e);Agr=r(y4t,"model_type"),y4t.forEach(t),ygr=r(d6,` property of the config object (either
passed as an argument or loaded from `),H1e=n(d6,"CODE",{});var L4t=s(H1e);Lgr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),xgr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(d6,"CODE",{});var x4t=s(U1e);$gr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),kgr=r(d6,":"),d6.forEach(t),Sgr=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);o7=n(Ce,"LI",{});var tSe=s(o7);J1e=n(tSe,"STRONG",{});var $4t=s(J1e);Rgr=r($4t,"bert"),$4t.forEach(t),Pgr=r(tSe," \u2014 "),XW=n(tSe,"A",{href:!0});var k4t=s(XW);Bgr=r(k4t,"TFBertLMHeadModel"),k4t.forEach(t),Igr=r(tSe," (BERT model)"),tSe.forEach(t),qgr=i(Ce),r7=n(Ce,"LI",{});var aSe=s(r7);Y1e=n(aSe,"STRONG",{});var S4t=s(Y1e);Ngr=r(S4t,"camembert"),S4t.forEach(t),jgr=r(aSe," \u2014 "),zW=n(aSe,"A",{href:!0});var R4t=s(zW);Dgr=r(R4t,"TFCamembertForCausalLM"),R4t.forEach(t),Ggr=r(aSe," (CamemBERT model)"),aSe.forEach(t),Ogr=i(Ce),t7=n(Ce,"LI",{});var nSe=s(t7);K1e=n(nSe,"STRONG",{});var P4t=s(K1e);Vgr=r(P4t,"ctrl"),P4t.forEach(t),Xgr=r(nSe," \u2014 "),WW=n(nSe,"A",{href:!0});var B4t=s(WW);zgr=r(B4t,"TFCTRLLMHeadModel"),B4t.forEach(t),Wgr=r(nSe," (CTRL model)"),nSe.forEach(t),Qgr=i(Ce),a7=n(Ce,"LI",{});var sSe=s(a7);Z1e=n(sSe,"STRONG",{});var I4t=s(Z1e);Hgr=r(I4t,"gpt2"),I4t.forEach(t),Ugr=r(sSe," \u2014 "),QW=n(sSe,"A",{href:!0});var q4t=s(QW);Jgr=r(q4t,"TFGPT2LMHeadModel"),q4t.forEach(t),Ygr=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),Kgr=i(Ce),n7=n(Ce,"LI",{});var lSe=s(n7);ebe=n(lSe,"STRONG",{});var N4t=s(ebe);Zgr=r(N4t,"gptj"),N4t.forEach(t),ehr=r(lSe," \u2014 "),HW=n(lSe,"A",{href:!0});var j4t=s(HW);ohr=r(j4t,"TFGPTJForCausalLM"),j4t.forEach(t),rhr=r(lSe," (GPT-J model)"),lSe.forEach(t),thr=i(Ce),s7=n(Ce,"LI",{});var iSe=s(s7);obe=n(iSe,"STRONG",{});var D4t=s(obe);ahr=r(D4t,"openai-gpt"),D4t.forEach(t),nhr=r(iSe," \u2014 "),UW=n(iSe,"A",{href:!0});var G4t=s(UW);shr=r(G4t,"TFOpenAIGPTLMHeadModel"),G4t.forEach(t),lhr=r(iSe," (OpenAI GPT model)"),iSe.forEach(t),ihr=i(Ce),l7=n(Ce,"LI",{});var dSe=s(l7);rbe=n(dSe,"STRONG",{});var O4t=s(rbe);dhr=r(O4t,"rembert"),O4t.forEach(t),chr=r(dSe," \u2014 "),JW=n(dSe,"A",{href:!0});var V4t=s(JW);fhr=r(V4t,"TFRemBertForCausalLM"),V4t.forEach(t),mhr=r(dSe," (RemBERT model)"),dSe.forEach(t),ghr=i(Ce),i7=n(Ce,"LI",{});var cSe=s(i7);tbe=n(cSe,"STRONG",{});var X4t=s(tbe);hhr=r(X4t,"roberta"),X4t.forEach(t),phr=r(cSe," \u2014 "),YW=n(cSe,"A",{href:!0});var z4t=s(YW);uhr=r(z4t,"TFRobertaForCausalLM"),z4t.forEach(t),_hr=r(cSe," (RoBERTa model)"),cSe.forEach(t),bhr=i(Ce),d7=n(Ce,"LI",{});var fSe=s(d7);abe=n(fSe,"STRONG",{});var W4t=s(abe);vhr=r(W4t,"roformer"),W4t.forEach(t),Fhr=r(fSe," \u2014 "),KW=n(fSe,"A",{href:!0});var Q4t=s(KW);Thr=r(Q4t,"TFRoFormerForCausalLM"),Q4t.forEach(t),Mhr=r(fSe," (RoFormer model)"),fSe.forEach(t),Ehr=i(Ce),c7=n(Ce,"LI",{});var mSe=s(c7);nbe=n(mSe,"STRONG",{});var H4t=s(nbe);Chr=r(H4t,"transfo-xl"),H4t.forEach(t),whr=r(mSe," \u2014 "),ZW=n(mSe,"A",{href:!0});var U4t=s(ZW);Ahr=r(U4t,"TFTransfoXLLMHeadModel"),U4t.forEach(t),yhr=r(mSe," (Transformer-XL model)"),mSe.forEach(t),Lhr=i(Ce),f7=n(Ce,"LI",{});var gSe=s(f7);sbe=n(gSe,"STRONG",{});var J4t=s(sbe);xhr=r(J4t,"xlm"),J4t.forEach(t),$hr=r(gSe," \u2014 "),eQ=n(gSe,"A",{href:!0});var Y4t=s(eQ);khr=r(Y4t,"TFXLMWithLMHeadModel"),Y4t.forEach(t),Shr=r(gSe," (XLM model)"),gSe.forEach(t),Rhr=i(Ce),m7=n(Ce,"LI",{});var hSe=s(m7);lbe=n(hSe,"STRONG",{});var K4t=s(lbe);Phr=r(K4t,"xlnet"),K4t.forEach(t),Bhr=r(hSe," \u2014 "),oQ=n(hSe,"A",{href:!0});var Z4t=s(oQ);Ihr=r(Z4t,"TFXLNetLMHeadModel"),Z4t.forEach(t),qhr=r(hSe," (XLNet model)"),hSe.forEach(t),Ce.forEach(t),Nhr=i(bl),T(g7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),qqe=i(f),Jd=n(f,"H2",{class:!0});var Vje=s(Jd);h7=n(Vje,"A",{id:!0,class:!0,href:!0});var e5t=s(h7);ibe=n(e5t,"SPAN",{});var o5t=s(ibe);T(t8.$$.fragment,o5t),o5t.forEach(t),e5t.forEach(t),jhr=i(Vje),dbe=n(Vje,"SPAN",{});var r5t=s(dbe);Dhr=r(r5t,"TFAutoModelForImageClassification"),r5t.forEach(t),Vje.forEach(t),Nqe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(a8.$$.fragment,vl),Ghr=i(vl),Yd=n(vl,"P",{});var LZ=s(Yd);Ohr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=n(LZ,"A",{href:!0});var t5t=s(rQ);Vhr=r(t5t,"from_pretrained()"),t5t.forEach(t),Xhr=r(LZ," class method or the "),tQ=n(LZ,"A",{href:!0});var a5t=s(tQ);zhr=r(a5t,"from_config()"),a5t.forEach(t),Whr=r(LZ,` class
method.`),LZ.forEach(t),Qhr=i(vl),n8=n(vl,"P",{});var Xje=s(n8);Hhr=r(Xje,"This class cannot be instantiated directly using "),cbe=n(Xje,"CODE",{});var n5t=s(cbe);Uhr=r(n5t,"__init__()"),n5t.forEach(t),Jhr=r(Xje," (throws an error)."),Xje.forEach(t),Yhr=i(vl),$t=n(vl,"DIV",{class:!0});var c6=s($t);T(s8.$$.fragment,c6),Khr=i(c6),fbe=n(c6,"P",{});var s5t=s(fbe);Zhr=r(s5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),s5t.forEach(t),epr=i(c6),Kd=n(c6,"P",{});var xZ=s(Kd);opr=r(xZ,`Note:
Loading a model from its configuration file does `),mbe=n(xZ,"STRONG",{});var l5t=s(mbe);rpr=r(l5t,"not"),l5t.forEach(t),tpr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(xZ,"A",{href:!0});var i5t=s(aQ);apr=r(i5t,"from_pretrained()"),i5t.forEach(t),npr=r(xZ," to load the model weights."),xZ.forEach(t),spr=i(c6),T(p7.$$.fragment,c6),c6.forEach(t),lpr=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(l8.$$.fragment,Fl),ipr=i(Fl),gbe=n(Fl,"P",{});var d5t=s(gbe);dpr=r(d5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),d5t.forEach(t),cpr=i(Fl),on=n(Fl,"P",{});var f6=s(on);fpr=r(f6,"The model class to instantiate is selected based on the "),hbe=n(f6,"CODE",{});var c5t=s(hbe);mpr=r(c5t,"model_type"),c5t.forEach(t),gpr=r(f6,` property of the config object (either
passed as an argument or loaded from `),pbe=n(f6,"CODE",{});var f5t=s(pbe);hpr=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),ppr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(f6,"CODE",{});var m5t=s(ube);upr=r(m5t,"pretrained_model_name_or_path"),m5t.forEach(t),_pr=r(f6,":"),f6.forEach(t),bpr=i(Fl),rn=n(Fl,"UL",{});var m6=s(rn);u7=n(m6,"LI",{});var pSe=s(u7);_be=n(pSe,"STRONG",{});var g5t=s(_be);vpr=r(g5t,"convnext"),g5t.forEach(t),Fpr=r(pSe," \u2014 "),nQ=n(pSe,"A",{href:!0});var h5t=s(nQ);Tpr=r(h5t,"TFConvNextForImageClassification"),h5t.forEach(t),Mpr=r(pSe," (ConvNext model)"),pSe.forEach(t),Epr=i(m6),_7=n(m6,"LI",{});var uSe=s(_7);bbe=n(uSe,"STRONG",{});var p5t=s(bbe);Cpr=r(p5t,"data2vec-vision"),p5t.forEach(t),wpr=r(uSe," \u2014 "),sQ=n(uSe,"A",{href:!0});var u5t=s(sQ);Apr=r(u5t,"TFData2VecVisionForImageClassification"),u5t.forEach(t),ypr=r(uSe," (Data2VecVision model)"),uSe.forEach(t),Lpr=i(m6),b7=n(m6,"LI",{});var _Se=s(b7);vbe=n(_Se,"STRONG",{});var _5t=s(vbe);xpr=r(_5t,"swin"),_5t.forEach(t),$pr=r(_Se," \u2014 "),lQ=n(_Se,"A",{href:!0});var b5t=s(lQ);kpr=r(b5t,"TFSwinForImageClassification"),b5t.forEach(t),Spr=r(_Se," (Swin model)"),_Se.forEach(t),Rpr=i(m6),v7=n(m6,"LI",{});var bSe=s(v7);Fbe=n(bSe,"STRONG",{});var v5t=s(Fbe);Ppr=r(v5t,"vit"),v5t.forEach(t),Bpr=r(bSe," \u2014 "),iQ=n(bSe,"A",{href:!0});var F5t=s(iQ);Ipr=r(F5t,"TFViTForImageClassification"),F5t.forEach(t),qpr=r(bSe," (ViT model)"),bSe.forEach(t),m6.forEach(t),Npr=i(Fl),T(F7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),jqe=i(f),Zd=n(f,"H2",{class:!0});var zje=s(Zd);T7=n(zje,"A",{id:!0,class:!0,href:!0});var T5t=s(T7);Tbe=n(T5t,"SPAN",{});var M5t=s(Tbe);T(i8.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),jpr=i(zje),Mbe=n(zje,"SPAN",{});var E5t=s(Mbe);Dpr=r(E5t,"TFAutoModelForMaskedLM"),E5t.forEach(t),zje.forEach(t),Dqe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(d8.$$.fragment,Tl),Gpr=i(Tl),ec=n(Tl,"P",{});var $Z=s(ec);Opr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dQ=n($Z,"A",{href:!0});var C5t=s(dQ);Vpr=r(C5t,"from_pretrained()"),C5t.forEach(t),Xpr=r($Z," class method or the "),cQ=n($Z,"A",{href:!0});var w5t=s(cQ);zpr=r(w5t,"from_config()"),w5t.forEach(t),Wpr=r($Z,` class
method.`),$Z.forEach(t),Qpr=i(Tl),c8=n(Tl,"P",{});var Wje=s(c8);Hpr=r(Wje,"This class cannot be instantiated directly using "),Ebe=n(Wje,"CODE",{});var A5t=s(Ebe);Upr=r(A5t,"__init__()"),A5t.forEach(t),Jpr=r(Wje," (throws an error)."),Wje.forEach(t),Ypr=i(Tl),kt=n(Tl,"DIV",{class:!0});var g6=s(kt);T(f8.$$.fragment,g6),Kpr=i(g6),Cbe=n(g6,"P",{});var y5t=s(Cbe);Zpr=r(y5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y5t.forEach(t),eur=i(g6),oc=n(g6,"P",{});var kZ=s(oc);our=r(kZ,`Note:
Loading a model from its configuration file does `),wbe=n(kZ,"STRONG",{});var L5t=s(wbe);rur=r(L5t,"not"),L5t.forEach(t),tur=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(kZ,"A",{href:!0});var x5t=s(fQ);aur=r(x5t,"from_pretrained()"),x5t.forEach(t),nur=r(kZ," to load the model weights."),kZ.forEach(t),sur=i(g6),T(M7.$$.fragment,g6),g6.forEach(t),lur=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(m8.$$.fragment,Ml),iur=i(Ml),Abe=n(Ml,"P",{});var $5t=s(Abe);dur=r($5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$5t.forEach(t),cur=i(Ml),tn=n(Ml,"P",{});var h6=s(tn);fur=r(h6,"The model class to instantiate is selected based on the "),ybe=n(h6,"CODE",{});var k5t=s(ybe);mur=r(k5t,"model_type"),k5t.forEach(t),gur=r(h6,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(h6,"CODE",{});var S5t=s(Lbe);hur=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),pur=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(h6,"CODE",{});var R5t=s(xbe);uur=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),_ur=r(h6,":"),h6.forEach(t),bur=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);E7=n(fe,"LI",{});var vSe=s(E7);$be=n(vSe,"STRONG",{});var P5t=s($be);vur=r(P5t,"albert"),P5t.forEach(t),Fur=r(vSe," \u2014 "),mQ=n(vSe,"A",{href:!0});var B5t=s(mQ);Tur=r(B5t,"TFAlbertForMaskedLM"),B5t.forEach(t),Mur=r(vSe," (ALBERT model)"),vSe.forEach(t),Eur=i(fe),C7=n(fe,"LI",{});var FSe=s(C7);kbe=n(FSe,"STRONG",{});var I5t=s(kbe);Cur=r(I5t,"bert"),I5t.forEach(t),wur=r(FSe," \u2014 "),gQ=n(FSe,"A",{href:!0});var q5t=s(gQ);Aur=r(q5t,"TFBertForMaskedLM"),q5t.forEach(t),yur=r(FSe," (BERT model)"),FSe.forEach(t),Lur=i(fe),w7=n(fe,"LI",{});var TSe=s(w7);Sbe=n(TSe,"STRONG",{});var N5t=s(Sbe);xur=r(N5t,"camembert"),N5t.forEach(t),$ur=r(TSe," \u2014 "),hQ=n(TSe,"A",{href:!0});var j5t=s(hQ);kur=r(j5t,"TFCamembertForMaskedLM"),j5t.forEach(t),Sur=r(TSe," (CamemBERT model)"),TSe.forEach(t),Rur=i(fe),A7=n(fe,"LI",{});var MSe=s(A7);Rbe=n(MSe,"STRONG",{});var D5t=s(Rbe);Pur=r(D5t,"convbert"),D5t.forEach(t),Bur=r(MSe," \u2014 "),pQ=n(MSe,"A",{href:!0});var G5t=s(pQ);Iur=r(G5t,"TFConvBertForMaskedLM"),G5t.forEach(t),qur=r(MSe," (ConvBERT model)"),MSe.forEach(t),Nur=i(fe),y7=n(fe,"LI",{});var ESe=s(y7);Pbe=n(ESe,"STRONG",{});var O5t=s(Pbe);jur=r(O5t,"deberta"),O5t.forEach(t),Dur=r(ESe," \u2014 "),uQ=n(ESe,"A",{href:!0});var V5t=s(uQ);Gur=r(V5t,"TFDebertaForMaskedLM"),V5t.forEach(t),Our=r(ESe," (DeBERTa model)"),ESe.forEach(t),Vur=i(fe),L7=n(fe,"LI",{});var CSe=s(L7);Bbe=n(CSe,"STRONG",{});var X5t=s(Bbe);Xur=r(X5t,"deberta-v2"),X5t.forEach(t),zur=r(CSe," \u2014 "),_Q=n(CSe,"A",{href:!0});var z5t=s(_Q);Wur=r(z5t,"TFDebertaV2ForMaskedLM"),z5t.forEach(t),Qur=r(CSe," (DeBERTa-v2 model)"),CSe.forEach(t),Hur=i(fe),x7=n(fe,"LI",{});var wSe=s(x7);Ibe=n(wSe,"STRONG",{});var W5t=s(Ibe);Uur=r(W5t,"distilbert"),W5t.forEach(t),Jur=r(wSe," \u2014 "),bQ=n(wSe,"A",{href:!0});var Q5t=s(bQ);Yur=r(Q5t,"TFDistilBertForMaskedLM"),Q5t.forEach(t),Kur=r(wSe," (DistilBERT model)"),wSe.forEach(t),Zur=i(fe),$7=n(fe,"LI",{});var ASe=s($7);qbe=n(ASe,"STRONG",{});var H5t=s(qbe);e_r=r(H5t,"electra"),H5t.forEach(t),o_r=r(ASe," \u2014 "),vQ=n(ASe,"A",{href:!0});var U5t=s(vQ);r_r=r(U5t,"TFElectraForMaskedLM"),U5t.forEach(t),t_r=r(ASe," (ELECTRA model)"),ASe.forEach(t),a_r=i(fe),k7=n(fe,"LI",{});var ySe=s(k7);Nbe=n(ySe,"STRONG",{});var J5t=s(Nbe);n_r=r(J5t,"flaubert"),J5t.forEach(t),s_r=r(ySe," \u2014 "),FQ=n(ySe,"A",{href:!0});var Y5t=s(FQ);l_r=r(Y5t,"TFFlaubertWithLMHeadModel"),Y5t.forEach(t),i_r=r(ySe," (FlauBERT model)"),ySe.forEach(t),d_r=i(fe),S7=n(fe,"LI",{});var LSe=s(S7);jbe=n(LSe,"STRONG",{});var K5t=s(jbe);c_r=r(K5t,"funnel"),K5t.forEach(t),f_r=r(LSe," \u2014 "),TQ=n(LSe,"A",{href:!0});var Z5t=s(TQ);m_r=r(Z5t,"TFFunnelForMaskedLM"),Z5t.forEach(t),g_r=r(LSe," (Funnel Transformer model)"),LSe.forEach(t),h_r=i(fe),R7=n(fe,"LI",{});var xSe=s(R7);Dbe=n(xSe,"STRONG",{});var evt=s(Dbe);p_r=r(evt,"layoutlm"),evt.forEach(t),u_r=r(xSe," \u2014 "),MQ=n(xSe,"A",{href:!0});var ovt=s(MQ);__r=r(ovt,"TFLayoutLMForMaskedLM"),ovt.forEach(t),b_r=r(xSe," (LayoutLM model)"),xSe.forEach(t),v_r=i(fe),P7=n(fe,"LI",{});var $Se=s(P7);Gbe=n($Se,"STRONG",{});var rvt=s(Gbe);F_r=r(rvt,"longformer"),rvt.forEach(t),T_r=r($Se," \u2014 "),EQ=n($Se,"A",{href:!0});var tvt=s(EQ);M_r=r(tvt,"TFLongformerForMaskedLM"),tvt.forEach(t),E_r=r($Se," (Longformer model)"),$Se.forEach(t),C_r=i(fe),B7=n(fe,"LI",{});var kSe=s(B7);Obe=n(kSe,"STRONG",{});var avt=s(Obe);w_r=r(avt,"mobilebert"),avt.forEach(t),A_r=r(kSe," \u2014 "),CQ=n(kSe,"A",{href:!0});var nvt=s(CQ);y_r=r(nvt,"TFMobileBertForMaskedLM"),nvt.forEach(t),L_r=r(kSe," (MobileBERT model)"),kSe.forEach(t),x_r=i(fe),I7=n(fe,"LI",{});var SSe=s(I7);Vbe=n(SSe,"STRONG",{});var svt=s(Vbe);$_r=r(svt,"mpnet"),svt.forEach(t),k_r=r(SSe," \u2014 "),wQ=n(SSe,"A",{href:!0});var lvt=s(wQ);S_r=r(lvt,"TFMPNetForMaskedLM"),lvt.forEach(t),R_r=r(SSe," (MPNet model)"),SSe.forEach(t),P_r=i(fe),q7=n(fe,"LI",{});var RSe=s(q7);Xbe=n(RSe,"STRONG",{});var ivt=s(Xbe);B_r=r(ivt,"rembert"),ivt.forEach(t),I_r=r(RSe," \u2014 "),AQ=n(RSe,"A",{href:!0});var dvt=s(AQ);q_r=r(dvt,"TFRemBertForMaskedLM"),dvt.forEach(t),N_r=r(RSe," (RemBERT model)"),RSe.forEach(t),j_r=i(fe),N7=n(fe,"LI",{});var PSe=s(N7);zbe=n(PSe,"STRONG",{});var cvt=s(zbe);D_r=r(cvt,"roberta"),cvt.forEach(t),G_r=r(PSe," \u2014 "),yQ=n(PSe,"A",{href:!0});var fvt=s(yQ);O_r=r(fvt,"TFRobertaForMaskedLM"),fvt.forEach(t),V_r=r(PSe," (RoBERTa model)"),PSe.forEach(t),X_r=i(fe),j7=n(fe,"LI",{});var BSe=s(j7);Wbe=n(BSe,"STRONG",{});var mvt=s(Wbe);z_r=r(mvt,"roformer"),mvt.forEach(t),W_r=r(BSe," \u2014 "),LQ=n(BSe,"A",{href:!0});var gvt=s(LQ);Q_r=r(gvt,"TFRoFormerForMaskedLM"),gvt.forEach(t),H_r=r(BSe," (RoFormer model)"),BSe.forEach(t),U_r=i(fe),D7=n(fe,"LI",{});var ISe=s(D7);Qbe=n(ISe,"STRONG",{});var hvt=s(Qbe);J_r=r(hvt,"tapas"),hvt.forEach(t),Y_r=r(ISe," \u2014 "),xQ=n(ISe,"A",{href:!0});var pvt=s(xQ);K_r=r(pvt,"TFTapasForMaskedLM"),pvt.forEach(t),Z_r=r(ISe," (TAPAS model)"),ISe.forEach(t),e2r=i(fe),G7=n(fe,"LI",{});var qSe=s(G7);Hbe=n(qSe,"STRONG",{});var uvt=s(Hbe);o2r=r(uvt,"xlm"),uvt.forEach(t),r2r=r(qSe," \u2014 "),$Q=n(qSe,"A",{href:!0});var _vt=s($Q);t2r=r(_vt,"TFXLMWithLMHeadModel"),_vt.forEach(t),a2r=r(qSe," (XLM model)"),qSe.forEach(t),n2r=i(fe),O7=n(fe,"LI",{});var NSe=s(O7);Ube=n(NSe,"STRONG",{});var bvt=s(Ube);s2r=r(bvt,"xlm-roberta"),bvt.forEach(t),l2r=r(NSe," \u2014 "),kQ=n(NSe,"A",{href:!0});var vvt=s(kQ);i2r=r(vvt,"TFXLMRobertaForMaskedLM"),vvt.forEach(t),d2r=r(NSe," (XLM-RoBERTa model)"),NSe.forEach(t),fe.forEach(t),c2r=i(Ml),T(V7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Gqe=i(f),rc=n(f,"H2",{class:!0});var Qje=s(rc);X7=n(Qje,"A",{id:!0,class:!0,href:!0});var Fvt=s(X7);Jbe=n(Fvt,"SPAN",{});var Tvt=s(Jbe);T(g8.$$.fragment,Tvt),Tvt.forEach(t),Fvt.forEach(t),f2r=i(Qje),Ybe=n(Qje,"SPAN",{});var Mvt=s(Ybe);m2r=r(Mvt,"TFAutoModelForSeq2SeqLM"),Mvt.forEach(t),Qje.forEach(t),Oqe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(h8.$$.fragment,El),g2r=i(El),tc=n(El,"P",{});var SZ=s(tc);h2r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SQ=n(SZ,"A",{href:!0});var Evt=s(SQ);p2r=r(Evt,"from_pretrained()"),Evt.forEach(t),u2r=r(SZ," class method or the "),RQ=n(SZ,"A",{href:!0});var Cvt=s(RQ);_2r=r(Cvt,"from_config()"),Cvt.forEach(t),b2r=r(SZ,` class
method.`),SZ.forEach(t),v2r=i(El),p8=n(El,"P",{});var Hje=s(p8);F2r=r(Hje,"This class cannot be instantiated directly using "),Kbe=n(Hje,"CODE",{});var wvt=s(Kbe);T2r=r(wvt,"__init__()"),wvt.forEach(t),M2r=r(Hje," (throws an error)."),Hje.forEach(t),E2r=i(El),St=n(El,"DIV",{class:!0});var p6=s(St);T(u8.$$.fragment,p6),C2r=i(p6),Zbe=n(p6,"P",{});var Avt=s(Zbe);w2r=r(Avt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Avt.forEach(t),A2r=i(p6),ac=n(p6,"P",{});var RZ=s(ac);y2r=r(RZ,`Note:
Loading a model from its configuration file does `),e4e=n(RZ,"STRONG",{});var yvt=s(e4e);L2r=r(yvt,"not"),yvt.forEach(t),x2r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(RZ,"A",{href:!0});var Lvt=s(PQ);$2r=r(Lvt,"from_pretrained()"),Lvt.forEach(t),k2r=r(RZ," to load the model weights."),RZ.forEach(t),S2r=i(p6),T(z7.$$.fragment,p6),p6.forEach(t),R2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(_8.$$.fragment,Cl),P2r=i(Cl),o4e=n(Cl,"P",{});var xvt=s(o4e);B2r=r(xvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xvt.forEach(t),I2r=i(Cl),an=n(Cl,"P",{});var u6=s(an);q2r=r(u6,"The model class to instantiate is selected based on the "),r4e=n(u6,"CODE",{});var $vt=s(r4e);N2r=r($vt,"model_type"),$vt.forEach(t),j2r=r(u6,` property of the config object (either
passed as an argument or loaded from `),t4e=n(u6,"CODE",{});var kvt=s(t4e);D2r=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),G2r=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(u6,"CODE",{});var Svt=s(a4e);O2r=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),V2r=r(u6,":"),u6.forEach(t),X2r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);W7=n(Be,"LI",{});var jSe=s(W7);n4e=n(jSe,"STRONG",{});var Rvt=s(n4e);z2r=r(Rvt,"bart"),Rvt.forEach(t),W2r=r(jSe," \u2014 "),BQ=n(jSe,"A",{href:!0});var Pvt=s(BQ);Q2r=r(Pvt,"TFBartForConditionalGeneration"),Pvt.forEach(t),H2r=r(jSe," (BART model)"),jSe.forEach(t),U2r=i(Be),Q7=n(Be,"LI",{});var DSe=s(Q7);s4e=n(DSe,"STRONG",{});var Bvt=s(s4e);J2r=r(Bvt,"blenderbot"),Bvt.forEach(t),Y2r=r(DSe," \u2014 "),IQ=n(DSe,"A",{href:!0});var Ivt=s(IQ);K2r=r(Ivt,"TFBlenderbotForConditionalGeneration"),Ivt.forEach(t),Z2r=r(DSe," (Blenderbot model)"),DSe.forEach(t),e1r=i(Be),H7=n(Be,"LI",{});var GSe=s(H7);l4e=n(GSe,"STRONG",{});var qvt=s(l4e);o1r=r(qvt,"blenderbot-small"),qvt.forEach(t),r1r=r(GSe," \u2014 "),qQ=n(GSe,"A",{href:!0});var Nvt=s(qQ);t1r=r(Nvt,"TFBlenderbotSmallForConditionalGeneration"),Nvt.forEach(t),a1r=r(GSe," (BlenderbotSmall model)"),GSe.forEach(t),n1r=i(Be),U7=n(Be,"LI",{});var OSe=s(U7);i4e=n(OSe,"STRONG",{});var jvt=s(i4e);s1r=r(jvt,"encoder-decoder"),jvt.forEach(t),l1r=r(OSe," \u2014 "),NQ=n(OSe,"A",{href:!0});var Dvt=s(NQ);i1r=r(Dvt,"TFEncoderDecoderModel"),Dvt.forEach(t),d1r=r(OSe," (Encoder decoder model)"),OSe.forEach(t),c1r=i(Be),J7=n(Be,"LI",{});var VSe=s(J7);d4e=n(VSe,"STRONG",{});var Gvt=s(d4e);f1r=r(Gvt,"led"),Gvt.forEach(t),m1r=r(VSe," \u2014 "),jQ=n(VSe,"A",{href:!0});var Ovt=s(jQ);g1r=r(Ovt,"TFLEDForConditionalGeneration"),Ovt.forEach(t),h1r=r(VSe," (LED model)"),VSe.forEach(t),p1r=i(Be),Y7=n(Be,"LI",{});var XSe=s(Y7);c4e=n(XSe,"STRONG",{});var Vvt=s(c4e);u1r=r(Vvt,"marian"),Vvt.forEach(t),_1r=r(XSe," \u2014 "),DQ=n(XSe,"A",{href:!0});var Xvt=s(DQ);b1r=r(Xvt,"TFMarianMTModel"),Xvt.forEach(t),v1r=r(XSe," (Marian model)"),XSe.forEach(t),F1r=i(Be),K7=n(Be,"LI",{});var zSe=s(K7);f4e=n(zSe,"STRONG",{});var zvt=s(f4e);T1r=r(zvt,"mbart"),zvt.forEach(t),M1r=r(zSe," \u2014 "),GQ=n(zSe,"A",{href:!0});var Wvt=s(GQ);E1r=r(Wvt,"TFMBartForConditionalGeneration"),Wvt.forEach(t),C1r=r(zSe," (mBART model)"),zSe.forEach(t),w1r=i(Be),Z7=n(Be,"LI",{});var WSe=s(Z7);m4e=n(WSe,"STRONG",{});var Qvt=s(m4e);A1r=r(Qvt,"mt5"),Qvt.forEach(t),y1r=r(WSe," \u2014 "),OQ=n(WSe,"A",{href:!0});var Hvt=s(OQ);L1r=r(Hvt,"TFMT5ForConditionalGeneration"),Hvt.forEach(t),x1r=r(WSe," (mT5 model)"),WSe.forEach(t),$1r=i(Be),eM=n(Be,"LI",{});var QSe=s(eM);g4e=n(QSe,"STRONG",{});var Uvt=s(g4e);k1r=r(Uvt,"pegasus"),Uvt.forEach(t),S1r=r(QSe," \u2014 "),VQ=n(QSe,"A",{href:!0});var Jvt=s(VQ);R1r=r(Jvt,"TFPegasusForConditionalGeneration"),Jvt.forEach(t),P1r=r(QSe," (Pegasus model)"),QSe.forEach(t),B1r=i(Be),oM=n(Be,"LI",{});var HSe=s(oM);h4e=n(HSe,"STRONG",{});var Yvt=s(h4e);I1r=r(Yvt,"t5"),Yvt.forEach(t),q1r=r(HSe," \u2014 "),XQ=n(HSe,"A",{href:!0});var Kvt=s(XQ);N1r=r(Kvt,"TFT5ForConditionalGeneration"),Kvt.forEach(t),j1r=r(HSe," (T5 model)"),HSe.forEach(t),Be.forEach(t),D1r=i(Cl),T(rM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Vqe=i(f),nc=n(f,"H2",{class:!0});var Uje=s(nc);tM=n(Uje,"A",{id:!0,class:!0,href:!0});var Zvt=s(tM);p4e=n(Zvt,"SPAN",{});var eFt=s(p4e);T(b8.$$.fragment,eFt),eFt.forEach(t),Zvt.forEach(t),G1r=i(Uje),u4e=n(Uje,"SPAN",{});var oFt=s(u4e);O1r=r(oFt,"TFAutoModelForSequenceClassification"),oFt.forEach(t),Uje.forEach(t),Xqe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(v8.$$.fragment,wl),V1r=i(wl),sc=n(wl,"P",{});var PZ=s(sc);X1r=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zQ=n(PZ,"A",{href:!0});var rFt=s(zQ);z1r=r(rFt,"from_pretrained()"),rFt.forEach(t),W1r=r(PZ," class method or the "),WQ=n(PZ,"A",{href:!0});var tFt=s(WQ);Q1r=r(tFt,"from_config()"),tFt.forEach(t),H1r=r(PZ,` class
method.`),PZ.forEach(t),U1r=i(wl),F8=n(wl,"P",{});var Jje=s(F8);J1r=r(Jje,"This class cannot be instantiated directly using "),_4e=n(Jje,"CODE",{});var aFt=s(_4e);Y1r=r(aFt,"__init__()"),aFt.forEach(t),K1r=r(Jje," (throws an error)."),Jje.forEach(t),Z1r=i(wl),Rt=n(wl,"DIV",{class:!0});var _6=s(Rt);T(T8.$$.fragment,_6),ebr=i(_6),b4e=n(_6,"P",{});var nFt=s(b4e);obr=r(nFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nFt.forEach(t),rbr=i(_6),lc=n(_6,"P",{});var BZ=s(lc);tbr=r(BZ,`Note:
Loading a model from its configuration file does `),v4e=n(BZ,"STRONG",{});var sFt=s(v4e);abr=r(sFt,"not"),sFt.forEach(t),nbr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(BZ,"A",{href:!0});var lFt=s(QQ);sbr=r(lFt,"from_pretrained()"),lFt.forEach(t),lbr=r(BZ," to load the model weights."),BZ.forEach(t),ibr=i(_6),T(aM.$$.fragment,_6),_6.forEach(t),dbr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(M8.$$.fragment,Al),cbr=i(Al),F4e=n(Al,"P",{});var iFt=s(F4e);fbr=r(iFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iFt.forEach(t),mbr=i(Al),nn=n(Al,"P",{});var b6=s(nn);gbr=r(b6,"The model class to instantiate is selected based on the "),T4e=n(b6,"CODE",{});var dFt=s(T4e);hbr=r(dFt,"model_type"),dFt.forEach(t),pbr=r(b6,` property of the config object (either
passed as an argument or loaded from `),M4e=n(b6,"CODE",{});var cFt=s(M4e);ubr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),_br=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(b6,"CODE",{});var fFt=s(E4e);bbr=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),vbr=r(b6,":"),b6.forEach(t),Fbr=i(Al),ee=n(Al,"UL",{});var ae=s(ee);nM=n(ae,"LI",{});var USe=s(nM);C4e=n(USe,"STRONG",{});var mFt=s(C4e);Tbr=r(mFt,"albert"),mFt.forEach(t),Mbr=r(USe," \u2014 "),HQ=n(USe,"A",{href:!0});var gFt=s(HQ);Ebr=r(gFt,"TFAlbertForSequenceClassification"),gFt.forEach(t),Cbr=r(USe," (ALBERT model)"),USe.forEach(t),wbr=i(ae),sM=n(ae,"LI",{});var JSe=s(sM);w4e=n(JSe,"STRONG",{});var hFt=s(w4e);Abr=r(hFt,"bert"),hFt.forEach(t),ybr=r(JSe," \u2014 "),UQ=n(JSe,"A",{href:!0});var pFt=s(UQ);Lbr=r(pFt,"TFBertForSequenceClassification"),pFt.forEach(t),xbr=r(JSe," (BERT model)"),JSe.forEach(t),$br=i(ae),lM=n(ae,"LI",{});var YSe=s(lM);A4e=n(YSe,"STRONG",{});var uFt=s(A4e);kbr=r(uFt,"camembert"),uFt.forEach(t),Sbr=r(YSe," \u2014 "),JQ=n(YSe,"A",{href:!0});var _Ft=s(JQ);Rbr=r(_Ft,"TFCamembertForSequenceClassification"),_Ft.forEach(t),Pbr=r(YSe," (CamemBERT model)"),YSe.forEach(t),Bbr=i(ae),iM=n(ae,"LI",{});var KSe=s(iM);y4e=n(KSe,"STRONG",{});var bFt=s(y4e);Ibr=r(bFt,"convbert"),bFt.forEach(t),qbr=r(KSe," \u2014 "),YQ=n(KSe,"A",{href:!0});var vFt=s(YQ);Nbr=r(vFt,"TFConvBertForSequenceClassification"),vFt.forEach(t),jbr=r(KSe," (ConvBERT model)"),KSe.forEach(t),Dbr=i(ae),dM=n(ae,"LI",{});var ZSe=s(dM);L4e=n(ZSe,"STRONG",{});var FFt=s(L4e);Gbr=r(FFt,"ctrl"),FFt.forEach(t),Obr=r(ZSe," \u2014 "),KQ=n(ZSe,"A",{href:!0});var TFt=s(KQ);Vbr=r(TFt,"TFCTRLForSequenceClassification"),TFt.forEach(t),Xbr=r(ZSe," (CTRL model)"),ZSe.forEach(t),zbr=i(ae),cM=n(ae,"LI",{});var eRe=s(cM);x4e=n(eRe,"STRONG",{});var MFt=s(x4e);Wbr=r(MFt,"deberta"),MFt.forEach(t),Qbr=r(eRe," \u2014 "),ZQ=n(eRe,"A",{href:!0});var EFt=s(ZQ);Hbr=r(EFt,"TFDebertaForSequenceClassification"),EFt.forEach(t),Ubr=r(eRe," (DeBERTa model)"),eRe.forEach(t),Jbr=i(ae),fM=n(ae,"LI",{});var oRe=s(fM);$4e=n(oRe,"STRONG",{});var CFt=s($4e);Ybr=r(CFt,"deberta-v2"),CFt.forEach(t),Kbr=r(oRe," \u2014 "),eH=n(oRe,"A",{href:!0});var wFt=s(eH);Zbr=r(wFt,"TFDebertaV2ForSequenceClassification"),wFt.forEach(t),e4r=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),o4r=i(ae),mM=n(ae,"LI",{});var rRe=s(mM);k4e=n(rRe,"STRONG",{});var AFt=s(k4e);r4r=r(AFt,"distilbert"),AFt.forEach(t),t4r=r(rRe," \u2014 "),oH=n(rRe,"A",{href:!0});var yFt=s(oH);a4r=r(yFt,"TFDistilBertForSequenceClassification"),yFt.forEach(t),n4r=r(rRe," (DistilBERT model)"),rRe.forEach(t),s4r=i(ae),gM=n(ae,"LI",{});var tRe=s(gM);S4e=n(tRe,"STRONG",{});var LFt=s(S4e);l4r=r(LFt,"electra"),LFt.forEach(t),i4r=r(tRe," \u2014 "),rH=n(tRe,"A",{href:!0});var xFt=s(rH);d4r=r(xFt,"TFElectraForSequenceClassification"),xFt.forEach(t),c4r=r(tRe," (ELECTRA model)"),tRe.forEach(t),f4r=i(ae),hM=n(ae,"LI",{});var aRe=s(hM);R4e=n(aRe,"STRONG",{});var $Ft=s(R4e);m4r=r($Ft,"flaubert"),$Ft.forEach(t),g4r=r(aRe," \u2014 "),tH=n(aRe,"A",{href:!0});var kFt=s(tH);h4r=r(kFt,"TFFlaubertForSequenceClassification"),kFt.forEach(t),p4r=r(aRe," (FlauBERT model)"),aRe.forEach(t),u4r=i(ae),pM=n(ae,"LI",{});var nRe=s(pM);P4e=n(nRe,"STRONG",{});var SFt=s(P4e);_4r=r(SFt,"funnel"),SFt.forEach(t),b4r=r(nRe," \u2014 "),aH=n(nRe,"A",{href:!0});var RFt=s(aH);v4r=r(RFt,"TFFunnelForSequenceClassification"),RFt.forEach(t),F4r=r(nRe," (Funnel Transformer model)"),nRe.forEach(t),T4r=i(ae),uM=n(ae,"LI",{});var sRe=s(uM);B4e=n(sRe,"STRONG",{});var PFt=s(B4e);M4r=r(PFt,"gpt2"),PFt.forEach(t),E4r=r(sRe," \u2014 "),nH=n(sRe,"A",{href:!0});var BFt=s(nH);C4r=r(BFt,"TFGPT2ForSequenceClassification"),BFt.forEach(t),w4r=r(sRe," (OpenAI GPT-2 model)"),sRe.forEach(t),A4r=i(ae),_M=n(ae,"LI",{});var lRe=s(_M);I4e=n(lRe,"STRONG",{});var IFt=s(I4e);y4r=r(IFt,"gptj"),IFt.forEach(t),L4r=r(lRe," \u2014 "),sH=n(lRe,"A",{href:!0});var qFt=s(sH);x4r=r(qFt,"TFGPTJForSequenceClassification"),qFt.forEach(t),$4r=r(lRe," (GPT-J model)"),lRe.forEach(t),k4r=i(ae),bM=n(ae,"LI",{});var iRe=s(bM);q4e=n(iRe,"STRONG",{});var NFt=s(q4e);S4r=r(NFt,"layoutlm"),NFt.forEach(t),R4r=r(iRe," \u2014 "),lH=n(iRe,"A",{href:!0});var jFt=s(lH);P4r=r(jFt,"TFLayoutLMForSequenceClassification"),jFt.forEach(t),B4r=r(iRe," (LayoutLM model)"),iRe.forEach(t),I4r=i(ae),vM=n(ae,"LI",{});var dRe=s(vM);N4e=n(dRe,"STRONG",{});var DFt=s(N4e);q4r=r(DFt,"longformer"),DFt.forEach(t),N4r=r(dRe," \u2014 "),iH=n(dRe,"A",{href:!0});var GFt=s(iH);j4r=r(GFt,"TFLongformerForSequenceClassification"),GFt.forEach(t),D4r=r(dRe," (Longformer model)"),dRe.forEach(t),G4r=i(ae),FM=n(ae,"LI",{});var cRe=s(FM);j4e=n(cRe,"STRONG",{});var OFt=s(j4e);O4r=r(OFt,"mobilebert"),OFt.forEach(t),V4r=r(cRe," \u2014 "),dH=n(cRe,"A",{href:!0});var VFt=s(dH);X4r=r(VFt,"TFMobileBertForSequenceClassification"),VFt.forEach(t),z4r=r(cRe," (MobileBERT model)"),cRe.forEach(t),W4r=i(ae),TM=n(ae,"LI",{});var fRe=s(TM);D4e=n(fRe,"STRONG",{});var XFt=s(D4e);Q4r=r(XFt,"mpnet"),XFt.forEach(t),H4r=r(fRe," \u2014 "),cH=n(fRe,"A",{href:!0});var zFt=s(cH);U4r=r(zFt,"TFMPNetForSequenceClassification"),zFt.forEach(t),J4r=r(fRe," (MPNet model)"),fRe.forEach(t),Y4r=i(ae),MM=n(ae,"LI",{});var mRe=s(MM);G4e=n(mRe,"STRONG",{});var WFt=s(G4e);K4r=r(WFt,"openai-gpt"),WFt.forEach(t),Z4r=r(mRe," \u2014 "),fH=n(mRe,"A",{href:!0});var QFt=s(fH);e5r=r(QFt,"TFOpenAIGPTForSequenceClassification"),QFt.forEach(t),o5r=r(mRe," (OpenAI GPT model)"),mRe.forEach(t),r5r=i(ae),EM=n(ae,"LI",{});var gRe=s(EM);O4e=n(gRe,"STRONG",{});var HFt=s(O4e);t5r=r(HFt,"rembert"),HFt.forEach(t),a5r=r(gRe," \u2014 "),mH=n(gRe,"A",{href:!0});var UFt=s(mH);n5r=r(UFt,"TFRemBertForSequenceClassification"),UFt.forEach(t),s5r=r(gRe," (RemBERT model)"),gRe.forEach(t),l5r=i(ae),CM=n(ae,"LI",{});var hRe=s(CM);V4e=n(hRe,"STRONG",{});var JFt=s(V4e);i5r=r(JFt,"roberta"),JFt.forEach(t),d5r=r(hRe," \u2014 "),gH=n(hRe,"A",{href:!0});var YFt=s(gH);c5r=r(YFt,"TFRobertaForSequenceClassification"),YFt.forEach(t),f5r=r(hRe," (RoBERTa model)"),hRe.forEach(t),m5r=i(ae),wM=n(ae,"LI",{});var pRe=s(wM);X4e=n(pRe,"STRONG",{});var KFt=s(X4e);g5r=r(KFt,"roformer"),KFt.forEach(t),h5r=r(pRe," \u2014 "),hH=n(pRe,"A",{href:!0});var ZFt=s(hH);p5r=r(ZFt,"TFRoFormerForSequenceClassification"),ZFt.forEach(t),u5r=r(pRe," (RoFormer model)"),pRe.forEach(t),_5r=i(ae),AM=n(ae,"LI",{});var uRe=s(AM);z4e=n(uRe,"STRONG",{});var eTt=s(z4e);b5r=r(eTt,"tapas"),eTt.forEach(t),v5r=r(uRe," \u2014 "),pH=n(uRe,"A",{href:!0});var oTt=s(pH);F5r=r(oTt,"TFTapasForSequenceClassification"),oTt.forEach(t),T5r=r(uRe," (TAPAS model)"),uRe.forEach(t),M5r=i(ae),yM=n(ae,"LI",{});var _Re=s(yM);W4e=n(_Re,"STRONG",{});var rTt=s(W4e);E5r=r(rTt,"transfo-xl"),rTt.forEach(t),C5r=r(_Re," \u2014 "),uH=n(_Re,"A",{href:!0});var tTt=s(uH);w5r=r(tTt,"TFTransfoXLForSequenceClassification"),tTt.forEach(t),A5r=r(_Re," (Transformer-XL model)"),_Re.forEach(t),y5r=i(ae),LM=n(ae,"LI",{});var bRe=s(LM);Q4e=n(bRe,"STRONG",{});var aTt=s(Q4e);L5r=r(aTt,"xlm"),aTt.forEach(t),x5r=r(bRe," \u2014 "),_H=n(bRe,"A",{href:!0});var nTt=s(_H);$5r=r(nTt,"TFXLMForSequenceClassification"),nTt.forEach(t),k5r=r(bRe," (XLM model)"),bRe.forEach(t),S5r=i(ae),xM=n(ae,"LI",{});var vRe=s(xM);H4e=n(vRe,"STRONG",{});var sTt=s(H4e);R5r=r(sTt,"xlm-roberta"),sTt.forEach(t),P5r=r(vRe," \u2014 "),bH=n(vRe,"A",{href:!0});var lTt=s(bH);B5r=r(lTt,"TFXLMRobertaForSequenceClassification"),lTt.forEach(t),I5r=r(vRe," (XLM-RoBERTa model)"),vRe.forEach(t),q5r=i(ae),$M=n(ae,"LI",{});var FRe=s($M);U4e=n(FRe,"STRONG",{});var iTt=s(U4e);N5r=r(iTt,"xlnet"),iTt.forEach(t),j5r=r(FRe," \u2014 "),vH=n(FRe,"A",{href:!0});var dTt=s(vH);D5r=r(dTt,"TFXLNetForSequenceClassification"),dTt.forEach(t),G5r=r(FRe," (XLNet model)"),FRe.forEach(t),ae.forEach(t),O5r=i(Al),T(kM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),zqe=i(f),ic=n(f,"H2",{class:!0});var Yje=s(ic);SM=n(Yje,"A",{id:!0,class:!0,href:!0});var cTt=s(SM);J4e=n(cTt,"SPAN",{});var fTt=s(J4e);T(E8.$$.fragment,fTt),fTt.forEach(t),cTt.forEach(t),V5r=i(Yje),Y4e=n(Yje,"SPAN",{});var mTt=s(Y4e);X5r=r(mTt,"TFAutoModelForMultipleChoice"),mTt.forEach(t),Yje.forEach(t),Wqe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(C8.$$.fragment,yl),z5r=i(yl),dc=n(yl,"P",{});var IZ=s(dc);W5r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FH=n(IZ,"A",{href:!0});var gTt=s(FH);Q5r=r(gTt,"from_pretrained()"),gTt.forEach(t),H5r=r(IZ," class method or the "),TH=n(IZ,"A",{href:!0});var hTt=s(TH);U5r=r(hTt,"from_config()"),hTt.forEach(t),J5r=r(IZ,` class
method.`),IZ.forEach(t),Y5r=i(yl),w8=n(yl,"P",{});var Kje=s(w8);K5r=r(Kje,"This class cannot be instantiated directly using "),K4e=n(Kje,"CODE",{});var pTt=s(K4e);Z5r=r(pTt,"__init__()"),pTt.forEach(t),evr=r(Kje," (throws an error)."),Kje.forEach(t),ovr=i(yl),Pt=n(yl,"DIV",{class:!0});var v6=s(Pt);T(A8.$$.fragment,v6),rvr=i(v6),Z4e=n(v6,"P",{});var uTt=s(Z4e);tvr=r(uTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uTt.forEach(t),avr=i(v6),cc=n(v6,"P",{});var qZ=s(cc);nvr=r(qZ,`Note:
Loading a model from its configuration file does `),e5e=n(qZ,"STRONG",{});var _Tt=s(e5e);svr=r(_Tt,"not"),_Tt.forEach(t),lvr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(qZ,"A",{href:!0});var bTt=s(MH);ivr=r(bTt,"from_pretrained()"),bTt.forEach(t),dvr=r(qZ," to load the model weights."),qZ.forEach(t),cvr=i(v6),T(RM.$$.fragment,v6),v6.forEach(t),fvr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(y8.$$.fragment,Ll),mvr=i(Ll),o5e=n(Ll,"P",{});var vTt=s(o5e);gvr=r(vTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vTt.forEach(t),hvr=i(Ll),sn=n(Ll,"P",{});var F6=s(sn);pvr=r(F6,"The model class to instantiate is selected based on the "),r5e=n(F6,"CODE",{});var FTt=s(r5e);uvr=r(FTt,"model_type"),FTt.forEach(t),_vr=r(F6,` property of the config object (either
passed as an argument or loaded from `),t5e=n(F6,"CODE",{});var TTt=s(t5e);bvr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),vvr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(F6,"CODE",{});var MTt=s(a5e);Fvr=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),Tvr=r(F6,":"),F6.forEach(t),Mvr=i(Ll),he=n(Ll,"UL",{});var _e=s(he);PM=n(_e,"LI",{});var TRe=s(PM);n5e=n(TRe,"STRONG",{});var ETt=s(n5e);Evr=r(ETt,"albert"),ETt.forEach(t),Cvr=r(TRe," \u2014 "),EH=n(TRe,"A",{href:!0});var CTt=s(EH);wvr=r(CTt,"TFAlbertForMultipleChoice"),CTt.forEach(t),Avr=r(TRe," (ALBERT model)"),TRe.forEach(t),yvr=i(_e),BM=n(_e,"LI",{});var MRe=s(BM);s5e=n(MRe,"STRONG",{});var wTt=s(s5e);Lvr=r(wTt,"bert"),wTt.forEach(t),xvr=r(MRe," \u2014 "),CH=n(MRe,"A",{href:!0});var ATt=s(CH);$vr=r(ATt,"TFBertForMultipleChoice"),ATt.forEach(t),kvr=r(MRe," (BERT model)"),MRe.forEach(t),Svr=i(_e),IM=n(_e,"LI",{});var ERe=s(IM);l5e=n(ERe,"STRONG",{});var yTt=s(l5e);Rvr=r(yTt,"camembert"),yTt.forEach(t),Pvr=r(ERe," \u2014 "),wH=n(ERe,"A",{href:!0});var LTt=s(wH);Bvr=r(LTt,"TFCamembertForMultipleChoice"),LTt.forEach(t),Ivr=r(ERe," (CamemBERT model)"),ERe.forEach(t),qvr=i(_e),qM=n(_e,"LI",{});var CRe=s(qM);i5e=n(CRe,"STRONG",{});var xTt=s(i5e);Nvr=r(xTt,"convbert"),xTt.forEach(t),jvr=r(CRe," \u2014 "),AH=n(CRe,"A",{href:!0});var $Tt=s(AH);Dvr=r($Tt,"TFConvBertForMultipleChoice"),$Tt.forEach(t),Gvr=r(CRe," (ConvBERT model)"),CRe.forEach(t),Ovr=i(_e),NM=n(_e,"LI",{});var wRe=s(NM);d5e=n(wRe,"STRONG",{});var kTt=s(d5e);Vvr=r(kTt,"distilbert"),kTt.forEach(t),Xvr=r(wRe," \u2014 "),yH=n(wRe,"A",{href:!0});var STt=s(yH);zvr=r(STt,"TFDistilBertForMultipleChoice"),STt.forEach(t),Wvr=r(wRe," (DistilBERT model)"),wRe.forEach(t),Qvr=i(_e),jM=n(_e,"LI",{});var ARe=s(jM);c5e=n(ARe,"STRONG",{});var RTt=s(c5e);Hvr=r(RTt,"electra"),RTt.forEach(t),Uvr=r(ARe," \u2014 "),LH=n(ARe,"A",{href:!0});var PTt=s(LH);Jvr=r(PTt,"TFElectraForMultipleChoice"),PTt.forEach(t),Yvr=r(ARe," (ELECTRA model)"),ARe.forEach(t),Kvr=i(_e),DM=n(_e,"LI",{});var yRe=s(DM);f5e=n(yRe,"STRONG",{});var BTt=s(f5e);Zvr=r(BTt,"flaubert"),BTt.forEach(t),eFr=r(yRe," \u2014 "),xH=n(yRe,"A",{href:!0});var ITt=s(xH);oFr=r(ITt,"TFFlaubertForMultipleChoice"),ITt.forEach(t),rFr=r(yRe," (FlauBERT model)"),yRe.forEach(t),tFr=i(_e),GM=n(_e,"LI",{});var LRe=s(GM);m5e=n(LRe,"STRONG",{});var qTt=s(m5e);aFr=r(qTt,"funnel"),qTt.forEach(t),nFr=r(LRe," \u2014 "),$H=n(LRe,"A",{href:!0});var NTt=s($H);sFr=r(NTt,"TFFunnelForMultipleChoice"),NTt.forEach(t),lFr=r(LRe," (Funnel Transformer model)"),LRe.forEach(t),iFr=i(_e),OM=n(_e,"LI",{});var xRe=s(OM);g5e=n(xRe,"STRONG",{});var jTt=s(g5e);dFr=r(jTt,"longformer"),jTt.forEach(t),cFr=r(xRe," \u2014 "),kH=n(xRe,"A",{href:!0});var DTt=s(kH);fFr=r(DTt,"TFLongformerForMultipleChoice"),DTt.forEach(t),mFr=r(xRe," (Longformer model)"),xRe.forEach(t),gFr=i(_e),VM=n(_e,"LI",{});var $Re=s(VM);h5e=n($Re,"STRONG",{});var GTt=s(h5e);hFr=r(GTt,"mobilebert"),GTt.forEach(t),pFr=r($Re," \u2014 "),SH=n($Re,"A",{href:!0});var OTt=s(SH);uFr=r(OTt,"TFMobileBertForMultipleChoice"),OTt.forEach(t),_Fr=r($Re," (MobileBERT model)"),$Re.forEach(t),bFr=i(_e),XM=n(_e,"LI",{});var kRe=s(XM);p5e=n(kRe,"STRONG",{});var VTt=s(p5e);vFr=r(VTt,"mpnet"),VTt.forEach(t),FFr=r(kRe," \u2014 "),RH=n(kRe,"A",{href:!0});var XTt=s(RH);TFr=r(XTt,"TFMPNetForMultipleChoice"),XTt.forEach(t),MFr=r(kRe," (MPNet model)"),kRe.forEach(t),EFr=i(_e),zM=n(_e,"LI",{});var SRe=s(zM);u5e=n(SRe,"STRONG",{});var zTt=s(u5e);CFr=r(zTt,"rembert"),zTt.forEach(t),wFr=r(SRe," \u2014 "),PH=n(SRe,"A",{href:!0});var WTt=s(PH);AFr=r(WTt,"TFRemBertForMultipleChoice"),WTt.forEach(t),yFr=r(SRe," (RemBERT model)"),SRe.forEach(t),LFr=i(_e),WM=n(_e,"LI",{});var RRe=s(WM);_5e=n(RRe,"STRONG",{});var QTt=s(_5e);xFr=r(QTt,"roberta"),QTt.forEach(t),$Fr=r(RRe," \u2014 "),BH=n(RRe,"A",{href:!0});var HTt=s(BH);kFr=r(HTt,"TFRobertaForMultipleChoice"),HTt.forEach(t),SFr=r(RRe," (RoBERTa model)"),RRe.forEach(t),RFr=i(_e),QM=n(_e,"LI",{});var PRe=s(QM);b5e=n(PRe,"STRONG",{});var UTt=s(b5e);PFr=r(UTt,"roformer"),UTt.forEach(t),BFr=r(PRe," \u2014 "),IH=n(PRe,"A",{href:!0});var JTt=s(IH);IFr=r(JTt,"TFRoFormerForMultipleChoice"),JTt.forEach(t),qFr=r(PRe," (RoFormer model)"),PRe.forEach(t),NFr=i(_e),HM=n(_e,"LI",{});var BRe=s(HM);v5e=n(BRe,"STRONG",{});var YTt=s(v5e);jFr=r(YTt,"xlm"),YTt.forEach(t),DFr=r(BRe," \u2014 "),qH=n(BRe,"A",{href:!0});var KTt=s(qH);GFr=r(KTt,"TFXLMForMultipleChoice"),KTt.forEach(t),OFr=r(BRe," (XLM model)"),BRe.forEach(t),VFr=i(_e),UM=n(_e,"LI",{});var IRe=s(UM);F5e=n(IRe,"STRONG",{});var ZTt=s(F5e);XFr=r(ZTt,"xlm-roberta"),ZTt.forEach(t),zFr=r(IRe," \u2014 "),NH=n(IRe,"A",{href:!0});var e7t=s(NH);WFr=r(e7t,"TFXLMRobertaForMultipleChoice"),e7t.forEach(t),QFr=r(IRe," (XLM-RoBERTa model)"),IRe.forEach(t),HFr=i(_e),JM=n(_e,"LI",{});var qRe=s(JM);T5e=n(qRe,"STRONG",{});var o7t=s(T5e);UFr=r(o7t,"xlnet"),o7t.forEach(t),JFr=r(qRe," \u2014 "),jH=n(qRe,"A",{href:!0});var r7t=s(jH);YFr=r(r7t,"TFXLNetForMultipleChoice"),r7t.forEach(t),KFr=r(qRe," (XLNet model)"),qRe.forEach(t),_e.forEach(t),ZFr=i(Ll),T(YM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Qqe=i(f),fc=n(f,"H2",{class:!0});var Zje=s(fc);KM=n(Zje,"A",{id:!0,class:!0,href:!0});var t7t=s(KM);M5e=n(t7t,"SPAN",{});var a7t=s(M5e);T(L8.$$.fragment,a7t),a7t.forEach(t),t7t.forEach(t),eTr=i(Zje),E5e=n(Zje,"SPAN",{});var n7t=s(E5e);oTr=r(n7t,"TFAutoModelForNextSentencePrediction"),n7t.forEach(t),Zje.forEach(t),Hqe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(x8.$$.fragment,xl),rTr=i(xl),mc=n(xl,"P",{});var NZ=s(mc);tTr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DH=n(NZ,"A",{href:!0});var s7t=s(DH);aTr=r(s7t,"from_pretrained()"),s7t.forEach(t),nTr=r(NZ," class method or the "),GH=n(NZ,"A",{href:!0});var l7t=s(GH);sTr=r(l7t,"from_config()"),l7t.forEach(t),lTr=r(NZ,` class
method.`),NZ.forEach(t),iTr=i(xl),$8=n(xl,"P",{});var eDe=s($8);dTr=r(eDe,"This class cannot be instantiated directly using "),C5e=n(eDe,"CODE",{});var i7t=s(C5e);cTr=r(i7t,"__init__()"),i7t.forEach(t),fTr=r(eDe," (throws an error)."),eDe.forEach(t),mTr=i(xl),Bt=n(xl,"DIV",{class:!0});var T6=s(Bt);T(k8.$$.fragment,T6),gTr=i(T6),w5e=n(T6,"P",{});var d7t=s(w5e);hTr=r(d7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),d7t.forEach(t),pTr=i(T6),gc=n(T6,"P",{});var jZ=s(gc);uTr=r(jZ,`Note:
Loading a model from its configuration file does `),A5e=n(jZ,"STRONG",{});var c7t=s(A5e);_Tr=r(c7t,"not"),c7t.forEach(t),bTr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(jZ,"A",{href:!0});var f7t=s(OH);vTr=r(f7t,"from_pretrained()"),f7t.forEach(t),FTr=r(jZ," to load the model weights."),jZ.forEach(t),TTr=i(T6),T(ZM.$$.fragment,T6),T6.forEach(t),MTr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(S8.$$.fragment,$l),ETr=i($l),y5e=n($l,"P",{});var m7t=s(y5e);CTr=r(m7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),m7t.forEach(t),wTr=i($l),ln=n($l,"P",{});var M6=s(ln);ATr=r(M6,"The model class to instantiate is selected based on the "),L5e=n(M6,"CODE",{});var g7t=s(L5e);yTr=r(g7t,"model_type"),g7t.forEach(t),LTr=r(M6,` property of the config object (either
passed as an argument or loaded from `),x5e=n(M6,"CODE",{});var h7t=s(x5e);xTr=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),$Tr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(M6,"CODE",{});var p7t=s($5e);kTr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),STr=r(M6,":"),M6.forEach(t),RTr=i($l),R8=n($l,"UL",{});var oDe=s(R8);eE=n(oDe,"LI",{});var NRe=s(eE);k5e=n(NRe,"STRONG",{});var u7t=s(k5e);PTr=r(u7t,"bert"),u7t.forEach(t),BTr=r(NRe," \u2014 "),VH=n(NRe,"A",{href:!0});var _7t=s(VH);ITr=r(_7t,"TFBertForNextSentencePrediction"),_7t.forEach(t),qTr=r(NRe," (BERT model)"),NRe.forEach(t),NTr=i(oDe),oE=n(oDe,"LI",{});var jRe=s(oE);S5e=n(jRe,"STRONG",{});var b7t=s(S5e);jTr=r(b7t,"mobilebert"),b7t.forEach(t),DTr=r(jRe," \u2014 "),XH=n(jRe,"A",{href:!0});var v7t=s(XH);GTr=r(v7t,"TFMobileBertForNextSentencePrediction"),v7t.forEach(t),OTr=r(jRe," (MobileBERT model)"),jRe.forEach(t),oDe.forEach(t),VTr=i($l),T(rE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Uqe=i(f),hc=n(f,"H2",{class:!0});var rDe=s(hc);tE=n(rDe,"A",{id:!0,class:!0,href:!0});var F7t=s(tE);R5e=n(F7t,"SPAN",{});var T7t=s(R5e);T(P8.$$.fragment,T7t),T7t.forEach(t),F7t.forEach(t),XTr=i(rDe),P5e=n(rDe,"SPAN",{});var M7t=s(P5e);zTr=r(M7t,"TFAutoModelForTableQuestionAnswering"),M7t.forEach(t),rDe.forEach(t),Jqe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(B8.$$.fragment,kl),WTr=i(kl),pc=n(kl,"P",{});var DZ=s(pc);QTr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zH=n(DZ,"A",{href:!0});var E7t=s(zH);HTr=r(E7t,"from_pretrained()"),E7t.forEach(t),UTr=r(DZ," class method or the "),WH=n(DZ,"A",{href:!0});var C7t=s(WH);JTr=r(C7t,"from_config()"),C7t.forEach(t),YTr=r(DZ,` class
method.`),DZ.forEach(t),KTr=i(kl),I8=n(kl,"P",{});var tDe=s(I8);ZTr=r(tDe,"This class cannot be instantiated directly using "),B5e=n(tDe,"CODE",{});var w7t=s(B5e);e7r=r(w7t,"__init__()"),w7t.forEach(t),o7r=r(tDe," (throws an error)."),tDe.forEach(t),r7r=i(kl),It=n(kl,"DIV",{class:!0});var E6=s(It);T(q8.$$.fragment,E6),t7r=i(E6),I5e=n(E6,"P",{});var A7t=s(I5e);a7r=r(A7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),A7t.forEach(t),n7r=i(E6),uc=n(E6,"P",{});var GZ=s(uc);s7r=r(GZ,`Note:
Loading a model from its configuration file does `),q5e=n(GZ,"STRONG",{});var y7t=s(q5e);l7r=r(y7t,"not"),y7t.forEach(t),i7r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(GZ,"A",{href:!0});var L7t=s(QH);d7r=r(L7t,"from_pretrained()"),L7t.forEach(t),c7r=r(GZ," to load the model weights."),GZ.forEach(t),f7r=i(E6),T(aE.$$.fragment,E6),E6.forEach(t),m7r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(N8.$$.fragment,Sl),g7r=i(Sl),N5e=n(Sl,"P",{});var x7t=s(N5e);h7r=r(x7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),x7t.forEach(t),p7r=i(Sl),dn=n(Sl,"P",{});var C6=s(dn);u7r=r(C6,"The model class to instantiate is selected based on the "),j5e=n(C6,"CODE",{});var $7t=s(j5e);_7r=r($7t,"model_type"),$7t.forEach(t),b7r=r(C6,` property of the config object (either
passed as an argument or loaded from `),D5e=n(C6,"CODE",{});var k7t=s(D5e);v7r=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),F7r=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=n(C6,"CODE",{});var S7t=s(G5e);T7r=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),M7r=r(C6,":"),C6.forEach(t),E7r=i(Sl),O5e=n(Sl,"UL",{});var R7t=s(O5e);nE=n(R7t,"LI",{});var DRe=s(nE);V5e=n(DRe,"STRONG",{});var P7t=s(V5e);C7r=r(P7t,"tapas"),P7t.forEach(t),w7r=r(DRe," \u2014 "),HH=n(DRe,"A",{href:!0});var B7t=s(HH);A7r=r(B7t,"TFTapasForQuestionAnswering"),B7t.forEach(t),y7r=r(DRe," (TAPAS model)"),DRe.forEach(t),R7t.forEach(t),L7r=i(Sl),T(sE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Yqe=i(f),_c=n(f,"H2",{class:!0});var aDe=s(_c);lE=n(aDe,"A",{id:!0,class:!0,href:!0});var I7t=s(lE);X5e=n(I7t,"SPAN",{});var q7t=s(X5e);T(j8.$$.fragment,q7t),q7t.forEach(t),I7t.forEach(t),x7r=i(aDe),z5e=n(aDe,"SPAN",{});var N7t=s(z5e);$7r=r(N7t,"TFAutoModelForTokenClassification"),N7t.forEach(t),aDe.forEach(t),Kqe=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(D8.$$.fragment,Rl),k7r=i(Rl),bc=n(Rl,"P",{});var OZ=s(bc);S7r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UH=n(OZ,"A",{href:!0});var j7t=s(UH);R7r=r(j7t,"from_pretrained()"),j7t.forEach(t),P7r=r(OZ," class method or the "),JH=n(OZ,"A",{href:!0});var D7t=s(JH);B7r=r(D7t,"from_config()"),D7t.forEach(t),I7r=r(OZ,` class
method.`),OZ.forEach(t),q7r=i(Rl),G8=n(Rl,"P",{});var nDe=s(G8);N7r=r(nDe,"This class cannot be instantiated directly using "),W5e=n(nDe,"CODE",{});var G7t=s(W5e);j7r=r(G7t,"__init__()"),G7t.forEach(t),D7r=r(nDe," (throws an error)."),nDe.forEach(t),G7r=i(Rl),qt=n(Rl,"DIV",{class:!0});var w6=s(qt);T(O8.$$.fragment,w6),O7r=i(w6),Q5e=n(w6,"P",{});var O7t=s(Q5e);V7r=r(O7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),O7t.forEach(t),X7r=i(w6),vc=n(w6,"P",{});var VZ=s(vc);z7r=r(VZ,`Note:
Loading a model from its configuration file does `),H5e=n(VZ,"STRONG",{});var V7t=s(H5e);W7r=r(V7t,"not"),V7t.forEach(t),Q7r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(VZ,"A",{href:!0});var X7t=s(YH);H7r=r(X7t,"from_pretrained()"),X7t.forEach(t),U7r=r(VZ," to load the model weights."),VZ.forEach(t),J7r=i(w6),T(iE.$$.fragment,w6),w6.forEach(t),Y7r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(V8.$$.fragment,Pl),K7r=i(Pl),U5e=n(Pl,"P",{});var z7t=s(U5e);Z7r=r(z7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),z7t.forEach(t),eMr=i(Pl),cn=n(Pl,"P",{});var A6=s(cn);oMr=r(A6,"The model class to instantiate is selected based on the "),J5e=n(A6,"CODE",{});var W7t=s(J5e);rMr=r(W7t,"model_type"),W7t.forEach(t),tMr=r(A6,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(A6,"CODE",{});var Q7t=s(Y5e);aMr=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),nMr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(A6,"CODE",{});var H7t=s(K5e);sMr=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),lMr=r(A6,":"),A6.forEach(t),iMr=i(Pl),de=n(Pl,"UL",{});var me=s(de);dE=n(me,"LI",{});var GRe=s(dE);Z5e=n(GRe,"STRONG",{});var U7t=s(Z5e);dMr=r(U7t,"albert"),U7t.forEach(t),cMr=r(GRe," \u2014 "),KH=n(GRe,"A",{href:!0});var J7t=s(KH);fMr=r(J7t,"TFAlbertForTokenClassification"),J7t.forEach(t),mMr=r(GRe," (ALBERT model)"),GRe.forEach(t),gMr=i(me),cE=n(me,"LI",{});var ORe=s(cE);eve=n(ORe,"STRONG",{});var Y7t=s(eve);hMr=r(Y7t,"bert"),Y7t.forEach(t),pMr=r(ORe," \u2014 "),ZH=n(ORe,"A",{href:!0});var K7t=s(ZH);uMr=r(K7t,"TFBertForTokenClassification"),K7t.forEach(t),_Mr=r(ORe," (BERT model)"),ORe.forEach(t),bMr=i(me),fE=n(me,"LI",{});var VRe=s(fE);ove=n(VRe,"STRONG",{});var Z7t=s(ove);vMr=r(Z7t,"camembert"),Z7t.forEach(t),FMr=r(VRe," \u2014 "),eU=n(VRe,"A",{href:!0});var eMt=s(eU);TMr=r(eMt,"TFCamembertForTokenClassification"),eMt.forEach(t),MMr=r(VRe," (CamemBERT model)"),VRe.forEach(t),EMr=i(me),mE=n(me,"LI",{});var XRe=s(mE);rve=n(XRe,"STRONG",{});var oMt=s(rve);CMr=r(oMt,"convbert"),oMt.forEach(t),wMr=r(XRe," \u2014 "),oU=n(XRe,"A",{href:!0});var rMt=s(oU);AMr=r(rMt,"TFConvBertForTokenClassification"),rMt.forEach(t),yMr=r(XRe," (ConvBERT model)"),XRe.forEach(t),LMr=i(me),gE=n(me,"LI",{});var zRe=s(gE);tve=n(zRe,"STRONG",{});var tMt=s(tve);xMr=r(tMt,"deberta"),tMt.forEach(t),$Mr=r(zRe," \u2014 "),rU=n(zRe,"A",{href:!0});var aMt=s(rU);kMr=r(aMt,"TFDebertaForTokenClassification"),aMt.forEach(t),SMr=r(zRe," (DeBERTa model)"),zRe.forEach(t),RMr=i(me),hE=n(me,"LI",{});var WRe=s(hE);ave=n(WRe,"STRONG",{});var nMt=s(ave);PMr=r(nMt,"deberta-v2"),nMt.forEach(t),BMr=r(WRe," \u2014 "),tU=n(WRe,"A",{href:!0});var sMt=s(tU);IMr=r(sMt,"TFDebertaV2ForTokenClassification"),sMt.forEach(t),qMr=r(WRe," (DeBERTa-v2 model)"),WRe.forEach(t),NMr=i(me),pE=n(me,"LI",{});var QRe=s(pE);nve=n(QRe,"STRONG",{});var lMt=s(nve);jMr=r(lMt,"distilbert"),lMt.forEach(t),DMr=r(QRe," \u2014 "),aU=n(QRe,"A",{href:!0});var iMt=s(aU);GMr=r(iMt,"TFDistilBertForTokenClassification"),iMt.forEach(t),OMr=r(QRe," (DistilBERT model)"),QRe.forEach(t),VMr=i(me),uE=n(me,"LI",{});var HRe=s(uE);sve=n(HRe,"STRONG",{});var dMt=s(sve);XMr=r(dMt,"electra"),dMt.forEach(t),zMr=r(HRe," \u2014 "),nU=n(HRe,"A",{href:!0});var cMt=s(nU);WMr=r(cMt,"TFElectraForTokenClassification"),cMt.forEach(t),QMr=r(HRe," (ELECTRA model)"),HRe.forEach(t),HMr=i(me),_E=n(me,"LI",{});var URe=s(_E);lve=n(URe,"STRONG",{});var fMt=s(lve);UMr=r(fMt,"flaubert"),fMt.forEach(t),JMr=r(URe," \u2014 "),sU=n(URe,"A",{href:!0});var mMt=s(sU);YMr=r(mMt,"TFFlaubertForTokenClassification"),mMt.forEach(t),KMr=r(URe," (FlauBERT model)"),URe.forEach(t),ZMr=i(me),bE=n(me,"LI",{});var JRe=s(bE);ive=n(JRe,"STRONG",{});var gMt=s(ive);eEr=r(gMt,"funnel"),gMt.forEach(t),oEr=r(JRe," \u2014 "),lU=n(JRe,"A",{href:!0});var hMt=s(lU);rEr=r(hMt,"TFFunnelForTokenClassification"),hMt.forEach(t),tEr=r(JRe," (Funnel Transformer model)"),JRe.forEach(t),aEr=i(me),vE=n(me,"LI",{});var YRe=s(vE);dve=n(YRe,"STRONG",{});var pMt=s(dve);nEr=r(pMt,"layoutlm"),pMt.forEach(t),sEr=r(YRe," \u2014 "),iU=n(YRe,"A",{href:!0});var uMt=s(iU);lEr=r(uMt,"TFLayoutLMForTokenClassification"),uMt.forEach(t),iEr=r(YRe," (LayoutLM model)"),YRe.forEach(t),dEr=i(me),FE=n(me,"LI",{});var KRe=s(FE);cve=n(KRe,"STRONG",{});var _Mt=s(cve);cEr=r(_Mt,"longformer"),_Mt.forEach(t),fEr=r(KRe," \u2014 "),dU=n(KRe,"A",{href:!0});var bMt=s(dU);mEr=r(bMt,"TFLongformerForTokenClassification"),bMt.forEach(t),gEr=r(KRe," (Longformer model)"),KRe.forEach(t),hEr=i(me),TE=n(me,"LI",{});var ZRe=s(TE);fve=n(ZRe,"STRONG",{});var vMt=s(fve);pEr=r(vMt,"mobilebert"),vMt.forEach(t),uEr=r(ZRe," \u2014 "),cU=n(ZRe,"A",{href:!0});var FMt=s(cU);_Er=r(FMt,"TFMobileBertForTokenClassification"),FMt.forEach(t),bEr=r(ZRe," (MobileBERT model)"),ZRe.forEach(t),vEr=i(me),ME=n(me,"LI",{});var ePe=s(ME);mve=n(ePe,"STRONG",{});var TMt=s(mve);FEr=r(TMt,"mpnet"),TMt.forEach(t),TEr=r(ePe," \u2014 "),fU=n(ePe,"A",{href:!0});var MMt=s(fU);MEr=r(MMt,"TFMPNetForTokenClassification"),MMt.forEach(t),EEr=r(ePe," (MPNet model)"),ePe.forEach(t),CEr=i(me),EE=n(me,"LI",{});var oPe=s(EE);gve=n(oPe,"STRONG",{});var EMt=s(gve);wEr=r(EMt,"rembert"),EMt.forEach(t),AEr=r(oPe," \u2014 "),mU=n(oPe,"A",{href:!0});var CMt=s(mU);yEr=r(CMt,"TFRemBertForTokenClassification"),CMt.forEach(t),LEr=r(oPe," (RemBERT model)"),oPe.forEach(t),xEr=i(me),CE=n(me,"LI",{});var rPe=s(CE);hve=n(rPe,"STRONG",{});var wMt=s(hve);$Er=r(wMt,"roberta"),wMt.forEach(t),kEr=r(rPe," \u2014 "),gU=n(rPe,"A",{href:!0});var AMt=s(gU);SEr=r(AMt,"TFRobertaForTokenClassification"),AMt.forEach(t),REr=r(rPe," (RoBERTa model)"),rPe.forEach(t),PEr=i(me),wE=n(me,"LI",{});var tPe=s(wE);pve=n(tPe,"STRONG",{});var yMt=s(pve);BEr=r(yMt,"roformer"),yMt.forEach(t),IEr=r(tPe," \u2014 "),hU=n(tPe,"A",{href:!0});var LMt=s(hU);qEr=r(LMt,"TFRoFormerForTokenClassification"),LMt.forEach(t),NEr=r(tPe," (RoFormer model)"),tPe.forEach(t),jEr=i(me),AE=n(me,"LI",{});var aPe=s(AE);uve=n(aPe,"STRONG",{});var xMt=s(uve);DEr=r(xMt,"xlm"),xMt.forEach(t),GEr=r(aPe," \u2014 "),pU=n(aPe,"A",{href:!0});var $Mt=s(pU);OEr=r($Mt,"TFXLMForTokenClassification"),$Mt.forEach(t),VEr=r(aPe," (XLM model)"),aPe.forEach(t),XEr=i(me),yE=n(me,"LI",{});var nPe=s(yE);_ve=n(nPe,"STRONG",{});var kMt=s(_ve);zEr=r(kMt,"xlm-roberta"),kMt.forEach(t),WEr=r(nPe," \u2014 "),uU=n(nPe,"A",{href:!0});var SMt=s(uU);QEr=r(SMt,"TFXLMRobertaForTokenClassification"),SMt.forEach(t),HEr=r(nPe," (XLM-RoBERTa model)"),nPe.forEach(t),UEr=i(me),LE=n(me,"LI",{});var sPe=s(LE);bve=n(sPe,"STRONG",{});var RMt=s(bve);JEr=r(RMt,"xlnet"),RMt.forEach(t),YEr=r(sPe," \u2014 "),_U=n(sPe,"A",{href:!0});var PMt=s(_U);KEr=r(PMt,"TFXLNetForTokenClassification"),PMt.forEach(t),ZEr=r(sPe," (XLNet model)"),sPe.forEach(t),me.forEach(t),eCr=i(Pl),T(xE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Zqe=i(f),Fc=n(f,"H2",{class:!0});var sDe=s(Fc);$E=n(sDe,"A",{id:!0,class:!0,href:!0});var BMt=s($E);vve=n(BMt,"SPAN",{});var IMt=s(vve);T(X8.$$.fragment,IMt),IMt.forEach(t),BMt.forEach(t),oCr=i(sDe),Fve=n(sDe,"SPAN",{});var qMt=s(Fve);rCr=r(qMt,"TFAutoModelForQuestionAnswering"),qMt.forEach(t),sDe.forEach(t),eNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(z8.$$.fragment,Bl),tCr=i(Bl),Tc=n(Bl,"P",{});var XZ=s(Tc);aCr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bU=n(XZ,"A",{href:!0});var NMt=s(bU);nCr=r(NMt,"from_pretrained()"),NMt.forEach(t),sCr=r(XZ," class method or the "),vU=n(XZ,"A",{href:!0});var jMt=s(vU);lCr=r(jMt,"from_config()"),jMt.forEach(t),iCr=r(XZ,` class
method.`),XZ.forEach(t),dCr=i(Bl),W8=n(Bl,"P",{});var lDe=s(W8);cCr=r(lDe,"This class cannot be instantiated directly using "),Tve=n(lDe,"CODE",{});var DMt=s(Tve);fCr=r(DMt,"__init__()"),DMt.forEach(t),mCr=r(lDe," (throws an error)."),lDe.forEach(t),gCr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var y6=s(Nt);T(Q8.$$.fragment,y6),hCr=i(y6),Mve=n(y6,"P",{});var GMt=s(Mve);pCr=r(GMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GMt.forEach(t),uCr=i(y6),Mc=n(y6,"P",{});var zZ=s(Mc);_Cr=r(zZ,`Note:
Loading a model from its configuration file does `),Eve=n(zZ,"STRONG",{});var OMt=s(Eve);bCr=r(OMt,"not"),OMt.forEach(t),vCr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(zZ,"A",{href:!0});var VMt=s(FU);FCr=r(VMt,"from_pretrained()"),VMt.forEach(t),TCr=r(zZ," to load the model weights."),zZ.forEach(t),MCr=i(y6),T(kE.$$.fragment,y6),y6.forEach(t),ECr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(H8.$$.fragment,Il),CCr=i(Il),Cve=n(Il,"P",{});var XMt=s(Cve);wCr=r(XMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XMt.forEach(t),ACr=i(Il),fn=n(Il,"P",{});var L6=s(fn);yCr=r(L6,"The model class to instantiate is selected based on the "),wve=n(L6,"CODE",{});var zMt=s(wve);LCr=r(zMt,"model_type"),zMt.forEach(t),xCr=r(L6,` property of the config object (either
passed as an argument or loaded from `),Ave=n(L6,"CODE",{});var WMt=s(Ave);$Cr=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),kCr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(L6,"CODE",{});var QMt=s(yve);SCr=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),RCr=r(L6,":"),L6.forEach(t),PCr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);SE=n(ge,"LI",{});var lPe=s(SE);Lve=n(lPe,"STRONG",{});var HMt=s(Lve);BCr=r(HMt,"albert"),HMt.forEach(t),ICr=r(lPe," \u2014 "),TU=n(lPe,"A",{href:!0});var UMt=s(TU);qCr=r(UMt,"TFAlbertForQuestionAnswering"),UMt.forEach(t),NCr=r(lPe," (ALBERT model)"),lPe.forEach(t),jCr=i(ge),RE=n(ge,"LI",{});var iPe=s(RE);xve=n(iPe,"STRONG",{});var JMt=s(xve);DCr=r(JMt,"bert"),JMt.forEach(t),GCr=r(iPe," \u2014 "),MU=n(iPe,"A",{href:!0});var YMt=s(MU);OCr=r(YMt,"TFBertForQuestionAnswering"),YMt.forEach(t),VCr=r(iPe," (BERT model)"),iPe.forEach(t),XCr=i(ge),PE=n(ge,"LI",{});var dPe=s(PE);$ve=n(dPe,"STRONG",{});var KMt=s($ve);zCr=r(KMt,"camembert"),KMt.forEach(t),WCr=r(dPe," \u2014 "),EU=n(dPe,"A",{href:!0});var ZMt=s(EU);QCr=r(ZMt,"TFCamembertForQuestionAnswering"),ZMt.forEach(t),HCr=r(dPe," (CamemBERT model)"),dPe.forEach(t),UCr=i(ge),BE=n(ge,"LI",{});var cPe=s(BE);kve=n(cPe,"STRONG",{});var eEt=s(kve);JCr=r(eEt,"convbert"),eEt.forEach(t),YCr=r(cPe," \u2014 "),CU=n(cPe,"A",{href:!0});var oEt=s(CU);KCr=r(oEt,"TFConvBertForQuestionAnswering"),oEt.forEach(t),ZCr=r(cPe," (ConvBERT model)"),cPe.forEach(t),e3r=i(ge),IE=n(ge,"LI",{});var fPe=s(IE);Sve=n(fPe,"STRONG",{});var rEt=s(Sve);o3r=r(rEt,"deberta"),rEt.forEach(t),r3r=r(fPe," \u2014 "),wU=n(fPe,"A",{href:!0});var tEt=s(wU);t3r=r(tEt,"TFDebertaForQuestionAnswering"),tEt.forEach(t),a3r=r(fPe," (DeBERTa model)"),fPe.forEach(t),n3r=i(ge),qE=n(ge,"LI",{});var mPe=s(qE);Rve=n(mPe,"STRONG",{});var aEt=s(Rve);s3r=r(aEt,"deberta-v2"),aEt.forEach(t),l3r=r(mPe," \u2014 "),AU=n(mPe,"A",{href:!0});var nEt=s(AU);i3r=r(nEt,"TFDebertaV2ForQuestionAnswering"),nEt.forEach(t),d3r=r(mPe," (DeBERTa-v2 model)"),mPe.forEach(t),c3r=i(ge),NE=n(ge,"LI",{});var gPe=s(NE);Pve=n(gPe,"STRONG",{});var sEt=s(Pve);f3r=r(sEt,"distilbert"),sEt.forEach(t),m3r=r(gPe," \u2014 "),yU=n(gPe,"A",{href:!0});var lEt=s(yU);g3r=r(lEt,"TFDistilBertForQuestionAnswering"),lEt.forEach(t),h3r=r(gPe," (DistilBERT model)"),gPe.forEach(t),p3r=i(ge),jE=n(ge,"LI",{});var hPe=s(jE);Bve=n(hPe,"STRONG",{});var iEt=s(Bve);u3r=r(iEt,"electra"),iEt.forEach(t),_3r=r(hPe," \u2014 "),LU=n(hPe,"A",{href:!0});var dEt=s(LU);b3r=r(dEt,"TFElectraForQuestionAnswering"),dEt.forEach(t),v3r=r(hPe," (ELECTRA model)"),hPe.forEach(t),F3r=i(ge),DE=n(ge,"LI",{});var pPe=s(DE);Ive=n(pPe,"STRONG",{});var cEt=s(Ive);T3r=r(cEt,"flaubert"),cEt.forEach(t),M3r=r(pPe," \u2014 "),xU=n(pPe,"A",{href:!0});var fEt=s(xU);E3r=r(fEt,"TFFlaubertForQuestionAnsweringSimple"),fEt.forEach(t),C3r=r(pPe," (FlauBERT model)"),pPe.forEach(t),w3r=i(ge),GE=n(ge,"LI",{});var uPe=s(GE);qve=n(uPe,"STRONG",{});var mEt=s(qve);A3r=r(mEt,"funnel"),mEt.forEach(t),y3r=r(uPe," \u2014 "),$U=n(uPe,"A",{href:!0});var gEt=s($U);L3r=r(gEt,"TFFunnelForQuestionAnswering"),gEt.forEach(t),x3r=r(uPe," (Funnel Transformer model)"),uPe.forEach(t),$3r=i(ge),OE=n(ge,"LI",{});var _Pe=s(OE);Nve=n(_Pe,"STRONG",{});var hEt=s(Nve);k3r=r(hEt,"gptj"),hEt.forEach(t),S3r=r(_Pe," \u2014 "),kU=n(_Pe,"A",{href:!0});var pEt=s(kU);R3r=r(pEt,"TFGPTJForQuestionAnswering"),pEt.forEach(t),P3r=r(_Pe," (GPT-J model)"),_Pe.forEach(t),B3r=i(ge),VE=n(ge,"LI",{});var bPe=s(VE);jve=n(bPe,"STRONG",{});var uEt=s(jve);I3r=r(uEt,"longformer"),uEt.forEach(t),q3r=r(bPe," \u2014 "),SU=n(bPe,"A",{href:!0});var _Et=s(SU);N3r=r(_Et,"TFLongformerForQuestionAnswering"),_Et.forEach(t),j3r=r(bPe," (Longformer model)"),bPe.forEach(t),D3r=i(ge),XE=n(ge,"LI",{});var vPe=s(XE);Dve=n(vPe,"STRONG",{});var bEt=s(Dve);G3r=r(bEt,"mobilebert"),bEt.forEach(t),O3r=r(vPe," \u2014 "),RU=n(vPe,"A",{href:!0});var vEt=s(RU);V3r=r(vEt,"TFMobileBertForQuestionAnswering"),vEt.forEach(t),X3r=r(vPe," (MobileBERT model)"),vPe.forEach(t),z3r=i(ge),zE=n(ge,"LI",{});var FPe=s(zE);Gve=n(FPe,"STRONG",{});var FEt=s(Gve);W3r=r(FEt,"mpnet"),FEt.forEach(t),Q3r=r(FPe," \u2014 "),PU=n(FPe,"A",{href:!0});var TEt=s(PU);H3r=r(TEt,"TFMPNetForQuestionAnswering"),TEt.forEach(t),U3r=r(FPe," (MPNet model)"),FPe.forEach(t),J3r=i(ge),WE=n(ge,"LI",{});var TPe=s(WE);Ove=n(TPe,"STRONG",{});var MEt=s(Ove);Y3r=r(MEt,"rembert"),MEt.forEach(t),K3r=r(TPe," \u2014 "),BU=n(TPe,"A",{href:!0});var EEt=s(BU);Z3r=r(EEt,"TFRemBertForQuestionAnswering"),EEt.forEach(t),ewr=r(TPe," (RemBERT model)"),TPe.forEach(t),owr=i(ge),QE=n(ge,"LI",{});var MPe=s(QE);Vve=n(MPe,"STRONG",{});var CEt=s(Vve);rwr=r(CEt,"roberta"),CEt.forEach(t),twr=r(MPe," \u2014 "),IU=n(MPe,"A",{href:!0});var wEt=s(IU);awr=r(wEt,"TFRobertaForQuestionAnswering"),wEt.forEach(t),nwr=r(MPe," (RoBERTa model)"),MPe.forEach(t),swr=i(ge),HE=n(ge,"LI",{});var EPe=s(HE);Xve=n(EPe,"STRONG",{});var AEt=s(Xve);lwr=r(AEt,"roformer"),AEt.forEach(t),iwr=r(EPe," \u2014 "),qU=n(EPe,"A",{href:!0});var yEt=s(qU);dwr=r(yEt,"TFRoFormerForQuestionAnswering"),yEt.forEach(t),cwr=r(EPe," (RoFormer model)"),EPe.forEach(t),fwr=i(ge),UE=n(ge,"LI",{});var CPe=s(UE);zve=n(CPe,"STRONG",{});var LEt=s(zve);mwr=r(LEt,"xlm"),LEt.forEach(t),gwr=r(CPe," \u2014 "),NU=n(CPe,"A",{href:!0});var xEt=s(NU);hwr=r(xEt,"TFXLMForQuestionAnsweringSimple"),xEt.forEach(t),pwr=r(CPe," (XLM model)"),CPe.forEach(t),uwr=i(ge),JE=n(ge,"LI",{});var wPe=s(JE);Wve=n(wPe,"STRONG",{});var $Et=s(Wve);_wr=r($Et,"xlm-roberta"),$Et.forEach(t),bwr=r(wPe," \u2014 "),jU=n(wPe,"A",{href:!0});var kEt=s(jU);vwr=r(kEt,"TFXLMRobertaForQuestionAnswering"),kEt.forEach(t),Fwr=r(wPe," (XLM-RoBERTa model)"),wPe.forEach(t),Twr=i(ge),YE=n(ge,"LI",{});var APe=s(YE);Qve=n(APe,"STRONG",{});var SEt=s(Qve);Mwr=r(SEt,"xlnet"),SEt.forEach(t),Ewr=r(APe," \u2014 "),DU=n(APe,"A",{href:!0});var REt=s(DU);Cwr=r(REt,"TFXLNetForQuestionAnsweringSimple"),REt.forEach(t),wwr=r(APe," (XLNet model)"),APe.forEach(t),ge.forEach(t),Awr=i(Il),T(KE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),oNe=i(f),Ec=n(f,"H2",{class:!0});var iDe=s(Ec);ZE=n(iDe,"A",{id:!0,class:!0,href:!0});var PEt=s(ZE);Hve=n(PEt,"SPAN",{});var BEt=s(Hve);T(U8.$$.fragment,BEt),BEt.forEach(t),PEt.forEach(t),ywr=i(iDe),Uve=n(iDe,"SPAN",{});var IEt=s(Uve);Lwr=r(IEt,"TFAutoModelForVision2Seq"),IEt.forEach(t),iDe.forEach(t),rNe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(J8.$$.fragment,ql),xwr=i(ql),Cc=n(ql,"P",{});var WZ=s(Cc);$wr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GU=n(WZ,"A",{href:!0});var qEt=s(GU);kwr=r(qEt,"from_pretrained()"),qEt.forEach(t),Swr=r(WZ," class method or the "),OU=n(WZ,"A",{href:!0});var NEt=s(OU);Rwr=r(NEt,"from_config()"),NEt.forEach(t),Pwr=r(WZ,` class
method.`),WZ.forEach(t),Bwr=i(ql),Y8=n(ql,"P",{});var dDe=s(Y8);Iwr=r(dDe,"This class cannot be instantiated directly using "),Jve=n(dDe,"CODE",{});var jEt=s(Jve);qwr=r(jEt,"__init__()"),jEt.forEach(t),Nwr=r(dDe," (throws an error)."),dDe.forEach(t),jwr=i(ql),jt=n(ql,"DIV",{class:!0});var x6=s(jt);T(K8.$$.fragment,x6),Dwr=i(x6),Yve=n(x6,"P",{});var DEt=s(Yve);Gwr=r(DEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DEt.forEach(t),Owr=i(x6),wc=n(x6,"P",{});var QZ=s(wc);Vwr=r(QZ,`Note:
Loading a model from its configuration file does `),Kve=n(QZ,"STRONG",{});var GEt=s(Kve);Xwr=r(GEt,"not"),GEt.forEach(t),zwr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(QZ,"A",{href:!0});var OEt=s(VU);Wwr=r(OEt,"from_pretrained()"),OEt.forEach(t),Qwr=r(QZ," to load the model weights."),QZ.forEach(t),Hwr=i(x6),T(eC.$$.fragment,x6),x6.forEach(t),Uwr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(Z8.$$.fragment,Nl),Jwr=i(Nl),Zve=n(Nl,"P",{});var VEt=s(Zve);Ywr=r(VEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VEt.forEach(t),Kwr=i(Nl),mn=n(Nl,"P",{});var $6=s(mn);Zwr=r($6,"The model class to instantiate is selected based on the "),eFe=n($6,"CODE",{});var XEt=s(eFe);eAr=r(XEt,"model_type"),XEt.forEach(t),oAr=r($6,` property of the config object (either
passed as an argument or loaded from `),oFe=n($6,"CODE",{});var zEt=s(oFe);rAr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),tAr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n($6,"CODE",{});var WEt=s(rFe);aAr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),nAr=r($6,":"),$6.forEach(t),sAr=i(Nl),tFe=n(Nl,"UL",{});var QEt=s(tFe);oC=n(QEt,"LI",{});var yPe=s(oC);aFe=n(yPe,"STRONG",{});var HEt=s(aFe);lAr=r(HEt,"vision-encoder-decoder"),HEt.forEach(t),iAr=r(yPe," \u2014 "),XU=n(yPe,"A",{href:!0});var UEt=s(XU);dAr=r(UEt,"TFVisionEncoderDecoderModel"),UEt.forEach(t),cAr=r(yPe," (Vision Encoder decoder model)"),yPe.forEach(t),QEt.forEach(t),fAr=i(Nl),T(rC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),tNe=i(f),Ac=n(f,"H2",{class:!0});var cDe=s(Ac);tC=n(cDe,"A",{id:!0,class:!0,href:!0});var JEt=s(tC);nFe=n(JEt,"SPAN",{});var YEt=s(nFe);T(ex.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),mAr=i(cDe),sFe=n(cDe,"SPAN",{});var KEt=s(sFe);gAr=r(KEt,"TFAutoModelForSpeechSeq2Seq"),KEt.forEach(t),cDe.forEach(t),aNe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(ox.$$.fragment,jl),hAr=i(jl),yc=n(jl,"P",{});var HZ=s(yc);pAr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=n(HZ,"A",{href:!0});var ZEt=s(zU);uAr=r(ZEt,"from_pretrained()"),ZEt.forEach(t),_Ar=r(HZ," class method or the "),WU=n(HZ,"A",{href:!0});var eCt=s(WU);bAr=r(eCt,"from_config()"),eCt.forEach(t),vAr=r(HZ,` class
method.`),HZ.forEach(t),FAr=i(jl),rx=n(jl,"P",{});var fDe=s(rx);TAr=r(fDe,"This class cannot be instantiated directly using "),lFe=n(fDe,"CODE",{});var oCt=s(lFe);MAr=r(oCt,"__init__()"),oCt.forEach(t),EAr=r(fDe," (throws an error)."),fDe.forEach(t),CAr=i(jl),Dt=n(jl,"DIV",{class:!0});var k6=s(Dt);T(tx.$$.fragment,k6),wAr=i(k6),iFe=n(k6,"P",{});var rCt=s(iFe);AAr=r(rCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rCt.forEach(t),yAr=i(k6),Lc=n(k6,"P",{});var UZ=s(Lc);LAr=r(UZ,`Note:
Loading a model from its configuration file does `),dFe=n(UZ,"STRONG",{});var tCt=s(dFe);xAr=r(tCt,"not"),tCt.forEach(t),$Ar=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(UZ,"A",{href:!0});var aCt=s(QU);kAr=r(aCt,"from_pretrained()"),aCt.forEach(t),SAr=r(UZ," to load the model weights."),UZ.forEach(t),RAr=i(k6),T(aC.$$.fragment,k6),k6.forEach(t),PAr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(ax.$$.fragment,Dl),BAr=i(Dl),cFe=n(Dl,"P",{});var nCt=s(cFe);IAr=r(nCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nCt.forEach(t),qAr=i(Dl),gn=n(Dl,"P",{});var S6=s(gn);NAr=r(S6,"The model class to instantiate is selected based on the "),fFe=n(S6,"CODE",{});var sCt=s(fFe);jAr=r(sCt,"model_type"),sCt.forEach(t),DAr=r(S6,` property of the config object (either
passed as an argument or loaded from `),mFe=n(S6,"CODE",{});var lCt=s(mFe);GAr=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),OAr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(S6,"CODE",{});var iCt=s(gFe);VAr=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),XAr=r(S6,":"),S6.forEach(t),zAr=i(Dl),hFe=n(Dl,"UL",{});var dCt=s(hFe);nC=n(dCt,"LI",{});var LPe=s(nC);pFe=n(LPe,"STRONG",{});var cCt=s(pFe);WAr=r(cCt,"speech_to_text"),cCt.forEach(t),QAr=r(LPe," \u2014 "),HU=n(LPe,"A",{href:!0});var fCt=s(HU);HAr=r(fCt,"TFSpeech2TextForConditionalGeneration"),fCt.forEach(t),UAr=r(LPe," (Speech2Text model)"),LPe.forEach(t),dCt.forEach(t),JAr=i(Dl),T(sC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),nNe=i(f),xc=n(f,"H2",{class:!0});var mDe=s(xc);lC=n(mDe,"A",{id:!0,class:!0,href:!0});var mCt=s(lC);uFe=n(mCt,"SPAN",{});var gCt=s(uFe);T(nx.$$.fragment,gCt),gCt.forEach(t),mCt.forEach(t),YAr=i(mDe),_Fe=n(mDe,"SPAN",{});var hCt=s(_Fe);KAr=r(hCt,"FlaxAutoModel"),hCt.forEach(t),mDe.forEach(t),sNe=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(sx.$$.fragment,Gl),ZAr=i(Gl),$c=n(Gl,"P",{});var JZ=s($c);e6r=r(JZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=n(JZ,"A",{href:!0});var pCt=s(UU);o6r=r(pCt,"from_pretrained()"),pCt.forEach(t),r6r=r(JZ," class method or the "),JU=n(JZ,"A",{href:!0});var uCt=s(JU);t6r=r(uCt,"from_config()"),uCt.forEach(t),a6r=r(JZ,` class
method.`),JZ.forEach(t),n6r=i(Gl),lx=n(Gl,"P",{});var gDe=s(lx);s6r=r(gDe,"This class cannot be instantiated directly using "),bFe=n(gDe,"CODE",{});var _Ct=s(bFe);l6r=r(_Ct,"__init__()"),_Ct.forEach(t),i6r=r(gDe," (throws an error)."),gDe.forEach(t),d6r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var R6=s(Gt);T(ix.$$.fragment,R6),c6r=i(R6),vFe=n(R6,"P",{});var bCt=s(vFe);f6r=r(bCt,"Instantiates one of the base model classes of the library from a configuration."),bCt.forEach(t),m6r=i(R6),kc=n(R6,"P",{});var YZ=s(kc);g6r=r(YZ,`Note:
Loading a model from its configuration file does `),FFe=n(YZ,"STRONG",{});var vCt=s(FFe);h6r=r(vCt,"not"),vCt.forEach(t),p6r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(YZ,"A",{href:!0});var FCt=s(YU);u6r=r(FCt,"from_pretrained()"),FCt.forEach(t),_6r=r(YZ," to load the model weights."),YZ.forEach(t),b6r=i(R6),T(iC.$$.fragment,R6),R6.forEach(t),v6r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(dx.$$.fragment,Ol),F6r=i(Ol),TFe=n(Ol,"P",{});var TCt=s(TFe);T6r=r(TCt,"Instantiate one of the base model classes of the library from a pretrained model."),TCt.forEach(t),M6r=i(Ol),hn=n(Ol,"P",{});var P6=s(hn);E6r=r(P6,"The model class to instantiate is selected based on the "),MFe=n(P6,"CODE",{});var MCt=s(MFe);C6r=r(MCt,"model_type"),MCt.forEach(t),w6r=r(P6,` property of the config object (either
passed as an argument or loaded from `),EFe=n(P6,"CODE",{});var ECt=s(EFe);A6r=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),y6r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(P6,"CODE",{});var CCt=s(CFe);L6r=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),x6r=r(P6,":"),P6.forEach(t),$6r=i(Ol),re=n(Ol,"UL",{});var ne=s(re);dC=n(ne,"LI",{});var xPe=s(dC);wFe=n(xPe,"STRONG",{});var wCt=s(wFe);k6r=r(wCt,"albert"),wCt.forEach(t),S6r=r(xPe," \u2014 "),KU=n(xPe,"A",{href:!0});var ACt=s(KU);R6r=r(ACt,"FlaxAlbertModel"),ACt.forEach(t),P6r=r(xPe," (ALBERT model)"),xPe.forEach(t),B6r=i(ne),cC=n(ne,"LI",{});var $Pe=s(cC);AFe=n($Pe,"STRONG",{});var yCt=s(AFe);I6r=r(yCt,"bart"),yCt.forEach(t),q6r=r($Pe," \u2014 "),ZU=n($Pe,"A",{href:!0});var LCt=s(ZU);N6r=r(LCt,"FlaxBartModel"),LCt.forEach(t),j6r=r($Pe," (BART model)"),$Pe.forEach(t),D6r=i(ne),fC=n(ne,"LI",{});var kPe=s(fC);yFe=n(kPe,"STRONG",{});var xCt=s(yFe);G6r=r(xCt,"beit"),xCt.forEach(t),O6r=r(kPe," \u2014 "),eJ=n(kPe,"A",{href:!0});var $Ct=s(eJ);V6r=r($Ct,"FlaxBeitModel"),$Ct.forEach(t),X6r=r(kPe," (BEiT model)"),kPe.forEach(t),z6r=i(ne),mC=n(ne,"LI",{});var SPe=s(mC);LFe=n(SPe,"STRONG",{});var kCt=s(LFe);W6r=r(kCt,"bert"),kCt.forEach(t),Q6r=r(SPe," \u2014 "),oJ=n(SPe,"A",{href:!0});var SCt=s(oJ);H6r=r(SCt,"FlaxBertModel"),SCt.forEach(t),U6r=r(SPe," (BERT model)"),SPe.forEach(t),J6r=i(ne),gC=n(ne,"LI",{});var RPe=s(gC);xFe=n(RPe,"STRONG",{});var RCt=s(xFe);Y6r=r(RCt,"big_bird"),RCt.forEach(t),K6r=r(RPe," \u2014 "),rJ=n(RPe,"A",{href:!0});var PCt=s(rJ);Z6r=r(PCt,"FlaxBigBirdModel"),PCt.forEach(t),e0r=r(RPe," (BigBird model)"),RPe.forEach(t),o0r=i(ne),hC=n(ne,"LI",{});var PPe=s(hC);$Fe=n(PPe,"STRONG",{});var BCt=s($Fe);r0r=r(BCt,"blenderbot"),BCt.forEach(t),t0r=r(PPe," \u2014 "),tJ=n(PPe,"A",{href:!0});var ICt=s(tJ);a0r=r(ICt,"FlaxBlenderbotModel"),ICt.forEach(t),n0r=r(PPe," (Blenderbot model)"),PPe.forEach(t),s0r=i(ne),pC=n(ne,"LI",{});var BPe=s(pC);kFe=n(BPe,"STRONG",{});var qCt=s(kFe);l0r=r(qCt,"blenderbot-small"),qCt.forEach(t),i0r=r(BPe," \u2014 "),aJ=n(BPe,"A",{href:!0});var NCt=s(aJ);d0r=r(NCt,"FlaxBlenderbotSmallModel"),NCt.forEach(t),c0r=r(BPe," (BlenderbotSmall model)"),BPe.forEach(t),f0r=i(ne),uC=n(ne,"LI",{});var IPe=s(uC);SFe=n(IPe,"STRONG",{});var jCt=s(SFe);m0r=r(jCt,"clip"),jCt.forEach(t),g0r=r(IPe," \u2014 "),nJ=n(IPe,"A",{href:!0});var DCt=s(nJ);h0r=r(DCt,"FlaxCLIPModel"),DCt.forEach(t),p0r=r(IPe," (CLIP model)"),IPe.forEach(t),u0r=i(ne),_C=n(ne,"LI",{});var qPe=s(_C);RFe=n(qPe,"STRONG",{});var GCt=s(RFe);_0r=r(GCt,"distilbert"),GCt.forEach(t),b0r=r(qPe," \u2014 "),sJ=n(qPe,"A",{href:!0});var OCt=s(sJ);v0r=r(OCt,"FlaxDistilBertModel"),OCt.forEach(t),F0r=r(qPe," (DistilBERT model)"),qPe.forEach(t),T0r=i(ne),bC=n(ne,"LI",{});var NPe=s(bC);PFe=n(NPe,"STRONG",{});var VCt=s(PFe);M0r=r(VCt,"electra"),VCt.forEach(t),E0r=r(NPe," \u2014 "),lJ=n(NPe,"A",{href:!0});var XCt=s(lJ);C0r=r(XCt,"FlaxElectraModel"),XCt.forEach(t),w0r=r(NPe," (ELECTRA model)"),NPe.forEach(t),A0r=i(ne),vC=n(ne,"LI",{});var jPe=s(vC);BFe=n(jPe,"STRONG",{});var zCt=s(BFe);y0r=r(zCt,"gpt2"),zCt.forEach(t),L0r=r(jPe," \u2014 "),iJ=n(jPe,"A",{href:!0});var WCt=s(iJ);x0r=r(WCt,"FlaxGPT2Model"),WCt.forEach(t),$0r=r(jPe," (OpenAI GPT-2 model)"),jPe.forEach(t),k0r=i(ne),FC=n(ne,"LI",{});var DPe=s(FC);IFe=n(DPe,"STRONG",{});var QCt=s(IFe);S0r=r(QCt,"gpt_neo"),QCt.forEach(t),R0r=r(DPe," \u2014 "),dJ=n(DPe,"A",{href:!0});var HCt=s(dJ);P0r=r(HCt,"FlaxGPTNeoModel"),HCt.forEach(t),B0r=r(DPe," (GPT Neo model)"),DPe.forEach(t),I0r=i(ne),TC=n(ne,"LI",{});var GPe=s(TC);qFe=n(GPe,"STRONG",{});var UCt=s(qFe);q0r=r(UCt,"gptj"),UCt.forEach(t),N0r=r(GPe," \u2014 "),cJ=n(GPe,"A",{href:!0});var JCt=s(cJ);j0r=r(JCt,"FlaxGPTJModel"),JCt.forEach(t),D0r=r(GPe," (GPT-J model)"),GPe.forEach(t),G0r=i(ne),MC=n(ne,"LI",{});var OPe=s(MC);NFe=n(OPe,"STRONG",{});var YCt=s(NFe);O0r=r(YCt,"marian"),YCt.forEach(t),V0r=r(OPe," \u2014 "),fJ=n(OPe,"A",{href:!0});var KCt=s(fJ);X0r=r(KCt,"FlaxMarianModel"),KCt.forEach(t),z0r=r(OPe," (Marian model)"),OPe.forEach(t),W0r=i(ne),EC=n(ne,"LI",{});var VPe=s(EC);jFe=n(VPe,"STRONG",{});var ZCt=s(jFe);Q0r=r(ZCt,"mbart"),ZCt.forEach(t),H0r=r(VPe," \u2014 "),mJ=n(VPe,"A",{href:!0});var e3t=s(mJ);U0r=r(e3t,"FlaxMBartModel"),e3t.forEach(t),J0r=r(VPe," (mBART model)"),VPe.forEach(t),Y0r=i(ne),CC=n(ne,"LI",{});var XPe=s(CC);DFe=n(XPe,"STRONG",{});var o3t=s(DFe);K0r=r(o3t,"mt5"),o3t.forEach(t),Z0r=r(XPe," \u2014 "),gJ=n(XPe,"A",{href:!0});var r3t=s(gJ);eyr=r(r3t,"FlaxMT5Model"),r3t.forEach(t),oyr=r(XPe," (mT5 model)"),XPe.forEach(t),ryr=i(ne),wC=n(ne,"LI",{});var zPe=s(wC);GFe=n(zPe,"STRONG",{});var t3t=s(GFe);tyr=r(t3t,"pegasus"),t3t.forEach(t),ayr=r(zPe," \u2014 "),hJ=n(zPe,"A",{href:!0});var a3t=s(hJ);nyr=r(a3t,"FlaxPegasusModel"),a3t.forEach(t),syr=r(zPe," (Pegasus model)"),zPe.forEach(t),lyr=i(ne),AC=n(ne,"LI",{});var WPe=s(AC);OFe=n(WPe,"STRONG",{});var n3t=s(OFe);iyr=r(n3t,"roberta"),n3t.forEach(t),dyr=r(WPe," \u2014 "),pJ=n(WPe,"A",{href:!0});var s3t=s(pJ);cyr=r(s3t,"FlaxRobertaModel"),s3t.forEach(t),fyr=r(WPe," (RoBERTa model)"),WPe.forEach(t),myr=i(ne),yC=n(ne,"LI",{});var QPe=s(yC);VFe=n(QPe,"STRONG",{});var l3t=s(VFe);gyr=r(l3t,"roformer"),l3t.forEach(t),hyr=r(QPe," \u2014 "),uJ=n(QPe,"A",{href:!0});var i3t=s(uJ);pyr=r(i3t,"FlaxRoFormerModel"),i3t.forEach(t),uyr=r(QPe," (RoFormer model)"),QPe.forEach(t),_yr=i(ne),LC=n(ne,"LI",{});var HPe=s(LC);XFe=n(HPe,"STRONG",{});var d3t=s(XFe);byr=r(d3t,"t5"),d3t.forEach(t),vyr=r(HPe," \u2014 "),_J=n(HPe,"A",{href:!0});var c3t=s(_J);Fyr=r(c3t,"FlaxT5Model"),c3t.forEach(t),Tyr=r(HPe," (T5 model)"),HPe.forEach(t),Myr=i(ne),xC=n(ne,"LI",{});var UPe=s(xC);zFe=n(UPe,"STRONG",{});var f3t=s(zFe);Eyr=r(f3t,"vision-text-dual-encoder"),f3t.forEach(t),Cyr=r(UPe," \u2014 "),bJ=n(UPe,"A",{href:!0});var m3t=s(bJ);wyr=r(m3t,"FlaxVisionTextDualEncoderModel"),m3t.forEach(t),Ayr=r(UPe," (VisionTextDualEncoder model)"),UPe.forEach(t),yyr=i(ne),$C=n(ne,"LI",{});var JPe=s($C);WFe=n(JPe,"STRONG",{});var g3t=s(WFe);Lyr=r(g3t,"vit"),g3t.forEach(t),xyr=r(JPe," \u2014 "),vJ=n(JPe,"A",{href:!0});var h3t=s(vJ);$yr=r(h3t,"FlaxViTModel"),h3t.forEach(t),kyr=r(JPe," (ViT model)"),JPe.forEach(t),Syr=i(ne),kC=n(ne,"LI",{});var YPe=s(kC);QFe=n(YPe,"STRONG",{});var p3t=s(QFe);Ryr=r(p3t,"wav2vec2"),p3t.forEach(t),Pyr=r(YPe," \u2014 "),FJ=n(YPe,"A",{href:!0});var u3t=s(FJ);Byr=r(u3t,"FlaxWav2Vec2Model"),u3t.forEach(t),Iyr=r(YPe," (Wav2Vec2 model)"),YPe.forEach(t),qyr=i(ne),SC=n(ne,"LI",{});var KPe=s(SC);HFe=n(KPe,"STRONG",{});var _3t=s(HFe);Nyr=r(_3t,"xglm"),_3t.forEach(t),jyr=r(KPe," \u2014 "),TJ=n(KPe,"A",{href:!0});var b3t=s(TJ);Dyr=r(b3t,"FlaxXGLMModel"),b3t.forEach(t),Gyr=r(KPe," (XGLM model)"),KPe.forEach(t),Oyr=i(ne),RC=n(ne,"LI",{});var ZPe=s(RC);UFe=n(ZPe,"STRONG",{});var v3t=s(UFe);Vyr=r(v3t,"xlm-roberta"),v3t.forEach(t),Xyr=r(ZPe," \u2014 "),MJ=n(ZPe,"A",{href:!0});var F3t=s(MJ);zyr=r(F3t,"FlaxXLMRobertaModel"),F3t.forEach(t),Wyr=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),ne.forEach(t),Qyr=i(Ol),T(PC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),lNe=i(f),Sc=n(f,"H2",{class:!0});var hDe=s(Sc);BC=n(hDe,"A",{id:!0,class:!0,href:!0});var T3t=s(BC);JFe=n(T3t,"SPAN",{});var M3t=s(JFe);T(cx.$$.fragment,M3t),M3t.forEach(t),T3t.forEach(t),Hyr=i(hDe),YFe=n(hDe,"SPAN",{});var E3t=s(YFe);Uyr=r(E3t,"FlaxAutoModelForCausalLM"),E3t.forEach(t),hDe.forEach(t),iNe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(fx.$$.fragment,Vl),Jyr=i(Vl),Rc=n(Vl,"P",{});var KZ=s(Rc);Yyr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EJ=n(KZ,"A",{href:!0});var C3t=s(EJ);Kyr=r(C3t,"from_pretrained()"),C3t.forEach(t),Zyr=r(KZ," class method or the "),CJ=n(KZ,"A",{href:!0});var w3t=s(CJ);eLr=r(w3t,"from_config()"),w3t.forEach(t),oLr=r(KZ,` class
method.`),KZ.forEach(t),rLr=i(Vl),mx=n(Vl,"P",{});var pDe=s(mx);tLr=r(pDe,"This class cannot be instantiated directly using "),KFe=n(pDe,"CODE",{});var A3t=s(KFe);aLr=r(A3t,"__init__()"),A3t.forEach(t),nLr=r(pDe," (throws an error)."),pDe.forEach(t),sLr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var B6=s(Ot);T(gx.$$.fragment,B6),lLr=i(B6),ZFe=n(B6,"P",{});var y3t=s(ZFe);iLr=r(y3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y3t.forEach(t),dLr=i(B6),Pc=n(B6,"P",{});var ZZ=s(Pc);cLr=r(ZZ,`Note:
Loading a model from its configuration file does `),eTe=n(ZZ,"STRONG",{});var L3t=s(eTe);fLr=r(L3t,"not"),L3t.forEach(t),mLr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(ZZ,"A",{href:!0});var x3t=s(wJ);gLr=r(x3t,"from_pretrained()"),x3t.forEach(t),hLr=r(ZZ," to load the model weights."),ZZ.forEach(t),pLr=i(B6),T(IC.$$.fragment,B6),B6.forEach(t),uLr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(hx.$$.fragment,Xl),_Lr=i(Xl),oTe=n(Xl,"P",{});var $3t=s(oTe);bLr=r($3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$3t.forEach(t),vLr=i(Xl),pn=n(Xl,"P",{});var I6=s(pn);FLr=r(I6,"The model class to instantiate is selected based on the "),rTe=n(I6,"CODE",{});var k3t=s(rTe);TLr=r(k3t,"model_type"),k3t.forEach(t),MLr=r(I6,` property of the config object (either
passed as an argument or loaded from `),tTe=n(I6,"CODE",{});var S3t=s(tTe);ELr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),CLr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(I6,"CODE",{});var R3t=s(aTe);wLr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),ALr=r(I6,":"),I6.forEach(t),yLr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);qC=n(Xe,"LI",{});var eBe=s(qC);nTe=n(eBe,"STRONG",{});var P3t=s(nTe);LLr=r(P3t,"bart"),P3t.forEach(t),xLr=r(eBe," \u2014 "),AJ=n(eBe,"A",{href:!0});var B3t=s(AJ);$Lr=r(B3t,"FlaxBartForCausalLM"),B3t.forEach(t),kLr=r(eBe," (BART model)"),eBe.forEach(t),SLr=i(Xe),NC=n(Xe,"LI",{});var oBe=s(NC);sTe=n(oBe,"STRONG",{});var I3t=s(sTe);RLr=r(I3t,"bert"),I3t.forEach(t),PLr=r(oBe," \u2014 "),yJ=n(oBe,"A",{href:!0});var q3t=s(yJ);BLr=r(q3t,"FlaxBertForCausalLM"),q3t.forEach(t),ILr=r(oBe," (BERT model)"),oBe.forEach(t),qLr=i(Xe),jC=n(Xe,"LI",{});var rBe=s(jC);lTe=n(rBe,"STRONG",{});var N3t=s(lTe);NLr=r(N3t,"big_bird"),N3t.forEach(t),jLr=r(rBe," \u2014 "),LJ=n(rBe,"A",{href:!0});var j3t=s(LJ);DLr=r(j3t,"FlaxBigBirdForCausalLM"),j3t.forEach(t),GLr=r(rBe," (BigBird model)"),rBe.forEach(t),OLr=i(Xe),DC=n(Xe,"LI",{});var tBe=s(DC);iTe=n(tBe,"STRONG",{});var D3t=s(iTe);VLr=r(D3t,"electra"),D3t.forEach(t),XLr=r(tBe," \u2014 "),xJ=n(tBe,"A",{href:!0});var G3t=s(xJ);zLr=r(G3t,"FlaxElectraForCausalLM"),G3t.forEach(t),WLr=r(tBe," (ELECTRA model)"),tBe.forEach(t),QLr=i(Xe),GC=n(Xe,"LI",{});var aBe=s(GC);dTe=n(aBe,"STRONG",{});var O3t=s(dTe);HLr=r(O3t,"gpt2"),O3t.forEach(t),ULr=r(aBe," \u2014 "),$J=n(aBe,"A",{href:!0});var V3t=s($J);JLr=r(V3t,"FlaxGPT2LMHeadModel"),V3t.forEach(t),YLr=r(aBe," (OpenAI GPT-2 model)"),aBe.forEach(t),KLr=i(Xe),OC=n(Xe,"LI",{});var nBe=s(OC);cTe=n(nBe,"STRONG",{});var X3t=s(cTe);ZLr=r(X3t,"gpt_neo"),X3t.forEach(t),e8r=r(nBe," \u2014 "),kJ=n(nBe,"A",{href:!0});var z3t=s(kJ);o8r=r(z3t,"FlaxGPTNeoForCausalLM"),z3t.forEach(t),r8r=r(nBe," (GPT Neo model)"),nBe.forEach(t),t8r=i(Xe),VC=n(Xe,"LI",{});var sBe=s(VC);fTe=n(sBe,"STRONG",{});var W3t=s(fTe);a8r=r(W3t,"gptj"),W3t.forEach(t),n8r=r(sBe," \u2014 "),SJ=n(sBe,"A",{href:!0});var Q3t=s(SJ);s8r=r(Q3t,"FlaxGPTJForCausalLM"),Q3t.forEach(t),l8r=r(sBe," (GPT-J model)"),sBe.forEach(t),i8r=i(Xe),XC=n(Xe,"LI",{});var lBe=s(XC);mTe=n(lBe,"STRONG",{});var H3t=s(mTe);d8r=r(H3t,"roberta"),H3t.forEach(t),c8r=r(lBe," \u2014 "),RJ=n(lBe,"A",{href:!0});var U3t=s(RJ);f8r=r(U3t,"FlaxRobertaForCausalLM"),U3t.forEach(t),m8r=r(lBe," (RoBERTa model)"),lBe.forEach(t),g8r=i(Xe),zC=n(Xe,"LI",{});var iBe=s(zC);gTe=n(iBe,"STRONG",{});var J3t=s(gTe);h8r=r(J3t,"xglm"),J3t.forEach(t),p8r=r(iBe," \u2014 "),PJ=n(iBe,"A",{href:!0});var Y3t=s(PJ);u8r=r(Y3t,"FlaxXGLMForCausalLM"),Y3t.forEach(t),_8r=r(iBe," (XGLM model)"),iBe.forEach(t),Xe.forEach(t),b8r=i(Xl),T(WC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),dNe=i(f),Bc=n(f,"H2",{class:!0});var uDe=s(Bc);QC=n(uDe,"A",{id:!0,class:!0,href:!0});var K3t=s(QC);hTe=n(K3t,"SPAN",{});var Z3t=s(hTe);T(px.$$.fragment,Z3t),Z3t.forEach(t),K3t.forEach(t),v8r=i(uDe),pTe=n(uDe,"SPAN",{});var ewt=s(pTe);F8r=r(ewt,"FlaxAutoModelForPreTraining"),ewt.forEach(t),uDe.forEach(t),cNe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(ux.$$.fragment,zl),T8r=i(zl),Ic=n(zl,"P",{});var eee=s(Ic);M8r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BJ=n(eee,"A",{href:!0});var owt=s(BJ);E8r=r(owt,"from_pretrained()"),owt.forEach(t),C8r=r(eee," class method or the "),IJ=n(eee,"A",{href:!0});var rwt=s(IJ);w8r=r(rwt,"from_config()"),rwt.forEach(t),A8r=r(eee,` class
method.`),eee.forEach(t),y8r=i(zl),_x=n(zl,"P",{});var _De=s(_x);L8r=r(_De,"This class cannot be instantiated directly using "),uTe=n(_De,"CODE",{});var twt=s(uTe);x8r=r(twt,"__init__()"),twt.forEach(t),$8r=r(_De," (throws an error)."),_De.forEach(t),k8r=i(zl),Vt=n(zl,"DIV",{class:!0});var q6=s(Vt);T(bx.$$.fragment,q6),S8r=i(q6),_Te=n(q6,"P",{});var awt=s(_Te);R8r=r(awt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),awt.forEach(t),P8r=i(q6),qc=n(q6,"P",{});var oee=s(qc);B8r=r(oee,`Note:
Loading a model from its configuration file does `),bTe=n(oee,"STRONG",{});var nwt=s(bTe);I8r=r(nwt,"not"),nwt.forEach(t),q8r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(oee,"A",{href:!0});var swt=s(qJ);N8r=r(swt,"from_pretrained()"),swt.forEach(t),j8r=r(oee," to load the model weights."),oee.forEach(t),D8r=i(q6),T(HC.$$.fragment,q6),q6.forEach(t),G8r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(vx.$$.fragment,Wl),O8r=i(Wl),vTe=n(Wl,"P",{});var lwt=s(vTe);V8r=r(lwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lwt.forEach(t),X8r=i(Wl),un=n(Wl,"P",{});var N6=s(un);z8r=r(N6,"The model class to instantiate is selected based on the "),FTe=n(N6,"CODE",{});var iwt=s(FTe);W8r=r(iwt,"model_type"),iwt.forEach(t),Q8r=r(N6,` property of the config object (either
passed as an argument or loaded from `),TTe=n(N6,"CODE",{});var dwt=s(TTe);H8r=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),U8r=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(N6,"CODE",{});var cwt=s(MTe);J8r=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),Y8r=r(N6,":"),N6.forEach(t),K8r=i(Wl),Me=n(Wl,"UL",{});var we=s(Me);UC=n(we,"LI",{});var dBe=s(UC);ETe=n(dBe,"STRONG",{});var fwt=s(ETe);Z8r=r(fwt,"albert"),fwt.forEach(t),exr=r(dBe," \u2014 "),NJ=n(dBe,"A",{href:!0});var mwt=s(NJ);oxr=r(mwt,"FlaxAlbertForPreTraining"),mwt.forEach(t),rxr=r(dBe," (ALBERT model)"),dBe.forEach(t),txr=i(we),JC=n(we,"LI",{});var cBe=s(JC);CTe=n(cBe,"STRONG",{});var gwt=s(CTe);axr=r(gwt,"bart"),gwt.forEach(t),nxr=r(cBe," \u2014 "),jJ=n(cBe,"A",{href:!0});var hwt=s(jJ);sxr=r(hwt,"FlaxBartForConditionalGeneration"),hwt.forEach(t),lxr=r(cBe," (BART model)"),cBe.forEach(t),ixr=i(we),YC=n(we,"LI",{});var fBe=s(YC);wTe=n(fBe,"STRONG",{});var pwt=s(wTe);dxr=r(pwt,"bert"),pwt.forEach(t),cxr=r(fBe," \u2014 "),DJ=n(fBe,"A",{href:!0});var uwt=s(DJ);fxr=r(uwt,"FlaxBertForPreTraining"),uwt.forEach(t),mxr=r(fBe," (BERT model)"),fBe.forEach(t),gxr=i(we),KC=n(we,"LI",{});var mBe=s(KC);ATe=n(mBe,"STRONG",{});var _wt=s(ATe);hxr=r(_wt,"big_bird"),_wt.forEach(t),pxr=r(mBe," \u2014 "),GJ=n(mBe,"A",{href:!0});var bwt=s(GJ);uxr=r(bwt,"FlaxBigBirdForPreTraining"),bwt.forEach(t),_xr=r(mBe," (BigBird model)"),mBe.forEach(t),bxr=i(we),ZC=n(we,"LI",{});var gBe=s(ZC);yTe=n(gBe,"STRONG",{});var vwt=s(yTe);vxr=r(vwt,"electra"),vwt.forEach(t),Fxr=r(gBe," \u2014 "),OJ=n(gBe,"A",{href:!0});var Fwt=s(OJ);Txr=r(Fwt,"FlaxElectraForPreTraining"),Fwt.forEach(t),Mxr=r(gBe," (ELECTRA model)"),gBe.forEach(t),Exr=i(we),e3=n(we,"LI",{});var hBe=s(e3);LTe=n(hBe,"STRONG",{});var Twt=s(LTe);Cxr=r(Twt,"mbart"),Twt.forEach(t),wxr=r(hBe," \u2014 "),VJ=n(hBe,"A",{href:!0});var Mwt=s(VJ);Axr=r(Mwt,"FlaxMBartForConditionalGeneration"),Mwt.forEach(t),yxr=r(hBe," (mBART model)"),hBe.forEach(t),Lxr=i(we),o3=n(we,"LI",{});var pBe=s(o3);xTe=n(pBe,"STRONG",{});var Ewt=s(xTe);xxr=r(Ewt,"mt5"),Ewt.forEach(t),$xr=r(pBe," \u2014 "),XJ=n(pBe,"A",{href:!0});var Cwt=s(XJ);kxr=r(Cwt,"FlaxMT5ForConditionalGeneration"),Cwt.forEach(t),Sxr=r(pBe," (mT5 model)"),pBe.forEach(t),Rxr=i(we),r3=n(we,"LI",{});var uBe=s(r3);$Te=n(uBe,"STRONG",{});var wwt=s($Te);Pxr=r(wwt,"roberta"),wwt.forEach(t),Bxr=r(uBe," \u2014 "),zJ=n(uBe,"A",{href:!0});var Awt=s(zJ);Ixr=r(Awt,"FlaxRobertaForMaskedLM"),Awt.forEach(t),qxr=r(uBe," (RoBERTa model)"),uBe.forEach(t),Nxr=i(we),t3=n(we,"LI",{});var _Be=s(t3);kTe=n(_Be,"STRONG",{});var ywt=s(kTe);jxr=r(ywt,"roformer"),ywt.forEach(t),Dxr=r(_Be," \u2014 "),WJ=n(_Be,"A",{href:!0});var Lwt=s(WJ);Gxr=r(Lwt,"FlaxRoFormerForMaskedLM"),Lwt.forEach(t),Oxr=r(_Be," (RoFormer model)"),_Be.forEach(t),Vxr=i(we),a3=n(we,"LI",{});var bBe=s(a3);STe=n(bBe,"STRONG",{});var xwt=s(STe);Xxr=r(xwt,"t5"),xwt.forEach(t),zxr=r(bBe," \u2014 "),QJ=n(bBe,"A",{href:!0});var $wt=s(QJ);Wxr=r($wt,"FlaxT5ForConditionalGeneration"),$wt.forEach(t),Qxr=r(bBe," (T5 model)"),bBe.forEach(t),Hxr=i(we),n3=n(we,"LI",{});var vBe=s(n3);RTe=n(vBe,"STRONG",{});var kwt=s(RTe);Uxr=r(kwt,"wav2vec2"),kwt.forEach(t),Jxr=r(vBe," \u2014 "),HJ=n(vBe,"A",{href:!0});var Swt=s(HJ);Yxr=r(Swt,"FlaxWav2Vec2ForPreTraining"),Swt.forEach(t),Kxr=r(vBe," (Wav2Vec2 model)"),vBe.forEach(t),Zxr=i(we),s3=n(we,"LI",{});var FBe=s(s3);PTe=n(FBe,"STRONG",{});var Rwt=s(PTe);e9r=r(Rwt,"xlm-roberta"),Rwt.forEach(t),o9r=r(FBe," \u2014 "),UJ=n(FBe,"A",{href:!0});var Pwt=s(UJ);r9r=r(Pwt,"FlaxXLMRobertaForMaskedLM"),Pwt.forEach(t),t9r=r(FBe," (XLM-RoBERTa model)"),FBe.forEach(t),we.forEach(t),a9r=i(Wl),T(l3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),fNe=i(f),Nc=n(f,"H2",{class:!0});var bDe=s(Nc);i3=n(bDe,"A",{id:!0,class:!0,href:!0});var Bwt=s(i3);BTe=n(Bwt,"SPAN",{});var Iwt=s(BTe);T(Fx.$$.fragment,Iwt),Iwt.forEach(t),Bwt.forEach(t),n9r=i(bDe),ITe=n(bDe,"SPAN",{});var qwt=s(ITe);s9r=r(qwt,"FlaxAutoModelForMaskedLM"),qwt.forEach(t),bDe.forEach(t),mNe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(Tx.$$.fragment,Ql),l9r=i(Ql),jc=n(Ql,"P",{});var ree=s(jc);i9r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=n(ree,"A",{href:!0});var Nwt=s(JJ);d9r=r(Nwt,"from_pretrained()"),Nwt.forEach(t),c9r=r(ree," class method or the "),YJ=n(ree,"A",{href:!0});var jwt=s(YJ);f9r=r(jwt,"from_config()"),jwt.forEach(t),m9r=r(ree,` class
method.`),ree.forEach(t),g9r=i(Ql),Mx=n(Ql,"P",{});var vDe=s(Mx);h9r=r(vDe,"This class cannot be instantiated directly using "),qTe=n(vDe,"CODE",{});var Dwt=s(qTe);p9r=r(Dwt,"__init__()"),Dwt.forEach(t),u9r=r(vDe," (throws an error)."),vDe.forEach(t),_9r=i(Ql),Xt=n(Ql,"DIV",{class:!0});var j6=s(Xt);T(Ex.$$.fragment,j6),b9r=i(j6),NTe=n(j6,"P",{});var Gwt=s(NTe);v9r=r(Gwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gwt.forEach(t),F9r=i(j6),Dc=n(j6,"P",{});var tee=s(Dc);T9r=r(tee,`Note:
Loading a model from its configuration file does `),jTe=n(tee,"STRONG",{});var Owt=s(jTe);M9r=r(Owt,"not"),Owt.forEach(t),E9r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(tee,"A",{href:!0});var Vwt=s(KJ);C9r=r(Vwt,"from_pretrained()"),Vwt.forEach(t),w9r=r(tee," to load the model weights."),tee.forEach(t),A9r=i(j6),T(d3.$$.fragment,j6),j6.forEach(t),y9r=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(Cx.$$.fragment,Hl),L9r=i(Hl),DTe=n(Hl,"P",{});var Xwt=s(DTe);x9r=r(Xwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xwt.forEach(t),$9r=i(Hl),_n=n(Hl,"P",{});var D6=s(_n);k9r=r(D6,"The model class to instantiate is selected based on the "),GTe=n(D6,"CODE",{});var zwt=s(GTe);S9r=r(zwt,"model_type"),zwt.forEach(t),R9r=r(D6,` property of the config object (either
passed as an argument or loaded from `),OTe=n(D6,"CODE",{});var Wwt=s(OTe);P9r=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),B9r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(D6,"CODE",{});var Qwt=s(VTe);I9r=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),q9r=r(D6,":"),D6.forEach(t),N9r=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);c3=n(Ie,"LI",{});var TBe=s(c3);XTe=n(TBe,"STRONG",{});var Hwt=s(XTe);j9r=r(Hwt,"albert"),Hwt.forEach(t),D9r=r(TBe," \u2014 "),ZJ=n(TBe,"A",{href:!0});var Uwt=s(ZJ);G9r=r(Uwt,"FlaxAlbertForMaskedLM"),Uwt.forEach(t),O9r=r(TBe," (ALBERT model)"),TBe.forEach(t),V9r=i(Ie),f3=n(Ie,"LI",{});var MBe=s(f3);zTe=n(MBe,"STRONG",{});var Jwt=s(zTe);X9r=r(Jwt,"bart"),Jwt.forEach(t),z9r=r(MBe," \u2014 "),eY=n(MBe,"A",{href:!0});var Ywt=s(eY);W9r=r(Ywt,"FlaxBartForConditionalGeneration"),Ywt.forEach(t),Q9r=r(MBe," (BART model)"),MBe.forEach(t),H9r=i(Ie),m3=n(Ie,"LI",{});var EBe=s(m3);WTe=n(EBe,"STRONG",{});var Kwt=s(WTe);U9r=r(Kwt,"bert"),Kwt.forEach(t),J9r=r(EBe," \u2014 "),oY=n(EBe,"A",{href:!0});var Zwt=s(oY);Y9r=r(Zwt,"FlaxBertForMaskedLM"),Zwt.forEach(t),K9r=r(EBe," (BERT model)"),EBe.forEach(t),Z9r=i(Ie),g3=n(Ie,"LI",{});var CBe=s(g3);QTe=n(CBe,"STRONG",{});var eAt=s(QTe);e$r=r(eAt,"big_bird"),eAt.forEach(t),o$r=r(CBe," \u2014 "),rY=n(CBe,"A",{href:!0});var oAt=s(rY);r$r=r(oAt,"FlaxBigBirdForMaskedLM"),oAt.forEach(t),t$r=r(CBe," (BigBird model)"),CBe.forEach(t),a$r=i(Ie),h3=n(Ie,"LI",{});var wBe=s(h3);HTe=n(wBe,"STRONG",{});var rAt=s(HTe);n$r=r(rAt,"distilbert"),rAt.forEach(t),s$r=r(wBe," \u2014 "),tY=n(wBe,"A",{href:!0});var tAt=s(tY);l$r=r(tAt,"FlaxDistilBertForMaskedLM"),tAt.forEach(t),i$r=r(wBe," (DistilBERT model)"),wBe.forEach(t),d$r=i(Ie),p3=n(Ie,"LI",{});var ABe=s(p3);UTe=n(ABe,"STRONG",{});var aAt=s(UTe);c$r=r(aAt,"electra"),aAt.forEach(t),f$r=r(ABe," \u2014 "),aY=n(ABe,"A",{href:!0});var nAt=s(aY);m$r=r(nAt,"FlaxElectraForMaskedLM"),nAt.forEach(t),g$r=r(ABe," (ELECTRA model)"),ABe.forEach(t),h$r=i(Ie),u3=n(Ie,"LI",{});var yBe=s(u3);JTe=n(yBe,"STRONG",{});var sAt=s(JTe);p$r=r(sAt,"mbart"),sAt.forEach(t),u$r=r(yBe," \u2014 "),nY=n(yBe,"A",{href:!0});var lAt=s(nY);_$r=r(lAt,"FlaxMBartForConditionalGeneration"),lAt.forEach(t),b$r=r(yBe," (mBART model)"),yBe.forEach(t),v$r=i(Ie),_3=n(Ie,"LI",{});var LBe=s(_3);YTe=n(LBe,"STRONG",{});var iAt=s(YTe);F$r=r(iAt,"roberta"),iAt.forEach(t),T$r=r(LBe," \u2014 "),sY=n(LBe,"A",{href:!0});var dAt=s(sY);M$r=r(dAt,"FlaxRobertaForMaskedLM"),dAt.forEach(t),E$r=r(LBe," (RoBERTa model)"),LBe.forEach(t),C$r=i(Ie),b3=n(Ie,"LI",{});var xBe=s(b3);KTe=n(xBe,"STRONG",{});var cAt=s(KTe);w$r=r(cAt,"roformer"),cAt.forEach(t),A$r=r(xBe," \u2014 "),lY=n(xBe,"A",{href:!0});var fAt=s(lY);y$r=r(fAt,"FlaxRoFormerForMaskedLM"),fAt.forEach(t),L$r=r(xBe," (RoFormer model)"),xBe.forEach(t),x$r=i(Ie),v3=n(Ie,"LI",{});var $Be=s(v3);ZTe=n($Be,"STRONG",{});var mAt=s(ZTe);$$r=r(mAt,"xlm-roberta"),mAt.forEach(t),k$r=r($Be," \u2014 "),iY=n($Be,"A",{href:!0});var gAt=s(iY);S$r=r(gAt,"FlaxXLMRobertaForMaskedLM"),gAt.forEach(t),R$r=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),Ie.forEach(t),P$r=i(Hl),T(F3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),gNe=i(f),Gc=n(f,"H2",{class:!0});var FDe=s(Gc);T3=n(FDe,"A",{id:!0,class:!0,href:!0});var hAt=s(T3);e7e=n(hAt,"SPAN",{});var pAt=s(e7e);T(wx.$$.fragment,pAt),pAt.forEach(t),hAt.forEach(t),B$r=i(FDe),o7e=n(FDe,"SPAN",{});var uAt=s(o7e);I$r=r(uAt,"FlaxAutoModelForSeq2SeqLM"),uAt.forEach(t),FDe.forEach(t),hNe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(Ax.$$.fragment,Ul),q$r=i(Ul),Oc=n(Ul,"P",{});var aee=s(Oc);N$r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=n(aee,"A",{href:!0});var _At=s(dY);j$r=r(_At,"from_pretrained()"),_At.forEach(t),D$r=r(aee," class method or the "),cY=n(aee,"A",{href:!0});var bAt=s(cY);G$r=r(bAt,"from_config()"),bAt.forEach(t),O$r=r(aee,` class
method.`),aee.forEach(t),V$r=i(Ul),yx=n(Ul,"P",{});var TDe=s(yx);X$r=r(TDe,"This class cannot be instantiated directly using "),r7e=n(TDe,"CODE",{});var vAt=s(r7e);z$r=r(vAt,"__init__()"),vAt.forEach(t),W$r=r(TDe," (throws an error)."),TDe.forEach(t),Q$r=i(Ul),zt=n(Ul,"DIV",{class:!0});var G6=s(zt);T(Lx.$$.fragment,G6),H$r=i(G6),t7e=n(G6,"P",{});var FAt=s(t7e);U$r=r(FAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FAt.forEach(t),J$r=i(G6),Vc=n(G6,"P",{});var nee=s(Vc);Y$r=r(nee,`Note:
Loading a model from its configuration file does `),a7e=n(nee,"STRONG",{});var TAt=s(a7e);K$r=r(TAt,"not"),TAt.forEach(t),Z$r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(nee,"A",{href:!0});var MAt=s(fY);ekr=r(MAt,"from_pretrained()"),MAt.forEach(t),okr=r(nee," to load the model weights."),nee.forEach(t),rkr=i(G6),T(M3.$$.fragment,G6),G6.forEach(t),tkr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(xx.$$.fragment,Jl),akr=i(Jl),n7e=n(Jl,"P",{});var EAt=s(n7e);nkr=r(EAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EAt.forEach(t),skr=i(Jl),bn=n(Jl,"P",{});var O6=s(bn);lkr=r(O6,"The model class to instantiate is selected based on the "),s7e=n(O6,"CODE",{});var CAt=s(s7e);ikr=r(CAt,"model_type"),CAt.forEach(t),dkr=r(O6,` property of the config object (either
passed as an argument or loaded from `),l7e=n(O6,"CODE",{});var wAt=s(l7e);ckr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),fkr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=n(O6,"CODE",{});var AAt=s(i7e);mkr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),gkr=r(O6,":"),O6.forEach(t),hkr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);E3=n(ze,"LI",{});var kBe=s(E3);d7e=n(kBe,"STRONG",{});var yAt=s(d7e);pkr=r(yAt,"bart"),yAt.forEach(t),ukr=r(kBe," \u2014 "),mY=n(kBe,"A",{href:!0});var LAt=s(mY);_kr=r(LAt,"FlaxBartForConditionalGeneration"),LAt.forEach(t),bkr=r(kBe," (BART model)"),kBe.forEach(t),vkr=i(ze),C3=n(ze,"LI",{});var SBe=s(C3);c7e=n(SBe,"STRONG",{});var xAt=s(c7e);Fkr=r(xAt,"blenderbot"),xAt.forEach(t),Tkr=r(SBe," \u2014 "),gY=n(SBe,"A",{href:!0});var $At=s(gY);Mkr=r($At,"FlaxBlenderbotForConditionalGeneration"),$At.forEach(t),Ekr=r(SBe," (Blenderbot model)"),SBe.forEach(t),Ckr=i(ze),w3=n(ze,"LI",{});var RBe=s(w3);f7e=n(RBe,"STRONG",{});var kAt=s(f7e);wkr=r(kAt,"blenderbot-small"),kAt.forEach(t),Akr=r(RBe," \u2014 "),hY=n(RBe,"A",{href:!0});var SAt=s(hY);ykr=r(SAt,"FlaxBlenderbotSmallForConditionalGeneration"),SAt.forEach(t),Lkr=r(RBe," (BlenderbotSmall model)"),RBe.forEach(t),xkr=i(ze),A3=n(ze,"LI",{});var PBe=s(A3);m7e=n(PBe,"STRONG",{});var RAt=s(m7e);$kr=r(RAt,"encoder-decoder"),RAt.forEach(t),kkr=r(PBe," \u2014 "),pY=n(PBe,"A",{href:!0});var PAt=s(pY);Skr=r(PAt,"FlaxEncoderDecoderModel"),PAt.forEach(t),Rkr=r(PBe," (Encoder decoder model)"),PBe.forEach(t),Pkr=i(ze),y3=n(ze,"LI",{});var BBe=s(y3);g7e=n(BBe,"STRONG",{});var BAt=s(g7e);Bkr=r(BAt,"marian"),BAt.forEach(t),Ikr=r(BBe," \u2014 "),uY=n(BBe,"A",{href:!0});var IAt=s(uY);qkr=r(IAt,"FlaxMarianMTModel"),IAt.forEach(t),Nkr=r(BBe," (Marian model)"),BBe.forEach(t),jkr=i(ze),L3=n(ze,"LI",{});var IBe=s(L3);h7e=n(IBe,"STRONG",{});var qAt=s(h7e);Dkr=r(qAt,"mbart"),qAt.forEach(t),Gkr=r(IBe," \u2014 "),_Y=n(IBe,"A",{href:!0});var NAt=s(_Y);Okr=r(NAt,"FlaxMBartForConditionalGeneration"),NAt.forEach(t),Vkr=r(IBe," (mBART model)"),IBe.forEach(t),Xkr=i(ze),x3=n(ze,"LI",{});var qBe=s(x3);p7e=n(qBe,"STRONG",{});var jAt=s(p7e);zkr=r(jAt,"mt5"),jAt.forEach(t),Wkr=r(qBe," \u2014 "),bY=n(qBe,"A",{href:!0});var DAt=s(bY);Qkr=r(DAt,"FlaxMT5ForConditionalGeneration"),DAt.forEach(t),Hkr=r(qBe," (mT5 model)"),qBe.forEach(t),Ukr=i(ze),$3=n(ze,"LI",{});var NBe=s($3);u7e=n(NBe,"STRONG",{});var GAt=s(u7e);Jkr=r(GAt,"pegasus"),GAt.forEach(t),Ykr=r(NBe," \u2014 "),vY=n(NBe,"A",{href:!0});var OAt=s(vY);Kkr=r(OAt,"FlaxPegasusForConditionalGeneration"),OAt.forEach(t),Zkr=r(NBe," (Pegasus model)"),NBe.forEach(t),eSr=i(ze),k3=n(ze,"LI",{});var jBe=s(k3);_7e=n(jBe,"STRONG",{});var VAt=s(_7e);oSr=r(VAt,"t5"),VAt.forEach(t),rSr=r(jBe," \u2014 "),FY=n(jBe,"A",{href:!0});var XAt=s(FY);tSr=r(XAt,"FlaxT5ForConditionalGeneration"),XAt.forEach(t),aSr=r(jBe," (T5 model)"),jBe.forEach(t),ze.forEach(t),nSr=i(Jl),T(S3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),pNe=i(f),Xc=n(f,"H2",{class:!0});var MDe=s(Xc);R3=n(MDe,"A",{id:!0,class:!0,href:!0});var zAt=s(R3);b7e=n(zAt,"SPAN",{});var WAt=s(b7e);T($x.$$.fragment,WAt),WAt.forEach(t),zAt.forEach(t),sSr=i(MDe),v7e=n(MDe,"SPAN",{});var QAt=s(v7e);lSr=r(QAt,"FlaxAutoModelForSequenceClassification"),QAt.forEach(t),MDe.forEach(t),uNe=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(kx.$$.fragment,Yl),iSr=i(Yl),zc=n(Yl,"P",{});var see=s(zc);dSr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TY=n(see,"A",{href:!0});var HAt=s(TY);cSr=r(HAt,"from_pretrained()"),HAt.forEach(t),fSr=r(see," class method or the "),MY=n(see,"A",{href:!0});var UAt=s(MY);mSr=r(UAt,"from_config()"),UAt.forEach(t),gSr=r(see,` class
method.`),see.forEach(t),hSr=i(Yl),Sx=n(Yl,"P",{});var EDe=s(Sx);pSr=r(EDe,"This class cannot be instantiated directly using "),F7e=n(EDe,"CODE",{});var JAt=s(F7e);uSr=r(JAt,"__init__()"),JAt.forEach(t),_Sr=r(EDe," (throws an error)."),EDe.forEach(t),bSr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var V6=s(Wt);T(Rx.$$.fragment,V6),vSr=i(V6),T7e=n(V6,"P",{});var YAt=s(T7e);FSr=r(YAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YAt.forEach(t),TSr=i(V6),Wc=n(V6,"P",{});var lee=s(Wc);MSr=r(lee,`Note:
Loading a model from its configuration file does `),M7e=n(lee,"STRONG",{});var KAt=s(M7e);ESr=r(KAt,"not"),KAt.forEach(t),CSr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(lee,"A",{href:!0});var ZAt=s(EY);wSr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),ASr=r(lee," to load the model weights."),lee.forEach(t),ySr=i(V6),T(P3.$$.fragment,V6),V6.forEach(t),LSr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(Px.$$.fragment,Kl),xSr=i(Kl),E7e=n(Kl,"P",{});var e6t=s(E7e);$Sr=r(e6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e6t.forEach(t),kSr=i(Kl),vn=n(Kl,"P",{});var X6=s(vn);SSr=r(X6,"The model class to instantiate is selected based on the "),C7e=n(X6,"CODE",{});var o6t=s(C7e);RSr=r(o6t,"model_type"),o6t.forEach(t),PSr=r(X6,` property of the config object (either
passed as an argument or loaded from `),w7e=n(X6,"CODE",{});var r6t=s(w7e);BSr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),ISr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(X6,"CODE",{});var t6t=s(A7e);qSr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),NSr=r(X6,":"),X6.forEach(t),jSr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);B3=n(qe,"LI",{});var DBe=s(B3);y7e=n(DBe,"STRONG",{});var a6t=s(y7e);DSr=r(a6t,"albert"),a6t.forEach(t),GSr=r(DBe," \u2014 "),CY=n(DBe,"A",{href:!0});var n6t=s(CY);OSr=r(n6t,"FlaxAlbertForSequenceClassification"),n6t.forEach(t),VSr=r(DBe," (ALBERT model)"),DBe.forEach(t),XSr=i(qe),I3=n(qe,"LI",{});var GBe=s(I3);L7e=n(GBe,"STRONG",{});var s6t=s(L7e);zSr=r(s6t,"bart"),s6t.forEach(t),WSr=r(GBe," \u2014 "),wY=n(GBe,"A",{href:!0});var l6t=s(wY);QSr=r(l6t,"FlaxBartForSequenceClassification"),l6t.forEach(t),HSr=r(GBe," (BART model)"),GBe.forEach(t),USr=i(qe),q3=n(qe,"LI",{});var OBe=s(q3);x7e=n(OBe,"STRONG",{});var i6t=s(x7e);JSr=r(i6t,"bert"),i6t.forEach(t),YSr=r(OBe," \u2014 "),AY=n(OBe,"A",{href:!0});var d6t=s(AY);KSr=r(d6t,"FlaxBertForSequenceClassification"),d6t.forEach(t),ZSr=r(OBe," (BERT model)"),OBe.forEach(t),eRr=i(qe),N3=n(qe,"LI",{});var VBe=s(N3);$7e=n(VBe,"STRONG",{});var c6t=s($7e);oRr=r(c6t,"big_bird"),c6t.forEach(t),rRr=r(VBe," \u2014 "),yY=n(VBe,"A",{href:!0});var f6t=s(yY);tRr=r(f6t,"FlaxBigBirdForSequenceClassification"),f6t.forEach(t),aRr=r(VBe," (BigBird model)"),VBe.forEach(t),nRr=i(qe),j3=n(qe,"LI",{});var XBe=s(j3);k7e=n(XBe,"STRONG",{});var m6t=s(k7e);sRr=r(m6t,"distilbert"),m6t.forEach(t),lRr=r(XBe," \u2014 "),LY=n(XBe,"A",{href:!0});var g6t=s(LY);iRr=r(g6t,"FlaxDistilBertForSequenceClassification"),g6t.forEach(t),dRr=r(XBe," (DistilBERT model)"),XBe.forEach(t),cRr=i(qe),D3=n(qe,"LI",{});var zBe=s(D3);S7e=n(zBe,"STRONG",{});var h6t=s(S7e);fRr=r(h6t,"electra"),h6t.forEach(t),mRr=r(zBe," \u2014 "),xY=n(zBe,"A",{href:!0});var p6t=s(xY);gRr=r(p6t,"FlaxElectraForSequenceClassification"),p6t.forEach(t),hRr=r(zBe," (ELECTRA model)"),zBe.forEach(t),pRr=i(qe),G3=n(qe,"LI",{});var WBe=s(G3);R7e=n(WBe,"STRONG",{});var u6t=s(R7e);uRr=r(u6t,"mbart"),u6t.forEach(t),_Rr=r(WBe," \u2014 "),$Y=n(WBe,"A",{href:!0});var _6t=s($Y);bRr=r(_6t,"FlaxMBartForSequenceClassification"),_6t.forEach(t),vRr=r(WBe," (mBART model)"),WBe.forEach(t),FRr=i(qe),O3=n(qe,"LI",{});var QBe=s(O3);P7e=n(QBe,"STRONG",{});var b6t=s(P7e);TRr=r(b6t,"roberta"),b6t.forEach(t),MRr=r(QBe," \u2014 "),kY=n(QBe,"A",{href:!0});var v6t=s(kY);ERr=r(v6t,"FlaxRobertaForSequenceClassification"),v6t.forEach(t),CRr=r(QBe," (RoBERTa model)"),QBe.forEach(t),wRr=i(qe),V3=n(qe,"LI",{});var HBe=s(V3);B7e=n(HBe,"STRONG",{});var F6t=s(B7e);ARr=r(F6t,"roformer"),F6t.forEach(t),yRr=r(HBe," \u2014 "),SY=n(HBe,"A",{href:!0});var T6t=s(SY);LRr=r(T6t,"FlaxRoFormerForSequenceClassification"),T6t.forEach(t),xRr=r(HBe," (RoFormer model)"),HBe.forEach(t),$Rr=i(qe),X3=n(qe,"LI",{});var UBe=s(X3);I7e=n(UBe,"STRONG",{});var M6t=s(I7e);kRr=r(M6t,"xlm-roberta"),M6t.forEach(t),SRr=r(UBe," \u2014 "),RY=n(UBe,"A",{href:!0});var E6t=s(RY);RRr=r(E6t,"FlaxXLMRobertaForSequenceClassification"),E6t.forEach(t),PRr=r(UBe," (XLM-RoBERTa model)"),UBe.forEach(t),qe.forEach(t),BRr=i(Kl),T(z3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),_Ne=i(f),Qc=n(f,"H2",{class:!0});var CDe=s(Qc);W3=n(CDe,"A",{id:!0,class:!0,href:!0});var C6t=s(W3);q7e=n(C6t,"SPAN",{});var w6t=s(q7e);T(Bx.$$.fragment,w6t),w6t.forEach(t),C6t.forEach(t),IRr=i(CDe),N7e=n(CDe,"SPAN",{});var A6t=s(N7e);qRr=r(A6t,"FlaxAutoModelForQuestionAnswering"),A6t.forEach(t),CDe.forEach(t),bNe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(Ix.$$.fragment,Zl),NRr=i(Zl),Hc=n(Zl,"P",{});var iee=s(Hc);jRr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PY=n(iee,"A",{href:!0});var y6t=s(PY);DRr=r(y6t,"from_pretrained()"),y6t.forEach(t),GRr=r(iee," class method or the "),BY=n(iee,"A",{href:!0});var L6t=s(BY);ORr=r(L6t,"from_config()"),L6t.forEach(t),VRr=r(iee,` class
method.`),iee.forEach(t),XRr=i(Zl),qx=n(Zl,"P",{});var wDe=s(qx);zRr=r(wDe,"This class cannot be instantiated directly using "),j7e=n(wDe,"CODE",{});var x6t=s(j7e);WRr=r(x6t,"__init__()"),x6t.forEach(t),QRr=r(wDe," (throws an error)."),wDe.forEach(t),HRr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var z6=s(Qt);T(Nx.$$.fragment,z6),URr=i(z6),D7e=n(z6,"P",{});var $6t=s(D7e);JRr=r($6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$6t.forEach(t),YRr=i(z6),Uc=n(z6,"P",{});var dee=s(Uc);KRr=r(dee,`Note:
Loading a model from its configuration file does `),G7e=n(dee,"STRONG",{});var k6t=s(G7e);ZRr=r(k6t,"not"),k6t.forEach(t),ePr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(dee,"A",{href:!0});var S6t=s(IY);oPr=r(S6t,"from_pretrained()"),S6t.forEach(t),rPr=r(dee," to load the model weights."),dee.forEach(t),tPr=i(z6),T(Q3.$$.fragment,z6),z6.forEach(t),aPr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(jx.$$.fragment,ei),nPr=i(ei),O7e=n(ei,"P",{});var R6t=s(O7e);sPr=r(R6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R6t.forEach(t),lPr=i(ei),Fn=n(ei,"P",{});var W6=s(Fn);iPr=r(W6,"The model class to instantiate is selected based on the "),V7e=n(W6,"CODE",{});var P6t=s(V7e);dPr=r(P6t,"model_type"),P6t.forEach(t),cPr=r(W6,` property of the config object (either
passed as an argument or loaded from `),X7e=n(W6,"CODE",{});var B6t=s(X7e);fPr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),mPr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(W6,"CODE",{});var I6t=s(z7e);gPr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),hPr=r(W6,":"),W6.forEach(t),pPr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);H3=n(Ne,"LI",{});var JBe=s(H3);W7e=n(JBe,"STRONG",{});var q6t=s(W7e);uPr=r(q6t,"albert"),q6t.forEach(t),_Pr=r(JBe," \u2014 "),qY=n(JBe,"A",{href:!0});var N6t=s(qY);bPr=r(N6t,"FlaxAlbertForQuestionAnswering"),N6t.forEach(t),vPr=r(JBe," (ALBERT model)"),JBe.forEach(t),FPr=i(Ne),U3=n(Ne,"LI",{});var YBe=s(U3);Q7e=n(YBe,"STRONG",{});var j6t=s(Q7e);TPr=r(j6t,"bart"),j6t.forEach(t),MPr=r(YBe," \u2014 "),NY=n(YBe,"A",{href:!0});var D6t=s(NY);EPr=r(D6t,"FlaxBartForQuestionAnswering"),D6t.forEach(t),CPr=r(YBe," (BART model)"),YBe.forEach(t),wPr=i(Ne),J3=n(Ne,"LI",{});var KBe=s(J3);H7e=n(KBe,"STRONG",{});var G6t=s(H7e);APr=r(G6t,"bert"),G6t.forEach(t),yPr=r(KBe," \u2014 "),jY=n(KBe,"A",{href:!0});var O6t=s(jY);LPr=r(O6t,"FlaxBertForQuestionAnswering"),O6t.forEach(t),xPr=r(KBe," (BERT model)"),KBe.forEach(t),$Pr=i(Ne),Y3=n(Ne,"LI",{});var ZBe=s(Y3);U7e=n(ZBe,"STRONG",{});var V6t=s(U7e);kPr=r(V6t,"big_bird"),V6t.forEach(t),SPr=r(ZBe," \u2014 "),DY=n(ZBe,"A",{href:!0});var X6t=s(DY);RPr=r(X6t,"FlaxBigBirdForQuestionAnswering"),X6t.forEach(t),PPr=r(ZBe," (BigBird model)"),ZBe.forEach(t),BPr=i(Ne),K3=n(Ne,"LI",{});var eIe=s(K3);J7e=n(eIe,"STRONG",{});var z6t=s(J7e);IPr=r(z6t,"distilbert"),z6t.forEach(t),qPr=r(eIe," \u2014 "),GY=n(eIe,"A",{href:!0});var W6t=s(GY);NPr=r(W6t,"FlaxDistilBertForQuestionAnswering"),W6t.forEach(t),jPr=r(eIe," (DistilBERT model)"),eIe.forEach(t),DPr=i(Ne),Z3=n(Ne,"LI",{});var oIe=s(Z3);Y7e=n(oIe,"STRONG",{});var Q6t=s(Y7e);GPr=r(Q6t,"electra"),Q6t.forEach(t),OPr=r(oIe," \u2014 "),OY=n(oIe,"A",{href:!0});var H6t=s(OY);VPr=r(H6t,"FlaxElectraForQuestionAnswering"),H6t.forEach(t),XPr=r(oIe," (ELECTRA model)"),oIe.forEach(t),zPr=i(Ne),ew=n(Ne,"LI",{});var rIe=s(ew);K7e=n(rIe,"STRONG",{});var U6t=s(K7e);WPr=r(U6t,"mbart"),U6t.forEach(t),QPr=r(rIe," \u2014 "),VY=n(rIe,"A",{href:!0});var J6t=s(VY);HPr=r(J6t,"FlaxMBartForQuestionAnswering"),J6t.forEach(t),UPr=r(rIe," (mBART model)"),rIe.forEach(t),JPr=i(Ne),ow=n(Ne,"LI",{});var tIe=s(ow);Z7e=n(tIe,"STRONG",{});var Y6t=s(Z7e);YPr=r(Y6t,"roberta"),Y6t.forEach(t),KPr=r(tIe," \u2014 "),XY=n(tIe,"A",{href:!0});var K6t=s(XY);ZPr=r(K6t,"FlaxRobertaForQuestionAnswering"),K6t.forEach(t),eBr=r(tIe," (RoBERTa model)"),tIe.forEach(t),oBr=i(Ne),rw=n(Ne,"LI",{});var aIe=s(rw);eMe=n(aIe,"STRONG",{});var Z6t=s(eMe);rBr=r(Z6t,"roformer"),Z6t.forEach(t),tBr=r(aIe," \u2014 "),zY=n(aIe,"A",{href:!0});var e0t=s(zY);aBr=r(e0t,"FlaxRoFormerForQuestionAnswering"),e0t.forEach(t),nBr=r(aIe," (RoFormer model)"),aIe.forEach(t),sBr=i(Ne),tw=n(Ne,"LI",{});var nIe=s(tw);oMe=n(nIe,"STRONG",{});var o0t=s(oMe);lBr=r(o0t,"xlm-roberta"),o0t.forEach(t),iBr=r(nIe," \u2014 "),WY=n(nIe,"A",{href:!0});var r0t=s(WY);dBr=r(r0t,"FlaxXLMRobertaForQuestionAnswering"),r0t.forEach(t),cBr=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),Ne.forEach(t),fBr=i(ei),T(aw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),vNe=i(f),Jc=n(f,"H2",{class:!0});var ADe=s(Jc);nw=n(ADe,"A",{id:!0,class:!0,href:!0});var t0t=s(nw);rMe=n(t0t,"SPAN",{});var a0t=s(rMe);T(Dx.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),mBr=i(ADe),tMe=n(ADe,"SPAN",{});var n0t=s(tMe);gBr=r(n0t,"FlaxAutoModelForTokenClassification"),n0t.forEach(t),ADe.forEach(t),FNe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(Gx.$$.fragment,oi),hBr=i(oi),Yc=n(oi,"P",{});var cee=s(Yc);pBr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=n(cee,"A",{href:!0});var s0t=s(QY);uBr=r(s0t,"from_pretrained()"),s0t.forEach(t),_Br=r(cee," class method or the "),HY=n(cee,"A",{href:!0});var l0t=s(HY);bBr=r(l0t,"from_config()"),l0t.forEach(t),vBr=r(cee,` class
method.`),cee.forEach(t),FBr=i(oi),Ox=n(oi,"P",{});var yDe=s(Ox);TBr=r(yDe,"This class cannot be instantiated directly using "),aMe=n(yDe,"CODE",{});var i0t=s(aMe);MBr=r(i0t,"__init__()"),i0t.forEach(t),EBr=r(yDe," (throws an error)."),yDe.forEach(t),CBr=i(oi),Ht=n(oi,"DIV",{class:!0});var Q6=s(Ht);T(Vx.$$.fragment,Q6),wBr=i(Q6),nMe=n(Q6,"P",{});var d0t=s(nMe);ABr=r(d0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),d0t.forEach(t),yBr=i(Q6),Kc=n(Q6,"P",{});var fee=s(Kc);LBr=r(fee,`Note:
Loading a model from its configuration file does `),sMe=n(fee,"STRONG",{});var c0t=s(sMe);xBr=r(c0t,"not"),c0t.forEach(t),$Br=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(fee,"A",{href:!0});var f0t=s(UY);kBr=r(f0t,"from_pretrained()"),f0t.forEach(t),SBr=r(fee," to load the model weights."),fee.forEach(t),RBr=i(Q6),T(sw.$$.fragment,Q6),Q6.forEach(t),PBr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(Xx.$$.fragment,ri),BBr=i(ri),lMe=n(ri,"P",{});var m0t=s(lMe);IBr=r(m0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),m0t.forEach(t),qBr=i(ri),Tn=n(ri,"P",{});var H6=s(Tn);NBr=r(H6,"The model class to instantiate is selected based on the "),iMe=n(H6,"CODE",{});var g0t=s(iMe);jBr=r(g0t,"model_type"),g0t.forEach(t),DBr=r(H6,` property of the config object (either
passed as an argument or loaded from `),dMe=n(H6,"CODE",{});var h0t=s(dMe);GBr=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),OBr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(H6,"CODE",{});var p0t=s(cMe);VBr=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),XBr=r(H6,":"),H6.forEach(t),zBr=i(ri),De=n(ri,"UL",{});var Fo=s(De);lw=n(Fo,"LI",{});var sIe=s(lw);fMe=n(sIe,"STRONG",{});var u0t=s(fMe);WBr=r(u0t,"albert"),u0t.forEach(t),QBr=r(sIe," \u2014 "),JY=n(sIe,"A",{href:!0});var _0t=s(JY);HBr=r(_0t,"FlaxAlbertForTokenClassification"),_0t.forEach(t),UBr=r(sIe," (ALBERT model)"),sIe.forEach(t),JBr=i(Fo),iw=n(Fo,"LI",{});var lIe=s(iw);mMe=n(lIe,"STRONG",{});var b0t=s(mMe);YBr=r(b0t,"bert"),b0t.forEach(t),KBr=r(lIe," \u2014 "),YY=n(lIe,"A",{href:!0});var v0t=s(YY);ZBr=r(v0t,"FlaxBertForTokenClassification"),v0t.forEach(t),eIr=r(lIe," (BERT model)"),lIe.forEach(t),oIr=i(Fo),dw=n(Fo,"LI",{});var iIe=s(dw);gMe=n(iIe,"STRONG",{});var F0t=s(gMe);rIr=r(F0t,"big_bird"),F0t.forEach(t),tIr=r(iIe," \u2014 "),KY=n(iIe,"A",{href:!0});var T0t=s(KY);aIr=r(T0t,"FlaxBigBirdForTokenClassification"),T0t.forEach(t),nIr=r(iIe," (BigBird model)"),iIe.forEach(t),sIr=i(Fo),cw=n(Fo,"LI",{});var dIe=s(cw);hMe=n(dIe,"STRONG",{});var M0t=s(hMe);lIr=r(M0t,"distilbert"),M0t.forEach(t),iIr=r(dIe," \u2014 "),ZY=n(dIe,"A",{href:!0});var E0t=s(ZY);dIr=r(E0t,"FlaxDistilBertForTokenClassification"),E0t.forEach(t),cIr=r(dIe," (DistilBERT model)"),dIe.forEach(t),fIr=i(Fo),fw=n(Fo,"LI",{});var cIe=s(fw);pMe=n(cIe,"STRONG",{});var C0t=s(pMe);mIr=r(C0t,"electra"),C0t.forEach(t),gIr=r(cIe," \u2014 "),eK=n(cIe,"A",{href:!0});var w0t=s(eK);hIr=r(w0t,"FlaxElectraForTokenClassification"),w0t.forEach(t),pIr=r(cIe," (ELECTRA model)"),cIe.forEach(t),uIr=i(Fo),mw=n(Fo,"LI",{});var fIe=s(mw);uMe=n(fIe,"STRONG",{});var A0t=s(uMe);_Ir=r(A0t,"roberta"),A0t.forEach(t),bIr=r(fIe," \u2014 "),oK=n(fIe,"A",{href:!0});var y0t=s(oK);vIr=r(y0t,"FlaxRobertaForTokenClassification"),y0t.forEach(t),FIr=r(fIe," (RoBERTa model)"),fIe.forEach(t),TIr=i(Fo),gw=n(Fo,"LI",{});var mIe=s(gw);_Me=n(mIe,"STRONG",{});var L0t=s(_Me);MIr=r(L0t,"roformer"),L0t.forEach(t),EIr=r(mIe," \u2014 "),rK=n(mIe,"A",{href:!0});var x0t=s(rK);CIr=r(x0t,"FlaxRoFormerForTokenClassification"),x0t.forEach(t),wIr=r(mIe," (RoFormer model)"),mIe.forEach(t),AIr=i(Fo),hw=n(Fo,"LI",{});var gIe=s(hw);bMe=n(gIe,"STRONG",{});var $0t=s(bMe);yIr=r($0t,"xlm-roberta"),$0t.forEach(t),LIr=r(gIe," \u2014 "),tK=n(gIe,"A",{href:!0});var k0t=s(tK);xIr=r(k0t,"FlaxXLMRobertaForTokenClassification"),k0t.forEach(t),$Ir=r(gIe," (XLM-RoBERTa model)"),gIe.forEach(t),Fo.forEach(t),kIr=i(ri),T(pw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),TNe=i(f),Zc=n(f,"H2",{class:!0});var LDe=s(Zc);uw=n(LDe,"A",{id:!0,class:!0,href:!0});var S0t=s(uw);vMe=n(S0t,"SPAN",{});var R0t=s(vMe);T(zx.$$.fragment,R0t),R0t.forEach(t),S0t.forEach(t),SIr=i(LDe),FMe=n(LDe,"SPAN",{});var P0t=s(FMe);RIr=r(P0t,"FlaxAutoModelForMultipleChoice"),P0t.forEach(t),LDe.forEach(t),MNe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(Wx.$$.fragment,ti),PIr=i(ti),ef=n(ti,"P",{});var mee=s(ef);BIr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aK=n(mee,"A",{href:!0});var B0t=s(aK);IIr=r(B0t,"from_pretrained()"),B0t.forEach(t),qIr=r(mee," class method or the "),nK=n(mee,"A",{href:!0});var I0t=s(nK);NIr=r(I0t,"from_config()"),I0t.forEach(t),jIr=r(mee,` class
method.`),mee.forEach(t),DIr=i(ti),Qx=n(ti,"P",{});var xDe=s(Qx);GIr=r(xDe,"This class cannot be instantiated directly using "),TMe=n(xDe,"CODE",{});var q0t=s(TMe);OIr=r(q0t,"__init__()"),q0t.forEach(t),VIr=r(xDe," (throws an error)."),xDe.forEach(t),XIr=i(ti),Ut=n(ti,"DIV",{class:!0});var U6=s(Ut);T(Hx.$$.fragment,U6),zIr=i(U6),MMe=n(U6,"P",{});var N0t=s(MMe);WIr=r(N0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),N0t.forEach(t),QIr=i(U6),of=n(U6,"P",{});var gee=s(of);HIr=r(gee,`Note:
Loading a model from its configuration file does `),EMe=n(gee,"STRONG",{});var j0t=s(EMe);UIr=r(j0t,"not"),j0t.forEach(t),JIr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(gee,"A",{href:!0});var D0t=s(sK);YIr=r(D0t,"from_pretrained()"),D0t.forEach(t),KIr=r(gee," to load the model weights."),gee.forEach(t),ZIr=i(U6),T(_w.$$.fragment,U6),U6.forEach(t),eqr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(Ux.$$.fragment,ai),oqr=i(ai),CMe=n(ai,"P",{});var G0t=s(CMe);rqr=r(G0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G0t.forEach(t),tqr=i(ai),Mn=n(ai,"P",{});var J6=s(Mn);aqr=r(J6,"The model class to instantiate is selected based on the "),wMe=n(J6,"CODE",{});var O0t=s(wMe);nqr=r(O0t,"model_type"),O0t.forEach(t),sqr=r(J6,` property of the config object (either
passed as an argument or loaded from `),AMe=n(J6,"CODE",{});var V0t=s(AMe);lqr=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),iqr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=n(J6,"CODE",{});var X0t=s(yMe);dqr=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),cqr=r(J6,":"),J6.forEach(t),fqr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);bw=n(To,"LI",{});var hIe=s(bw);LMe=n(hIe,"STRONG",{});var z0t=s(LMe);mqr=r(z0t,"albert"),z0t.forEach(t),gqr=r(hIe," \u2014 "),lK=n(hIe,"A",{href:!0});var W0t=s(lK);hqr=r(W0t,"FlaxAlbertForMultipleChoice"),W0t.forEach(t),pqr=r(hIe," (ALBERT model)"),hIe.forEach(t),uqr=i(To),vw=n(To,"LI",{});var pIe=s(vw);xMe=n(pIe,"STRONG",{});var Q0t=s(xMe);_qr=r(Q0t,"bert"),Q0t.forEach(t),bqr=r(pIe," \u2014 "),iK=n(pIe,"A",{href:!0});var H0t=s(iK);vqr=r(H0t,"FlaxBertForMultipleChoice"),H0t.forEach(t),Fqr=r(pIe," (BERT model)"),pIe.forEach(t),Tqr=i(To),Fw=n(To,"LI",{});var uIe=s(Fw);$Me=n(uIe,"STRONG",{});var U0t=s($Me);Mqr=r(U0t,"big_bird"),U0t.forEach(t),Eqr=r(uIe," \u2014 "),dK=n(uIe,"A",{href:!0});var J0t=s(dK);Cqr=r(J0t,"FlaxBigBirdForMultipleChoice"),J0t.forEach(t),wqr=r(uIe," (BigBird model)"),uIe.forEach(t),Aqr=i(To),Tw=n(To,"LI",{});var _Ie=s(Tw);kMe=n(_Ie,"STRONG",{});var Y0t=s(kMe);yqr=r(Y0t,"distilbert"),Y0t.forEach(t),Lqr=r(_Ie," \u2014 "),cK=n(_Ie,"A",{href:!0});var K0t=s(cK);xqr=r(K0t,"FlaxDistilBertForMultipleChoice"),K0t.forEach(t),$qr=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),kqr=i(To),Mw=n(To,"LI",{});var bIe=s(Mw);SMe=n(bIe,"STRONG",{});var Z0t=s(SMe);Sqr=r(Z0t,"electra"),Z0t.forEach(t),Rqr=r(bIe," \u2014 "),fK=n(bIe,"A",{href:!0});var eyt=s(fK);Pqr=r(eyt,"FlaxElectraForMultipleChoice"),eyt.forEach(t),Bqr=r(bIe," (ELECTRA model)"),bIe.forEach(t),Iqr=i(To),Ew=n(To,"LI",{});var vIe=s(Ew);RMe=n(vIe,"STRONG",{});var oyt=s(RMe);qqr=r(oyt,"roberta"),oyt.forEach(t),Nqr=r(vIe," \u2014 "),mK=n(vIe,"A",{href:!0});var ryt=s(mK);jqr=r(ryt,"FlaxRobertaForMultipleChoice"),ryt.forEach(t),Dqr=r(vIe," (RoBERTa model)"),vIe.forEach(t),Gqr=i(To),Cw=n(To,"LI",{});var FIe=s(Cw);PMe=n(FIe,"STRONG",{});var tyt=s(PMe);Oqr=r(tyt,"roformer"),tyt.forEach(t),Vqr=r(FIe," \u2014 "),gK=n(FIe,"A",{href:!0});var ayt=s(gK);Xqr=r(ayt,"FlaxRoFormerForMultipleChoice"),ayt.forEach(t),zqr=r(FIe," (RoFormer model)"),FIe.forEach(t),Wqr=i(To),ww=n(To,"LI",{});var TIe=s(ww);BMe=n(TIe,"STRONG",{});var nyt=s(BMe);Qqr=r(nyt,"xlm-roberta"),nyt.forEach(t),Hqr=r(TIe," \u2014 "),hK=n(TIe,"A",{href:!0});var syt=s(hK);Uqr=r(syt,"FlaxXLMRobertaForMultipleChoice"),syt.forEach(t),Jqr=r(TIe," (XLM-RoBERTa model)"),TIe.forEach(t),To.forEach(t),Yqr=i(ai),T(Aw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),ENe=i(f),rf=n(f,"H2",{class:!0});var $De=s(rf);yw=n($De,"A",{id:!0,class:!0,href:!0});var lyt=s(yw);IMe=n(lyt,"SPAN",{});var iyt=s(IMe);T(Jx.$$.fragment,iyt),iyt.forEach(t),lyt.forEach(t),Kqr=i($De),qMe=n($De,"SPAN",{});var dyt=s(qMe);Zqr=r(dyt,"FlaxAutoModelForNextSentencePrediction"),dyt.forEach(t),$De.forEach(t),CNe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(Yx.$$.fragment,ni),eNr=i(ni),tf=n(ni,"P",{});var hee=s(tf);oNr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pK=n(hee,"A",{href:!0});var cyt=s(pK);rNr=r(cyt,"from_pretrained()"),cyt.forEach(t),tNr=r(hee," class method or the "),uK=n(hee,"A",{href:!0});var fyt=s(uK);aNr=r(fyt,"from_config()"),fyt.forEach(t),nNr=r(hee,` class
method.`),hee.forEach(t),sNr=i(ni),Kx=n(ni,"P",{});var kDe=s(Kx);lNr=r(kDe,"This class cannot be instantiated directly using "),NMe=n(kDe,"CODE",{});var myt=s(NMe);iNr=r(myt,"__init__()"),myt.forEach(t),dNr=r(kDe," (throws an error)."),kDe.forEach(t),cNr=i(ni),Jt=n(ni,"DIV",{class:!0});var Y6=s(Jt);T(Zx.$$.fragment,Y6),fNr=i(Y6),jMe=n(Y6,"P",{});var gyt=s(jMe);mNr=r(gyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gyt.forEach(t),gNr=i(Y6),af=n(Y6,"P",{});var pee=s(af);hNr=r(pee,`Note:
Loading a model from its configuration file does `),DMe=n(pee,"STRONG",{});var hyt=s(DMe);pNr=r(hyt,"not"),hyt.forEach(t),uNr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(pee,"A",{href:!0});var pyt=s(_K);_Nr=r(pyt,"from_pretrained()"),pyt.forEach(t),bNr=r(pee," to load the model weights."),pee.forEach(t),vNr=i(Y6),T(Lw.$$.fragment,Y6),Y6.forEach(t),FNr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(e9.$$.fragment,si),TNr=i(si),GMe=n(si,"P",{});var uyt=s(GMe);MNr=r(uyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uyt.forEach(t),ENr=i(si),En=n(si,"P",{});var K6=s(En);CNr=r(K6,"The model class to instantiate is selected based on the "),OMe=n(K6,"CODE",{});var _yt=s(OMe);wNr=r(_yt,"model_type"),_yt.forEach(t),ANr=r(K6,` property of the config object (either
passed as an argument or loaded from `),VMe=n(K6,"CODE",{});var byt=s(VMe);yNr=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),LNr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(K6,"CODE",{});var vyt=s(XMe);xNr=r(vyt,"pretrained_model_name_or_path"),vyt.forEach(t),$Nr=r(K6,":"),K6.forEach(t),kNr=i(si),zMe=n(si,"UL",{});var Fyt=s(zMe);xw=n(Fyt,"LI",{});var MIe=s(xw);WMe=n(MIe,"STRONG",{});var Tyt=s(WMe);SNr=r(Tyt,"bert"),Tyt.forEach(t),RNr=r(MIe," \u2014 "),bK=n(MIe,"A",{href:!0});var Myt=s(bK);PNr=r(Myt,"FlaxBertForNextSentencePrediction"),Myt.forEach(t),BNr=r(MIe," (BERT model)"),MIe.forEach(t),Fyt.forEach(t),INr=i(si),T($w.$$.fragment,si),si.forEach(t),ni.forEach(t),wNe=i(f),nf=n(f,"H2",{class:!0});var SDe=s(nf);kw=n(SDe,"A",{id:!0,class:!0,href:!0});var Eyt=s(kw);QMe=n(Eyt,"SPAN",{});var Cyt=s(QMe);T(o9.$$.fragment,Cyt),Cyt.forEach(t),Eyt.forEach(t),qNr=i(SDe),HMe=n(SDe,"SPAN",{});var wyt=s(HMe);NNr=r(wyt,"FlaxAutoModelForImageClassification"),wyt.forEach(t),SDe.forEach(t),ANe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(r9.$$.fragment,li),jNr=i(li),sf=n(li,"P",{});var uee=s(sf);DNr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vK=n(uee,"A",{href:!0});var Ayt=s(vK);GNr=r(Ayt,"from_pretrained()"),Ayt.forEach(t),ONr=r(uee," class method or the "),FK=n(uee,"A",{href:!0});var yyt=s(FK);VNr=r(yyt,"from_config()"),yyt.forEach(t),XNr=r(uee,` class
method.`),uee.forEach(t),zNr=i(li),t9=n(li,"P",{});var RDe=s(t9);WNr=r(RDe,"This class cannot be instantiated directly using "),UMe=n(RDe,"CODE",{});var Lyt=s(UMe);QNr=r(Lyt,"__init__()"),Lyt.forEach(t),HNr=r(RDe," (throws an error)."),RDe.forEach(t),UNr=i(li),Yt=n(li,"DIV",{class:!0});var Z6=s(Yt);T(a9.$$.fragment,Z6),JNr=i(Z6),JMe=n(Z6,"P",{});var xyt=s(JMe);YNr=r(xyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xyt.forEach(t),KNr=i(Z6),lf=n(Z6,"P",{});var _ee=s(lf);ZNr=r(_ee,`Note:
Loading a model from its configuration file does `),YMe=n(_ee,"STRONG",{});var $yt=s(YMe);ejr=r($yt,"not"),$yt.forEach(t),ojr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(_ee,"A",{href:!0});var kyt=s(TK);rjr=r(kyt,"from_pretrained()"),kyt.forEach(t),tjr=r(_ee," to load the model weights."),_ee.forEach(t),ajr=i(Z6),T(Sw.$$.fragment,Z6),Z6.forEach(t),njr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(n9.$$.fragment,ii),sjr=i(ii),KMe=n(ii,"P",{});var Syt=s(KMe);ljr=r(Syt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Syt.forEach(t),ijr=i(ii),Cn=n(ii,"P",{});var e0=s(Cn);djr=r(e0,"The model class to instantiate is selected based on the "),ZMe=n(e0,"CODE",{});var Ryt=s(ZMe);cjr=r(Ryt,"model_type"),Ryt.forEach(t),fjr=r(e0,` property of the config object (either
passed as an argument or loaded from `),eEe=n(e0,"CODE",{});var Pyt=s(eEe);mjr=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),gjr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(e0,"CODE",{});var Byt=s(oEe);hjr=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),pjr=r(e0,":"),e0.forEach(t),ujr=i(ii),s9=n(ii,"UL",{});var PDe=s(s9);Rw=n(PDe,"LI",{});var EIe=s(Rw);rEe=n(EIe,"STRONG",{});var Iyt=s(rEe);_jr=r(Iyt,"beit"),Iyt.forEach(t),bjr=r(EIe," \u2014 "),MK=n(EIe,"A",{href:!0});var qyt=s(MK);vjr=r(qyt,"FlaxBeitForImageClassification"),qyt.forEach(t),Fjr=r(EIe," (BEiT model)"),EIe.forEach(t),Tjr=i(PDe),Pw=n(PDe,"LI",{});var CIe=s(Pw);tEe=n(CIe,"STRONG",{});var Nyt=s(tEe);Mjr=r(Nyt,"vit"),Nyt.forEach(t),Ejr=r(CIe," \u2014 "),EK=n(CIe,"A",{href:!0});var jyt=s(EK);Cjr=r(jyt,"FlaxViTForImageClassification"),jyt.forEach(t),wjr=r(CIe," (ViT model)"),CIe.forEach(t),PDe.forEach(t),Ajr=i(ii),T(Bw.$$.fragment,ii),ii.forEach(t),li.forEach(t),yNe=i(f),df=n(f,"H2",{class:!0});var BDe=s(df);Iw=n(BDe,"A",{id:!0,class:!0,href:!0});var Dyt=s(Iw);aEe=n(Dyt,"SPAN",{});var Gyt=s(aEe);T(l9.$$.fragment,Gyt),Gyt.forEach(t),Dyt.forEach(t),yjr=i(BDe),nEe=n(BDe,"SPAN",{});var Oyt=s(nEe);Ljr=r(Oyt,"FlaxAutoModelForVision2Seq"),Oyt.forEach(t),BDe.forEach(t),LNe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(i9.$$.fragment,di),xjr=i(di),cf=n(di,"P",{});var bee=s(cf);$jr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=n(bee,"A",{href:!0});var Vyt=s(CK);kjr=r(Vyt,"from_pretrained()"),Vyt.forEach(t),Sjr=r(bee," class method or the "),wK=n(bee,"A",{href:!0});var Xyt=s(wK);Rjr=r(Xyt,"from_config()"),Xyt.forEach(t),Pjr=r(bee,` class
method.`),bee.forEach(t),Bjr=i(di),d9=n(di,"P",{});var IDe=s(d9);Ijr=r(IDe,"This class cannot be instantiated directly using "),sEe=n(IDe,"CODE",{});var zyt=s(sEe);qjr=r(zyt,"__init__()"),zyt.forEach(t),Njr=r(IDe," (throws an error)."),IDe.forEach(t),jjr=i(di),Kt=n(di,"DIV",{class:!0});var o0=s(Kt);T(c9.$$.fragment,o0),Djr=i(o0),lEe=n(o0,"P",{});var Wyt=s(lEe);Gjr=r(Wyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wyt.forEach(t),Ojr=i(o0),ff=n(o0,"P",{});var vee=s(ff);Vjr=r(vee,`Note:
Loading a model from its configuration file does `),iEe=n(vee,"STRONG",{});var Qyt=s(iEe);Xjr=r(Qyt,"not"),Qyt.forEach(t),zjr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(vee,"A",{href:!0});var Hyt=s(AK);Wjr=r(Hyt,"from_pretrained()"),Hyt.forEach(t),Qjr=r(vee," to load the model weights."),vee.forEach(t),Hjr=i(o0),T(qw.$$.fragment,o0),o0.forEach(t),Ujr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(f9.$$.fragment,ci),Jjr=i(ci),dEe=n(ci,"P",{});var Uyt=s(dEe);Yjr=r(Uyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uyt.forEach(t),Kjr=i(ci),wn=n(ci,"P",{});var r0=s(wn);Zjr=r(r0,"The model class to instantiate is selected based on the "),cEe=n(r0,"CODE",{});var Jyt=s(cEe);eDr=r(Jyt,"model_type"),Jyt.forEach(t),oDr=r(r0,` property of the config object (either
passed as an argument or loaded from `),fEe=n(r0,"CODE",{});var Yyt=s(fEe);rDr=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),tDr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(r0,"CODE",{});var Kyt=s(mEe);aDr=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),nDr=r(r0,":"),r0.forEach(t),sDr=i(ci),gEe=n(ci,"UL",{});var Zyt=s(gEe);Nw=n(Zyt,"LI",{});var wIe=s(Nw);hEe=n(wIe,"STRONG",{});var eLt=s(hEe);lDr=r(eLt,"vision-encoder-decoder"),eLt.forEach(t),iDr=r(wIe," \u2014 "),yK=n(wIe,"A",{href:!0});var oLt=s(yK);dDr=r(oLt,"FlaxVisionEncoderDecoderModel"),oLt.forEach(t),cDr=r(wIe," (Vision Encoder decoder model)"),wIe.forEach(t),Zyt.forEach(t),fDr=i(ci),T(jw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(nxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(k$,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(S$,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig"),c(R$,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig"),c(P$,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig"),c(B$,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig"),c(I$,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(q$,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig"),c(N$,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(j$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(D$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(G$,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig"),c(O$,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig"),c(V$,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig"),c(X$,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig"),c(z$,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig"),c(W$,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig"),c(Q$,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(H$,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(U$,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(J$,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig"),c(Y$,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(K$,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Z$,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig"),c(ek,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig"),c(ok,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig"),c(rk,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig"),c(tk,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig"),c(ak,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig"),c(nk,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(sk,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig"),c(lk,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig"),c(ik,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig"),c(dk,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig"),c(ck,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig"),c(fk,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig"),c(mk,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config"),c(gk,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(hk,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig"),c(pk,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig"),c(uk,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig"),c(_k,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(bk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(vk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Fk,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig"),c(Tk,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig"),c(Mk,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig"),c(Ek,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ck,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config"),c(wk,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig"),c(Ak,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(yk,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig"),c(Lk,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(xk,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($k,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig"),c(kk,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config"),c(Sk,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Rk,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Pk,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig"),c(Bk,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ik,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig"),c(qk,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig"),c(Nk,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jk,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Dk,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Gk,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagConfig"),c(Ok,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmConfig"),c(Vk,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig"),c(Xk,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig"),c(zk,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig"),c(Wk,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig"),c(Qk,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig"),c(Hk,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig"),c(Uk,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig"),c(Jk,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig"),c(Yk,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig"),c(Kk,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig"),c(Zk,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(eS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(oS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rS,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig"),c(tS,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(aS,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig"),c(nS,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config"),c(sS,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig"),c(lS,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(iS,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig"),c(dS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(cS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(fS,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig"),c(mS,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig"),c(gS,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(hS,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(pS,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uS,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig"),c(_S,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(bS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(vS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(FS,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig"),c(TS,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig"),c(MS,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig"),c(ES,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(CS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(wS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(AS,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig"),c(yS,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig"),c(LS,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(xS,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c($S,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(kS,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SS,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizer"),c(RS,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizerFast"),c(PS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizer"),c(BS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(IS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizerFast"),c(NS,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(jS,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(DS,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GS,"href","/docs/transformers/pr_17254/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(OS,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VS,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(XS,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zS,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(WS,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QS,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(HS,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(US,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(JS,"href","/docs/transformers/pr_17254/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(YS,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizer"),c(KS,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineTokenizer"),c(eR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(oR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aR,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizer"),c(nR,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(sR,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(gR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(hR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(uR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(_R,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizer"),c(bR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vR,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(FR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizer"),c(TR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(MR,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ER,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(wR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($R,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizer"),c(SR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(qR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(NR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(DR,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(GR,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(OR,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizer"),c(VR,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizerFast"),c(XR,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizer"),c(zR,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(WR,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeTokenizer"),c(QR,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(HR,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(JR,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianTokenizer"),c(YR,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizer"),c(KR,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(eP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(oP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(rP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(tP,"href","/docs/transformers/pr_17254/en/model_doc/mluke#transformers.MLukeTokenizer"),c(aP,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(nP,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(lP,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(iP,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5Tokenizer"),c(dP,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5TokenizerFast"),c(cP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(fP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(gP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(hP,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_P,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(bP,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizer"),c(vP,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartTokenizer"),c(FP,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(TP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(MP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagTokenizer"),c(CP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizer"),c(wP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizerFast"),c(AP,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yP,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(LP,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizer"),c(xP,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c($P,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(kP,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PP,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(BP,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(IP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(NP,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizer"),c(jP,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(DP,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(GP,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5Tokenizer"),c(VP,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5TokenizerFast"),c(XP,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasTokenizer"),c(zP,"href","/docs/transformers/pr_17254/en/model_doc/tapex#transformers.TapexTokenizer"),c(WP,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(QP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(HP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(KP,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizer"),c(ZP,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(eB,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMTokenizer"),c(oB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(rB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(tB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(aB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(lB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(iB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(dB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(cB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(fB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(gB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(TB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(EB,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(qB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(NB,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPProcessor"),c(jB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(DB,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(GB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(XB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(zB,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRProcessor"),c(WB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltProcessor"),c(UB,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(JB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(ZB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rI,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel"),c(tI,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel"),c(aI,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel"),c(nI,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(sI,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(lI,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel"),c(iI,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(dI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(cI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(fI,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel"),c(mI,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel"),c(gI,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel"),c(hI,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel"),c(pI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel"),c(uI,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel"),c(_I,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(FI,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel"),c(TI,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(MI,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(EI,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel"),c(CI,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel"),c(wI,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel"),c(AI,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(yI,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel"),c(LI,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel"),c(xI,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel"),c($I,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel"),c(kI,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel"),c(SI,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel"),c(RI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel"),c(PI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel"),c(BI,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel"),c(II,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model"),c(qI,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(NI,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel"),c(jI,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel"),c(DI,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel"),c(GI,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(OI,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(VI,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(XI,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel"),c(zI,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel"),c(WI,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel"),c(QI,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel"),c(HI,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model"),c(UI,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel"),c(JI,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel"),c(YI,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel"),c(KI,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(ZI,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel"),c(eq,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel"),c(oq,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model"),c(rq,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel"),c(tq,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(aq,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel"),c(nq,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel"),c(sq,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel"),c(lq,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel"),c(iq,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dq,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cq,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fq,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel"),c(mq,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel"),c(gq,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel"),c(hq,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel"),c(pq,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(uq,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel"),c(_q,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel"),c(bq,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel"),c(vq,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel"),c(Fq,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel"),c(Tq,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Mq,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel"),c(Eq,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Cq,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel"),c(wq,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model"),c(Aq,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel"),c(yq,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Lq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($q,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel"),c(kq,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel"),c(Sq,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Rq,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Pq,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel"),c(Bq,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Iq,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qq,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Nq,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel"),c(jq,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel"),c(Dq,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel"),c(Gq,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Oq,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Vq,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Xq,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel"),c(zq,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel"),c(Wq,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vu,"id","transformers.AutoModelForPreTraining"),c(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(Qq,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hq,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uq,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jq,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Kq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(eN,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oN,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rN,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tN,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aN,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nN,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sN,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining"),c(lN,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(iN,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining"),c(dN,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining"),c(cN,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fN,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(mN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gN,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pN,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uN,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(_N,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(bN,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(vN,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FN,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TN,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(MN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EN,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AN,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(LN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xN,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c($N,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(kN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(SN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(RN,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(IN,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P_,"id","transformers.AutoModelForCausalLM"),c(P_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(qN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DN,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM"),c(GN,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel"),c(ON,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(VN,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XN,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(zN,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(WN,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(QN,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(HN,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UN,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(JN,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM"),c(YN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KN,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ZN,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ej,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM"),c(oj,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rj,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tj,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aj,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM"),c(nj,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(sj,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(lj,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(ij,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(dj,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(cj,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(fj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(mj,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gj,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(hj,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pj,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(uj,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(_j,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Fj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Tj,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForMaskedLM"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Mj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(xj,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($j,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(qj,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(jj,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oD,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aD,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n1,"id","transformers.AutoModelForSeq2SeqLM"),c(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(nD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(gD,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel"),c(_D,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForSequenceClassification"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(CD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMultipleChoice"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(vG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c($G,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.AutoModelForNextSentencePrediction"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(YG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(oO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(rO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(tO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(aO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.AutoModelForTokenClassification"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(nO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(fO,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification"),c(gO,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pO,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(uO,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(_O,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(vO,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(FO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(TO,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(MO,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(EO,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(wO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(AO,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($O,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(kO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(PO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(BO,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(IO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(qO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(NO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(jO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(DO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.AutoModelForQuestionAnswering"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(GO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LV,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.AutoModelForTableQuestionAnswering"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(xV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.AutoModelForImageClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(RV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification"),c(qV,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jV,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DV,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GV,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OV,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VV,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XV,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zV,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(WV,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QV,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HV,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UV,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification"),c(JV,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification"),c(YV,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForVision2Seq"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(KV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForAudioClassification"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(rX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForAudioFrameClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(hX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(FX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(TX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lv,"id","transformers.AutoModelForCTC"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(MX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(AX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC"),c(yX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC"),c(LX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($X,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(PX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(NX,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForAudioXVector"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(jX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(WX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForMaskedImageModeling"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(QX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YX,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KX,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForObjectDetection"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tz,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForImageSegmentation"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(az,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForSemanticSegmentation"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(iz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gz,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hz,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForInstanceSegmentation"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.TFAutoModel"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(vz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel"),c(Ez,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel"),c(Cz,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel"),c(wz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Az,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yz,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel"),c(Lz,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel"),c(xz,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel"),c($z,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel"),c(kz,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Sz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Rz,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel"),c(Pz,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Bz,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Iz,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qz,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel"),c(Nz,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jz,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel"),c(Dz,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Gz,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Oz,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel"),c(Vz,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel"),c(Xz,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zz,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel"),c(Wz,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel"),c(Qz,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Hz,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel"),c(Uz,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel"),c(Jz,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Yz,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Kz,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model"),c(Zz,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eW,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel"),c(rW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel"),c(tW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aW,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nW,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel"),c(sW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model"),c(lW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel"),c(iW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dW,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel"),c(cW,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fW,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mW,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel"),c(gW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hW,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.TFAutoModelForPreTraining"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vW,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TW,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MW,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EW,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xW,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($W,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qW,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NW,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DW,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForCausalLM"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zW,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(WW,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HW,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.TFAutoModelForImageClassification"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sQ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lQ,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(iQ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModelForMaskedLM"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($Q,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NQ,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jQ,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DQ,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel"),c(GQ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForSequenceClassification"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(zQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForMultipleChoice"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(FH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c($H,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(kH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(DH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(XH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForTokenClassification"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(UH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iU,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(mU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(pU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_U,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForQuestionAnswering"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(bU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($U,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForVision2Seq"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(GU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(zU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModel"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZU,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel"),c(eJ,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel"),c(oJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel"),c(rJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nJ,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sJ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel"),c(iJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(fJ,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel"),c(mJ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gJ,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hJ,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_J,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model"),c(bJ,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vJ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel"),c(FJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(TJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(MJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.FlaxAutoModelForCausalLM"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($J,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(SJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(RJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(PJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForPreTraining"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VJ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(UJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.FlaxAutoModelForMaskedLM"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(eY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(rY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(tY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(aY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(nY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uY,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(_Y,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(PY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForTokenClassification"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(QY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(YY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(eK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(oK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(aK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(iK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(pK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForImageClassification"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(vK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(EK,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(CK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,t0),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,a0),e(We,Ln),e(We,xn),e(xn,n0),e(We,pi),e(We,$n),e($n,s0),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,w$),e(Ae,_i),e(_i,A$),e(Ae,y$),b(f,Eo,_),b(f,wa,_),e(wa,L$),e(wa,bf),e(bf,x$),e(wa,qDe),b(f,AIe,_),b(f,bi,_),e(bi,vf),e(vf,Fee),M(l0,Fee,null),e(bi,NDe),e(bi,Tee),e(Tee,jDe),b(f,yIe,_),b(f,kn,_),e(kn,DDe),e(kn,Mee),e(Mee,GDe),e(kn,ODe),e(kn,Eee),e(Eee,VDe),e(kn,XDe),b(f,LIe,_),M(i0,f,_),b(f,xIe,_),b(f,$$,_),e($$,zDe),b(f,$Ie,_),M(Ff,f,_),b(f,kIe,_),b(f,vi,_),e(vi,Tf),e(Tf,Cee),M(d0,Cee,null),e(vi,WDe),e(vi,wee),e(wee,QDe),b(f,SIe,_),b(f,Co,_),M(c0,Co,null),e(Co,HDe),e(Co,f0),e(f0,UDe),e(f0,k$),e(k$,JDe),e(f0,YDe),e(Co,KDe),e(Co,m0),e(m0,ZDe),e(m0,Aee),e(Aee,eGe),e(m0,oGe),e(Co,rGe),e(Co,Er),M(g0,Er,null),e(Er,tGe),e(Er,yee),e(yee,aGe),e(Er,nGe),e(Er,Fi),e(Fi,sGe),e(Fi,Lee),e(Lee,lGe),e(Fi,iGe),e(Fi,xee),e(xee,dGe),e(Fi,cGe),e(Er,fGe),e(Er,A),e(A,Mf),e(Mf,$ee),e($ee,mGe),e(Mf,gGe),e(Mf,S$),e(S$,hGe),e(Mf,pGe),e(A,uGe),e(A,Ef),e(Ef,kee),e(kee,_Ge),e(Ef,bGe),e(Ef,R$),e(R$,vGe),e(Ef,FGe),e(A,TGe),e(A,Cf),e(Cf,See),e(See,MGe),e(Cf,EGe),e(Cf,P$),e(P$,CGe),e(Cf,wGe),e(A,AGe),e(A,wf),e(wf,Ree),e(Ree,yGe),e(wf,LGe),e(wf,B$),e(B$,xGe),e(wf,$Ge),e(A,kGe),e(A,Af),e(Af,Pee),e(Pee,SGe),e(Af,RGe),e(Af,I$),e(I$,PGe),e(Af,BGe),e(A,IGe),e(A,yf),e(yf,Bee),e(Bee,qGe),e(yf,NGe),e(yf,q$),e(q$,jGe),e(yf,DGe),e(A,GGe),e(A,Lf),e(Lf,Iee),e(Iee,OGe),e(Lf,VGe),e(Lf,N$),e(N$,XGe),e(Lf,zGe),e(A,WGe),e(A,xf),e(xf,qee),e(qee,QGe),e(xf,HGe),e(xf,j$),e(j$,UGe),e(xf,JGe),e(A,YGe),e(A,$f),e($f,Nee),e(Nee,KGe),e($f,ZGe),e($f,D$),e(D$,eOe),e($f,oOe),e(A,rOe),e(A,kf),e(kf,jee),e(jee,tOe),e(kf,aOe),e(kf,G$),e(G$,nOe),e(kf,sOe),e(A,lOe),e(A,Sf),e(Sf,Dee),e(Dee,iOe),e(Sf,dOe),e(Sf,O$),e(O$,cOe),e(Sf,fOe),e(A,mOe),e(A,Rf),e(Rf,Gee),e(Gee,gOe),e(Rf,hOe),e(Rf,V$),e(V$,pOe),e(Rf,uOe),e(A,_Oe),e(A,Pf),e(Pf,Oee),e(Oee,bOe),e(Pf,vOe),e(Pf,X$),e(X$,FOe),e(Pf,TOe),e(A,MOe),e(A,Bf),e(Bf,Vee),e(Vee,EOe),e(Bf,COe),e(Bf,z$),e(z$,wOe),e(Bf,AOe),e(A,yOe),e(A,If),e(If,Xee),e(Xee,LOe),e(If,xOe),e(If,W$),e(W$,$Oe),e(If,kOe),e(A,SOe),e(A,qf),e(qf,zee),e(zee,ROe),e(qf,POe),e(qf,Q$),e(Q$,BOe),e(qf,IOe),e(A,qOe),e(A,Nf),e(Nf,Wee),e(Wee,NOe),e(Nf,jOe),e(Nf,H$),e(H$,DOe),e(Nf,GOe),e(A,OOe),e(A,jf),e(jf,Qee),e(Qee,VOe),e(jf,XOe),e(jf,U$),e(U$,zOe),e(jf,WOe),e(A,QOe),e(A,Df),e(Df,Hee),e(Hee,HOe),e(Df,UOe),e(Df,J$),e(J$,JOe),e(Df,YOe),e(A,KOe),e(A,Gf),e(Gf,Uee),e(Uee,ZOe),e(Gf,eVe),e(Gf,Y$),e(Y$,oVe),e(Gf,rVe),e(A,tVe),e(A,Of),e(Of,Jee),e(Jee,aVe),e(Of,nVe),e(Of,K$),e(K$,sVe),e(Of,lVe),e(A,iVe),e(A,Vf),e(Vf,Yee),e(Yee,dVe),e(Vf,cVe),e(Vf,Z$),e(Z$,fVe),e(Vf,mVe),e(A,gVe),e(A,Xf),e(Xf,Kee),e(Kee,hVe),e(Xf,pVe),e(Xf,ek),e(ek,uVe),e(Xf,_Ve),e(A,bVe),e(A,zf),e(zf,Zee),e(Zee,vVe),e(zf,FVe),e(zf,ok),e(ok,TVe),e(zf,MVe),e(A,EVe),e(A,Wf),e(Wf,eoe),e(eoe,CVe),e(Wf,wVe),e(Wf,rk),e(rk,AVe),e(Wf,yVe),e(A,LVe),e(A,Qf),e(Qf,ooe),e(ooe,xVe),e(Qf,$Ve),e(Qf,tk),e(tk,kVe),e(Qf,SVe),e(A,RVe),e(A,Hf),e(Hf,roe),e(roe,PVe),e(Hf,BVe),e(Hf,ak),e(ak,IVe),e(Hf,qVe),e(A,NVe),e(A,Uf),e(Uf,toe),e(toe,jVe),e(Uf,DVe),e(Uf,nk),e(nk,GVe),e(Uf,OVe),e(A,VVe),e(A,Jf),e(Jf,aoe),e(aoe,XVe),e(Jf,zVe),e(Jf,sk),e(sk,WVe),e(Jf,QVe),e(A,HVe),e(A,Yf),e(Yf,noe),e(noe,UVe),e(Yf,JVe),e(Yf,lk),e(lk,YVe),e(Yf,KVe),e(A,ZVe),e(A,Kf),e(Kf,soe),e(soe,eXe),e(Kf,oXe),e(Kf,ik),e(ik,rXe),e(Kf,tXe),e(A,aXe),e(A,Zf),e(Zf,loe),e(loe,nXe),e(Zf,sXe),e(Zf,dk),e(dk,lXe),e(Zf,iXe),e(A,dXe),e(A,em),e(em,ioe),e(ioe,cXe),e(em,fXe),e(em,ck),e(ck,mXe),e(em,gXe),e(A,hXe),e(A,om),e(om,doe),e(doe,pXe),e(om,uXe),e(om,fk),e(fk,_Xe),e(om,bXe),e(A,vXe),e(A,rm),e(rm,coe),e(coe,FXe),e(rm,TXe),e(rm,mk),e(mk,MXe),e(rm,EXe),e(A,CXe),e(A,tm),e(tm,foe),e(foe,wXe),e(tm,AXe),e(tm,gk),e(gk,yXe),e(tm,LXe),e(A,xXe),e(A,am),e(am,moe),e(moe,$Xe),e(am,kXe),e(am,hk),e(hk,SXe),e(am,RXe),e(A,PXe),e(A,nm),e(nm,goe),e(goe,BXe),e(nm,IXe),e(nm,pk),e(pk,qXe),e(nm,NXe),e(A,jXe),e(A,sm),e(sm,hoe),e(hoe,DXe),e(sm,GXe),e(sm,uk),e(uk,OXe),e(sm,VXe),e(A,XXe),e(A,lm),e(lm,poe),e(poe,zXe),e(lm,WXe),e(lm,_k),e(_k,QXe),e(lm,HXe),e(A,UXe),e(A,im),e(im,uoe),e(uoe,JXe),e(im,YXe),e(im,bk),e(bk,KXe),e(im,ZXe),e(A,eze),e(A,dm),e(dm,_oe),e(_oe,oze),e(dm,rze),e(dm,vk),e(vk,tze),e(dm,aze),e(A,nze),e(A,cm),e(cm,boe),e(boe,sze),e(cm,lze),e(cm,Fk),e(Fk,ize),e(cm,dze),e(A,cze),e(A,fm),e(fm,voe),e(voe,fze),e(fm,mze),e(fm,Tk),e(Tk,gze),e(fm,hze),e(A,pze),e(A,mm),e(mm,Foe),e(Foe,uze),e(mm,_ze),e(mm,Mk),e(Mk,bze),e(mm,vze),e(A,Fze),e(A,gm),e(gm,Toe),e(Toe,Tze),e(gm,Mze),e(gm,Ek),e(Ek,Eze),e(gm,Cze),e(A,wze),e(A,hm),e(hm,Moe),e(Moe,Aze),e(hm,yze),e(hm,Ck),e(Ck,Lze),e(hm,xze),e(A,$ze),e(A,pm),e(pm,Eoe),e(Eoe,kze),e(pm,Sze),e(pm,wk),e(wk,Rze),e(pm,Pze),e(A,Bze),e(A,um),e(um,Coe),e(Coe,Ize),e(um,qze),e(um,Ak),e(Ak,Nze),e(um,jze),e(A,Dze),e(A,_m),e(_m,woe),e(woe,Gze),e(_m,Oze),e(_m,yk),e(yk,Vze),e(_m,Xze),e(A,zze),e(A,bm),e(bm,Aoe),e(Aoe,Wze),e(bm,Qze),e(bm,Lk),e(Lk,Hze),e(bm,Uze),e(A,Jze),e(A,vm),e(vm,yoe),e(yoe,Yze),e(vm,Kze),e(vm,xk),e(xk,Zze),e(vm,eWe),e(A,oWe),e(A,Fm),e(Fm,Loe),e(Loe,rWe),e(Fm,tWe),e(Fm,$k),e($k,aWe),e(Fm,nWe),e(A,sWe),e(A,Tm),e(Tm,xoe),e(xoe,lWe),e(Tm,iWe),e(Tm,kk),e(kk,dWe),e(Tm,cWe),e(A,fWe),e(A,Mm),e(Mm,$oe),e($oe,mWe),e(Mm,gWe),e(Mm,Sk),e(Sk,hWe),e(Mm,pWe),e(A,uWe),e(A,Em),e(Em,koe),e(koe,_We),e(Em,bWe),e(Em,Rk),e(Rk,vWe),e(Em,FWe),e(A,TWe),e(A,Cm),e(Cm,Soe),e(Soe,MWe),e(Cm,EWe),e(Cm,Pk),e(Pk,CWe),e(Cm,wWe),e(A,AWe),e(A,wm),e(wm,Roe),e(Roe,yWe),e(wm,LWe),e(wm,Bk),e(Bk,xWe),e(wm,$We),e(A,kWe),e(A,Am),e(Am,Poe),e(Poe,SWe),e(Am,RWe),e(Am,Ik),e(Ik,PWe),e(Am,BWe),e(A,IWe),e(A,ym),e(ym,Boe),e(Boe,qWe),e(ym,NWe),e(ym,qk),e(qk,jWe),e(ym,DWe),e(A,GWe),e(A,Lm),e(Lm,Ioe),e(Ioe,OWe),e(Lm,VWe),e(Lm,Nk),e(Nk,XWe),e(Lm,zWe),e(A,WWe),e(A,xm),e(xm,qoe),e(qoe,QWe),e(xm,HWe),e(xm,jk),e(jk,UWe),e(xm,JWe),e(A,YWe),e(A,$m),e($m,Noe),e(Noe,KWe),e($m,ZWe),e($m,Dk),e(Dk,eQe),e($m,oQe),e(A,rQe),e(A,km),e(km,joe),e(joe,tQe),e(km,aQe),e(km,Gk),e(Gk,nQe),e(km,sQe),e(A,lQe),e(A,Sm),e(Sm,Doe),e(Doe,iQe),e(Sm,dQe),e(Sm,Ok),e(Ok,cQe),e(Sm,fQe),e(A,mQe),e(A,Rm),e(Rm,Goe),e(Goe,gQe),e(Rm,hQe),e(Rm,Vk),e(Vk,pQe),e(Rm,uQe),e(A,_Qe),e(A,Pm),e(Pm,Ooe),e(Ooe,bQe),e(Pm,vQe),e(Pm,Xk),e(Xk,FQe),e(Pm,TQe),e(A,MQe),e(A,Bm),e(Bm,Voe),e(Voe,EQe),e(Bm,CQe),e(Bm,zk),e(zk,wQe),e(Bm,AQe),e(A,yQe),e(A,Im),e(Im,Xoe),e(Xoe,LQe),e(Im,xQe),e(Im,Wk),e(Wk,$Qe),e(Im,kQe),e(A,SQe),e(A,qm),e(qm,zoe),e(zoe,RQe),e(qm,PQe),e(qm,Qk),e(Qk,BQe),e(qm,IQe),e(A,qQe),e(A,Nm),e(Nm,Woe),e(Woe,NQe),e(Nm,jQe),e(Nm,Hk),e(Hk,DQe),e(Nm,GQe),e(A,OQe),e(A,jm),e(jm,Qoe),e(Qoe,VQe),e(jm,XQe),e(jm,Uk),e(Uk,zQe),e(jm,WQe),e(A,QQe),e(A,Dm),e(Dm,Hoe),e(Hoe,HQe),e(Dm,UQe),e(Dm,Jk),e(Jk,JQe),e(Dm,YQe),e(A,KQe),e(A,Gm),e(Gm,Uoe),e(Uoe,ZQe),e(Gm,eHe),e(Gm,Yk),e(Yk,oHe),e(Gm,rHe),e(A,tHe),e(A,Om),e(Om,Joe),e(Joe,aHe),e(Om,nHe),e(Om,Kk),e(Kk,sHe),e(Om,lHe),e(A,iHe),e(A,Vm),e(Vm,Yoe),e(Yoe,dHe),e(Vm,cHe),e(Vm,Zk),e(Zk,fHe),e(Vm,mHe),e(A,gHe),e(A,Xm),e(Xm,Koe),e(Koe,hHe),e(Xm,pHe),e(Xm,eS),e(eS,uHe),e(Xm,_He),e(A,bHe),e(A,zm),e(zm,Zoe),e(Zoe,vHe),e(zm,FHe),e(zm,oS),e(oS,THe),e(zm,MHe),e(A,EHe),e(A,Wm),e(Wm,ere),e(ere,CHe),e(Wm,wHe),e(Wm,rS),e(rS,AHe),e(Wm,yHe),e(A,LHe),e(A,Qm),e(Qm,ore),e(ore,xHe),e(Qm,$He),e(Qm,tS),e(tS,kHe),e(Qm,SHe),e(A,RHe),e(A,Hm),e(Hm,rre),e(rre,PHe),e(Hm,BHe),e(Hm,aS),e(aS,IHe),e(Hm,qHe),e(A,NHe),e(A,Um),e(Um,tre),e(tre,jHe),e(Um,DHe),e(Um,nS),e(nS,GHe),e(Um,OHe),e(A,VHe),e(A,Jm),e(Jm,are),e(are,XHe),e(Jm,zHe),e(Jm,sS),e(sS,WHe),e(Jm,QHe),e(A,HHe),e(A,Ym),e(Ym,nre),e(nre,UHe),e(Ym,JHe),e(Ym,lS),e(lS,YHe),e(Ym,KHe),e(A,ZHe),e(A,Km),e(Km,sre),e(sre,eUe),e(Km,oUe),e(Km,iS),e(iS,rUe),e(Km,tUe),e(A,aUe),e(A,Zm),e(Zm,lre),e(lre,nUe),e(Zm,sUe),e(Zm,dS),e(dS,lUe),e(Zm,iUe),e(A,dUe),e(A,eg),e(eg,ire),e(ire,cUe),e(eg,fUe),e(eg,cS),e(cS,mUe),e(eg,gUe),e(A,hUe),e(A,og),e(og,dre),e(dre,pUe),e(og,uUe),e(og,fS),e(fS,_Ue),e(og,bUe),e(A,vUe),e(A,rg),e(rg,cre),e(cre,FUe),e(rg,TUe),e(rg,mS),e(mS,MUe),e(rg,EUe),e(A,CUe),e(A,tg),e(tg,fre),e(fre,wUe),e(tg,AUe),e(tg,gS),e(gS,yUe),e(tg,LUe),e(A,xUe),e(A,ag),e(ag,mre),e(mre,$Ue),e(ag,kUe),e(ag,hS),e(hS,SUe),e(ag,RUe),e(A,PUe),e(A,ng),e(ng,gre),e(gre,BUe),e(ng,IUe),e(ng,pS),e(pS,qUe),e(ng,NUe),e(A,jUe),e(A,sg),e(sg,hre),e(hre,DUe),e(sg,GUe),e(sg,uS),e(uS,OUe),e(sg,VUe),e(A,XUe),e(A,lg),e(lg,pre),e(pre,zUe),e(lg,WUe),e(lg,_S),e(_S,QUe),e(lg,HUe),e(A,UUe),e(A,ig),e(ig,ure),e(ure,JUe),e(ig,YUe),e(ig,bS),e(bS,KUe),e(ig,ZUe),e(A,eJe),e(A,dg),e(dg,_re),e(_re,oJe),e(dg,rJe),e(dg,vS),e(vS,tJe),e(dg,aJe),e(A,nJe),e(A,cg),e(cg,bre),e(bre,sJe),e(cg,lJe),e(cg,FS),e(FS,iJe),e(cg,dJe),e(A,cJe),e(A,fg),e(fg,vre),e(vre,fJe),e(fg,mJe),e(fg,TS),e(TS,gJe),e(fg,hJe),e(A,pJe),e(A,mg),e(mg,Fre),e(Fre,uJe),e(mg,_Je),e(mg,MS),e(MS,bJe),e(mg,vJe),e(A,FJe),e(A,gg),e(gg,Tre),e(Tre,TJe),e(gg,MJe),e(gg,ES),e(ES,EJe),e(gg,CJe),e(A,wJe),e(A,hg),e(hg,Mre),e(Mre,AJe),e(hg,yJe),e(hg,CS),e(CS,LJe),e(hg,xJe),e(A,$Je),e(A,pg),e(pg,Ere),e(Ere,kJe),e(pg,SJe),e(pg,wS),e(wS,RJe),e(pg,PJe),e(A,BJe),e(A,ug),e(ug,Cre),e(Cre,IJe),e(ug,qJe),e(ug,AS),e(AS,NJe),e(ug,jJe),e(A,DJe),e(A,_g),e(_g,wre),e(wre,GJe),e(_g,OJe),e(_g,yS),e(yS,VJe),e(_g,XJe),e(A,zJe),e(A,bg),e(bg,Are),e(Are,WJe),e(bg,QJe),e(bg,LS),e(LS,HJe),e(bg,UJe),e(Er,JJe),M(vg,Er,null),e(Co,YJe),e(Co,Fg),M(h0,Fg,null),e(Fg,KJe),e(Fg,yre),e(yre,ZJe),b(f,RIe,_),b(f,Ti,_),e(Ti,Tg),e(Tg,Lre),M(p0,Lre,null),e(Ti,eYe),e(Ti,xre),e(xre,oYe),b(f,PIe,_),b(f,wo,_),M(u0,wo,null),e(wo,rYe),e(wo,_0),e(_0,tYe),e(_0,xS),e(xS,aYe),e(_0,nYe),e(wo,sYe),e(wo,b0),e(b0,lYe),e(b0,$re),e($re,iYe),e(b0,dYe),e(wo,cYe),e(wo,Cr),M(v0,Cr,null),e(Cr,fYe),e(Cr,kre),e(kre,mYe),e(Cr,gYe),e(Cr,Aa),e(Aa,hYe),e(Aa,Sre),e(Sre,pYe),e(Aa,uYe),e(Aa,Rre),e(Rre,_Ye),e(Aa,bYe),e(Aa,Pre),e(Pre,vYe),e(Aa,FYe),e(Cr,TYe),e(Cr,k),e(k,Sn),e(Sn,Bre),e(Bre,MYe),e(Sn,EYe),e(Sn,$S),e($S,CYe),e(Sn,wYe),e(Sn,kS),e(kS,AYe),e(Sn,yYe),e(k,LYe),e(k,Rn),e(Rn,Ire),e(Ire,xYe),e(Rn,$Ye),e(Rn,SS),e(SS,kYe),e(Rn,SYe),e(Rn,RS),e(RS,RYe),e(Rn,PYe),e(k,BYe),e(k,Pn),e(Pn,qre),e(qre,IYe),e(Pn,qYe),e(Pn,PS),e(PS,NYe),e(Pn,jYe),e(Pn,BS),e(BS,DYe),e(Pn,GYe),e(k,OYe),e(k,Bn),e(Bn,Nre),e(Nre,VYe),e(Bn,XYe),e(Bn,IS),e(IS,zYe),e(Bn,WYe),e(Bn,qS),e(qS,QYe),e(Bn,HYe),e(k,UYe),e(k,In),e(In,jre),e(jre,JYe),e(In,YYe),e(In,NS),e(NS,KYe),e(In,ZYe),e(In,jS),e(jS,eKe),e(In,oKe),e(k,rKe),e(k,Mg),e(Mg,Dre),e(Dre,tKe),e(Mg,aKe),e(Mg,DS),e(DS,nKe),e(Mg,sKe),e(k,lKe),e(k,Eg),e(Eg,Gre),e(Gre,iKe),e(Eg,dKe),e(Eg,GS),e(GS,cKe),e(Eg,fKe),e(k,mKe),e(k,Cg),e(Cg,Ore),e(Ore,gKe),e(Cg,hKe),e(Cg,OS),e(OS,pKe),e(Cg,uKe),e(k,_Ke),e(k,qn),e(qn,Vre),e(Vre,bKe),e(qn,vKe),e(qn,VS),e(VS,FKe),e(qn,TKe),e(qn,XS),e(XS,MKe),e(qn,EKe),e(k,CKe),e(k,Nn),e(Nn,Xre),e(Xre,wKe),e(Nn,AKe),e(Nn,zS),e(zS,yKe),e(Nn,LKe),e(Nn,WS),e(WS,xKe),e(Nn,$Ke),e(k,kKe),e(k,jn),e(jn,zre),e(zre,SKe),e(jn,RKe),e(jn,QS),e(QS,PKe),e(jn,BKe),e(jn,HS),e(HS,IKe),e(jn,qKe),e(k,NKe),e(k,wg),e(wg,Wre),e(Wre,jKe),e(wg,DKe),e(wg,US),e(US,GKe),e(wg,OKe),e(k,VKe),e(k,Ag),e(Ag,Qre),e(Qre,XKe),e(Ag,zKe),e(Ag,JS),e(JS,WKe),e(Ag,QKe),e(k,HKe),e(k,Dn),e(Dn,Hre),e(Hre,UKe),e(Dn,JKe),e(Dn,YS),e(YS,YKe),e(Dn,KKe),e(Dn,KS),e(KS,ZKe),e(Dn,eZe),e(k,oZe),e(k,yg),e(yg,Ure),e(Ure,rZe),e(yg,tZe),e(yg,ZS),e(ZS,aZe),e(yg,nZe),e(k,sZe),e(k,Gn),e(Gn,Jre),e(Jre,lZe),e(Gn,iZe),e(Gn,eR),e(eR,dZe),e(Gn,cZe),e(Gn,oR),e(oR,fZe),e(Gn,mZe),e(k,gZe),e(k,On),e(On,Yre),e(Yre,hZe),e(On,pZe),e(On,rR),e(rR,uZe),e(On,_Ze),e(On,tR),e(tR,bZe),e(On,vZe),e(k,FZe),e(k,Vn),e(Vn,Kre),e(Kre,TZe),e(Vn,MZe),e(Vn,aR),e(aR,EZe),e(Vn,CZe),e(Vn,nR),e(nR,wZe),e(Vn,AZe),e(k,yZe),e(k,Lg),e(Lg,Zre),e(Zre,LZe),e(Lg,xZe),e(Lg,sR),e(sR,$Ze),e(Lg,kZe),e(k,SZe),e(k,Xn),e(Xn,ete),e(ete,RZe),e(Xn,PZe),e(Xn,lR),e(lR,BZe),e(Xn,IZe),e(Xn,iR),e(iR,qZe),e(Xn,NZe),e(k,jZe),e(k,zn),e(zn,ote),e(ote,DZe),e(zn,GZe),e(zn,dR),e(dR,OZe),e(zn,VZe),e(zn,cR),e(cR,XZe),e(zn,zZe),e(k,WZe),e(k,Wn),e(Wn,rte),e(rte,QZe),e(Wn,HZe),e(Wn,fR),e(fR,UZe),e(Wn,JZe),e(Wn,mR),e(mR,YZe),e(Wn,KZe),e(k,ZZe),e(k,Qn),e(Qn,tte),e(tte,eeo),e(Qn,oeo),e(Qn,gR),e(gR,reo),e(Qn,teo),e(Qn,hR),e(hR,aeo),e(Qn,neo),e(k,seo),e(k,Hn),e(Hn,ate),e(ate,leo),e(Hn,ieo),e(Hn,pR),e(pR,deo),e(Hn,ceo),e(Hn,uR),e(uR,feo),e(Hn,meo),e(k,geo),e(k,Un),e(Un,nte),e(nte,heo),e(Un,peo),e(Un,_R),e(_R,ueo),e(Un,_eo),e(Un,bR),e(bR,beo),e(Un,veo),e(k,Feo),e(k,xg),e(xg,ste),e(ste,Teo),e(xg,Meo),e(xg,vR),e(vR,Eeo),e(xg,Ceo),e(k,weo),e(k,Jn),e(Jn,lte),e(lte,Aeo),e(Jn,yeo),e(Jn,FR),e(FR,Leo),e(Jn,xeo),e(Jn,TR),e(TR,$eo),e(Jn,keo),e(k,Seo),e(k,$g),e($g,ite),e(ite,Reo),e($g,Peo),e($g,MR),e(MR,Beo),e($g,Ieo),e(k,qeo),e(k,Yn),e(Yn,dte),e(dte,Neo),e(Yn,jeo),e(Yn,ER),e(ER,Deo),e(Yn,Geo),e(Yn,CR),e(CR,Oeo),e(Yn,Veo),e(k,Xeo),e(k,Kn),e(Kn,cte),e(cte,zeo),e(Kn,Weo),e(Kn,wR),e(wR,Qeo),e(Kn,Heo),e(Kn,AR),e(AR,Ueo),e(Kn,Jeo),e(k,Yeo),e(k,Zn),e(Zn,fte),e(fte,Keo),e(Zn,Zeo),e(Zn,yR),e(yR,eoo),e(Zn,ooo),e(Zn,LR),e(LR,roo),e(Zn,too),e(k,aoo),e(k,es),e(es,mte),e(mte,noo),e(es,soo),e(es,xR),e(xR,loo),e(es,ioo),e(es,$R),e($R,doo),e(es,coo),e(k,foo),e(k,os),e(os,gte),e(gte,moo),e(os,goo),e(os,kR),e(kR,hoo),e(os,poo),e(os,SR),e(SR,uoo),e(os,_oo),e(k,boo),e(k,kg),e(kg,hte),e(hte,voo),e(kg,Foo),e(kg,RR),e(RR,Too),e(kg,Moo),e(k,Eoo),e(k,rs),e(rs,pte),e(pte,Coo),e(rs,woo),e(rs,PR),e(PR,Aoo),e(rs,yoo),e(rs,BR),e(BR,Loo),e(rs,xoo),e(k,$oo),e(k,ts),e(ts,ute),e(ute,koo),e(ts,Soo),e(ts,IR),e(IR,Roo),e(ts,Poo),e(ts,qR),e(qR,Boo),e(ts,Ioo),e(k,qoo),e(k,as),e(as,_te),e(_te,Noo),e(as,joo),e(as,NR),e(NR,Doo),e(as,Goo),e(as,jR),e(jR,Ooo),e(as,Voo),e(k,Xoo),e(k,ns),e(ns,bte),e(bte,zoo),e(ns,Woo),e(ns,DR),e(DR,Qoo),e(ns,Hoo),e(ns,GR),e(GR,Uoo),e(ns,Joo),e(k,Yoo),e(k,ss),e(ss,vte),e(vte,Koo),e(ss,Zoo),e(ss,OR),e(OR,ero),e(ss,oro),e(ss,VR),e(VR,rro),e(ss,tro),e(k,aro),e(k,ls),e(ls,Fte),e(Fte,nro),e(ls,sro),e(ls,XR),e(XR,lro),e(ls,iro),e(ls,zR),e(zR,dro),e(ls,cro),e(k,fro),e(k,Sg),e(Sg,Tte),e(Tte,mro),e(Sg,gro),e(Sg,WR),e(WR,hro),e(Sg,pro),e(k,uro),e(k,is),e(is,Mte),e(Mte,_ro),e(is,bro),e(is,QR),e(QR,vro),e(is,Fro),e(is,HR),e(HR,Tro),e(is,Mro),e(k,Ero),e(k,Rg),e(Rg,Ete),e(Ete,Cro),e(Rg,wro),e(Rg,UR),e(UR,Aro),e(Rg,yro),e(k,Lro),e(k,Pg),e(Pg,Cte),e(Cte,xro),e(Pg,$ro),e(Pg,JR),e(JR,kro),e(Pg,Sro),e(k,Rro),e(k,ds),e(ds,wte),e(wte,Pro),e(ds,Bro),e(ds,YR),e(YR,Iro),e(ds,qro),e(ds,KR),e(KR,Nro),e(ds,jro),e(k,Dro),e(k,cs),e(cs,Ate),e(Ate,Gro),e(cs,Oro),e(cs,ZR),e(ZR,Vro),e(cs,Xro),e(cs,eP),e(eP,zro),e(cs,Wro),e(k,Qro),e(k,fs),e(fs,yte),e(yte,Hro),e(fs,Uro),e(fs,oP),e(oP,Jro),e(fs,Yro),e(fs,rP),e(rP,Kro),e(fs,Zro),e(k,eto),e(k,Bg),e(Bg,Lte),e(Lte,oto),e(Bg,rto),e(Bg,tP),e(tP,tto),e(Bg,ato),e(k,nto),e(k,ms),e(ms,xte),e(xte,sto),e(ms,lto),e(ms,aP),e(aP,ito),e(ms,dto),e(ms,nP),e(nP,cto),e(ms,fto),e(k,mto),e(k,gs),e(gs,$te),e($te,gto),e(gs,hto),e(gs,sP),e(sP,pto),e(gs,uto),e(gs,lP),e(lP,_to),e(gs,bto),e(k,vto),e(k,hs),e(hs,kte),e(kte,Fto),e(hs,Tto),e(hs,iP),e(iP,Mto),e(hs,Eto),e(hs,dP),e(dP,Cto),e(hs,wto),e(k,Ato),e(k,ps),e(ps,Ste),e(Ste,yto),e(ps,Lto),e(ps,cP),e(cP,xto),e(ps,$to),e(ps,fP),e(fP,kto),e(ps,Sto),e(k,Rto),e(k,us),e(us,Rte),e(Rte,Pto),e(us,Bto),e(us,mP),e(mP,Ito),e(us,qto),e(us,gP),e(gP,Nto),e(us,jto),e(k,Dto),e(k,Ig),e(Ig,Pte),e(Pte,Gto),e(Ig,Oto),e(Ig,hP),e(hP,Vto),e(Ig,Xto),e(k,zto),e(k,_s),e(_s,Bte),e(Bte,Wto),e(_s,Qto),e(_s,pP),e(pP,Hto),e(_s,Uto),e(_s,uP),e(uP,Jto),e(_s,Yto),e(k,Kto),e(k,qg),e(qg,Ite),e(Ite,Zto),e(qg,eao),e(qg,_P),e(_P,oao),e(qg,rao),e(k,tao),e(k,Ng),e(Ng,qte),e(qte,aao),e(Ng,nao),e(Ng,bP),e(bP,sao),e(Ng,lao),e(k,iao),e(k,jg),e(jg,Nte),e(Nte,dao),e(jg,cao),e(jg,vP),e(vP,fao),e(jg,mao),e(k,gao),e(k,Dg),e(Dg,jte),e(jte,hao),e(Dg,pao),e(Dg,FP),e(FP,uao),e(Dg,_ao),e(k,bao),e(k,bs),e(bs,Dte),e(Dte,vao),e(bs,Fao),e(bs,TP),e(TP,Tao),e(bs,Mao),e(bs,MP),e(MP,Eao),e(bs,Cao),e(k,wao),e(k,Gg),e(Gg,Gte),e(Gte,Aao),e(Gg,yao),e(Gg,EP),e(EP,Lao),e(Gg,xao),e(k,$ao),e(k,vs),e(vs,Ote),e(Ote,kao),e(vs,Sao),e(vs,CP),e(CP,Rao),e(vs,Pao),e(vs,wP),e(wP,Bao),e(vs,Iao),e(k,qao),e(k,Fs),e(Fs,Vte),e(Vte,Nao),e(Fs,jao),e(Fs,AP),e(AP,Dao),e(Fs,Gao),e(Fs,yP),e(yP,Oao),e(Fs,Vao),e(k,Xao),e(k,Ts),e(Ts,Xte),e(Xte,zao),e(Ts,Wao),e(Ts,LP),e(LP,Qao),e(Ts,Hao),e(Ts,xP),e(xP,Uao),e(Ts,Jao),e(k,Yao),e(k,Ms),e(Ms,zte),e(zte,Kao),e(Ms,Zao),e(Ms,$P),e($P,eno),e(Ms,ono),e(Ms,kP),e(kP,rno),e(Ms,tno),e(k,ano),e(k,Es),e(Es,Wte),e(Wte,nno),e(Es,sno),e(Es,SP),e(SP,lno),e(Es,ino),e(Es,RP),e(RP,dno),e(Es,cno),e(k,fno),e(k,Cs),e(Cs,Qte),e(Qte,mno),e(Cs,gno),e(Cs,PP),e(PP,hno),e(Cs,pno),e(Cs,BP),e(BP,uno),e(Cs,_no),e(k,bno),e(k,Og),e(Og,Hte),e(Hte,vno),e(Og,Fno),e(Og,IP),e(IP,Tno),e(Og,Mno),e(k,Eno),e(k,Vg),e(Vg,Ute),e(Ute,Cno),e(Vg,wno),e(Vg,qP),e(qP,Ano),e(Vg,yno),e(k,Lno),e(k,ws),e(ws,Jte),e(Jte,xno),e(ws,$no),e(ws,NP),e(NP,kno),e(ws,Sno),e(ws,jP),e(jP,Rno),e(ws,Pno),e(k,Bno),e(k,As),e(As,Yte),e(Yte,Ino),e(As,qno),e(As,DP),e(DP,Nno),e(As,jno),e(As,GP),e(GP,Dno),e(As,Gno),e(k,Ono),e(k,ys),e(ys,Kte),e(Kte,Vno),e(ys,Xno),e(ys,OP),e(OP,zno),e(ys,Wno),e(ys,VP),e(VP,Qno),e(ys,Hno),e(k,Uno),e(k,Xg),e(Xg,Zte),e(Zte,Jno),e(Xg,Yno),e(Xg,XP),e(XP,Kno),e(Xg,Zno),e(k,eso),e(k,zg),e(zg,eae),e(eae,oso),e(zg,rso),e(zg,zP),e(zP,tso),e(zg,aso),e(k,nso),e(k,Wg),e(Wg,oae),e(oae,sso),e(Wg,lso),e(Wg,WP),e(WP,iso),e(Wg,dso),e(k,cso),e(k,Ls),e(Ls,rae),e(rae,fso),e(Ls,mso),e(Ls,QP),e(QP,gso),e(Ls,hso),e(Ls,HP),e(HP,pso),e(Ls,uso),e(k,_so),e(k,Qg),e(Qg,tae),e(tae,bso),e(Qg,vso),e(Qg,UP),e(UP,Fso),e(Qg,Tso),e(k,Mso),e(k,Hg),e(Hg,aae),e(aae,Eso),e(Hg,Cso),e(Hg,JP),e(JP,wso),e(Hg,Aso),e(k,yso),e(k,Ug),e(Ug,nae),e(nae,Lso),e(Ug,xso),e(Ug,YP),e(YP,$so),e(Ug,kso),e(k,Sso),e(k,xs),e(xs,sae),e(sae,Rso),e(xs,Pso),e(xs,KP),e(KP,Bso),e(xs,Iso),e(xs,ZP),e(ZP,qso),e(xs,Nso),e(k,jso),e(k,Jg),e(Jg,lae),e(lae,Dso),e(Jg,Gso),e(Jg,eB),e(eB,Oso),e(Jg,Vso),e(k,Xso),e(k,Yg),e(Yg,iae),e(iae,zso),e(Yg,Wso),e(Yg,oB),e(oB,Qso),e(Yg,Hso),e(k,Uso),e(k,$s),e($s,dae),e(dae,Jso),e($s,Yso),e($s,rB),e(rB,Kso),e($s,Zso),e($s,tB),e(tB,elo),e($s,olo),e(k,rlo),e(k,ks),e(ks,cae),e(cae,tlo),e(ks,alo),e(ks,aB),e(aB,nlo),e(ks,slo),e(ks,nB),e(nB,llo),e(ks,ilo),e(k,dlo),e(k,Ss),e(Ss,fae),e(fae,clo),e(Ss,flo),e(Ss,sB),e(sB,mlo),e(Ss,glo),e(Ss,lB),e(lB,hlo),e(Ss,plo),e(k,ulo),e(k,Rs),e(Rs,mae),e(mae,_lo),e(Rs,blo),e(Rs,iB),e(iB,vlo),e(Rs,Flo),e(Rs,dB),e(dB,Tlo),e(Rs,Mlo),e(Cr,Elo),M(Kg,Cr,null),e(wo,Clo),e(wo,Zg),M(F0,Zg,null),e(Zg,wlo),e(Zg,gae),e(gae,Alo),b(f,BIe,_),b(f,Mi,_),e(Mi,eh),e(eh,hae),M(T0,hae,null),e(Mi,ylo),e(Mi,pae),e(pae,Llo),b(f,IIe,_),b(f,Ao,_),M(M0,Ao,null),e(Ao,xlo),e(Ao,E0),e(E0,$lo),e(E0,cB),e(cB,klo),e(E0,Slo),e(Ao,Rlo),e(Ao,C0),e(C0,Plo),e(C0,uae),e(uae,Blo),e(C0,Ilo),e(Ao,qlo),e(Ao,He),M(w0,He,null),e(He,Nlo),e(He,_ae),e(_ae,jlo),e(He,Dlo),e(He,ya),e(ya,Glo),e(ya,bae),e(bae,Olo),e(ya,Vlo),e(ya,vae),e(vae,Xlo),e(ya,zlo),e(ya,Fae),e(Fae,Wlo),e(ya,Qlo),e(He,Hlo),e(He,Z),e(Z,oh),e(oh,Tae),e(Tae,Ulo),e(oh,Jlo),e(oh,fB),e(fB,Ylo),e(oh,Klo),e(Z,Zlo),e(Z,rh),e(rh,Mae),e(Mae,eio),e(rh,oio),e(rh,mB),e(mB,rio),e(rh,tio),e(Z,aio),e(Z,th),e(th,Eae),e(Eae,nio),e(th,sio),e(th,gB),e(gB,lio),e(th,iio),e(Z,dio),e(Z,ah),e(ah,Cae),e(Cae,cio),e(ah,fio),e(ah,hB),e(hB,mio),e(ah,gio),e(Z,hio),e(Z,nh),e(nh,wae),e(wae,pio),e(nh,uio),e(nh,pB),e(pB,_io),e(nh,bio),e(Z,vio),e(Z,sh),e(sh,Aae),e(Aae,Fio),e(sh,Tio),e(sh,uB),e(uB,Mio),e(sh,Eio),e(Z,Cio),e(Z,lh),e(lh,yae),e(yae,wio),e(lh,Aio),e(lh,_B),e(_B,yio),e(lh,Lio),e(Z,xio),e(Z,ih),e(ih,Lae),e(Lae,$io),e(ih,kio),e(ih,bB),e(bB,Sio),e(ih,Rio),e(Z,Pio),e(Z,dh),e(dh,xae),e(xae,Bio),e(dh,Iio),e(dh,vB),e(vB,qio),e(dh,Nio),e(Z,jio),e(Z,ch),e(ch,$ae),e($ae,Dio),e(ch,Gio),e(ch,FB),e(FB,Oio),e(ch,Vio),e(Z,Xio),e(Z,fh),e(fh,kae),e(kae,zio),e(fh,Wio),e(fh,TB),e(TB,Qio),e(fh,Hio),e(Z,Uio),e(Z,mh),e(mh,Sae),e(Sae,Jio),e(mh,Yio),e(mh,MB),e(MB,Kio),e(mh,Zio),e(Z,edo),e(Z,gh),e(gh,Rae),e(Rae,odo),e(gh,rdo),e(gh,EB),e(EB,tdo),e(gh,ado),e(Z,ndo),e(Z,hh),e(hh,Pae),e(Pae,sdo),e(hh,ldo),e(hh,CB),e(CB,ido),e(hh,ddo),e(Z,cdo),e(Z,ph),e(ph,Bae),e(Bae,fdo),e(ph,mdo),e(ph,wB),e(wB,gdo),e(ph,hdo),e(Z,pdo),e(Z,uh),e(uh,Iae),e(Iae,udo),e(uh,_do),e(uh,AB),e(AB,bdo),e(uh,vdo),e(Z,Fdo),e(Z,_h),e(_h,qae),e(qae,Tdo),e(_h,Mdo),e(_h,yB),e(yB,Edo),e(_h,Cdo),e(Z,wdo),e(Z,bh),e(bh,Nae),e(Nae,Ado),e(bh,ydo),e(bh,LB),e(LB,Ldo),e(bh,xdo),e(Z,$do),e(Z,vh),e(vh,jae),e(jae,kdo),e(vh,Sdo),e(vh,xB),e(xB,Rdo),e(vh,Pdo),e(Z,Bdo),e(Z,Fh),e(Fh,Dae),e(Dae,Ido),e(Fh,qdo),e(Fh,$B),e($B,Ndo),e(Fh,jdo),e(Z,Ddo),e(Z,Th),e(Th,Gae),e(Gae,Gdo),e(Th,Odo),e(Th,kB),e(kB,Vdo),e(Th,Xdo),e(Z,zdo),e(Z,Mh),e(Mh,Oae),e(Oae,Wdo),e(Mh,Qdo),e(Mh,SB),e(SB,Hdo),e(Mh,Udo),e(Z,Jdo),e(Z,Eh),e(Eh,Vae),e(Vae,Ydo),e(Eh,Kdo),e(Eh,RB),e(RB,Zdo),e(Eh,eco),e(Z,oco),e(Z,Ch),e(Ch,Xae),e(Xae,rco),e(Ch,tco),e(Ch,PB),e(PB,aco),e(Ch,nco),e(Z,sco),e(Z,wh),e(wh,zae),e(zae,lco),e(wh,ico),e(wh,BB),e(BB,dco),e(wh,cco),e(Z,fco),e(Z,Ah),e(Ah,Wae),e(Wae,mco),e(Ah,gco),e(Ah,IB),e(IB,hco),e(Ah,pco),e(He,uco),M(yh,He,null),e(He,_co),M(Lh,He,null),e(Ao,bco),e(Ao,xh),M(A0,xh,null),e(xh,vco),e(xh,Qae),e(Qae,Fco),b(f,qIe,_),b(f,Ei,_),e(Ei,$h),e($h,Hae),M(y0,Hae,null),e(Ei,Tco),e(Ei,Uae),e(Uae,Mco),b(f,NIe,_),b(f,yo,_),M(L0,yo,null),e(yo,Eco),e(yo,x0),e(x0,Cco),e(x0,qB),e(qB,wco),e(x0,Aco),e(yo,yco),e(yo,$0),e($0,Lco),e($0,Jae),e(Jae,xco),e($0,$co),e(yo,kco),e(yo,Ue),M(k0,Ue,null),e(Ue,Sco),e(Ue,Yae),e(Yae,Rco),e(Ue,Pco),e(Ue,Ci),e(Ci,Bco),e(Ci,Kae),e(Kae,Ico),e(Ci,qco),e(Ci,Zae),e(Zae,Nco),e(Ci,jco),e(Ue,Dco),e(Ue,pe),e(pe,kh),e(kh,ene),e(ene,Gco),e(kh,Oco),e(kh,NB),e(NB,Vco),e(kh,Xco),e(pe,zco),e(pe,Sh),e(Sh,one),e(one,Wco),e(Sh,Qco),e(Sh,rne),e(rne,Hco),e(Sh,Uco),e(pe,Jco),e(pe,Rh),e(Rh,tne),e(tne,Yco),e(Rh,Kco),e(Rh,jB),e(jB,Zco),e(Rh,efo),e(pe,ofo),e(pe,Ph),e(Ph,ane),e(ane,rfo),e(Ph,tfo),e(Ph,DB),e(DB,afo),e(Ph,nfo),e(pe,sfo),e(pe,Bh),e(Bh,nne),e(nne,lfo),e(Bh,ifo),e(Bh,GB),e(GB,dfo),e(Bh,cfo),e(pe,ffo),e(pe,Ih),e(Ih,sne),e(sne,mfo),e(Ih,gfo),e(Ih,OB),e(OB,hfo),e(Ih,pfo),e(pe,ufo),e(pe,qh),e(qh,lne),e(lne,_fo),e(qh,bfo),e(qh,VB),e(VB,vfo),e(qh,Ffo),e(pe,Tfo),e(pe,Nh),e(Nh,ine),e(ine,Mfo),e(Nh,Efo),e(Nh,XB),e(XB,Cfo),e(Nh,wfo),e(pe,Afo),e(pe,jh),e(jh,dne),e(dne,yfo),e(jh,Lfo),e(jh,zB),e(zB,xfo),e(jh,$fo),e(pe,kfo),e(pe,Dh),e(Dh,cne),e(cne,Sfo),e(Dh,Rfo),e(Dh,WB),e(WB,Pfo),e(Dh,Bfo),e(pe,Ifo),e(pe,Gh),e(Gh,fne),e(fne,qfo),e(Gh,Nfo),e(Gh,QB),e(QB,jfo),e(Gh,Dfo),e(pe,Gfo),e(pe,Oh),e(Oh,mne),e(mne,Ofo),e(Oh,Vfo),e(Oh,HB),e(HB,Xfo),e(Oh,zfo),e(pe,Wfo),e(pe,Vh),e(Vh,gne),e(gne,Qfo),e(Vh,Hfo),e(Vh,UB),e(UB,Ufo),e(Vh,Jfo),e(pe,Yfo),e(pe,Xh),e(Xh,hne),e(hne,Kfo),e(Xh,Zfo),e(Xh,JB),e(JB,emo),e(Xh,omo),e(pe,rmo),e(pe,zh),e(zh,pne),e(pne,tmo),e(zh,amo),e(zh,YB),e(YB,nmo),e(zh,smo),e(pe,lmo),e(pe,Wh),e(Wh,une),e(une,imo),e(Wh,dmo),e(Wh,KB),e(KB,cmo),e(Wh,fmo),e(Ue,mmo),M(Qh,Ue,null),e(Ue,gmo),M(Hh,Ue,null),e(yo,hmo),e(yo,Uh),M(S0,Uh,null),e(Uh,pmo),e(Uh,_ne),e(_ne,umo),b(f,jIe,_),b(f,wi,_),e(wi,Jh),e(Jh,bne),M(R0,bne,null),e(wi,_mo),e(wi,vne),e(vne,bmo),b(f,DIe,_),b(f,Lo,_),M(P0,Lo,null),e(Lo,vmo),e(Lo,Ai),e(Ai,Fmo),e(Ai,ZB),e(ZB,Tmo),e(Ai,Mmo),e(Ai,eI),e(eI,Emo),e(Ai,Cmo),e(Lo,wmo),e(Lo,B0),e(B0,Amo),e(B0,Fne),e(Fne,ymo),e(B0,Lmo),e(Lo,xmo),e(Lo,tt),M(I0,tt,null),e(tt,$mo),e(tt,Tne),e(Tne,kmo),e(tt,Smo),e(tt,yi),e(yi,Rmo),e(yi,Mne),e(Mne,Pmo),e(yi,Bmo),e(yi,oI),e(oI,Imo),e(yi,qmo),e(tt,Nmo),M(Yh,tt,null),e(Lo,jmo),e(Lo,Je),M(q0,Je,null),e(Je,Dmo),e(Je,Ene),e(Ene,Gmo),e(Je,Omo),e(Je,La),e(La,Vmo),e(La,Cne),e(Cne,Xmo),e(La,zmo),e(La,wne),e(wne,Wmo),e(La,Qmo),e(La,Ane),e(Ane,Hmo),e(La,Umo),e(Je,Jmo),e(Je,x),e(x,Kh),e(Kh,yne),e(yne,Ymo),e(Kh,Kmo),e(Kh,rI),e(rI,Zmo),e(Kh,ego),e(x,ogo),e(x,Zh),e(Zh,Lne),e(Lne,rgo),e(Zh,tgo),e(Zh,tI),e(tI,ago),e(Zh,ngo),e(x,sgo),e(x,ep),e(ep,xne),e(xne,lgo),e(ep,igo),e(ep,aI),e(aI,dgo),e(ep,cgo),e(x,fgo),e(x,op),e(op,$ne),e($ne,mgo),e(op,ggo),e(op,nI),e(nI,hgo),e(op,pgo),e(x,ugo),e(x,rp),e(rp,kne),e(kne,_go),e(rp,bgo),e(rp,sI),e(sI,vgo),e(rp,Fgo),e(x,Tgo),e(x,tp),e(tp,Sne),e(Sne,Mgo),e(tp,Ego),e(tp,lI),e(lI,Cgo),e(tp,wgo),e(x,Ago),e(x,ap),e(ap,Rne),e(Rne,ygo),e(ap,Lgo),e(ap,iI),e(iI,xgo),e(ap,$go),e(x,kgo),e(x,np),e(np,Pne),e(Pne,Sgo),e(np,Rgo),e(np,dI),e(dI,Pgo),e(np,Bgo),e(x,Igo),e(x,sp),e(sp,Bne),e(Bne,qgo),e(sp,Ngo),e(sp,cI),e(cI,jgo),e(sp,Dgo),e(x,Ggo),e(x,lp),e(lp,Ine),e(Ine,Ogo),e(lp,Vgo),e(lp,fI),e(fI,Xgo),e(lp,zgo),e(x,Wgo),e(x,ip),e(ip,qne),e(qne,Qgo),e(ip,Hgo),e(ip,mI),e(mI,Ugo),e(ip,Jgo),e(x,Ygo),e(x,dp),e(dp,Nne),e(Nne,Kgo),e(dp,Zgo),e(dp,gI),e(gI,eho),e(dp,oho),e(x,rho),e(x,cp),e(cp,jne),e(jne,tho),e(cp,aho),e(cp,hI),e(hI,nho),e(cp,sho),e(x,lho),e(x,fp),e(fp,Dne),e(Dne,iho),e(fp,dho),e(fp,pI),e(pI,cho),e(fp,fho),e(x,mho),e(x,mp),e(mp,Gne),e(Gne,gho),e(mp,hho),e(mp,uI),e(uI,pho),e(mp,uho),e(x,_ho),e(x,gp),e(gp,One),e(One,bho),e(gp,vho),e(gp,_I),e(_I,Fho),e(gp,Tho),e(x,Mho),e(x,hp),e(hp,Vne),e(Vne,Eho),e(hp,Cho),e(hp,bI),e(bI,who),e(hp,Aho),e(x,yho),e(x,pp),e(pp,Xne),e(Xne,Lho),e(pp,xho),e(pp,vI),e(vI,$ho),e(pp,kho),e(x,Sho),e(x,up),e(up,zne),e(zne,Rho),e(up,Pho),e(up,FI),e(FI,Bho),e(up,Iho),e(x,qho),e(x,_p),e(_p,Wne),e(Wne,Nho),e(_p,jho),e(_p,TI),e(TI,Dho),e(_p,Gho),e(x,Oho),e(x,bp),e(bp,Qne),e(Qne,Vho),e(bp,Xho),e(bp,MI),e(MI,zho),e(bp,Who),e(x,Qho),e(x,vp),e(vp,Hne),e(Hne,Hho),e(vp,Uho),e(vp,EI),e(EI,Jho),e(vp,Yho),e(x,Kho),e(x,Fp),e(Fp,Une),e(Une,Zho),e(Fp,epo),e(Fp,CI),e(CI,opo),e(Fp,rpo),e(x,tpo),e(x,Tp),e(Tp,Jne),e(Jne,apo),e(Tp,npo),e(Tp,wI),e(wI,spo),e(Tp,lpo),e(x,ipo),e(x,Mp),e(Mp,Yne),e(Yne,dpo),e(Mp,cpo),e(Mp,AI),e(AI,fpo),e(Mp,mpo),e(x,gpo),e(x,Ep),e(Ep,Kne),e(Kne,hpo),e(Ep,ppo),e(Ep,yI),e(yI,upo),e(Ep,_po),e(x,bpo),e(x,Cp),e(Cp,Zne),e(Zne,vpo),e(Cp,Fpo),e(Cp,LI),e(LI,Tpo),e(Cp,Mpo),e(x,Epo),e(x,wp),e(wp,ese),e(ese,Cpo),e(wp,wpo),e(wp,xI),e(xI,Apo),e(wp,ypo),e(x,Lpo),e(x,Ap),e(Ap,ose),e(ose,xpo),e(Ap,$po),e(Ap,$I),e($I,kpo),e(Ap,Spo),e(x,Rpo),e(x,yp),e(yp,rse),e(rse,Ppo),e(yp,Bpo),e(yp,kI),e(kI,Ipo),e(yp,qpo),e(x,Npo),e(x,Lp),e(Lp,tse),e(tse,jpo),e(Lp,Dpo),e(Lp,SI),e(SI,Gpo),e(Lp,Opo),e(x,Vpo),e(x,Ps),e(Ps,ase),e(ase,Xpo),e(Ps,zpo),e(Ps,RI),e(RI,Wpo),e(Ps,Qpo),e(Ps,PI),e(PI,Hpo),e(Ps,Upo),e(x,Jpo),e(x,xp),e(xp,nse),e(nse,Ypo),e(xp,Kpo),e(xp,BI),e(BI,Zpo),e(xp,euo),e(x,ouo),e(x,$p),e($p,sse),e(sse,ruo),e($p,tuo),e($p,II),e(II,auo),e($p,nuo),e(x,suo),e(x,kp),e(kp,lse),e(lse,luo),e(kp,iuo),e(kp,qI),e(qI,duo),e(kp,cuo),e(x,fuo),e(x,Sp),e(Sp,ise),e(ise,muo),e(Sp,guo),e(Sp,NI),e(NI,huo),e(Sp,puo),e(x,uuo),e(x,Rp),e(Rp,dse),e(dse,_uo),e(Rp,buo),e(Rp,jI),e(jI,vuo),e(Rp,Fuo),e(x,Tuo),e(x,Pp),e(Pp,cse),e(cse,Muo),e(Pp,Euo),e(Pp,DI),e(DI,Cuo),e(Pp,wuo),e(x,Auo),e(x,Bp),e(Bp,fse),e(fse,yuo),e(Bp,Luo),e(Bp,GI),e(GI,xuo),e(Bp,$uo),e(x,kuo),e(x,Ip),e(Ip,mse),e(mse,Suo),e(Ip,Ruo),e(Ip,OI),e(OI,Puo),e(Ip,Buo),e(x,Iuo),e(x,qp),e(qp,gse),e(gse,quo),e(qp,Nuo),e(qp,VI),e(VI,juo),e(qp,Duo),e(x,Guo),e(x,Np),e(Np,hse),e(hse,Ouo),e(Np,Vuo),e(Np,XI),e(XI,Xuo),e(Np,zuo),e(x,Wuo),e(x,jp),e(jp,pse),e(pse,Quo),e(jp,Huo),e(jp,zI),e(zI,Uuo),e(jp,Juo),e(x,Yuo),e(x,Dp),e(Dp,use),e(use,Kuo),e(Dp,Zuo),e(Dp,WI),e(WI,e_o),e(Dp,o_o),e(x,r_o),e(x,Gp),e(Gp,_se),e(_se,t_o),e(Gp,a_o),e(Gp,QI),e(QI,n_o),e(Gp,s_o),e(x,l_o),e(x,Op),e(Op,bse),e(bse,i_o),e(Op,d_o),e(Op,HI),e(HI,c_o),e(Op,f_o),e(x,m_o),e(x,Vp),e(Vp,vse),e(vse,g_o),e(Vp,h_o),e(Vp,UI),e(UI,p_o),e(Vp,u_o),e(x,__o),e(x,Xp),e(Xp,Fse),e(Fse,b_o),e(Xp,v_o),e(Xp,JI),e(JI,F_o),e(Xp,T_o),e(x,M_o),e(x,zp),e(zp,Tse),e(Tse,E_o),e(zp,C_o),e(zp,YI),e(YI,w_o),e(zp,A_o),e(x,y_o),e(x,Wp),e(Wp,Mse),e(Mse,L_o),e(Wp,x_o),e(Wp,KI),e(KI,$_o),e(Wp,k_o),e(x,S_o),e(x,Qp),e(Qp,Ese),e(Ese,R_o),e(Qp,P_o),e(Qp,ZI),e(ZI,B_o),e(Qp,I_o),e(x,q_o),e(x,Hp),e(Hp,Cse),e(Cse,N_o),e(Hp,j_o),e(Hp,eq),e(eq,D_o),e(Hp,G_o),e(x,O_o),e(x,Up),e(Up,wse),e(wse,V_o),e(Up,X_o),e(Up,oq),e(oq,z_o),e(Up,W_o),e(x,Q_o),e(x,Jp),e(Jp,Ase),e(Ase,H_o),e(Jp,U_o),e(Jp,rq),e(rq,J_o),e(Jp,Y_o),e(x,K_o),e(x,Yp),e(Yp,yse),e(yse,Z_o),e(Yp,e2o),e(Yp,tq),e(tq,o2o),e(Yp,r2o),e(x,t2o),e(x,Kp),e(Kp,Lse),e(Lse,a2o),e(Kp,n2o),e(Kp,aq),e(aq,s2o),e(Kp,l2o),e(x,i2o),e(x,Zp),e(Zp,xse),e(xse,d2o),e(Zp,c2o),e(Zp,nq),e(nq,f2o),e(Zp,m2o),e(x,g2o),e(x,eu),e(eu,$se),e($se,h2o),e(eu,p2o),e(eu,sq),e(sq,u2o),e(eu,_2o),e(x,b2o),e(x,ou),e(ou,kse),e(kse,v2o),e(ou,F2o),e(ou,lq),e(lq,T2o),e(ou,M2o),e(x,E2o),e(x,ru),e(ru,Sse),e(Sse,C2o),e(ru,w2o),e(ru,iq),e(iq,A2o),e(ru,y2o),e(x,L2o),e(x,tu),e(tu,Rse),e(Rse,x2o),e(tu,$2o),e(tu,dq),e(dq,k2o),e(tu,S2o),e(x,R2o),e(x,au),e(au,Pse),e(Pse,P2o),e(au,B2o),e(au,cq),e(cq,I2o),e(au,q2o),e(x,N2o),e(x,nu),e(nu,Bse),e(Bse,j2o),e(nu,D2o),e(nu,fq),e(fq,G2o),e(nu,O2o),e(x,V2o),e(x,su),e(su,Ise),e(Ise,X2o),e(su,z2o),e(su,mq),e(mq,W2o),e(su,Q2o),e(x,H2o),e(x,lu),e(lu,qse),e(qse,U2o),e(lu,J2o),e(lu,gq),e(gq,Y2o),e(lu,K2o),e(x,Z2o),e(x,iu),e(iu,Nse),e(Nse,e1o),e(iu,o1o),e(iu,hq),e(hq,r1o),e(iu,t1o),e(x,a1o),e(x,du),e(du,jse),e(jse,n1o),e(du,s1o),e(du,pq),e(pq,l1o),e(du,i1o),e(x,d1o),e(x,cu),e(cu,Dse),e(Dse,c1o),e(cu,f1o),e(cu,uq),e(uq,m1o),e(cu,g1o),e(x,h1o),e(x,fu),e(fu,Gse),e(Gse,p1o),e(fu,u1o),e(fu,_q),e(_q,_1o),e(fu,b1o),e(x,v1o),e(x,mu),e(mu,Ose),e(Ose,F1o),e(mu,T1o),e(mu,bq),e(bq,M1o),e(mu,E1o),e(x,C1o),e(x,gu),e(gu,Vse),e(Vse,w1o),e(gu,A1o),e(gu,vq),e(vq,y1o),e(gu,L1o),e(x,x1o),e(x,hu),e(hu,Xse),e(Xse,$1o),e(hu,k1o),e(hu,Fq),e(Fq,S1o),e(hu,R1o),e(x,P1o),e(x,pu),e(pu,zse),e(zse,B1o),e(pu,I1o),e(pu,Tq),e(Tq,q1o),e(pu,N1o),e(x,j1o),e(x,uu),e(uu,Wse),e(Wse,D1o),e(uu,G1o),e(uu,Mq),e(Mq,O1o),e(uu,V1o),e(x,X1o),e(x,_u),e(_u,Qse),e(Qse,z1o),e(_u,W1o),e(_u,Eq),e(Eq,Q1o),e(_u,H1o),e(x,U1o),e(x,bu),e(bu,Hse),e(Hse,J1o),e(bu,Y1o),e(bu,Cq),e(Cq,K1o),e(bu,Z1o),e(x,ebo),e(x,vu),e(vu,Use),e(Use,obo),e(vu,rbo),e(vu,wq),e(wq,tbo),e(vu,abo),e(x,nbo),e(x,Fu),e(Fu,Jse),e(Jse,sbo),e(Fu,lbo),e(Fu,Aq),e(Aq,ibo),e(Fu,dbo),e(x,cbo),e(x,Tu),e(Tu,Yse),e(Yse,fbo),e(Tu,mbo),e(Tu,yq),e(yq,gbo),e(Tu,hbo),e(x,pbo),e(x,Mu),e(Mu,Kse),e(Kse,ubo),e(Mu,_bo),e(Mu,Lq),e(Lq,bbo),e(Mu,vbo),e(x,Fbo),e(x,Eu),e(Eu,Zse),e(Zse,Tbo),e(Eu,Mbo),e(Eu,xq),e(xq,Ebo),e(Eu,Cbo),e(x,wbo),e(x,Cu),e(Cu,ele),e(ele,Abo),e(Cu,ybo),e(Cu,$q),e($q,Lbo),e(Cu,xbo),e(x,$bo),e(x,wu),e(wu,ole),e(ole,kbo),e(wu,Sbo),e(wu,kq),e(kq,Rbo),e(wu,Pbo),e(x,Bbo),e(x,Au),e(Au,rle),e(rle,Ibo),e(Au,qbo),e(Au,Sq),e(Sq,Nbo),e(Au,jbo),e(x,Dbo),e(x,yu),e(yu,tle),e(tle,Gbo),e(yu,Obo),e(yu,Rq),e(Rq,Vbo),e(yu,Xbo),e(x,zbo),e(x,Lu),e(Lu,ale),e(ale,Wbo),e(Lu,Qbo),e(Lu,Pq),e(Pq,Hbo),e(Lu,Ubo),e(x,Jbo),e(x,xu),e(xu,nle),e(nle,Ybo),e(xu,Kbo),e(xu,Bq),e(Bq,Zbo),e(xu,e4o),e(x,o4o),e(x,$u),e($u,sle),e(sle,r4o),e($u,t4o),e($u,Iq),e(Iq,a4o),e($u,n4o),e(x,s4o),e(x,ku),e(ku,lle),e(lle,l4o),e(ku,i4o),e(ku,qq),e(qq,d4o),e(ku,c4o),e(x,f4o),e(x,Su),e(Su,ile),e(ile,m4o),e(Su,g4o),e(Su,Nq),e(Nq,h4o),e(Su,p4o),e(x,u4o),e(x,Ru),e(Ru,dle),e(dle,_4o),e(Ru,b4o),e(Ru,jq),e(jq,v4o),e(Ru,F4o),e(x,T4o),e(x,Pu),e(Pu,cle),e(cle,M4o),e(Pu,E4o),e(Pu,Dq),e(Dq,C4o),e(Pu,w4o),e(x,A4o),e(x,Bu),e(Bu,fle),e(fle,y4o),e(Bu,L4o),e(Bu,Gq),e(Gq,x4o),e(Bu,$4o),e(x,k4o),e(x,Iu),e(Iu,mle),e(mle,S4o),e(Iu,R4o),e(Iu,Oq),e(Oq,P4o),e(Iu,B4o),e(x,I4o),e(x,qu),e(qu,gle),e(gle,q4o),e(qu,N4o),e(qu,Vq),e(Vq,j4o),e(qu,D4o),e(x,G4o),e(x,Nu),e(Nu,hle),e(hle,O4o),e(Nu,V4o),e(Nu,Xq),e(Xq,X4o),e(Nu,z4o),e(x,W4o),e(x,ju),e(ju,ple),e(ple,Q4o),e(ju,H4o),e(ju,zq),e(zq,U4o),e(ju,J4o),e(x,Y4o),e(x,Du),e(Du,ule),e(ule,K4o),e(Du,Z4o),e(Du,Wq),e(Wq,e5o),e(Du,o5o),e(Je,r5o),e(Je,Gu),e(Gu,t5o),e(Gu,_le),e(_le,a5o),e(Gu,n5o),e(Gu,ble),e(ble,s5o),e(Je,l5o),M(Ou,Je,null),b(f,GIe,_),b(f,Li,_),e(Li,Vu),e(Vu,vle),M(N0,vle,null),e(Li,i5o),e(Li,Fle),e(Fle,d5o),b(f,OIe,_),b(f,xo,_),M(j0,xo,null),e(xo,c5o),e(xo,xi),e(xi,f5o),e(xi,Qq),e(Qq,m5o),e(xi,g5o),e(xi,Hq),e(Hq,h5o),e(xi,p5o),e(xo,u5o),e(xo,D0),e(D0,_5o),e(D0,Tle),e(Tle,b5o),e(D0,v5o),e(xo,F5o),e(xo,at),M(G0,at,null),e(at,T5o),e(at,Mle),e(Mle,M5o),e(at,E5o),e(at,$i),e($i,C5o),e($i,Ele),e(Ele,w5o),e($i,A5o),e($i,Uq),e(Uq,y5o),e($i,L5o),e(at,x5o),M(Xu,at,null),e(xo,$5o),e(xo,Ye),M(O0,Ye,null),e(Ye,k5o),e(Ye,Cle),e(Cle,S5o),e(Ye,R5o),e(Ye,xa),e(xa,P5o),e(xa,wle),e(wle,B5o),e(xa,I5o),e(xa,Ale),e(Ale,q5o),e(xa,N5o),e(xa,yle),e(yle,j5o),e(xa,D5o),e(Ye,G5o),e(Ye,G),e(G,zu),e(zu,Lle),e(Lle,O5o),e(zu,V5o),e(zu,Jq),e(Jq,X5o),e(zu,z5o),e(G,W5o),e(G,Wu),e(Wu,xle),e(xle,Q5o),e(Wu,H5o),e(Wu,Yq),e(Yq,U5o),e(Wu,J5o),e(G,Y5o),e(G,Qu),e(Qu,$le),e($le,K5o),e(Qu,Z5o),e(Qu,Kq),e(Kq,evo),e(Qu,ovo),e(G,rvo),e(G,Hu),e(Hu,kle),e(kle,tvo),e(Hu,avo),e(Hu,Zq),e(Zq,nvo),e(Hu,svo),e(G,lvo),e(G,Uu),e(Uu,Sle),e(Sle,ivo),e(Uu,dvo),e(Uu,eN),e(eN,cvo),e(Uu,fvo),e(G,mvo),e(G,Ju),e(Ju,Rle),e(Rle,gvo),e(Ju,hvo),e(Ju,oN),e(oN,pvo),e(Ju,uvo),e(G,_vo),e(G,Yu),e(Yu,Ple),e(Ple,bvo),e(Yu,vvo),e(Yu,rN),e(rN,Fvo),e(Yu,Tvo),e(G,Mvo),e(G,Ku),e(Ku,Ble),e(Ble,Evo),e(Ku,Cvo),e(Ku,tN),e(tN,wvo),e(Ku,Avo),e(G,yvo),e(G,Zu),e(Zu,Ile),e(Ile,Lvo),e(Zu,xvo),e(Zu,aN),e(aN,$vo),e(Zu,kvo),e(G,Svo),e(G,e_),e(e_,qle),e(qle,Rvo),e(e_,Pvo),e(e_,nN),e(nN,Bvo),e(e_,Ivo),e(G,qvo),e(G,o_),e(o_,Nle),e(Nle,Nvo),e(o_,jvo),e(o_,sN),e(sN,Dvo),e(o_,Gvo),e(G,Ovo),e(G,r_),e(r_,jle),e(jle,Vvo),e(r_,Xvo),e(r_,lN),e(lN,zvo),e(r_,Wvo),e(G,Qvo),e(G,t_),e(t_,Dle),e(Dle,Hvo),e(t_,Uvo),e(t_,iN),e(iN,Jvo),e(t_,Yvo),e(G,Kvo),e(G,a_),e(a_,Gle),e(Gle,Zvo),e(a_,eFo),e(a_,dN),e(dN,oFo),e(a_,rFo),e(G,tFo),e(G,n_),e(n_,Ole),e(Ole,aFo),e(n_,nFo),e(n_,cN),e(cN,sFo),e(n_,lFo),e(G,iFo),e(G,s_),e(s_,Vle),e(Vle,dFo),e(s_,cFo),e(s_,fN),e(fN,fFo),e(s_,mFo),e(G,gFo),e(G,l_),e(l_,Xle),e(Xle,hFo),e(l_,pFo),e(l_,mN),e(mN,uFo),e(l_,_Fo),e(G,bFo),e(G,i_),e(i_,zle),e(zle,vFo),e(i_,FFo),e(i_,gN),e(gN,TFo),e(i_,MFo),e(G,EFo),e(G,d_),e(d_,Wle),e(Wle,CFo),e(d_,wFo),e(d_,hN),e(hN,AFo),e(d_,yFo),e(G,LFo),e(G,c_),e(c_,Qle),e(Qle,xFo),e(c_,$Fo),e(c_,pN),e(pN,kFo),e(c_,SFo),e(G,RFo),e(G,f_),e(f_,Hle),e(Hle,PFo),e(f_,BFo),e(f_,uN),e(uN,IFo),e(f_,qFo),e(G,NFo),e(G,m_),e(m_,Ule),e(Ule,jFo),e(m_,DFo),e(m_,_N),e(_N,GFo),e(m_,OFo),e(G,VFo),e(G,g_),e(g_,Jle),e(Jle,XFo),e(g_,zFo),e(g_,bN),e(bN,WFo),e(g_,QFo),e(G,HFo),e(G,h_),e(h_,Yle),e(Yle,UFo),e(h_,JFo),e(h_,vN),e(vN,YFo),e(h_,KFo),e(G,ZFo),e(G,p_),e(p_,Kle),e(Kle,eTo),e(p_,oTo),e(p_,FN),e(FN,rTo),e(p_,tTo),e(G,aTo),e(G,u_),e(u_,Zle),e(Zle,nTo),e(u_,sTo),e(u_,TN),e(TN,lTo),e(u_,iTo),e(G,dTo),e(G,__),e(__,eie),e(eie,cTo),e(__,fTo),e(__,MN),e(MN,mTo),e(__,gTo),e(G,hTo),e(G,b_),e(b_,oie),e(oie,pTo),e(b_,uTo),e(b_,EN),e(EN,_To),e(b_,bTo),e(G,vTo),e(G,v_),e(v_,rie),e(rie,FTo),e(v_,TTo),e(v_,CN),e(CN,MTo),e(v_,ETo),e(G,CTo),e(G,F_),e(F_,tie),e(tie,wTo),e(F_,ATo),e(F_,wN),e(wN,yTo),e(F_,LTo),e(G,xTo),e(G,T_),e(T_,aie),e(aie,$To),e(T_,kTo),e(T_,AN),e(AN,STo),e(T_,RTo),e(G,PTo),e(G,M_),e(M_,nie),e(nie,BTo),e(M_,ITo),e(M_,yN),e(yN,qTo),e(M_,NTo),e(G,jTo),e(G,E_),e(E_,sie),e(sie,DTo),e(E_,GTo),e(E_,LN),e(LN,OTo),e(E_,VTo),e(G,XTo),e(G,C_),e(C_,lie),e(lie,zTo),e(C_,WTo),e(C_,xN),e(xN,QTo),e(C_,HTo),e(G,UTo),e(G,w_),e(w_,iie),e(iie,JTo),e(w_,YTo),e(w_,$N),e($N,KTo),e(w_,ZTo),e(G,e7o),e(G,A_),e(A_,die),e(die,o7o),e(A_,r7o),e(A_,kN),e(kN,t7o),e(A_,a7o),e(G,n7o),e(G,y_),e(y_,cie),e(cie,s7o),e(y_,l7o),e(y_,SN),e(SN,i7o),e(y_,d7o),e(G,c7o),e(G,L_),e(L_,fie),e(fie,f7o),e(L_,m7o),e(L_,RN),e(RN,g7o),e(L_,h7o),e(G,p7o),e(G,x_),e(x_,mie),e(mie,u7o),e(x_,_7o),e(x_,PN),e(PN,b7o),e(x_,v7o),e(G,F7o),e(G,$_),e($_,gie),e(gie,T7o),e($_,M7o),e($_,BN),e(BN,E7o),e($_,C7o),e(G,w7o),e(G,k_),e(k_,hie),e(hie,A7o),e(k_,y7o),e(k_,IN),e(IN,L7o),e(k_,x7o),e(Ye,$7o),e(Ye,S_),e(S_,k7o),e(S_,pie),e(pie,S7o),e(S_,R7o),e(S_,uie),e(uie,P7o),e(Ye,B7o),M(R_,Ye,null),b(f,VIe,_),b(f,ki,_),e(ki,P_),e(P_,_ie),M(V0,_ie,null),e(ki,I7o),e(ki,bie),e(bie,q7o),b(f,XIe,_),b(f,$o,_),M(X0,$o,null),e($o,N7o),e($o,Si),e(Si,j7o),e(Si,qN),e(qN,D7o),e(Si,G7o),e(Si,NN),e(NN,O7o),e(Si,V7o),e($o,X7o),e($o,z0),e(z0,z7o),e(z0,vie),e(vie,W7o),e(z0,Q7o),e($o,H7o),e($o,nt),M(W0,nt,null),e(nt,U7o),e(nt,Fie),e(Fie,J7o),e(nt,Y7o),e(nt,Ri),e(Ri,K7o),e(Ri,Tie),e(Tie,Z7o),e(Ri,eMo),e(Ri,jN),e(jN,oMo),e(Ri,rMo),e(nt,tMo),M(B_,nt,null),e($o,aMo),e($o,Ke),M(Q0,Ke,null),e(Ke,nMo),e(Ke,Mie),e(Mie,sMo),e(Ke,lMo),e(Ke,$a),e($a,iMo),e($a,Eie),e(Eie,dMo),e($a,cMo),e($a,Cie),e(Cie,fMo),e($a,mMo),e($a,wie),e(wie,gMo),e($a,hMo),e(Ke,pMo),e(Ke,z),e(z,I_),e(I_,Aie),e(Aie,uMo),e(I_,_Mo),e(I_,DN),e(DN,bMo),e(I_,vMo),e(z,FMo),e(z,q_),e(q_,yie),e(yie,TMo),e(q_,MMo),e(q_,GN),e(GN,EMo),e(q_,CMo),e(z,wMo),e(z,N_),e(N_,Lie),e(Lie,AMo),e(N_,yMo),e(N_,ON),e(ON,LMo),e(N_,xMo),e(z,$Mo),e(z,j_),e(j_,xie),e(xie,kMo),e(j_,SMo),e(j_,VN),e(VN,RMo),e(j_,PMo),e(z,BMo),e(z,D_),e(D_,$ie),e($ie,IMo),e(D_,qMo),e(D_,XN),e(XN,NMo),e(D_,jMo),e(z,DMo),e(z,G_),e(G_,kie),e(kie,GMo),e(G_,OMo),e(G_,zN),e(zN,VMo),e(G_,XMo),e(z,zMo),e(z,O_),e(O_,Sie),e(Sie,WMo),e(O_,QMo),e(O_,WN),e(WN,HMo),e(O_,UMo),e(z,JMo),e(z,V_),e(V_,Rie),e(Rie,YMo),e(V_,KMo),e(V_,QN),e(QN,ZMo),e(V_,eEo),e(z,oEo),e(z,X_),e(X_,Pie),e(Pie,rEo),e(X_,tEo),e(X_,HN),e(HN,aEo),e(X_,nEo),e(z,sEo),e(z,z_),e(z_,Bie),e(Bie,lEo),e(z_,iEo),e(z_,UN),e(UN,dEo),e(z_,cEo),e(z,fEo),e(z,W_),e(W_,Iie),e(Iie,mEo),e(W_,gEo),e(W_,JN),e(JN,hEo),e(W_,pEo),e(z,uEo),e(z,Q_),e(Q_,qie),e(qie,_Eo),e(Q_,bEo),e(Q_,YN),e(YN,vEo),e(Q_,FEo),e(z,TEo),e(z,H_),e(H_,Nie),e(Nie,MEo),e(H_,EEo),e(H_,KN),e(KN,CEo),e(H_,wEo),e(z,AEo),e(z,U_),e(U_,jie),e(jie,yEo),e(U_,LEo),e(U_,ZN),e(ZN,xEo),e(U_,$Eo),e(z,kEo),e(z,J_),e(J_,Die),e(Die,SEo),e(J_,REo),e(J_,ej),e(ej,PEo),e(J_,BEo),e(z,IEo),e(z,Y_),e(Y_,Gie),e(Gie,qEo),e(Y_,NEo),e(Y_,oj),e(oj,jEo),e(Y_,DEo),e(z,GEo),e(z,K_),e(K_,Oie),e(Oie,OEo),e(K_,VEo),e(K_,rj),e(rj,XEo),e(K_,zEo),e(z,WEo),e(z,Z_),e(Z_,Vie),e(Vie,QEo),e(Z_,HEo),e(Z_,tj),e(tj,UEo),e(Z_,JEo),e(z,YEo),e(z,e2),e(e2,Xie),e(Xie,KEo),e(e2,ZEo),e(e2,aj),e(aj,eCo),e(e2,oCo),e(z,rCo),e(z,o2),e(o2,zie),e(zie,tCo),e(o2,aCo),e(o2,nj),e(nj,nCo),e(o2,sCo),e(z,lCo),e(z,r2),e(r2,Wie),e(Wie,iCo),e(r2,dCo),e(r2,sj),e(sj,cCo),e(r2,fCo),e(z,mCo),e(z,t2),e(t2,Qie),e(Qie,gCo),e(t2,hCo),e(t2,lj),e(lj,pCo),e(t2,uCo),e(z,_Co),e(z,a2),e(a2,Hie),e(Hie,bCo),e(a2,vCo),e(a2,ij),e(ij,FCo),e(a2,TCo),e(z,MCo),e(z,n2),e(n2,Uie),e(Uie,ECo),e(n2,CCo),e(n2,dj),e(dj,wCo),e(n2,ACo),e(z,yCo),e(z,s2),e(s2,Jie),e(Jie,LCo),e(s2,xCo),e(s2,cj),e(cj,$Co),e(s2,kCo),e(z,SCo),e(z,l2),e(l2,Yie),e(Yie,RCo),e(l2,PCo),e(l2,fj),e(fj,BCo),e(l2,ICo),e(z,qCo),e(z,i2),e(i2,Kie),e(Kie,NCo),e(i2,jCo),e(i2,mj),e(mj,DCo),e(i2,GCo),e(z,OCo),e(z,d2),e(d2,Zie),e(Zie,VCo),e(d2,XCo),e(d2,gj),e(gj,zCo),e(d2,WCo),e(z,QCo),e(z,c2),e(c2,ede),e(ede,HCo),e(c2,UCo),e(c2,hj),e(hj,JCo),e(c2,YCo),e(z,KCo),e(z,f2),e(f2,ode),e(ode,ZCo),e(f2,e3o),e(f2,pj),e(pj,o3o),e(f2,r3o),e(z,t3o),e(z,m2),e(m2,rde),e(rde,a3o),e(m2,n3o),e(m2,uj),e(uj,s3o),e(m2,l3o),e(z,i3o),e(z,g2),e(g2,tde),e(tde,d3o),e(g2,c3o),e(g2,_j),e(_j,f3o),e(g2,m3o),e(z,g3o),e(z,h2),e(h2,ade),e(ade,h3o),e(h2,p3o),e(h2,bj),e(bj,u3o),e(h2,_3o),e(z,b3o),e(z,p2),e(p2,nde),e(nde,v3o),e(p2,F3o),e(p2,vj),e(vj,T3o),e(p2,M3o),e(z,E3o),e(z,u2),e(u2,sde),e(sde,C3o),e(u2,w3o),e(u2,Fj),e(Fj,A3o),e(u2,y3o),e(z,L3o),e(z,_2),e(_2,lde),e(lde,x3o),e(_2,$3o),e(_2,Tj),e(Tj,k3o),e(_2,S3o),e(Ke,R3o),e(Ke,b2),e(b2,P3o),e(b2,ide),e(ide,B3o),e(b2,I3o),e(b2,dde),e(dde,q3o),e(Ke,N3o),M(v2,Ke,null),b(f,zIe,_),b(f,Pi,_),e(Pi,F2),e(F2,cde),M(H0,cde,null),e(Pi,j3o),e(Pi,fde),e(fde,D3o),b(f,WIe,_),b(f,ko,_),M(U0,ko,null),e(ko,G3o),e(ko,Bi),e(Bi,O3o),e(Bi,Mj),e(Mj,V3o),e(Bi,X3o),e(Bi,Ej),e(Ej,z3o),e(Bi,W3o),e(ko,Q3o),e(ko,J0),e(J0,H3o),e(J0,mde),e(mde,U3o),e(J0,J3o),e(ko,Y3o),e(ko,st),M(Y0,st,null),e(st,K3o),e(st,gde),e(gde,Z3o),e(st,ewo),e(st,Ii),e(Ii,owo),e(Ii,hde),e(hde,rwo),e(Ii,two),e(Ii,Cj),e(Cj,awo),e(Ii,nwo),e(st,swo),M(T2,st,null),e(ko,lwo),e(ko,Ze),M(K0,Ze,null),e(Ze,iwo),e(Ze,pde),e(pde,dwo),e(Ze,cwo),e(Ze,ka),e(ka,fwo),e(ka,ude),e(ude,mwo),e(ka,gwo),e(ka,_de),e(_de,hwo),e(ka,pwo),e(ka,bde),e(bde,uwo),e(ka,_wo),e(Ze,bwo),e(Ze,W),e(W,M2),e(M2,vde),e(vde,vwo),e(M2,Fwo),e(M2,wj),e(wj,Two),e(M2,Mwo),e(W,Ewo),e(W,E2),e(E2,Fde),e(Fde,Cwo),e(E2,wwo),e(E2,Aj),e(Aj,Awo),e(E2,ywo),e(W,Lwo),e(W,C2),e(C2,Tde),e(Tde,xwo),e(C2,$wo),e(C2,yj),e(yj,kwo),e(C2,Swo),e(W,Rwo),e(W,w2),e(w2,Mde),e(Mde,Pwo),e(w2,Bwo),e(w2,Lj),e(Lj,Iwo),e(w2,qwo),e(W,Nwo),e(W,A2),e(A2,Ede),e(Ede,jwo),e(A2,Dwo),e(A2,xj),e(xj,Gwo),e(A2,Owo),e(W,Vwo),e(W,y2),e(y2,Cde),e(Cde,Xwo),e(y2,zwo),e(y2,$j),e($j,Wwo),e(y2,Qwo),e(W,Hwo),e(W,L2),e(L2,wde),e(wde,Uwo),e(L2,Jwo),e(L2,kj),e(kj,Ywo),e(L2,Kwo),e(W,Zwo),e(W,x2),e(x2,Ade),e(Ade,eAo),e(x2,oAo),e(x2,Sj),e(Sj,rAo),e(x2,tAo),e(W,aAo),e(W,$2),e($2,yde),e(yde,nAo),e($2,sAo),e($2,Rj),e(Rj,lAo),e($2,iAo),e(W,dAo),e(W,k2),e(k2,Lde),e(Lde,cAo),e(k2,fAo),e(k2,Pj),e(Pj,mAo),e(k2,gAo),e(W,hAo),e(W,S2),e(S2,xde),e(xde,pAo),e(S2,uAo),e(S2,Bj),e(Bj,_Ao),e(S2,bAo),e(W,vAo),e(W,R2),e(R2,$de),e($de,FAo),e(R2,TAo),e(R2,Ij),e(Ij,MAo),e(R2,EAo),e(W,CAo),e(W,P2),e(P2,kde),e(kde,wAo),e(P2,AAo),e(P2,qj),e(qj,yAo),e(P2,LAo),e(W,xAo),e(W,B2),e(B2,Sde),e(Sde,$Ao),e(B2,kAo),e(B2,Nj),e(Nj,SAo),e(B2,RAo),e(W,PAo),e(W,I2),e(I2,Rde),e(Rde,BAo),e(I2,IAo),e(I2,jj),e(jj,qAo),e(I2,NAo),e(W,jAo),e(W,q2),e(q2,Pde),e(Pde,DAo),e(q2,GAo),e(q2,Dj),e(Dj,OAo),e(q2,VAo),e(W,XAo),e(W,N2),e(N2,Bde),e(Bde,zAo),e(N2,WAo),e(N2,Gj),e(Gj,QAo),e(N2,HAo),e(W,UAo),e(W,j2),e(j2,Ide),e(Ide,JAo),e(j2,YAo),e(j2,Oj),e(Oj,KAo),e(j2,ZAo),e(W,e6o),e(W,D2),e(D2,qde),e(qde,o6o),e(D2,r6o),e(D2,Vj),e(Vj,t6o),e(D2,a6o),e(W,n6o),e(W,G2),e(G2,Nde),e(Nde,s6o),e(G2,l6o),e(G2,Xj),e(Xj,i6o),e(G2,d6o),e(W,c6o),e(W,O2),e(O2,jde),e(jde,f6o),e(O2,m6o),e(O2,zj),e(zj,g6o),e(O2,h6o),e(W,p6o),e(W,V2),e(V2,Dde),e(Dde,u6o),e(V2,_6o),e(V2,Wj),e(Wj,b6o),e(V2,v6o),e(W,F6o),e(W,X2),e(X2,Gde),e(Gde,T6o),e(X2,M6o),e(X2,Qj),e(Qj,E6o),e(X2,C6o),e(W,w6o),e(W,z2),e(z2,Ode),e(Ode,A6o),e(z2,y6o),e(z2,Hj),e(Hj,L6o),e(z2,x6o),e(W,$6o),e(W,W2),e(W2,Vde),e(Vde,k6o),e(W2,S6o),e(W2,Uj),e(Uj,R6o),e(W2,P6o),e(W,B6o),e(W,Q2),e(Q2,Xde),e(Xde,I6o),e(Q2,q6o),e(Q2,Jj),e(Jj,N6o),e(Q2,j6o),e(W,D6o),e(W,H2),e(H2,zde),e(zde,G6o),e(H2,O6o),e(H2,Yj),e(Yj,V6o),e(H2,X6o),e(W,z6o),e(W,U2),e(U2,Wde),e(Wde,W6o),e(U2,Q6o),e(U2,Kj),e(Kj,H6o),e(U2,U6o),e(W,J6o),e(W,J2),e(J2,Qde),e(Qde,Y6o),e(J2,K6o),e(J2,Zj),e(Zj,Z6o),e(J2,e0o),e(W,o0o),e(W,Y2),e(Y2,Hde),e(Hde,r0o),e(Y2,t0o),e(Y2,eD),e(eD,a0o),e(Y2,n0o),e(W,s0o),e(W,K2),e(K2,Ude),e(Ude,l0o),e(K2,i0o),e(K2,Jde),e(Jde,d0o),e(K2,c0o),e(W,f0o),e(W,Z2),e(Z2,Yde),e(Yde,m0o),e(Z2,g0o),e(Z2,oD),e(oD,h0o),e(Z2,p0o),e(W,u0o),e(W,e1),e(e1,Kde),e(Kde,_0o),e(e1,b0o),e(e1,rD),e(rD,v0o),e(e1,F0o),e(W,T0o),e(W,o1),e(o1,Zde),e(Zde,M0o),e(o1,E0o),e(o1,tD),e(tD,C0o),e(o1,w0o),e(W,A0o),e(W,r1),e(r1,ece),e(ece,y0o),e(r1,L0o),e(r1,aD),e(aD,x0o),e(r1,$0o),e(Ze,k0o),e(Ze,t1),e(t1,S0o),e(t1,oce),e(oce,R0o),e(t1,P0o),e(t1,rce),e(rce,B0o),e(Ze,I0o),M(a1,Ze,null),b(f,QIe,_),b(f,qi,_),e(qi,n1),e(n1,tce),M(Z0,tce,null),e(qi,q0o),e(qi,ace),e(ace,N0o),b(f,HIe,_),b(f,So,_),M(ey,So,null),e(So,j0o),e(So,Ni),e(Ni,D0o),e(Ni,nD),e(nD,G0o),e(Ni,O0o),e(Ni,sD),e(sD,V0o),e(Ni,X0o),e(So,z0o),e(So,oy),e(oy,W0o),e(oy,nce),e(nce,Q0o),e(oy,H0o),e(So,U0o),e(So,lt),M(ry,lt,null),e(lt,J0o),e(lt,sce),e(sce,Y0o),e(lt,K0o),e(lt,ji),e(ji,Z0o),e(ji,lce),e(lce,eyo),e(ji,oyo),e(ji,lD),e(lD,ryo),e(ji,tyo),e(lt,ayo),M(s1,lt,null),e(So,nyo),e(So,eo),M(ty,eo,null),e(eo,syo),e(eo,ice),e(ice,lyo),e(eo,iyo),e(eo,Sa),e(Sa,dyo),e(Sa,dce),e(dce,cyo),e(Sa,fyo),e(Sa,cce),e(cce,myo),e(Sa,gyo),e(Sa,fce),e(fce,hyo),e(Sa,pyo),e(eo,uyo),e(eo,ue),e(ue,l1),e(l1,mce),e(mce,_yo),e(l1,byo),e(l1,iD),e(iD,vyo),e(l1,Fyo),e(ue,Tyo),e(ue,i1),e(i1,gce),e(gce,Myo),e(i1,Eyo),e(i1,dD),e(dD,Cyo),e(i1,wyo),e(ue,Ayo),e(ue,d1),e(d1,hce),e(hce,yyo),e(d1,Lyo),e(d1,cD),e(cD,xyo),e(d1,$yo),e(ue,kyo),e(ue,c1),e(c1,pce),e(pce,Syo),e(c1,Ryo),e(c1,fD),e(fD,Pyo),e(c1,Byo),e(ue,Iyo),e(ue,f1),e(f1,uce),e(uce,qyo),e(f1,Nyo),e(f1,mD),e(mD,jyo),e(f1,Dyo),e(ue,Gyo),e(ue,m1),e(m1,_ce),e(_ce,Oyo),e(m1,Vyo),e(m1,gD),e(gD,Xyo),e(m1,zyo),e(ue,Wyo),e(ue,g1),e(g1,bce),e(bce,Qyo),e(g1,Hyo),e(g1,hD),e(hD,Uyo),e(g1,Jyo),e(ue,Yyo),e(ue,h1),e(h1,vce),e(vce,Kyo),e(h1,Zyo),e(h1,pD),e(pD,eLo),e(h1,oLo),e(ue,rLo),e(ue,p1),e(p1,Fce),e(Fce,tLo),e(p1,aLo),e(p1,uD),e(uD,nLo),e(p1,sLo),e(ue,lLo),e(ue,u1),e(u1,Tce),e(Tce,iLo),e(u1,dLo),e(u1,_D),e(_D,cLo),e(u1,fLo),e(ue,mLo),e(ue,_1),e(_1,Mce),e(Mce,gLo),e(_1,hLo),e(_1,bD),e(bD,pLo),e(_1,uLo),e(ue,_Lo),e(ue,b1),e(b1,Ece),e(Ece,bLo),e(b1,vLo),e(b1,vD),e(vD,FLo),e(b1,TLo),e(ue,MLo),e(ue,v1),e(v1,Cce),e(Cce,ELo),e(v1,CLo),e(v1,FD),e(FD,wLo),e(v1,ALo),e(ue,yLo),e(ue,F1),e(F1,wce),e(wce,LLo),e(F1,xLo),e(F1,TD),e(TD,$Lo),e(F1,kLo),e(ue,SLo),e(ue,T1),e(T1,Ace),e(Ace,RLo),e(T1,PLo),e(T1,MD),e(MD,BLo),e(T1,ILo),e(ue,qLo),e(ue,M1),e(M1,yce),e(yce,NLo),e(M1,jLo),e(M1,ED),e(ED,DLo),e(M1,GLo),e(eo,OLo),e(eo,E1),e(E1,VLo),e(E1,Lce),e(Lce,XLo),e(E1,zLo),e(E1,xce),e(xce,WLo),e(eo,QLo),M(C1,eo,null),b(f,UIe,_),b(f,Di,_),e(Di,w1),e(w1,$ce),M(ay,$ce,null),e(Di,HLo),e(Di,kce),e(kce,ULo),b(f,JIe,_),b(f,Ro,_),M(ny,Ro,null),e(Ro,JLo),e(Ro,Gi),e(Gi,YLo),e(Gi,CD),e(CD,KLo),e(Gi,ZLo),e(Gi,wD),e(wD,e8o),e(Gi,o8o),e(Ro,r8o),e(Ro,sy),e(sy,t8o),e(sy,Sce),e(Sce,a8o),e(sy,n8o),e(Ro,s8o),e(Ro,it),M(ly,it,null),e(it,l8o),e(it,Rce),e(Rce,i8o),e(it,d8o),e(it,Oi),e(Oi,c8o),e(Oi,Pce),e(Pce,f8o),e(Oi,m8o),e(Oi,AD),e(AD,g8o),e(Oi,h8o),e(it,p8o),M(A1,it,null),e(Ro,u8o),e(Ro,oo),M(iy,oo,null),e(oo,_8o),e(oo,Bce),e(Bce,b8o),e(oo,v8o),e(oo,Ra),e(Ra,F8o),e(Ra,Ice),e(Ice,T8o),e(Ra,M8o),e(Ra,qce),e(qce,E8o),e(Ra,C8o),e(Ra,Nce),e(Nce,w8o),e(Ra,A8o),e(oo,y8o),e(oo,q),e(q,y1),e(y1,jce),e(jce,L8o),e(y1,x8o),e(y1,yD),e(yD,$8o),e(y1,k8o),e(q,S8o),e(q,L1),e(L1,Dce),e(Dce,R8o),e(L1,P8o),e(L1,LD),e(LD,B8o),e(L1,I8o),e(q,q8o),e(q,x1),e(x1,Gce),e(Gce,N8o),e(x1,j8o),e(x1,xD),e(xD,D8o),e(x1,G8o),e(q,O8o),e(q,$1),e($1,Oce),e(Oce,V8o),e($1,X8o),e($1,$D),e($D,z8o),e($1,W8o),e(q,Q8o),e(q,k1),e(k1,Vce),e(Vce,H8o),e(k1,U8o),e(k1,kD),e(kD,J8o),e(k1,Y8o),e(q,K8o),e(q,S1),e(S1,Xce),e(Xce,Z8o),e(S1,exo),e(S1,SD),e(SD,oxo),e(S1,rxo),e(q,txo),e(q,R1),e(R1,zce),e(zce,axo),e(R1,nxo),e(R1,RD),e(RD,sxo),e(R1,lxo),e(q,ixo),e(q,P1),e(P1,Wce),e(Wce,dxo),e(P1,cxo),e(P1,PD),e(PD,fxo),e(P1,mxo),e(q,gxo),e(q,B1),e(B1,Qce),e(Qce,hxo),e(B1,pxo),e(B1,BD),e(BD,uxo),e(B1,_xo),e(q,bxo),e(q,I1),e(I1,Hce),e(Hce,vxo),e(I1,Fxo),e(I1,ID),e(ID,Txo),e(I1,Mxo),e(q,Exo),e(q,q1),e(q1,Uce),e(Uce,Cxo),e(q1,wxo),e(q1,qD),e(qD,Axo),e(q1,yxo),e(q,Lxo),e(q,N1),e(N1,Jce),e(Jce,xxo),e(N1,$xo),e(N1,ND),e(ND,kxo),e(N1,Sxo),e(q,Rxo),e(q,j1),e(j1,Yce),e(Yce,Pxo),e(j1,Bxo),e(j1,jD),e(jD,Ixo),e(j1,qxo),e(q,Nxo),e(q,D1),e(D1,Kce),e(Kce,jxo),e(D1,Dxo),e(D1,DD),e(DD,Gxo),e(D1,Oxo),e(q,Vxo),e(q,G1),e(G1,Zce),e(Zce,Xxo),e(G1,zxo),e(G1,GD),e(GD,Wxo),e(G1,Qxo),e(q,Hxo),e(q,O1),e(O1,efe),e(efe,Uxo),e(O1,Jxo),e(O1,OD),e(OD,Yxo),e(O1,Kxo),e(q,Zxo),e(q,V1),e(V1,ofe),e(ofe,e9o),e(V1,o9o),e(V1,VD),e(VD,r9o),e(V1,t9o),e(q,a9o),e(q,X1),e(X1,rfe),e(rfe,n9o),e(X1,s9o),e(X1,XD),e(XD,l9o),e(X1,i9o),e(q,d9o),e(q,z1),e(z1,tfe),e(tfe,c9o),e(z1,f9o),e(z1,zD),e(zD,m9o),e(z1,g9o),e(q,h9o),e(q,W1),e(W1,afe),e(afe,p9o),e(W1,u9o),e(W1,WD),e(WD,_9o),e(W1,b9o),e(q,v9o),e(q,Q1),e(Q1,nfe),e(nfe,F9o),e(Q1,T9o),e(Q1,QD),e(QD,M9o),e(Q1,E9o),e(q,C9o),e(q,H1),e(H1,sfe),e(sfe,w9o),e(H1,A9o),e(H1,HD),e(HD,y9o),e(H1,L9o),e(q,x9o),e(q,U1),e(U1,lfe),e(lfe,$9o),e(U1,k9o),e(U1,UD),e(UD,S9o),e(U1,R9o),e(q,P9o),e(q,J1),e(J1,ife),e(ife,B9o),e(J1,I9o),e(J1,JD),e(JD,q9o),e(J1,N9o),e(q,j9o),e(q,Y1),e(Y1,dfe),e(dfe,D9o),e(Y1,G9o),e(Y1,YD),e(YD,O9o),e(Y1,V9o),e(q,X9o),e(q,K1),e(K1,cfe),e(cfe,z9o),e(K1,W9o),e(K1,KD),e(KD,Q9o),e(K1,H9o),e(q,U9o),e(q,Z1),e(Z1,ffe),e(ffe,J9o),e(Z1,Y9o),e(Z1,ZD),e(ZD,K9o),e(Z1,Z9o),e(q,e$o),e(q,eb),e(eb,mfe),e(mfe,o$o),e(eb,r$o),e(eb,eG),e(eG,t$o),e(eb,a$o),e(q,n$o),e(q,ob),e(ob,gfe),e(gfe,s$o),e(ob,l$o),e(ob,oG),e(oG,i$o),e(ob,d$o),e(q,c$o),e(q,rb),e(rb,hfe),e(hfe,f$o),e(rb,m$o),e(rb,rG),e(rG,g$o),e(rb,h$o),e(q,p$o),e(q,tb),e(tb,pfe),e(pfe,u$o),e(tb,_$o),e(tb,tG),e(tG,b$o),e(tb,v$o),e(q,F$o),e(q,ab),e(ab,ufe),e(ufe,T$o),e(ab,M$o),e(ab,aG),e(aG,E$o),e(ab,C$o),e(q,w$o),e(q,nb),e(nb,_fe),e(_fe,A$o),e(nb,y$o),e(nb,nG),e(nG,L$o),e(nb,x$o),e(q,$$o),e(q,sb),e(sb,bfe),e(bfe,k$o),e(sb,S$o),e(sb,sG),e(sG,R$o),e(sb,P$o),e(q,B$o),e(q,lb),e(lb,vfe),e(vfe,I$o),e(lb,q$o),e(lb,lG),e(lG,N$o),e(lb,j$o),e(q,D$o),e(q,ib),e(ib,Ffe),e(Ffe,G$o),e(ib,O$o),e(ib,iG),e(iG,V$o),e(ib,X$o),e(q,z$o),e(q,db),e(db,Tfe),e(Tfe,W$o),e(db,Q$o),e(db,dG),e(dG,H$o),e(db,U$o),e(q,J$o),e(q,cb),e(cb,Mfe),e(Mfe,Y$o),e(cb,K$o),e(cb,cG),e(cG,Z$o),e(cb,eko),e(q,oko),e(q,fb),e(fb,Efe),e(Efe,rko),e(fb,tko),e(fb,fG),e(fG,ako),e(fb,nko),e(q,sko),e(q,mb),e(mb,Cfe),e(Cfe,lko),e(mb,iko),e(mb,mG),e(mG,dko),e(mb,cko),e(q,fko),e(q,gb),e(gb,wfe),e(wfe,mko),e(gb,gko),e(gb,gG),e(gG,hko),e(gb,pko),e(q,uko),e(q,hb),e(hb,Afe),e(Afe,_ko),e(hb,bko),e(hb,hG),e(hG,vko),e(hb,Fko),e(q,Tko),e(q,pb),e(pb,yfe),e(yfe,Mko),e(pb,Eko),e(pb,pG),e(pG,Cko),e(pb,wko),e(q,Ako),e(q,ub),e(ub,Lfe),e(Lfe,yko),e(ub,Lko),e(ub,uG),e(uG,xko),e(ub,$ko),e(q,kko),e(q,_b),e(_b,xfe),e(xfe,Sko),e(_b,Rko),e(_b,_G),e(_G,Pko),e(_b,Bko),e(q,Iko),e(q,bb),e(bb,$fe),e($fe,qko),e(bb,Nko),e(bb,bG),e(bG,jko),e(bb,Dko),e(oo,Gko),e(oo,vb),e(vb,Oko),e(vb,kfe),e(kfe,Vko),e(vb,Xko),e(vb,Sfe),e(Sfe,zko),e(oo,Wko),M(Fb,oo,null),b(f,YIe,_),b(f,Vi,_),e(Vi,Tb),e(Tb,Rfe),M(dy,Rfe,null),e(Vi,Qko),e(Vi,Pfe),e(Pfe,Hko),b(f,KIe,_),b(f,Po,_),M(cy,Po,null),e(Po,Uko),e(Po,Xi),e(Xi,Jko),e(Xi,vG),e(vG,Yko),e(Xi,Kko),e(Xi,FG),e(FG,Zko),e(Xi,eSo),e(Po,oSo),e(Po,fy),e(fy,rSo),e(fy,Bfe),e(Bfe,tSo),e(fy,aSo),e(Po,nSo),e(Po,dt),M(my,dt,null),e(dt,sSo),e(dt,Ife),e(Ife,lSo),e(dt,iSo),e(dt,zi),e(zi,dSo),e(zi,qfe),e(qfe,cSo),e(zi,fSo),e(zi,TG),e(TG,mSo),e(zi,gSo),e(dt,hSo),M(Mb,dt,null),e(Po,pSo),e(Po,ro),M(gy,ro,null),e(ro,uSo),e(ro,Nfe),e(Nfe,_So),e(ro,bSo),e(ro,Pa),e(Pa,vSo),e(Pa,jfe),e(jfe,FSo),e(Pa,TSo),e(Pa,Dfe),e(Dfe,MSo),e(Pa,ESo),e(Pa,Gfe),e(Gfe,CSo),e(Pa,wSo),e(ro,ASo),e(ro,Y),e(Y,Eb),e(Eb,Ofe),e(Ofe,ySo),e(Eb,LSo),e(Eb,MG),e(MG,xSo),e(Eb,$So),e(Y,kSo),e(Y,Cb),e(Cb,Vfe),e(Vfe,SSo),e(Cb,RSo),e(Cb,EG),e(EG,PSo),e(Cb,BSo),e(Y,ISo),e(Y,wb),e(wb,Xfe),e(Xfe,qSo),e(wb,NSo),e(wb,CG),e(CG,jSo),e(wb,DSo),e(Y,GSo),e(Y,Ab),e(Ab,zfe),e(zfe,OSo),e(Ab,VSo),e(Ab,wG),e(wG,XSo),e(Ab,zSo),e(Y,WSo),e(Y,yb),e(yb,Wfe),e(Wfe,QSo),e(yb,HSo),e(yb,AG),e(AG,USo),e(yb,JSo),e(Y,YSo),e(Y,Lb),e(Lb,Qfe),e(Qfe,KSo),e(Lb,ZSo),e(Lb,yG),e(yG,eRo),e(Lb,oRo),e(Y,rRo),e(Y,xb),e(xb,Hfe),e(Hfe,tRo),e(xb,aRo),e(xb,LG),e(LG,nRo),e(xb,sRo),e(Y,lRo),e(Y,$b),e($b,Ufe),e(Ufe,iRo),e($b,dRo),e($b,xG),e(xG,cRo),e($b,fRo),e(Y,mRo),e(Y,kb),e(kb,Jfe),e(Jfe,gRo),e(kb,hRo),e(kb,$G),e($G,pRo),e(kb,uRo),e(Y,_Ro),e(Y,Sb),e(Sb,Yfe),e(Yfe,bRo),e(Sb,vRo),e(Sb,kG),e(kG,FRo),e(Sb,TRo),e(Y,MRo),e(Y,Rb),e(Rb,Kfe),e(Kfe,ERo),e(Rb,CRo),e(Rb,SG),e(SG,wRo),e(Rb,ARo),e(Y,yRo),e(Y,Pb),e(Pb,Zfe),e(Zfe,LRo),e(Pb,xRo),e(Pb,RG),e(RG,$Ro),e(Pb,kRo),e(Y,SRo),e(Y,Bb),e(Bb,eme),e(eme,RRo),e(Bb,PRo),e(Bb,PG),e(PG,BRo),e(Bb,IRo),e(Y,qRo),e(Y,Ib),e(Ib,ome),e(ome,NRo),e(Ib,jRo),e(Ib,BG),e(BG,DRo),e(Ib,GRo),e(Y,ORo),e(Y,qb),e(qb,rme),e(rme,VRo),e(qb,XRo),e(qb,IG),e(IG,zRo),e(qb,WRo),e(Y,QRo),e(Y,Nb),e(Nb,tme),e(tme,HRo),e(Nb,URo),e(Nb,qG),e(qG,JRo),e(Nb,YRo),e(Y,KRo),e(Y,jb),e(jb,ame),e(ame,ZRo),e(jb,ePo),e(jb,NG),e(NG,oPo),e(jb,rPo),e(Y,tPo),e(Y,Db),e(Db,nme),e(nme,aPo),e(Db,nPo),e(Db,jG),e(jG,sPo),e(Db,lPo),e(Y,iPo),e(Y,Gb),e(Gb,sme),e(sme,dPo),e(Gb,cPo),e(Gb,DG),e(DG,fPo),e(Gb,mPo),e(Y,gPo),e(Y,Ob),e(Ob,lme),e(lme,hPo),e(Ob,pPo),e(Ob,GG),e(GG,uPo),e(Ob,_Po),e(Y,bPo),e(Y,Vb),e(Vb,ime),e(ime,vPo),e(Vb,FPo),e(Vb,OG),e(OG,TPo),e(Vb,MPo),e(Y,EPo),e(Y,Xb),e(Xb,dme),e(dme,CPo),e(Xb,wPo),e(Xb,VG),e(VG,APo),e(Xb,yPo),e(Y,LPo),e(Y,zb),e(zb,cme),e(cme,xPo),e(zb,$Po),e(zb,XG),e(XG,kPo),e(zb,SPo),e(Y,RPo),e(Y,Wb),e(Wb,fme),e(fme,PPo),e(Wb,BPo),e(Wb,zG),e(zG,IPo),e(Wb,qPo),e(Y,NPo),e(Y,Qb),e(Qb,mme),e(mme,jPo),e(Qb,DPo),e(Qb,WG),e(WG,GPo),e(Qb,OPo),e(Y,VPo),e(Y,Hb),e(Hb,gme),e(gme,XPo),e(Hb,zPo),e(Hb,QG),e(QG,WPo),e(Hb,QPo),e(Y,HPo),e(Y,Ub),e(Ub,hme),e(hme,UPo),e(Ub,JPo),e(Ub,HG),e(HG,YPo),e(Ub,KPo),e(Y,ZPo),e(Y,Jb),e(Jb,pme),e(pme,eBo),e(Jb,oBo),e(Jb,UG),e(UG,rBo),e(Jb,tBo),e(Y,aBo),e(Y,Yb),e(Yb,ume),e(ume,nBo),e(Yb,sBo),e(Yb,JG),e(JG,lBo),e(Yb,iBo),e(ro,dBo),e(ro,Kb),e(Kb,cBo),e(Kb,_me),e(_me,fBo),e(Kb,mBo),e(Kb,bme),e(bme,gBo),e(ro,hBo),M(Zb,ro,null),b(f,ZIe,_),b(f,Wi,_),e(Wi,e4),e(e4,vme),M(hy,vme,null),e(Wi,pBo),e(Wi,Fme),e(Fme,uBo),b(f,eqe,_),b(f,Bo,_),M(py,Bo,null),e(Bo,_Bo),e(Bo,Qi),e(Qi,bBo),e(Qi,YG),e(YG,vBo),e(Qi,FBo),e(Qi,KG),e(KG,TBo),e(Qi,MBo),e(Bo,EBo),e(Bo,uy),e(uy,CBo),e(uy,Tme),e(Tme,wBo),e(uy,ABo),e(Bo,yBo),e(Bo,ct),M(_y,ct,null),e(ct,LBo),e(ct,Mme),e(Mme,xBo),e(ct,$Bo),e(ct,Hi),e(Hi,kBo),e(Hi,Eme),e(Eme,SBo),e(Hi,RBo),e(Hi,ZG),e(ZG,PBo),e(Hi,BBo),e(ct,IBo),M(o4,ct,null),e(Bo,qBo),e(Bo,to),M(by,to,null),e(to,NBo),e(to,Cme),e(Cme,jBo),e(to,DBo),e(to,Ba),e(Ba,GBo),e(Ba,wme),e(wme,OBo),e(Ba,VBo),e(Ba,Ame),e(Ame,XBo),e(Ba,zBo),e(Ba,yme),e(yme,WBo),e(Ba,QBo),e(to,HBo),e(to,Yr),e(Yr,r4),e(r4,Lme),e(Lme,UBo),e(r4,JBo),e(r4,eO),e(eO,YBo),e(r4,KBo),e(Yr,ZBo),e(Yr,t4),e(t4,xme),e(xme,eIo),e(t4,oIo),e(t4,oO),e(oO,rIo),e(t4,tIo),e(Yr,aIo),e(Yr,a4),e(a4,$me),e($me,nIo),e(a4,sIo),e(a4,rO),e(rO,lIo),e(a4,iIo),e(Yr,dIo),e(Yr,n4),e(n4,kme),e(kme,cIo),e(n4,fIo),e(n4,tO),e(tO,mIo),e(n4,gIo),e(Yr,hIo),e(Yr,s4),e(s4,Sme),e(Sme,pIo),e(s4,uIo),e(s4,aO),e(aO,_Io),e(s4,bIo),e(to,vIo),e(to,l4),e(l4,FIo),e(l4,Rme),e(Rme,TIo),e(l4,MIo),e(l4,Pme),e(Pme,EIo),e(to,CIo),M(i4,to,null),b(f,oqe,_),b(f,Ui,_),e(Ui,d4),e(d4,Bme),M(vy,Bme,null),e(Ui,wIo),e(Ui,Ime),e(Ime,AIo),b(f,rqe,_),b(f,Io,_),M(Fy,Io,null),e(Io,yIo),e(Io,Ji),e(Ji,LIo),e(Ji,nO),e(nO,xIo),e(Ji,$Io),e(Ji,sO),e(sO,kIo),e(Ji,SIo),e(Io,RIo),e(Io,Ty),e(Ty,PIo),e(Ty,qme),e(qme,BIo),e(Ty,IIo),e(Io,qIo),e(Io,ft),M(My,ft,null),e(ft,NIo),e(ft,Nme),e(Nme,jIo),e(ft,DIo),e(ft,Yi),e(Yi,GIo),e(Yi,jme),e(jme,OIo),e(Yi,VIo),e(Yi,lO),e(lO,XIo),e(Yi,zIo),e(ft,WIo),M(c4,ft,null),e(Io,QIo),e(Io,ao),M(Ey,ao,null),e(ao,HIo),e(ao,Dme),e(Dme,UIo),e(ao,JIo),e(ao,Ia),e(Ia,YIo),e(Ia,Gme),e(Gme,KIo),e(Ia,ZIo),e(Ia,Ome),e(Ome,eqo),e(Ia,oqo),e(Ia,Vme),e(Vme,rqo),e(Ia,tqo),e(ao,aqo),e(ao,U),e(U,f4),e(f4,Xme),e(Xme,nqo),e(f4,sqo),e(f4,iO),e(iO,lqo),e(f4,iqo),e(U,dqo),e(U,m4),e(m4,zme),e(zme,cqo),e(m4,fqo),e(m4,dO),e(dO,mqo),e(m4,gqo),e(U,hqo),e(U,g4),e(g4,Wme),e(Wme,pqo),e(g4,uqo),e(g4,cO),e(cO,_qo),e(g4,bqo),e(U,vqo),e(U,h4),e(h4,Qme),e(Qme,Fqo),e(h4,Tqo),e(h4,fO),e(fO,Mqo),e(h4,Eqo),e(U,Cqo),e(U,p4),e(p4,Hme),e(Hme,wqo),e(p4,Aqo),e(p4,mO),e(mO,yqo),e(p4,Lqo),e(U,xqo),e(U,u4),e(u4,Ume),e(Ume,$qo),e(u4,kqo),e(u4,gO),e(gO,Sqo),e(u4,Rqo),e(U,Pqo),e(U,_4),e(_4,Jme),e(Jme,Bqo),e(_4,Iqo),e(_4,hO),e(hO,qqo),e(_4,Nqo),e(U,jqo),e(U,b4),e(b4,Yme),e(Yme,Dqo),e(b4,Gqo),e(b4,pO),e(pO,Oqo),e(b4,Vqo),e(U,Xqo),e(U,v4),e(v4,Kme),e(Kme,zqo),e(v4,Wqo),e(v4,uO),e(uO,Qqo),e(v4,Hqo),e(U,Uqo),e(U,F4),e(F4,Zme),e(Zme,Jqo),e(F4,Yqo),e(F4,_O),e(_O,Kqo),e(F4,Zqo),e(U,eNo),e(U,T4),e(T4,ege),e(ege,oNo),e(T4,rNo),e(T4,bO),e(bO,tNo),e(T4,aNo),e(U,nNo),e(U,M4),e(M4,oge),e(oge,sNo),e(M4,lNo),e(M4,vO),e(vO,iNo),e(M4,dNo),e(U,cNo),e(U,E4),e(E4,rge),e(rge,fNo),e(E4,mNo),e(E4,FO),e(FO,gNo),e(E4,hNo),e(U,pNo),e(U,C4),e(C4,tge),e(tge,uNo),e(C4,_No),e(C4,TO),e(TO,bNo),e(C4,vNo),e(U,FNo),e(U,w4),e(w4,age),e(age,TNo),e(w4,MNo),e(w4,MO),e(MO,ENo),e(w4,CNo),e(U,wNo),e(U,A4),e(A4,nge),e(nge,ANo),e(A4,yNo),e(A4,EO),e(EO,LNo),e(A4,xNo),e(U,$No),e(U,y4),e(y4,sge),e(sge,kNo),e(y4,SNo),e(y4,CO),e(CO,RNo),e(y4,PNo),e(U,BNo),e(U,L4),e(L4,lge),e(lge,INo),e(L4,qNo),e(L4,wO),e(wO,NNo),e(L4,jNo),e(U,DNo),e(U,x4),e(x4,ige),e(ige,GNo),e(x4,ONo),e(x4,AO),e(AO,VNo),e(x4,XNo),e(U,zNo),e(U,$4),e($4,dge),e(dge,WNo),e($4,QNo),e($4,yO),e(yO,HNo),e($4,UNo),e(U,JNo),e(U,k4),e(k4,cge),e(cge,YNo),e(k4,KNo),e(k4,LO),e(LO,ZNo),e(k4,ejo),e(U,ojo),e(U,S4),e(S4,fge),e(fge,rjo),e(S4,tjo),e(S4,xO),e(xO,ajo),e(S4,njo),e(U,sjo),e(U,R4),e(R4,mge),e(mge,ljo),e(R4,ijo),e(R4,$O),e($O,djo),e(R4,cjo),e(U,fjo),e(U,P4),e(P4,gge),e(gge,mjo),e(P4,gjo),e(P4,kO),e(kO,hjo),e(P4,pjo),e(U,ujo),e(U,B4),e(B4,hge),e(hge,_jo),e(B4,bjo),e(B4,SO),e(SO,vjo),e(B4,Fjo),e(U,Tjo),e(U,I4),e(I4,pge),e(pge,Mjo),e(I4,Ejo),e(I4,RO),e(RO,Cjo),e(I4,wjo),e(U,Ajo),e(U,q4),e(q4,uge),e(uge,yjo),e(q4,Ljo),e(q4,PO),e(PO,xjo),e(q4,$jo),e(U,kjo),e(U,N4),e(N4,_ge),e(_ge,Sjo),e(N4,Rjo),e(N4,BO),e(BO,Pjo),e(N4,Bjo),e(U,Ijo),e(U,j4),e(j4,bge),e(bge,qjo),e(j4,Njo),e(j4,IO),e(IO,jjo),e(j4,Djo),e(U,Gjo),e(U,D4),e(D4,vge),e(vge,Ojo),e(D4,Vjo),e(D4,qO),e(qO,Xjo),e(D4,zjo),e(U,Wjo),e(U,G4),e(G4,Fge),e(Fge,Qjo),e(G4,Hjo),e(G4,NO),e(NO,Ujo),e(G4,Jjo),e(U,Yjo),e(U,O4),e(O4,Tge),e(Tge,Kjo),e(O4,Zjo),e(O4,jO),e(jO,eDo),e(O4,oDo),e(U,rDo),e(U,V4),e(V4,Mge),e(Mge,tDo),e(V4,aDo),e(V4,DO),e(DO,nDo),e(V4,sDo),e(ao,lDo),e(ao,X4),e(X4,iDo),e(X4,Ege),e(Ege,dDo),e(X4,cDo),e(X4,Cge),e(Cge,fDo),e(ao,mDo),M(z4,ao,null),b(f,tqe,_),b(f,Ki,_),e(Ki,W4),e(W4,wge),M(Cy,wge,null),e(Ki,gDo),e(Ki,Age),e(Age,hDo),b(f,aqe,_),b(f,qo,_),M(wy,qo,null),e(qo,pDo),e(qo,Zi),e(Zi,uDo),e(Zi,GO),e(GO,_Do),e(Zi,bDo),e(Zi,OO),e(OO,vDo),e(Zi,FDo),e(qo,TDo),e(qo,Ay),e(Ay,MDo),e(Ay,yge),e(yge,EDo),e(Ay,CDo),e(qo,wDo),e(qo,mt),M(yy,mt,null),e(mt,ADo),e(mt,Lge),e(Lge,yDo),e(mt,LDo),e(mt,ed),e(ed,xDo),e(ed,xge),e(xge,$Do),e(ed,kDo),e(ed,VO),e(VO,SDo),e(ed,RDo),e(mt,PDo),M(Q4,mt,null),e(qo,BDo),e(qo,no),M(Ly,no,null),e(no,IDo),e(no,$ge),e($ge,qDo),e(no,NDo),e(no,qa),e(qa,jDo),e(qa,kge),e(kge,DDo),e(qa,GDo),e(qa,Sge),e(Sge,ODo),e(qa,VDo),e(qa,Rge),e(Rge,XDo),e(qa,zDo),e(no,WDo),e(no,V),e(V,H4),e(H4,Pge),e(Pge,QDo),e(H4,HDo),e(H4,XO),e(XO,UDo),e(H4,JDo),e(V,YDo),e(V,U4),e(U4,Bge),e(Bge,KDo),e(U4,ZDo),e(U4,zO),e(zO,eGo),e(U4,oGo),e(V,rGo),e(V,J4),e(J4,Ige),e(Ige,tGo),e(J4,aGo),e(J4,WO),e(WO,nGo),e(J4,sGo),e(V,lGo),e(V,Y4),e(Y4,qge),e(qge,iGo),e(Y4,dGo),e(Y4,QO),e(QO,cGo),e(Y4,fGo),e(V,mGo),e(V,K4),e(K4,Nge),e(Nge,gGo),e(K4,hGo),e(K4,HO),e(HO,pGo),e(K4,uGo),e(V,_Go),e(V,Z4),e(Z4,jge),e(jge,bGo),e(Z4,vGo),e(Z4,UO),e(UO,FGo),e(Z4,TGo),e(V,MGo),e(V,e5),e(e5,Dge),e(Dge,EGo),e(e5,CGo),e(e5,JO),e(JO,wGo),e(e5,AGo),e(V,yGo),e(V,o5),e(o5,Gge),e(Gge,LGo),e(o5,xGo),e(o5,YO),e(YO,$Go),e(o5,kGo),e(V,SGo),e(V,r5),e(r5,Oge),e(Oge,RGo),e(r5,PGo),e(r5,KO),e(KO,BGo),e(r5,IGo),e(V,qGo),e(V,t5),e(t5,Vge),e(Vge,NGo),e(t5,jGo),e(t5,ZO),e(ZO,DGo),e(t5,GGo),e(V,OGo),e(V,a5),e(a5,Xge),e(Xge,VGo),e(a5,XGo),e(a5,eV),e(eV,zGo),e(a5,WGo),e(V,QGo),e(V,n5),e(n5,zge),e(zge,HGo),e(n5,UGo),e(n5,oV),e(oV,JGo),e(n5,YGo),e(V,KGo),e(V,s5),e(s5,Wge),e(Wge,ZGo),e(s5,eOo),e(s5,rV),e(rV,oOo),e(s5,rOo),e(V,tOo),e(V,l5),e(l5,Qge),e(Qge,aOo),e(l5,nOo),e(l5,tV),e(tV,sOo),e(l5,lOo),e(V,iOo),e(V,i5),e(i5,Hge),e(Hge,dOo),e(i5,cOo),e(i5,aV),e(aV,fOo),e(i5,mOo),e(V,gOo),e(V,d5),e(d5,Uge),e(Uge,hOo),e(d5,pOo),e(d5,nV),e(nV,uOo),e(d5,_Oo),e(V,bOo),e(V,c5),e(c5,Jge),e(Jge,vOo),e(c5,FOo),e(c5,sV),e(sV,TOo),e(c5,MOo),e(V,EOo),e(V,f5),e(f5,Yge),e(Yge,COo),e(f5,wOo),e(f5,lV),e(lV,AOo),e(f5,yOo),e(V,LOo),e(V,m5),e(m5,Kge),e(Kge,xOo),e(m5,$Oo),e(m5,iV),e(iV,kOo),e(m5,SOo),e(V,ROo),e(V,g5),e(g5,Zge),e(Zge,POo),e(g5,BOo),e(g5,dV),e(dV,IOo),e(g5,qOo),e(V,NOo),e(V,h5),e(h5,ehe),e(ehe,jOo),e(h5,DOo),e(h5,cV),e(cV,GOo),e(h5,OOo),e(V,VOo),e(V,p5),e(p5,ohe),e(ohe,XOo),e(p5,zOo),e(p5,fV),e(fV,WOo),e(p5,QOo),e(V,HOo),e(V,u5),e(u5,rhe),e(rhe,UOo),e(u5,JOo),e(u5,mV),e(mV,YOo),e(u5,KOo),e(V,ZOo),e(V,_5),e(_5,the),e(the,eVo),e(_5,oVo),e(_5,gV),e(gV,rVo),e(_5,tVo),e(V,aVo),e(V,b5),e(b5,ahe),e(ahe,nVo),e(b5,sVo),e(b5,hV),e(hV,lVo),e(b5,iVo),e(V,dVo),e(V,v5),e(v5,nhe),e(nhe,cVo),e(v5,fVo),e(v5,pV),e(pV,mVo),e(v5,gVo),e(V,hVo),e(V,F5),e(F5,she),e(she,pVo),e(F5,uVo),e(F5,uV),e(uV,_Vo),e(F5,bVo),e(V,vVo),e(V,T5),e(T5,lhe),e(lhe,FVo),e(T5,TVo),e(T5,_V),e(_V,MVo),e(T5,EVo),e(V,CVo),e(V,M5),e(M5,ihe),e(ihe,wVo),e(M5,AVo),e(M5,bV),e(bV,yVo),e(M5,LVo),e(V,xVo),e(V,E5),e(E5,dhe),e(dhe,$Vo),e(E5,kVo),e(E5,vV),e(vV,SVo),e(E5,RVo),e(V,PVo),e(V,C5),e(C5,che),e(che,BVo),e(C5,IVo),e(C5,FV),e(FV,qVo),e(C5,NVo),e(V,jVo),e(V,w5),e(w5,fhe),e(fhe,DVo),e(w5,GVo),e(w5,TV),e(TV,OVo),e(w5,VVo),e(V,XVo),e(V,A5),e(A5,mhe),e(mhe,zVo),e(A5,WVo),e(A5,MV),e(MV,QVo),e(A5,HVo),e(V,UVo),e(V,y5),e(y5,ghe),e(ghe,JVo),e(y5,YVo),e(y5,EV),e(EV,KVo),e(y5,ZVo),e(V,eXo),e(V,L5),e(L5,hhe),e(hhe,oXo),e(L5,rXo),e(L5,CV),e(CV,tXo),e(L5,aXo),e(V,nXo),e(V,x5),e(x5,phe),e(phe,sXo),e(x5,lXo),e(x5,wV),e(wV,iXo),e(x5,dXo),e(V,cXo),e(V,$5),e($5,uhe),e(uhe,fXo),e($5,mXo),e($5,AV),e(AV,gXo),e($5,hXo),e(V,pXo),e(V,k5),e(k5,_he),e(_he,uXo),e(k5,_Xo),e(k5,yV),e(yV,bXo),e(k5,vXo),e(V,FXo),e(V,S5),e(S5,bhe),e(bhe,TXo),e(S5,MXo),e(S5,LV),e(LV,EXo),e(S5,CXo),e(no,wXo),e(no,R5),e(R5,AXo),e(R5,vhe),e(vhe,yXo),e(R5,LXo),e(R5,Fhe),e(Fhe,xXo),e(no,$Xo),M(P5,no,null),b(f,nqe,_),b(f,od,_),e(od,B5),e(B5,The),M(xy,The,null),e(od,kXo),e(od,Mhe),e(Mhe,SXo),b(f,sqe,_),b(f,No,_),M($y,No,null),e(No,RXo),e(No,rd),e(rd,PXo),e(rd,xV),e(xV,BXo),e(rd,IXo),e(rd,$V),e($V,qXo),e(rd,NXo),e(No,jXo),e(No,ky),e(ky,DXo),e(ky,Ehe),e(Ehe,GXo),e(ky,OXo),e(No,VXo),e(No,gt),M(Sy,gt,null),e(gt,XXo),e(gt,Che),e(Che,zXo),e(gt,WXo),e(gt,td),e(td,QXo),e(td,whe),e(whe,HXo),e(td,UXo),e(td,kV),e(kV,JXo),e(td,YXo),e(gt,KXo),M(I5,gt,null),e(No,ZXo),e(No,so),M(Ry,so,null),e(so,ezo),e(so,Ahe),e(Ahe,ozo),e(so,rzo),e(so,Na),e(Na,tzo),e(Na,yhe),e(yhe,azo),e(Na,nzo),e(Na,Lhe),e(Lhe,szo),e(Na,lzo),e(Na,xhe),e(xhe,izo),e(Na,dzo),e(so,czo),e(so,$he),e($he,q5),e(q5,khe),e(khe,fzo),e(q5,mzo),e(q5,SV),e(SV,gzo),e(q5,hzo),e(so,pzo),e(so,N5),e(N5,uzo),e(N5,She),e(She,_zo),e(N5,bzo),e(N5,Rhe),e(Rhe,vzo),e(so,Fzo),M(j5,so,null),b(f,lqe,_),b(f,ad,_),e(ad,D5),e(D5,Phe),M(Py,Phe,null),e(ad,Tzo),e(ad,Bhe),e(Bhe,Mzo),b(f,iqe,_),b(f,jo,_),M(By,jo,null),e(jo,Ezo),e(jo,nd),e(nd,Czo),e(nd,RV),e(RV,wzo),e(nd,Azo),e(nd,PV),e(PV,yzo),e(nd,Lzo),e(jo,xzo),e(jo,Iy),e(Iy,$zo),e(Iy,Ihe),e(Ihe,kzo),e(Iy,Szo),e(jo,Rzo),e(jo,ht),M(qy,ht,null),e(ht,Pzo),e(ht,qhe),e(qhe,Bzo),e(ht,Izo),e(ht,sd),e(sd,qzo),e(sd,Nhe),e(Nhe,Nzo),e(sd,jzo),e(sd,BV),e(BV,Dzo),e(sd,Gzo),e(ht,Ozo),M(G5,ht,null),e(jo,Vzo),e(jo,lo),M(Ny,lo,null),e(lo,Xzo),e(lo,jhe),e(jhe,zzo),e(lo,Wzo),e(lo,ja),e(ja,Qzo),e(ja,Dhe),e(Dhe,Hzo),e(ja,Uzo),e(ja,Ghe),e(Ghe,Jzo),e(ja,Yzo),e(ja,Ohe),e(Ohe,Kzo),e(ja,Zzo),e(lo,eWo),e(lo,Fe),e(Fe,O5),e(O5,Vhe),e(Vhe,oWo),e(O5,rWo),e(O5,IV),e(IV,tWo),e(O5,aWo),e(Fe,nWo),e(Fe,V5),e(V5,Xhe),e(Xhe,sWo),e(V5,lWo),e(V5,qV),e(qV,iWo),e(V5,dWo),e(Fe,cWo),e(Fe,X5),e(X5,zhe),e(zhe,fWo),e(X5,mWo),e(X5,NV),e(NV,gWo),e(X5,hWo),e(Fe,pWo),e(Fe,Bs),e(Bs,Whe),e(Whe,uWo),e(Bs,_Wo),e(Bs,jV),e(jV,bWo),e(Bs,vWo),e(Bs,DV),e(DV,FWo),e(Bs,TWo),e(Fe,MWo),e(Fe,z5),e(z5,Qhe),e(Qhe,EWo),e(z5,CWo),e(z5,GV),e(GV,wWo),e(z5,AWo),e(Fe,yWo),e(Fe,pt),e(pt,Hhe),e(Hhe,LWo),e(pt,xWo),e(pt,OV),e(OV,$Wo),e(pt,kWo),e(pt,VV),e(VV,SWo),e(pt,RWo),e(pt,XV),e(XV,PWo),e(pt,BWo),e(Fe,IWo),e(Fe,W5),e(W5,Uhe),e(Uhe,qWo),e(W5,NWo),e(W5,zV),e(zV,jWo),e(W5,DWo),e(Fe,GWo),e(Fe,Q5),e(Q5,Jhe),e(Jhe,OWo),e(Q5,VWo),e(Q5,WV),e(WV,XWo),e(Q5,zWo),e(Fe,WWo),e(Fe,H5),e(H5,Yhe),e(Yhe,QWo),e(H5,HWo),e(H5,QV),e(QV,UWo),e(H5,JWo),e(Fe,YWo),e(Fe,U5),e(U5,Khe),e(Khe,KWo),e(U5,ZWo),e(U5,HV),e(HV,eQo),e(U5,oQo),e(Fe,rQo),e(Fe,J5),e(J5,Zhe),e(Zhe,tQo),e(J5,aQo),e(J5,UV),e(UV,nQo),e(J5,sQo),e(Fe,lQo),e(Fe,Y5),e(Y5,epe),e(epe,iQo),e(Y5,dQo),e(Y5,JV),e(JV,cQo),e(Y5,fQo),e(Fe,mQo),e(Fe,K5),e(K5,ope),e(ope,gQo),e(K5,hQo),e(K5,YV),e(YV,pQo),e(K5,uQo),e(lo,_Qo),e(lo,Z5),e(Z5,bQo),e(Z5,rpe),e(rpe,vQo),e(Z5,FQo),e(Z5,tpe),e(tpe,TQo),e(lo,MQo),M(ev,lo,null),b(f,dqe,_),b(f,ld,_),e(ld,ov),e(ov,ape),M(jy,ape,null),e(ld,EQo),e(ld,npe),e(npe,CQo),b(f,cqe,_),b(f,Do,_),M(Dy,Do,null),e(Do,wQo),e(Do,id),e(id,AQo),e(id,KV),e(KV,yQo),e(id,LQo),e(id,ZV),e(ZV,xQo),e(id,$Qo),e(Do,kQo),e(Do,Gy),e(Gy,SQo),e(Gy,spe),e(spe,RQo),e(Gy,PQo),e(Do,BQo),e(Do,ut),M(Oy,ut,null),e(ut,IQo),e(ut,lpe),e(lpe,qQo),e(ut,NQo),e(ut,dd),e(dd,jQo),e(dd,ipe),e(ipe,DQo),e(dd,GQo),e(dd,eX),e(eX,OQo),e(dd,VQo),e(ut,XQo),M(rv,ut,null),e(Do,zQo),e(Do,io),M(Vy,io,null),e(io,WQo),e(io,dpe),e(dpe,QQo),e(io,HQo),e(io,Da),e(Da,UQo),e(Da,cpe),e(cpe,JQo),e(Da,YQo),e(Da,fpe),e(fpe,KQo),e(Da,ZQo),e(Da,mpe),e(mpe,eHo),e(Da,oHo),e(io,rHo),e(io,gpe),e(gpe,tv),e(tv,hpe),e(hpe,tHo),e(tv,aHo),e(tv,oX),e(oX,nHo),e(tv,sHo),e(io,lHo),e(io,av),e(av,iHo),e(av,ppe),e(ppe,dHo),e(av,cHo),e(av,upe),e(upe,fHo),e(io,mHo),M(nv,io,null),b(f,fqe,_),b(f,cd,_),e(cd,sv),e(sv,_pe),M(Xy,_pe,null),e(cd,gHo),e(cd,bpe),e(bpe,hHo),b(f,mqe,_),b(f,Go,_),M(zy,Go,null),e(Go,pHo),e(Go,fd),e(fd,uHo),e(fd,rX),e(rX,_Ho),e(fd,bHo),e(fd,tX),e(tX,vHo),e(fd,FHo),e(Go,THo),e(Go,Wy),e(Wy,MHo),e(Wy,vpe),e(vpe,EHo),e(Wy,CHo),e(Go,wHo),e(Go,_t),M(Qy,_t,null),e(_t,AHo),e(_t,Fpe),e(Fpe,yHo),e(_t,LHo),e(_t,md),e(md,xHo),e(md,Tpe),e(Tpe,$Ho),e(md,kHo),e(md,aX),e(aX,SHo),e(md,RHo),e(_t,PHo),M(lv,_t,null),e(Go,BHo),e(Go,co),M(Hy,co,null),e(co,IHo),e(co,Mpe),e(Mpe,qHo),e(co,NHo),e(co,Ga),e(Ga,jHo),e(Ga,Epe),e(Epe,DHo),e(Ga,GHo),e(Ga,Cpe),e(Cpe,OHo),e(Ga,VHo),e(Ga,wpe),e(wpe,XHo),e(Ga,zHo),e(co,WHo),e(co,ke),e(ke,iv),e(iv,Ape),e(Ape,QHo),e(iv,HHo),e(iv,nX),e(nX,UHo),e(iv,JHo),e(ke,YHo),e(ke,dv),e(dv,ype),e(ype,KHo),e(dv,ZHo),e(dv,sX),e(sX,eUo),e(dv,oUo),e(ke,rUo),e(ke,cv),e(cv,Lpe),e(Lpe,tUo),e(cv,aUo),e(cv,lX),e(lX,nUo),e(cv,sUo),e(ke,lUo),e(ke,fv),e(fv,xpe),e(xpe,iUo),e(fv,dUo),e(fv,iX),e(iX,cUo),e(fv,fUo),e(ke,mUo),e(ke,mv),e(mv,$pe),e($pe,gUo),e(mv,hUo),e(mv,dX),e(dX,pUo),e(mv,uUo),e(ke,_Uo),e(ke,gv),e(gv,kpe),e(kpe,bUo),e(gv,vUo),e(gv,cX),e(cX,FUo),e(gv,TUo),e(ke,MUo),e(ke,hv),e(hv,Spe),e(Spe,EUo),e(hv,CUo),e(hv,fX),e(fX,wUo),e(hv,AUo),e(ke,yUo),e(ke,pv),e(pv,Rpe),e(Rpe,LUo),e(pv,xUo),e(pv,mX),e(mX,$Uo),e(pv,kUo),e(ke,SUo),e(ke,uv),e(uv,Ppe),e(Ppe,RUo),e(uv,PUo),e(uv,gX),e(gX,BUo),e(uv,IUo),e(co,qUo),e(co,_v),e(_v,NUo),e(_v,Bpe),e(Bpe,jUo),e(_v,DUo),e(_v,Ipe),e(Ipe,GUo),e(co,OUo),M(bv,co,null),b(f,gqe,_),b(f,gd,_),e(gd,vv),e(vv,qpe),M(Uy,qpe,null),e(gd,VUo),e(gd,Npe),e(Npe,XUo),b(f,hqe,_),b(f,Oo,_),M(Jy,Oo,null),e(Oo,zUo),e(Oo,hd),e(hd,WUo),e(hd,hX),e(hX,QUo),e(hd,HUo),e(hd,pX),e(pX,UUo),e(hd,JUo),e(Oo,YUo),e(Oo,Yy),e(Yy,KUo),e(Yy,jpe),e(jpe,ZUo),e(Yy,eJo),e(Oo,oJo),e(Oo,bt),M(Ky,bt,null),e(bt,rJo),e(bt,Dpe),e(Dpe,tJo),e(bt,aJo),e(bt,pd),e(pd,nJo),e(pd,Gpe),e(Gpe,sJo),e(pd,lJo),e(pd,uX),e(uX,iJo),e(pd,dJo),e(bt,cJo),M(Fv,bt,null),e(Oo,fJo),e(Oo,fo),M(Zy,fo,null),e(fo,mJo),e(fo,Ope),e(Ope,gJo),e(fo,hJo),e(fo,Oa),e(Oa,pJo),e(Oa,Vpe),e(Vpe,uJo),e(Oa,_Jo),e(Oa,Xpe),e(Xpe,bJo),e(Oa,vJo),e(Oa,zpe),e(zpe,FJo),e(Oa,TJo),e(fo,MJo),e(fo,Kr),e(Kr,Tv),e(Tv,Wpe),e(Wpe,EJo),e(Tv,CJo),e(Tv,_X),e(_X,wJo),e(Tv,AJo),e(Kr,yJo),e(Kr,Mv),e(Mv,Qpe),e(Qpe,LJo),e(Mv,xJo),e(Mv,bX),e(bX,$Jo),e(Mv,kJo),e(Kr,SJo),e(Kr,Ev),e(Ev,Hpe),e(Hpe,RJo),e(Ev,PJo),e(Ev,vX),e(vX,BJo),e(Ev,IJo),e(Kr,qJo),e(Kr,Cv),e(Cv,Upe),e(Upe,NJo),e(Cv,jJo),e(Cv,FX),e(FX,DJo),e(Cv,GJo),e(Kr,OJo),e(Kr,wv),e(wv,Jpe),e(Jpe,VJo),e(wv,XJo),e(wv,TX),e(TX,zJo),e(wv,WJo),e(fo,QJo),e(fo,Av),e(Av,HJo),e(Av,Ype),e(Ype,UJo),e(Av,JJo),e(Av,Kpe),e(Kpe,YJo),e(fo,KJo),M(yv,fo,null),b(f,pqe,_),b(f,ud,_),e(ud,Lv),e(Lv,Zpe),M(eL,Zpe,null),e(ud,ZJo),e(ud,eue),e(eue,eYo),b(f,uqe,_),b(f,Vo,_),M(oL,Vo,null),e(Vo,oYo),e(Vo,_d),e(_d,rYo),e(_d,MX),e(MX,tYo),e(_d,aYo),e(_d,EX),e(EX,nYo),e(_d,sYo),e(Vo,lYo),e(Vo,rL),e(rL,iYo),e(rL,oue),e(oue,dYo),e(rL,cYo),e(Vo,fYo),e(Vo,vt),M(tL,vt,null),e(vt,mYo),e(vt,rue),e(rue,gYo),e(vt,hYo),e(vt,bd),e(bd,pYo),e(bd,tue),e(tue,uYo),e(bd,_Yo),e(bd,CX),e(CX,bYo),e(bd,vYo),e(vt,FYo),M(xv,vt,null),e(Vo,TYo),e(Vo,mo),M(aL,mo,null),e(mo,MYo),e(mo,aue),e(aue,EYo),e(mo,CYo),e(mo,Va),e(Va,wYo),e(Va,nue),e(nue,AYo),e(Va,yYo),e(Va,sue),e(sue,LYo),e(Va,xYo),e(Va,lue),e(lue,$Yo),e(Va,kYo),e(mo,SYo),e(mo,Se),e(Se,$v),e($v,iue),e(iue,RYo),e($v,PYo),e($v,wX),e(wX,BYo),e($v,IYo),e(Se,qYo),e(Se,kv),e(kv,due),e(due,NYo),e(kv,jYo),e(kv,AX),e(AX,DYo),e(kv,GYo),e(Se,OYo),e(Se,Sv),e(Sv,cue),e(cue,VYo),e(Sv,XYo),e(Sv,yX),e(yX,zYo),e(Sv,WYo),e(Se,QYo),e(Se,Rv),e(Rv,fue),e(fue,HYo),e(Rv,UYo),e(Rv,LX),e(LX,JYo),e(Rv,YYo),e(Se,KYo),e(Se,Pv),e(Pv,mue),e(mue,ZYo),e(Pv,eKo),e(Pv,xX),e(xX,oKo),e(Pv,rKo),e(Se,tKo),e(Se,Bv),e(Bv,gue),e(gue,aKo),e(Bv,nKo),e(Bv,$X),e($X,sKo),e(Bv,lKo),e(Se,iKo),e(Se,Iv),e(Iv,hue),e(hue,dKo),e(Iv,cKo),e(Iv,kX),e(kX,fKo),e(Iv,mKo),e(Se,gKo),e(Se,qv),e(qv,pue),e(pue,hKo),e(qv,pKo),e(qv,SX),e(SX,uKo),e(qv,_Ko),e(Se,bKo),e(Se,Nv),e(Nv,uue),e(uue,vKo),e(Nv,FKo),e(Nv,RX),e(RX,TKo),e(Nv,MKo),e(mo,EKo),e(mo,jv),e(jv,CKo),e(jv,_ue),e(_ue,wKo),e(jv,AKo),e(jv,bue),e(bue,yKo),e(mo,LKo),M(Dv,mo,null),b(f,_qe,_),b(f,vd,_),e(vd,Gv),e(Gv,vue),M(nL,vue,null),e(vd,xKo),e(vd,Fue),e(Fue,$Ko),b(f,bqe,_),b(f,Xo,_),M(sL,Xo,null),e(Xo,kKo),e(Xo,Fd),e(Fd,SKo),e(Fd,PX),e(PX,RKo),e(Fd,PKo),e(Fd,BX),e(BX,BKo),e(Fd,IKo),e(Xo,qKo),e(Xo,lL),e(lL,NKo),e(lL,Tue),e(Tue,jKo),e(lL,DKo),e(Xo,GKo),e(Xo,Ft),M(iL,Ft,null),e(Ft,OKo),e(Ft,Mue),e(Mue,VKo),e(Ft,XKo),e(Ft,Td),e(Td,zKo),e(Td,Eue),e(Eue,WKo),e(Td,QKo),e(Td,IX),e(IX,HKo),e(Td,UKo),e(Ft,JKo),M(Ov,Ft,null),e(Xo,YKo),e(Xo,go),M(dL,go,null),e(go,KKo),e(go,Cue),e(Cue,ZKo),e(go,eZo),e(go,Xa),e(Xa,oZo),e(Xa,wue),e(wue,rZo),e(Xa,tZo),e(Xa,Aue),e(Aue,aZo),e(Xa,nZo),e(Xa,yue),e(yue,sZo),e(Xa,lZo),e(go,iZo),e(go,cL),e(cL,Vv),e(Vv,Lue),e(Lue,dZo),e(Vv,cZo),e(Vv,qX),e(qX,fZo),e(Vv,mZo),e(cL,gZo),e(cL,Xv),e(Xv,xue),e(xue,hZo),e(Xv,pZo),e(Xv,NX),e(NX,uZo),e(Xv,_Zo),e(go,bZo),e(go,zv),e(zv,vZo),e(zv,$ue),e($ue,FZo),e(zv,TZo),e(zv,kue),e(kue,MZo),e(go,EZo),M(Wv,go,null),b(f,vqe,_),b(f,Md,_),e(Md,Qv),e(Qv,Sue),M(fL,Sue,null),e(Md,CZo),e(Md,Rue),e(Rue,wZo),b(f,Fqe,_),b(f,zo,_),M(mL,zo,null),e(zo,AZo),e(zo,Ed),e(Ed,yZo),e(Ed,jX),e(jX,LZo),e(Ed,xZo),e(Ed,DX),e(DX,$Zo),e(Ed,kZo),e(zo,SZo),e(zo,gL),e(gL,RZo),e(gL,Pue),e(Pue,PZo),e(gL,BZo),e(zo,IZo),e(zo,Tt),M(hL,Tt,null),e(Tt,qZo),e(Tt,Bue),e(Bue,NZo),e(Tt,jZo),e(Tt,Cd),e(Cd,DZo),e(Cd,Iue),e(Iue,GZo),e(Cd,OZo),e(Cd,GX),e(GX,VZo),e(Cd,XZo),e(Tt,zZo),M(Hv,Tt,null),e(zo,WZo),e(zo,ho),M(pL,ho,null),e(ho,QZo),e(ho,que),e(que,HZo),e(ho,UZo),e(ho,za),e(za,JZo),e(za,Nue),e(Nue,YZo),e(za,KZo),e(za,jue),e(jue,ZZo),e(za,eer),e(za,Due),e(Due,oer),e(za,rer),e(ho,ter),e(ho,Zr),e(Zr,Uv),e(Uv,Gue),e(Gue,aer),e(Uv,ner),e(Uv,OX),e(OX,ser),e(Uv,ler),e(Zr,ier),e(Zr,Jv),e(Jv,Oue),e(Oue,der),e(Jv,cer),e(Jv,VX),e(VX,fer),e(Jv,mer),e(Zr,ger),e(Zr,Yv),e(Yv,Vue),e(Vue,her),e(Yv,per),e(Yv,XX),e(XX,uer),e(Yv,_er),e(Zr,ber),e(Zr,Kv),e(Kv,Xue),e(Xue,ver),e(Kv,Fer),e(Kv,zX),e(zX,Ter),e(Kv,Mer),e(Zr,Eer),e(Zr,Zv),e(Zv,zue),e(zue,Cer),e(Zv,wer),e(Zv,WX),e(WX,Aer),e(Zv,yer),e(ho,Ler),e(ho,eF),e(eF,xer),e(eF,Wue),e(Wue,$er),e(eF,ker),e(eF,Que),e(Que,Ser),e(ho,Rer),M(oF,ho,null),b(f,Tqe,_),b(f,wd,_),e(wd,rF),e(rF,Hue),M(uL,Hue,null),e(wd,Per),e(wd,Uue),e(Uue,Ber),b(f,Mqe,_),b(f,Wo,_),M(_L,Wo,null),e(Wo,Ier),e(Wo,Ad),e(Ad,qer),e(Ad,QX),e(QX,Ner),e(Ad,jer),e(Ad,HX),e(HX,Der),e(Ad,Ger),e(Wo,Oer),e(Wo,bL),e(bL,Ver),e(bL,Jue),e(Jue,Xer),e(bL,zer),e(Wo,Wer),e(Wo,Mt),M(vL,Mt,null),e(Mt,Qer),e(Mt,Yue),e(Yue,Her),e(Mt,Uer),e(Mt,yd),e(yd,Jer),e(yd,Kue),e(Kue,Yer),e(yd,Ker),e(yd,UX),e(UX,Zer),e(yd,eor),e(Mt,oor),M(tF,Mt,null),e(Wo,ror),e(Wo,po),M(FL,po,null),e(po,tor),e(po,Zue),e(Zue,aor),e(po,nor),e(po,Wa),e(Wa,sor),e(Wa,e_e),e(e_e,lor),e(Wa,ior),e(Wa,o_e),e(o_e,dor),e(Wa,cor),e(Wa,r_e),e(r_e,mor),e(Wa,gor),e(po,hor),e(po,Ld),e(Ld,aF),e(aF,t_e),e(t_e,por),e(aF,uor),e(aF,JX),e(JX,_or),e(aF,bor),e(Ld,vor),e(Ld,nF),e(nF,a_e),e(a_e,For),e(nF,Tor),e(nF,YX),e(YX,Mor),e(nF,Eor),e(Ld,Cor),e(Ld,sF),e(sF,n_e),e(n_e,wor),e(sF,Aor),e(sF,KX),e(KX,yor),e(sF,Lor),e(po,xor),e(po,lF),e(lF,$or),e(lF,s_e),e(s_e,kor),e(lF,Sor),e(lF,l_e),e(l_e,Ror),e(po,Por),M(iF,po,null),b(f,Eqe,_),b(f,xd,_),e(xd,dF),e(dF,i_e),M(TL,i_e,null),e(xd,Bor),e(xd,d_e),e(d_e,Ior),b(f,Cqe,_),b(f,Qo,_),M(ML,Qo,null),e(Qo,qor),e(Qo,$d),e($d,Nor),e($d,ZX),e(ZX,jor),e($d,Dor),e($d,ez),e(ez,Gor),e($d,Oor),e(Qo,Vor),e(Qo,EL),e(EL,Xor),e(EL,c_e),e(c_e,zor),e(EL,Wor),e(Qo,Qor),e(Qo,Et),M(CL,Et,null),e(Et,Hor),e(Et,f_e),e(f_e,Uor),e(Et,Jor),e(Et,kd),e(kd,Yor),e(kd,m_e),e(m_e,Kor),e(kd,Zor),e(kd,oz),e(oz,err),e(kd,orr),e(Et,rrr),M(cF,Et,null),e(Qo,trr),e(Qo,uo),M(wL,uo,null),e(uo,arr),e(uo,g_e),e(g_e,nrr),e(uo,srr),e(uo,Qa),e(Qa,lrr),e(Qa,h_e),e(h_e,irr),e(Qa,drr),e(Qa,p_e),e(p_e,crr),e(Qa,frr),e(Qa,u_e),e(u_e,mrr),e(Qa,grr),e(uo,hrr),e(uo,AL),e(AL,fF),e(fF,__e),e(__e,prr),e(fF,urr),e(fF,rz),e(rz,_rr),e(fF,brr),e(AL,vrr),e(AL,mF),e(mF,b_e),e(b_e,Frr),e(mF,Trr),e(mF,tz),e(tz,Mrr),e(mF,Err),e(uo,Crr),e(uo,gF),e(gF,wrr),e(gF,v_e),e(v_e,Arr),e(gF,yrr),e(gF,F_e),e(F_e,Lrr),e(uo,xrr),M(hF,uo,null),b(f,wqe,_),b(f,Sd,_),e(Sd,pF),e(pF,T_e),M(yL,T_e,null),e(Sd,$rr),e(Sd,M_e),e(M_e,krr),b(f,Aqe,_),b(f,Ho,_),M(LL,Ho,null),e(Ho,Srr),e(Ho,Rd),e(Rd,Rrr),e(Rd,az),e(az,Prr),e(Rd,Brr),e(Rd,nz),e(nz,Irr),e(Rd,qrr),e(Ho,Nrr),e(Ho,xL),e(xL,jrr),e(xL,E_e),e(E_e,Drr),e(xL,Grr),e(Ho,Orr),e(Ho,Ct),M($L,Ct,null),e(Ct,Vrr),e(Ct,C_e),e(C_e,Xrr),e(Ct,zrr),e(Ct,Pd),e(Pd,Wrr),e(Pd,w_e),e(w_e,Qrr),e(Pd,Hrr),e(Pd,sz),e(sz,Urr),e(Pd,Jrr),e(Ct,Yrr),M(uF,Ct,null),e(Ho,Krr),e(Ho,_o),M(kL,_o,null),e(_o,Zrr),e(_o,A_e),e(A_e,etr),e(_o,otr),e(_o,Ha),e(Ha,rtr),e(Ha,y_e),e(y_e,ttr),e(Ha,atr),e(Ha,L_e),e(L_e,ntr),e(Ha,str),e(Ha,x_e),e(x_e,ltr),e(Ha,itr),e(_o,dtr),e(_o,$_e),e($_e,_F),e(_F,k_e),e(k_e,ctr),e(_F,ftr),e(_F,lz),e(lz,mtr),e(_F,gtr),e(_o,htr),e(_o,bF),e(bF,ptr),e(bF,S_e),e(S_e,utr),e(bF,_tr),e(bF,R_e),e(R_e,btr),e(_o,vtr),M(vF,_o,null),b(f,yqe,_),b(f,Bd,_),e(Bd,FF),e(FF,P_e),M(SL,P_e,null),e(Bd,Ftr),e(Bd,B_e),e(B_e,Ttr),b(f,Lqe,_),b(f,Uo,_),M(RL,Uo,null),e(Uo,Mtr),e(Uo,Id),e(Id,Etr),e(Id,iz),e(iz,Ctr),e(Id,wtr),e(Id,dz),e(dz,Atr),e(Id,ytr),e(Uo,Ltr),e(Uo,PL),e(PL,xtr),e(PL,I_e),e(I_e,$tr),e(PL,ktr),e(Uo,Str),e(Uo,wt),M(BL,wt,null),e(wt,Rtr),e(wt,q_e),e(q_e,Ptr),e(wt,Btr),e(wt,qd),e(qd,Itr),e(qd,N_e),e(N_e,qtr),e(qd,Ntr),e(qd,cz),e(cz,jtr),e(qd,Dtr),e(wt,Gtr),M(TF,wt,null),e(Uo,Otr),e(Uo,bo),M(IL,bo,null),e(bo,Vtr),e(bo,j_e),e(j_e,Xtr),e(bo,ztr),e(bo,Ua),e(Ua,Wtr),e(Ua,D_e),e(D_e,Qtr),e(Ua,Htr),e(Ua,G_e),e(G_e,Utr),e(Ua,Jtr),e(Ua,O_e),e(O_e,Ytr),e(Ua,Ktr),e(bo,Ztr),e(bo,Ja),e(Ja,MF),e(MF,V_e),e(V_e,ear),e(MF,oar),e(MF,fz),e(fz,rar),e(MF,tar),e(Ja,aar),e(Ja,EF),e(EF,X_e),e(X_e,nar),e(EF,sar),e(EF,mz),e(mz,lar),e(EF,iar),e(Ja,dar),e(Ja,CF),e(CF,z_e),e(z_e,car),e(CF,far),e(CF,gz),e(gz,mar),e(CF,gar),e(Ja,har),e(Ja,wF),e(wF,W_e),e(W_e,par),e(wF,uar),e(wF,hz),e(hz,_ar),e(wF,bar),e(bo,Far),e(bo,AF),e(AF,Tar),e(AF,Q_e),e(Q_e,Mar),e(AF,Ear),e(AF,H_e),e(H_e,Car),e(bo,war),M(yF,bo,null),b(f,xqe,_),b(f,Nd,_),e(Nd,LF),e(LF,U_e),M(qL,U_e,null),e(Nd,Aar),e(Nd,J_e),e(J_e,yar),b(f,$qe,_),b(f,Jo,_),M(NL,Jo,null),e(Jo,Lar),e(Jo,jd),e(jd,xar),e(jd,pz),e(pz,$ar),e(jd,kar),e(jd,uz),e(uz,Sar),e(jd,Rar),e(Jo,Par),e(Jo,jL),e(jL,Bar),e(jL,Y_e),e(Y_e,Iar),e(jL,qar),e(Jo,Nar),e(Jo,At),M(DL,At,null),e(At,jar),e(At,K_e),e(K_e,Dar),e(At,Gar),e(At,Dd),e(Dd,Oar),e(Dd,Z_e),e(Z_e,Var),e(Dd,Xar),e(Dd,_z),e(_z,zar),e(Dd,War),e(At,Qar),M(xF,At,null),e(Jo,Har),e(Jo,vo),M(GL,vo,null),e(vo,Uar),e(vo,e2e),e(e2e,Jar),e(vo,Yar),e(vo,Ya),e(Ya,Kar),e(Ya,o2e),e(o2e,Zar),e(Ya,enr),e(Ya,r2e),e(r2e,onr),e(Ya,rnr),e(Ya,t2e),e(t2e,tnr),e(Ya,anr),e(vo,nnr),e(vo,a2e),e(a2e,$F),e($F,n2e),e(n2e,snr),e($F,lnr),e($F,bz),e(bz,inr),e($F,dnr),e(vo,cnr),e(vo,kF),e(kF,fnr),e(kF,s2e),e(s2e,mnr),e(kF,gnr),e(kF,l2e),e(l2e,hnr),e(vo,pnr),M(SF,vo,null),b(f,kqe,_),b(f,Gd,_),e(Gd,RF),e(RF,i2e),M(OL,i2e,null),e(Gd,unr),e(Gd,d2e),e(d2e,_nr),b(f,Sqe,_),b(f,Yo,_),M(VL,Yo,null),e(Yo,bnr),e(Yo,Od),e(Od,vnr),e(Od,vz),e(vz,Fnr),e(Od,Tnr),e(Od,Fz),e(Fz,Mnr),e(Od,Enr),e(Yo,Cnr),e(Yo,XL),e(XL,wnr),e(XL,c2e),e(c2e,Anr),e(XL,ynr),e(Yo,Lnr),e(Yo,yt),M(zL,yt,null),e(yt,xnr),e(yt,f2e),e(f2e,$nr),e(yt,knr),e(yt,Vd),e(Vd,Snr),e(Vd,m2e),e(m2e,Rnr),e(Vd,Pnr),e(Vd,Tz),e(Tz,Bnr),e(Vd,Inr),e(yt,qnr),M(PF,yt,null),e(Yo,Nnr),e(Yo,wr),M(WL,wr,null),e(wr,jnr),e(wr,g2e),e(g2e,Dnr),e(wr,Gnr),e(wr,Ka),e(Ka,Onr),e(Ka,h2e),e(h2e,Vnr),e(Ka,Xnr),e(Ka,p2e),e(p2e,znr),e(Ka,Wnr),e(Ka,u2e),e(u2e,Qnr),e(Ka,Hnr),e(wr,Unr),e(wr,N),e(N,BF),e(BF,_2e),e(_2e,Jnr),e(BF,Ynr),e(BF,Mz),e(Mz,Knr),e(BF,Znr),e(N,esr),e(N,IF),e(IF,b2e),e(b2e,osr),e(IF,rsr),e(IF,Ez),e(Ez,tsr),e(IF,asr),e(N,nsr),e(N,qF),e(qF,v2e),e(v2e,ssr),e(qF,lsr),e(qF,Cz),e(Cz,isr),e(qF,dsr),e(N,csr),e(N,NF),e(NF,F2e),e(F2e,fsr),e(NF,msr),e(NF,wz),e(wz,gsr),e(NF,hsr),e(N,psr),e(N,jF),e(jF,T2e),e(T2e,usr),e(jF,_sr),e(jF,Az),e(Az,bsr),e(jF,vsr),e(N,Fsr),e(N,DF),e(DF,M2e),e(M2e,Tsr),e(DF,Msr),e(DF,yz),e(yz,Esr),e(DF,Csr),e(N,wsr),e(N,GF),e(GF,E2e),e(E2e,Asr),e(GF,ysr),e(GF,Lz),e(Lz,Lsr),e(GF,xsr),e(N,$sr),e(N,OF),e(OF,C2e),e(C2e,ksr),e(OF,Ssr),e(OF,xz),e(xz,Rsr),e(OF,Psr),e(N,Bsr),e(N,VF),e(VF,w2e),e(w2e,Isr),e(VF,qsr),e(VF,$z),e($z,Nsr),e(VF,jsr),e(N,Dsr),e(N,XF),e(XF,A2e),e(A2e,Gsr),e(XF,Osr),e(XF,kz),e(kz,Vsr),e(XF,Xsr),e(N,zsr),e(N,zF),e(zF,y2e),e(y2e,Wsr),e(zF,Qsr),e(zF,Sz),e(Sz,Hsr),e(zF,Usr),e(N,Jsr),e(N,WF),e(WF,L2e),e(L2e,Ysr),e(WF,Ksr),e(WF,Rz),e(Rz,Zsr),e(WF,elr),e(N,olr),e(N,QF),e(QF,x2e),e(x2e,rlr),e(QF,tlr),e(QF,Pz),e(Pz,alr),e(QF,nlr),e(N,slr),e(N,HF),e(HF,$2e),e($2e,llr),e(HF,ilr),e(HF,Bz),e(Bz,dlr),e(HF,clr),e(N,flr),e(N,UF),e(UF,k2e),e(k2e,mlr),e(UF,glr),e(UF,Iz),e(Iz,hlr),e(UF,plr),e(N,ulr),e(N,JF),e(JF,S2e),e(S2e,_lr),e(JF,blr),e(JF,qz),e(qz,vlr),e(JF,Flr),e(N,Tlr),e(N,YF),e(YF,R2e),e(R2e,Mlr),e(YF,Elr),e(YF,Nz),e(Nz,Clr),e(YF,wlr),e(N,Alr),e(N,Is),e(Is,P2e),e(P2e,ylr),e(Is,Llr),e(Is,jz),e(jz,xlr),e(Is,$lr),e(Is,Dz),e(Dz,klr),e(Is,Slr),e(N,Rlr),e(N,KF),e(KF,B2e),e(B2e,Plr),e(KF,Blr),e(KF,Gz),e(Gz,Ilr),e(KF,qlr),e(N,Nlr),e(N,ZF),e(ZF,I2e),e(I2e,jlr),e(ZF,Dlr),e(ZF,Oz),e(Oz,Glr),e(ZF,Olr),e(N,Vlr),e(N,eT),e(eT,q2e),e(q2e,Xlr),e(eT,zlr),e(eT,Vz),e(Vz,Wlr),e(eT,Qlr),e(N,Hlr),e(N,oT),e(oT,N2e),e(N2e,Ulr),e(oT,Jlr),e(oT,Xz),e(Xz,Ylr),e(oT,Klr),e(N,Zlr),e(N,rT),e(rT,j2e),e(j2e,eir),e(rT,oir),e(rT,zz),e(zz,rir),e(rT,tir),e(N,air),e(N,tT),e(tT,D2e),e(D2e,nir),e(tT,sir),e(tT,Wz),e(Wz,lir),e(tT,iir),e(N,dir),e(N,aT),e(aT,G2e),e(G2e,cir),e(aT,fir),e(aT,Qz),e(Qz,mir),e(aT,gir),e(N,hir),e(N,nT),e(nT,O2e),e(O2e,pir),e(nT,uir),e(nT,Hz),e(Hz,_ir),e(nT,bir),e(N,vir),e(N,sT),e(sT,V2e),e(V2e,Fir),e(sT,Tir),e(sT,Uz),e(Uz,Mir),e(sT,Eir),e(N,Cir),e(N,lT),e(lT,X2e),e(X2e,wir),e(lT,Air),e(lT,Jz),e(Jz,yir),e(lT,Lir),e(N,xir),e(N,iT),e(iT,z2e),e(z2e,$ir),e(iT,kir),e(iT,Yz),e(Yz,Sir),e(iT,Rir),e(N,Pir),e(N,dT),e(dT,W2e),e(W2e,Bir),e(dT,Iir),e(dT,Kz),e(Kz,qir),e(dT,Nir),e(N,jir),e(N,cT),e(cT,Q2e),e(Q2e,Dir),e(cT,Gir),e(cT,Zz),e(Zz,Oir),e(cT,Vir),e(N,Xir),e(N,fT),e(fT,H2e),e(H2e,zir),e(fT,Wir),e(fT,eW),e(eW,Qir),e(fT,Hir),e(N,Uir),e(N,mT),e(mT,U2e),e(U2e,Jir),e(mT,Yir),e(mT,oW),e(oW,Kir),e(mT,Zir),e(N,edr),e(N,gT),e(gT,J2e),e(J2e,odr),e(gT,rdr),e(gT,rW),e(rW,tdr),e(gT,adr),e(N,ndr),e(N,hT),e(hT,Y2e),e(Y2e,sdr),e(hT,ldr),e(hT,tW),e(tW,idr),e(hT,ddr),e(N,cdr),e(N,pT),e(pT,K2e),e(K2e,fdr),e(pT,mdr),e(pT,aW),e(aW,gdr),e(pT,hdr),e(N,pdr),e(N,uT),e(uT,Z2e),e(Z2e,udr),e(uT,_dr),e(uT,nW),e(nW,bdr),e(uT,vdr),e(N,Fdr),e(N,_T),e(_T,e1e),e(e1e,Tdr),e(_T,Mdr),e(_T,sW),e(sW,Edr),e(_T,Cdr),e(N,wdr),e(N,bT),e(bT,o1e),e(o1e,Adr),e(bT,ydr),e(bT,lW),e(lW,Ldr),e(bT,xdr),e(N,$dr),e(N,vT),e(vT,r1e),e(r1e,kdr),e(vT,Sdr),e(vT,iW),e(iW,Rdr),e(vT,Pdr),e(N,Bdr),e(N,FT),e(FT,t1e),e(t1e,Idr),e(FT,qdr),e(FT,dW),e(dW,Ndr),e(FT,jdr),e(N,Ddr),e(N,TT),e(TT,a1e),e(a1e,Gdr),e(TT,Odr),e(TT,cW),e(cW,Vdr),e(TT,Xdr),e(N,zdr),e(N,MT),e(MT,n1e),e(n1e,Wdr),e(MT,Qdr),e(MT,fW),e(fW,Hdr),e(MT,Udr),e(N,Jdr),e(N,ET),e(ET,s1e),e(s1e,Ydr),e(ET,Kdr),e(ET,mW),e(mW,Zdr),e(ET,ecr),e(N,ocr),e(N,CT),e(CT,l1e),e(l1e,rcr),e(CT,tcr),e(CT,gW),e(gW,acr),e(CT,ncr),e(N,scr),e(N,wT),e(wT,i1e),e(i1e,lcr),e(wT,icr),e(wT,hW),e(hW,dcr),e(wT,ccr),e(wr,fcr),M(AT,wr,null),b(f,Rqe,_),b(f,Xd,_),e(Xd,yT),e(yT,d1e),M(QL,d1e,null),e(Xd,mcr),e(Xd,c1e),e(c1e,gcr),b(f,Pqe,_),b(f,Ko,_),M(HL,Ko,null),e(Ko,hcr),e(Ko,zd),e(zd,pcr),e(zd,pW),e(pW,ucr),e(zd,_cr),e(zd,uW),e(uW,bcr),e(zd,vcr),e(Ko,Fcr),e(Ko,UL),e(UL,Tcr),e(UL,f1e),e(f1e,Mcr),e(UL,Ecr),e(Ko,Ccr),e(Ko,Lt),M(JL,Lt,null),e(Lt,wcr),e(Lt,m1e),e(m1e,Acr),e(Lt,ycr),e(Lt,Wd),e(Wd,Lcr),e(Wd,g1e),e(g1e,xcr),e(Wd,$cr),e(Wd,_W),e(_W,kcr),e(Wd,Scr),e(Lt,Rcr),M(LT,Lt,null),e(Ko,Pcr),e(Ko,Ar),M(YL,Ar,null),e(Ar,Bcr),e(Ar,h1e),e(h1e,Icr),e(Ar,qcr),e(Ar,Za),e(Za,Ncr),e(Za,p1e),e(p1e,jcr),e(Za,Dcr),e(Za,u1e),e(u1e,Gcr),e(Za,Ocr),e(Za,_1e),e(_1e,Vcr),e(Za,Xcr),e(Ar,zcr),e(Ar,se),e(se,xT),e(xT,b1e),e(b1e,Wcr),e(xT,Qcr),e(xT,bW),e(bW,Hcr),e(xT,Ucr),e(se,Jcr),e(se,$T),e($T,v1e),e(v1e,Ycr),e($T,Kcr),e($T,vW),e(vW,Zcr),e($T,efr),e(se,ofr),e(se,kT),e(kT,F1e),e(F1e,rfr),e(kT,tfr),e(kT,FW),e(FW,afr),e(kT,nfr),e(se,sfr),e(se,ST),e(ST,T1e),e(T1e,lfr),e(ST,ifr),e(ST,TW),e(TW,dfr),e(ST,cfr),e(se,ffr),e(se,RT),e(RT,M1e),e(M1e,mfr),e(RT,gfr),e(RT,MW),e(MW,hfr),e(RT,pfr),e(se,ufr),e(se,PT),e(PT,E1e),e(E1e,_fr),e(PT,bfr),e(PT,EW),e(EW,vfr),e(PT,Ffr),e(se,Tfr),e(se,BT),e(BT,C1e),e(C1e,Mfr),e(BT,Efr),e(BT,CW),e(CW,Cfr),e(BT,wfr),e(se,Afr),e(se,IT),e(IT,w1e),e(w1e,yfr),e(IT,Lfr),e(IT,wW),e(wW,xfr),e(IT,$fr),e(se,kfr),e(se,qT),e(qT,A1e),e(A1e,Sfr),e(qT,Rfr),e(qT,AW),e(AW,Pfr),e(qT,Bfr),e(se,Ifr),e(se,NT),e(NT,y1e),e(y1e,qfr),e(NT,Nfr),e(NT,yW),e(yW,jfr),e(NT,Dfr),e(se,Gfr),e(se,jT),e(jT,L1e),e(L1e,Ofr),e(jT,Vfr),e(jT,LW),e(LW,Xfr),e(jT,zfr),e(se,Wfr),e(se,DT),e(DT,x1e),e(x1e,Qfr),e(DT,Hfr),e(DT,xW),e(xW,Ufr),e(DT,Jfr),e(se,Yfr),e(se,GT),e(GT,$1e),e($1e,Kfr),e(GT,Zfr),e(GT,$W),e($W,emr),e(GT,omr),e(se,rmr),e(se,OT),e(OT,k1e),e(k1e,tmr),e(OT,amr),e(OT,kW),e(kW,nmr),e(OT,smr),e(se,lmr),e(se,VT),e(VT,S1e),e(S1e,imr),e(VT,dmr),e(VT,SW),e(SW,cmr),e(VT,fmr),e(se,mmr),e(se,XT),e(XT,R1e),e(R1e,gmr),e(XT,hmr),e(XT,RW),e(RW,pmr),e(XT,umr),e(se,_mr),e(se,zT),e(zT,P1e),e(P1e,bmr),e(zT,vmr),e(zT,PW),e(PW,Fmr),e(zT,Tmr),e(se,Mmr),e(se,WT),e(WT,B1e),e(B1e,Emr),e(WT,Cmr),e(WT,BW),e(BW,wmr),e(WT,Amr),e(se,ymr),e(se,QT),e(QT,I1e),e(I1e,Lmr),e(QT,xmr),e(QT,IW),e(IW,$mr),e(QT,kmr),e(se,Smr),e(se,HT),e(HT,q1e),e(q1e,Rmr),e(HT,Pmr),e(HT,qW),e(qW,Bmr),e(HT,Imr),e(se,qmr),e(se,UT),e(UT,N1e),e(N1e,Nmr),e(UT,jmr),e(UT,NW),e(NW,Dmr),e(UT,Gmr),e(se,Omr),e(se,JT),e(JT,j1e),e(j1e,Vmr),e(JT,Xmr),e(JT,jW),e(jW,zmr),e(JT,Wmr),e(se,Qmr),e(se,YT),e(YT,D1e),e(D1e,Hmr),e(YT,Umr),e(YT,DW),e(DW,Jmr),e(YT,Ymr),e(Ar,Kmr),M(KT,Ar,null),b(f,Bqe,_),b(f,Qd,_),e(Qd,ZT),e(ZT,G1e),M(KL,G1e,null),e(Qd,Zmr),e(Qd,O1e),e(O1e,egr),b(f,Iqe,_),b(f,Zo,_),M(ZL,Zo,null),e(Zo,ogr),e(Zo,Hd),e(Hd,rgr),e(Hd,GW),e(GW,tgr),e(Hd,agr),e(Hd,OW),e(OW,ngr),e(Hd,sgr),e(Zo,lgr),e(Zo,e8),e(e8,igr),e(e8,V1e),e(V1e,dgr),e(e8,cgr),e(Zo,fgr),e(Zo,xt),M(o8,xt,null),e(xt,mgr),e(xt,X1e),e(X1e,ggr),e(xt,hgr),e(xt,Ud),e(Ud,pgr),e(Ud,z1e),e(z1e,ugr),e(Ud,_gr),e(Ud,VW),e(VW,bgr),e(Ud,vgr),e(xt,Fgr),M(e7,xt,null),e(Zo,Tgr),e(Zo,yr),M(r8,yr,null),e(yr,Mgr),e(yr,W1e),e(W1e,Egr),e(yr,Cgr),e(yr,en),e(en,wgr),e(en,Q1e),e(Q1e,Agr),e(en,ygr),e(en,H1e),e(H1e,Lgr),e(en,xgr),e(en,U1e),e(U1e,$gr),e(en,kgr),e(yr,Sgr),e(yr,Te),e(Te,o7),e(o7,J1e),e(J1e,Rgr),e(o7,Pgr),e(o7,XW),e(XW,Bgr),e(o7,Igr),e(Te,qgr),e(Te,r7),e(r7,Y1e),e(Y1e,Ngr),e(r7,jgr),e(r7,zW),e(zW,Dgr),e(r7,Ggr),e(Te,Ogr),e(Te,t7),e(t7,K1e),e(K1e,Vgr),e(t7,Xgr),e(t7,WW),e(WW,zgr),e(t7,Wgr),e(Te,Qgr),e(Te,a7),e(a7,Z1e),e(Z1e,Hgr),e(a7,Ugr),e(a7,QW),e(QW,Jgr),e(a7,Ygr),e(Te,Kgr),e(Te,n7),e(n7,ebe),e(ebe,Zgr),e(n7,ehr),e(n7,HW),e(HW,ohr),e(n7,rhr),e(Te,thr),e(Te,s7),e(s7,obe),e(obe,ahr),e(s7,nhr),e(s7,UW),e(UW,shr),e(s7,lhr),e(Te,ihr),e(Te,l7),e(l7,rbe),e(rbe,dhr),e(l7,chr),e(l7,JW),e(JW,fhr),e(l7,mhr),e(Te,ghr),e(Te,i7),e(i7,tbe),e(tbe,hhr),e(i7,phr),e(i7,YW),e(YW,uhr),e(i7,_hr),e(Te,bhr),e(Te,d7),e(d7,abe),e(abe,vhr),e(d7,Fhr),e(d7,KW),e(KW,Thr),e(d7,Mhr),e(Te,Ehr),e(Te,c7),e(c7,nbe),e(nbe,Chr),e(c7,whr),e(c7,ZW),e(ZW,Ahr),e(c7,yhr),e(Te,Lhr),e(Te,f7),e(f7,sbe),e(sbe,xhr),e(f7,$hr),e(f7,eQ),e(eQ,khr),e(f7,Shr),e(Te,Rhr),e(Te,m7),e(m7,lbe),e(lbe,Phr),e(m7,Bhr),e(m7,oQ),e(oQ,Ihr),e(m7,qhr),e(yr,Nhr),M(g7,yr,null),b(f,qqe,_),b(f,Jd,_),e(Jd,h7),e(h7,ibe),M(t8,ibe,null),e(Jd,jhr),e(Jd,dbe),e(dbe,Dhr),b(f,Nqe,_),b(f,er,_),M(a8,er,null),e(er,Ghr),e(er,Yd),e(Yd,Ohr),e(Yd,rQ),e(rQ,Vhr),e(Yd,Xhr),e(Yd,tQ),e(tQ,zhr),e(Yd,Whr),e(er,Qhr),e(er,n8),e(n8,Hhr),e(n8,cbe),e(cbe,Uhr),e(n8,Jhr),e(er,Yhr),e(er,$t),M(s8,$t,null),e($t,Khr),e($t,fbe),e(fbe,Zhr),e($t,epr),e($t,Kd),e(Kd,opr),e(Kd,mbe),e(mbe,rpr),e(Kd,tpr),e(Kd,aQ),e(aQ,apr),e(Kd,npr),e($t,spr),M(p7,$t,null),e(er,lpr),e(er,Lr),M(l8,Lr,null),e(Lr,ipr),e(Lr,gbe),e(gbe,dpr),e(Lr,cpr),e(Lr,on),e(on,fpr),e(on,hbe),e(hbe,mpr),e(on,gpr),e(on,pbe),e(pbe,hpr),e(on,ppr),e(on,ube),e(ube,upr),e(on,_pr),e(Lr,bpr),e(Lr,rn),e(rn,u7),e(u7,_be),e(_be,vpr),e(u7,Fpr),e(u7,nQ),e(nQ,Tpr),e(u7,Mpr),e(rn,Epr),e(rn,_7),e(_7,bbe),e(bbe,Cpr),e(_7,wpr),e(_7,sQ),e(sQ,Apr),e(_7,ypr),e(rn,Lpr),e(rn,b7),e(b7,vbe),e(vbe,xpr),e(b7,$pr),e(b7,lQ),e(lQ,kpr),e(b7,Spr),e(rn,Rpr),e(rn,v7),e(v7,Fbe),e(Fbe,Ppr),e(v7,Bpr),e(v7,iQ),e(iQ,Ipr),e(v7,qpr),e(Lr,Npr),M(F7,Lr,null),b(f,jqe,_),b(f,Zd,_),e(Zd,T7),e(T7,Tbe),M(i8,Tbe,null),e(Zd,jpr),e(Zd,Mbe),e(Mbe,Dpr),b(f,Dqe,_),b(f,or,_),M(d8,or,null),e(or,Gpr),e(or,ec),e(ec,Opr),e(ec,dQ),e(dQ,Vpr),e(ec,Xpr),e(ec,cQ),e(cQ,zpr),e(ec,Wpr),e(or,Qpr),e(or,c8),e(c8,Hpr),e(c8,Ebe),e(Ebe,Upr),e(c8,Jpr),e(or,Ypr),e(or,kt),M(f8,kt,null),e(kt,Kpr),e(kt,Cbe),e(Cbe,Zpr),e(kt,eur),e(kt,oc),e(oc,our),e(oc,wbe),e(wbe,rur),e(oc,tur),e(oc,fQ),e(fQ,aur),e(oc,nur),e(kt,sur),M(M7,kt,null),e(or,lur),e(or,xr),M(m8,xr,null),e(xr,iur),e(xr,Abe),e(Abe,dur),e(xr,cur),e(xr,tn),e(tn,fur),e(tn,ybe),e(ybe,mur),e(tn,gur),e(tn,Lbe),e(Lbe,hur),e(tn,pur),e(tn,xbe),e(xbe,uur),e(tn,_ur),e(xr,bur),e(xr,ie),e(ie,E7),e(E7,$be),e($be,vur),e(E7,Fur),e(E7,mQ),e(mQ,Tur),e(E7,Mur),e(ie,Eur),e(ie,C7),e(C7,kbe),e(kbe,Cur),e(C7,wur),e(C7,gQ),e(gQ,Aur),e(C7,yur),e(ie,Lur),e(ie,w7),e(w7,Sbe),e(Sbe,xur),e(w7,$ur),e(w7,hQ),e(hQ,kur),e(w7,Sur),e(ie,Rur),e(ie,A7),e(A7,Rbe),e(Rbe,Pur),e(A7,Bur),e(A7,pQ),e(pQ,Iur),e(A7,qur),e(ie,Nur),e(ie,y7),e(y7,Pbe),e(Pbe,jur),e(y7,Dur),e(y7,uQ),e(uQ,Gur),e(y7,Our),e(ie,Vur),e(ie,L7),e(L7,Bbe),e(Bbe,Xur),e(L7,zur),e(L7,_Q),e(_Q,Wur),e(L7,Qur),e(ie,Hur),e(ie,x7),e(x7,Ibe),e(Ibe,Uur),e(x7,Jur),e(x7,bQ),e(bQ,Yur),e(x7,Kur),e(ie,Zur),e(ie,$7),e($7,qbe),e(qbe,e_r),e($7,o_r),e($7,vQ),e(vQ,r_r),e($7,t_r),e(ie,a_r),e(ie,k7),e(k7,Nbe),e(Nbe,n_r),e(k7,s_r),e(k7,FQ),e(FQ,l_r),e(k7,i_r),e(ie,d_r),e(ie,S7),e(S7,jbe),e(jbe,c_r),e(S7,f_r),e(S7,TQ),e(TQ,m_r),e(S7,g_r),e(ie,h_r),e(ie,R7),e(R7,Dbe),e(Dbe,p_r),e(R7,u_r),e(R7,MQ),e(MQ,__r),e(R7,b_r),e(ie,v_r),e(ie,P7),e(P7,Gbe),e(Gbe,F_r),e(P7,T_r),e(P7,EQ),e(EQ,M_r),e(P7,E_r),e(ie,C_r),e(ie,B7),e(B7,Obe),e(Obe,w_r),e(B7,A_r),e(B7,CQ),e(CQ,y_r),e(B7,L_r),e(ie,x_r),e(ie,I7),e(I7,Vbe),e(Vbe,$_r),e(I7,k_r),e(I7,wQ),e(wQ,S_r),e(I7,R_r),e(ie,P_r),e(ie,q7),e(q7,Xbe),e(Xbe,B_r),e(q7,I_r),e(q7,AQ),e(AQ,q_r),e(q7,N_r),e(ie,j_r),e(ie,N7),e(N7,zbe),e(zbe,D_r),e(N7,G_r),e(N7,yQ),e(yQ,O_r),e(N7,V_r),e(ie,X_r),e(ie,j7),e(j7,Wbe),e(Wbe,z_r),e(j7,W_r),e(j7,LQ),e(LQ,Q_r),e(j7,H_r),e(ie,U_r),e(ie,D7),e(D7,Qbe),e(Qbe,J_r),e(D7,Y_r),e(D7,xQ),e(xQ,K_r),e(D7,Z_r),e(ie,e2r),e(ie,G7),e(G7,Hbe),e(Hbe,o2r),e(G7,r2r),e(G7,$Q),e($Q,t2r),e(G7,a2r),e(ie,n2r),e(ie,O7),e(O7,Ube),e(Ube,s2r),e(O7,l2r),e(O7,kQ),e(kQ,i2r),e(O7,d2r),e(xr,c2r),M(V7,xr,null),b(f,Gqe,_),b(f,rc,_),e(rc,X7),e(X7,Jbe),M(g8,Jbe,null),e(rc,f2r),e(rc,Ybe),e(Ybe,m2r),b(f,Oqe,_),b(f,rr,_),M(h8,rr,null),e(rr,g2r),e(rr,tc),e(tc,h2r),e(tc,SQ),e(SQ,p2r),e(tc,u2r),e(tc,RQ),e(RQ,_2r),e(tc,b2r),e(rr,v2r),e(rr,p8),e(p8,F2r),e(p8,Kbe),e(Kbe,T2r),e(p8,M2r),e(rr,E2r),e(rr,St),M(u8,St,null),e(St,C2r),e(St,Zbe),e(Zbe,w2r),e(St,A2r),e(St,ac),e(ac,y2r),e(ac,e4e),e(e4e,L2r),e(ac,x2r),e(ac,PQ),e(PQ,$2r),e(ac,k2r),e(St,S2r),M(z7,St,null),e(rr,R2r),e(rr,$r),M(_8,$r,null),e($r,P2r),e($r,o4e),e(o4e,B2r),e($r,I2r),e($r,an),e(an,q2r),e(an,r4e),e(r4e,N2r),e(an,j2r),e(an,t4e),e(t4e,D2r),e(an,G2r),e(an,a4e),e(a4e,O2r),e(an,V2r),e($r,X2r),e($r,ye),e(ye,W7),e(W7,n4e),e(n4e,z2r),e(W7,W2r),e(W7,BQ),e(BQ,Q2r),e(W7,H2r),e(ye,U2r),e(ye,Q7),e(Q7,s4e),e(s4e,J2r),e(Q7,Y2r),e(Q7,IQ),e(IQ,K2r),e(Q7,Z2r),e(ye,e1r),e(ye,H7),e(H7,l4e),e(l4e,o1r),e(H7,r1r),e(H7,qQ),e(qQ,t1r),e(H7,a1r),e(ye,n1r),e(ye,U7),e(U7,i4e),e(i4e,s1r),e(U7,l1r),e(U7,NQ),e(NQ,i1r),e(U7,d1r),e(ye,c1r),e(ye,J7),e(J7,d4e),e(d4e,f1r),e(J7,m1r),e(J7,jQ),e(jQ,g1r),e(J7,h1r),e(ye,p1r),e(ye,Y7),e(Y7,c4e),e(c4e,u1r),e(Y7,_1r),e(Y7,DQ),e(DQ,b1r),e(Y7,v1r),e(ye,F1r),e(ye,K7),e(K7,f4e),e(f4e,T1r),e(K7,M1r),e(K7,GQ),e(GQ,E1r),e(K7,C1r),e(ye,w1r),e(ye,Z7),e(Z7,m4e),e(m4e,A1r),e(Z7,y1r),e(Z7,OQ),e(OQ,L1r),e(Z7,x1r),e(ye,$1r),e(ye,eM),e(eM,g4e),e(g4e,k1r),e(eM,S1r),e(eM,VQ),e(VQ,R1r),e(eM,P1r),e(ye,B1r),e(ye,oM),e(oM,h4e),e(h4e,I1r),e(oM,q1r),e(oM,XQ),e(XQ,N1r),e(oM,j1r),e($r,D1r),M(rM,$r,null),b(f,Vqe,_),b(f,nc,_),e(nc,tM),e(tM,p4e),M(b8,p4e,null),e(nc,G1r),e(nc,u4e),e(u4e,O1r),b(f,Xqe,_),b(f,tr,_),M(v8,tr,null),e(tr,V1r),e(tr,sc),e(sc,X1r),e(sc,zQ),e(zQ,z1r),e(sc,W1r),e(sc,WQ),e(WQ,Q1r),e(sc,H1r),e(tr,U1r),e(tr,F8),e(F8,J1r),e(F8,_4e),e(_4e,Y1r),e(F8,K1r),e(tr,Z1r),e(tr,Rt),M(T8,Rt,null),e(Rt,ebr),e(Rt,b4e),e(b4e,obr),e(Rt,rbr),e(Rt,lc),e(lc,tbr),e(lc,v4e),e(v4e,abr),e(lc,nbr),e(lc,QQ),e(QQ,sbr),e(lc,lbr),e(Rt,ibr),M(aM,Rt,null),e(tr,dbr),e(tr,kr),M(M8,kr,null),e(kr,cbr),e(kr,F4e),e(F4e,fbr),e(kr,mbr),e(kr,nn),e(nn,gbr),e(nn,T4e),e(T4e,hbr),e(nn,pbr),e(nn,M4e),e(M4e,ubr),e(nn,_br),e(nn,E4e),e(E4e,bbr),e(nn,vbr),e(kr,Fbr),e(kr,ee),e(ee,nM),e(nM,C4e),e(C4e,Tbr),e(nM,Mbr),e(nM,HQ),e(HQ,Ebr),e(nM,Cbr),e(ee,wbr),e(ee,sM),e(sM,w4e),e(w4e,Abr),e(sM,ybr),e(sM,UQ),e(UQ,Lbr),e(sM,xbr),e(ee,$br),e(ee,lM),e(lM,A4e),e(A4e,kbr),e(lM,Sbr),e(lM,JQ),e(JQ,Rbr),e(lM,Pbr),e(ee,Bbr),e(ee,iM),e(iM,y4e),e(y4e,Ibr),e(iM,qbr),e(iM,YQ),e(YQ,Nbr),e(iM,jbr),e(ee,Dbr),e(ee,dM),e(dM,L4e),e(L4e,Gbr),e(dM,Obr),e(dM,KQ),e(KQ,Vbr),e(dM,Xbr),e(ee,zbr),e(ee,cM),e(cM,x4e),e(x4e,Wbr),e(cM,Qbr),e(cM,ZQ),e(ZQ,Hbr),e(cM,Ubr),e(ee,Jbr),e(ee,fM),e(fM,$4e),e($4e,Ybr),e(fM,Kbr),e(fM,eH),e(eH,Zbr),e(fM,e4r),e(ee,o4r),e(ee,mM),e(mM,k4e),e(k4e,r4r),e(mM,t4r),e(mM,oH),e(oH,a4r),e(mM,n4r),e(ee,s4r),e(ee,gM),e(gM,S4e),e(S4e,l4r),e(gM,i4r),e(gM,rH),e(rH,d4r),e(gM,c4r),e(ee,f4r),e(ee,hM),e(hM,R4e),e(R4e,m4r),e(hM,g4r),e(hM,tH),e(tH,h4r),e(hM,p4r),e(ee,u4r),e(ee,pM),e(pM,P4e),e(P4e,_4r),e(pM,b4r),e(pM,aH),e(aH,v4r),e(pM,F4r),e(ee,T4r),e(ee,uM),e(uM,B4e),e(B4e,M4r),e(uM,E4r),e(uM,nH),e(nH,C4r),e(uM,w4r),e(ee,A4r),e(ee,_M),e(_M,I4e),e(I4e,y4r),e(_M,L4r),e(_M,sH),e(sH,x4r),e(_M,$4r),e(ee,k4r),e(ee,bM),e(bM,q4e),e(q4e,S4r),e(bM,R4r),e(bM,lH),e(lH,P4r),e(bM,B4r),e(ee,I4r),e(ee,vM),e(vM,N4e),e(N4e,q4r),e(vM,N4r),e(vM,iH),e(iH,j4r),e(vM,D4r),e(ee,G4r),e(ee,FM),e(FM,j4e),e(j4e,O4r),e(FM,V4r),e(FM,dH),e(dH,X4r),e(FM,z4r),e(ee,W4r),e(ee,TM),e(TM,D4e),e(D4e,Q4r),e(TM,H4r),e(TM,cH),e(cH,U4r),e(TM,J4r),e(ee,Y4r),e(ee,MM),e(MM,G4e),e(G4e,K4r),e(MM,Z4r),e(MM,fH),e(fH,e5r),e(MM,o5r),e(ee,r5r),e(ee,EM),e(EM,O4e),e(O4e,t5r),e(EM,a5r),e(EM,mH),e(mH,n5r),e(EM,s5r),e(ee,l5r),e(ee,CM),e(CM,V4e),e(V4e,i5r),e(CM,d5r),e(CM,gH),e(gH,c5r),e(CM,f5r),e(ee,m5r),e(ee,wM),e(wM,X4e),e(X4e,g5r),e(wM,h5r),e(wM,hH),e(hH,p5r),e(wM,u5r),e(ee,_5r),e(ee,AM),e(AM,z4e),e(z4e,b5r),e(AM,v5r),e(AM,pH),e(pH,F5r),e(AM,T5r),e(ee,M5r),e(ee,yM),e(yM,W4e),e(W4e,E5r),e(yM,C5r),e(yM,uH),e(uH,w5r),e(yM,A5r),e(ee,y5r),e(ee,LM),e(LM,Q4e),e(Q4e,L5r),e(LM,x5r),e(LM,_H),e(_H,$5r),e(LM,k5r),e(ee,S5r),e(ee,xM),e(xM,H4e),e(H4e,R5r),e(xM,P5r),e(xM,bH),e(bH,B5r),e(xM,I5r),e(ee,q5r),e(ee,$M),e($M,U4e),e(U4e,N5r),e($M,j5r),e($M,vH),e(vH,D5r),e($M,G5r),e(kr,O5r),M(kM,kr,null),b(f,zqe,_),b(f,ic,_),e(ic,SM),e(SM,J4e),M(E8,J4e,null),e(ic,V5r),e(ic,Y4e),e(Y4e,X5r),b(f,Wqe,_),b(f,ar,_),M(C8,ar,null),e(ar,z5r),e(ar,dc),e(dc,W5r),e(dc,FH),e(FH,Q5r),e(dc,H5r),e(dc,TH),e(TH,U5r),e(dc,J5r),e(ar,Y5r),e(ar,w8),e(w8,K5r),e(w8,K4e),e(K4e,Z5r),e(w8,evr),e(ar,ovr),e(ar,Pt),M(A8,Pt,null),e(Pt,rvr),e(Pt,Z4e),e(Z4e,tvr),e(Pt,avr),e(Pt,cc),e(cc,nvr),e(cc,e5e),e(e5e,svr),e(cc,lvr),e(cc,MH),e(MH,ivr),e(cc,dvr),e(Pt,cvr),M(RM,Pt,null),e(ar,fvr),e(ar,Sr),M(y8,Sr,null),e(Sr,mvr),e(Sr,o5e),e(o5e,gvr),e(Sr,hvr),e(Sr,sn),e(sn,pvr),e(sn,r5e),e(r5e,uvr),e(sn,_vr),e(sn,t5e),e(t5e,bvr),e(sn,vvr),e(sn,a5e),e(a5e,Fvr),e(sn,Tvr),e(Sr,Mvr),e(Sr,he),e(he,PM),e(PM,n5e),e(n5e,Evr),e(PM,Cvr),e(PM,EH),e(EH,wvr),e(PM,Avr),e(he,yvr),e(he,BM),e(BM,s5e),e(s5e,Lvr),e(BM,xvr),e(BM,CH),e(CH,$vr),e(BM,kvr),e(he,Svr),e(he,IM),e(IM,l5e),e(l5e,Rvr),e(IM,Pvr),e(IM,wH),e(wH,Bvr),e(IM,Ivr),e(he,qvr),e(he,qM),e(qM,i5e),e(i5e,Nvr),e(qM,jvr),e(qM,AH),e(AH,Dvr),e(qM,Gvr),e(he,Ovr),e(he,NM),e(NM,d5e),e(d5e,Vvr),e(NM,Xvr),e(NM,yH),e(yH,zvr),e(NM,Wvr),e(he,Qvr),e(he,jM),e(jM,c5e),e(c5e,Hvr),e(jM,Uvr),e(jM,LH),e(LH,Jvr),e(jM,Yvr),e(he,Kvr),e(he,DM),e(DM,f5e),e(f5e,Zvr),e(DM,eFr),e(DM,xH),e(xH,oFr),e(DM,rFr),e(he,tFr),e(he,GM),e(GM,m5e),e(m5e,aFr),e(GM,nFr),e(GM,$H),e($H,sFr),e(GM,lFr),e(he,iFr),e(he,OM),e(OM,g5e),e(g5e,dFr),e(OM,cFr),e(OM,kH),e(kH,fFr),e(OM,mFr),e(he,gFr),e(he,VM),e(VM,h5e),e(h5e,hFr),e(VM,pFr),e(VM,SH),e(SH,uFr),e(VM,_Fr),e(he,bFr),e(he,XM),e(XM,p5e),e(p5e,vFr),e(XM,FFr),e(XM,RH),e(RH,TFr),e(XM,MFr),e(he,EFr),e(he,zM),e(zM,u5e),e(u5e,CFr),e(zM,wFr),e(zM,PH),e(PH,AFr),e(zM,yFr),e(he,LFr),e(he,WM),e(WM,_5e),e(_5e,xFr),e(WM,$Fr),e(WM,BH),e(BH,kFr),e(WM,SFr),e(he,RFr),e(he,QM),e(QM,b5e),e(b5e,PFr),e(QM,BFr),e(QM,IH),e(IH,IFr),e(QM,qFr),e(he,NFr),e(he,HM),e(HM,v5e),e(v5e,jFr),e(HM,DFr),e(HM,qH),e(qH,GFr),e(HM,OFr),e(he,VFr),e(he,UM),e(UM,F5e),e(F5e,XFr),e(UM,zFr),e(UM,NH),e(NH,WFr),e(UM,QFr),e(he,HFr),e(he,JM),e(JM,T5e),e(T5e,UFr),e(JM,JFr),e(JM,jH),e(jH,YFr),e(JM,KFr),e(Sr,ZFr),M(YM,Sr,null),b(f,Qqe,_),b(f,fc,_),e(fc,KM),e(KM,M5e),M(L8,M5e,null),e(fc,eTr),e(fc,E5e),e(E5e,oTr),b(f,Hqe,_),b(f,nr,_),M(x8,nr,null),e(nr,rTr),e(nr,mc),e(mc,tTr),e(mc,DH),e(DH,aTr),e(mc,nTr),e(mc,GH),e(GH,sTr),e(mc,lTr),e(nr,iTr),e(nr,$8),e($8,dTr),e($8,C5e),e(C5e,cTr),e($8,fTr),e(nr,mTr),e(nr,Bt),M(k8,Bt,null),e(Bt,gTr),e(Bt,w5e),e(w5e,hTr),e(Bt,pTr),e(Bt,gc),e(gc,uTr),e(gc,A5e),e(A5e,_Tr),e(gc,bTr),e(gc,OH),e(OH,vTr),e(gc,FTr),e(Bt,TTr),M(ZM,Bt,null),e(nr,MTr),e(nr,Rr),M(S8,Rr,null),e(Rr,ETr),e(Rr,y5e),e(y5e,CTr),e(Rr,wTr),e(Rr,ln),e(ln,ATr),e(ln,L5e),e(L5e,yTr),e(ln,LTr),e(ln,x5e),e(x5e,xTr),e(ln,$Tr),e(ln,$5e),e($5e,kTr),e(ln,STr),e(Rr,RTr),e(Rr,R8),e(R8,eE),e(eE,k5e),e(k5e,PTr),e(eE,BTr),e(eE,VH),e(VH,ITr),e(eE,qTr),e(R8,NTr),e(R8,oE),e(oE,S5e),e(S5e,jTr),e(oE,DTr),e(oE,XH),e(XH,GTr),e(oE,OTr),e(Rr,VTr),M(rE,Rr,null),b(f,Uqe,_),b(f,hc,_),e(hc,tE),e(tE,R5e),M(P8,R5e,null),e(hc,XTr),e(hc,P5e),e(P5e,zTr),b(f,Jqe,_),b(f,sr,_),M(B8,sr,null),e(sr,WTr),e(sr,pc),e(pc,QTr),e(pc,zH),e(zH,HTr),e(pc,UTr),e(pc,WH),e(WH,JTr),e(pc,YTr),e(sr,KTr),e(sr,I8),e(I8,ZTr),e(I8,B5e),e(B5e,e7r),e(I8,o7r),e(sr,r7r),e(sr,It),M(q8,It,null),e(It,t7r),e(It,I5e),e(I5e,a7r),e(It,n7r),e(It,uc),e(uc,s7r),e(uc,q5e),e(q5e,l7r),e(uc,i7r),e(uc,QH),e(QH,d7r),e(uc,c7r),e(It,f7r),M(aE,It,null),e(sr,m7r),e(sr,Pr),M(N8,Pr,null),e(Pr,g7r),e(Pr,N5e),e(N5e,h7r),e(Pr,p7r),e(Pr,dn),e(dn,u7r),e(dn,j5e),e(j5e,_7r),e(dn,b7r),e(dn,D5e),e(D5e,v7r),e(dn,F7r),e(dn,G5e),e(G5e,T7r),e(dn,M7r),e(Pr,E7r),e(Pr,O5e),e(O5e,nE),e(nE,V5e),e(V5e,C7r),e(nE,w7r),e(nE,HH),e(HH,A7r),e(nE,y7r),e(Pr,L7r),M(sE,Pr,null),b(f,Yqe,_),b(f,_c,_),e(_c,lE),e(lE,X5e),M(j8,X5e,null),e(_c,x7r),e(_c,z5e),e(z5e,$7r),b(f,Kqe,_),b(f,lr,_),M(D8,lr,null),e(lr,k7r),e(lr,bc),e(bc,S7r),e(bc,UH),e(UH,R7r),e(bc,P7r),e(bc,JH),e(JH,B7r),e(bc,I7r),e(lr,q7r),e(lr,G8),e(G8,N7r),e(G8,W5e),e(W5e,j7r),e(G8,D7r),e(lr,G7r),e(lr,qt),M(O8,qt,null),e(qt,O7r),e(qt,Q5e),e(Q5e,V7r),e(qt,X7r),e(qt,vc),e(vc,z7r),e(vc,H5e),e(H5e,W7r),e(vc,Q7r),e(vc,YH),e(YH,H7r),e(vc,U7r),e(qt,J7r),M(iE,qt,null),e(lr,Y7r),e(lr,Br),M(V8,Br,null),e(Br,K7r),e(Br,U5e),e(U5e,Z7r),e(Br,eMr),e(Br,cn),e(cn,oMr),e(cn,J5e),e(J5e,rMr),e(cn,tMr),e(cn,Y5e),e(Y5e,aMr),e(cn,nMr),e(cn,K5e),e(K5e,sMr),e(cn,lMr),e(Br,iMr),e(Br,de),e(de,dE),e(dE,Z5e),e(Z5e,dMr),e(dE,cMr),e(dE,KH),e(KH,fMr),e(dE,mMr),e(de,gMr),e(de,cE),e(cE,eve),e(eve,hMr),e(cE,pMr),e(cE,ZH),e(ZH,uMr),e(cE,_Mr),e(de,bMr),e(de,fE),e(fE,ove),e(ove,vMr),e(fE,FMr),e(fE,eU),e(eU,TMr),e(fE,MMr),e(de,EMr),e(de,mE),e(mE,rve),e(rve,CMr),e(mE,wMr),e(mE,oU),e(oU,AMr),e(mE,yMr),e(de,LMr),e(de,gE),e(gE,tve),e(tve,xMr),e(gE,$Mr),e(gE,rU),e(rU,kMr),e(gE,SMr),e(de,RMr),e(de,hE),e(hE,ave),e(ave,PMr),e(hE,BMr),e(hE,tU),e(tU,IMr),e(hE,qMr),e(de,NMr),e(de,pE),e(pE,nve),e(nve,jMr),e(pE,DMr),e(pE,aU),e(aU,GMr),e(pE,OMr),e(de,VMr),e(de,uE),e(uE,sve),e(sve,XMr),e(uE,zMr),e(uE,nU),e(nU,WMr),e(uE,QMr),e(de,HMr),e(de,_E),e(_E,lve),e(lve,UMr),e(_E,JMr),e(_E,sU),e(sU,YMr),e(_E,KMr),e(de,ZMr),e(de,bE),e(bE,ive),e(ive,eEr),e(bE,oEr),e(bE,lU),e(lU,rEr),e(bE,tEr),e(de,aEr),e(de,vE),e(vE,dve),e(dve,nEr),e(vE,sEr),e(vE,iU),e(iU,lEr),e(vE,iEr),e(de,dEr),e(de,FE),e(FE,cve),e(cve,cEr),e(FE,fEr),e(FE,dU),e(dU,mEr),e(FE,gEr),e(de,hEr),e(de,TE),e(TE,fve),e(fve,pEr),e(TE,uEr),e(TE,cU),e(cU,_Er),e(TE,bEr),e(de,vEr),e(de,ME),e(ME,mve),e(mve,FEr),e(ME,TEr),e(ME,fU),e(fU,MEr),e(ME,EEr),e(de,CEr),e(de,EE),e(EE,gve),e(gve,wEr),e(EE,AEr),e(EE,mU),e(mU,yEr),e(EE,LEr),e(de,xEr),e(de,CE),e(CE,hve),e(hve,$Er),e(CE,kEr),e(CE,gU),e(gU,SEr),e(CE,REr),e(de,PEr),e(de,wE),e(wE,pve),e(pve,BEr),e(wE,IEr),e(wE,hU),e(hU,qEr),e(wE,NEr),e(de,jEr),e(de,AE),e(AE,uve),e(uve,DEr),e(AE,GEr),e(AE,pU),e(pU,OEr),e(AE,VEr),e(de,XEr),e(de,yE),e(yE,_ve),e(_ve,zEr),e(yE,WEr),e(yE,uU),e(uU,QEr),e(yE,HEr),e(de,UEr),e(de,LE),e(LE,bve),e(bve,JEr),e(LE,YEr),e(LE,_U),e(_U,KEr),e(LE,ZEr),e(Br,eCr),M(xE,Br,null),b(f,Zqe,_),b(f,Fc,_),e(Fc,$E),e($E,vve),M(X8,vve,null),e(Fc,oCr),e(Fc,Fve),e(Fve,rCr),b(f,eNe,_),b(f,ir,_),M(z8,ir,null),e(ir,tCr),e(ir,Tc),e(Tc,aCr),e(Tc,bU),e(bU,nCr),e(Tc,sCr),e(Tc,vU),e(vU,lCr),e(Tc,iCr),e(ir,dCr),e(ir,W8),e(W8,cCr),e(W8,Tve),e(Tve,fCr),e(W8,mCr),e(ir,gCr),e(ir,Nt),M(Q8,Nt,null),e(Nt,hCr),e(Nt,Mve),e(Mve,pCr),e(Nt,uCr),e(Nt,Mc),e(Mc,_Cr),e(Mc,Eve),e(Eve,bCr),e(Mc,vCr),e(Mc,FU),e(FU,FCr),e(Mc,TCr),e(Nt,MCr),M(kE,Nt,null),e(ir,ECr),e(ir,Ir),M(H8,Ir,null),e(Ir,CCr),e(Ir,Cve),e(Cve,wCr),e(Ir,ACr),e(Ir,fn),e(fn,yCr),e(fn,wve),e(wve,LCr),e(fn,xCr),e(fn,Ave),e(Ave,$Cr),e(fn,kCr),e(fn,yve),e(yve,SCr),e(fn,RCr),e(Ir,PCr),e(Ir,ce),e(ce,SE),e(SE,Lve),e(Lve,BCr),e(SE,ICr),e(SE,TU),e(TU,qCr),e(SE,NCr),e(ce,jCr),e(ce,RE),e(RE,xve),e(xve,DCr),e(RE,GCr),e(RE,MU),e(MU,OCr),e(RE,VCr),e(ce,XCr),e(ce,PE),e(PE,$ve),e($ve,zCr),e(PE,WCr),e(PE,EU),e(EU,QCr),e(PE,HCr),e(ce,UCr),e(ce,BE),e(BE,kve),e(kve,JCr),e(BE,YCr),e(BE,CU),e(CU,KCr),e(BE,ZCr),e(ce,e3r),e(ce,IE),e(IE,Sve),e(Sve,o3r),e(IE,r3r),e(IE,wU),e(wU,t3r),e(IE,a3r),e(ce,n3r),e(ce,qE),e(qE,Rve),e(Rve,s3r),e(qE,l3r),e(qE,AU),e(AU,i3r),e(qE,d3r),e(ce,c3r),e(ce,NE),e(NE,Pve),e(Pve,f3r),e(NE,m3r),e(NE,yU),e(yU,g3r),e(NE,h3r),e(ce,p3r),e(ce,jE),e(jE,Bve),e(Bve,u3r),e(jE,_3r),e(jE,LU),e(LU,b3r),e(jE,v3r),e(ce,F3r),e(ce,DE),e(DE,Ive),e(Ive,T3r),e(DE,M3r),e(DE,xU),e(xU,E3r),e(DE,C3r),e(ce,w3r),e(ce,GE),e(GE,qve),e(qve,A3r),e(GE,y3r),e(GE,$U),e($U,L3r),e(GE,x3r),e(ce,$3r),e(ce,OE),e(OE,Nve),e(Nve,k3r),e(OE,S3r),e(OE,kU),e(kU,R3r),e(OE,P3r),e(ce,B3r),e(ce,VE),e(VE,jve),e(jve,I3r),e(VE,q3r),e(VE,SU),e(SU,N3r),e(VE,j3r),e(ce,D3r),e(ce,XE),e(XE,Dve),e(Dve,G3r),e(XE,O3r),e(XE,RU),e(RU,V3r),e(XE,X3r),e(ce,z3r),e(ce,zE),e(zE,Gve),e(Gve,W3r),e(zE,Q3r),e(zE,PU),e(PU,H3r),e(zE,U3r),e(ce,J3r),e(ce,WE),e(WE,Ove),e(Ove,Y3r),e(WE,K3r),e(WE,BU),e(BU,Z3r),e(WE,ewr),e(ce,owr),e(ce,QE),e(QE,Vve),e(Vve,rwr),e(QE,twr),e(QE,IU),e(IU,awr),e(QE,nwr),e(ce,swr),e(ce,HE),e(HE,Xve),e(Xve,lwr),e(HE,iwr),e(HE,qU),e(qU,dwr),e(HE,cwr),e(ce,fwr),e(ce,UE),e(UE,zve),e(zve,mwr),e(UE,gwr),e(UE,NU),e(NU,hwr),e(UE,pwr),e(ce,uwr),e(ce,JE),e(JE,Wve),e(Wve,_wr),e(JE,bwr),e(JE,jU),e(jU,vwr),e(JE,Fwr),e(ce,Twr),e(ce,YE),e(YE,Qve),e(Qve,Mwr),e(YE,Ewr),e(YE,DU),e(DU,Cwr),e(YE,wwr),e(Ir,Awr),M(KE,Ir,null),b(f,oNe,_),b(f,Ec,_),e(Ec,ZE),e(ZE,Hve),M(U8,Hve,null),e(Ec,ywr),e(Ec,Uve),e(Uve,Lwr),b(f,rNe,_),b(f,dr,_),M(J8,dr,null),e(dr,xwr),e(dr,Cc),e(Cc,$wr),e(Cc,GU),e(GU,kwr),e(Cc,Swr),e(Cc,OU),e(OU,Rwr),e(Cc,Pwr),e(dr,Bwr),e(dr,Y8),e(Y8,Iwr),e(Y8,Jve),e(Jve,qwr),e(Y8,Nwr),e(dr,jwr),e(dr,jt),M(K8,jt,null),e(jt,Dwr),e(jt,Yve),e(Yve,Gwr),e(jt,Owr),e(jt,wc),e(wc,Vwr),e(wc,Kve),e(Kve,Xwr),e(wc,zwr),e(wc,VU),e(VU,Wwr),e(wc,Qwr),e(jt,Hwr),M(eC,jt,null),e(dr,Uwr),e(dr,qr),M(Z8,qr,null),e(qr,Jwr),e(qr,Zve),e(Zve,Ywr),e(qr,Kwr),e(qr,mn),e(mn,Zwr),e(mn,eFe),e(eFe,eAr),e(mn,oAr),e(mn,oFe),e(oFe,rAr),e(mn,tAr),e(mn,rFe),e(rFe,aAr),e(mn,nAr),e(qr,sAr),e(qr,tFe),e(tFe,oC),e(oC,aFe),e(aFe,lAr),e(oC,iAr),e(oC,XU),e(XU,dAr),e(oC,cAr),e(qr,fAr),M(rC,qr,null),b(f,tNe,_),b(f,Ac,_),e(Ac,tC),e(tC,nFe),M(ex,nFe,null),e(Ac,mAr),e(Ac,sFe),e(sFe,gAr),b(f,aNe,_),b(f,cr,_),M(ox,cr,null),e(cr,hAr),e(cr,yc),e(yc,pAr),e(yc,zU),e(zU,uAr),e(yc,_Ar),e(yc,WU),e(WU,bAr),e(yc,vAr),e(cr,FAr),e(cr,rx),e(rx,TAr),e(rx,lFe),e(lFe,MAr),e(rx,EAr),e(cr,CAr),e(cr,Dt),M(tx,Dt,null),e(Dt,wAr),e(Dt,iFe),e(iFe,AAr),e(Dt,yAr),e(Dt,Lc),e(Lc,LAr),e(Lc,dFe),e(dFe,xAr),e(Lc,$Ar),e(Lc,QU),e(QU,kAr),e(Lc,SAr),e(Dt,RAr),M(aC,Dt,null),e(cr,PAr),e(cr,Nr),M(ax,Nr,null),e(Nr,BAr),e(Nr,cFe),e(cFe,IAr),e(Nr,qAr),e(Nr,gn),e(gn,NAr),e(gn,fFe),e(fFe,jAr),e(gn,DAr),e(gn,mFe),e(mFe,GAr),e(gn,OAr),e(gn,gFe),e(gFe,VAr),e(gn,XAr),e(Nr,zAr),e(Nr,hFe),e(hFe,nC),e(nC,pFe),e(pFe,WAr),e(nC,QAr),e(nC,HU),e(HU,HAr),e(nC,UAr),e(Nr,JAr),M(sC,Nr,null),b(f,nNe,_),b(f,xc,_),e(xc,lC),e(lC,uFe),M(nx,uFe,null),e(xc,YAr),e(xc,_Fe),e(_Fe,KAr),b(f,sNe,_),b(f,fr,_),M(sx,fr,null),e(fr,ZAr),e(fr,$c),e($c,e6r),e($c,UU),e(UU,o6r),e($c,r6r),e($c,JU),e(JU,t6r),e($c,a6r),e(fr,n6r),e(fr,lx),e(lx,s6r),e(lx,bFe),e(bFe,l6r),e(lx,i6r),e(fr,d6r),e(fr,Gt),M(ix,Gt,null),e(Gt,c6r),e(Gt,vFe),e(vFe,f6r),e(Gt,m6r),e(Gt,kc),e(kc,g6r),e(kc,FFe),e(FFe,h6r),e(kc,p6r),e(kc,YU),e(YU,u6r),e(kc,_6r),e(Gt,b6r),M(iC,Gt,null),e(fr,v6r),e(fr,jr),M(dx,jr,null),e(jr,F6r),e(jr,TFe),e(TFe,T6r),e(jr,M6r),e(jr,hn),e(hn,E6r),e(hn,MFe),e(MFe,C6r),e(hn,w6r),e(hn,EFe),e(EFe,A6r),e(hn,y6r),e(hn,CFe),e(CFe,L6r),e(hn,x6r),e(jr,$6r),e(jr,re),e(re,dC),e(dC,wFe),e(wFe,k6r),e(dC,S6r),e(dC,KU),e(KU,R6r),e(dC,P6r),e(re,B6r),e(re,cC),e(cC,AFe),e(AFe,I6r),e(cC,q6r),e(cC,ZU),e(ZU,N6r),e(cC,j6r),e(re,D6r),e(re,fC),e(fC,yFe),e(yFe,G6r),e(fC,O6r),e(fC,eJ),e(eJ,V6r),e(fC,X6r),e(re,z6r),e(re,mC),e(mC,LFe),e(LFe,W6r),e(mC,Q6r),e(mC,oJ),e(oJ,H6r),e(mC,U6r),e(re,J6r),e(re,gC),e(gC,xFe),e(xFe,Y6r),e(gC,K6r),e(gC,rJ),e(rJ,Z6r),e(gC,e0r),e(re,o0r),e(re,hC),e(hC,$Fe),e($Fe,r0r),e(hC,t0r),e(hC,tJ),e(tJ,a0r),e(hC,n0r),e(re,s0r),e(re,pC),e(pC,kFe),e(kFe,l0r),e(pC,i0r),e(pC,aJ),e(aJ,d0r),e(pC,c0r),e(re,f0r),e(re,uC),e(uC,SFe),e(SFe,m0r),e(uC,g0r),e(uC,nJ),e(nJ,h0r),e(uC,p0r),e(re,u0r),e(re,_C),e(_C,RFe),e(RFe,_0r),e(_C,b0r),e(_C,sJ),e(sJ,v0r),e(_C,F0r),e(re,T0r),e(re,bC),e(bC,PFe),e(PFe,M0r),e(bC,E0r),e(bC,lJ),e(lJ,C0r),e(bC,w0r),e(re,A0r),e(re,vC),e(vC,BFe),e(BFe,y0r),e(vC,L0r),e(vC,iJ),e(iJ,x0r),e(vC,$0r),e(re,k0r),e(re,FC),e(FC,IFe),e(IFe,S0r),e(FC,R0r),e(FC,dJ),e(dJ,P0r),e(FC,B0r),e(re,I0r),e(re,TC),e(TC,qFe),e(qFe,q0r),e(TC,N0r),e(TC,cJ),e(cJ,j0r),e(TC,D0r),e(re,G0r),e(re,MC),e(MC,NFe),e(NFe,O0r),e(MC,V0r),e(MC,fJ),e(fJ,X0r),e(MC,z0r),e(re,W0r),e(re,EC),e(EC,jFe),e(jFe,Q0r),e(EC,H0r),e(EC,mJ),e(mJ,U0r),e(EC,J0r),e(re,Y0r),e(re,CC),e(CC,DFe),e(DFe,K0r),e(CC,Z0r),e(CC,gJ),e(gJ,eyr),e(CC,oyr),e(re,ryr),e(re,wC),e(wC,GFe),e(GFe,tyr),e(wC,ayr),e(wC,hJ),e(hJ,nyr),e(wC,syr),e(re,lyr),e(re,AC),e(AC,OFe),e(OFe,iyr),e(AC,dyr),e(AC,pJ),e(pJ,cyr),e(AC,fyr),e(re,myr),e(re,yC),e(yC,VFe),e(VFe,gyr),e(yC,hyr),e(yC,uJ),e(uJ,pyr),e(yC,uyr),e(re,_yr),e(re,LC),e(LC,XFe),e(XFe,byr),e(LC,vyr),e(LC,_J),e(_J,Fyr),e(LC,Tyr),e(re,Myr),e(re,xC),e(xC,zFe),e(zFe,Eyr),e(xC,Cyr),e(xC,bJ),e(bJ,wyr),e(xC,Ayr),e(re,yyr),e(re,$C),e($C,WFe),e(WFe,Lyr),e($C,xyr),e($C,vJ),e(vJ,$yr),e($C,kyr),e(re,Syr),e(re,kC),e(kC,QFe),e(QFe,Ryr),e(kC,Pyr),e(kC,FJ),e(FJ,Byr),e(kC,Iyr),e(re,qyr),e(re,SC),e(SC,HFe),e(HFe,Nyr),e(SC,jyr),e(SC,TJ),e(TJ,Dyr),e(SC,Gyr),e(re,Oyr),e(re,RC),e(RC,UFe),e(UFe,Vyr),e(RC,Xyr),e(RC,MJ),e(MJ,zyr),e(RC,Wyr),e(jr,Qyr),M(PC,jr,null),b(f,lNe,_),b(f,Sc,_),e(Sc,BC),e(BC,JFe),M(cx,JFe,null),e(Sc,Hyr),e(Sc,YFe),e(YFe,Uyr),b(f,iNe,_),b(f,mr,_),M(fx,mr,null),e(mr,Jyr),e(mr,Rc),e(Rc,Yyr),e(Rc,EJ),e(EJ,Kyr),e(Rc,Zyr),e(Rc,CJ),e(CJ,eLr),e(Rc,oLr),e(mr,rLr),e(mr,mx),e(mx,tLr),e(mx,KFe),e(KFe,aLr),e(mx,nLr),e(mr,sLr),e(mr,Ot),M(gx,Ot,null),e(Ot,lLr),e(Ot,ZFe),e(ZFe,iLr),e(Ot,dLr),e(Ot,Pc),e(Pc,cLr),e(Pc,eTe),e(eTe,fLr),e(Pc,mLr),e(Pc,wJ),e(wJ,gLr),e(Pc,hLr),e(Ot,pLr),M(IC,Ot,null),e(mr,uLr),e(mr,Dr),M(hx,Dr,null),e(Dr,_Lr),e(Dr,oTe),e(oTe,bLr),e(Dr,vLr),e(Dr,pn),e(pn,FLr),e(pn,rTe),e(rTe,TLr),e(pn,MLr),e(pn,tTe),e(tTe,ELr),e(pn,CLr),e(pn,aTe),e(aTe,wLr),e(pn,ALr),e(Dr,yLr),e(Dr,Re),e(Re,qC),e(qC,nTe),e(nTe,LLr),e(qC,xLr),e(qC,AJ),e(AJ,$Lr),e(qC,kLr),e(Re,SLr),e(Re,NC),e(NC,sTe),e(sTe,RLr),e(NC,PLr),e(NC,yJ),e(yJ,BLr),e(NC,ILr),e(Re,qLr),e(Re,jC),e(jC,lTe),e(lTe,NLr),e(jC,jLr),e(jC,LJ),e(LJ,DLr),e(jC,GLr),e(Re,OLr),e(Re,DC),e(DC,iTe),e(iTe,VLr),e(DC,XLr),e(DC,xJ),e(xJ,zLr),e(DC,WLr),e(Re,QLr),e(Re,GC),e(GC,dTe),e(dTe,HLr),e(GC,ULr),e(GC,$J),e($J,JLr),e(GC,YLr),e(Re,KLr),e(Re,OC),e(OC,cTe),e(cTe,ZLr),e(OC,e8r),e(OC,kJ),e(kJ,o8r),e(OC,r8r),e(Re,t8r),e(Re,VC),e(VC,fTe),e(fTe,a8r),e(VC,n8r),e(VC,SJ),e(SJ,s8r),e(VC,l8r),e(Re,i8r),e(Re,XC),e(XC,mTe),e(mTe,d8r),e(XC,c8r),e(XC,RJ),e(RJ,f8r),e(XC,m8r),e(Re,g8r),e(Re,zC),e(zC,gTe),e(gTe,h8r),e(zC,p8r),e(zC,PJ),e(PJ,u8r),e(zC,_8r),e(Dr,b8r),M(WC,Dr,null),b(f,dNe,_),b(f,Bc,_),e(Bc,QC),e(QC,hTe),M(px,hTe,null),e(Bc,v8r),e(Bc,pTe),e(pTe,F8r),b(f,cNe,_),b(f,gr,_),M(ux,gr,null),e(gr,T8r),e(gr,Ic),e(Ic,M8r),e(Ic,BJ),e(BJ,E8r),e(Ic,C8r),e(Ic,IJ),e(IJ,w8r),e(Ic,A8r),e(gr,y8r),e(gr,_x),e(_x,L8r),e(_x,uTe),e(uTe,x8r),e(_x,$8r),e(gr,k8r),e(gr,Vt),M(bx,Vt,null),e(Vt,S8r),e(Vt,_Te),e(_Te,R8r),e(Vt,P8r),e(Vt,qc),e(qc,B8r),e(qc,bTe),e(bTe,I8r),e(qc,q8r),e(qc,qJ),e(qJ,N8r),e(qc,j8r),e(Vt,D8r),M(HC,Vt,null),e(gr,G8r),e(gr,Gr),M(vx,Gr,null),e(Gr,O8r),e(Gr,vTe),e(vTe,V8r),e(Gr,X8r),e(Gr,un),e(un,z8r),e(un,FTe),e(FTe,W8r),e(un,Q8r),e(un,TTe),e(TTe,H8r),e(un,U8r),e(un,MTe),e(MTe,J8r),e(un,Y8r),e(Gr,K8r),e(Gr,Me),e(Me,UC),e(UC,ETe),e(ETe,Z8r),e(UC,exr),e(UC,NJ),e(NJ,oxr),e(UC,rxr),e(Me,txr),e(Me,JC),e(JC,CTe),e(CTe,axr),e(JC,nxr),e(JC,jJ),e(jJ,sxr),e(JC,lxr),e(Me,ixr),e(Me,YC),e(YC,wTe),e(wTe,dxr),e(YC,cxr),e(YC,DJ),e(DJ,fxr),e(YC,mxr),e(Me,gxr),e(Me,KC),e(KC,ATe),e(ATe,hxr),e(KC,pxr),e(KC,GJ),e(GJ,uxr),e(KC,_xr),e(Me,bxr),e(Me,ZC),e(ZC,yTe),e(yTe,vxr),e(ZC,Fxr),e(ZC,OJ),e(OJ,Txr),e(ZC,Mxr),e(Me,Exr),e(Me,e3),e(e3,LTe),e(LTe,Cxr),e(e3,wxr),e(e3,VJ),e(VJ,Axr),e(e3,yxr),e(Me,Lxr),e(Me,o3),e(o3,xTe),e(xTe,xxr),e(o3,$xr),e(o3,XJ),e(XJ,kxr),e(o3,Sxr),e(Me,Rxr),e(Me,r3),e(r3,$Te),e($Te,Pxr),e(r3,Bxr),e(r3,zJ),e(zJ,Ixr),e(r3,qxr),e(Me,Nxr),e(Me,t3),e(t3,kTe),e(kTe,jxr),e(t3,Dxr),e(t3,WJ),e(WJ,Gxr),e(t3,Oxr),e(Me,Vxr),e(Me,a3),e(a3,STe),e(STe,Xxr),e(a3,zxr),e(a3,QJ),e(QJ,Wxr),e(a3,Qxr),e(Me,Hxr),e(Me,n3),e(n3,RTe),e(RTe,Uxr),e(n3,Jxr),e(n3,HJ),e(HJ,Yxr),e(n3,Kxr),e(Me,Zxr),e(Me,s3),e(s3,PTe),e(PTe,e9r),e(s3,o9r),e(s3,UJ),e(UJ,r9r),e(s3,t9r),e(Gr,a9r),M(l3,Gr,null),b(f,fNe,_),b(f,Nc,_),e(Nc,i3),e(i3,BTe),M(Fx,BTe,null),e(Nc,n9r),e(Nc,ITe),e(ITe,s9r),b(f,mNe,_),b(f,hr,_),M(Tx,hr,null),e(hr,l9r),e(hr,jc),e(jc,i9r),e(jc,JJ),e(JJ,d9r),e(jc,c9r),e(jc,YJ),e(YJ,f9r),e(jc,m9r),e(hr,g9r),e(hr,Mx),e(Mx,h9r),e(Mx,qTe),e(qTe,p9r),e(Mx,u9r),e(hr,_9r),e(hr,Xt),M(Ex,Xt,null),e(Xt,b9r),e(Xt,NTe),e(NTe,v9r),e(Xt,F9r),e(Xt,Dc),e(Dc,T9r),e(Dc,jTe),e(jTe,M9r),e(Dc,E9r),e(Dc,KJ),e(KJ,C9r),e(Dc,w9r),e(Xt,A9r),M(d3,Xt,null),e(hr,y9r),e(hr,Or),M(Cx,Or,null),e(Or,L9r),e(Or,DTe),e(DTe,x9r),e(Or,$9r),e(Or,_n),e(_n,k9r),e(_n,GTe),e(GTe,S9r),e(_n,R9r),e(_n,OTe),e(OTe,P9r),e(_n,B9r),e(_n,VTe),e(VTe,I9r),e(_n,q9r),e(Or,N9r),e(Or,Le),e(Le,c3),e(c3,XTe),e(XTe,j9r),e(c3,D9r),e(c3,ZJ),e(ZJ,G9r),e(c3,O9r),e(Le,V9r),e(Le,f3),e(f3,zTe),e(zTe,X9r),e(f3,z9r),e(f3,eY),e(eY,W9r),e(f3,Q9r),e(Le,H9r),e(Le,m3),e(m3,WTe),e(WTe,U9r),e(m3,J9r),e(m3,oY),e(oY,Y9r),e(m3,K9r),e(Le,Z9r),e(Le,g3),e(g3,QTe),e(QTe,e$r),e(g3,o$r),e(g3,rY),e(rY,r$r),e(g3,t$r),e(Le,a$r),e(Le,h3),e(h3,HTe),e(HTe,n$r),e(h3,s$r),e(h3,tY),e(tY,l$r),e(h3,i$r),e(Le,d$r),e(Le,p3),e(p3,UTe),e(UTe,c$r),e(p3,f$r),e(p3,aY),e(aY,m$r),e(p3,g$r),e(Le,h$r),e(Le,u3),e(u3,JTe),e(JTe,p$r),e(u3,u$r),e(u3,nY),e(nY,_$r),e(u3,b$r),e(Le,v$r),e(Le,_3),e(_3,YTe),e(YTe,F$r),e(_3,T$r),e(_3,sY),e(sY,M$r),e(_3,E$r),e(Le,C$r),e(Le,b3),e(b3,KTe),e(KTe,w$r),e(b3,A$r),e(b3,lY),e(lY,y$r),e(b3,L$r),e(Le,x$r),e(Le,v3),e(v3,ZTe),e(ZTe,$$r),e(v3,k$r),e(v3,iY),e(iY,S$r),e(v3,R$r),e(Or,P$r),M(F3,Or,null),b(f,gNe,_),b(f,Gc,_),e(Gc,T3),e(T3,e7e),M(wx,e7e,null),e(Gc,B$r),e(Gc,o7e),e(o7e,I$r),b(f,hNe,_),b(f,pr,_),M(Ax,pr,null),e(pr,q$r),e(pr,Oc),e(Oc,N$r),e(Oc,dY),e(dY,j$r),e(Oc,D$r),e(Oc,cY),e(cY,G$r),e(Oc,O$r),e(pr,V$r),e(pr,yx),e(yx,X$r),e(yx,r7e),e(r7e,z$r),e(yx,W$r),e(pr,Q$r),e(pr,zt),M(Lx,zt,null),e(zt,H$r),e(zt,t7e),e(t7e,U$r),e(zt,J$r),e(zt,Vc),e(Vc,Y$r),e(Vc,a7e),e(a7e,K$r),e(Vc,Z$r),e(Vc,fY),e(fY,ekr),e(Vc,okr),e(zt,rkr),M(M3,zt,null),e(pr,tkr),e(pr,Vr),M(xx,Vr,null),e(Vr,akr),e(Vr,n7e),e(n7e,nkr),e(Vr,skr),e(Vr,bn),e(bn,lkr),e(bn,s7e),e(s7e,ikr),e(bn,dkr),e(bn,l7e),e(l7e,ckr),e(bn,fkr),e(bn,i7e),e(i7e,mkr),e(bn,gkr),e(Vr,hkr),e(Vr,Pe),e(Pe,E3),e(E3,d7e),e(d7e,pkr),e(E3,ukr),e(E3,mY),e(mY,_kr),e(E3,bkr),e(Pe,vkr),e(Pe,C3),e(C3,c7e),e(c7e,Fkr),e(C3,Tkr),e(C3,gY),e(gY,Mkr),e(C3,Ekr),e(Pe,Ckr),e(Pe,w3),e(w3,f7e),e(f7e,wkr),e(w3,Akr),e(w3,hY),e(hY,ykr),e(w3,Lkr),e(Pe,xkr),e(Pe,A3),e(A3,m7e),e(m7e,$kr),e(A3,kkr),e(A3,pY),e(pY,Skr),e(A3,Rkr),e(Pe,Pkr),e(Pe,y3),e(y3,g7e),e(g7e,Bkr),e(y3,Ikr),e(y3,uY),e(uY,qkr),e(y3,Nkr),e(Pe,jkr),e(Pe,L3),e(L3,h7e),e(h7e,Dkr),e(L3,Gkr),e(L3,_Y),e(_Y,Okr),e(L3,Vkr),e(Pe,Xkr),e(Pe,x3),e(x3,p7e),e(p7e,zkr),e(x3,Wkr),e(x3,bY),e(bY,Qkr),e(x3,Hkr),e(Pe,Ukr),e(Pe,$3),e($3,u7e),e(u7e,Jkr),e($3,Ykr),e($3,vY),e(vY,Kkr),e($3,Zkr),e(Pe,eSr),e(Pe,k3),e(k3,_7e),e(_7e,oSr),e(k3,rSr),e(k3,FY),e(FY,tSr),e(k3,aSr),e(Vr,nSr),M(S3,Vr,null),b(f,pNe,_),b(f,Xc,_),e(Xc,R3),e(R3,b7e),M($x,b7e,null),e(Xc,sSr),e(Xc,v7e),e(v7e,lSr),b(f,uNe,_),b(f,ur,_),M(kx,ur,null),e(ur,iSr),e(ur,zc),e(zc,dSr),e(zc,TY),e(TY,cSr),e(zc,fSr),e(zc,MY),e(MY,mSr),e(zc,gSr),e(ur,hSr),e(ur,Sx),e(Sx,pSr),e(Sx,F7e),e(F7e,uSr),e(Sx,_Sr),e(ur,bSr),e(ur,Wt),M(Rx,Wt,null),e(Wt,vSr),e(Wt,T7e),e(T7e,FSr),e(Wt,TSr),e(Wt,Wc),e(Wc,MSr),e(Wc,M7e),e(M7e,ESr),e(Wc,CSr),e(Wc,EY),e(EY,wSr),e(Wc,ASr),e(Wt,ySr),M(P3,Wt,null),e(ur,LSr),e(ur,Xr),M(Px,Xr,null),e(Xr,xSr),e(Xr,E7e),e(E7e,$Sr),e(Xr,kSr),e(Xr,vn),e(vn,SSr),e(vn,C7e),e(C7e,RSr),e(vn,PSr),e(vn,w7e),e(w7e,BSr),e(vn,ISr),e(vn,A7e),e(A7e,qSr),e(vn,NSr),e(Xr,jSr),e(Xr,xe),e(xe,B3),e(B3,y7e),e(y7e,DSr),e(B3,GSr),e(B3,CY),e(CY,OSr),e(B3,VSr),e(xe,XSr),e(xe,I3),e(I3,L7e),e(L7e,zSr),e(I3,WSr),e(I3,wY),e(wY,QSr),e(I3,HSr),e(xe,USr),e(xe,q3),e(q3,x7e),e(x7e,JSr),e(q3,YSr),e(q3,AY),e(AY,KSr),e(q3,ZSr),e(xe,eRr),e(xe,N3),e(N3,$7e),e($7e,oRr),e(N3,rRr),e(N3,yY),e(yY,tRr),e(N3,aRr),e(xe,nRr),e(xe,j3),e(j3,k7e),e(k7e,sRr),e(j3,lRr),e(j3,LY),e(LY,iRr),e(j3,dRr),e(xe,cRr),e(xe,D3),e(D3,S7e),e(S7e,fRr),e(D3,mRr),e(D3,xY),e(xY,gRr),e(D3,hRr),e(xe,pRr),e(xe,G3),e(G3,R7e),e(R7e,uRr),e(G3,_Rr),e(G3,$Y),e($Y,bRr),e(G3,vRr),e(xe,FRr),e(xe,O3),e(O3,P7e),e(P7e,TRr),e(O3,MRr),e(O3,kY),e(kY,ERr),e(O3,CRr),e(xe,wRr),e(xe,V3),e(V3,B7e),e(B7e,ARr),e(V3,yRr),e(V3,SY),e(SY,LRr),e(V3,xRr),e(xe,$Rr),e(xe,X3),e(X3,I7e),e(I7e,kRr),e(X3,SRr),e(X3,RY),e(RY,RRr),e(X3,PRr),e(Xr,BRr),M(z3,Xr,null),b(f,_Ne,_),b(f,Qc,_),e(Qc,W3),e(W3,q7e),M(Bx,q7e,null),e(Qc,IRr),e(Qc,N7e),e(N7e,qRr),b(f,bNe,_),b(f,_r,_),M(Ix,_r,null),e(_r,NRr),e(_r,Hc),e(Hc,jRr),e(Hc,PY),e(PY,DRr),e(Hc,GRr),e(Hc,BY),e(BY,ORr),e(Hc,VRr),e(_r,XRr),e(_r,qx),e(qx,zRr),e(qx,j7e),e(j7e,WRr),e(qx,QRr),e(_r,HRr),e(_r,Qt),M(Nx,Qt,null),e(Qt,URr),e(Qt,D7e),e(D7e,JRr),e(Qt,YRr),e(Qt,Uc),e(Uc,KRr),e(Uc,G7e),e(G7e,ZRr),e(Uc,ePr),e(Uc,IY),e(IY,oPr),e(Uc,rPr),e(Qt,tPr),M(Q3,Qt,null),e(_r,aPr),e(_r,zr),M(jx,zr,null),e(zr,nPr),e(zr,O7e),e(O7e,sPr),e(zr,lPr),e(zr,Fn),e(Fn,iPr),e(Fn,V7e),e(V7e,dPr),e(Fn,cPr),e(Fn,X7e),e(X7e,fPr),e(Fn,mPr),e(Fn,z7e),e(z7e,gPr),e(Fn,hPr),e(zr,pPr),e(zr,$e),e($e,H3),e(H3,W7e),e(W7e,uPr),e(H3,_Pr),e(H3,qY),e(qY,bPr),e(H3,vPr),e($e,FPr),e($e,U3),e(U3,Q7e),e(Q7e,TPr),e(U3,MPr),e(U3,NY),e(NY,EPr),e(U3,CPr),e($e,wPr),e($e,J3),e(J3,H7e),e(H7e,APr),e(J3,yPr),e(J3,jY),e(jY,LPr),e(J3,xPr),e($e,$Pr),e($e,Y3),e(Y3,U7e),e(U7e,kPr),e(Y3,SPr),e(Y3,DY),e(DY,RPr),e(Y3,PPr),e($e,BPr),e($e,K3),e(K3,J7e),e(J7e,IPr),e(K3,qPr),e(K3,GY),e(GY,NPr),e(K3,jPr),e($e,DPr),e($e,Z3),e(Z3,Y7e),e(Y7e,GPr),e(Z3,OPr),e(Z3,OY),e(OY,VPr),e(Z3,XPr),e($e,zPr),e($e,ew),e(ew,K7e),e(K7e,WPr),e(ew,QPr),e(ew,VY),e(VY,HPr),e(ew,UPr),e($e,JPr),e($e,ow),e(ow,Z7e),e(Z7e,YPr),e(ow,KPr),e(ow,XY),e(XY,ZPr),e(ow,eBr),e($e,oBr),e($e,rw),e(rw,eMe),e(eMe,rBr),e(rw,tBr),e(rw,zY),e(zY,aBr),e(rw,nBr),e($e,sBr),e($e,tw),e(tw,oMe),e(oMe,lBr),e(tw,iBr),e(tw,WY),e(WY,dBr),e(tw,cBr),e(zr,fBr),M(aw,zr,null),b(f,vNe,_),b(f,Jc,_),e(Jc,nw),e(nw,rMe),M(Dx,rMe,null),e(Jc,mBr),e(Jc,tMe),e(tMe,gBr),b(f,FNe,_),b(f,br,_),M(Gx,br,null),e(br,hBr),e(br,Yc),e(Yc,pBr),e(Yc,QY),e(QY,uBr),e(Yc,_Br),e(Yc,HY),e(HY,bBr),e(Yc,vBr),e(br,FBr),e(br,Ox),e(Ox,TBr),e(Ox,aMe),e(aMe,MBr),e(Ox,EBr),e(br,CBr),e(br,Ht),M(Vx,Ht,null),e(Ht,wBr),e(Ht,nMe),e(nMe,ABr),e(Ht,yBr),e(Ht,Kc),e(Kc,LBr),e(Kc,sMe),e(sMe,xBr),e(Kc,$Br),e(Kc,UY),e(UY,kBr),e(Kc,SBr),e(Ht,RBr),M(sw,Ht,null),e(br,PBr),e(br,Wr),M(Xx,Wr,null),e(Wr,BBr),e(Wr,lMe),e(lMe,IBr),e(Wr,qBr),e(Wr,Tn),e(Tn,NBr),e(Tn,iMe),e(iMe,jBr),e(Tn,DBr),e(Tn,dMe),e(dMe,GBr),e(Tn,OBr),e(Tn,cMe),e(cMe,VBr),e(Tn,XBr),e(Wr,zBr),e(Wr,De),e(De,lw),e(lw,fMe),e(fMe,WBr),e(lw,QBr),e(lw,JY),e(JY,HBr),e(lw,UBr),e(De,JBr),e(De,iw),e(iw,mMe),e(mMe,YBr),e(iw,KBr),e(iw,YY),e(YY,ZBr),e(iw,eIr),e(De,oIr),e(De,dw),e(dw,gMe),e(gMe,rIr),e(dw,tIr),e(dw,KY),e(KY,aIr),e(dw,nIr),e(De,sIr),e(De,cw),e(cw,hMe),e(hMe,lIr),e(cw,iIr),e(cw,ZY),e(ZY,dIr),e(cw,cIr),e(De,fIr),e(De,fw),e(fw,pMe),e(pMe,mIr),e(fw,gIr),e(fw,eK),e(eK,hIr),e(fw,pIr),e(De,uIr),e(De,mw),e(mw,uMe),e(uMe,_Ir),e(mw,bIr),e(mw,oK),e(oK,vIr),e(mw,FIr),e(De,TIr),e(De,gw),e(gw,_Me),e(_Me,MIr),e(gw,EIr),e(gw,rK),e(rK,CIr),e(gw,wIr),e(De,AIr),e(De,hw),e(hw,bMe),e(bMe,yIr),e(hw,LIr),e(hw,tK),e(tK,xIr),e(hw,$Ir),e(Wr,kIr),M(pw,Wr,null),b(f,TNe,_),b(f,Zc,_),e(Zc,uw),e(uw,vMe),M(zx,vMe,null),e(Zc,SIr),e(Zc,FMe),e(FMe,RIr),b(f,MNe,_),b(f,vr,_),M(Wx,vr,null),e(vr,PIr),e(vr,ef),e(ef,BIr),e(ef,aK),e(aK,IIr),e(ef,qIr),e(ef,nK),e(nK,NIr),e(ef,jIr),e(vr,DIr),e(vr,Qx),e(Qx,GIr),e(Qx,TMe),e(TMe,OIr),e(Qx,VIr),e(vr,XIr),e(vr,Ut),M(Hx,Ut,null),e(Ut,zIr),e(Ut,MMe),e(MMe,WIr),e(Ut,QIr),e(Ut,of),e(of,HIr),e(of,EMe),e(EMe,UIr),e(of,JIr),e(of,sK),e(sK,YIr),e(of,KIr),e(Ut,ZIr),M(_w,Ut,null),e(vr,eqr),e(vr,Qr),M(Ux,Qr,null),e(Qr,oqr),e(Qr,CMe),e(CMe,rqr),e(Qr,tqr),e(Qr,Mn),e(Mn,aqr),e(Mn,wMe),e(wMe,nqr),e(Mn,sqr),e(Mn,AMe),e(AMe,lqr),e(Mn,iqr),e(Mn,yMe),e(yMe,dqr),e(Mn,cqr),e(Qr,fqr),e(Qr,Ge),e(Ge,bw),e(bw,LMe),e(LMe,mqr),e(bw,gqr),e(bw,lK),e(lK,hqr),e(bw,pqr),e(Ge,uqr),e(Ge,vw),e(vw,xMe),e(xMe,_qr),e(vw,bqr),e(vw,iK),e(iK,vqr),e(vw,Fqr),e(Ge,Tqr),e(Ge,Fw),e(Fw,$Me),e($Me,Mqr),e(Fw,Eqr),e(Fw,dK),e(dK,Cqr),e(Fw,wqr),e(Ge,Aqr),e(Ge,Tw),e(Tw,kMe),e(kMe,yqr),e(Tw,Lqr),e(Tw,cK),e(cK,xqr),e(Tw,$qr),e(Ge,kqr),e(Ge,Mw),e(Mw,SMe),e(SMe,Sqr),e(Mw,Rqr),e(Mw,fK),e(fK,Pqr),e(Mw,Bqr),e(Ge,Iqr),e(Ge,Ew),e(Ew,RMe),e(RMe,qqr),e(Ew,Nqr),e(Ew,mK),e(mK,jqr),e(Ew,Dqr),e(Ge,Gqr),e(Ge,Cw),e(Cw,PMe),e(PMe,Oqr),e(Cw,Vqr),e(Cw,gK),e(gK,Xqr),e(Cw,zqr),e(Ge,Wqr),e(Ge,ww),e(ww,BMe),e(BMe,Qqr),e(ww,Hqr),e(ww,hK),e(hK,Uqr),e(ww,Jqr),e(Qr,Yqr),M(Aw,Qr,null),b(f,ENe,_),b(f,rf,_),e(rf,yw),e(yw,IMe),M(Jx,IMe,null),e(rf,Kqr),e(rf,qMe),e(qMe,Zqr),b(f,CNe,_),b(f,Fr,_),M(Yx,Fr,null),e(Fr,eNr),e(Fr,tf),e(tf,oNr),e(tf,pK),e(pK,rNr),e(tf,tNr),e(tf,uK),e(uK,aNr),e(tf,nNr),e(Fr,sNr),e(Fr,Kx),e(Kx,lNr),e(Kx,NMe),e(NMe,iNr),e(Kx,dNr),e(Fr,cNr),e(Fr,Jt),M(Zx,Jt,null),e(Jt,fNr),e(Jt,jMe),e(jMe,mNr),e(Jt,gNr),e(Jt,af),e(af,hNr),e(af,DMe),e(DMe,pNr),e(af,uNr),e(af,_K),e(_K,_Nr),e(af,bNr),e(Jt,vNr),M(Lw,Jt,null),e(Fr,FNr),e(Fr,Hr),M(e9,Hr,null),e(Hr,TNr),e(Hr,GMe),e(GMe,MNr),e(Hr,ENr),e(Hr,En),e(En,CNr),e(En,OMe),e(OMe,wNr),e(En,ANr),e(En,VMe),e(VMe,yNr),e(En,LNr),e(En,XMe),e(XMe,xNr),e(En,$Nr),e(Hr,kNr),e(Hr,zMe),e(zMe,xw),e(xw,WMe),e(WMe,SNr),e(xw,RNr),e(xw,bK),e(bK,PNr),e(xw,BNr),e(Hr,INr),M($w,Hr,null),b(f,wNe,_),b(f,nf,_),e(nf,kw),e(kw,QMe),M(o9,QMe,null),e(nf,qNr),e(nf,HMe),e(HMe,NNr),b(f,ANe,_),b(f,Tr,_),M(r9,Tr,null),e(Tr,jNr),e(Tr,sf),e(sf,DNr),e(sf,vK),e(vK,GNr),e(sf,ONr),e(sf,FK),e(FK,VNr),e(sf,XNr),e(Tr,zNr),e(Tr,t9),e(t9,WNr),e(t9,UMe),e(UMe,QNr),e(t9,HNr),e(Tr,UNr),e(Tr,Yt),M(a9,Yt,null),e(Yt,JNr),e(Yt,JMe),e(JMe,YNr),e(Yt,KNr),e(Yt,lf),e(lf,ZNr),e(lf,YMe),e(YMe,ejr),e(lf,ojr),e(lf,TK),e(TK,rjr),e(lf,tjr),e(Yt,ajr),M(Sw,Yt,null),e(Tr,njr),e(Tr,Ur),M(n9,Ur,null),e(Ur,sjr),e(Ur,KMe),e(KMe,ljr),e(Ur,ijr),e(Ur,Cn),e(Cn,djr),e(Cn,ZMe),e(ZMe,cjr),e(Cn,fjr),e(Cn,eEe),e(eEe,mjr),e(Cn,gjr),e(Cn,oEe),e(oEe,hjr),e(Cn,pjr),e(Ur,ujr),e(Ur,s9),e(s9,Rw),e(Rw,rEe),e(rEe,_jr),e(Rw,bjr),e(Rw,MK),e(MK,vjr),e(Rw,Fjr),e(s9,Tjr),e(s9,Pw),e(Pw,tEe),e(tEe,Mjr),e(Pw,Ejr),e(Pw,EK),e(EK,Cjr),e(Pw,wjr),e(Ur,Ajr),M(Bw,Ur,null),b(f,yNe,_),b(f,df,_),e(df,Iw),e(Iw,aEe),M(l9,aEe,null),e(df,yjr),e(df,nEe),e(nEe,Ljr),b(f,LNe,_),b(f,Mr,_),M(i9,Mr,null),e(Mr,xjr),e(Mr,cf),e(cf,$jr),e(cf,CK),e(CK,kjr),e(cf,Sjr),e(cf,wK),e(wK,Rjr),e(cf,Pjr),e(Mr,Bjr),e(Mr,d9),e(d9,Ijr),e(d9,sEe),e(sEe,qjr),e(d9,Njr),e(Mr,jjr),e(Mr,Kt),M(c9,Kt,null),e(Kt,Djr),e(Kt,lEe),e(lEe,Gjr),e(Kt,Ojr),e(Kt,ff),e(ff,Vjr),e(ff,iEe),e(iEe,Xjr),e(ff,zjr),e(ff,AK),e(AK,Wjr),e(ff,Qjr),e(Kt,Hjr),M(qw,Kt,null),e(Mr,Ujr),e(Mr,Jr),M(f9,Jr,null),e(Jr,Jjr),e(Jr,dEe),e(dEe,Yjr),e(Jr,Kjr),e(Jr,wn),e(wn,Zjr),e(wn,cEe),e(cEe,eDr),e(wn,oDr),e(wn,fEe),e(fEe,rDr),e(wn,tDr),e(wn,mEe),e(mEe,aDr),e(wn,nDr),e(Jr,sDr),e(Jr,gEe),e(gEe,Nw),e(Nw,hEe),e(hEe,lDr),e(Nw,iDr),e(Nw,yK),e(yK,dDr),e(Nw,cDr),e(Jr,fDr),M(jw,Jr,null),xNe=!0},p(f,[_]){const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),Ff.$set(m9);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),vg.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),Kg.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),yh.$set(_Ee);const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),Lh.$set(g9);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),Qh.$set(bEe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Hh.$set(An);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),Yh.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),Ou.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),Xu.$set(TEe);const h9={};_&2&&(h9.$$scope={dirty:_,ctx:f}),R_.$set(h9);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),B_.$set(MEe);const p9={};_&2&&(p9.$$scope={dirty:_,ctx:f}),v2.$set(p9);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),T2.$set(EEe);const u9={};_&2&&(u9.$$scope={dirty:_,ctx:f}),a1.$set(u9);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),s1.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),C1.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),A1.$set(AEe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Fb.$set(mf);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),Mb.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),Zb.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),o4.$set(xEe);const _9={};_&2&&(_9.$$scope={dirty:_,ctx:f}),i4.$set(_9);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),c4.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),z4.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),Q4.$set(SEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),P5.$set(et);const b9={};_&2&&(b9.$$scope={dirty:_,ctx:f}),I5.$set(b9);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),j5.$set(REe);const v9={};_&2&&(v9.$$scope={dirty:_,ctx:f}),G5.$set(v9);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),ev.$set(PEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),rv.$set(ot);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),nv.$set(BEe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),lv.$set(gf);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),bv.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),Fv.$set(qEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),yv.$set(y);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),xv.$set(Dw);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),Dv.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),Ov.$set(jEe);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),Wv.$set(Gw);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),Hv.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),oF.$set(GEe);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),tF.$set(Ow);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),iF.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),cF.$set(VEe);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),hF.$set(Vw);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),uF.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),vF.$set(zEe);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),TF.$set(Xw);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),yF.$set(WEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),xF.$set(QEe);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),SF.$set(zw);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),PF.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),AT.$set(UEe);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),LT.$set(Ww);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),KT.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),e7.$set(YEe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),g7.$set(Qw);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),p7.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),F7.$set(ZEe);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),M7.$set(Hw);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),V7.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),z7.$set(oCe);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),rM.$set(Uw);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),aM.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),kM.$set(tCe);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),RM.$set(Jw);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),YM.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),ZM.$set(nCe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),rE.$set(Yw);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),aE.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),sE.$set(lCe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),iE.$set(Kw);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),xE.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),kE.$set(dCe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),KE.$set(Zw);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),eC.$set(cCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),rC.$set(fCe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),aC.$set(eA);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),sC.$set(mCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),iC.$set(gCe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),PC.$set(oA);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),IC.$set(hCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),WC.$set(pCe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),HC.$set(rA);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),l3.$set(uCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),d3.$set(_Ce);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),F3.$set(tA);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),M3.$set(bCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),S3.$set(vCe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),P3.$set(aA);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),z3.$set(FCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),Q3.$set(TCe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),aw.$set(nA);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),sw.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),pw.$set(ECe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),_w.$set(sA);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),Aw.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),Lw.$set(wCe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),$w.$set(lA);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),Sw.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),Bw.$set(yCe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),qw.$set(iA);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),jw.$set(LCe)},i(f){xNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(Ff.$$.fragment,f),E(d0.$$.fragment,f),E(c0.$$.fragment,f),E(g0.$$.fragment,f),E(vg.$$.fragment,f),E(h0.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(v0.$$.fragment,f),E(Kg.$$.fragment,f),E(F0.$$.fragment,f),E(T0.$$.fragment,f),E(M0.$$.fragment,f),E(w0.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(A0.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E(k0.$$.fragment,f),E(Qh.$$.fragment,f),E(Hh.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(I0.$$.fragment,f),E(Yh.$$.fragment,f),E(q0.$$.fragment,f),E(Ou.$$.fragment,f),E(N0.$$.fragment,f),E(j0.$$.fragment,f),E(G0.$$.fragment,f),E(Xu.$$.fragment,f),E(O0.$$.fragment,f),E(R_.$$.fragment,f),E(V0.$$.fragment,f),E(X0.$$.fragment,f),E(W0.$$.fragment,f),E(B_.$$.fragment,f),E(Q0.$$.fragment,f),E(v2.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(Y0.$$.fragment,f),E(T2.$$.fragment,f),E(K0.$$.fragment,f),E(a1.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(s1.$$.fragment,f),E(ty.$$.fragment,f),E(C1.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(A1.$$.fragment,f),E(iy.$$.fragment,f),E(Fb.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(Mb.$$.fragment,f),E(gy.$$.fragment,f),E(Zb.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(o4.$$.fragment,f),E(by.$$.fragment,f),E(i4.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(c4.$$.fragment,f),E(Ey.$$.fragment,f),E(z4.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Q4.$$.fragment,f),E(Ly.$$.fragment,f),E(P5.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(I5.$$.fragment,f),E(Ry.$$.fragment,f),E(j5.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(G5.$$.fragment,f),E(Ny.$$.fragment,f),E(ev.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(rv.$$.fragment,f),E(Vy.$$.fragment,f),E(nv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(lv.$$.fragment,f),E(Hy.$$.fragment,f),E(bv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(Fv.$$.fragment,f),E(Zy.$$.fragment,f),E(yv.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(xv.$$.fragment,f),E(aL.$$.fragment,f),E(Dv.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(Ov.$$.fragment,f),E(dL.$$.fragment,f),E(Wv.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(Hv.$$.fragment,f),E(pL.$$.fragment,f),E(oF.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(tF.$$.fragment,f),E(FL.$$.fragment,f),E(iF.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(cF.$$.fragment,f),E(wL.$$.fragment,f),E(hF.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(uF.$$.fragment,f),E(kL.$$.fragment,f),E(vF.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(TF.$$.fragment,f),E(IL.$$.fragment,f),E(yF.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(xF.$$.fragment,f),E(GL.$$.fragment,f),E(SF.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(PF.$$.fragment,f),E(WL.$$.fragment,f),E(AT.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(LT.$$.fragment,f),E(YL.$$.fragment,f),E(KT.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(e7.$$.fragment,f),E(r8.$$.fragment,f),E(g7.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(p7.$$.fragment,f),E(l8.$$.fragment,f),E(F7.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(M7.$$.fragment,f),E(m8.$$.fragment,f),E(V7.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(z7.$$.fragment,f),E(_8.$$.fragment,f),E(rM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(aM.$$.fragment,f),E(M8.$$.fragment,f),E(kM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(RM.$$.fragment,f),E(y8.$$.fragment,f),E(YM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(ZM.$$.fragment,f),E(S8.$$.fragment,f),E(rE.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(q8.$$.fragment,f),E(aE.$$.fragment,f),E(N8.$$.fragment,f),E(sE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(iE.$$.fragment,f),E(V8.$$.fragment,f),E(xE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(kE.$$.fragment,f),E(H8.$$.fragment,f),E(KE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(eC.$$.fragment,f),E(Z8.$$.fragment,f),E(rC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(aC.$$.fragment,f),E(ax.$$.fragment,f),E(sC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(iC.$$.fragment,f),E(dx.$$.fragment,f),E(PC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(IC.$$.fragment,f),E(hx.$$.fragment,f),E(WC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(HC.$$.fragment,f),E(vx.$$.fragment,f),E(l3.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(d3.$$.fragment,f),E(Cx.$$.fragment,f),E(F3.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(M3.$$.fragment,f),E(xx.$$.fragment,f),E(S3.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(P3.$$.fragment,f),E(Px.$$.fragment,f),E(z3.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(Q3.$$.fragment,f),E(jx.$$.fragment,f),E(aw.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(sw.$$.fragment,f),E(Xx.$$.fragment,f),E(pw.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(_w.$$.fragment,f),E(Ux.$$.fragment,f),E(Aw.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(Lw.$$.fragment,f),E(e9.$$.fragment,f),E($w.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(Sw.$$.fragment,f),E(n9.$$.fragment,f),E(Bw.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(qw.$$.fragment,f),E(f9.$$.fragment,f),E(jw.$$.fragment,f),xNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(Ff.$$.fragment,f),C(d0.$$.fragment,f),C(c0.$$.fragment,f),C(g0.$$.fragment,f),C(vg.$$.fragment,f),C(h0.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(v0.$$.fragment,f),C(Kg.$$.fragment,f),C(F0.$$.fragment,f),C(T0.$$.fragment,f),C(M0.$$.fragment,f),C(w0.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(A0.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C(k0.$$.fragment,f),C(Qh.$$.fragment,f),C(Hh.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(I0.$$.fragment,f),C(Yh.$$.fragment,f),C(q0.$$.fragment,f),C(Ou.$$.fragment,f),C(N0.$$.fragment,f),C(j0.$$.fragment,f),C(G0.$$.fragment,f),C(Xu.$$.fragment,f),C(O0.$$.fragment,f),C(R_.$$.fragment,f),C(V0.$$.fragment,f),C(X0.$$.fragment,f),C(W0.$$.fragment,f),C(B_.$$.fragment,f),C(Q0.$$.fragment,f),C(v2.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(Y0.$$.fragment,f),C(T2.$$.fragment,f),C(K0.$$.fragment,f),C(a1.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(s1.$$.fragment,f),C(ty.$$.fragment,f),C(C1.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(A1.$$.fragment,f),C(iy.$$.fragment,f),C(Fb.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(Mb.$$.fragment,f),C(gy.$$.fragment,f),C(Zb.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(o4.$$.fragment,f),C(by.$$.fragment,f),C(i4.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(c4.$$.fragment,f),C(Ey.$$.fragment,f),C(z4.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Q4.$$.fragment,f),C(Ly.$$.fragment,f),C(P5.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(I5.$$.fragment,f),C(Ry.$$.fragment,f),C(j5.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(G5.$$.fragment,f),C(Ny.$$.fragment,f),C(ev.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(rv.$$.fragment,f),C(Vy.$$.fragment,f),C(nv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(lv.$$.fragment,f),C(Hy.$$.fragment,f),C(bv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(Fv.$$.fragment,f),C(Zy.$$.fragment,f),C(yv.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(xv.$$.fragment,f),C(aL.$$.fragment,f),C(Dv.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(Ov.$$.fragment,f),C(dL.$$.fragment,f),C(Wv.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(Hv.$$.fragment,f),C(pL.$$.fragment,f),C(oF.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(tF.$$.fragment,f),C(FL.$$.fragment,f),C(iF.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(cF.$$.fragment,f),C(wL.$$.fragment,f),C(hF.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(uF.$$.fragment,f),C(kL.$$.fragment,f),C(vF.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(TF.$$.fragment,f),C(IL.$$.fragment,f),C(yF.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(xF.$$.fragment,f),C(GL.$$.fragment,f),C(SF.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(PF.$$.fragment,f),C(WL.$$.fragment,f),C(AT.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(LT.$$.fragment,f),C(YL.$$.fragment,f),C(KT.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(e7.$$.fragment,f),C(r8.$$.fragment,f),C(g7.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(p7.$$.fragment,f),C(l8.$$.fragment,f),C(F7.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(M7.$$.fragment,f),C(m8.$$.fragment,f),C(V7.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(z7.$$.fragment,f),C(_8.$$.fragment,f),C(rM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(aM.$$.fragment,f),C(M8.$$.fragment,f),C(kM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(RM.$$.fragment,f),C(y8.$$.fragment,f),C(YM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(ZM.$$.fragment,f),C(S8.$$.fragment,f),C(rE.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(q8.$$.fragment,f),C(aE.$$.fragment,f),C(N8.$$.fragment,f),C(sE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(iE.$$.fragment,f),C(V8.$$.fragment,f),C(xE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(kE.$$.fragment,f),C(H8.$$.fragment,f),C(KE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(eC.$$.fragment,f),C(Z8.$$.fragment,f),C(rC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(aC.$$.fragment,f),C(ax.$$.fragment,f),C(sC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(iC.$$.fragment,f),C(dx.$$.fragment,f),C(PC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(IC.$$.fragment,f),C(hx.$$.fragment,f),C(WC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(HC.$$.fragment,f),C(vx.$$.fragment,f),C(l3.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(d3.$$.fragment,f),C(Cx.$$.fragment,f),C(F3.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(M3.$$.fragment,f),C(xx.$$.fragment,f),C(S3.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(P3.$$.fragment,f),C(Px.$$.fragment,f),C(z3.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(Q3.$$.fragment,f),C(jx.$$.fragment,f),C(aw.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(sw.$$.fragment,f),C(Xx.$$.fragment,f),C(pw.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(_w.$$.fragment,f),C(Ux.$$.fragment,f),C(Aw.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(Lw.$$.fragment,f),C(e9.$$.fragment,f),C($w.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(Sw.$$.fragment,f),C(n9.$$.fragment,f),C(Bw.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(qw.$$.fragment,f),C(f9.$$.fragment,f),C(jw.$$.fragment,f),xNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(AIe),f&&t(bi),w(l0),f&&t(yIe),f&&t(kn),f&&t(LIe),w(i0,f),f&&t(xIe),f&&t($$),f&&t($Ie),w(Ff,f),f&&t(kIe),f&&t(vi),w(d0),f&&t(SIe),f&&t(Co),w(c0),w(g0),w(vg),w(h0),f&&t(RIe),f&&t(Ti),w(p0),f&&t(PIe),f&&t(wo),w(u0),w(v0),w(Kg),w(F0),f&&t(BIe),f&&t(Mi),w(T0),f&&t(IIe),f&&t(Ao),w(M0),w(w0),w(yh),w(Lh),w(A0),f&&t(qIe),f&&t(Ei),w(y0),f&&t(NIe),f&&t(yo),w(L0),w(k0),w(Qh),w(Hh),w(S0),f&&t(jIe),f&&t(wi),w(R0),f&&t(DIe),f&&t(Lo),w(P0),w(I0),w(Yh),w(q0),w(Ou),f&&t(GIe),f&&t(Li),w(N0),f&&t(OIe),f&&t(xo),w(j0),w(G0),w(Xu),w(O0),w(R_),f&&t(VIe),f&&t(ki),w(V0),f&&t(XIe),f&&t($o),w(X0),w(W0),w(B_),w(Q0),w(v2),f&&t(zIe),f&&t(Pi),w(H0),f&&t(WIe),f&&t(ko),w(U0),w(Y0),w(T2),w(K0),w(a1),f&&t(QIe),f&&t(qi),w(Z0),f&&t(HIe),f&&t(So),w(ey),w(ry),w(s1),w(ty),w(C1),f&&t(UIe),f&&t(Di),w(ay),f&&t(JIe),f&&t(Ro),w(ny),w(ly),w(A1),w(iy),w(Fb),f&&t(YIe),f&&t(Vi),w(dy),f&&t(KIe),f&&t(Po),w(cy),w(my),w(Mb),w(gy),w(Zb),f&&t(ZIe),f&&t(Wi),w(hy),f&&t(eqe),f&&t(Bo),w(py),w(_y),w(o4),w(by),w(i4),f&&t(oqe),f&&t(Ui),w(vy),f&&t(rqe),f&&t(Io),w(Fy),w(My),w(c4),w(Ey),w(z4),f&&t(tqe),f&&t(Ki),w(Cy),f&&t(aqe),f&&t(qo),w(wy),w(yy),w(Q4),w(Ly),w(P5),f&&t(nqe),f&&t(od),w(xy),f&&t(sqe),f&&t(No),w($y),w(Sy),w(I5),w(Ry),w(j5),f&&t(lqe),f&&t(ad),w(Py),f&&t(iqe),f&&t(jo),w(By),w(qy),w(G5),w(Ny),w(ev),f&&t(dqe),f&&t(ld),w(jy),f&&t(cqe),f&&t(Do),w(Dy),w(Oy),w(rv),w(Vy),w(nv),f&&t(fqe),f&&t(cd),w(Xy),f&&t(mqe),f&&t(Go),w(zy),w(Qy),w(lv),w(Hy),w(bv),f&&t(gqe),f&&t(gd),w(Uy),f&&t(hqe),f&&t(Oo),w(Jy),w(Ky),w(Fv),w(Zy),w(yv),f&&t(pqe),f&&t(ud),w(eL),f&&t(uqe),f&&t(Vo),w(oL),w(tL),w(xv),w(aL),w(Dv),f&&t(_qe),f&&t(vd),w(nL),f&&t(bqe),f&&t(Xo),w(sL),w(iL),w(Ov),w(dL),w(Wv),f&&t(vqe),f&&t(Md),w(fL),f&&t(Fqe),f&&t(zo),w(mL),w(hL),w(Hv),w(pL),w(oF),f&&t(Tqe),f&&t(wd),w(uL),f&&t(Mqe),f&&t(Wo),w(_L),w(vL),w(tF),w(FL),w(iF),f&&t(Eqe),f&&t(xd),w(TL),f&&t(Cqe),f&&t(Qo),w(ML),w(CL),w(cF),w(wL),w(hF),f&&t(wqe),f&&t(Sd),w(yL),f&&t(Aqe),f&&t(Ho),w(LL),w($L),w(uF),w(kL),w(vF),f&&t(yqe),f&&t(Bd),w(SL),f&&t(Lqe),f&&t(Uo),w(RL),w(BL),w(TF),w(IL),w(yF),f&&t(xqe),f&&t(Nd),w(qL),f&&t($qe),f&&t(Jo),w(NL),w(DL),w(xF),w(GL),w(SF),f&&t(kqe),f&&t(Gd),w(OL),f&&t(Sqe),f&&t(Yo),w(VL),w(zL),w(PF),w(WL),w(AT),f&&t(Rqe),f&&t(Xd),w(QL),f&&t(Pqe),f&&t(Ko),w(HL),w(JL),w(LT),w(YL),w(KT),f&&t(Bqe),f&&t(Qd),w(KL),f&&t(Iqe),f&&t(Zo),w(ZL),w(o8),w(e7),w(r8),w(g7),f&&t(qqe),f&&t(Jd),w(t8),f&&t(Nqe),f&&t(er),w(a8),w(s8),w(p7),w(l8),w(F7),f&&t(jqe),f&&t(Zd),w(i8),f&&t(Dqe),f&&t(or),w(d8),w(f8),w(M7),w(m8),w(V7),f&&t(Gqe),f&&t(rc),w(g8),f&&t(Oqe),f&&t(rr),w(h8),w(u8),w(z7),w(_8),w(rM),f&&t(Vqe),f&&t(nc),w(b8),f&&t(Xqe),f&&t(tr),w(v8),w(T8),w(aM),w(M8),w(kM),f&&t(zqe),f&&t(ic),w(E8),f&&t(Wqe),f&&t(ar),w(C8),w(A8),w(RM),w(y8),w(YM),f&&t(Qqe),f&&t(fc),w(L8),f&&t(Hqe),f&&t(nr),w(x8),w(k8),w(ZM),w(S8),w(rE),f&&t(Uqe),f&&t(hc),w(P8),f&&t(Jqe),f&&t(sr),w(B8),w(q8),w(aE),w(N8),w(sE),f&&t(Yqe),f&&t(_c),w(j8),f&&t(Kqe),f&&t(lr),w(D8),w(O8),w(iE),w(V8),w(xE),f&&t(Zqe),f&&t(Fc),w(X8),f&&t(eNe),f&&t(ir),w(z8),w(Q8),w(kE),w(H8),w(KE),f&&t(oNe),f&&t(Ec),w(U8),f&&t(rNe),f&&t(dr),w(J8),w(K8),w(eC),w(Z8),w(rC),f&&t(tNe),f&&t(Ac),w(ex),f&&t(aNe),f&&t(cr),w(ox),w(tx),w(aC),w(ax),w(sC),f&&t(nNe),f&&t(xc),w(nx),f&&t(sNe),f&&t(fr),w(sx),w(ix),w(iC),w(dx),w(PC),f&&t(lNe),f&&t(Sc),w(cx),f&&t(iNe),f&&t(mr),w(fx),w(gx),w(IC),w(hx),w(WC),f&&t(dNe),f&&t(Bc),w(px),f&&t(cNe),f&&t(gr),w(ux),w(bx),w(HC),w(vx),w(l3),f&&t(fNe),f&&t(Nc),w(Fx),f&&t(mNe),f&&t(hr),w(Tx),w(Ex),w(d3),w(Cx),w(F3),f&&t(gNe),f&&t(Gc),w(wx),f&&t(hNe),f&&t(pr),w(Ax),w(Lx),w(M3),w(xx),w(S3),f&&t(pNe),f&&t(Xc),w($x),f&&t(uNe),f&&t(ur),w(kx),w(Rx),w(P3),w(Px),w(z3),f&&t(_Ne),f&&t(Qc),w(Bx),f&&t(bNe),f&&t(_r),w(Ix),w(Nx),w(Q3),w(jx),w(aw),f&&t(vNe),f&&t(Jc),w(Dx),f&&t(FNe),f&&t(br),w(Gx),w(Vx),w(sw),w(Xx),w(pw),f&&t(TNe),f&&t(Zc),w(zx),f&&t(MNe),f&&t(vr),w(Wx),w(Hx),w(_w),w(Ux),w(Aw),f&&t(ENe),f&&t(rf),w(Jx),f&&t(CNe),f&&t(Fr),w(Yx),w(Zx),w(Lw),w(e9),w($w),f&&t(wNe),f&&t(nf),w(o9),f&&t(ANe),f&&t(Tr),w(r9),w(a9),w(Sw),w(n9),w(Bw),f&&t(yNe),f&&t(df),w(l9),f&&t(LNe),f&&t(Mr),w(i9),w(c9),w(qw),w(f9),w(jw)}}}const nxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function sxt(L){return sLt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gxt extends rLt{constructor(g){super();tLt(this,g,sxt,axt,aLt,{})}}export{gxt as default,nxt as metadata};
