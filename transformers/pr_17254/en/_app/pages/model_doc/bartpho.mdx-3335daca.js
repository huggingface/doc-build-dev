import{S as Ys,i as Zs,s as en,e as s,k as p,w as g,t as a,M as tn,c as n,d as o,m as d,a as r,x as _,h as i,b as l,F as e,g as h,y as k,L as on,q as b,o as v,B as T,v as sn}from"../../chunks/vendor-6b77c823.js";import{D as V}from"../../chunks/Docstring-1088f2fb.js";import{C as Ks}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Pt}from"../../chunks/IconCopyLink-7a11ce68.js";function nn(ps){let $,tt,A,P,De,U,Dt,je,jt,ot,E,D,Fe,X,Ft,Ie,It,st,j,Nt,W,St,Mt,nt,ue,Ct,rt,ge,Ne,Ot,at,_e,Vt,it,H,lt,ke,Ut,pt,be,G,Xt,ve,Wt,Ht,dt,Q,ct,Te,Se,Gt,ht,q,Qt,J,Jt,Kt,K,Yt,Zt,mt,x,F,Me,Y,eo,Ce,to,ft,m,Z,oo,L,so,we,no,ro,ee,ao,io,lo,te,po,qe,co,ho,mo,y,oe,fo,Oe,uo,go,se,ye,_o,Ve,ko,bo,ze,vo,Ue,To,wo,I,ne,qo,Xe,yo,zo,N,re,Bo,We,$o,Ao,S,ae,Eo,ie,xo,He,Lo,Ro,ut,R,M,Ge,le,Po,Qe,Do,gt,f,pe,jo,w,Fo,Je,Io,No,Be,So,Mo,de,Co,Oo,Vo,ce,Uo,$e,Xo,Wo,Ho,z,he,Go,Ke,Qo,Jo,me,Ae,Ko,Ye,Yo,Zo,Ee,es,Ze,ts,os,C,fe,ss,et,ns,_t;return U=new Pt({}),X=new Pt({}),H=new Ks({props:{code:`import torch
from transformers import AutoModel, AutoTokenizer

bartpho = AutoModel.from_pretrained("vinai/bartpho-syllable")

tokenizer = AutoTokenizer.from_pretrained("vinai/bartpho-syllable")

line = "Ch\xFAng t\xF4i l\xE0 nh\u1EEFng nghi\xEAn c\u1EE9u vi\xEAn."

input_ids = tokenizer(line, return_tensors="pt")

with torch.no_grad():
    features = bartpho(**input_ids)  # Models outputs are now tuples

# With TensorFlow 2.0+:
from transformers import TFAutoModel

bartpho = TFAutoModel.from_pretrained("vinai/bartpho-syllable")
input_ids = tokenizer(line, return_tensors="tf")
features = bartpho(**input_ids)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>bartpho = AutoModel.from_pretrained(<span class="hljs-string">&quot;vinai/bartpho-syllable&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;vinai/bartpho-syllable&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>line = <span class="hljs-string">&quot;Ch\xFAng t\xF4i l\xE0 nh\u1EEFng nghi\xEAn c\u1EE9u vi\xEAn.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(line, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    features = bartpho(**input_ids)  <span class="hljs-comment"># Models outputs are now tuples</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># With TensorFlow 2.0+:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>bartpho = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;vinai/bartpho-syllable&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(line, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>features = bartpho(**input_ids)`}}),Q=new Ks({props:{code:`from transformers import MBartForConditionalGeneration

bartpho = MBartForConditionalGeneration.from_pretrained("vinai/bartpho-syllable")
TXT = "Ch\xFAng t\xF4i l\xE0 <mask> nghi\xEAn c\u1EE9u vi\xEAn."
input_ids = tokenizer([TXT], return_tensors="pt")["input_ids"]
logits = bartpho(input_ids).logits
masked_index = (input_ids[0] == tokenizer.mask_token_id).nonzero().item()
probs = logits[0, masked_index].softmax(dim=0)
values, predictions = probs.topk(5)
print(tokenizer.decode(predictions).split())`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MBartForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span>bartpho = MBartForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;vinai/bartpho-syllable&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>TXT = <span class="hljs-string">&quot;Ch\xFAng t\xF4i l\xE0 &lt;mask&gt; nghi\xEAn c\u1EE9u vi\xEAn.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer([TXT], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = bartpho(input_ids).logits
<span class="hljs-meta">&gt;&gt;&gt; </span>masked_index = (input_ids[<span class="hljs-number">0</span>] == tokenizer.mask_token_id).nonzero().item()
<span class="hljs-meta">&gt;&gt;&gt; </span>probs = logits[<span class="hljs-number">0</span>, masked_index].softmax(dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>values, predictions = probs.topk(<span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tokenizer.decode(predictions).split())`}}),Y=new Pt({}),Z=new V({props:{name:"class transformers.BartphoTokenizer",anchor:"transformers.BartphoTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BartphoTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.BartphoTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.BartphoTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.BartphoTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.BartphoTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.BartphoTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.BartphoTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.BartphoTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.BartphoTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.BartphoTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.BartphoTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho.py#L47"}}),oe=new V({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.BartphoTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.BartphoTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.BartphoTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho.py#L192",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),ne=new V({props:{name:"convert_tokens_to_string",anchor:"transformers.BartphoTokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho.py#L298"}}),re=new V({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.BartphoTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.BartphoTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.BartphoTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho.py#L246",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),ae=new V({props:{name:"get_special_tokens_mask",anchor:"transformers.BartphoTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.BartphoTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.BartphoTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.BartphoTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho.py#L218",returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),le=new Pt({}),pe=new V({props:{name:"class transformers.BartphoTokenizerFast",anchor:"transformers.BartphoTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BartphoTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.BartphoTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.BartphoTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.BartphoTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.BartphoTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.BartphoTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.BartphoTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.BartphoTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.BartphoTokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho_fast.py#L53"}}),he=new V({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.BartphoTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.BartphoTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.BartphoTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho_fast.py#L145",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),fe=new V({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.BartphoTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.BartphoTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.BartphoTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/bartpho/tokenization_bartpho_fast.py#L171",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),{c(){$=s("meta"),tt=p(),A=s("h1"),P=s("a"),De=s("span"),g(U.$$.fragment),Dt=p(),je=s("span"),jt=a("BARTpho"),ot=p(),E=s("h2"),D=s("a"),Fe=s("span"),g(X.$$.fragment),Ft=p(),Ie=s("span"),It=a("Overview"),st=p(),j=s("p"),Nt=a("The BARTpho model was proposed in "),W=s("a"),St=a("BARTpho: Pre-trained Sequence-to-Sequence Models for Vietnamese"),Mt=a(" by Nguyen Luong Tran, Duong Minh Le and Dat Quoc Nguyen."),nt=p(),ue=s("p"),Ct=a("The abstract from the paper is the following:"),rt=p(),ge=s("p"),Ne=s("em"),Ot=a(`We present BARTpho with two versions \u2014 BARTpho_word and BARTpho_syllable \u2014 the first public large-scale monolingual
sequence-to-sequence models pre-trained for Vietnamese. Our BARTpho uses the \u201Clarge\u201D architecture and pre-training
scheme of the sequence-to-sequence denoising model BART, thus especially suitable for generative NLP tasks. Experiments
on a downstream task of Vietnamese text summarization show that in both automatic and human evaluations, our BARTpho
outperforms the strong baseline mBART and improves the state-of-the-art. We release BARTpho to facilitate future
research and applications of generative Vietnamese NLP tasks.`),at=p(),_e=s("p"),Vt=a("Example of use:"),it=p(),g(H.$$.fragment),lt=p(),ke=s("p"),Ut=a("Tips:"),pt=p(),be=s("ul"),G=s("li"),Xt=a(`Following mBART, BARTpho uses the \u201Clarge\u201D architecture of BART with an additional layer-normalization layer on top of
both the encoder and decoder. Thus, usage examples in the `),ve=s("a"),Wt=a("documentation of BART"),Ht=a(`, when adapting to use
with BARTpho, should be adjusted by replacing the BART-specialized classes with the mBART-specialized counterparts.
For example:`),dt=p(),g(Q.$$.fragment),ct=p(),Te=s("ul"),Se=s("li"),Gt=a("This implementation is only for tokenization."),ht=p(),q=s("p"),Qt=a("This model was contributed by "),J=s("a"),Jt=a("dqnguyen"),Kt=a(". The original code can be found "),K=s("a"),Yt=a("here"),Zt=a("."),mt=p(),x=s("h2"),F=s("a"),Me=s("span"),g(Y.$$.fragment),eo=p(),Ce=s("span"),to=a("BartphoTokenizer"),ft=p(),m=s("div"),g(Z.$$.fragment),oo=p(),L=s("p"),so=a("Adapted from "),we=s("a"),no=a("XLMRobertaTokenizer"),ro=a(". Based on "),ee=s("a"),ao=a("SentencePiece"),io=a("."),lo=p(),te=s("p"),po=a("This tokenizer inherits from "),qe=s("a"),co=a("PreTrainedTokenizer"),ho=a(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),mo=p(),y=s("div"),g(oe.$$.fragment),fo=p(),Oe=s("p"),uo=a(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARTpho sequence has the following format:`),go=p(),se=s("ul"),ye=s("li"),_o=a("single sequence: "),Ve=s("code"),ko=a("<s> X </s>"),bo=p(),ze=s("li"),vo=a("pair of sequences: "),Ue=s("code"),To=a("<s> A </s></s> B </s>"),wo=p(),I=s("div"),g(ne.$$.fragment),qo=p(),Xe=s("p"),yo=a("Converts a sequence of tokens (strings for sub-words) in a single string."),zo=p(),N=s("div"),g(re.$$.fragment),Bo=p(),We=s("p"),$o=a(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. BARTpho does not
make use of token type ids, therefore a list of zeros is returned.`),Ao=p(),S=s("div"),g(ae.$$.fragment),Eo=p(),ie=s("p"),xo=a(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),He=s("code"),Lo=a("prepare_for_model"),Ro=a(" method."),ut=p(),R=s("h2"),M=s("a"),Ge=s("span"),g(le.$$.fragment),Po=p(),Qe=s("span"),Do=a("BartphoTokenizerFast"),gt=p(),f=s("div"),g(pe.$$.fragment),jo=p(),w=s("p"),Fo=a("Construct a \u201Cfast\u201D BARTpho tokenizer (backed by HuggingFace\u2019s "),Je=s("em"),Io=a("tokenizers"),No=a(` library). Adapted from
`),Be=s("a"),So=a("XLMRobertaTokenizerFast"),Mo=a(". Based on "),de=s("a"),Co=a("SentencePiece"),Oo=a("."),Vo=p(),ce=s("p"),Uo=a("This tokenizer inherits from "),$e=s("a"),Xo=a("PreTrainedTokenizerFast"),Wo=a(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Ho=p(),z=s("div"),g(he.$$.fragment),Go=p(),Ke=s("p"),Qo=a(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARTpho sequence has the following format:`),Jo=p(),me=s("ul"),Ae=s("li"),Ko=a("single sequence: "),Ye=s("code"),Yo=a("<s> X </s>"),Zo=p(),Ee=s("li"),es=a("pair of sequences: "),Ze=s("code"),ts=a("<s> A </s></s> B </s>"),os=p(),C=s("div"),g(fe.$$.fragment),ss=p(),et=s("p"),ns=a(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. BARTpho does not
make use of token type ids, therefore a list of zeros is returned.`),this.h()},l(t){const c=tn('[data-svelte="svelte-1phssyn"]',document.head);$=n(c,"META",{name:!0,content:!0}),c.forEach(o),tt=d(t),A=n(t,"H1",{class:!0});var kt=r(A);P=n(kt,"A",{id:!0,class:!0,href:!0});var ds=r(P);De=n(ds,"SPAN",{});var cs=r(De);_(U.$$.fragment,cs),cs.forEach(o),ds.forEach(o),Dt=d(kt),je=n(kt,"SPAN",{});var hs=r(je);jt=i(hs,"BARTpho"),hs.forEach(o),kt.forEach(o),ot=d(t),E=n(t,"H2",{class:!0});var bt=r(E);D=n(bt,"A",{id:!0,class:!0,href:!0});var ms=r(D);Fe=n(ms,"SPAN",{});var fs=r(Fe);_(X.$$.fragment,fs),fs.forEach(o),ms.forEach(o),Ft=d(bt),Ie=n(bt,"SPAN",{});var us=r(Ie);It=i(us,"Overview"),us.forEach(o),bt.forEach(o),st=d(t),j=n(t,"P",{});var vt=r(j);Nt=i(vt,"The BARTpho model was proposed in "),W=n(vt,"A",{href:!0,rel:!0});var gs=r(W);St=i(gs,"BARTpho: Pre-trained Sequence-to-Sequence Models for Vietnamese"),gs.forEach(o),Mt=i(vt," by Nguyen Luong Tran, Duong Minh Le and Dat Quoc Nguyen."),vt.forEach(o),nt=d(t),ue=n(t,"P",{});var _s=r(ue);Ct=i(_s,"The abstract from the paper is the following:"),_s.forEach(o),rt=d(t),ge=n(t,"P",{});var ks=r(ge);Ne=n(ks,"EM",{});var bs=r(Ne);Ot=i(bs,`We present BARTpho with two versions \u2014 BARTpho_word and BARTpho_syllable \u2014 the first public large-scale monolingual
sequence-to-sequence models pre-trained for Vietnamese. Our BARTpho uses the \u201Clarge\u201D architecture and pre-training
scheme of the sequence-to-sequence denoising model BART, thus especially suitable for generative NLP tasks. Experiments
on a downstream task of Vietnamese text summarization show that in both automatic and human evaluations, our BARTpho
outperforms the strong baseline mBART and improves the state-of-the-art. We release BARTpho to facilitate future
research and applications of generative Vietnamese NLP tasks.`),bs.forEach(o),ks.forEach(o),at=d(t),_e=n(t,"P",{});var vs=r(_e);Vt=i(vs,"Example of use:"),vs.forEach(o),it=d(t),_(H.$$.fragment,t),lt=d(t),ke=n(t,"P",{});var Ts=r(ke);Ut=i(Ts,"Tips:"),Ts.forEach(o),pt=d(t),be=n(t,"UL",{});var ws=r(be);G=n(ws,"LI",{});var Tt=r(G);Xt=i(Tt,`Following mBART, BARTpho uses the \u201Clarge\u201D architecture of BART with an additional layer-normalization layer on top of
both the encoder and decoder. Thus, usage examples in the `),ve=n(Tt,"A",{href:!0});var qs=r(ve);Wt=i(qs,"documentation of BART"),qs.forEach(o),Ht=i(Tt,`, when adapting to use
with BARTpho, should be adjusted by replacing the BART-specialized classes with the mBART-specialized counterparts.
For example:`),Tt.forEach(o),ws.forEach(o),dt=d(t),_(Q.$$.fragment,t),ct=d(t),Te=n(t,"UL",{});var ys=r(Te);Se=n(ys,"LI",{});var zs=r(Se);Gt=i(zs,"This implementation is only for tokenization."),zs.forEach(o),ys.forEach(o),ht=d(t),q=n(t,"P",{});var xe=r(q);Qt=i(xe,"This model was contributed by "),J=n(xe,"A",{href:!0,rel:!0});var Bs=r(J);Jt=i(Bs,"dqnguyen"),Bs.forEach(o),Kt=i(xe,". The original code can be found "),K=n(xe,"A",{href:!0,rel:!0});var $s=r(K);Yt=i($s,"here"),$s.forEach(o),Zt=i(xe,"."),xe.forEach(o),mt=d(t),x=n(t,"H2",{class:!0});var wt=r(x);F=n(wt,"A",{id:!0,class:!0,href:!0});var As=r(F);Me=n(As,"SPAN",{});var Es=r(Me);_(Y.$$.fragment,Es),Es.forEach(o),As.forEach(o),eo=d(wt),Ce=n(wt,"SPAN",{});var xs=r(Ce);to=i(xs,"BartphoTokenizer"),xs.forEach(o),wt.forEach(o),ft=d(t),m=n(t,"DIV",{class:!0});var u=r(m);_(Z.$$.fragment,u),oo=d(u),L=n(u,"P",{});var Le=r(L);so=i(Le,"Adapted from "),we=n(Le,"A",{href:!0});var Ls=r(we);no=i(Ls,"XLMRobertaTokenizer"),Ls.forEach(o),ro=i(Le,". Based on "),ee=n(Le,"A",{href:!0,rel:!0});var Rs=r(ee);ao=i(Rs,"SentencePiece"),Rs.forEach(o),io=i(Le,"."),Le.forEach(o),lo=d(u),te=n(u,"P",{});var qt=r(te);po=i(qt,"This tokenizer inherits from "),qe=n(qt,"A",{href:!0});var Ps=r(qe);co=i(Ps,"PreTrainedTokenizer"),Ps.forEach(o),ho=i(qt,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),qt.forEach(o),mo=d(u),y=n(u,"DIV",{class:!0});var Re=r(y);_(oe.$$.fragment,Re),fo=d(Re),Oe=n(Re,"P",{});var Ds=r(Oe);uo=i(Ds,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARTpho sequence has the following format:`),Ds.forEach(o),go=d(Re),se=n(Re,"UL",{});var yt=r(se);ye=n(yt,"LI",{});var rs=r(ye);_o=i(rs,"single sequence: "),Ve=n(rs,"CODE",{});var js=r(Ve);ko=i(js,"<s> X </s>"),js.forEach(o),rs.forEach(o),bo=d(yt),ze=n(yt,"LI",{});var as=r(ze);vo=i(as,"pair of sequences: "),Ue=n(as,"CODE",{});var Fs=r(Ue);To=i(Fs,"<s> A </s></s> B </s>"),Fs.forEach(o),as.forEach(o),yt.forEach(o),Re.forEach(o),wo=d(u),I=n(u,"DIV",{class:!0});var zt=r(I);_(ne.$$.fragment,zt),qo=d(zt),Xe=n(zt,"P",{});var Is=r(Xe);yo=i(Is,"Converts a sequence of tokens (strings for sub-words) in a single string."),Is.forEach(o),zt.forEach(o),zo=d(u),N=n(u,"DIV",{class:!0});var Bt=r(N);_(re.$$.fragment,Bt),Bo=d(Bt),We=n(Bt,"P",{});var Ns=r(We);$o=i(Ns,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. BARTpho does not
make use of token type ids, therefore a list of zeros is returned.`),Ns.forEach(o),Bt.forEach(o),Ao=d(u),S=n(u,"DIV",{class:!0});var $t=r(S);_(ae.$$.fragment,$t),Eo=d($t),ie=n($t,"P",{});var At=r(ie);xo=i(At,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),He=n(At,"CODE",{});var Ss=r(He);Lo=i(Ss,"prepare_for_model"),Ss.forEach(o),Ro=i(At," method."),At.forEach(o),$t.forEach(o),u.forEach(o),ut=d(t),R=n(t,"H2",{class:!0});var Et=r(R);M=n(Et,"A",{id:!0,class:!0,href:!0});var Ms=r(M);Ge=n(Ms,"SPAN",{});var Cs=r(Ge);_(le.$$.fragment,Cs),Cs.forEach(o),Ms.forEach(o),Po=d(Et),Qe=n(Et,"SPAN",{});var Os=r(Qe);Do=i(Os,"BartphoTokenizerFast"),Os.forEach(o),Et.forEach(o),gt=d(t),f=n(t,"DIV",{class:!0});var B=r(f);_(pe.$$.fragment,B),jo=d(B),w=n(B,"P",{});var O=r(w);Fo=i(O,"Construct a \u201Cfast\u201D BARTpho tokenizer (backed by HuggingFace\u2019s "),Je=n(O,"EM",{});var Vs=r(Je);Io=i(Vs,"tokenizers"),Vs.forEach(o),No=i(O,` library). Adapted from
`),Be=n(O,"A",{href:!0});var Us=r(Be);So=i(Us,"XLMRobertaTokenizerFast"),Us.forEach(o),Mo=i(O,". Based on "),de=n(O,"A",{href:!0,rel:!0});var Xs=r(de);Co=i(Xs,"SentencePiece"),Xs.forEach(o),Oo=i(O,"."),O.forEach(o),Vo=d(B),ce=n(B,"P",{});var xt=r(ce);Uo=i(xt,"This tokenizer inherits from "),$e=n(xt,"A",{href:!0});var Ws=r($e);Xo=i(Ws,"PreTrainedTokenizerFast"),Ws.forEach(o),Wo=i(xt,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),xt.forEach(o),Ho=d(B),z=n(B,"DIV",{class:!0});var Pe=r(z);_(he.$$.fragment,Pe),Go=d(Pe),Ke=n(Pe,"P",{});var Hs=r(Ke);Qo=i(Hs,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARTpho sequence has the following format:`),Hs.forEach(o),Jo=d(Pe),me=n(Pe,"UL",{});var Lt=r(me);Ae=n(Lt,"LI",{});var is=r(Ae);Ko=i(is,"single sequence: "),Ye=n(is,"CODE",{});var Gs=r(Ye);Yo=i(Gs,"<s> X </s>"),Gs.forEach(o),is.forEach(o),Zo=d(Lt),Ee=n(Lt,"LI",{});var ls=r(Ee);es=i(ls,"pair of sequences: "),Ze=n(ls,"CODE",{});var Qs=r(Ze);ts=i(Qs,"<s> A </s></s> B </s>"),Qs.forEach(o),ls.forEach(o),Lt.forEach(o),Pe.forEach(o),os=d(B),C=n(B,"DIV",{class:!0});var Rt=r(C);_(fe.$$.fragment,Rt),ss=d(Rt),et=n(Rt,"P",{});var Js=r(et);ns=i(Js,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. BARTpho does not
make use of token type ids, therefore a list of zeros is returned.`),Js.forEach(o),Rt.forEach(o),B.forEach(o),this.h()},h(){l($,"name","hf:doc:metadata"),l($,"content",JSON.stringify(rn)),l(P,"id","bartpho"),l(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(P,"href","#bartpho"),l(A,"class","relative group"),l(D,"id","overview"),l(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(D,"href","#overview"),l(E,"class","relative group"),l(W,"href","https://arxiv.org/abs/2109.09701"),l(W,"rel","nofollow"),l(ve,"href","bart"),l(J,"href","https://huggingface.co/dqnguyen"),l(J,"rel","nofollow"),l(K,"href","https://github.com/VinAIResearch/BARTpho"),l(K,"rel","nofollow"),l(F,"id","transformers.BartphoTokenizer"),l(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(F,"href","#transformers.BartphoTokenizer"),l(x,"class","relative group"),l(we,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),l(ee,"href","https://github.com/google/sentencepiece"),l(ee,"rel","nofollow"),l(qe,"href","/docs/transformers/pr_17254/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),l(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(M,"id","transformers.BartphoTokenizerFast"),l(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(M,"href","#transformers.BartphoTokenizerFast"),l(R,"class","relative group"),l(Be,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),l(de,"href","https://github.com/google/sentencepiece"),l(de,"rel","nofollow"),l($e,"href","/docs/transformers/pr_17254/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),l(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,c){e(document.head,$),h(t,tt,c),h(t,A,c),e(A,P),e(P,De),k(U,De,null),e(A,Dt),e(A,je),e(je,jt),h(t,ot,c),h(t,E,c),e(E,D),e(D,Fe),k(X,Fe,null),e(E,Ft),e(E,Ie),e(Ie,It),h(t,st,c),h(t,j,c),e(j,Nt),e(j,W),e(W,St),e(j,Mt),h(t,nt,c),h(t,ue,c),e(ue,Ct),h(t,rt,c),h(t,ge,c),e(ge,Ne),e(Ne,Ot),h(t,at,c),h(t,_e,c),e(_e,Vt),h(t,it,c),k(H,t,c),h(t,lt,c),h(t,ke,c),e(ke,Ut),h(t,pt,c),h(t,be,c),e(be,G),e(G,Xt),e(G,ve),e(ve,Wt),e(G,Ht),h(t,dt,c),k(Q,t,c),h(t,ct,c),h(t,Te,c),e(Te,Se),e(Se,Gt),h(t,ht,c),h(t,q,c),e(q,Qt),e(q,J),e(J,Jt),e(q,Kt),e(q,K),e(K,Yt),e(q,Zt),h(t,mt,c),h(t,x,c),e(x,F),e(F,Me),k(Y,Me,null),e(x,eo),e(x,Ce),e(Ce,to),h(t,ft,c),h(t,m,c),k(Z,m,null),e(m,oo),e(m,L),e(L,so),e(L,we),e(we,no),e(L,ro),e(L,ee),e(ee,ao),e(L,io),e(m,lo),e(m,te),e(te,po),e(te,qe),e(qe,co),e(te,ho),e(m,mo),e(m,y),k(oe,y,null),e(y,fo),e(y,Oe),e(Oe,uo),e(y,go),e(y,se),e(se,ye),e(ye,_o),e(ye,Ve),e(Ve,ko),e(se,bo),e(se,ze),e(ze,vo),e(ze,Ue),e(Ue,To),e(m,wo),e(m,I),k(ne,I,null),e(I,qo),e(I,Xe),e(Xe,yo),e(m,zo),e(m,N),k(re,N,null),e(N,Bo),e(N,We),e(We,$o),e(m,Ao),e(m,S),k(ae,S,null),e(S,Eo),e(S,ie),e(ie,xo),e(ie,He),e(He,Lo),e(ie,Ro),h(t,ut,c),h(t,R,c),e(R,M),e(M,Ge),k(le,Ge,null),e(R,Po),e(R,Qe),e(Qe,Do),h(t,gt,c),h(t,f,c),k(pe,f,null),e(f,jo),e(f,w),e(w,Fo),e(w,Je),e(Je,Io),e(w,No),e(w,Be),e(Be,So),e(w,Mo),e(w,de),e(de,Co),e(w,Oo),e(f,Vo),e(f,ce),e(ce,Uo),e(ce,$e),e($e,Xo),e(ce,Wo),e(f,Ho),e(f,z),k(he,z,null),e(z,Go),e(z,Ke),e(Ke,Qo),e(z,Jo),e(z,me),e(me,Ae),e(Ae,Ko),e(Ae,Ye),e(Ye,Yo),e(me,Zo),e(me,Ee),e(Ee,es),e(Ee,Ze),e(Ze,ts),e(f,os),e(f,C),k(fe,C,null),e(C,ss),e(C,et),e(et,ns),_t=!0},p:on,i(t){_t||(b(U.$$.fragment,t),b(X.$$.fragment,t),b(H.$$.fragment,t),b(Q.$$.fragment,t),b(Y.$$.fragment,t),b(Z.$$.fragment,t),b(oe.$$.fragment,t),b(ne.$$.fragment,t),b(re.$$.fragment,t),b(ae.$$.fragment,t),b(le.$$.fragment,t),b(pe.$$.fragment,t),b(he.$$.fragment,t),b(fe.$$.fragment,t),_t=!0)},o(t){v(U.$$.fragment,t),v(X.$$.fragment,t),v(H.$$.fragment,t),v(Q.$$.fragment,t),v(Y.$$.fragment,t),v(Z.$$.fragment,t),v(oe.$$.fragment,t),v(ne.$$.fragment,t),v(re.$$.fragment,t),v(ae.$$.fragment,t),v(le.$$.fragment,t),v(pe.$$.fragment,t),v(he.$$.fragment,t),v(fe.$$.fragment,t),_t=!1},d(t){o($),t&&o(tt),t&&o(A),T(U),t&&o(ot),t&&o(E),T(X),t&&o(st),t&&o(j),t&&o(nt),t&&o(ue),t&&o(rt),t&&o(ge),t&&o(at),t&&o(_e),t&&o(it),T(H,t),t&&o(lt),t&&o(ke),t&&o(pt),t&&o(be),t&&o(dt),T(Q,t),t&&o(ct),t&&o(Te),t&&o(ht),t&&o(q),t&&o(mt),t&&o(x),T(Y),t&&o(ft),t&&o(m),T(Z),T(oe),T(ne),T(re),T(ae),t&&o(ut),t&&o(R),T(le),t&&o(gt),t&&o(f),T(pe),T(he),T(fe)}}}const rn={local:"bartpho",sections:[{local:"overview",title:"Overview"},{local:"transformers.BartphoTokenizer",title:"BartphoTokenizer"},{local:"transformers.BartphoTokenizerFast",title:"BartphoTokenizerFast"}],title:"BARTpho"};function an(ps){return sn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class hn extends Ys{constructor($){super();Zs(this,$,an,nn,en,{})}}export{hn as default,rn as metadata};
