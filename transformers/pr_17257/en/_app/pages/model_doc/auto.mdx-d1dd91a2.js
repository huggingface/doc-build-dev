import{S as Kyt,i as Zyt,s as eLt,e as a,k as l,w as F,t as o,M as oLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as rLt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function tLt(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,t0,pf,je,We,gi,yn,a0,Ln,xn,n0,hi,$n,s0,pi,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),t0=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),a0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),n0=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),s0=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var C$=s(p);m=r(C$,"NewModelConfig"),C$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var w$=s(ci);hf=r(w$,"model_type"),w$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var A$=s(fi);mi=r(A$,'"new-model"'),A$.forEach(t),t0=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),a0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var y$=s(Ln);xn=r(y$,"PreTrainedModel"),y$.forEach(t),n0=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var _f=s(hi);$n=r(_f,"config_class"),_f.forEach(t),s0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var L$=s(pi);uf=r(L$,"NewModelConfig"),L$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,t0),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,a0),e(je,Ln),e(Ln,xn),e(je,n0),e(je,hi),e(hi,$n),e(je,s0),e(je,pi),e(pi,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function aLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function lLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function dLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,t0,pf,je,We,gi,yn,a0,Ln,xn,n0,hi,$n,s0,pi,uf,Ca,Qe,Ae,C$,ui,w$,A$,Eo,wa,y$,_f,L$,IDe,wIe,_i,bf,bee,l0,qDe,vee,NDe,AIe,kn,jDe,Fee,DDe,GDe,Tee,ODe,VDe,yIe,i0,LIe,x$,XDe,xIe,vf,$Ie,bi,Ff,Mee,d0,zDe,Eee,WDe,kIe,Co,c0,QDe,f0,HDe,$$,UDe,JDe,YDe,m0,KDe,Cee,ZDe,eGe,oGe,Er,g0,rGe,wee,tGe,aGe,vi,nGe,Aee,sGe,lGe,yee,iGe,dGe,cGe,A,Tf,Lee,fGe,mGe,k$,gGe,hGe,pGe,Mf,xee,uGe,_Ge,S$,bGe,vGe,FGe,Ef,$ee,TGe,MGe,R$,EGe,CGe,wGe,Cf,kee,AGe,yGe,P$,LGe,xGe,$Ge,wf,See,kGe,SGe,B$,RGe,PGe,BGe,Af,Ree,IGe,qGe,I$,NGe,jGe,DGe,yf,Pee,GGe,OGe,q$,VGe,XGe,zGe,Lf,Bee,WGe,QGe,N$,HGe,UGe,JGe,xf,Iee,YGe,KGe,j$,ZGe,eOe,oOe,$f,qee,rOe,tOe,D$,aOe,nOe,sOe,kf,Nee,lOe,iOe,G$,dOe,cOe,fOe,Sf,jee,mOe,gOe,O$,hOe,pOe,uOe,Rf,Dee,_Oe,bOe,V$,vOe,FOe,TOe,Pf,Gee,MOe,EOe,X$,COe,wOe,AOe,Bf,Oee,yOe,LOe,z$,xOe,$Oe,kOe,If,Vee,SOe,ROe,W$,POe,BOe,IOe,qf,Xee,qOe,NOe,Q$,jOe,DOe,GOe,Nf,zee,OOe,VOe,H$,XOe,zOe,WOe,jf,Wee,QOe,HOe,U$,UOe,JOe,YOe,Df,Qee,KOe,ZOe,J$,eVe,oVe,rVe,Gf,Hee,tVe,aVe,Y$,nVe,sVe,lVe,Of,Uee,iVe,dVe,K$,cVe,fVe,mVe,Vf,Jee,gVe,hVe,Z$,pVe,uVe,_Ve,Xf,Yee,bVe,vVe,ek,FVe,TVe,MVe,zf,Kee,EVe,CVe,ok,wVe,AVe,yVe,Wf,Zee,LVe,xVe,rk,$Ve,kVe,SVe,Qf,eoe,RVe,PVe,tk,BVe,IVe,qVe,Hf,ooe,NVe,jVe,ak,DVe,GVe,OVe,Uf,roe,VVe,XVe,nk,zVe,WVe,QVe,Jf,toe,HVe,UVe,sk,JVe,YVe,KVe,Yf,aoe,ZVe,eXe,lk,oXe,rXe,tXe,Kf,noe,aXe,nXe,ik,sXe,lXe,iXe,Zf,soe,dXe,cXe,dk,fXe,mXe,gXe,em,loe,hXe,pXe,ck,uXe,_Xe,bXe,om,ioe,vXe,FXe,fk,TXe,MXe,EXe,rm,doe,CXe,wXe,mk,AXe,yXe,LXe,tm,coe,xXe,$Xe,gk,kXe,SXe,RXe,am,foe,PXe,BXe,hk,IXe,qXe,NXe,nm,moe,jXe,DXe,pk,GXe,OXe,VXe,sm,goe,XXe,zXe,uk,WXe,QXe,HXe,lm,hoe,UXe,JXe,_k,YXe,KXe,ZXe,im,poe,eze,oze,bk,rze,tze,aze,dm,uoe,nze,sze,vk,lze,ize,dze,cm,_oe,cze,fze,Fk,mze,gze,hze,fm,boe,pze,uze,Tk,_ze,bze,vze,mm,voe,Fze,Tze,Mk,Mze,Eze,Cze,gm,Foe,wze,Aze,Ek,yze,Lze,xze,hm,Toe,$ze,kze,Ck,Sze,Rze,Pze,pm,Moe,Bze,Ize,wk,qze,Nze,jze,um,Eoe,Dze,Gze,Ak,Oze,Vze,Xze,_m,Coe,zze,Wze,yk,Qze,Hze,Uze,bm,woe,Jze,Yze,Lk,Kze,Zze,eWe,vm,Aoe,oWe,rWe,xk,tWe,aWe,nWe,Fm,yoe,sWe,lWe,$k,iWe,dWe,cWe,Tm,Loe,fWe,mWe,kk,gWe,hWe,pWe,Mm,xoe,uWe,_We,Sk,bWe,vWe,FWe,Em,$oe,TWe,MWe,Rk,EWe,CWe,wWe,Cm,koe,AWe,yWe,Pk,LWe,xWe,$We,wm,Soe,kWe,SWe,Bk,RWe,PWe,BWe,Am,Roe,IWe,qWe,Ik,NWe,jWe,DWe,ym,Poe,GWe,OWe,qk,VWe,XWe,zWe,Lm,Boe,WWe,QWe,Nk,HWe,UWe,JWe,xm,Ioe,YWe,KWe,jk,ZWe,eQe,oQe,$m,qoe,rQe,tQe,Dk,aQe,nQe,sQe,km,Noe,lQe,iQe,Gk,dQe,cQe,fQe,Sm,joe,mQe,gQe,Ok,hQe,pQe,uQe,Rm,Doe,_Qe,bQe,Vk,vQe,FQe,TQe,Pm,Goe,MQe,EQe,Xk,CQe,wQe,AQe,Bm,Ooe,yQe,LQe,zk,xQe,$Qe,kQe,Im,Voe,SQe,RQe,Wk,PQe,BQe,IQe,qm,Xoe,qQe,NQe,Qk,jQe,DQe,GQe,Nm,zoe,OQe,VQe,Hk,XQe,zQe,WQe,jm,Woe,QQe,HQe,Uk,UQe,JQe,YQe,Dm,Qoe,KQe,ZQe,Jk,eHe,oHe,rHe,Gm,Hoe,tHe,aHe,Yk,nHe,sHe,lHe,Om,Uoe,iHe,dHe,Kk,cHe,fHe,mHe,Vm,Joe,gHe,hHe,Zk,pHe,uHe,_He,Xm,Yoe,bHe,vHe,eS,FHe,THe,MHe,zm,Koe,EHe,CHe,oS,wHe,AHe,yHe,Wm,Zoe,LHe,xHe,rS,$He,kHe,SHe,Qm,ere,RHe,PHe,tS,BHe,IHe,qHe,Hm,ore,NHe,jHe,aS,DHe,GHe,OHe,Um,rre,VHe,XHe,nS,zHe,WHe,QHe,Jm,tre,HHe,UHe,sS,JHe,YHe,KHe,Ym,are,ZHe,eUe,lS,oUe,rUe,tUe,Km,nre,aUe,nUe,iS,sUe,lUe,iUe,Zm,sre,dUe,cUe,dS,fUe,mUe,gUe,eg,lre,hUe,pUe,cS,uUe,_Ue,bUe,og,ire,vUe,FUe,fS,TUe,MUe,EUe,rg,dre,CUe,wUe,mS,AUe,yUe,LUe,tg,cre,xUe,$Ue,gS,kUe,SUe,RUe,ag,fre,PUe,BUe,hS,IUe,qUe,NUe,ng,mre,jUe,DUe,pS,GUe,OUe,VUe,sg,gre,XUe,zUe,uS,WUe,QUe,HUe,lg,hre,UUe,JUe,_S,YUe,KUe,ZUe,ig,pre,eJe,oJe,bS,rJe,tJe,aJe,dg,ure,nJe,sJe,vS,lJe,iJe,dJe,cg,_re,cJe,fJe,FS,mJe,gJe,hJe,fg,bre,pJe,uJe,TS,_Je,bJe,vJe,mg,vre,FJe,TJe,MS,MJe,EJe,CJe,gg,Fre,wJe,AJe,ES,yJe,LJe,xJe,hg,Tre,$Je,kJe,CS,SJe,RJe,PJe,pg,Mre,BJe,IJe,wS,qJe,NJe,jJe,ug,Ere,DJe,GJe,AS,OJe,VJe,XJe,_g,Cre,zJe,WJe,yS,QJe,HJe,UJe,bg,JJe,vg,h0,YJe,wre,KJe,SIe,Fi,Fg,Are,p0,ZJe,yre,eYe,RIe,wo,u0,oYe,_0,rYe,LS,tYe,aYe,nYe,b0,sYe,Lre,lYe,iYe,dYe,Cr,v0,cYe,xre,fYe,mYe,Aa,gYe,$re,hYe,pYe,kre,uYe,_Ye,Sre,bYe,vYe,FYe,k,Sn,Rre,TYe,MYe,xS,EYe,CYe,$S,wYe,AYe,yYe,Rn,Pre,LYe,xYe,kS,$Ye,kYe,SS,SYe,RYe,PYe,Pn,Bre,BYe,IYe,RS,qYe,NYe,PS,jYe,DYe,GYe,Tg,Ire,OYe,VYe,BS,XYe,zYe,WYe,Bn,qre,QYe,HYe,IS,UYe,JYe,qS,YYe,KYe,ZYe,Mg,Nre,eKe,oKe,NS,rKe,tKe,aKe,Eg,jre,nKe,sKe,jS,lKe,iKe,dKe,Cg,Dre,cKe,fKe,DS,mKe,gKe,hKe,In,Gre,pKe,uKe,GS,_Ke,bKe,OS,vKe,FKe,TKe,qn,Ore,MKe,EKe,VS,CKe,wKe,XS,AKe,yKe,LKe,Nn,Vre,xKe,$Ke,zS,kKe,SKe,WS,RKe,PKe,BKe,wg,Xre,IKe,qKe,QS,NKe,jKe,DKe,Ag,zre,GKe,OKe,HS,VKe,XKe,zKe,jn,Wre,WKe,QKe,US,HKe,UKe,JS,JKe,YKe,KKe,yg,Qre,ZKe,eZe,YS,oZe,rZe,tZe,Dn,Hre,aZe,nZe,KS,sZe,lZe,ZS,iZe,dZe,cZe,Gn,Ure,fZe,mZe,eR,gZe,hZe,oR,pZe,uZe,_Ze,On,Jre,bZe,vZe,rR,FZe,TZe,tR,MZe,EZe,CZe,Lg,Yre,wZe,AZe,aR,yZe,LZe,xZe,Vn,Kre,$Ze,kZe,nR,SZe,RZe,sR,PZe,BZe,IZe,Xn,Zre,qZe,NZe,lR,jZe,DZe,iR,GZe,OZe,VZe,zn,ete,XZe,zZe,dR,WZe,QZe,cR,HZe,UZe,JZe,Wn,ote,YZe,KZe,fR,ZZe,eeo,mR,oeo,reo,teo,Qn,rte,aeo,neo,gR,seo,leo,hR,ieo,deo,ceo,Hn,tte,feo,meo,pR,geo,heo,uR,peo,ueo,_eo,xg,ate,beo,veo,_R,Feo,Teo,Meo,Un,nte,Eeo,Ceo,bR,weo,Aeo,vR,yeo,Leo,xeo,$g,ste,$eo,keo,FR,Seo,Reo,Peo,Jn,lte,Beo,Ieo,TR,qeo,Neo,MR,jeo,Deo,Geo,Yn,ite,Oeo,Veo,ER,Xeo,zeo,CR,Weo,Qeo,Heo,Kn,dte,Ueo,Jeo,wR,Yeo,Keo,AR,Zeo,eoo,ooo,Zn,cte,roo,too,yR,aoo,noo,LR,soo,loo,ioo,es,fte,doo,coo,xR,foo,moo,$R,goo,hoo,poo,kg,mte,uoo,_oo,kR,boo,voo,Foo,os,gte,Too,Moo,SR,Eoo,Coo,RR,woo,Aoo,yoo,rs,hte,Loo,xoo,PR,$oo,koo,BR,Soo,Roo,Poo,ts,pte,Boo,Ioo,IR,qoo,Noo,qR,joo,Doo,Goo,as,ute,Ooo,Voo,NR,Xoo,zoo,jR,Woo,Qoo,Hoo,ns,_te,Uoo,Joo,DR,Yoo,Koo,GR,Zoo,ero,oro,ss,bte,rro,tro,OR,aro,nro,VR,sro,lro,iro,Sg,vte,dro,cro,XR,fro,mro,gro,ls,Fte,hro,pro,zR,uro,_ro,WR,bro,vro,Fro,Rg,Tte,Tro,Mro,QR,Ero,Cro,wro,Pg,Mte,Aro,yro,HR,Lro,xro,$ro,is,Ete,kro,Sro,UR,Rro,Pro,JR,Bro,Iro,qro,ds,Cte,Nro,jro,YR,Dro,Gro,KR,Oro,Vro,Xro,cs,wte,zro,Wro,ZR,Qro,Hro,eP,Uro,Jro,Yro,Bg,Ate,Kro,Zro,oP,eto,oto,rto,fs,yte,tto,ato,rP,nto,sto,tP,lto,ito,dto,ms,Lte,cto,fto,aP,mto,gto,nP,hto,pto,uto,gs,xte,_to,bto,sP,vto,Fto,lP,Tto,Mto,Eto,hs,$te,Cto,wto,iP,Ato,yto,dP,Lto,xto,$to,ps,kte,kto,Sto,cP,Rto,Pto,fP,Bto,Ito,qto,Ig,Ste,Nto,jto,mP,Dto,Gto,Oto,us,Rte,Vto,Xto,gP,zto,Wto,hP,Qto,Hto,Uto,qg,Pte,Jto,Yto,pP,Kto,Zto,eao,Ng,Bte,oao,rao,uP,tao,aao,nao,jg,Ite,sao,lao,_P,iao,dao,cao,Dg,qte,fao,mao,bP,gao,hao,pao,_s,Nte,uao,_ao,vP,bao,vao,FP,Fao,Tao,Mao,Gg,jte,Eao,Cao,TP,wao,Aao,yao,bs,Dte,Lao,xao,MP,$ao,kao,EP,Sao,Rao,Pao,vs,Gte,Bao,Iao,CP,qao,Nao,wP,jao,Dao,Gao,Fs,Ote,Oao,Vao,AP,Xao,zao,yP,Wao,Qao,Hao,Ts,Vte,Uao,Jao,LP,Yao,Kao,xP,Zao,eno,ono,Ms,Xte,rno,tno,$P,ano,nno,kP,sno,lno,ino,Es,zte,dno,cno,SP,fno,mno,RP,gno,hno,pno,Og,Wte,uno,_no,PP,bno,vno,Fno,Vg,Qte,Tno,Mno,BP,Eno,Cno,wno,Cs,Hte,Ano,yno,IP,Lno,xno,qP,$no,kno,Sno,ws,Ute,Rno,Pno,NP,Bno,Ino,jP,qno,Nno,jno,As,Jte,Dno,Gno,DP,Ono,Vno,GP,Xno,zno,Wno,Xg,Yte,Qno,Hno,OP,Uno,Jno,Yno,zg,Kte,Kno,Zno,VP,eso,oso,rso,Wg,Zte,tso,aso,XP,nso,sso,lso,ys,eae,iso,dso,zP,cso,fso,WP,mso,gso,hso,Qg,oae,pso,uso,QP,_so,bso,vso,Hg,rae,Fso,Tso,HP,Mso,Eso,Cso,Ug,tae,wso,Aso,UP,yso,Lso,xso,Ls,aae,$so,kso,JP,Sso,Rso,YP,Pso,Bso,Iso,Jg,nae,qso,Nso,KP,jso,Dso,Gso,Yg,sae,Oso,Vso,ZP,Xso,zso,Wso,xs,lae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,$s,iae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,ks,dae,llo,ilo,aB,dlo,clo,nB,flo,mlo,glo,Ss,cae,hlo,plo,sB,ulo,_lo,lB,blo,vlo,Flo,Kg,Tlo,Zg,F0,Mlo,fae,Elo,PIe,Ti,eh,mae,T0,Clo,gae,wlo,BIe,Ao,M0,Alo,E0,ylo,iB,Llo,xlo,$lo,C0,klo,hae,Slo,Rlo,Plo,He,w0,Blo,pae,Ilo,qlo,ya,Nlo,uae,jlo,Dlo,_ae,Glo,Olo,bae,Vlo,Xlo,zlo,Z,oh,vae,Wlo,Qlo,dB,Hlo,Ulo,Jlo,rh,Fae,Ylo,Klo,cB,Zlo,eio,oio,th,Tae,rio,tio,fB,aio,nio,sio,ah,Mae,lio,iio,mB,dio,cio,fio,nh,Eae,mio,gio,gB,hio,pio,uio,sh,Cae,_io,bio,hB,vio,Fio,Tio,lh,wae,Mio,Eio,pB,Cio,wio,Aio,ih,Aae,yio,Lio,uB,xio,$io,kio,dh,yae,Sio,Rio,_B,Pio,Bio,Iio,ch,Lae,qio,Nio,bB,jio,Dio,Gio,fh,xae,Oio,Vio,vB,Xio,zio,Wio,mh,$ae,Qio,Hio,FB,Uio,Jio,Yio,gh,kae,Kio,Zio,TB,edo,odo,rdo,hh,Sae,tdo,ado,MB,ndo,sdo,ldo,ph,Rae,ido,ddo,EB,cdo,fdo,mdo,uh,Pae,gdo,hdo,CB,pdo,udo,_do,_h,Bae,bdo,vdo,wB,Fdo,Tdo,Mdo,bh,Iae,Edo,Cdo,AB,wdo,Ado,ydo,vh,qae,Ldo,xdo,yB,$do,kdo,Sdo,Fh,Nae,Rdo,Pdo,LB,Bdo,Ido,qdo,Th,jae,Ndo,jdo,xB,Ddo,Gdo,Odo,Mh,Dae,Vdo,Xdo,$B,zdo,Wdo,Qdo,Eh,Gae,Hdo,Udo,kB,Jdo,Ydo,Kdo,Ch,Oae,Zdo,eco,SB,oco,rco,tco,wh,Vae,aco,nco,RB,sco,lco,ico,Ah,Xae,dco,cco,PB,fco,mco,gco,yh,hco,Lh,pco,xh,A0,uco,zae,_co,IIe,Mi,$h,Wae,y0,bco,Qae,vco,qIe,yo,L0,Fco,x0,Tco,BB,Mco,Eco,Cco,$0,wco,Hae,Aco,yco,Lco,Ue,k0,xco,Uae,$co,kco,Ei,Sco,Jae,Rco,Pco,Yae,Bco,Ico,qco,pe,kh,Kae,Nco,jco,IB,Dco,Gco,Oco,Sh,Zae,Vco,Xco,ene,zco,Wco,Qco,Rh,one,Hco,Uco,qB,Jco,Yco,Kco,Ph,rne,Zco,efo,NB,ofo,rfo,tfo,Bh,tne,afo,nfo,jB,sfo,lfo,ifo,Ih,ane,dfo,cfo,DB,ffo,mfo,gfo,qh,nne,hfo,pfo,GB,ufo,_fo,bfo,Nh,sne,vfo,Ffo,OB,Tfo,Mfo,Efo,jh,lne,Cfo,wfo,VB,Afo,yfo,Lfo,Dh,ine,xfo,$fo,XB,kfo,Sfo,Rfo,Gh,dne,Pfo,Bfo,zB,Ifo,qfo,Nfo,Oh,cne,jfo,Dfo,WB,Gfo,Ofo,Vfo,Vh,fne,Xfo,zfo,QB,Wfo,Qfo,Hfo,Xh,mne,Ufo,Jfo,HB,Yfo,Kfo,Zfo,zh,gne,emo,omo,UB,rmo,tmo,amo,Wh,hne,nmo,smo,JB,lmo,imo,dmo,Qh,cmo,Hh,fmo,Uh,S0,mmo,pne,gmo,NIe,Ci,Jh,une,R0,hmo,_ne,pmo,jIe,Lo,P0,umo,wi,_mo,YB,bmo,vmo,KB,Fmo,Tmo,Mmo,B0,Emo,bne,Cmo,wmo,Amo,tt,I0,ymo,vne,Lmo,xmo,Ai,$mo,Fne,kmo,Smo,ZB,Rmo,Pmo,Bmo,Yh,Imo,Je,q0,qmo,Tne,Nmo,jmo,La,Dmo,Mne,Gmo,Omo,Ene,Vmo,Xmo,Cne,zmo,Wmo,Qmo,x,Kh,wne,Hmo,Umo,eI,Jmo,Ymo,Kmo,Zh,Ane,Zmo,ego,oI,ogo,rgo,tgo,ep,yne,ago,ngo,rI,sgo,lgo,igo,op,Lne,dgo,cgo,tI,fgo,mgo,ggo,rp,xne,hgo,pgo,aI,ugo,_go,bgo,tp,$ne,vgo,Fgo,nI,Tgo,Mgo,Ego,ap,kne,Cgo,wgo,sI,Ago,ygo,Lgo,np,Sne,xgo,$go,lI,kgo,Sgo,Rgo,sp,Rne,Pgo,Bgo,iI,Igo,qgo,Ngo,lp,Pne,jgo,Dgo,dI,Ggo,Ogo,Vgo,ip,Bne,Xgo,zgo,cI,Wgo,Qgo,Hgo,dp,Ine,Ugo,Jgo,fI,Ygo,Kgo,Zgo,cp,qne,eho,oho,mI,rho,tho,aho,fp,Nne,nho,sho,gI,lho,iho,dho,mp,jne,cho,fho,hI,mho,gho,hho,gp,Dne,pho,uho,pI,_ho,bho,vho,hp,Gne,Fho,Tho,uI,Mho,Eho,Cho,pp,One,who,Aho,_I,yho,Lho,xho,up,Vne,$ho,kho,bI,Sho,Rho,Pho,_p,Xne,Bho,Iho,vI,qho,Nho,jho,bp,zne,Dho,Gho,FI,Oho,Vho,Xho,vp,Wne,zho,Who,TI,Qho,Hho,Uho,Fp,Qne,Jho,Yho,MI,Kho,Zho,epo,Tp,Hne,opo,rpo,EI,tpo,apo,npo,Mp,Une,spo,lpo,CI,ipo,dpo,cpo,Ep,Jne,fpo,mpo,wI,gpo,hpo,ppo,Cp,Yne,upo,_po,AI,bpo,vpo,Fpo,wp,Kne,Tpo,Mpo,yI,Epo,Cpo,wpo,Ap,Zne,Apo,ypo,LI,Lpo,xpo,$po,yp,ese,kpo,Spo,xI,Rpo,Ppo,Bpo,Lp,ose,Ipo,qpo,$I,Npo,jpo,Dpo,Rs,rse,Gpo,Opo,kI,Vpo,Xpo,SI,zpo,Wpo,Qpo,xp,tse,Hpo,Upo,RI,Jpo,Ypo,Kpo,$p,ase,Zpo,euo,PI,ouo,ruo,tuo,kp,nse,auo,nuo,BI,suo,luo,iuo,Sp,sse,duo,cuo,II,fuo,muo,guo,Rp,lse,huo,puo,qI,uuo,_uo,buo,Pp,ise,vuo,Fuo,NI,Tuo,Muo,Euo,Bp,dse,Cuo,wuo,jI,Auo,yuo,Luo,Ip,cse,xuo,$uo,DI,kuo,Suo,Ruo,qp,fse,Puo,Buo,GI,Iuo,quo,Nuo,Np,mse,juo,Duo,OI,Guo,Ouo,Vuo,jp,gse,Xuo,zuo,VI,Wuo,Quo,Huo,Dp,hse,Uuo,Juo,XI,Yuo,Kuo,Zuo,Gp,pse,e_o,o_o,zI,r_o,t_o,a_o,Op,use,n_o,s_o,WI,l_o,i_o,d_o,Vp,_se,c_o,f_o,QI,m_o,g_o,h_o,Xp,bse,p_o,u_o,HI,__o,b_o,v_o,zp,vse,F_o,T_o,UI,M_o,E_o,C_o,Wp,Fse,w_o,A_o,JI,y_o,L_o,x_o,Qp,Tse,$_o,k_o,YI,S_o,R_o,P_o,Hp,Mse,B_o,I_o,KI,q_o,N_o,j_o,Up,Ese,D_o,G_o,ZI,O_o,V_o,X_o,Jp,Cse,z_o,W_o,eq,Q_o,H_o,U_o,Yp,wse,J_o,Y_o,oq,K_o,Z_o,e2o,Kp,Ase,o2o,r2o,rq,t2o,a2o,n2o,Zp,yse,s2o,l2o,tq,i2o,d2o,c2o,eu,Lse,f2o,m2o,aq,g2o,h2o,p2o,ou,xse,u2o,_2o,nq,b2o,v2o,F2o,ru,$se,T2o,M2o,sq,E2o,C2o,w2o,tu,kse,A2o,y2o,lq,L2o,x2o,$2o,au,Sse,k2o,S2o,iq,R2o,P2o,B2o,nu,Rse,I2o,q2o,dq,N2o,j2o,D2o,su,Pse,G2o,O2o,cq,V2o,X2o,z2o,lu,Bse,W2o,Q2o,fq,H2o,U2o,J2o,iu,Ise,Y2o,K2o,mq,Z2o,e1o,o1o,du,qse,r1o,t1o,gq,a1o,n1o,s1o,cu,Nse,l1o,i1o,hq,d1o,c1o,f1o,fu,jse,m1o,g1o,pq,h1o,p1o,u1o,mu,Dse,_1o,b1o,uq,v1o,F1o,T1o,gu,Gse,M1o,E1o,_q,C1o,w1o,A1o,hu,Ose,y1o,L1o,bq,x1o,$1o,k1o,pu,Vse,S1o,R1o,vq,P1o,B1o,I1o,uu,Xse,q1o,N1o,Fq,j1o,D1o,G1o,_u,zse,O1o,V1o,Tq,X1o,z1o,W1o,bu,Wse,Q1o,H1o,Mq,U1o,J1o,Y1o,vu,Qse,K1o,Z1o,Eq,e7o,o7o,r7o,Fu,Hse,t7o,a7o,Cq,n7o,s7o,l7o,Tu,Use,i7o,d7o,wq,c7o,f7o,m7o,Mu,Jse,g7o,h7o,Aq,p7o,u7o,_7o,Eu,Yse,b7o,v7o,yq,F7o,T7o,M7o,Cu,Kse,E7o,C7o,Lq,w7o,A7o,y7o,wu,Zse,L7o,x7o,xq,$7o,k7o,S7o,Au,ele,R7o,P7o,$q,B7o,I7o,q7o,yu,ole,N7o,j7o,kq,D7o,G7o,O7o,Lu,rle,V7o,X7o,Sq,z7o,W7o,Q7o,xu,tle,H7o,U7o,Rq,J7o,Y7o,K7o,$u,ale,Z7o,ebo,Pq,obo,rbo,tbo,ku,nle,abo,nbo,Bq,sbo,lbo,ibo,Su,sle,dbo,cbo,Iq,fbo,mbo,gbo,Ru,lle,hbo,pbo,qq,ubo,_bo,bbo,Pu,ile,vbo,Fbo,Nq,Tbo,Mbo,Ebo,Bu,dle,Cbo,wbo,jq,Abo,ybo,Lbo,Iu,cle,xbo,$bo,Dq,kbo,Sbo,Rbo,qu,fle,Pbo,Bbo,Gq,Ibo,qbo,Nbo,Nu,mle,jbo,Dbo,Oq,Gbo,Obo,Vbo,ju,gle,Xbo,zbo,Vq,Wbo,Qbo,Hbo,Du,hle,Ubo,Jbo,Xq,Ybo,Kbo,Zbo,Gu,e5o,ple,o5o,r5o,ule,t5o,a5o,Ou,DIe,yi,Vu,_le,N0,n5o,ble,s5o,GIe,xo,j0,l5o,Li,i5o,zq,d5o,c5o,Wq,f5o,m5o,g5o,D0,h5o,vle,p5o,u5o,_5o,at,G0,b5o,Fle,v5o,F5o,xi,T5o,Tle,M5o,E5o,Qq,C5o,w5o,A5o,Xu,y5o,Ye,O0,L5o,Mle,x5o,$5o,xa,k5o,Ele,S5o,R5o,Cle,P5o,B5o,wle,I5o,q5o,N5o,G,zu,Ale,j5o,D5o,Hq,G5o,O5o,V5o,Wu,yle,X5o,z5o,Uq,W5o,Q5o,H5o,Qu,Lle,U5o,J5o,Jq,Y5o,K5o,Z5o,Hu,xle,evo,ovo,Yq,rvo,tvo,avo,Uu,$le,nvo,svo,Kq,lvo,ivo,dvo,Ju,kle,cvo,fvo,Zq,mvo,gvo,hvo,Yu,Sle,pvo,uvo,eN,_vo,bvo,vvo,Ku,Rle,Fvo,Tvo,oN,Mvo,Evo,Cvo,Zu,Ple,wvo,Avo,rN,yvo,Lvo,xvo,e_,Ble,$vo,kvo,tN,Svo,Rvo,Pvo,o_,Ile,Bvo,Ivo,aN,qvo,Nvo,jvo,r_,qle,Dvo,Gvo,nN,Ovo,Vvo,Xvo,t_,Nle,zvo,Wvo,sN,Qvo,Hvo,Uvo,a_,jle,Jvo,Yvo,lN,Kvo,Zvo,eFo,n_,Dle,oFo,rFo,iN,tFo,aFo,nFo,s_,Gle,sFo,lFo,dN,iFo,dFo,cFo,l_,Ole,fFo,mFo,cN,gFo,hFo,pFo,i_,Vle,uFo,_Fo,fN,bFo,vFo,FFo,d_,Xle,TFo,MFo,mN,EFo,CFo,wFo,c_,zle,AFo,yFo,gN,LFo,xFo,$Fo,f_,Wle,kFo,SFo,hN,RFo,PFo,BFo,m_,Qle,IFo,qFo,pN,NFo,jFo,DFo,g_,Hle,GFo,OFo,uN,VFo,XFo,zFo,h_,Ule,WFo,QFo,_N,HFo,UFo,JFo,p_,Jle,YFo,KFo,bN,ZFo,eTo,oTo,u_,Yle,rTo,tTo,vN,aTo,nTo,sTo,__,Kle,lTo,iTo,FN,dTo,cTo,fTo,b_,Zle,mTo,gTo,TN,hTo,pTo,uTo,v_,eie,_To,bTo,MN,vTo,FTo,TTo,F_,oie,MTo,ETo,EN,CTo,wTo,ATo,T_,rie,yTo,LTo,CN,xTo,$To,kTo,M_,tie,STo,RTo,wN,PTo,BTo,ITo,E_,aie,qTo,NTo,AN,jTo,DTo,GTo,C_,nie,OTo,VTo,yN,XTo,zTo,WTo,w_,sie,QTo,HTo,LN,UTo,JTo,YTo,A_,lie,KTo,ZTo,xN,eMo,oMo,rMo,y_,iie,tMo,aMo,$N,nMo,sMo,lMo,L_,die,iMo,dMo,kN,cMo,fMo,mMo,x_,cie,gMo,hMo,SN,pMo,uMo,_Mo,$_,fie,bMo,vMo,RN,FMo,TMo,MMo,k_,mie,EMo,CMo,PN,wMo,AMo,yMo,S_,LMo,gie,xMo,$Mo,hie,kMo,SMo,R_,OIe,$i,P_,pie,V0,RMo,uie,PMo,VIe,$o,X0,BMo,ki,IMo,BN,qMo,NMo,IN,jMo,DMo,GMo,z0,OMo,_ie,VMo,XMo,zMo,nt,W0,WMo,bie,QMo,HMo,Si,UMo,vie,JMo,YMo,qN,KMo,ZMo,e4o,B_,o4o,Ke,Q0,r4o,Fie,t4o,a4o,$a,n4o,Tie,s4o,l4o,Mie,i4o,d4o,Eie,c4o,f4o,m4o,z,I_,Cie,g4o,h4o,NN,p4o,u4o,_4o,q_,wie,b4o,v4o,jN,F4o,T4o,M4o,N_,Aie,E4o,C4o,DN,w4o,A4o,y4o,j_,yie,L4o,x4o,GN,$4o,k4o,S4o,D_,Lie,R4o,P4o,ON,B4o,I4o,q4o,G_,xie,N4o,j4o,VN,D4o,G4o,O4o,O_,$ie,V4o,X4o,XN,z4o,W4o,Q4o,V_,kie,H4o,U4o,zN,J4o,Y4o,K4o,X_,Sie,Z4o,eEo,WN,oEo,rEo,tEo,z_,Rie,aEo,nEo,QN,sEo,lEo,iEo,W_,Pie,dEo,cEo,HN,fEo,mEo,gEo,Q_,Bie,hEo,pEo,UN,uEo,_Eo,bEo,H_,Iie,vEo,FEo,JN,TEo,MEo,EEo,U_,qie,CEo,wEo,YN,AEo,yEo,LEo,J_,Nie,xEo,$Eo,KN,kEo,SEo,REo,Y_,jie,PEo,BEo,ZN,IEo,qEo,NEo,K_,Die,jEo,DEo,ej,GEo,OEo,VEo,Z_,Gie,XEo,zEo,oj,WEo,QEo,HEo,e2,Oie,UEo,JEo,rj,YEo,KEo,ZEo,o2,Vie,eCo,oCo,tj,rCo,tCo,aCo,r2,Xie,nCo,sCo,aj,lCo,iCo,dCo,t2,zie,cCo,fCo,nj,mCo,gCo,hCo,a2,Wie,pCo,uCo,sj,_Co,bCo,vCo,n2,Qie,FCo,TCo,lj,MCo,ECo,CCo,s2,Hie,wCo,ACo,ij,yCo,LCo,xCo,l2,Uie,$Co,kCo,dj,SCo,RCo,PCo,i2,Jie,BCo,ICo,cj,qCo,NCo,jCo,d2,Yie,DCo,GCo,fj,OCo,VCo,XCo,c2,Kie,zCo,WCo,mj,QCo,HCo,UCo,f2,Zie,JCo,YCo,gj,KCo,ZCo,e3o,m2,ede,o3o,r3o,hj,t3o,a3o,n3o,g2,ode,s3o,l3o,pj,i3o,d3o,c3o,h2,rde,f3o,m3o,uj,g3o,h3o,p3o,p2,tde,u3o,_3o,_j,b3o,v3o,F3o,u2,ade,T3o,M3o,bj,E3o,C3o,w3o,_2,nde,A3o,y3o,vj,L3o,x3o,$3o,b2,k3o,sde,S3o,R3o,lde,P3o,B3o,v2,XIe,Ri,F2,ide,H0,I3o,dde,q3o,zIe,ko,U0,N3o,Pi,j3o,Fj,D3o,G3o,Tj,O3o,V3o,X3o,J0,z3o,cde,W3o,Q3o,H3o,st,Y0,U3o,fde,J3o,Y3o,Bi,K3o,mde,Z3o,ewo,Mj,owo,rwo,two,T2,awo,Ze,K0,nwo,gde,swo,lwo,ka,iwo,hde,dwo,cwo,pde,fwo,mwo,ude,gwo,hwo,pwo,W,M2,_de,uwo,_wo,Ej,bwo,vwo,Fwo,E2,bde,Two,Mwo,Cj,Ewo,Cwo,wwo,C2,vde,Awo,ywo,wj,Lwo,xwo,$wo,w2,Fde,kwo,Swo,Aj,Rwo,Pwo,Bwo,A2,Tde,Iwo,qwo,yj,Nwo,jwo,Dwo,y2,Mde,Gwo,Owo,Lj,Vwo,Xwo,zwo,L2,Ede,Wwo,Qwo,xj,Hwo,Uwo,Jwo,x2,Cde,Ywo,Kwo,$j,Zwo,eAo,oAo,$2,wde,rAo,tAo,kj,aAo,nAo,sAo,k2,Ade,lAo,iAo,Sj,dAo,cAo,fAo,S2,yde,mAo,gAo,Rj,hAo,pAo,uAo,R2,Lde,_Ao,bAo,Pj,vAo,FAo,TAo,P2,xde,MAo,EAo,Bj,CAo,wAo,AAo,B2,$de,yAo,LAo,Ij,xAo,$Ao,kAo,I2,kde,SAo,RAo,qj,PAo,BAo,IAo,q2,Sde,qAo,NAo,Nj,jAo,DAo,GAo,N2,Rde,OAo,VAo,jj,XAo,zAo,WAo,j2,Pde,QAo,HAo,Dj,UAo,JAo,YAo,D2,Bde,KAo,ZAo,Gj,e6o,o6o,r6o,G2,Ide,t6o,a6o,Oj,n6o,s6o,l6o,O2,qde,i6o,d6o,Vj,c6o,f6o,m6o,V2,Nde,g6o,h6o,Xj,p6o,u6o,_6o,X2,jde,b6o,v6o,zj,F6o,T6o,M6o,z2,Dde,E6o,C6o,Wj,w6o,A6o,y6o,W2,Gde,L6o,x6o,Qj,$6o,k6o,S6o,Q2,Ode,R6o,P6o,Hj,B6o,I6o,q6o,H2,Vde,N6o,j6o,Uj,D6o,G6o,O6o,U2,Xde,V6o,X6o,Jj,z6o,W6o,Q6o,J2,zde,H6o,U6o,Yj,J6o,Y6o,K6o,Y2,Wde,Z6o,e0o,Kj,o0o,r0o,t0o,K2,Qde,a0o,n0o,Hde,s0o,l0o,i0o,Z2,Ude,d0o,c0o,Zj,f0o,m0o,g0o,e1,Jde,h0o,p0o,eD,u0o,_0o,b0o,o1,Yde,v0o,F0o,oD,T0o,M0o,E0o,r1,Kde,C0o,w0o,rD,A0o,y0o,L0o,t1,x0o,Zde,$0o,k0o,ece,S0o,R0o,a1,WIe,Ii,n1,oce,Z0,P0o,rce,B0o,QIe,So,ey,I0o,qi,q0o,tD,N0o,j0o,aD,D0o,G0o,O0o,oy,V0o,tce,X0o,z0o,W0o,lt,ry,Q0o,ace,H0o,U0o,Ni,J0o,nce,Y0o,K0o,nD,Z0o,eyo,oyo,s1,ryo,eo,ty,tyo,sce,ayo,nyo,Sa,syo,lce,lyo,iyo,ice,dyo,cyo,dce,fyo,myo,gyo,ue,l1,cce,hyo,pyo,sD,uyo,_yo,byo,i1,fce,vyo,Fyo,lD,Tyo,Myo,Eyo,d1,mce,Cyo,wyo,iD,Ayo,yyo,Lyo,c1,gce,xyo,$yo,dD,kyo,Syo,Ryo,f1,hce,Pyo,Byo,cD,Iyo,qyo,Nyo,m1,pce,jyo,Dyo,fD,Gyo,Oyo,Vyo,g1,uce,Xyo,zyo,mD,Wyo,Qyo,Hyo,h1,_ce,Uyo,Jyo,gD,Yyo,Kyo,Zyo,p1,bce,eLo,oLo,hD,rLo,tLo,aLo,u1,vce,nLo,sLo,pD,lLo,iLo,dLo,_1,Fce,cLo,fLo,uD,mLo,gLo,hLo,b1,Tce,pLo,uLo,_D,_Lo,bLo,vLo,v1,Mce,FLo,TLo,bD,MLo,ELo,CLo,F1,Ece,wLo,ALo,vD,yLo,LLo,xLo,T1,Cce,$Lo,kLo,FD,SLo,RLo,PLo,M1,wce,BLo,ILo,TD,qLo,NLo,jLo,E1,DLo,Ace,GLo,OLo,yce,VLo,XLo,C1,HIe,ji,w1,Lce,ay,zLo,xce,WLo,UIe,Ro,ny,QLo,Di,HLo,MD,ULo,JLo,ED,YLo,KLo,ZLo,sy,e8o,$ce,o8o,r8o,t8o,it,ly,a8o,kce,n8o,s8o,Gi,l8o,Sce,i8o,d8o,CD,c8o,f8o,m8o,A1,g8o,oo,iy,h8o,Rce,p8o,u8o,Ra,_8o,Pce,b8o,v8o,Bce,F8o,T8o,Ice,M8o,E8o,C8o,q,y1,qce,w8o,A8o,wD,y8o,L8o,x8o,L1,Nce,$8o,k8o,AD,S8o,R8o,P8o,x1,jce,B8o,I8o,yD,q8o,N8o,j8o,$1,Dce,D8o,G8o,LD,O8o,V8o,X8o,k1,Gce,z8o,W8o,xD,Q8o,H8o,U8o,S1,Oce,J8o,Y8o,$D,K8o,Z8o,exo,R1,Vce,oxo,rxo,kD,txo,axo,nxo,P1,Xce,sxo,lxo,SD,ixo,dxo,cxo,B1,zce,fxo,mxo,RD,gxo,hxo,pxo,I1,Wce,uxo,_xo,PD,bxo,vxo,Fxo,q1,Qce,Txo,Mxo,BD,Exo,Cxo,wxo,N1,Hce,Axo,yxo,ID,Lxo,xxo,$xo,j1,Uce,kxo,Sxo,qD,Rxo,Pxo,Bxo,D1,Jce,Ixo,qxo,ND,Nxo,jxo,Dxo,G1,Yce,Gxo,Oxo,jD,Vxo,Xxo,zxo,O1,Kce,Wxo,Qxo,DD,Hxo,Uxo,Jxo,V1,Zce,Yxo,Kxo,GD,Zxo,e9o,o9o,X1,efe,r9o,t9o,OD,a9o,n9o,s9o,z1,ofe,l9o,i9o,VD,d9o,c9o,f9o,W1,rfe,m9o,g9o,XD,h9o,p9o,u9o,Q1,tfe,_9o,b9o,zD,v9o,F9o,T9o,H1,afe,M9o,E9o,WD,C9o,w9o,A9o,U1,nfe,y9o,L9o,QD,x9o,$9o,k9o,J1,sfe,S9o,R9o,HD,P9o,B9o,I9o,Y1,lfe,q9o,N9o,UD,j9o,D9o,G9o,K1,ife,O9o,V9o,JD,X9o,z9o,W9o,Z1,dfe,Q9o,H9o,YD,U9o,J9o,Y9o,e7,cfe,K9o,Z9o,KD,e$o,o$o,r$o,o7,ffe,t$o,a$o,ZD,n$o,s$o,l$o,r7,mfe,i$o,d$o,eG,c$o,f$o,m$o,t7,gfe,g$o,h$o,oG,p$o,u$o,_$o,a7,hfe,b$o,v$o,rG,F$o,T$o,M$o,n7,pfe,E$o,C$o,tG,w$o,A$o,y$o,s7,ufe,L$o,x$o,aG,$$o,k$o,S$o,l7,_fe,R$o,P$o,nG,B$o,I$o,q$o,i7,bfe,N$o,j$o,sG,D$o,G$o,O$o,d7,vfe,V$o,X$o,lG,z$o,W$o,Q$o,c7,Ffe,H$o,U$o,iG,J$o,Y$o,K$o,f7,Tfe,Z$o,eko,dG,oko,rko,tko,m7,Mfe,ako,nko,cG,sko,lko,iko,g7,Efe,dko,cko,fG,fko,mko,gko,h7,Cfe,hko,pko,mG,uko,_ko,bko,p7,wfe,vko,Fko,gG,Tko,Mko,Eko,u7,Afe,Cko,wko,hG,Ako,yko,Lko,_7,yfe,xko,$ko,pG,kko,Sko,Rko,b7,Lfe,Pko,Bko,uG,Iko,qko,Nko,v7,jko,xfe,Dko,Gko,$fe,Oko,Vko,F7,JIe,Oi,T7,kfe,dy,Xko,Sfe,zko,YIe,Po,cy,Wko,Vi,Qko,_G,Hko,Uko,bG,Jko,Yko,Kko,fy,Zko,Rfe,eSo,oSo,rSo,dt,my,tSo,Pfe,aSo,nSo,Xi,sSo,Bfe,lSo,iSo,vG,dSo,cSo,fSo,M7,mSo,ro,gy,gSo,Ife,hSo,pSo,Pa,uSo,qfe,_So,bSo,Nfe,vSo,FSo,jfe,TSo,MSo,ESo,Y,E7,Dfe,CSo,wSo,FG,ASo,ySo,LSo,C7,Gfe,xSo,$So,TG,kSo,SSo,RSo,w7,Ofe,PSo,BSo,MG,ISo,qSo,NSo,A7,Vfe,jSo,DSo,EG,GSo,OSo,VSo,y7,Xfe,XSo,zSo,CG,WSo,QSo,HSo,L7,zfe,USo,JSo,wG,YSo,KSo,ZSo,x7,Wfe,eRo,oRo,AG,rRo,tRo,aRo,$7,Qfe,nRo,sRo,yG,lRo,iRo,dRo,k7,Hfe,cRo,fRo,LG,mRo,gRo,hRo,S7,Ufe,pRo,uRo,xG,_Ro,bRo,vRo,R7,Jfe,FRo,TRo,$G,MRo,ERo,CRo,P7,Yfe,wRo,ARo,kG,yRo,LRo,xRo,B7,Kfe,$Ro,kRo,SG,SRo,RRo,PRo,I7,Zfe,BRo,IRo,RG,qRo,NRo,jRo,q7,eme,DRo,GRo,PG,ORo,VRo,XRo,N7,ome,zRo,WRo,BG,QRo,HRo,URo,j7,rme,JRo,YRo,IG,KRo,ZRo,ePo,D7,tme,oPo,rPo,qG,tPo,aPo,nPo,G7,ame,sPo,lPo,NG,iPo,dPo,cPo,O7,nme,fPo,mPo,jG,gPo,hPo,pPo,V7,sme,uPo,_Po,DG,bPo,vPo,FPo,X7,lme,TPo,MPo,GG,EPo,CPo,wPo,z7,ime,APo,yPo,OG,LPo,xPo,$Po,W7,dme,kPo,SPo,VG,RPo,PPo,BPo,Q7,cme,IPo,qPo,XG,NPo,jPo,DPo,H7,fme,GPo,OPo,zG,VPo,XPo,zPo,U7,mme,WPo,QPo,WG,HPo,UPo,JPo,J7,gme,YPo,KPo,QG,ZPo,eBo,oBo,Y7,hme,rBo,tBo,HG,aBo,nBo,sBo,K7,lBo,pme,iBo,dBo,ume,cBo,fBo,Z7,KIe,zi,eb,_me,hy,mBo,bme,gBo,ZIe,Bo,py,hBo,Wi,pBo,UG,uBo,_Bo,JG,bBo,vBo,FBo,uy,TBo,vme,MBo,EBo,CBo,ct,_y,wBo,Fme,ABo,yBo,Qi,LBo,Tme,xBo,$Bo,YG,kBo,SBo,RBo,ob,PBo,to,by,BBo,Mme,IBo,qBo,Ba,NBo,Eme,jBo,DBo,Cme,GBo,OBo,wme,VBo,XBo,zBo,Yr,rb,Ame,WBo,QBo,KG,HBo,UBo,JBo,tb,yme,YBo,KBo,ZG,ZBo,eIo,oIo,ab,Lme,rIo,tIo,eO,aIo,nIo,sIo,nb,xme,lIo,iIo,oO,dIo,cIo,fIo,sb,$me,mIo,gIo,rO,hIo,pIo,uIo,lb,_Io,kme,bIo,vIo,Sme,FIo,TIo,ib,eqe,Hi,db,Rme,vy,MIo,Pme,EIo,oqe,Io,Fy,CIo,Ui,wIo,tO,AIo,yIo,aO,LIo,xIo,$Io,Ty,kIo,Bme,SIo,RIo,PIo,ft,My,BIo,Ime,IIo,qIo,Ji,NIo,qme,jIo,DIo,nO,GIo,OIo,VIo,cb,XIo,ao,Ey,zIo,Nme,WIo,QIo,Ia,HIo,jme,UIo,JIo,Dme,YIo,KIo,Gme,ZIo,eqo,oqo,U,fb,Ome,rqo,tqo,sO,aqo,nqo,sqo,mb,Vme,lqo,iqo,lO,dqo,cqo,fqo,gb,Xme,mqo,gqo,iO,hqo,pqo,uqo,hb,zme,_qo,bqo,dO,vqo,Fqo,Tqo,pb,Wme,Mqo,Eqo,cO,Cqo,wqo,Aqo,ub,Qme,yqo,Lqo,fO,xqo,$qo,kqo,_b,Hme,Sqo,Rqo,mO,Pqo,Bqo,Iqo,bb,Ume,qqo,Nqo,gO,jqo,Dqo,Gqo,vb,Jme,Oqo,Vqo,hO,Xqo,zqo,Wqo,Fb,Yme,Qqo,Hqo,pO,Uqo,Jqo,Yqo,Tb,Kme,Kqo,Zqo,uO,eNo,oNo,rNo,Mb,Zme,tNo,aNo,_O,nNo,sNo,lNo,Eb,ege,iNo,dNo,bO,cNo,fNo,mNo,Cb,oge,gNo,hNo,vO,pNo,uNo,_No,wb,rge,bNo,vNo,FO,FNo,TNo,MNo,Ab,tge,ENo,CNo,TO,wNo,ANo,yNo,yb,age,LNo,xNo,MO,$No,kNo,SNo,Lb,nge,RNo,PNo,EO,BNo,INo,qNo,xb,sge,NNo,jNo,CO,DNo,GNo,ONo,$b,lge,VNo,XNo,wO,zNo,WNo,QNo,kb,ige,HNo,UNo,AO,JNo,YNo,KNo,Sb,dge,ZNo,ejo,yO,ojo,rjo,tjo,Rb,cge,ajo,njo,LO,sjo,ljo,ijo,Pb,fge,djo,cjo,xO,fjo,mjo,gjo,Bb,mge,hjo,pjo,$O,ujo,_jo,bjo,Ib,gge,vjo,Fjo,kO,Tjo,Mjo,Ejo,qb,hge,Cjo,wjo,SO,Ajo,yjo,Ljo,Nb,pge,xjo,$jo,RO,kjo,Sjo,Rjo,jb,uge,Pjo,Bjo,PO,Ijo,qjo,Njo,Db,_ge,jjo,Djo,BO,Gjo,Ojo,Vjo,Gb,bge,Xjo,zjo,IO,Wjo,Qjo,Hjo,Ob,vge,Ujo,Jjo,qO,Yjo,Kjo,Zjo,Vb,Fge,eDo,oDo,NO,rDo,tDo,aDo,Xb,nDo,Tge,sDo,lDo,Mge,iDo,dDo,zb,rqe,Yi,Wb,Ege,Cy,cDo,Cge,fDo,tqe,qo,wy,mDo,Ki,gDo,jO,hDo,pDo,DO,uDo,_Do,bDo,Ay,vDo,wge,FDo,TDo,MDo,mt,yy,EDo,Age,CDo,wDo,Zi,ADo,yge,yDo,LDo,GO,xDo,$Do,kDo,Qb,SDo,no,Ly,RDo,Lge,PDo,BDo,qa,IDo,xge,qDo,NDo,$ge,jDo,DDo,kge,GDo,ODo,VDo,V,Hb,Sge,XDo,zDo,OO,WDo,QDo,HDo,Ub,Rge,UDo,JDo,VO,YDo,KDo,ZDo,Jb,Pge,eGo,oGo,XO,rGo,tGo,aGo,Yb,Bge,nGo,sGo,zO,lGo,iGo,dGo,Kb,Ige,cGo,fGo,WO,mGo,gGo,hGo,Zb,qge,pGo,uGo,QO,_Go,bGo,vGo,e5,Nge,FGo,TGo,HO,MGo,EGo,CGo,o5,jge,wGo,AGo,UO,yGo,LGo,xGo,r5,Dge,$Go,kGo,JO,SGo,RGo,PGo,t5,Gge,BGo,IGo,YO,qGo,NGo,jGo,a5,Oge,DGo,GGo,KO,OGo,VGo,XGo,n5,Vge,zGo,WGo,ZO,QGo,HGo,UGo,s5,Xge,JGo,YGo,eV,KGo,ZGo,eOo,l5,zge,oOo,rOo,oV,tOo,aOo,nOo,i5,Wge,sOo,lOo,rV,iOo,dOo,cOo,d5,Qge,fOo,mOo,tV,gOo,hOo,pOo,c5,Hge,uOo,_Oo,aV,bOo,vOo,FOo,f5,Uge,TOo,MOo,nV,EOo,COo,wOo,m5,Jge,AOo,yOo,sV,LOo,xOo,$Oo,g5,Yge,kOo,SOo,lV,ROo,POo,BOo,h5,Kge,IOo,qOo,iV,NOo,jOo,DOo,p5,Zge,GOo,OOo,dV,VOo,XOo,zOo,u5,ehe,WOo,QOo,cV,HOo,UOo,JOo,_5,ohe,YOo,KOo,fV,ZOo,eVo,oVo,b5,rhe,rVo,tVo,mV,aVo,nVo,sVo,v5,the,lVo,iVo,gV,dVo,cVo,fVo,F5,ahe,mVo,gVo,hV,hVo,pVo,uVo,T5,nhe,_Vo,bVo,pV,vVo,FVo,TVo,M5,she,MVo,EVo,uV,CVo,wVo,AVo,E5,lhe,yVo,LVo,_V,xVo,$Vo,kVo,C5,ihe,SVo,RVo,bV,PVo,BVo,IVo,w5,dhe,qVo,NVo,vV,jVo,DVo,GVo,A5,che,OVo,VVo,FV,XVo,zVo,WVo,y5,fhe,QVo,HVo,TV,UVo,JVo,YVo,L5,mhe,KVo,ZVo,MV,eXo,oXo,rXo,x5,ghe,tXo,aXo,EV,nXo,sXo,lXo,$5,hhe,iXo,dXo,CV,cXo,fXo,mXo,k5,phe,gXo,hXo,wV,pXo,uXo,_Xo,S5,uhe,bXo,vXo,AV,FXo,TXo,MXo,R5,EXo,_he,CXo,wXo,bhe,AXo,yXo,P5,aqe,ed,B5,vhe,xy,LXo,Fhe,xXo,nqe,No,$y,$Xo,od,kXo,yV,SXo,RXo,LV,PXo,BXo,IXo,ky,qXo,The,NXo,jXo,DXo,gt,Sy,GXo,Mhe,OXo,VXo,rd,XXo,Ehe,zXo,WXo,xV,QXo,HXo,UXo,I5,JXo,so,Ry,YXo,Che,KXo,ZXo,Na,ezo,whe,ozo,rzo,Ahe,tzo,azo,yhe,nzo,szo,lzo,Lhe,q5,xhe,izo,dzo,$V,czo,fzo,mzo,N5,gzo,$he,hzo,pzo,khe,uzo,_zo,j5,sqe,td,D5,She,Py,bzo,Rhe,vzo,lqe,jo,By,Fzo,ad,Tzo,kV,Mzo,Ezo,SV,Czo,wzo,Azo,Iy,yzo,Phe,Lzo,xzo,$zo,ht,qy,kzo,Bhe,Szo,Rzo,nd,Pzo,Ihe,Bzo,Izo,RV,qzo,Nzo,jzo,G5,Dzo,lo,Ny,Gzo,qhe,Ozo,Vzo,ja,Xzo,Nhe,zzo,Wzo,jhe,Qzo,Hzo,Dhe,Uzo,Jzo,Yzo,Fe,O5,Ghe,Kzo,Zzo,PV,eWo,oWo,rWo,V5,Ohe,tWo,aWo,BV,nWo,sWo,lWo,X5,Vhe,iWo,dWo,IV,cWo,fWo,mWo,Ps,Xhe,gWo,hWo,qV,pWo,uWo,NV,_Wo,bWo,vWo,z5,zhe,FWo,TWo,jV,MWo,EWo,CWo,pt,Whe,wWo,AWo,DV,yWo,LWo,GV,xWo,$Wo,OV,kWo,SWo,RWo,W5,Qhe,PWo,BWo,VV,IWo,qWo,NWo,Q5,Hhe,jWo,DWo,XV,GWo,OWo,VWo,H5,Uhe,XWo,zWo,zV,WWo,QWo,HWo,U5,Jhe,UWo,JWo,WV,YWo,KWo,ZWo,J5,Yhe,eQo,oQo,QV,rQo,tQo,aQo,Y5,Khe,nQo,sQo,HV,lQo,iQo,dQo,K5,Zhe,cQo,fQo,UV,mQo,gQo,hQo,Z5,pQo,epe,uQo,_Qo,ope,bQo,vQo,ev,iqe,sd,ov,rpe,jy,FQo,tpe,TQo,dqe,Do,Dy,MQo,ld,EQo,JV,CQo,wQo,YV,AQo,yQo,LQo,Gy,xQo,ape,$Qo,kQo,SQo,ut,Oy,RQo,npe,PQo,BQo,id,IQo,spe,qQo,NQo,KV,jQo,DQo,GQo,rv,OQo,io,Vy,VQo,lpe,XQo,zQo,Da,WQo,ipe,QQo,HQo,dpe,UQo,JQo,cpe,YQo,KQo,ZQo,fpe,tv,mpe,eHo,oHo,ZV,rHo,tHo,aHo,av,nHo,gpe,sHo,lHo,hpe,iHo,dHo,nv,cqe,dd,sv,ppe,Xy,cHo,upe,fHo,fqe,Go,zy,mHo,cd,gHo,eX,hHo,pHo,oX,uHo,_Ho,bHo,Wy,vHo,_pe,FHo,THo,MHo,_t,Qy,EHo,bpe,CHo,wHo,fd,AHo,vpe,yHo,LHo,rX,xHo,$Ho,kHo,lv,SHo,co,Hy,RHo,Fpe,PHo,BHo,Ga,IHo,Tpe,qHo,NHo,Mpe,jHo,DHo,Epe,GHo,OHo,VHo,ke,iv,Cpe,XHo,zHo,tX,WHo,QHo,HHo,dv,wpe,UHo,JHo,aX,YHo,KHo,ZHo,cv,Ape,eUo,oUo,nX,rUo,tUo,aUo,fv,ype,nUo,sUo,sX,lUo,iUo,dUo,mv,Lpe,cUo,fUo,lX,mUo,gUo,hUo,gv,xpe,pUo,uUo,iX,_Uo,bUo,vUo,hv,$pe,FUo,TUo,dX,MUo,EUo,CUo,pv,kpe,wUo,AUo,cX,yUo,LUo,xUo,uv,Spe,$Uo,kUo,fX,SUo,RUo,PUo,_v,BUo,Rpe,IUo,qUo,Ppe,NUo,jUo,bv,mqe,md,vv,Bpe,Uy,DUo,Ipe,GUo,gqe,Oo,Jy,OUo,gd,VUo,mX,XUo,zUo,gX,WUo,QUo,HUo,Yy,UUo,qpe,JUo,YUo,KUo,bt,Ky,ZUo,Npe,eJo,oJo,hd,rJo,jpe,tJo,aJo,hX,nJo,sJo,lJo,Fv,iJo,fo,Zy,dJo,Dpe,cJo,fJo,Oa,mJo,Gpe,gJo,hJo,Ope,pJo,uJo,Vpe,_Jo,bJo,vJo,Kr,Tv,Xpe,FJo,TJo,pX,MJo,EJo,CJo,Mv,zpe,wJo,AJo,uX,yJo,LJo,xJo,Ev,Wpe,$Jo,kJo,_X,SJo,RJo,PJo,Cv,Qpe,BJo,IJo,bX,qJo,NJo,jJo,wv,Hpe,DJo,GJo,vX,OJo,VJo,XJo,Av,zJo,Upe,WJo,QJo,Jpe,HJo,UJo,yv,hqe,pd,Lv,Ype,eL,JJo,Kpe,YJo,pqe,Vo,oL,KJo,ud,ZJo,FX,eYo,oYo,TX,rYo,tYo,aYo,rL,nYo,Zpe,sYo,lYo,iYo,vt,tL,dYo,eue,cYo,fYo,_d,mYo,oue,gYo,hYo,MX,pYo,uYo,_Yo,xv,bYo,mo,aL,vYo,rue,FYo,TYo,Va,MYo,tue,EYo,CYo,aue,wYo,AYo,nue,yYo,LYo,xYo,Se,$v,sue,$Yo,kYo,EX,SYo,RYo,PYo,kv,lue,BYo,IYo,CX,qYo,NYo,jYo,Sv,iue,DYo,GYo,wX,OYo,VYo,XYo,Rv,due,zYo,WYo,AX,QYo,HYo,UYo,Pv,cue,JYo,YYo,yX,KYo,ZYo,eKo,Bv,fue,oKo,rKo,LX,tKo,aKo,nKo,Iv,mue,sKo,lKo,xX,iKo,dKo,cKo,qv,gue,fKo,mKo,$X,gKo,hKo,pKo,Nv,hue,uKo,_Ko,kX,bKo,vKo,FKo,jv,TKo,pue,MKo,EKo,uue,CKo,wKo,Dv,uqe,bd,Gv,_ue,nL,AKo,bue,yKo,_qe,Xo,sL,LKo,vd,xKo,SX,$Ko,kKo,RX,SKo,RKo,PKo,lL,BKo,vue,IKo,qKo,NKo,Ft,iL,jKo,Fue,DKo,GKo,Fd,OKo,Tue,VKo,XKo,PX,zKo,WKo,QKo,Ov,HKo,go,dL,UKo,Mue,JKo,YKo,Xa,KKo,Eue,ZKo,eZo,Cue,oZo,rZo,wue,tZo,aZo,nZo,cL,Vv,Aue,sZo,lZo,BX,iZo,dZo,cZo,Xv,yue,fZo,mZo,IX,gZo,hZo,pZo,zv,uZo,Lue,_Zo,bZo,xue,vZo,FZo,Wv,bqe,Td,Qv,$ue,fL,TZo,kue,MZo,vqe,zo,mL,EZo,Md,CZo,qX,wZo,AZo,NX,yZo,LZo,xZo,gL,$Zo,Sue,kZo,SZo,RZo,Tt,hL,PZo,Rue,BZo,IZo,Ed,qZo,Pue,NZo,jZo,jX,DZo,GZo,OZo,Hv,VZo,ho,pL,XZo,Bue,zZo,WZo,za,QZo,Iue,HZo,UZo,que,JZo,YZo,Nue,KZo,ZZo,eer,Zr,Uv,jue,oer,rer,DX,ter,aer,ner,Jv,Due,ser,ler,GX,ier,der,cer,Yv,Gue,fer,mer,OX,ger,her,per,Kv,Oue,uer,_er,VX,ber,ver,Fer,Zv,Vue,Ter,Mer,XX,Eer,Cer,wer,eF,Aer,Xue,yer,Ler,zue,xer,$er,oF,Fqe,Cd,rF,Wue,uL,ker,Que,Ser,Tqe,Wo,_L,Rer,wd,Per,zX,Ber,Ier,WX,qer,Ner,jer,bL,Der,Hue,Ger,Oer,Ver,Mt,vL,Xer,Uue,zer,Wer,Ad,Qer,Jue,Her,Uer,QX,Jer,Yer,Ker,tF,Zer,po,FL,eor,Yue,oor,ror,Wa,tor,Kue,aor,nor,Zue,sor,lor,e_e,ior,dor,cor,yd,aF,o_e,mor,gor,HX,hor,por,uor,nF,r_e,_or,bor,UX,vor,For,Tor,sF,t_e,Mor,Eor,JX,Cor,wor,Aor,lF,yor,a_e,Lor,xor,n_e,$or,kor,iF,Mqe,Ld,dF,s_e,TL,Sor,l_e,Ror,Eqe,Qo,ML,Por,xd,Bor,YX,Ior,qor,KX,Nor,jor,Dor,EL,Gor,i_e,Oor,Vor,Xor,Et,CL,zor,d_e,Wor,Qor,$d,Hor,c_e,Uor,Jor,ZX,Yor,Kor,Zor,cF,err,uo,wL,orr,f_e,rrr,trr,Qa,arr,m_e,nrr,srr,g_e,lrr,irr,h_e,drr,crr,frr,AL,fF,p_e,mrr,grr,ez,hrr,prr,urr,mF,u_e,_rr,brr,oz,vrr,Frr,Trr,gF,Mrr,__e,Err,Crr,b_e,wrr,Arr,hF,Cqe,kd,pF,v_e,yL,yrr,F_e,Lrr,wqe,Ho,LL,xrr,Sd,$rr,rz,krr,Srr,tz,Rrr,Prr,Brr,xL,Irr,T_e,qrr,Nrr,jrr,Ct,$L,Drr,M_e,Grr,Orr,Rd,Vrr,E_e,Xrr,zrr,az,Wrr,Qrr,Hrr,uF,Urr,_o,kL,Jrr,C_e,Yrr,Krr,Ha,Zrr,w_e,etr,otr,A_e,rtr,ttr,y_e,atr,ntr,str,L_e,_F,x_e,ltr,itr,nz,dtr,ctr,ftr,bF,mtr,$_e,gtr,htr,k_e,ptr,utr,vF,Aqe,Pd,FF,S_e,SL,_tr,R_e,btr,yqe,Uo,RL,vtr,Bd,Ftr,sz,Ttr,Mtr,lz,Etr,Ctr,wtr,PL,Atr,P_e,ytr,Ltr,xtr,wt,BL,$tr,B_e,ktr,Str,Id,Rtr,I_e,Ptr,Btr,iz,Itr,qtr,Ntr,TF,jtr,bo,IL,Dtr,q_e,Gtr,Otr,Ua,Vtr,N_e,Xtr,ztr,j_e,Wtr,Qtr,D_e,Htr,Utr,Jtr,Ja,MF,G_e,Ytr,Ktr,dz,Ztr,ear,oar,EF,O_e,rar,tar,cz,aar,nar,sar,CF,V_e,lar,iar,fz,dar,car,far,wF,X_e,mar,gar,mz,har,par,uar,AF,_ar,z_e,bar,Far,W_e,Tar,Mar,yF,Lqe,qd,LF,Q_e,qL,Ear,H_e,Car,xqe,Jo,NL,war,Nd,Aar,gz,yar,Lar,hz,xar,$ar,kar,jL,Sar,U_e,Rar,Par,Bar,At,DL,Iar,J_e,qar,Nar,jd,jar,Y_e,Dar,Gar,pz,Oar,Var,Xar,xF,zar,vo,GL,War,K_e,Qar,Har,Ya,Uar,Z_e,Jar,Yar,e2e,Kar,Zar,o2e,enr,onr,rnr,r2e,$F,t2e,tnr,anr,uz,nnr,snr,lnr,kF,inr,a2e,dnr,cnr,n2e,fnr,mnr,SF,$qe,Dd,RF,s2e,OL,gnr,l2e,hnr,kqe,Yo,VL,pnr,Gd,unr,_z,_nr,bnr,bz,vnr,Fnr,Tnr,XL,Mnr,i2e,Enr,Cnr,wnr,yt,zL,Anr,d2e,ynr,Lnr,Od,xnr,c2e,$nr,knr,vz,Snr,Rnr,Pnr,PF,Bnr,wr,WL,Inr,f2e,qnr,Nnr,Ka,jnr,m2e,Dnr,Gnr,g2e,Onr,Vnr,h2e,Xnr,znr,Wnr,N,BF,p2e,Qnr,Hnr,Fz,Unr,Jnr,Ynr,IF,u2e,Knr,Znr,Tz,esr,osr,rsr,qF,_2e,tsr,asr,Mz,nsr,ssr,lsr,NF,b2e,isr,dsr,Ez,csr,fsr,msr,jF,v2e,gsr,hsr,Cz,psr,usr,_sr,DF,F2e,bsr,vsr,wz,Fsr,Tsr,Msr,GF,T2e,Esr,Csr,Az,wsr,Asr,ysr,OF,M2e,Lsr,xsr,yz,$sr,ksr,Ssr,VF,E2e,Rsr,Psr,Lz,Bsr,Isr,qsr,XF,C2e,Nsr,jsr,xz,Dsr,Gsr,Osr,zF,w2e,Vsr,Xsr,$z,zsr,Wsr,Qsr,WF,A2e,Hsr,Usr,kz,Jsr,Ysr,Ksr,QF,y2e,Zsr,elr,Sz,olr,rlr,tlr,HF,L2e,alr,nlr,Rz,slr,llr,ilr,UF,x2e,dlr,clr,Pz,flr,mlr,glr,JF,$2e,hlr,plr,Bz,ulr,_lr,blr,YF,k2e,vlr,Flr,Iz,Tlr,Mlr,Elr,Bs,S2e,Clr,wlr,qz,Alr,ylr,Nz,Llr,xlr,$lr,KF,R2e,klr,Slr,jz,Rlr,Plr,Blr,ZF,P2e,Ilr,qlr,Dz,Nlr,jlr,Dlr,eT,B2e,Glr,Olr,Gz,Vlr,Xlr,zlr,oT,I2e,Wlr,Qlr,Oz,Hlr,Ulr,Jlr,rT,q2e,Ylr,Klr,Vz,Zlr,eir,oir,tT,N2e,rir,tir,Xz,air,nir,sir,aT,j2e,lir,iir,zz,dir,cir,fir,nT,D2e,mir,gir,Wz,hir,pir,uir,sT,G2e,_ir,bir,Qz,vir,Fir,Tir,lT,O2e,Mir,Eir,Hz,Cir,wir,Air,iT,V2e,yir,Lir,Uz,xir,$ir,kir,dT,X2e,Sir,Rir,Jz,Pir,Bir,Iir,cT,z2e,qir,Nir,Yz,jir,Dir,Gir,fT,W2e,Oir,Vir,Kz,Xir,zir,Wir,mT,Q2e,Qir,Hir,Zz,Uir,Jir,Yir,gT,H2e,Kir,Zir,eW,edr,odr,rdr,hT,U2e,tdr,adr,oW,ndr,sdr,ldr,pT,J2e,idr,ddr,rW,cdr,fdr,mdr,uT,Y2e,gdr,hdr,tW,pdr,udr,_dr,_T,K2e,bdr,vdr,aW,Fdr,Tdr,Mdr,bT,Z2e,Edr,Cdr,nW,wdr,Adr,ydr,vT,e1e,Ldr,xdr,sW,$dr,kdr,Sdr,FT,o1e,Rdr,Pdr,lW,Bdr,Idr,qdr,TT,r1e,Ndr,jdr,iW,Ddr,Gdr,Odr,MT,t1e,Vdr,Xdr,dW,zdr,Wdr,Qdr,ET,a1e,Hdr,Udr,cW,Jdr,Ydr,Kdr,CT,n1e,Zdr,ecr,fW,ocr,rcr,tcr,wT,s1e,acr,ncr,mW,scr,lcr,icr,AT,Sqe,Vd,yT,l1e,QL,dcr,i1e,ccr,Rqe,Ko,HL,fcr,Xd,mcr,gW,gcr,hcr,hW,pcr,ucr,_cr,UL,bcr,d1e,vcr,Fcr,Tcr,Lt,JL,Mcr,c1e,Ecr,Ccr,zd,wcr,f1e,Acr,ycr,pW,Lcr,xcr,$cr,LT,kcr,Ar,YL,Scr,m1e,Rcr,Pcr,Za,Bcr,g1e,Icr,qcr,h1e,Ncr,jcr,p1e,Dcr,Gcr,Ocr,se,xT,u1e,Vcr,Xcr,uW,zcr,Wcr,Qcr,$T,_1e,Hcr,Ucr,_W,Jcr,Ycr,Kcr,kT,b1e,Zcr,efr,bW,ofr,rfr,tfr,ST,v1e,afr,nfr,vW,sfr,lfr,ifr,RT,F1e,dfr,cfr,FW,ffr,mfr,gfr,PT,T1e,hfr,pfr,TW,ufr,_fr,bfr,BT,M1e,vfr,Ffr,MW,Tfr,Mfr,Efr,IT,E1e,Cfr,wfr,EW,Afr,yfr,Lfr,qT,C1e,xfr,$fr,CW,kfr,Sfr,Rfr,NT,w1e,Pfr,Bfr,wW,Ifr,qfr,Nfr,jT,A1e,jfr,Dfr,AW,Gfr,Ofr,Vfr,DT,y1e,Xfr,zfr,yW,Wfr,Qfr,Hfr,GT,L1e,Ufr,Jfr,LW,Yfr,Kfr,Zfr,OT,x1e,emr,omr,xW,rmr,tmr,amr,VT,$1e,nmr,smr,$W,lmr,imr,dmr,XT,k1e,cmr,fmr,kW,mmr,gmr,hmr,zT,S1e,pmr,umr,SW,_mr,bmr,vmr,WT,R1e,Fmr,Tmr,RW,Mmr,Emr,Cmr,QT,P1e,wmr,Amr,PW,ymr,Lmr,xmr,HT,B1e,$mr,kmr,BW,Smr,Rmr,Pmr,UT,I1e,Bmr,Imr,IW,qmr,Nmr,jmr,JT,q1e,Dmr,Gmr,qW,Omr,Vmr,Xmr,YT,N1e,zmr,Wmr,NW,Qmr,Hmr,Umr,KT,Pqe,Wd,ZT,j1e,KL,Jmr,D1e,Ymr,Bqe,Zo,ZL,Kmr,Qd,Zmr,jW,egr,ogr,DW,rgr,tgr,agr,e8,ngr,G1e,sgr,lgr,igr,xt,o8,dgr,O1e,cgr,fgr,Hd,mgr,V1e,ggr,hgr,GW,pgr,ugr,_gr,eM,bgr,yr,r8,vgr,X1e,Fgr,Tgr,en,Mgr,z1e,Egr,Cgr,W1e,wgr,Agr,Q1e,ygr,Lgr,xgr,Te,oM,H1e,$gr,kgr,OW,Sgr,Rgr,Pgr,rM,U1e,Bgr,Igr,VW,qgr,Ngr,jgr,tM,J1e,Dgr,Ggr,XW,Ogr,Vgr,Xgr,aM,Y1e,zgr,Wgr,zW,Qgr,Hgr,Ugr,nM,K1e,Jgr,Ygr,WW,Kgr,Zgr,ehr,sM,Z1e,ohr,rhr,QW,thr,ahr,nhr,lM,e7e,shr,lhr,HW,ihr,dhr,chr,iM,o7e,fhr,mhr,UW,ghr,hhr,phr,dM,r7e,uhr,_hr,JW,bhr,vhr,Fhr,cM,t7e,Thr,Mhr,YW,Ehr,Chr,whr,fM,a7e,Ahr,yhr,KW,Lhr,xhr,$hr,mM,n7e,khr,Shr,ZW,Rhr,Phr,Bhr,gM,Iqe,Ud,hM,s7e,t8,Ihr,l7e,qhr,qqe,er,a8,Nhr,Jd,jhr,eQ,Dhr,Ghr,oQ,Ohr,Vhr,Xhr,n8,zhr,i7e,Whr,Qhr,Hhr,$t,s8,Uhr,d7e,Jhr,Yhr,Yd,Khr,c7e,Zhr,epr,rQ,opr,rpr,tpr,pM,apr,Lr,l8,npr,f7e,spr,lpr,on,ipr,m7e,dpr,cpr,g7e,fpr,mpr,h7e,gpr,hpr,ppr,rn,uM,p7e,upr,_pr,tQ,bpr,vpr,Fpr,_M,u7e,Tpr,Mpr,aQ,Epr,Cpr,wpr,bM,_7e,Apr,ypr,nQ,Lpr,xpr,$pr,vM,b7e,kpr,Spr,sQ,Rpr,Ppr,Bpr,FM,Nqe,Kd,TM,v7e,i8,Ipr,F7e,qpr,jqe,or,d8,Npr,Zd,jpr,lQ,Dpr,Gpr,iQ,Opr,Vpr,Xpr,c8,zpr,T7e,Wpr,Qpr,Hpr,kt,f8,Upr,M7e,Jpr,Ypr,ec,Kpr,E7e,Zpr,eur,dQ,our,rur,tur,MM,aur,xr,m8,nur,C7e,sur,lur,tn,iur,w7e,dur,cur,A7e,fur,mur,y7e,gur,hur,pur,ie,EM,L7e,uur,_ur,cQ,bur,vur,Fur,CM,x7e,Tur,Mur,fQ,Eur,Cur,wur,wM,$7e,Aur,yur,mQ,Lur,xur,$ur,AM,k7e,kur,Sur,gQ,Rur,Pur,Bur,yM,S7e,Iur,qur,hQ,Nur,jur,Dur,LM,R7e,Gur,Our,pQ,Vur,Xur,zur,xM,P7e,Wur,Qur,uQ,Hur,Uur,Jur,$M,B7e,Yur,Kur,_Q,Zur,e_r,o_r,kM,I7e,r_r,t_r,bQ,a_r,n_r,s_r,SM,q7e,l_r,i_r,vQ,d_r,c_r,f_r,RM,N7e,m_r,g_r,FQ,h_r,p_r,u_r,PM,j7e,__r,b_r,TQ,v_r,F_r,T_r,BM,D7e,M_r,E_r,MQ,C_r,w_r,A_r,IM,G7e,y_r,L_r,EQ,x_r,$_r,k_r,qM,O7e,S_r,R_r,CQ,P_r,B_r,I_r,NM,V7e,q_r,N_r,wQ,j_r,D_r,G_r,jM,X7e,O_r,V_r,AQ,X_r,z_r,W_r,DM,z7e,Q_r,H_r,yQ,U_r,J_r,Y_r,GM,W7e,K_r,Z_r,LQ,e2r,o2r,r2r,OM,Q7e,t2r,a2r,xQ,n2r,s2r,l2r,VM,Dqe,oc,XM,H7e,g8,i2r,U7e,d2r,Gqe,rr,h8,c2r,rc,f2r,$Q,m2r,g2r,kQ,h2r,p2r,u2r,p8,_2r,J7e,b2r,v2r,F2r,St,u8,T2r,Y7e,M2r,E2r,tc,C2r,K7e,w2r,A2r,SQ,y2r,L2r,x2r,zM,$2r,$r,_8,k2r,Z7e,S2r,R2r,an,P2r,ebe,B2r,I2r,obe,q2r,N2r,rbe,j2r,D2r,G2r,ye,WM,tbe,O2r,V2r,RQ,X2r,z2r,W2r,QM,abe,Q2r,H2r,PQ,U2r,J2r,Y2r,HM,nbe,K2r,Z2r,BQ,e1r,o1r,r1r,UM,sbe,t1r,a1r,IQ,n1r,s1r,l1r,JM,lbe,i1r,d1r,qQ,c1r,f1r,m1r,YM,ibe,g1r,h1r,NQ,p1r,u1r,_1r,KM,dbe,b1r,v1r,jQ,F1r,T1r,M1r,ZM,cbe,E1r,C1r,DQ,w1r,A1r,y1r,e4,fbe,L1r,x1r,GQ,$1r,k1r,S1r,o4,mbe,R1r,P1r,OQ,B1r,I1r,q1r,r4,Oqe,ac,t4,gbe,b8,N1r,hbe,j1r,Vqe,tr,v8,D1r,nc,G1r,VQ,O1r,V1r,XQ,X1r,z1r,W1r,F8,Q1r,pbe,H1r,U1r,J1r,Rt,T8,Y1r,ube,K1r,Z1r,sc,e7r,_be,o7r,r7r,zQ,t7r,a7r,n7r,a4,s7r,kr,M8,l7r,bbe,i7r,d7r,nn,c7r,vbe,f7r,m7r,Fbe,g7r,h7r,Tbe,p7r,u7r,_7r,ee,n4,Mbe,b7r,v7r,WQ,F7r,T7r,M7r,s4,Ebe,E7r,C7r,QQ,w7r,A7r,y7r,l4,Cbe,L7r,x7r,HQ,$7r,k7r,S7r,i4,wbe,R7r,P7r,UQ,B7r,I7r,q7r,d4,Abe,N7r,j7r,JQ,D7r,G7r,O7r,c4,ybe,V7r,X7r,YQ,z7r,W7r,Q7r,f4,Lbe,H7r,U7r,KQ,J7r,Y7r,K7r,m4,xbe,Z7r,ebr,ZQ,obr,rbr,tbr,g4,$be,abr,nbr,eH,sbr,lbr,ibr,h4,kbe,dbr,cbr,oH,fbr,mbr,gbr,p4,Sbe,hbr,pbr,rH,ubr,_br,bbr,u4,Rbe,vbr,Fbr,tH,Tbr,Mbr,Ebr,_4,Pbe,Cbr,wbr,aH,Abr,ybr,Lbr,b4,Bbe,xbr,$br,nH,kbr,Sbr,Rbr,v4,Ibe,Pbr,Bbr,sH,Ibr,qbr,Nbr,F4,qbe,jbr,Dbr,lH,Gbr,Obr,Vbr,T4,Nbe,Xbr,zbr,iH,Wbr,Qbr,Hbr,M4,jbe,Ubr,Jbr,dH,Ybr,Kbr,Zbr,E4,Dbe,e5r,o5r,cH,r5r,t5r,a5r,C4,Gbe,n5r,s5r,fH,l5r,i5r,d5r,w4,Obe,c5r,f5r,mH,m5r,g5r,h5r,A4,Vbe,p5r,u5r,gH,_5r,b5r,v5r,y4,Xbe,F5r,T5r,hH,M5r,E5r,C5r,L4,zbe,w5r,A5r,pH,y5r,L5r,x5r,x4,Wbe,$5r,k5r,uH,S5r,R5r,P5r,$4,Qbe,B5r,I5r,_H,q5r,N5r,j5r,k4,Xqe,lc,S4,Hbe,E8,D5r,Ube,G5r,zqe,ar,C8,O5r,ic,V5r,bH,X5r,z5r,vH,W5r,Q5r,H5r,w8,U5r,Jbe,J5r,Y5r,K5r,Pt,A8,Z5r,Ybe,evr,ovr,dc,rvr,Kbe,tvr,avr,FH,nvr,svr,lvr,R4,ivr,Sr,y8,dvr,Zbe,cvr,fvr,sn,mvr,e5e,gvr,hvr,o5e,pvr,uvr,r5e,_vr,bvr,vvr,he,P4,t5e,Fvr,Tvr,TH,Mvr,Evr,Cvr,B4,a5e,wvr,Avr,MH,yvr,Lvr,xvr,I4,n5e,$vr,kvr,EH,Svr,Rvr,Pvr,q4,s5e,Bvr,Ivr,CH,qvr,Nvr,jvr,N4,l5e,Dvr,Gvr,wH,Ovr,Vvr,Xvr,j4,i5e,zvr,Wvr,AH,Qvr,Hvr,Uvr,D4,d5e,Jvr,Yvr,yH,Kvr,Zvr,eFr,G4,c5e,oFr,rFr,LH,tFr,aFr,nFr,O4,f5e,sFr,lFr,xH,iFr,dFr,cFr,V4,m5e,fFr,mFr,$H,gFr,hFr,pFr,X4,g5e,uFr,_Fr,kH,bFr,vFr,FFr,z4,h5e,TFr,MFr,SH,EFr,CFr,wFr,W4,p5e,AFr,yFr,RH,LFr,xFr,$Fr,Q4,u5e,kFr,SFr,PH,RFr,PFr,BFr,H4,_5e,IFr,qFr,BH,NFr,jFr,DFr,U4,b5e,GFr,OFr,IH,VFr,XFr,zFr,J4,v5e,WFr,QFr,qH,HFr,UFr,JFr,Y4,Wqe,cc,K4,F5e,L8,YFr,T5e,KFr,Qqe,nr,x8,ZFr,fc,eTr,NH,oTr,rTr,jH,tTr,aTr,nTr,$8,sTr,M5e,lTr,iTr,dTr,Bt,k8,cTr,E5e,fTr,mTr,mc,gTr,C5e,hTr,pTr,DH,uTr,_Tr,bTr,Z4,vTr,Rr,S8,FTr,w5e,TTr,MTr,ln,ETr,A5e,CTr,wTr,y5e,ATr,yTr,L5e,LTr,xTr,$Tr,R8,eE,x5e,kTr,STr,GH,RTr,PTr,BTr,oE,$5e,ITr,qTr,OH,NTr,jTr,DTr,rE,Hqe,gc,tE,k5e,P8,GTr,S5e,OTr,Uqe,sr,B8,VTr,hc,XTr,VH,zTr,WTr,XH,QTr,HTr,UTr,I8,JTr,R5e,YTr,KTr,ZTr,It,q8,eMr,P5e,oMr,rMr,pc,tMr,B5e,aMr,nMr,zH,sMr,lMr,iMr,aE,dMr,Pr,N8,cMr,I5e,fMr,mMr,dn,gMr,q5e,hMr,pMr,N5e,uMr,_Mr,j5e,bMr,vMr,FMr,D5e,nE,G5e,TMr,MMr,WH,EMr,CMr,wMr,sE,Jqe,uc,lE,O5e,j8,AMr,V5e,yMr,Yqe,lr,D8,LMr,_c,xMr,QH,$Mr,kMr,HH,SMr,RMr,PMr,G8,BMr,X5e,IMr,qMr,NMr,qt,O8,jMr,z5e,DMr,GMr,bc,OMr,W5e,VMr,XMr,UH,zMr,WMr,QMr,iE,HMr,Br,V8,UMr,Q5e,JMr,YMr,cn,KMr,H5e,ZMr,e4r,U5e,o4r,r4r,J5e,t4r,a4r,n4r,de,dE,Y5e,s4r,l4r,JH,i4r,d4r,c4r,cE,K5e,f4r,m4r,YH,g4r,h4r,p4r,fE,Z5e,u4r,_4r,KH,b4r,v4r,F4r,mE,eve,T4r,M4r,ZH,E4r,C4r,w4r,gE,ove,A4r,y4r,eU,L4r,x4r,$4r,hE,rve,k4r,S4r,oU,R4r,P4r,B4r,pE,tve,I4r,q4r,rU,N4r,j4r,D4r,uE,ave,G4r,O4r,tU,V4r,X4r,z4r,_E,nve,W4r,Q4r,aU,H4r,U4r,J4r,bE,sve,Y4r,K4r,nU,Z4r,eEr,oEr,vE,lve,rEr,tEr,sU,aEr,nEr,sEr,FE,ive,lEr,iEr,lU,dEr,cEr,fEr,TE,dve,mEr,gEr,iU,hEr,pEr,uEr,ME,cve,_Er,bEr,dU,vEr,FEr,TEr,EE,fve,MEr,EEr,cU,CEr,wEr,AEr,CE,mve,yEr,LEr,fU,xEr,$Er,kEr,wE,gve,SEr,REr,mU,PEr,BEr,IEr,AE,hve,qEr,NEr,gU,jEr,DEr,GEr,yE,pve,OEr,VEr,hU,XEr,zEr,WEr,LE,uve,QEr,HEr,pU,UEr,JEr,YEr,xE,Kqe,vc,$E,_ve,X8,KEr,bve,ZEr,Zqe,ir,z8,eCr,Fc,oCr,uU,rCr,tCr,_U,aCr,nCr,sCr,W8,lCr,vve,iCr,dCr,cCr,Nt,Q8,fCr,Fve,mCr,gCr,Tc,hCr,Tve,pCr,uCr,bU,_Cr,bCr,vCr,kE,FCr,Ir,H8,TCr,Mve,MCr,ECr,fn,CCr,Eve,wCr,ACr,Cve,yCr,LCr,wve,xCr,$Cr,kCr,ce,SE,Ave,SCr,RCr,vU,PCr,BCr,ICr,RE,yve,qCr,NCr,FU,jCr,DCr,GCr,PE,Lve,OCr,VCr,TU,XCr,zCr,WCr,BE,xve,QCr,HCr,MU,UCr,JCr,YCr,IE,$ve,KCr,ZCr,EU,e3r,o3r,r3r,qE,kve,t3r,a3r,CU,n3r,s3r,l3r,NE,Sve,i3r,d3r,wU,c3r,f3r,m3r,jE,Rve,g3r,h3r,AU,p3r,u3r,_3r,DE,Pve,b3r,v3r,yU,F3r,T3r,M3r,GE,Bve,E3r,C3r,LU,w3r,A3r,y3r,OE,Ive,L3r,x3r,xU,$3r,k3r,S3r,VE,qve,R3r,P3r,$U,B3r,I3r,q3r,XE,Nve,N3r,j3r,kU,D3r,G3r,O3r,zE,jve,V3r,X3r,SU,z3r,W3r,Q3r,WE,Dve,H3r,U3r,RU,J3r,Y3r,K3r,QE,Gve,Z3r,ewr,PU,owr,rwr,twr,HE,Ove,awr,nwr,BU,swr,lwr,iwr,UE,Vve,dwr,cwr,IU,fwr,mwr,gwr,JE,Xve,hwr,pwr,qU,uwr,_wr,bwr,YE,zve,vwr,Fwr,NU,Twr,Mwr,Ewr,KE,eNe,Mc,ZE,Wve,U8,Cwr,Qve,wwr,oNe,dr,J8,Awr,Ec,ywr,jU,Lwr,xwr,DU,$wr,kwr,Swr,Y8,Rwr,Hve,Pwr,Bwr,Iwr,jt,K8,qwr,Uve,Nwr,jwr,Cc,Dwr,Jve,Gwr,Owr,GU,Vwr,Xwr,zwr,eC,Wwr,qr,Z8,Qwr,Yve,Hwr,Uwr,mn,Jwr,Kve,Ywr,Kwr,Zve,Zwr,eAr,eFe,oAr,rAr,tAr,oFe,oC,rFe,aAr,nAr,OU,sAr,lAr,iAr,rC,rNe,wc,tC,tFe,ex,dAr,aFe,cAr,tNe,cr,ox,fAr,Ac,mAr,VU,gAr,hAr,XU,pAr,uAr,_Ar,rx,bAr,nFe,vAr,FAr,TAr,Dt,tx,MAr,sFe,EAr,CAr,yc,wAr,lFe,AAr,yAr,zU,LAr,xAr,$Ar,aC,kAr,Nr,ax,SAr,iFe,RAr,PAr,gn,BAr,dFe,IAr,qAr,cFe,NAr,jAr,fFe,DAr,GAr,OAr,mFe,nC,gFe,VAr,XAr,WU,zAr,WAr,QAr,sC,aNe,Lc,lC,hFe,nx,HAr,pFe,UAr,nNe,fr,sx,JAr,xc,YAr,QU,KAr,ZAr,HU,e6r,o6r,r6r,lx,t6r,uFe,a6r,n6r,s6r,Gt,ix,l6r,_Fe,i6r,d6r,$c,c6r,bFe,f6r,m6r,UU,g6r,h6r,p6r,iC,u6r,jr,dx,_6r,vFe,b6r,v6r,hn,F6r,FFe,T6r,M6r,TFe,E6r,C6r,MFe,w6r,A6r,y6r,re,dC,EFe,L6r,x6r,JU,$6r,k6r,S6r,cC,CFe,R6r,P6r,YU,B6r,I6r,q6r,fC,wFe,N6r,j6r,KU,D6r,G6r,O6r,mC,AFe,V6r,X6r,ZU,z6r,W6r,Q6r,gC,yFe,H6r,U6r,eJ,J6r,Y6r,K6r,hC,LFe,Z6r,e0r,oJ,o0r,r0r,t0r,pC,xFe,a0r,n0r,rJ,s0r,l0r,i0r,uC,$Fe,d0r,c0r,tJ,f0r,m0r,g0r,_C,kFe,h0r,p0r,aJ,u0r,_0r,b0r,bC,SFe,v0r,F0r,nJ,T0r,M0r,E0r,vC,RFe,C0r,w0r,sJ,A0r,y0r,L0r,FC,PFe,x0r,$0r,lJ,k0r,S0r,R0r,TC,BFe,P0r,B0r,iJ,I0r,q0r,N0r,MC,IFe,j0r,D0r,dJ,G0r,O0r,V0r,EC,qFe,X0r,z0r,cJ,W0r,Q0r,H0r,CC,NFe,U0r,J0r,fJ,Y0r,K0r,Z0r,wC,jFe,eyr,oyr,mJ,ryr,tyr,ayr,AC,DFe,nyr,syr,gJ,lyr,iyr,dyr,yC,GFe,cyr,fyr,hJ,myr,gyr,hyr,LC,OFe,pyr,uyr,pJ,_yr,byr,vyr,xC,VFe,Fyr,Tyr,uJ,Myr,Eyr,Cyr,$C,XFe,wyr,Ayr,_J,yyr,Lyr,xyr,kC,zFe,$yr,kyr,bJ,Syr,Ryr,Pyr,SC,WFe,Byr,Iyr,vJ,qyr,Nyr,jyr,RC,QFe,Dyr,Gyr,FJ,Oyr,Vyr,Xyr,PC,sNe,kc,BC,HFe,cx,zyr,UFe,Wyr,lNe,mr,fx,Qyr,Sc,Hyr,TJ,Uyr,Jyr,MJ,Yyr,Kyr,Zyr,mx,eLr,JFe,oLr,rLr,tLr,Ot,gx,aLr,YFe,nLr,sLr,Rc,lLr,KFe,iLr,dLr,EJ,cLr,fLr,mLr,IC,gLr,Dr,hx,hLr,ZFe,pLr,uLr,pn,_Lr,eTe,bLr,vLr,oTe,FLr,TLr,rTe,MLr,ELr,CLr,Re,qC,tTe,wLr,ALr,CJ,yLr,LLr,xLr,NC,aTe,$Lr,kLr,wJ,SLr,RLr,PLr,jC,nTe,BLr,ILr,AJ,qLr,NLr,jLr,DC,sTe,DLr,GLr,yJ,OLr,VLr,XLr,GC,lTe,zLr,WLr,LJ,QLr,HLr,ULr,OC,iTe,JLr,YLr,xJ,KLr,ZLr,e8r,VC,dTe,o8r,r8r,$J,t8r,a8r,n8r,XC,cTe,s8r,l8r,kJ,i8r,d8r,c8r,zC,fTe,f8r,m8r,SJ,g8r,h8r,p8r,WC,iNe,Pc,QC,mTe,px,u8r,gTe,_8r,dNe,gr,ux,b8r,Bc,v8r,RJ,F8r,T8r,PJ,M8r,E8r,C8r,_x,w8r,hTe,A8r,y8r,L8r,Vt,bx,x8r,pTe,$8r,k8r,Ic,S8r,uTe,R8r,P8r,BJ,B8r,I8r,q8r,HC,N8r,Gr,vx,j8r,_Te,D8r,G8r,un,O8r,bTe,V8r,X8r,vTe,z8r,W8r,FTe,Q8r,H8r,U8r,Me,UC,TTe,J8r,Y8r,IJ,K8r,Z8r,exr,JC,MTe,oxr,rxr,qJ,txr,axr,nxr,YC,ETe,sxr,lxr,NJ,ixr,dxr,cxr,KC,CTe,fxr,mxr,jJ,gxr,hxr,pxr,ZC,wTe,uxr,_xr,DJ,bxr,vxr,Fxr,e3,ATe,Txr,Mxr,GJ,Exr,Cxr,wxr,o3,yTe,Axr,yxr,OJ,Lxr,xxr,$xr,r3,LTe,kxr,Sxr,VJ,Rxr,Pxr,Bxr,t3,xTe,Ixr,qxr,XJ,Nxr,jxr,Dxr,a3,$Te,Gxr,Oxr,zJ,Vxr,Xxr,zxr,n3,kTe,Wxr,Qxr,WJ,Hxr,Uxr,Jxr,s3,STe,Yxr,Kxr,QJ,Zxr,e9r,o9r,l3,cNe,qc,i3,RTe,Fx,r9r,PTe,t9r,fNe,hr,Tx,a9r,Nc,n9r,HJ,s9r,l9r,UJ,i9r,d9r,c9r,Mx,f9r,BTe,m9r,g9r,h9r,Xt,Ex,p9r,ITe,u9r,_9r,jc,b9r,qTe,v9r,F9r,JJ,T9r,M9r,E9r,d3,C9r,Or,Cx,w9r,NTe,A9r,y9r,_n,L9r,jTe,x9r,$9r,DTe,k9r,S9r,GTe,R9r,P9r,B9r,Le,c3,OTe,I9r,q9r,YJ,N9r,j9r,D9r,f3,VTe,G9r,O9r,KJ,V9r,X9r,z9r,m3,XTe,W9r,Q9r,ZJ,H9r,U9r,J9r,g3,zTe,Y9r,K9r,eY,Z9r,e$r,o$r,h3,WTe,r$r,t$r,oY,a$r,n$r,s$r,p3,QTe,l$r,i$r,rY,d$r,c$r,f$r,u3,HTe,m$r,g$r,tY,h$r,p$r,u$r,_3,UTe,_$r,b$r,aY,v$r,F$r,T$r,b3,JTe,M$r,E$r,nY,C$r,w$r,A$r,v3,YTe,y$r,L$r,sY,x$r,$$r,k$r,F3,mNe,Dc,T3,KTe,wx,S$r,ZTe,R$r,gNe,pr,Ax,P$r,Gc,B$r,lY,I$r,q$r,iY,N$r,j$r,D$r,yx,G$r,eMe,O$r,V$r,X$r,zt,Lx,z$r,oMe,W$r,Q$r,Oc,H$r,rMe,U$r,J$r,dY,Y$r,K$r,Z$r,M3,ekr,Vr,xx,okr,tMe,rkr,tkr,bn,akr,aMe,nkr,skr,nMe,lkr,ikr,sMe,dkr,ckr,fkr,Pe,E3,lMe,mkr,gkr,cY,hkr,pkr,ukr,C3,iMe,_kr,bkr,fY,vkr,Fkr,Tkr,w3,dMe,Mkr,Ekr,mY,Ckr,wkr,Akr,A3,cMe,ykr,Lkr,gY,xkr,$kr,kkr,y3,fMe,Skr,Rkr,hY,Pkr,Bkr,Ikr,L3,mMe,qkr,Nkr,pY,jkr,Dkr,Gkr,x3,gMe,Okr,Vkr,uY,Xkr,zkr,Wkr,$3,hMe,Qkr,Hkr,_Y,Ukr,Jkr,Ykr,k3,pMe,Kkr,Zkr,bY,eSr,oSr,rSr,S3,hNe,Vc,R3,uMe,$x,tSr,_Me,aSr,pNe,ur,kx,nSr,Xc,sSr,vY,lSr,iSr,FY,dSr,cSr,fSr,Sx,mSr,bMe,gSr,hSr,pSr,Wt,Rx,uSr,vMe,_Sr,bSr,zc,vSr,FMe,FSr,TSr,TY,MSr,ESr,CSr,P3,wSr,Xr,Px,ASr,TMe,ySr,LSr,vn,xSr,MMe,$Sr,kSr,EMe,SSr,RSr,CMe,PSr,BSr,ISr,xe,B3,wMe,qSr,NSr,MY,jSr,DSr,GSr,I3,AMe,OSr,VSr,EY,XSr,zSr,WSr,q3,yMe,QSr,HSr,CY,USr,JSr,YSr,N3,LMe,KSr,ZSr,wY,eRr,oRr,rRr,j3,xMe,tRr,aRr,AY,nRr,sRr,lRr,D3,$Me,iRr,dRr,yY,cRr,fRr,mRr,G3,kMe,gRr,hRr,LY,pRr,uRr,_Rr,O3,SMe,bRr,vRr,xY,FRr,TRr,MRr,V3,RMe,ERr,CRr,$Y,wRr,ARr,yRr,X3,PMe,LRr,xRr,kY,$Rr,kRr,SRr,z3,uNe,Wc,W3,BMe,Bx,RRr,IMe,PRr,_Ne,_r,Ix,BRr,Qc,IRr,SY,qRr,NRr,RY,jRr,DRr,GRr,qx,ORr,qMe,VRr,XRr,zRr,Qt,Nx,WRr,NMe,QRr,HRr,Hc,URr,jMe,JRr,YRr,PY,KRr,ZRr,ePr,Q3,oPr,zr,jx,rPr,DMe,tPr,aPr,Fn,nPr,GMe,sPr,lPr,OMe,iPr,dPr,VMe,cPr,fPr,mPr,$e,H3,XMe,gPr,hPr,BY,pPr,uPr,_Pr,U3,zMe,bPr,vPr,IY,FPr,TPr,MPr,J3,WMe,EPr,CPr,qY,wPr,APr,yPr,Y3,QMe,LPr,xPr,NY,$Pr,kPr,SPr,K3,HMe,RPr,PPr,jY,BPr,IPr,qPr,Z3,UMe,NPr,jPr,DY,DPr,GPr,OPr,ew,JMe,VPr,XPr,GY,zPr,WPr,QPr,ow,YMe,HPr,UPr,OY,JPr,YPr,KPr,rw,KMe,ZPr,eBr,VY,oBr,rBr,tBr,tw,ZMe,aBr,nBr,XY,sBr,lBr,iBr,aw,bNe,Uc,nw,e4e,Dx,dBr,o4e,cBr,vNe,br,Gx,fBr,Jc,mBr,zY,gBr,hBr,WY,pBr,uBr,_Br,Ox,bBr,r4e,vBr,FBr,TBr,Ht,Vx,MBr,t4e,EBr,CBr,Yc,wBr,a4e,ABr,yBr,QY,LBr,xBr,$Br,sw,kBr,Wr,Xx,SBr,n4e,RBr,PBr,Tn,BBr,s4e,IBr,qBr,l4e,NBr,jBr,i4e,DBr,GBr,OBr,De,lw,d4e,VBr,XBr,HY,zBr,WBr,QBr,iw,c4e,HBr,UBr,UY,JBr,YBr,KBr,dw,f4e,ZBr,eIr,JY,oIr,rIr,tIr,cw,m4e,aIr,nIr,YY,sIr,lIr,iIr,fw,g4e,dIr,cIr,KY,fIr,mIr,gIr,mw,h4e,hIr,pIr,ZY,uIr,_Ir,bIr,gw,p4e,vIr,FIr,eK,TIr,MIr,EIr,hw,u4e,CIr,wIr,oK,AIr,yIr,LIr,pw,FNe,Kc,uw,_4e,zx,xIr,b4e,$Ir,TNe,vr,Wx,kIr,Zc,SIr,rK,RIr,PIr,tK,BIr,IIr,qIr,Qx,NIr,v4e,jIr,DIr,GIr,Ut,Hx,OIr,F4e,VIr,XIr,ef,zIr,T4e,WIr,QIr,aK,HIr,UIr,JIr,_w,YIr,Qr,Ux,KIr,M4e,ZIr,eqr,Mn,oqr,E4e,rqr,tqr,C4e,aqr,nqr,w4e,sqr,lqr,iqr,Ge,bw,A4e,dqr,cqr,nK,fqr,mqr,gqr,vw,y4e,hqr,pqr,sK,uqr,_qr,bqr,Fw,L4e,vqr,Fqr,lK,Tqr,Mqr,Eqr,Tw,x4e,Cqr,wqr,iK,Aqr,yqr,Lqr,Mw,$4e,xqr,$qr,dK,kqr,Sqr,Rqr,Ew,k4e,Pqr,Bqr,cK,Iqr,qqr,Nqr,Cw,S4e,jqr,Dqr,fK,Gqr,Oqr,Vqr,ww,R4e,Xqr,zqr,mK,Wqr,Qqr,Hqr,Aw,MNe,of,yw,P4e,Jx,Uqr,B4e,Jqr,ENe,Fr,Yx,Yqr,rf,Kqr,gK,Zqr,eNr,hK,oNr,rNr,tNr,Kx,aNr,I4e,nNr,sNr,lNr,Jt,Zx,iNr,q4e,dNr,cNr,tf,fNr,N4e,mNr,gNr,pK,hNr,pNr,uNr,Lw,_Nr,Hr,e9,bNr,j4e,vNr,FNr,En,TNr,D4e,MNr,ENr,G4e,CNr,wNr,O4e,ANr,yNr,LNr,V4e,xw,X4e,xNr,$Nr,uK,kNr,SNr,RNr,$w,CNe,af,kw,z4e,o9,PNr,W4e,BNr,wNe,Tr,r9,INr,nf,qNr,_K,NNr,jNr,bK,DNr,GNr,ONr,t9,VNr,Q4e,XNr,zNr,WNr,Yt,a9,QNr,H4e,HNr,UNr,sf,JNr,U4e,YNr,KNr,vK,ZNr,ejr,ojr,Sw,rjr,Ur,n9,tjr,J4e,ajr,njr,Cn,sjr,Y4e,ljr,ijr,K4e,djr,cjr,Z4e,fjr,mjr,gjr,s9,Rw,eEe,hjr,pjr,FK,ujr,_jr,bjr,Pw,oEe,vjr,Fjr,TK,Tjr,Mjr,Ejr,Bw,ANe,lf,Iw,rEe,l9,Cjr,tEe,wjr,yNe,Mr,i9,Ajr,df,yjr,MK,Ljr,xjr,EK,$jr,kjr,Sjr,d9,Rjr,aEe,Pjr,Bjr,Ijr,Kt,c9,qjr,nEe,Njr,jjr,cf,Djr,sEe,Gjr,Ojr,CK,Vjr,Xjr,zjr,qw,Wjr,Jr,f9,Qjr,lEe,Hjr,Ujr,wn,Jjr,iEe,Yjr,Kjr,dEe,Zjr,eDr,cEe,oDr,rDr,tDr,fEe,Nw,mEe,aDr,nDr,wK,sDr,lDr,iDr,jw,LNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),l0=new oe({}),i0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new dDr({props:{warning:!0,$$slots:{default:[tLt]},$$scope:{ctx:L}}}),d0=new oe({}),c0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/configuration_auto.py#L573"}}),g0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/configuration_auto.py#L596"}}),bg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),h0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/configuration_auto.py#L719"}}),p0=new oe({}),u0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/tokenization_auto.py#L388"}}),v0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17257/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/tokenization_auto.py#L402"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),F0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/tokenization_auto.py#L598"}}),T0=new oe({}),M0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),w0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17257/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),yh=new dDr({props:{$$slots:{default:[sLt]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),A0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),y0=new oe({}),L0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/processing_auto.py#L87"}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/processing_auto.py#L101"}}),Qh=new dDr({props:{$$slots:{default:[iLt]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),S0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/processing_auto.py#L254"}}),R0=new oe({}),P0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L725"}}),I0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),Ou=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),N0=new oe({}),j0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L732"}}),G0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Xu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),O0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),R_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),V0=new oe({}),X0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L747"}}),W0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),B_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),H0=new oe({}),U0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L754"}}),Y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),a1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),Z0=new oe({}),ey=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L761"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),s1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),ay=new oe({}),ny=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L770"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L804"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),Z7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L811"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),ob=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),ib=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L797"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),cb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L779"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),xy=new oe({}),$y=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L786"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),Py=new oe({}),By=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L820"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L859"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L866"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),Uy=new oe({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L889"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),eL=new oe({}),oL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L873"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L880"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L898"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L905"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L852"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),yL=new oe({}),LL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L827"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L834"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_auto.py#L843"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),QL=new oe({}),HL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),t8=new oe({}),a8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),i8=new oe({}),d8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),g8=new oe({}),h8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),b8=new oe({}),v8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),E8=new oe({}),C8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),P8=new oe({}),B8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),U8=new oe({}),J8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),px=new oe({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),a9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),c9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17257/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17257/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17257/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),t0=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),a0=o("AutoConfig"),Ln=o(", "),xn=a("a"),n0=o("AutoModel"),hi=o(`, and
`),$n=a("a"),s0=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),C$=o("will create a model that is an instance of "),ui=a("a"),w$=o("BertModel"),A$=o("."),Eo=l(),wa=a("p"),y$=o("There is one class of "),_f=a("code"),L$=o("AutoModel"),IDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wIe=l(),_i=a("h2"),bf=a("a"),bee=a("span"),F(l0.$$.fragment),qDe=l(),vee=a("span"),NDe=o("Extending the Auto Classes"),AIe=l(),kn=a("p"),jDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fee=a("code"),DDe=o("NewModel"),GDe=o(", make sure you have a "),Tee=a("code"),ODe=o("NewModelConfig"),VDe=o(` then you can add those to the auto
classes like this:`),yIe=l(),F(i0.$$.fragment),LIe=l(),x$=a("p"),XDe=o("You will then be able to use the auto classes like you would usually do!"),xIe=l(),F(vf.$$.fragment),$Ie=l(),bi=a("h2"),Ff=a("a"),Mee=a("span"),F(d0.$$.fragment),zDe=l(),Eee=a("span"),WDe=o("AutoConfig"),kIe=l(),Co=a("div"),F(c0.$$.fragment),QDe=l(),f0=a("p"),HDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$$=a("a"),UDe=o("from_pretrained()"),JDe=o(" class method."),YDe=l(),m0=a("p"),KDe=o("This class cannot be instantiated directly using "),Cee=a("code"),ZDe=o("__init__()"),eGe=o(" (throws an error)."),oGe=l(),Er=a("div"),F(g0.$$.fragment),rGe=l(),wee=a("p"),tGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aGe=l(),vi=a("p"),nGe=o("The configuration class to instantiate is selected based on the "),Aee=a("code"),sGe=o("model_type"),lGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yee=a("code"),iGe=o("pretrained_model_name_or_path"),dGe=o(":"),cGe=l(),A=a("ul"),Tf=a("li"),Lee=a("strong"),fGe=o("albert"),mGe=o(" \u2014 "),k$=a("a"),gGe=o("AlbertConfig"),hGe=o(" (ALBERT model)"),pGe=l(),Mf=a("li"),xee=a("strong"),uGe=o("bart"),_Ge=o(" \u2014 "),S$=a("a"),bGe=o("BartConfig"),vGe=o(" (BART model)"),FGe=l(),Ef=a("li"),$ee=a("strong"),TGe=o("beit"),MGe=o(" \u2014 "),R$=a("a"),EGe=o("BeitConfig"),CGe=o(" (BEiT model)"),wGe=l(),Cf=a("li"),kee=a("strong"),AGe=o("bert"),yGe=o(" \u2014 "),P$=a("a"),LGe=o("BertConfig"),xGe=o(" (BERT model)"),$Ge=l(),wf=a("li"),See=a("strong"),kGe=o("bert-generation"),SGe=o(" \u2014 "),B$=a("a"),RGe=o("BertGenerationConfig"),PGe=o(" (Bert Generation model)"),BGe=l(),Af=a("li"),Ree=a("strong"),IGe=o("big_bird"),qGe=o(" \u2014 "),I$=a("a"),NGe=o("BigBirdConfig"),jGe=o(" (BigBird model)"),DGe=l(),yf=a("li"),Pee=a("strong"),GGe=o("bigbird_pegasus"),OGe=o(" \u2014 "),q$=a("a"),VGe=o("BigBirdPegasusConfig"),XGe=o(" (BigBirdPegasus model)"),zGe=l(),Lf=a("li"),Bee=a("strong"),WGe=o("blenderbot"),QGe=o(" \u2014 "),N$=a("a"),HGe=o("BlenderbotConfig"),UGe=o(" (Blenderbot model)"),JGe=l(),xf=a("li"),Iee=a("strong"),YGe=o("blenderbot-small"),KGe=o(" \u2014 "),j$=a("a"),ZGe=o("BlenderbotSmallConfig"),eOe=o(" (BlenderbotSmall model)"),oOe=l(),$f=a("li"),qee=a("strong"),rOe=o("camembert"),tOe=o(" \u2014 "),D$=a("a"),aOe=o("CamembertConfig"),nOe=o(" (CamemBERT model)"),sOe=l(),kf=a("li"),Nee=a("strong"),lOe=o("canine"),iOe=o(" \u2014 "),G$=a("a"),dOe=o("CanineConfig"),cOe=o(" (Canine model)"),fOe=l(),Sf=a("li"),jee=a("strong"),mOe=o("clip"),gOe=o(" \u2014 "),O$=a("a"),hOe=o("CLIPConfig"),pOe=o(" (CLIP model)"),uOe=l(),Rf=a("li"),Dee=a("strong"),_Oe=o("convbert"),bOe=o(" \u2014 "),V$=a("a"),vOe=o("ConvBertConfig"),FOe=o(" (ConvBERT model)"),TOe=l(),Pf=a("li"),Gee=a("strong"),MOe=o("convnext"),EOe=o(" \u2014 "),X$=a("a"),COe=o("ConvNextConfig"),wOe=o(" (ConvNext model)"),AOe=l(),Bf=a("li"),Oee=a("strong"),yOe=o("ctrl"),LOe=o(" \u2014 "),z$=a("a"),xOe=o("CTRLConfig"),$Oe=o(" (CTRL model)"),kOe=l(),If=a("li"),Vee=a("strong"),SOe=o("data2vec-audio"),ROe=o(" \u2014 "),W$=a("a"),POe=o("Data2VecAudioConfig"),BOe=o(" (Data2VecAudio model)"),IOe=l(),qf=a("li"),Xee=a("strong"),qOe=o("data2vec-text"),NOe=o(" \u2014 "),Q$=a("a"),jOe=o("Data2VecTextConfig"),DOe=o(" (Data2VecText model)"),GOe=l(),Nf=a("li"),zee=a("strong"),OOe=o("data2vec-vision"),VOe=o(" \u2014 "),H$=a("a"),XOe=o("Data2VecVisionConfig"),zOe=o(" (Data2VecVision model)"),WOe=l(),jf=a("li"),Wee=a("strong"),QOe=o("deberta"),HOe=o(" \u2014 "),U$=a("a"),UOe=o("DebertaConfig"),JOe=o(" (DeBERTa model)"),YOe=l(),Df=a("li"),Qee=a("strong"),KOe=o("deberta-v2"),ZOe=o(" \u2014 "),J$=a("a"),eVe=o("DebertaV2Config"),oVe=o(" (DeBERTa-v2 model)"),rVe=l(),Gf=a("li"),Hee=a("strong"),tVe=o("decision_transformer"),aVe=o(" \u2014 "),Y$=a("a"),nVe=o("DecisionTransformerConfig"),sVe=o(" (Decision Transformer model)"),lVe=l(),Of=a("li"),Uee=a("strong"),iVe=o("deit"),dVe=o(" \u2014 "),K$=a("a"),cVe=o("DeiTConfig"),fVe=o(" (DeiT model)"),mVe=l(),Vf=a("li"),Jee=a("strong"),gVe=o("detr"),hVe=o(" \u2014 "),Z$=a("a"),pVe=o("DetrConfig"),uVe=o(" (DETR model)"),_Ve=l(),Xf=a("li"),Yee=a("strong"),bVe=o("distilbert"),vVe=o(" \u2014 "),ek=a("a"),FVe=o("DistilBertConfig"),TVe=o(" (DistilBERT model)"),MVe=l(),zf=a("li"),Kee=a("strong"),EVe=o("dpr"),CVe=o(" \u2014 "),ok=a("a"),wVe=o("DPRConfig"),AVe=o(" (DPR model)"),yVe=l(),Wf=a("li"),Zee=a("strong"),LVe=o("dpt"),xVe=o(" \u2014 "),rk=a("a"),$Ve=o("DPTConfig"),kVe=o(" (DPT model)"),SVe=l(),Qf=a("li"),eoe=a("strong"),RVe=o("electra"),PVe=o(" \u2014 "),tk=a("a"),BVe=o("ElectraConfig"),IVe=o(" (ELECTRA model)"),qVe=l(),Hf=a("li"),ooe=a("strong"),NVe=o("encoder-decoder"),jVe=o(" \u2014 "),ak=a("a"),DVe=o("EncoderDecoderConfig"),GVe=o(" (Encoder decoder model)"),OVe=l(),Uf=a("li"),roe=a("strong"),VVe=o("flaubert"),XVe=o(" \u2014 "),nk=a("a"),zVe=o("FlaubertConfig"),WVe=o(" (FlauBERT model)"),QVe=l(),Jf=a("li"),toe=a("strong"),HVe=o("flava"),UVe=o(" \u2014 "),sk=a("a"),JVe=o("FlavaConfig"),YVe=o(" (Flava model)"),KVe=l(),Yf=a("li"),aoe=a("strong"),ZVe=o("fnet"),eXe=o(" \u2014 "),lk=a("a"),oXe=o("FNetConfig"),rXe=o(" (FNet model)"),tXe=l(),Kf=a("li"),noe=a("strong"),aXe=o("fsmt"),nXe=o(" \u2014 "),ik=a("a"),sXe=o("FSMTConfig"),lXe=o(" (FairSeq Machine-Translation model)"),iXe=l(),Zf=a("li"),soe=a("strong"),dXe=o("funnel"),cXe=o(" \u2014 "),dk=a("a"),fXe=o("FunnelConfig"),mXe=o(" (Funnel Transformer model)"),gXe=l(),em=a("li"),loe=a("strong"),hXe=o("glpn"),pXe=o(" \u2014 "),ck=a("a"),uXe=o("GLPNConfig"),_Xe=o(" (GLPN model)"),bXe=l(),om=a("li"),ioe=a("strong"),vXe=o("gpt2"),FXe=o(" \u2014 "),fk=a("a"),TXe=o("GPT2Config"),MXe=o(" (OpenAI GPT-2 model)"),EXe=l(),rm=a("li"),doe=a("strong"),CXe=o("gpt_neo"),wXe=o(" \u2014 "),mk=a("a"),AXe=o("GPTNeoConfig"),yXe=o(" (GPT Neo model)"),LXe=l(),tm=a("li"),coe=a("strong"),xXe=o("gptj"),$Xe=o(" \u2014 "),gk=a("a"),kXe=o("GPTJConfig"),SXe=o(" (GPT-J model)"),RXe=l(),am=a("li"),foe=a("strong"),PXe=o("hubert"),BXe=o(" \u2014 "),hk=a("a"),IXe=o("HubertConfig"),qXe=o(" (Hubert model)"),NXe=l(),nm=a("li"),moe=a("strong"),jXe=o("ibert"),DXe=o(" \u2014 "),pk=a("a"),GXe=o("IBertConfig"),OXe=o(" (I-BERT model)"),VXe=l(),sm=a("li"),goe=a("strong"),XXe=o("imagegpt"),zXe=o(" \u2014 "),uk=a("a"),WXe=o("ImageGPTConfig"),QXe=o(" (ImageGPT model)"),HXe=l(),lm=a("li"),hoe=a("strong"),UXe=o("layoutlm"),JXe=o(" \u2014 "),_k=a("a"),YXe=o("LayoutLMConfig"),KXe=o(" (LayoutLM model)"),ZXe=l(),im=a("li"),poe=a("strong"),eze=o("layoutlmv2"),oze=o(" \u2014 "),bk=a("a"),rze=o("LayoutLMv2Config"),tze=o(" (LayoutLMv2 model)"),aze=l(),dm=a("li"),uoe=a("strong"),nze=o("led"),sze=o(" \u2014 "),vk=a("a"),lze=o("LEDConfig"),ize=o(" (LED model)"),dze=l(),cm=a("li"),_oe=a("strong"),cze=o("longformer"),fze=o(" \u2014 "),Fk=a("a"),mze=o("LongformerConfig"),gze=o(" (Longformer model)"),hze=l(),fm=a("li"),boe=a("strong"),pze=o("luke"),uze=o(" \u2014 "),Tk=a("a"),_ze=o("LukeConfig"),bze=o(" (LUKE model)"),vze=l(),mm=a("li"),voe=a("strong"),Fze=o("lxmert"),Tze=o(" \u2014 "),Mk=a("a"),Mze=o("LxmertConfig"),Eze=o(" (LXMERT model)"),Cze=l(),gm=a("li"),Foe=a("strong"),wze=o("m2m_100"),Aze=o(" \u2014 "),Ek=a("a"),yze=o("M2M100Config"),Lze=o(" (M2M100 model)"),xze=l(),hm=a("li"),Toe=a("strong"),$ze=o("marian"),kze=o(" \u2014 "),Ck=a("a"),Sze=o("MarianConfig"),Rze=o(" (Marian model)"),Pze=l(),pm=a("li"),Moe=a("strong"),Bze=o("maskformer"),Ize=o(" \u2014 "),wk=a("a"),qze=o("MaskFormerConfig"),Nze=o(" (MaskFormer model)"),jze=l(),um=a("li"),Eoe=a("strong"),Dze=o("mbart"),Gze=o(" \u2014 "),Ak=a("a"),Oze=o("MBartConfig"),Vze=o(" (mBART model)"),Xze=l(),_m=a("li"),Coe=a("strong"),zze=o("megatron-bert"),Wze=o(" \u2014 "),yk=a("a"),Qze=o("MegatronBertConfig"),Hze=o(" (MegatronBert model)"),Uze=l(),bm=a("li"),woe=a("strong"),Jze=o("mobilebert"),Yze=o(" \u2014 "),Lk=a("a"),Kze=o("MobileBertConfig"),Zze=o(" (MobileBERT model)"),eWe=l(),vm=a("li"),Aoe=a("strong"),oWe=o("mpnet"),rWe=o(" \u2014 "),xk=a("a"),tWe=o("MPNetConfig"),aWe=o(" (MPNet model)"),nWe=l(),Fm=a("li"),yoe=a("strong"),sWe=o("mt5"),lWe=o(" \u2014 "),$k=a("a"),iWe=o("MT5Config"),dWe=o(" (mT5 model)"),cWe=l(),Tm=a("li"),Loe=a("strong"),fWe=o("nystromformer"),mWe=o(" \u2014 "),kk=a("a"),gWe=o("NystromformerConfig"),hWe=o(" (Nystromformer model)"),pWe=l(),Mm=a("li"),xoe=a("strong"),uWe=o("openai-gpt"),_We=o(" \u2014 "),Sk=a("a"),bWe=o("OpenAIGPTConfig"),vWe=o(" (OpenAI GPT model)"),FWe=l(),Em=a("li"),$oe=a("strong"),TWe=o("opt"),MWe=o(" \u2014 "),Rk=a("a"),EWe=o("OPTConfig"),CWe=o(" (OPT model)"),wWe=l(),Cm=a("li"),koe=a("strong"),AWe=o("pegasus"),yWe=o(" \u2014 "),Pk=a("a"),LWe=o("PegasusConfig"),xWe=o(" (Pegasus model)"),$We=l(),wm=a("li"),Soe=a("strong"),kWe=o("perceiver"),SWe=o(" \u2014 "),Bk=a("a"),RWe=o("PerceiverConfig"),PWe=o(" (Perceiver model)"),BWe=l(),Am=a("li"),Roe=a("strong"),IWe=o("plbart"),qWe=o(" \u2014 "),Ik=a("a"),NWe=o("PLBartConfig"),jWe=o(" (PLBart model)"),DWe=l(),ym=a("li"),Poe=a("strong"),GWe=o("poolformer"),OWe=o(" \u2014 "),qk=a("a"),VWe=o("PoolFormerConfig"),XWe=o(" (PoolFormer model)"),zWe=l(),Lm=a("li"),Boe=a("strong"),WWe=o("prophetnet"),QWe=o(" \u2014 "),Nk=a("a"),HWe=o("ProphetNetConfig"),UWe=o(" (ProphetNet model)"),JWe=l(),xm=a("li"),Ioe=a("strong"),YWe=o("qdqbert"),KWe=o(" \u2014 "),jk=a("a"),ZWe=o("QDQBertConfig"),eQe=o(" (QDQBert model)"),oQe=l(),$m=a("li"),qoe=a("strong"),rQe=o("rag"),tQe=o(" \u2014 "),Dk=a("a"),aQe=o("RagConfig"),nQe=o(" (RAG model)"),sQe=l(),km=a("li"),Noe=a("strong"),lQe=o("realm"),iQe=o(" \u2014 "),Gk=a("a"),dQe=o("RealmConfig"),cQe=o(" (Realm model)"),fQe=l(),Sm=a("li"),joe=a("strong"),mQe=o("reformer"),gQe=o(" \u2014 "),Ok=a("a"),hQe=o("ReformerConfig"),pQe=o(" (Reformer model)"),uQe=l(),Rm=a("li"),Doe=a("strong"),_Qe=o("regnet"),bQe=o(" \u2014 "),Vk=a("a"),vQe=o("RegNetConfig"),FQe=o(" (RegNet model)"),TQe=l(),Pm=a("li"),Goe=a("strong"),MQe=o("rembert"),EQe=o(" \u2014 "),Xk=a("a"),CQe=o("RemBertConfig"),wQe=o(" (RemBERT model)"),AQe=l(),Bm=a("li"),Ooe=a("strong"),yQe=o("resnet"),LQe=o(" \u2014 "),zk=a("a"),xQe=o("ResNetConfig"),$Qe=o(" (ResNet model)"),kQe=l(),Im=a("li"),Voe=a("strong"),SQe=o("retribert"),RQe=o(" \u2014 "),Wk=a("a"),PQe=o("RetriBertConfig"),BQe=o(" (RetriBERT model)"),IQe=l(),qm=a("li"),Xoe=a("strong"),qQe=o("roberta"),NQe=o(" \u2014 "),Qk=a("a"),jQe=o("RobertaConfig"),DQe=o(" (RoBERTa model)"),GQe=l(),Nm=a("li"),zoe=a("strong"),OQe=o("roformer"),VQe=o(" \u2014 "),Hk=a("a"),XQe=o("RoFormerConfig"),zQe=o(" (RoFormer model)"),WQe=l(),jm=a("li"),Woe=a("strong"),QQe=o("segformer"),HQe=o(" \u2014 "),Uk=a("a"),UQe=o("SegformerConfig"),JQe=o(" (SegFormer model)"),YQe=l(),Dm=a("li"),Qoe=a("strong"),KQe=o("sew"),ZQe=o(" \u2014 "),Jk=a("a"),eHe=o("SEWConfig"),oHe=o(" (SEW model)"),rHe=l(),Gm=a("li"),Hoe=a("strong"),tHe=o("sew-d"),aHe=o(" \u2014 "),Yk=a("a"),nHe=o("SEWDConfig"),sHe=o(" (SEW-D model)"),lHe=l(),Om=a("li"),Uoe=a("strong"),iHe=o("speech-encoder-decoder"),dHe=o(" \u2014 "),Kk=a("a"),cHe=o("SpeechEncoderDecoderConfig"),fHe=o(" (Speech Encoder decoder model)"),mHe=l(),Vm=a("li"),Joe=a("strong"),gHe=o("speech_to_text"),hHe=o(" \u2014 "),Zk=a("a"),pHe=o("Speech2TextConfig"),uHe=o(" (Speech2Text model)"),_He=l(),Xm=a("li"),Yoe=a("strong"),bHe=o("speech_to_text_2"),vHe=o(" \u2014 "),eS=a("a"),FHe=o("Speech2Text2Config"),THe=o(" (Speech2Text2 model)"),MHe=l(),zm=a("li"),Koe=a("strong"),EHe=o("splinter"),CHe=o(" \u2014 "),oS=a("a"),wHe=o("SplinterConfig"),AHe=o(" (Splinter model)"),yHe=l(),Wm=a("li"),Zoe=a("strong"),LHe=o("squeezebert"),xHe=o(" \u2014 "),rS=a("a"),$He=o("SqueezeBertConfig"),kHe=o(" (SqueezeBERT model)"),SHe=l(),Qm=a("li"),ere=a("strong"),RHe=o("swin"),PHe=o(" \u2014 "),tS=a("a"),BHe=o("SwinConfig"),IHe=o(" (Swin model)"),qHe=l(),Hm=a("li"),ore=a("strong"),NHe=o("t5"),jHe=o(" \u2014 "),aS=a("a"),DHe=o("T5Config"),GHe=o(" (T5 model)"),OHe=l(),Um=a("li"),rre=a("strong"),VHe=o("tapas"),XHe=o(" \u2014 "),nS=a("a"),zHe=o("TapasConfig"),WHe=o(" (TAPAS model)"),QHe=l(),Jm=a("li"),tre=a("strong"),HHe=o("transfo-xl"),UHe=o(" \u2014 "),sS=a("a"),JHe=o("TransfoXLConfig"),YHe=o(" (Transformer-XL model)"),KHe=l(),Ym=a("li"),are=a("strong"),ZHe=o("trocr"),eUe=o(" \u2014 "),lS=a("a"),oUe=o("TrOCRConfig"),rUe=o(" (TrOCR model)"),tUe=l(),Km=a("li"),nre=a("strong"),aUe=o("unispeech"),nUe=o(" \u2014 "),iS=a("a"),sUe=o("UniSpeechConfig"),lUe=o(" (UniSpeech model)"),iUe=l(),Zm=a("li"),sre=a("strong"),dUe=o("unispeech-sat"),cUe=o(" \u2014 "),dS=a("a"),fUe=o("UniSpeechSatConfig"),mUe=o(" (UniSpeechSat model)"),gUe=l(),eg=a("li"),lre=a("strong"),hUe=o("van"),pUe=o(" \u2014 "),cS=a("a"),uUe=o("VanConfig"),_Ue=o(" (VAN model)"),bUe=l(),og=a("li"),ire=a("strong"),vUe=o("vilt"),FUe=o(" \u2014 "),fS=a("a"),TUe=o("ViltConfig"),MUe=o(" (ViLT model)"),EUe=l(),rg=a("li"),dre=a("strong"),CUe=o("vision-encoder-decoder"),wUe=o(" \u2014 "),mS=a("a"),AUe=o("VisionEncoderDecoderConfig"),yUe=o(" (Vision Encoder decoder model)"),LUe=l(),tg=a("li"),cre=a("strong"),xUe=o("vision-text-dual-encoder"),$Ue=o(" \u2014 "),gS=a("a"),kUe=o("VisionTextDualEncoderConfig"),SUe=o(" (VisionTextDualEncoder model)"),RUe=l(),ag=a("li"),fre=a("strong"),PUe=o("visual_bert"),BUe=o(" \u2014 "),hS=a("a"),IUe=o("VisualBertConfig"),qUe=o(" (VisualBert model)"),NUe=l(),ng=a("li"),mre=a("strong"),jUe=o("vit"),DUe=o(" \u2014 "),pS=a("a"),GUe=o("ViTConfig"),OUe=o(" (ViT model)"),VUe=l(),sg=a("li"),gre=a("strong"),XUe=o("vit_mae"),zUe=o(" \u2014 "),uS=a("a"),WUe=o("ViTMAEConfig"),QUe=o(" (ViTMAE model)"),HUe=l(),lg=a("li"),hre=a("strong"),UUe=o("wav2vec2"),JUe=o(" \u2014 "),_S=a("a"),YUe=o("Wav2Vec2Config"),KUe=o(" (Wav2Vec2 model)"),ZUe=l(),ig=a("li"),pre=a("strong"),eJe=o("wav2vec2-conformer"),oJe=o(" \u2014 "),bS=a("a"),rJe=o("Wav2Vec2ConformerConfig"),tJe=o(" (Wav2Vec2-Conformer model)"),aJe=l(),dg=a("li"),ure=a("strong"),nJe=o("wavlm"),sJe=o(" \u2014 "),vS=a("a"),lJe=o("WavLMConfig"),iJe=o(" (WavLM model)"),dJe=l(),cg=a("li"),_re=a("strong"),cJe=o("xglm"),fJe=o(" \u2014 "),FS=a("a"),mJe=o("XGLMConfig"),gJe=o(" (XGLM model)"),hJe=l(),fg=a("li"),bre=a("strong"),pJe=o("xlm"),uJe=o(" \u2014 "),TS=a("a"),_Je=o("XLMConfig"),bJe=o(" (XLM model)"),vJe=l(),mg=a("li"),vre=a("strong"),FJe=o("xlm-prophetnet"),TJe=o(" \u2014 "),MS=a("a"),MJe=o("XLMProphetNetConfig"),EJe=o(" (XLMProphetNet model)"),CJe=l(),gg=a("li"),Fre=a("strong"),wJe=o("xlm-roberta"),AJe=o(" \u2014 "),ES=a("a"),yJe=o("XLMRobertaConfig"),LJe=o(" (XLM-RoBERTa model)"),xJe=l(),hg=a("li"),Tre=a("strong"),$Je=o("xlm-roberta-xl"),kJe=o(" \u2014 "),CS=a("a"),SJe=o("XLMRobertaXLConfig"),RJe=o(" (XLM-RoBERTa-XL model)"),PJe=l(),pg=a("li"),Mre=a("strong"),BJe=o("xlnet"),IJe=o(" \u2014 "),wS=a("a"),qJe=o("XLNetConfig"),NJe=o(" (XLNet model)"),jJe=l(),ug=a("li"),Ere=a("strong"),DJe=o("yolos"),GJe=o(" \u2014 "),AS=a("a"),OJe=o("YolosConfig"),VJe=o(" (YOLOS model)"),XJe=l(),_g=a("li"),Cre=a("strong"),zJe=o("yoso"),WJe=o(" \u2014 "),yS=a("a"),QJe=o("YosoConfig"),HJe=o(" (YOSO model)"),UJe=l(),F(bg.$$.fragment),JJe=l(),vg=a("div"),F(h0.$$.fragment),YJe=l(),wre=a("p"),KJe=o("Register a new configuration for this class."),SIe=l(),Fi=a("h2"),Fg=a("a"),Are=a("span"),F(p0.$$.fragment),ZJe=l(),yre=a("span"),eYe=o("AutoTokenizer"),RIe=l(),wo=a("div"),F(u0.$$.fragment),oYe=l(),_0=a("p"),rYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LS=a("a"),tYe=o("AutoTokenizer.from_pretrained()"),aYe=o(" class method."),nYe=l(),b0=a("p"),sYe=o("This class cannot be instantiated directly using "),Lre=a("code"),lYe=o("__init__()"),iYe=o(" (throws an error)."),dYe=l(),Cr=a("div"),F(v0.$$.fragment),cYe=l(),xre=a("p"),fYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mYe=l(),Aa=a("p"),gYe=o("The tokenizer class to instantiate is selected based on the "),$re=a("code"),hYe=o("model_type"),pYe=o(` property of the config object (either
passed as an argument or loaded from `),kre=a("code"),uYe=o("pretrained_model_name_or_path"),_Ye=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=a("code"),bYe=o("pretrained_model_name_or_path"),vYe=o(":"),FYe=l(),k=a("ul"),Sn=a("li"),Rre=a("strong"),TYe=o("albert"),MYe=o(" \u2014 "),xS=a("a"),EYe=o("AlbertTokenizer"),CYe=o(" or "),$S=a("a"),wYe=o("AlbertTokenizerFast"),AYe=o(" (ALBERT model)"),yYe=l(),Rn=a("li"),Pre=a("strong"),LYe=o("bart"),xYe=o(" \u2014 "),kS=a("a"),$Ye=o("BartTokenizer"),kYe=o(" or "),SS=a("a"),SYe=o("BartTokenizerFast"),RYe=o(" (BART model)"),PYe=l(),Pn=a("li"),Bre=a("strong"),BYe=o("barthez"),IYe=o(" \u2014 "),RS=a("a"),qYe=o("BarthezTokenizer"),NYe=o(" or "),PS=a("a"),jYe=o("BarthezTokenizerFast"),DYe=o(" (BARThez model)"),GYe=l(),Tg=a("li"),Ire=a("strong"),OYe=o("bartpho"),VYe=o(" \u2014 "),BS=a("a"),XYe=o("BartphoTokenizer"),zYe=o(" (BARTpho model)"),WYe=l(),Bn=a("li"),qre=a("strong"),QYe=o("bert"),HYe=o(" \u2014 "),IS=a("a"),UYe=o("BertTokenizer"),JYe=o(" or "),qS=a("a"),YYe=o("BertTokenizerFast"),KYe=o(" (BERT model)"),ZYe=l(),Mg=a("li"),Nre=a("strong"),eKe=o("bert-generation"),oKe=o(" \u2014 "),NS=a("a"),rKe=o("BertGenerationTokenizer"),tKe=o(" (Bert Generation model)"),aKe=l(),Eg=a("li"),jre=a("strong"),nKe=o("bert-japanese"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("BertJapaneseTokenizer"),iKe=o(" (BertJapanese model)"),dKe=l(),Cg=a("li"),Dre=a("strong"),cKe=o("bertweet"),fKe=o(" \u2014 "),DS=a("a"),mKe=o("BertweetTokenizer"),gKe=o(" (Bertweet model)"),hKe=l(),In=a("li"),Gre=a("strong"),pKe=o("big_bird"),uKe=o(" \u2014 "),GS=a("a"),_Ke=o("BigBirdTokenizer"),bKe=o(" or "),OS=a("a"),vKe=o("BigBirdTokenizerFast"),FKe=o(" (BigBird model)"),TKe=l(),qn=a("li"),Ore=a("strong"),MKe=o("bigbird_pegasus"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("PegasusTokenizer"),wKe=o(" or "),XS=a("a"),AKe=o("PegasusTokenizerFast"),yKe=o(" (BigBirdPegasus model)"),LKe=l(),Nn=a("li"),Vre=a("strong"),xKe=o("blenderbot"),$Ke=o(" \u2014 "),zS=a("a"),kKe=o("BlenderbotTokenizer"),SKe=o(" or "),WS=a("a"),RKe=o("BlenderbotTokenizerFast"),PKe=o(" (Blenderbot model)"),BKe=l(),wg=a("li"),Xre=a("strong"),IKe=o("blenderbot-small"),qKe=o(" \u2014 "),QS=a("a"),NKe=o("BlenderbotSmallTokenizer"),jKe=o(" (BlenderbotSmall model)"),DKe=l(),Ag=a("li"),zre=a("strong"),GKe=o("byt5"),OKe=o(" \u2014 "),HS=a("a"),VKe=o("ByT5Tokenizer"),XKe=o(" (ByT5 model)"),zKe=l(),jn=a("li"),Wre=a("strong"),WKe=o("camembert"),QKe=o(" \u2014 "),US=a("a"),HKe=o("CamembertTokenizer"),UKe=o(" or "),JS=a("a"),JKe=o("CamembertTokenizerFast"),YKe=o(" (CamemBERT model)"),KKe=l(),yg=a("li"),Qre=a("strong"),ZKe=o("canine"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("CanineTokenizer"),rZe=o(" (Canine model)"),tZe=l(),Dn=a("li"),Hre=a("strong"),aZe=o("clip"),nZe=o(" \u2014 "),KS=a("a"),sZe=o("CLIPTokenizer"),lZe=o(" or "),ZS=a("a"),iZe=o("CLIPTokenizerFast"),dZe=o(" (CLIP model)"),cZe=l(),Gn=a("li"),Ure=a("strong"),fZe=o("convbert"),mZe=o(" \u2014 "),eR=a("a"),gZe=o("ConvBertTokenizer"),hZe=o(" or "),oR=a("a"),pZe=o("ConvBertTokenizerFast"),uZe=o(" (ConvBERT model)"),_Ze=l(),On=a("li"),Jre=a("strong"),bZe=o("cpm"),vZe=o(" \u2014 "),rR=a("a"),FZe=o("CpmTokenizer"),TZe=o(" or "),tR=a("a"),MZe=o("CpmTokenizerFast"),EZe=o(" (CPM model)"),CZe=l(),Lg=a("li"),Yre=a("strong"),wZe=o("ctrl"),AZe=o(" \u2014 "),aR=a("a"),yZe=o("CTRLTokenizer"),LZe=o(" (CTRL model)"),xZe=l(),Vn=a("li"),Kre=a("strong"),$Ze=o("data2vec-text"),kZe=o(" \u2014 "),nR=a("a"),SZe=o("RobertaTokenizer"),RZe=o(" or "),sR=a("a"),PZe=o("RobertaTokenizerFast"),BZe=o(" (Data2VecText model)"),IZe=l(),Xn=a("li"),Zre=a("strong"),qZe=o("deberta"),NZe=o(" \u2014 "),lR=a("a"),jZe=o("DebertaTokenizer"),DZe=o(" or "),iR=a("a"),GZe=o("DebertaTokenizerFast"),OZe=o(" (DeBERTa model)"),VZe=l(),zn=a("li"),ete=a("strong"),XZe=o("deberta-v2"),zZe=o(" \u2014 "),dR=a("a"),WZe=o("DebertaV2Tokenizer"),QZe=o(" or "),cR=a("a"),HZe=o("DebertaV2TokenizerFast"),UZe=o(" (DeBERTa-v2 model)"),JZe=l(),Wn=a("li"),ote=a("strong"),YZe=o("distilbert"),KZe=o(" \u2014 "),fR=a("a"),ZZe=o("DistilBertTokenizer"),eeo=o(" or "),mR=a("a"),oeo=o("DistilBertTokenizerFast"),reo=o(" (DistilBERT model)"),teo=l(),Qn=a("li"),rte=a("strong"),aeo=o("dpr"),neo=o(" \u2014 "),gR=a("a"),seo=o("DPRQuestionEncoderTokenizer"),leo=o(" or "),hR=a("a"),ieo=o("DPRQuestionEncoderTokenizerFast"),deo=o(" (DPR model)"),ceo=l(),Hn=a("li"),tte=a("strong"),feo=o("electra"),meo=o(" \u2014 "),pR=a("a"),geo=o("ElectraTokenizer"),heo=o(" or "),uR=a("a"),peo=o("ElectraTokenizerFast"),ueo=o(" (ELECTRA model)"),_eo=l(),xg=a("li"),ate=a("strong"),beo=o("flaubert"),veo=o(" \u2014 "),_R=a("a"),Feo=o("FlaubertTokenizer"),Teo=o(" (FlauBERT model)"),Meo=l(),Un=a("li"),nte=a("strong"),Eeo=o("fnet"),Ceo=o(" \u2014 "),bR=a("a"),weo=o("FNetTokenizer"),Aeo=o(" or "),vR=a("a"),yeo=o("FNetTokenizerFast"),Leo=o(" (FNet model)"),xeo=l(),$g=a("li"),ste=a("strong"),$eo=o("fsmt"),keo=o(" \u2014 "),FR=a("a"),Seo=o("FSMTTokenizer"),Reo=o(" (FairSeq Machine-Translation model)"),Peo=l(),Jn=a("li"),lte=a("strong"),Beo=o("funnel"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("FunnelTokenizer"),Neo=o(" or "),MR=a("a"),jeo=o("FunnelTokenizerFast"),Deo=o(" (Funnel Transformer model)"),Geo=l(),Yn=a("li"),ite=a("strong"),Oeo=o("gpt2"),Veo=o(" \u2014 "),ER=a("a"),Xeo=o("GPT2Tokenizer"),zeo=o(" or "),CR=a("a"),Weo=o("GPT2TokenizerFast"),Qeo=o(" (OpenAI GPT-2 model)"),Heo=l(),Kn=a("li"),dte=a("strong"),Ueo=o("gpt_neo"),Jeo=o(" \u2014 "),wR=a("a"),Yeo=o("GPT2Tokenizer"),Keo=o(" or "),AR=a("a"),Zeo=o("GPT2TokenizerFast"),eoo=o(" (GPT Neo model)"),ooo=l(),Zn=a("li"),cte=a("strong"),roo=o("gptj"),too=o(" \u2014 "),yR=a("a"),aoo=o("GPT2Tokenizer"),noo=o(" or "),LR=a("a"),soo=o("GPT2TokenizerFast"),loo=o(" (GPT-J model)"),ioo=l(),es=a("li"),fte=a("strong"),doo=o("herbert"),coo=o(" \u2014 "),xR=a("a"),foo=o("HerbertTokenizer"),moo=o(" or "),$R=a("a"),goo=o("HerbertTokenizerFast"),hoo=o(" (HerBERT model)"),poo=l(),kg=a("li"),mte=a("strong"),uoo=o("hubert"),_oo=o(" \u2014 "),kR=a("a"),boo=o("Wav2Vec2CTCTokenizer"),voo=o(" (Hubert model)"),Foo=l(),os=a("li"),gte=a("strong"),Too=o("ibert"),Moo=o(" \u2014 "),SR=a("a"),Eoo=o("RobertaTokenizer"),Coo=o(" or "),RR=a("a"),woo=o("RobertaTokenizerFast"),Aoo=o(" (I-BERT model)"),yoo=l(),rs=a("li"),hte=a("strong"),Loo=o("layoutlm"),xoo=o(" \u2014 "),PR=a("a"),$oo=o("LayoutLMTokenizer"),koo=o(" or "),BR=a("a"),Soo=o("LayoutLMTokenizerFast"),Roo=o(" (LayoutLM model)"),Poo=l(),ts=a("li"),pte=a("strong"),Boo=o("layoutlmv2"),Ioo=o(" \u2014 "),IR=a("a"),qoo=o("LayoutLMv2Tokenizer"),Noo=o(" or "),qR=a("a"),joo=o("LayoutLMv2TokenizerFast"),Doo=o(" (LayoutLMv2 model)"),Goo=l(),as=a("li"),ute=a("strong"),Ooo=o("layoutxlm"),Voo=o(" \u2014 "),NR=a("a"),Xoo=o("LayoutXLMTokenizer"),zoo=o(" or "),jR=a("a"),Woo=o("LayoutXLMTokenizerFast"),Qoo=o(" (LayoutXLM model)"),Hoo=l(),ns=a("li"),_te=a("strong"),Uoo=o("led"),Joo=o(" \u2014 "),DR=a("a"),Yoo=o("LEDTokenizer"),Koo=o(" or "),GR=a("a"),Zoo=o("LEDTokenizerFast"),ero=o(" (LED model)"),oro=l(),ss=a("li"),bte=a("strong"),rro=o("longformer"),tro=o(" \u2014 "),OR=a("a"),aro=o("LongformerTokenizer"),nro=o(" or "),VR=a("a"),sro=o("LongformerTokenizerFast"),lro=o(" (Longformer model)"),iro=l(),Sg=a("li"),vte=a("strong"),dro=o("luke"),cro=o(" \u2014 "),XR=a("a"),fro=o("LukeTokenizer"),mro=o(" (LUKE model)"),gro=l(),ls=a("li"),Fte=a("strong"),hro=o("lxmert"),pro=o(" \u2014 "),zR=a("a"),uro=o("LxmertTokenizer"),_ro=o(" or "),WR=a("a"),bro=o("LxmertTokenizerFast"),vro=o(" (LXMERT model)"),Fro=l(),Rg=a("li"),Tte=a("strong"),Tro=o("m2m_100"),Mro=o(" \u2014 "),QR=a("a"),Ero=o("M2M100Tokenizer"),Cro=o(" (M2M100 model)"),wro=l(),Pg=a("li"),Mte=a("strong"),Aro=o("marian"),yro=o(" \u2014 "),HR=a("a"),Lro=o("MarianTokenizer"),xro=o(" (Marian model)"),$ro=l(),is=a("li"),Ete=a("strong"),kro=o("mbart"),Sro=o(" \u2014 "),UR=a("a"),Rro=o("MBartTokenizer"),Pro=o(" or "),JR=a("a"),Bro=o("MBartTokenizerFast"),Iro=o(" (mBART model)"),qro=l(),ds=a("li"),Cte=a("strong"),Nro=o("mbart50"),jro=o(" \u2014 "),YR=a("a"),Dro=o("MBart50Tokenizer"),Gro=o(" or "),KR=a("a"),Oro=o("MBart50TokenizerFast"),Vro=o(" (mBART-50 model)"),Xro=l(),cs=a("li"),wte=a("strong"),zro=o("megatron-bert"),Wro=o(" \u2014 "),ZR=a("a"),Qro=o("BertTokenizer"),Hro=o(" or "),eP=a("a"),Uro=o("BertTokenizerFast"),Jro=o(" (MegatronBert model)"),Yro=l(),Bg=a("li"),Ate=a("strong"),Kro=o("mluke"),Zro=o(" \u2014 "),oP=a("a"),eto=o("MLukeTokenizer"),oto=o(" (mLUKE model)"),rto=l(),fs=a("li"),yte=a("strong"),tto=o("mobilebert"),ato=o(" \u2014 "),rP=a("a"),nto=o("MobileBertTokenizer"),sto=o(" or "),tP=a("a"),lto=o("MobileBertTokenizerFast"),ito=o(" (MobileBERT model)"),dto=l(),ms=a("li"),Lte=a("strong"),cto=o("mpnet"),fto=o(" \u2014 "),aP=a("a"),mto=o("MPNetTokenizer"),gto=o(" or "),nP=a("a"),hto=o("MPNetTokenizerFast"),pto=o(" (MPNet model)"),uto=l(),gs=a("li"),xte=a("strong"),_to=o("mt5"),bto=o(" \u2014 "),sP=a("a"),vto=o("MT5Tokenizer"),Fto=o(" or "),lP=a("a"),Tto=o("MT5TokenizerFast"),Mto=o(" (mT5 model)"),Eto=l(),hs=a("li"),$te=a("strong"),Cto=o("nystromformer"),wto=o(" \u2014 "),iP=a("a"),Ato=o("AlbertTokenizer"),yto=o(" or "),dP=a("a"),Lto=o("AlbertTokenizerFast"),xto=o(" (Nystromformer model)"),$to=l(),ps=a("li"),kte=a("strong"),kto=o("openai-gpt"),Sto=o(" \u2014 "),cP=a("a"),Rto=o("OpenAIGPTTokenizer"),Pto=o(" or "),fP=a("a"),Bto=o("OpenAIGPTTokenizerFast"),Ito=o(" (OpenAI GPT model)"),qto=l(),Ig=a("li"),Ste=a("strong"),Nto=o("opt"),jto=o(" \u2014 "),mP=a("a"),Dto=o("GPT2Tokenizer"),Gto=o(" (OPT model)"),Oto=l(),us=a("li"),Rte=a("strong"),Vto=o("pegasus"),Xto=o(" \u2014 "),gP=a("a"),zto=o("PegasusTokenizer"),Wto=o(" or "),hP=a("a"),Qto=o("PegasusTokenizerFast"),Hto=o(" (Pegasus model)"),Uto=l(),qg=a("li"),Pte=a("strong"),Jto=o("perceiver"),Yto=o(" \u2014 "),pP=a("a"),Kto=o("PerceiverTokenizer"),Zto=o(" (Perceiver model)"),eao=l(),Ng=a("li"),Bte=a("strong"),oao=o("phobert"),rao=o(" \u2014 "),uP=a("a"),tao=o("PhobertTokenizer"),aao=o(" (PhoBERT model)"),nao=l(),jg=a("li"),Ite=a("strong"),sao=o("plbart"),lao=o(" \u2014 "),_P=a("a"),iao=o("PLBartTokenizer"),dao=o(" (PLBart model)"),cao=l(),Dg=a("li"),qte=a("strong"),fao=o("prophetnet"),mao=o(" \u2014 "),bP=a("a"),gao=o("ProphetNetTokenizer"),hao=o(" (ProphetNet model)"),pao=l(),_s=a("li"),Nte=a("strong"),uao=o("qdqbert"),_ao=o(" \u2014 "),vP=a("a"),bao=o("BertTokenizer"),vao=o(" or "),FP=a("a"),Fao=o("BertTokenizerFast"),Tao=o(" (QDQBert model)"),Mao=l(),Gg=a("li"),jte=a("strong"),Eao=o("rag"),Cao=o(" \u2014 "),TP=a("a"),wao=o("RagTokenizer"),Aao=o(" (RAG model)"),yao=l(),bs=a("li"),Dte=a("strong"),Lao=o("realm"),xao=o(" \u2014 "),MP=a("a"),$ao=o("RealmTokenizer"),kao=o(" or "),EP=a("a"),Sao=o("RealmTokenizerFast"),Rao=o(" (Realm model)"),Pao=l(),vs=a("li"),Gte=a("strong"),Bao=o("reformer"),Iao=o(" \u2014 "),CP=a("a"),qao=o("ReformerTokenizer"),Nao=o(" or "),wP=a("a"),jao=o("ReformerTokenizerFast"),Dao=o(" (Reformer model)"),Gao=l(),Fs=a("li"),Ote=a("strong"),Oao=o("rembert"),Vao=o(" \u2014 "),AP=a("a"),Xao=o("RemBertTokenizer"),zao=o(" or "),yP=a("a"),Wao=o("RemBertTokenizerFast"),Qao=o(" (RemBERT model)"),Hao=l(),Ts=a("li"),Vte=a("strong"),Uao=o("retribert"),Jao=o(" \u2014 "),LP=a("a"),Yao=o("RetriBertTokenizer"),Kao=o(" or "),xP=a("a"),Zao=o("RetriBertTokenizerFast"),eno=o(" (RetriBERT model)"),ono=l(),Ms=a("li"),Xte=a("strong"),rno=o("roberta"),tno=o(" \u2014 "),$P=a("a"),ano=o("RobertaTokenizer"),nno=o(" or "),kP=a("a"),sno=o("RobertaTokenizerFast"),lno=o(" (RoBERTa model)"),ino=l(),Es=a("li"),zte=a("strong"),dno=o("roformer"),cno=o(" \u2014 "),SP=a("a"),fno=o("RoFormerTokenizer"),mno=o(" or "),RP=a("a"),gno=o("RoFormerTokenizerFast"),hno=o(" (RoFormer model)"),pno=l(),Og=a("li"),Wte=a("strong"),uno=o("speech_to_text"),_no=o(" \u2014 "),PP=a("a"),bno=o("Speech2TextTokenizer"),vno=o(" (Speech2Text model)"),Fno=l(),Vg=a("li"),Qte=a("strong"),Tno=o("speech_to_text_2"),Mno=o(" \u2014 "),BP=a("a"),Eno=o("Speech2Text2Tokenizer"),Cno=o(" (Speech2Text2 model)"),wno=l(),Cs=a("li"),Hte=a("strong"),Ano=o("splinter"),yno=o(" \u2014 "),IP=a("a"),Lno=o("SplinterTokenizer"),xno=o(" or "),qP=a("a"),$no=o("SplinterTokenizerFast"),kno=o(" (Splinter model)"),Sno=l(),ws=a("li"),Ute=a("strong"),Rno=o("squeezebert"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("SqueezeBertTokenizer"),Ino=o(" or "),jP=a("a"),qno=o("SqueezeBertTokenizerFast"),Nno=o(" (SqueezeBERT model)"),jno=l(),As=a("li"),Jte=a("strong"),Dno=o("t5"),Gno=o(" \u2014 "),DP=a("a"),Ono=o("T5Tokenizer"),Vno=o(" or "),GP=a("a"),Xno=o("T5TokenizerFast"),zno=o(" (T5 model)"),Wno=l(),Xg=a("li"),Yte=a("strong"),Qno=o("tapas"),Hno=o(" \u2014 "),OP=a("a"),Uno=o("TapasTokenizer"),Jno=o(" (TAPAS model)"),Yno=l(),zg=a("li"),Kte=a("strong"),Kno=o("tapex"),Zno=o(" \u2014 "),VP=a("a"),eso=o("TapexTokenizer"),oso=o(" (TAPEX model)"),rso=l(),Wg=a("li"),Zte=a("strong"),tso=o("transfo-xl"),aso=o(" \u2014 "),XP=a("a"),nso=o("TransfoXLTokenizer"),sso=o(" (Transformer-XL model)"),lso=l(),ys=a("li"),eae=a("strong"),iso=o("visual_bert"),dso=o(" \u2014 "),zP=a("a"),cso=o("BertTokenizer"),fso=o(" or "),WP=a("a"),mso=o("BertTokenizerFast"),gso=o(" (VisualBert model)"),hso=l(),Qg=a("li"),oae=a("strong"),pso=o("wav2vec2"),uso=o(" \u2014 "),QP=a("a"),_so=o("Wav2Vec2CTCTokenizer"),bso=o(" (Wav2Vec2 model)"),vso=l(),Hg=a("li"),rae=a("strong"),Fso=o("wav2vec2-conformer"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("Wav2Vec2CTCTokenizer"),Eso=o(" (Wav2Vec2-Conformer model)"),Cso=l(),Ug=a("li"),tae=a("strong"),wso=o("wav2vec2_phoneme"),Aso=o(" \u2014 "),UP=a("a"),yso=o("Wav2Vec2PhonemeCTCTokenizer"),Lso=o(" (Wav2Vec2Phoneme model)"),xso=l(),Ls=a("li"),aae=a("strong"),$so=o("xglm"),kso=o(" \u2014 "),JP=a("a"),Sso=o("XGLMTokenizer"),Rso=o(" or "),YP=a("a"),Pso=o("XGLMTokenizerFast"),Bso=o(" (XGLM model)"),Iso=l(),Jg=a("li"),nae=a("strong"),qso=o("xlm"),Nso=o(" \u2014 "),KP=a("a"),jso=o("XLMTokenizer"),Dso=o(" (XLM model)"),Gso=l(),Yg=a("li"),sae=a("strong"),Oso=o("xlm-prophetnet"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("XLMProphetNetTokenizer"),zso=o(" (XLMProphetNet model)"),Wso=l(),xs=a("li"),lae=a("strong"),Qso=o("xlm-roberta"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("XLMRobertaTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("XLMRobertaTokenizerFast"),Kso=o(" (XLM-RoBERTa model)"),Zso=l(),$s=a("li"),iae=a("strong"),elo=o("xlm-roberta-xl"),olo=o(" \u2014 "),rB=a("a"),rlo=o("RobertaTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("RobertaTokenizerFast"),nlo=o(" (XLM-RoBERTa-XL model)"),slo=l(),ks=a("li"),dae=a("strong"),llo=o("xlnet"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("XLNetTokenizer"),clo=o(" or "),nB=a("a"),flo=o("XLNetTokenizerFast"),mlo=o(" (XLNet model)"),glo=l(),Ss=a("li"),cae=a("strong"),hlo=o("yoso"),plo=o(" \u2014 "),sB=a("a"),ulo=o("AlbertTokenizer"),_lo=o(" or "),lB=a("a"),blo=o("AlbertTokenizerFast"),vlo=o(" (YOSO model)"),Flo=l(),F(Kg.$$.fragment),Tlo=l(),Zg=a("div"),F(F0.$$.fragment),Mlo=l(),fae=a("p"),Elo=o("Register a new tokenizer in this mapping."),PIe=l(),Ti=a("h2"),eh=a("a"),mae=a("span"),F(T0.$$.fragment),Clo=l(),gae=a("span"),wlo=o("AutoFeatureExtractor"),BIe=l(),Ao=a("div"),F(M0.$$.fragment),Alo=l(),E0=a("p"),ylo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=a("a"),Llo=o("AutoFeatureExtractor.from_pretrained()"),xlo=o(" class method."),$lo=l(),C0=a("p"),klo=o("This class cannot be instantiated directly using "),hae=a("code"),Slo=o("__init__()"),Rlo=o(" (throws an error)."),Plo=l(),He=a("div"),F(w0.$$.fragment),Blo=l(),pae=a("p"),Ilo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qlo=l(),ya=a("p"),Nlo=o("The feature extractor class to instantiate is selected based on the "),uae=a("code"),jlo=o("model_type"),Dlo=o(` property of the config object
(either passed as an argument or loaded from `),_ae=a("code"),Glo=o("pretrained_model_name_or_path"),Olo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bae=a("code"),Vlo=o("pretrained_model_name_or_path"),Xlo=o(":"),zlo=l(),Z=a("ul"),oh=a("li"),vae=a("strong"),Wlo=o("beit"),Qlo=o(" \u2014 "),dB=a("a"),Hlo=o("BeitFeatureExtractor"),Ulo=o(" (BEiT model)"),Jlo=l(),rh=a("li"),Fae=a("strong"),Ylo=o("clip"),Klo=o(" \u2014 "),cB=a("a"),Zlo=o("CLIPFeatureExtractor"),eio=o(" (CLIP model)"),oio=l(),th=a("li"),Tae=a("strong"),rio=o("convnext"),tio=o(" \u2014 "),fB=a("a"),aio=o("ConvNextFeatureExtractor"),nio=o(" (ConvNext model)"),sio=l(),ah=a("li"),Mae=a("strong"),lio=o("data2vec-audio"),iio=o(" \u2014 "),mB=a("a"),dio=o("Wav2Vec2FeatureExtractor"),cio=o(" (Data2VecAudio model)"),fio=l(),nh=a("li"),Eae=a("strong"),mio=o("data2vec-vision"),gio=o(" \u2014 "),gB=a("a"),hio=o("BeitFeatureExtractor"),pio=o(" (Data2VecVision model)"),uio=l(),sh=a("li"),Cae=a("strong"),_io=o("deit"),bio=o(" \u2014 "),hB=a("a"),vio=o("DeiTFeatureExtractor"),Fio=o(" (DeiT model)"),Tio=l(),lh=a("li"),wae=a("strong"),Mio=o("detr"),Eio=o(" \u2014 "),pB=a("a"),Cio=o("DetrFeatureExtractor"),wio=o(" (DETR model)"),Aio=l(),ih=a("li"),Aae=a("strong"),yio=o("dpt"),Lio=o(" \u2014 "),uB=a("a"),xio=o("DPTFeatureExtractor"),$io=o(" (DPT model)"),kio=l(),dh=a("li"),yae=a("strong"),Sio=o("flava"),Rio=o(" \u2014 "),_B=a("a"),Pio=o("FlavaFeatureExtractor"),Bio=o(" (Flava model)"),Iio=l(),ch=a("li"),Lae=a("strong"),qio=o("glpn"),Nio=o(" \u2014 "),bB=a("a"),jio=o("GLPNFeatureExtractor"),Dio=o(" (GLPN model)"),Gio=l(),fh=a("li"),xae=a("strong"),Oio=o("hubert"),Vio=o(" \u2014 "),vB=a("a"),Xio=o("Wav2Vec2FeatureExtractor"),zio=o(" (Hubert model)"),Wio=l(),mh=a("li"),$ae=a("strong"),Qio=o("layoutlmv2"),Hio=o(" \u2014 "),FB=a("a"),Uio=o("LayoutLMv2FeatureExtractor"),Jio=o(" (LayoutLMv2 model)"),Yio=l(),gh=a("li"),kae=a("strong"),Kio=o("maskformer"),Zio=o(" \u2014 "),TB=a("a"),edo=o("MaskFormerFeatureExtractor"),odo=o(" (MaskFormer model)"),rdo=l(),hh=a("li"),Sae=a("strong"),tdo=o("perceiver"),ado=o(" \u2014 "),MB=a("a"),ndo=o("PerceiverFeatureExtractor"),sdo=o(" (Perceiver model)"),ldo=l(),ph=a("li"),Rae=a("strong"),ido=o("poolformer"),ddo=o(" \u2014 "),EB=a("a"),cdo=o("PoolFormerFeatureExtractor"),fdo=o(" (PoolFormer model)"),mdo=l(),uh=a("li"),Pae=a("strong"),gdo=o("regnet"),hdo=o(" \u2014 "),CB=a("a"),pdo=o("ConvNextFeatureExtractor"),udo=o(" (RegNet model)"),_do=l(),_h=a("li"),Bae=a("strong"),bdo=o("resnet"),vdo=o(" \u2014 "),wB=a("a"),Fdo=o("ConvNextFeatureExtractor"),Tdo=o(" (ResNet model)"),Mdo=l(),bh=a("li"),Iae=a("strong"),Edo=o("segformer"),Cdo=o(" \u2014 "),AB=a("a"),wdo=o("SegformerFeatureExtractor"),Ado=o(" (SegFormer model)"),ydo=l(),vh=a("li"),qae=a("strong"),Ldo=o("speech_to_text"),xdo=o(" \u2014 "),yB=a("a"),$do=o("Speech2TextFeatureExtractor"),kdo=o(" (Speech2Text model)"),Sdo=l(),Fh=a("li"),Nae=a("strong"),Rdo=o("swin"),Pdo=o(" \u2014 "),LB=a("a"),Bdo=o("ViTFeatureExtractor"),Ido=o(" (Swin model)"),qdo=l(),Th=a("li"),jae=a("strong"),Ndo=o("van"),jdo=o(" \u2014 "),xB=a("a"),Ddo=o("ConvNextFeatureExtractor"),Gdo=o(" (VAN model)"),Odo=l(),Mh=a("li"),Dae=a("strong"),Vdo=o("vit"),Xdo=o(" \u2014 "),$B=a("a"),zdo=o("ViTFeatureExtractor"),Wdo=o(" (ViT model)"),Qdo=l(),Eh=a("li"),Gae=a("strong"),Hdo=o("vit_mae"),Udo=o(" \u2014 "),kB=a("a"),Jdo=o("ViTFeatureExtractor"),Ydo=o(" (ViTMAE model)"),Kdo=l(),Ch=a("li"),Oae=a("strong"),Zdo=o("wav2vec2"),eco=o(" \u2014 "),SB=a("a"),oco=o("Wav2Vec2FeatureExtractor"),rco=o(" (Wav2Vec2 model)"),tco=l(),wh=a("li"),Vae=a("strong"),aco=o("wav2vec2-conformer"),nco=o(" \u2014 "),RB=a("a"),sco=o("Wav2Vec2FeatureExtractor"),lco=o(" (Wav2Vec2-Conformer model)"),ico=l(),Ah=a("li"),Xae=a("strong"),dco=o("yolos"),cco=o(" \u2014 "),PB=a("a"),fco=o("YolosFeatureExtractor"),mco=o(" (YOLOS model)"),gco=l(),F(yh.$$.fragment),hco=l(),F(Lh.$$.fragment),pco=l(),xh=a("div"),F(A0.$$.fragment),uco=l(),zae=a("p"),_co=o("Register a new feature extractor for this class."),IIe=l(),Mi=a("h2"),$h=a("a"),Wae=a("span"),F(y0.$$.fragment),bco=l(),Qae=a("span"),vco=o("AutoProcessor"),qIe=l(),yo=a("div"),F(L0.$$.fragment),Fco=l(),x0=a("p"),Tco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=a("a"),Mco=o("AutoProcessor.from_pretrained()"),Eco=o(" class method."),Cco=l(),$0=a("p"),wco=o("This class cannot be instantiated directly using "),Hae=a("code"),Aco=o("__init__()"),yco=o(" (throws an error)."),Lco=l(),Ue=a("div"),F(k0.$$.fragment),xco=l(),Uae=a("p"),$co=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kco=l(),Ei=a("p"),Sco=o("The processor class to instantiate is selected based on the "),Jae=a("code"),Rco=o("model_type"),Pco=o(` property of the config object (either
passed as an argument or loaded from `),Yae=a("code"),Bco=o("pretrained_model_name_or_path"),Ico=o(" if possible):"),qco=l(),pe=a("ul"),kh=a("li"),Kae=a("strong"),Nco=o("clip"),jco=o(" \u2014 "),IB=a("a"),Dco=o("CLIPProcessor"),Gco=o(" (CLIP model)"),Oco=l(),Sh=a("li"),Zae=a("strong"),Vco=o("flava"),Xco=o(" \u2014 "),ene=a("code"),zco=o("FLAVAProcessor"),Wco=o(" (Flava model)"),Qco=l(),Rh=a("li"),one=a("strong"),Hco=o("layoutlmv2"),Uco=o(" \u2014 "),qB=a("a"),Jco=o("LayoutLMv2Processor"),Yco=o(" (LayoutLMv2 model)"),Kco=l(),Ph=a("li"),rne=a("strong"),Zco=o("layoutxlm"),efo=o(" \u2014 "),NB=a("a"),ofo=o("LayoutXLMProcessor"),rfo=o(" (LayoutXLM model)"),tfo=l(),Bh=a("li"),tne=a("strong"),afo=o("sew"),nfo=o(" \u2014 "),jB=a("a"),sfo=o("Wav2Vec2Processor"),lfo=o(" (SEW model)"),ifo=l(),Ih=a("li"),ane=a("strong"),dfo=o("sew-d"),cfo=o(" \u2014 "),DB=a("a"),ffo=o("Wav2Vec2Processor"),mfo=o(" (SEW-D model)"),gfo=l(),qh=a("li"),nne=a("strong"),hfo=o("speech_to_text"),pfo=o(" \u2014 "),GB=a("a"),ufo=o("Speech2TextProcessor"),_fo=o(" (Speech2Text model)"),bfo=l(),Nh=a("li"),sne=a("strong"),vfo=o("speech_to_text_2"),Ffo=o(" \u2014 "),OB=a("a"),Tfo=o("Speech2Text2Processor"),Mfo=o(" (Speech2Text2 model)"),Efo=l(),jh=a("li"),lne=a("strong"),Cfo=o("trocr"),wfo=o(" \u2014 "),VB=a("a"),Afo=o("TrOCRProcessor"),yfo=o(" (TrOCR model)"),Lfo=l(),Dh=a("li"),ine=a("strong"),xfo=o("unispeech"),$fo=o(" \u2014 "),XB=a("a"),kfo=o("Wav2Vec2Processor"),Sfo=o(" (UniSpeech model)"),Rfo=l(),Gh=a("li"),dne=a("strong"),Pfo=o("unispeech-sat"),Bfo=o(" \u2014 "),zB=a("a"),Ifo=o("Wav2Vec2Processor"),qfo=o(" (UniSpeechSat model)"),Nfo=l(),Oh=a("li"),cne=a("strong"),jfo=o("vilt"),Dfo=o(" \u2014 "),WB=a("a"),Gfo=o("ViltProcessor"),Ofo=o(" (ViLT model)"),Vfo=l(),Vh=a("li"),fne=a("strong"),Xfo=o("vision-text-dual-encoder"),zfo=o(" \u2014 "),QB=a("a"),Wfo=o("VisionTextDualEncoderProcessor"),Qfo=o(" (VisionTextDualEncoder model)"),Hfo=l(),Xh=a("li"),mne=a("strong"),Ufo=o("wav2vec2"),Jfo=o(" \u2014 "),HB=a("a"),Yfo=o("Wav2Vec2Processor"),Kfo=o(" (Wav2Vec2 model)"),Zfo=l(),zh=a("li"),gne=a("strong"),emo=o("wav2vec2-conformer"),omo=o(" \u2014 "),UB=a("a"),rmo=o("Wav2Vec2Processor"),tmo=o(" (Wav2Vec2-Conformer model)"),amo=l(),Wh=a("li"),hne=a("strong"),nmo=o("wavlm"),smo=o(" \u2014 "),JB=a("a"),lmo=o("Wav2Vec2Processor"),imo=o(" (WavLM model)"),dmo=l(),F(Qh.$$.fragment),cmo=l(),F(Hh.$$.fragment),fmo=l(),Uh=a("div"),F(S0.$$.fragment),mmo=l(),pne=a("p"),gmo=o("Register a new processor for this class."),NIe=l(),Ci=a("h2"),Jh=a("a"),une=a("span"),F(R0.$$.fragment),hmo=l(),_ne=a("span"),pmo=o("AutoModel"),jIe=l(),Lo=a("div"),F(P0.$$.fragment),umo=l(),wi=a("p"),_mo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YB=a("a"),bmo=o("from_pretrained()"),vmo=o(" class method or the "),KB=a("a"),Fmo=o("from_config()"),Tmo=o(` class
method.`),Mmo=l(),B0=a("p"),Emo=o("This class cannot be instantiated directly using "),bne=a("code"),Cmo=o("__init__()"),wmo=o(" (throws an error)."),Amo=l(),tt=a("div"),F(I0.$$.fragment),ymo=l(),vne=a("p"),Lmo=o("Instantiates one of the base model classes of the library from a configuration."),xmo=l(),Ai=a("p"),$mo=o(`Note:
Loading a model from its configuration file does `),Fne=a("strong"),kmo=o("not"),Smo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZB=a("a"),Rmo=o("from_pretrained()"),Pmo=o(" to load the model weights."),Bmo=l(),F(Yh.$$.fragment),Imo=l(),Je=a("div"),F(q0.$$.fragment),qmo=l(),Tne=a("p"),Nmo=o("Instantiate one of the base model classes of the library from a pretrained model."),jmo=l(),La=a("p"),Dmo=o("The model class to instantiate is selected based on the "),Mne=a("code"),Gmo=o("model_type"),Omo=o(` property of the config object (either
passed as an argument or loaded from `),Ene=a("code"),Vmo=o("pretrained_model_name_or_path"),Xmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=a("code"),zmo=o("pretrained_model_name_or_path"),Wmo=o(":"),Qmo=l(),x=a("ul"),Kh=a("li"),wne=a("strong"),Hmo=o("albert"),Umo=o(" \u2014 "),eI=a("a"),Jmo=o("AlbertModel"),Ymo=o(" (ALBERT model)"),Kmo=l(),Zh=a("li"),Ane=a("strong"),Zmo=o("bart"),ego=o(" \u2014 "),oI=a("a"),ogo=o("BartModel"),rgo=o(" (BART model)"),tgo=l(),ep=a("li"),yne=a("strong"),ago=o("beit"),ngo=o(" \u2014 "),rI=a("a"),sgo=o("BeitModel"),lgo=o(" (BEiT model)"),igo=l(),op=a("li"),Lne=a("strong"),dgo=o("bert"),cgo=o(" \u2014 "),tI=a("a"),fgo=o("BertModel"),mgo=o(" (BERT model)"),ggo=l(),rp=a("li"),xne=a("strong"),hgo=o("bert-generation"),pgo=o(" \u2014 "),aI=a("a"),ugo=o("BertGenerationEncoder"),_go=o(" (Bert Generation model)"),bgo=l(),tp=a("li"),$ne=a("strong"),vgo=o("big_bird"),Fgo=o(" \u2014 "),nI=a("a"),Tgo=o("BigBirdModel"),Mgo=o(" (BigBird model)"),Ego=l(),ap=a("li"),kne=a("strong"),Cgo=o("bigbird_pegasus"),wgo=o(" \u2014 "),sI=a("a"),Ago=o("BigBirdPegasusModel"),ygo=o(" (BigBirdPegasus model)"),Lgo=l(),np=a("li"),Sne=a("strong"),xgo=o("blenderbot"),$go=o(" \u2014 "),lI=a("a"),kgo=o("BlenderbotModel"),Sgo=o(" (Blenderbot model)"),Rgo=l(),sp=a("li"),Rne=a("strong"),Pgo=o("blenderbot-small"),Bgo=o(" \u2014 "),iI=a("a"),Igo=o("BlenderbotSmallModel"),qgo=o(" (BlenderbotSmall model)"),Ngo=l(),lp=a("li"),Pne=a("strong"),jgo=o("camembert"),Dgo=o(" \u2014 "),dI=a("a"),Ggo=o("CamembertModel"),Ogo=o(" (CamemBERT model)"),Vgo=l(),ip=a("li"),Bne=a("strong"),Xgo=o("canine"),zgo=o(" \u2014 "),cI=a("a"),Wgo=o("CanineModel"),Qgo=o(" (Canine model)"),Hgo=l(),dp=a("li"),Ine=a("strong"),Ugo=o("clip"),Jgo=o(" \u2014 "),fI=a("a"),Ygo=o("CLIPModel"),Kgo=o(" (CLIP model)"),Zgo=l(),cp=a("li"),qne=a("strong"),eho=o("convbert"),oho=o(" \u2014 "),mI=a("a"),rho=o("ConvBertModel"),tho=o(" (ConvBERT model)"),aho=l(),fp=a("li"),Nne=a("strong"),nho=o("convnext"),sho=o(" \u2014 "),gI=a("a"),lho=o("ConvNextModel"),iho=o(" (ConvNext model)"),dho=l(),mp=a("li"),jne=a("strong"),cho=o("ctrl"),fho=o(" \u2014 "),hI=a("a"),mho=o("CTRLModel"),gho=o(" (CTRL model)"),hho=l(),gp=a("li"),Dne=a("strong"),pho=o("data2vec-audio"),uho=o(" \u2014 "),pI=a("a"),_ho=o("Data2VecAudioModel"),bho=o(" (Data2VecAudio model)"),vho=l(),hp=a("li"),Gne=a("strong"),Fho=o("data2vec-text"),Tho=o(" \u2014 "),uI=a("a"),Mho=o("Data2VecTextModel"),Eho=o(" (Data2VecText model)"),Cho=l(),pp=a("li"),One=a("strong"),who=o("data2vec-vision"),Aho=o(" \u2014 "),_I=a("a"),yho=o("Data2VecVisionModel"),Lho=o(" (Data2VecVision model)"),xho=l(),up=a("li"),Vne=a("strong"),$ho=o("deberta"),kho=o(" \u2014 "),bI=a("a"),Sho=o("DebertaModel"),Rho=o(" (DeBERTa model)"),Pho=l(),_p=a("li"),Xne=a("strong"),Bho=o("deberta-v2"),Iho=o(" \u2014 "),vI=a("a"),qho=o("DebertaV2Model"),Nho=o(" (DeBERTa-v2 model)"),jho=l(),bp=a("li"),zne=a("strong"),Dho=o("decision_transformer"),Gho=o(" \u2014 "),FI=a("a"),Oho=o("DecisionTransformerModel"),Vho=o(" (Decision Transformer model)"),Xho=l(),vp=a("li"),Wne=a("strong"),zho=o("deit"),Who=o(" \u2014 "),TI=a("a"),Qho=o("DeiTModel"),Hho=o(" (DeiT model)"),Uho=l(),Fp=a("li"),Qne=a("strong"),Jho=o("detr"),Yho=o(" \u2014 "),MI=a("a"),Kho=o("DetrModel"),Zho=o(" (DETR model)"),epo=l(),Tp=a("li"),Hne=a("strong"),opo=o("distilbert"),rpo=o(" \u2014 "),EI=a("a"),tpo=o("DistilBertModel"),apo=o(" (DistilBERT model)"),npo=l(),Mp=a("li"),Une=a("strong"),spo=o("dpr"),lpo=o(" \u2014 "),CI=a("a"),ipo=o("DPRQuestionEncoder"),dpo=o(" (DPR model)"),cpo=l(),Ep=a("li"),Jne=a("strong"),fpo=o("dpt"),mpo=o(" \u2014 "),wI=a("a"),gpo=o("DPTModel"),hpo=o(" (DPT model)"),ppo=l(),Cp=a("li"),Yne=a("strong"),upo=o("electra"),_po=o(" \u2014 "),AI=a("a"),bpo=o("ElectraModel"),vpo=o(" (ELECTRA model)"),Fpo=l(),wp=a("li"),Kne=a("strong"),Tpo=o("flaubert"),Mpo=o(" \u2014 "),yI=a("a"),Epo=o("FlaubertModel"),Cpo=o(" (FlauBERT model)"),wpo=l(),Ap=a("li"),Zne=a("strong"),Apo=o("flava"),ypo=o(" \u2014 "),LI=a("a"),Lpo=o("FlavaModel"),xpo=o(" (Flava model)"),$po=l(),yp=a("li"),ese=a("strong"),kpo=o("fnet"),Spo=o(" \u2014 "),xI=a("a"),Rpo=o("FNetModel"),Ppo=o(" (FNet model)"),Bpo=l(),Lp=a("li"),ose=a("strong"),Ipo=o("fsmt"),qpo=o(" \u2014 "),$I=a("a"),Npo=o("FSMTModel"),jpo=o(" (FairSeq Machine-Translation model)"),Dpo=l(),Rs=a("li"),rse=a("strong"),Gpo=o("funnel"),Opo=o(" \u2014 "),kI=a("a"),Vpo=o("FunnelModel"),Xpo=o(" or "),SI=a("a"),zpo=o("FunnelBaseModel"),Wpo=o(" (Funnel Transformer model)"),Qpo=l(),xp=a("li"),tse=a("strong"),Hpo=o("glpn"),Upo=o(" \u2014 "),RI=a("a"),Jpo=o("GLPNModel"),Ypo=o(" (GLPN model)"),Kpo=l(),$p=a("li"),ase=a("strong"),Zpo=o("gpt2"),euo=o(" \u2014 "),PI=a("a"),ouo=o("GPT2Model"),ruo=o(" (OpenAI GPT-2 model)"),tuo=l(),kp=a("li"),nse=a("strong"),auo=o("gpt_neo"),nuo=o(" \u2014 "),BI=a("a"),suo=o("GPTNeoModel"),luo=o(" (GPT Neo model)"),iuo=l(),Sp=a("li"),sse=a("strong"),duo=o("gptj"),cuo=o(" \u2014 "),II=a("a"),fuo=o("GPTJModel"),muo=o(" (GPT-J model)"),guo=l(),Rp=a("li"),lse=a("strong"),huo=o("hubert"),puo=o(" \u2014 "),qI=a("a"),uuo=o("HubertModel"),_uo=o(" (Hubert model)"),buo=l(),Pp=a("li"),ise=a("strong"),vuo=o("ibert"),Fuo=o(" \u2014 "),NI=a("a"),Tuo=o("IBertModel"),Muo=o(" (I-BERT model)"),Euo=l(),Bp=a("li"),dse=a("strong"),Cuo=o("imagegpt"),wuo=o(" \u2014 "),jI=a("a"),Auo=o("ImageGPTModel"),yuo=o(" (ImageGPT model)"),Luo=l(),Ip=a("li"),cse=a("strong"),xuo=o("layoutlm"),$uo=o(" \u2014 "),DI=a("a"),kuo=o("LayoutLMModel"),Suo=o(" (LayoutLM model)"),Ruo=l(),qp=a("li"),fse=a("strong"),Puo=o("layoutlmv2"),Buo=o(" \u2014 "),GI=a("a"),Iuo=o("LayoutLMv2Model"),quo=o(" (LayoutLMv2 model)"),Nuo=l(),Np=a("li"),mse=a("strong"),juo=o("led"),Duo=o(" \u2014 "),OI=a("a"),Guo=o("LEDModel"),Ouo=o(" (LED model)"),Vuo=l(),jp=a("li"),gse=a("strong"),Xuo=o("longformer"),zuo=o(" \u2014 "),VI=a("a"),Wuo=o("LongformerModel"),Quo=o(" (Longformer model)"),Huo=l(),Dp=a("li"),hse=a("strong"),Uuo=o("luke"),Juo=o(" \u2014 "),XI=a("a"),Yuo=o("LukeModel"),Kuo=o(" (LUKE model)"),Zuo=l(),Gp=a("li"),pse=a("strong"),e_o=o("lxmert"),o_o=o(" \u2014 "),zI=a("a"),r_o=o("LxmertModel"),t_o=o(" (LXMERT model)"),a_o=l(),Op=a("li"),use=a("strong"),n_o=o("m2m_100"),s_o=o(" \u2014 "),WI=a("a"),l_o=o("M2M100Model"),i_o=o(" (M2M100 model)"),d_o=l(),Vp=a("li"),_se=a("strong"),c_o=o("marian"),f_o=o(" \u2014 "),QI=a("a"),m_o=o("MarianModel"),g_o=o(" (Marian model)"),h_o=l(),Xp=a("li"),bse=a("strong"),p_o=o("maskformer"),u_o=o(" \u2014 "),HI=a("a"),__o=o("MaskFormerModel"),b_o=o(" (MaskFormer model)"),v_o=l(),zp=a("li"),vse=a("strong"),F_o=o("mbart"),T_o=o(" \u2014 "),UI=a("a"),M_o=o("MBartModel"),E_o=o(" (mBART model)"),C_o=l(),Wp=a("li"),Fse=a("strong"),w_o=o("megatron-bert"),A_o=o(" \u2014 "),JI=a("a"),y_o=o("MegatronBertModel"),L_o=o(" (MegatronBert model)"),x_o=l(),Qp=a("li"),Tse=a("strong"),$_o=o("mobilebert"),k_o=o(" \u2014 "),YI=a("a"),S_o=o("MobileBertModel"),R_o=o(" (MobileBERT model)"),P_o=l(),Hp=a("li"),Mse=a("strong"),B_o=o("mpnet"),I_o=o(" \u2014 "),KI=a("a"),q_o=o("MPNetModel"),N_o=o(" (MPNet model)"),j_o=l(),Up=a("li"),Ese=a("strong"),D_o=o("mt5"),G_o=o(" \u2014 "),ZI=a("a"),O_o=o("MT5Model"),V_o=o(" (mT5 model)"),X_o=l(),Jp=a("li"),Cse=a("strong"),z_o=o("nystromformer"),W_o=o(" \u2014 "),eq=a("a"),Q_o=o("NystromformerModel"),H_o=o(" (Nystromformer model)"),U_o=l(),Yp=a("li"),wse=a("strong"),J_o=o("openai-gpt"),Y_o=o(" \u2014 "),oq=a("a"),K_o=o("OpenAIGPTModel"),Z_o=o(" (OpenAI GPT model)"),e2o=l(),Kp=a("li"),Ase=a("strong"),o2o=o("opt"),r2o=o(" \u2014 "),rq=a("a"),t2o=o("OPTModel"),a2o=o(" (OPT model)"),n2o=l(),Zp=a("li"),yse=a("strong"),s2o=o("pegasus"),l2o=o(" \u2014 "),tq=a("a"),i2o=o("PegasusModel"),d2o=o(" (Pegasus model)"),c2o=l(),eu=a("li"),Lse=a("strong"),f2o=o("perceiver"),m2o=o(" \u2014 "),aq=a("a"),g2o=o("PerceiverModel"),h2o=o(" (Perceiver model)"),p2o=l(),ou=a("li"),xse=a("strong"),u2o=o("plbart"),_2o=o(" \u2014 "),nq=a("a"),b2o=o("PLBartModel"),v2o=o(" (PLBart model)"),F2o=l(),ru=a("li"),$se=a("strong"),T2o=o("poolformer"),M2o=o(" \u2014 "),sq=a("a"),E2o=o("PoolFormerModel"),C2o=o(" (PoolFormer model)"),w2o=l(),tu=a("li"),kse=a("strong"),A2o=o("prophetnet"),y2o=o(" \u2014 "),lq=a("a"),L2o=o("ProphetNetModel"),x2o=o(" (ProphetNet model)"),$2o=l(),au=a("li"),Sse=a("strong"),k2o=o("qdqbert"),S2o=o(" \u2014 "),iq=a("a"),R2o=o("QDQBertModel"),P2o=o(" (QDQBert model)"),B2o=l(),nu=a("li"),Rse=a("strong"),I2o=o("reformer"),q2o=o(" \u2014 "),dq=a("a"),N2o=o("ReformerModel"),j2o=o(" (Reformer model)"),D2o=l(),su=a("li"),Pse=a("strong"),G2o=o("regnet"),O2o=o(" \u2014 "),cq=a("a"),V2o=o("RegNetModel"),X2o=o(" (RegNet model)"),z2o=l(),lu=a("li"),Bse=a("strong"),W2o=o("rembert"),Q2o=o(" \u2014 "),fq=a("a"),H2o=o("RemBertModel"),U2o=o(" (RemBERT model)"),J2o=l(),iu=a("li"),Ise=a("strong"),Y2o=o("resnet"),K2o=o(" \u2014 "),mq=a("a"),Z2o=o("ResNetModel"),e1o=o(" (ResNet model)"),o1o=l(),du=a("li"),qse=a("strong"),r1o=o("retribert"),t1o=o(" \u2014 "),gq=a("a"),a1o=o("RetriBertModel"),n1o=o(" (RetriBERT model)"),s1o=l(),cu=a("li"),Nse=a("strong"),l1o=o("roberta"),i1o=o(" \u2014 "),hq=a("a"),d1o=o("RobertaModel"),c1o=o(" (RoBERTa model)"),f1o=l(),fu=a("li"),jse=a("strong"),m1o=o("roformer"),g1o=o(" \u2014 "),pq=a("a"),h1o=o("RoFormerModel"),p1o=o(" (RoFormer model)"),u1o=l(),mu=a("li"),Dse=a("strong"),_1o=o("segformer"),b1o=o(" \u2014 "),uq=a("a"),v1o=o("SegformerModel"),F1o=o(" (SegFormer model)"),T1o=l(),gu=a("li"),Gse=a("strong"),M1o=o("sew"),E1o=o(" \u2014 "),_q=a("a"),C1o=o("SEWModel"),w1o=o(" (SEW model)"),A1o=l(),hu=a("li"),Ose=a("strong"),y1o=o("sew-d"),L1o=o(" \u2014 "),bq=a("a"),x1o=o("SEWDModel"),$1o=o(" (SEW-D model)"),k1o=l(),pu=a("li"),Vse=a("strong"),S1o=o("speech_to_text"),R1o=o(" \u2014 "),vq=a("a"),P1o=o("Speech2TextModel"),B1o=o(" (Speech2Text model)"),I1o=l(),uu=a("li"),Xse=a("strong"),q1o=o("splinter"),N1o=o(" \u2014 "),Fq=a("a"),j1o=o("SplinterModel"),D1o=o(" (Splinter model)"),G1o=l(),_u=a("li"),zse=a("strong"),O1o=o("squeezebert"),V1o=o(" \u2014 "),Tq=a("a"),X1o=o("SqueezeBertModel"),z1o=o(" (SqueezeBERT model)"),W1o=l(),bu=a("li"),Wse=a("strong"),Q1o=o("swin"),H1o=o(" \u2014 "),Mq=a("a"),U1o=o("SwinModel"),J1o=o(" (Swin model)"),Y1o=l(),vu=a("li"),Qse=a("strong"),K1o=o("t5"),Z1o=o(" \u2014 "),Eq=a("a"),e7o=o("T5Model"),o7o=o(" (T5 model)"),r7o=l(),Fu=a("li"),Hse=a("strong"),t7o=o("tapas"),a7o=o(" \u2014 "),Cq=a("a"),n7o=o("TapasModel"),s7o=o(" (TAPAS model)"),l7o=l(),Tu=a("li"),Use=a("strong"),i7o=o("transfo-xl"),d7o=o(" \u2014 "),wq=a("a"),c7o=o("TransfoXLModel"),f7o=o(" (Transformer-XL model)"),m7o=l(),Mu=a("li"),Jse=a("strong"),g7o=o("unispeech"),h7o=o(" \u2014 "),Aq=a("a"),p7o=o("UniSpeechModel"),u7o=o(" (UniSpeech model)"),_7o=l(),Eu=a("li"),Yse=a("strong"),b7o=o("unispeech-sat"),v7o=o(" \u2014 "),yq=a("a"),F7o=o("UniSpeechSatModel"),T7o=o(" (UniSpeechSat model)"),M7o=l(),Cu=a("li"),Kse=a("strong"),E7o=o("van"),C7o=o(" \u2014 "),Lq=a("a"),w7o=o("VanModel"),A7o=o(" (VAN model)"),y7o=l(),wu=a("li"),Zse=a("strong"),L7o=o("vilt"),x7o=o(" \u2014 "),xq=a("a"),$7o=o("ViltModel"),k7o=o(" (ViLT model)"),S7o=l(),Au=a("li"),ele=a("strong"),R7o=o("vision-text-dual-encoder"),P7o=o(" \u2014 "),$q=a("a"),B7o=o("VisionTextDualEncoderModel"),I7o=o(" (VisionTextDualEncoder model)"),q7o=l(),yu=a("li"),ole=a("strong"),N7o=o("visual_bert"),j7o=o(" \u2014 "),kq=a("a"),D7o=o("VisualBertModel"),G7o=o(" (VisualBert model)"),O7o=l(),Lu=a("li"),rle=a("strong"),V7o=o("vit"),X7o=o(" \u2014 "),Sq=a("a"),z7o=o("ViTModel"),W7o=o(" (ViT model)"),Q7o=l(),xu=a("li"),tle=a("strong"),H7o=o("vit_mae"),U7o=o(" \u2014 "),Rq=a("a"),J7o=o("ViTMAEModel"),Y7o=o(" (ViTMAE model)"),K7o=l(),$u=a("li"),ale=a("strong"),Z7o=o("wav2vec2"),ebo=o(" \u2014 "),Pq=a("a"),obo=o("Wav2Vec2Model"),rbo=o(" (Wav2Vec2 model)"),tbo=l(),ku=a("li"),nle=a("strong"),abo=o("wav2vec2-conformer"),nbo=o(" \u2014 "),Bq=a("a"),sbo=o("Wav2Vec2ConformerModel"),lbo=o(" (Wav2Vec2-Conformer model)"),ibo=l(),Su=a("li"),sle=a("strong"),dbo=o("wavlm"),cbo=o(" \u2014 "),Iq=a("a"),fbo=o("WavLMModel"),mbo=o(" (WavLM model)"),gbo=l(),Ru=a("li"),lle=a("strong"),hbo=o("xglm"),pbo=o(" \u2014 "),qq=a("a"),ubo=o("XGLMModel"),_bo=o(" (XGLM model)"),bbo=l(),Pu=a("li"),ile=a("strong"),vbo=o("xlm"),Fbo=o(" \u2014 "),Nq=a("a"),Tbo=o("XLMModel"),Mbo=o(" (XLM model)"),Ebo=l(),Bu=a("li"),dle=a("strong"),Cbo=o("xlm-prophetnet"),wbo=o(" \u2014 "),jq=a("a"),Abo=o("XLMProphetNetModel"),ybo=o(" (XLMProphetNet model)"),Lbo=l(),Iu=a("li"),cle=a("strong"),xbo=o("xlm-roberta"),$bo=o(" \u2014 "),Dq=a("a"),kbo=o("XLMRobertaModel"),Sbo=o(" (XLM-RoBERTa model)"),Rbo=l(),qu=a("li"),fle=a("strong"),Pbo=o("xlm-roberta-xl"),Bbo=o(" \u2014 "),Gq=a("a"),Ibo=o("XLMRobertaXLModel"),qbo=o(" (XLM-RoBERTa-XL model)"),Nbo=l(),Nu=a("li"),mle=a("strong"),jbo=o("xlnet"),Dbo=o(" \u2014 "),Oq=a("a"),Gbo=o("XLNetModel"),Obo=o(" (XLNet model)"),Vbo=l(),ju=a("li"),gle=a("strong"),Xbo=o("yolos"),zbo=o(" \u2014 "),Vq=a("a"),Wbo=o("YolosModel"),Qbo=o(" (YOLOS model)"),Hbo=l(),Du=a("li"),hle=a("strong"),Ubo=o("yoso"),Jbo=o(" \u2014 "),Xq=a("a"),Ybo=o("YosoModel"),Kbo=o(" (YOSO model)"),Zbo=l(),Gu=a("p"),e5o=o("The model is set in evaluation mode by default using "),ple=a("code"),o5o=o("model.eval()"),r5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=a("code"),t5o=o("model.train()"),a5o=l(),F(Ou.$$.fragment),DIe=l(),yi=a("h2"),Vu=a("a"),_le=a("span"),F(N0.$$.fragment),n5o=l(),ble=a("span"),s5o=o("AutoModelForPreTraining"),GIe=l(),xo=a("div"),F(j0.$$.fragment),l5o=l(),Li=a("p"),i5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zq=a("a"),d5o=o("from_pretrained()"),c5o=o(" class method or the "),Wq=a("a"),f5o=o("from_config()"),m5o=o(` class
method.`),g5o=l(),D0=a("p"),h5o=o("This class cannot be instantiated directly using "),vle=a("code"),p5o=o("__init__()"),u5o=o(" (throws an error)."),_5o=l(),at=a("div"),F(G0.$$.fragment),b5o=l(),Fle=a("p"),v5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),F5o=l(),xi=a("p"),T5o=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),M5o=o("not"),E5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=a("a"),C5o=o("from_pretrained()"),w5o=o(" to load the model weights."),A5o=l(),F(Xu.$$.fragment),y5o=l(),Ye=a("div"),F(O0.$$.fragment),L5o=l(),Mle=a("p"),x5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$5o=l(),xa=a("p"),k5o=o("The model class to instantiate is selected based on the "),Ele=a("code"),S5o=o("model_type"),R5o=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),P5o=o("pretrained_model_name_or_path"),B5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),I5o=o("pretrained_model_name_or_path"),q5o=o(":"),N5o=l(),G=a("ul"),zu=a("li"),Ale=a("strong"),j5o=o("albert"),D5o=o(" \u2014 "),Hq=a("a"),G5o=o("AlbertForPreTraining"),O5o=o(" (ALBERT model)"),V5o=l(),Wu=a("li"),yle=a("strong"),X5o=o("bart"),z5o=o(" \u2014 "),Uq=a("a"),W5o=o("BartForConditionalGeneration"),Q5o=o(" (BART model)"),H5o=l(),Qu=a("li"),Lle=a("strong"),U5o=o("bert"),J5o=o(" \u2014 "),Jq=a("a"),Y5o=o("BertForPreTraining"),K5o=o(" (BERT model)"),Z5o=l(),Hu=a("li"),xle=a("strong"),evo=o("big_bird"),ovo=o(" \u2014 "),Yq=a("a"),rvo=o("BigBirdForPreTraining"),tvo=o(" (BigBird model)"),avo=l(),Uu=a("li"),$le=a("strong"),nvo=o("camembert"),svo=o(" \u2014 "),Kq=a("a"),lvo=o("CamembertForMaskedLM"),ivo=o(" (CamemBERT model)"),dvo=l(),Ju=a("li"),kle=a("strong"),cvo=o("ctrl"),fvo=o(" \u2014 "),Zq=a("a"),mvo=o("CTRLLMHeadModel"),gvo=o(" (CTRL model)"),hvo=l(),Yu=a("li"),Sle=a("strong"),pvo=o("data2vec-text"),uvo=o(" \u2014 "),eN=a("a"),_vo=o("Data2VecTextForMaskedLM"),bvo=o(" (Data2VecText model)"),vvo=l(),Ku=a("li"),Rle=a("strong"),Fvo=o("deberta"),Tvo=o(" \u2014 "),oN=a("a"),Mvo=o("DebertaForMaskedLM"),Evo=o(" (DeBERTa model)"),Cvo=l(),Zu=a("li"),Ple=a("strong"),wvo=o("deberta-v2"),Avo=o(" \u2014 "),rN=a("a"),yvo=o("DebertaV2ForMaskedLM"),Lvo=o(" (DeBERTa-v2 model)"),xvo=l(),e_=a("li"),Ble=a("strong"),$vo=o("distilbert"),kvo=o(" \u2014 "),tN=a("a"),Svo=o("DistilBertForMaskedLM"),Rvo=o(" (DistilBERT model)"),Pvo=l(),o_=a("li"),Ile=a("strong"),Bvo=o("electra"),Ivo=o(" \u2014 "),aN=a("a"),qvo=o("ElectraForPreTraining"),Nvo=o(" (ELECTRA model)"),jvo=l(),r_=a("li"),qle=a("strong"),Dvo=o("flaubert"),Gvo=o(" \u2014 "),nN=a("a"),Ovo=o("FlaubertWithLMHeadModel"),Vvo=o(" (FlauBERT model)"),Xvo=l(),t_=a("li"),Nle=a("strong"),zvo=o("flava"),Wvo=o(" \u2014 "),sN=a("a"),Qvo=o("FlavaForPreTraining"),Hvo=o(" (Flava model)"),Uvo=l(),a_=a("li"),jle=a("strong"),Jvo=o("fnet"),Yvo=o(" \u2014 "),lN=a("a"),Kvo=o("FNetForPreTraining"),Zvo=o(" (FNet model)"),eFo=l(),n_=a("li"),Dle=a("strong"),oFo=o("fsmt"),rFo=o(" \u2014 "),iN=a("a"),tFo=o("FSMTForConditionalGeneration"),aFo=o(" (FairSeq Machine-Translation model)"),nFo=l(),s_=a("li"),Gle=a("strong"),sFo=o("funnel"),lFo=o(" \u2014 "),dN=a("a"),iFo=o("FunnelForPreTraining"),dFo=o(" (Funnel Transformer model)"),cFo=l(),l_=a("li"),Ole=a("strong"),fFo=o("gpt2"),mFo=o(" \u2014 "),cN=a("a"),gFo=o("GPT2LMHeadModel"),hFo=o(" (OpenAI GPT-2 model)"),pFo=l(),i_=a("li"),Vle=a("strong"),uFo=o("ibert"),_Fo=o(" \u2014 "),fN=a("a"),bFo=o("IBertForMaskedLM"),vFo=o(" (I-BERT model)"),FFo=l(),d_=a("li"),Xle=a("strong"),TFo=o("layoutlm"),MFo=o(" \u2014 "),mN=a("a"),EFo=o("LayoutLMForMaskedLM"),CFo=o(" (LayoutLM model)"),wFo=l(),c_=a("li"),zle=a("strong"),AFo=o("longformer"),yFo=o(" \u2014 "),gN=a("a"),LFo=o("LongformerForMaskedLM"),xFo=o(" (Longformer model)"),$Fo=l(),f_=a("li"),Wle=a("strong"),kFo=o("lxmert"),SFo=o(" \u2014 "),hN=a("a"),RFo=o("LxmertForPreTraining"),PFo=o(" (LXMERT model)"),BFo=l(),m_=a("li"),Qle=a("strong"),IFo=o("megatron-bert"),qFo=o(" \u2014 "),pN=a("a"),NFo=o("MegatronBertForPreTraining"),jFo=o(" (MegatronBert model)"),DFo=l(),g_=a("li"),Hle=a("strong"),GFo=o("mobilebert"),OFo=o(" \u2014 "),uN=a("a"),VFo=o("MobileBertForPreTraining"),XFo=o(" (MobileBERT model)"),zFo=l(),h_=a("li"),Ule=a("strong"),WFo=o("mpnet"),QFo=o(" \u2014 "),_N=a("a"),HFo=o("MPNetForMaskedLM"),UFo=o(" (MPNet model)"),JFo=l(),p_=a("li"),Jle=a("strong"),YFo=o("openai-gpt"),KFo=o(" \u2014 "),bN=a("a"),ZFo=o("OpenAIGPTLMHeadModel"),eTo=o(" (OpenAI GPT model)"),oTo=l(),u_=a("li"),Yle=a("strong"),rTo=o("retribert"),tTo=o(" \u2014 "),vN=a("a"),aTo=o("RetriBertModel"),nTo=o(" (RetriBERT model)"),sTo=l(),__=a("li"),Kle=a("strong"),lTo=o("roberta"),iTo=o(" \u2014 "),FN=a("a"),dTo=o("RobertaForMaskedLM"),cTo=o(" (RoBERTa model)"),fTo=l(),b_=a("li"),Zle=a("strong"),mTo=o("squeezebert"),gTo=o(" \u2014 "),TN=a("a"),hTo=o("SqueezeBertForMaskedLM"),pTo=o(" (SqueezeBERT model)"),uTo=l(),v_=a("li"),eie=a("strong"),_To=o("t5"),bTo=o(" \u2014 "),MN=a("a"),vTo=o("T5ForConditionalGeneration"),FTo=o(" (T5 model)"),TTo=l(),F_=a("li"),oie=a("strong"),MTo=o("tapas"),ETo=o(" \u2014 "),EN=a("a"),CTo=o("TapasForMaskedLM"),wTo=o(" (TAPAS model)"),ATo=l(),T_=a("li"),rie=a("strong"),yTo=o("transfo-xl"),LTo=o(" \u2014 "),CN=a("a"),xTo=o("TransfoXLLMHeadModel"),$To=o(" (Transformer-XL model)"),kTo=l(),M_=a("li"),tie=a("strong"),STo=o("unispeech"),RTo=o(" \u2014 "),wN=a("a"),PTo=o("UniSpeechForPreTraining"),BTo=o(" (UniSpeech model)"),ITo=l(),E_=a("li"),aie=a("strong"),qTo=o("unispeech-sat"),NTo=o(" \u2014 "),AN=a("a"),jTo=o("UniSpeechSatForPreTraining"),DTo=o(" (UniSpeechSat model)"),GTo=l(),C_=a("li"),nie=a("strong"),OTo=o("visual_bert"),VTo=o(" \u2014 "),yN=a("a"),XTo=o("VisualBertForPreTraining"),zTo=o(" (VisualBert model)"),WTo=l(),w_=a("li"),sie=a("strong"),QTo=o("vit_mae"),HTo=o(" \u2014 "),LN=a("a"),UTo=o("ViTMAEForPreTraining"),JTo=o(" (ViTMAE model)"),YTo=l(),A_=a("li"),lie=a("strong"),KTo=o("wav2vec2"),ZTo=o(" \u2014 "),xN=a("a"),eMo=o("Wav2Vec2ForPreTraining"),oMo=o(" (Wav2Vec2 model)"),rMo=l(),y_=a("li"),iie=a("strong"),tMo=o("wav2vec2-conformer"),aMo=o(" \u2014 "),$N=a("a"),nMo=o("Wav2Vec2ConformerForPreTraining"),sMo=o(" (Wav2Vec2-Conformer model)"),lMo=l(),L_=a("li"),die=a("strong"),iMo=o("xlm"),dMo=o(" \u2014 "),kN=a("a"),cMo=o("XLMWithLMHeadModel"),fMo=o(" (XLM model)"),mMo=l(),x_=a("li"),cie=a("strong"),gMo=o("xlm-roberta"),hMo=o(" \u2014 "),SN=a("a"),pMo=o("XLMRobertaForMaskedLM"),uMo=o(" (XLM-RoBERTa model)"),_Mo=l(),$_=a("li"),fie=a("strong"),bMo=o("xlm-roberta-xl"),vMo=o(" \u2014 "),RN=a("a"),FMo=o("XLMRobertaXLForMaskedLM"),TMo=o(" (XLM-RoBERTa-XL model)"),MMo=l(),k_=a("li"),mie=a("strong"),EMo=o("xlnet"),CMo=o(" \u2014 "),PN=a("a"),wMo=o("XLNetLMHeadModel"),AMo=o(" (XLNet model)"),yMo=l(),S_=a("p"),LMo=o("The model is set in evaluation mode by default using "),gie=a("code"),xMo=o("model.eval()"),$Mo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),kMo=o("model.train()"),SMo=l(),F(R_.$$.fragment),OIe=l(),$i=a("h2"),P_=a("a"),pie=a("span"),F(V0.$$.fragment),RMo=l(),uie=a("span"),PMo=o("AutoModelForCausalLM"),VIe=l(),$o=a("div"),F(X0.$$.fragment),BMo=l(),ki=a("p"),IMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BN=a("a"),qMo=o("from_pretrained()"),NMo=o(" class method or the "),IN=a("a"),jMo=o("from_config()"),DMo=o(` class
method.`),GMo=l(),z0=a("p"),OMo=o("This class cannot be instantiated directly using "),_ie=a("code"),VMo=o("__init__()"),XMo=o(" (throws an error)."),zMo=l(),nt=a("div"),F(W0.$$.fragment),WMo=l(),bie=a("p"),QMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HMo=l(),Si=a("p"),UMo=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),JMo=o("not"),YMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=a("a"),KMo=o("from_pretrained()"),ZMo=o(" to load the model weights."),e4o=l(),F(B_.$$.fragment),o4o=l(),Ke=a("div"),F(Q0.$$.fragment),r4o=l(),Fie=a("p"),t4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a4o=l(),$a=a("p"),n4o=o("The model class to instantiate is selected based on the "),Tie=a("code"),s4o=o("model_type"),l4o=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),i4o=o("pretrained_model_name_or_path"),d4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),c4o=o("pretrained_model_name_or_path"),f4o=o(":"),m4o=l(),z=a("ul"),I_=a("li"),Cie=a("strong"),g4o=o("bart"),h4o=o(" \u2014 "),NN=a("a"),p4o=o("BartForCausalLM"),u4o=o(" (BART model)"),_4o=l(),q_=a("li"),wie=a("strong"),b4o=o("bert"),v4o=o(" \u2014 "),jN=a("a"),F4o=o("BertLMHeadModel"),T4o=o(" (BERT model)"),M4o=l(),N_=a("li"),Aie=a("strong"),E4o=o("bert-generation"),C4o=o(" \u2014 "),DN=a("a"),w4o=o("BertGenerationDecoder"),A4o=o(" (Bert Generation model)"),y4o=l(),j_=a("li"),yie=a("strong"),L4o=o("big_bird"),x4o=o(" \u2014 "),GN=a("a"),$4o=o("BigBirdForCausalLM"),k4o=o(" (BigBird model)"),S4o=l(),D_=a("li"),Lie=a("strong"),R4o=o("bigbird_pegasus"),P4o=o(" \u2014 "),ON=a("a"),B4o=o("BigBirdPegasusForCausalLM"),I4o=o(" (BigBirdPegasus model)"),q4o=l(),G_=a("li"),xie=a("strong"),N4o=o("blenderbot"),j4o=o(" \u2014 "),VN=a("a"),D4o=o("BlenderbotForCausalLM"),G4o=o(" (Blenderbot model)"),O4o=l(),O_=a("li"),$ie=a("strong"),V4o=o("blenderbot-small"),X4o=o(" \u2014 "),XN=a("a"),z4o=o("BlenderbotSmallForCausalLM"),W4o=o(" (BlenderbotSmall model)"),Q4o=l(),V_=a("li"),kie=a("strong"),H4o=o("camembert"),U4o=o(" \u2014 "),zN=a("a"),J4o=o("CamembertForCausalLM"),Y4o=o(" (CamemBERT model)"),K4o=l(),X_=a("li"),Sie=a("strong"),Z4o=o("ctrl"),eEo=o(" \u2014 "),WN=a("a"),oEo=o("CTRLLMHeadModel"),rEo=o(" (CTRL model)"),tEo=l(),z_=a("li"),Rie=a("strong"),aEo=o("data2vec-text"),nEo=o(" \u2014 "),QN=a("a"),sEo=o("Data2VecTextForCausalLM"),lEo=o(" (Data2VecText model)"),iEo=l(),W_=a("li"),Pie=a("strong"),dEo=o("electra"),cEo=o(" \u2014 "),HN=a("a"),fEo=o("ElectraForCausalLM"),mEo=o(" (ELECTRA model)"),gEo=l(),Q_=a("li"),Bie=a("strong"),hEo=o("gpt2"),pEo=o(" \u2014 "),UN=a("a"),uEo=o("GPT2LMHeadModel"),_Eo=o(" (OpenAI GPT-2 model)"),bEo=l(),H_=a("li"),Iie=a("strong"),vEo=o("gpt_neo"),FEo=o(" \u2014 "),JN=a("a"),TEo=o("GPTNeoForCausalLM"),MEo=o(" (GPT Neo model)"),EEo=l(),U_=a("li"),qie=a("strong"),CEo=o("gptj"),wEo=o(" \u2014 "),YN=a("a"),AEo=o("GPTJForCausalLM"),yEo=o(" (GPT-J model)"),LEo=l(),J_=a("li"),Nie=a("strong"),xEo=o("marian"),$Eo=o(" \u2014 "),KN=a("a"),kEo=o("MarianForCausalLM"),SEo=o(" (Marian model)"),REo=l(),Y_=a("li"),jie=a("strong"),PEo=o("mbart"),BEo=o(" \u2014 "),ZN=a("a"),IEo=o("MBartForCausalLM"),qEo=o(" (mBART model)"),NEo=l(),K_=a("li"),Die=a("strong"),jEo=o("megatron-bert"),DEo=o(" \u2014 "),ej=a("a"),GEo=o("MegatronBertForCausalLM"),OEo=o(" (MegatronBert model)"),VEo=l(),Z_=a("li"),Gie=a("strong"),XEo=o("openai-gpt"),zEo=o(" \u2014 "),oj=a("a"),WEo=o("OpenAIGPTLMHeadModel"),QEo=o(" (OpenAI GPT model)"),HEo=l(),e2=a("li"),Oie=a("strong"),UEo=o("opt"),JEo=o(" \u2014 "),rj=a("a"),YEo=o("OPTForCausalLM"),KEo=o(" (OPT model)"),ZEo=l(),o2=a("li"),Vie=a("strong"),eCo=o("pegasus"),oCo=o(" \u2014 "),tj=a("a"),rCo=o("PegasusForCausalLM"),tCo=o(" (Pegasus model)"),aCo=l(),r2=a("li"),Xie=a("strong"),nCo=o("plbart"),sCo=o(" \u2014 "),aj=a("a"),lCo=o("PLBartForCausalLM"),iCo=o(" (PLBart model)"),dCo=l(),t2=a("li"),zie=a("strong"),cCo=o("prophetnet"),fCo=o(" \u2014 "),nj=a("a"),mCo=o("ProphetNetForCausalLM"),gCo=o(" (ProphetNet model)"),hCo=l(),a2=a("li"),Wie=a("strong"),pCo=o("qdqbert"),uCo=o(" \u2014 "),sj=a("a"),_Co=o("QDQBertLMHeadModel"),bCo=o(" (QDQBert model)"),vCo=l(),n2=a("li"),Qie=a("strong"),FCo=o("reformer"),TCo=o(" \u2014 "),lj=a("a"),MCo=o("ReformerModelWithLMHead"),ECo=o(" (Reformer model)"),CCo=l(),s2=a("li"),Hie=a("strong"),wCo=o("rembert"),ACo=o(" \u2014 "),ij=a("a"),yCo=o("RemBertForCausalLM"),LCo=o(" (RemBERT model)"),xCo=l(),l2=a("li"),Uie=a("strong"),$Co=o("roberta"),kCo=o(" \u2014 "),dj=a("a"),SCo=o("RobertaForCausalLM"),RCo=o(" (RoBERTa model)"),PCo=l(),i2=a("li"),Jie=a("strong"),BCo=o("roformer"),ICo=o(" \u2014 "),cj=a("a"),qCo=o("RoFormerForCausalLM"),NCo=o(" (RoFormer model)"),jCo=l(),d2=a("li"),Yie=a("strong"),DCo=o("speech_to_text_2"),GCo=o(" \u2014 "),fj=a("a"),OCo=o("Speech2Text2ForCausalLM"),VCo=o(" (Speech2Text2 model)"),XCo=l(),c2=a("li"),Kie=a("strong"),zCo=o("transfo-xl"),WCo=o(" \u2014 "),mj=a("a"),QCo=o("TransfoXLLMHeadModel"),HCo=o(" (Transformer-XL model)"),UCo=l(),f2=a("li"),Zie=a("strong"),JCo=o("trocr"),YCo=o(" \u2014 "),gj=a("a"),KCo=o("TrOCRForCausalLM"),ZCo=o(" (TrOCR model)"),e3o=l(),m2=a("li"),ede=a("strong"),o3o=o("xglm"),r3o=o(" \u2014 "),hj=a("a"),t3o=o("XGLMForCausalLM"),a3o=o(" (XGLM model)"),n3o=l(),g2=a("li"),ode=a("strong"),s3o=o("xlm"),l3o=o(" \u2014 "),pj=a("a"),i3o=o("XLMWithLMHeadModel"),d3o=o(" (XLM model)"),c3o=l(),h2=a("li"),rde=a("strong"),f3o=o("xlm-prophetnet"),m3o=o(" \u2014 "),uj=a("a"),g3o=o("XLMProphetNetForCausalLM"),h3o=o(" (XLMProphetNet model)"),p3o=l(),p2=a("li"),tde=a("strong"),u3o=o("xlm-roberta"),_3o=o(" \u2014 "),_j=a("a"),b3o=o("XLMRobertaForCausalLM"),v3o=o(" (XLM-RoBERTa model)"),F3o=l(),u2=a("li"),ade=a("strong"),T3o=o("xlm-roberta-xl"),M3o=o(" \u2014 "),bj=a("a"),E3o=o("XLMRobertaXLForCausalLM"),C3o=o(" (XLM-RoBERTa-XL model)"),w3o=l(),_2=a("li"),nde=a("strong"),A3o=o("xlnet"),y3o=o(" \u2014 "),vj=a("a"),L3o=o("XLNetLMHeadModel"),x3o=o(" (XLNet model)"),$3o=l(),b2=a("p"),k3o=o("The model is set in evaluation mode by default using "),sde=a("code"),S3o=o("model.eval()"),R3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=a("code"),P3o=o("model.train()"),B3o=l(),F(v2.$$.fragment),XIe=l(),Ri=a("h2"),F2=a("a"),ide=a("span"),F(H0.$$.fragment),I3o=l(),dde=a("span"),q3o=o("AutoModelForMaskedLM"),zIe=l(),ko=a("div"),F(U0.$$.fragment),N3o=l(),Pi=a("p"),j3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fj=a("a"),D3o=o("from_pretrained()"),G3o=o(" class method or the "),Tj=a("a"),O3o=o("from_config()"),V3o=o(` class
method.`),X3o=l(),J0=a("p"),z3o=o("This class cannot be instantiated directly using "),cde=a("code"),W3o=o("__init__()"),Q3o=o(" (throws an error)."),H3o=l(),st=a("div"),F(Y0.$$.fragment),U3o=l(),fde=a("p"),J3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Y3o=l(),Bi=a("p"),K3o=o(`Note:
Loading a model from its configuration file does `),mde=a("strong"),Z3o=o("not"),ewo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),owo=o("from_pretrained()"),rwo=o(" to load the model weights."),two=l(),F(T2.$$.fragment),awo=l(),Ze=a("div"),F(K0.$$.fragment),nwo=l(),gde=a("p"),swo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lwo=l(),ka=a("p"),iwo=o("The model class to instantiate is selected based on the "),hde=a("code"),dwo=o("model_type"),cwo=o(` property of the config object (either
passed as an argument or loaded from `),pde=a("code"),fwo=o("pretrained_model_name_or_path"),mwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),gwo=o("pretrained_model_name_or_path"),hwo=o(":"),pwo=l(),W=a("ul"),M2=a("li"),_de=a("strong"),uwo=o("albert"),_wo=o(" \u2014 "),Ej=a("a"),bwo=o("AlbertForMaskedLM"),vwo=o(" (ALBERT model)"),Fwo=l(),E2=a("li"),bde=a("strong"),Two=o("bart"),Mwo=o(" \u2014 "),Cj=a("a"),Ewo=o("BartForConditionalGeneration"),Cwo=o(" (BART model)"),wwo=l(),C2=a("li"),vde=a("strong"),Awo=o("bert"),ywo=o(" \u2014 "),wj=a("a"),Lwo=o("BertForMaskedLM"),xwo=o(" (BERT model)"),$wo=l(),w2=a("li"),Fde=a("strong"),kwo=o("big_bird"),Swo=o(" \u2014 "),Aj=a("a"),Rwo=o("BigBirdForMaskedLM"),Pwo=o(" (BigBird model)"),Bwo=l(),A2=a("li"),Tde=a("strong"),Iwo=o("camembert"),qwo=o(" \u2014 "),yj=a("a"),Nwo=o("CamembertForMaskedLM"),jwo=o(" (CamemBERT model)"),Dwo=l(),y2=a("li"),Mde=a("strong"),Gwo=o("convbert"),Owo=o(" \u2014 "),Lj=a("a"),Vwo=o("ConvBertForMaskedLM"),Xwo=o(" (ConvBERT model)"),zwo=l(),L2=a("li"),Ede=a("strong"),Wwo=o("data2vec-text"),Qwo=o(" \u2014 "),xj=a("a"),Hwo=o("Data2VecTextForMaskedLM"),Uwo=o(" (Data2VecText model)"),Jwo=l(),x2=a("li"),Cde=a("strong"),Ywo=o("deberta"),Kwo=o(" \u2014 "),$j=a("a"),Zwo=o("DebertaForMaskedLM"),eAo=o(" (DeBERTa model)"),oAo=l(),$2=a("li"),wde=a("strong"),rAo=o("deberta-v2"),tAo=o(" \u2014 "),kj=a("a"),aAo=o("DebertaV2ForMaskedLM"),nAo=o(" (DeBERTa-v2 model)"),sAo=l(),k2=a("li"),Ade=a("strong"),lAo=o("distilbert"),iAo=o(" \u2014 "),Sj=a("a"),dAo=o("DistilBertForMaskedLM"),cAo=o(" (DistilBERT model)"),fAo=l(),S2=a("li"),yde=a("strong"),mAo=o("electra"),gAo=o(" \u2014 "),Rj=a("a"),hAo=o("ElectraForMaskedLM"),pAo=o(" (ELECTRA model)"),uAo=l(),R2=a("li"),Lde=a("strong"),_Ao=o("flaubert"),bAo=o(" \u2014 "),Pj=a("a"),vAo=o("FlaubertWithLMHeadModel"),FAo=o(" (FlauBERT model)"),TAo=l(),P2=a("li"),xde=a("strong"),MAo=o("fnet"),EAo=o(" \u2014 "),Bj=a("a"),CAo=o("FNetForMaskedLM"),wAo=o(" (FNet model)"),AAo=l(),B2=a("li"),$de=a("strong"),yAo=o("funnel"),LAo=o(" \u2014 "),Ij=a("a"),xAo=o("FunnelForMaskedLM"),$Ao=o(" (Funnel Transformer model)"),kAo=l(),I2=a("li"),kde=a("strong"),SAo=o("ibert"),RAo=o(" \u2014 "),qj=a("a"),PAo=o("IBertForMaskedLM"),BAo=o(" (I-BERT model)"),IAo=l(),q2=a("li"),Sde=a("strong"),qAo=o("layoutlm"),NAo=o(" \u2014 "),Nj=a("a"),jAo=o("LayoutLMForMaskedLM"),DAo=o(" (LayoutLM model)"),GAo=l(),N2=a("li"),Rde=a("strong"),OAo=o("longformer"),VAo=o(" \u2014 "),jj=a("a"),XAo=o("LongformerForMaskedLM"),zAo=o(" (Longformer model)"),WAo=l(),j2=a("li"),Pde=a("strong"),QAo=o("mbart"),HAo=o(" \u2014 "),Dj=a("a"),UAo=o("MBartForConditionalGeneration"),JAo=o(" (mBART model)"),YAo=l(),D2=a("li"),Bde=a("strong"),KAo=o("megatron-bert"),ZAo=o(" \u2014 "),Gj=a("a"),e6o=o("MegatronBertForMaskedLM"),o6o=o(" (MegatronBert model)"),r6o=l(),G2=a("li"),Ide=a("strong"),t6o=o("mobilebert"),a6o=o(" \u2014 "),Oj=a("a"),n6o=o("MobileBertForMaskedLM"),s6o=o(" (MobileBERT model)"),l6o=l(),O2=a("li"),qde=a("strong"),i6o=o("mpnet"),d6o=o(" \u2014 "),Vj=a("a"),c6o=o("MPNetForMaskedLM"),f6o=o(" (MPNet model)"),m6o=l(),V2=a("li"),Nde=a("strong"),g6o=o("nystromformer"),h6o=o(" \u2014 "),Xj=a("a"),p6o=o("NystromformerForMaskedLM"),u6o=o(" (Nystromformer model)"),_6o=l(),X2=a("li"),jde=a("strong"),b6o=o("perceiver"),v6o=o(" \u2014 "),zj=a("a"),F6o=o("PerceiverForMaskedLM"),T6o=o(" (Perceiver model)"),M6o=l(),z2=a("li"),Dde=a("strong"),E6o=o("qdqbert"),C6o=o(" \u2014 "),Wj=a("a"),w6o=o("QDQBertForMaskedLM"),A6o=o(" (QDQBert model)"),y6o=l(),W2=a("li"),Gde=a("strong"),L6o=o("reformer"),x6o=o(" \u2014 "),Qj=a("a"),$6o=o("ReformerForMaskedLM"),k6o=o(" (Reformer model)"),S6o=l(),Q2=a("li"),Ode=a("strong"),R6o=o("rembert"),P6o=o(" \u2014 "),Hj=a("a"),B6o=o("RemBertForMaskedLM"),I6o=o(" (RemBERT model)"),q6o=l(),H2=a("li"),Vde=a("strong"),N6o=o("roberta"),j6o=o(" \u2014 "),Uj=a("a"),D6o=o("RobertaForMaskedLM"),G6o=o(" (RoBERTa model)"),O6o=l(),U2=a("li"),Xde=a("strong"),V6o=o("roformer"),X6o=o(" \u2014 "),Jj=a("a"),z6o=o("RoFormerForMaskedLM"),W6o=o(" (RoFormer model)"),Q6o=l(),J2=a("li"),zde=a("strong"),H6o=o("squeezebert"),U6o=o(" \u2014 "),Yj=a("a"),J6o=o("SqueezeBertForMaskedLM"),Y6o=o(" (SqueezeBERT model)"),K6o=l(),Y2=a("li"),Wde=a("strong"),Z6o=o("tapas"),e0o=o(" \u2014 "),Kj=a("a"),o0o=o("TapasForMaskedLM"),r0o=o(" (TAPAS model)"),t0o=l(),K2=a("li"),Qde=a("strong"),a0o=o("wav2vec2"),n0o=o(" \u2014 "),Hde=a("code"),s0o=o("Wav2Vec2ForMaskedLM"),l0o=o(" (Wav2Vec2 model)"),i0o=l(),Z2=a("li"),Ude=a("strong"),d0o=o("xlm"),c0o=o(" \u2014 "),Zj=a("a"),f0o=o("XLMWithLMHeadModel"),m0o=o(" (XLM model)"),g0o=l(),e1=a("li"),Jde=a("strong"),h0o=o("xlm-roberta"),p0o=o(" \u2014 "),eD=a("a"),u0o=o("XLMRobertaForMaskedLM"),_0o=o(" (XLM-RoBERTa model)"),b0o=l(),o1=a("li"),Yde=a("strong"),v0o=o("xlm-roberta-xl"),F0o=o(" \u2014 "),oD=a("a"),T0o=o("XLMRobertaXLForMaskedLM"),M0o=o(" (XLM-RoBERTa-XL model)"),E0o=l(),r1=a("li"),Kde=a("strong"),C0o=o("yoso"),w0o=o(" \u2014 "),rD=a("a"),A0o=o("YosoForMaskedLM"),y0o=o(" (YOSO model)"),L0o=l(),t1=a("p"),x0o=o("The model is set in evaluation mode by default using "),Zde=a("code"),$0o=o("model.eval()"),k0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),S0o=o("model.train()"),R0o=l(),F(a1.$$.fragment),WIe=l(),Ii=a("h2"),n1=a("a"),oce=a("span"),F(Z0.$$.fragment),P0o=l(),rce=a("span"),B0o=o("AutoModelForSeq2SeqLM"),QIe=l(),So=a("div"),F(ey.$$.fragment),I0o=l(),qi=a("p"),q0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tD=a("a"),N0o=o("from_pretrained()"),j0o=o(" class method or the "),aD=a("a"),D0o=o("from_config()"),G0o=o(` class
method.`),O0o=l(),oy=a("p"),V0o=o("This class cannot be instantiated directly using "),tce=a("code"),X0o=o("__init__()"),z0o=o(" (throws an error)."),W0o=l(),lt=a("div"),F(ry.$$.fragment),Q0o=l(),ace=a("p"),H0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U0o=l(),Ni=a("p"),J0o=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),Y0o=o("not"),K0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),Z0o=o("from_pretrained()"),eyo=o(" to load the model weights."),oyo=l(),F(s1.$$.fragment),ryo=l(),eo=a("div"),F(ty.$$.fragment),tyo=l(),sce=a("p"),ayo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nyo=l(),Sa=a("p"),syo=o("The model class to instantiate is selected based on the "),lce=a("code"),lyo=o("model_type"),iyo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),dyo=o("pretrained_model_name_or_path"),cyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),fyo=o("pretrained_model_name_or_path"),myo=o(":"),gyo=l(),ue=a("ul"),l1=a("li"),cce=a("strong"),hyo=o("bart"),pyo=o(" \u2014 "),sD=a("a"),uyo=o("BartForConditionalGeneration"),_yo=o(" (BART model)"),byo=l(),i1=a("li"),fce=a("strong"),vyo=o("bigbird_pegasus"),Fyo=o(" \u2014 "),lD=a("a"),Tyo=o("BigBirdPegasusForConditionalGeneration"),Myo=o(" (BigBirdPegasus model)"),Eyo=l(),d1=a("li"),mce=a("strong"),Cyo=o("blenderbot"),wyo=o(" \u2014 "),iD=a("a"),Ayo=o("BlenderbotForConditionalGeneration"),yyo=o(" (Blenderbot model)"),Lyo=l(),c1=a("li"),gce=a("strong"),xyo=o("blenderbot-small"),$yo=o(" \u2014 "),dD=a("a"),kyo=o("BlenderbotSmallForConditionalGeneration"),Syo=o(" (BlenderbotSmall model)"),Ryo=l(),f1=a("li"),hce=a("strong"),Pyo=o("encoder-decoder"),Byo=o(" \u2014 "),cD=a("a"),Iyo=o("EncoderDecoderModel"),qyo=o(" (Encoder decoder model)"),Nyo=l(),m1=a("li"),pce=a("strong"),jyo=o("fsmt"),Dyo=o(" \u2014 "),fD=a("a"),Gyo=o("FSMTForConditionalGeneration"),Oyo=o(" (FairSeq Machine-Translation model)"),Vyo=l(),g1=a("li"),uce=a("strong"),Xyo=o("led"),zyo=o(" \u2014 "),mD=a("a"),Wyo=o("LEDForConditionalGeneration"),Qyo=o(" (LED model)"),Hyo=l(),h1=a("li"),_ce=a("strong"),Uyo=o("m2m_100"),Jyo=o(" \u2014 "),gD=a("a"),Yyo=o("M2M100ForConditionalGeneration"),Kyo=o(" (M2M100 model)"),Zyo=l(),p1=a("li"),bce=a("strong"),eLo=o("marian"),oLo=o(" \u2014 "),hD=a("a"),rLo=o("MarianMTModel"),tLo=o(" (Marian model)"),aLo=l(),u1=a("li"),vce=a("strong"),nLo=o("mbart"),sLo=o(" \u2014 "),pD=a("a"),lLo=o("MBartForConditionalGeneration"),iLo=o(" (mBART model)"),dLo=l(),_1=a("li"),Fce=a("strong"),cLo=o("mt5"),fLo=o(" \u2014 "),uD=a("a"),mLo=o("MT5ForConditionalGeneration"),gLo=o(" (mT5 model)"),hLo=l(),b1=a("li"),Tce=a("strong"),pLo=o("pegasus"),uLo=o(" \u2014 "),_D=a("a"),_Lo=o("PegasusForConditionalGeneration"),bLo=o(" (Pegasus model)"),vLo=l(),v1=a("li"),Mce=a("strong"),FLo=o("plbart"),TLo=o(" \u2014 "),bD=a("a"),MLo=o("PLBartForConditionalGeneration"),ELo=o(" (PLBart model)"),CLo=l(),F1=a("li"),Ece=a("strong"),wLo=o("prophetnet"),ALo=o(" \u2014 "),vD=a("a"),yLo=o("ProphetNetForConditionalGeneration"),LLo=o(" (ProphetNet model)"),xLo=l(),T1=a("li"),Cce=a("strong"),$Lo=o("t5"),kLo=o(" \u2014 "),FD=a("a"),SLo=o("T5ForConditionalGeneration"),RLo=o(" (T5 model)"),PLo=l(),M1=a("li"),wce=a("strong"),BLo=o("xlm-prophetnet"),ILo=o(" \u2014 "),TD=a("a"),qLo=o("XLMProphetNetForConditionalGeneration"),NLo=o(" (XLMProphetNet model)"),jLo=l(),E1=a("p"),DLo=o("The model is set in evaluation mode by default using "),Ace=a("code"),GLo=o("model.eval()"),OLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=a("code"),VLo=o("model.train()"),XLo=l(),F(C1.$$.fragment),HIe=l(),ji=a("h2"),w1=a("a"),Lce=a("span"),F(ay.$$.fragment),zLo=l(),xce=a("span"),WLo=o("AutoModelForSequenceClassification"),UIe=l(),Ro=a("div"),F(ny.$$.fragment),QLo=l(),Di=a("p"),HLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MD=a("a"),ULo=o("from_pretrained()"),JLo=o(" class method or the "),ED=a("a"),YLo=o("from_config()"),KLo=o(` class
method.`),ZLo=l(),sy=a("p"),e8o=o("This class cannot be instantiated directly using "),$ce=a("code"),o8o=o("__init__()"),r8o=o(" (throws an error)."),t8o=l(),it=a("div"),F(ly.$$.fragment),a8o=l(),kce=a("p"),n8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s8o=l(),Gi=a("p"),l8o=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),i8o=o("not"),d8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=a("a"),c8o=o("from_pretrained()"),f8o=o(" to load the model weights."),m8o=l(),F(A1.$$.fragment),g8o=l(),oo=a("div"),F(iy.$$.fragment),h8o=l(),Rce=a("p"),p8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u8o=l(),Ra=a("p"),_8o=o("The model class to instantiate is selected based on the "),Pce=a("code"),b8o=o("model_type"),v8o=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),F8o=o("pretrained_model_name_or_path"),T8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),M8o=o("pretrained_model_name_or_path"),E8o=o(":"),C8o=l(),q=a("ul"),y1=a("li"),qce=a("strong"),w8o=o("albert"),A8o=o(" \u2014 "),wD=a("a"),y8o=o("AlbertForSequenceClassification"),L8o=o(" (ALBERT model)"),x8o=l(),L1=a("li"),Nce=a("strong"),$8o=o("bart"),k8o=o(" \u2014 "),AD=a("a"),S8o=o("BartForSequenceClassification"),R8o=o(" (BART model)"),P8o=l(),x1=a("li"),jce=a("strong"),B8o=o("bert"),I8o=o(" \u2014 "),yD=a("a"),q8o=o("BertForSequenceClassification"),N8o=o(" (BERT model)"),j8o=l(),$1=a("li"),Dce=a("strong"),D8o=o("big_bird"),G8o=o(" \u2014 "),LD=a("a"),O8o=o("BigBirdForSequenceClassification"),V8o=o(" (BigBird model)"),X8o=l(),k1=a("li"),Gce=a("strong"),z8o=o("bigbird_pegasus"),W8o=o(" \u2014 "),xD=a("a"),Q8o=o("BigBirdPegasusForSequenceClassification"),H8o=o(" (BigBirdPegasus model)"),U8o=l(),S1=a("li"),Oce=a("strong"),J8o=o("camembert"),Y8o=o(" \u2014 "),$D=a("a"),K8o=o("CamembertForSequenceClassification"),Z8o=o(" (CamemBERT model)"),exo=l(),R1=a("li"),Vce=a("strong"),oxo=o("canine"),rxo=o(" \u2014 "),kD=a("a"),txo=o("CanineForSequenceClassification"),axo=o(" (Canine model)"),nxo=l(),P1=a("li"),Xce=a("strong"),sxo=o("convbert"),lxo=o(" \u2014 "),SD=a("a"),ixo=o("ConvBertForSequenceClassification"),dxo=o(" (ConvBERT model)"),cxo=l(),B1=a("li"),zce=a("strong"),fxo=o("ctrl"),mxo=o(" \u2014 "),RD=a("a"),gxo=o("CTRLForSequenceClassification"),hxo=o(" (CTRL model)"),pxo=l(),I1=a("li"),Wce=a("strong"),uxo=o("data2vec-text"),_xo=o(" \u2014 "),PD=a("a"),bxo=o("Data2VecTextForSequenceClassification"),vxo=o(" (Data2VecText model)"),Fxo=l(),q1=a("li"),Qce=a("strong"),Txo=o("deberta"),Mxo=o(" \u2014 "),BD=a("a"),Exo=o("DebertaForSequenceClassification"),Cxo=o(" (DeBERTa model)"),wxo=l(),N1=a("li"),Hce=a("strong"),Axo=o("deberta-v2"),yxo=o(" \u2014 "),ID=a("a"),Lxo=o("DebertaV2ForSequenceClassification"),xxo=o(" (DeBERTa-v2 model)"),$xo=l(),j1=a("li"),Uce=a("strong"),kxo=o("distilbert"),Sxo=o(" \u2014 "),qD=a("a"),Rxo=o("DistilBertForSequenceClassification"),Pxo=o(" (DistilBERT model)"),Bxo=l(),D1=a("li"),Jce=a("strong"),Ixo=o("electra"),qxo=o(" \u2014 "),ND=a("a"),Nxo=o("ElectraForSequenceClassification"),jxo=o(" (ELECTRA model)"),Dxo=l(),G1=a("li"),Yce=a("strong"),Gxo=o("flaubert"),Oxo=o(" \u2014 "),jD=a("a"),Vxo=o("FlaubertForSequenceClassification"),Xxo=o(" (FlauBERT model)"),zxo=l(),O1=a("li"),Kce=a("strong"),Wxo=o("fnet"),Qxo=o(" \u2014 "),DD=a("a"),Hxo=o("FNetForSequenceClassification"),Uxo=o(" (FNet model)"),Jxo=l(),V1=a("li"),Zce=a("strong"),Yxo=o("funnel"),Kxo=o(" \u2014 "),GD=a("a"),Zxo=o("FunnelForSequenceClassification"),e9o=o(" (Funnel Transformer model)"),o9o=l(),X1=a("li"),efe=a("strong"),r9o=o("gpt2"),t9o=o(" \u2014 "),OD=a("a"),a9o=o("GPT2ForSequenceClassification"),n9o=o(" (OpenAI GPT-2 model)"),s9o=l(),z1=a("li"),ofe=a("strong"),l9o=o("gpt_neo"),i9o=o(" \u2014 "),VD=a("a"),d9o=o("GPTNeoForSequenceClassification"),c9o=o(" (GPT Neo model)"),f9o=l(),W1=a("li"),rfe=a("strong"),m9o=o("gptj"),g9o=o(" \u2014 "),XD=a("a"),h9o=o("GPTJForSequenceClassification"),p9o=o(" (GPT-J model)"),u9o=l(),Q1=a("li"),tfe=a("strong"),_9o=o("ibert"),b9o=o(" \u2014 "),zD=a("a"),v9o=o("IBertForSequenceClassification"),F9o=o(" (I-BERT model)"),T9o=l(),H1=a("li"),afe=a("strong"),M9o=o("layoutlm"),E9o=o(" \u2014 "),WD=a("a"),C9o=o("LayoutLMForSequenceClassification"),w9o=o(" (LayoutLM model)"),A9o=l(),U1=a("li"),nfe=a("strong"),y9o=o("layoutlmv2"),L9o=o(" \u2014 "),QD=a("a"),x9o=o("LayoutLMv2ForSequenceClassification"),$9o=o(" (LayoutLMv2 model)"),k9o=l(),J1=a("li"),sfe=a("strong"),S9o=o("led"),R9o=o(" \u2014 "),HD=a("a"),P9o=o("LEDForSequenceClassification"),B9o=o(" (LED model)"),I9o=l(),Y1=a("li"),lfe=a("strong"),q9o=o("longformer"),N9o=o(" \u2014 "),UD=a("a"),j9o=o("LongformerForSequenceClassification"),D9o=o(" (Longformer model)"),G9o=l(),K1=a("li"),ife=a("strong"),O9o=o("mbart"),V9o=o(" \u2014 "),JD=a("a"),X9o=o("MBartForSequenceClassification"),z9o=o(" (mBART model)"),W9o=l(),Z1=a("li"),dfe=a("strong"),Q9o=o("megatron-bert"),H9o=o(" \u2014 "),YD=a("a"),U9o=o("MegatronBertForSequenceClassification"),J9o=o(" (MegatronBert model)"),Y9o=l(),e7=a("li"),cfe=a("strong"),K9o=o("mobilebert"),Z9o=o(" \u2014 "),KD=a("a"),e$o=o("MobileBertForSequenceClassification"),o$o=o(" (MobileBERT model)"),r$o=l(),o7=a("li"),ffe=a("strong"),t$o=o("mpnet"),a$o=o(" \u2014 "),ZD=a("a"),n$o=o("MPNetForSequenceClassification"),s$o=o(" (MPNet model)"),l$o=l(),r7=a("li"),mfe=a("strong"),i$o=o("nystromformer"),d$o=o(" \u2014 "),eG=a("a"),c$o=o("NystromformerForSequenceClassification"),f$o=o(" (Nystromformer model)"),m$o=l(),t7=a("li"),gfe=a("strong"),g$o=o("openai-gpt"),h$o=o(" \u2014 "),oG=a("a"),p$o=o("OpenAIGPTForSequenceClassification"),u$o=o(" (OpenAI GPT model)"),_$o=l(),a7=a("li"),hfe=a("strong"),b$o=o("perceiver"),v$o=o(" \u2014 "),rG=a("a"),F$o=o("PerceiverForSequenceClassification"),T$o=o(" (Perceiver model)"),M$o=l(),n7=a("li"),pfe=a("strong"),E$o=o("plbart"),C$o=o(" \u2014 "),tG=a("a"),w$o=o("PLBartForSequenceClassification"),A$o=o(" (PLBart model)"),y$o=l(),s7=a("li"),ufe=a("strong"),L$o=o("qdqbert"),x$o=o(" \u2014 "),aG=a("a"),$$o=o("QDQBertForSequenceClassification"),k$o=o(" (QDQBert model)"),S$o=l(),l7=a("li"),_fe=a("strong"),R$o=o("reformer"),P$o=o(" \u2014 "),nG=a("a"),B$o=o("ReformerForSequenceClassification"),I$o=o(" (Reformer model)"),q$o=l(),i7=a("li"),bfe=a("strong"),N$o=o("rembert"),j$o=o(" \u2014 "),sG=a("a"),D$o=o("RemBertForSequenceClassification"),G$o=o(" (RemBERT model)"),O$o=l(),d7=a("li"),vfe=a("strong"),V$o=o("roberta"),X$o=o(" \u2014 "),lG=a("a"),z$o=o("RobertaForSequenceClassification"),W$o=o(" (RoBERTa model)"),Q$o=l(),c7=a("li"),Ffe=a("strong"),H$o=o("roformer"),U$o=o(" \u2014 "),iG=a("a"),J$o=o("RoFormerForSequenceClassification"),Y$o=o(" (RoFormer model)"),K$o=l(),f7=a("li"),Tfe=a("strong"),Z$o=o("squeezebert"),eko=o(" \u2014 "),dG=a("a"),oko=o("SqueezeBertForSequenceClassification"),rko=o(" (SqueezeBERT model)"),tko=l(),m7=a("li"),Mfe=a("strong"),ako=o("tapas"),nko=o(" \u2014 "),cG=a("a"),sko=o("TapasForSequenceClassification"),lko=o(" (TAPAS model)"),iko=l(),g7=a("li"),Efe=a("strong"),dko=o("transfo-xl"),cko=o(" \u2014 "),fG=a("a"),fko=o("TransfoXLForSequenceClassification"),mko=o(" (Transformer-XL model)"),gko=l(),h7=a("li"),Cfe=a("strong"),hko=o("xlm"),pko=o(" \u2014 "),mG=a("a"),uko=o("XLMForSequenceClassification"),_ko=o(" (XLM model)"),bko=l(),p7=a("li"),wfe=a("strong"),vko=o("xlm-roberta"),Fko=o(" \u2014 "),gG=a("a"),Tko=o("XLMRobertaForSequenceClassification"),Mko=o(" (XLM-RoBERTa model)"),Eko=l(),u7=a("li"),Afe=a("strong"),Cko=o("xlm-roberta-xl"),wko=o(" \u2014 "),hG=a("a"),Ako=o("XLMRobertaXLForSequenceClassification"),yko=o(" (XLM-RoBERTa-XL model)"),Lko=l(),_7=a("li"),yfe=a("strong"),xko=o("xlnet"),$ko=o(" \u2014 "),pG=a("a"),kko=o("XLNetForSequenceClassification"),Sko=o(" (XLNet model)"),Rko=l(),b7=a("li"),Lfe=a("strong"),Pko=o("yoso"),Bko=o(" \u2014 "),uG=a("a"),Iko=o("YosoForSequenceClassification"),qko=o(" (YOSO model)"),Nko=l(),v7=a("p"),jko=o("The model is set in evaluation mode by default using "),xfe=a("code"),Dko=o("model.eval()"),Gko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),Oko=o("model.train()"),Vko=l(),F(F7.$$.fragment),JIe=l(),Oi=a("h2"),T7=a("a"),kfe=a("span"),F(dy.$$.fragment),Xko=l(),Sfe=a("span"),zko=o("AutoModelForMultipleChoice"),YIe=l(),Po=a("div"),F(cy.$$.fragment),Wko=l(),Vi=a("p"),Qko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_G=a("a"),Hko=o("from_pretrained()"),Uko=o(" class method or the "),bG=a("a"),Jko=o("from_config()"),Yko=o(` class
method.`),Kko=l(),fy=a("p"),Zko=o("This class cannot be instantiated directly using "),Rfe=a("code"),eSo=o("__init__()"),oSo=o(" (throws an error)."),rSo=l(),dt=a("div"),F(my.$$.fragment),tSo=l(),Pfe=a("p"),aSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nSo=l(),Xi=a("p"),sSo=o(`Note:
Loading a model from its configuration file does `),Bfe=a("strong"),lSo=o("not"),iSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=a("a"),dSo=o("from_pretrained()"),cSo=o(" to load the model weights."),fSo=l(),F(M7.$$.fragment),mSo=l(),ro=a("div"),F(gy.$$.fragment),gSo=l(),Ife=a("p"),hSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pSo=l(),Pa=a("p"),uSo=o("The model class to instantiate is selected based on the "),qfe=a("code"),_So=o("model_type"),bSo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),vSo=o("pretrained_model_name_or_path"),FSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=a("code"),TSo=o("pretrained_model_name_or_path"),MSo=o(":"),ESo=l(),Y=a("ul"),E7=a("li"),Dfe=a("strong"),CSo=o("albert"),wSo=o(" \u2014 "),FG=a("a"),ASo=o("AlbertForMultipleChoice"),ySo=o(" (ALBERT model)"),LSo=l(),C7=a("li"),Gfe=a("strong"),xSo=o("bert"),$So=o(" \u2014 "),TG=a("a"),kSo=o("BertForMultipleChoice"),SSo=o(" (BERT model)"),RSo=l(),w7=a("li"),Ofe=a("strong"),PSo=o("big_bird"),BSo=o(" \u2014 "),MG=a("a"),ISo=o("BigBirdForMultipleChoice"),qSo=o(" (BigBird model)"),NSo=l(),A7=a("li"),Vfe=a("strong"),jSo=o("camembert"),DSo=o(" \u2014 "),EG=a("a"),GSo=o("CamembertForMultipleChoice"),OSo=o(" (CamemBERT model)"),VSo=l(),y7=a("li"),Xfe=a("strong"),XSo=o("canine"),zSo=o(" \u2014 "),CG=a("a"),WSo=o("CanineForMultipleChoice"),QSo=o(" (Canine model)"),HSo=l(),L7=a("li"),zfe=a("strong"),USo=o("convbert"),JSo=o(" \u2014 "),wG=a("a"),YSo=o("ConvBertForMultipleChoice"),KSo=o(" (ConvBERT model)"),ZSo=l(),x7=a("li"),Wfe=a("strong"),eRo=o("data2vec-text"),oRo=o(" \u2014 "),AG=a("a"),rRo=o("Data2VecTextForMultipleChoice"),tRo=o(" (Data2VecText model)"),aRo=l(),$7=a("li"),Qfe=a("strong"),nRo=o("deberta-v2"),sRo=o(" \u2014 "),yG=a("a"),lRo=o("DebertaV2ForMultipleChoice"),iRo=o(" (DeBERTa-v2 model)"),dRo=l(),k7=a("li"),Hfe=a("strong"),cRo=o("distilbert"),fRo=o(" \u2014 "),LG=a("a"),mRo=o("DistilBertForMultipleChoice"),gRo=o(" (DistilBERT model)"),hRo=l(),S7=a("li"),Ufe=a("strong"),pRo=o("electra"),uRo=o(" \u2014 "),xG=a("a"),_Ro=o("ElectraForMultipleChoice"),bRo=o(" (ELECTRA model)"),vRo=l(),R7=a("li"),Jfe=a("strong"),FRo=o("flaubert"),TRo=o(" \u2014 "),$G=a("a"),MRo=o("FlaubertForMultipleChoice"),ERo=o(" (FlauBERT model)"),CRo=l(),P7=a("li"),Yfe=a("strong"),wRo=o("fnet"),ARo=o(" \u2014 "),kG=a("a"),yRo=o("FNetForMultipleChoice"),LRo=o(" (FNet model)"),xRo=l(),B7=a("li"),Kfe=a("strong"),$Ro=o("funnel"),kRo=o(" \u2014 "),SG=a("a"),SRo=o("FunnelForMultipleChoice"),RRo=o(" (Funnel Transformer model)"),PRo=l(),I7=a("li"),Zfe=a("strong"),BRo=o("ibert"),IRo=o(" \u2014 "),RG=a("a"),qRo=o("IBertForMultipleChoice"),NRo=o(" (I-BERT model)"),jRo=l(),q7=a("li"),eme=a("strong"),DRo=o("longformer"),GRo=o(" \u2014 "),PG=a("a"),ORo=o("LongformerForMultipleChoice"),VRo=o(" (Longformer model)"),XRo=l(),N7=a("li"),ome=a("strong"),zRo=o("megatron-bert"),WRo=o(" \u2014 "),BG=a("a"),QRo=o("MegatronBertForMultipleChoice"),HRo=o(" (MegatronBert model)"),URo=l(),j7=a("li"),rme=a("strong"),JRo=o("mobilebert"),YRo=o(" \u2014 "),IG=a("a"),KRo=o("MobileBertForMultipleChoice"),ZRo=o(" (MobileBERT model)"),ePo=l(),D7=a("li"),tme=a("strong"),oPo=o("mpnet"),rPo=o(" \u2014 "),qG=a("a"),tPo=o("MPNetForMultipleChoice"),aPo=o(" (MPNet model)"),nPo=l(),G7=a("li"),ame=a("strong"),sPo=o("nystromformer"),lPo=o(" \u2014 "),NG=a("a"),iPo=o("NystromformerForMultipleChoice"),dPo=o(" (Nystromformer model)"),cPo=l(),O7=a("li"),nme=a("strong"),fPo=o("qdqbert"),mPo=o(" \u2014 "),jG=a("a"),gPo=o("QDQBertForMultipleChoice"),hPo=o(" (QDQBert model)"),pPo=l(),V7=a("li"),sme=a("strong"),uPo=o("rembert"),_Po=o(" \u2014 "),DG=a("a"),bPo=o("RemBertForMultipleChoice"),vPo=o(" (RemBERT model)"),FPo=l(),X7=a("li"),lme=a("strong"),TPo=o("roberta"),MPo=o(" \u2014 "),GG=a("a"),EPo=o("RobertaForMultipleChoice"),CPo=o(" (RoBERTa model)"),wPo=l(),z7=a("li"),ime=a("strong"),APo=o("roformer"),yPo=o(" \u2014 "),OG=a("a"),LPo=o("RoFormerForMultipleChoice"),xPo=o(" (RoFormer model)"),$Po=l(),W7=a("li"),dme=a("strong"),kPo=o("squeezebert"),SPo=o(" \u2014 "),VG=a("a"),RPo=o("SqueezeBertForMultipleChoice"),PPo=o(" (SqueezeBERT model)"),BPo=l(),Q7=a("li"),cme=a("strong"),IPo=o("xlm"),qPo=o(" \u2014 "),XG=a("a"),NPo=o("XLMForMultipleChoice"),jPo=o(" (XLM model)"),DPo=l(),H7=a("li"),fme=a("strong"),GPo=o("xlm-roberta"),OPo=o(" \u2014 "),zG=a("a"),VPo=o("XLMRobertaForMultipleChoice"),XPo=o(" (XLM-RoBERTa model)"),zPo=l(),U7=a("li"),mme=a("strong"),WPo=o("xlm-roberta-xl"),QPo=o(" \u2014 "),WG=a("a"),HPo=o("XLMRobertaXLForMultipleChoice"),UPo=o(" (XLM-RoBERTa-XL model)"),JPo=l(),J7=a("li"),gme=a("strong"),YPo=o("xlnet"),KPo=o(" \u2014 "),QG=a("a"),ZPo=o("XLNetForMultipleChoice"),eBo=o(" (XLNet model)"),oBo=l(),Y7=a("li"),hme=a("strong"),rBo=o("yoso"),tBo=o(" \u2014 "),HG=a("a"),aBo=o("YosoForMultipleChoice"),nBo=o(" (YOSO model)"),sBo=l(),K7=a("p"),lBo=o("The model is set in evaluation mode by default using "),pme=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=a("code"),cBo=o("model.train()"),fBo=l(),F(Z7.$$.fragment),KIe=l(),zi=a("h2"),eb=a("a"),_me=a("span"),F(hy.$$.fragment),mBo=l(),bme=a("span"),gBo=o("AutoModelForNextSentencePrediction"),ZIe=l(),Bo=a("div"),F(py.$$.fragment),hBo=l(),Wi=a("p"),pBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UG=a("a"),uBo=o("from_pretrained()"),_Bo=o(" class method or the "),JG=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),uy=a("p"),TBo=o("This class cannot be instantiated directly using "),vme=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),ct=a("div"),F(_y.$$.fragment),wBo=l(),Fme=a("p"),ABo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yBo=l(),Qi=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),xBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),kBo=o("from_pretrained()"),SBo=o(" to load the model weights."),RBo=l(),F(ob.$$.fragment),PBo=l(),to=a("div"),F(by.$$.fragment),BBo=l(),Mme=a("p"),IBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qBo=l(),Ba=a("p"),NBo=o("The model class to instantiate is selected based on the "),Eme=a("code"),jBo=o("model_type"),DBo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),GBo=o("pretrained_model_name_or_path"),OBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(":"),zBo=l(),Yr=a("ul"),rb=a("li"),Ame=a("strong"),WBo=o("bert"),QBo=o(" \u2014 "),KG=a("a"),HBo=o("BertForNextSentencePrediction"),UBo=o(" (BERT model)"),JBo=l(),tb=a("li"),yme=a("strong"),YBo=o("fnet"),KBo=o(" \u2014 "),ZG=a("a"),ZBo=o("FNetForNextSentencePrediction"),eIo=o(" (FNet model)"),oIo=l(),ab=a("li"),Lme=a("strong"),rIo=o("megatron-bert"),tIo=o(" \u2014 "),eO=a("a"),aIo=o("MegatronBertForNextSentencePrediction"),nIo=o(" (MegatronBert model)"),sIo=l(),nb=a("li"),xme=a("strong"),lIo=o("mobilebert"),iIo=o(" \u2014 "),oO=a("a"),dIo=o("MobileBertForNextSentencePrediction"),cIo=o(" (MobileBERT model)"),fIo=l(),sb=a("li"),$me=a("strong"),mIo=o("qdqbert"),gIo=o(" \u2014 "),rO=a("a"),hIo=o("QDQBertForNextSentencePrediction"),pIo=o(" (QDQBert model)"),uIo=l(),lb=a("p"),_Io=o("The model is set in evaluation mode by default using "),kme=a("code"),bIo=o("model.eval()"),vIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),FIo=o("model.train()"),TIo=l(),F(ib.$$.fragment),eqe=l(),Hi=a("h2"),db=a("a"),Rme=a("span"),F(vy.$$.fragment),MIo=l(),Pme=a("span"),EIo=o("AutoModelForTokenClassification"),oqe=l(),Io=a("div"),F(Fy.$$.fragment),CIo=l(),Ui=a("p"),wIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tO=a("a"),AIo=o("from_pretrained()"),yIo=o(" class method or the "),aO=a("a"),LIo=o("from_config()"),xIo=o(` class
method.`),$Io=l(),Ty=a("p"),kIo=o("This class cannot be instantiated directly using "),Bme=a("code"),SIo=o("__init__()"),RIo=o(" (throws an error)."),PIo=l(),ft=a("div"),F(My.$$.fragment),BIo=l(),Ime=a("p"),IIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qIo=l(),Ji=a("p"),NIo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),jIo=o("not"),DIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),GIo=o("from_pretrained()"),OIo=o(" to load the model weights."),VIo=l(),F(cb.$$.fragment),XIo=l(),ao=a("div"),F(Ey.$$.fragment),zIo=l(),Nme=a("p"),WIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QIo=l(),Ia=a("p"),HIo=o("The model class to instantiate is selected based on the "),jme=a("code"),UIo=o("model_type"),JIo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),ZIo=o("pretrained_model_name_or_path"),eqo=o(":"),oqo=l(),U=a("ul"),fb=a("li"),Ome=a("strong"),rqo=o("albert"),tqo=o(" \u2014 "),sO=a("a"),aqo=o("AlbertForTokenClassification"),nqo=o(" (ALBERT model)"),sqo=l(),mb=a("li"),Vme=a("strong"),lqo=o("bert"),iqo=o(" \u2014 "),lO=a("a"),dqo=o("BertForTokenClassification"),cqo=o(" (BERT model)"),fqo=l(),gb=a("li"),Xme=a("strong"),mqo=o("big_bird"),gqo=o(" \u2014 "),iO=a("a"),hqo=o("BigBirdForTokenClassification"),pqo=o(" (BigBird model)"),uqo=l(),hb=a("li"),zme=a("strong"),_qo=o("camembert"),bqo=o(" \u2014 "),dO=a("a"),vqo=o("CamembertForTokenClassification"),Fqo=o(" (CamemBERT model)"),Tqo=l(),pb=a("li"),Wme=a("strong"),Mqo=o("canine"),Eqo=o(" \u2014 "),cO=a("a"),Cqo=o("CanineForTokenClassification"),wqo=o(" (Canine model)"),Aqo=l(),ub=a("li"),Qme=a("strong"),yqo=o("convbert"),Lqo=o(" \u2014 "),fO=a("a"),xqo=o("ConvBertForTokenClassification"),$qo=o(" (ConvBERT model)"),kqo=l(),_b=a("li"),Hme=a("strong"),Sqo=o("data2vec-text"),Rqo=o(" \u2014 "),mO=a("a"),Pqo=o("Data2VecTextForTokenClassification"),Bqo=o(" (Data2VecText model)"),Iqo=l(),bb=a("li"),Ume=a("strong"),qqo=o("deberta"),Nqo=o(" \u2014 "),gO=a("a"),jqo=o("DebertaForTokenClassification"),Dqo=o(" (DeBERTa model)"),Gqo=l(),vb=a("li"),Jme=a("strong"),Oqo=o("deberta-v2"),Vqo=o(" \u2014 "),hO=a("a"),Xqo=o("DebertaV2ForTokenClassification"),zqo=o(" (DeBERTa-v2 model)"),Wqo=l(),Fb=a("li"),Yme=a("strong"),Qqo=o("distilbert"),Hqo=o(" \u2014 "),pO=a("a"),Uqo=o("DistilBertForTokenClassification"),Jqo=o(" (DistilBERT model)"),Yqo=l(),Tb=a("li"),Kme=a("strong"),Kqo=o("electra"),Zqo=o(" \u2014 "),uO=a("a"),eNo=o("ElectraForTokenClassification"),oNo=o(" (ELECTRA model)"),rNo=l(),Mb=a("li"),Zme=a("strong"),tNo=o("flaubert"),aNo=o(" \u2014 "),_O=a("a"),nNo=o("FlaubertForTokenClassification"),sNo=o(" (FlauBERT model)"),lNo=l(),Eb=a("li"),ege=a("strong"),iNo=o("fnet"),dNo=o(" \u2014 "),bO=a("a"),cNo=o("FNetForTokenClassification"),fNo=o(" (FNet model)"),mNo=l(),Cb=a("li"),oge=a("strong"),gNo=o("funnel"),hNo=o(" \u2014 "),vO=a("a"),pNo=o("FunnelForTokenClassification"),uNo=o(" (Funnel Transformer model)"),_No=l(),wb=a("li"),rge=a("strong"),bNo=o("gpt2"),vNo=o(" \u2014 "),FO=a("a"),FNo=o("GPT2ForTokenClassification"),TNo=o(" (OpenAI GPT-2 model)"),MNo=l(),Ab=a("li"),tge=a("strong"),ENo=o("ibert"),CNo=o(" \u2014 "),TO=a("a"),wNo=o("IBertForTokenClassification"),ANo=o(" (I-BERT model)"),yNo=l(),yb=a("li"),age=a("strong"),LNo=o("layoutlm"),xNo=o(" \u2014 "),MO=a("a"),$No=o("LayoutLMForTokenClassification"),kNo=o(" (LayoutLM model)"),SNo=l(),Lb=a("li"),nge=a("strong"),RNo=o("layoutlmv2"),PNo=o(" \u2014 "),EO=a("a"),BNo=o("LayoutLMv2ForTokenClassification"),INo=o(" (LayoutLMv2 model)"),qNo=l(),xb=a("li"),sge=a("strong"),NNo=o("longformer"),jNo=o(" \u2014 "),CO=a("a"),DNo=o("LongformerForTokenClassification"),GNo=o(" (Longformer model)"),ONo=l(),$b=a("li"),lge=a("strong"),VNo=o("megatron-bert"),XNo=o(" \u2014 "),wO=a("a"),zNo=o("MegatronBertForTokenClassification"),WNo=o(" (MegatronBert model)"),QNo=l(),kb=a("li"),ige=a("strong"),HNo=o("mobilebert"),UNo=o(" \u2014 "),AO=a("a"),JNo=o("MobileBertForTokenClassification"),YNo=o(" (MobileBERT model)"),KNo=l(),Sb=a("li"),dge=a("strong"),ZNo=o("mpnet"),ejo=o(" \u2014 "),yO=a("a"),ojo=o("MPNetForTokenClassification"),rjo=o(" (MPNet model)"),tjo=l(),Rb=a("li"),cge=a("strong"),ajo=o("nystromformer"),njo=o(" \u2014 "),LO=a("a"),sjo=o("NystromformerForTokenClassification"),ljo=o(" (Nystromformer model)"),ijo=l(),Pb=a("li"),fge=a("strong"),djo=o("qdqbert"),cjo=o(" \u2014 "),xO=a("a"),fjo=o("QDQBertForTokenClassification"),mjo=o(" (QDQBert model)"),gjo=l(),Bb=a("li"),mge=a("strong"),hjo=o("rembert"),pjo=o(" \u2014 "),$O=a("a"),ujo=o("RemBertForTokenClassification"),_jo=o(" (RemBERT model)"),bjo=l(),Ib=a("li"),gge=a("strong"),vjo=o("roberta"),Fjo=o(" \u2014 "),kO=a("a"),Tjo=o("RobertaForTokenClassification"),Mjo=o(" (RoBERTa model)"),Ejo=l(),qb=a("li"),hge=a("strong"),Cjo=o("roformer"),wjo=o(" \u2014 "),SO=a("a"),Ajo=o("RoFormerForTokenClassification"),yjo=o(" (RoFormer model)"),Ljo=l(),Nb=a("li"),pge=a("strong"),xjo=o("squeezebert"),$jo=o(" \u2014 "),RO=a("a"),kjo=o("SqueezeBertForTokenClassification"),Sjo=o(" (SqueezeBERT model)"),Rjo=l(),jb=a("li"),uge=a("strong"),Pjo=o("xlm"),Bjo=o(" \u2014 "),PO=a("a"),Ijo=o("XLMForTokenClassification"),qjo=o(" (XLM model)"),Njo=l(),Db=a("li"),_ge=a("strong"),jjo=o("xlm-roberta"),Djo=o(" \u2014 "),BO=a("a"),Gjo=o("XLMRobertaForTokenClassification"),Ojo=o(" (XLM-RoBERTa model)"),Vjo=l(),Gb=a("li"),bge=a("strong"),Xjo=o("xlm-roberta-xl"),zjo=o(" \u2014 "),IO=a("a"),Wjo=o("XLMRobertaXLForTokenClassification"),Qjo=o(" (XLM-RoBERTa-XL model)"),Hjo=l(),Ob=a("li"),vge=a("strong"),Ujo=o("xlnet"),Jjo=o(" \u2014 "),qO=a("a"),Yjo=o("XLNetForTokenClassification"),Kjo=o(" (XLNet model)"),Zjo=l(),Vb=a("li"),Fge=a("strong"),eDo=o("yoso"),oDo=o(" \u2014 "),NO=a("a"),rDo=o("YosoForTokenClassification"),tDo=o(" (YOSO model)"),aDo=l(),Xb=a("p"),nDo=o("The model is set in evaluation mode by default using "),Tge=a("code"),sDo=o("model.eval()"),lDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),iDo=o("model.train()"),dDo=l(),F(zb.$$.fragment),rqe=l(),Yi=a("h2"),Wb=a("a"),Ege=a("span"),F(Cy.$$.fragment),cDo=l(),Cge=a("span"),fDo=o("AutoModelForQuestionAnswering"),tqe=l(),qo=a("div"),F(wy.$$.fragment),mDo=l(),Ki=a("p"),gDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jO=a("a"),hDo=o("from_pretrained()"),pDo=o(" class method or the "),DO=a("a"),uDo=o("from_config()"),_Do=o(` class
method.`),bDo=l(),Ay=a("p"),vDo=o("This class cannot be instantiated directly using "),wge=a("code"),FDo=o("__init__()"),TDo=o(" (throws an error)."),MDo=l(),mt=a("div"),F(yy.$$.fragment),EDo=l(),Age=a("p"),CDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wDo=l(),Zi=a("p"),ADo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),yDo=o("not"),LDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),xDo=o("from_pretrained()"),$Do=o(" to load the model weights."),kDo=l(),F(Qb.$$.fragment),SDo=l(),no=a("div"),F(Ly.$$.fragment),RDo=l(),Lge=a("p"),PDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BDo=l(),qa=a("p"),IDo=o("The model class to instantiate is selected based on the "),xge=a("code"),qDo=o("model_type"),NDo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),jDo=o("pretrained_model_name_or_path"),DDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(":"),VDo=l(),V=a("ul"),Hb=a("li"),Sge=a("strong"),XDo=o("albert"),zDo=o(" \u2014 "),OO=a("a"),WDo=o("AlbertForQuestionAnswering"),QDo=o(" (ALBERT model)"),HDo=l(),Ub=a("li"),Rge=a("strong"),UDo=o("bart"),JDo=o(" \u2014 "),VO=a("a"),YDo=o("BartForQuestionAnswering"),KDo=o(" (BART model)"),ZDo=l(),Jb=a("li"),Pge=a("strong"),eGo=o("bert"),oGo=o(" \u2014 "),XO=a("a"),rGo=o("BertForQuestionAnswering"),tGo=o(" (BERT model)"),aGo=l(),Yb=a("li"),Bge=a("strong"),nGo=o("big_bird"),sGo=o(" \u2014 "),zO=a("a"),lGo=o("BigBirdForQuestionAnswering"),iGo=o(" (BigBird model)"),dGo=l(),Kb=a("li"),Ige=a("strong"),cGo=o("bigbird_pegasus"),fGo=o(" \u2014 "),WO=a("a"),mGo=o("BigBirdPegasusForQuestionAnswering"),gGo=o(" (BigBirdPegasus model)"),hGo=l(),Zb=a("li"),qge=a("strong"),pGo=o("camembert"),uGo=o(" \u2014 "),QO=a("a"),_Go=o("CamembertForQuestionAnswering"),bGo=o(" (CamemBERT model)"),vGo=l(),e5=a("li"),Nge=a("strong"),FGo=o("canine"),TGo=o(" \u2014 "),HO=a("a"),MGo=o("CanineForQuestionAnswering"),EGo=o(" (Canine model)"),CGo=l(),o5=a("li"),jge=a("strong"),wGo=o("convbert"),AGo=o(" \u2014 "),UO=a("a"),yGo=o("ConvBertForQuestionAnswering"),LGo=o(" (ConvBERT model)"),xGo=l(),r5=a("li"),Dge=a("strong"),$Go=o("data2vec-text"),kGo=o(" \u2014 "),JO=a("a"),SGo=o("Data2VecTextForQuestionAnswering"),RGo=o(" (Data2VecText model)"),PGo=l(),t5=a("li"),Gge=a("strong"),BGo=o("deberta"),IGo=o(" \u2014 "),YO=a("a"),qGo=o("DebertaForQuestionAnswering"),NGo=o(" (DeBERTa model)"),jGo=l(),a5=a("li"),Oge=a("strong"),DGo=o("deberta-v2"),GGo=o(" \u2014 "),KO=a("a"),OGo=o("DebertaV2ForQuestionAnswering"),VGo=o(" (DeBERTa-v2 model)"),XGo=l(),n5=a("li"),Vge=a("strong"),zGo=o("distilbert"),WGo=o(" \u2014 "),ZO=a("a"),QGo=o("DistilBertForQuestionAnswering"),HGo=o(" (DistilBERT model)"),UGo=l(),s5=a("li"),Xge=a("strong"),JGo=o("electra"),YGo=o(" \u2014 "),eV=a("a"),KGo=o("ElectraForQuestionAnswering"),ZGo=o(" (ELECTRA model)"),eOo=l(),l5=a("li"),zge=a("strong"),oOo=o("flaubert"),rOo=o(" \u2014 "),oV=a("a"),tOo=o("FlaubertForQuestionAnsweringSimple"),aOo=o(" (FlauBERT model)"),nOo=l(),i5=a("li"),Wge=a("strong"),sOo=o("fnet"),lOo=o(" \u2014 "),rV=a("a"),iOo=o("FNetForQuestionAnswering"),dOo=o(" (FNet model)"),cOo=l(),d5=a("li"),Qge=a("strong"),fOo=o("funnel"),mOo=o(" \u2014 "),tV=a("a"),gOo=o("FunnelForQuestionAnswering"),hOo=o(" (Funnel Transformer model)"),pOo=l(),c5=a("li"),Hge=a("strong"),uOo=o("gptj"),_Oo=o(" \u2014 "),aV=a("a"),bOo=o("GPTJForQuestionAnswering"),vOo=o(" (GPT-J model)"),FOo=l(),f5=a("li"),Uge=a("strong"),TOo=o("ibert"),MOo=o(" \u2014 "),nV=a("a"),EOo=o("IBertForQuestionAnswering"),COo=o(" (I-BERT model)"),wOo=l(),m5=a("li"),Jge=a("strong"),AOo=o("layoutlmv2"),yOo=o(" \u2014 "),sV=a("a"),LOo=o("LayoutLMv2ForQuestionAnswering"),xOo=o(" (LayoutLMv2 model)"),$Oo=l(),g5=a("li"),Yge=a("strong"),kOo=o("led"),SOo=o(" \u2014 "),lV=a("a"),ROo=o("LEDForQuestionAnswering"),POo=o(" (LED model)"),BOo=l(),h5=a("li"),Kge=a("strong"),IOo=o("longformer"),qOo=o(" \u2014 "),iV=a("a"),NOo=o("LongformerForQuestionAnswering"),jOo=o(" (Longformer model)"),DOo=l(),p5=a("li"),Zge=a("strong"),GOo=o("lxmert"),OOo=o(" \u2014 "),dV=a("a"),VOo=o("LxmertForQuestionAnswering"),XOo=o(" (LXMERT model)"),zOo=l(),u5=a("li"),ehe=a("strong"),WOo=o("mbart"),QOo=o(" \u2014 "),cV=a("a"),HOo=o("MBartForQuestionAnswering"),UOo=o(" (mBART model)"),JOo=l(),_5=a("li"),ohe=a("strong"),YOo=o("megatron-bert"),KOo=o(" \u2014 "),fV=a("a"),ZOo=o("MegatronBertForQuestionAnswering"),eVo=o(" (MegatronBert model)"),oVo=l(),b5=a("li"),rhe=a("strong"),rVo=o("mobilebert"),tVo=o(" \u2014 "),mV=a("a"),aVo=o("MobileBertForQuestionAnswering"),nVo=o(" (MobileBERT model)"),sVo=l(),v5=a("li"),the=a("strong"),lVo=o("mpnet"),iVo=o(" \u2014 "),gV=a("a"),dVo=o("MPNetForQuestionAnswering"),cVo=o(" (MPNet model)"),fVo=l(),F5=a("li"),ahe=a("strong"),mVo=o("nystromformer"),gVo=o(" \u2014 "),hV=a("a"),hVo=o("NystromformerForQuestionAnswering"),pVo=o(" (Nystromformer model)"),uVo=l(),T5=a("li"),nhe=a("strong"),_Vo=o("qdqbert"),bVo=o(" \u2014 "),pV=a("a"),vVo=o("QDQBertForQuestionAnswering"),FVo=o(" (QDQBert model)"),TVo=l(),M5=a("li"),she=a("strong"),MVo=o("reformer"),EVo=o(" \u2014 "),uV=a("a"),CVo=o("ReformerForQuestionAnswering"),wVo=o(" (Reformer model)"),AVo=l(),E5=a("li"),lhe=a("strong"),yVo=o("rembert"),LVo=o(" \u2014 "),_V=a("a"),xVo=o("RemBertForQuestionAnswering"),$Vo=o(" (RemBERT model)"),kVo=l(),C5=a("li"),ihe=a("strong"),SVo=o("roberta"),RVo=o(" \u2014 "),bV=a("a"),PVo=o("RobertaForQuestionAnswering"),BVo=o(" (RoBERTa model)"),IVo=l(),w5=a("li"),dhe=a("strong"),qVo=o("roformer"),NVo=o(" \u2014 "),vV=a("a"),jVo=o("RoFormerForQuestionAnswering"),DVo=o(" (RoFormer model)"),GVo=l(),A5=a("li"),che=a("strong"),OVo=o("splinter"),VVo=o(" \u2014 "),FV=a("a"),XVo=o("SplinterForQuestionAnswering"),zVo=o(" (Splinter model)"),WVo=l(),y5=a("li"),fhe=a("strong"),QVo=o("squeezebert"),HVo=o(" \u2014 "),TV=a("a"),UVo=o("SqueezeBertForQuestionAnswering"),JVo=o(" (SqueezeBERT model)"),YVo=l(),L5=a("li"),mhe=a("strong"),KVo=o("xlm"),ZVo=o(" \u2014 "),MV=a("a"),eXo=o("XLMForQuestionAnsweringSimple"),oXo=o(" (XLM model)"),rXo=l(),x5=a("li"),ghe=a("strong"),tXo=o("xlm-roberta"),aXo=o(" \u2014 "),EV=a("a"),nXo=o("XLMRobertaForQuestionAnswering"),sXo=o(" (XLM-RoBERTa model)"),lXo=l(),$5=a("li"),hhe=a("strong"),iXo=o("xlm-roberta-xl"),dXo=o(" \u2014 "),CV=a("a"),cXo=o("XLMRobertaXLForQuestionAnswering"),fXo=o(" (XLM-RoBERTa-XL model)"),mXo=l(),k5=a("li"),phe=a("strong"),gXo=o("xlnet"),hXo=o(" \u2014 "),wV=a("a"),pXo=o("XLNetForQuestionAnsweringSimple"),uXo=o(" (XLNet model)"),_Xo=l(),S5=a("li"),uhe=a("strong"),bXo=o("yoso"),vXo=o(" \u2014 "),AV=a("a"),FXo=o("YosoForQuestionAnswering"),TXo=o(" (YOSO model)"),MXo=l(),R5=a("p"),EXo=o("The model is set in evaluation mode by default using "),_he=a("code"),CXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),AXo=o("model.train()"),yXo=l(),F(P5.$$.fragment),aqe=l(),ed=a("h2"),B5=a("a"),vhe=a("span"),F(xy.$$.fragment),LXo=l(),Fhe=a("span"),xXo=o("AutoModelForTableQuestionAnswering"),nqe=l(),No=a("div"),F($y.$$.fragment),$Xo=l(),od=a("p"),kXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yV=a("a"),SXo=o("from_pretrained()"),RXo=o(" class method or the "),LV=a("a"),PXo=o("from_config()"),BXo=o(` class
method.`),IXo=l(),ky=a("p"),qXo=o("This class cannot be instantiated directly using "),The=a("code"),NXo=o("__init__()"),jXo=o(" (throws an error)."),DXo=l(),gt=a("div"),F(Sy.$$.fragment),GXo=l(),Mhe=a("p"),OXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),VXo=l(),rd=a("p"),XXo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),zXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),QXo=o("from_pretrained()"),HXo=o(" to load the model weights."),UXo=l(),F(I5.$$.fragment),JXo=l(),so=a("div"),F(Ry.$$.fragment),YXo=l(),Che=a("p"),KXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZXo=l(),Na=a("p"),ezo=o("The model class to instantiate is selected based on the "),whe=a("code"),ozo=o("model_type"),rzo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),nzo=o("pretrained_model_name_or_path"),szo=o(":"),lzo=l(),Lhe=a("ul"),q5=a("li"),xhe=a("strong"),izo=o("tapas"),dzo=o(" \u2014 "),$V=a("a"),czo=o("TapasForQuestionAnswering"),fzo=o(" (TAPAS model)"),mzo=l(),N5=a("p"),gzo=o("The model is set in evaluation mode by default using "),$he=a("code"),hzo=o("model.eval()"),pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),uzo=o("model.train()"),_zo=l(),F(j5.$$.fragment),sqe=l(),td=a("h2"),D5=a("a"),She=a("span"),F(Py.$$.fragment),bzo=l(),Rhe=a("span"),vzo=o("AutoModelForImageClassification"),lqe=l(),jo=a("div"),F(By.$$.fragment),Fzo=l(),ad=a("p"),Tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kV=a("a"),Mzo=o("from_pretrained()"),Ezo=o(" class method or the "),SV=a("a"),Czo=o("from_config()"),wzo=o(` class
method.`),Azo=l(),Iy=a("p"),yzo=o("This class cannot be instantiated directly using "),Phe=a("code"),Lzo=o("__init__()"),xzo=o(" (throws an error)."),$zo=l(),ht=a("div"),F(qy.$$.fragment),kzo=l(),Bhe=a("p"),Szo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rzo=l(),nd=a("p"),Pzo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),Bzo=o("not"),Izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),qzo=o("from_pretrained()"),Nzo=o(" to load the model weights."),jzo=l(),F(G5.$$.fragment),Dzo=l(),lo=a("div"),F(Ny.$$.fragment),Gzo=l(),qhe=a("p"),Ozo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vzo=l(),ja=a("p"),Xzo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),zzo=o("model_type"),Wzo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),Qzo=o("pretrained_model_name_or_path"),Hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(":"),Yzo=l(),Fe=a("ul"),O5=a("li"),Ghe=a("strong"),Kzo=o("beit"),Zzo=o(" \u2014 "),PV=a("a"),eWo=o("BeitForImageClassification"),oWo=o(" (BEiT model)"),rWo=l(),V5=a("li"),Ohe=a("strong"),tWo=o("convnext"),aWo=o(" \u2014 "),BV=a("a"),nWo=o("ConvNextForImageClassification"),sWo=o(" (ConvNext model)"),lWo=l(),X5=a("li"),Vhe=a("strong"),iWo=o("data2vec-vision"),dWo=o(" \u2014 "),IV=a("a"),cWo=o("Data2VecVisionForImageClassification"),fWo=o(" (Data2VecVision model)"),mWo=l(),Ps=a("li"),Xhe=a("strong"),gWo=o("deit"),hWo=o(" \u2014 "),qV=a("a"),pWo=o("DeiTForImageClassification"),uWo=o(" or "),NV=a("a"),_Wo=o("DeiTForImageClassificationWithTeacher"),bWo=o(" (DeiT model)"),vWo=l(),z5=a("li"),zhe=a("strong"),FWo=o("imagegpt"),TWo=o(" \u2014 "),jV=a("a"),MWo=o("ImageGPTForImageClassification"),EWo=o(" (ImageGPT model)"),CWo=l(),pt=a("li"),Whe=a("strong"),wWo=o("perceiver"),AWo=o(" \u2014 "),DV=a("a"),yWo=o("PerceiverForImageClassificationLearned"),LWo=o(" or "),GV=a("a"),xWo=o("PerceiverForImageClassificationFourier"),$Wo=o(" or "),OV=a("a"),kWo=o("PerceiverForImageClassificationConvProcessing"),SWo=o(" (Perceiver model)"),RWo=l(),W5=a("li"),Qhe=a("strong"),PWo=o("poolformer"),BWo=o(" \u2014 "),VV=a("a"),IWo=o("PoolFormerForImageClassification"),qWo=o(" (PoolFormer model)"),NWo=l(),Q5=a("li"),Hhe=a("strong"),jWo=o("regnet"),DWo=o(" \u2014 "),XV=a("a"),GWo=o("RegNetForImageClassification"),OWo=o(" (RegNet model)"),VWo=l(),H5=a("li"),Uhe=a("strong"),XWo=o("resnet"),zWo=o(" \u2014 "),zV=a("a"),WWo=o("ResNetForImageClassification"),QWo=o(" (ResNet model)"),HWo=l(),U5=a("li"),Jhe=a("strong"),UWo=o("segformer"),JWo=o(" \u2014 "),WV=a("a"),YWo=o("SegformerForImageClassification"),KWo=o(" (SegFormer model)"),ZWo=l(),J5=a("li"),Yhe=a("strong"),eQo=o("swin"),oQo=o(" \u2014 "),QV=a("a"),rQo=o("SwinForImageClassification"),tQo=o(" (Swin model)"),aQo=l(),Y5=a("li"),Khe=a("strong"),nQo=o("van"),sQo=o(" \u2014 "),HV=a("a"),lQo=o("VanForImageClassification"),iQo=o(" (VAN model)"),dQo=l(),K5=a("li"),Zhe=a("strong"),cQo=o("vit"),fQo=o(" \u2014 "),UV=a("a"),mQo=o("ViTForImageClassification"),gQo=o(" (ViT model)"),hQo=l(),Z5=a("p"),pQo=o("The model is set in evaluation mode by default using "),epe=a("code"),uQo=o("model.eval()"),_Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),bQo=o("model.train()"),vQo=l(),F(ev.$$.fragment),iqe=l(),sd=a("h2"),ov=a("a"),rpe=a("span"),F(jy.$$.fragment),FQo=l(),tpe=a("span"),TQo=o("AutoModelForVision2Seq"),dqe=l(),Do=a("div"),F(Dy.$$.fragment),MQo=l(),ld=a("p"),EQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JV=a("a"),CQo=o("from_pretrained()"),wQo=o(" class method or the "),YV=a("a"),AQo=o("from_config()"),yQo=o(` class
method.`),LQo=l(),Gy=a("p"),xQo=o("This class cannot be instantiated directly using "),ape=a("code"),$Qo=o("__init__()"),kQo=o(" (throws an error)."),SQo=l(),ut=a("div"),F(Oy.$$.fragment),RQo=l(),npe=a("p"),PQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BQo=l(),id=a("p"),IQo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),qQo=o("not"),NQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),jQo=o("from_pretrained()"),DQo=o(" to load the model weights."),GQo=l(),F(rv.$$.fragment),OQo=l(),io=a("div"),F(Vy.$$.fragment),VQo=l(),lpe=a("p"),XQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zQo=l(),Da=a("p"),WQo=o("The model class to instantiate is selected based on the "),ipe=a("code"),QQo=o("model_type"),HQo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),UQo=o("pretrained_model_name_or_path"),JQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(":"),ZQo=l(),fpe=a("ul"),tv=a("li"),mpe=a("strong"),eHo=o("vision-encoder-decoder"),oHo=o(" \u2014 "),ZV=a("a"),rHo=o("VisionEncoderDecoderModel"),tHo=o(" (Vision Encoder decoder model)"),aHo=l(),av=a("p"),nHo=o("The model is set in evaluation mode by default using "),gpe=a("code"),sHo=o("model.eval()"),lHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),iHo=o("model.train()"),dHo=l(),F(nv.$$.fragment),cqe=l(),dd=a("h2"),sv=a("a"),ppe=a("span"),F(Xy.$$.fragment),cHo=l(),upe=a("span"),fHo=o("AutoModelForAudioClassification"),fqe=l(),Go=a("div"),F(zy.$$.fragment),mHo=l(),cd=a("p"),gHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eX=a("a"),hHo=o("from_pretrained()"),pHo=o(" class method or the "),oX=a("a"),uHo=o("from_config()"),_Ho=o(` class
method.`),bHo=l(),Wy=a("p"),vHo=o("This class cannot be instantiated directly using "),_pe=a("code"),FHo=o("__init__()"),THo=o(" (throws an error)."),MHo=l(),_t=a("div"),F(Qy.$$.fragment),EHo=l(),bpe=a("p"),CHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wHo=l(),fd=a("p"),AHo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),yHo=o("not"),LHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),xHo=o("from_pretrained()"),$Ho=o(" to load the model weights."),kHo=l(),F(lv.$$.fragment),SHo=l(),co=a("div"),F(Hy.$$.fragment),RHo=l(),Fpe=a("p"),PHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),BHo=l(),Ga=a("p"),IHo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),ke=a("ul"),iv=a("li"),Cpe=a("strong"),XHo=o("data2vec-audio"),zHo=o(" \u2014 "),tX=a("a"),WHo=o("Data2VecAudioForSequenceClassification"),QHo=o(" (Data2VecAudio model)"),HHo=l(),dv=a("li"),wpe=a("strong"),UHo=o("hubert"),JHo=o(" \u2014 "),aX=a("a"),YHo=o("HubertForSequenceClassification"),KHo=o(" (Hubert model)"),ZHo=l(),cv=a("li"),Ape=a("strong"),eUo=o("sew"),oUo=o(" \u2014 "),nX=a("a"),rUo=o("SEWForSequenceClassification"),tUo=o(" (SEW model)"),aUo=l(),fv=a("li"),ype=a("strong"),nUo=o("sew-d"),sUo=o(" \u2014 "),sX=a("a"),lUo=o("SEWDForSequenceClassification"),iUo=o(" (SEW-D model)"),dUo=l(),mv=a("li"),Lpe=a("strong"),cUo=o("unispeech"),fUo=o(" \u2014 "),lX=a("a"),mUo=o("UniSpeechForSequenceClassification"),gUo=o(" (UniSpeech model)"),hUo=l(),gv=a("li"),xpe=a("strong"),pUo=o("unispeech-sat"),uUo=o(" \u2014 "),iX=a("a"),_Uo=o("UniSpeechSatForSequenceClassification"),bUo=o(" (UniSpeechSat model)"),vUo=l(),hv=a("li"),$pe=a("strong"),FUo=o("wav2vec2"),TUo=o(" \u2014 "),dX=a("a"),MUo=o("Wav2Vec2ForSequenceClassification"),EUo=o(" (Wav2Vec2 model)"),CUo=l(),pv=a("li"),kpe=a("strong"),wUo=o("wav2vec2-conformer"),AUo=o(" \u2014 "),cX=a("a"),yUo=o("Wav2Vec2ConformerForSequenceClassification"),LUo=o(" (Wav2Vec2-Conformer model)"),xUo=l(),uv=a("li"),Spe=a("strong"),$Uo=o("wavlm"),kUo=o(" \u2014 "),fX=a("a"),SUo=o("WavLMForSequenceClassification"),RUo=o(" (WavLM model)"),PUo=l(),_v=a("p"),BUo=o("The model is set in evaluation mode by default using "),Rpe=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=a("code"),NUo=o("model.train()"),jUo=l(),F(bv.$$.fragment),mqe=l(),md=a("h2"),vv=a("a"),Bpe=a("span"),F(Uy.$$.fragment),DUo=l(),Ipe=a("span"),GUo=o("AutoModelForAudioFrameClassification"),gqe=l(),Oo=a("div"),F(Jy.$$.fragment),OUo=l(),gd=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mX=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),gX=a("a"),WUo=o("from_config()"),QUo=o(` class
method.`),HUo=l(),Yy=a("p"),UUo=o("This class cannot be instantiated directly using "),qpe=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),bt=a("div"),F(Ky.$$.fragment),ZUo=l(),Npe=a("p"),eJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oJo=l(),hd=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(Fv.$$.fragment),iJo=l(),fo=a("div"),F(Zy.$$.fragment),dJo=l(),Dpe=a("p"),cJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),fJo=l(),Oa=a("p"),mJo=o("The model class to instantiate is selected based on the "),Gpe=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),pJo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),Kr=a("ul"),Tv=a("li"),Xpe=a("strong"),FJo=o("data2vec-audio"),TJo=o(" \u2014 "),pX=a("a"),MJo=o("Data2VecAudioForAudioFrameClassification"),EJo=o(" (Data2VecAudio model)"),CJo=l(),Mv=a("li"),zpe=a("strong"),wJo=o("unispeech-sat"),AJo=o(" \u2014 "),uX=a("a"),yJo=o("UniSpeechSatForAudioFrameClassification"),LJo=o(" (UniSpeechSat model)"),xJo=l(),Ev=a("li"),Wpe=a("strong"),$Jo=o("wav2vec2"),kJo=o(" \u2014 "),_X=a("a"),SJo=o("Wav2Vec2ForAudioFrameClassification"),RJo=o(" (Wav2Vec2 model)"),PJo=l(),Cv=a("li"),Qpe=a("strong"),BJo=o("wav2vec2-conformer"),IJo=o(" \u2014 "),bX=a("a"),qJo=o("Wav2Vec2ConformerForAudioFrameClassification"),NJo=o(" (Wav2Vec2-Conformer model)"),jJo=l(),wv=a("li"),Hpe=a("strong"),DJo=o("wavlm"),GJo=o(" \u2014 "),vX=a("a"),OJo=o("WavLMForAudioFrameClassification"),VJo=o(" (WavLM model)"),XJo=l(),Av=a("p"),zJo=o("The model is set in evaluation mode by default using "),Upe=a("code"),WJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),HJo=o("model.train()"),UJo=l(),F(yv.$$.fragment),hqe=l(),pd=a("h2"),Lv=a("a"),Ype=a("span"),F(eL.$$.fragment),JJo=l(),Kpe=a("span"),YJo=o("AutoModelForCTC"),pqe=l(),Vo=a("div"),F(oL.$$.fragment),KJo=l(),ud=a("p"),ZJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FX=a("a"),eYo=o("from_pretrained()"),oYo=o(" class method or the "),TX=a("a"),rYo=o("from_config()"),tYo=o(` class
method.`),aYo=l(),rL=a("p"),nYo=o("This class cannot be instantiated directly using "),Zpe=a("code"),sYo=o("__init__()"),lYo=o(" (throws an error)."),iYo=l(),vt=a("div"),F(tL.$$.fragment),dYo=l(),eue=a("p"),cYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),fYo=l(),_d=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),gYo=o("not"),hYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),pYo=o("from_pretrained()"),uYo=o(" to load the model weights."),_Yo=l(),F(xv.$$.fragment),bYo=l(),mo=a("div"),F(aL.$$.fragment),vYo=l(),rue=a("p"),FYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TYo=l(),Va=a("p"),MYo=o("The model class to instantiate is selected based on the "),tue=a("code"),EYo=o("model_type"),CYo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(":"),xYo=l(),Se=a("ul"),$v=a("li"),sue=a("strong"),$Yo=o("data2vec-audio"),kYo=o(" \u2014 "),EX=a("a"),SYo=o("Data2VecAudioForCTC"),RYo=o(" (Data2VecAudio model)"),PYo=l(),kv=a("li"),lue=a("strong"),BYo=o("hubert"),IYo=o(" \u2014 "),CX=a("a"),qYo=o("HubertForCTC"),NYo=o(" (Hubert model)"),jYo=l(),Sv=a("li"),iue=a("strong"),DYo=o("sew"),GYo=o(" \u2014 "),wX=a("a"),OYo=o("SEWForCTC"),VYo=o(" (SEW model)"),XYo=l(),Rv=a("li"),due=a("strong"),zYo=o("sew-d"),WYo=o(" \u2014 "),AX=a("a"),QYo=o("SEWDForCTC"),HYo=o(" (SEW-D model)"),UYo=l(),Pv=a("li"),cue=a("strong"),JYo=o("unispeech"),YYo=o(" \u2014 "),yX=a("a"),KYo=o("UniSpeechForCTC"),ZYo=o(" (UniSpeech model)"),eKo=l(),Bv=a("li"),fue=a("strong"),oKo=o("unispeech-sat"),rKo=o(" \u2014 "),LX=a("a"),tKo=o("UniSpeechSatForCTC"),aKo=o(" (UniSpeechSat model)"),nKo=l(),Iv=a("li"),mue=a("strong"),sKo=o("wav2vec2"),lKo=o(" \u2014 "),xX=a("a"),iKo=o("Wav2Vec2ForCTC"),dKo=o(" (Wav2Vec2 model)"),cKo=l(),qv=a("li"),gue=a("strong"),fKo=o("wav2vec2-conformer"),mKo=o(" \u2014 "),$X=a("a"),gKo=o("Wav2Vec2ConformerForCTC"),hKo=o(" (Wav2Vec2-Conformer model)"),pKo=l(),Nv=a("li"),hue=a("strong"),uKo=o("wavlm"),_Ko=o(" \u2014 "),kX=a("a"),bKo=o("WavLMForCTC"),vKo=o(" (WavLM model)"),FKo=l(),jv=a("p"),TKo=o("The model is set in evaluation mode by default using "),pue=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),CKo=o("model.train()"),wKo=l(),F(Dv.$$.fragment),uqe=l(),bd=a("h2"),Gv=a("a"),_ue=a("span"),F(nL.$$.fragment),AKo=l(),bue=a("span"),yKo=o("AutoModelForSpeechSeq2Seq"),_qe=l(),Xo=a("div"),F(sL.$$.fragment),LKo=l(),vd=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SX=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),RX=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),PKo=l(),lL=a("p"),BKo=o("This class cannot be instantiated directly using "),vue=a("code"),IKo=o("__init__()"),qKo=o(" (throws an error)."),NKo=l(),Ft=a("div"),F(iL.$$.fragment),jKo=l(),Fue=a("p"),DKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GKo=l(),Fd=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),zKo=o("from_pretrained()"),WKo=o(" to load the model weights."),QKo=l(),F(Ov.$$.fragment),HKo=l(),go=a("div"),F(dL.$$.fragment),UKo=l(),Mue=a("p"),JKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YKo=l(),Xa=a("p"),KKo=o("The model class to instantiate is selected based on the "),Eue=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),cL=a("ul"),Vv=a("li"),Aue=a("strong"),sZo=o("speech-encoder-decoder"),lZo=o(" \u2014 "),BX=a("a"),iZo=o("SpeechEncoderDecoderModel"),dZo=o(" (Speech Encoder decoder model)"),cZo=l(),Xv=a("li"),yue=a("strong"),fZo=o("speech_to_text"),mZo=o(" \u2014 "),IX=a("a"),gZo=o("Speech2TextForConditionalGeneration"),hZo=o(" (Speech2Text model)"),pZo=l(),zv=a("p"),uZo=o("The model is set in evaluation mode by default using "),Lue=a("code"),_Zo=o("model.eval()"),bZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),vZo=o("model.train()"),FZo=l(),F(Wv.$$.fragment),bqe=l(),Td=a("h2"),Qv=a("a"),$ue=a("span"),F(fL.$$.fragment),TZo=l(),kue=a("span"),MZo=o("AutoModelForAudioXVector"),vqe=l(),zo=a("div"),F(mL.$$.fragment),EZo=l(),Md=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qX=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),NX=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),gL=a("p"),$Zo=o("This class cannot be instantiated directly using "),Sue=a("code"),kZo=o("__init__()"),SZo=o(" (throws an error)."),RZo=l(),Tt=a("div"),F(hL.$$.fragment),PZo=l(),Rue=a("p"),BZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),IZo=l(),Ed=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),F(Hv.$$.fragment),VZo=l(),ho=a("div"),F(pL.$$.fragment),XZo=l(),Bue=a("p"),zZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),WZo=l(),za=a("p"),QZo=o("The model class to instantiate is selected based on the "),Iue=a("code"),HZo=o("model_type"),UZo=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(":"),eer=l(),Zr=a("ul"),Uv=a("li"),jue=a("strong"),oer=o("data2vec-audio"),rer=o(" \u2014 "),DX=a("a"),ter=o("Data2VecAudioForXVector"),aer=o(" (Data2VecAudio model)"),ner=l(),Jv=a("li"),Due=a("strong"),ser=o("unispeech-sat"),ler=o(" \u2014 "),GX=a("a"),ier=o("UniSpeechSatForXVector"),der=o(" (UniSpeechSat model)"),cer=l(),Yv=a("li"),Gue=a("strong"),fer=o("wav2vec2"),mer=o(" \u2014 "),OX=a("a"),ger=o("Wav2Vec2ForXVector"),her=o(" (Wav2Vec2 model)"),per=l(),Kv=a("li"),Oue=a("strong"),uer=o("wav2vec2-conformer"),_er=o(" \u2014 "),VX=a("a"),ber=o("Wav2Vec2ConformerForXVector"),ver=o(" (Wav2Vec2-Conformer model)"),Fer=l(),Zv=a("li"),Vue=a("strong"),Ter=o("wavlm"),Mer=o(" \u2014 "),XX=a("a"),Eer=o("WavLMForXVector"),Cer=o(" (WavLM model)"),wer=l(),eF=a("p"),Aer=o("The model is set in evaluation mode by default using "),Xue=a("code"),yer=o("model.eval()"),Ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),xer=o("model.train()"),$er=l(),F(oF.$$.fragment),Fqe=l(),Cd=a("h2"),rF=a("a"),Wue=a("span"),F(uL.$$.fragment),ker=l(),Que=a("span"),Ser=o("AutoModelForMaskedImageModeling"),Tqe=l(),Wo=a("div"),F(_L.$$.fragment),Rer=l(),wd=a("p"),Per=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zX=a("a"),Ber=o("from_pretrained()"),Ier=o(" class method or the "),WX=a("a"),qer=o("from_config()"),Ner=o(` class
method.`),jer=l(),bL=a("p"),Der=o("This class cannot be instantiated directly using "),Hue=a("code"),Ger=o("__init__()"),Oer=o(" (throws an error)."),Ver=l(),Mt=a("div"),F(vL.$$.fragment),Xer=l(),Uue=a("p"),zer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wer=l(),Ad=a("p"),Qer=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Her=o("not"),Uer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Jer=o("from_pretrained()"),Yer=o(" to load the model weights."),Ker=l(),F(tF.$$.fragment),Zer=l(),po=a("div"),F(FL.$$.fragment),eor=l(),Yue=a("p"),oor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ror=l(),Wa=a("p"),tor=o("The model class to instantiate is selected based on the "),Kue=a("code"),aor=o("model_type"),nor=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(":"),cor=l(),yd=a("ul"),aF=a("li"),o_e=a("strong"),mor=o("deit"),gor=o(" \u2014 "),HX=a("a"),hor=o("DeiTForMaskedImageModeling"),por=o(" (DeiT model)"),uor=l(),nF=a("li"),r_e=a("strong"),_or=o("swin"),bor=o(" \u2014 "),UX=a("a"),vor=o("SwinForMaskedImageModeling"),For=o(" (Swin model)"),Tor=l(),sF=a("li"),t_e=a("strong"),Mor=o("vit"),Eor=o(" \u2014 "),JX=a("a"),Cor=o("ViTForMaskedImageModeling"),wor=o(" (ViT model)"),Aor=l(),lF=a("p"),yor=o("The model is set in evaluation mode by default using "),a_e=a("code"),Lor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),$or=o("model.train()"),kor=l(),F(iF.$$.fragment),Mqe=l(),Ld=a("h2"),dF=a("a"),s_e=a("span"),F(TL.$$.fragment),Sor=l(),l_e=a("span"),Ror=o("AutoModelForObjectDetection"),Eqe=l(),Qo=a("div"),F(ML.$$.fragment),Por=l(),xd=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YX=a("a"),Ior=o("from_pretrained()"),qor=o(" class method or the "),KX=a("a"),Nor=o("from_config()"),jor=o(` class
method.`),Dor=l(),EL=a("p"),Gor=o("This class cannot be instantiated directly using "),i_e=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),Et=a("div"),F(CL.$$.fragment),zor=l(),d_e=a("p"),Wor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qor=l(),$d=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),F(cF.$$.fragment),err=l(),uo=a("div"),F(wL.$$.fragment),orr=l(),f_e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),trr=l(),Qa=a("p"),arr=o("The model class to instantiate is selected based on the "),m_e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),frr=l(),AL=a("ul"),fF=a("li"),p_e=a("strong"),mrr=o("detr"),grr=o(" \u2014 "),ez=a("a"),hrr=o("DetrForObjectDetection"),prr=o(" (DETR model)"),urr=l(),mF=a("li"),u_e=a("strong"),_rr=o("yolos"),brr=o(" \u2014 "),oz=a("a"),vrr=o("YolosForObjectDetection"),Frr=o(" (YOLOS model)"),Trr=l(),gF=a("p"),Mrr=o("The model is set in evaluation mode by default using "),__e=a("code"),Err=o("model.eval()"),Crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=a("code"),wrr=o("model.train()"),Arr=l(),F(hF.$$.fragment),Cqe=l(),kd=a("h2"),pF=a("a"),v_e=a("span"),F(yL.$$.fragment),yrr=l(),F_e=a("span"),Lrr=o("AutoModelForImageSegmentation"),wqe=l(),Ho=a("div"),F(LL.$$.fragment),xrr=l(),Sd=a("p"),$rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rz=a("a"),krr=o("from_pretrained()"),Srr=o(" class method or the "),tz=a("a"),Rrr=o("from_config()"),Prr=o(` class
method.`),Brr=l(),xL=a("p"),Irr=o("This class cannot be instantiated directly using "),T_e=a("code"),qrr=o("__init__()"),Nrr=o(" (throws an error)."),jrr=l(),Ct=a("div"),F($L.$$.fragment),Drr=l(),M_e=a("p"),Grr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Orr=l(),Rd=a("p"),Vrr=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),Xrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),Wrr=o("from_pretrained()"),Qrr=o(" to load the model weights."),Hrr=l(),F(uF.$$.fragment),Urr=l(),_o=a("div"),F(kL.$$.fragment),Jrr=l(),C_e=a("p"),Yrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Krr=l(),Ha=a("p"),Zrr=o("The model class to instantiate is selected based on the "),w_e=a("code"),etr=o("model_type"),otr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(":"),str=l(),L_e=a("ul"),_F=a("li"),x_e=a("strong"),ltr=o("detr"),itr=o(" \u2014 "),nz=a("a"),dtr=o("DetrForSegmentation"),ctr=o(" (DETR model)"),ftr=l(),bF=a("p"),mtr=o("The model is set in evaluation mode by default using "),$_e=a("code"),gtr=o("model.eval()"),htr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),ptr=o("model.train()"),utr=l(),F(vF.$$.fragment),Aqe=l(),Pd=a("h2"),FF=a("a"),S_e=a("span"),F(SL.$$.fragment),_tr=l(),R_e=a("span"),btr=o("AutoModelForSemanticSegmentation"),yqe=l(),Uo=a("div"),F(RL.$$.fragment),vtr=l(),Bd=a("p"),Ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sz=a("a"),Ttr=o("from_pretrained()"),Mtr=o(" class method or the "),lz=a("a"),Etr=o("from_config()"),Ctr=o(` class
method.`),wtr=l(),PL=a("p"),Atr=o("This class cannot be instantiated directly using "),P_e=a("code"),ytr=o("__init__()"),Ltr=o(" (throws an error)."),xtr=l(),wt=a("div"),F(BL.$$.fragment),$tr=l(),B_e=a("p"),ktr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Str=l(),Id=a("p"),Rtr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),Ptr=o("not"),Btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),Itr=o("from_pretrained()"),qtr=o(" to load the model weights."),Ntr=l(),F(TF.$$.fragment),jtr=l(),bo=a("div"),F(IL.$$.fragment),Dtr=l(),q_e=a("p"),Gtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Otr=l(),Ua=a("p"),Vtr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Xtr=o("model_type"),ztr=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),Wtr=o("pretrained_model_name_or_path"),Qtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(":"),Jtr=l(),Ja=a("ul"),MF=a("li"),G_e=a("strong"),Ytr=o("beit"),Ktr=o(" \u2014 "),dz=a("a"),Ztr=o("BeitForSemanticSegmentation"),ear=o(" (BEiT model)"),oar=l(),EF=a("li"),O_e=a("strong"),rar=o("data2vec-vision"),tar=o(" \u2014 "),cz=a("a"),aar=o("Data2VecVisionForSemanticSegmentation"),nar=o(" (Data2VecVision model)"),sar=l(),CF=a("li"),V_e=a("strong"),lar=o("dpt"),iar=o(" \u2014 "),fz=a("a"),dar=o("DPTForSemanticSegmentation"),car=o(" (DPT model)"),far=l(),wF=a("li"),X_e=a("strong"),mar=o("segformer"),gar=o(" \u2014 "),mz=a("a"),har=o("SegformerForSemanticSegmentation"),par=o(" (SegFormer model)"),uar=l(),AF=a("p"),_ar=o("The model is set in evaluation mode by default using "),z_e=a("code"),bar=o("model.eval()"),Far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),Tar=o("model.train()"),Mar=l(),F(yF.$$.fragment),Lqe=l(),qd=a("h2"),LF=a("a"),Q_e=a("span"),F(qL.$$.fragment),Ear=l(),H_e=a("span"),Car=o("AutoModelForInstanceSegmentation"),xqe=l(),Jo=a("div"),F(NL.$$.fragment),war=l(),Nd=a("p"),Aar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gz=a("a"),yar=o("from_pretrained()"),Lar=o(" class method or the "),hz=a("a"),xar=o("from_config()"),$ar=o(` class
method.`),kar=l(),jL=a("p"),Sar=o("This class cannot be instantiated directly using "),U_e=a("code"),Rar=o("__init__()"),Par=o(" (throws an error)."),Bar=l(),At=a("div"),F(DL.$$.fragment),Iar=l(),J_e=a("p"),qar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nar=l(),jd=a("p"),jar=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Dar=o("not"),Gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),Oar=o("from_pretrained()"),Var=o(" to load the model weights."),Xar=l(),F(xF.$$.fragment),zar=l(),vo=a("div"),F(GL.$$.fragment),War=l(),K_e=a("p"),Qar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Har=l(),Ya=a("p"),Uar=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Jar=o("model_type"),Yar=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),Kar=o("pretrained_model_name_or_path"),Zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(":"),rnr=l(),r2e=a("ul"),$F=a("li"),t2e=a("strong"),tnr=o("maskformer"),anr=o(" \u2014 "),uz=a("a"),nnr=o("MaskFormerForInstanceSegmentation"),snr=o(" (MaskFormer model)"),lnr=l(),kF=a("p"),inr=o("The model is set in evaluation mode by default using "),a2e=a("code"),dnr=o("model.eval()"),cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=a("code"),fnr=o("model.train()"),mnr=l(),F(SF.$$.fragment),$qe=l(),Dd=a("h2"),RF=a("a"),s2e=a("span"),F(OL.$$.fragment),gnr=l(),l2e=a("span"),hnr=o("TFAutoModel"),kqe=l(),Yo=a("div"),F(VL.$$.fragment),pnr=l(),Gd=a("p"),unr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_z=a("a"),_nr=o("from_pretrained()"),bnr=o(" class method or the "),bz=a("a"),vnr=o("from_config()"),Fnr=o(` class
method.`),Tnr=l(),XL=a("p"),Mnr=o("This class cannot be instantiated directly using "),i2e=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),yt=a("div"),F(zL.$$.fragment),Anr=l(),d2e=a("p"),ynr=o("Instantiates one of the base model classes of the library from a configuration."),Lnr=l(),Od=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),$nr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Snr=o("from_pretrained()"),Rnr=o(" to load the model weights."),Pnr=l(),F(PF.$$.fragment),Bnr=l(),wr=a("div"),F(WL.$$.fragment),Inr=l(),f2e=a("p"),qnr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nnr=l(),Ka=a("p"),jnr=o("The model class to instantiate is selected based on the "),m2e=a("code"),Dnr=o("model_type"),Gnr=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),Onr=o("pretrained_model_name_or_path"),Vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(":"),Wnr=l(),N=a("ul"),BF=a("li"),p2e=a("strong"),Qnr=o("albert"),Hnr=o(" \u2014 "),Fz=a("a"),Unr=o("TFAlbertModel"),Jnr=o(" (ALBERT model)"),Ynr=l(),IF=a("li"),u2e=a("strong"),Knr=o("bart"),Znr=o(" \u2014 "),Tz=a("a"),esr=o("TFBartModel"),osr=o(" (BART model)"),rsr=l(),qF=a("li"),_2e=a("strong"),tsr=o("bert"),asr=o(" \u2014 "),Mz=a("a"),nsr=o("TFBertModel"),ssr=o(" (BERT model)"),lsr=l(),NF=a("li"),b2e=a("strong"),isr=o("blenderbot"),dsr=o(" \u2014 "),Ez=a("a"),csr=o("TFBlenderbotModel"),fsr=o(" (Blenderbot model)"),msr=l(),jF=a("li"),v2e=a("strong"),gsr=o("blenderbot-small"),hsr=o(" \u2014 "),Cz=a("a"),psr=o("TFBlenderbotSmallModel"),usr=o(" (BlenderbotSmall model)"),_sr=l(),DF=a("li"),F2e=a("strong"),bsr=o("camembert"),vsr=o(" \u2014 "),wz=a("a"),Fsr=o("TFCamembertModel"),Tsr=o(" (CamemBERT model)"),Msr=l(),GF=a("li"),T2e=a("strong"),Esr=o("clip"),Csr=o(" \u2014 "),Az=a("a"),wsr=o("TFCLIPModel"),Asr=o(" (CLIP model)"),ysr=l(),OF=a("li"),M2e=a("strong"),Lsr=o("convbert"),xsr=o(" \u2014 "),yz=a("a"),$sr=o("TFConvBertModel"),ksr=o(" (ConvBERT model)"),Ssr=l(),VF=a("li"),E2e=a("strong"),Rsr=o("convnext"),Psr=o(" \u2014 "),Lz=a("a"),Bsr=o("TFConvNextModel"),Isr=o(" (ConvNext model)"),qsr=l(),XF=a("li"),C2e=a("strong"),Nsr=o("ctrl"),jsr=o(" \u2014 "),xz=a("a"),Dsr=o("TFCTRLModel"),Gsr=o(" (CTRL model)"),Osr=l(),zF=a("li"),w2e=a("strong"),Vsr=o("data2vec-vision"),Xsr=o(" \u2014 "),$z=a("a"),zsr=o("TFData2VecVisionModel"),Wsr=o(" (Data2VecVision model)"),Qsr=l(),WF=a("li"),A2e=a("strong"),Hsr=o("deberta"),Usr=o(" \u2014 "),kz=a("a"),Jsr=o("TFDebertaModel"),Ysr=o(" (DeBERTa model)"),Ksr=l(),QF=a("li"),y2e=a("strong"),Zsr=o("deberta-v2"),elr=o(" \u2014 "),Sz=a("a"),olr=o("TFDebertaV2Model"),rlr=o(" (DeBERTa-v2 model)"),tlr=l(),HF=a("li"),L2e=a("strong"),alr=o("distilbert"),nlr=o(" \u2014 "),Rz=a("a"),slr=o("TFDistilBertModel"),llr=o(" (DistilBERT model)"),ilr=l(),UF=a("li"),x2e=a("strong"),dlr=o("dpr"),clr=o(" \u2014 "),Pz=a("a"),flr=o("TFDPRQuestionEncoder"),mlr=o(" (DPR model)"),glr=l(),JF=a("li"),$2e=a("strong"),hlr=o("electra"),plr=o(" \u2014 "),Bz=a("a"),ulr=o("TFElectraModel"),_lr=o(" (ELECTRA model)"),blr=l(),YF=a("li"),k2e=a("strong"),vlr=o("flaubert"),Flr=o(" \u2014 "),Iz=a("a"),Tlr=o("TFFlaubertModel"),Mlr=o(" (FlauBERT model)"),Elr=l(),Bs=a("li"),S2e=a("strong"),Clr=o("funnel"),wlr=o(" \u2014 "),qz=a("a"),Alr=o("TFFunnelModel"),ylr=o(" or "),Nz=a("a"),Llr=o("TFFunnelBaseModel"),xlr=o(" (Funnel Transformer model)"),$lr=l(),KF=a("li"),R2e=a("strong"),klr=o("gpt2"),Slr=o(" \u2014 "),jz=a("a"),Rlr=o("TFGPT2Model"),Plr=o(" (OpenAI GPT-2 model)"),Blr=l(),ZF=a("li"),P2e=a("strong"),Ilr=o("gptj"),qlr=o(" \u2014 "),Dz=a("a"),Nlr=o("TFGPTJModel"),jlr=o(" (GPT-J model)"),Dlr=l(),eT=a("li"),B2e=a("strong"),Glr=o("hubert"),Olr=o(" \u2014 "),Gz=a("a"),Vlr=o("TFHubertModel"),Xlr=o(" (Hubert model)"),zlr=l(),oT=a("li"),I2e=a("strong"),Wlr=o("layoutlm"),Qlr=o(" \u2014 "),Oz=a("a"),Hlr=o("TFLayoutLMModel"),Ulr=o(" (LayoutLM model)"),Jlr=l(),rT=a("li"),q2e=a("strong"),Ylr=o("led"),Klr=o(" \u2014 "),Vz=a("a"),Zlr=o("TFLEDModel"),eir=o(" (LED model)"),oir=l(),tT=a("li"),N2e=a("strong"),rir=o("longformer"),tir=o(" \u2014 "),Xz=a("a"),air=o("TFLongformerModel"),nir=o(" (Longformer model)"),sir=l(),aT=a("li"),j2e=a("strong"),lir=o("lxmert"),iir=o(" \u2014 "),zz=a("a"),dir=o("TFLxmertModel"),cir=o(" (LXMERT model)"),fir=l(),nT=a("li"),D2e=a("strong"),mir=o("marian"),gir=o(" \u2014 "),Wz=a("a"),hir=o("TFMarianModel"),pir=o(" (Marian model)"),uir=l(),sT=a("li"),G2e=a("strong"),_ir=o("mbart"),bir=o(" \u2014 "),Qz=a("a"),vir=o("TFMBartModel"),Fir=o(" (mBART model)"),Tir=l(),lT=a("li"),O2e=a("strong"),Mir=o("mobilebert"),Eir=o(" \u2014 "),Hz=a("a"),Cir=o("TFMobileBertModel"),wir=o(" (MobileBERT model)"),Air=l(),iT=a("li"),V2e=a("strong"),yir=o("mpnet"),Lir=o(" \u2014 "),Uz=a("a"),xir=o("TFMPNetModel"),$ir=o(" (MPNet model)"),kir=l(),dT=a("li"),X2e=a("strong"),Sir=o("mt5"),Rir=o(" \u2014 "),Jz=a("a"),Pir=o("TFMT5Model"),Bir=o(" (mT5 model)"),Iir=l(),cT=a("li"),z2e=a("strong"),qir=o("openai-gpt"),Nir=o(" \u2014 "),Yz=a("a"),jir=o("TFOpenAIGPTModel"),Dir=o(" (OpenAI GPT model)"),Gir=l(),fT=a("li"),W2e=a("strong"),Oir=o("pegasus"),Vir=o(" \u2014 "),Kz=a("a"),Xir=o("TFPegasusModel"),zir=o(" (Pegasus model)"),Wir=l(),mT=a("li"),Q2e=a("strong"),Qir=o("rembert"),Hir=o(" \u2014 "),Zz=a("a"),Uir=o("TFRemBertModel"),Jir=o(" (RemBERT model)"),Yir=l(),gT=a("li"),H2e=a("strong"),Kir=o("roberta"),Zir=o(" \u2014 "),eW=a("a"),edr=o("TFRobertaModel"),odr=o(" (RoBERTa model)"),rdr=l(),hT=a("li"),U2e=a("strong"),tdr=o("roformer"),adr=o(" \u2014 "),oW=a("a"),ndr=o("TFRoFormerModel"),sdr=o(" (RoFormer model)"),ldr=l(),pT=a("li"),J2e=a("strong"),idr=o("speech_to_text"),ddr=o(" \u2014 "),rW=a("a"),cdr=o("TFSpeech2TextModel"),fdr=o(" (Speech2Text model)"),mdr=l(),uT=a("li"),Y2e=a("strong"),gdr=o("swin"),hdr=o(" \u2014 "),tW=a("a"),pdr=o("TFSwinModel"),udr=o(" (Swin model)"),_dr=l(),_T=a("li"),K2e=a("strong"),bdr=o("t5"),vdr=o(" \u2014 "),aW=a("a"),Fdr=o("TFT5Model"),Tdr=o(" (T5 model)"),Mdr=l(),bT=a("li"),Z2e=a("strong"),Edr=o("tapas"),Cdr=o(" \u2014 "),nW=a("a"),wdr=o("TFTapasModel"),Adr=o(" (TAPAS model)"),ydr=l(),vT=a("li"),e1e=a("strong"),Ldr=o("transfo-xl"),xdr=o(" \u2014 "),sW=a("a"),$dr=o("TFTransfoXLModel"),kdr=o(" (Transformer-XL model)"),Sdr=l(),FT=a("li"),o1e=a("strong"),Rdr=o("vit"),Pdr=o(" \u2014 "),lW=a("a"),Bdr=o("TFViTModel"),Idr=o(" (ViT model)"),qdr=l(),TT=a("li"),r1e=a("strong"),Ndr=o("vit_mae"),jdr=o(" \u2014 "),iW=a("a"),Ddr=o("TFViTMAEModel"),Gdr=o(" (ViTMAE model)"),Odr=l(),MT=a("li"),t1e=a("strong"),Vdr=o("wav2vec2"),Xdr=o(" \u2014 "),dW=a("a"),zdr=o("TFWav2Vec2Model"),Wdr=o(" (Wav2Vec2 model)"),Qdr=l(),ET=a("li"),a1e=a("strong"),Hdr=o("xlm"),Udr=o(" \u2014 "),cW=a("a"),Jdr=o("TFXLMModel"),Ydr=o(" (XLM model)"),Kdr=l(),CT=a("li"),n1e=a("strong"),Zdr=o("xlm-roberta"),ecr=o(" \u2014 "),fW=a("a"),ocr=o("TFXLMRobertaModel"),rcr=o(" (XLM-RoBERTa model)"),tcr=l(),wT=a("li"),s1e=a("strong"),acr=o("xlnet"),ncr=o(" \u2014 "),mW=a("a"),scr=o("TFXLNetModel"),lcr=o(" (XLNet model)"),icr=l(),F(AT.$$.fragment),Sqe=l(),Vd=a("h2"),yT=a("a"),l1e=a("span"),F(QL.$$.fragment),dcr=l(),i1e=a("span"),ccr=o("TFAutoModelForPreTraining"),Rqe=l(),Ko=a("div"),F(HL.$$.fragment),fcr=l(),Xd=a("p"),mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gW=a("a"),gcr=o("from_pretrained()"),hcr=o(" class method or the "),hW=a("a"),pcr=o("from_config()"),ucr=o(` class
method.`),_cr=l(),UL=a("p"),bcr=o("This class cannot be instantiated directly using "),d1e=a("code"),vcr=o("__init__()"),Fcr=o(" (throws an error)."),Tcr=l(),Lt=a("div"),F(JL.$$.fragment),Mcr=l(),c1e=a("p"),Ecr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ccr=l(),zd=a("p"),wcr=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),Acr=o("not"),ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Lcr=o("from_pretrained()"),xcr=o(" to load the model weights."),$cr=l(),F(LT.$$.fragment),kcr=l(),Ar=a("div"),F(YL.$$.fragment),Scr=l(),m1e=a("p"),Rcr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pcr=l(),Za=a("p"),Bcr=o("The model class to instantiate is selected based on the "),g1e=a("code"),Icr=o("model_type"),qcr=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),Ncr=o("pretrained_model_name_or_path"),jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(":"),Ocr=l(),se=a("ul"),xT=a("li"),u1e=a("strong"),Vcr=o("albert"),Xcr=o(" \u2014 "),uW=a("a"),zcr=o("TFAlbertForPreTraining"),Wcr=o(" (ALBERT model)"),Qcr=l(),$T=a("li"),_1e=a("strong"),Hcr=o("bart"),Ucr=o(" \u2014 "),_W=a("a"),Jcr=o("TFBartForConditionalGeneration"),Ycr=o(" (BART model)"),Kcr=l(),kT=a("li"),b1e=a("strong"),Zcr=o("bert"),efr=o(" \u2014 "),bW=a("a"),ofr=o("TFBertForPreTraining"),rfr=o(" (BERT model)"),tfr=l(),ST=a("li"),v1e=a("strong"),afr=o("camembert"),nfr=o(" \u2014 "),vW=a("a"),sfr=o("TFCamembertForMaskedLM"),lfr=o(" (CamemBERT model)"),ifr=l(),RT=a("li"),F1e=a("strong"),dfr=o("ctrl"),cfr=o(" \u2014 "),FW=a("a"),ffr=o("TFCTRLLMHeadModel"),mfr=o(" (CTRL model)"),gfr=l(),PT=a("li"),T1e=a("strong"),hfr=o("distilbert"),pfr=o(" \u2014 "),TW=a("a"),ufr=o("TFDistilBertForMaskedLM"),_fr=o(" (DistilBERT model)"),bfr=l(),BT=a("li"),M1e=a("strong"),vfr=o("electra"),Ffr=o(" \u2014 "),MW=a("a"),Tfr=o("TFElectraForPreTraining"),Mfr=o(" (ELECTRA model)"),Efr=l(),IT=a("li"),E1e=a("strong"),Cfr=o("flaubert"),wfr=o(" \u2014 "),EW=a("a"),Afr=o("TFFlaubertWithLMHeadModel"),yfr=o(" (FlauBERT model)"),Lfr=l(),qT=a("li"),C1e=a("strong"),xfr=o("funnel"),$fr=o(" \u2014 "),CW=a("a"),kfr=o("TFFunnelForPreTraining"),Sfr=o(" (Funnel Transformer model)"),Rfr=l(),NT=a("li"),w1e=a("strong"),Pfr=o("gpt2"),Bfr=o(" \u2014 "),wW=a("a"),Ifr=o("TFGPT2LMHeadModel"),qfr=o(" (OpenAI GPT-2 model)"),Nfr=l(),jT=a("li"),A1e=a("strong"),jfr=o("layoutlm"),Dfr=o(" \u2014 "),AW=a("a"),Gfr=o("TFLayoutLMForMaskedLM"),Ofr=o(" (LayoutLM model)"),Vfr=l(),DT=a("li"),y1e=a("strong"),Xfr=o("lxmert"),zfr=o(" \u2014 "),yW=a("a"),Wfr=o("TFLxmertForPreTraining"),Qfr=o(" (LXMERT model)"),Hfr=l(),GT=a("li"),L1e=a("strong"),Ufr=o("mobilebert"),Jfr=o(" \u2014 "),LW=a("a"),Yfr=o("TFMobileBertForPreTraining"),Kfr=o(" (MobileBERT model)"),Zfr=l(),OT=a("li"),x1e=a("strong"),emr=o("mpnet"),omr=o(" \u2014 "),xW=a("a"),rmr=o("TFMPNetForMaskedLM"),tmr=o(" (MPNet model)"),amr=l(),VT=a("li"),$1e=a("strong"),nmr=o("openai-gpt"),smr=o(" \u2014 "),$W=a("a"),lmr=o("TFOpenAIGPTLMHeadModel"),imr=o(" (OpenAI GPT model)"),dmr=l(),XT=a("li"),k1e=a("strong"),cmr=o("roberta"),fmr=o(" \u2014 "),kW=a("a"),mmr=o("TFRobertaForMaskedLM"),gmr=o(" (RoBERTa model)"),hmr=l(),zT=a("li"),S1e=a("strong"),pmr=o("t5"),umr=o(" \u2014 "),SW=a("a"),_mr=o("TFT5ForConditionalGeneration"),bmr=o(" (T5 model)"),vmr=l(),WT=a("li"),R1e=a("strong"),Fmr=o("tapas"),Tmr=o(" \u2014 "),RW=a("a"),Mmr=o("TFTapasForMaskedLM"),Emr=o(" (TAPAS model)"),Cmr=l(),QT=a("li"),P1e=a("strong"),wmr=o("transfo-xl"),Amr=o(" \u2014 "),PW=a("a"),ymr=o("TFTransfoXLLMHeadModel"),Lmr=o(" (Transformer-XL model)"),xmr=l(),HT=a("li"),B1e=a("strong"),$mr=o("vit_mae"),kmr=o(" \u2014 "),BW=a("a"),Smr=o("TFViTMAEForPreTraining"),Rmr=o(" (ViTMAE model)"),Pmr=l(),UT=a("li"),I1e=a("strong"),Bmr=o("xlm"),Imr=o(" \u2014 "),IW=a("a"),qmr=o("TFXLMWithLMHeadModel"),Nmr=o(" (XLM model)"),jmr=l(),JT=a("li"),q1e=a("strong"),Dmr=o("xlm-roberta"),Gmr=o(" \u2014 "),qW=a("a"),Omr=o("TFXLMRobertaForMaskedLM"),Vmr=o(" (XLM-RoBERTa model)"),Xmr=l(),YT=a("li"),N1e=a("strong"),zmr=o("xlnet"),Wmr=o(" \u2014 "),NW=a("a"),Qmr=o("TFXLNetLMHeadModel"),Hmr=o(" (XLNet model)"),Umr=l(),F(KT.$$.fragment),Pqe=l(),Wd=a("h2"),ZT=a("a"),j1e=a("span"),F(KL.$$.fragment),Jmr=l(),D1e=a("span"),Ymr=o("TFAutoModelForCausalLM"),Bqe=l(),Zo=a("div"),F(ZL.$$.fragment),Kmr=l(),Qd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jW=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),DW=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),e8=a("p"),ngr=o("This class cannot be instantiated directly using "),G1e=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),xt=a("div"),F(o8.$$.fragment),dgr=l(),O1e=a("p"),cgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fgr=l(),Hd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),pgr=o("from_pretrained()"),ugr=o(" to load the model weights."),_gr=l(),F(eM.$$.fragment),bgr=l(),yr=a("div"),F(r8.$$.fragment),vgr=l(),X1e=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tgr=l(),en=a("p"),Mgr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),ygr=o("pretrained_model_name_or_path"),Lgr=o(":"),xgr=l(),Te=a("ul"),oM=a("li"),H1e=a("strong"),$gr=o("bert"),kgr=o(" \u2014 "),OW=a("a"),Sgr=o("TFBertLMHeadModel"),Rgr=o(" (BERT model)"),Pgr=l(),rM=a("li"),U1e=a("strong"),Bgr=o("camembert"),Igr=o(" \u2014 "),VW=a("a"),qgr=o("TFCamembertForCausalLM"),Ngr=o(" (CamemBERT model)"),jgr=l(),tM=a("li"),J1e=a("strong"),Dgr=o("ctrl"),Ggr=o(" \u2014 "),XW=a("a"),Ogr=o("TFCTRLLMHeadModel"),Vgr=o(" (CTRL model)"),Xgr=l(),aM=a("li"),Y1e=a("strong"),zgr=o("gpt2"),Wgr=o(" \u2014 "),zW=a("a"),Qgr=o("TFGPT2LMHeadModel"),Hgr=o(" (OpenAI GPT-2 model)"),Ugr=l(),nM=a("li"),K1e=a("strong"),Jgr=o("gptj"),Ygr=o(" \u2014 "),WW=a("a"),Kgr=o("TFGPTJForCausalLM"),Zgr=o(" (GPT-J model)"),ehr=l(),sM=a("li"),Z1e=a("strong"),ohr=o("openai-gpt"),rhr=o(" \u2014 "),QW=a("a"),thr=o("TFOpenAIGPTLMHeadModel"),ahr=o(" (OpenAI GPT model)"),nhr=l(),lM=a("li"),e7e=a("strong"),shr=o("rembert"),lhr=o(" \u2014 "),HW=a("a"),ihr=o("TFRemBertForCausalLM"),dhr=o(" (RemBERT model)"),chr=l(),iM=a("li"),o7e=a("strong"),fhr=o("roberta"),mhr=o(" \u2014 "),UW=a("a"),ghr=o("TFRobertaForCausalLM"),hhr=o(" (RoBERTa model)"),phr=l(),dM=a("li"),r7e=a("strong"),uhr=o("roformer"),_hr=o(" \u2014 "),JW=a("a"),bhr=o("TFRoFormerForCausalLM"),vhr=o(" (RoFormer model)"),Fhr=l(),cM=a("li"),t7e=a("strong"),Thr=o("transfo-xl"),Mhr=o(" \u2014 "),YW=a("a"),Ehr=o("TFTransfoXLLMHeadModel"),Chr=o(" (Transformer-XL model)"),whr=l(),fM=a("li"),a7e=a("strong"),Ahr=o("xlm"),yhr=o(" \u2014 "),KW=a("a"),Lhr=o("TFXLMWithLMHeadModel"),xhr=o(" (XLM model)"),$hr=l(),mM=a("li"),n7e=a("strong"),khr=o("xlnet"),Shr=o(" \u2014 "),ZW=a("a"),Rhr=o("TFXLNetLMHeadModel"),Phr=o(" (XLNet model)"),Bhr=l(),F(gM.$$.fragment),Iqe=l(),Ud=a("h2"),hM=a("a"),s7e=a("span"),F(t8.$$.fragment),Ihr=l(),l7e=a("span"),qhr=o("TFAutoModelForImageClassification"),qqe=l(),er=a("div"),F(a8.$$.fragment),Nhr=l(),Jd=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),oQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),n8=a("p"),zhr=o("This class cannot be instantiated directly using "),i7e=a("code"),Whr=o("__init__()"),Qhr=o(" (throws an error)."),Hhr=l(),$t=a("div"),F(s8.$$.fragment),Uhr=l(),d7e=a("p"),Jhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yhr=l(),Yd=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),Zhr=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(pM.$$.fragment),apr=l(),Lr=a("div"),F(l8.$$.fragment),npr=l(),f7e=a("p"),spr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lpr=l(),on=a("p"),ipr=o("The model class to instantiate is selected based on the "),m7e=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),ppr=l(),rn=a("ul"),uM=a("li"),p7e=a("strong"),upr=o("convnext"),_pr=o(" \u2014 "),tQ=a("a"),bpr=o("TFConvNextForImageClassification"),vpr=o(" (ConvNext model)"),Fpr=l(),_M=a("li"),u7e=a("strong"),Tpr=o("data2vec-vision"),Mpr=o(" \u2014 "),aQ=a("a"),Epr=o("TFData2VecVisionForImageClassification"),Cpr=o(" (Data2VecVision model)"),wpr=l(),bM=a("li"),_7e=a("strong"),Apr=o("swin"),ypr=o(" \u2014 "),nQ=a("a"),Lpr=o("TFSwinForImageClassification"),xpr=o(" (Swin model)"),$pr=l(),vM=a("li"),b7e=a("strong"),kpr=o("vit"),Spr=o(" \u2014 "),sQ=a("a"),Rpr=o("TFViTForImageClassification"),Ppr=o(" (ViT model)"),Bpr=l(),F(FM.$$.fragment),Nqe=l(),Kd=a("h2"),TM=a("a"),v7e=a("span"),F(i8.$$.fragment),Ipr=l(),F7e=a("span"),qpr=o("TFAutoModelForMaskedLM"),jqe=l(),or=a("div"),F(d8.$$.fragment),Npr=l(),Zd=a("p"),jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lQ=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" class method or the "),iQ=a("a"),Opr=o("from_config()"),Vpr=o(` class
method.`),Xpr=l(),c8=a("p"),zpr=o("This class cannot be instantiated directly using "),T7e=a("code"),Wpr=o("__init__()"),Qpr=o(" (throws an error)."),Hpr=l(),kt=a("div"),F(f8.$$.fragment),Upr=l(),M7e=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ypr=l(),ec=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),E7e=a("strong"),Zpr=o("not"),eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),our=o("from_pretrained()"),rur=o(" to load the model weights."),tur=l(),F(MM.$$.fragment),aur=l(),xr=a("div"),F(m8.$$.fragment),nur=l(),C7e=a("p"),sur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lur=l(),tn=a("p"),iur=o("The model class to instantiate is selected based on the "),w7e=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),A7e=a("code"),fur=o("pretrained_model_name_or_path"),mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),pur=l(),ie=a("ul"),EM=a("li"),L7e=a("strong"),uur=o("albert"),_ur=o(" \u2014 "),cQ=a("a"),bur=o("TFAlbertForMaskedLM"),vur=o(" (ALBERT model)"),Fur=l(),CM=a("li"),x7e=a("strong"),Tur=o("bert"),Mur=o(" \u2014 "),fQ=a("a"),Eur=o("TFBertForMaskedLM"),Cur=o(" (BERT model)"),wur=l(),wM=a("li"),$7e=a("strong"),Aur=o("camembert"),yur=o(" \u2014 "),mQ=a("a"),Lur=o("TFCamembertForMaskedLM"),xur=o(" (CamemBERT model)"),$ur=l(),AM=a("li"),k7e=a("strong"),kur=o("convbert"),Sur=o(" \u2014 "),gQ=a("a"),Rur=o("TFConvBertForMaskedLM"),Pur=o(" (ConvBERT model)"),Bur=l(),yM=a("li"),S7e=a("strong"),Iur=o("deberta"),qur=o(" \u2014 "),hQ=a("a"),Nur=o("TFDebertaForMaskedLM"),jur=o(" (DeBERTa model)"),Dur=l(),LM=a("li"),R7e=a("strong"),Gur=o("deberta-v2"),Our=o(" \u2014 "),pQ=a("a"),Vur=o("TFDebertaV2ForMaskedLM"),Xur=o(" (DeBERTa-v2 model)"),zur=l(),xM=a("li"),P7e=a("strong"),Wur=o("distilbert"),Qur=o(" \u2014 "),uQ=a("a"),Hur=o("TFDistilBertForMaskedLM"),Uur=o(" (DistilBERT model)"),Jur=l(),$M=a("li"),B7e=a("strong"),Yur=o("electra"),Kur=o(" \u2014 "),_Q=a("a"),Zur=o("TFElectraForMaskedLM"),e_r=o(" (ELECTRA model)"),o_r=l(),kM=a("li"),I7e=a("strong"),r_r=o("flaubert"),t_r=o(" \u2014 "),bQ=a("a"),a_r=o("TFFlaubertWithLMHeadModel"),n_r=o(" (FlauBERT model)"),s_r=l(),SM=a("li"),q7e=a("strong"),l_r=o("funnel"),i_r=o(" \u2014 "),vQ=a("a"),d_r=o("TFFunnelForMaskedLM"),c_r=o(" (Funnel Transformer model)"),f_r=l(),RM=a("li"),N7e=a("strong"),m_r=o("layoutlm"),g_r=o(" \u2014 "),FQ=a("a"),h_r=o("TFLayoutLMForMaskedLM"),p_r=o(" (LayoutLM model)"),u_r=l(),PM=a("li"),j7e=a("strong"),__r=o("longformer"),b_r=o(" \u2014 "),TQ=a("a"),v_r=o("TFLongformerForMaskedLM"),F_r=o(" (Longformer model)"),T_r=l(),BM=a("li"),D7e=a("strong"),M_r=o("mobilebert"),E_r=o(" \u2014 "),MQ=a("a"),C_r=o("TFMobileBertForMaskedLM"),w_r=o(" (MobileBERT model)"),A_r=l(),IM=a("li"),G7e=a("strong"),y_r=o("mpnet"),L_r=o(" \u2014 "),EQ=a("a"),x_r=o("TFMPNetForMaskedLM"),$_r=o(" (MPNet model)"),k_r=l(),qM=a("li"),O7e=a("strong"),S_r=o("rembert"),R_r=o(" \u2014 "),CQ=a("a"),P_r=o("TFRemBertForMaskedLM"),B_r=o(" (RemBERT model)"),I_r=l(),NM=a("li"),V7e=a("strong"),q_r=o("roberta"),N_r=o(" \u2014 "),wQ=a("a"),j_r=o("TFRobertaForMaskedLM"),D_r=o(" (RoBERTa model)"),G_r=l(),jM=a("li"),X7e=a("strong"),O_r=o("roformer"),V_r=o(" \u2014 "),AQ=a("a"),X_r=o("TFRoFormerForMaskedLM"),z_r=o(" (RoFormer model)"),W_r=l(),DM=a("li"),z7e=a("strong"),Q_r=o("tapas"),H_r=o(" \u2014 "),yQ=a("a"),U_r=o("TFTapasForMaskedLM"),J_r=o(" (TAPAS model)"),Y_r=l(),GM=a("li"),W7e=a("strong"),K_r=o("xlm"),Z_r=o(" \u2014 "),LQ=a("a"),e2r=o("TFXLMWithLMHeadModel"),o2r=o(" (XLM model)"),r2r=l(),OM=a("li"),Q7e=a("strong"),t2r=o("xlm-roberta"),a2r=o(" \u2014 "),xQ=a("a"),n2r=o("TFXLMRobertaForMaskedLM"),s2r=o(" (XLM-RoBERTa model)"),l2r=l(),F(VM.$$.fragment),Dqe=l(),oc=a("h2"),XM=a("a"),H7e=a("span"),F(g8.$$.fragment),i2r=l(),U7e=a("span"),d2r=o("TFAutoModelForSeq2SeqLM"),Gqe=l(),rr=a("div"),F(h8.$$.fragment),c2r=l(),rc=a("p"),f2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=a("a"),m2r=o("from_pretrained()"),g2r=o(" class method or the "),kQ=a("a"),h2r=o("from_config()"),p2r=o(` class
method.`),u2r=l(),p8=a("p"),_2r=o("This class cannot be instantiated directly using "),J7e=a("code"),b2r=o("__init__()"),v2r=o(" (throws an error)."),F2r=l(),St=a("div"),F(u8.$$.fragment),T2r=l(),Y7e=a("p"),M2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E2r=l(),tc=a("p"),C2r=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),w2r=o("not"),A2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),y2r=o("from_pretrained()"),L2r=o(" to load the model weights."),x2r=l(),F(zM.$$.fragment),$2r=l(),$r=a("div"),F(_8.$$.fragment),k2r=l(),Z7e=a("p"),S2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R2r=l(),an=a("p"),P2r=o("The model class to instantiate is selected based on the "),ebe=a("code"),B2r=o("model_type"),I2r=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),q2r=o("pretrained_model_name_or_path"),N2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(":"),G2r=l(),ye=a("ul"),WM=a("li"),tbe=a("strong"),O2r=o("bart"),V2r=o(" \u2014 "),RQ=a("a"),X2r=o("TFBartForConditionalGeneration"),z2r=o(" (BART model)"),W2r=l(),QM=a("li"),abe=a("strong"),Q2r=o("blenderbot"),H2r=o(" \u2014 "),PQ=a("a"),U2r=o("TFBlenderbotForConditionalGeneration"),J2r=o(" (Blenderbot model)"),Y2r=l(),HM=a("li"),nbe=a("strong"),K2r=o("blenderbot-small"),Z2r=o(" \u2014 "),BQ=a("a"),e1r=o("TFBlenderbotSmallForConditionalGeneration"),o1r=o(" (BlenderbotSmall model)"),r1r=l(),UM=a("li"),sbe=a("strong"),t1r=o("encoder-decoder"),a1r=o(" \u2014 "),IQ=a("a"),n1r=o("TFEncoderDecoderModel"),s1r=o(" (Encoder decoder model)"),l1r=l(),JM=a("li"),lbe=a("strong"),i1r=o("led"),d1r=o(" \u2014 "),qQ=a("a"),c1r=o("TFLEDForConditionalGeneration"),f1r=o(" (LED model)"),m1r=l(),YM=a("li"),ibe=a("strong"),g1r=o("marian"),h1r=o(" \u2014 "),NQ=a("a"),p1r=o("TFMarianMTModel"),u1r=o(" (Marian model)"),_1r=l(),KM=a("li"),dbe=a("strong"),b1r=o("mbart"),v1r=o(" \u2014 "),jQ=a("a"),F1r=o("TFMBartForConditionalGeneration"),T1r=o(" (mBART model)"),M1r=l(),ZM=a("li"),cbe=a("strong"),E1r=o("mt5"),C1r=o(" \u2014 "),DQ=a("a"),w1r=o("TFMT5ForConditionalGeneration"),A1r=o(" (mT5 model)"),y1r=l(),e4=a("li"),fbe=a("strong"),L1r=o("pegasus"),x1r=o(" \u2014 "),GQ=a("a"),$1r=o("TFPegasusForConditionalGeneration"),k1r=o(" (Pegasus model)"),S1r=l(),o4=a("li"),mbe=a("strong"),R1r=o("t5"),P1r=o(" \u2014 "),OQ=a("a"),B1r=o("TFT5ForConditionalGeneration"),I1r=o(" (T5 model)"),q1r=l(),F(r4.$$.fragment),Oqe=l(),ac=a("h2"),t4=a("a"),gbe=a("span"),F(b8.$$.fragment),N1r=l(),hbe=a("span"),j1r=o("TFAutoModelForSequenceClassification"),Vqe=l(),tr=a("div"),F(v8.$$.fragment),D1r=l(),nc=a("p"),G1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VQ=a("a"),O1r=o("from_pretrained()"),V1r=o(" class method or the "),XQ=a("a"),X1r=o("from_config()"),z1r=o(` class
method.`),W1r=l(),F8=a("p"),Q1r=o("This class cannot be instantiated directly using "),pbe=a("code"),H1r=o("__init__()"),U1r=o(" (throws an error)."),J1r=l(),Rt=a("div"),F(T8.$$.fragment),Y1r=l(),ube=a("p"),K1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z1r=l(),sc=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),F(a4.$$.fragment),s7r=l(),kr=a("div"),F(M8.$$.fragment),l7r=l(),bbe=a("p"),i7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d7r=l(),nn=a("p"),c7r=o("The model class to instantiate is selected based on the "),vbe=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),p7r=o("pretrained_model_name_or_path"),u7r=o(":"),_7r=l(),ee=a("ul"),n4=a("li"),Mbe=a("strong"),b7r=o("albert"),v7r=o(" \u2014 "),WQ=a("a"),F7r=o("TFAlbertForSequenceClassification"),T7r=o(" (ALBERT model)"),M7r=l(),s4=a("li"),Ebe=a("strong"),E7r=o("bert"),C7r=o(" \u2014 "),QQ=a("a"),w7r=o("TFBertForSequenceClassification"),A7r=o(" (BERT model)"),y7r=l(),l4=a("li"),Cbe=a("strong"),L7r=o("camembert"),x7r=o(" \u2014 "),HQ=a("a"),$7r=o("TFCamembertForSequenceClassification"),k7r=o(" (CamemBERT model)"),S7r=l(),i4=a("li"),wbe=a("strong"),R7r=o("convbert"),P7r=o(" \u2014 "),UQ=a("a"),B7r=o("TFConvBertForSequenceClassification"),I7r=o(" (ConvBERT model)"),q7r=l(),d4=a("li"),Abe=a("strong"),N7r=o("ctrl"),j7r=o(" \u2014 "),JQ=a("a"),D7r=o("TFCTRLForSequenceClassification"),G7r=o(" (CTRL model)"),O7r=l(),c4=a("li"),ybe=a("strong"),V7r=o("deberta"),X7r=o(" \u2014 "),YQ=a("a"),z7r=o("TFDebertaForSequenceClassification"),W7r=o(" (DeBERTa model)"),Q7r=l(),f4=a("li"),Lbe=a("strong"),H7r=o("deberta-v2"),U7r=o(" \u2014 "),KQ=a("a"),J7r=o("TFDebertaV2ForSequenceClassification"),Y7r=o(" (DeBERTa-v2 model)"),K7r=l(),m4=a("li"),xbe=a("strong"),Z7r=o("distilbert"),ebr=o(" \u2014 "),ZQ=a("a"),obr=o("TFDistilBertForSequenceClassification"),rbr=o(" (DistilBERT model)"),tbr=l(),g4=a("li"),$be=a("strong"),abr=o("electra"),nbr=o(" \u2014 "),eH=a("a"),sbr=o("TFElectraForSequenceClassification"),lbr=o(" (ELECTRA model)"),ibr=l(),h4=a("li"),kbe=a("strong"),dbr=o("flaubert"),cbr=o(" \u2014 "),oH=a("a"),fbr=o("TFFlaubertForSequenceClassification"),mbr=o(" (FlauBERT model)"),gbr=l(),p4=a("li"),Sbe=a("strong"),hbr=o("funnel"),pbr=o(" \u2014 "),rH=a("a"),ubr=o("TFFunnelForSequenceClassification"),_br=o(" (Funnel Transformer model)"),bbr=l(),u4=a("li"),Rbe=a("strong"),vbr=o("gpt2"),Fbr=o(" \u2014 "),tH=a("a"),Tbr=o("TFGPT2ForSequenceClassification"),Mbr=o(" (OpenAI GPT-2 model)"),Ebr=l(),_4=a("li"),Pbe=a("strong"),Cbr=o("gptj"),wbr=o(" \u2014 "),aH=a("a"),Abr=o("TFGPTJForSequenceClassification"),ybr=o(" (GPT-J model)"),Lbr=l(),b4=a("li"),Bbe=a("strong"),xbr=o("layoutlm"),$br=o(" \u2014 "),nH=a("a"),kbr=o("TFLayoutLMForSequenceClassification"),Sbr=o(" (LayoutLM model)"),Rbr=l(),v4=a("li"),Ibe=a("strong"),Pbr=o("longformer"),Bbr=o(" \u2014 "),sH=a("a"),Ibr=o("TFLongformerForSequenceClassification"),qbr=o(" (Longformer model)"),Nbr=l(),F4=a("li"),qbe=a("strong"),jbr=o("mobilebert"),Dbr=o(" \u2014 "),lH=a("a"),Gbr=o("TFMobileBertForSequenceClassification"),Obr=o(" (MobileBERT model)"),Vbr=l(),T4=a("li"),Nbe=a("strong"),Xbr=o("mpnet"),zbr=o(" \u2014 "),iH=a("a"),Wbr=o("TFMPNetForSequenceClassification"),Qbr=o(" (MPNet model)"),Hbr=l(),M4=a("li"),jbe=a("strong"),Ubr=o("openai-gpt"),Jbr=o(" \u2014 "),dH=a("a"),Ybr=o("TFOpenAIGPTForSequenceClassification"),Kbr=o(" (OpenAI GPT model)"),Zbr=l(),E4=a("li"),Dbe=a("strong"),e5r=o("rembert"),o5r=o(" \u2014 "),cH=a("a"),r5r=o("TFRemBertForSequenceClassification"),t5r=o(" (RemBERT model)"),a5r=l(),C4=a("li"),Gbe=a("strong"),n5r=o("roberta"),s5r=o(" \u2014 "),fH=a("a"),l5r=o("TFRobertaForSequenceClassification"),i5r=o(" (RoBERTa model)"),d5r=l(),w4=a("li"),Obe=a("strong"),c5r=o("roformer"),f5r=o(" \u2014 "),mH=a("a"),m5r=o("TFRoFormerForSequenceClassification"),g5r=o(" (RoFormer model)"),h5r=l(),A4=a("li"),Vbe=a("strong"),p5r=o("tapas"),u5r=o(" \u2014 "),gH=a("a"),_5r=o("TFTapasForSequenceClassification"),b5r=o(" (TAPAS model)"),v5r=l(),y4=a("li"),Xbe=a("strong"),F5r=o("transfo-xl"),T5r=o(" \u2014 "),hH=a("a"),M5r=o("TFTransfoXLForSequenceClassification"),E5r=o(" (Transformer-XL model)"),C5r=l(),L4=a("li"),zbe=a("strong"),w5r=o("xlm"),A5r=o(" \u2014 "),pH=a("a"),y5r=o("TFXLMForSequenceClassification"),L5r=o(" (XLM model)"),x5r=l(),x4=a("li"),Wbe=a("strong"),$5r=o("xlm-roberta"),k5r=o(" \u2014 "),uH=a("a"),S5r=o("TFXLMRobertaForSequenceClassification"),R5r=o(" (XLM-RoBERTa model)"),P5r=l(),$4=a("li"),Qbe=a("strong"),B5r=o("xlnet"),I5r=o(" \u2014 "),_H=a("a"),q5r=o("TFXLNetForSequenceClassification"),N5r=o(" (XLNet model)"),j5r=l(),F(k4.$$.fragment),Xqe=l(),lc=a("h2"),S4=a("a"),Hbe=a("span"),F(E8.$$.fragment),D5r=l(),Ube=a("span"),G5r=o("TFAutoModelForMultipleChoice"),zqe=l(),ar=a("div"),F(C8.$$.fragment),O5r=l(),ic=a("p"),V5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=a("a"),X5r=o("from_pretrained()"),z5r=o(" class method or the "),vH=a("a"),W5r=o("from_config()"),Q5r=o(` class
method.`),H5r=l(),w8=a("p"),U5r=o("This class cannot be instantiated directly using "),Jbe=a("code"),J5r=o("__init__()"),Y5r=o(" (throws an error)."),K5r=l(),Pt=a("div"),F(A8.$$.fragment),Z5r=l(),Ybe=a("p"),evr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ovr=l(),dc=a("p"),rvr=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),tvr=o("not"),avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),nvr=o("from_pretrained()"),svr=o(" to load the model weights."),lvr=l(),F(R4.$$.fragment),ivr=l(),Sr=a("div"),F(y8.$$.fragment),dvr=l(),Zbe=a("p"),cvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fvr=l(),sn=a("p"),mvr=o("The model class to instantiate is selected based on the "),e5e=a("code"),gvr=o("model_type"),hvr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),pvr=o("pretrained_model_name_or_path"),uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),_vr=o("pretrained_model_name_or_path"),bvr=o(":"),vvr=l(),he=a("ul"),P4=a("li"),t5e=a("strong"),Fvr=o("albert"),Tvr=o(" \u2014 "),TH=a("a"),Mvr=o("TFAlbertForMultipleChoice"),Evr=o(" (ALBERT model)"),Cvr=l(),B4=a("li"),a5e=a("strong"),wvr=o("bert"),Avr=o(" \u2014 "),MH=a("a"),yvr=o("TFBertForMultipleChoice"),Lvr=o(" (BERT model)"),xvr=l(),I4=a("li"),n5e=a("strong"),$vr=o("camembert"),kvr=o(" \u2014 "),EH=a("a"),Svr=o("TFCamembertForMultipleChoice"),Rvr=o(" (CamemBERT model)"),Pvr=l(),q4=a("li"),s5e=a("strong"),Bvr=o("convbert"),Ivr=o(" \u2014 "),CH=a("a"),qvr=o("TFConvBertForMultipleChoice"),Nvr=o(" (ConvBERT model)"),jvr=l(),N4=a("li"),l5e=a("strong"),Dvr=o("distilbert"),Gvr=o(" \u2014 "),wH=a("a"),Ovr=o("TFDistilBertForMultipleChoice"),Vvr=o(" (DistilBERT model)"),Xvr=l(),j4=a("li"),i5e=a("strong"),zvr=o("electra"),Wvr=o(" \u2014 "),AH=a("a"),Qvr=o("TFElectraForMultipleChoice"),Hvr=o(" (ELECTRA model)"),Uvr=l(),D4=a("li"),d5e=a("strong"),Jvr=o("flaubert"),Yvr=o(" \u2014 "),yH=a("a"),Kvr=o("TFFlaubertForMultipleChoice"),Zvr=o(" (FlauBERT model)"),eFr=l(),G4=a("li"),c5e=a("strong"),oFr=o("funnel"),rFr=o(" \u2014 "),LH=a("a"),tFr=o("TFFunnelForMultipleChoice"),aFr=o(" (Funnel Transformer model)"),nFr=l(),O4=a("li"),f5e=a("strong"),sFr=o("longformer"),lFr=o(" \u2014 "),xH=a("a"),iFr=o("TFLongformerForMultipleChoice"),dFr=o(" (Longformer model)"),cFr=l(),V4=a("li"),m5e=a("strong"),fFr=o("mobilebert"),mFr=o(" \u2014 "),$H=a("a"),gFr=o("TFMobileBertForMultipleChoice"),hFr=o(" (MobileBERT model)"),pFr=l(),X4=a("li"),g5e=a("strong"),uFr=o("mpnet"),_Fr=o(" \u2014 "),kH=a("a"),bFr=o("TFMPNetForMultipleChoice"),vFr=o(" (MPNet model)"),FFr=l(),z4=a("li"),h5e=a("strong"),TFr=o("rembert"),MFr=o(" \u2014 "),SH=a("a"),EFr=o("TFRemBertForMultipleChoice"),CFr=o(" (RemBERT model)"),wFr=l(),W4=a("li"),p5e=a("strong"),AFr=o("roberta"),yFr=o(" \u2014 "),RH=a("a"),LFr=o("TFRobertaForMultipleChoice"),xFr=o(" (RoBERTa model)"),$Fr=l(),Q4=a("li"),u5e=a("strong"),kFr=o("roformer"),SFr=o(" \u2014 "),PH=a("a"),RFr=o("TFRoFormerForMultipleChoice"),PFr=o(" (RoFormer model)"),BFr=l(),H4=a("li"),_5e=a("strong"),IFr=o("xlm"),qFr=o(" \u2014 "),BH=a("a"),NFr=o("TFXLMForMultipleChoice"),jFr=o(" (XLM model)"),DFr=l(),U4=a("li"),b5e=a("strong"),GFr=o("xlm-roberta"),OFr=o(" \u2014 "),IH=a("a"),VFr=o("TFXLMRobertaForMultipleChoice"),XFr=o(" (XLM-RoBERTa model)"),zFr=l(),J4=a("li"),v5e=a("strong"),WFr=o("xlnet"),QFr=o(" \u2014 "),qH=a("a"),HFr=o("TFXLNetForMultipleChoice"),UFr=o(" (XLNet model)"),JFr=l(),F(Y4.$$.fragment),Wqe=l(),cc=a("h2"),K4=a("a"),F5e=a("span"),F(L8.$$.fragment),YFr=l(),T5e=a("span"),KFr=o("TFAutoModelForNextSentencePrediction"),Qqe=l(),nr=a("div"),F(x8.$$.fragment),ZFr=l(),fc=a("p"),eTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NH=a("a"),oTr=o("from_pretrained()"),rTr=o(" class method or the "),jH=a("a"),tTr=o("from_config()"),aTr=o(` class
method.`),nTr=l(),$8=a("p"),sTr=o("This class cannot be instantiated directly using "),M5e=a("code"),lTr=o("__init__()"),iTr=o(" (throws an error)."),dTr=l(),Bt=a("div"),F(k8.$$.fragment),cTr=l(),E5e=a("p"),fTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mTr=l(),mc=a("p"),gTr=o(`Note:
Loading a model from its configuration file does `),C5e=a("strong"),hTr=o("not"),pTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),uTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),bTr=l(),F(Z4.$$.fragment),vTr=l(),Rr=a("div"),F(S8.$$.fragment),FTr=l(),w5e=a("p"),TTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MTr=l(),ln=a("p"),ETr=o("The model class to instantiate is selected based on the "),A5e=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),ATr=o("pretrained_model_name_or_path"),yTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),LTr=o("pretrained_model_name_or_path"),xTr=o(":"),$Tr=l(),R8=a("ul"),eE=a("li"),x5e=a("strong"),kTr=o("bert"),STr=o(" \u2014 "),GH=a("a"),RTr=o("TFBertForNextSentencePrediction"),PTr=o(" (BERT model)"),BTr=l(),oE=a("li"),$5e=a("strong"),ITr=o("mobilebert"),qTr=o(" \u2014 "),OH=a("a"),NTr=o("TFMobileBertForNextSentencePrediction"),jTr=o(" (MobileBERT model)"),DTr=l(),F(rE.$$.fragment),Hqe=l(),gc=a("h2"),tE=a("a"),k5e=a("span"),F(P8.$$.fragment),GTr=l(),S5e=a("span"),OTr=o("TFAutoModelForTableQuestionAnswering"),Uqe=l(),sr=a("div"),F(B8.$$.fragment),VTr=l(),hc=a("p"),XTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VH=a("a"),zTr=o("from_pretrained()"),WTr=o(" class method or the "),XH=a("a"),QTr=o("from_config()"),HTr=o(` class
method.`),UTr=l(),I8=a("p"),JTr=o("This class cannot be instantiated directly using "),R5e=a("code"),YTr=o("__init__()"),KTr=o(" (throws an error)."),ZTr=l(),It=a("div"),F(q8.$$.fragment),eMr=l(),P5e=a("p"),oMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rMr=l(),pc=a("p"),tMr=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),aMr=o("not"),nMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),sMr=o("from_pretrained()"),lMr=o(" to load the model weights."),iMr=l(),F(aE.$$.fragment),dMr=l(),Pr=a("div"),F(N8.$$.fragment),cMr=l(),I5e=a("p"),fMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mMr=l(),dn=a("p"),gMr=o("The model class to instantiate is selected based on the "),q5e=a("code"),hMr=o("model_type"),pMr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),uMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),bMr=o("pretrained_model_name_or_path"),vMr=o(":"),FMr=l(),D5e=a("ul"),nE=a("li"),G5e=a("strong"),TMr=o("tapas"),MMr=o(" \u2014 "),WH=a("a"),EMr=o("TFTapasForQuestionAnswering"),CMr=o(" (TAPAS model)"),wMr=l(),F(sE.$$.fragment),Jqe=l(),uc=a("h2"),lE=a("a"),O5e=a("span"),F(j8.$$.fragment),AMr=l(),V5e=a("span"),yMr=o("TFAutoModelForTokenClassification"),Yqe=l(),lr=a("div"),F(D8.$$.fragment),LMr=l(),_c=a("p"),xMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=a("a"),$Mr=o("from_pretrained()"),kMr=o(" class method or the "),HH=a("a"),SMr=o("from_config()"),RMr=o(` class
method.`),PMr=l(),G8=a("p"),BMr=o("This class cannot be instantiated directly using "),X5e=a("code"),IMr=o("__init__()"),qMr=o(" (throws an error)."),NMr=l(),qt=a("div"),F(O8.$$.fragment),jMr=l(),z5e=a("p"),DMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GMr=l(),bc=a("p"),OMr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),VMr=o("not"),XMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),zMr=o("from_pretrained()"),WMr=o(" to load the model weights."),QMr=l(),F(iE.$$.fragment),HMr=l(),Br=a("div"),F(V8.$$.fragment),UMr=l(),Q5e=a("p"),JMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YMr=l(),cn=a("p"),KMr=o("The model class to instantiate is selected based on the "),H5e=a("code"),ZMr=o("model_type"),e4r=o(` property of the config object (either
passed as an argument or loaded from `),U5e=a("code"),o4r=o("pretrained_model_name_or_path"),r4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(":"),n4r=l(),de=a("ul"),dE=a("li"),Y5e=a("strong"),s4r=o("albert"),l4r=o(" \u2014 "),JH=a("a"),i4r=o("TFAlbertForTokenClassification"),d4r=o(" (ALBERT model)"),c4r=l(),cE=a("li"),K5e=a("strong"),f4r=o("bert"),m4r=o(" \u2014 "),YH=a("a"),g4r=o("TFBertForTokenClassification"),h4r=o(" (BERT model)"),p4r=l(),fE=a("li"),Z5e=a("strong"),u4r=o("camembert"),_4r=o(" \u2014 "),KH=a("a"),b4r=o("TFCamembertForTokenClassification"),v4r=o(" (CamemBERT model)"),F4r=l(),mE=a("li"),eve=a("strong"),T4r=o("convbert"),M4r=o(" \u2014 "),ZH=a("a"),E4r=o("TFConvBertForTokenClassification"),C4r=o(" (ConvBERT model)"),w4r=l(),gE=a("li"),ove=a("strong"),A4r=o("deberta"),y4r=o(" \u2014 "),eU=a("a"),L4r=o("TFDebertaForTokenClassification"),x4r=o(" (DeBERTa model)"),$4r=l(),hE=a("li"),rve=a("strong"),k4r=o("deberta-v2"),S4r=o(" \u2014 "),oU=a("a"),R4r=o("TFDebertaV2ForTokenClassification"),P4r=o(" (DeBERTa-v2 model)"),B4r=l(),pE=a("li"),tve=a("strong"),I4r=o("distilbert"),q4r=o(" \u2014 "),rU=a("a"),N4r=o("TFDistilBertForTokenClassification"),j4r=o(" (DistilBERT model)"),D4r=l(),uE=a("li"),ave=a("strong"),G4r=o("electra"),O4r=o(" \u2014 "),tU=a("a"),V4r=o("TFElectraForTokenClassification"),X4r=o(" (ELECTRA model)"),z4r=l(),_E=a("li"),nve=a("strong"),W4r=o("flaubert"),Q4r=o(" \u2014 "),aU=a("a"),H4r=o("TFFlaubertForTokenClassification"),U4r=o(" (FlauBERT model)"),J4r=l(),bE=a("li"),sve=a("strong"),Y4r=o("funnel"),K4r=o(" \u2014 "),nU=a("a"),Z4r=o("TFFunnelForTokenClassification"),eEr=o(" (Funnel Transformer model)"),oEr=l(),vE=a("li"),lve=a("strong"),rEr=o("layoutlm"),tEr=o(" \u2014 "),sU=a("a"),aEr=o("TFLayoutLMForTokenClassification"),nEr=o(" (LayoutLM model)"),sEr=l(),FE=a("li"),ive=a("strong"),lEr=o("longformer"),iEr=o(" \u2014 "),lU=a("a"),dEr=o("TFLongformerForTokenClassification"),cEr=o(" (Longformer model)"),fEr=l(),TE=a("li"),dve=a("strong"),mEr=o("mobilebert"),gEr=o(" \u2014 "),iU=a("a"),hEr=o("TFMobileBertForTokenClassification"),pEr=o(" (MobileBERT model)"),uEr=l(),ME=a("li"),cve=a("strong"),_Er=o("mpnet"),bEr=o(" \u2014 "),dU=a("a"),vEr=o("TFMPNetForTokenClassification"),FEr=o(" (MPNet model)"),TEr=l(),EE=a("li"),fve=a("strong"),MEr=o("rembert"),EEr=o(" \u2014 "),cU=a("a"),CEr=o("TFRemBertForTokenClassification"),wEr=o(" (RemBERT model)"),AEr=l(),CE=a("li"),mve=a("strong"),yEr=o("roberta"),LEr=o(" \u2014 "),fU=a("a"),xEr=o("TFRobertaForTokenClassification"),$Er=o(" (RoBERTa model)"),kEr=l(),wE=a("li"),gve=a("strong"),SEr=o("roformer"),REr=o(" \u2014 "),mU=a("a"),PEr=o("TFRoFormerForTokenClassification"),BEr=o(" (RoFormer model)"),IEr=l(),AE=a("li"),hve=a("strong"),qEr=o("xlm"),NEr=o(" \u2014 "),gU=a("a"),jEr=o("TFXLMForTokenClassification"),DEr=o(" (XLM model)"),GEr=l(),yE=a("li"),pve=a("strong"),OEr=o("xlm-roberta"),VEr=o(" \u2014 "),hU=a("a"),XEr=o("TFXLMRobertaForTokenClassification"),zEr=o(" (XLM-RoBERTa model)"),WEr=l(),LE=a("li"),uve=a("strong"),QEr=o("xlnet"),HEr=o(" \u2014 "),pU=a("a"),UEr=o("TFXLNetForTokenClassification"),JEr=o(" (XLNet model)"),YEr=l(),F(xE.$$.fragment),Kqe=l(),vc=a("h2"),$E=a("a"),_ve=a("span"),F(X8.$$.fragment),KEr=l(),bve=a("span"),ZEr=o("TFAutoModelForQuestionAnswering"),Zqe=l(),ir=a("div"),F(z8.$$.fragment),eCr=l(),Fc=a("p"),oCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uU=a("a"),rCr=o("from_pretrained()"),tCr=o(" class method or the "),_U=a("a"),aCr=o("from_config()"),nCr=o(` class
method.`),sCr=l(),W8=a("p"),lCr=o("This class cannot be instantiated directly using "),vve=a("code"),iCr=o("__init__()"),dCr=o(" (throws an error)."),cCr=l(),Nt=a("div"),F(Q8.$$.fragment),fCr=l(),Fve=a("p"),mCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gCr=l(),Tc=a("p"),hCr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),pCr=o("not"),uCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),_Cr=o("from_pretrained()"),bCr=o(" to load the model weights."),vCr=l(),F(kE.$$.fragment),FCr=l(),Ir=a("div"),F(H8.$$.fragment),TCr=l(),Mve=a("p"),MCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ECr=l(),fn=a("p"),CCr=o("The model class to instantiate is selected based on the "),Eve=a("code"),wCr=o("model_type"),ACr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),yCr=o("pretrained_model_name_or_path"),LCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),xCr=o("pretrained_model_name_or_path"),$Cr=o(":"),kCr=l(),ce=a("ul"),SE=a("li"),Ave=a("strong"),SCr=o("albert"),RCr=o(" \u2014 "),vU=a("a"),PCr=o("TFAlbertForQuestionAnswering"),BCr=o(" (ALBERT model)"),ICr=l(),RE=a("li"),yve=a("strong"),qCr=o("bert"),NCr=o(" \u2014 "),FU=a("a"),jCr=o("TFBertForQuestionAnswering"),DCr=o(" (BERT model)"),GCr=l(),PE=a("li"),Lve=a("strong"),OCr=o("camembert"),VCr=o(" \u2014 "),TU=a("a"),XCr=o("TFCamembertForQuestionAnswering"),zCr=o(" (CamemBERT model)"),WCr=l(),BE=a("li"),xve=a("strong"),QCr=o("convbert"),HCr=o(" \u2014 "),MU=a("a"),UCr=o("TFConvBertForQuestionAnswering"),JCr=o(" (ConvBERT model)"),YCr=l(),IE=a("li"),$ve=a("strong"),KCr=o("deberta"),ZCr=o(" \u2014 "),EU=a("a"),e3r=o("TFDebertaForQuestionAnswering"),o3r=o(" (DeBERTa model)"),r3r=l(),qE=a("li"),kve=a("strong"),t3r=o("deberta-v2"),a3r=o(" \u2014 "),CU=a("a"),n3r=o("TFDebertaV2ForQuestionAnswering"),s3r=o(" (DeBERTa-v2 model)"),l3r=l(),NE=a("li"),Sve=a("strong"),i3r=o("distilbert"),d3r=o(" \u2014 "),wU=a("a"),c3r=o("TFDistilBertForQuestionAnswering"),f3r=o(" (DistilBERT model)"),m3r=l(),jE=a("li"),Rve=a("strong"),g3r=o("electra"),h3r=o(" \u2014 "),AU=a("a"),p3r=o("TFElectraForQuestionAnswering"),u3r=o(" (ELECTRA model)"),_3r=l(),DE=a("li"),Pve=a("strong"),b3r=o("flaubert"),v3r=o(" \u2014 "),yU=a("a"),F3r=o("TFFlaubertForQuestionAnsweringSimple"),T3r=o(" (FlauBERT model)"),M3r=l(),GE=a("li"),Bve=a("strong"),E3r=o("funnel"),C3r=o(" \u2014 "),LU=a("a"),w3r=o("TFFunnelForQuestionAnswering"),A3r=o(" (Funnel Transformer model)"),y3r=l(),OE=a("li"),Ive=a("strong"),L3r=o("gptj"),x3r=o(" \u2014 "),xU=a("a"),$3r=o("TFGPTJForQuestionAnswering"),k3r=o(" (GPT-J model)"),S3r=l(),VE=a("li"),qve=a("strong"),R3r=o("longformer"),P3r=o(" \u2014 "),$U=a("a"),B3r=o("TFLongformerForQuestionAnswering"),I3r=o(" (Longformer model)"),q3r=l(),XE=a("li"),Nve=a("strong"),N3r=o("mobilebert"),j3r=o(" \u2014 "),kU=a("a"),D3r=o("TFMobileBertForQuestionAnswering"),G3r=o(" (MobileBERT model)"),O3r=l(),zE=a("li"),jve=a("strong"),V3r=o("mpnet"),X3r=o(" \u2014 "),SU=a("a"),z3r=o("TFMPNetForQuestionAnswering"),W3r=o(" (MPNet model)"),Q3r=l(),WE=a("li"),Dve=a("strong"),H3r=o("rembert"),U3r=o(" \u2014 "),RU=a("a"),J3r=o("TFRemBertForQuestionAnswering"),Y3r=o(" (RemBERT model)"),K3r=l(),QE=a("li"),Gve=a("strong"),Z3r=o("roberta"),ewr=o(" \u2014 "),PU=a("a"),owr=o("TFRobertaForQuestionAnswering"),rwr=o(" (RoBERTa model)"),twr=l(),HE=a("li"),Ove=a("strong"),awr=o("roformer"),nwr=o(" \u2014 "),BU=a("a"),swr=o("TFRoFormerForQuestionAnswering"),lwr=o(" (RoFormer model)"),iwr=l(),UE=a("li"),Vve=a("strong"),dwr=o("xlm"),cwr=o(" \u2014 "),IU=a("a"),fwr=o("TFXLMForQuestionAnsweringSimple"),mwr=o(" (XLM model)"),gwr=l(),JE=a("li"),Xve=a("strong"),hwr=o("xlm-roberta"),pwr=o(" \u2014 "),qU=a("a"),uwr=o("TFXLMRobertaForQuestionAnswering"),_wr=o(" (XLM-RoBERTa model)"),bwr=l(),YE=a("li"),zve=a("strong"),vwr=o("xlnet"),Fwr=o(" \u2014 "),NU=a("a"),Twr=o("TFXLNetForQuestionAnsweringSimple"),Mwr=o(" (XLNet model)"),Ewr=l(),F(KE.$$.fragment),eNe=l(),Mc=a("h2"),ZE=a("a"),Wve=a("span"),F(U8.$$.fragment),Cwr=l(),Qve=a("span"),wwr=o("TFAutoModelForVision2Seq"),oNe=l(),dr=a("div"),F(J8.$$.fragment),Awr=l(),Ec=a("p"),ywr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jU=a("a"),Lwr=o("from_pretrained()"),xwr=o(" class method or the "),DU=a("a"),$wr=o("from_config()"),kwr=o(` class
method.`),Swr=l(),Y8=a("p"),Rwr=o("This class cannot be instantiated directly using "),Hve=a("code"),Pwr=o("__init__()"),Bwr=o(" (throws an error)."),Iwr=l(),jt=a("div"),F(K8.$$.fragment),qwr=l(),Uve=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jwr=l(),Cc=a("p"),Dwr=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),Gwr=o("not"),Owr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),Vwr=o("from_pretrained()"),Xwr=o(" to load the model weights."),zwr=l(),F(eC.$$.fragment),Wwr=l(),qr=a("div"),F(Z8.$$.fragment),Qwr=l(),Yve=a("p"),Hwr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uwr=l(),mn=a("p"),Jwr=o("The model class to instantiate is selected based on the "),Kve=a("code"),Ywr=o("model_type"),Kwr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),Zwr=o("pretrained_model_name_or_path"),eAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(":"),tAr=l(),oFe=a("ul"),oC=a("li"),rFe=a("strong"),aAr=o("vision-encoder-decoder"),nAr=o(" \u2014 "),OU=a("a"),sAr=o("TFVisionEncoderDecoderModel"),lAr=o(" (Vision Encoder decoder model)"),iAr=l(),F(rC.$$.fragment),rNe=l(),wc=a("h2"),tC=a("a"),tFe=a("span"),F(ex.$$.fragment),dAr=l(),aFe=a("span"),cAr=o("TFAutoModelForSpeechSeq2Seq"),tNe=l(),cr=a("div"),F(ox.$$.fragment),fAr=l(),Ac=a("p"),mAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VU=a("a"),gAr=o("from_pretrained()"),hAr=o(" class method or the "),XU=a("a"),pAr=o("from_config()"),uAr=o(` class
method.`),_Ar=l(),rx=a("p"),bAr=o("This class cannot be instantiated directly using "),nFe=a("code"),vAr=o("__init__()"),FAr=o(" (throws an error)."),TAr=l(),Dt=a("div"),F(tx.$$.fragment),MAr=l(),sFe=a("p"),EAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CAr=l(),yc=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),AAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),LAr=o("from_pretrained()"),xAr=o(" to load the model weights."),$Ar=l(),F(aC.$$.fragment),kAr=l(),Nr=a("div"),F(ax.$$.fragment),SAr=l(),iFe=a("p"),RAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PAr=l(),gn=a("p"),BAr=o("The model class to instantiate is selected based on the "),dFe=a("code"),IAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),NAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(":"),OAr=l(),mFe=a("ul"),nC=a("li"),gFe=a("strong"),VAr=o("speech_to_text"),XAr=o(" \u2014 "),WU=a("a"),zAr=o("TFSpeech2TextForConditionalGeneration"),WAr=o(" (Speech2Text model)"),QAr=l(),F(sC.$$.fragment),aNe=l(),Lc=a("h2"),lC=a("a"),hFe=a("span"),F(nx.$$.fragment),HAr=l(),pFe=a("span"),UAr=o("FlaxAutoModel"),nNe=l(),fr=a("div"),F(sx.$$.fragment),JAr=l(),xc=a("p"),YAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QU=a("a"),KAr=o("from_pretrained()"),ZAr=o(" class method or the "),HU=a("a"),e6r=o("from_config()"),o6r=o(` class
method.`),r6r=l(),lx=a("p"),t6r=o("This class cannot be instantiated directly using "),uFe=a("code"),a6r=o("__init__()"),n6r=o(" (throws an error)."),s6r=l(),Gt=a("div"),F(ix.$$.fragment),l6r=l(),_Fe=a("p"),i6r=o("Instantiates one of the base model classes of the library from a configuration."),d6r=l(),$c=a("p"),c6r=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),f6r=o("not"),m6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),g6r=o("from_pretrained()"),h6r=o(" to load the model weights."),p6r=l(),F(iC.$$.fragment),u6r=l(),jr=a("div"),F(dx.$$.fragment),_6r=l(),vFe=a("p"),b6r=o("Instantiate one of the base model classes of the library from a pretrained model."),v6r=l(),hn=a("p"),F6r=o("The model class to instantiate is selected based on the "),FFe=a("code"),T6r=o("model_type"),M6r=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),E6r=o("pretrained_model_name_or_path"),C6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),w6r=o("pretrained_model_name_or_path"),A6r=o(":"),y6r=l(),re=a("ul"),dC=a("li"),EFe=a("strong"),L6r=o("albert"),x6r=o(" \u2014 "),JU=a("a"),$6r=o("FlaxAlbertModel"),k6r=o(" (ALBERT model)"),S6r=l(),cC=a("li"),CFe=a("strong"),R6r=o("bart"),P6r=o(" \u2014 "),YU=a("a"),B6r=o("FlaxBartModel"),I6r=o(" (BART model)"),q6r=l(),fC=a("li"),wFe=a("strong"),N6r=o("beit"),j6r=o(" \u2014 "),KU=a("a"),D6r=o("FlaxBeitModel"),G6r=o(" (BEiT model)"),O6r=l(),mC=a("li"),AFe=a("strong"),V6r=o("bert"),X6r=o(" \u2014 "),ZU=a("a"),z6r=o("FlaxBertModel"),W6r=o(" (BERT model)"),Q6r=l(),gC=a("li"),yFe=a("strong"),H6r=o("big_bird"),U6r=o(" \u2014 "),eJ=a("a"),J6r=o("FlaxBigBirdModel"),Y6r=o(" (BigBird model)"),K6r=l(),hC=a("li"),LFe=a("strong"),Z6r=o("blenderbot"),e0r=o(" \u2014 "),oJ=a("a"),o0r=o("FlaxBlenderbotModel"),r0r=o(" (Blenderbot model)"),t0r=l(),pC=a("li"),xFe=a("strong"),a0r=o("blenderbot-small"),n0r=o(" \u2014 "),rJ=a("a"),s0r=o("FlaxBlenderbotSmallModel"),l0r=o(" (BlenderbotSmall model)"),i0r=l(),uC=a("li"),$Fe=a("strong"),d0r=o("clip"),c0r=o(" \u2014 "),tJ=a("a"),f0r=o("FlaxCLIPModel"),m0r=o(" (CLIP model)"),g0r=l(),_C=a("li"),kFe=a("strong"),h0r=o("distilbert"),p0r=o(" \u2014 "),aJ=a("a"),u0r=o("FlaxDistilBertModel"),_0r=o(" (DistilBERT model)"),b0r=l(),bC=a("li"),SFe=a("strong"),v0r=o("electra"),F0r=o(" \u2014 "),nJ=a("a"),T0r=o("FlaxElectraModel"),M0r=o(" (ELECTRA model)"),E0r=l(),vC=a("li"),RFe=a("strong"),C0r=o("gpt2"),w0r=o(" \u2014 "),sJ=a("a"),A0r=o("FlaxGPT2Model"),y0r=o(" (OpenAI GPT-2 model)"),L0r=l(),FC=a("li"),PFe=a("strong"),x0r=o("gpt_neo"),$0r=o(" \u2014 "),lJ=a("a"),k0r=o("FlaxGPTNeoModel"),S0r=o(" (GPT Neo model)"),R0r=l(),TC=a("li"),BFe=a("strong"),P0r=o("gptj"),B0r=o(" \u2014 "),iJ=a("a"),I0r=o("FlaxGPTJModel"),q0r=o(" (GPT-J model)"),N0r=l(),MC=a("li"),IFe=a("strong"),j0r=o("marian"),D0r=o(" \u2014 "),dJ=a("a"),G0r=o("FlaxMarianModel"),O0r=o(" (Marian model)"),V0r=l(),EC=a("li"),qFe=a("strong"),X0r=o("mbart"),z0r=o(" \u2014 "),cJ=a("a"),W0r=o("FlaxMBartModel"),Q0r=o(" (mBART model)"),H0r=l(),CC=a("li"),NFe=a("strong"),U0r=o("mt5"),J0r=o(" \u2014 "),fJ=a("a"),Y0r=o("FlaxMT5Model"),K0r=o(" (mT5 model)"),Z0r=l(),wC=a("li"),jFe=a("strong"),eyr=o("pegasus"),oyr=o(" \u2014 "),mJ=a("a"),ryr=o("FlaxPegasusModel"),tyr=o(" (Pegasus model)"),ayr=l(),AC=a("li"),DFe=a("strong"),nyr=o("roberta"),syr=o(" \u2014 "),gJ=a("a"),lyr=o("FlaxRobertaModel"),iyr=o(" (RoBERTa model)"),dyr=l(),yC=a("li"),GFe=a("strong"),cyr=o("roformer"),fyr=o(" \u2014 "),hJ=a("a"),myr=o("FlaxRoFormerModel"),gyr=o(" (RoFormer model)"),hyr=l(),LC=a("li"),OFe=a("strong"),pyr=o("t5"),uyr=o(" \u2014 "),pJ=a("a"),_yr=o("FlaxT5Model"),byr=o(" (T5 model)"),vyr=l(),xC=a("li"),VFe=a("strong"),Fyr=o("vision-text-dual-encoder"),Tyr=o(" \u2014 "),uJ=a("a"),Myr=o("FlaxVisionTextDualEncoderModel"),Eyr=o(" (VisionTextDualEncoder model)"),Cyr=l(),$C=a("li"),XFe=a("strong"),wyr=o("vit"),Ayr=o(" \u2014 "),_J=a("a"),yyr=o("FlaxViTModel"),Lyr=o(" (ViT model)"),xyr=l(),kC=a("li"),zFe=a("strong"),$yr=o("wav2vec2"),kyr=o(" \u2014 "),bJ=a("a"),Syr=o("FlaxWav2Vec2Model"),Ryr=o(" (Wav2Vec2 model)"),Pyr=l(),SC=a("li"),WFe=a("strong"),Byr=o("xglm"),Iyr=o(" \u2014 "),vJ=a("a"),qyr=o("FlaxXGLMModel"),Nyr=o(" (XGLM model)"),jyr=l(),RC=a("li"),QFe=a("strong"),Dyr=o("xlm-roberta"),Gyr=o(" \u2014 "),FJ=a("a"),Oyr=o("FlaxXLMRobertaModel"),Vyr=o(" (XLM-RoBERTa model)"),Xyr=l(),F(PC.$$.fragment),sNe=l(),kc=a("h2"),BC=a("a"),HFe=a("span"),F(cx.$$.fragment),zyr=l(),UFe=a("span"),Wyr=o("FlaxAutoModelForCausalLM"),lNe=l(),mr=a("div"),F(fx.$$.fragment),Qyr=l(),Sc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" class method or the "),MJ=a("a"),Yyr=o("from_config()"),Kyr=o(` class
method.`),Zyr=l(),mx=a("p"),eLr=o("This class cannot be instantiated directly using "),JFe=a("code"),oLr=o("__init__()"),rLr=o(" (throws an error)."),tLr=l(),Ot=a("div"),F(gx.$$.fragment),aLr=l(),YFe=a("p"),nLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sLr=l(),Rc=a("p"),lLr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),iLr=o("not"),dLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),cLr=o("from_pretrained()"),fLr=o(" to load the model weights."),mLr=l(),F(IC.$$.fragment),gLr=l(),Dr=a("div"),F(hx.$$.fragment),hLr=l(),ZFe=a("p"),pLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uLr=l(),pn=a("p"),_Lr=o("The model class to instantiate is selected based on the "),eTe=a("code"),bLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),CLr=l(),Re=a("ul"),qC=a("li"),tTe=a("strong"),wLr=o("bart"),ALr=o(" \u2014 "),CJ=a("a"),yLr=o("FlaxBartForCausalLM"),LLr=o(" (BART model)"),xLr=l(),NC=a("li"),aTe=a("strong"),$Lr=o("bert"),kLr=o(" \u2014 "),wJ=a("a"),SLr=o("FlaxBertForCausalLM"),RLr=o(" (BERT model)"),PLr=l(),jC=a("li"),nTe=a("strong"),BLr=o("big_bird"),ILr=o(" \u2014 "),AJ=a("a"),qLr=o("FlaxBigBirdForCausalLM"),NLr=o(" (BigBird model)"),jLr=l(),DC=a("li"),sTe=a("strong"),DLr=o("electra"),GLr=o(" \u2014 "),yJ=a("a"),OLr=o("FlaxElectraForCausalLM"),VLr=o(" (ELECTRA model)"),XLr=l(),GC=a("li"),lTe=a("strong"),zLr=o("gpt2"),WLr=o(" \u2014 "),LJ=a("a"),QLr=o("FlaxGPT2LMHeadModel"),HLr=o(" (OpenAI GPT-2 model)"),ULr=l(),OC=a("li"),iTe=a("strong"),JLr=o("gpt_neo"),YLr=o(" \u2014 "),xJ=a("a"),KLr=o("FlaxGPTNeoForCausalLM"),ZLr=o(" (GPT Neo model)"),e8r=l(),VC=a("li"),dTe=a("strong"),o8r=o("gptj"),r8r=o(" \u2014 "),$J=a("a"),t8r=o("FlaxGPTJForCausalLM"),a8r=o(" (GPT-J model)"),n8r=l(),XC=a("li"),cTe=a("strong"),s8r=o("roberta"),l8r=o(" \u2014 "),kJ=a("a"),i8r=o("FlaxRobertaForCausalLM"),d8r=o(" (RoBERTa model)"),c8r=l(),zC=a("li"),fTe=a("strong"),f8r=o("xglm"),m8r=o(" \u2014 "),SJ=a("a"),g8r=o("FlaxXGLMForCausalLM"),h8r=o(" (XGLM model)"),p8r=l(),F(WC.$$.fragment),iNe=l(),Pc=a("h2"),QC=a("a"),mTe=a("span"),F(px.$$.fragment),u8r=l(),gTe=a("span"),_8r=o("FlaxAutoModelForPreTraining"),dNe=l(),gr=a("div"),F(ux.$$.fragment),b8r=l(),Bc=a("p"),v8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=a("a"),F8r=o("from_pretrained()"),T8r=o(" class method or the "),PJ=a("a"),M8r=o("from_config()"),E8r=o(` class
method.`),C8r=l(),_x=a("p"),w8r=o("This class cannot be instantiated directly using "),hTe=a("code"),A8r=o("__init__()"),y8r=o(" (throws an error)."),L8r=l(),Vt=a("div"),F(bx.$$.fragment),x8r=l(),pTe=a("p"),$8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k8r=l(),Ic=a("p"),S8r=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),R8r=o("not"),P8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),B8r=o("from_pretrained()"),I8r=o(" to load the model weights."),q8r=l(),F(HC.$$.fragment),N8r=l(),Gr=a("div"),F(vx.$$.fragment),j8r=l(),_Te=a("p"),D8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G8r=l(),un=a("p"),O8r=o("The model class to instantiate is selected based on the "),bTe=a("code"),V8r=o("model_type"),X8r=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),z8r=o("pretrained_model_name_or_path"),W8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),Q8r=o("pretrained_model_name_or_path"),H8r=o(":"),U8r=l(),Me=a("ul"),UC=a("li"),TTe=a("strong"),J8r=o("albert"),Y8r=o(" \u2014 "),IJ=a("a"),K8r=o("FlaxAlbertForPreTraining"),Z8r=o(" (ALBERT model)"),exr=l(),JC=a("li"),MTe=a("strong"),oxr=o("bart"),rxr=o(" \u2014 "),qJ=a("a"),txr=o("FlaxBartForConditionalGeneration"),axr=o(" (BART model)"),nxr=l(),YC=a("li"),ETe=a("strong"),sxr=o("bert"),lxr=o(" \u2014 "),NJ=a("a"),ixr=o("FlaxBertForPreTraining"),dxr=o(" (BERT model)"),cxr=l(),KC=a("li"),CTe=a("strong"),fxr=o("big_bird"),mxr=o(" \u2014 "),jJ=a("a"),gxr=o("FlaxBigBirdForPreTraining"),hxr=o(" (BigBird model)"),pxr=l(),ZC=a("li"),wTe=a("strong"),uxr=o("electra"),_xr=o(" \u2014 "),DJ=a("a"),bxr=o("FlaxElectraForPreTraining"),vxr=o(" (ELECTRA model)"),Fxr=l(),e3=a("li"),ATe=a("strong"),Txr=o("mbart"),Mxr=o(" \u2014 "),GJ=a("a"),Exr=o("FlaxMBartForConditionalGeneration"),Cxr=o(" (mBART model)"),wxr=l(),o3=a("li"),yTe=a("strong"),Axr=o("mt5"),yxr=o(" \u2014 "),OJ=a("a"),Lxr=o("FlaxMT5ForConditionalGeneration"),xxr=o(" (mT5 model)"),$xr=l(),r3=a("li"),LTe=a("strong"),kxr=o("roberta"),Sxr=o(" \u2014 "),VJ=a("a"),Rxr=o("FlaxRobertaForMaskedLM"),Pxr=o(" (RoBERTa model)"),Bxr=l(),t3=a("li"),xTe=a("strong"),Ixr=o("roformer"),qxr=o(" \u2014 "),XJ=a("a"),Nxr=o("FlaxRoFormerForMaskedLM"),jxr=o(" (RoFormer model)"),Dxr=l(),a3=a("li"),$Te=a("strong"),Gxr=o("t5"),Oxr=o(" \u2014 "),zJ=a("a"),Vxr=o("FlaxT5ForConditionalGeneration"),Xxr=o(" (T5 model)"),zxr=l(),n3=a("li"),kTe=a("strong"),Wxr=o("wav2vec2"),Qxr=o(" \u2014 "),WJ=a("a"),Hxr=o("FlaxWav2Vec2ForPreTraining"),Uxr=o(" (Wav2Vec2 model)"),Jxr=l(),s3=a("li"),STe=a("strong"),Yxr=o("xlm-roberta"),Kxr=o(" \u2014 "),QJ=a("a"),Zxr=o("FlaxXLMRobertaForMaskedLM"),e9r=o(" (XLM-RoBERTa model)"),o9r=l(),F(l3.$$.fragment),cNe=l(),qc=a("h2"),i3=a("a"),RTe=a("span"),F(Fx.$$.fragment),r9r=l(),PTe=a("span"),t9r=o("FlaxAutoModelForMaskedLM"),fNe=l(),hr=a("div"),F(Tx.$$.fragment),a9r=l(),Nc=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HJ=a("a"),s9r=o("from_pretrained()"),l9r=o(" class method or the "),UJ=a("a"),i9r=o("from_config()"),d9r=o(` class
method.`),c9r=l(),Mx=a("p"),f9r=o("This class cannot be instantiated directly using "),BTe=a("code"),m9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),Xt=a("div"),F(Ex.$$.fragment),p9r=l(),ITe=a("p"),u9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_9r=l(),jc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),v9r=o("not"),F9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),T9r=o("from_pretrained()"),M9r=o(" to load the model weights."),E9r=l(),F(d3.$$.fragment),C9r=l(),Or=a("div"),F(Cx.$$.fragment),w9r=l(),NTe=a("p"),A9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y9r=l(),_n=a("p"),L9r=o("The model class to instantiate is selected based on the "),jTe=a("code"),x9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(":"),B9r=l(),Le=a("ul"),c3=a("li"),OTe=a("strong"),I9r=o("albert"),q9r=o(" \u2014 "),YJ=a("a"),N9r=o("FlaxAlbertForMaskedLM"),j9r=o(" (ALBERT model)"),D9r=l(),f3=a("li"),VTe=a("strong"),G9r=o("bart"),O9r=o(" \u2014 "),KJ=a("a"),V9r=o("FlaxBartForConditionalGeneration"),X9r=o(" (BART model)"),z9r=l(),m3=a("li"),XTe=a("strong"),W9r=o("bert"),Q9r=o(" \u2014 "),ZJ=a("a"),H9r=o("FlaxBertForMaskedLM"),U9r=o(" (BERT model)"),J9r=l(),g3=a("li"),zTe=a("strong"),Y9r=o("big_bird"),K9r=o(" \u2014 "),eY=a("a"),Z9r=o("FlaxBigBirdForMaskedLM"),e$r=o(" (BigBird model)"),o$r=l(),h3=a("li"),WTe=a("strong"),r$r=o("distilbert"),t$r=o(" \u2014 "),oY=a("a"),a$r=o("FlaxDistilBertForMaskedLM"),n$r=o(" (DistilBERT model)"),s$r=l(),p3=a("li"),QTe=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),rY=a("a"),d$r=o("FlaxElectraForMaskedLM"),c$r=o(" (ELECTRA model)"),f$r=l(),u3=a("li"),HTe=a("strong"),m$r=o("mbart"),g$r=o(" \u2014 "),tY=a("a"),h$r=o("FlaxMBartForConditionalGeneration"),p$r=o(" (mBART model)"),u$r=l(),_3=a("li"),UTe=a("strong"),_$r=o("roberta"),b$r=o(" \u2014 "),aY=a("a"),v$r=o("FlaxRobertaForMaskedLM"),F$r=o(" (RoBERTa model)"),T$r=l(),b3=a("li"),JTe=a("strong"),M$r=o("roformer"),E$r=o(" \u2014 "),nY=a("a"),C$r=o("FlaxRoFormerForMaskedLM"),w$r=o(" (RoFormer model)"),A$r=l(),v3=a("li"),YTe=a("strong"),y$r=o("xlm-roberta"),L$r=o(" \u2014 "),sY=a("a"),x$r=o("FlaxXLMRobertaForMaskedLM"),$$r=o(" (XLM-RoBERTa model)"),k$r=l(),F(F3.$$.fragment),mNe=l(),Dc=a("h2"),T3=a("a"),KTe=a("span"),F(wx.$$.fragment),S$r=l(),ZTe=a("span"),R$r=o("FlaxAutoModelForSeq2SeqLM"),gNe=l(),pr=a("div"),F(Ax.$$.fragment),P$r=l(),Gc=a("p"),B$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lY=a("a"),I$r=o("from_pretrained()"),q$r=o(" class method or the "),iY=a("a"),N$r=o("from_config()"),j$r=o(` class
method.`),D$r=l(),yx=a("p"),G$r=o("This class cannot be instantiated directly using "),eMe=a("code"),O$r=o("__init__()"),V$r=o(" (throws an error)."),X$r=l(),zt=a("div"),F(Lx.$$.fragment),z$r=l(),oMe=a("p"),W$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q$r=l(),Oc=a("p"),H$r=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),U$r=o("not"),J$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),Y$r=o("from_pretrained()"),K$r=o(" to load the model weights."),Z$r=l(),F(M3.$$.fragment),ekr=l(),Vr=a("div"),F(xx.$$.fragment),okr=l(),tMe=a("p"),rkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tkr=l(),bn=a("p"),akr=o("The model class to instantiate is selected based on the "),aMe=a("code"),nkr=o("model_type"),skr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(":"),fkr=l(),Pe=a("ul"),E3=a("li"),lMe=a("strong"),mkr=o("bart"),gkr=o(" \u2014 "),cY=a("a"),hkr=o("FlaxBartForConditionalGeneration"),pkr=o(" (BART model)"),ukr=l(),C3=a("li"),iMe=a("strong"),_kr=o("blenderbot"),bkr=o(" \u2014 "),fY=a("a"),vkr=o("FlaxBlenderbotForConditionalGeneration"),Fkr=o(" (Blenderbot model)"),Tkr=l(),w3=a("li"),dMe=a("strong"),Mkr=o("blenderbot-small"),Ekr=o(" \u2014 "),mY=a("a"),Ckr=o("FlaxBlenderbotSmallForConditionalGeneration"),wkr=o(" (BlenderbotSmall model)"),Akr=l(),A3=a("li"),cMe=a("strong"),ykr=o("encoder-decoder"),Lkr=o(" \u2014 "),gY=a("a"),xkr=o("FlaxEncoderDecoderModel"),$kr=o(" (Encoder decoder model)"),kkr=l(),y3=a("li"),fMe=a("strong"),Skr=o("marian"),Rkr=o(" \u2014 "),hY=a("a"),Pkr=o("FlaxMarianMTModel"),Bkr=o(" (Marian model)"),Ikr=l(),L3=a("li"),mMe=a("strong"),qkr=o("mbart"),Nkr=o(" \u2014 "),pY=a("a"),jkr=o("FlaxMBartForConditionalGeneration"),Dkr=o(" (mBART model)"),Gkr=l(),x3=a("li"),gMe=a("strong"),Okr=o("mt5"),Vkr=o(" \u2014 "),uY=a("a"),Xkr=o("FlaxMT5ForConditionalGeneration"),zkr=o(" (mT5 model)"),Wkr=l(),$3=a("li"),hMe=a("strong"),Qkr=o("pegasus"),Hkr=o(" \u2014 "),_Y=a("a"),Ukr=o("FlaxPegasusForConditionalGeneration"),Jkr=o(" (Pegasus model)"),Ykr=l(),k3=a("li"),pMe=a("strong"),Kkr=o("t5"),Zkr=o(" \u2014 "),bY=a("a"),eSr=o("FlaxT5ForConditionalGeneration"),oSr=o(" (T5 model)"),rSr=l(),F(S3.$$.fragment),hNe=l(),Vc=a("h2"),R3=a("a"),uMe=a("span"),F($x.$$.fragment),tSr=l(),_Me=a("span"),aSr=o("FlaxAutoModelForSequenceClassification"),pNe=l(),ur=a("div"),F(kx.$$.fragment),nSr=l(),Xc=a("p"),sSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vY=a("a"),lSr=o("from_pretrained()"),iSr=o(" class method or the "),FY=a("a"),dSr=o("from_config()"),cSr=o(` class
method.`),fSr=l(),Sx=a("p"),mSr=o("This class cannot be instantiated directly using "),bMe=a("code"),gSr=o("__init__()"),hSr=o(" (throws an error)."),pSr=l(),Wt=a("div"),F(Rx.$$.fragment),uSr=l(),vMe=a("p"),_Sr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bSr=l(),zc=a("p"),vSr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),FSr=o("not"),TSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),MSr=o("from_pretrained()"),ESr=o(" to load the model weights."),CSr=l(),F(P3.$$.fragment),wSr=l(),Xr=a("div"),F(Px.$$.fragment),ASr=l(),TMe=a("p"),ySr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LSr=l(),vn=a("p"),xSr=o("The model class to instantiate is selected based on the "),MMe=a("code"),$Sr=o("model_type"),kSr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(":"),ISr=l(),xe=a("ul"),B3=a("li"),wMe=a("strong"),qSr=o("albert"),NSr=o(" \u2014 "),MY=a("a"),jSr=o("FlaxAlbertForSequenceClassification"),DSr=o(" (ALBERT model)"),GSr=l(),I3=a("li"),AMe=a("strong"),OSr=o("bart"),VSr=o(" \u2014 "),EY=a("a"),XSr=o("FlaxBartForSequenceClassification"),zSr=o(" (BART model)"),WSr=l(),q3=a("li"),yMe=a("strong"),QSr=o("bert"),HSr=o(" \u2014 "),CY=a("a"),USr=o("FlaxBertForSequenceClassification"),JSr=o(" (BERT model)"),YSr=l(),N3=a("li"),LMe=a("strong"),KSr=o("big_bird"),ZSr=o(" \u2014 "),wY=a("a"),eRr=o("FlaxBigBirdForSequenceClassification"),oRr=o(" (BigBird model)"),rRr=l(),j3=a("li"),xMe=a("strong"),tRr=o("distilbert"),aRr=o(" \u2014 "),AY=a("a"),nRr=o("FlaxDistilBertForSequenceClassification"),sRr=o(" (DistilBERT model)"),lRr=l(),D3=a("li"),$Me=a("strong"),iRr=o("electra"),dRr=o(" \u2014 "),yY=a("a"),cRr=o("FlaxElectraForSequenceClassification"),fRr=o(" (ELECTRA model)"),mRr=l(),G3=a("li"),kMe=a("strong"),gRr=o("mbart"),hRr=o(" \u2014 "),LY=a("a"),pRr=o("FlaxMBartForSequenceClassification"),uRr=o(" (mBART model)"),_Rr=l(),O3=a("li"),SMe=a("strong"),bRr=o("roberta"),vRr=o(" \u2014 "),xY=a("a"),FRr=o("FlaxRobertaForSequenceClassification"),TRr=o(" (RoBERTa model)"),MRr=l(),V3=a("li"),RMe=a("strong"),ERr=o("roformer"),CRr=o(" \u2014 "),$Y=a("a"),wRr=o("FlaxRoFormerForSequenceClassification"),ARr=o(" (RoFormer model)"),yRr=l(),X3=a("li"),PMe=a("strong"),LRr=o("xlm-roberta"),xRr=o(" \u2014 "),kY=a("a"),$Rr=o("FlaxXLMRobertaForSequenceClassification"),kRr=o(" (XLM-RoBERTa model)"),SRr=l(),F(z3.$$.fragment),uNe=l(),Wc=a("h2"),W3=a("a"),BMe=a("span"),F(Bx.$$.fragment),RRr=l(),IMe=a("span"),PRr=o("FlaxAutoModelForQuestionAnswering"),_Ne=l(),_r=a("div"),F(Ix.$$.fragment),BRr=l(),Qc=a("p"),IRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=a("a"),qRr=o("from_pretrained()"),NRr=o(" class method or the "),RY=a("a"),jRr=o("from_config()"),DRr=o(` class
method.`),GRr=l(),qx=a("p"),ORr=o("This class cannot be instantiated directly using "),qMe=a("code"),VRr=o("__init__()"),XRr=o(" (throws an error)."),zRr=l(),Qt=a("div"),F(Nx.$$.fragment),WRr=l(),NMe=a("p"),QRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HRr=l(),Hc=a("p"),URr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),JRr=o("not"),YRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),KRr=o("from_pretrained()"),ZRr=o(" to load the model weights."),ePr=l(),F(Q3.$$.fragment),oPr=l(),zr=a("div"),F(jx.$$.fragment),rPr=l(),DMe=a("p"),tPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aPr=l(),Fn=a("p"),nPr=o("The model class to instantiate is selected based on the "),GMe=a("code"),sPr=o("model_type"),lPr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),cPr=o("pretrained_model_name_or_path"),fPr=o(":"),mPr=l(),$e=a("ul"),H3=a("li"),XMe=a("strong"),gPr=o("albert"),hPr=o(" \u2014 "),BY=a("a"),pPr=o("FlaxAlbertForQuestionAnswering"),uPr=o(" (ALBERT model)"),_Pr=l(),U3=a("li"),zMe=a("strong"),bPr=o("bart"),vPr=o(" \u2014 "),IY=a("a"),FPr=o("FlaxBartForQuestionAnswering"),TPr=o(" (BART model)"),MPr=l(),J3=a("li"),WMe=a("strong"),EPr=o("bert"),CPr=o(" \u2014 "),qY=a("a"),wPr=o("FlaxBertForQuestionAnswering"),APr=o(" (BERT model)"),yPr=l(),Y3=a("li"),QMe=a("strong"),LPr=o("big_bird"),xPr=o(" \u2014 "),NY=a("a"),$Pr=o("FlaxBigBirdForQuestionAnswering"),kPr=o(" (BigBird model)"),SPr=l(),K3=a("li"),HMe=a("strong"),RPr=o("distilbert"),PPr=o(" \u2014 "),jY=a("a"),BPr=o("FlaxDistilBertForQuestionAnswering"),IPr=o(" (DistilBERT model)"),qPr=l(),Z3=a("li"),UMe=a("strong"),NPr=o("electra"),jPr=o(" \u2014 "),DY=a("a"),DPr=o("FlaxElectraForQuestionAnswering"),GPr=o(" (ELECTRA model)"),OPr=l(),ew=a("li"),JMe=a("strong"),VPr=o("mbart"),XPr=o(" \u2014 "),GY=a("a"),zPr=o("FlaxMBartForQuestionAnswering"),WPr=o(" (mBART model)"),QPr=l(),ow=a("li"),YMe=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),OY=a("a"),JPr=o("FlaxRobertaForQuestionAnswering"),YPr=o(" (RoBERTa model)"),KPr=l(),rw=a("li"),KMe=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),VY=a("a"),oBr=o("FlaxRoFormerForQuestionAnswering"),rBr=o(" (RoFormer model)"),tBr=l(),tw=a("li"),ZMe=a("strong"),aBr=o("xlm-roberta"),nBr=o(" \u2014 "),XY=a("a"),sBr=o("FlaxXLMRobertaForQuestionAnswering"),lBr=o(" (XLM-RoBERTa model)"),iBr=l(),F(aw.$$.fragment),bNe=l(),Uc=a("h2"),nw=a("a"),e4e=a("span"),F(Dx.$$.fragment),dBr=l(),o4e=a("span"),cBr=o("FlaxAutoModelForTokenClassification"),vNe=l(),br=a("div"),F(Gx.$$.fragment),fBr=l(),Jc=a("p"),mBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=a("a"),gBr=o("from_pretrained()"),hBr=o(" class method or the "),WY=a("a"),pBr=o("from_config()"),uBr=o(` class
method.`),_Br=l(),Ox=a("p"),bBr=o("This class cannot be instantiated directly using "),r4e=a("code"),vBr=o("__init__()"),FBr=o(" (throws an error)."),TBr=l(),Ht=a("div"),F(Vx.$$.fragment),MBr=l(),t4e=a("p"),EBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CBr=l(),Yc=a("p"),wBr=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),ABr=o("not"),yBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),LBr=o("from_pretrained()"),xBr=o(" to load the model weights."),$Br=l(),F(sw.$$.fragment),kBr=l(),Wr=a("div"),F(Xx.$$.fragment),SBr=l(),n4e=a("p"),RBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PBr=l(),Tn=a("p"),BBr=o("The model class to instantiate is selected based on the "),s4e=a("code"),IBr=o("model_type"),qBr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),NBr=o("pretrained_model_name_or_path"),jBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),De=a("ul"),lw=a("li"),d4e=a("strong"),VBr=o("albert"),XBr=o(" \u2014 "),HY=a("a"),zBr=o("FlaxAlbertForTokenClassification"),WBr=o(" (ALBERT model)"),QBr=l(),iw=a("li"),c4e=a("strong"),HBr=o("bert"),UBr=o(" \u2014 "),UY=a("a"),JBr=o("FlaxBertForTokenClassification"),YBr=o(" (BERT model)"),KBr=l(),dw=a("li"),f4e=a("strong"),ZBr=o("big_bird"),eIr=o(" \u2014 "),JY=a("a"),oIr=o("FlaxBigBirdForTokenClassification"),rIr=o(" (BigBird model)"),tIr=l(),cw=a("li"),m4e=a("strong"),aIr=o("distilbert"),nIr=o(" \u2014 "),YY=a("a"),sIr=o("FlaxDistilBertForTokenClassification"),lIr=o(" (DistilBERT model)"),iIr=l(),fw=a("li"),g4e=a("strong"),dIr=o("electra"),cIr=o(" \u2014 "),KY=a("a"),fIr=o("FlaxElectraForTokenClassification"),mIr=o(" (ELECTRA model)"),gIr=l(),mw=a("li"),h4e=a("strong"),hIr=o("roberta"),pIr=o(" \u2014 "),ZY=a("a"),uIr=o("FlaxRobertaForTokenClassification"),_Ir=o(" (RoBERTa model)"),bIr=l(),gw=a("li"),p4e=a("strong"),vIr=o("roformer"),FIr=o(" \u2014 "),eK=a("a"),TIr=o("FlaxRoFormerForTokenClassification"),MIr=o(" (RoFormer model)"),EIr=l(),hw=a("li"),u4e=a("strong"),CIr=o("xlm-roberta"),wIr=o(" \u2014 "),oK=a("a"),AIr=o("FlaxXLMRobertaForTokenClassification"),yIr=o(" (XLM-RoBERTa model)"),LIr=l(),F(pw.$$.fragment),FNe=l(),Kc=a("h2"),uw=a("a"),_4e=a("span"),F(zx.$$.fragment),xIr=l(),b4e=a("span"),$Ir=o("FlaxAutoModelForMultipleChoice"),TNe=l(),vr=a("div"),F(Wx.$$.fragment),kIr=l(),Zc=a("p"),SIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rK=a("a"),RIr=o("from_pretrained()"),PIr=o(" class method or the "),tK=a("a"),BIr=o("from_config()"),IIr=o(` class
method.`),qIr=l(),Qx=a("p"),NIr=o("This class cannot be instantiated directly using "),v4e=a("code"),jIr=o("__init__()"),DIr=o(" (throws an error)."),GIr=l(),Ut=a("div"),F(Hx.$$.fragment),OIr=l(),F4e=a("p"),VIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XIr=l(),ef=a("p"),zIr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),WIr=o("not"),QIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),HIr=o("from_pretrained()"),UIr=o(" to load the model weights."),JIr=l(),F(_w.$$.fragment),YIr=l(),Qr=a("div"),F(Ux.$$.fragment),KIr=l(),M4e=a("p"),ZIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eqr=l(),Mn=a("p"),oqr=o("The model class to instantiate is selected based on the "),E4e=a("code"),rqr=o("model_type"),tqr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),aqr=o("pretrained_model_name_or_path"),nqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),sqr=o("pretrained_model_name_or_path"),lqr=o(":"),iqr=l(),Ge=a("ul"),bw=a("li"),A4e=a("strong"),dqr=o("albert"),cqr=o(" \u2014 "),nK=a("a"),fqr=o("FlaxAlbertForMultipleChoice"),mqr=o(" (ALBERT model)"),gqr=l(),vw=a("li"),y4e=a("strong"),hqr=o("bert"),pqr=o(" \u2014 "),sK=a("a"),uqr=o("FlaxBertForMultipleChoice"),_qr=o(" (BERT model)"),bqr=l(),Fw=a("li"),L4e=a("strong"),vqr=o("big_bird"),Fqr=o(" \u2014 "),lK=a("a"),Tqr=o("FlaxBigBirdForMultipleChoice"),Mqr=o(" (BigBird model)"),Eqr=l(),Tw=a("li"),x4e=a("strong"),Cqr=o("distilbert"),wqr=o(" \u2014 "),iK=a("a"),Aqr=o("FlaxDistilBertForMultipleChoice"),yqr=o(" (DistilBERT model)"),Lqr=l(),Mw=a("li"),$4e=a("strong"),xqr=o("electra"),$qr=o(" \u2014 "),dK=a("a"),kqr=o("FlaxElectraForMultipleChoice"),Sqr=o(" (ELECTRA model)"),Rqr=l(),Ew=a("li"),k4e=a("strong"),Pqr=o("roberta"),Bqr=o(" \u2014 "),cK=a("a"),Iqr=o("FlaxRobertaForMultipleChoice"),qqr=o(" (RoBERTa model)"),Nqr=l(),Cw=a("li"),S4e=a("strong"),jqr=o("roformer"),Dqr=o(" \u2014 "),fK=a("a"),Gqr=o("FlaxRoFormerForMultipleChoice"),Oqr=o(" (RoFormer model)"),Vqr=l(),ww=a("li"),R4e=a("strong"),Xqr=o("xlm-roberta"),zqr=o(" \u2014 "),mK=a("a"),Wqr=o("FlaxXLMRobertaForMultipleChoice"),Qqr=o(" (XLM-RoBERTa model)"),Hqr=l(),F(Aw.$$.fragment),MNe=l(),of=a("h2"),yw=a("a"),P4e=a("span"),F(Jx.$$.fragment),Uqr=l(),B4e=a("span"),Jqr=o("FlaxAutoModelForNextSentencePrediction"),ENe=l(),Fr=a("div"),F(Yx.$$.fragment),Yqr=l(),rf=a("p"),Kqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gK=a("a"),Zqr=o("from_pretrained()"),eNr=o(" class method or the "),hK=a("a"),oNr=o("from_config()"),rNr=o(` class
method.`),tNr=l(),Kx=a("p"),aNr=o("This class cannot be instantiated directly using "),I4e=a("code"),nNr=o("__init__()"),sNr=o(" (throws an error)."),lNr=l(),Jt=a("div"),F(Zx.$$.fragment),iNr=l(),q4e=a("p"),dNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cNr=l(),tf=a("p"),fNr=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),mNr=o("not"),gNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),hNr=o("from_pretrained()"),pNr=o(" to load the model weights."),uNr=l(),F(Lw.$$.fragment),_Nr=l(),Hr=a("div"),F(e9.$$.fragment),bNr=l(),j4e=a("p"),vNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FNr=l(),En=a("p"),TNr=o("The model class to instantiate is selected based on the "),D4e=a("code"),MNr=o("model_type"),ENr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),ANr=o("pretrained_model_name_or_path"),yNr=o(":"),LNr=l(),V4e=a("ul"),xw=a("li"),X4e=a("strong"),xNr=o("bert"),$Nr=o(" \u2014 "),uK=a("a"),kNr=o("FlaxBertForNextSentencePrediction"),SNr=o(" (BERT model)"),RNr=l(),F($w.$$.fragment),CNe=l(),af=a("h2"),kw=a("a"),z4e=a("span"),F(o9.$$.fragment),PNr=l(),W4e=a("span"),BNr=o("FlaxAutoModelForImageClassification"),wNe=l(),Tr=a("div"),F(r9.$$.fragment),INr=l(),nf=a("p"),qNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_K=a("a"),NNr=o("from_pretrained()"),jNr=o(" class method or the "),bK=a("a"),DNr=o("from_config()"),GNr=o(` class
method.`),ONr=l(),t9=a("p"),VNr=o("This class cannot be instantiated directly using "),Q4e=a("code"),XNr=o("__init__()"),zNr=o(" (throws an error)."),WNr=l(),Yt=a("div"),F(a9.$$.fragment),QNr=l(),H4e=a("p"),HNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UNr=l(),sf=a("p"),JNr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),YNr=o("not"),KNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),ZNr=o("from_pretrained()"),ejr=o(" to load the model weights."),ojr=l(),F(Sw.$$.fragment),rjr=l(),Ur=a("div"),F(n9.$$.fragment),tjr=l(),J4e=a("p"),ajr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),njr=l(),Cn=a("p"),sjr=o("The model class to instantiate is selected based on the "),Y4e=a("code"),ljr=o("model_type"),ijr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),djr=o("pretrained_model_name_or_path"),cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),fjr=o("pretrained_model_name_or_path"),mjr=o(":"),gjr=l(),s9=a("ul"),Rw=a("li"),eEe=a("strong"),hjr=o("beit"),pjr=o(" \u2014 "),FK=a("a"),ujr=o("FlaxBeitForImageClassification"),_jr=o(" (BEiT model)"),bjr=l(),Pw=a("li"),oEe=a("strong"),vjr=o("vit"),Fjr=o(" \u2014 "),TK=a("a"),Tjr=o("FlaxViTForImageClassification"),Mjr=o(" (ViT model)"),Ejr=l(),F(Bw.$$.fragment),ANe=l(),lf=a("h2"),Iw=a("a"),rEe=a("span"),F(l9.$$.fragment),Cjr=l(),tEe=a("span"),wjr=o("FlaxAutoModelForVision2Seq"),yNe=l(),Mr=a("div"),F(i9.$$.fragment),Ajr=l(),df=a("p"),yjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MK=a("a"),Ljr=o("from_pretrained()"),xjr=o(" class method or the "),EK=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),d9=a("p"),Rjr=o("This class cannot be instantiated directly using "),aEe=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Kt=a("div"),F(c9.$$.fragment),qjr=l(),nEe=a("p"),Njr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jjr=l(),cf=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),sEe=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(qw.$$.fragment),Wjr=l(),Jr=a("div"),F(f9.$$.fragment),Qjr=l(),lEe=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ujr=l(),wn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),iEe=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),dEe=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),fEe=a("ul"),Nw=a("li"),mEe=a("strong"),aDr=o("vision-encoder-decoder"),nDr=o(" \u2014 "),wK=a("a"),sDr=o("FlaxVisionEncoderDecoderModel"),lDr=o(" (Vision Encoder decoder model)"),iDr=l(),F(jw.$$.fragment),this.h()},l(f){const _=oLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var m9=s(p);m=n(m9,"A",{id:!0,class:!0,href:!0});var gEe=s(m);u=n(gEe,"SPAN",{});var hEe=s(u);T(d.$$.fragment,hEe),hEe.forEach(t),gEe.forEach(t),h=i(m9),Mo=n(m9,"SPAN",{});var pEe=s(Mo);ci=r(pEe,"Auto Classes"),pEe.forEach(t),m9.forEach(t),hf=i(f),rt=n(f,"P",{});var g9=s(rt);fi=r(g9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(g9,"CODE",{});var uEe=s(mi);t0=r(uEe,"from_pretrained()"),uEe.forEach(t),pf=r(g9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),g9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var _Ee=s(yn);a0=r(_Ee,"AutoConfig"),_Ee.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var bEe=s(xn);n0=r(bEe,"AutoModel"),bEe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var vEe=s($n);s0=r(vEe,"AutoTokenizer"),vEe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var h9=s(Ae);C$=r(h9,"will create a model that is an instance of "),ui=n(h9,"A",{href:!0});var FEe=s(ui);w$=r(FEe,"BertModel"),FEe.forEach(t),A$=r(h9,"."),h9.forEach(t),Eo=i(f),wa=n(f,"P",{});var p9=s(wa);y$=r(p9,"There is one class of "),_f=n(p9,"CODE",{});var TEe=s(_f);L$=r(TEe,"AutoModel"),TEe.forEach(t),IDe=r(p9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),p9.forEach(t),wIe=i(f),_i=n(f,"H2",{class:!0});var u9=s(_i);bf=n(u9,"A",{id:!0,class:!0,href:!0});var MEe=s(bf);bee=n(MEe,"SPAN",{});var EEe=s(bee);T(l0.$$.fragment,EEe),EEe.forEach(t),MEe.forEach(t),qDe=i(u9),vee=n(u9,"SPAN",{});var CEe=s(vee);NDe=r(CEe,"Extending the Auto Classes"),CEe.forEach(t),u9.forEach(t),AIe=i(f),kn=n(f,"P",{});var ff=s(kn);jDe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fee=n(ff,"CODE",{});var wEe=s(Fee);DDe=r(wEe,"NewModel"),wEe.forEach(t),GDe=r(ff,", make sure you have a "),Tee=n(ff,"CODE",{});var AEe=s(Tee);ODe=r(AEe,"NewModelConfig"),AEe.forEach(t),VDe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),yIe=i(f),T(i0.$$.fragment,f),LIe=i(f),x$=n(f,"P",{});var yEe=s(x$);XDe=r(yEe,"You will then be able to use the auto classes like you would usually do!"),yEe.forEach(t),xIe=i(f),T(vf.$$.fragment,f),$Ie=i(f),bi=n(f,"H2",{class:!0});var _9=s(bi);Ff=n(_9,"A",{id:!0,class:!0,href:!0});var LEe=s(Ff);Mee=n(LEe,"SPAN",{});var xEe=s(Mee);T(d0.$$.fragment,xEe),xEe.forEach(t),LEe.forEach(t),zDe=i(_9),Eee=n(_9,"SPAN",{});var $Ee=s(Eee);WDe=r($Ee,"AutoConfig"),$Ee.forEach(t),_9.forEach(t),kIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(c0.$$.fragment,et),QDe=i(et),f0=n(et,"P",{});var b9=s(f0);HDe=r(b9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$$=n(b9,"A",{href:!0});var kEe=s($$);UDe=r(kEe,"from_pretrained()"),kEe.forEach(t),JDe=r(b9," class method."),b9.forEach(t),YDe=i(et),m0=n(et,"P",{});var v9=s(m0);KDe=r(v9,"This class cannot be instantiated directly using "),Cee=n(v9,"CODE",{});var SEe=s(Cee);ZDe=r(SEe,"__init__()"),SEe.forEach(t),eGe=r(v9," (throws an error)."),v9.forEach(t),oGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(g0.$$.fragment,ot),rGe=i(ot),wee=n(ot,"P",{});var REe=s(wee);tGe=r(REe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),REe.forEach(t),aGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);nGe=r(mf,"The configuration class to instantiate is selected based on the "),Aee=n(mf,"CODE",{});var PEe=s(Aee);sGe=r(PEe,"model_type"),PEe.forEach(t),lGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yee=n(mf,"CODE",{});var BEe=s(yee);iGe=r(BEe,"pretrained_model_name_or_path"),BEe.forEach(t),dGe=r(mf,":"),mf.forEach(t),cGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var Dw=s(Tf);Lee=n(Dw,"STRONG",{});var IEe=s(Lee);fGe=r(IEe,"albert"),IEe.forEach(t),mGe=r(Dw," \u2014 "),k$=n(Dw,"A",{href:!0});var qEe=s(k$);gGe=r(qEe,"AlbertConfig"),qEe.forEach(t),hGe=r(Dw," (ALBERT model)"),Dw.forEach(t),pGe=i(y),Mf=n(y,"LI",{});var Gw=s(Mf);xee=n(Gw,"STRONG",{});var NEe=s(xee);uGe=r(NEe,"bart"),NEe.forEach(t),_Ge=r(Gw," \u2014 "),S$=n(Gw,"A",{href:!0});var jEe=s(S$);bGe=r(jEe,"BartConfig"),jEe.forEach(t),vGe=r(Gw," (BART model)"),Gw.forEach(t),FGe=i(y),Ef=n(y,"LI",{});var Ow=s(Ef);$ee=n(Ow,"STRONG",{});var DEe=s($ee);TGe=r(DEe,"beit"),DEe.forEach(t),MGe=r(Ow," \u2014 "),R$=n(Ow,"A",{href:!0});var GEe=s(R$);EGe=r(GEe,"BeitConfig"),GEe.forEach(t),CGe=r(Ow," (BEiT model)"),Ow.forEach(t),wGe=i(y),Cf=n(y,"LI",{});var Vw=s(Cf);kee=n(Vw,"STRONG",{});var OEe=s(kee);AGe=r(OEe,"bert"),OEe.forEach(t),yGe=r(Vw," \u2014 "),P$=n(Vw,"A",{href:!0});var VEe=s(P$);LGe=r(VEe,"BertConfig"),VEe.forEach(t),xGe=r(Vw," (BERT model)"),Vw.forEach(t),$Ge=i(y),wf=n(y,"LI",{});var Xw=s(wf);See=n(Xw,"STRONG",{});var XEe=s(See);kGe=r(XEe,"bert-generation"),XEe.forEach(t),SGe=r(Xw," \u2014 "),B$=n(Xw,"A",{href:!0});var zEe=s(B$);RGe=r(zEe,"BertGenerationConfig"),zEe.forEach(t),PGe=r(Xw," (Bert Generation model)"),Xw.forEach(t),BGe=i(y),Af=n(y,"LI",{});var zw=s(Af);Ree=n(zw,"STRONG",{});var WEe=s(Ree);IGe=r(WEe,"big_bird"),WEe.forEach(t),qGe=r(zw," \u2014 "),I$=n(zw,"A",{href:!0});var QEe=s(I$);NGe=r(QEe,"BigBirdConfig"),QEe.forEach(t),jGe=r(zw," (BigBird model)"),zw.forEach(t),DGe=i(y),yf=n(y,"LI",{});var Ww=s(yf);Pee=n(Ww,"STRONG",{});var HEe=s(Pee);GGe=r(HEe,"bigbird_pegasus"),HEe.forEach(t),OGe=r(Ww," \u2014 "),q$=n(Ww,"A",{href:!0});var UEe=s(q$);VGe=r(UEe,"BigBirdPegasusConfig"),UEe.forEach(t),XGe=r(Ww," (BigBirdPegasus model)"),Ww.forEach(t),zGe=i(y),Lf=n(y,"LI",{});var Qw=s(Lf);Bee=n(Qw,"STRONG",{});var JEe=s(Bee);WGe=r(JEe,"blenderbot"),JEe.forEach(t),QGe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var YEe=s(N$);HGe=r(YEe,"BlenderbotConfig"),YEe.forEach(t),UGe=r(Qw," (Blenderbot model)"),Qw.forEach(t),JGe=i(y),xf=n(y,"LI",{});var Hw=s(xf);Iee=n(Hw,"STRONG",{});var KEe=s(Iee);YGe=r(KEe,"blenderbot-small"),KEe.forEach(t),KGe=r(Hw," \u2014 "),j$=n(Hw,"A",{href:!0});var ZEe=s(j$);ZGe=r(ZEe,"BlenderbotSmallConfig"),ZEe.forEach(t),eOe=r(Hw," (BlenderbotSmall model)"),Hw.forEach(t),oOe=i(y),$f=n(y,"LI",{});var Uw=s($f);qee=n(Uw,"STRONG",{});var eCe=s(qee);rOe=r(eCe,"camembert"),eCe.forEach(t),tOe=r(Uw," \u2014 "),D$=n(Uw,"A",{href:!0});var oCe=s(D$);aOe=r(oCe,"CamembertConfig"),oCe.forEach(t),nOe=r(Uw," (CamemBERT model)"),Uw.forEach(t),sOe=i(y),kf=n(y,"LI",{});var Jw=s(kf);Nee=n(Jw,"STRONG",{});var rCe=s(Nee);lOe=r(rCe,"canine"),rCe.forEach(t),iOe=r(Jw," \u2014 "),G$=n(Jw,"A",{href:!0});var tCe=s(G$);dOe=r(tCe,"CanineConfig"),tCe.forEach(t),cOe=r(Jw," (Canine model)"),Jw.forEach(t),fOe=i(y),Sf=n(y,"LI",{});var Yw=s(Sf);jee=n(Yw,"STRONG",{});var aCe=s(jee);mOe=r(aCe,"clip"),aCe.forEach(t),gOe=r(Yw," \u2014 "),O$=n(Yw,"A",{href:!0});var nCe=s(O$);hOe=r(nCe,"CLIPConfig"),nCe.forEach(t),pOe=r(Yw," (CLIP model)"),Yw.forEach(t),uOe=i(y),Rf=n(y,"LI",{});var Kw=s(Rf);Dee=n(Kw,"STRONG",{});var sCe=s(Dee);_Oe=r(sCe,"convbert"),sCe.forEach(t),bOe=r(Kw," \u2014 "),V$=n(Kw,"A",{href:!0});var lCe=s(V$);vOe=r(lCe,"ConvBertConfig"),lCe.forEach(t),FOe=r(Kw," (ConvBERT model)"),Kw.forEach(t),TOe=i(y),Pf=n(y,"LI",{});var Zw=s(Pf);Gee=n(Zw,"STRONG",{});var iCe=s(Gee);MOe=r(iCe,"convnext"),iCe.forEach(t),EOe=r(Zw," \u2014 "),X$=n(Zw,"A",{href:!0});var dCe=s(X$);COe=r(dCe,"ConvNextConfig"),dCe.forEach(t),wOe=r(Zw," (ConvNext model)"),Zw.forEach(t),AOe=i(y),Bf=n(y,"LI",{});var eA=s(Bf);Oee=n(eA,"STRONG",{});var cCe=s(Oee);yOe=r(cCe,"ctrl"),cCe.forEach(t),LOe=r(eA," \u2014 "),z$=n(eA,"A",{href:!0});var fCe=s(z$);xOe=r(fCe,"CTRLConfig"),fCe.forEach(t),$Oe=r(eA," (CTRL model)"),eA.forEach(t),kOe=i(y),If=n(y,"LI",{});var oA=s(If);Vee=n(oA,"STRONG",{});var mCe=s(Vee);SOe=r(mCe,"data2vec-audio"),mCe.forEach(t),ROe=r(oA," \u2014 "),W$=n(oA,"A",{href:!0});var gCe=s(W$);POe=r(gCe,"Data2VecAudioConfig"),gCe.forEach(t),BOe=r(oA," (Data2VecAudio model)"),oA.forEach(t),IOe=i(y),qf=n(y,"LI",{});var rA=s(qf);Xee=n(rA,"STRONG",{});var hCe=s(Xee);qOe=r(hCe,"data2vec-text"),hCe.forEach(t),NOe=r(rA," \u2014 "),Q$=n(rA,"A",{href:!0});var pCe=s(Q$);jOe=r(pCe,"Data2VecTextConfig"),pCe.forEach(t),DOe=r(rA," (Data2VecText model)"),rA.forEach(t),GOe=i(y),Nf=n(y,"LI",{});var tA=s(Nf);zee=n(tA,"STRONG",{});var uCe=s(zee);OOe=r(uCe,"data2vec-vision"),uCe.forEach(t),VOe=r(tA," \u2014 "),H$=n(tA,"A",{href:!0});var _Ce=s(H$);XOe=r(_Ce,"Data2VecVisionConfig"),_Ce.forEach(t),zOe=r(tA," (Data2VecVision model)"),tA.forEach(t),WOe=i(y),jf=n(y,"LI",{});var aA=s(jf);Wee=n(aA,"STRONG",{});var bCe=s(Wee);QOe=r(bCe,"deberta"),bCe.forEach(t),HOe=r(aA," \u2014 "),U$=n(aA,"A",{href:!0});var vCe=s(U$);UOe=r(vCe,"DebertaConfig"),vCe.forEach(t),JOe=r(aA," (DeBERTa model)"),aA.forEach(t),YOe=i(y),Df=n(y,"LI",{});var nA=s(Df);Qee=n(nA,"STRONG",{});var FCe=s(Qee);KOe=r(FCe,"deberta-v2"),FCe.forEach(t),ZOe=r(nA," \u2014 "),J$=n(nA,"A",{href:!0});var TCe=s(J$);eVe=r(TCe,"DebertaV2Config"),TCe.forEach(t),oVe=r(nA," (DeBERTa-v2 model)"),nA.forEach(t),rVe=i(y),Gf=n(y,"LI",{});var sA=s(Gf);Hee=n(sA,"STRONG",{});var MCe=s(Hee);tVe=r(MCe,"decision_transformer"),MCe.forEach(t),aVe=r(sA," \u2014 "),Y$=n(sA,"A",{href:!0});var ECe=s(Y$);nVe=r(ECe,"DecisionTransformerConfig"),ECe.forEach(t),sVe=r(sA," (Decision Transformer model)"),sA.forEach(t),lVe=i(y),Of=n(y,"LI",{});var lA=s(Of);Uee=n(lA,"STRONG",{});var CCe=s(Uee);iVe=r(CCe,"deit"),CCe.forEach(t),dVe=r(lA," \u2014 "),K$=n(lA,"A",{href:!0});var wCe=s(K$);cVe=r(wCe,"DeiTConfig"),wCe.forEach(t),fVe=r(lA," (DeiT model)"),lA.forEach(t),mVe=i(y),Vf=n(y,"LI",{});var iA=s(Vf);Jee=n(iA,"STRONG",{});var ACe=s(Jee);gVe=r(ACe,"detr"),ACe.forEach(t),hVe=r(iA," \u2014 "),Z$=n(iA,"A",{href:!0});var cDr=s(Z$);pVe=r(cDr,"DetrConfig"),cDr.forEach(t),uVe=r(iA," (DETR model)"),iA.forEach(t),_Ve=i(y),Xf=n(y,"LI",{});var yCe=s(Xf);Yee=n(yCe,"STRONG",{});var fDr=s(Yee);bVe=r(fDr,"distilbert"),fDr.forEach(t),vVe=r(yCe," \u2014 "),ek=n(yCe,"A",{href:!0});var mDr=s(ek);FVe=r(mDr,"DistilBertConfig"),mDr.forEach(t),TVe=r(yCe," (DistilBERT model)"),yCe.forEach(t),MVe=i(y),zf=n(y,"LI",{});var LCe=s(zf);Kee=n(LCe,"STRONG",{});var gDr=s(Kee);EVe=r(gDr,"dpr"),gDr.forEach(t),CVe=r(LCe," \u2014 "),ok=n(LCe,"A",{href:!0});var hDr=s(ok);wVe=r(hDr,"DPRConfig"),hDr.forEach(t),AVe=r(LCe," (DPR model)"),LCe.forEach(t),yVe=i(y),Wf=n(y,"LI",{});var xCe=s(Wf);Zee=n(xCe,"STRONG",{});var pDr=s(Zee);LVe=r(pDr,"dpt"),pDr.forEach(t),xVe=r(xCe," \u2014 "),rk=n(xCe,"A",{href:!0});var uDr=s(rk);$Ve=r(uDr,"DPTConfig"),uDr.forEach(t),kVe=r(xCe," (DPT model)"),xCe.forEach(t),SVe=i(y),Qf=n(y,"LI",{});var $Ce=s(Qf);eoe=n($Ce,"STRONG",{});var _Dr=s(eoe);RVe=r(_Dr,"electra"),_Dr.forEach(t),PVe=r($Ce," \u2014 "),tk=n($Ce,"A",{href:!0});var bDr=s(tk);BVe=r(bDr,"ElectraConfig"),bDr.forEach(t),IVe=r($Ce," (ELECTRA model)"),$Ce.forEach(t),qVe=i(y),Hf=n(y,"LI",{});var kCe=s(Hf);ooe=n(kCe,"STRONG",{});var vDr=s(ooe);NVe=r(vDr,"encoder-decoder"),vDr.forEach(t),jVe=r(kCe," \u2014 "),ak=n(kCe,"A",{href:!0});var FDr=s(ak);DVe=r(FDr,"EncoderDecoderConfig"),FDr.forEach(t),GVe=r(kCe," (Encoder decoder model)"),kCe.forEach(t),OVe=i(y),Uf=n(y,"LI",{});var SCe=s(Uf);roe=n(SCe,"STRONG",{});var TDr=s(roe);VVe=r(TDr,"flaubert"),TDr.forEach(t),XVe=r(SCe," \u2014 "),nk=n(SCe,"A",{href:!0});var MDr=s(nk);zVe=r(MDr,"FlaubertConfig"),MDr.forEach(t),WVe=r(SCe," (FlauBERT model)"),SCe.forEach(t),QVe=i(y),Jf=n(y,"LI",{});var RCe=s(Jf);toe=n(RCe,"STRONG",{});var EDr=s(toe);HVe=r(EDr,"flava"),EDr.forEach(t),UVe=r(RCe," \u2014 "),sk=n(RCe,"A",{href:!0});var CDr=s(sk);JVe=r(CDr,"FlavaConfig"),CDr.forEach(t),YVe=r(RCe," (Flava model)"),RCe.forEach(t),KVe=i(y),Yf=n(y,"LI",{});var PCe=s(Yf);aoe=n(PCe,"STRONG",{});var wDr=s(aoe);ZVe=r(wDr,"fnet"),wDr.forEach(t),eXe=r(PCe," \u2014 "),lk=n(PCe,"A",{href:!0});var ADr=s(lk);oXe=r(ADr,"FNetConfig"),ADr.forEach(t),rXe=r(PCe," (FNet model)"),PCe.forEach(t),tXe=i(y),Kf=n(y,"LI",{});var BCe=s(Kf);noe=n(BCe,"STRONG",{});var yDr=s(noe);aXe=r(yDr,"fsmt"),yDr.forEach(t),nXe=r(BCe," \u2014 "),ik=n(BCe,"A",{href:!0});var LDr=s(ik);sXe=r(LDr,"FSMTConfig"),LDr.forEach(t),lXe=r(BCe," (FairSeq Machine-Translation model)"),BCe.forEach(t),iXe=i(y),Zf=n(y,"LI",{});var ICe=s(Zf);soe=n(ICe,"STRONG",{});var xDr=s(soe);dXe=r(xDr,"funnel"),xDr.forEach(t),cXe=r(ICe," \u2014 "),dk=n(ICe,"A",{href:!0});var $Dr=s(dk);fXe=r($Dr,"FunnelConfig"),$Dr.forEach(t),mXe=r(ICe," (Funnel Transformer model)"),ICe.forEach(t),gXe=i(y),em=n(y,"LI",{});var qCe=s(em);loe=n(qCe,"STRONG",{});var kDr=s(loe);hXe=r(kDr,"glpn"),kDr.forEach(t),pXe=r(qCe," \u2014 "),ck=n(qCe,"A",{href:!0});var SDr=s(ck);uXe=r(SDr,"GLPNConfig"),SDr.forEach(t),_Xe=r(qCe," (GLPN model)"),qCe.forEach(t),bXe=i(y),om=n(y,"LI",{});var NCe=s(om);ioe=n(NCe,"STRONG",{});var RDr=s(ioe);vXe=r(RDr,"gpt2"),RDr.forEach(t),FXe=r(NCe," \u2014 "),fk=n(NCe,"A",{href:!0});var PDr=s(fk);TXe=r(PDr,"GPT2Config"),PDr.forEach(t),MXe=r(NCe," (OpenAI GPT-2 model)"),NCe.forEach(t),EXe=i(y),rm=n(y,"LI",{});var jCe=s(rm);doe=n(jCe,"STRONG",{});var BDr=s(doe);CXe=r(BDr,"gpt_neo"),BDr.forEach(t),wXe=r(jCe," \u2014 "),mk=n(jCe,"A",{href:!0});var IDr=s(mk);AXe=r(IDr,"GPTNeoConfig"),IDr.forEach(t),yXe=r(jCe," (GPT Neo model)"),jCe.forEach(t),LXe=i(y),tm=n(y,"LI",{});var DCe=s(tm);coe=n(DCe,"STRONG",{});var qDr=s(coe);xXe=r(qDr,"gptj"),qDr.forEach(t),$Xe=r(DCe," \u2014 "),gk=n(DCe,"A",{href:!0});var NDr=s(gk);kXe=r(NDr,"GPTJConfig"),NDr.forEach(t),SXe=r(DCe," (GPT-J model)"),DCe.forEach(t),RXe=i(y),am=n(y,"LI",{});var GCe=s(am);foe=n(GCe,"STRONG",{});var jDr=s(foe);PXe=r(jDr,"hubert"),jDr.forEach(t),BXe=r(GCe," \u2014 "),hk=n(GCe,"A",{href:!0});var DDr=s(hk);IXe=r(DDr,"HubertConfig"),DDr.forEach(t),qXe=r(GCe," (Hubert model)"),GCe.forEach(t),NXe=i(y),nm=n(y,"LI",{});var OCe=s(nm);moe=n(OCe,"STRONG",{});var GDr=s(moe);jXe=r(GDr,"ibert"),GDr.forEach(t),DXe=r(OCe," \u2014 "),pk=n(OCe,"A",{href:!0});var ODr=s(pk);GXe=r(ODr,"IBertConfig"),ODr.forEach(t),OXe=r(OCe," (I-BERT model)"),OCe.forEach(t),VXe=i(y),sm=n(y,"LI",{});var VCe=s(sm);goe=n(VCe,"STRONG",{});var VDr=s(goe);XXe=r(VDr,"imagegpt"),VDr.forEach(t),zXe=r(VCe," \u2014 "),uk=n(VCe,"A",{href:!0});var XDr=s(uk);WXe=r(XDr,"ImageGPTConfig"),XDr.forEach(t),QXe=r(VCe," (ImageGPT model)"),VCe.forEach(t),HXe=i(y),lm=n(y,"LI",{});var XCe=s(lm);hoe=n(XCe,"STRONG",{});var zDr=s(hoe);UXe=r(zDr,"layoutlm"),zDr.forEach(t),JXe=r(XCe," \u2014 "),_k=n(XCe,"A",{href:!0});var WDr=s(_k);YXe=r(WDr,"LayoutLMConfig"),WDr.forEach(t),KXe=r(XCe," (LayoutLM model)"),XCe.forEach(t),ZXe=i(y),im=n(y,"LI",{});var zCe=s(im);poe=n(zCe,"STRONG",{});var QDr=s(poe);eze=r(QDr,"layoutlmv2"),QDr.forEach(t),oze=r(zCe," \u2014 "),bk=n(zCe,"A",{href:!0});var HDr=s(bk);rze=r(HDr,"LayoutLMv2Config"),HDr.forEach(t),tze=r(zCe," (LayoutLMv2 model)"),zCe.forEach(t),aze=i(y),dm=n(y,"LI",{});var WCe=s(dm);uoe=n(WCe,"STRONG",{});var UDr=s(uoe);nze=r(UDr,"led"),UDr.forEach(t),sze=r(WCe," \u2014 "),vk=n(WCe,"A",{href:!0});var JDr=s(vk);lze=r(JDr,"LEDConfig"),JDr.forEach(t),ize=r(WCe," (LED model)"),WCe.forEach(t),dze=i(y),cm=n(y,"LI",{});var QCe=s(cm);_oe=n(QCe,"STRONG",{});var YDr=s(_oe);cze=r(YDr,"longformer"),YDr.forEach(t),fze=r(QCe," \u2014 "),Fk=n(QCe,"A",{href:!0});var KDr=s(Fk);mze=r(KDr,"LongformerConfig"),KDr.forEach(t),gze=r(QCe," (Longformer model)"),QCe.forEach(t),hze=i(y),fm=n(y,"LI",{});var HCe=s(fm);boe=n(HCe,"STRONG",{});var ZDr=s(boe);pze=r(ZDr,"luke"),ZDr.forEach(t),uze=r(HCe," \u2014 "),Tk=n(HCe,"A",{href:!0});var eGr=s(Tk);_ze=r(eGr,"LukeConfig"),eGr.forEach(t),bze=r(HCe," (LUKE model)"),HCe.forEach(t),vze=i(y),mm=n(y,"LI",{});var UCe=s(mm);voe=n(UCe,"STRONG",{});var oGr=s(voe);Fze=r(oGr,"lxmert"),oGr.forEach(t),Tze=r(UCe," \u2014 "),Mk=n(UCe,"A",{href:!0});var rGr=s(Mk);Mze=r(rGr,"LxmertConfig"),rGr.forEach(t),Eze=r(UCe," (LXMERT model)"),UCe.forEach(t),Cze=i(y),gm=n(y,"LI",{});var JCe=s(gm);Foe=n(JCe,"STRONG",{});var tGr=s(Foe);wze=r(tGr,"m2m_100"),tGr.forEach(t),Aze=r(JCe," \u2014 "),Ek=n(JCe,"A",{href:!0});var aGr=s(Ek);yze=r(aGr,"M2M100Config"),aGr.forEach(t),Lze=r(JCe," (M2M100 model)"),JCe.forEach(t),xze=i(y),hm=n(y,"LI",{});var YCe=s(hm);Toe=n(YCe,"STRONG",{});var nGr=s(Toe);$ze=r(nGr,"marian"),nGr.forEach(t),kze=r(YCe," \u2014 "),Ck=n(YCe,"A",{href:!0});var sGr=s(Ck);Sze=r(sGr,"MarianConfig"),sGr.forEach(t),Rze=r(YCe," (Marian model)"),YCe.forEach(t),Pze=i(y),pm=n(y,"LI",{});var KCe=s(pm);Moe=n(KCe,"STRONG",{});var lGr=s(Moe);Bze=r(lGr,"maskformer"),lGr.forEach(t),Ize=r(KCe," \u2014 "),wk=n(KCe,"A",{href:!0});var iGr=s(wk);qze=r(iGr,"MaskFormerConfig"),iGr.forEach(t),Nze=r(KCe," (MaskFormer model)"),KCe.forEach(t),jze=i(y),um=n(y,"LI",{});var ZCe=s(um);Eoe=n(ZCe,"STRONG",{});var dGr=s(Eoe);Dze=r(dGr,"mbart"),dGr.forEach(t),Gze=r(ZCe," \u2014 "),Ak=n(ZCe,"A",{href:!0});var cGr=s(Ak);Oze=r(cGr,"MBartConfig"),cGr.forEach(t),Vze=r(ZCe," (mBART model)"),ZCe.forEach(t),Xze=i(y),_m=n(y,"LI",{});var e3e=s(_m);Coe=n(e3e,"STRONG",{});var fGr=s(Coe);zze=r(fGr,"megatron-bert"),fGr.forEach(t),Wze=r(e3e," \u2014 "),yk=n(e3e,"A",{href:!0});var mGr=s(yk);Qze=r(mGr,"MegatronBertConfig"),mGr.forEach(t),Hze=r(e3e," (MegatronBert model)"),e3e.forEach(t),Uze=i(y),bm=n(y,"LI",{});var o3e=s(bm);woe=n(o3e,"STRONG",{});var gGr=s(woe);Jze=r(gGr,"mobilebert"),gGr.forEach(t),Yze=r(o3e," \u2014 "),Lk=n(o3e,"A",{href:!0});var hGr=s(Lk);Kze=r(hGr,"MobileBertConfig"),hGr.forEach(t),Zze=r(o3e," (MobileBERT model)"),o3e.forEach(t),eWe=i(y),vm=n(y,"LI",{});var r3e=s(vm);Aoe=n(r3e,"STRONG",{});var pGr=s(Aoe);oWe=r(pGr,"mpnet"),pGr.forEach(t),rWe=r(r3e," \u2014 "),xk=n(r3e,"A",{href:!0});var uGr=s(xk);tWe=r(uGr,"MPNetConfig"),uGr.forEach(t),aWe=r(r3e," (MPNet model)"),r3e.forEach(t),nWe=i(y),Fm=n(y,"LI",{});var t3e=s(Fm);yoe=n(t3e,"STRONG",{});var _Gr=s(yoe);sWe=r(_Gr,"mt5"),_Gr.forEach(t),lWe=r(t3e," \u2014 "),$k=n(t3e,"A",{href:!0});var bGr=s($k);iWe=r(bGr,"MT5Config"),bGr.forEach(t),dWe=r(t3e," (mT5 model)"),t3e.forEach(t),cWe=i(y),Tm=n(y,"LI",{});var a3e=s(Tm);Loe=n(a3e,"STRONG",{});var vGr=s(Loe);fWe=r(vGr,"nystromformer"),vGr.forEach(t),mWe=r(a3e," \u2014 "),kk=n(a3e,"A",{href:!0});var FGr=s(kk);gWe=r(FGr,"NystromformerConfig"),FGr.forEach(t),hWe=r(a3e," (Nystromformer model)"),a3e.forEach(t),pWe=i(y),Mm=n(y,"LI",{});var n3e=s(Mm);xoe=n(n3e,"STRONG",{});var TGr=s(xoe);uWe=r(TGr,"openai-gpt"),TGr.forEach(t),_We=r(n3e," \u2014 "),Sk=n(n3e,"A",{href:!0});var MGr=s(Sk);bWe=r(MGr,"OpenAIGPTConfig"),MGr.forEach(t),vWe=r(n3e," (OpenAI GPT model)"),n3e.forEach(t),FWe=i(y),Em=n(y,"LI",{});var s3e=s(Em);$oe=n(s3e,"STRONG",{});var EGr=s($oe);TWe=r(EGr,"opt"),EGr.forEach(t),MWe=r(s3e," \u2014 "),Rk=n(s3e,"A",{href:!0});var CGr=s(Rk);EWe=r(CGr,"OPTConfig"),CGr.forEach(t),CWe=r(s3e," (OPT model)"),s3e.forEach(t),wWe=i(y),Cm=n(y,"LI",{});var l3e=s(Cm);koe=n(l3e,"STRONG",{});var wGr=s(koe);AWe=r(wGr,"pegasus"),wGr.forEach(t),yWe=r(l3e," \u2014 "),Pk=n(l3e,"A",{href:!0});var AGr=s(Pk);LWe=r(AGr,"PegasusConfig"),AGr.forEach(t),xWe=r(l3e," (Pegasus model)"),l3e.forEach(t),$We=i(y),wm=n(y,"LI",{});var i3e=s(wm);Soe=n(i3e,"STRONG",{});var yGr=s(Soe);kWe=r(yGr,"perceiver"),yGr.forEach(t),SWe=r(i3e," \u2014 "),Bk=n(i3e,"A",{href:!0});var LGr=s(Bk);RWe=r(LGr,"PerceiverConfig"),LGr.forEach(t),PWe=r(i3e," (Perceiver model)"),i3e.forEach(t),BWe=i(y),Am=n(y,"LI",{});var d3e=s(Am);Roe=n(d3e,"STRONG",{});var xGr=s(Roe);IWe=r(xGr,"plbart"),xGr.forEach(t),qWe=r(d3e," \u2014 "),Ik=n(d3e,"A",{href:!0});var $Gr=s(Ik);NWe=r($Gr,"PLBartConfig"),$Gr.forEach(t),jWe=r(d3e," (PLBart model)"),d3e.forEach(t),DWe=i(y),ym=n(y,"LI",{});var c3e=s(ym);Poe=n(c3e,"STRONG",{});var kGr=s(Poe);GWe=r(kGr,"poolformer"),kGr.forEach(t),OWe=r(c3e," \u2014 "),qk=n(c3e,"A",{href:!0});var SGr=s(qk);VWe=r(SGr,"PoolFormerConfig"),SGr.forEach(t),XWe=r(c3e," (PoolFormer model)"),c3e.forEach(t),zWe=i(y),Lm=n(y,"LI",{});var f3e=s(Lm);Boe=n(f3e,"STRONG",{});var RGr=s(Boe);WWe=r(RGr,"prophetnet"),RGr.forEach(t),QWe=r(f3e," \u2014 "),Nk=n(f3e,"A",{href:!0});var PGr=s(Nk);HWe=r(PGr,"ProphetNetConfig"),PGr.forEach(t),UWe=r(f3e," (ProphetNet model)"),f3e.forEach(t),JWe=i(y),xm=n(y,"LI",{});var m3e=s(xm);Ioe=n(m3e,"STRONG",{});var BGr=s(Ioe);YWe=r(BGr,"qdqbert"),BGr.forEach(t),KWe=r(m3e," \u2014 "),jk=n(m3e,"A",{href:!0});var IGr=s(jk);ZWe=r(IGr,"QDQBertConfig"),IGr.forEach(t),eQe=r(m3e," (QDQBert model)"),m3e.forEach(t),oQe=i(y),$m=n(y,"LI",{});var g3e=s($m);qoe=n(g3e,"STRONG",{});var qGr=s(qoe);rQe=r(qGr,"rag"),qGr.forEach(t),tQe=r(g3e," \u2014 "),Dk=n(g3e,"A",{href:!0});var NGr=s(Dk);aQe=r(NGr,"RagConfig"),NGr.forEach(t),nQe=r(g3e," (RAG model)"),g3e.forEach(t),sQe=i(y),km=n(y,"LI",{});var h3e=s(km);Noe=n(h3e,"STRONG",{});var jGr=s(Noe);lQe=r(jGr,"realm"),jGr.forEach(t),iQe=r(h3e," \u2014 "),Gk=n(h3e,"A",{href:!0});var DGr=s(Gk);dQe=r(DGr,"RealmConfig"),DGr.forEach(t),cQe=r(h3e," (Realm model)"),h3e.forEach(t),fQe=i(y),Sm=n(y,"LI",{});var p3e=s(Sm);joe=n(p3e,"STRONG",{});var GGr=s(joe);mQe=r(GGr,"reformer"),GGr.forEach(t),gQe=r(p3e," \u2014 "),Ok=n(p3e,"A",{href:!0});var OGr=s(Ok);hQe=r(OGr,"ReformerConfig"),OGr.forEach(t),pQe=r(p3e," (Reformer model)"),p3e.forEach(t),uQe=i(y),Rm=n(y,"LI",{});var u3e=s(Rm);Doe=n(u3e,"STRONG",{});var VGr=s(Doe);_Qe=r(VGr,"regnet"),VGr.forEach(t),bQe=r(u3e," \u2014 "),Vk=n(u3e,"A",{href:!0});var XGr=s(Vk);vQe=r(XGr,"RegNetConfig"),XGr.forEach(t),FQe=r(u3e," (RegNet model)"),u3e.forEach(t),TQe=i(y),Pm=n(y,"LI",{});var _3e=s(Pm);Goe=n(_3e,"STRONG",{});var zGr=s(Goe);MQe=r(zGr,"rembert"),zGr.forEach(t),EQe=r(_3e," \u2014 "),Xk=n(_3e,"A",{href:!0});var WGr=s(Xk);CQe=r(WGr,"RemBertConfig"),WGr.forEach(t),wQe=r(_3e," (RemBERT model)"),_3e.forEach(t),AQe=i(y),Bm=n(y,"LI",{});var b3e=s(Bm);Ooe=n(b3e,"STRONG",{});var QGr=s(Ooe);yQe=r(QGr,"resnet"),QGr.forEach(t),LQe=r(b3e," \u2014 "),zk=n(b3e,"A",{href:!0});var HGr=s(zk);xQe=r(HGr,"ResNetConfig"),HGr.forEach(t),$Qe=r(b3e," (ResNet model)"),b3e.forEach(t),kQe=i(y),Im=n(y,"LI",{});var v3e=s(Im);Voe=n(v3e,"STRONG",{});var UGr=s(Voe);SQe=r(UGr,"retribert"),UGr.forEach(t),RQe=r(v3e," \u2014 "),Wk=n(v3e,"A",{href:!0});var JGr=s(Wk);PQe=r(JGr,"RetriBertConfig"),JGr.forEach(t),BQe=r(v3e," (RetriBERT model)"),v3e.forEach(t),IQe=i(y),qm=n(y,"LI",{});var F3e=s(qm);Xoe=n(F3e,"STRONG",{});var YGr=s(Xoe);qQe=r(YGr,"roberta"),YGr.forEach(t),NQe=r(F3e," \u2014 "),Qk=n(F3e,"A",{href:!0});var KGr=s(Qk);jQe=r(KGr,"RobertaConfig"),KGr.forEach(t),DQe=r(F3e," (RoBERTa model)"),F3e.forEach(t),GQe=i(y),Nm=n(y,"LI",{});var T3e=s(Nm);zoe=n(T3e,"STRONG",{});var ZGr=s(zoe);OQe=r(ZGr,"roformer"),ZGr.forEach(t),VQe=r(T3e," \u2014 "),Hk=n(T3e,"A",{href:!0});var eOr=s(Hk);XQe=r(eOr,"RoFormerConfig"),eOr.forEach(t),zQe=r(T3e," (RoFormer model)"),T3e.forEach(t),WQe=i(y),jm=n(y,"LI",{});var M3e=s(jm);Woe=n(M3e,"STRONG",{});var oOr=s(Woe);QQe=r(oOr,"segformer"),oOr.forEach(t),HQe=r(M3e," \u2014 "),Uk=n(M3e,"A",{href:!0});var rOr=s(Uk);UQe=r(rOr,"SegformerConfig"),rOr.forEach(t),JQe=r(M3e," (SegFormer model)"),M3e.forEach(t),YQe=i(y),Dm=n(y,"LI",{});var E3e=s(Dm);Qoe=n(E3e,"STRONG",{});var tOr=s(Qoe);KQe=r(tOr,"sew"),tOr.forEach(t),ZQe=r(E3e," \u2014 "),Jk=n(E3e,"A",{href:!0});var aOr=s(Jk);eHe=r(aOr,"SEWConfig"),aOr.forEach(t),oHe=r(E3e," (SEW model)"),E3e.forEach(t),rHe=i(y),Gm=n(y,"LI",{});var C3e=s(Gm);Hoe=n(C3e,"STRONG",{});var nOr=s(Hoe);tHe=r(nOr,"sew-d"),nOr.forEach(t),aHe=r(C3e," \u2014 "),Yk=n(C3e,"A",{href:!0});var sOr=s(Yk);nHe=r(sOr,"SEWDConfig"),sOr.forEach(t),sHe=r(C3e," (SEW-D model)"),C3e.forEach(t),lHe=i(y),Om=n(y,"LI",{});var w3e=s(Om);Uoe=n(w3e,"STRONG",{});var lOr=s(Uoe);iHe=r(lOr,"speech-encoder-decoder"),lOr.forEach(t),dHe=r(w3e," \u2014 "),Kk=n(w3e,"A",{href:!0});var iOr=s(Kk);cHe=r(iOr,"SpeechEncoderDecoderConfig"),iOr.forEach(t),fHe=r(w3e," (Speech Encoder decoder model)"),w3e.forEach(t),mHe=i(y),Vm=n(y,"LI",{});var A3e=s(Vm);Joe=n(A3e,"STRONG",{});var dOr=s(Joe);gHe=r(dOr,"speech_to_text"),dOr.forEach(t),hHe=r(A3e," \u2014 "),Zk=n(A3e,"A",{href:!0});var cOr=s(Zk);pHe=r(cOr,"Speech2TextConfig"),cOr.forEach(t),uHe=r(A3e," (Speech2Text model)"),A3e.forEach(t),_He=i(y),Xm=n(y,"LI",{});var y3e=s(Xm);Yoe=n(y3e,"STRONG",{});var fOr=s(Yoe);bHe=r(fOr,"speech_to_text_2"),fOr.forEach(t),vHe=r(y3e," \u2014 "),eS=n(y3e,"A",{href:!0});var mOr=s(eS);FHe=r(mOr,"Speech2Text2Config"),mOr.forEach(t),THe=r(y3e," (Speech2Text2 model)"),y3e.forEach(t),MHe=i(y),zm=n(y,"LI",{});var L3e=s(zm);Koe=n(L3e,"STRONG",{});var gOr=s(Koe);EHe=r(gOr,"splinter"),gOr.forEach(t),CHe=r(L3e," \u2014 "),oS=n(L3e,"A",{href:!0});var hOr=s(oS);wHe=r(hOr,"SplinterConfig"),hOr.forEach(t),AHe=r(L3e," (Splinter model)"),L3e.forEach(t),yHe=i(y),Wm=n(y,"LI",{});var x3e=s(Wm);Zoe=n(x3e,"STRONG",{});var pOr=s(Zoe);LHe=r(pOr,"squeezebert"),pOr.forEach(t),xHe=r(x3e," \u2014 "),rS=n(x3e,"A",{href:!0});var uOr=s(rS);$He=r(uOr,"SqueezeBertConfig"),uOr.forEach(t),kHe=r(x3e," (SqueezeBERT model)"),x3e.forEach(t),SHe=i(y),Qm=n(y,"LI",{});var $3e=s(Qm);ere=n($3e,"STRONG",{});var _Or=s(ere);RHe=r(_Or,"swin"),_Or.forEach(t),PHe=r($3e," \u2014 "),tS=n($3e,"A",{href:!0});var bOr=s(tS);BHe=r(bOr,"SwinConfig"),bOr.forEach(t),IHe=r($3e," (Swin model)"),$3e.forEach(t),qHe=i(y),Hm=n(y,"LI",{});var k3e=s(Hm);ore=n(k3e,"STRONG",{});var vOr=s(ore);NHe=r(vOr,"t5"),vOr.forEach(t),jHe=r(k3e," \u2014 "),aS=n(k3e,"A",{href:!0});var FOr=s(aS);DHe=r(FOr,"T5Config"),FOr.forEach(t),GHe=r(k3e," (T5 model)"),k3e.forEach(t),OHe=i(y),Um=n(y,"LI",{});var S3e=s(Um);rre=n(S3e,"STRONG",{});var TOr=s(rre);VHe=r(TOr,"tapas"),TOr.forEach(t),XHe=r(S3e," \u2014 "),nS=n(S3e,"A",{href:!0});var MOr=s(nS);zHe=r(MOr,"TapasConfig"),MOr.forEach(t),WHe=r(S3e," (TAPAS model)"),S3e.forEach(t),QHe=i(y),Jm=n(y,"LI",{});var R3e=s(Jm);tre=n(R3e,"STRONG",{});var EOr=s(tre);HHe=r(EOr,"transfo-xl"),EOr.forEach(t),UHe=r(R3e," \u2014 "),sS=n(R3e,"A",{href:!0});var COr=s(sS);JHe=r(COr,"TransfoXLConfig"),COr.forEach(t),YHe=r(R3e," (Transformer-XL model)"),R3e.forEach(t),KHe=i(y),Ym=n(y,"LI",{});var P3e=s(Ym);are=n(P3e,"STRONG",{});var wOr=s(are);ZHe=r(wOr,"trocr"),wOr.forEach(t),eUe=r(P3e," \u2014 "),lS=n(P3e,"A",{href:!0});var AOr=s(lS);oUe=r(AOr,"TrOCRConfig"),AOr.forEach(t),rUe=r(P3e," (TrOCR model)"),P3e.forEach(t),tUe=i(y),Km=n(y,"LI",{});var B3e=s(Km);nre=n(B3e,"STRONG",{});var yOr=s(nre);aUe=r(yOr,"unispeech"),yOr.forEach(t),nUe=r(B3e," \u2014 "),iS=n(B3e,"A",{href:!0});var LOr=s(iS);sUe=r(LOr,"UniSpeechConfig"),LOr.forEach(t),lUe=r(B3e," (UniSpeech model)"),B3e.forEach(t),iUe=i(y),Zm=n(y,"LI",{});var I3e=s(Zm);sre=n(I3e,"STRONG",{});var xOr=s(sre);dUe=r(xOr,"unispeech-sat"),xOr.forEach(t),cUe=r(I3e," \u2014 "),dS=n(I3e,"A",{href:!0});var $Or=s(dS);fUe=r($Or,"UniSpeechSatConfig"),$Or.forEach(t),mUe=r(I3e," (UniSpeechSat model)"),I3e.forEach(t),gUe=i(y),eg=n(y,"LI",{});var q3e=s(eg);lre=n(q3e,"STRONG",{});var kOr=s(lre);hUe=r(kOr,"van"),kOr.forEach(t),pUe=r(q3e," \u2014 "),cS=n(q3e,"A",{href:!0});var SOr=s(cS);uUe=r(SOr,"VanConfig"),SOr.forEach(t),_Ue=r(q3e," (VAN model)"),q3e.forEach(t),bUe=i(y),og=n(y,"LI",{});var N3e=s(og);ire=n(N3e,"STRONG",{});var ROr=s(ire);vUe=r(ROr,"vilt"),ROr.forEach(t),FUe=r(N3e," \u2014 "),fS=n(N3e,"A",{href:!0});var POr=s(fS);TUe=r(POr,"ViltConfig"),POr.forEach(t),MUe=r(N3e," (ViLT model)"),N3e.forEach(t),EUe=i(y),rg=n(y,"LI",{});var j3e=s(rg);dre=n(j3e,"STRONG",{});var BOr=s(dre);CUe=r(BOr,"vision-encoder-decoder"),BOr.forEach(t),wUe=r(j3e," \u2014 "),mS=n(j3e,"A",{href:!0});var IOr=s(mS);AUe=r(IOr,"VisionEncoderDecoderConfig"),IOr.forEach(t),yUe=r(j3e," (Vision Encoder decoder model)"),j3e.forEach(t),LUe=i(y),tg=n(y,"LI",{});var D3e=s(tg);cre=n(D3e,"STRONG",{});var qOr=s(cre);xUe=r(qOr,"vision-text-dual-encoder"),qOr.forEach(t),$Ue=r(D3e," \u2014 "),gS=n(D3e,"A",{href:!0});var NOr=s(gS);kUe=r(NOr,"VisionTextDualEncoderConfig"),NOr.forEach(t),SUe=r(D3e," (VisionTextDualEncoder model)"),D3e.forEach(t),RUe=i(y),ag=n(y,"LI",{});var G3e=s(ag);fre=n(G3e,"STRONG",{});var jOr=s(fre);PUe=r(jOr,"visual_bert"),jOr.forEach(t),BUe=r(G3e," \u2014 "),hS=n(G3e,"A",{href:!0});var DOr=s(hS);IUe=r(DOr,"VisualBertConfig"),DOr.forEach(t),qUe=r(G3e," (VisualBert model)"),G3e.forEach(t),NUe=i(y),ng=n(y,"LI",{});var O3e=s(ng);mre=n(O3e,"STRONG",{});var GOr=s(mre);jUe=r(GOr,"vit"),GOr.forEach(t),DUe=r(O3e," \u2014 "),pS=n(O3e,"A",{href:!0});var OOr=s(pS);GUe=r(OOr,"ViTConfig"),OOr.forEach(t),OUe=r(O3e," (ViT model)"),O3e.forEach(t),VUe=i(y),sg=n(y,"LI",{});var V3e=s(sg);gre=n(V3e,"STRONG",{});var VOr=s(gre);XUe=r(VOr,"vit_mae"),VOr.forEach(t),zUe=r(V3e," \u2014 "),uS=n(V3e,"A",{href:!0});var XOr=s(uS);WUe=r(XOr,"ViTMAEConfig"),XOr.forEach(t),QUe=r(V3e," (ViTMAE model)"),V3e.forEach(t),HUe=i(y),lg=n(y,"LI",{});var X3e=s(lg);hre=n(X3e,"STRONG",{});var zOr=s(hre);UUe=r(zOr,"wav2vec2"),zOr.forEach(t),JUe=r(X3e," \u2014 "),_S=n(X3e,"A",{href:!0});var WOr=s(_S);YUe=r(WOr,"Wav2Vec2Config"),WOr.forEach(t),KUe=r(X3e," (Wav2Vec2 model)"),X3e.forEach(t),ZUe=i(y),ig=n(y,"LI",{});var z3e=s(ig);pre=n(z3e,"STRONG",{});var QOr=s(pre);eJe=r(QOr,"wav2vec2-conformer"),QOr.forEach(t),oJe=r(z3e," \u2014 "),bS=n(z3e,"A",{href:!0});var HOr=s(bS);rJe=r(HOr,"Wav2Vec2ConformerConfig"),HOr.forEach(t),tJe=r(z3e," (Wav2Vec2-Conformer model)"),z3e.forEach(t),aJe=i(y),dg=n(y,"LI",{});var W3e=s(dg);ure=n(W3e,"STRONG",{});var UOr=s(ure);nJe=r(UOr,"wavlm"),UOr.forEach(t),sJe=r(W3e," \u2014 "),vS=n(W3e,"A",{href:!0});var JOr=s(vS);lJe=r(JOr,"WavLMConfig"),JOr.forEach(t),iJe=r(W3e," (WavLM model)"),W3e.forEach(t),dJe=i(y),cg=n(y,"LI",{});var Q3e=s(cg);_re=n(Q3e,"STRONG",{});var YOr=s(_re);cJe=r(YOr,"xglm"),YOr.forEach(t),fJe=r(Q3e," \u2014 "),FS=n(Q3e,"A",{href:!0});var KOr=s(FS);mJe=r(KOr,"XGLMConfig"),KOr.forEach(t),gJe=r(Q3e," (XGLM model)"),Q3e.forEach(t),hJe=i(y),fg=n(y,"LI",{});var H3e=s(fg);bre=n(H3e,"STRONG",{});var ZOr=s(bre);pJe=r(ZOr,"xlm"),ZOr.forEach(t),uJe=r(H3e," \u2014 "),TS=n(H3e,"A",{href:!0});var eVr=s(TS);_Je=r(eVr,"XLMConfig"),eVr.forEach(t),bJe=r(H3e," (XLM model)"),H3e.forEach(t),vJe=i(y),mg=n(y,"LI",{});var U3e=s(mg);vre=n(U3e,"STRONG",{});var oVr=s(vre);FJe=r(oVr,"xlm-prophetnet"),oVr.forEach(t),TJe=r(U3e," \u2014 "),MS=n(U3e,"A",{href:!0});var rVr=s(MS);MJe=r(rVr,"XLMProphetNetConfig"),rVr.forEach(t),EJe=r(U3e," (XLMProphetNet model)"),U3e.forEach(t),CJe=i(y),gg=n(y,"LI",{});var J3e=s(gg);Fre=n(J3e,"STRONG",{});var tVr=s(Fre);wJe=r(tVr,"xlm-roberta"),tVr.forEach(t),AJe=r(J3e," \u2014 "),ES=n(J3e,"A",{href:!0});var aVr=s(ES);yJe=r(aVr,"XLMRobertaConfig"),aVr.forEach(t),LJe=r(J3e," (XLM-RoBERTa model)"),J3e.forEach(t),xJe=i(y),hg=n(y,"LI",{});var Y3e=s(hg);Tre=n(Y3e,"STRONG",{});var nVr=s(Tre);$Je=r(nVr,"xlm-roberta-xl"),nVr.forEach(t),kJe=r(Y3e," \u2014 "),CS=n(Y3e,"A",{href:!0});var sVr=s(CS);SJe=r(sVr,"XLMRobertaXLConfig"),sVr.forEach(t),RJe=r(Y3e," (XLM-RoBERTa-XL model)"),Y3e.forEach(t),PJe=i(y),pg=n(y,"LI",{});var K3e=s(pg);Mre=n(K3e,"STRONG",{});var lVr=s(Mre);BJe=r(lVr,"xlnet"),lVr.forEach(t),IJe=r(K3e," \u2014 "),wS=n(K3e,"A",{href:!0});var iVr=s(wS);qJe=r(iVr,"XLNetConfig"),iVr.forEach(t),NJe=r(K3e," (XLNet model)"),K3e.forEach(t),jJe=i(y),ug=n(y,"LI",{});var Z3e=s(ug);Ere=n(Z3e,"STRONG",{});var dVr=s(Ere);DJe=r(dVr,"yolos"),dVr.forEach(t),GJe=r(Z3e," \u2014 "),AS=n(Z3e,"A",{href:!0});var cVr=s(AS);OJe=r(cVr,"YolosConfig"),cVr.forEach(t),VJe=r(Z3e," (YOLOS model)"),Z3e.forEach(t),XJe=i(y),_g=n(y,"LI",{});var ewe=s(_g);Cre=n(ewe,"STRONG",{});var fVr=s(Cre);zJe=r(fVr,"yoso"),fVr.forEach(t),WJe=r(ewe," \u2014 "),yS=n(ewe,"A",{href:!0});var mVr=s(yS);QJe=r(mVr,"YosoConfig"),mVr.forEach(t),HJe=r(ewe," (YOSO model)"),ewe.forEach(t),y.forEach(t),UJe=i(ot),T(bg.$$.fragment,ot),ot.forEach(t),JJe=i(et),vg=n(et,"DIV",{class:!0});var xNe=s(vg);T(h0.$$.fragment,xNe),YJe=i(xNe),wre=n(xNe,"P",{});var gVr=s(wre);KJe=r(gVr,"Register a new configuration for this class."),gVr.forEach(t),xNe.forEach(t),et.forEach(t),SIe=i(f),Fi=n(f,"H2",{class:!0});var $Ne=s(Fi);Fg=n($Ne,"A",{id:!0,class:!0,href:!0});var hVr=s(Fg);Are=n(hVr,"SPAN",{});var pVr=s(Are);T(p0.$$.fragment,pVr),pVr.forEach(t),hVr.forEach(t),ZJe=i($Ne),yre=n($Ne,"SPAN",{});var uVr=s(yre);eYe=r(uVr,"AutoTokenizer"),uVr.forEach(t),$Ne.forEach(t),RIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(u0.$$.fragment,Is),oYe=i(Is),_0=n(Is,"P",{});var kNe=s(_0);rYe=r(kNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LS=n(kNe,"A",{href:!0});var _Vr=s(LS);tYe=r(_Vr,"AutoTokenizer.from_pretrained()"),_Vr.forEach(t),aYe=r(kNe," class method."),kNe.forEach(t),nYe=i(Is),b0=n(Is,"P",{});var SNe=s(b0);sYe=r(SNe,"This class cannot be instantiated directly using "),Lre=n(SNe,"CODE",{});var bVr=s(Lre);lYe=r(bVr,"__init__()"),bVr.forEach(t),iYe=r(SNe," (throws an error)."),SNe.forEach(t),dYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(v0.$$.fragment,qs),cYe=i(qs),xre=n(qs,"P",{});var vVr=s(xre);fYe=r(vVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),vVr.forEach(t),mYe=i(qs),Aa=n(qs,"P",{});var dA=s(Aa);gYe=r(dA,"The tokenizer class to instantiate is selected based on the "),$re=n(dA,"CODE",{});var FVr=s($re);hYe=r(FVr,"model_type"),FVr.forEach(t),pYe=r(dA,` property of the config object (either
passed as an argument or loaded from `),kre=n(dA,"CODE",{});var TVr=s(kre);uYe=r(TVr,"pretrained_model_name_or_path"),TVr.forEach(t),_Ye=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=n(dA,"CODE",{});var MVr=s(Sre);bYe=r(MVr,"pretrained_model_name_or_path"),MVr.forEach(t),vYe=r(dA,":"),dA.forEach(t),FYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var F9=s(Sn);Rre=n(F9,"STRONG",{});var EVr=s(Rre);TYe=r(EVr,"albert"),EVr.forEach(t),MYe=r(F9," \u2014 "),xS=n(F9,"A",{href:!0});var CVr=s(xS);EYe=r(CVr,"AlbertTokenizer"),CVr.forEach(t),CYe=r(F9," or "),$S=n(F9,"A",{href:!0});var wVr=s($S);wYe=r(wVr,"AlbertTokenizerFast"),wVr.forEach(t),AYe=r(F9," (ALBERT model)"),F9.forEach(t),yYe=i(S),Rn=n(S,"LI",{});var T9=s(Rn);Pre=n(T9,"STRONG",{});var AVr=s(Pre);LYe=r(AVr,"bart"),AVr.forEach(t),xYe=r(T9," \u2014 "),kS=n(T9,"A",{href:!0});var yVr=s(kS);$Ye=r(yVr,"BartTokenizer"),yVr.forEach(t),kYe=r(T9," or "),SS=n(T9,"A",{href:!0});var LVr=s(SS);SYe=r(LVr,"BartTokenizerFast"),LVr.forEach(t),RYe=r(T9," (BART model)"),T9.forEach(t),PYe=i(S),Pn=n(S,"LI",{});var M9=s(Pn);Bre=n(M9,"STRONG",{});var xVr=s(Bre);BYe=r(xVr,"barthez"),xVr.forEach(t),IYe=r(M9," \u2014 "),RS=n(M9,"A",{href:!0});var $Vr=s(RS);qYe=r($Vr,"BarthezTokenizer"),$Vr.forEach(t),NYe=r(M9," or "),PS=n(M9,"A",{href:!0});var kVr=s(PS);jYe=r(kVr,"BarthezTokenizerFast"),kVr.forEach(t),DYe=r(M9," (BARThez model)"),M9.forEach(t),GYe=i(S),Tg=n(S,"LI",{});var owe=s(Tg);Ire=n(owe,"STRONG",{});var SVr=s(Ire);OYe=r(SVr,"bartpho"),SVr.forEach(t),VYe=r(owe," \u2014 "),BS=n(owe,"A",{href:!0});var RVr=s(BS);XYe=r(RVr,"BartphoTokenizer"),RVr.forEach(t),zYe=r(owe," (BARTpho model)"),owe.forEach(t),WYe=i(S),Bn=n(S,"LI",{});var E9=s(Bn);qre=n(E9,"STRONG",{});var PVr=s(qre);QYe=r(PVr,"bert"),PVr.forEach(t),HYe=r(E9," \u2014 "),IS=n(E9,"A",{href:!0});var BVr=s(IS);UYe=r(BVr,"BertTokenizer"),BVr.forEach(t),JYe=r(E9," or "),qS=n(E9,"A",{href:!0});var IVr=s(qS);YYe=r(IVr,"BertTokenizerFast"),IVr.forEach(t),KYe=r(E9," (BERT model)"),E9.forEach(t),ZYe=i(S),Mg=n(S,"LI",{});var rwe=s(Mg);Nre=n(rwe,"STRONG",{});var qVr=s(Nre);eKe=r(qVr,"bert-generation"),qVr.forEach(t),oKe=r(rwe," \u2014 "),NS=n(rwe,"A",{href:!0});var NVr=s(NS);rKe=r(NVr,"BertGenerationTokenizer"),NVr.forEach(t),tKe=r(rwe," (Bert Generation model)"),rwe.forEach(t),aKe=i(S),Eg=n(S,"LI",{});var twe=s(Eg);jre=n(twe,"STRONG",{});var jVr=s(jre);nKe=r(jVr,"bert-japanese"),jVr.forEach(t),sKe=r(twe," \u2014 "),jS=n(twe,"A",{href:!0});var DVr=s(jS);lKe=r(DVr,"BertJapaneseTokenizer"),DVr.forEach(t),iKe=r(twe," (BertJapanese model)"),twe.forEach(t),dKe=i(S),Cg=n(S,"LI",{});var awe=s(Cg);Dre=n(awe,"STRONG",{});var GVr=s(Dre);cKe=r(GVr,"bertweet"),GVr.forEach(t),fKe=r(awe," \u2014 "),DS=n(awe,"A",{href:!0});var OVr=s(DS);mKe=r(OVr,"BertweetTokenizer"),OVr.forEach(t),gKe=r(awe," (Bertweet model)"),awe.forEach(t),hKe=i(S),In=n(S,"LI",{});var C9=s(In);Gre=n(C9,"STRONG",{});var VVr=s(Gre);pKe=r(VVr,"big_bird"),VVr.forEach(t),uKe=r(C9," \u2014 "),GS=n(C9,"A",{href:!0});var XVr=s(GS);_Ke=r(XVr,"BigBirdTokenizer"),XVr.forEach(t),bKe=r(C9," or "),OS=n(C9,"A",{href:!0});var zVr=s(OS);vKe=r(zVr,"BigBirdTokenizerFast"),zVr.forEach(t),FKe=r(C9," (BigBird model)"),C9.forEach(t),TKe=i(S),qn=n(S,"LI",{});var w9=s(qn);Ore=n(w9,"STRONG",{});var WVr=s(Ore);MKe=r(WVr,"bigbird_pegasus"),WVr.forEach(t),EKe=r(w9," \u2014 "),VS=n(w9,"A",{href:!0});var QVr=s(VS);CKe=r(QVr,"PegasusTokenizer"),QVr.forEach(t),wKe=r(w9," or "),XS=n(w9,"A",{href:!0});var HVr=s(XS);AKe=r(HVr,"PegasusTokenizerFast"),HVr.forEach(t),yKe=r(w9," (BigBirdPegasus model)"),w9.forEach(t),LKe=i(S),Nn=n(S,"LI",{});var A9=s(Nn);Vre=n(A9,"STRONG",{});var UVr=s(Vre);xKe=r(UVr,"blenderbot"),UVr.forEach(t),$Ke=r(A9," \u2014 "),zS=n(A9,"A",{href:!0});var JVr=s(zS);kKe=r(JVr,"BlenderbotTokenizer"),JVr.forEach(t),SKe=r(A9," or "),WS=n(A9,"A",{href:!0});var YVr=s(WS);RKe=r(YVr,"BlenderbotTokenizerFast"),YVr.forEach(t),PKe=r(A9," (Blenderbot model)"),A9.forEach(t),BKe=i(S),wg=n(S,"LI",{});var nwe=s(wg);Xre=n(nwe,"STRONG",{});var KVr=s(Xre);IKe=r(KVr,"blenderbot-small"),KVr.forEach(t),qKe=r(nwe," \u2014 "),QS=n(nwe,"A",{href:!0});var ZVr=s(QS);NKe=r(ZVr,"BlenderbotSmallTokenizer"),ZVr.forEach(t),jKe=r(nwe," (BlenderbotSmall model)"),nwe.forEach(t),DKe=i(S),Ag=n(S,"LI",{});var swe=s(Ag);zre=n(swe,"STRONG",{});var eXr=s(zre);GKe=r(eXr,"byt5"),eXr.forEach(t),OKe=r(swe," \u2014 "),HS=n(swe,"A",{href:!0});var oXr=s(HS);VKe=r(oXr,"ByT5Tokenizer"),oXr.forEach(t),XKe=r(swe," (ByT5 model)"),swe.forEach(t),zKe=i(S),jn=n(S,"LI",{});var y9=s(jn);Wre=n(y9,"STRONG",{});var rXr=s(Wre);WKe=r(rXr,"camembert"),rXr.forEach(t),QKe=r(y9," \u2014 "),US=n(y9,"A",{href:!0});var tXr=s(US);HKe=r(tXr,"CamembertTokenizer"),tXr.forEach(t),UKe=r(y9," or "),JS=n(y9,"A",{href:!0});var aXr=s(JS);JKe=r(aXr,"CamembertTokenizerFast"),aXr.forEach(t),YKe=r(y9," (CamemBERT model)"),y9.forEach(t),KKe=i(S),yg=n(S,"LI",{});var lwe=s(yg);Qre=n(lwe,"STRONG",{});var nXr=s(Qre);ZKe=r(nXr,"canine"),nXr.forEach(t),eZe=r(lwe," \u2014 "),YS=n(lwe,"A",{href:!0});var sXr=s(YS);oZe=r(sXr,"CanineTokenizer"),sXr.forEach(t),rZe=r(lwe," (Canine model)"),lwe.forEach(t),tZe=i(S),Dn=n(S,"LI",{});var L9=s(Dn);Hre=n(L9,"STRONG",{});var lXr=s(Hre);aZe=r(lXr,"clip"),lXr.forEach(t),nZe=r(L9," \u2014 "),KS=n(L9,"A",{href:!0});var iXr=s(KS);sZe=r(iXr,"CLIPTokenizer"),iXr.forEach(t),lZe=r(L9," or "),ZS=n(L9,"A",{href:!0});var dXr=s(ZS);iZe=r(dXr,"CLIPTokenizerFast"),dXr.forEach(t),dZe=r(L9," (CLIP model)"),L9.forEach(t),cZe=i(S),Gn=n(S,"LI",{});var x9=s(Gn);Ure=n(x9,"STRONG",{});var cXr=s(Ure);fZe=r(cXr,"convbert"),cXr.forEach(t),mZe=r(x9," \u2014 "),eR=n(x9,"A",{href:!0});var fXr=s(eR);gZe=r(fXr,"ConvBertTokenizer"),fXr.forEach(t),hZe=r(x9," or "),oR=n(x9,"A",{href:!0});var mXr=s(oR);pZe=r(mXr,"ConvBertTokenizerFast"),mXr.forEach(t),uZe=r(x9," (ConvBERT model)"),x9.forEach(t),_Ze=i(S),On=n(S,"LI",{});var $9=s(On);Jre=n($9,"STRONG",{});var gXr=s(Jre);bZe=r(gXr,"cpm"),gXr.forEach(t),vZe=r($9," \u2014 "),rR=n($9,"A",{href:!0});var hXr=s(rR);FZe=r(hXr,"CpmTokenizer"),hXr.forEach(t),TZe=r($9," or "),tR=n($9,"A",{href:!0});var pXr=s(tR);MZe=r(pXr,"CpmTokenizerFast"),pXr.forEach(t),EZe=r($9," (CPM model)"),$9.forEach(t),CZe=i(S),Lg=n(S,"LI",{});var iwe=s(Lg);Yre=n(iwe,"STRONG",{});var uXr=s(Yre);wZe=r(uXr,"ctrl"),uXr.forEach(t),AZe=r(iwe," \u2014 "),aR=n(iwe,"A",{href:!0});var _Xr=s(aR);yZe=r(_Xr,"CTRLTokenizer"),_Xr.forEach(t),LZe=r(iwe," (CTRL model)"),iwe.forEach(t),xZe=i(S),Vn=n(S,"LI",{});var k9=s(Vn);Kre=n(k9,"STRONG",{});var bXr=s(Kre);$Ze=r(bXr,"data2vec-text"),bXr.forEach(t),kZe=r(k9," \u2014 "),nR=n(k9,"A",{href:!0});var vXr=s(nR);SZe=r(vXr,"RobertaTokenizer"),vXr.forEach(t),RZe=r(k9," or "),sR=n(k9,"A",{href:!0});var FXr=s(sR);PZe=r(FXr,"RobertaTokenizerFast"),FXr.forEach(t),BZe=r(k9," (Data2VecText model)"),k9.forEach(t),IZe=i(S),Xn=n(S,"LI",{});var S9=s(Xn);Zre=n(S9,"STRONG",{});var TXr=s(Zre);qZe=r(TXr,"deberta"),TXr.forEach(t),NZe=r(S9," \u2014 "),lR=n(S9,"A",{href:!0});var MXr=s(lR);jZe=r(MXr,"DebertaTokenizer"),MXr.forEach(t),DZe=r(S9," or "),iR=n(S9,"A",{href:!0});var EXr=s(iR);GZe=r(EXr,"DebertaTokenizerFast"),EXr.forEach(t),OZe=r(S9," (DeBERTa model)"),S9.forEach(t),VZe=i(S),zn=n(S,"LI",{});var R9=s(zn);ete=n(R9,"STRONG",{});var CXr=s(ete);XZe=r(CXr,"deberta-v2"),CXr.forEach(t),zZe=r(R9," \u2014 "),dR=n(R9,"A",{href:!0});var wXr=s(dR);WZe=r(wXr,"DebertaV2Tokenizer"),wXr.forEach(t),QZe=r(R9," or "),cR=n(R9,"A",{href:!0});var AXr=s(cR);HZe=r(AXr,"DebertaV2TokenizerFast"),AXr.forEach(t),UZe=r(R9," (DeBERTa-v2 model)"),R9.forEach(t),JZe=i(S),Wn=n(S,"LI",{});var P9=s(Wn);ote=n(P9,"STRONG",{});var yXr=s(ote);YZe=r(yXr,"distilbert"),yXr.forEach(t),KZe=r(P9," \u2014 "),fR=n(P9,"A",{href:!0});var LXr=s(fR);ZZe=r(LXr,"DistilBertTokenizer"),LXr.forEach(t),eeo=r(P9," or "),mR=n(P9,"A",{href:!0});var xXr=s(mR);oeo=r(xXr,"DistilBertTokenizerFast"),xXr.forEach(t),reo=r(P9," (DistilBERT model)"),P9.forEach(t),teo=i(S),Qn=n(S,"LI",{});var B9=s(Qn);rte=n(B9,"STRONG",{});var $Xr=s(rte);aeo=r($Xr,"dpr"),$Xr.forEach(t),neo=r(B9," \u2014 "),gR=n(B9,"A",{href:!0});var kXr=s(gR);seo=r(kXr,"DPRQuestionEncoderTokenizer"),kXr.forEach(t),leo=r(B9," or "),hR=n(B9,"A",{href:!0});var SXr=s(hR);ieo=r(SXr,"DPRQuestionEncoderTokenizerFast"),SXr.forEach(t),deo=r(B9," (DPR model)"),B9.forEach(t),ceo=i(S),Hn=n(S,"LI",{});var I9=s(Hn);tte=n(I9,"STRONG",{});var RXr=s(tte);feo=r(RXr,"electra"),RXr.forEach(t),meo=r(I9," \u2014 "),pR=n(I9,"A",{href:!0});var PXr=s(pR);geo=r(PXr,"ElectraTokenizer"),PXr.forEach(t),heo=r(I9," or "),uR=n(I9,"A",{href:!0});var BXr=s(uR);peo=r(BXr,"ElectraTokenizerFast"),BXr.forEach(t),ueo=r(I9," (ELECTRA model)"),I9.forEach(t),_eo=i(S),xg=n(S,"LI",{});var dwe=s(xg);ate=n(dwe,"STRONG",{});var IXr=s(ate);beo=r(IXr,"flaubert"),IXr.forEach(t),veo=r(dwe," \u2014 "),_R=n(dwe,"A",{href:!0});var qXr=s(_R);Feo=r(qXr,"FlaubertTokenizer"),qXr.forEach(t),Teo=r(dwe," (FlauBERT model)"),dwe.forEach(t),Meo=i(S),Un=n(S,"LI",{});var q9=s(Un);nte=n(q9,"STRONG",{});var NXr=s(nte);Eeo=r(NXr,"fnet"),NXr.forEach(t),Ceo=r(q9," \u2014 "),bR=n(q9,"A",{href:!0});var jXr=s(bR);weo=r(jXr,"FNetTokenizer"),jXr.forEach(t),Aeo=r(q9," or "),vR=n(q9,"A",{href:!0});var DXr=s(vR);yeo=r(DXr,"FNetTokenizerFast"),DXr.forEach(t),Leo=r(q9," (FNet model)"),q9.forEach(t),xeo=i(S),$g=n(S,"LI",{});var cwe=s($g);ste=n(cwe,"STRONG",{});var GXr=s(ste);$eo=r(GXr,"fsmt"),GXr.forEach(t),keo=r(cwe," \u2014 "),FR=n(cwe,"A",{href:!0});var OXr=s(FR);Seo=r(OXr,"FSMTTokenizer"),OXr.forEach(t),Reo=r(cwe," (FairSeq Machine-Translation model)"),cwe.forEach(t),Peo=i(S),Jn=n(S,"LI",{});var N9=s(Jn);lte=n(N9,"STRONG",{});var VXr=s(lte);Beo=r(VXr,"funnel"),VXr.forEach(t),Ieo=r(N9," \u2014 "),TR=n(N9,"A",{href:!0});var XXr=s(TR);qeo=r(XXr,"FunnelTokenizer"),XXr.forEach(t),Neo=r(N9," or "),MR=n(N9,"A",{href:!0});var zXr=s(MR);jeo=r(zXr,"FunnelTokenizerFast"),zXr.forEach(t),Deo=r(N9," (Funnel Transformer model)"),N9.forEach(t),Geo=i(S),Yn=n(S,"LI",{});var j9=s(Yn);ite=n(j9,"STRONG",{});var WXr=s(ite);Oeo=r(WXr,"gpt2"),WXr.forEach(t),Veo=r(j9," \u2014 "),ER=n(j9,"A",{href:!0});var QXr=s(ER);Xeo=r(QXr,"GPT2Tokenizer"),QXr.forEach(t),zeo=r(j9," or "),CR=n(j9,"A",{href:!0});var HXr=s(CR);Weo=r(HXr,"GPT2TokenizerFast"),HXr.forEach(t),Qeo=r(j9," (OpenAI GPT-2 model)"),j9.forEach(t),Heo=i(S),Kn=n(S,"LI",{});var D9=s(Kn);dte=n(D9,"STRONG",{});var UXr=s(dte);Ueo=r(UXr,"gpt_neo"),UXr.forEach(t),Jeo=r(D9," \u2014 "),wR=n(D9,"A",{href:!0});var JXr=s(wR);Yeo=r(JXr,"GPT2Tokenizer"),JXr.forEach(t),Keo=r(D9," or "),AR=n(D9,"A",{href:!0});var YXr=s(AR);Zeo=r(YXr,"GPT2TokenizerFast"),YXr.forEach(t),eoo=r(D9," (GPT Neo model)"),D9.forEach(t),ooo=i(S),Zn=n(S,"LI",{});var G9=s(Zn);cte=n(G9,"STRONG",{});var KXr=s(cte);roo=r(KXr,"gptj"),KXr.forEach(t),too=r(G9," \u2014 "),yR=n(G9,"A",{href:!0});var ZXr=s(yR);aoo=r(ZXr,"GPT2Tokenizer"),ZXr.forEach(t),noo=r(G9," or "),LR=n(G9,"A",{href:!0});var ezr=s(LR);soo=r(ezr,"GPT2TokenizerFast"),ezr.forEach(t),loo=r(G9," (GPT-J model)"),G9.forEach(t),ioo=i(S),es=n(S,"LI",{});var O9=s(es);fte=n(O9,"STRONG",{});var ozr=s(fte);doo=r(ozr,"herbert"),ozr.forEach(t),coo=r(O9," \u2014 "),xR=n(O9,"A",{href:!0});var rzr=s(xR);foo=r(rzr,"HerbertTokenizer"),rzr.forEach(t),moo=r(O9," or "),$R=n(O9,"A",{href:!0});var tzr=s($R);goo=r(tzr,"HerbertTokenizerFast"),tzr.forEach(t),hoo=r(O9," (HerBERT model)"),O9.forEach(t),poo=i(S),kg=n(S,"LI",{});var fwe=s(kg);mte=n(fwe,"STRONG",{});var azr=s(mte);uoo=r(azr,"hubert"),azr.forEach(t),_oo=r(fwe," \u2014 "),kR=n(fwe,"A",{href:!0});var nzr=s(kR);boo=r(nzr,"Wav2Vec2CTCTokenizer"),nzr.forEach(t),voo=r(fwe," (Hubert model)"),fwe.forEach(t),Foo=i(S),os=n(S,"LI",{});var V9=s(os);gte=n(V9,"STRONG",{});var szr=s(gte);Too=r(szr,"ibert"),szr.forEach(t),Moo=r(V9," \u2014 "),SR=n(V9,"A",{href:!0});var lzr=s(SR);Eoo=r(lzr,"RobertaTokenizer"),lzr.forEach(t),Coo=r(V9," or "),RR=n(V9,"A",{href:!0});var izr=s(RR);woo=r(izr,"RobertaTokenizerFast"),izr.forEach(t),Aoo=r(V9," (I-BERT model)"),V9.forEach(t),yoo=i(S),rs=n(S,"LI",{});var X9=s(rs);hte=n(X9,"STRONG",{});var dzr=s(hte);Loo=r(dzr,"layoutlm"),dzr.forEach(t),xoo=r(X9," \u2014 "),PR=n(X9,"A",{href:!0});var czr=s(PR);$oo=r(czr,"LayoutLMTokenizer"),czr.forEach(t),koo=r(X9," or "),BR=n(X9,"A",{href:!0});var fzr=s(BR);Soo=r(fzr,"LayoutLMTokenizerFast"),fzr.forEach(t),Roo=r(X9," (LayoutLM model)"),X9.forEach(t),Poo=i(S),ts=n(S,"LI",{});var z9=s(ts);pte=n(z9,"STRONG",{});var mzr=s(pte);Boo=r(mzr,"layoutlmv2"),mzr.forEach(t),Ioo=r(z9," \u2014 "),IR=n(z9,"A",{href:!0});var gzr=s(IR);qoo=r(gzr,"LayoutLMv2Tokenizer"),gzr.forEach(t),Noo=r(z9," or "),qR=n(z9,"A",{href:!0});var hzr=s(qR);joo=r(hzr,"LayoutLMv2TokenizerFast"),hzr.forEach(t),Doo=r(z9," (LayoutLMv2 model)"),z9.forEach(t),Goo=i(S),as=n(S,"LI",{});var W9=s(as);ute=n(W9,"STRONG",{});var pzr=s(ute);Ooo=r(pzr,"layoutxlm"),pzr.forEach(t),Voo=r(W9," \u2014 "),NR=n(W9,"A",{href:!0});var uzr=s(NR);Xoo=r(uzr,"LayoutXLMTokenizer"),uzr.forEach(t),zoo=r(W9," or "),jR=n(W9,"A",{href:!0});var _zr=s(jR);Woo=r(_zr,"LayoutXLMTokenizerFast"),_zr.forEach(t),Qoo=r(W9," (LayoutXLM model)"),W9.forEach(t),Hoo=i(S),ns=n(S,"LI",{});var Q9=s(ns);_te=n(Q9,"STRONG",{});var bzr=s(_te);Uoo=r(bzr,"led"),bzr.forEach(t),Joo=r(Q9," \u2014 "),DR=n(Q9,"A",{href:!0});var vzr=s(DR);Yoo=r(vzr,"LEDTokenizer"),vzr.forEach(t),Koo=r(Q9," or "),GR=n(Q9,"A",{href:!0});var Fzr=s(GR);Zoo=r(Fzr,"LEDTokenizerFast"),Fzr.forEach(t),ero=r(Q9," (LED model)"),Q9.forEach(t),oro=i(S),ss=n(S,"LI",{});var H9=s(ss);bte=n(H9,"STRONG",{});var Tzr=s(bte);rro=r(Tzr,"longformer"),Tzr.forEach(t),tro=r(H9," \u2014 "),OR=n(H9,"A",{href:!0});var Mzr=s(OR);aro=r(Mzr,"LongformerTokenizer"),Mzr.forEach(t),nro=r(H9," or "),VR=n(H9,"A",{href:!0});var Ezr=s(VR);sro=r(Ezr,"LongformerTokenizerFast"),Ezr.forEach(t),lro=r(H9," (Longformer model)"),H9.forEach(t),iro=i(S),Sg=n(S,"LI",{});var mwe=s(Sg);vte=n(mwe,"STRONG",{});var Czr=s(vte);dro=r(Czr,"luke"),Czr.forEach(t),cro=r(mwe," \u2014 "),XR=n(mwe,"A",{href:!0});var wzr=s(XR);fro=r(wzr,"LukeTokenizer"),wzr.forEach(t),mro=r(mwe," (LUKE model)"),mwe.forEach(t),gro=i(S),ls=n(S,"LI",{});var U9=s(ls);Fte=n(U9,"STRONG",{});var Azr=s(Fte);hro=r(Azr,"lxmert"),Azr.forEach(t),pro=r(U9," \u2014 "),zR=n(U9,"A",{href:!0});var yzr=s(zR);uro=r(yzr,"LxmertTokenizer"),yzr.forEach(t),_ro=r(U9," or "),WR=n(U9,"A",{href:!0});var Lzr=s(WR);bro=r(Lzr,"LxmertTokenizerFast"),Lzr.forEach(t),vro=r(U9," (LXMERT model)"),U9.forEach(t),Fro=i(S),Rg=n(S,"LI",{});var gwe=s(Rg);Tte=n(gwe,"STRONG",{});var xzr=s(Tte);Tro=r(xzr,"m2m_100"),xzr.forEach(t),Mro=r(gwe," \u2014 "),QR=n(gwe,"A",{href:!0});var $zr=s(QR);Ero=r($zr,"M2M100Tokenizer"),$zr.forEach(t),Cro=r(gwe," (M2M100 model)"),gwe.forEach(t),wro=i(S),Pg=n(S,"LI",{});var hwe=s(Pg);Mte=n(hwe,"STRONG",{});var kzr=s(Mte);Aro=r(kzr,"marian"),kzr.forEach(t),yro=r(hwe," \u2014 "),HR=n(hwe,"A",{href:!0});var Szr=s(HR);Lro=r(Szr,"MarianTokenizer"),Szr.forEach(t),xro=r(hwe," (Marian model)"),hwe.forEach(t),$ro=i(S),is=n(S,"LI",{});var J9=s(is);Ete=n(J9,"STRONG",{});var Rzr=s(Ete);kro=r(Rzr,"mbart"),Rzr.forEach(t),Sro=r(J9," \u2014 "),UR=n(J9,"A",{href:!0});var Pzr=s(UR);Rro=r(Pzr,"MBartTokenizer"),Pzr.forEach(t),Pro=r(J9," or "),JR=n(J9,"A",{href:!0});var Bzr=s(JR);Bro=r(Bzr,"MBartTokenizerFast"),Bzr.forEach(t),Iro=r(J9," (mBART model)"),J9.forEach(t),qro=i(S),ds=n(S,"LI",{});var Y9=s(ds);Cte=n(Y9,"STRONG",{});var Izr=s(Cte);Nro=r(Izr,"mbart50"),Izr.forEach(t),jro=r(Y9," \u2014 "),YR=n(Y9,"A",{href:!0});var qzr=s(YR);Dro=r(qzr,"MBart50Tokenizer"),qzr.forEach(t),Gro=r(Y9," or "),KR=n(Y9,"A",{href:!0});var Nzr=s(KR);Oro=r(Nzr,"MBart50TokenizerFast"),Nzr.forEach(t),Vro=r(Y9," (mBART-50 model)"),Y9.forEach(t),Xro=i(S),cs=n(S,"LI",{});var K9=s(cs);wte=n(K9,"STRONG",{});var jzr=s(wte);zro=r(jzr,"megatron-bert"),jzr.forEach(t),Wro=r(K9," \u2014 "),ZR=n(K9,"A",{href:!0});var Dzr=s(ZR);Qro=r(Dzr,"BertTokenizer"),Dzr.forEach(t),Hro=r(K9," or "),eP=n(K9,"A",{href:!0});var Gzr=s(eP);Uro=r(Gzr,"BertTokenizerFast"),Gzr.forEach(t),Jro=r(K9," (MegatronBert model)"),K9.forEach(t),Yro=i(S),Bg=n(S,"LI",{});var pwe=s(Bg);Ate=n(pwe,"STRONG",{});var Ozr=s(Ate);Kro=r(Ozr,"mluke"),Ozr.forEach(t),Zro=r(pwe," \u2014 "),oP=n(pwe,"A",{href:!0});var Vzr=s(oP);eto=r(Vzr,"MLukeTokenizer"),Vzr.forEach(t),oto=r(pwe," (mLUKE model)"),pwe.forEach(t),rto=i(S),fs=n(S,"LI",{});var Z9=s(fs);yte=n(Z9,"STRONG",{});var Xzr=s(yte);tto=r(Xzr,"mobilebert"),Xzr.forEach(t),ato=r(Z9," \u2014 "),rP=n(Z9,"A",{href:!0});var zzr=s(rP);nto=r(zzr,"MobileBertTokenizer"),zzr.forEach(t),sto=r(Z9," or "),tP=n(Z9,"A",{href:!0});var Wzr=s(tP);lto=r(Wzr,"MobileBertTokenizerFast"),Wzr.forEach(t),ito=r(Z9," (MobileBERT model)"),Z9.forEach(t),dto=i(S),ms=n(S,"LI",{});var e$=s(ms);Lte=n(e$,"STRONG",{});var Qzr=s(Lte);cto=r(Qzr,"mpnet"),Qzr.forEach(t),fto=r(e$," \u2014 "),aP=n(e$,"A",{href:!0});var Hzr=s(aP);mto=r(Hzr,"MPNetTokenizer"),Hzr.forEach(t),gto=r(e$," or "),nP=n(e$,"A",{href:!0});var Uzr=s(nP);hto=r(Uzr,"MPNetTokenizerFast"),Uzr.forEach(t),pto=r(e$," (MPNet model)"),e$.forEach(t),uto=i(S),gs=n(S,"LI",{});var o$=s(gs);xte=n(o$,"STRONG",{});var Jzr=s(xte);_to=r(Jzr,"mt5"),Jzr.forEach(t),bto=r(o$," \u2014 "),sP=n(o$,"A",{href:!0});var Yzr=s(sP);vto=r(Yzr,"MT5Tokenizer"),Yzr.forEach(t),Fto=r(o$," or "),lP=n(o$,"A",{href:!0});var Kzr=s(lP);Tto=r(Kzr,"MT5TokenizerFast"),Kzr.forEach(t),Mto=r(o$," (mT5 model)"),o$.forEach(t),Eto=i(S),hs=n(S,"LI",{});var r$=s(hs);$te=n(r$,"STRONG",{});var Zzr=s($te);Cto=r(Zzr,"nystromformer"),Zzr.forEach(t),wto=r(r$," \u2014 "),iP=n(r$,"A",{href:!0});var eWr=s(iP);Ato=r(eWr,"AlbertTokenizer"),eWr.forEach(t),yto=r(r$," or "),dP=n(r$,"A",{href:!0});var oWr=s(dP);Lto=r(oWr,"AlbertTokenizerFast"),oWr.forEach(t),xto=r(r$," (Nystromformer model)"),r$.forEach(t),$to=i(S),ps=n(S,"LI",{});var t$=s(ps);kte=n(t$,"STRONG",{});var rWr=s(kte);kto=r(rWr,"openai-gpt"),rWr.forEach(t),Sto=r(t$," \u2014 "),cP=n(t$,"A",{href:!0});var tWr=s(cP);Rto=r(tWr,"OpenAIGPTTokenizer"),tWr.forEach(t),Pto=r(t$," or "),fP=n(t$,"A",{href:!0});var aWr=s(fP);Bto=r(aWr,"OpenAIGPTTokenizerFast"),aWr.forEach(t),Ito=r(t$," (OpenAI GPT model)"),t$.forEach(t),qto=i(S),Ig=n(S,"LI",{});var uwe=s(Ig);Ste=n(uwe,"STRONG",{});var nWr=s(Ste);Nto=r(nWr,"opt"),nWr.forEach(t),jto=r(uwe," \u2014 "),mP=n(uwe,"A",{href:!0});var sWr=s(mP);Dto=r(sWr,"GPT2Tokenizer"),sWr.forEach(t),Gto=r(uwe," (OPT model)"),uwe.forEach(t),Oto=i(S),us=n(S,"LI",{});var a$=s(us);Rte=n(a$,"STRONG",{});var lWr=s(Rte);Vto=r(lWr,"pegasus"),lWr.forEach(t),Xto=r(a$," \u2014 "),gP=n(a$,"A",{href:!0});var iWr=s(gP);zto=r(iWr,"PegasusTokenizer"),iWr.forEach(t),Wto=r(a$," or "),hP=n(a$,"A",{href:!0});var dWr=s(hP);Qto=r(dWr,"PegasusTokenizerFast"),dWr.forEach(t),Hto=r(a$," (Pegasus model)"),a$.forEach(t),Uto=i(S),qg=n(S,"LI",{});var _we=s(qg);Pte=n(_we,"STRONG",{});var cWr=s(Pte);Jto=r(cWr,"perceiver"),cWr.forEach(t),Yto=r(_we," \u2014 "),pP=n(_we,"A",{href:!0});var fWr=s(pP);Kto=r(fWr,"PerceiverTokenizer"),fWr.forEach(t),Zto=r(_we," (Perceiver model)"),_we.forEach(t),eao=i(S),Ng=n(S,"LI",{});var bwe=s(Ng);Bte=n(bwe,"STRONG",{});var mWr=s(Bte);oao=r(mWr,"phobert"),mWr.forEach(t),rao=r(bwe," \u2014 "),uP=n(bwe,"A",{href:!0});var gWr=s(uP);tao=r(gWr,"PhobertTokenizer"),gWr.forEach(t),aao=r(bwe," (PhoBERT model)"),bwe.forEach(t),nao=i(S),jg=n(S,"LI",{});var vwe=s(jg);Ite=n(vwe,"STRONG",{});var hWr=s(Ite);sao=r(hWr,"plbart"),hWr.forEach(t),lao=r(vwe," \u2014 "),_P=n(vwe,"A",{href:!0});var pWr=s(_P);iao=r(pWr,"PLBartTokenizer"),pWr.forEach(t),dao=r(vwe," (PLBart model)"),vwe.forEach(t),cao=i(S),Dg=n(S,"LI",{});var Fwe=s(Dg);qte=n(Fwe,"STRONG",{});var uWr=s(qte);fao=r(uWr,"prophetnet"),uWr.forEach(t),mao=r(Fwe," \u2014 "),bP=n(Fwe,"A",{href:!0});var _Wr=s(bP);gao=r(_Wr,"ProphetNetTokenizer"),_Wr.forEach(t),hao=r(Fwe," (ProphetNet model)"),Fwe.forEach(t),pao=i(S),_s=n(S,"LI",{});var n$=s(_s);Nte=n(n$,"STRONG",{});var bWr=s(Nte);uao=r(bWr,"qdqbert"),bWr.forEach(t),_ao=r(n$," \u2014 "),vP=n(n$,"A",{href:!0});var vWr=s(vP);bao=r(vWr,"BertTokenizer"),vWr.forEach(t),vao=r(n$," or "),FP=n(n$,"A",{href:!0});var FWr=s(FP);Fao=r(FWr,"BertTokenizerFast"),FWr.forEach(t),Tao=r(n$," (QDQBert model)"),n$.forEach(t),Mao=i(S),Gg=n(S,"LI",{});var Twe=s(Gg);jte=n(Twe,"STRONG",{});var TWr=s(jte);Eao=r(TWr,"rag"),TWr.forEach(t),Cao=r(Twe," \u2014 "),TP=n(Twe,"A",{href:!0});var MWr=s(TP);wao=r(MWr,"RagTokenizer"),MWr.forEach(t),Aao=r(Twe," (RAG model)"),Twe.forEach(t),yao=i(S),bs=n(S,"LI",{});var s$=s(bs);Dte=n(s$,"STRONG",{});var EWr=s(Dte);Lao=r(EWr,"realm"),EWr.forEach(t),xao=r(s$," \u2014 "),MP=n(s$,"A",{href:!0});var CWr=s(MP);$ao=r(CWr,"RealmTokenizer"),CWr.forEach(t),kao=r(s$," or "),EP=n(s$,"A",{href:!0});var wWr=s(EP);Sao=r(wWr,"RealmTokenizerFast"),wWr.forEach(t),Rao=r(s$," (Realm model)"),s$.forEach(t),Pao=i(S),vs=n(S,"LI",{});var l$=s(vs);Gte=n(l$,"STRONG",{});var AWr=s(Gte);Bao=r(AWr,"reformer"),AWr.forEach(t),Iao=r(l$," \u2014 "),CP=n(l$,"A",{href:!0});var yWr=s(CP);qao=r(yWr,"ReformerTokenizer"),yWr.forEach(t),Nao=r(l$," or "),wP=n(l$,"A",{href:!0});var LWr=s(wP);jao=r(LWr,"ReformerTokenizerFast"),LWr.forEach(t),Dao=r(l$," (Reformer model)"),l$.forEach(t),Gao=i(S),Fs=n(S,"LI",{});var i$=s(Fs);Ote=n(i$,"STRONG",{});var xWr=s(Ote);Oao=r(xWr,"rembert"),xWr.forEach(t),Vao=r(i$," \u2014 "),AP=n(i$,"A",{href:!0});var $Wr=s(AP);Xao=r($Wr,"RemBertTokenizer"),$Wr.forEach(t),zao=r(i$," or "),yP=n(i$,"A",{href:!0});var kWr=s(yP);Wao=r(kWr,"RemBertTokenizerFast"),kWr.forEach(t),Qao=r(i$," (RemBERT model)"),i$.forEach(t),Hao=i(S),Ts=n(S,"LI",{});var d$=s(Ts);Vte=n(d$,"STRONG",{});var SWr=s(Vte);Uao=r(SWr,"retribert"),SWr.forEach(t),Jao=r(d$," \u2014 "),LP=n(d$,"A",{href:!0});var RWr=s(LP);Yao=r(RWr,"RetriBertTokenizer"),RWr.forEach(t),Kao=r(d$," or "),xP=n(d$,"A",{href:!0});var PWr=s(xP);Zao=r(PWr,"RetriBertTokenizerFast"),PWr.forEach(t),eno=r(d$," (RetriBERT model)"),d$.forEach(t),ono=i(S),Ms=n(S,"LI",{});var c$=s(Ms);Xte=n(c$,"STRONG",{});var BWr=s(Xte);rno=r(BWr,"roberta"),BWr.forEach(t),tno=r(c$," \u2014 "),$P=n(c$,"A",{href:!0});var IWr=s($P);ano=r(IWr,"RobertaTokenizer"),IWr.forEach(t),nno=r(c$," or "),kP=n(c$,"A",{href:!0});var qWr=s(kP);sno=r(qWr,"RobertaTokenizerFast"),qWr.forEach(t),lno=r(c$," (RoBERTa model)"),c$.forEach(t),ino=i(S),Es=n(S,"LI",{});var f$=s(Es);zte=n(f$,"STRONG",{});var NWr=s(zte);dno=r(NWr,"roformer"),NWr.forEach(t),cno=r(f$," \u2014 "),SP=n(f$,"A",{href:!0});var jWr=s(SP);fno=r(jWr,"RoFormerTokenizer"),jWr.forEach(t),mno=r(f$," or "),RP=n(f$,"A",{href:!0});var DWr=s(RP);gno=r(DWr,"RoFormerTokenizerFast"),DWr.forEach(t),hno=r(f$," (RoFormer model)"),f$.forEach(t),pno=i(S),Og=n(S,"LI",{});var Mwe=s(Og);Wte=n(Mwe,"STRONG",{});var GWr=s(Wte);uno=r(GWr,"speech_to_text"),GWr.forEach(t),_no=r(Mwe," \u2014 "),PP=n(Mwe,"A",{href:!0});var OWr=s(PP);bno=r(OWr,"Speech2TextTokenizer"),OWr.forEach(t),vno=r(Mwe," (Speech2Text model)"),Mwe.forEach(t),Fno=i(S),Vg=n(S,"LI",{});var Ewe=s(Vg);Qte=n(Ewe,"STRONG",{});var VWr=s(Qte);Tno=r(VWr,"speech_to_text_2"),VWr.forEach(t),Mno=r(Ewe," \u2014 "),BP=n(Ewe,"A",{href:!0});var XWr=s(BP);Eno=r(XWr,"Speech2Text2Tokenizer"),XWr.forEach(t),Cno=r(Ewe," (Speech2Text2 model)"),Ewe.forEach(t),wno=i(S),Cs=n(S,"LI",{});var m$=s(Cs);Hte=n(m$,"STRONG",{});var zWr=s(Hte);Ano=r(zWr,"splinter"),zWr.forEach(t),yno=r(m$," \u2014 "),IP=n(m$,"A",{href:!0});var WWr=s(IP);Lno=r(WWr,"SplinterTokenizer"),WWr.forEach(t),xno=r(m$," or "),qP=n(m$,"A",{href:!0});var QWr=s(qP);$no=r(QWr,"SplinterTokenizerFast"),QWr.forEach(t),kno=r(m$," (Splinter model)"),m$.forEach(t),Sno=i(S),ws=n(S,"LI",{});var g$=s(ws);Ute=n(g$,"STRONG",{});var HWr=s(Ute);Rno=r(HWr,"squeezebert"),HWr.forEach(t),Pno=r(g$," \u2014 "),NP=n(g$,"A",{href:!0});var UWr=s(NP);Bno=r(UWr,"SqueezeBertTokenizer"),UWr.forEach(t),Ino=r(g$," or "),jP=n(g$,"A",{href:!0});var JWr=s(jP);qno=r(JWr,"SqueezeBertTokenizerFast"),JWr.forEach(t),Nno=r(g$," (SqueezeBERT model)"),g$.forEach(t),jno=i(S),As=n(S,"LI",{});var h$=s(As);Jte=n(h$,"STRONG",{});var YWr=s(Jte);Dno=r(YWr,"t5"),YWr.forEach(t),Gno=r(h$," \u2014 "),DP=n(h$,"A",{href:!0});var KWr=s(DP);Ono=r(KWr,"T5Tokenizer"),KWr.forEach(t),Vno=r(h$," or "),GP=n(h$,"A",{href:!0});var ZWr=s(GP);Xno=r(ZWr,"T5TokenizerFast"),ZWr.forEach(t),zno=r(h$," (T5 model)"),h$.forEach(t),Wno=i(S),Xg=n(S,"LI",{});var Cwe=s(Xg);Yte=n(Cwe,"STRONG",{});var eQr=s(Yte);Qno=r(eQr,"tapas"),eQr.forEach(t),Hno=r(Cwe," \u2014 "),OP=n(Cwe,"A",{href:!0});var oQr=s(OP);Uno=r(oQr,"TapasTokenizer"),oQr.forEach(t),Jno=r(Cwe," (TAPAS model)"),Cwe.forEach(t),Yno=i(S),zg=n(S,"LI",{});var wwe=s(zg);Kte=n(wwe,"STRONG",{});var rQr=s(Kte);Kno=r(rQr,"tapex"),rQr.forEach(t),Zno=r(wwe," \u2014 "),VP=n(wwe,"A",{href:!0});var tQr=s(VP);eso=r(tQr,"TapexTokenizer"),tQr.forEach(t),oso=r(wwe," (TAPEX model)"),wwe.forEach(t),rso=i(S),Wg=n(S,"LI",{});var Awe=s(Wg);Zte=n(Awe,"STRONG",{});var aQr=s(Zte);tso=r(aQr,"transfo-xl"),aQr.forEach(t),aso=r(Awe," \u2014 "),XP=n(Awe,"A",{href:!0});var nQr=s(XP);nso=r(nQr,"TransfoXLTokenizer"),nQr.forEach(t),sso=r(Awe," (Transformer-XL model)"),Awe.forEach(t),lso=i(S),ys=n(S,"LI",{});var p$=s(ys);eae=n(p$,"STRONG",{});var sQr=s(eae);iso=r(sQr,"visual_bert"),sQr.forEach(t),dso=r(p$," \u2014 "),zP=n(p$,"A",{href:!0});var lQr=s(zP);cso=r(lQr,"BertTokenizer"),lQr.forEach(t),fso=r(p$," or "),WP=n(p$,"A",{href:!0});var iQr=s(WP);mso=r(iQr,"BertTokenizerFast"),iQr.forEach(t),gso=r(p$," (VisualBert model)"),p$.forEach(t),hso=i(S),Qg=n(S,"LI",{});var ywe=s(Qg);oae=n(ywe,"STRONG",{});var dQr=s(oae);pso=r(dQr,"wav2vec2"),dQr.forEach(t),uso=r(ywe," \u2014 "),QP=n(ywe,"A",{href:!0});var cQr=s(QP);_so=r(cQr,"Wav2Vec2CTCTokenizer"),cQr.forEach(t),bso=r(ywe," (Wav2Vec2 model)"),ywe.forEach(t),vso=i(S),Hg=n(S,"LI",{});var Lwe=s(Hg);rae=n(Lwe,"STRONG",{});var fQr=s(rae);Fso=r(fQr,"wav2vec2-conformer"),fQr.forEach(t),Tso=r(Lwe," \u2014 "),HP=n(Lwe,"A",{href:!0});var mQr=s(HP);Mso=r(mQr,"Wav2Vec2CTCTokenizer"),mQr.forEach(t),Eso=r(Lwe," (Wav2Vec2-Conformer model)"),Lwe.forEach(t),Cso=i(S),Ug=n(S,"LI",{});var xwe=s(Ug);tae=n(xwe,"STRONG",{});var gQr=s(tae);wso=r(gQr,"wav2vec2_phoneme"),gQr.forEach(t),Aso=r(xwe," \u2014 "),UP=n(xwe,"A",{href:!0});var hQr=s(UP);yso=r(hQr,"Wav2Vec2PhonemeCTCTokenizer"),hQr.forEach(t),Lso=r(xwe," (Wav2Vec2Phoneme model)"),xwe.forEach(t),xso=i(S),Ls=n(S,"LI",{});var u$=s(Ls);aae=n(u$,"STRONG",{});var pQr=s(aae);$so=r(pQr,"xglm"),pQr.forEach(t),kso=r(u$," \u2014 "),JP=n(u$,"A",{href:!0});var uQr=s(JP);Sso=r(uQr,"XGLMTokenizer"),uQr.forEach(t),Rso=r(u$," or "),YP=n(u$,"A",{href:!0});var _Qr=s(YP);Pso=r(_Qr,"XGLMTokenizerFast"),_Qr.forEach(t),Bso=r(u$," (XGLM model)"),u$.forEach(t),Iso=i(S),Jg=n(S,"LI",{});var $we=s(Jg);nae=n($we,"STRONG",{});var bQr=s(nae);qso=r(bQr,"xlm"),bQr.forEach(t),Nso=r($we," \u2014 "),KP=n($we,"A",{href:!0});var vQr=s(KP);jso=r(vQr,"XLMTokenizer"),vQr.forEach(t),Dso=r($we," (XLM model)"),$we.forEach(t),Gso=i(S),Yg=n(S,"LI",{});var kwe=s(Yg);sae=n(kwe,"STRONG",{});var FQr=s(sae);Oso=r(FQr,"xlm-prophetnet"),FQr.forEach(t),Vso=r(kwe," \u2014 "),ZP=n(kwe,"A",{href:!0});var TQr=s(ZP);Xso=r(TQr,"XLMProphetNetTokenizer"),TQr.forEach(t),zso=r(kwe," (XLMProphetNet model)"),kwe.forEach(t),Wso=i(S),xs=n(S,"LI",{});var _$=s(xs);lae=n(_$,"STRONG",{});var MQr=s(lae);Qso=r(MQr,"xlm-roberta"),MQr.forEach(t),Hso=r(_$," \u2014 "),eB=n(_$,"A",{href:!0});var EQr=s(eB);Uso=r(EQr,"XLMRobertaTokenizer"),EQr.forEach(t),Jso=r(_$," or "),oB=n(_$,"A",{href:!0});var CQr=s(oB);Yso=r(CQr,"XLMRobertaTokenizerFast"),CQr.forEach(t),Kso=r(_$," (XLM-RoBERTa model)"),_$.forEach(t),Zso=i(S),$s=n(S,"LI",{});var b$=s($s);iae=n(b$,"STRONG",{});var wQr=s(iae);elo=r(wQr,"xlm-roberta-xl"),wQr.forEach(t),olo=r(b$," \u2014 "),rB=n(b$,"A",{href:!0});var AQr=s(rB);rlo=r(AQr,"RobertaTokenizer"),AQr.forEach(t),tlo=r(b$," or "),tB=n(b$,"A",{href:!0});var yQr=s(tB);alo=r(yQr,"RobertaTokenizerFast"),yQr.forEach(t),nlo=r(b$," (XLM-RoBERTa-XL model)"),b$.forEach(t),slo=i(S),ks=n(S,"LI",{});var v$=s(ks);dae=n(v$,"STRONG",{});var LQr=s(dae);llo=r(LQr,"xlnet"),LQr.forEach(t),ilo=r(v$," \u2014 "),aB=n(v$,"A",{href:!0});var xQr=s(aB);dlo=r(xQr,"XLNetTokenizer"),xQr.forEach(t),clo=r(v$," or "),nB=n(v$,"A",{href:!0});var $Qr=s(nB);flo=r($Qr,"XLNetTokenizerFast"),$Qr.forEach(t),mlo=r(v$," (XLNet model)"),v$.forEach(t),glo=i(S),Ss=n(S,"LI",{});var F$=s(Ss);cae=n(F$,"STRONG",{});var kQr=s(cae);hlo=r(kQr,"yoso"),kQr.forEach(t),plo=r(F$," \u2014 "),sB=n(F$,"A",{href:!0});var SQr=s(sB);ulo=r(SQr,"AlbertTokenizer"),SQr.forEach(t),_lo=r(F$," or "),lB=n(F$,"A",{href:!0});var RQr=s(lB);blo=r(RQr,"AlbertTokenizerFast"),RQr.forEach(t),vlo=r(F$," (YOSO model)"),F$.forEach(t),S.forEach(t),Flo=i(qs),T(Kg.$$.fragment,qs),qs.forEach(t),Tlo=i(Is),Zg=n(Is,"DIV",{class:!0});var RNe=s(Zg);T(F0.$$.fragment,RNe),Mlo=i(RNe),fae=n(RNe,"P",{});var PQr=s(fae);Elo=r(PQr,"Register a new tokenizer in this mapping."),PQr.forEach(t),RNe.forEach(t),Is.forEach(t),PIe=i(f),Ti=n(f,"H2",{class:!0});var PNe=s(Ti);eh=n(PNe,"A",{id:!0,class:!0,href:!0});var BQr=s(eh);mae=n(BQr,"SPAN",{});var IQr=s(mae);T(T0.$$.fragment,IQr),IQr.forEach(t),BQr.forEach(t),Clo=i(PNe),gae=n(PNe,"SPAN",{});var qQr=s(gae);wlo=r(qQr,"AutoFeatureExtractor"),qQr.forEach(t),PNe.forEach(t),BIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(M0.$$.fragment,Ns),Alo=i(Ns),E0=n(Ns,"P",{});var BNe=s(E0);ylo=r(BNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=n(BNe,"A",{href:!0});var NQr=s(iB);Llo=r(NQr,"AutoFeatureExtractor.from_pretrained()"),NQr.forEach(t),xlo=r(BNe," class method."),BNe.forEach(t),$lo=i(Ns),C0=n(Ns,"P",{});var INe=s(C0);klo=r(INe,"This class cannot be instantiated directly using "),hae=n(INe,"CODE",{});var jQr=s(hae);Slo=r(jQr,"__init__()"),jQr.forEach(t),Rlo=r(INe," (throws an error)."),INe.forEach(t),Plo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(w0.$$.fragment,Zt),Blo=i(Zt),pae=n(Zt,"P",{});var DQr=s(pae);Ilo=r(DQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DQr.forEach(t),qlo=i(Zt),ya=n(Zt,"P",{});var cA=s(ya);Nlo=r(cA,"The feature extractor class to instantiate is selected based on the "),uae=n(cA,"CODE",{});var GQr=s(uae);jlo=r(GQr,"model_type"),GQr.forEach(t),Dlo=r(cA,` property of the config object
(either passed as an argument or loaded from `),_ae=n(cA,"CODE",{});var OQr=s(_ae);Glo=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),Olo=r(cA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bae=n(cA,"CODE",{});var VQr=s(bae);Vlo=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),Xlo=r(cA,":"),cA.forEach(t),zlo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var Swe=s(oh);vae=n(Swe,"STRONG",{});var XQr=s(vae);Wlo=r(XQr,"beit"),XQr.forEach(t),Qlo=r(Swe," \u2014 "),dB=n(Swe,"A",{href:!0});var zQr=s(dB);Hlo=r(zQr,"BeitFeatureExtractor"),zQr.forEach(t),Ulo=r(Swe," (BEiT model)"),Swe.forEach(t),Jlo=i(te),rh=n(te,"LI",{});var Rwe=s(rh);Fae=n(Rwe,"STRONG",{});var WQr=s(Fae);Ylo=r(WQr,"clip"),WQr.forEach(t),Klo=r(Rwe," \u2014 "),cB=n(Rwe,"A",{href:!0});var QQr=s(cB);Zlo=r(QQr,"CLIPFeatureExtractor"),QQr.forEach(t),eio=r(Rwe," (CLIP model)"),Rwe.forEach(t),oio=i(te),th=n(te,"LI",{});var Pwe=s(th);Tae=n(Pwe,"STRONG",{});var HQr=s(Tae);rio=r(HQr,"convnext"),HQr.forEach(t),tio=r(Pwe," \u2014 "),fB=n(Pwe,"A",{href:!0});var UQr=s(fB);aio=r(UQr,"ConvNextFeatureExtractor"),UQr.forEach(t),nio=r(Pwe," (ConvNext model)"),Pwe.forEach(t),sio=i(te),ah=n(te,"LI",{});var Bwe=s(ah);Mae=n(Bwe,"STRONG",{});var JQr=s(Mae);lio=r(JQr,"data2vec-audio"),JQr.forEach(t),iio=r(Bwe," \u2014 "),mB=n(Bwe,"A",{href:!0});var YQr=s(mB);dio=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),cio=r(Bwe," (Data2VecAudio model)"),Bwe.forEach(t),fio=i(te),nh=n(te,"LI",{});var Iwe=s(nh);Eae=n(Iwe,"STRONG",{});var KQr=s(Eae);mio=r(KQr,"data2vec-vision"),KQr.forEach(t),gio=r(Iwe," \u2014 "),gB=n(Iwe,"A",{href:!0});var ZQr=s(gB);hio=r(ZQr,"BeitFeatureExtractor"),ZQr.forEach(t),pio=r(Iwe," (Data2VecVision model)"),Iwe.forEach(t),uio=i(te),sh=n(te,"LI",{});var qwe=s(sh);Cae=n(qwe,"STRONG",{});var eHr=s(Cae);_io=r(eHr,"deit"),eHr.forEach(t),bio=r(qwe," \u2014 "),hB=n(qwe,"A",{href:!0});var oHr=s(hB);vio=r(oHr,"DeiTFeatureExtractor"),oHr.forEach(t),Fio=r(qwe," (DeiT model)"),qwe.forEach(t),Tio=i(te),lh=n(te,"LI",{});var Nwe=s(lh);wae=n(Nwe,"STRONG",{});var rHr=s(wae);Mio=r(rHr,"detr"),rHr.forEach(t),Eio=r(Nwe," \u2014 "),pB=n(Nwe,"A",{href:!0});var tHr=s(pB);Cio=r(tHr,"DetrFeatureExtractor"),tHr.forEach(t),wio=r(Nwe," (DETR model)"),Nwe.forEach(t),Aio=i(te),ih=n(te,"LI",{});var jwe=s(ih);Aae=n(jwe,"STRONG",{});var aHr=s(Aae);yio=r(aHr,"dpt"),aHr.forEach(t),Lio=r(jwe," \u2014 "),uB=n(jwe,"A",{href:!0});var nHr=s(uB);xio=r(nHr,"DPTFeatureExtractor"),nHr.forEach(t),$io=r(jwe," (DPT model)"),jwe.forEach(t),kio=i(te),dh=n(te,"LI",{});var Dwe=s(dh);yae=n(Dwe,"STRONG",{});var sHr=s(yae);Sio=r(sHr,"flava"),sHr.forEach(t),Rio=r(Dwe," \u2014 "),_B=n(Dwe,"A",{href:!0});var lHr=s(_B);Pio=r(lHr,"FlavaFeatureExtractor"),lHr.forEach(t),Bio=r(Dwe," (Flava model)"),Dwe.forEach(t),Iio=i(te),ch=n(te,"LI",{});var Gwe=s(ch);Lae=n(Gwe,"STRONG",{});var iHr=s(Lae);qio=r(iHr,"glpn"),iHr.forEach(t),Nio=r(Gwe," \u2014 "),bB=n(Gwe,"A",{href:!0});var dHr=s(bB);jio=r(dHr,"GLPNFeatureExtractor"),dHr.forEach(t),Dio=r(Gwe," (GLPN model)"),Gwe.forEach(t),Gio=i(te),fh=n(te,"LI",{});var Owe=s(fh);xae=n(Owe,"STRONG",{});var cHr=s(xae);Oio=r(cHr,"hubert"),cHr.forEach(t),Vio=r(Owe," \u2014 "),vB=n(Owe,"A",{href:!0});var fHr=s(vB);Xio=r(fHr,"Wav2Vec2FeatureExtractor"),fHr.forEach(t),zio=r(Owe," (Hubert model)"),Owe.forEach(t),Wio=i(te),mh=n(te,"LI",{});var Vwe=s(mh);$ae=n(Vwe,"STRONG",{});var mHr=s($ae);Qio=r(mHr,"layoutlmv2"),mHr.forEach(t),Hio=r(Vwe," \u2014 "),FB=n(Vwe,"A",{href:!0});var gHr=s(FB);Uio=r(gHr,"LayoutLMv2FeatureExtractor"),gHr.forEach(t),Jio=r(Vwe," (LayoutLMv2 model)"),Vwe.forEach(t),Yio=i(te),gh=n(te,"LI",{});var Xwe=s(gh);kae=n(Xwe,"STRONG",{});var hHr=s(kae);Kio=r(hHr,"maskformer"),hHr.forEach(t),Zio=r(Xwe," \u2014 "),TB=n(Xwe,"A",{href:!0});var pHr=s(TB);edo=r(pHr,"MaskFormerFeatureExtractor"),pHr.forEach(t),odo=r(Xwe," (MaskFormer model)"),Xwe.forEach(t),rdo=i(te),hh=n(te,"LI",{});var zwe=s(hh);Sae=n(zwe,"STRONG",{});var uHr=s(Sae);tdo=r(uHr,"perceiver"),uHr.forEach(t),ado=r(zwe," \u2014 "),MB=n(zwe,"A",{href:!0});var _Hr=s(MB);ndo=r(_Hr,"PerceiverFeatureExtractor"),_Hr.forEach(t),sdo=r(zwe," (Perceiver model)"),zwe.forEach(t),ldo=i(te),ph=n(te,"LI",{});var Wwe=s(ph);Rae=n(Wwe,"STRONG",{});var bHr=s(Rae);ido=r(bHr,"poolformer"),bHr.forEach(t),ddo=r(Wwe," \u2014 "),EB=n(Wwe,"A",{href:!0});var vHr=s(EB);cdo=r(vHr,"PoolFormerFeatureExtractor"),vHr.forEach(t),fdo=r(Wwe," (PoolFormer model)"),Wwe.forEach(t),mdo=i(te),uh=n(te,"LI",{});var Qwe=s(uh);Pae=n(Qwe,"STRONG",{});var FHr=s(Pae);gdo=r(FHr,"regnet"),FHr.forEach(t),hdo=r(Qwe," \u2014 "),CB=n(Qwe,"A",{href:!0});var THr=s(CB);pdo=r(THr,"ConvNextFeatureExtractor"),THr.forEach(t),udo=r(Qwe," (RegNet model)"),Qwe.forEach(t),_do=i(te),_h=n(te,"LI",{});var Hwe=s(_h);Bae=n(Hwe,"STRONG",{});var MHr=s(Bae);bdo=r(MHr,"resnet"),MHr.forEach(t),vdo=r(Hwe," \u2014 "),wB=n(Hwe,"A",{href:!0});var EHr=s(wB);Fdo=r(EHr,"ConvNextFeatureExtractor"),EHr.forEach(t),Tdo=r(Hwe," (ResNet model)"),Hwe.forEach(t),Mdo=i(te),bh=n(te,"LI",{});var Uwe=s(bh);Iae=n(Uwe,"STRONG",{});var CHr=s(Iae);Edo=r(CHr,"segformer"),CHr.forEach(t),Cdo=r(Uwe," \u2014 "),AB=n(Uwe,"A",{href:!0});var wHr=s(AB);wdo=r(wHr,"SegformerFeatureExtractor"),wHr.forEach(t),Ado=r(Uwe," (SegFormer model)"),Uwe.forEach(t),ydo=i(te),vh=n(te,"LI",{});var Jwe=s(vh);qae=n(Jwe,"STRONG",{});var AHr=s(qae);Ldo=r(AHr,"speech_to_text"),AHr.forEach(t),xdo=r(Jwe," \u2014 "),yB=n(Jwe,"A",{href:!0});var yHr=s(yB);$do=r(yHr,"Speech2TextFeatureExtractor"),yHr.forEach(t),kdo=r(Jwe," (Speech2Text model)"),Jwe.forEach(t),Sdo=i(te),Fh=n(te,"LI",{});var Ywe=s(Fh);Nae=n(Ywe,"STRONG",{});var LHr=s(Nae);Rdo=r(LHr,"swin"),LHr.forEach(t),Pdo=r(Ywe," \u2014 "),LB=n(Ywe,"A",{href:!0});var xHr=s(LB);Bdo=r(xHr,"ViTFeatureExtractor"),xHr.forEach(t),Ido=r(Ywe," (Swin model)"),Ywe.forEach(t),qdo=i(te),Th=n(te,"LI",{});var Kwe=s(Th);jae=n(Kwe,"STRONG",{});var $Hr=s(jae);Ndo=r($Hr,"van"),$Hr.forEach(t),jdo=r(Kwe," \u2014 "),xB=n(Kwe,"A",{href:!0});var kHr=s(xB);Ddo=r(kHr,"ConvNextFeatureExtractor"),kHr.forEach(t),Gdo=r(Kwe," (VAN model)"),Kwe.forEach(t),Odo=i(te),Mh=n(te,"LI",{});var Zwe=s(Mh);Dae=n(Zwe,"STRONG",{});var SHr=s(Dae);Vdo=r(SHr,"vit"),SHr.forEach(t),Xdo=r(Zwe," \u2014 "),$B=n(Zwe,"A",{href:!0});var RHr=s($B);zdo=r(RHr,"ViTFeatureExtractor"),RHr.forEach(t),Wdo=r(Zwe," (ViT model)"),Zwe.forEach(t),Qdo=i(te),Eh=n(te,"LI",{});var eAe=s(Eh);Gae=n(eAe,"STRONG",{});var PHr=s(Gae);Hdo=r(PHr,"vit_mae"),PHr.forEach(t),Udo=r(eAe," \u2014 "),kB=n(eAe,"A",{href:!0});var BHr=s(kB);Jdo=r(BHr,"ViTFeatureExtractor"),BHr.forEach(t),Ydo=r(eAe," (ViTMAE model)"),eAe.forEach(t),Kdo=i(te),Ch=n(te,"LI",{});var oAe=s(Ch);Oae=n(oAe,"STRONG",{});var IHr=s(Oae);Zdo=r(IHr,"wav2vec2"),IHr.forEach(t),eco=r(oAe," \u2014 "),SB=n(oAe,"A",{href:!0});var qHr=s(SB);oco=r(qHr,"Wav2Vec2FeatureExtractor"),qHr.forEach(t),rco=r(oAe," (Wav2Vec2 model)"),oAe.forEach(t),tco=i(te),wh=n(te,"LI",{});var rAe=s(wh);Vae=n(rAe,"STRONG",{});var NHr=s(Vae);aco=r(NHr,"wav2vec2-conformer"),NHr.forEach(t),nco=r(rAe," \u2014 "),RB=n(rAe,"A",{href:!0});var jHr=s(RB);sco=r(jHr,"Wav2Vec2FeatureExtractor"),jHr.forEach(t),lco=r(rAe," (Wav2Vec2-Conformer model)"),rAe.forEach(t),ico=i(te),Ah=n(te,"LI",{});var tAe=s(Ah);Xae=n(tAe,"STRONG",{});var DHr=s(Xae);dco=r(DHr,"yolos"),DHr.forEach(t),cco=r(tAe," \u2014 "),PB=n(tAe,"A",{href:!0});var GHr=s(PB);fco=r(GHr,"YolosFeatureExtractor"),GHr.forEach(t),mco=r(tAe," (YOLOS model)"),tAe.forEach(t),te.forEach(t),gco=i(Zt),T(yh.$$.fragment,Zt),hco=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),pco=i(Ns),xh=n(Ns,"DIV",{class:!0});var qNe=s(xh);T(A0.$$.fragment,qNe),uco=i(qNe),zae=n(qNe,"P",{});var OHr=s(zae);_co=r(OHr,"Register a new feature extractor for this class."),OHr.forEach(t),qNe.forEach(t),Ns.forEach(t),IIe=i(f),Mi=n(f,"H2",{class:!0});var NNe=s(Mi);$h=n(NNe,"A",{id:!0,class:!0,href:!0});var VHr=s($h);Wae=n(VHr,"SPAN",{});var XHr=s(Wae);T(y0.$$.fragment,XHr),XHr.forEach(t),VHr.forEach(t),bco=i(NNe),Qae=n(NNe,"SPAN",{});var zHr=s(Qae);vco=r(zHr,"AutoProcessor"),zHr.forEach(t),NNe.forEach(t),qIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(L0.$$.fragment,js),Fco=i(js),x0=n(js,"P",{});var jNe=s(x0);Tco=r(jNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=n(jNe,"A",{href:!0});var WHr=s(BB);Mco=r(WHr,"AutoProcessor.from_pretrained()"),WHr.forEach(t),Eco=r(jNe," class method."),jNe.forEach(t),Cco=i(js),$0=n(js,"P",{});var DNe=s($0);wco=r(DNe,"This class cannot be instantiated directly using "),Hae=n(DNe,"CODE",{});var QHr=s(Hae);Aco=r(QHr,"__init__()"),QHr.forEach(t),yco=r(DNe," (throws an error)."),DNe.forEach(t),Lco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(k0.$$.fragment,ea),xco=i(ea),Uae=n(ea,"P",{});var HHr=s(Uae);$co=r(HHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),HHr.forEach(t),kco=i(ea),Ei=n(ea,"P",{});var AK=s(Ei);Sco=r(AK,"The processor class to instantiate is selected based on the "),Jae=n(AK,"CODE",{});var UHr=s(Jae);Rco=r(UHr,"model_type"),UHr.forEach(t),Pco=r(AK,` property of the config object (either
passed as an argument or loaded from `),Yae=n(AK,"CODE",{});var JHr=s(Yae);Bco=r(JHr,"pretrained_model_name_or_path"),JHr.forEach(t),Ico=r(AK," if possible):"),AK.forEach(t),qco=i(ea),pe=n(ea,"UL",{});var be=s(pe);kh=n(be,"LI",{});var aAe=s(kh);Kae=n(aAe,"STRONG",{});var YHr=s(Kae);Nco=r(YHr,"clip"),YHr.forEach(t),jco=r(aAe," \u2014 "),IB=n(aAe,"A",{href:!0});var KHr=s(IB);Dco=r(KHr,"CLIPProcessor"),KHr.forEach(t),Gco=r(aAe," (CLIP model)"),aAe.forEach(t),Oco=i(be),Sh=n(be,"LI",{});var nAe=s(Sh);Zae=n(nAe,"STRONG",{});var ZHr=s(Zae);Vco=r(ZHr,"flava"),ZHr.forEach(t),Xco=r(nAe," \u2014 "),ene=n(nAe,"CODE",{});var eUr=s(ene);zco=r(eUr,"FLAVAProcessor"),eUr.forEach(t),Wco=r(nAe," (Flava model)"),nAe.forEach(t),Qco=i(be),Rh=n(be,"LI",{});var sAe=s(Rh);one=n(sAe,"STRONG",{});var oUr=s(one);Hco=r(oUr,"layoutlmv2"),oUr.forEach(t),Uco=r(sAe," \u2014 "),qB=n(sAe,"A",{href:!0});var rUr=s(qB);Jco=r(rUr,"LayoutLMv2Processor"),rUr.forEach(t),Yco=r(sAe," (LayoutLMv2 model)"),sAe.forEach(t),Kco=i(be),Ph=n(be,"LI",{});var lAe=s(Ph);rne=n(lAe,"STRONG",{});var tUr=s(rne);Zco=r(tUr,"layoutxlm"),tUr.forEach(t),efo=r(lAe," \u2014 "),NB=n(lAe,"A",{href:!0});var aUr=s(NB);ofo=r(aUr,"LayoutXLMProcessor"),aUr.forEach(t),rfo=r(lAe," (LayoutXLM model)"),lAe.forEach(t),tfo=i(be),Bh=n(be,"LI",{});var iAe=s(Bh);tne=n(iAe,"STRONG",{});var nUr=s(tne);afo=r(nUr,"sew"),nUr.forEach(t),nfo=r(iAe," \u2014 "),jB=n(iAe,"A",{href:!0});var sUr=s(jB);sfo=r(sUr,"Wav2Vec2Processor"),sUr.forEach(t),lfo=r(iAe," (SEW model)"),iAe.forEach(t),ifo=i(be),Ih=n(be,"LI",{});var dAe=s(Ih);ane=n(dAe,"STRONG",{});var lUr=s(ane);dfo=r(lUr,"sew-d"),lUr.forEach(t),cfo=r(dAe," \u2014 "),DB=n(dAe,"A",{href:!0});var iUr=s(DB);ffo=r(iUr,"Wav2Vec2Processor"),iUr.forEach(t),mfo=r(dAe," (SEW-D model)"),dAe.forEach(t),gfo=i(be),qh=n(be,"LI",{});var cAe=s(qh);nne=n(cAe,"STRONG",{});var dUr=s(nne);hfo=r(dUr,"speech_to_text"),dUr.forEach(t),pfo=r(cAe," \u2014 "),GB=n(cAe,"A",{href:!0});var cUr=s(GB);ufo=r(cUr,"Speech2TextProcessor"),cUr.forEach(t),_fo=r(cAe," (Speech2Text model)"),cAe.forEach(t),bfo=i(be),Nh=n(be,"LI",{});var fAe=s(Nh);sne=n(fAe,"STRONG",{});var fUr=s(sne);vfo=r(fUr,"speech_to_text_2"),fUr.forEach(t),Ffo=r(fAe," \u2014 "),OB=n(fAe,"A",{href:!0});var mUr=s(OB);Tfo=r(mUr,"Speech2Text2Processor"),mUr.forEach(t),Mfo=r(fAe," (Speech2Text2 model)"),fAe.forEach(t),Efo=i(be),jh=n(be,"LI",{});var mAe=s(jh);lne=n(mAe,"STRONG",{});var gUr=s(lne);Cfo=r(gUr,"trocr"),gUr.forEach(t),wfo=r(mAe," \u2014 "),VB=n(mAe,"A",{href:!0});var hUr=s(VB);Afo=r(hUr,"TrOCRProcessor"),hUr.forEach(t),yfo=r(mAe," (TrOCR model)"),mAe.forEach(t),Lfo=i(be),Dh=n(be,"LI",{});var gAe=s(Dh);ine=n(gAe,"STRONG",{});var pUr=s(ine);xfo=r(pUr,"unispeech"),pUr.forEach(t),$fo=r(gAe," \u2014 "),XB=n(gAe,"A",{href:!0});var uUr=s(XB);kfo=r(uUr,"Wav2Vec2Processor"),uUr.forEach(t),Sfo=r(gAe," (UniSpeech model)"),gAe.forEach(t),Rfo=i(be),Gh=n(be,"LI",{});var hAe=s(Gh);dne=n(hAe,"STRONG",{});var _Ur=s(dne);Pfo=r(_Ur,"unispeech-sat"),_Ur.forEach(t),Bfo=r(hAe," \u2014 "),zB=n(hAe,"A",{href:!0});var bUr=s(zB);Ifo=r(bUr,"Wav2Vec2Processor"),bUr.forEach(t),qfo=r(hAe," (UniSpeechSat model)"),hAe.forEach(t),Nfo=i(be),Oh=n(be,"LI",{});var pAe=s(Oh);cne=n(pAe,"STRONG",{});var vUr=s(cne);jfo=r(vUr,"vilt"),vUr.forEach(t),Dfo=r(pAe," \u2014 "),WB=n(pAe,"A",{href:!0});var FUr=s(WB);Gfo=r(FUr,"ViltProcessor"),FUr.forEach(t),Ofo=r(pAe," (ViLT model)"),pAe.forEach(t),Vfo=i(be),Vh=n(be,"LI",{});var uAe=s(Vh);fne=n(uAe,"STRONG",{});var TUr=s(fne);Xfo=r(TUr,"vision-text-dual-encoder"),TUr.forEach(t),zfo=r(uAe," \u2014 "),QB=n(uAe,"A",{href:!0});var MUr=s(QB);Wfo=r(MUr,"VisionTextDualEncoderProcessor"),MUr.forEach(t),Qfo=r(uAe," (VisionTextDualEncoder model)"),uAe.forEach(t),Hfo=i(be),Xh=n(be,"LI",{});var _Ae=s(Xh);mne=n(_Ae,"STRONG",{});var EUr=s(mne);Ufo=r(EUr,"wav2vec2"),EUr.forEach(t),Jfo=r(_Ae," \u2014 "),HB=n(_Ae,"A",{href:!0});var CUr=s(HB);Yfo=r(CUr,"Wav2Vec2Processor"),CUr.forEach(t),Kfo=r(_Ae," (Wav2Vec2 model)"),_Ae.forEach(t),Zfo=i(be),zh=n(be,"LI",{});var bAe=s(zh);gne=n(bAe,"STRONG",{});var wUr=s(gne);emo=r(wUr,"wav2vec2-conformer"),wUr.forEach(t),omo=r(bAe," \u2014 "),UB=n(bAe,"A",{href:!0});var AUr=s(UB);rmo=r(AUr,"Wav2Vec2Processor"),AUr.forEach(t),tmo=r(bAe," (Wav2Vec2-Conformer model)"),bAe.forEach(t),amo=i(be),Wh=n(be,"LI",{});var vAe=s(Wh);hne=n(vAe,"STRONG",{});var yUr=s(hne);nmo=r(yUr,"wavlm"),yUr.forEach(t),smo=r(vAe," \u2014 "),JB=n(vAe,"A",{href:!0});var LUr=s(JB);lmo=r(LUr,"Wav2Vec2Processor"),LUr.forEach(t),imo=r(vAe," (WavLM model)"),vAe.forEach(t),be.forEach(t),dmo=i(ea),T(Qh.$$.fragment,ea),cmo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),fmo=i(js),Uh=n(js,"DIV",{class:!0});var GNe=s(Uh);T(S0.$$.fragment,GNe),mmo=i(GNe),pne=n(GNe,"P",{});var xUr=s(pne);gmo=r(xUr,"Register a new processor for this class."),xUr.forEach(t),GNe.forEach(t),js.forEach(t),NIe=i(f),Ci=n(f,"H2",{class:!0});var ONe=s(Ci);Jh=n(ONe,"A",{id:!0,class:!0,href:!0});var $Ur=s(Jh);une=n($Ur,"SPAN",{});var kUr=s(une);T(R0.$$.fragment,kUr),kUr.forEach(t),$Ur.forEach(t),hmo=i(ONe),_ne=n(ONe,"SPAN",{});var SUr=s(_ne);pmo=r(SUr,"AutoModel"),SUr.forEach(t),ONe.forEach(t),jIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(P0.$$.fragment,Ds),umo=i(Ds),wi=n(Ds,"P",{});var yK=s(wi);_mo=r(yK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YB=n(yK,"A",{href:!0});var RUr=s(YB);bmo=r(RUr,"from_pretrained()"),RUr.forEach(t),vmo=r(yK," class method or the "),KB=n(yK,"A",{href:!0});var PUr=s(KB);Fmo=r(PUr,"from_config()"),PUr.forEach(t),Tmo=r(yK,` class
method.`),yK.forEach(t),Mmo=i(Ds),B0=n(Ds,"P",{});var VNe=s(B0);Emo=r(VNe,"This class cannot be instantiated directly using "),bne=n(VNe,"CODE",{});var BUr=s(bne);Cmo=r(BUr,"__init__()"),BUr.forEach(t),wmo=r(VNe," (throws an error)."),VNe.forEach(t),Amo=i(Ds),tt=n(Ds,"DIV",{class:!0});var fA=s(tt);T(I0.$$.fragment,fA),ymo=i(fA),vne=n(fA,"P",{});var IUr=s(vne);Lmo=r(IUr,"Instantiates one of the base model classes of the library from a configuration."),IUr.forEach(t),xmo=i(fA),Ai=n(fA,"P",{});var LK=s(Ai);$mo=r(LK,`Note:
Loading a model from its configuration file does `),Fne=n(LK,"STRONG",{});var qUr=s(Fne);kmo=r(qUr,"not"),qUr.forEach(t),Smo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZB=n(LK,"A",{href:!0});var NUr=s(ZB);Rmo=r(NUr,"from_pretrained()"),NUr.forEach(t),Pmo=r(LK," to load the model weights."),LK.forEach(t),Bmo=i(fA),T(Yh.$$.fragment,fA),fA.forEach(t),Imo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(q0.$$.fragment,oa),qmo=i(oa),Tne=n(oa,"P",{});var jUr=s(Tne);Nmo=r(jUr,"Instantiate one of the base model classes of the library from a pretrained model."),jUr.forEach(t),jmo=i(oa),La=n(oa,"P",{});var mA=s(La);Dmo=r(mA,"The model class to instantiate is selected based on the "),Mne=n(mA,"CODE",{});var DUr=s(Mne);Gmo=r(DUr,"model_type"),DUr.forEach(t),Omo=r(mA,` property of the config object (either
passed as an argument or loaded from `),Ene=n(mA,"CODE",{});var GUr=s(Ene);Vmo=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),Xmo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cne=n(mA,"CODE",{});var OUr=s(Cne);zmo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),Wmo=r(mA,":"),mA.forEach(t),Qmo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var FAe=s(Kh);wne=n(FAe,"STRONG",{});var VUr=s(wne);Hmo=r(VUr,"albert"),VUr.forEach(t),Umo=r(FAe," \u2014 "),eI=n(FAe,"A",{href:!0});var XUr=s(eI);Jmo=r(XUr,"AlbertModel"),XUr.forEach(t),Ymo=r(FAe," (ALBERT model)"),FAe.forEach(t),Kmo=i($),Zh=n($,"LI",{});var TAe=s(Zh);Ane=n(TAe,"STRONG",{});var zUr=s(Ane);Zmo=r(zUr,"bart"),zUr.forEach(t),ego=r(TAe," \u2014 "),oI=n(TAe,"A",{href:!0});var WUr=s(oI);ogo=r(WUr,"BartModel"),WUr.forEach(t),rgo=r(TAe," (BART model)"),TAe.forEach(t),tgo=i($),ep=n($,"LI",{});var MAe=s(ep);yne=n(MAe,"STRONG",{});var QUr=s(yne);ago=r(QUr,"beit"),QUr.forEach(t),ngo=r(MAe," \u2014 "),rI=n(MAe,"A",{href:!0});var HUr=s(rI);sgo=r(HUr,"BeitModel"),HUr.forEach(t),lgo=r(MAe," (BEiT model)"),MAe.forEach(t),igo=i($),op=n($,"LI",{});var EAe=s(op);Lne=n(EAe,"STRONG",{});var UUr=s(Lne);dgo=r(UUr,"bert"),UUr.forEach(t),cgo=r(EAe," \u2014 "),tI=n(EAe,"A",{href:!0});var JUr=s(tI);fgo=r(JUr,"BertModel"),JUr.forEach(t),mgo=r(EAe," (BERT model)"),EAe.forEach(t),ggo=i($),rp=n($,"LI",{});var CAe=s(rp);xne=n(CAe,"STRONG",{});var YUr=s(xne);hgo=r(YUr,"bert-generation"),YUr.forEach(t),pgo=r(CAe," \u2014 "),aI=n(CAe,"A",{href:!0});var KUr=s(aI);ugo=r(KUr,"BertGenerationEncoder"),KUr.forEach(t),_go=r(CAe," (Bert Generation model)"),CAe.forEach(t),bgo=i($),tp=n($,"LI",{});var wAe=s(tp);$ne=n(wAe,"STRONG",{});var ZUr=s($ne);vgo=r(ZUr,"big_bird"),ZUr.forEach(t),Fgo=r(wAe," \u2014 "),nI=n(wAe,"A",{href:!0});var eJr=s(nI);Tgo=r(eJr,"BigBirdModel"),eJr.forEach(t),Mgo=r(wAe," (BigBird model)"),wAe.forEach(t),Ego=i($),ap=n($,"LI",{});var AAe=s(ap);kne=n(AAe,"STRONG",{});var oJr=s(kne);Cgo=r(oJr,"bigbird_pegasus"),oJr.forEach(t),wgo=r(AAe," \u2014 "),sI=n(AAe,"A",{href:!0});var rJr=s(sI);Ago=r(rJr,"BigBirdPegasusModel"),rJr.forEach(t),ygo=r(AAe," (BigBirdPegasus model)"),AAe.forEach(t),Lgo=i($),np=n($,"LI",{});var yAe=s(np);Sne=n(yAe,"STRONG",{});var tJr=s(Sne);xgo=r(tJr,"blenderbot"),tJr.forEach(t),$go=r(yAe," \u2014 "),lI=n(yAe,"A",{href:!0});var aJr=s(lI);kgo=r(aJr,"BlenderbotModel"),aJr.forEach(t),Sgo=r(yAe," (Blenderbot model)"),yAe.forEach(t),Rgo=i($),sp=n($,"LI",{});var LAe=s(sp);Rne=n(LAe,"STRONG",{});var nJr=s(Rne);Pgo=r(nJr,"blenderbot-small"),nJr.forEach(t),Bgo=r(LAe," \u2014 "),iI=n(LAe,"A",{href:!0});var sJr=s(iI);Igo=r(sJr,"BlenderbotSmallModel"),sJr.forEach(t),qgo=r(LAe," (BlenderbotSmall model)"),LAe.forEach(t),Ngo=i($),lp=n($,"LI",{});var xAe=s(lp);Pne=n(xAe,"STRONG",{});var lJr=s(Pne);jgo=r(lJr,"camembert"),lJr.forEach(t),Dgo=r(xAe," \u2014 "),dI=n(xAe,"A",{href:!0});var iJr=s(dI);Ggo=r(iJr,"CamembertModel"),iJr.forEach(t),Ogo=r(xAe," (CamemBERT model)"),xAe.forEach(t),Vgo=i($),ip=n($,"LI",{});var $Ae=s(ip);Bne=n($Ae,"STRONG",{});var dJr=s(Bne);Xgo=r(dJr,"canine"),dJr.forEach(t),zgo=r($Ae," \u2014 "),cI=n($Ae,"A",{href:!0});var cJr=s(cI);Wgo=r(cJr,"CanineModel"),cJr.forEach(t),Qgo=r($Ae," (Canine model)"),$Ae.forEach(t),Hgo=i($),dp=n($,"LI",{});var kAe=s(dp);Ine=n(kAe,"STRONG",{});var fJr=s(Ine);Ugo=r(fJr,"clip"),fJr.forEach(t),Jgo=r(kAe," \u2014 "),fI=n(kAe,"A",{href:!0});var mJr=s(fI);Ygo=r(mJr,"CLIPModel"),mJr.forEach(t),Kgo=r(kAe," (CLIP model)"),kAe.forEach(t),Zgo=i($),cp=n($,"LI",{});var SAe=s(cp);qne=n(SAe,"STRONG",{});var gJr=s(qne);eho=r(gJr,"convbert"),gJr.forEach(t),oho=r(SAe," \u2014 "),mI=n(SAe,"A",{href:!0});var hJr=s(mI);rho=r(hJr,"ConvBertModel"),hJr.forEach(t),tho=r(SAe," (ConvBERT model)"),SAe.forEach(t),aho=i($),fp=n($,"LI",{});var RAe=s(fp);Nne=n(RAe,"STRONG",{});var pJr=s(Nne);nho=r(pJr,"convnext"),pJr.forEach(t),sho=r(RAe," \u2014 "),gI=n(RAe,"A",{href:!0});var uJr=s(gI);lho=r(uJr,"ConvNextModel"),uJr.forEach(t),iho=r(RAe," (ConvNext model)"),RAe.forEach(t),dho=i($),mp=n($,"LI",{});var PAe=s(mp);jne=n(PAe,"STRONG",{});var _Jr=s(jne);cho=r(_Jr,"ctrl"),_Jr.forEach(t),fho=r(PAe," \u2014 "),hI=n(PAe,"A",{href:!0});var bJr=s(hI);mho=r(bJr,"CTRLModel"),bJr.forEach(t),gho=r(PAe," (CTRL model)"),PAe.forEach(t),hho=i($),gp=n($,"LI",{});var BAe=s(gp);Dne=n(BAe,"STRONG",{});var vJr=s(Dne);pho=r(vJr,"data2vec-audio"),vJr.forEach(t),uho=r(BAe," \u2014 "),pI=n(BAe,"A",{href:!0});var FJr=s(pI);_ho=r(FJr,"Data2VecAudioModel"),FJr.forEach(t),bho=r(BAe," (Data2VecAudio model)"),BAe.forEach(t),vho=i($),hp=n($,"LI",{});var IAe=s(hp);Gne=n(IAe,"STRONG",{});var TJr=s(Gne);Fho=r(TJr,"data2vec-text"),TJr.forEach(t),Tho=r(IAe," \u2014 "),uI=n(IAe,"A",{href:!0});var MJr=s(uI);Mho=r(MJr,"Data2VecTextModel"),MJr.forEach(t),Eho=r(IAe," (Data2VecText model)"),IAe.forEach(t),Cho=i($),pp=n($,"LI",{});var qAe=s(pp);One=n(qAe,"STRONG",{});var EJr=s(One);who=r(EJr,"data2vec-vision"),EJr.forEach(t),Aho=r(qAe," \u2014 "),_I=n(qAe,"A",{href:!0});var CJr=s(_I);yho=r(CJr,"Data2VecVisionModel"),CJr.forEach(t),Lho=r(qAe," (Data2VecVision model)"),qAe.forEach(t),xho=i($),up=n($,"LI",{});var NAe=s(up);Vne=n(NAe,"STRONG",{});var wJr=s(Vne);$ho=r(wJr,"deberta"),wJr.forEach(t),kho=r(NAe," \u2014 "),bI=n(NAe,"A",{href:!0});var AJr=s(bI);Sho=r(AJr,"DebertaModel"),AJr.forEach(t),Rho=r(NAe," (DeBERTa model)"),NAe.forEach(t),Pho=i($),_p=n($,"LI",{});var jAe=s(_p);Xne=n(jAe,"STRONG",{});var yJr=s(Xne);Bho=r(yJr,"deberta-v2"),yJr.forEach(t),Iho=r(jAe," \u2014 "),vI=n(jAe,"A",{href:!0});var LJr=s(vI);qho=r(LJr,"DebertaV2Model"),LJr.forEach(t),Nho=r(jAe," (DeBERTa-v2 model)"),jAe.forEach(t),jho=i($),bp=n($,"LI",{});var DAe=s(bp);zne=n(DAe,"STRONG",{});var xJr=s(zne);Dho=r(xJr,"decision_transformer"),xJr.forEach(t),Gho=r(DAe," \u2014 "),FI=n(DAe,"A",{href:!0});var $Jr=s(FI);Oho=r($Jr,"DecisionTransformerModel"),$Jr.forEach(t),Vho=r(DAe," (Decision Transformer model)"),DAe.forEach(t),Xho=i($),vp=n($,"LI",{});var GAe=s(vp);Wne=n(GAe,"STRONG",{});var kJr=s(Wne);zho=r(kJr,"deit"),kJr.forEach(t),Who=r(GAe," \u2014 "),TI=n(GAe,"A",{href:!0});var SJr=s(TI);Qho=r(SJr,"DeiTModel"),SJr.forEach(t),Hho=r(GAe," (DeiT model)"),GAe.forEach(t),Uho=i($),Fp=n($,"LI",{});var OAe=s(Fp);Qne=n(OAe,"STRONG",{});var RJr=s(Qne);Jho=r(RJr,"detr"),RJr.forEach(t),Yho=r(OAe," \u2014 "),MI=n(OAe,"A",{href:!0});var PJr=s(MI);Kho=r(PJr,"DetrModel"),PJr.forEach(t),Zho=r(OAe," (DETR model)"),OAe.forEach(t),epo=i($),Tp=n($,"LI",{});var VAe=s(Tp);Hne=n(VAe,"STRONG",{});var BJr=s(Hne);opo=r(BJr,"distilbert"),BJr.forEach(t),rpo=r(VAe," \u2014 "),EI=n(VAe,"A",{href:!0});var IJr=s(EI);tpo=r(IJr,"DistilBertModel"),IJr.forEach(t),apo=r(VAe," (DistilBERT model)"),VAe.forEach(t),npo=i($),Mp=n($,"LI",{});var XAe=s(Mp);Une=n(XAe,"STRONG",{});var qJr=s(Une);spo=r(qJr,"dpr"),qJr.forEach(t),lpo=r(XAe," \u2014 "),CI=n(XAe,"A",{href:!0});var NJr=s(CI);ipo=r(NJr,"DPRQuestionEncoder"),NJr.forEach(t),dpo=r(XAe," (DPR model)"),XAe.forEach(t),cpo=i($),Ep=n($,"LI",{});var zAe=s(Ep);Jne=n(zAe,"STRONG",{});var jJr=s(Jne);fpo=r(jJr,"dpt"),jJr.forEach(t),mpo=r(zAe," \u2014 "),wI=n(zAe,"A",{href:!0});var DJr=s(wI);gpo=r(DJr,"DPTModel"),DJr.forEach(t),hpo=r(zAe," (DPT model)"),zAe.forEach(t),ppo=i($),Cp=n($,"LI",{});var WAe=s(Cp);Yne=n(WAe,"STRONG",{});var GJr=s(Yne);upo=r(GJr,"electra"),GJr.forEach(t),_po=r(WAe," \u2014 "),AI=n(WAe,"A",{href:!0});var OJr=s(AI);bpo=r(OJr,"ElectraModel"),OJr.forEach(t),vpo=r(WAe," (ELECTRA model)"),WAe.forEach(t),Fpo=i($),wp=n($,"LI",{});var QAe=s(wp);Kne=n(QAe,"STRONG",{});var VJr=s(Kne);Tpo=r(VJr,"flaubert"),VJr.forEach(t),Mpo=r(QAe," \u2014 "),yI=n(QAe,"A",{href:!0});var XJr=s(yI);Epo=r(XJr,"FlaubertModel"),XJr.forEach(t),Cpo=r(QAe," (FlauBERT model)"),QAe.forEach(t),wpo=i($),Ap=n($,"LI",{});var HAe=s(Ap);Zne=n(HAe,"STRONG",{});var zJr=s(Zne);Apo=r(zJr,"flava"),zJr.forEach(t),ypo=r(HAe," \u2014 "),LI=n(HAe,"A",{href:!0});var WJr=s(LI);Lpo=r(WJr,"FlavaModel"),WJr.forEach(t),xpo=r(HAe," (Flava model)"),HAe.forEach(t),$po=i($),yp=n($,"LI",{});var UAe=s(yp);ese=n(UAe,"STRONG",{});var QJr=s(ese);kpo=r(QJr,"fnet"),QJr.forEach(t),Spo=r(UAe," \u2014 "),xI=n(UAe,"A",{href:!0});var HJr=s(xI);Rpo=r(HJr,"FNetModel"),HJr.forEach(t),Ppo=r(UAe," (FNet model)"),UAe.forEach(t),Bpo=i($),Lp=n($,"LI",{});var JAe=s(Lp);ose=n(JAe,"STRONG",{});var UJr=s(ose);Ipo=r(UJr,"fsmt"),UJr.forEach(t),qpo=r(JAe," \u2014 "),$I=n(JAe,"A",{href:!0});var JJr=s($I);Npo=r(JJr,"FSMTModel"),JJr.forEach(t),jpo=r(JAe," (FairSeq Machine-Translation model)"),JAe.forEach(t),Dpo=i($),Rs=n($,"LI",{});var T$=s(Rs);rse=n(T$,"STRONG",{});var YJr=s(rse);Gpo=r(YJr,"funnel"),YJr.forEach(t),Opo=r(T$," \u2014 "),kI=n(T$,"A",{href:!0});var KJr=s(kI);Vpo=r(KJr,"FunnelModel"),KJr.forEach(t),Xpo=r(T$," or "),SI=n(T$,"A",{href:!0});var ZJr=s(SI);zpo=r(ZJr,"FunnelBaseModel"),ZJr.forEach(t),Wpo=r(T$," (Funnel Transformer model)"),T$.forEach(t),Qpo=i($),xp=n($,"LI",{});var YAe=s(xp);tse=n(YAe,"STRONG",{});var eYr=s(tse);Hpo=r(eYr,"glpn"),eYr.forEach(t),Upo=r(YAe," \u2014 "),RI=n(YAe,"A",{href:!0});var oYr=s(RI);Jpo=r(oYr,"GLPNModel"),oYr.forEach(t),Ypo=r(YAe," (GLPN model)"),YAe.forEach(t),Kpo=i($),$p=n($,"LI",{});var KAe=s($p);ase=n(KAe,"STRONG",{});var rYr=s(ase);Zpo=r(rYr,"gpt2"),rYr.forEach(t),euo=r(KAe," \u2014 "),PI=n(KAe,"A",{href:!0});var tYr=s(PI);ouo=r(tYr,"GPT2Model"),tYr.forEach(t),ruo=r(KAe," (OpenAI GPT-2 model)"),KAe.forEach(t),tuo=i($),kp=n($,"LI",{});var ZAe=s(kp);nse=n(ZAe,"STRONG",{});var aYr=s(nse);auo=r(aYr,"gpt_neo"),aYr.forEach(t),nuo=r(ZAe," \u2014 "),BI=n(ZAe,"A",{href:!0});var nYr=s(BI);suo=r(nYr,"GPTNeoModel"),nYr.forEach(t),luo=r(ZAe," (GPT Neo model)"),ZAe.forEach(t),iuo=i($),Sp=n($,"LI",{});var e6e=s(Sp);sse=n(e6e,"STRONG",{});var sYr=s(sse);duo=r(sYr,"gptj"),sYr.forEach(t),cuo=r(e6e," \u2014 "),II=n(e6e,"A",{href:!0});var lYr=s(II);fuo=r(lYr,"GPTJModel"),lYr.forEach(t),muo=r(e6e," (GPT-J model)"),e6e.forEach(t),guo=i($),Rp=n($,"LI",{});var o6e=s(Rp);lse=n(o6e,"STRONG",{});var iYr=s(lse);huo=r(iYr,"hubert"),iYr.forEach(t),puo=r(o6e," \u2014 "),qI=n(o6e,"A",{href:!0});var dYr=s(qI);uuo=r(dYr,"HubertModel"),dYr.forEach(t),_uo=r(o6e," (Hubert model)"),o6e.forEach(t),buo=i($),Pp=n($,"LI",{});var r6e=s(Pp);ise=n(r6e,"STRONG",{});var cYr=s(ise);vuo=r(cYr,"ibert"),cYr.forEach(t),Fuo=r(r6e," \u2014 "),NI=n(r6e,"A",{href:!0});var fYr=s(NI);Tuo=r(fYr,"IBertModel"),fYr.forEach(t),Muo=r(r6e," (I-BERT model)"),r6e.forEach(t),Euo=i($),Bp=n($,"LI",{});var t6e=s(Bp);dse=n(t6e,"STRONG",{});var mYr=s(dse);Cuo=r(mYr,"imagegpt"),mYr.forEach(t),wuo=r(t6e," \u2014 "),jI=n(t6e,"A",{href:!0});var gYr=s(jI);Auo=r(gYr,"ImageGPTModel"),gYr.forEach(t),yuo=r(t6e," (ImageGPT model)"),t6e.forEach(t),Luo=i($),Ip=n($,"LI",{});var a6e=s(Ip);cse=n(a6e,"STRONG",{});var hYr=s(cse);xuo=r(hYr,"layoutlm"),hYr.forEach(t),$uo=r(a6e," \u2014 "),DI=n(a6e,"A",{href:!0});var pYr=s(DI);kuo=r(pYr,"LayoutLMModel"),pYr.forEach(t),Suo=r(a6e," (LayoutLM model)"),a6e.forEach(t),Ruo=i($),qp=n($,"LI",{});var n6e=s(qp);fse=n(n6e,"STRONG",{});var uYr=s(fse);Puo=r(uYr,"layoutlmv2"),uYr.forEach(t),Buo=r(n6e," \u2014 "),GI=n(n6e,"A",{href:!0});var _Yr=s(GI);Iuo=r(_Yr,"LayoutLMv2Model"),_Yr.forEach(t),quo=r(n6e," (LayoutLMv2 model)"),n6e.forEach(t),Nuo=i($),Np=n($,"LI",{});var s6e=s(Np);mse=n(s6e,"STRONG",{});var bYr=s(mse);juo=r(bYr,"led"),bYr.forEach(t),Duo=r(s6e," \u2014 "),OI=n(s6e,"A",{href:!0});var vYr=s(OI);Guo=r(vYr,"LEDModel"),vYr.forEach(t),Ouo=r(s6e," (LED model)"),s6e.forEach(t),Vuo=i($),jp=n($,"LI",{});var l6e=s(jp);gse=n(l6e,"STRONG",{});var FYr=s(gse);Xuo=r(FYr,"longformer"),FYr.forEach(t),zuo=r(l6e," \u2014 "),VI=n(l6e,"A",{href:!0});var TYr=s(VI);Wuo=r(TYr,"LongformerModel"),TYr.forEach(t),Quo=r(l6e," (Longformer model)"),l6e.forEach(t),Huo=i($),Dp=n($,"LI",{});var i6e=s(Dp);hse=n(i6e,"STRONG",{});var MYr=s(hse);Uuo=r(MYr,"luke"),MYr.forEach(t),Juo=r(i6e," \u2014 "),XI=n(i6e,"A",{href:!0});var EYr=s(XI);Yuo=r(EYr,"LukeModel"),EYr.forEach(t),Kuo=r(i6e," (LUKE model)"),i6e.forEach(t),Zuo=i($),Gp=n($,"LI",{});var d6e=s(Gp);pse=n(d6e,"STRONG",{});var CYr=s(pse);e_o=r(CYr,"lxmert"),CYr.forEach(t),o_o=r(d6e," \u2014 "),zI=n(d6e,"A",{href:!0});var wYr=s(zI);r_o=r(wYr,"LxmertModel"),wYr.forEach(t),t_o=r(d6e," (LXMERT model)"),d6e.forEach(t),a_o=i($),Op=n($,"LI",{});var c6e=s(Op);use=n(c6e,"STRONG",{});var AYr=s(use);n_o=r(AYr,"m2m_100"),AYr.forEach(t),s_o=r(c6e," \u2014 "),WI=n(c6e,"A",{href:!0});var yYr=s(WI);l_o=r(yYr,"M2M100Model"),yYr.forEach(t),i_o=r(c6e," (M2M100 model)"),c6e.forEach(t),d_o=i($),Vp=n($,"LI",{});var f6e=s(Vp);_se=n(f6e,"STRONG",{});var LYr=s(_se);c_o=r(LYr,"marian"),LYr.forEach(t),f_o=r(f6e," \u2014 "),QI=n(f6e,"A",{href:!0});var xYr=s(QI);m_o=r(xYr,"MarianModel"),xYr.forEach(t),g_o=r(f6e," (Marian model)"),f6e.forEach(t),h_o=i($),Xp=n($,"LI",{});var m6e=s(Xp);bse=n(m6e,"STRONG",{});var $Yr=s(bse);p_o=r($Yr,"maskformer"),$Yr.forEach(t),u_o=r(m6e," \u2014 "),HI=n(m6e,"A",{href:!0});var kYr=s(HI);__o=r(kYr,"MaskFormerModel"),kYr.forEach(t),b_o=r(m6e," (MaskFormer model)"),m6e.forEach(t),v_o=i($),zp=n($,"LI",{});var g6e=s(zp);vse=n(g6e,"STRONG",{});var SYr=s(vse);F_o=r(SYr,"mbart"),SYr.forEach(t),T_o=r(g6e," \u2014 "),UI=n(g6e,"A",{href:!0});var RYr=s(UI);M_o=r(RYr,"MBartModel"),RYr.forEach(t),E_o=r(g6e," (mBART model)"),g6e.forEach(t),C_o=i($),Wp=n($,"LI",{});var h6e=s(Wp);Fse=n(h6e,"STRONG",{});var PYr=s(Fse);w_o=r(PYr,"megatron-bert"),PYr.forEach(t),A_o=r(h6e," \u2014 "),JI=n(h6e,"A",{href:!0});var BYr=s(JI);y_o=r(BYr,"MegatronBertModel"),BYr.forEach(t),L_o=r(h6e," (MegatronBert model)"),h6e.forEach(t),x_o=i($),Qp=n($,"LI",{});var p6e=s(Qp);Tse=n(p6e,"STRONG",{});var IYr=s(Tse);$_o=r(IYr,"mobilebert"),IYr.forEach(t),k_o=r(p6e," \u2014 "),YI=n(p6e,"A",{href:!0});var qYr=s(YI);S_o=r(qYr,"MobileBertModel"),qYr.forEach(t),R_o=r(p6e," (MobileBERT model)"),p6e.forEach(t),P_o=i($),Hp=n($,"LI",{});var u6e=s(Hp);Mse=n(u6e,"STRONG",{});var NYr=s(Mse);B_o=r(NYr,"mpnet"),NYr.forEach(t),I_o=r(u6e," \u2014 "),KI=n(u6e,"A",{href:!0});var jYr=s(KI);q_o=r(jYr,"MPNetModel"),jYr.forEach(t),N_o=r(u6e," (MPNet model)"),u6e.forEach(t),j_o=i($),Up=n($,"LI",{});var _6e=s(Up);Ese=n(_6e,"STRONG",{});var DYr=s(Ese);D_o=r(DYr,"mt5"),DYr.forEach(t),G_o=r(_6e," \u2014 "),ZI=n(_6e,"A",{href:!0});var GYr=s(ZI);O_o=r(GYr,"MT5Model"),GYr.forEach(t),V_o=r(_6e," (mT5 model)"),_6e.forEach(t),X_o=i($),Jp=n($,"LI",{});var b6e=s(Jp);Cse=n(b6e,"STRONG",{});var OYr=s(Cse);z_o=r(OYr,"nystromformer"),OYr.forEach(t),W_o=r(b6e," \u2014 "),eq=n(b6e,"A",{href:!0});var VYr=s(eq);Q_o=r(VYr,"NystromformerModel"),VYr.forEach(t),H_o=r(b6e," (Nystromformer model)"),b6e.forEach(t),U_o=i($),Yp=n($,"LI",{});var v6e=s(Yp);wse=n(v6e,"STRONG",{});var XYr=s(wse);J_o=r(XYr,"openai-gpt"),XYr.forEach(t),Y_o=r(v6e," \u2014 "),oq=n(v6e,"A",{href:!0});var zYr=s(oq);K_o=r(zYr,"OpenAIGPTModel"),zYr.forEach(t),Z_o=r(v6e," (OpenAI GPT model)"),v6e.forEach(t),e2o=i($),Kp=n($,"LI",{});var F6e=s(Kp);Ase=n(F6e,"STRONG",{});var WYr=s(Ase);o2o=r(WYr,"opt"),WYr.forEach(t),r2o=r(F6e," \u2014 "),rq=n(F6e,"A",{href:!0});var QYr=s(rq);t2o=r(QYr,"OPTModel"),QYr.forEach(t),a2o=r(F6e," (OPT model)"),F6e.forEach(t),n2o=i($),Zp=n($,"LI",{});var T6e=s(Zp);yse=n(T6e,"STRONG",{});var HYr=s(yse);s2o=r(HYr,"pegasus"),HYr.forEach(t),l2o=r(T6e," \u2014 "),tq=n(T6e,"A",{href:!0});var UYr=s(tq);i2o=r(UYr,"PegasusModel"),UYr.forEach(t),d2o=r(T6e," (Pegasus model)"),T6e.forEach(t),c2o=i($),eu=n($,"LI",{});var M6e=s(eu);Lse=n(M6e,"STRONG",{});var JYr=s(Lse);f2o=r(JYr,"perceiver"),JYr.forEach(t),m2o=r(M6e," \u2014 "),aq=n(M6e,"A",{href:!0});var YYr=s(aq);g2o=r(YYr,"PerceiverModel"),YYr.forEach(t),h2o=r(M6e," (Perceiver model)"),M6e.forEach(t),p2o=i($),ou=n($,"LI",{});var E6e=s(ou);xse=n(E6e,"STRONG",{});var KYr=s(xse);u2o=r(KYr,"plbart"),KYr.forEach(t),_2o=r(E6e," \u2014 "),nq=n(E6e,"A",{href:!0});var ZYr=s(nq);b2o=r(ZYr,"PLBartModel"),ZYr.forEach(t),v2o=r(E6e," (PLBart model)"),E6e.forEach(t),F2o=i($),ru=n($,"LI",{});var C6e=s(ru);$se=n(C6e,"STRONG",{});var eKr=s($se);T2o=r(eKr,"poolformer"),eKr.forEach(t),M2o=r(C6e," \u2014 "),sq=n(C6e,"A",{href:!0});var oKr=s(sq);E2o=r(oKr,"PoolFormerModel"),oKr.forEach(t),C2o=r(C6e," (PoolFormer model)"),C6e.forEach(t),w2o=i($),tu=n($,"LI",{});var w6e=s(tu);kse=n(w6e,"STRONG",{});var rKr=s(kse);A2o=r(rKr,"prophetnet"),rKr.forEach(t),y2o=r(w6e," \u2014 "),lq=n(w6e,"A",{href:!0});var tKr=s(lq);L2o=r(tKr,"ProphetNetModel"),tKr.forEach(t),x2o=r(w6e," (ProphetNet model)"),w6e.forEach(t),$2o=i($),au=n($,"LI",{});var A6e=s(au);Sse=n(A6e,"STRONG",{});var aKr=s(Sse);k2o=r(aKr,"qdqbert"),aKr.forEach(t),S2o=r(A6e," \u2014 "),iq=n(A6e,"A",{href:!0});var nKr=s(iq);R2o=r(nKr,"QDQBertModel"),nKr.forEach(t),P2o=r(A6e," (QDQBert model)"),A6e.forEach(t),B2o=i($),nu=n($,"LI",{});var y6e=s(nu);Rse=n(y6e,"STRONG",{});var sKr=s(Rse);I2o=r(sKr,"reformer"),sKr.forEach(t),q2o=r(y6e," \u2014 "),dq=n(y6e,"A",{href:!0});var lKr=s(dq);N2o=r(lKr,"ReformerModel"),lKr.forEach(t),j2o=r(y6e," (Reformer model)"),y6e.forEach(t),D2o=i($),su=n($,"LI",{});var L6e=s(su);Pse=n(L6e,"STRONG",{});var iKr=s(Pse);G2o=r(iKr,"regnet"),iKr.forEach(t),O2o=r(L6e," \u2014 "),cq=n(L6e,"A",{href:!0});var dKr=s(cq);V2o=r(dKr,"RegNetModel"),dKr.forEach(t),X2o=r(L6e," (RegNet model)"),L6e.forEach(t),z2o=i($),lu=n($,"LI",{});var x6e=s(lu);Bse=n(x6e,"STRONG",{});var cKr=s(Bse);W2o=r(cKr,"rembert"),cKr.forEach(t),Q2o=r(x6e," \u2014 "),fq=n(x6e,"A",{href:!0});var fKr=s(fq);H2o=r(fKr,"RemBertModel"),fKr.forEach(t),U2o=r(x6e," (RemBERT model)"),x6e.forEach(t),J2o=i($),iu=n($,"LI",{});var $6e=s(iu);Ise=n($6e,"STRONG",{});var mKr=s(Ise);Y2o=r(mKr,"resnet"),mKr.forEach(t),K2o=r($6e," \u2014 "),mq=n($6e,"A",{href:!0});var gKr=s(mq);Z2o=r(gKr,"ResNetModel"),gKr.forEach(t),e1o=r($6e," (ResNet model)"),$6e.forEach(t),o1o=i($),du=n($,"LI",{});var k6e=s(du);qse=n(k6e,"STRONG",{});var hKr=s(qse);r1o=r(hKr,"retribert"),hKr.forEach(t),t1o=r(k6e," \u2014 "),gq=n(k6e,"A",{href:!0});var pKr=s(gq);a1o=r(pKr,"RetriBertModel"),pKr.forEach(t),n1o=r(k6e," (RetriBERT model)"),k6e.forEach(t),s1o=i($),cu=n($,"LI",{});var S6e=s(cu);Nse=n(S6e,"STRONG",{});var uKr=s(Nse);l1o=r(uKr,"roberta"),uKr.forEach(t),i1o=r(S6e," \u2014 "),hq=n(S6e,"A",{href:!0});var _Kr=s(hq);d1o=r(_Kr,"RobertaModel"),_Kr.forEach(t),c1o=r(S6e," (RoBERTa model)"),S6e.forEach(t),f1o=i($),fu=n($,"LI",{});var R6e=s(fu);jse=n(R6e,"STRONG",{});var bKr=s(jse);m1o=r(bKr,"roformer"),bKr.forEach(t),g1o=r(R6e," \u2014 "),pq=n(R6e,"A",{href:!0});var vKr=s(pq);h1o=r(vKr,"RoFormerModel"),vKr.forEach(t),p1o=r(R6e," (RoFormer model)"),R6e.forEach(t),u1o=i($),mu=n($,"LI",{});var P6e=s(mu);Dse=n(P6e,"STRONG",{});var FKr=s(Dse);_1o=r(FKr,"segformer"),FKr.forEach(t),b1o=r(P6e," \u2014 "),uq=n(P6e,"A",{href:!0});var TKr=s(uq);v1o=r(TKr,"SegformerModel"),TKr.forEach(t),F1o=r(P6e," (SegFormer model)"),P6e.forEach(t),T1o=i($),gu=n($,"LI",{});var B6e=s(gu);Gse=n(B6e,"STRONG",{});var MKr=s(Gse);M1o=r(MKr,"sew"),MKr.forEach(t),E1o=r(B6e," \u2014 "),_q=n(B6e,"A",{href:!0});var EKr=s(_q);C1o=r(EKr,"SEWModel"),EKr.forEach(t),w1o=r(B6e," (SEW model)"),B6e.forEach(t),A1o=i($),hu=n($,"LI",{});var I6e=s(hu);Ose=n(I6e,"STRONG",{});var CKr=s(Ose);y1o=r(CKr,"sew-d"),CKr.forEach(t),L1o=r(I6e," \u2014 "),bq=n(I6e,"A",{href:!0});var wKr=s(bq);x1o=r(wKr,"SEWDModel"),wKr.forEach(t),$1o=r(I6e," (SEW-D model)"),I6e.forEach(t),k1o=i($),pu=n($,"LI",{});var q6e=s(pu);Vse=n(q6e,"STRONG",{});var AKr=s(Vse);S1o=r(AKr,"speech_to_text"),AKr.forEach(t),R1o=r(q6e," \u2014 "),vq=n(q6e,"A",{href:!0});var yKr=s(vq);P1o=r(yKr,"Speech2TextModel"),yKr.forEach(t),B1o=r(q6e," (Speech2Text model)"),q6e.forEach(t),I1o=i($),uu=n($,"LI",{});var N6e=s(uu);Xse=n(N6e,"STRONG",{});var LKr=s(Xse);q1o=r(LKr,"splinter"),LKr.forEach(t),N1o=r(N6e," \u2014 "),Fq=n(N6e,"A",{href:!0});var xKr=s(Fq);j1o=r(xKr,"SplinterModel"),xKr.forEach(t),D1o=r(N6e," (Splinter model)"),N6e.forEach(t),G1o=i($),_u=n($,"LI",{});var j6e=s(_u);zse=n(j6e,"STRONG",{});var $Kr=s(zse);O1o=r($Kr,"squeezebert"),$Kr.forEach(t),V1o=r(j6e," \u2014 "),Tq=n(j6e,"A",{href:!0});var kKr=s(Tq);X1o=r(kKr,"SqueezeBertModel"),kKr.forEach(t),z1o=r(j6e," (SqueezeBERT model)"),j6e.forEach(t),W1o=i($),bu=n($,"LI",{});var D6e=s(bu);Wse=n(D6e,"STRONG",{});var SKr=s(Wse);Q1o=r(SKr,"swin"),SKr.forEach(t),H1o=r(D6e," \u2014 "),Mq=n(D6e,"A",{href:!0});var RKr=s(Mq);U1o=r(RKr,"SwinModel"),RKr.forEach(t),J1o=r(D6e," (Swin model)"),D6e.forEach(t),Y1o=i($),vu=n($,"LI",{});var G6e=s(vu);Qse=n(G6e,"STRONG",{});var PKr=s(Qse);K1o=r(PKr,"t5"),PKr.forEach(t),Z1o=r(G6e," \u2014 "),Eq=n(G6e,"A",{href:!0});var BKr=s(Eq);e7o=r(BKr,"T5Model"),BKr.forEach(t),o7o=r(G6e," (T5 model)"),G6e.forEach(t),r7o=i($),Fu=n($,"LI",{});var O6e=s(Fu);Hse=n(O6e,"STRONG",{});var IKr=s(Hse);t7o=r(IKr,"tapas"),IKr.forEach(t),a7o=r(O6e," \u2014 "),Cq=n(O6e,"A",{href:!0});var qKr=s(Cq);n7o=r(qKr,"TapasModel"),qKr.forEach(t),s7o=r(O6e," (TAPAS model)"),O6e.forEach(t),l7o=i($),Tu=n($,"LI",{});var V6e=s(Tu);Use=n(V6e,"STRONG",{});var NKr=s(Use);i7o=r(NKr,"transfo-xl"),NKr.forEach(t),d7o=r(V6e," \u2014 "),wq=n(V6e,"A",{href:!0});var jKr=s(wq);c7o=r(jKr,"TransfoXLModel"),jKr.forEach(t),f7o=r(V6e," (Transformer-XL model)"),V6e.forEach(t),m7o=i($),Mu=n($,"LI",{});var X6e=s(Mu);Jse=n(X6e,"STRONG",{});var DKr=s(Jse);g7o=r(DKr,"unispeech"),DKr.forEach(t),h7o=r(X6e," \u2014 "),Aq=n(X6e,"A",{href:!0});var GKr=s(Aq);p7o=r(GKr,"UniSpeechModel"),GKr.forEach(t),u7o=r(X6e," (UniSpeech model)"),X6e.forEach(t),_7o=i($),Eu=n($,"LI",{});var z6e=s(Eu);Yse=n(z6e,"STRONG",{});var OKr=s(Yse);b7o=r(OKr,"unispeech-sat"),OKr.forEach(t),v7o=r(z6e," \u2014 "),yq=n(z6e,"A",{href:!0});var VKr=s(yq);F7o=r(VKr,"UniSpeechSatModel"),VKr.forEach(t),T7o=r(z6e," (UniSpeechSat model)"),z6e.forEach(t),M7o=i($),Cu=n($,"LI",{});var W6e=s(Cu);Kse=n(W6e,"STRONG",{});var XKr=s(Kse);E7o=r(XKr,"van"),XKr.forEach(t),C7o=r(W6e," \u2014 "),Lq=n(W6e,"A",{href:!0});var zKr=s(Lq);w7o=r(zKr,"VanModel"),zKr.forEach(t),A7o=r(W6e," (VAN model)"),W6e.forEach(t),y7o=i($),wu=n($,"LI",{});var Q6e=s(wu);Zse=n(Q6e,"STRONG",{});var WKr=s(Zse);L7o=r(WKr,"vilt"),WKr.forEach(t),x7o=r(Q6e," \u2014 "),xq=n(Q6e,"A",{href:!0});var QKr=s(xq);$7o=r(QKr,"ViltModel"),QKr.forEach(t),k7o=r(Q6e," (ViLT model)"),Q6e.forEach(t),S7o=i($),Au=n($,"LI",{});var H6e=s(Au);ele=n(H6e,"STRONG",{});var HKr=s(ele);R7o=r(HKr,"vision-text-dual-encoder"),HKr.forEach(t),P7o=r(H6e," \u2014 "),$q=n(H6e,"A",{href:!0});var UKr=s($q);B7o=r(UKr,"VisionTextDualEncoderModel"),UKr.forEach(t),I7o=r(H6e," (VisionTextDualEncoder model)"),H6e.forEach(t),q7o=i($),yu=n($,"LI",{});var U6e=s(yu);ole=n(U6e,"STRONG",{});var JKr=s(ole);N7o=r(JKr,"visual_bert"),JKr.forEach(t),j7o=r(U6e," \u2014 "),kq=n(U6e,"A",{href:!0});var YKr=s(kq);D7o=r(YKr,"VisualBertModel"),YKr.forEach(t),G7o=r(U6e," (VisualBert model)"),U6e.forEach(t),O7o=i($),Lu=n($,"LI",{});var J6e=s(Lu);rle=n(J6e,"STRONG",{});var KKr=s(rle);V7o=r(KKr,"vit"),KKr.forEach(t),X7o=r(J6e," \u2014 "),Sq=n(J6e,"A",{href:!0});var ZKr=s(Sq);z7o=r(ZKr,"ViTModel"),ZKr.forEach(t),W7o=r(J6e," (ViT model)"),J6e.forEach(t),Q7o=i($),xu=n($,"LI",{});var Y6e=s(xu);tle=n(Y6e,"STRONG",{});var eZr=s(tle);H7o=r(eZr,"vit_mae"),eZr.forEach(t),U7o=r(Y6e," \u2014 "),Rq=n(Y6e,"A",{href:!0});var oZr=s(Rq);J7o=r(oZr,"ViTMAEModel"),oZr.forEach(t),Y7o=r(Y6e," (ViTMAE model)"),Y6e.forEach(t),K7o=i($),$u=n($,"LI",{});var K6e=s($u);ale=n(K6e,"STRONG",{});var rZr=s(ale);Z7o=r(rZr,"wav2vec2"),rZr.forEach(t),ebo=r(K6e," \u2014 "),Pq=n(K6e,"A",{href:!0});var tZr=s(Pq);obo=r(tZr,"Wav2Vec2Model"),tZr.forEach(t),rbo=r(K6e," (Wav2Vec2 model)"),K6e.forEach(t),tbo=i($),ku=n($,"LI",{});var Z6e=s(ku);nle=n(Z6e,"STRONG",{});var aZr=s(nle);abo=r(aZr,"wav2vec2-conformer"),aZr.forEach(t),nbo=r(Z6e," \u2014 "),Bq=n(Z6e,"A",{href:!0});var nZr=s(Bq);sbo=r(nZr,"Wav2Vec2ConformerModel"),nZr.forEach(t),lbo=r(Z6e," (Wav2Vec2-Conformer model)"),Z6e.forEach(t),ibo=i($),Su=n($,"LI",{});var e0e=s(Su);sle=n(e0e,"STRONG",{});var sZr=s(sle);dbo=r(sZr,"wavlm"),sZr.forEach(t),cbo=r(e0e," \u2014 "),Iq=n(e0e,"A",{href:!0});var lZr=s(Iq);fbo=r(lZr,"WavLMModel"),lZr.forEach(t),mbo=r(e0e," (WavLM model)"),e0e.forEach(t),gbo=i($),Ru=n($,"LI",{});var o0e=s(Ru);lle=n(o0e,"STRONG",{});var iZr=s(lle);hbo=r(iZr,"xglm"),iZr.forEach(t),pbo=r(o0e," \u2014 "),qq=n(o0e,"A",{href:!0});var dZr=s(qq);ubo=r(dZr,"XGLMModel"),dZr.forEach(t),_bo=r(o0e," (XGLM model)"),o0e.forEach(t),bbo=i($),Pu=n($,"LI",{});var r0e=s(Pu);ile=n(r0e,"STRONG",{});var cZr=s(ile);vbo=r(cZr,"xlm"),cZr.forEach(t),Fbo=r(r0e," \u2014 "),Nq=n(r0e,"A",{href:!0});var fZr=s(Nq);Tbo=r(fZr,"XLMModel"),fZr.forEach(t),Mbo=r(r0e," (XLM model)"),r0e.forEach(t),Ebo=i($),Bu=n($,"LI",{});var t0e=s(Bu);dle=n(t0e,"STRONG",{});var mZr=s(dle);Cbo=r(mZr,"xlm-prophetnet"),mZr.forEach(t),wbo=r(t0e," \u2014 "),jq=n(t0e,"A",{href:!0});var gZr=s(jq);Abo=r(gZr,"XLMProphetNetModel"),gZr.forEach(t),ybo=r(t0e," (XLMProphetNet model)"),t0e.forEach(t),Lbo=i($),Iu=n($,"LI",{});var a0e=s(Iu);cle=n(a0e,"STRONG",{});var hZr=s(cle);xbo=r(hZr,"xlm-roberta"),hZr.forEach(t),$bo=r(a0e," \u2014 "),Dq=n(a0e,"A",{href:!0});var pZr=s(Dq);kbo=r(pZr,"XLMRobertaModel"),pZr.forEach(t),Sbo=r(a0e," (XLM-RoBERTa model)"),a0e.forEach(t),Rbo=i($),qu=n($,"LI",{});var n0e=s(qu);fle=n(n0e,"STRONG",{});var uZr=s(fle);Pbo=r(uZr,"xlm-roberta-xl"),uZr.forEach(t),Bbo=r(n0e," \u2014 "),Gq=n(n0e,"A",{href:!0});var _Zr=s(Gq);Ibo=r(_Zr,"XLMRobertaXLModel"),_Zr.forEach(t),qbo=r(n0e," (XLM-RoBERTa-XL model)"),n0e.forEach(t),Nbo=i($),Nu=n($,"LI",{});var s0e=s(Nu);mle=n(s0e,"STRONG",{});var bZr=s(mle);jbo=r(bZr,"xlnet"),bZr.forEach(t),Dbo=r(s0e," \u2014 "),Oq=n(s0e,"A",{href:!0});var vZr=s(Oq);Gbo=r(vZr,"XLNetModel"),vZr.forEach(t),Obo=r(s0e," (XLNet model)"),s0e.forEach(t),Vbo=i($),ju=n($,"LI",{});var l0e=s(ju);gle=n(l0e,"STRONG",{});var FZr=s(gle);Xbo=r(FZr,"yolos"),FZr.forEach(t),zbo=r(l0e," \u2014 "),Vq=n(l0e,"A",{href:!0});var TZr=s(Vq);Wbo=r(TZr,"YolosModel"),TZr.forEach(t),Qbo=r(l0e," (YOLOS model)"),l0e.forEach(t),Hbo=i($),Du=n($,"LI",{});var i0e=s(Du);hle=n(i0e,"STRONG",{});var MZr=s(hle);Ubo=r(MZr,"yoso"),MZr.forEach(t),Jbo=r(i0e," \u2014 "),Xq=n(i0e,"A",{href:!0});var EZr=s(Xq);Ybo=r(EZr,"YosoModel"),EZr.forEach(t),Kbo=r(i0e," (YOSO model)"),i0e.forEach(t),$.forEach(t),Zbo=i(oa),Gu=n(oa,"P",{});var d0e=s(Gu);e5o=r(d0e,"The model is set in evaluation mode by default using "),ple=n(d0e,"CODE",{});var CZr=s(ple);o5o=r(CZr,"model.eval()"),CZr.forEach(t),r5o=r(d0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=n(d0e,"CODE",{});var wZr=s(ule);t5o=r(wZr,"model.train()"),wZr.forEach(t),d0e.forEach(t),a5o=i(oa),T(Ou.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),DIe=i(f),yi=n(f,"H2",{class:!0});var XNe=s(yi);Vu=n(XNe,"A",{id:!0,class:!0,href:!0});var AZr=s(Vu);_le=n(AZr,"SPAN",{});var yZr=s(_le);T(N0.$$.fragment,yZr),yZr.forEach(t),AZr.forEach(t),n5o=i(XNe),ble=n(XNe,"SPAN",{});var LZr=s(ble);s5o=r(LZr,"AutoModelForPreTraining"),LZr.forEach(t),XNe.forEach(t),GIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(j0.$$.fragment,Gs),l5o=i(Gs),Li=n(Gs,"P",{});var xK=s(Li);i5o=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zq=n(xK,"A",{href:!0});var xZr=s(zq);d5o=r(xZr,"from_pretrained()"),xZr.forEach(t),c5o=r(xK," class method or the "),Wq=n(xK,"A",{href:!0});var $Zr=s(Wq);f5o=r($Zr,"from_config()"),$Zr.forEach(t),m5o=r(xK,` class
method.`),xK.forEach(t),g5o=i(Gs),D0=n(Gs,"P",{});var zNe=s(D0);h5o=r(zNe,"This class cannot be instantiated directly using "),vle=n(zNe,"CODE",{});var kZr=s(vle);p5o=r(kZr,"__init__()"),kZr.forEach(t),u5o=r(zNe," (throws an error)."),zNe.forEach(t),_5o=i(Gs),at=n(Gs,"DIV",{class:!0});var gA=s(at);T(G0.$$.fragment,gA),b5o=i(gA),Fle=n(gA,"P",{});var SZr=s(Fle);v5o=r(SZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SZr.forEach(t),F5o=i(gA),xi=n(gA,"P",{});var $K=s(xi);T5o=r($K,`Note:
Loading a model from its configuration file does `),Tle=n($K,"STRONG",{});var RZr=s(Tle);M5o=r(RZr,"not"),RZr.forEach(t),E5o=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=n($K,"A",{href:!0});var PZr=s(Qq);C5o=r(PZr,"from_pretrained()"),PZr.forEach(t),w5o=r($K," to load the model weights."),$K.forEach(t),A5o=i(gA),T(Xu.$$.fragment,gA),gA.forEach(t),y5o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(O0.$$.fragment,ra),L5o=i(ra),Mle=n(ra,"P",{});var BZr=s(Mle);x5o=r(BZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BZr.forEach(t),$5o=i(ra),xa=n(ra,"P",{});var hA=s(xa);k5o=r(hA,"The model class to instantiate is selected based on the "),Ele=n(hA,"CODE",{});var IZr=s(Ele);S5o=r(IZr,"model_type"),IZr.forEach(t),R5o=r(hA,` property of the config object (either
passed as an argument or loaded from `),Cle=n(hA,"CODE",{});var qZr=s(Cle);P5o=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),B5o=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(hA,"CODE",{});var NZr=s(wle);I5o=r(NZr,"pretrained_model_name_or_path"),NZr.forEach(t),q5o=r(hA,":"),hA.forEach(t),N5o=i(ra),G=n(ra,"UL",{});var O=s(G);zu=n(O,"LI",{});var c0e=s(zu);Ale=n(c0e,"STRONG",{});var jZr=s(Ale);j5o=r(jZr,"albert"),jZr.forEach(t),D5o=r(c0e," \u2014 "),Hq=n(c0e,"A",{href:!0});var DZr=s(Hq);G5o=r(DZr,"AlbertForPreTraining"),DZr.forEach(t),O5o=r(c0e," (ALBERT model)"),c0e.forEach(t),V5o=i(O),Wu=n(O,"LI",{});var f0e=s(Wu);yle=n(f0e,"STRONG",{});var GZr=s(yle);X5o=r(GZr,"bart"),GZr.forEach(t),z5o=r(f0e," \u2014 "),Uq=n(f0e,"A",{href:!0});var OZr=s(Uq);W5o=r(OZr,"BartForConditionalGeneration"),OZr.forEach(t),Q5o=r(f0e," (BART model)"),f0e.forEach(t),H5o=i(O),Qu=n(O,"LI",{});var m0e=s(Qu);Lle=n(m0e,"STRONG",{});var VZr=s(Lle);U5o=r(VZr,"bert"),VZr.forEach(t),J5o=r(m0e," \u2014 "),Jq=n(m0e,"A",{href:!0});var XZr=s(Jq);Y5o=r(XZr,"BertForPreTraining"),XZr.forEach(t),K5o=r(m0e," (BERT model)"),m0e.forEach(t),Z5o=i(O),Hu=n(O,"LI",{});var g0e=s(Hu);xle=n(g0e,"STRONG",{});var zZr=s(xle);evo=r(zZr,"big_bird"),zZr.forEach(t),ovo=r(g0e," \u2014 "),Yq=n(g0e,"A",{href:!0});var WZr=s(Yq);rvo=r(WZr,"BigBirdForPreTraining"),WZr.forEach(t),tvo=r(g0e," (BigBird model)"),g0e.forEach(t),avo=i(O),Uu=n(O,"LI",{});var h0e=s(Uu);$le=n(h0e,"STRONG",{});var QZr=s($le);nvo=r(QZr,"camembert"),QZr.forEach(t),svo=r(h0e," \u2014 "),Kq=n(h0e,"A",{href:!0});var HZr=s(Kq);lvo=r(HZr,"CamembertForMaskedLM"),HZr.forEach(t),ivo=r(h0e," (CamemBERT model)"),h0e.forEach(t),dvo=i(O),Ju=n(O,"LI",{});var p0e=s(Ju);kle=n(p0e,"STRONG",{});var UZr=s(kle);cvo=r(UZr,"ctrl"),UZr.forEach(t),fvo=r(p0e," \u2014 "),Zq=n(p0e,"A",{href:!0});var JZr=s(Zq);mvo=r(JZr,"CTRLLMHeadModel"),JZr.forEach(t),gvo=r(p0e," (CTRL model)"),p0e.forEach(t),hvo=i(O),Yu=n(O,"LI",{});var u0e=s(Yu);Sle=n(u0e,"STRONG",{});var YZr=s(Sle);pvo=r(YZr,"data2vec-text"),YZr.forEach(t),uvo=r(u0e," \u2014 "),eN=n(u0e,"A",{href:!0});var KZr=s(eN);_vo=r(KZr,"Data2VecTextForMaskedLM"),KZr.forEach(t),bvo=r(u0e," (Data2VecText model)"),u0e.forEach(t),vvo=i(O),Ku=n(O,"LI",{});var _0e=s(Ku);Rle=n(_0e,"STRONG",{});var ZZr=s(Rle);Fvo=r(ZZr,"deberta"),ZZr.forEach(t),Tvo=r(_0e," \u2014 "),oN=n(_0e,"A",{href:!0});var eet=s(oN);Mvo=r(eet,"DebertaForMaskedLM"),eet.forEach(t),Evo=r(_0e," (DeBERTa model)"),_0e.forEach(t),Cvo=i(O),Zu=n(O,"LI",{});var b0e=s(Zu);Ple=n(b0e,"STRONG",{});var oet=s(Ple);wvo=r(oet,"deberta-v2"),oet.forEach(t),Avo=r(b0e," \u2014 "),rN=n(b0e,"A",{href:!0});var ret=s(rN);yvo=r(ret,"DebertaV2ForMaskedLM"),ret.forEach(t),Lvo=r(b0e," (DeBERTa-v2 model)"),b0e.forEach(t),xvo=i(O),e_=n(O,"LI",{});var v0e=s(e_);Ble=n(v0e,"STRONG",{});var tet=s(Ble);$vo=r(tet,"distilbert"),tet.forEach(t),kvo=r(v0e," \u2014 "),tN=n(v0e,"A",{href:!0});var aet=s(tN);Svo=r(aet,"DistilBertForMaskedLM"),aet.forEach(t),Rvo=r(v0e," (DistilBERT model)"),v0e.forEach(t),Pvo=i(O),o_=n(O,"LI",{});var F0e=s(o_);Ile=n(F0e,"STRONG",{});var net=s(Ile);Bvo=r(net,"electra"),net.forEach(t),Ivo=r(F0e," \u2014 "),aN=n(F0e,"A",{href:!0});var set=s(aN);qvo=r(set,"ElectraForPreTraining"),set.forEach(t),Nvo=r(F0e," (ELECTRA model)"),F0e.forEach(t),jvo=i(O),r_=n(O,"LI",{});var T0e=s(r_);qle=n(T0e,"STRONG",{});var iet=s(qle);Dvo=r(iet,"flaubert"),iet.forEach(t),Gvo=r(T0e," \u2014 "),nN=n(T0e,"A",{href:!0});var det=s(nN);Ovo=r(det,"FlaubertWithLMHeadModel"),det.forEach(t),Vvo=r(T0e," (FlauBERT model)"),T0e.forEach(t),Xvo=i(O),t_=n(O,"LI",{});var M0e=s(t_);Nle=n(M0e,"STRONG",{});var cet=s(Nle);zvo=r(cet,"flava"),cet.forEach(t),Wvo=r(M0e," \u2014 "),sN=n(M0e,"A",{href:!0});var fet=s(sN);Qvo=r(fet,"FlavaForPreTraining"),fet.forEach(t),Hvo=r(M0e," (Flava model)"),M0e.forEach(t),Uvo=i(O),a_=n(O,"LI",{});var E0e=s(a_);jle=n(E0e,"STRONG",{});var met=s(jle);Jvo=r(met,"fnet"),met.forEach(t),Yvo=r(E0e," \u2014 "),lN=n(E0e,"A",{href:!0});var get=s(lN);Kvo=r(get,"FNetForPreTraining"),get.forEach(t),Zvo=r(E0e," (FNet model)"),E0e.forEach(t),eFo=i(O),n_=n(O,"LI",{});var C0e=s(n_);Dle=n(C0e,"STRONG",{});var het=s(Dle);oFo=r(het,"fsmt"),het.forEach(t),rFo=r(C0e," \u2014 "),iN=n(C0e,"A",{href:!0});var pet=s(iN);tFo=r(pet,"FSMTForConditionalGeneration"),pet.forEach(t),aFo=r(C0e," (FairSeq Machine-Translation model)"),C0e.forEach(t),nFo=i(O),s_=n(O,"LI",{});var w0e=s(s_);Gle=n(w0e,"STRONG",{});var uet=s(Gle);sFo=r(uet,"funnel"),uet.forEach(t),lFo=r(w0e," \u2014 "),dN=n(w0e,"A",{href:!0});var _et=s(dN);iFo=r(_et,"FunnelForPreTraining"),_et.forEach(t),dFo=r(w0e," (Funnel Transformer model)"),w0e.forEach(t),cFo=i(O),l_=n(O,"LI",{});var A0e=s(l_);Ole=n(A0e,"STRONG",{});var bet=s(Ole);fFo=r(bet,"gpt2"),bet.forEach(t),mFo=r(A0e," \u2014 "),cN=n(A0e,"A",{href:!0});var vet=s(cN);gFo=r(vet,"GPT2LMHeadModel"),vet.forEach(t),hFo=r(A0e," (OpenAI GPT-2 model)"),A0e.forEach(t),pFo=i(O),i_=n(O,"LI",{});var y0e=s(i_);Vle=n(y0e,"STRONG",{});var Fet=s(Vle);uFo=r(Fet,"ibert"),Fet.forEach(t),_Fo=r(y0e," \u2014 "),fN=n(y0e,"A",{href:!0});var Tet=s(fN);bFo=r(Tet,"IBertForMaskedLM"),Tet.forEach(t),vFo=r(y0e," (I-BERT model)"),y0e.forEach(t),FFo=i(O),d_=n(O,"LI",{});var L0e=s(d_);Xle=n(L0e,"STRONG",{});var Met=s(Xle);TFo=r(Met,"layoutlm"),Met.forEach(t),MFo=r(L0e," \u2014 "),mN=n(L0e,"A",{href:!0});var Eet=s(mN);EFo=r(Eet,"LayoutLMForMaskedLM"),Eet.forEach(t),CFo=r(L0e," (LayoutLM model)"),L0e.forEach(t),wFo=i(O),c_=n(O,"LI",{});var x0e=s(c_);zle=n(x0e,"STRONG",{});var Cet=s(zle);AFo=r(Cet,"longformer"),Cet.forEach(t),yFo=r(x0e," \u2014 "),gN=n(x0e,"A",{href:!0});var wet=s(gN);LFo=r(wet,"LongformerForMaskedLM"),wet.forEach(t),xFo=r(x0e," (Longformer model)"),x0e.forEach(t),$Fo=i(O),f_=n(O,"LI",{});var $0e=s(f_);Wle=n($0e,"STRONG",{});var Aet=s(Wle);kFo=r(Aet,"lxmert"),Aet.forEach(t),SFo=r($0e," \u2014 "),hN=n($0e,"A",{href:!0});var yet=s(hN);RFo=r(yet,"LxmertForPreTraining"),yet.forEach(t),PFo=r($0e," (LXMERT model)"),$0e.forEach(t),BFo=i(O),m_=n(O,"LI",{});var k0e=s(m_);Qle=n(k0e,"STRONG",{});var Let=s(Qle);IFo=r(Let,"megatron-bert"),Let.forEach(t),qFo=r(k0e," \u2014 "),pN=n(k0e,"A",{href:!0});var xet=s(pN);NFo=r(xet,"MegatronBertForPreTraining"),xet.forEach(t),jFo=r(k0e," (MegatronBert model)"),k0e.forEach(t),DFo=i(O),g_=n(O,"LI",{});var S0e=s(g_);Hle=n(S0e,"STRONG",{});var $et=s(Hle);GFo=r($et,"mobilebert"),$et.forEach(t),OFo=r(S0e," \u2014 "),uN=n(S0e,"A",{href:!0});var ket=s(uN);VFo=r(ket,"MobileBertForPreTraining"),ket.forEach(t),XFo=r(S0e," (MobileBERT model)"),S0e.forEach(t),zFo=i(O),h_=n(O,"LI",{});var R0e=s(h_);Ule=n(R0e,"STRONG",{});var Set=s(Ule);WFo=r(Set,"mpnet"),Set.forEach(t),QFo=r(R0e," \u2014 "),_N=n(R0e,"A",{href:!0});var Ret=s(_N);HFo=r(Ret,"MPNetForMaskedLM"),Ret.forEach(t),UFo=r(R0e," (MPNet model)"),R0e.forEach(t),JFo=i(O),p_=n(O,"LI",{});var P0e=s(p_);Jle=n(P0e,"STRONG",{});var Pet=s(Jle);YFo=r(Pet,"openai-gpt"),Pet.forEach(t),KFo=r(P0e," \u2014 "),bN=n(P0e,"A",{href:!0});var Bet=s(bN);ZFo=r(Bet,"OpenAIGPTLMHeadModel"),Bet.forEach(t),eTo=r(P0e," (OpenAI GPT model)"),P0e.forEach(t),oTo=i(O),u_=n(O,"LI",{});var B0e=s(u_);Yle=n(B0e,"STRONG",{});var Iet=s(Yle);rTo=r(Iet,"retribert"),Iet.forEach(t),tTo=r(B0e," \u2014 "),vN=n(B0e,"A",{href:!0});var qet=s(vN);aTo=r(qet,"RetriBertModel"),qet.forEach(t),nTo=r(B0e," (RetriBERT model)"),B0e.forEach(t),sTo=i(O),__=n(O,"LI",{});var I0e=s(__);Kle=n(I0e,"STRONG",{});var Net=s(Kle);lTo=r(Net,"roberta"),Net.forEach(t),iTo=r(I0e," \u2014 "),FN=n(I0e,"A",{href:!0});var jet=s(FN);dTo=r(jet,"RobertaForMaskedLM"),jet.forEach(t),cTo=r(I0e," (RoBERTa model)"),I0e.forEach(t),fTo=i(O),b_=n(O,"LI",{});var q0e=s(b_);Zle=n(q0e,"STRONG",{});var Det=s(Zle);mTo=r(Det,"squeezebert"),Det.forEach(t),gTo=r(q0e," \u2014 "),TN=n(q0e,"A",{href:!0});var Get=s(TN);hTo=r(Get,"SqueezeBertForMaskedLM"),Get.forEach(t),pTo=r(q0e," (SqueezeBERT model)"),q0e.forEach(t),uTo=i(O),v_=n(O,"LI",{});var N0e=s(v_);eie=n(N0e,"STRONG",{});var Oet=s(eie);_To=r(Oet,"t5"),Oet.forEach(t),bTo=r(N0e," \u2014 "),MN=n(N0e,"A",{href:!0});var Vet=s(MN);vTo=r(Vet,"T5ForConditionalGeneration"),Vet.forEach(t),FTo=r(N0e," (T5 model)"),N0e.forEach(t),TTo=i(O),F_=n(O,"LI",{});var j0e=s(F_);oie=n(j0e,"STRONG",{});var Xet=s(oie);MTo=r(Xet,"tapas"),Xet.forEach(t),ETo=r(j0e," \u2014 "),EN=n(j0e,"A",{href:!0});var zet=s(EN);CTo=r(zet,"TapasForMaskedLM"),zet.forEach(t),wTo=r(j0e," (TAPAS model)"),j0e.forEach(t),ATo=i(O),T_=n(O,"LI",{});var D0e=s(T_);rie=n(D0e,"STRONG",{});var Wet=s(rie);yTo=r(Wet,"transfo-xl"),Wet.forEach(t),LTo=r(D0e," \u2014 "),CN=n(D0e,"A",{href:!0});var Qet=s(CN);xTo=r(Qet,"TransfoXLLMHeadModel"),Qet.forEach(t),$To=r(D0e," (Transformer-XL model)"),D0e.forEach(t),kTo=i(O),M_=n(O,"LI",{});var G0e=s(M_);tie=n(G0e,"STRONG",{});var Het=s(tie);STo=r(Het,"unispeech"),Het.forEach(t),RTo=r(G0e," \u2014 "),wN=n(G0e,"A",{href:!0});var Uet=s(wN);PTo=r(Uet,"UniSpeechForPreTraining"),Uet.forEach(t),BTo=r(G0e," (UniSpeech model)"),G0e.forEach(t),ITo=i(O),E_=n(O,"LI",{});var O0e=s(E_);aie=n(O0e,"STRONG",{});var Jet=s(aie);qTo=r(Jet,"unispeech-sat"),Jet.forEach(t),NTo=r(O0e," \u2014 "),AN=n(O0e,"A",{href:!0});var Yet=s(AN);jTo=r(Yet,"UniSpeechSatForPreTraining"),Yet.forEach(t),DTo=r(O0e," (UniSpeechSat model)"),O0e.forEach(t),GTo=i(O),C_=n(O,"LI",{});var V0e=s(C_);nie=n(V0e,"STRONG",{});var Ket=s(nie);OTo=r(Ket,"visual_bert"),Ket.forEach(t),VTo=r(V0e," \u2014 "),yN=n(V0e,"A",{href:!0});var Zet=s(yN);XTo=r(Zet,"VisualBertForPreTraining"),Zet.forEach(t),zTo=r(V0e," (VisualBert model)"),V0e.forEach(t),WTo=i(O),w_=n(O,"LI",{});var X0e=s(w_);sie=n(X0e,"STRONG",{});var eot=s(sie);QTo=r(eot,"vit_mae"),eot.forEach(t),HTo=r(X0e," \u2014 "),LN=n(X0e,"A",{href:!0});var oot=s(LN);UTo=r(oot,"ViTMAEForPreTraining"),oot.forEach(t),JTo=r(X0e," (ViTMAE model)"),X0e.forEach(t),YTo=i(O),A_=n(O,"LI",{});var z0e=s(A_);lie=n(z0e,"STRONG",{});var rot=s(lie);KTo=r(rot,"wav2vec2"),rot.forEach(t),ZTo=r(z0e," \u2014 "),xN=n(z0e,"A",{href:!0});var tot=s(xN);eMo=r(tot,"Wav2Vec2ForPreTraining"),tot.forEach(t),oMo=r(z0e," (Wav2Vec2 model)"),z0e.forEach(t),rMo=i(O),y_=n(O,"LI",{});var W0e=s(y_);iie=n(W0e,"STRONG",{});var aot=s(iie);tMo=r(aot,"wav2vec2-conformer"),aot.forEach(t),aMo=r(W0e," \u2014 "),$N=n(W0e,"A",{href:!0});var not=s($N);nMo=r(not,"Wav2Vec2ConformerForPreTraining"),not.forEach(t),sMo=r(W0e," (Wav2Vec2-Conformer model)"),W0e.forEach(t),lMo=i(O),L_=n(O,"LI",{});var Q0e=s(L_);die=n(Q0e,"STRONG",{});var sot=s(die);iMo=r(sot,"xlm"),sot.forEach(t),dMo=r(Q0e," \u2014 "),kN=n(Q0e,"A",{href:!0});var lot=s(kN);cMo=r(lot,"XLMWithLMHeadModel"),lot.forEach(t),fMo=r(Q0e," (XLM model)"),Q0e.forEach(t),mMo=i(O),x_=n(O,"LI",{});var H0e=s(x_);cie=n(H0e,"STRONG",{});var iot=s(cie);gMo=r(iot,"xlm-roberta"),iot.forEach(t),hMo=r(H0e," \u2014 "),SN=n(H0e,"A",{href:!0});var dot=s(SN);pMo=r(dot,"XLMRobertaForMaskedLM"),dot.forEach(t),uMo=r(H0e," (XLM-RoBERTa model)"),H0e.forEach(t),_Mo=i(O),$_=n(O,"LI",{});var U0e=s($_);fie=n(U0e,"STRONG",{});var cot=s(fie);bMo=r(cot,"xlm-roberta-xl"),cot.forEach(t),vMo=r(U0e," \u2014 "),RN=n(U0e,"A",{href:!0});var fot=s(RN);FMo=r(fot,"XLMRobertaXLForMaskedLM"),fot.forEach(t),TMo=r(U0e," (XLM-RoBERTa-XL model)"),U0e.forEach(t),MMo=i(O),k_=n(O,"LI",{});var J0e=s(k_);mie=n(J0e,"STRONG",{});var mot=s(mie);EMo=r(mot,"xlnet"),mot.forEach(t),CMo=r(J0e," \u2014 "),PN=n(J0e,"A",{href:!0});var got=s(PN);wMo=r(got,"XLNetLMHeadModel"),got.forEach(t),AMo=r(J0e," (XLNet model)"),J0e.forEach(t),O.forEach(t),yMo=i(ra),S_=n(ra,"P",{});var Y0e=s(S_);LMo=r(Y0e,"The model is set in evaluation mode by default using "),gie=n(Y0e,"CODE",{});var hot=s(gie);xMo=r(hot,"model.eval()"),hot.forEach(t),$Mo=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(Y0e,"CODE",{});var pot=s(hie);kMo=r(pot,"model.train()"),pot.forEach(t),Y0e.forEach(t),SMo=i(ra),T(R_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),OIe=i(f),$i=n(f,"H2",{class:!0});var WNe=s($i);P_=n(WNe,"A",{id:!0,class:!0,href:!0});var uot=s(P_);pie=n(uot,"SPAN",{});var _ot=s(pie);T(V0.$$.fragment,_ot),_ot.forEach(t),uot.forEach(t),RMo=i(WNe),uie=n(WNe,"SPAN",{});var bot=s(uie);PMo=r(bot,"AutoModelForCausalLM"),bot.forEach(t),WNe.forEach(t),VIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(X0.$$.fragment,Os),BMo=i(Os),ki=n(Os,"P",{});var kK=s(ki);IMo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BN=n(kK,"A",{href:!0});var vot=s(BN);qMo=r(vot,"from_pretrained()"),vot.forEach(t),NMo=r(kK," class method or the "),IN=n(kK,"A",{href:!0});var Fot=s(IN);jMo=r(Fot,"from_config()"),Fot.forEach(t),DMo=r(kK,` class
method.`),kK.forEach(t),GMo=i(Os),z0=n(Os,"P",{});var QNe=s(z0);OMo=r(QNe,"This class cannot be instantiated directly using "),_ie=n(QNe,"CODE",{});var Tot=s(_ie);VMo=r(Tot,"__init__()"),Tot.forEach(t),XMo=r(QNe," (throws an error)."),QNe.forEach(t),zMo=i(Os),nt=n(Os,"DIV",{class:!0});var pA=s(nt);T(W0.$$.fragment,pA),WMo=i(pA),bie=n(pA,"P",{});var Mot=s(bie);QMo=r(Mot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mot.forEach(t),HMo=i(pA),Si=n(pA,"P",{});var SK=s(Si);UMo=r(SK,`Note:
Loading a model from its configuration file does `),vie=n(SK,"STRONG",{});var Eot=s(vie);JMo=r(Eot,"not"),Eot.forEach(t),YMo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=n(SK,"A",{href:!0});var Cot=s(qN);KMo=r(Cot,"from_pretrained()"),Cot.forEach(t),ZMo=r(SK," to load the model weights."),SK.forEach(t),e4o=i(pA),T(B_.$$.fragment,pA),pA.forEach(t),o4o=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(Q0.$$.fragment,ta),r4o=i(ta),Fie=n(ta,"P",{});var wot=s(Fie);t4o=r(wot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wot.forEach(t),a4o=i(ta),$a=n(ta,"P",{});var uA=s($a);n4o=r(uA,"The model class to instantiate is selected based on the "),Tie=n(uA,"CODE",{});var Aot=s(Tie);s4o=r(Aot,"model_type"),Aot.forEach(t),l4o=r(uA,` property of the config object (either
passed as an argument or loaded from `),Mie=n(uA,"CODE",{});var yot=s(Mie);i4o=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),d4o=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(uA,"CODE",{});var Lot=s(Eie);c4o=r(Lot,"pretrained_model_name_or_path"),Lot.forEach(t),f4o=r(uA,":"),uA.forEach(t),m4o=i(ta),z=n(ta,"UL",{});var Q=s(z);I_=n(Q,"LI",{});var K0e=s(I_);Cie=n(K0e,"STRONG",{});var xot=s(Cie);g4o=r(xot,"bart"),xot.forEach(t),h4o=r(K0e," \u2014 "),NN=n(K0e,"A",{href:!0});var $ot=s(NN);p4o=r($ot,"BartForCausalLM"),$ot.forEach(t),u4o=r(K0e," (BART model)"),K0e.forEach(t),_4o=i(Q),q_=n(Q,"LI",{});var Z0e=s(q_);wie=n(Z0e,"STRONG",{});var kot=s(wie);b4o=r(kot,"bert"),kot.forEach(t),v4o=r(Z0e," \u2014 "),jN=n(Z0e,"A",{href:!0});var Sot=s(jN);F4o=r(Sot,"BertLMHeadModel"),Sot.forEach(t),T4o=r(Z0e," (BERT model)"),Z0e.forEach(t),M4o=i(Q),N_=n(Q,"LI",{});var eye=s(N_);Aie=n(eye,"STRONG",{});var Rot=s(Aie);E4o=r(Rot,"bert-generation"),Rot.forEach(t),C4o=r(eye," \u2014 "),DN=n(eye,"A",{href:!0});var Pot=s(DN);w4o=r(Pot,"BertGenerationDecoder"),Pot.forEach(t),A4o=r(eye," (Bert Generation model)"),eye.forEach(t),y4o=i(Q),j_=n(Q,"LI",{});var oye=s(j_);yie=n(oye,"STRONG",{});var Bot=s(yie);L4o=r(Bot,"big_bird"),Bot.forEach(t),x4o=r(oye," \u2014 "),GN=n(oye,"A",{href:!0});var Iot=s(GN);$4o=r(Iot,"BigBirdForCausalLM"),Iot.forEach(t),k4o=r(oye," (BigBird model)"),oye.forEach(t),S4o=i(Q),D_=n(Q,"LI",{});var rye=s(D_);Lie=n(rye,"STRONG",{});var qot=s(Lie);R4o=r(qot,"bigbird_pegasus"),qot.forEach(t),P4o=r(rye," \u2014 "),ON=n(rye,"A",{href:!0});var Not=s(ON);B4o=r(Not,"BigBirdPegasusForCausalLM"),Not.forEach(t),I4o=r(rye," (BigBirdPegasus model)"),rye.forEach(t),q4o=i(Q),G_=n(Q,"LI",{});var tye=s(G_);xie=n(tye,"STRONG",{});var jot=s(xie);N4o=r(jot,"blenderbot"),jot.forEach(t),j4o=r(tye," \u2014 "),VN=n(tye,"A",{href:!0});var Dot=s(VN);D4o=r(Dot,"BlenderbotForCausalLM"),Dot.forEach(t),G4o=r(tye," (Blenderbot model)"),tye.forEach(t),O4o=i(Q),O_=n(Q,"LI",{});var aye=s(O_);$ie=n(aye,"STRONG",{});var Got=s($ie);V4o=r(Got,"blenderbot-small"),Got.forEach(t),X4o=r(aye," \u2014 "),XN=n(aye,"A",{href:!0});var Oot=s(XN);z4o=r(Oot,"BlenderbotSmallForCausalLM"),Oot.forEach(t),W4o=r(aye," (BlenderbotSmall model)"),aye.forEach(t),Q4o=i(Q),V_=n(Q,"LI",{});var nye=s(V_);kie=n(nye,"STRONG",{});var Vot=s(kie);H4o=r(Vot,"camembert"),Vot.forEach(t),U4o=r(nye," \u2014 "),zN=n(nye,"A",{href:!0});var Xot=s(zN);J4o=r(Xot,"CamembertForCausalLM"),Xot.forEach(t),Y4o=r(nye," (CamemBERT model)"),nye.forEach(t),K4o=i(Q),X_=n(Q,"LI",{});var sye=s(X_);Sie=n(sye,"STRONG",{});var zot=s(Sie);Z4o=r(zot,"ctrl"),zot.forEach(t),eEo=r(sye," \u2014 "),WN=n(sye,"A",{href:!0});var Wot=s(WN);oEo=r(Wot,"CTRLLMHeadModel"),Wot.forEach(t),rEo=r(sye," (CTRL model)"),sye.forEach(t),tEo=i(Q),z_=n(Q,"LI",{});var lye=s(z_);Rie=n(lye,"STRONG",{});var Qot=s(Rie);aEo=r(Qot,"data2vec-text"),Qot.forEach(t),nEo=r(lye," \u2014 "),QN=n(lye,"A",{href:!0});var Hot=s(QN);sEo=r(Hot,"Data2VecTextForCausalLM"),Hot.forEach(t),lEo=r(lye," (Data2VecText model)"),lye.forEach(t),iEo=i(Q),W_=n(Q,"LI",{});var iye=s(W_);Pie=n(iye,"STRONG",{});var Uot=s(Pie);dEo=r(Uot,"electra"),Uot.forEach(t),cEo=r(iye," \u2014 "),HN=n(iye,"A",{href:!0});var Jot=s(HN);fEo=r(Jot,"ElectraForCausalLM"),Jot.forEach(t),mEo=r(iye," (ELECTRA model)"),iye.forEach(t),gEo=i(Q),Q_=n(Q,"LI",{});var dye=s(Q_);Bie=n(dye,"STRONG",{});var Yot=s(Bie);hEo=r(Yot,"gpt2"),Yot.forEach(t),pEo=r(dye," \u2014 "),UN=n(dye,"A",{href:!0});var Kot=s(UN);uEo=r(Kot,"GPT2LMHeadModel"),Kot.forEach(t),_Eo=r(dye," (OpenAI GPT-2 model)"),dye.forEach(t),bEo=i(Q),H_=n(Q,"LI",{});var cye=s(H_);Iie=n(cye,"STRONG",{});var Zot=s(Iie);vEo=r(Zot,"gpt_neo"),Zot.forEach(t),FEo=r(cye," \u2014 "),JN=n(cye,"A",{href:!0});var ert=s(JN);TEo=r(ert,"GPTNeoForCausalLM"),ert.forEach(t),MEo=r(cye," (GPT Neo model)"),cye.forEach(t),EEo=i(Q),U_=n(Q,"LI",{});var fye=s(U_);qie=n(fye,"STRONG",{});var ort=s(qie);CEo=r(ort,"gptj"),ort.forEach(t),wEo=r(fye," \u2014 "),YN=n(fye,"A",{href:!0});var rrt=s(YN);AEo=r(rrt,"GPTJForCausalLM"),rrt.forEach(t),yEo=r(fye," (GPT-J model)"),fye.forEach(t),LEo=i(Q),J_=n(Q,"LI",{});var mye=s(J_);Nie=n(mye,"STRONG",{});var trt=s(Nie);xEo=r(trt,"marian"),trt.forEach(t),$Eo=r(mye," \u2014 "),KN=n(mye,"A",{href:!0});var art=s(KN);kEo=r(art,"MarianForCausalLM"),art.forEach(t),SEo=r(mye," (Marian model)"),mye.forEach(t),REo=i(Q),Y_=n(Q,"LI",{});var gye=s(Y_);jie=n(gye,"STRONG",{});var nrt=s(jie);PEo=r(nrt,"mbart"),nrt.forEach(t),BEo=r(gye," \u2014 "),ZN=n(gye,"A",{href:!0});var srt=s(ZN);IEo=r(srt,"MBartForCausalLM"),srt.forEach(t),qEo=r(gye," (mBART model)"),gye.forEach(t),NEo=i(Q),K_=n(Q,"LI",{});var hye=s(K_);Die=n(hye,"STRONG",{});var lrt=s(Die);jEo=r(lrt,"megatron-bert"),lrt.forEach(t),DEo=r(hye," \u2014 "),ej=n(hye,"A",{href:!0});var irt=s(ej);GEo=r(irt,"MegatronBertForCausalLM"),irt.forEach(t),OEo=r(hye," (MegatronBert model)"),hye.forEach(t),VEo=i(Q),Z_=n(Q,"LI",{});var pye=s(Z_);Gie=n(pye,"STRONG",{});var drt=s(Gie);XEo=r(drt,"openai-gpt"),drt.forEach(t),zEo=r(pye," \u2014 "),oj=n(pye,"A",{href:!0});var crt=s(oj);WEo=r(crt,"OpenAIGPTLMHeadModel"),crt.forEach(t),QEo=r(pye," (OpenAI GPT model)"),pye.forEach(t),HEo=i(Q),e2=n(Q,"LI",{});var uye=s(e2);Oie=n(uye,"STRONG",{});var frt=s(Oie);UEo=r(frt,"opt"),frt.forEach(t),JEo=r(uye," \u2014 "),rj=n(uye,"A",{href:!0});var mrt=s(rj);YEo=r(mrt,"OPTForCausalLM"),mrt.forEach(t),KEo=r(uye," (OPT model)"),uye.forEach(t),ZEo=i(Q),o2=n(Q,"LI",{});var _ye=s(o2);Vie=n(_ye,"STRONG",{});var grt=s(Vie);eCo=r(grt,"pegasus"),grt.forEach(t),oCo=r(_ye," \u2014 "),tj=n(_ye,"A",{href:!0});var hrt=s(tj);rCo=r(hrt,"PegasusForCausalLM"),hrt.forEach(t),tCo=r(_ye," (Pegasus model)"),_ye.forEach(t),aCo=i(Q),r2=n(Q,"LI",{});var bye=s(r2);Xie=n(bye,"STRONG",{});var prt=s(Xie);nCo=r(prt,"plbart"),prt.forEach(t),sCo=r(bye," \u2014 "),aj=n(bye,"A",{href:!0});var urt=s(aj);lCo=r(urt,"PLBartForCausalLM"),urt.forEach(t),iCo=r(bye," (PLBart model)"),bye.forEach(t),dCo=i(Q),t2=n(Q,"LI",{});var vye=s(t2);zie=n(vye,"STRONG",{});var _rt=s(zie);cCo=r(_rt,"prophetnet"),_rt.forEach(t),fCo=r(vye," \u2014 "),nj=n(vye,"A",{href:!0});var brt=s(nj);mCo=r(brt,"ProphetNetForCausalLM"),brt.forEach(t),gCo=r(vye," (ProphetNet model)"),vye.forEach(t),hCo=i(Q),a2=n(Q,"LI",{});var Fye=s(a2);Wie=n(Fye,"STRONG",{});var vrt=s(Wie);pCo=r(vrt,"qdqbert"),vrt.forEach(t),uCo=r(Fye," \u2014 "),sj=n(Fye,"A",{href:!0});var Frt=s(sj);_Co=r(Frt,"QDQBertLMHeadModel"),Frt.forEach(t),bCo=r(Fye," (QDQBert model)"),Fye.forEach(t),vCo=i(Q),n2=n(Q,"LI",{});var Tye=s(n2);Qie=n(Tye,"STRONG",{});var Trt=s(Qie);FCo=r(Trt,"reformer"),Trt.forEach(t),TCo=r(Tye," \u2014 "),lj=n(Tye,"A",{href:!0});var Mrt=s(lj);MCo=r(Mrt,"ReformerModelWithLMHead"),Mrt.forEach(t),ECo=r(Tye," (Reformer model)"),Tye.forEach(t),CCo=i(Q),s2=n(Q,"LI",{});var Mye=s(s2);Hie=n(Mye,"STRONG",{});var Ert=s(Hie);wCo=r(Ert,"rembert"),Ert.forEach(t),ACo=r(Mye," \u2014 "),ij=n(Mye,"A",{href:!0});var Crt=s(ij);yCo=r(Crt,"RemBertForCausalLM"),Crt.forEach(t),LCo=r(Mye," (RemBERT model)"),Mye.forEach(t),xCo=i(Q),l2=n(Q,"LI",{});var Eye=s(l2);Uie=n(Eye,"STRONG",{});var wrt=s(Uie);$Co=r(wrt,"roberta"),wrt.forEach(t),kCo=r(Eye," \u2014 "),dj=n(Eye,"A",{href:!0});var Art=s(dj);SCo=r(Art,"RobertaForCausalLM"),Art.forEach(t),RCo=r(Eye," (RoBERTa model)"),Eye.forEach(t),PCo=i(Q),i2=n(Q,"LI",{});var Cye=s(i2);Jie=n(Cye,"STRONG",{});var yrt=s(Jie);BCo=r(yrt,"roformer"),yrt.forEach(t),ICo=r(Cye," \u2014 "),cj=n(Cye,"A",{href:!0});var Lrt=s(cj);qCo=r(Lrt,"RoFormerForCausalLM"),Lrt.forEach(t),NCo=r(Cye," (RoFormer model)"),Cye.forEach(t),jCo=i(Q),d2=n(Q,"LI",{});var wye=s(d2);Yie=n(wye,"STRONG",{});var xrt=s(Yie);DCo=r(xrt,"speech_to_text_2"),xrt.forEach(t),GCo=r(wye," \u2014 "),fj=n(wye,"A",{href:!0});var $rt=s(fj);OCo=r($rt,"Speech2Text2ForCausalLM"),$rt.forEach(t),VCo=r(wye," (Speech2Text2 model)"),wye.forEach(t),XCo=i(Q),c2=n(Q,"LI",{});var Aye=s(c2);Kie=n(Aye,"STRONG",{});var krt=s(Kie);zCo=r(krt,"transfo-xl"),krt.forEach(t),WCo=r(Aye," \u2014 "),mj=n(Aye,"A",{href:!0});var Srt=s(mj);QCo=r(Srt,"TransfoXLLMHeadModel"),Srt.forEach(t),HCo=r(Aye," (Transformer-XL model)"),Aye.forEach(t),UCo=i(Q),f2=n(Q,"LI",{});var yye=s(f2);Zie=n(yye,"STRONG",{});var Rrt=s(Zie);JCo=r(Rrt,"trocr"),Rrt.forEach(t),YCo=r(yye," \u2014 "),gj=n(yye,"A",{href:!0});var Prt=s(gj);KCo=r(Prt,"TrOCRForCausalLM"),Prt.forEach(t),ZCo=r(yye," (TrOCR model)"),yye.forEach(t),e3o=i(Q),m2=n(Q,"LI",{});var Lye=s(m2);ede=n(Lye,"STRONG",{});var Brt=s(ede);o3o=r(Brt,"xglm"),Brt.forEach(t),r3o=r(Lye," \u2014 "),hj=n(Lye,"A",{href:!0});var Irt=s(hj);t3o=r(Irt,"XGLMForCausalLM"),Irt.forEach(t),a3o=r(Lye," (XGLM model)"),Lye.forEach(t),n3o=i(Q),g2=n(Q,"LI",{});var xye=s(g2);ode=n(xye,"STRONG",{});var qrt=s(ode);s3o=r(qrt,"xlm"),qrt.forEach(t),l3o=r(xye," \u2014 "),pj=n(xye,"A",{href:!0});var Nrt=s(pj);i3o=r(Nrt,"XLMWithLMHeadModel"),Nrt.forEach(t),d3o=r(xye," (XLM model)"),xye.forEach(t),c3o=i(Q),h2=n(Q,"LI",{});var $ye=s(h2);rde=n($ye,"STRONG",{});var jrt=s(rde);f3o=r(jrt,"xlm-prophetnet"),jrt.forEach(t),m3o=r($ye," \u2014 "),uj=n($ye,"A",{href:!0});var Drt=s(uj);g3o=r(Drt,"XLMProphetNetForCausalLM"),Drt.forEach(t),h3o=r($ye," (XLMProphetNet model)"),$ye.forEach(t),p3o=i(Q),p2=n(Q,"LI",{});var kye=s(p2);tde=n(kye,"STRONG",{});var Grt=s(tde);u3o=r(Grt,"xlm-roberta"),Grt.forEach(t),_3o=r(kye," \u2014 "),_j=n(kye,"A",{href:!0});var Ort=s(_j);b3o=r(Ort,"XLMRobertaForCausalLM"),Ort.forEach(t),v3o=r(kye," (XLM-RoBERTa model)"),kye.forEach(t),F3o=i(Q),u2=n(Q,"LI",{});var Sye=s(u2);ade=n(Sye,"STRONG",{});var Vrt=s(ade);T3o=r(Vrt,"xlm-roberta-xl"),Vrt.forEach(t),M3o=r(Sye," \u2014 "),bj=n(Sye,"A",{href:!0});var Xrt=s(bj);E3o=r(Xrt,"XLMRobertaXLForCausalLM"),Xrt.forEach(t),C3o=r(Sye," (XLM-RoBERTa-XL model)"),Sye.forEach(t),w3o=i(Q),_2=n(Q,"LI",{});var Rye=s(_2);nde=n(Rye,"STRONG",{});var zrt=s(nde);A3o=r(zrt,"xlnet"),zrt.forEach(t),y3o=r(Rye," \u2014 "),vj=n(Rye,"A",{href:!0});var Wrt=s(vj);L3o=r(Wrt,"XLNetLMHeadModel"),Wrt.forEach(t),x3o=r(Rye," (XLNet model)"),Rye.forEach(t),Q.forEach(t),$3o=i(ta),b2=n(ta,"P",{});var Pye=s(b2);k3o=r(Pye,"The model is set in evaluation mode by default using "),sde=n(Pye,"CODE",{});var Qrt=s(sde);S3o=r(Qrt,"model.eval()"),Qrt.forEach(t),R3o=r(Pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=n(Pye,"CODE",{});var Hrt=s(lde);P3o=r(Hrt,"model.train()"),Hrt.forEach(t),Pye.forEach(t),B3o=i(ta),T(v2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),XIe=i(f),Ri=n(f,"H2",{class:!0});var HNe=s(Ri);F2=n(HNe,"A",{id:!0,class:!0,href:!0});var Urt=s(F2);ide=n(Urt,"SPAN",{});var Jrt=s(ide);T(H0.$$.fragment,Jrt),Jrt.forEach(t),Urt.forEach(t),I3o=i(HNe),dde=n(HNe,"SPAN",{});var Yrt=s(dde);q3o=r(Yrt,"AutoModelForMaskedLM"),Yrt.forEach(t),HNe.forEach(t),zIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(U0.$$.fragment,Vs),N3o=i(Vs),Pi=n(Vs,"P",{});var RK=s(Pi);j3o=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fj=n(RK,"A",{href:!0});var Krt=s(Fj);D3o=r(Krt,"from_pretrained()"),Krt.forEach(t),G3o=r(RK," class method or the "),Tj=n(RK,"A",{href:!0});var Zrt=s(Tj);O3o=r(Zrt,"from_config()"),Zrt.forEach(t),V3o=r(RK,` class
method.`),RK.forEach(t),X3o=i(Vs),J0=n(Vs,"P",{});var UNe=s(J0);z3o=r(UNe,"This class cannot be instantiated directly using "),cde=n(UNe,"CODE",{});var ett=s(cde);W3o=r(ett,"__init__()"),ett.forEach(t),Q3o=r(UNe," (throws an error)."),UNe.forEach(t),H3o=i(Vs),st=n(Vs,"DIV",{class:!0});var _A=s(st);T(Y0.$$.fragment,_A),U3o=i(_A),fde=n(_A,"P",{});var ott=s(fde);J3o=r(ott,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ott.forEach(t),Y3o=i(_A),Bi=n(_A,"P",{});var PK=s(Bi);K3o=r(PK,`Note:
Loading a model from its configuration file does `),mde=n(PK,"STRONG",{});var rtt=s(mde);Z3o=r(rtt,"not"),rtt.forEach(t),ewo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(PK,"A",{href:!0});var ttt=s(Mj);owo=r(ttt,"from_pretrained()"),ttt.forEach(t),rwo=r(PK," to load the model weights."),PK.forEach(t),two=i(_A),T(T2.$$.fragment,_A),_A.forEach(t),awo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(K0.$$.fragment,aa),nwo=i(aa),gde=n(aa,"P",{});var att=s(gde);swo=r(att,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),att.forEach(t),lwo=i(aa),ka=n(aa,"P",{});var bA=s(ka);iwo=r(bA,"The model class to instantiate is selected based on the "),hde=n(bA,"CODE",{});var ntt=s(hde);dwo=r(ntt,"model_type"),ntt.forEach(t),cwo=r(bA,` property of the config object (either
passed as an argument or loaded from `),pde=n(bA,"CODE",{});var stt=s(pde);fwo=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),mwo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(bA,"CODE",{});var ltt=s(ude);gwo=r(ltt,"pretrained_model_name_or_path"),ltt.forEach(t),hwo=r(bA,":"),bA.forEach(t),pwo=i(aa),W=n(aa,"UL",{});var H=s(W);M2=n(H,"LI",{});var Bye=s(M2);_de=n(Bye,"STRONG",{});var itt=s(_de);uwo=r(itt,"albert"),itt.forEach(t),_wo=r(Bye," \u2014 "),Ej=n(Bye,"A",{href:!0});var dtt=s(Ej);bwo=r(dtt,"AlbertForMaskedLM"),dtt.forEach(t),vwo=r(Bye," (ALBERT model)"),Bye.forEach(t),Fwo=i(H),E2=n(H,"LI",{});var Iye=s(E2);bde=n(Iye,"STRONG",{});var ctt=s(bde);Two=r(ctt,"bart"),ctt.forEach(t),Mwo=r(Iye," \u2014 "),Cj=n(Iye,"A",{href:!0});var ftt=s(Cj);Ewo=r(ftt,"BartForConditionalGeneration"),ftt.forEach(t),Cwo=r(Iye," (BART model)"),Iye.forEach(t),wwo=i(H),C2=n(H,"LI",{});var qye=s(C2);vde=n(qye,"STRONG",{});var mtt=s(vde);Awo=r(mtt,"bert"),mtt.forEach(t),ywo=r(qye," \u2014 "),wj=n(qye,"A",{href:!0});var gtt=s(wj);Lwo=r(gtt,"BertForMaskedLM"),gtt.forEach(t),xwo=r(qye," (BERT model)"),qye.forEach(t),$wo=i(H),w2=n(H,"LI",{});var Nye=s(w2);Fde=n(Nye,"STRONG",{});var htt=s(Fde);kwo=r(htt,"big_bird"),htt.forEach(t),Swo=r(Nye," \u2014 "),Aj=n(Nye,"A",{href:!0});var ptt=s(Aj);Rwo=r(ptt,"BigBirdForMaskedLM"),ptt.forEach(t),Pwo=r(Nye," (BigBird model)"),Nye.forEach(t),Bwo=i(H),A2=n(H,"LI",{});var jye=s(A2);Tde=n(jye,"STRONG",{});var utt=s(Tde);Iwo=r(utt,"camembert"),utt.forEach(t),qwo=r(jye," \u2014 "),yj=n(jye,"A",{href:!0});var _tt=s(yj);Nwo=r(_tt,"CamembertForMaskedLM"),_tt.forEach(t),jwo=r(jye," (CamemBERT model)"),jye.forEach(t),Dwo=i(H),y2=n(H,"LI",{});var Dye=s(y2);Mde=n(Dye,"STRONG",{});var btt=s(Mde);Gwo=r(btt,"convbert"),btt.forEach(t),Owo=r(Dye," \u2014 "),Lj=n(Dye,"A",{href:!0});var vtt=s(Lj);Vwo=r(vtt,"ConvBertForMaskedLM"),vtt.forEach(t),Xwo=r(Dye," (ConvBERT model)"),Dye.forEach(t),zwo=i(H),L2=n(H,"LI",{});var Gye=s(L2);Ede=n(Gye,"STRONG",{});var Ftt=s(Ede);Wwo=r(Ftt,"data2vec-text"),Ftt.forEach(t),Qwo=r(Gye," \u2014 "),xj=n(Gye,"A",{href:!0});var Ttt=s(xj);Hwo=r(Ttt,"Data2VecTextForMaskedLM"),Ttt.forEach(t),Uwo=r(Gye," (Data2VecText model)"),Gye.forEach(t),Jwo=i(H),x2=n(H,"LI",{});var Oye=s(x2);Cde=n(Oye,"STRONG",{});var Mtt=s(Cde);Ywo=r(Mtt,"deberta"),Mtt.forEach(t),Kwo=r(Oye," \u2014 "),$j=n(Oye,"A",{href:!0});var Ett=s($j);Zwo=r(Ett,"DebertaForMaskedLM"),Ett.forEach(t),eAo=r(Oye," (DeBERTa model)"),Oye.forEach(t),oAo=i(H),$2=n(H,"LI",{});var Vye=s($2);wde=n(Vye,"STRONG",{});var Ctt=s(wde);rAo=r(Ctt,"deberta-v2"),Ctt.forEach(t),tAo=r(Vye," \u2014 "),kj=n(Vye,"A",{href:!0});var wtt=s(kj);aAo=r(wtt,"DebertaV2ForMaskedLM"),wtt.forEach(t),nAo=r(Vye," (DeBERTa-v2 model)"),Vye.forEach(t),sAo=i(H),k2=n(H,"LI",{});var Xye=s(k2);Ade=n(Xye,"STRONG",{});var Att=s(Ade);lAo=r(Att,"distilbert"),Att.forEach(t),iAo=r(Xye," \u2014 "),Sj=n(Xye,"A",{href:!0});var ytt=s(Sj);dAo=r(ytt,"DistilBertForMaskedLM"),ytt.forEach(t),cAo=r(Xye," (DistilBERT model)"),Xye.forEach(t),fAo=i(H),S2=n(H,"LI",{});var zye=s(S2);yde=n(zye,"STRONG",{});var Ltt=s(yde);mAo=r(Ltt,"electra"),Ltt.forEach(t),gAo=r(zye," \u2014 "),Rj=n(zye,"A",{href:!0});var xtt=s(Rj);hAo=r(xtt,"ElectraForMaskedLM"),xtt.forEach(t),pAo=r(zye," (ELECTRA model)"),zye.forEach(t),uAo=i(H),R2=n(H,"LI",{});var Wye=s(R2);Lde=n(Wye,"STRONG",{});var $tt=s(Lde);_Ao=r($tt,"flaubert"),$tt.forEach(t),bAo=r(Wye," \u2014 "),Pj=n(Wye,"A",{href:!0});var ktt=s(Pj);vAo=r(ktt,"FlaubertWithLMHeadModel"),ktt.forEach(t),FAo=r(Wye," (FlauBERT model)"),Wye.forEach(t),TAo=i(H),P2=n(H,"LI",{});var Qye=s(P2);xde=n(Qye,"STRONG",{});var Stt=s(xde);MAo=r(Stt,"fnet"),Stt.forEach(t),EAo=r(Qye," \u2014 "),Bj=n(Qye,"A",{href:!0});var Rtt=s(Bj);CAo=r(Rtt,"FNetForMaskedLM"),Rtt.forEach(t),wAo=r(Qye," (FNet model)"),Qye.forEach(t),AAo=i(H),B2=n(H,"LI",{});var Hye=s(B2);$de=n(Hye,"STRONG",{});var Ptt=s($de);yAo=r(Ptt,"funnel"),Ptt.forEach(t),LAo=r(Hye," \u2014 "),Ij=n(Hye,"A",{href:!0});var Btt=s(Ij);xAo=r(Btt,"FunnelForMaskedLM"),Btt.forEach(t),$Ao=r(Hye," (Funnel Transformer model)"),Hye.forEach(t),kAo=i(H),I2=n(H,"LI",{});var Uye=s(I2);kde=n(Uye,"STRONG",{});var Itt=s(kde);SAo=r(Itt,"ibert"),Itt.forEach(t),RAo=r(Uye," \u2014 "),qj=n(Uye,"A",{href:!0});var qtt=s(qj);PAo=r(qtt,"IBertForMaskedLM"),qtt.forEach(t),BAo=r(Uye," (I-BERT model)"),Uye.forEach(t),IAo=i(H),q2=n(H,"LI",{});var Jye=s(q2);Sde=n(Jye,"STRONG",{});var Ntt=s(Sde);qAo=r(Ntt,"layoutlm"),Ntt.forEach(t),NAo=r(Jye," \u2014 "),Nj=n(Jye,"A",{href:!0});var jtt=s(Nj);jAo=r(jtt,"LayoutLMForMaskedLM"),jtt.forEach(t),DAo=r(Jye," (LayoutLM model)"),Jye.forEach(t),GAo=i(H),N2=n(H,"LI",{});var Yye=s(N2);Rde=n(Yye,"STRONG",{});var Dtt=s(Rde);OAo=r(Dtt,"longformer"),Dtt.forEach(t),VAo=r(Yye," \u2014 "),jj=n(Yye,"A",{href:!0});var Gtt=s(jj);XAo=r(Gtt,"LongformerForMaskedLM"),Gtt.forEach(t),zAo=r(Yye," (Longformer model)"),Yye.forEach(t),WAo=i(H),j2=n(H,"LI",{});var Kye=s(j2);Pde=n(Kye,"STRONG",{});var Ott=s(Pde);QAo=r(Ott,"mbart"),Ott.forEach(t),HAo=r(Kye," \u2014 "),Dj=n(Kye,"A",{href:!0});var Vtt=s(Dj);UAo=r(Vtt,"MBartForConditionalGeneration"),Vtt.forEach(t),JAo=r(Kye," (mBART model)"),Kye.forEach(t),YAo=i(H),D2=n(H,"LI",{});var Zye=s(D2);Bde=n(Zye,"STRONG",{});var Xtt=s(Bde);KAo=r(Xtt,"megatron-bert"),Xtt.forEach(t),ZAo=r(Zye," \u2014 "),Gj=n(Zye,"A",{href:!0});var ztt=s(Gj);e6o=r(ztt,"MegatronBertForMaskedLM"),ztt.forEach(t),o6o=r(Zye," (MegatronBert model)"),Zye.forEach(t),r6o=i(H),G2=n(H,"LI",{});var eLe=s(G2);Ide=n(eLe,"STRONG",{});var Wtt=s(Ide);t6o=r(Wtt,"mobilebert"),Wtt.forEach(t),a6o=r(eLe," \u2014 "),Oj=n(eLe,"A",{href:!0});var Qtt=s(Oj);n6o=r(Qtt,"MobileBertForMaskedLM"),Qtt.forEach(t),s6o=r(eLe," (MobileBERT model)"),eLe.forEach(t),l6o=i(H),O2=n(H,"LI",{});var oLe=s(O2);qde=n(oLe,"STRONG",{});var Htt=s(qde);i6o=r(Htt,"mpnet"),Htt.forEach(t),d6o=r(oLe," \u2014 "),Vj=n(oLe,"A",{href:!0});var Utt=s(Vj);c6o=r(Utt,"MPNetForMaskedLM"),Utt.forEach(t),f6o=r(oLe," (MPNet model)"),oLe.forEach(t),m6o=i(H),V2=n(H,"LI",{});var rLe=s(V2);Nde=n(rLe,"STRONG",{});var Jtt=s(Nde);g6o=r(Jtt,"nystromformer"),Jtt.forEach(t),h6o=r(rLe," \u2014 "),Xj=n(rLe,"A",{href:!0});var Ytt=s(Xj);p6o=r(Ytt,"NystromformerForMaskedLM"),Ytt.forEach(t),u6o=r(rLe," (Nystromformer model)"),rLe.forEach(t),_6o=i(H),X2=n(H,"LI",{});var tLe=s(X2);jde=n(tLe,"STRONG",{});var Ktt=s(jde);b6o=r(Ktt,"perceiver"),Ktt.forEach(t),v6o=r(tLe," \u2014 "),zj=n(tLe,"A",{href:!0});var Ztt=s(zj);F6o=r(Ztt,"PerceiverForMaskedLM"),Ztt.forEach(t),T6o=r(tLe," (Perceiver model)"),tLe.forEach(t),M6o=i(H),z2=n(H,"LI",{});var aLe=s(z2);Dde=n(aLe,"STRONG",{});var eat=s(Dde);E6o=r(eat,"qdqbert"),eat.forEach(t),C6o=r(aLe," \u2014 "),Wj=n(aLe,"A",{href:!0});var oat=s(Wj);w6o=r(oat,"QDQBertForMaskedLM"),oat.forEach(t),A6o=r(aLe," (QDQBert model)"),aLe.forEach(t),y6o=i(H),W2=n(H,"LI",{});var nLe=s(W2);Gde=n(nLe,"STRONG",{});var rat=s(Gde);L6o=r(rat,"reformer"),rat.forEach(t),x6o=r(nLe," \u2014 "),Qj=n(nLe,"A",{href:!0});var tat=s(Qj);$6o=r(tat,"ReformerForMaskedLM"),tat.forEach(t),k6o=r(nLe," (Reformer model)"),nLe.forEach(t),S6o=i(H),Q2=n(H,"LI",{});var sLe=s(Q2);Ode=n(sLe,"STRONG",{});var aat=s(Ode);R6o=r(aat,"rembert"),aat.forEach(t),P6o=r(sLe," \u2014 "),Hj=n(sLe,"A",{href:!0});var nat=s(Hj);B6o=r(nat,"RemBertForMaskedLM"),nat.forEach(t),I6o=r(sLe," (RemBERT model)"),sLe.forEach(t),q6o=i(H),H2=n(H,"LI",{});var lLe=s(H2);Vde=n(lLe,"STRONG",{});var sat=s(Vde);N6o=r(sat,"roberta"),sat.forEach(t),j6o=r(lLe," \u2014 "),Uj=n(lLe,"A",{href:!0});var lat=s(Uj);D6o=r(lat,"RobertaForMaskedLM"),lat.forEach(t),G6o=r(lLe," (RoBERTa model)"),lLe.forEach(t),O6o=i(H),U2=n(H,"LI",{});var iLe=s(U2);Xde=n(iLe,"STRONG",{});var iat=s(Xde);V6o=r(iat,"roformer"),iat.forEach(t),X6o=r(iLe," \u2014 "),Jj=n(iLe,"A",{href:!0});var dat=s(Jj);z6o=r(dat,"RoFormerForMaskedLM"),dat.forEach(t),W6o=r(iLe," (RoFormer model)"),iLe.forEach(t),Q6o=i(H),J2=n(H,"LI",{});var dLe=s(J2);zde=n(dLe,"STRONG",{});var cat=s(zde);H6o=r(cat,"squeezebert"),cat.forEach(t),U6o=r(dLe," \u2014 "),Yj=n(dLe,"A",{href:!0});var fat=s(Yj);J6o=r(fat,"SqueezeBertForMaskedLM"),fat.forEach(t),Y6o=r(dLe," (SqueezeBERT model)"),dLe.forEach(t),K6o=i(H),Y2=n(H,"LI",{});var cLe=s(Y2);Wde=n(cLe,"STRONG",{});var mat=s(Wde);Z6o=r(mat,"tapas"),mat.forEach(t),e0o=r(cLe," \u2014 "),Kj=n(cLe,"A",{href:!0});var gat=s(Kj);o0o=r(gat,"TapasForMaskedLM"),gat.forEach(t),r0o=r(cLe," (TAPAS model)"),cLe.forEach(t),t0o=i(H),K2=n(H,"LI",{});var fLe=s(K2);Qde=n(fLe,"STRONG",{});var hat=s(Qde);a0o=r(hat,"wav2vec2"),hat.forEach(t),n0o=r(fLe," \u2014 "),Hde=n(fLe,"CODE",{});var pat=s(Hde);s0o=r(pat,"Wav2Vec2ForMaskedLM"),pat.forEach(t),l0o=r(fLe," (Wav2Vec2 model)"),fLe.forEach(t),i0o=i(H),Z2=n(H,"LI",{});var mLe=s(Z2);Ude=n(mLe,"STRONG",{});var uat=s(Ude);d0o=r(uat,"xlm"),uat.forEach(t),c0o=r(mLe," \u2014 "),Zj=n(mLe,"A",{href:!0});var _at=s(Zj);f0o=r(_at,"XLMWithLMHeadModel"),_at.forEach(t),m0o=r(mLe," (XLM model)"),mLe.forEach(t),g0o=i(H),e1=n(H,"LI",{});var gLe=s(e1);Jde=n(gLe,"STRONG",{});var bat=s(Jde);h0o=r(bat,"xlm-roberta"),bat.forEach(t),p0o=r(gLe," \u2014 "),eD=n(gLe,"A",{href:!0});var vat=s(eD);u0o=r(vat,"XLMRobertaForMaskedLM"),vat.forEach(t),_0o=r(gLe," (XLM-RoBERTa model)"),gLe.forEach(t),b0o=i(H),o1=n(H,"LI",{});var hLe=s(o1);Yde=n(hLe,"STRONG",{});var Fat=s(Yde);v0o=r(Fat,"xlm-roberta-xl"),Fat.forEach(t),F0o=r(hLe," \u2014 "),oD=n(hLe,"A",{href:!0});var Tat=s(oD);T0o=r(Tat,"XLMRobertaXLForMaskedLM"),Tat.forEach(t),M0o=r(hLe," (XLM-RoBERTa-XL model)"),hLe.forEach(t),E0o=i(H),r1=n(H,"LI",{});var pLe=s(r1);Kde=n(pLe,"STRONG",{});var Mat=s(Kde);C0o=r(Mat,"yoso"),Mat.forEach(t),w0o=r(pLe," \u2014 "),rD=n(pLe,"A",{href:!0});var Eat=s(rD);A0o=r(Eat,"YosoForMaskedLM"),Eat.forEach(t),y0o=r(pLe," (YOSO model)"),pLe.forEach(t),H.forEach(t),L0o=i(aa),t1=n(aa,"P",{});var uLe=s(t1);x0o=r(uLe,"The model is set in evaluation mode by default using "),Zde=n(uLe,"CODE",{});var Cat=s(Zde);$0o=r(Cat,"model.eval()"),Cat.forEach(t),k0o=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(uLe,"CODE",{});var wat=s(ece);S0o=r(wat,"model.train()"),wat.forEach(t),uLe.forEach(t),R0o=i(aa),T(a1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),WIe=i(f),Ii=n(f,"H2",{class:!0});var JNe=s(Ii);n1=n(JNe,"A",{id:!0,class:!0,href:!0});var Aat=s(n1);oce=n(Aat,"SPAN",{});var yat=s(oce);T(Z0.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),P0o=i(JNe),rce=n(JNe,"SPAN",{});var Lat=s(rce);B0o=r(Lat,"AutoModelForSeq2SeqLM"),Lat.forEach(t),JNe.forEach(t),QIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(ey.$$.fragment,Xs),I0o=i(Xs),qi=n(Xs,"P",{});var BK=s(qi);q0o=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tD=n(BK,"A",{href:!0});var xat=s(tD);N0o=r(xat,"from_pretrained()"),xat.forEach(t),j0o=r(BK," class method or the "),aD=n(BK,"A",{href:!0});var $at=s(aD);D0o=r($at,"from_config()"),$at.forEach(t),G0o=r(BK,` class
method.`),BK.forEach(t),O0o=i(Xs),oy=n(Xs,"P",{});var YNe=s(oy);V0o=r(YNe,"This class cannot be instantiated directly using "),tce=n(YNe,"CODE",{});var kat=s(tce);X0o=r(kat,"__init__()"),kat.forEach(t),z0o=r(YNe," (throws an error)."),YNe.forEach(t),W0o=i(Xs),lt=n(Xs,"DIV",{class:!0});var vA=s(lt);T(ry.$$.fragment,vA),Q0o=i(vA),ace=n(vA,"P",{});var Sat=s(ace);H0o=r(Sat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sat.forEach(t),U0o=i(vA),Ni=n(vA,"P",{});var IK=s(Ni);J0o=r(IK,`Note:
Loading a model from its configuration file does `),nce=n(IK,"STRONG",{});var Rat=s(nce);Y0o=r(Rat,"not"),Rat.forEach(t),K0o=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(IK,"A",{href:!0});var Pat=s(nD);Z0o=r(Pat,"from_pretrained()"),Pat.forEach(t),eyo=r(IK," to load the model weights."),IK.forEach(t),oyo=i(vA),T(s1.$$.fragment,vA),vA.forEach(t),ryo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(ty.$$.fragment,na),tyo=i(na),sce=n(na,"P",{});var Bat=s(sce);ayo=r(Bat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bat.forEach(t),nyo=i(na),Sa=n(na,"P",{});var FA=s(Sa);syo=r(FA,"The model class to instantiate is selected based on the "),lce=n(FA,"CODE",{});var Iat=s(lce);lyo=r(Iat,"model_type"),Iat.forEach(t),iyo=r(FA,` property of the config object (either
passed as an argument or loaded from `),ice=n(FA,"CODE",{});var qat=s(ice);dyo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),cyo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(FA,"CODE",{});var Nat=s(dce);fyo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),myo=r(FA,":"),FA.forEach(t),gyo=i(na),ue=n(na,"UL",{});var ve=s(ue);l1=n(ve,"LI",{});var _Le=s(l1);cce=n(_Le,"STRONG",{});var jat=s(cce);hyo=r(jat,"bart"),jat.forEach(t),pyo=r(_Le," \u2014 "),sD=n(_Le,"A",{href:!0});var Dat=s(sD);uyo=r(Dat,"BartForConditionalGeneration"),Dat.forEach(t),_yo=r(_Le," (BART model)"),_Le.forEach(t),byo=i(ve),i1=n(ve,"LI",{});var bLe=s(i1);fce=n(bLe,"STRONG",{});var Gat=s(fce);vyo=r(Gat,"bigbird_pegasus"),Gat.forEach(t),Fyo=r(bLe," \u2014 "),lD=n(bLe,"A",{href:!0});var Oat=s(lD);Tyo=r(Oat,"BigBirdPegasusForConditionalGeneration"),Oat.forEach(t),Myo=r(bLe," (BigBirdPegasus model)"),bLe.forEach(t),Eyo=i(ve),d1=n(ve,"LI",{});var vLe=s(d1);mce=n(vLe,"STRONG",{});var Vat=s(mce);Cyo=r(Vat,"blenderbot"),Vat.forEach(t),wyo=r(vLe," \u2014 "),iD=n(vLe,"A",{href:!0});var Xat=s(iD);Ayo=r(Xat,"BlenderbotForConditionalGeneration"),Xat.forEach(t),yyo=r(vLe," (Blenderbot model)"),vLe.forEach(t),Lyo=i(ve),c1=n(ve,"LI",{});var FLe=s(c1);gce=n(FLe,"STRONG",{});var zat=s(gce);xyo=r(zat,"blenderbot-small"),zat.forEach(t),$yo=r(FLe," \u2014 "),dD=n(FLe,"A",{href:!0});var Wat=s(dD);kyo=r(Wat,"BlenderbotSmallForConditionalGeneration"),Wat.forEach(t),Syo=r(FLe," (BlenderbotSmall model)"),FLe.forEach(t),Ryo=i(ve),f1=n(ve,"LI",{});var TLe=s(f1);hce=n(TLe,"STRONG",{});var Qat=s(hce);Pyo=r(Qat,"encoder-decoder"),Qat.forEach(t),Byo=r(TLe," \u2014 "),cD=n(TLe,"A",{href:!0});var Hat=s(cD);Iyo=r(Hat,"EncoderDecoderModel"),Hat.forEach(t),qyo=r(TLe," (Encoder decoder model)"),TLe.forEach(t),Nyo=i(ve),m1=n(ve,"LI",{});var MLe=s(m1);pce=n(MLe,"STRONG",{});var Uat=s(pce);jyo=r(Uat,"fsmt"),Uat.forEach(t),Dyo=r(MLe," \u2014 "),fD=n(MLe,"A",{href:!0});var Jat=s(fD);Gyo=r(Jat,"FSMTForConditionalGeneration"),Jat.forEach(t),Oyo=r(MLe," (FairSeq Machine-Translation model)"),MLe.forEach(t),Vyo=i(ve),g1=n(ve,"LI",{});var ELe=s(g1);uce=n(ELe,"STRONG",{});var Yat=s(uce);Xyo=r(Yat,"led"),Yat.forEach(t),zyo=r(ELe," \u2014 "),mD=n(ELe,"A",{href:!0});var Kat=s(mD);Wyo=r(Kat,"LEDForConditionalGeneration"),Kat.forEach(t),Qyo=r(ELe," (LED model)"),ELe.forEach(t),Hyo=i(ve),h1=n(ve,"LI",{});var CLe=s(h1);_ce=n(CLe,"STRONG",{});var Zat=s(_ce);Uyo=r(Zat,"m2m_100"),Zat.forEach(t),Jyo=r(CLe," \u2014 "),gD=n(CLe,"A",{href:!0});var ent=s(gD);Yyo=r(ent,"M2M100ForConditionalGeneration"),ent.forEach(t),Kyo=r(CLe," (M2M100 model)"),CLe.forEach(t),Zyo=i(ve),p1=n(ve,"LI",{});var wLe=s(p1);bce=n(wLe,"STRONG",{});var ont=s(bce);eLo=r(ont,"marian"),ont.forEach(t),oLo=r(wLe," \u2014 "),hD=n(wLe,"A",{href:!0});var rnt=s(hD);rLo=r(rnt,"MarianMTModel"),rnt.forEach(t),tLo=r(wLe," (Marian model)"),wLe.forEach(t),aLo=i(ve),u1=n(ve,"LI",{});var ALe=s(u1);vce=n(ALe,"STRONG",{});var tnt=s(vce);nLo=r(tnt,"mbart"),tnt.forEach(t),sLo=r(ALe," \u2014 "),pD=n(ALe,"A",{href:!0});var ant=s(pD);lLo=r(ant,"MBartForConditionalGeneration"),ant.forEach(t),iLo=r(ALe," (mBART model)"),ALe.forEach(t),dLo=i(ve),_1=n(ve,"LI",{});var yLe=s(_1);Fce=n(yLe,"STRONG",{});var nnt=s(Fce);cLo=r(nnt,"mt5"),nnt.forEach(t),fLo=r(yLe," \u2014 "),uD=n(yLe,"A",{href:!0});var snt=s(uD);mLo=r(snt,"MT5ForConditionalGeneration"),snt.forEach(t),gLo=r(yLe," (mT5 model)"),yLe.forEach(t),hLo=i(ve),b1=n(ve,"LI",{});var LLe=s(b1);Tce=n(LLe,"STRONG",{});var lnt=s(Tce);pLo=r(lnt,"pegasus"),lnt.forEach(t),uLo=r(LLe," \u2014 "),_D=n(LLe,"A",{href:!0});var int=s(_D);_Lo=r(int,"PegasusForConditionalGeneration"),int.forEach(t),bLo=r(LLe," (Pegasus model)"),LLe.forEach(t),vLo=i(ve),v1=n(ve,"LI",{});var xLe=s(v1);Mce=n(xLe,"STRONG",{});var dnt=s(Mce);FLo=r(dnt,"plbart"),dnt.forEach(t),TLo=r(xLe," \u2014 "),bD=n(xLe,"A",{href:!0});var cnt=s(bD);MLo=r(cnt,"PLBartForConditionalGeneration"),cnt.forEach(t),ELo=r(xLe," (PLBart model)"),xLe.forEach(t),CLo=i(ve),F1=n(ve,"LI",{});var $Le=s(F1);Ece=n($Le,"STRONG",{});var fnt=s(Ece);wLo=r(fnt,"prophetnet"),fnt.forEach(t),ALo=r($Le," \u2014 "),vD=n($Le,"A",{href:!0});var mnt=s(vD);yLo=r(mnt,"ProphetNetForConditionalGeneration"),mnt.forEach(t),LLo=r($Le," (ProphetNet model)"),$Le.forEach(t),xLo=i(ve),T1=n(ve,"LI",{});var kLe=s(T1);Cce=n(kLe,"STRONG",{});var gnt=s(Cce);$Lo=r(gnt,"t5"),gnt.forEach(t),kLo=r(kLe," \u2014 "),FD=n(kLe,"A",{href:!0});var hnt=s(FD);SLo=r(hnt,"T5ForConditionalGeneration"),hnt.forEach(t),RLo=r(kLe," (T5 model)"),kLe.forEach(t),PLo=i(ve),M1=n(ve,"LI",{});var SLe=s(M1);wce=n(SLe,"STRONG",{});var pnt=s(wce);BLo=r(pnt,"xlm-prophetnet"),pnt.forEach(t),ILo=r(SLe," \u2014 "),TD=n(SLe,"A",{href:!0});var unt=s(TD);qLo=r(unt,"XLMProphetNetForConditionalGeneration"),unt.forEach(t),NLo=r(SLe," (XLMProphetNet model)"),SLe.forEach(t),ve.forEach(t),jLo=i(na),E1=n(na,"P",{});var RLe=s(E1);DLo=r(RLe,"The model is set in evaluation mode by default using "),Ace=n(RLe,"CODE",{});var _nt=s(Ace);GLo=r(_nt,"model.eval()"),_nt.forEach(t),OLo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=n(RLe,"CODE",{});var bnt=s(yce);VLo=r(bnt,"model.train()"),bnt.forEach(t),RLe.forEach(t),XLo=i(na),T(C1.$$.fragment,na),na.forEach(t),Xs.forEach(t),HIe=i(f),ji=n(f,"H2",{class:!0});var KNe=s(ji);w1=n(KNe,"A",{id:!0,class:!0,href:!0});var vnt=s(w1);Lce=n(vnt,"SPAN",{});var Fnt=s(Lce);T(ay.$$.fragment,Fnt),Fnt.forEach(t),vnt.forEach(t),zLo=i(KNe),xce=n(KNe,"SPAN",{});var Tnt=s(xce);WLo=r(Tnt,"AutoModelForSequenceClassification"),Tnt.forEach(t),KNe.forEach(t),UIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(ny.$$.fragment,zs),QLo=i(zs),Di=n(zs,"P",{});var qK=s(Di);HLo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MD=n(qK,"A",{href:!0});var Mnt=s(MD);ULo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),JLo=r(qK," class method or the "),ED=n(qK,"A",{href:!0});var Ent=s(ED);YLo=r(Ent,"from_config()"),Ent.forEach(t),KLo=r(qK,` class
method.`),qK.forEach(t),ZLo=i(zs),sy=n(zs,"P",{});var ZNe=s(sy);e8o=r(ZNe,"This class cannot be instantiated directly using "),$ce=n(ZNe,"CODE",{});var Cnt=s($ce);o8o=r(Cnt,"__init__()"),Cnt.forEach(t),r8o=r(ZNe," (throws an error)."),ZNe.forEach(t),t8o=i(zs),it=n(zs,"DIV",{class:!0});var TA=s(it);T(ly.$$.fragment,TA),a8o=i(TA),kce=n(TA,"P",{});var wnt=s(kce);n8o=r(wnt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wnt.forEach(t),s8o=i(TA),Gi=n(TA,"P",{});var NK=s(Gi);l8o=r(NK,`Note:
Loading a model from its configuration file does `),Sce=n(NK,"STRONG",{});var Ant=s(Sce);i8o=r(Ant,"not"),Ant.forEach(t),d8o=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=n(NK,"A",{href:!0});var ynt=s(CD);c8o=r(ynt,"from_pretrained()"),ynt.forEach(t),f8o=r(NK," to load the model weights."),NK.forEach(t),m8o=i(TA),T(A1.$$.fragment,TA),TA.forEach(t),g8o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(iy.$$.fragment,sa),h8o=i(sa),Rce=n(sa,"P",{});var Lnt=s(Rce);p8o=r(Lnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lnt.forEach(t),u8o=i(sa),Ra=n(sa,"P",{});var MA=s(Ra);_8o=r(MA,"The model class to instantiate is selected based on the "),Pce=n(MA,"CODE",{});var xnt=s(Pce);b8o=r(xnt,"model_type"),xnt.forEach(t),v8o=r(MA,` property of the config object (either
passed as an argument or loaded from `),Bce=n(MA,"CODE",{});var $nt=s(Bce);F8o=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),T8o=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(MA,"CODE",{});var knt=s(Ice);M8o=r(knt,"pretrained_model_name_or_path"),knt.forEach(t),E8o=r(MA,":"),MA.forEach(t),C8o=i(sa),q=n(sa,"UL",{});var j=s(q);y1=n(j,"LI",{});var PLe=s(y1);qce=n(PLe,"STRONG",{});var Snt=s(qce);w8o=r(Snt,"albert"),Snt.forEach(t),A8o=r(PLe," \u2014 "),wD=n(PLe,"A",{href:!0});var Rnt=s(wD);y8o=r(Rnt,"AlbertForSequenceClassification"),Rnt.forEach(t),L8o=r(PLe," (ALBERT model)"),PLe.forEach(t),x8o=i(j),L1=n(j,"LI",{});var BLe=s(L1);Nce=n(BLe,"STRONG",{});var Pnt=s(Nce);$8o=r(Pnt,"bart"),Pnt.forEach(t),k8o=r(BLe," \u2014 "),AD=n(BLe,"A",{href:!0});var Bnt=s(AD);S8o=r(Bnt,"BartForSequenceClassification"),Bnt.forEach(t),R8o=r(BLe," (BART model)"),BLe.forEach(t),P8o=i(j),x1=n(j,"LI",{});var ILe=s(x1);jce=n(ILe,"STRONG",{});var Int=s(jce);B8o=r(Int,"bert"),Int.forEach(t),I8o=r(ILe," \u2014 "),yD=n(ILe,"A",{href:!0});var qnt=s(yD);q8o=r(qnt,"BertForSequenceClassification"),qnt.forEach(t),N8o=r(ILe," (BERT model)"),ILe.forEach(t),j8o=i(j),$1=n(j,"LI",{});var qLe=s($1);Dce=n(qLe,"STRONG",{});var Nnt=s(Dce);D8o=r(Nnt,"big_bird"),Nnt.forEach(t),G8o=r(qLe," \u2014 "),LD=n(qLe,"A",{href:!0});var jnt=s(LD);O8o=r(jnt,"BigBirdForSequenceClassification"),jnt.forEach(t),V8o=r(qLe," (BigBird model)"),qLe.forEach(t),X8o=i(j),k1=n(j,"LI",{});var NLe=s(k1);Gce=n(NLe,"STRONG",{});var Dnt=s(Gce);z8o=r(Dnt,"bigbird_pegasus"),Dnt.forEach(t),W8o=r(NLe," \u2014 "),xD=n(NLe,"A",{href:!0});var Gnt=s(xD);Q8o=r(Gnt,"BigBirdPegasusForSequenceClassification"),Gnt.forEach(t),H8o=r(NLe," (BigBirdPegasus model)"),NLe.forEach(t),U8o=i(j),S1=n(j,"LI",{});var jLe=s(S1);Oce=n(jLe,"STRONG",{});var Ont=s(Oce);J8o=r(Ont,"camembert"),Ont.forEach(t),Y8o=r(jLe," \u2014 "),$D=n(jLe,"A",{href:!0});var Vnt=s($D);K8o=r(Vnt,"CamembertForSequenceClassification"),Vnt.forEach(t),Z8o=r(jLe," (CamemBERT model)"),jLe.forEach(t),exo=i(j),R1=n(j,"LI",{});var DLe=s(R1);Vce=n(DLe,"STRONG",{});var Xnt=s(Vce);oxo=r(Xnt,"canine"),Xnt.forEach(t),rxo=r(DLe," \u2014 "),kD=n(DLe,"A",{href:!0});var znt=s(kD);txo=r(znt,"CanineForSequenceClassification"),znt.forEach(t),axo=r(DLe," (Canine model)"),DLe.forEach(t),nxo=i(j),P1=n(j,"LI",{});var GLe=s(P1);Xce=n(GLe,"STRONG",{});var Wnt=s(Xce);sxo=r(Wnt,"convbert"),Wnt.forEach(t),lxo=r(GLe," \u2014 "),SD=n(GLe,"A",{href:!0});var Qnt=s(SD);ixo=r(Qnt,"ConvBertForSequenceClassification"),Qnt.forEach(t),dxo=r(GLe," (ConvBERT model)"),GLe.forEach(t),cxo=i(j),B1=n(j,"LI",{});var OLe=s(B1);zce=n(OLe,"STRONG",{});var Hnt=s(zce);fxo=r(Hnt,"ctrl"),Hnt.forEach(t),mxo=r(OLe," \u2014 "),RD=n(OLe,"A",{href:!0});var Unt=s(RD);gxo=r(Unt,"CTRLForSequenceClassification"),Unt.forEach(t),hxo=r(OLe," (CTRL model)"),OLe.forEach(t),pxo=i(j),I1=n(j,"LI",{});var VLe=s(I1);Wce=n(VLe,"STRONG",{});var Jnt=s(Wce);uxo=r(Jnt,"data2vec-text"),Jnt.forEach(t),_xo=r(VLe," \u2014 "),PD=n(VLe,"A",{href:!0});var Ynt=s(PD);bxo=r(Ynt,"Data2VecTextForSequenceClassification"),Ynt.forEach(t),vxo=r(VLe," (Data2VecText model)"),VLe.forEach(t),Fxo=i(j),q1=n(j,"LI",{});var XLe=s(q1);Qce=n(XLe,"STRONG",{});var Knt=s(Qce);Txo=r(Knt,"deberta"),Knt.forEach(t),Mxo=r(XLe," \u2014 "),BD=n(XLe,"A",{href:!0});var Znt=s(BD);Exo=r(Znt,"DebertaForSequenceClassification"),Znt.forEach(t),Cxo=r(XLe," (DeBERTa model)"),XLe.forEach(t),wxo=i(j),N1=n(j,"LI",{});var zLe=s(N1);Hce=n(zLe,"STRONG",{});var est=s(Hce);Axo=r(est,"deberta-v2"),est.forEach(t),yxo=r(zLe," \u2014 "),ID=n(zLe,"A",{href:!0});var ost=s(ID);Lxo=r(ost,"DebertaV2ForSequenceClassification"),ost.forEach(t),xxo=r(zLe," (DeBERTa-v2 model)"),zLe.forEach(t),$xo=i(j),j1=n(j,"LI",{});var WLe=s(j1);Uce=n(WLe,"STRONG",{});var rst=s(Uce);kxo=r(rst,"distilbert"),rst.forEach(t),Sxo=r(WLe," \u2014 "),qD=n(WLe,"A",{href:!0});var tst=s(qD);Rxo=r(tst,"DistilBertForSequenceClassification"),tst.forEach(t),Pxo=r(WLe," (DistilBERT model)"),WLe.forEach(t),Bxo=i(j),D1=n(j,"LI",{});var QLe=s(D1);Jce=n(QLe,"STRONG",{});var ast=s(Jce);Ixo=r(ast,"electra"),ast.forEach(t),qxo=r(QLe," \u2014 "),ND=n(QLe,"A",{href:!0});var nst=s(ND);Nxo=r(nst,"ElectraForSequenceClassification"),nst.forEach(t),jxo=r(QLe," (ELECTRA model)"),QLe.forEach(t),Dxo=i(j),G1=n(j,"LI",{});var HLe=s(G1);Yce=n(HLe,"STRONG",{});var sst=s(Yce);Gxo=r(sst,"flaubert"),sst.forEach(t),Oxo=r(HLe," \u2014 "),jD=n(HLe,"A",{href:!0});var lst=s(jD);Vxo=r(lst,"FlaubertForSequenceClassification"),lst.forEach(t),Xxo=r(HLe," (FlauBERT model)"),HLe.forEach(t),zxo=i(j),O1=n(j,"LI",{});var ULe=s(O1);Kce=n(ULe,"STRONG",{});var ist=s(Kce);Wxo=r(ist,"fnet"),ist.forEach(t),Qxo=r(ULe," \u2014 "),DD=n(ULe,"A",{href:!0});var dst=s(DD);Hxo=r(dst,"FNetForSequenceClassification"),dst.forEach(t),Uxo=r(ULe," (FNet model)"),ULe.forEach(t),Jxo=i(j),V1=n(j,"LI",{});var JLe=s(V1);Zce=n(JLe,"STRONG",{});var cst=s(Zce);Yxo=r(cst,"funnel"),cst.forEach(t),Kxo=r(JLe," \u2014 "),GD=n(JLe,"A",{href:!0});var fst=s(GD);Zxo=r(fst,"FunnelForSequenceClassification"),fst.forEach(t),e9o=r(JLe," (Funnel Transformer model)"),JLe.forEach(t),o9o=i(j),X1=n(j,"LI",{});var YLe=s(X1);efe=n(YLe,"STRONG",{});var mst=s(efe);r9o=r(mst,"gpt2"),mst.forEach(t),t9o=r(YLe," \u2014 "),OD=n(YLe,"A",{href:!0});var gst=s(OD);a9o=r(gst,"GPT2ForSequenceClassification"),gst.forEach(t),n9o=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),s9o=i(j),z1=n(j,"LI",{});var KLe=s(z1);ofe=n(KLe,"STRONG",{});var hst=s(ofe);l9o=r(hst,"gpt_neo"),hst.forEach(t),i9o=r(KLe," \u2014 "),VD=n(KLe,"A",{href:!0});var pst=s(VD);d9o=r(pst,"GPTNeoForSequenceClassification"),pst.forEach(t),c9o=r(KLe," (GPT Neo model)"),KLe.forEach(t),f9o=i(j),W1=n(j,"LI",{});var ZLe=s(W1);rfe=n(ZLe,"STRONG",{});var ust=s(rfe);m9o=r(ust,"gptj"),ust.forEach(t),g9o=r(ZLe," \u2014 "),XD=n(ZLe,"A",{href:!0});var _st=s(XD);h9o=r(_st,"GPTJForSequenceClassification"),_st.forEach(t),p9o=r(ZLe," (GPT-J model)"),ZLe.forEach(t),u9o=i(j),Q1=n(j,"LI",{});var e8e=s(Q1);tfe=n(e8e,"STRONG",{});var bst=s(tfe);_9o=r(bst,"ibert"),bst.forEach(t),b9o=r(e8e," \u2014 "),zD=n(e8e,"A",{href:!0});var vst=s(zD);v9o=r(vst,"IBertForSequenceClassification"),vst.forEach(t),F9o=r(e8e," (I-BERT model)"),e8e.forEach(t),T9o=i(j),H1=n(j,"LI",{});var o8e=s(H1);afe=n(o8e,"STRONG",{});var Fst=s(afe);M9o=r(Fst,"layoutlm"),Fst.forEach(t),E9o=r(o8e," \u2014 "),WD=n(o8e,"A",{href:!0});var Tst=s(WD);C9o=r(Tst,"LayoutLMForSequenceClassification"),Tst.forEach(t),w9o=r(o8e," (LayoutLM model)"),o8e.forEach(t),A9o=i(j),U1=n(j,"LI",{});var r8e=s(U1);nfe=n(r8e,"STRONG",{});var Mst=s(nfe);y9o=r(Mst,"layoutlmv2"),Mst.forEach(t),L9o=r(r8e," \u2014 "),QD=n(r8e,"A",{href:!0});var Est=s(QD);x9o=r(Est,"LayoutLMv2ForSequenceClassification"),Est.forEach(t),$9o=r(r8e," (LayoutLMv2 model)"),r8e.forEach(t),k9o=i(j),J1=n(j,"LI",{});var t8e=s(J1);sfe=n(t8e,"STRONG",{});var Cst=s(sfe);S9o=r(Cst,"led"),Cst.forEach(t),R9o=r(t8e," \u2014 "),HD=n(t8e,"A",{href:!0});var wst=s(HD);P9o=r(wst,"LEDForSequenceClassification"),wst.forEach(t),B9o=r(t8e," (LED model)"),t8e.forEach(t),I9o=i(j),Y1=n(j,"LI",{});var a8e=s(Y1);lfe=n(a8e,"STRONG",{});var Ast=s(lfe);q9o=r(Ast,"longformer"),Ast.forEach(t),N9o=r(a8e," \u2014 "),UD=n(a8e,"A",{href:!0});var yst=s(UD);j9o=r(yst,"LongformerForSequenceClassification"),yst.forEach(t),D9o=r(a8e," (Longformer model)"),a8e.forEach(t),G9o=i(j),K1=n(j,"LI",{});var n8e=s(K1);ife=n(n8e,"STRONG",{});var Lst=s(ife);O9o=r(Lst,"mbart"),Lst.forEach(t),V9o=r(n8e," \u2014 "),JD=n(n8e,"A",{href:!0});var xst=s(JD);X9o=r(xst,"MBartForSequenceClassification"),xst.forEach(t),z9o=r(n8e," (mBART model)"),n8e.forEach(t),W9o=i(j),Z1=n(j,"LI",{});var s8e=s(Z1);dfe=n(s8e,"STRONG",{});var $st=s(dfe);Q9o=r($st,"megatron-bert"),$st.forEach(t),H9o=r(s8e," \u2014 "),YD=n(s8e,"A",{href:!0});var kst=s(YD);U9o=r(kst,"MegatronBertForSequenceClassification"),kst.forEach(t),J9o=r(s8e," (MegatronBert model)"),s8e.forEach(t),Y9o=i(j),e7=n(j,"LI",{});var l8e=s(e7);cfe=n(l8e,"STRONG",{});var Sst=s(cfe);K9o=r(Sst,"mobilebert"),Sst.forEach(t),Z9o=r(l8e," \u2014 "),KD=n(l8e,"A",{href:!0});var Rst=s(KD);e$o=r(Rst,"MobileBertForSequenceClassification"),Rst.forEach(t),o$o=r(l8e," (MobileBERT model)"),l8e.forEach(t),r$o=i(j),o7=n(j,"LI",{});var i8e=s(o7);ffe=n(i8e,"STRONG",{});var Pst=s(ffe);t$o=r(Pst,"mpnet"),Pst.forEach(t),a$o=r(i8e," \u2014 "),ZD=n(i8e,"A",{href:!0});var Bst=s(ZD);n$o=r(Bst,"MPNetForSequenceClassification"),Bst.forEach(t),s$o=r(i8e," (MPNet model)"),i8e.forEach(t),l$o=i(j),r7=n(j,"LI",{});var d8e=s(r7);mfe=n(d8e,"STRONG",{});var Ist=s(mfe);i$o=r(Ist,"nystromformer"),Ist.forEach(t),d$o=r(d8e," \u2014 "),eG=n(d8e,"A",{href:!0});var qst=s(eG);c$o=r(qst,"NystromformerForSequenceClassification"),qst.forEach(t),f$o=r(d8e," (Nystromformer model)"),d8e.forEach(t),m$o=i(j),t7=n(j,"LI",{});var c8e=s(t7);gfe=n(c8e,"STRONG",{});var Nst=s(gfe);g$o=r(Nst,"openai-gpt"),Nst.forEach(t),h$o=r(c8e," \u2014 "),oG=n(c8e,"A",{href:!0});var jst=s(oG);p$o=r(jst,"OpenAIGPTForSequenceClassification"),jst.forEach(t),u$o=r(c8e," (OpenAI GPT model)"),c8e.forEach(t),_$o=i(j),a7=n(j,"LI",{});var f8e=s(a7);hfe=n(f8e,"STRONG",{});var Dst=s(hfe);b$o=r(Dst,"perceiver"),Dst.forEach(t),v$o=r(f8e," \u2014 "),rG=n(f8e,"A",{href:!0});var Gst=s(rG);F$o=r(Gst,"PerceiverForSequenceClassification"),Gst.forEach(t),T$o=r(f8e," (Perceiver model)"),f8e.forEach(t),M$o=i(j),n7=n(j,"LI",{});var m8e=s(n7);pfe=n(m8e,"STRONG",{});var Ost=s(pfe);E$o=r(Ost,"plbart"),Ost.forEach(t),C$o=r(m8e," \u2014 "),tG=n(m8e,"A",{href:!0});var Vst=s(tG);w$o=r(Vst,"PLBartForSequenceClassification"),Vst.forEach(t),A$o=r(m8e," (PLBart model)"),m8e.forEach(t),y$o=i(j),s7=n(j,"LI",{});var g8e=s(s7);ufe=n(g8e,"STRONG",{});var Xst=s(ufe);L$o=r(Xst,"qdqbert"),Xst.forEach(t),x$o=r(g8e," \u2014 "),aG=n(g8e,"A",{href:!0});var zst=s(aG);$$o=r(zst,"QDQBertForSequenceClassification"),zst.forEach(t),k$o=r(g8e," (QDQBert model)"),g8e.forEach(t),S$o=i(j),l7=n(j,"LI",{});var h8e=s(l7);_fe=n(h8e,"STRONG",{});var Wst=s(_fe);R$o=r(Wst,"reformer"),Wst.forEach(t),P$o=r(h8e," \u2014 "),nG=n(h8e,"A",{href:!0});var Qst=s(nG);B$o=r(Qst,"ReformerForSequenceClassification"),Qst.forEach(t),I$o=r(h8e," (Reformer model)"),h8e.forEach(t),q$o=i(j),i7=n(j,"LI",{});var p8e=s(i7);bfe=n(p8e,"STRONG",{});var Hst=s(bfe);N$o=r(Hst,"rembert"),Hst.forEach(t),j$o=r(p8e," \u2014 "),sG=n(p8e,"A",{href:!0});var Ust=s(sG);D$o=r(Ust,"RemBertForSequenceClassification"),Ust.forEach(t),G$o=r(p8e," (RemBERT model)"),p8e.forEach(t),O$o=i(j),d7=n(j,"LI",{});var u8e=s(d7);vfe=n(u8e,"STRONG",{});var Jst=s(vfe);V$o=r(Jst,"roberta"),Jst.forEach(t),X$o=r(u8e," \u2014 "),lG=n(u8e,"A",{href:!0});var Yst=s(lG);z$o=r(Yst,"RobertaForSequenceClassification"),Yst.forEach(t),W$o=r(u8e," (RoBERTa model)"),u8e.forEach(t),Q$o=i(j),c7=n(j,"LI",{});var _8e=s(c7);Ffe=n(_8e,"STRONG",{});var Kst=s(Ffe);H$o=r(Kst,"roformer"),Kst.forEach(t),U$o=r(_8e," \u2014 "),iG=n(_8e,"A",{href:!0});var Zst=s(iG);J$o=r(Zst,"RoFormerForSequenceClassification"),Zst.forEach(t),Y$o=r(_8e," (RoFormer model)"),_8e.forEach(t),K$o=i(j),f7=n(j,"LI",{});var b8e=s(f7);Tfe=n(b8e,"STRONG",{});var elt=s(Tfe);Z$o=r(elt,"squeezebert"),elt.forEach(t),eko=r(b8e," \u2014 "),dG=n(b8e,"A",{href:!0});var olt=s(dG);oko=r(olt,"SqueezeBertForSequenceClassification"),olt.forEach(t),rko=r(b8e," (SqueezeBERT model)"),b8e.forEach(t),tko=i(j),m7=n(j,"LI",{});var v8e=s(m7);Mfe=n(v8e,"STRONG",{});var rlt=s(Mfe);ako=r(rlt,"tapas"),rlt.forEach(t),nko=r(v8e," \u2014 "),cG=n(v8e,"A",{href:!0});var tlt=s(cG);sko=r(tlt,"TapasForSequenceClassification"),tlt.forEach(t),lko=r(v8e," (TAPAS model)"),v8e.forEach(t),iko=i(j),g7=n(j,"LI",{});var F8e=s(g7);Efe=n(F8e,"STRONG",{});var alt=s(Efe);dko=r(alt,"transfo-xl"),alt.forEach(t),cko=r(F8e," \u2014 "),fG=n(F8e,"A",{href:!0});var nlt=s(fG);fko=r(nlt,"TransfoXLForSequenceClassification"),nlt.forEach(t),mko=r(F8e," (Transformer-XL model)"),F8e.forEach(t),gko=i(j),h7=n(j,"LI",{});var T8e=s(h7);Cfe=n(T8e,"STRONG",{});var slt=s(Cfe);hko=r(slt,"xlm"),slt.forEach(t),pko=r(T8e," \u2014 "),mG=n(T8e,"A",{href:!0});var llt=s(mG);uko=r(llt,"XLMForSequenceClassification"),llt.forEach(t),_ko=r(T8e," (XLM model)"),T8e.forEach(t),bko=i(j),p7=n(j,"LI",{});var M8e=s(p7);wfe=n(M8e,"STRONG",{});var ilt=s(wfe);vko=r(ilt,"xlm-roberta"),ilt.forEach(t),Fko=r(M8e," \u2014 "),gG=n(M8e,"A",{href:!0});var dlt=s(gG);Tko=r(dlt,"XLMRobertaForSequenceClassification"),dlt.forEach(t),Mko=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),Eko=i(j),u7=n(j,"LI",{});var E8e=s(u7);Afe=n(E8e,"STRONG",{});var clt=s(Afe);Cko=r(clt,"xlm-roberta-xl"),clt.forEach(t),wko=r(E8e," \u2014 "),hG=n(E8e,"A",{href:!0});var flt=s(hG);Ako=r(flt,"XLMRobertaXLForSequenceClassification"),flt.forEach(t),yko=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),Lko=i(j),_7=n(j,"LI",{});var C8e=s(_7);yfe=n(C8e,"STRONG",{});var mlt=s(yfe);xko=r(mlt,"xlnet"),mlt.forEach(t),$ko=r(C8e," \u2014 "),pG=n(C8e,"A",{href:!0});var glt=s(pG);kko=r(glt,"XLNetForSequenceClassification"),glt.forEach(t),Sko=r(C8e," (XLNet model)"),C8e.forEach(t),Rko=i(j),b7=n(j,"LI",{});var w8e=s(b7);Lfe=n(w8e,"STRONG",{});var hlt=s(Lfe);Pko=r(hlt,"yoso"),hlt.forEach(t),Bko=r(w8e," \u2014 "),uG=n(w8e,"A",{href:!0});var plt=s(uG);Iko=r(plt,"YosoForSequenceClassification"),plt.forEach(t),qko=r(w8e," (YOSO model)"),w8e.forEach(t),j.forEach(t),Nko=i(sa),v7=n(sa,"P",{});var A8e=s(v7);jko=r(A8e,"The model is set in evaluation mode by default using "),xfe=n(A8e,"CODE",{});var ult=s(xfe);Dko=r(ult,"model.eval()"),ult.forEach(t),Gko=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(A8e,"CODE",{});var _lt=s($fe);Oko=r(_lt,"model.train()"),_lt.forEach(t),A8e.forEach(t),Vko=i(sa),T(F7.$$.fragment,sa),sa.forEach(t),zs.forEach(t),JIe=i(f),Oi=n(f,"H2",{class:!0});var eje=s(Oi);T7=n(eje,"A",{id:!0,class:!0,href:!0});var blt=s(T7);kfe=n(blt,"SPAN",{});var vlt=s(kfe);T(dy.$$.fragment,vlt),vlt.forEach(t),blt.forEach(t),Xko=i(eje),Sfe=n(eje,"SPAN",{});var Flt=s(Sfe);zko=r(Flt,"AutoModelForMultipleChoice"),Flt.forEach(t),eje.forEach(t),YIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(cy.$$.fragment,Ws),Wko=i(Ws),Vi=n(Ws,"P",{});var jK=s(Vi);Qko=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_G=n(jK,"A",{href:!0});var Tlt=s(_G);Hko=r(Tlt,"from_pretrained()"),Tlt.forEach(t),Uko=r(jK," class method or the "),bG=n(jK,"A",{href:!0});var Mlt=s(bG);Jko=r(Mlt,"from_config()"),Mlt.forEach(t),Yko=r(jK,` class
method.`),jK.forEach(t),Kko=i(Ws),fy=n(Ws,"P",{});var oje=s(fy);Zko=r(oje,"This class cannot be instantiated directly using "),Rfe=n(oje,"CODE",{});var Elt=s(Rfe);eSo=r(Elt,"__init__()"),Elt.forEach(t),oSo=r(oje," (throws an error)."),oje.forEach(t),rSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var EA=s(dt);T(my.$$.fragment,EA),tSo=i(EA),Pfe=n(EA,"P",{});var Clt=s(Pfe);aSo=r(Clt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Clt.forEach(t),nSo=i(EA),Xi=n(EA,"P",{});var DK=s(Xi);sSo=r(DK,`Note:
Loading a model from its configuration file does `),Bfe=n(DK,"STRONG",{});var wlt=s(Bfe);lSo=r(wlt,"not"),wlt.forEach(t),iSo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=n(DK,"A",{href:!0});var Alt=s(vG);dSo=r(Alt,"from_pretrained()"),Alt.forEach(t),cSo=r(DK," to load the model weights."),DK.forEach(t),fSo=i(EA),T(M7.$$.fragment,EA),EA.forEach(t),mSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(gy.$$.fragment,la),gSo=i(la),Ife=n(la,"P",{});var ylt=s(Ife);hSo=r(ylt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ylt.forEach(t),pSo=i(la),Pa=n(la,"P",{});var CA=s(Pa);uSo=r(CA,"The model class to instantiate is selected based on the "),qfe=n(CA,"CODE",{});var Llt=s(qfe);_So=r(Llt,"model_type"),Llt.forEach(t),bSo=r(CA,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(CA,"CODE",{});var xlt=s(Nfe);vSo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),FSo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=n(CA,"CODE",{});var $lt=s(jfe);TSo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),MSo=r(CA,":"),CA.forEach(t),ESo=i(la),Y=n(la,"UL",{});var K=s(Y);E7=n(K,"LI",{});var y8e=s(E7);Dfe=n(y8e,"STRONG",{});var klt=s(Dfe);CSo=r(klt,"albert"),klt.forEach(t),wSo=r(y8e," \u2014 "),FG=n(y8e,"A",{href:!0});var Slt=s(FG);ASo=r(Slt,"AlbertForMultipleChoice"),Slt.forEach(t),ySo=r(y8e," (ALBERT model)"),y8e.forEach(t),LSo=i(K),C7=n(K,"LI",{});var L8e=s(C7);Gfe=n(L8e,"STRONG",{});var Rlt=s(Gfe);xSo=r(Rlt,"bert"),Rlt.forEach(t),$So=r(L8e," \u2014 "),TG=n(L8e,"A",{href:!0});var Plt=s(TG);kSo=r(Plt,"BertForMultipleChoice"),Plt.forEach(t),SSo=r(L8e," (BERT model)"),L8e.forEach(t),RSo=i(K),w7=n(K,"LI",{});var x8e=s(w7);Ofe=n(x8e,"STRONG",{});var Blt=s(Ofe);PSo=r(Blt,"big_bird"),Blt.forEach(t),BSo=r(x8e," \u2014 "),MG=n(x8e,"A",{href:!0});var Ilt=s(MG);ISo=r(Ilt,"BigBirdForMultipleChoice"),Ilt.forEach(t),qSo=r(x8e," (BigBird model)"),x8e.forEach(t),NSo=i(K),A7=n(K,"LI",{});var $8e=s(A7);Vfe=n($8e,"STRONG",{});var qlt=s(Vfe);jSo=r(qlt,"camembert"),qlt.forEach(t),DSo=r($8e," \u2014 "),EG=n($8e,"A",{href:!0});var Nlt=s(EG);GSo=r(Nlt,"CamembertForMultipleChoice"),Nlt.forEach(t),OSo=r($8e," (CamemBERT model)"),$8e.forEach(t),VSo=i(K),y7=n(K,"LI",{});var k8e=s(y7);Xfe=n(k8e,"STRONG",{});var jlt=s(Xfe);XSo=r(jlt,"canine"),jlt.forEach(t),zSo=r(k8e," \u2014 "),CG=n(k8e,"A",{href:!0});var Dlt=s(CG);WSo=r(Dlt,"CanineForMultipleChoice"),Dlt.forEach(t),QSo=r(k8e," (Canine model)"),k8e.forEach(t),HSo=i(K),L7=n(K,"LI",{});var S8e=s(L7);zfe=n(S8e,"STRONG",{});var Glt=s(zfe);USo=r(Glt,"convbert"),Glt.forEach(t),JSo=r(S8e," \u2014 "),wG=n(S8e,"A",{href:!0});var Olt=s(wG);YSo=r(Olt,"ConvBertForMultipleChoice"),Olt.forEach(t),KSo=r(S8e," (ConvBERT model)"),S8e.forEach(t),ZSo=i(K),x7=n(K,"LI",{});var R8e=s(x7);Wfe=n(R8e,"STRONG",{});var Vlt=s(Wfe);eRo=r(Vlt,"data2vec-text"),Vlt.forEach(t),oRo=r(R8e," \u2014 "),AG=n(R8e,"A",{href:!0});var Xlt=s(AG);rRo=r(Xlt,"Data2VecTextForMultipleChoice"),Xlt.forEach(t),tRo=r(R8e," (Data2VecText model)"),R8e.forEach(t),aRo=i(K),$7=n(K,"LI",{});var P8e=s($7);Qfe=n(P8e,"STRONG",{});var zlt=s(Qfe);nRo=r(zlt,"deberta-v2"),zlt.forEach(t),sRo=r(P8e," \u2014 "),yG=n(P8e,"A",{href:!0});var Wlt=s(yG);lRo=r(Wlt,"DebertaV2ForMultipleChoice"),Wlt.forEach(t),iRo=r(P8e," (DeBERTa-v2 model)"),P8e.forEach(t),dRo=i(K),k7=n(K,"LI",{});var B8e=s(k7);Hfe=n(B8e,"STRONG",{});var Qlt=s(Hfe);cRo=r(Qlt,"distilbert"),Qlt.forEach(t),fRo=r(B8e," \u2014 "),LG=n(B8e,"A",{href:!0});var Hlt=s(LG);mRo=r(Hlt,"DistilBertForMultipleChoice"),Hlt.forEach(t),gRo=r(B8e," (DistilBERT model)"),B8e.forEach(t),hRo=i(K),S7=n(K,"LI",{});var I8e=s(S7);Ufe=n(I8e,"STRONG",{});var Ult=s(Ufe);pRo=r(Ult,"electra"),Ult.forEach(t),uRo=r(I8e," \u2014 "),xG=n(I8e,"A",{href:!0});var Jlt=s(xG);_Ro=r(Jlt,"ElectraForMultipleChoice"),Jlt.forEach(t),bRo=r(I8e," (ELECTRA model)"),I8e.forEach(t),vRo=i(K),R7=n(K,"LI",{});var q8e=s(R7);Jfe=n(q8e,"STRONG",{});var Ylt=s(Jfe);FRo=r(Ylt,"flaubert"),Ylt.forEach(t),TRo=r(q8e," \u2014 "),$G=n(q8e,"A",{href:!0});var Klt=s($G);MRo=r(Klt,"FlaubertForMultipleChoice"),Klt.forEach(t),ERo=r(q8e," (FlauBERT model)"),q8e.forEach(t),CRo=i(K),P7=n(K,"LI",{});var N8e=s(P7);Yfe=n(N8e,"STRONG",{});var Zlt=s(Yfe);wRo=r(Zlt,"fnet"),Zlt.forEach(t),ARo=r(N8e," \u2014 "),kG=n(N8e,"A",{href:!0});var eit=s(kG);yRo=r(eit,"FNetForMultipleChoice"),eit.forEach(t),LRo=r(N8e," (FNet model)"),N8e.forEach(t),xRo=i(K),B7=n(K,"LI",{});var j8e=s(B7);Kfe=n(j8e,"STRONG",{});var oit=s(Kfe);$Ro=r(oit,"funnel"),oit.forEach(t),kRo=r(j8e," \u2014 "),SG=n(j8e,"A",{href:!0});var rit=s(SG);SRo=r(rit,"FunnelForMultipleChoice"),rit.forEach(t),RRo=r(j8e," (Funnel Transformer model)"),j8e.forEach(t),PRo=i(K),I7=n(K,"LI",{});var D8e=s(I7);Zfe=n(D8e,"STRONG",{});var tit=s(Zfe);BRo=r(tit,"ibert"),tit.forEach(t),IRo=r(D8e," \u2014 "),RG=n(D8e,"A",{href:!0});var ait=s(RG);qRo=r(ait,"IBertForMultipleChoice"),ait.forEach(t),NRo=r(D8e," (I-BERT model)"),D8e.forEach(t),jRo=i(K),q7=n(K,"LI",{});var G8e=s(q7);eme=n(G8e,"STRONG",{});var nit=s(eme);DRo=r(nit,"longformer"),nit.forEach(t),GRo=r(G8e," \u2014 "),PG=n(G8e,"A",{href:!0});var sit=s(PG);ORo=r(sit,"LongformerForMultipleChoice"),sit.forEach(t),VRo=r(G8e," (Longformer model)"),G8e.forEach(t),XRo=i(K),N7=n(K,"LI",{});var O8e=s(N7);ome=n(O8e,"STRONG",{});var lit=s(ome);zRo=r(lit,"megatron-bert"),lit.forEach(t),WRo=r(O8e," \u2014 "),BG=n(O8e,"A",{href:!0});var iit=s(BG);QRo=r(iit,"MegatronBertForMultipleChoice"),iit.forEach(t),HRo=r(O8e," (MegatronBert model)"),O8e.forEach(t),URo=i(K),j7=n(K,"LI",{});var V8e=s(j7);rme=n(V8e,"STRONG",{});var dit=s(rme);JRo=r(dit,"mobilebert"),dit.forEach(t),YRo=r(V8e," \u2014 "),IG=n(V8e,"A",{href:!0});var cit=s(IG);KRo=r(cit,"MobileBertForMultipleChoice"),cit.forEach(t),ZRo=r(V8e," (MobileBERT model)"),V8e.forEach(t),ePo=i(K),D7=n(K,"LI",{});var X8e=s(D7);tme=n(X8e,"STRONG",{});var fit=s(tme);oPo=r(fit,"mpnet"),fit.forEach(t),rPo=r(X8e," \u2014 "),qG=n(X8e,"A",{href:!0});var mit=s(qG);tPo=r(mit,"MPNetForMultipleChoice"),mit.forEach(t),aPo=r(X8e," (MPNet model)"),X8e.forEach(t),nPo=i(K),G7=n(K,"LI",{});var z8e=s(G7);ame=n(z8e,"STRONG",{});var git=s(ame);sPo=r(git,"nystromformer"),git.forEach(t),lPo=r(z8e," \u2014 "),NG=n(z8e,"A",{href:!0});var hit=s(NG);iPo=r(hit,"NystromformerForMultipleChoice"),hit.forEach(t),dPo=r(z8e," (Nystromformer model)"),z8e.forEach(t),cPo=i(K),O7=n(K,"LI",{});var W8e=s(O7);nme=n(W8e,"STRONG",{});var pit=s(nme);fPo=r(pit,"qdqbert"),pit.forEach(t),mPo=r(W8e," \u2014 "),jG=n(W8e,"A",{href:!0});var uit=s(jG);gPo=r(uit,"QDQBertForMultipleChoice"),uit.forEach(t),hPo=r(W8e," (QDQBert model)"),W8e.forEach(t),pPo=i(K),V7=n(K,"LI",{});var Q8e=s(V7);sme=n(Q8e,"STRONG",{});var _it=s(sme);uPo=r(_it,"rembert"),_it.forEach(t),_Po=r(Q8e," \u2014 "),DG=n(Q8e,"A",{href:!0});var bit=s(DG);bPo=r(bit,"RemBertForMultipleChoice"),bit.forEach(t),vPo=r(Q8e," (RemBERT model)"),Q8e.forEach(t),FPo=i(K),X7=n(K,"LI",{});var H8e=s(X7);lme=n(H8e,"STRONG",{});var vit=s(lme);TPo=r(vit,"roberta"),vit.forEach(t),MPo=r(H8e," \u2014 "),GG=n(H8e,"A",{href:!0});var Fit=s(GG);EPo=r(Fit,"RobertaForMultipleChoice"),Fit.forEach(t),CPo=r(H8e," (RoBERTa model)"),H8e.forEach(t),wPo=i(K),z7=n(K,"LI",{});var U8e=s(z7);ime=n(U8e,"STRONG",{});var Tit=s(ime);APo=r(Tit,"roformer"),Tit.forEach(t),yPo=r(U8e," \u2014 "),OG=n(U8e,"A",{href:!0});var Mit=s(OG);LPo=r(Mit,"RoFormerForMultipleChoice"),Mit.forEach(t),xPo=r(U8e," (RoFormer model)"),U8e.forEach(t),$Po=i(K),W7=n(K,"LI",{});var J8e=s(W7);dme=n(J8e,"STRONG",{});var Eit=s(dme);kPo=r(Eit,"squeezebert"),Eit.forEach(t),SPo=r(J8e," \u2014 "),VG=n(J8e,"A",{href:!0});var Cit=s(VG);RPo=r(Cit,"SqueezeBertForMultipleChoice"),Cit.forEach(t),PPo=r(J8e," (SqueezeBERT model)"),J8e.forEach(t),BPo=i(K),Q7=n(K,"LI",{});var Y8e=s(Q7);cme=n(Y8e,"STRONG",{});var wit=s(cme);IPo=r(wit,"xlm"),wit.forEach(t),qPo=r(Y8e," \u2014 "),XG=n(Y8e,"A",{href:!0});var Ait=s(XG);NPo=r(Ait,"XLMForMultipleChoice"),Ait.forEach(t),jPo=r(Y8e," (XLM model)"),Y8e.forEach(t),DPo=i(K),H7=n(K,"LI",{});var K8e=s(H7);fme=n(K8e,"STRONG",{});var yit=s(fme);GPo=r(yit,"xlm-roberta"),yit.forEach(t),OPo=r(K8e," \u2014 "),zG=n(K8e,"A",{href:!0});var Lit=s(zG);VPo=r(Lit,"XLMRobertaForMultipleChoice"),Lit.forEach(t),XPo=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),zPo=i(K),U7=n(K,"LI",{});var Z8e=s(U7);mme=n(Z8e,"STRONG",{});var xit=s(mme);WPo=r(xit,"xlm-roberta-xl"),xit.forEach(t),QPo=r(Z8e," \u2014 "),WG=n(Z8e,"A",{href:!0});var $it=s(WG);HPo=r($it,"XLMRobertaXLForMultipleChoice"),$it.forEach(t),UPo=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),JPo=i(K),J7=n(K,"LI",{});var exe=s(J7);gme=n(exe,"STRONG",{});var kit=s(gme);YPo=r(kit,"xlnet"),kit.forEach(t),KPo=r(exe," \u2014 "),QG=n(exe,"A",{href:!0});var Sit=s(QG);ZPo=r(Sit,"XLNetForMultipleChoice"),Sit.forEach(t),eBo=r(exe," (XLNet model)"),exe.forEach(t),oBo=i(K),Y7=n(K,"LI",{});var oxe=s(Y7);hme=n(oxe,"STRONG",{});var Rit=s(hme);rBo=r(Rit,"yoso"),Rit.forEach(t),tBo=r(oxe," \u2014 "),HG=n(oxe,"A",{href:!0});var Pit=s(HG);aBo=r(Pit,"YosoForMultipleChoice"),Pit.forEach(t),nBo=r(oxe," (YOSO model)"),oxe.forEach(t),K.forEach(t),sBo=i(la),K7=n(la,"P",{});var rxe=s(K7);lBo=r(rxe,"The model is set in evaluation mode by default using "),pme=n(rxe,"CODE",{});var Bit=s(pme);iBo=r(Bit,"model.eval()"),Bit.forEach(t),dBo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=n(rxe,"CODE",{});var Iit=s(ume);cBo=r(Iit,"model.train()"),Iit.forEach(t),rxe.forEach(t),fBo=i(la),T(Z7.$$.fragment,la),la.forEach(t),Ws.forEach(t),KIe=i(f),zi=n(f,"H2",{class:!0});var rje=s(zi);eb=n(rje,"A",{id:!0,class:!0,href:!0});var qit=s(eb);_me=n(qit,"SPAN",{});var Nit=s(_me);T(hy.$$.fragment,Nit),Nit.forEach(t),qit.forEach(t),mBo=i(rje),bme=n(rje,"SPAN",{});var jit=s(bme);gBo=r(jit,"AutoModelForNextSentencePrediction"),jit.forEach(t),rje.forEach(t),ZIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(py.$$.fragment,Qs),hBo=i(Qs),Wi=n(Qs,"P",{});var GK=s(Wi);pBo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UG=n(GK,"A",{href:!0});var Dit=s(UG);uBo=r(Dit,"from_pretrained()"),Dit.forEach(t),_Bo=r(GK," class method or the "),JG=n(GK,"A",{href:!0});var Git=s(JG);bBo=r(Git,"from_config()"),Git.forEach(t),vBo=r(GK,` class
method.`),GK.forEach(t),FBo=i(Qs),uy=n(Qs,"P",{});var tje=s(uy);TBo=r(tje,"This class cannot be instantiated directly using "),vme=n(tje,"CODE",{});var Oit=s(vme);MBo=r(Oit,"__init__()"),Oit.forEach(t),EBo=r(tje," (throws an error)."),tje.forEach(t),CBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var wA=s(ct);T(_y.$$.fragment,wA),wBo=i(wA),Fme=n(wA,"P",{});var Vit=s(Fme);ABo=r(Vit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vit.forEach(t),yBo=i(wA),Qi=n(wA,"P",{});var OK=s(Qi);LBo=r(OK,`Note:
Loading a model from its configuration file does `),Tme=n(OK,"STRONG",{});var Xit=s(Tme);xBo=r(Xit,"not"),Xit.forEach(t),$Bo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(OK,"A",{href:!0});var zit=s(YG);kBo=r(zit,"from_pretrained()"),zit.forEach(t),SBo=r(OK," to load the model weights."),OK.forEach(t),RBo=i(wA),T(ob.$$.fragment,wA),wA.forEach(t),PBo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(by.$$.fragment,ia),BBo=i(ia),Mme=n(ia,"P",{});var Wit=s(Mme);IBo=r(Wit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wit.forEach(t),qBo=i(ia),Ba=n(ia,"P",{});var AA=s(Ba);NBo=r(AA,"The model class to instantiate is selected based on the "),Eme=n(AA,"CODE",{});var Qit=s(Eme);jBo=r(Qit,"model_type"),Qit.forEach(t),DBo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Cme=n(AA,"CODE",{});var Hit=s(Cme);GBo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),OBo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(AA,"CODE",{});var Uit=s(wme);VBo=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),XBo=r(AA,":"),AA.forEach(t),zBo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);rb=n(Hs,"LI",{});var txe=s(rb);Ame=n(txe,"STRONG",{});var Jit=s(Ame);WBo=r(Jit,"bert"),Jit.forEach(t),QBo=r(txe," \u2014 "),KG=n(txe,"A",{href:!0});var Yit=s(KG);HBo=r(Yit,"BertForNextSentencePrediction"),Yit.forEach(t),UBo=r(txe," (BERT model)"),txe.forEach(t),JBo=i(Hs),tb=n(Hs,"LI",{});var axe=s(tb);yme=n(axe,"STRONG",{});var Kit=s(yme);YBo=r(Kit,"fnet"),Kit.forEach(t),KBo=r(axe," \u2014 "),ZG=n(axe,"A",{href:!0});var Zit=s(ZG);ZBo=r(Zit,"FNetForNextSentencePrediction"),Zit.forEach(t),eIo=r(axe," (FNet model)"),axe.forEach(t),oIo=i(Hs),ab=n(Hs,"LI",{});var nxe=s(ab);Lme=n(nxe,"STRONG",{});var edt=s(Lme);rIo=r(edt,"megatron-bert"),edt.forEach(t),tIo=r(nxe," \u2014 "),eO=n(nxe,"A",{href:!0});var odt=s(eO);aIo=r(odt,"MegatronBertForNextSentencePrediction"),odt.forEach(t),nIo=r(nxe," (MegatronBert model)"),nxe.forEach(t),sIo=i(Hs),nb=n(Hs,"LI",{});var sxe=s(nb);xme=n(sxe,"STRONG",{});var rdt=s(xme);lIo=r(rdt,"mobilebert"),rdt.forEach(t),iIo=r(sxe," \u2014 "),oO=n(sxe,"A",{href:!0});var tdt=s(oO);dIo=r(tdt,"MobileBertForNextSentencePrediction"),tdt.forEach(t),cIo=r(sxe," (MobileBERT model)"),sxe.forEach(t),fIo=i(Hs),sb=n(Hs,"LI",{});var lxe=s(sb);$me=n(lxe,"STRONG",{});var adt=s($me);mIo=r(adt,"qdqbert"),adt.forEach(t),gIo=r(lxe," \u2014 "),rO=n(lxe,"A",{href:!0});var ndt=s(rO);hIo=r(ndt,"QDQBertForNextSentencePrediction"),ndt.forEach(t),pIo=r(lxe," (QDQBert model)"),lxe.forEach(t),Hs.forEach(t),uIo=i(ia),lb=n(ia,"P",{});var ixe=s(lb);_Io=r(ixe,"The model is set in evaluation mode by default using "),kme=n(ixe,"CODE",{});var sdt=s(kme);bIo=r(sdt,"model.eval()"),sdt.forEach(t),vIo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(ixe,"CODE",{});var ldt=s(Sme);FIo=r(ldt,"model.train()"),ldt.forEach(t),ixe.forEach(t),TIo=i(ia),T(ib.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),eqe=i(f),Hi=n(f,"H2",{class:!0});var aje=s(Hi);db=n(aje,"A",{id:!0,class:!0,href:!0});var idt=s(db);Rme=n(idt,"SPAN",{});var ddt=s(Rme);T(vy.$$.fragment,ddt),ddt.forEach(t),idt.forEach(t),MIo=i(aje),Pme=n(aje,"SPAN",{});var cdt=s(Pme);EIo=r(cdt,"AutoModelForTokenClassification"),cdt.forEach(t),aje.forEach(t),oqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(Fy.$$.fragment,Us),CIo=i(Us),Ui=n(Us,"P",{});var VK=s(Ui);wIo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tO=n(VK,"A",{href:!0});var fdt=s(tO);AIo=r(fdt,"from_pretrained()"),fdt.forEach(t),yIo=r(VK," class method or the "),aO=n(VK,"A",{href:!0});var mdt=s(aO);LIo=r(mdt,"from_config()"),mdt.forEach(t),xIo=r(VK,` class
method.`),VK.forEach(t),$Io=i(Us),Ty=n(Us,"P",{});var nje=s(Ty);kIo=r(nje,"This class cannot be instantiated directly using "),Bme=n(nje,"CODE",{});var gdt=s(Bme);SIo=r(gdt,"__init__()"),gdt.forEach(t),RIo=r(nje," (throws an error)."),nje.forEach(t),PIo=i(Us),ft=n(Us,"DIV",{class:!0});var yA=s(ft);T(My.$$.fragment,yA),BIo=i(yA),Ime=n(yA,"P",{});var hdt=s(Ime);IIo=r(hdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hdt.forEach(t),qIo=i(yA),Ji=n(yA,"P",{});var XK=s(Ji);NIo=r(XK,`Note:
Loading a model from its configuration file does `),qme=n(XK,"STRONG",{});var pdt=s(qme);jIo=r(pdt,"not"),pdt.forEach(t),DIo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(XK,"A",{href:!0});var udt=s(nO);GIo=r(udt,"from_pretrained()"),udt.forEach(t),OIo=r(XK," to load the model weights."),XK.forEach(t),VIo=i(yA),T(cb.$$.fragment,yA),yA.forEach(t),XIo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(Ey.$$.fragment,da),zIo=i(da),Nme=n(da,"P",{});var _dt=s(Nme);WIo=r(_dt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_dt.forEach(t),QIo=i(da),Ia=n(da,"P",{});var LA=s(Ia);HIo=r(LA,"The model class to instantiate is selected based on the "),jme=n(LA,"CODE",{});var bdt=s(jme);UIo=r(bdt,"model_type"),bdt.forEach(t),JIo=r(LA,` property of the config object (either
passed as an argument or loaded from `),Dme=n(LA,"CODE",{});var vdt=s(Dme);YIo=r(vdt,"pretrained_model_name_or_path"),vdt.forEach(t),KIo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(LA,"CODE",{});var Fdt=s(Gme);ZIo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),eqo=r(LA,":"),LA.forEach(t),oqo=i(da),U=n(da,"UL",{});var J=s(U);fb=n(J,"LI",{});var dxe=s(fb);Ome=n(dxe,"STRONG",{});var Tdt=s(Ome);rqo=r(Tdt,"albert"),Tdt.forEach(t),tqo=r(dxe," \u2014 "),sO=n(dxe,"A",{href:!0});var Mdt=s(sO);aqo=r(Mdt,"AlbertForTokenClassification"),Mdt.forEach(t),nqo=r(dxe," (ALBERT model)"),dxe.forEach(t),sqo=i(J),mb=n(J,"LI",{});var cxe=s(mb);Vme=n(cxe,"STRONG",{});var Edt=s(Vme);lqo=r(Edt,"bert"),Edt.forEach(t),iqo=r(cxe," \u2014 "),lO=n(cxe,"A",{href:!0});var Cdt=s(lO);dqo=r(Cdt,"BertForTokenClassification"),Cdt.forEach(t),cqo=r(cxe," (BERT model)"),cxe.forEach(t),fqo=i(J),gb=n(J,"LI",{});var fxe=s(gb);Xme=n(fxe,"STRONG",{});var wdt=s(Xme);mqo=r(wdt,"big_bird"),wdt.forEach(t),gqo=r(fxe," \u2014 "),iO=n(fxe,"A",{href:!0});var Adt=s(iO);hqo=r(Adt,"BigBirdForTokenClassification"),Adt.forEach(t),pqo=r(fxe," (BigBird model)"),fxe.forEach(t),uqo=i(J),hb=n(J,"LI",{});var mxe=s(hb);zme=n(mxe,"STRONG",{});var ydt=s(zme);_qo=r(ydt,"camembert"),ydt.forEach(t),bqo=r(mxe," \u2014 "),dO=n(mxe,"A",{href:!0});var Ldt=s(dO);vqo=r(Ldt,"CamembertForTokenClassification"),Ldt.forEach(t),Fqo=r(mxe," (CamemBERT model)"),mxe.forEach(t),Tqo=i(J),pb=n(J,"LI",{});var gxe=s(pb);Wme=n(gxe,"STRONG",{});var xdt=s(Wme);Mqo=r(xdt,"canine"),xdt.forEach(t),Eqo=r(gxe," \u2014 "),cO=n(gxe,"A",{href:!0});var $dt=s(cO);Cqo=r($dt,"CanineForTokenClassification"),$dt.forEach(t),wqo=r(gxe," (Canine model)"),gxe.forEach(t),Aqo=i(J),ub=n(J,"LI",{});var hxe=s(ub);Qme=n(hxe,"STRONG",{});var kdt=s(Qme);yqo=r(kdt,"convbert"),kdt.forEach(t),Lqo=r(hxe," \u2014 "),fO=n(hxe,"A",{href:!0});var Sdt=s(fO);xqo=r(Sdt,"ConvBertForTokenClassification"),Sdt.forEach(t),$qo=r(hxe," (ConvBERT model)"),hxe.forEach(t),kqo=i(J),_b=n(J,"LI",{});var pxe=s(_b);Hme=n(pxe,"STRONG",{});var Rdt=s(Hme);Sqo=r(Rdt,"data2vec-text"),Rdt.forEach(t),Rqo=r(pxe," \u2014 "),mO=n(pxe,"A",{href:!0});var Pdt=s(mO);Pqo=r(Pdt,"Data2VecTextForTokenClassification"),Pdt.forEach(t),Bqo=r(pxe," (Data2VecText model)"),pxe.forEach(t),Iqo=i(J),bb=n(J,"LI",{});var uxe=s(bb);Ume=n(uxe,"STRONG",{});var Bdt=s(Ume);qqo=r(Bdt,"deberta"),Bdt.forEach(t),Nqo=r(uxe," \u2014 "),gO=n(uxe,"A",{href:!0});var Idt=s(gO);jqo=r(Idt,"DebertaForTokenClassification"),Idt.forEach(t),Dqo=r(uxe," (DeBERTa model)"),uxe.forEach(t),Gqo=i(J),vb=n(J,"LI",{});var _xe=s(vb);Jme=n(_xe,"STRONG",{});var qdt=s(Jme);Oqo=r(qdt,"deberta-v2"),qdt.forEach(t),Vqo=r(_xe," \u2014 "),hO=n(_xe,"A",{href:!0});var Ndt=s(hO);Xqo=r(Ndt,"DebertaV2ForTokenClassification"),Ndt.forEach(t),zqo=r(_xe," (DeBERTa-v2 model)"),_xe.forEach(t),Wqo=i(J),Fb=n(J,"LI",{});var bxe=s(Fb);Yme=n(bxe,"STRONG",{});var jdt=s(Yme);Qqo=r(jdt,"distilbert"),jdt.forEach(t),Hqo=r(bxe," \u2014 "),pO=n(bxe,"A",{href:!0});var Ddt=s(pO);Uqo=r(Ddt,"DistilBertForTokenClassification"),Ddt.forEach(t),Jqo=r(bxe," (DistilBERT model)"),bxe.forEach(t),Yqo=i(J),Tb=n(J,"LI",{});var vxe=s(Tb);Kme=n(vxe,"STRONG",{});var Gdt=s(Kme);Kqo=r(Gdt,"electra"),Gdt.forEach(t),Zqo=r(vxe," \u2014 "),uO=n(vxe,"A",{href:!0});var Odt=s(uO);eNo=r(Odt,"ElectraForTokenClassification"),Odt.forEach(t),oNo=r(vxe," (ELECTRA model)"),vxe.forEach(t),rNo=i(J),Mb=n(J,"LI",{});var Fxe=s(Mb);Zme=n(Fxe,"STRONG",{});var Vdt=s(Zme);tNo=r(Vdt,"flaubert"),Vdt.forEach(t),aNo=r(Fxe," \u2014 "),_O=n(Fxe,"A",{href:!0});var Xdt=s(_O);nNo=r(Xdt,"FlaubertForTokenClassification"),Xdt.forEach(t),sNo=r(Fxe," (FlauBERT model)"),Fxe.forEach(t),lNo=i(J),Eb=n(J,"LI",{});var Txe=s(Eb);ege=n(Txe,"STRONG",{});var zdt=s(ege);iNo=r(zdt,"fnet"),zdt.forEach(t),dNo=r(Txe," \u2014 "),bO=n(Txe,"A",{href:!0});var Wdt=s(bO);cNo=r(Wdt,"FNetForTokenClassification"),Wdt.forEach(t),fNo=r(Txe," (FNet model)"),Txe.forEach(t),mNo=i(J),Cb=n(J,"LI",{});var Mxe=s(Cb);oge=n(Mxe,"STRONG",{});var Qdt=s(oge);gNo=r(Qdt,"funnel"),Qdt.forEach(t),hNo=r(Mxe," \u2014 "),vO=n(Mxe,"A",{href:!0});var Hdt=s(vO);pNo=r(Hdt,"FunnelForTokenClassification"),Hdt.forEach(t),uNo=r(Mxe," (Funnel Transformer model)"),Mxe.forEach(t),_No=i(J),wb=n(J,"LI",{});var Exe=s(wb);rge=n(Exe,"STRONG",{});var Udt=s(rge);bNo=r(Udt,"gpt2"),Udt.forEach(t),vNo=r(Exe," \u2014 "),FO=n(Exe,"A",{href:!0});var Jdt=s(FO);FNo=r(Jdt,"GPT2ForTokenClassification"),Jdt.forEach(t),TNo=r(Exe," (OpenAI GPT-2 model)"),Exe.forEach(t),MNo=i(J),Ab=n(J,"LI",{});var Cxe=s(Ab);tge=n(Cxe,"STRONG",{});var Ydt=s(tge);ENo=r(Ydt,"ibert"),Ydt.forEach(t),CNo=r(Cxe," \u2014 "),TO=n(Cxe,"A",{href:!0});var Kdt=s(TO);wNo=r(Kdt,"IBertForTokenClassification"),Kdt.forEach(t),ANo=r(Cxe," (I-BERT model)"),Cxe.forEach(t),yNo=i(J),yb=n(J,"LI",{});var wxe=s(yb);age=n(wxe,"STRONG",{});var Zdt=s(age);LNo=r(Zdt,"layoutlm"),Zdt.forEach(t),xNo=r(wxe," \u2014 "),MO=n(wxe,"A",{href:!0});var ect=s(MO);$No=r(ect,"LayoutLMForTokenClassification"),ect.forEach(t),kNo=r(wxe," (LayoutLM model)"),wxe.forEach(t),SNo=i(J),Lb=n(J,"LI",{});var Axe=s(Lb);nge=n(Axe,"STRONG",{});var oct=s(nge);RNo=r(oct,"layoutlmv2"),oct.forEach(t),PNo=r(Axe," \u2014 "),EO=n(Axe,"A",{href:!0});var rct=s(EO);BNo=r(rct,"LayoutLMv2ForTokenClassification"),rct.forEach(t),INo=r(Axe," (LayoutLMv2 model)"),Axe.forEach(t),qNo=i(J),xb=n(J,"LI",{});var yxe=s(xb);sge=n(yxe,"STRONG",{});var tct=s(sge);NNo=r(tct,"longformer"),tct.forEach(t),jNo=r(yxe," \u2014 "),CO=n(yxe,"A",{href:!0});var act=s(CO);DNo=r(act,"LongformerForTokenClassification"),act.forEach(t),GNo=r(yxe," (Longformer model)"),yxe.forEach(t),ONo=i(J),$b=n(J,"LI",{});var Lxe=s($b);lge=n(Lxe,"STRONG",{});var nct=s(lge);VNo=r(nct,"megatron-bert"),nct.forEach(t),XNo=r(Lxe," \u2014 "),wO=n(Lxe,"A",{href:!0});var sct=s(wO);zNo=r(sct,"MegatronBertForTokenClassification"),sct.forEach(t),WNo=r(Lxe," (MegatronBert model)"),Lxe.forEach(t),QNo=i(J),kb=n(J,"LI",{});var xxe=s(kb);ige=n(xxe,"STRONG",{});var lct=s(ige);HNo=r(lct,"mobilebert"),lct.forEach(t),UNo=r(xxe," \u2014 "),AO=n(xxe,"A",{href:!0});var ict=s(AO);JNo=r(ict,"MobileBertForTokenClassification"),ict.forEach(t),YNo=r(xxe," (MobileBERT model)"),xxe.forEach(t),KNo=i(J),Sb=n(J,"LI",{});var $xe=s(Sb);dge=n($xe,"STRONG",{});var dct=s(dge);ZNo=r(dct,"mpnet"),dct.forEach(t),ejo=r($xe," \u2014 "),yO=n($xe,"A",{href:!0});var cct=s(yO);ojo=r(cct,"MPNetForTokenClassification"),cct.forEach(t),rjo=r($xe," (MPNet model)"),$xe.forEach(t),tjo=i(J),Rb=n(J,"LI",{});var kxe=s(Rb);cge=n(kxe,"STRONG",{});var fct=s(cge);ajo=r(fct,"nystromformer"),fct.forEach(t),njo=r(kxe," \u2014 "),LO=n(kxe,"A",{href:!0});var mct=s(LO);sjo=r(mct,"NystromformerForTokenClassification"),mct.forEach(t),ljo=r(kxe," (Nystromformer model)"),kxe.forEach(t),ijo=i(J),Pb=n(J,"LI",{});var Sxe=s(Pb);fge=n(Sxe,"STRONG",{});var gct=s(fge);djo=r(gct,"qdqbert"),gct.forEach(t),cjo=r(Sxe," \u2014 "),xO=n(Sxe,"A",{href:!0});var hct=s(xO);fjo=r(hct,"QDQBertForTokenClassification"),hct.forEach(t),mjo=r(Sxe," (QDQBert model)"),Sxe.forEach(t),gjo=i(J),Bb=n(J,"LI",{});var Rxe=s(Bb);mge=n(Rxe,"STRONG",{});var pct=s(mge);hjo=r(pct,"rembert"),pct.forEach(t),pjo=r(Rxe," \u2014 "),$O=n(Rxe,"A",{href:!0});var uct=s($O);ujo=r(uct,"RemBertForTokenClassification"),uct.forEach(t),_jo=r(Rxe," (RemBERT model)"),Rxe.forEach(t),bjo=i(J),Ib=n(J,"LI",{});var Pxe=s(Ib);gge=n(Pxe,"STRONG",{});var _ct=s(gge);vjo=r(_ct,"roberta"),_ct.forEach(t),Fjo=r(Pxe," \u2014 "),kO=n(Pxe,"A",{href:!0});var bct=s(kO);Tjo=r(bct,"RobertaForTokenClassification"),bct.forEach(t),Mjo=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),Ejo=i(J),qb=n(J,"LI",{});var Bxe=s(qb);hge=n(Bxe,"STRONG",{});var vct=s(hge);Cjo=r(vct,"roformer"),vct.forEach(t),wjo=r(Bxe," \u2014 "),SO=n(Bxe,"A",{href:!0});var Fct=s(SO);Ajo=r(Fct,"RoFormerForTokenClassification"),Fct.forEach(t),yjo=r(Bxe," (RoFormer model)"),Bxe.forEach(t),Ljo=i(J),Nb=n(J,"LI",{});var Ixe=s(Nb);pge=n(Ixe,"STRONG",{});var Tct=s(pge);xjo=r(Tct,"squeezebert"),Tct.forEach(t),$jo=r(Ixe," \u2014 "),RO=n(Ixe,"A",{href:!0});var Mct=s(RO);kjo=r(Mct,"SqueezeBertForTokenClassification"),Mct.forEach(t),Sjo=r(Ixe," (SqueezeBERT model)"),Ixe.forEach(t),Rjo=i(J),jb=n(J,"LI",{});var qxe=s(jb);uge=n(qxe,"STRONG",{});var Ect=s(uge);Pjo=r(Ect,"xlm"),Ect.forEach(t),Bjo=r(qxe," \u2014 "),PO=n(qxe,"A",{href:!0});var Cct=s(PO);Ijo=r(Cct,"XLMForTokenClassification"),Cct.forEach(t),qjo=r(qxe," (XLM model)"),qxe.forEach(t),Njo=i(J),Db=n(J,"LI",{});var Nxe=s(Db);_ge=n(Nxe,"STRONG",{});var wct=s(_ge);jjo=r(wct,"xlm-roberta"),wct.forEach(t),Djo=r(Nxe," \u2014 "),BO=n(Nxe,"A",{href:!0});var Act=s(BO);Gjo=r(Act,"XLMRobertaForTokenClassification"),Act.forEach(t),Ojo=r(Nxe," (XLM-RoBERTa model)"),Nxe.forEach(t),Vjo=i(J),Gb=n(J,"LI",{});var jxe=s(Gb);bge=n(jxe,"STRONG",{});var yct=s(bge);Xjo=r(yct,"xlm-roberta-xl"),yct.forEach(t),zjo=r(jxe," \u2014 "),IO=n(jxe,"A",{href:!0});var Lct=s(IO);Wjo=r(Lct,"XLMRobertaXLForTokenClassification"),Lct.forEach(t),Qjo=r(jxe," (XLM-RoBERTa-XL model)"),jxe.forEach(t),Hjo=i(J),Ob=n(J,"LI",{});var Dxe=s(Ob);vge=n(Dxe,"STRONG",{});var xct=s(vge);Ujo=r(xct,"xlnet"),xct.forEach(t),Jjo=r(Dxe," \u2014 "),qO=n(Dxe,"A",{href:!0});var $ct=s(qO);Yjo=r($ct,"XLNetForTokenClassification"),$ct.forEach(t),Kjo=r(Dxe," (XLNet model)"),Dxe.forEach(t),Zjo=i(J),Vb=n(J,"LI",{});var Gxe=s(Vb);Fge=n(Gxe,"STRONG",{});var kct=s(Fge);eDo=r(kct,"yoso"),kct.forEach(t),oDo=r(Gxe," \u2014 "),NO=n(Gxe,"A",{href:!0});var Sct=s(NO);rDo=r(Sct,"YosoForTokenClassification"),Sct.forEach(t),tDo=r(Gxe," (YOSO model)"),Gxe.forEach(t),J.forEach(t),aDo=i(da),Xb=n(da,"P",{});var Oxe=s(Xb);nDo=r(Oxe,"The model is set in evaluation mode by default using "),Tge=n(Oxe,"CODE",{});var Rct=s(Tge);sDo=r(Rct,"model.eval()"),Rct.forEach(t),lDo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(Oxe,"CODE",{});var Pct=s(Mge);iDo=r(Pct,"model.train()"),Pct.forEach(t),Oxe.forEach(t),dDo=i(da),T(zb.$$.fragment,da),da.forEach(t),Us.forEach(t),rqe=i(f),Yi=n(f,"H2",{class:!0});var sje=s(Yi);Wb=n(sje,"A",{id:!0,class:!0,href:!0});var Bct=s(Wb);Ege=n(Bct,"SPAN",{});var Ict=s(Ege);T(Cy.$$.fragment,Ict),Ict.forEach(t),Bct.forEach(t),cDo=i(sje),Cge=n(sje,"SPAN",{});var qct=s(Cge);fDo=r(qct,"AutoModelForQuestionAnswering"),qct.forEach(t),sje.forEach(t),tqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(wy.$$.fragment,Js),mDo=i(Js),Ki=n(Js,"P",{});var zK=s(Ki);gDo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jO=n(zK,"A",{href:!0});var Nct=s(jO);hDo=r(Nct,"from_pretrained()"),Nct.forEach(t),pDo=r(zK," class method or the "),DO=n(zK,"A",{href:!0});var jct=s(DO);uDo=r(jct,"from_config()"),jct.forEach(t),_Do=r(zK,` class
method.`),zK.forEach(t),bDo=i(Js),Ay=n(Js,"P",{});var lje=s(Ay);vDo=r(lje,"This class cannot be instantiated directly using "),wge=n(lje,"CODE",{});var Dct=s(wge);FDo=r(Dct,"__init__()"),Dct.forEach(t),TDo=r(lje," (throws an error)."),lje.forEach(t),MDo=i(Js),mt=n(Js,"DIV",{class:!0});var xA=s(mt);T(yy.$$.fragment,xA),EDo=i(xA),Age=n(xA,"P",{});var Gct=s(Age);CDo=r(Gct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gct.forEach(t),wDo=i(xA),Zi=n(xA,"P",{});var WK=s(Zi);ADo=r(WK,`Note:
Loading a model from its configuration file does `),yge=n(WK,"STRONG",{});var Oct=s(yge);yDo=r(Oct,"not"),Oct.forEach(t),LDo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(WK,"A",{href:!0});var Vct=s(GO);xDo=r(Vct,"from_pretrained()"),Vct.forEach(t),$Do=r(WK," to load the model weights."),WK.forEach(t),kDo=i(xA),T(Qb.$$.fragment,xA),xA.forEach(t),SDo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(Ly.$$.fragment,ca),RDo=i(ca),Lge=n(ca,"P",{});var Xct=s(Lge);PDo=r(Xct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xct.forEach(t),BDo=i(ca),qa=n(ca,"P",{});var $A=s(qa);IDo=r($A,"The model class to instantiate is selected based on the "),xge=n($A,"CODE",{});var zct=s(xge);qDo=r(zct,"model_type"),zct.forEach(t),NDo=r($A,` property of the config object (either
passed as an argument or loaded from `),$ge=n($A,"CODE",{});var Wct=s($ge);jDo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),DDo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n($A,"CODE",{});var Qct=s(kge);GDo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),ODo=r($A,":"),$A.forEach(t),VDo=i(ca),V=n(ca,"UL",{});var X=s(V);Hb=n(X,"LI",{});var Vxe=s(Hb);Sge=n(Vxe,"STRONG",{});var Hct=s(Sge);XDo=r(Hct,"albert"),Hct.forEach(t),zDo=r(Vxe," \u2014 "),OO=n(Vxe,"A",{href:!0});var Uct=s(OO);WDo=r(Uct,"AlbertForQuestionAnswering"),Uct.forEach(t),QDo=r(Vxe," (ALBERT model)"),Vxe.forEach(t),HDo=i(X),Ub=n(X,"LI",{});var Xxe=s(Ub);Rge=n(Xxe,"STRONG",{});var Jct=s(Rge);UDo=r(Jct,"bart"),Jct.forEach(t),JDo=r(Xxe," \u2014 "),VO=n(Xxe,"A",{href:!0});var Yct=s(VO);YDo=r(Yct,"BartForQuestionAnswering"),Yct.forEach(t),KDo=r(Xxe," (BART model)"),Xxe.forEach(t),ZDo=i(X),Jb=n(X,"LI",{});var zxe=s(Jb);Pge=n(zxe,"STRONG",{});var Kct=s(Pge);eGo=r(Kct,"bert"),Kct.forEach(t),oGo=r(zxe," \u2014 "),XO=n(zxe,"A",{href:!0});var Zct=s(XO);rGo=r(Zct,"BertForQuestionAnswering"),Zct.forEach(t),tGo=r(zxe," (BERT model)"),zxe.forEach(t),aGo=i(X),Yb=n(X,"LI",{});var Wxe=s(Yb);Bge=n(Wxe,"STRONG",{});var eft=s(Bge);nGo=r(eft,"big_bird"),eft.forEach(t),sGo=r(Wxe," \u2014 "),zO=n(Wxe,"A",{href:!0});var oft=s(zO);lGo=r(oft,"BigBirdForQuestionAnswering"),oft.forEach(t),iGo=r(Wxe," (BigBird model)"),Wxe.forEach(t),dGo=i(X),Kb=n(X,"LI",{});var Qxe=s(Kb);Ige=n(Qxe,"STRONG",{});var rft=s(Ige);cGo=r(rft,"bigbird_pegasus"),rft.forEach(t),fGo=r(Qxe," \u2014 "),WO=n(Qxe,"A",{href:!0});var tft=s(WO);mGo=r(tft,"BigBirdPegasusForQuestionAnswering"),tft.forEach(t),gGo=r(Qxe," (BigBirdPegasus model)"),Qxe.forEach(t),hGo=i(X),Zb=n(X,"LI",{});var Hxe=s(Zb);qge=n(Hxe,"STRONG",{});var aft=s(qge);pGo=r(aft,"camembert"),aft.forEach(t),uGo=r(Hxe," \u2014 "),QO=n(Hxe,"A",{href:!0});var nft=s(QO);_Go=r(nft,"CamembertForQuestionAnswering"),nft.forEach(t),bGo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),vGo=i(X),e5=n(X,"LI",{});var Uxe=s(e5);Nge=n(Uxe,"STRONG",{});var sft=s(Nge);FGo=r(sft,"canine"),sft.forEach(t),TGo=r(Uxe," \u2014 "),HO=n(Uxe,"A",{href:!0});var lft=s(HO);MGo=r(lft,"CanineForQuestionAnswering"),lft.forEach(t),EGo=r(Uxe," (Canine model)"),Uxe.forEach(t),CGo=i(X),o5=n(X,"LI",{});var Jxe=s(o5);jge=n(Jxe,"STRONG",{});var ift=s(jge);wGo=r(ift,"convbert"),ift.forEach(t),AGo=r(Jxe," \u2014 "),UO=n(Jxe,"A",{href:!0});var dft=s(UO);yGo=r(dft,"ConvBertForQuestionAnswering"),dft.forEach(t),LGo=r(Jxe," (ConvBERT model)"),Jxe.forEach(t),xGo=i(X),r5=n(X,"LI",{});var Yxe=s(r5);Dge=n(Yxe,"STRONG",{});var cft=s(Dge);$Go=r(cft,"data2vec-text"),cft.forEach(t),kGo=r(Yxe," \u2014 "),JO=n(Yxe,"A",{href:!0});var fft=s(JO);SGo=r(fft,"Data2VecTextForQuestionAnswering"),fft.forEach(t),RGo=r(Yxe," (Data2VecText model)"),Yxe.forEach(t),PGo=i(X),t5=n(X,"LI",{});var Kxe=s(t5);Gge=n(Kxe,"STRONG",{});var mft=s(Gge);BGo=r(mft,"deberta"),mft.forEach(t),IGo=r(Kxe," \u2014 "),YO=n(Kxe,"A",{href:!0});var gft=s(YO);qGo=r(gft,"DebertaForQuestionAnswering"),gft.forEach(t),NGo=r(Kxe," (DeBERTa model)"),Kxe.forEach(t),jGo=i(X),a5=n(X,"LI",{});var Zxe=s(a5);Oge=n(Zxe,"STRONG",{});var hft=s(Oge);DGo=r(hft,"deberta-v2"),hft.forEach(t),GGo=r(Zxe," \u2014 "),KO=n(Zxe,"A",{href:!0});var pft=s(KO);OGo=r(pft,"DebertaV2ForQuestionAnswering"),pft.forEach(t),VGo=r(Zxe," (DeBERTa-v2 model)"),Zxe.forEach(t),XGo=i(X),n5=n(X,"LI",{});var e9e=s(n5);Vge=n(e9e,"STRONG",{});var uft=s(Vge);zGo=r(uft,"distilbert"),uft.forEach(t),WGo=r(e9e," \u2014 "),ZO=n(e9e,"A",{href:!0});var _ft=s(ZO);QGo=r(_ft,"DistilBertForQuestionAnswering"),_ft.forEach(t),HGo=r(e9e," (DistilBERT model)"),e9e.forEach(t),UGo=i(X),s5=n(X,"LI",{});var o9e=s(s5);Xge=n(o9e,"STRONG",{});var bft=s(Xge);JGo=r(bft,"electra"),bft.forEach(t),YGo=r(o9e," \u2014 "),eV=n(o9e,"A",{href:!0});var vft=s(eV);KGo=r(vft,"ElectraForQuestionAnswering"),vft.forEach(t),ZGo=r(o9e," (ELECTRA model)"),o9e.forEach(t),eOo=i(X),l5=n(X,"LI",{});var r9e=s(l5);zge=n(r9e,"STRONG",{});var Fft=s(zge);oOo=r(Fft,"flaubert"),Fft.forEach(t),rOo=r(r9e," \u2014 "),oV=n(r9e,"A",{href:!0});var Tft=s(oV);tOo=r(Tft,"FlaubertForQuestionAnsweringSimple"),Tft.forEach(t),aOo=r(r9e," (FlauBERT model)"),r9e.forEach(t),nOo=i(X),i5=n(X,"LI",{});var t9e=s(i5);Wge=n(t9e,"STRONG",{});var Mft=s(Wge);sOo=r(Mft,"fnet"),Mft.forEach(t),lOo=r(t9e," \u2014 "),rV=n(t9e,"A",{href:!0});var Eft=s(rV);iOo=r(Eft,"FNetForQuestionAnswering"),Eft.forEach(t),dOo=r(t9e," (FNet model)"),t9e.forEach(t),cOo=i(X),d5=n(X,"LI",{});var a9e=s(d5);Qge=n(a9e,"STRONG",{});var Cft=s(Qge);fOo=r(Cft,"funnel"),Cft.forEach(t),mOo=r(a9e," \u2014 "),tV=n(a9e,"A",{href:!0});var wft=s(tV);gOo=r(wft,"FunnelForQuestionAnswering"),wft.forEach(t),hOo=r(a9e," (Funnel Transformer model)"),a9e.forEach(t),pOo=i(X),c5=n(X,"LI",{});var n9e=s(c5);Hge=n(n9e,"STRONG",{});var Aft=s(Hge);uOo=r(Aft,"gptj"),Aft.forEach(t),_Oo=r(n9e," \u2014 "),aV=n(n9e,"A",{href:!0});var yft=s(aV);bOo=r(yft,"GPTJForQuestionAnswering"),yft.forEach(t),vOo=r(n9e," (GPT-J model)"),n9e.forEach(t),FOo=i(X),f5=n(X,"LI",{});var s9e=s(f5);Uge=n(s9e,"STRONG",{});var Lft=s(Uge);TOo=r(Lft,"ibert"),Lft.forEach(t),MOo=r(s9e," \u2014 "),nV=n(s9e,"A",{href:!0});var xft=s(nV);EOo=r(xft,"IBertForQuestionAnswering"),xft.forEach(t),COo=r(s9e," (I-BERT model)"),s9e.forEach(t),wOo=i(X),m5=n(X,"LI",{});var l9e=s(m5);Jge=n(l9e,"STRONG",{});var $ft=s(Jge);AOo=r($ft,"layoutlmv2"),$ft.forEach(t),yOo=r(l9e," \u2014 "),sV=n(l9e,"A",{href:!0});var kft=s(sV);LOo=r(kft,"LayoutLMv2ForQuestionAnswering"),kft.forEach(t),xOo=r(l9e," (LayoutLMv2 model)"),l9e.forEach(t),$Oo=i(X),g5=n(X,"LI",{});var i9e=s(g5);Yge=n(i9e,"STRONG",{});var Sft=s(Yge);kOo=r(Sft,"led"),Sft.forEach(t),SOo=r(i9e," \u2014 "),lV=n(i9e,"A",{href:!0});var Rft=s(lV);ROo=r(Rft,"LEDForQuestionAnswering"),Rft.forEach(t),POo=r(i9e," (LED model)"),i9e.forEach(t),BOo=i(X),h5=n(X,"LI",{});var d9e=s(h5);Kge=n(d9e,"STRONG",{});var Pft=s(Kge);IOo=r(Pft,"longformer"),Pft.forEach(t),qOo=r(d9e," \u2014 "),iV=n(d9e,"A",{href:!0});var Bft=s(iV);NOo=r(Bft,"LongformerForQuestionAnswering"),Bft.forEach(t),jOo=r(d9e," (Longformer model)"),d9e.forEach(t),DOo=i(X),p5=n(X,"LI",{});var c9e=s(p5);Zge=n(c9e,"STRONG",{});var Ift=s(Zge);GOo=r(Ift,"lxmert"),Ift.forEach(t),OOo=r(c9e," \u2014 "),dV=n(c9e,"A",{href:!0});var qft=s(dV);VOo=r(qft,"LxmertForQuestionAnswering"),qft.forEach(t),XOo=r(c9e," (LXMERT model)"),c9e.forEach(t),zOo=i(X),u5=n(X,"LI",{});var f9e=s(u5);ehe=n(f9e,"STRONG",{});var Nft=s(ehe);WOo=r(Nft,"mbart"),Nft.forEach(t),QOo=r(f9e," \u2014 "),cV=n(f9e,"A",{href:!0});var jft=s(cV);HOo=r(jft,"MBartForQuestionAnswering"),jft.forEach(t),UOo=r(f9e," (mBART model)"),f9e.forEach(t),JOo=i(X),_5=n(X,"LI",{});var m9e=s(_5);ohe=n(m9e,"STRONG",{});var Dft=s(ohe);YOo=r(Dft,"megatron-bert"),Dft.forEach(t),KOo=r(m9e," \u2014 "),fV=n(m9e,"A",{href:!0});var Gft=s(fV);ZOo=r(Gft,"MegatronBertForQuestionAnswering"),Gft.forEach(t),eVo=r(m9e," (MegatronBert model)"),m9e.forEach(t),oVo=i(X),b5=n(X,"LI",{});var g9e=s(b5);rhe=n(g9e,"STRONG",{});var Oft=s(rhe);rVo=r(Oft,"mobilebert"),Oft.forEach(t),tVo=r(g9e," \u2014 "),mV=n(g9e,"A",{href:!0});var Vft=s(mV);aVo=r(Vft,"MobileBertForQuestionAnswering"),Vft.forEach(t),nVo=r(g9e," (MobileBERT model)"),g9e.forEach(t),sVo=i(X),v5=n(X,"LI",{});var h9e=s(v5);the=n(h9e,"STRONG",{});var Xft=s(the);lVo=r(Xft,"mpnet"),Xft.forEach(t),iVo=r(h9e," \u2014 "),gV=n(h9e,"A",{href:!0});var zft=s(gV);dVo=r(zft,"MPNetForQuestionAnswering"),zft.forEach(t),cVo=r(h9e," (MPNet model)"),h9e.forEach(t),fVo=i(X),F5=n(X,"LI",{});var p9e=s(F5);ahe=n(p9e,"STRONG",{});var Wft=s(ahe);mVo=r(Wft,"nystromformer"),Wft.forEach(t),gVo=r(p9e," \u2014 "),hV=n(p9e,"A",{href:!0});var Qft=s(hV);hVo=r(Qft,"NystromformerForQuestionAnswering"),Qft.forEach(t),pVo=r(p9e," (Nystromformer model)"),p9e.forEach(t),uVo=i(X),T5=n(X,"LI",{});var u9e=s(T5);nhe=n(u9e,"STRONG",{});var Hft=s(nhe);_Vo=r(Hft,"qdqbert"),Hft.forEach(t),bVo=r(u9e," \u2014 "),pV=n(u9e,"A",{href:!0});var Uft=s(pV);vVo=r(Uft,"QDQBertForQuestionAnswering"),Uft.forEach(t),FVo=r(u9e," (QDQBert model)"),u9e.forEach(t),TVo=i(X),M5=n(X,"LI",{});var _9e=s(M5);she=n(_9e,"STRONG",{});var Jft=s(she);MVo=r(Jft,"reformer"),Jft.forEach(t),EVo=r(_9e," \u2014 "),uV=n(_9e,"A",{href:!0});var Yft=s(uV);CVo=r(Yft,"ReformerForQuestionAnswering"),Yft.forEach(t),wVo=r(_9e," (Reformer model)"),_9e.forEach(t),AVo=i(X),E5=n(X,"LI",{});var b9e=s(E5);lhe=n(b9e,"STRONG",{});var Kft=s(lhe);yVo=r(Kft,"rembert"),Kft.forEach(t),LVo=r(b9e," \u2014 "),_V=n(b9e,"A",{href:!0});var Zft=s(_V);xVo=r(Zft,"RemBertForQuestionAnswering"),Zft.forEach(t),$Vo=r(b9e," (RemBERT model)"),b9e.forEach(t),kVo=i(X),C5=n(X,"LI",{});var v9e=s(C5);ihe=n(v9e,"STRONG",{});var emt=s(ihe);SVo=r(emt,"roberta"),emt.forEach(t),RVo=r(v9e," \u2014 "),bV=n(v9e,"A",{href:!0});var omt=s(bV);PVo=r(omt,"RobertaForQuestionAnswering"),omt.forEach(t),BVo=r(v9e," (RoBERTa model)"),v9e.forEach(t),IVo=i(X),w5=n(X,"LI",{});var F9e=s(w5);dhe=n(F9e,"STRONG",{});var rmt=s(dhe);qVo=r(rmt,"roformer"),rmt.forEach(t),NVo=r(F9e," \u2014 "),vV=n(F9e,"A",{href:!0});var tmt=s(vV);jVo=r(tmt,"RoFormerForQuestionAnswering"),tmt.forEach(t),DVo=r(F9e," (RoFormer model)"),F9e.forEach(t),GVo=i(X),A5=n(X,"LI",{});var T9e=s(A5);che=n(T9e,"STRONG",{});var amt=s(che);OVo=r(amt,"splinter"),amt.forEach(t),VVo=r(T9e," \u2014 "),FV=n(T9e,"A",{href:!0});var nmt=s(FV);XVo=r(nmt,"SplinterForQuestionAnswering"),nmt.forEach(t),zVo=r(T9e," (Splinter model)"),T9e.forEach(t),WVo=i(X),y5=n(X,"LI",{});var M9e=s(y5);fhe=n(M9e,"STRONG",{});var smt=s(fhe);QVo=r(smt,"squeezebert"),smt.forEach(t),HVo=r(M9e," \u2014 "),TV=n(M9e,"A",{href:!0});var lmt=s(TV);UVo=r(lmt,"SqueezeBertForQuestionAnswering"),lmt.forEach(t),JVo=r(M9e," (SqueezeBERT model)"),M9e.forEach(t),YVo=i(X),L5=n(X,"LI",{});var E9e=s(L5);mhe=n(E9e,"STRONG",{});var imt=s(mhe);KVo=r(imt,"xlm"),imt.forEach(t),ZVo=r(E9e," \u2014 "),MV=n(E9e,"A",{href:!0});var dmt=s(MV);eXo=r(dmt,"XLMForQuestionAnsweringSimple"),dmt.forEach(t),oXo=r(E9e," (XLM model)"),E9e.forEach(t),rXo=i(X),x5=n(X,"LI",{});var C9e=s(x5);ghe=n(C9e,"STRONG",{});var cmt=s(ghe);tXo=r(cmt,"xlm-roberta"),cmt.forEach(t),aXo=r(C9e," \u2014 "),EV=n(C9e,"A",{href:!0});var fmt=s(EV);nXo=r(fmt,"XLMRobertaForQuestionAnswering"),fmt.forEach(t),sXo=r(C9e," (XLM-RoBERTa model)"),C9e.forEach(t),lXo=i(X),$5=n(X,"LI",{});var w9e=s($5);hhe=n(w9e,"STRONG",{});var mmt=s(hhe);iXo=r(mmt,"xlm-roberta-xl"),mmt.forEach(t),dXo=r(w9e," \u2014 "),CV=n(w9e,"A",{href:!0});var gmt=s(CV);cXo=r(gmt,"XLMRobertaXLForQuestionAnswering"),gmt.forEach(t),fXo=r(w9e," (XLM-RoBERTa-XL model)"),w9e.forEach(t),mXo=i(X),k5=n(X,"LI",{});var A9e=s(k5);phe=n(A9e,"STRONG",{});var hmt=s(phe);gXo=r(hmt,"xlnet"),hmt.forEach(t),hXo=r(A9e," \u2014 "),wV=n(A9e,"A",{href:!0});var pmt=s(wV);pXo=r(pmt,"XLNetForQuestionAnsweringSimple"),pmt.forEach(t),uXo=r(A9e," (XLNet model)"),A9e.forEach(t),_Xo=i(X),S5=n(X,"LI",{});var y9e=s(S5);uhe=n(y9e,"STRONG",{});var umt=s(uhe);bXo=r(umt,"yoso"),umt.forEach(t),vXo=r(y9e," \u2014 "),AV=n(y9e,"A",{href:!0});var _mt=s(AV);FXo=r(_mt,"YosoForQuestionAnswering"),_mt.forEach(t),TXo=r(y9e," (YOSO model)"),y9e.forEach(t),X.forEach(t),MXo=i(ca),R5=n(ca,"P",{});var L9e=s(R5);EXo=r(L9e,"The model is set in evaluation mode by default using "),_he=n(L9e,"CODE",{});var bmt=s(_he);CXo=r(bmt,"model.eval()"),bmt.forEach(t),wXo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(L9e,"CODE",{});var vmt=s(bhe);AXo=r(vmt,"model.train()"),vmt.forEach(t),L9e.forEach(t),yXo=i(ca),T(P5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),aqe=i(f),ed=n(f,"H2",{class:!0});var ije=s(ed);B5=n(ije,"A",{id:!0,class:!0,href:!0});var Fmt=s(B5);vhe=n(Fmt,"SPAN",{});var Tmt=s(vhe);T(xy.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),LXo=i(ije),Fhe=n(ije,"SPAN",{});var Mmt=s(Fhe);xXo=r(Mmt,"AutoModelForTableQuestionAnswering"),Mmt.forEach(t),ije.forEach(t),nqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T($y.$$.fragment,Ys),$Xo=i(Ys),od=n(Ys,"P",{});var QK=s(od);kXo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yV=n(QK,"A",{href:!0});var Emt=s(yV);SXo=r(Emt,"from_pretrained()"),Emt.forEach(t),RXo=r(QK," class method or the "),LV=n(QK,"A",{href:!0});var Cmt=s(LV);PXo=r(Cmt,"from_config()"),Cmt.forEach(t),BXo=r(QK,` class
method.`),QK.forEach(t),IXo=i(Ys),ky=n(Ys,"P",{});var dje=s(ky);qXo=r(dje,"This class cannot be instantiated directly using "),The=n(dje,"CODE",{});var wmt=s(The);NXo=r(wmt,"__init__()"),wmt.forEach(t),jXo=r(dje," (throws an error)."),dje.forEach(t),DXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var kA=s(gt);T(Sy.$$.fragment,kA),GXo=i(kA),Mhe=n(kA,"P",{});var Amt=s(Mhe);OXo=r(Amt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Amt.forEach(t),VXo=i(kA),rd=n(kA,"P",{});var HK=s(rd);XXo=r(HK,`Note:
Loading a model from its configuration file does `),Ehe=n(HK,"STRONG",{});var ymt=s(Ehe);zXo=r(ymt,"not"),ymt.forEach(t),WXo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(HK,"A",{href:!0});var Lmt=s(xV);QXo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),HXo=r(HK," to load the model weights."),HK.forEach(t),UXo=i(kA),T(I5.$$.fragment,kA),kA.forEach(t),JXo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Ry.$$.fragment,fa),YXo=i(fa),Che=n(fa,"P",{});var xmt=s(Che);KXo=r(xmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xmt.forEach(t),ZXo=i(fa),Na=n(fa,"P",{});var SA=s(Na);ezo=r(SA,"The model class to instantiate is selected based on the "),whe=n(SA,"CODE",{});var $mt=s(whe);ozo=r($mt,"model_type"),$mt.forEach(t),rzo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(SA,"CODE",{});var kmt=s(Ahe);tzo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),azo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(SA,"CODE",{});var Smt=s(yhe);nzo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),szo=r(SA,":"),SA.forEach(t),lzo=i(fa),Lhe=n(fa,"UL",{});var Rmt=s(Lhe);q5=n(Rmt,"LI",{});var x9e=s(q5);xhe=n(x9e,"STRONG",{});var Pmt=s(xhe);izo=r(Pmt,"tapas"),Pmt.forEach(t),dzo=r(x9e," \u2014 "),$V=n(x9e,"A",{href:!0});var Bmt=s($V);czo=r(Bmt,"TapasForQuestionAnswering"),Bmt.forEach(t),fzo=r(x9e," (TAPAS model)"),x9e.forEach(t),Rmt.forEach(t),mzo=i(fa),N5=n(fa,"P",{});var $9e=s(N5);gzo=r($9e,"The model is set in evaluation mode by default using "),$he=n($9e,"CODE",{});var Imt=s($he);hzo=r(Imt,"model.eval()"),Imt.forEach(t),pzo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n($9e,"CODE",{});var qmt=s(khe);uzo=r(qmt,"model.train()"),qmt.forEach(t),$9e.forEach(t),_zo=i(fa),T(j5.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),sqe=i(f),td=n(f,"H2",{class:!0});var cje=s(td);D5=n(cje,"A",{id:!0,class:!0,href:!0});var Nmt=s(D5);She=n(Nmt,"SPAN",{});var jmt=s(She);T(Py.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),bzo=i(cje),Rhe=n(cje,"SPAN",{});var Dmt=s(Rhe);vzo=r(Dmt,"AutoModelForImageClassification"),Dmt.forEach(t),cje.forEach(t),lqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(By.$$.fragment,Ks),Fzo=i(Ks),ad=n(Ks,"P",{});var UK=s(ad);Tzo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kV=n(UK,"A",{href:!0});var Gmt=s(kV);Mzo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),Ezo=r(UK," class method or the "),SV=n(UK,"A",{href:!0});var Omt=s(SV);Czo=r(Omt,"from_config()"),Omt.forEach(t),wzo=r(UK,` class
method.`),UK.forEach(t),Azo=i(Ks),Iy=n(Ks,"P",{});var fje=s(Iy);yzo=r(fje,"This class cannot be instantiated directly using "),Phe=n(fje,"CODE",{});var Vmt=s(Phe);Lzo=r(Vmt,"__init__()"),Vmt.forEach(t),xzo=r(fje," (throws an error)."),fje.forEach(t),$zo=i(Ks),ht=n(Ks,"DIV",{class:!0});var RA=s(ht);T(qy.$$.fragment,RA),kzo=i(RA),Bhe=n(RA,"P",{});var Xmt=s(Bhe);Szo=r(Xmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xmt.forEach(t),Rzo=i(RA),nd=n(RA,"P",{});var JK=s(nd);Pzo=r(JK,`Note:
Loading a model from its configuration file does `),Ihe=n(JK,"STRONG",{});var zmt=s(Ihe);Bzo=r(zmt,"not"),zmt.forEach(t),Izo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(JK,"A",{href:!0});var Wmt=s(RV);qzo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),Nzo=r(JK," to load the model weights."),JK.forEach(t),jzo=i(RA),T(G5.$$.fragment,RA),RA.forEach(t),Dzo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Ny.$$.fragment,ma),Gzo=i(ma),qhe=n(ma,"P",{});var Qmt=s(qhe);Ozo=r(Qmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qmt.forEach(t),Vzo=i(ma),ja=n(ma,"P",{});var PA=s(ja);Xzo=r(PA,"The model class to instantiate is selected based on the "),Nhe=n(PA,"CODE",{});var Hmt=s(Nhe);zzo=r(Hmt,"model_type"),Hmt.forEach(t),Wzo=r(PA,` property of the config object (either
passed as an argument or loaded from `),jhe=n(PA,"CODE",{});var Umt=s(jhe);Qzo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),Hzo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(PA,"CODE",{});var Jmt=s(Dhe);Uzo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),Jzo=r(PA,":"),PA.forEach(t),Yzo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);O5=n(Ee,"LI",{});var k9e=s(O5);Ghe=n(k9e,"STRONG",{});var Ymt=s(Ghe);Kzo=r(Ymt,"beit"),Ymt.forEach(t),Zzo=r(k9e," \u2014 "),PV=n(k9e,"A",{href:!0});var Kmt=s(PV);eWo=r(Kmt,"BeitForImageClassification"),Kmt.forEach(t),oWo=r(k9e," (BEiT model)"),k9e.forEach(t),rWo=i(Ee),V5=n(Ee,"LI",{});var S9e=s(V5);Ohe=n(S9e,"STRONG",{});var Zmt=s(Ohe);tWo=r(Zmt,"convnext"),Zmt.forEach(t),aWo=r(S9e," \u2014 "),BV=n(S9e,"A",{href:!0});var egt=s(BV);nWo=r(egt,"ConvNextForImageClassification"),egt.forEach(t),sWo=r(S9e," (ConvNext model)"),S9e.forEach(t),lWo=i(Ee),X5=n(Ee,"LI",{});var R9e=s(X5);Vhe=n(R9e,"STRONG",{});var ogt=s(Vhe);iWo=r(ogt,"data2vec-vision"),ogt.forEach(t),dWo=r(R9e," \u2014 "),IV=n(R9e,"A",{href:!0});var rgt=s(IV);cWo=r(rgt,"Data2VecVisionForImageClassification"),rgt.forEach(t),fWo=r(R9e," (Data2VecVision model)"),R9e.forEach(t),mWo=i(Ee),Ps=n(Ee,"LI",{});var M$=s(Ps);Xhe=n(M$,"STRONG",{});var tgt=s(Xhe);gWo=r(tgt,"deit"),tgt.forEach(t),hWo=r(M$," \u2014 "),qV=n(M$,"A",{href:!0});var agt=s(qV);pWo=r(agt,"DeiTForImageClassification"),agt.forEach(t),uWo=r(M$," or "),NV=n(M$,"A",{href:!0});var ngt=s(NV);_Wo=r(ngt,"DeiTForImageClassificationWithTeacher"),ngt.forEach(t),bWo=r(M$," (DeiT model)"),M$.forEach(t),vWo=i(Ee),z5=n(Ee,"LI",{});var P9e=s(z5);zhe=n(P9e,"STRONG",{});var sgt=s(zhe);FWo=r(sgt,"imagegpt"),sgt.forEach(t),TWo=r(P9e," \u2014 "),jV=n(P9e,"A",{href:!0});var lgt=s(jV);MWo=r(lgt,"ImageGPTForImageClassification"),lgt.forEach(t),EWo=r(P9e," (ImageGPT model)"),P9e.forEach(t),CWo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);Whe=n(gf,"STRONG",{});var igt=s(Whe);wWo=r(igt,"perceiver"),igt.forEach(t),AWo=r(gf," \u2014 "),DV=n(gf,"A",{href:!0});var dgt=s(DV);yWo=r(dgt,"PerceiverForImageClassificationLearned"),dgt.forEach(t),LWo=r(gf," or "),GV=n(gf,"A",{href:!0});var cgt=s(GV);xWo=r(cgt,"PerceiverForImageClassificationFourier"),cgt.forEach(t),$Wo=r(gf," or "),OV=n(gf,"A",{href:!0});var fgt=s(OV);kWo=r(fgt,"PerceiverForImageClassificationConvProcessing"),fgt.forEach(t),SWo=r(gf," (Perceiver model)"),gf.forEach(t),RWo=i(Ee),W5=n(Ee,"LI",{});var B9e=s(W5);Qhe=n(B9e,"STRONG",{});var mgt=s(Qhe);PWo=r(mgt,"poolformer"),mgt.forEach(t),BWo=r(B9e," \u2014 "),VV=n(B9e,"A",{href:!0});var ggt=s(VV);IWo=r(ggt,"PoolFormerForImageClassification"),ggt.forEach(t),qWo=r(B9e," (PoolFormer model)"),B9e.forEach(t),NWo=i(Ee),Q5=n(Ee,"LI",{});var I9e=s(Q5);Hhe=n(I9e,"STRONG",{});var hgt=s(Hhe);jWo=r(hgt,"regnet"),hgt.forEach(t),DWo=r(I9e," \u2014 "),XV=n(I9e,"A",{href:!0});var pgt=s(XV);GWo=r(pgt,"RegNetForImageClassification"),pgt.forEach(t),OWo=r(I9e," (RegNet model)"),I9e.forEach(t),VWo=i(Ee),H5=n(Ee,"LI",{});var q9e=s(H5);Uhe=n(q9e,"STRONG",{});var ugt=s(Uhe);XWo=r(ugt,"resnet"),ugt.forEach(t),zWo=r(q9e," \u2014 "),zV=n(q9e,"A",{href:!0});var _gt=s(zV);WWo=r(_gt,"ResNetForImageClassification"),_gt.forEach(t),QWo=r(q9e," (ResNet model)"),q9e.forEach(t),HWo=i(Ee),U5=n(Ee,"LI",{});var N9e=s(U5);Jhe=n(N9e,"STRONG",{});var bgt=s(Jhe);UWo=r(bgt,"segformer"),bgt.forEach(t),JWo=r(N9e," \u2014 "),WV=n(N9e,"A",{href:!0});var vgt=s(WV);YWo=r(vgt,"SegformerForImageClassification"),vgt.forEach(t),KWo=r(N9e," (SegFormer model)"),N9e.forEach(t),ZWo=i(Ee),J5=n(Ee,"LI",{});var j9e=s(J5);Yhe=n(j9e,"STRONG",{});var Fgt=s(Yhe);eQo=r(Fgt,"swin"),Fgt.forEach(t),oQo=r(j9e," \u2014 "),QV=n(j9e,"A",{href:!0});var Tgt=s(QV);rQo=r(Tgt,"SwinForImageClassification"),Tgt.forEach(t),tQo=r(j9e," (Swin model)"),j9e.forEach(t),aQo=i(Ee),Y5=n(Ee,"LI",{});var D9e=s(Y5);Khe=n(D9e,"STRONG",{});var Mgt=s(Khe);nQo=r(Mgt,"van"),Mgt.forEach(t),sQo=r(D9e," \u2014 "),HV=n(D9e,"A",{href:!0});var Egt=s(HV);lQo=r(Egt,"VanForImageClassification"),Egt.forEach(t),iQo=r(D9e," (VAN model)"),D9e.forEach(t),dQo=i(Ee),K5=n(Ee,"LI",{});var G9e=s(K5);Zhe=n(G9e,"STRONG",{});var Cgt=s(Zhe);cQo=r(Cgt,"vit"),Cgt.forEach(t),fQo=r(G9e," \u2014 "),UV=n(G9e,"A",{href:!0});var wgt=s(UV);mQo=r(wgt,"ViTForImageClassification"),wgt.forEach(t),gQo=r(G9e," (ViT model)"),G9e.forEach(t),Ee.forEach(t),hQo=i(ma),Z5=n(ma,"P",{});var O9e=s(Z5);pQo=r(O9e,"The model is set in evaluation mode by default using "),epe=n(O9e,"CODE",{});var Agt=s(epe);uQo=r(Agt,"model.eval()"),Agt.forEach(t),_Qo=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(O9e,"CODE",{});var ygt=s(ope);bQo=r(ygt,"model.train()"),ygt.forEach(t),O9e.forEach(t),vQo=i(ma),T(ev.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),iqe=i(f),sd=n(f,"H2",{class:!0});var mje=s(sd);ov=n(mje,"A",{id:!0,class:!0,href:!0});var Lgt=s(ov);rpe=n(Lgt,"SPAN",{});var xgt=s(rpe);T(jy.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),FQo=i(mje),tpe=n(mje,"SPAN",{});var $gt=s(tpe);TQo=r($gt,"AutoModelForVision2Seq"),$gt.forEach(t),mje.forEach(t),dqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Dy.$$.fragment,Zs),MQo=i(Zs),ld=n(Zs,"P",{});var YK=s(ld);EQo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JV=n(YK,"A",{href:!0});var kgt=s(JV);CQo=r(kgt,"from_pretrained()"),kgt.forEach(t),wQo=r(YK," class method or the "),YV=n(YK,"A",{href:!0});var Sgt=s(YV);AQo=r(Sgt,"from_config()"),Sgt.forEach(t),yQo=r(YK,` class
method.`),YK.forEach(t),LQo=i(Zs),Gy=n(Zs,"P",{});var gje=s(Gy);xQo=r(gje,"This class cannot be instantiated directly using "),ape=n(gje,"CODE",{});var Rgt=s(ape);$Qo=r(Rgt,"__init__()"),Rgt.forEach(t),kQo=r(gje," (throws an error)."),gje.forEach(t),SQo=i(Zs),ut=n(Zs,"DIV",{class:!0});var BA=s(ut);T(Oy.$$.fragment,BA),RQo=i(BA),npe=n(BA,"P",{});var Pgt=s(npe);PQo=r(Pgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pgt.forEach(t),BQo=i(BA),id=n(BA,"P",{});var KK=s(id);IQo=r(KK,`Note:
Loading a model from its configuration file does `),spe=n(KK,"STRONG",{});var Bgt=s(spe);qQo=r(Bgt,"not"),Bgt.forEach(t),NQo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(KK,"A",{href:!0});var Igt=s(KV);jQo=r(Igt,"from_pretrained()"),Igt.forEach(t),DQo=r(KK," to load the model weights."),KK.forEach(t),GQo=i(BA),T(rv.$$.fragment,BA),BA.forEach(t),OQo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Vy.$$.fragment,ga),VQo=i(ga),lpe=n(ga,"P",{});var qgt=s(lpe);XQo=r(qgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qgt.forEach(t),zQo=i(ga),Da=n(ga,"P",{});var IA=s(Da);WQo=r(IA,"The model class to instantiate is selected based on the "),ipe=n(IA,"CODE",{});var Ngt=s(ipe);QQo=r(Ngt,"model_type"),Ngt.forEach(t),HQo=r(IA,` property of the config object (either
passed as an argument or loaded from `),dpe=n(IA,"CODE",{});var jgt=s(dpe);UQo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),JQo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(IA,"CODE",{});var Dgt=s(cpe);YQo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),KQo=r(IA,":"),IA.forEach(t),ZQo=i(ga),fpe=n(ga,"UL",{});var Ggt=s(fpe);tv=n(Ggt,"LI",{});var V9e=s(tv);mpe=n(V9e,"STRONG",{});var Ogt=s(mpe);eHo=r(Ogt,"vision-encoder-decoder"),Ogt.forEach(t),oHo=r(V9e," \u2014 "),ZV=n(V9e,"A",{href:!0});var Vgt=s(ZV);rHo=r(Vgt,"VisionEncoderDecoderModel"),Vgt.forEach(t),tHo=r(V9e," (Vision Encoder decoder model)"),V9e.forEach(t),Ggt.forEach(t),aHo=i(ga),av=n(ga,"P",{});var X9e=s(av);nHo=r(X9e,"The model is set in evaluation mode by default using "),gpe=n(X9e,"CODE",{});var Xgt=s(gpe);sHo=r(Xgt,"model.eval()"),Xgt.forEach(t),lHo=r(X9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(X9e,"CODE",{});var zgt=s(hpe);iHo=r(zgt,"model.train()"),zgt.forEach(t),X9e.forEach(t),dHo=i(ga),T(nv.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),cqe=i(f),dd=n(f,"H2",{class:!0});var hje=s(dd);sv=n(hje,"A",{id:!0,class:!0,href:!0});var Wgt=s(sv);ppe=n(Wgt,"SPAN",{});var Qgt=s(ppe);T(Xy.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),cHo=i(hje),upe=n(hje,"SPAN",{});var Hgt=s(upe);fHo=r(Hgt,"AutoModelForAudioClassification"),Hgt.forEach(t),hje.forEach(t),fqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(zy.$$.fragment,el),mHo=i(el),cd=n(el,"P",{});var ZK=s(cd);gHo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eX=n(ZK,"A",{href:!0});var Ugt=s(eX);hHo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),pHo=r(ZK," class method or the "),oX=n(ZK,"A",{href:!0});var Jgt=s(oX);uHo=r(Jgt,"from_config()"),Jgt.forEach(t),_Ho=r(ZK,` class
method.`),ZK.forEach(t),bHo=i(el),Wy=n(el,"P",{});var pje=s(Wy);vHo=r(pje,"This class cannot be instantiated directly using "),_pe=n(pje,"CODE",{});var Ygt=s(_pe);FHo=r(Ygt,"__init__()"),Ygt.forEach(t),THo=r(pje," (throws an error)."),pje.forEach(t),MHo=i(el),_t=n(el,"DIV",{class:!0});var qA=s(_t);T(Qy.$$.fragment,qA),EHo=i(qA),bpe=n(qA,"P",{});var Kgt=s(bpe);CHo=r(Kgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kgt.forEach(t),wHo=i(qA),fd=n(qA,"P",{});var eZ=s(fd);AHo=r(eZ,`Note:
Loading a model from its configuration file does `),vpe=n(eZ,"STRONG",{});var Zgt=s(vpe);yHo=r(Zgt,"not"),Zgt.forEach(t),LHo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(eZ,"A",{href:!0});var eht=s(rX);xHo=r(eht,"from_pretrained()"),eht.forEach(t),$Ho=r(eZ," to load the model weights."),eZ.forEach(t),kHo=i(qA),T(lv.$$.fragment,qA),qA.forEach(t),SHo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(Hy.$$.fragment,ha),RHo=i(ha),Fpe=n(ha,"P",{});var oht=s(Fpe);PHo=r(oht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oht.forEach(t),BHo=i(ha),Ga=n(ha,"P",{});var NA=s(Ga);IHo=r(NA,"The model class to instantiate is selected based on the "),Tpe=n(NA,"CODE",{});var rht=s(Tpe);qHo=r(rht,"model_type"),rht.forEach(t),NHo=r(NA,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(NA,"CODE",{});var tht=s(Mpe);jHo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),DHo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(NA,"CODE",{});var aht=s(Epe);GHo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),OHo=r(NA,":"),NA.forEach(t),VHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);iv=n(Oe,"LI",{});var z9e=s(iv);Cpe=n(z9e,"STRONG",{});var nht=s(Cpe);XHo=r(nht,"data2vec-audio"),nht.forEach(t),zHo=r(z9e," \u2014 "),tX=n(z9e,"A",{href:!0});var sht=s(tX);WHo=r(sht,"Data2VecAudioForSequenceClassification"),sht.forEach(t),QHo=r(z9e," (Data2VecAudio model)"),z9e.forEach(t),HHo=i(Oe),dv=n(Oe,"LI",{});var W9e=s(dv);wpe=n(W9e,"STRONG",{});var lht=s(wpe);UHo=r(lht,"hubert"),lht.forEach(t),JHo=r(W9e," \u2014 "),aX=n(W9e,"A",{href:!0});var iht=s(aX);YHo=r(iht,"HubertForSequenceClassification"),iht.forEach(t),KHo=r(W9e," (Hubert model)"),W9e.forEach(t),ZHo=i(Oe),cv=n(Oe,"LI",{});var Q9e=s(cv);Ape=n(Q9e,"STRONG",{});var dht=s(Ape);eUo=r(dht,"sew"),dht.forEach(t),oUo=r(Q9e," \u2014 "),nX=n(Q9e,"A",{href:!0});var cht=s(nX);rUo=r(cht,"SEWForSequenceClassification"),cht.forEach(t),tUo=r(Q9e," (SEW model)"),Q9e.forEach(t),aUo=i(Oe),fv=n(Oe,"LI",{});var H9e=s(fv);ype=n(H9e,"STRONG",{});var fht=s(ype);nUo=r(fht,"sew-d"),fht.forEach(t),sUo=r(H9e," \u2014 "),sX=n(H9e,"A",{href:!0});var mht=s(sX);lUo=r(mht,"SEWDForSequenceClassification"),mht.forEach(t),iUo=r(H9e," (SEW-D model)"),H9e.forEach(t),dUo=i(Oe),mv=n(Oe,"LI",{});var U9e=s(mv);Lpe=n(U9e,"STRONG",{});var ght=s(Lpe);cUo=r(ght,"unispeech"),ght.forEach(t),fUo=r(U9e," \u2014 "),lX=n(U9e,"A",{href:!0});var hht=s(lX);mUo=r(hht,"UniSpeechForSequenceClassification"),hht.forEach(t),gUo=r(U9e," (UniSpeech model)"),U9e.forEach(t),hUo=i(Oe),gv=n(Oe,"LI",{});var J9e=s(gv);xpe=n(J9e,"STRONG",{});var pht=s(xpe);pUo=r(pht,"unispeech-sat"),pht.forEach(t),uUo=r(J9e," \u2014 "),iX=n(J9e,"A",{href:!0});var uht=s(iX);_Uo=r(uht,"UniSpeechSatForSequenceClassification"),uht.forEach(t),bUo=r(J9e," (UniSpeechSat model)"),J9e.forEach(t),vUo=i(Oe),hv=n(Oe,"LI",{});var Y9e=s(hv);$pe=n(Y9e,"STRONG",{});var _ht=s($pe);FUo=r(_ht,"wav2vec2"),_ht.forEach(t),TUo=r(Y9e," \u2014 "),dX=n(Y9e,"A",{href:!0});var bht=s(dX);MUo=r(bht,"Wav2Vec2ForSequenceClassification"),bht.forEach(t),EUo=r(Y9e," (Wav2Vec2 model)"),Y9e.forEach(t),CUo=i(Oe),pv=n(Oe,"LI",{});var K9e=s(pv);kpe=n(K9e,"STRONG",{});var vht=s(kpe);wUo=r(vht,"wav2vec2-conformer"),vht.forEach(t),AUo=r(K9e," \u2014 "),cX=n(K9e,"A",{href:!0});var Fht=s(cX);yUo=r(Fht,"Wav2Vec2ConformerForSequenceClassification"),Fht.forEach(t),LUo=r(K9e," (Wav2Vec2-Conformer model)"),K9e.forEach(t),xUo=i(Oe),uv=n(Oe,"LI",{});var Z9e=s(uv);Spe=n(Z9e,"STRONG",{});var Tht=s(Spe);$Uo=r(Tht,"wavlm"),Tht.forEach(t),kUo=r(Z9e," \u2014 "),fX=n(Z9e,"A",{href:!0});var Mht=s(fX);SUo=r(Mht,"WavLMForSequenceClassification"),Mht.forEach(t),RUo=r(Z9e," (WavLM model)"),Z9e.forEach(t),Oe.forEach(t),PUo=i(ha),_v=n(ha,"P",{});var e$e=s(_v);BUo=r(e$e,"The model is set in evaluation mode by default using "),Rpe=n(e$e,"CODE",{});var Eht=s(Rpe);IUo=r(Eht,"model.eval()"),Eht.forEach(t),qUo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=n(e$e,"CODE",{});var Cht=s(Ppe);NUo=r(Cht,"model.train()"),Cht.forEach(t),e$e.forEach(t),jUo=i(ha),T(bv.$$.fragment,ha),ha.forEach(t),el.forEach(t),mqe=i(f),md=n(f,"H2",{class:!0});var uje=s(md);vv=n(uje,"A",{id:!0,class:!0,href:!0});var wht=s(vv);Bpe=n(wht,"SPAN",{});var Aht=s(Bpe);T(Uy.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),DUo=i(uje),Ipe=n(uje,"SPAN",{});var yht=s(Ipe);GUo=r(yht,"AutoModelForAudioFrameClassification"),yht.forEach(t),uje.forEach(t),gqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(Jy.$$.fragment,ol),OUo=i(ol),gd=n(ol,"P",{});var oZ=s(gd);VUo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mX=n(oZ,"A",{href:!0});var Lht=s(mX);XUo=r(Lht,"from_pretrained()"),Lht.forEach(t),zUo=r(oZ," class method or the "),gX=n(oZ,"A",{href:!0});var xht=s(gX);WUo=r(xht,"from_config()"),xht.forEach(t),QUo=r(oZ,` class
method.`),oZ.forEach(t),HUo=i(ol),Yy=n(ol,"P",{});var _je=s(Yy);UUo=r(_je,"This class cannot be instantiated directly using "),qpe=n(_je,"CODE",{});var $ht=s(qpe);JUo=r($ht,"__init__()"),$ht.forEach(t),YUo=r(_je," (throws an error)."),_je.forEach(t),KUo=i(ol),bt=n(ol,"DIV",{class:!0});var jA=s(bt);T(Ky.$$.fragment,jA),ZUo=i(jA),Npe=n(jA,"P",{});var kht=s(Npe);eJo=r(kht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kht.forEach(t),oJo=i(jA),hd=n(jA,"P",{});var rZ=s(hd);rJo=r(rZ,`Note:
Loading a model from its configuration file does `),jpe=n(rZ,"STRONG",{});var Sht=s(jpe);tJo=r(Sht,"not"),Sht.forEach(t),aJo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(rZ,"A",{href:!0});var Rht=s(hX);nJo=r(Rht,"from_pretrained()"),Rht.forEach(t),sJo=r(rZ," to load the model weights."),rZ.forEach(t),lJo=i(jA),T(Fv.$$.fragment,jA),jA.forEach(t),iJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(Zy.$$.fragment,pa),dJo=i(pa),Dpe=n(pa,"P",{});var Pht=s(Dpe);cJo=r(Pht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Pht.forEach(t),fJo=i(pa),Oa=n(pa,"P",{});var DA=s(Oa);mJo=r(DA,"The model class to instantiate is selected based on the "),Gpe=n(DA,"CODE",{});var Bht=s(Gpe);gJo=r(Bht,"model_type"),Bht.forEach(t),hJo=r(DA,` property of the config object (either
passed as an argument or loaded from `),Ope=n(DA,"CODE",{});var Iht=s(Ope);pJo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),uJo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(DA,"CODE",{});var qht=s(Vpe);_Jo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),bJo=r(DA,":"),DA.forEach(t),vJo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);Tv=n(rl,"LI",{});var o$e=s(Tv);Xpe=n(o$e,"STRONG",{});var Nht=s(Xpe);FJo=r(Nht,"data2vec-audio"),Nht.forEach(t),TJo=r(o$e," \u2014 "),pX=n(o$e,"A",{href:!0});var jht=s(pX);MJo=r(jht,"Data2VecAudioForAudioFrameClassification"),jht.forEach(t),EJo=r(o$e," (Data2VecAudio model)"),o$e.forEach(t),CJo=i(rl),Mv=n(rl,"LI",{});var r$e=s(Mv);zpe=n(r$e,"STRONG",{});var Dht=s(zpe);wJo=r(Dht,"unispeech-sat"),Dht.forEach(t),AJo=r(r$e," \u2014 "),uX=n(r$e,"A",{href:!0});var Ght=s(uX);yJo=r(Ght,"UniSpeechSatForAudioFrameClassification"),Ght.forEach(t),LJo=r(r$e," (UniSpeechSat model)"),r$e.forEach(t),xJo=i(rl),Ev=n(rl,"LI",{});var t$e=s(Ev);Wpe=n(t$e,"STRONG",{});var Oht=s(Wpe);$Jo=r(Oht,"wav2vec2"),Oht.forEach(t),kJo=r(t$e," \u2014 "),_X=n(t$e,"A",{href:!0});var Vht=s(_X);SJo=r(Vht,"Wav2Vec2ForAudioFrameClassification"),Vht.forEach(t),RJo=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),PJo=i(rl),Cv=n(rl,"LI",{});var a$e=s(Cv);Qpe=n(a$e,"STRONG",{});var Xht=s(Qpe);BJo=r(Xht,"wav2vec2-conformer"),Xht.forEach(t),IJo=r(a$e," \u2014 "),bX=n(a$e,"A",{href:!0});var zht=s(bX);qJo=r(zht,"Wav2Vec2ConformerForAudioFrameClassification"),zht.forEach(t),NJo=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),jJo=i(rl),wv=n(rl,"LI",{});var n$e=s(wv);Hpe=n(n$e,"STRONG",{});var Wht=s(Hpe);DJo=r(Wht,"wavlm"),Wht.forEach(t),GJo=r(n$e," \u2014 "),vX=n(n$e,"A",{href:!0});var Qht=s(vX);OJo=r(Qht,"WavLMForAudioFrameClassification"),Qht.forEach(t),VJo=r(n$e," (WavLM model)"),n$e.forEach(t),rl.forEach(t),XJo=i(pa),Av=n(pa,"P",{});var s$e=s(Av);zJo=r(s$e,"The model is set in evaluation mode by default using "),Upe=n(s$e,"CODE",{});var Hht=s(Upe);WJo=r(Hht,"model.eval()"),Hht.forEach(t),QJo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(s$e,"CODE",{});var Uht=s(Jpe);HJo=r(Uht,"model.train()"),Uht.forEach(t),s$e.forEach(t),UJo=i(pa),T(yv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),hqe=i(f),pd=n(f,"H2",{class:!0});var bje=s(pd);Lv=n(bje,"A",{id:!0,class:!0,href:!0});var Jht=s(Lv);Ype=n(Jht,"SPAN",{});var Yht=s(Ype);T(eL.$$.fragment,Yht),Yht.forEach(t),Jht.forEach(t),JJo=i(bje),Kpe=n(bje,"SPAN",{});var Kht=s(Kpe);YJo=r(Kht,"AutoModelForCTC"),Kht.forEach(t),bje.forEach(t),pqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(oL.$$.fragment,tl),KJo=i(tl),ud=n(tl,"P",{});var tZ=s(ud);ZJo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FX=n(tZ,"A",{href:!0});var Zht=s(FX);eYo=r(Zht,"from_pretrained()"),Zht.forEach(t),oYo=r(tZ," class method or the "),TX=n(tZ,"A",{href:!0});var ept=s(TX);rYo=r(ept,"from_config()"),ept.forEach(t),tYo=r(tZ,` class
method.`),tZ.forEach(t),aYo=i(tl),rL=n(tl,"P",{});var vje=s(rL);nYo=r(vje,"This class cannot be instantiated directly using "),Zpe=n(vje,"CODE",{});var opt=s(Zpe);sYo=r(opt,"__init__()"),opt.forEach(t),lYo=r(vje," (throws an error)."),vje.forEach(t),iYo=i(tl),vt=n(tl,"DIV",{class:!0});var GA=s(vt);T(tL.$$.fragment,GA),dYo=i(GA),eue=n(GA,"P",{});var rpt=s(eue);cYo=r(rpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rpt.forEach(t),fYo=i(GA),_d=n(GA,"P",{});var aZ=s(_d);mYo=r(aZ,`Note:
Loading a model from its configuration file does `),oue=n(aZ,"STRONG",{});var tpt=s(oue);gYo=r(tpt,"not"),tpt.forEach(t),hYo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(aZ,"A",{href:!0});var apt=s(MX);pYo=r(apt,"from_pretrained()"),apt.forEach(t),uYo=r(aZ," to load the model weights."),aZ.forEach(t),_Yo=i(GA),T(xv.$$.fragment,GA),GA.forEach(t),bYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(aL.$$.fragment,ua),vYo=i(ua),rue=n(ua,"P",{});var npt=s(rue);FYo=r(npt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),npt.forEach(t),TYo=i(ua),Va=n(ua,"P",{});var OA=s(Va);MYo=r(OA,"The model class to instantiate is selected based on the "),tue=n(OA,"CODE",{});var spt=s(tue);EYo=r(spt,"model_type"),spt.forEach(t),CYo=r(OA,` property of the config object (either
passed as an argument or loaded from `),aue=n(OA,"CODE",{});var lpt=s(aue);wYo=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),AYo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(OA,"CODE",{});var ipt=s(nue);yYo=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),LYo=r(OA,":"),OA.forEach(t),xYo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);$v=n(Ve,"LI",{});var l$e=s($v);sue=n(l$e,"STRONG",{});var dpt=s(sue);$Yo=r(dpt,"data2vec-audio"),dpt.forEach(t),kYo=r(l$e," \u2014 "),EX=n(l$e,"A",{href:!0});var cpt=s(EX);SYo=r(cpt,"Data2VecAudioForCTC"),cpt.forEach(t),RYo=r(l$e," (Data2VecAudio model)"),l$e.forEach(t),PYo=i(Ve),kv=n(Ve,"LI",{});var i$e=s(kv);lue=n(i$e,"STRONG",{});var fpt=s(lue);BYo=r(fpt,"hubert"),fpt.forEach(t),IYo=r(i$e," \u2014 "),CX=n(i$e,"A",{href:!0});var mpt=s(CX);qYo=r(mpt,"HubertForCTC"),mpt.forEach(t),NYo=r(i$e," (Hubert model)"),i$e.forEach(t),jYo=i(Ve),Sv=n(Ve,"LI",{});var d$e=s(Sv);iue=n(d$e,"STRONG",{});var gpt=s(iue);DYo=r(gpt,"sew"),gpt.forEach(t),GYo=r(d$e," \u2014 "),wX=n(d$e,"A",{href:!0});var hpt=s(wX);OYo=r(hpt,"SEWForCTC"),hpt.forEach(t),VYo=r(d$e," (SEW model)"),d$e.forEach(t),XYo=i(Ve),Rv=n(Ve,"LI",{});var c$e=s(Rv);due=n(c$e,"STRONG",{});var ppt=s(due);zYo=r(ppt,"sew-d"),ppt.forEach(t),WYo=r(c$e," \u2014 "),AX=n(c$e,"A",{href:!0});var upt=s(AX);QYo=r(upt,"SEWDForCTC"),upt.forEach(t),HYo=r(c$e," (SEW-D model)"),c$e.forEach(t),UYo=i(Ve),Pv=n(Ve,"LI",{});var f$e=s(Pv);cue=n(f$e,"STRONG",{});var _pt=s(cue);JYo=r(_pt,"unispeech"),_pt.forEach(t),YYo=r(f$e," \u2014 "),yX=n(f$e,"A",{href:!0});var bpt=s(yX);KYo=r(bpt,"UniSpeechForCTC"),bpt.forEach(t),ZYo=r(f$e," (UniSpeech model)"),f$e.forEach(t),eKo=i(Ve),Bv=n(Ve,"LI",{});var m$e=s(Bv);fue=n(m$e,"STRONG",{});var vpt=s(fue);oKo=r(vpt,"unispeech-sat"),vpt.forEach(t),rKo=r(m$e," \u2014 "),LX=n(m$e,"A",{href:!0});var Fpt=s(LX);tKo=r(Fpt,"UniSpeechSatForCTC"),Fpt.forEach(t),aKo=r(m$e," (UniSpeechSat model)"),m$e.forEach(t),nKo=i(Ve),Iv=n(Ve,"LI",{});var g$e=s(Iv);mue=n(g$e,"STRONG",{});var Tpt=s(mue);sKo=r(Tpt,"wav2vec2"),Tpt.forEach(t),lKo=r(g$e," \u2014 "),xX=n(g$e,"A",{href:!0});var Mpt=s(xX);iKo=r(Mpt,"Wav2Vec2ForCTC"),Mpt.forEach(t),dKo=r(g$e," (Wav2Vec2 model)"),g$e.forEach(t),cKo=i(Ve),qv=n(Ve,"LI",{});var h$e=s(qv);gue=n(h$e,"STRONG",{});var Ept=s(gue);fKo=r(Ept,"wav2vec2-conformer"),Ept.forEach(t),mKo=r(h$e," \u2014 "),$X=n(h$e,"A",{href:!0});var Cpt=s($X);gKo=r(Cpt,"Wav2Vec2ConformerForCTC"),Cpt.forEach(t),hKo=r(h$e," (Wav2Vec2-Conformer model)"),h$e.forEach(t),pKo=i(Ve),Nv=n(Ve,"LI",{});var p$e=s(Nv);hue=n(p$e,"STRONG",{});var wpt=s(hue);uKo=r(wpt,"wavlm"),wpt.forEach(t),_Ko=r(p$e," \u2014 "),kX=n(p$e,"A",{href:!0});var Apt=s(kX);bKo=r(Apt,"WavLMForCTC"),Apt.forEach(t),vKo=r(p$e," (WavLM model)"),p$e.forEach(t),Ve.forEach(t),FKo=i(ua),jv=n(ua,"P",{});var u$e=s(jv);TKo=r(u$e,"The model is set in evaluation mode by default using "),pue=n(u$e,"CODE",{});var ypt=s(pue);MKo=r(ypt,"model.eval()"),ypt.forEach(t),EKo=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(u$e,"CODE",{});var Lpt=s(uue);CKo=r(Lpt,"model.train()"),Lpt.forEach(t),u$e.forEach(t),wKo=i(ua),T(Dv.$$.fragment,ua),ua.forEach(t),tl.forEach(t),uqe=i(f),bd=n(f,"H2",{class:!0});var Fje=s(bd);Gv=n(Fje,"A",{id:!0,class:!0,href:!0});var xpt=s(Gv);_ue=n(xpt,"SPAN",{});var $pt=s(_ue);T(nL.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),AKo=i(Fje),bue=n(Fje,"SPAN",{});var kpt=s(bue);yKo=r(kpt,"AutoModelForSpeechSeq2Seq"),kpt.forEach(t),Fje.forEach(t),_qe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(sL.$$.fragment,al),LKo=i(al),vd=n(al,"P",{});var nZ=s(vd);xKo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SX=n(nZ,"A",{href:!0});var Spt=s(SX);$Ko=r(Spt,"from_pretrained()"),Spt.forEach(t),kKo=r(nZ," class method or the "),RX=n(nZ,"A",{href:!0});var Rpt=s(RX);SKo=r(Rpt,"from_config()"),Rpt.forEach(t),RKo=r(nZ,` class
method.`),nZ.forEach(t),PKo=i(al),lL=n(al,"P",{});var Tje=s(lL);BKo=r(Tje,"This class cannot be instantiated directly using "),vue=n(Tje,"CODE",{});var Ppt=s(vue);IKo=r(Ppt,"__init__()"),Ppt.forEach(t),qKo=r(Tje," (throws an error)."),Tje.forEach(t),NKo=i(al),Ft=n(al,"DIV",{class:!0});var VA=s(Ft);T(iL.$$.fragment,VA),jKo=i(VA),Fue=n(VA,"P",{});var Bpt=s(Fue);DKo=r(Bpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bpt.forEach(t),GKo=i(VA),Fd=n(VA,"P",{});var sZ=s(Fd);OKo=r(sZ,`Note:
Loading a model from its configuration file does `),Tue=n(sZ,"STRONG",{});var Ipt=s(Tue);VKo=r(Ipt,"not"),Ipt.forEach(t),XKo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(sZ,"A",{href:!0});var qpt=s(PX);zKo=r(qpt,"from_pretrained()"),qpt.forEach(t),WKo=r(sZ," to load the model weights."),sZ.forEach(t),QKo=i(VA),T(Ov.$$.fragment,VA),VA.forEach(t),HKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(dL.$$.fragment,_a),UKo=i(_a),Mue=n(_a,"P",{});var Npt=s(Mue);JKo=r(Npt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Npt.forEach(t),YKo=i(_a),Xa=n(_a,"P",{});var XA=s(Xa);KKo=r(XA,"The model class to instantiate is selected based on the "),Eue=n(XA,"CODE",{});var jpt=s(Eue);ZKo=r(jpt,"model_type"),jpt.forEach(t),eZo=r(XA,` property of the config object (either
passed as an argument or loaded from `),Cue=n(XA,"CODE",{});var Dpt=s(Cue);oZo=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),rZo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(XA,"CODE",{});var Gpt=s(wue);tZo=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),aZo=r(XA,":"),XA.forEach(t),nZo=i(_a),cL=n(_a,"UL",{});var Mje=s(cL);Vv=n(Mje,"LI",{});var _$e=s(Vv);Aue=n(_$e,"STRONG",{});var Opt=s(Aue);sZo=r(Opt,"speech-encoder-decoder"),Opt.forEach(t),lZo=r(_$e," \u2014 "),BX=n(_$e,"A",{href:!0});var Vpt=s(BX);iZo=r(Vpt,"SpeechEncoderDecoderModel"),Vpt.forEach(t),dZo=r(_$e," (Speech Encoder decoder model)"),_$e.forEach(t),cZo=i(Mje),Xv=n(Mje,"LI",{});var b$e=s(Xv);yue=n(b$e,"STRONG",{});var Xpt=s(yue);fZo=r(Xpt,"speech_to_text"),Xpt.forEach(t),mZo=r(b$e," \u2014 "),IX=n(b$e,"A",{href:!0});var zpt=s(IX);gZo=r(zpt,"Speech2TextForConditionalGeneration"),zpt.forEach(t),hZo=r(b$e," (Speech2Text model)"),b$e.forEach(t),Mje.forEach(t),pZo=i(_a),zv=n(_a,"P",{});var v$e=s(zv);uZo=r(v$e,"The model is set in evaluation mode by default using "),Lue=n(v$e,"CODE",{});var Wpt=s(Lue);_Zo=r(Wpt,"model.eval()"),Wpt.forEach(t),bZo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(v$e,"CODE",{});var Qpt=s(xue);vZo=r(Qpt,"model.train()"),Qpt.forEach(t),v$e.forEach(t),FZo=i(_a),T(Wv.$$.fragment,_a),_a.forEach(t),al.forEach(t),bqe=i(f),Td=n(f,"H2",{class:!0});var Eje=s(Td);Qv=n(Eje,"A",{id:!0,class:!0,href:!0});var Hpt=s(Qv);$ue=n(Hpt,"SPAN",{});var Upt=s($ue);T(fL.$$.fragment,Upt),Upt.forEach(t),Hpt.forEach(t),TZo=i(Eje),kue=n(Eje,"SPAN",{});var Jpt=s(kue);MZo=r(Jpt,"AutoModelForAudioXVector"),Jpt.forEach(t),Eje.forEach(t),vqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(mL.$$.fragment,nl),EZo=i(nl),Md=n(nl,"P",{});var lZ=s(Md);CZo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qX=n(lZ,"A",{href:!0});var Ypt=s(qX);wZo=r(Ypt,"from_pretrained()"),Ypt.forEach(t),AZo=r(lZ," class method or the "),NX=n(lZ,"A",{href:!0});var Kpt=s(NX);yZo=r(Kpt,"from_config()"),Kpt.forEach(t),LZo=r(lZ,` class
method.`),lZ.forEach(t),xZo=i(nl),gL=n(nl,"P",{});var Cje=s(gL);$Zo=r(Cje,"This class cannot be instantiated directly using "),Sue=n(Cje,"CODE",{});var Zpt=s(Sue);kZo=r(Zpt,"__init__()"),Zpt.forEach(t),SZo=r(Cje," (throws an error)."),Cje.forEach(t),RZo=i(nl),Tt=n(nl,"DIV",{class:!0});var zA=s(Tt);T(hL.$$.fragment,zA),PZo=i(zA),Rue=n(zA,"P",{});var eut=s(Rue);BZo=r(eut,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eut.forEach(t),IZo=i(zA),Ed=n(zA,"P",{});var iZ=s(Ed);qZo=r(iZ,`Note:
Loading a model from its configuration file does `),Pue=n(iZ,"STRONG",{});var out=s(Pue);NZo=r(out,"not"),out.forEach(t),jZo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(iZ,"A",{href:!0});var rut=s(jX);DZo=r(rut,"from_pretrained()"),rut.forEach(t),GZo=r(iZ," to load the model weights."),iZ.forEach(t),OZo=i(zA),T(Hv.$$.fragment,zA),zA.forEach(t),VZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(pL.$$.fragment,ba),XZo=i(ba),Bue=n(ba,"P",{});var tut=s(Bue);zZo=r(tut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tut.forEach(t),WZo=i(ba),za=n(ba,"P",{});var WA=s(za);QZo=r(WA,"The model class to instantiate is selected based on the "),Iue=n(WA,"CODE",{});var aut=s(Iue);HZo=r(aut,"model_type"),aut.forEach(t),UZo=r(WA,` property of the config object (either
passed as an argument or loaded from `),que=n(WA,"CODE",{});var nut=s(que);JZo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),YZo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(WA,"CODE",{});var sut=s(Nue);KZo=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),ZZo=r(WA,":"),WA.forEach(t),eer=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);Uv=n(sl,"LI",{});var F$e=s(Uv);jue=n(F$e,"STRONG",{});var lut=s(jue);oer=r(lut,"data2vec-audio"),lut.forEach(t),rer=r(F$e," \u2014 "),DX=n(F$e,"A",{href:!0});var iut=s(DX);ter=r(iut,"Data2VecAudioForXVector"),iut.forEach(t),aer=r(F$e," (Data2VecAudio model)"),F$e.forEach(t),ner=i(sl),Jv=n(sl,"LI",{});var T$e=s(Jv);Due=n(T$e,"STRONG",{});var dut=s(Due);ser=r(dut,"unispeech-sat"),dut.forEach(t),ler=r(T$e," \u2014 "),GX=n(T$e,"A",{href:!0});var cut=s(GX);ier=r(cut,"UniSpeechSatForXVector"),cut.forEach(t),der=r(T$e," (UniSpeechSat model)"),T$e.forEach(t),cer=i(sl),Yv=n(sl,"LI",{});var M$e=s(Yv);Gue=n(M$e,"STRONG",{});var fut=s(Gue);fer=r(fut,"wav2vec2"),fut.forEach(t),mer=r(M$e," \u2014 "),OX=n(M$e,"A",{href:!0});var mut=s(OX);ger=r(mut,"Wav2Vec2ForXVector"),mut.forEach(t),her=r(M$e," (Wav2Vec2 model)"),M$e.forEach(t),per=i(sl),Kv=n(sl,"LI",{});var E$e=s(Kv);Oue=n(E$e,"STRONG",{});var gut=s(Oue);uer=r(gut,"wav2vec2-conformer"),gut.forEach(t),_er=r(E$e," \u2014 "),VX=n(E$e,"A",{href:!0});var hut=s(VX);ber=r(hut,"Wav2Vec2ConformerForXVector"),hut.forEach(t),ver=r(E$e," (Wav2Vec2-Conformer model)"),E$e.forEach(t),Fer=i(sl),Zv=n(sl,"LI",{});var C$e=s(Zv);Vue=n(C$e,"STRONG",{});var put=s(Vue);Ter=r(put,"wavlm"),put.forEach(t),Mer=r(C$e," \u2014 "),XX=n(C$e,"A",{href:!0});var uut=s(XX);Eer=r(uut,"WavLMForXVector"),uut.forEach(t),Cer=r(C$e," (WavLM model)"),C$e.forEach(t),sl.forEach(t),wer=i(ba),eF=n(ba,"P",{});var w$e=s(eF);Aer=r(w$e,"The model is set in evaluation mode by default using "),Xue=n(w$e,"CODE",{});var _ut=s(Xue);yer=r(_ut,"model.eval()"),_ut.forEach(t),Ler=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(w$e,"CODE",{});var but=s(zue);xer=r(but,"model.train()"),but.forEach(t),w$e.forEach(t),$er=i(ba),T(oF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Fqe=i(f),Cd=n(f,"H2",{class:!0});var wje=s(Cd);rF=n(wje,"A",{id:!0,class:!0,href:!0});var vut=s(rF);Wue=n(vut,"SPAN",{});var Fut=s(Wue);T(uL.$$.fragment,Fut),Fut.forEach(t),vut.forEach(t),ker=i(wje),Que=n(wje,"SPAN",{});var Tut=s(Que);Ser=r(Tut,"AutoModelForMaskedImageModeling"),Tut.forEach(t),wje.forEach(t),Tqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(_L.$$.fragment,ll),Rer=i(ll),wd=n(ll,"P",{});var dZ=s(wd);Per=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zX=n(dZ,"A",{href:!0});var Mut=s(zX);Ber=r(Mut,"from_pretrained()"),Mut.forEach(t),Ier=r(dZ," class method or the "),WX=n(dZ,"A",{href:!0});var Eut=s(WX);qer=r(Eut,"from_config()"),Eut.forEach(t),Ner=r(dZ,` class
method.`),dZ.forEach(t),jer=i(ll),bL=n(ll,"P",{});var Aje=s(bL);Der=r(Aje,"This class cannot be instantiated directly using "),Hue=n(Aje,"CODE",{});var Cut=s(Hue);Ger=r(Cut,"__init__()"),Cut.forEach(t),Oer=r(Aje," (throws an error)."),Aje.forEach(t),Ver=i(ll),Mt=n(ll,"DIV",{class:!0});var QA=s(Mt);T(vL.$$.fragment,QA),Xer=i(QA),Uue=n(QA,"P",{});var wut=s(Uue);zer=r(wut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wut.forEach(t),Wer=i(QA),Ad=n(QA,"P",{});var cZ=s(Ad);Qer=r(cZ,`Note:
Loading a model from its configuration file does `),Jue=n(cZ,"STRONG",{});var Aut=s(Jue);Her=r(Aut,"not"),Aut.forEach(t),Uer=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(cZ,"A",{href:!0});var yut=s(QX);Jer=r(yut,"from_pretrained()"),yut.forEach(t),Yer=r(cZ," to load the model weights."),cZ.forEach(t),Ker=i(QA),T(tF.$$.fragment,QA),QA.forEach(t),Zer=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(FL.$$.fragment,va),eor=i(va),Yue=n(va,"P",{});var Lut=s(Yue);oor=r(Lut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lut.forEach(t),ror=i(va),Wa=n(va,"P",{});var HA=s(Wa);tor=r(HA,"The model class to instantiate is selected based on the "),Kue=n(HA,"CODE",{});var xut=s(Kue);aor=r(xut,"model_type"),xut.forEach(t),nor=r(HA,` property of the config object (either
passed as an argument or loaded from `),Zue=n(HA,"CODE",{});var $ut=s(Zue);sor=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),lor=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(HA,"CODE",{});var kut=s(e_e);ior=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),dor=r(HA,":"),HA.forEach(t),cor=i(va),yd=n(va,"UL",{});var fZ=s(yd);aF=n(fZ,"LI",{});var A$e=s(aF);o_e=n(A$e,"STRONG",{});var Sut=s(o_e);mor=r(Sut,"deit"),Sut.forEach(t),gor=r(A$e," \u2014 "),HX=n(A$e,"A",{href:!0});var Rut=s(HX);hor=r(Rut,"DeiTForMaskedImageModeling"),Rut.forEach(t),por=r(A$e," (DeiT model)"),A$e.forEach(t),uor=i(fZ),nF=n(fZ,"LI",{});var y$e=s(nF);r_e=n(y$e,"STRONG",{});var Put=s(r_e);_or=r(Put,"swin"),Put.forEach(t),bor=r(y$e," \u2014 "),UX=n(y$e,"A",{href:!0});var But=s(UX);vor=r(But,"SwinForMaskedImageModeling"),But.forEach(t),For=r(y$e," (Swin model)"),y$e.forEach(t),Tor=i(fZ),sF=n(fZ,"LI",{});var L$e=s(sF);t_e=n(L$e,"STRONG",{});var Iut=s(t_e);Mor=r(Iut,"vit"),Iut.forEach(t),Eor=r(L$e," \u2014 "),JX=n(L$e,"A",{href:!0});var qut=s(JX);Cor=r(qut,"ViTForMaskedImageModeling"),qut.forEach(t),wor=r(L$e," (ViT model)"),L$e.forEach(t),fZ.forEach(t),Aor=i(va),lF=n(va,"P",{});var x$e=s(lF);yor=r(x$e,"The model is set in evaluation mode by default using "),a_e=n(x$e,"CODE",{});var Nut=s(a_e);Lor=r(Nut,"model.eval()"),Nut.forEach(t),xor=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(x$e,"CODE",{});var jut=s(n_e);$or=r(jut,"model.train()"),jut.forEach(t),x$e.forEach(t),kor=i(va),T(iF.$$.fragment,va),va.forEach(t),ll.forEach(t),Mqe=i(f),Ld=n(f,"H2",{class:!0});var yje=s(Ld);dF=n(yje,"A",{id:!0,class:!0,href:!0});var Dut=s(dF);s_e=n(Dut,"SPAN",{});var Gut=s(s_e);T(TL.$$.fragment,Gut),Gut.forEach(t),Dut.forEach(t),Sor=i(yje),l_e=n(yje,"SPAN",{});var Out=s(l_e);Ror=r(Out,"AutoModelForObjectDetection"),Out.forEach(t),yje.forEach(t),Eqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(ML.$$.fragment,il),Por=i(il),xd=n(il,"P",{});var mZ=s(xd);Bor=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YX=n(mZ,"A",{href:!0});var Vut=s(YX);Ior=r(Vut,"from_pretrained()"),Vut.forEach(t),qor=r(mZ," class method or the "),KX=n(mZ,"A",{href:!0});var Xut=s(KX);Nor=r(Xut,"from_config()"),Xut.forEach(t),jor=r(mZ,` class
method.`),mZ.forEach(t),Dor=i(il),EL=n(il,"P",{});var Lje=s(EL);Gor=r(Lje,"This class cannot be instantiated directly using "),i_e=n(Lje,"CODE",{});var zut=s(i_e);Oor=r(zut,"__init__()"),zut.forEach(t),Vor=r(Lje," (throws an error)."),Lje.forEach(t),Xor=i(il),Et=n(il,"DIV",{class:!0});var UA=s(Et);T(CL.$$.fragment,UA),zor=i(UA),d_e=n(UA,"P",{});var Wut=s(d_e);Wor=r(Wut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wut.forEach(t),Qor=i(UA),$d=n(UA,"P",{});var gZ=s($d);Hor=r(gZ,`Note:
Loading a model from its configuration file does `),c_e=n(gZ,"STRONG",{});var Qut=s(c_e);Uor=r(Qut,"not"),Qut.forEach(t),Jor=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(gZ,"A",{href:!0});var Hut=s(ZX);Yor=r(Hut,"from_pretrained()"),Hut.forEach(t),Kor=r(gZ," to load the model weights."),gZ.forEach(t),Zor=i(UA),T(cF.$$.fragment,UA),UA.forEach(t),err=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(wL.$$.fragment,Fa),orr=i(Fa),f_e=n(Fa,"P",{});var Uut=s(f_e);rrr=r(Uut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Uut.forEach(t),trr=i(Fa),Qa=n(Fa,"P",{});var JA=s(Qa);arr=r(JA,"The model class to instantiate is selected based on the "),m_e=n(JA,"CODE",{});var Jut=s(m_e);nrr=r(Jut,"model_type"),Jut.forEach(t),srr=r(JA,` property of the config object (either
passed as an argument or loaded from `),g_e=n(JA,"CODE",{});var Yut=s(g_e);lrr=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),irr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(JA,"CODE",{});var Kut=s(h_e);drr=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),crr=r(JA,":"),JA.forEach(t),frr=i(Fa),AL=n(Fa,"UL",{});var xje=s(AL);fF=n(xje,"LI",{});var $$e=s(fF);p_e=n($$e,"STRONG",{});var Zut=s(p_e);mrr=r(Zut,"detr"),Zut.forEach(t),grr=r($$e," \u2014 "),ez=n($$e,"A",{href:!0});var e_t=s(ez);hrr=r(e_t,"DetrForObjectDetection"),e_t.forEach(t),prr=r($$e," (DETR model)"),$$e.forEach(t),urr=i(xje),mF=n(xje,"LI",{});var k$e=s(mF);u_e=n(k$e,"STRONG",{});var o_t=s(u_e);_rr=r(o_t,"yolos"),o_t.forEach(t),brr=r(k$e," \u2014 "),oz=n(k$e,"A",{href:!0});var r_t=s(oz);vrr=r(r_t,"YolosForObjectDetection"),r_t.forEach(t),Frr=r(k$e," (YOLOS model)"),k$e.forEach(t),xje.forEach(t),Trr=i(Fa),gF=n(Fa,"P",{});var S$e=s(gF);Mrr=r(S$e,"The model is set in evaluation mode by default using "),__e=n(S$e,"CODE",{});var t_t=s(__e);Err=r(t_t,"model.eval()"),t_t.forEach(t),Crr=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=n(S$e,"CODE",{});var a_t=s(b_e);wrr=r(a_t,"model.train()"),a_t.forEach(t),S$e.forEach(t),Arr=i(Fa),T(hF.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Cqe=i(f),kd=n(f,"H2",{class:!0});var $je=s(kd);pF=n($je,"A",{id:!0,class:!0,href:!0});var n_t=s(pF);v_e=n(n_t,"SPAN",{});var s_t=s(v_e);T(yL.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),yrr=i($je),F_e=n($je,"SPAN",{});var l_t=s(F_e);Lrr=r(l_t,"AutoModelForImageSegmentation"),l_t.forEach(t),$je.forEach(t),wqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(LL.$$.fragment,dl),xrr=i(dl),Sd=n(dl,"P",{});var hZ=s(Sd);$rr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rz=n(hZ,"A",{href:!0});var i_t=s(rz);krr=r(i_t,"from_pretrained()"),i_t.forEach(t),Srr=r(hZ," class method or the "),tz=n(hZ,"A",{href:!0});var d_t=s(tz);Rrr=r(d_t,"from_config()"),d_t.forEach(t),Prr=r(hZ,` class
method.`),hZ.forEach(t),Brr=i(dl),xL=n(dl,"P",{});var kje=s(xL);Irr=r(kje,"This class cannot be instantiated directly using "),T_e=n(kje,"CODE",{});var c_t=s(T_e);qrr=r(c_t,"__init__()"),c_t.forEach(t),Nrr=r(kje," (throws an error)."),kje.forEach(t),jrr=i(dl),Ct=n(dl,"DIV",{class:!0});var YA=s(Ct);T($L.$$.fragment,YA),Drr=i(YA),M_e=n(YA,"P",{});var f_t=s(M_e);Grr=r(f_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),f_t.forEach(t),Orr=i(YA),Rd=n(YA,"P",{});var pZ=s(Rd);Vrr=r(pZ,`Note:
Loading a model from its configuration file does `),E_e=n(pZ,"STRONG",{});var m_t=s(E_e);Xrr=r(m_t,"not"),m_t.forEach(t),zrr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(pZ,"A",{href:!0});var g_t=s(az);Wrr=r(g_t,"from_pretrained()"),g_t.forEach(t),Qrr=r(pZ," to load the model weights."),pZ.forEach(t),Hrr=i(YA),T(uF.$$.fragment,YA),YA.forEach(t),Urr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(kL.$$.fragment,Ta),Jrr=i(Ta),C_e=n(Ta,"P",{});var h_t=s(C_e);Yrr=r(h_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),h_t.forEach(t),Krr=i(Ta),Ha=n(Ta,"P",{});var KA=s(Ha);Zrr=r(KA,"The model class to instantiate is selected based on the "),w_e=n(KA,"CODE",{});var p_t=s(w_e);etr=r(p_t,"model_type"),p_t.forEach(t),otr=r(KA,` property of the config object (either
passed as an argument or loaded from `),A_e=n(KA,"CODE",{});var u_t=s(A_e);rtr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),ttr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(KA,"CODE",{});var __t=s(y_e);atr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),ntr=r(KA,":"),KA.forEach(t),str=i(Ta),L_e=n(Ta,"UL",{});var b_t=s(L_e);_F=n(b_t,"LI",{});var R$e=s(_F);x_e=n(R$e,"STRONG",{});var v_t=s(x_e);ltr=r(v_t,"detr"),v_t.forEach(t),itr=r(R$e," \u2014 "),nz=n(R$e,"A",{href:!0});var F_t=s(nz);dtr=r(F_t,"DetrForSegmentation"),F_t.forEach(t),ctr=r(R$e," (DETR model)"),R$e.forEach(t),b_t.forEach(t),ftr=i(Ta),bF=n(Ta,"P",{});var P$e=s(bF);mtr=r(P$e,"The model is set in evaluation mode by default using "),$_e=n(P$e,"CODE",{});var T_t=s($_e);gtr=r(T_t,"model.eval()"),T_t.forEach(t),htr=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(P$e,"CODE",{});var M_t=s(k_e);ptr=r(M_t,"model.train()"),M_t.forEach(t),P$e.forEach(t),utr=i(Ta),T(vF.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Aqe=i(f),Pd=n(f,"H2",{class:!0});var Sje=s(Pd);FF=n(Sje,"A",{id:!0,class:!0,href:!0});var E_t=s(FF);S_e=n(E_t,"SPAN",{});var C_t=s(S_e);T(SL.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),_tr=i(Sje),R_e=n(Sje,"SPAN",{});var w_t=s(R_e);btr=r(w_t,"AutoModelForSemanticSegmentation"),w_t.forEach(t),Sje.forEach(t),yqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(RL.$$.fragment,cl),vtr=i(cl),Bd=n(cl,"P",{});var uZ=s(Bd);Ftr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sz=n(uZ,"A",{href:!0});var A_t=s(sz);Ttr=r(A_t,"from_pretrained()"),A_t.forEach(t),Mtr=r(uZ," class method or the "),lz=n(uZ,"A",{href:!0});var y_t=s(lz);Etr=r(y_t,"from_config()"),y_t.forEach(t),Ctr=r(uZ,` class
method.`),uZ.forEach(t),wtr=i(cl),PL=n(cl,"P",{});var Rje=s(PL);Atr=r(Rje,"This class cannot be instantiated directly using "),P_e=n(Rje,"CODE",{});var L_t=s(P_e);ytr=r(L_t,"__init__()"),L_t.forEach(t),Ltr=r(Rje," (throws an error)."),Rje.forEach(t),xtr=i(cl),wt=n(cl,"DIV",{class:!0});var ZA=s(wt);T(BL.$$.fragment,ZA),$tr=i(ZA),B_e=n(ZA,"P",{});var x_t=s(B_e);ktr=r(x_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),x_t.forEach(t),Str=i(ZA),Id=n(ZA,"P",{});var _Z=s(Id);Rtr=r(_Z,`Note:
Loading a model from its configuration file does `),I_e=n(_Z,"STRONG",{});var $_t=s(I_e);Ptr=r($_t,"not"),$_t.forEach(t),Btr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(_Z,"A",{href:!0});var k_t=s(iz);Itr=r(k_t,"from_pretrained()"),k_t.forEach(t),qtr=r(_Z," to load the model weights."),_Z.forEach(t),Ntr=i(ZA),T(TF.$$.fragment,ZA),ZA.forEach(t),jtr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(IL.$$.fragment,Ma),Dtr=i(Ma),q_e=n(Ma,"P",{});var S_t=s(q_e);Gtr=r(S_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),S_t.forEach(t),Otr=i(Ma),Ua=n(Ma,"P",{});var e6=s(Ua);Vtr=r(e6,"The model class to instantiate is selected based on the "),N_e=n(e6,"CODE",{});var R_t=s(N_e);Xtr=r(R_t,"model_type"),R_t.forEach(t),ztr=r(e6,` property of the config object (either
passed as an argument or loaded from `),j_e=n(e6,"CODE",{});var P_t=s(j_e);Wtr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),Qtr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(e6,"CODE",{});var B_t=s(D_e);Htr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),Utr=r(e6,":"),e6.forEach(t),Jtr=i(Ma),Ja=n(Ma,"UL",{});var o6=s(Ja);MF=n(o6,"LI",{});var B$e=s(MF);G_e=n(B$e,"STRONG",{});var I_t=s(G_e);Ytr=r(I_t,"beit"),I_t.forEach(t),Ktr=r(B$e," \u2014 "),dz=n(B$e,"A",{href:!0});var q_t=s(dz);Ztr=r(q_t,"BeitForSemanticSegmentation"),q_t.forEach(t),ear=r(B$e," (BEiT model)"),B$e.forEach(t),oar=i(o6),EF=n(o6,"LI",{});var I$e=s(EF);O_e=n(I$e,"STRONG",{});var N_t=s(O_e);rar=r(N_t,"data2vec-vision"),N_t.forEach(t),tar=r(I$e," \u2014 "),cz=n(I$e,"A",{href:!0});var j_t=s(cz);aar=r(j_t,"Data2VecVisionForSemanticSegmentation"),j_t.forEach(t),nar=r(I$e," (Data2VecVision model)"),I$e.forEach(t),sar=i(o6),CF=n(o6,"LI",{});var q$e=s(CF);V_e=n(q$e,"STRONG",{});var D_t=s(V_e);lar=r(D_t,"dpt"),D_t.forEach(t),iar=r(q$e," \u2014 "),fz=n(q$e,"A",{href:!0});var G_t=s(fz);dar=r(G_t,"DPTForSemanticSegmentation"),G_t.forEach(t),car=r(q$e," (DPT model)"),q$e.forEach(t),far=i(o6),wF=n(o6,"LI",{});var N$e=s(wF);X_e=n(N$e,"STRONG",{});var O_t=s(X_e);mar=r(O_t,"segformer"),O_t.forEach(t),gar=r(N$e," \u2014 "),mz=n(N$e,"A",{href:!0});var V_t=s(mz);har=r(V_t,"SegformerForSemanticSegmentation"),V_t.forEach(t),par=r(N$e," (SegFormer model)"),N$e.forEach(t),o6.forEach(t),uar=i(Ma),AF=n(Ma,"P",{});var j$e=s(AF);_ar=r(j$e,"The model is set in evaluation mode by default using "),z_e=n(j$e,"CODE",{});var X_t=s(z_e);bar=r(X_t,"model.eval()"),X_t.forEach(t),Far=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(j$e,"CODE",{});var z_t=s(W_e);Tar=r(z_t,"model.train()"),z_t.forEach(t),j$e.forEach(t),Mar=i(Ma),T(yF.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Lqe=i(f),qd=n(f,"H2",{class:!0});var Pje=s(qd);LF=n(Pje,"A",{id:!0,class:!0,href:!0});var W_t=s(LF);Q_e=n(W_t,"SPAN",{});var Q_t=s(Q_e);T(qL.$$.fragment,Q_t),Q_t.forEach(t),W_t.forEach(t),Ear=i(Pje),H_e=n(Pje,"SPAN",{});var H_t=s(H_e);Car=r(H_t,"AutoModelForInstanceSegmentation"),H_t.forEach(t),Pje.forEach(t),xqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(NL.$$.fragment,fl),war=i(fl),Nd=n(fl,"P",{});var bZ=s(Nd);Aar=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gz=n(bZ,"A",{href:!0});var U_t=s(gz);yar=r(U_t,"from_pretrained()"),U_t.forEach(t),Lar=r(bZ," class method or the "),hz=n(bZ,"A",{href:!0});var J_t=s(hz);xar=r(J_t,"from_config()"),J_t.forEach(t),$ar=r(bZ,` class
method.`),bZ.forEach(t),kar=i(fl),jL=n(fl,"P",{});var Bje=s(jL);Sar=r(Bje,"This class cannot be instantiated directly using "),U_e=n(Bje,"CODE",{});var Y_t=s(U_e);Rar=r(Y_t,"__init__()"),Y_t.forEach(t),Par=r(Bje," (throws an error)."),Bje.forEach(t),Bar=i(fl),At=n(fl,"DIV",{class:!0});var r6=s(At);T(DL.$$.fragment,r6),Iar=i(r6),J_e=n(r6,"P",{});var K_t=s(J_e);qar=r(K_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),K_t.forEach(t),Nar=i(r6),jd=n(r6,"P",{});var vZ=s(jd);jar=r(vZ,`Note:
Loading a model from its configuration file does `),Y_e=n(vZ,"STRONG",{});var Z_t=s(Y_e);Dar=r(Z_t,"not"),Z_t.forEach(t),Gar=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(vZ,"A",{href:!0});var e2t=s(pz);Oar=r(e2t,"from_pretrained()"),e2t.forEach(t),Var=r(vZ," to load the model weights."),vZ.forEach(t),Xar=i(r6),T(xF.$$.fragment,r6),r6.forEach(t),zar=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(GL.$$.fragment,Ea),War=i(Ea),K_e=n(Ea,"P",{});var o2t=s(K_e);Qar=r(o2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),o2t.forEach(t),Har=i(Ea),Ya=n(Ea,"P",{});var t6=s(Ya);Uar=r(t6,"The model class to instantiate is selected based on the "),Z_e=n(t6,"CODE",{});var r2t=s(Z_e);Jar=r(r2t,"model_type"),r2t.forEach(t),Yar=r(t6,` property of the config object (either
passed as an argument or loaded from `),e2e=n(t6,"CODE",{});var t2t=s(e2e);Kar=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),Zar=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(t6,"CODE",{});var a2t=s(o2e);enr=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),onr=r(t6,":"),t6.forEach(t),rnr=i(Ea),r2e=n(Ea,"UL",{});var n2t=s(r2e);$F=n(n2t,"LI",{});var D$e=s($F);t2e=n(D$e,"STRONG",{});var s2t=s(t2e);tnr=r(s2t,"maskformer"),s2t.forEach(t),anr=r(D$e," \u2014 "),uz=n(D$e,"A",{href:!0});var l2t=s(uz);nnr=r(l2t,"MaskFormerForInstanceSegmentation"),l2t.forEach(t),snr=r(D$e," (MaskFormer model)"),D$e.forEach(t),n2t.forEach(t),lnr=i(Ea),kF=n(Ea,"P",{});var G$e=s(kF);inr=r(G$e,"The model is set in evaluation mode by default using "),a2e=n(G$e,"CODE",{});var i2t=s(a2e);dnr=r(i2t,"model.eval()"),i2t.forEach(t),cnr=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=n(G$e,"CODE",{});var d2t=s(n2e);fnr=r(d2t,"model.train()"),d2t.forEach(t),G$e.forEach(t),mnr=i(Ea),T(SF.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),$qe=i(f),Dd=n(f,"H2",{class:!0});var Ije=s(Dd);RF=n(Ije,"A",{id:!0,class:!0,href:!0});var c2t=s(RF);s2e=n(c2t,"SPAN",{});var f2t=s(s2e);T(OL.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),gnr=i(Ije),l2e=n(Ije,"SPAN",{});var m2t=s(l2e);hnr=r(m2t,"TFAutoModel"),m2t.forEach(t),Ije.forEach(t),kqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(VL.$$.fragment,ml),pnr=i(ml),Gd=n(ml,"P",{});var FZ=s(Gd);unr=r(FZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_z=n(FZ,"A",{href:!0});var g2t=s(_z);_nr=r(g2t,"from_pretrained()"),g2t.forEach(t),bnr=r(FZ," class method or the "),bz=n(FZ,"A",{href:!0});var h2t=s(bz);vnr=r(h2t,"from_config()"),h2t.forEach(t),Fnr=r(FZ,` class
method.`),FZ.forEach(t),Tnr=i(ml),XL=n(ml,"P",{});var qje=s(XL);Mnr=r(qje,"This class cannot be instantiated directly using "),i2e=n(qje,"CODE",{});var p2t=s(i2e);Enr=r(p2t,"__init__()"),p2t.forEach(t),Cnr=r(qje," (throws an error)."),qje.forEach(t),wnr=i(ml),yt=n(ml,"DIV",{class:!0});var a6=s(yt);T(zL.$$.fragment,a6),Anr=i(a6),d2e=n(a6,"P",{});var u2t=s(d2e);ynr=r(u2t,"Instantiates one of the base model classes of the library from a configuration."),u2t.forEach(t),Lnr=i(a6),Od=n(a6,"P",{});var TZ=s(Od);xnr=r(TZ,`Note:
Loading a model from its configuration file does `),c2e=n(TZ,"STRONG",{});var _2t=s(c2e);$nr=r(_2t,"not"),_2t.forEach(t),knr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(TZ,"A",{href:!0});var b2t=s(vz);Snr=r(b2t,"from_pretrained()"),b2t.forEach(t),Rnr=r(TZ," to load the model weights."),TZ.forEach(t),Pnr=i(a6),T(PF.$$.fragment,a6),a6.forEach(t),Bnr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(WL.$$.fragment,gl),Inr=i(gl),f2e=n(gl,"P",{});var v2t=s(f2e);qnr=r(v2t,"Instantiate one of the base model classes of the library from a pretrained model."),v2t.forEach(t),Nnr=i(gl),Ka=n(gl,"P",{});var n6=s(Ka);jnr=r(n6,"The model class to instantiate is selected based on the "),m2e=n(n6,"CODE",{});var F2t=s(m2e);Dnr=r(F2t,"model_type"),F2t.forEach(t),Gnr=r(n6,` property of the config object (either
passed as an argument or loaded from `),g2e=n(n6,"CODE",{});var T2t=s(g2e);Onr=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),Vnr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(n6,"CODE",{});var M2t=s(h2e);Xnr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),znr=r(n6,":"),n6.forEach(t),Wnr=i(gl),N=n(gl,"UL",{});var D=s(N);BF=n(D,"LI",{});var O$e=s(BF);p2e=n(O$e,"STRONG",{});var E2t=s(p2e);Qnr=r(E2t,"albert"),E2t.forEach(t),Hnr=r(O$e," \u2014 "),Fz=n(O$e,"A",{href:!0});var C2t=s(Fz);Unr=r(C2t,"TFAlbertModel"),C2t.forEach(t),Jnr=r(O$e," (ALBERT model)"),O$e.forEach(t),Ynr=i(D),IF=n(D,"LI",{});var V$e=s(IF);u2e=n(V$e,"STRONG",{});var w2t=s(u2e);Knr=r(w2t,"bart"),w2t.forEach(t),Znr=r(V$e," \u2014 "),Tz=n(V$e,"A",{href:!0});var A2t=s(Tz);esr=r(A2t,"TFBartModel"),A2t.forEach(t),osr=r(V$e," (BART model)"),V$e.forEach(t),rsr=i(D),qF=n(D,"LI",{});var X$e=s(qF);_2e=n(X$e,"STRONG",{});var y2t=s(_2e);tsr=r(y2t,"bert"),y2t.forEach(t),asr=r(X$e," \u2014 "),Mz=n(X$e,"A",{href:!0});var L2t=s(Mz);nsr=r(L2t,"TFBertModel"),L2t.forEach(t),ssr=r(X$e," (BERT model)"),X$e.forEach(t),lsr=i(D),NF=n(D,"LI",{});var z$e=s(NF);b2e=n(z$e,"STRONG",{});var x2t=s(b2e);isr=r(x2t,"blenderbot"),x2t.forEach(t),dsr=r(z$e," \u2014 "),Ez=n(z$e,"A",{href:!0});var $2t=s(Ez);csr=r($2t,"TFBlenderbotModel"),$2t.forEach(t),fsr=r(z$e," (Blenderbot model)"),z$e.forEach(t),msr=i(D),jF=n(D,"LI",{});var W$e=s(jF);v2e=n(W$e,"STRONG",{});var k2t=s(v2e);gsr=r(k2t,"blenderbot-small"),k2t.forEach(t),hsr=r(W$e," \u2014 "),Cz=n(W$e,"A",{href:!0});var S2t=s(Cz);psr=r(S2t,"TFBlenderbotSmallModel"),S2t.forEach(t),usr=r(W$e," (BlenderbotSmall model)"),W$e.forEach(t),_sr=i(D),DF=n(D,"LI",{});var Q$e=s(DF);F2e=n(Q$e,"STRONG",{});var R2t=s(F2e);bsr=r(R2t,"camembert"),R2t.forEach(t),vsr=r(Q$e," \u2014 "),wz=n(Q$e,"A",{href:!0});var P2t=s(wz);Fsr=r(P2t,"TFCamembertModel"),P2t.forEach(t),Tsr=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),Msr=i(D),GF=n(D,"LI",{});var H$e=s(GF);T2e=n(H$e,"STRONG",{});var B2t=s(T2e);Esr=r(B2t,"clip"),B2t.forEach(t),Csr=r(H$e," \u2014 "),Az=n(H$e,"A",{href:!0});var I2t=s(Az);wsr=r(I2t,"TFCLIPModel"),I2t.forEach(t),Asr=r(H$e," (CLIP model)"),H$e.forEach(t),ysr=i(D),OF=n(D,"LI",{});var U$e=s(OF);M2e=n(U$e,"STRONG",{});var q2t=s(M2e);Lsr=r(q2t,"convbert"),q2t.forEach(t),xsr=r(U$e," \u2014 "),yz=n(U$e,"A",{href:!0});var N2t=s(yz);$sr=r(N2t,"TFConvBertModel"),N2t.forEach(t),ksr=r(U$e," (ConvBERT model)"),U$e.forEach(t),Ssr=i(D),VF=n(D,"LI",{});var J$e=s(VF);E2e=n(J$e,"STRONG",{});var j2t=s(E2e);Rsr=r(j2t,"convnext"),j2t.forEach(t),Psr=r(J$e," \u2014 "),Lz=n(J$e,"A",{href:!0});var D2t=s(Lz);Bsr=r(D2t,"TFConvNextModel"),D2t.forEach(t),Isr=r(J$e," (ConvNext model)"),J$e.forEach(t),qsr=i(D),XF=n(D,"LI",{});var Y$e=s(XF);C2e=n(Y$e,"STRONG",{});var G2t=s(C2e);Nsr=r(G2t,"ctrl"),G2t.forEach(t),jsr=r(Y$e," \u2014 "),xz=n(Y$e,"A",{href:!0});var O2t=s(xz);Dsr=r(O2t,"TFCTRLModel"),O2t.forEach(t),Gsr=r(Y$e," (CTRL model)"),Y$e.forEach(t),Osr=i(D),zF=n(D,"LI",{});var K$e=s(zF);w2e=n(K$e,"STRONG",{});var V2t=s(w2e);Vsr=r(V2t,"data2vec-vision"),V2t.forEach(t),Xsr=r(K$e," \u2014 "),$z=n(K$e,"A",{href:!0});var X2t=s($z);zsr=r(X2t,"TFData2VecVisionModel"),X2t.forEach(t),Wsr=r(K$e," (Data2VecVision model)"),K$e.forEach(t),Qsr=i(D),WF=n(D,"LI",{});var Z$e=s(WF);A2e=n(Z$e,"STRONG",{});var z2t=s(A2e);Hsr=r(z2t,"deberta"),z2t.forEach(t),Usr=r(Z$e," \u2014 "),kz=n(Z$e,"A",{href:!0});var W2t=s(kz);Jsr=r(W2t,"TFDebertaModel"),W2t.forEach(t),Ysr=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),Ksr=i(D),QF=n(D,"LI",{});var eke=s(QF);y2e=n(eke,"STRONG",{});var Q2t=s(y2e);Zsr=r(Q2t,"deberta-v2"),Q2t.forEach(t),elr=r(eke," \u2014 "),Sz=n(eke,"A",{href:!0});var H2t=s(Sz);olr=r(H2t,"TFDebertaV2Model"),H2t.forEach(t),rlr=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),tlr=i(D),HF=n(D,"LI",{});var oke=s(HF);L2e=n(oke,"STRONG",{});var U2t=s(L2e);alr=r(U2t,"distilbert"),U2t.forEach(t),nlr=r(oke," \u2014 "),Rz=n(oke,"A",{href:!0});var J2t=s(Rz);slr=r(J2t,"TFDistilBertModel"),J2t.forEach(t),llr=r(oke," (DistilBERT model)"),oke.forEach(t),ilr=i(D),UF=n(D,"LI",{});var rke=s(UF);x2e=n(rke,"STRONG",{});var Y2t=s(x2e);dlr=r(Y2t,"dpr"),Y2t.forEach(t),clr=r(rke," \u2014 "),Pz=n(rke,"A",{href:!0});var K2t=s(Pz);flr=r(K2t,"TFDPRQuestionEncoder"),K2t.forEach(t),mlr=r(rke," (DPR model)"),rke.forEach(t),glr=i(D),JF=n(D,"LI",{});var tke=s(JF);$2e=n(tke,"STRONG",{});var Z2t=s($2e);hlr=r(Z2t,"electra"),Z2t.forEach(t),plr=r(tke," \u2014 "),Bz=n(tke,"A",{href:!0});var e1t=s(Bz);ulr=r(e1t,"TFElectraModel"),e1t.forEach(t),_lr=r(tke," (ELECTRA model)"),tke.forEach(t),blr=i(D),YF=n(D,"LI",{});var ake=s(YF);k2e=n(ake,"STRONG",{});var o1t=s(k2e);vlr=r(o1t,"flaubert"),o1t.forEach(t),Flr=r(ake," \u2014 "),Iz=n(ake,"A",{href:!0});var r1t=s(Iz);Tlr=r(r1t,"TFFlaubertModel"),r1t.forEach(t),Mlr=r(ake," (FlauBERT model)"),ake.forEach(t),Elr=i(D),Bs=n(D,"LI",{});var E$=s(Bs);S2e=n(E$,"STRONG",{});var t1t=s(S2e);Clr=r(t1t,"funnel"),t1t.forEach(t),wlr=r(E$," \u2014 "),qz=n(E$,"A",{href:!0});var a1t=s(qz);Alr=r(a1t,"TFFunnelModel"),a1t.forEach(t),ylr=r(E$," or "),Nz=n(E$,"A",{href:!0});var n1t=s(Nz);Llr=r(n1t,"TFFunnelBaseModel"),n1t.forEach(t),xlr=r(E$," (Funnel Transformer model)"),E$.forEach(t),$lr=i(D),KF=n(D,"LI",{});var nke=s(KF);R2e=n(nke,"STRONG",{});var s1t=s(R2e);klr=r(s1t,"gpt2"),s1t.forEach(t),Slr=r(nke," \u2014 "),jz=n(nke,"A",{href:!0});var l1t=s(jz);Rlr=r(l1t,"TFGPT2Model"),l1t.forEach(t),Plr=r(nke," (OpenAI GPT-2 model)"),nke.forEach(t),Blr=i(D),ZF=n(D,"LI",{});var ske=s(ZF);P2e=n(ske,"STRONG",{});var i1t=s(P2e);Ilr=r(i1t,"gptj"),i1t.forEach(t),qlr=r(ske," \u2014 "),Dz=n(ske,"A",{href:!0});var d1t=s(Dz);Nlr=r(d1t,"TFGPTJModel"),d1t.forEach(t),jlr=r(ske," (GPT-J model)"),ske.forEach(t),Dlr=i(D),eT=n(D,"LI",{});var lke=s(eT);B2e=n(lke,"STRONG",{});var c1t=s(B2e);Glr=r(c1t,"hubert"),c1t.forEach(t),Olr=r(lke," \u2014 "),Gz=n(lke,"A",{href:!0});var f1t=s(Gz);Vlr=r(f1t,"TFHubertModel"),f1t.forEach(t),Xlr=r(lke," (Hubert model)"),lke.forEach(t),zlr=i(D),oT=n(D,"LI",{});var ike=s(oT);I2e=n(ike,"STRONG",{});var m1t=s(I2e);Wlr=r(m1t,"layoutlm"),m1t.forEach(t),Qlr=r(ike," \u2014 "),Oz=n(ike,"A",{href:!0});var g1t=s(Oz);Hlr=r(g1t,"TFLayoutLMModel"),g1t.forEach(t),Ulr=r(ike," (LayoutLM model)"),ike.forEach(t),Jlr=i(D),rT=n(D,"LI",{});var dke=s(rT);q2e=n(dke,"STRONG",{});var h1t=s(q2e);Ylr=r(h1t,"led"),h1t.forEach(t),Klr=r(dke," \u2014 "),Vz=n(dke,"A",{href:!0});var p1t=s(Vz);Zlr=r(p1t,"TFLEDModel"),p1t.forEach(t),eir=r(dke," (LED model)"),dke.forEach(t),oir=i(D),tT=n(D,"LI",{});var cke=s(tT);N2e=n(cke,"STRONG",{});var u1t=s(N2e);rir=r(u1t,"longformer"),u1t.forEach(t),tir=r(cke," \u2014 "),Xz=n(cke,"A",{href:!0});var _1t=s(Xz);air=r(_1t,"TFLongformerModel"),_1t.forEach(t),nir=r(cke," (Longformer model)"),cke.forEach(t),sir=i(D),aT=n(D,"LI",{});var fke=s(aT);j2e=n(fke,"STRONG",{});var b1t=s(j2e);lir=r(b1t,"lxmert"),b1t.forEach(t),iir=r(fke," \u2014 "),zz=n(fke,"A",{href:!0});var v1t=s(zz);dir=r(v1t,"TFLxmertModel"),v1t.forEach(t),cir=r(fke," (LXMERT model)"),fke.forEach(t),fir=i(D),nT=n(D,"LI",{});var mke=s(nT);D2e=n(mke,"STRONG",{});var F1t=s(D2e);mir=r(F1t,"marian"),F1t.forEach(t),gir=r(mke," \u2014 "),Wz=n(mke,"A",{href:!0});var T1t=s(Wz);hir=r(T1t,"TFMarianModel"),T1t.forEach(t),pir=r(mke," (Marian model)"),mke.forEach(t),uir=i(D),sT=n(D,"LI",{});var gke=s(sT);G2e=n(gke,"STRONG",{});var M1t=s(G2e);_ir=r(M1t,"mbart"),M1t.forEach(t),bir=r(gke," \u2014 "),Qz=n(gke,"A",{href:!0});var E1t=s(Qz);vir=r(E1t,"TFMBartModel"),E1t.forEach(t),Fir=r(gke," (mBART model)"),gke.forEach(t),Tir=i(D),lT=n(D,"LI",{});var hke=s(lT);O2e=n(hke,"STRONG",{});var C1t=s(O2e);Mir=r(C1t,"mobilebert"),C1t.forEach(t),Eir=r(hke," \u2014 "),Hz=n(hke,"A",{href:!0});var w1t=s(Hz);Cir=r(w1t,"TFMobileBertModel"),w1t.forEach(t),wir=r(hke," (MobileBERT model)"),hke.forEach(t),Air=i(D),iT=n(D,"LI",{});var pke=s(iT);V2e=n(pke,"STRONG",{});var A1t=s(V2e);yir=r(A1t,"mpnet"),A1t.forEach(t),Lir=r(pke," \u2014 "),Uz=n(pke,"A",{href:!0});var y1t=s(Uz);xir=r(y1t,"TFMPNetModel"),y1t.forEach(t),$ir=r(pke," (MPNet model)"),pke.forEach(t),kir=i(D),dT=n(D,"LI",{});var uke=s(dT);X2e=n(uke,"STRONG",{});var L1t=s(X2e);Sir=r(L1t,"mt5"),L1t.forEach(t),Rir=r(uke," \u2014 "),Jz=n(uke,"A",{href:!0});var x1t=s(Jz);Pir=r(x1t,"TFMT5Model"),x1t.forEach(t),Bir=r(uke," (mT5 model)"),uke.forEach(t),Iir=i(D),cT=n(D,"LI",{});var _ke=s(cT);z2e=n(_ke,"STRONG",{});var $1t=s(z2e);qir=r($1t,"openai-gpt"),$1t.forEach(t),Nir=r(_ke," \u2014 "),Yz=n(_ke,"A",{href:!0});var k1t=s(Yz);jir=r(k1t,"TFOpenAIGPTModel"),k1t.forEach(t),Dir=r(_ke," (OpenAI GPT model)"),_ke.forEach(t),Gir=i(D),fT=n(D,"LI",{});var bke=s(fT);W2e=n(bke,"STRONG",{});var S1t=s(W2e);Oir=r(S1t,"pegasus"),S1t.forEach(t),Vir=r(bke," \u2014 "),Kz=n(bke,"A",{href:!0});var R1t=s(Kz);Xir=r(R1t,"TFPegasusModel"),R1t.forEach(t),zir=r(bke," (Pegasus model)"),bke.forEach(t),Wir=i(D),mT=n(D,"LI",{});var vke=s(mT);Q2e=n(vke,"STRONG",{});var P1t=s(Q2e);Qir=r(P1t,"rembert"),P1t.forEach(t),Hir=r(vke," \u2014 "),Zz=n(vke,"A",{href:!0});var B1t=s(Zz);Uir=r(B1t,"TFRemBertModel"),B1t.forEach(t),Jir=r(vke," (RemBERT model)"),vke.forEach(t),Yir=i(D),gT=n(D,"LI",{});var Fke=s(gT);H2e=n(Fke,"STRONG",{});var I1t=s(H2e);Kir=r(I1t,"roberta"),I1t.forEach(t),Zir=r(Fke," \u2014 "),eW=n(Fke,"A",{href:!0});var q1t=s(eW);edr=r(q1t,"TFRobertaModel"),q1t.forEach(t),odr=r(Fke," (RoBERTa model)"),Fke.forEach(t),rdr=i(D),hT=n(D,"LI",{});var Tke=s(hT);U2e=n(Tke,"STRONG",{});var N1t=s(U2e);tdr=r(N1t,"roformer"),N1t.forEach(t),adr=r(Tke," \u2014 "),oW=n(Tke,"A",{href:!0});var j1t=s(oW);ndr=r(j1t,"TFRoFormerModel"),j1t.forEach(t),sdr=r(Tke," (RoFormer model)"),Tke.forEach(t),ldr=i(D),pT=n(D,"LI",{});var Mke=s(pT);J2e=n(Mke,"STRONG",{});var D1t=s(J2e);idr=r(D1t,"speech_to_text"),D1t.forEach(t),ddr=r(Mke," \u2014 "),rW=n(Mke,"A",{href:!0});var G1t=s(rW);cdr=r(G1t,"TFSpeech2TextModel"),G1t.forEach(t),fdr=r(Mke," (Speech2Text model)"),Mke.forEach(t),mdr=i(D),uT=n(D,"LI",{});var Eke=s(uT);Y2e=n(Eke,"STRONG",{});var O1t=s(Y2e);gdr=r(O1t,"swin"),O1t.forEach(t),hdr=r(Eke," \u2014 "),tW=n(Eke,"A",{href:!0});var V1t=s(tW);pdr=r(V1t,"TFSwinModel"),V1t.forEach(t),udr=r(Eke," (Swin model)"),Eke.forEach(t),_dr=i(D),_T=n(D,"LI",{});var Cke=s(_T);K2e=n(Cke,"STRONG",{});var X1t=s(K2e);bdr=r(X1t,"t5"),X1t.forEach(t),vdr=r(Cke," \u2014 "),aW=n(Cke,"A",{href:!0});var z1t=s(aW);Fdr=r(z1t,"TFT5Model"),z1t.forEach(t),Tdr=r(Cke," (T5 model)"),Cke.forEach(t),Mdr=i(D),bT=n(D,"LI",{});var wke=s(bT);Z2e=n(wke,"STRONG",{});var W1t=s(Z2e);Edr=r(W1t,"tapas"),W1t.forEach(t),Cdr=r(wke," \u2014 "),nW=n(wke,"A",{href:!0});var Q1t=s(nW);wdr=r(Q1t,"TFTapasModel"),Q1t.forEach(t),Adr=r(wke," (TAPAS model)"),wke.forEach(t),ydr=i(D),vT=n(D,"LI",{});var Ake=s(vT);e1e=n(Ake,"STRONG",{});var H1t=s(e1e);Ldr=r(H1t,"transfo-xl"),H1t.forEach(t),xdr=r(Ake," \u2014 "),sW=n(Ake,"A",{href:!0});var U1t=s(sW);$dr=r(U1t,"TFTransfoXLModel"),U1t.forEach(t),kdr=r(Ake," (Transformer-XL model)"),Ake.forEach(t),Sdr=i(D),FT=n(D,"LI",{});var yke=s(FT);o1e=n(yke,"STRONG",{});var J1t=s(o1e);Rdr=r(J1t,"vit"),J1t.forEach(t),Pdr=r(yke," \u2014 "),lW=n(yke,"A",{href:!0});var Y1t=s(lW);Bdr=r(Y1t,"TFViTModel"),Y1t.forEach(t),Idr=r(yke," (ViT model)"),yke.forEach(t),qdr=i(D),TT=n(D,"LI",{});var Lke=s(TT);r1e=n(Lke,"STRONG",{});var K1t=s(r1e);Ndr=r(K1t,"vit_mae"),K1t.forEach(t),jdr=r(Lke," \u2014 "),iW=n(Lke,"A",{href:!0});var Z1t=s(iW);Ddr=r(Z1t,"TFViTMAEModel"),Z1t.forEach(t),Gdr=r(Lke," (ViTMAE model)"),Lke.forEach(t),Odr=i(D),MT=n(D,"LI",{});var xke=s(MT);t1e=n(xke,"STRONG",{});var e7t=s(t1e);Vdr=r(e7t,"wav2vec2"),e7t.forEach(t),Xdr=r(xke," \u2014 "),dW=n(xke,"A",{href:!0});var o7t=s(dW);zdr=r(o7t,"TFWav2Vec2Model"),o7t.forEach(t),Wdr=r(xke," (Wav2Vec2 model)"),xke.forEach(t),Qdr=i(D),ET=n(D,"LI",{});var $ke=s(ET);a1e=n($ke,"STRONG",{});var r7t=s(a1e);Hdr=r(r7t,"xlm"),r7t.forEach(t),Udr=r($ke," \u2014 "),cW=n($ke,"A",{href:!0});var t7t=s(cW);Jdr=r(t7t,"TFXLMModel"),t7t.forEach(t),Ydr=r($ke," (XLM model)"),$ke.forEach(t),Kdr=i(D),CT=n(D,"LI",{});var kke=s(CT);n1e=n(kke,"STRONG",{});var a7t=s(n1e);Zdr=r(a7t,"xlm-roberta"),a7t.forEach(t),ecr=r(kke," \u2014 "),fW=n(kke,"A",{href:!0});var n7t=s(fW);ocr=r(n7t,"TFXLMRobertaModel"),n7t.forEach(t),rcr=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),tcr=i(D),wT=n(D,"LI",{});var Ske=s(wT);s1e=n(Ske,"STRONG",{});var s7t=s(s1e);acr=r(s7t,"xlnet"),s7t.forEach(t),ncr=r(Ske," \u2014 "),mW=n(Ske,"A",{href:!0});var l7t=s(mW);scr=r(l7t,"TFXLNetModel"),l7t.forEach(t),lcr=r(Ske," (XLNet model)"),Ske.forEach(t),D.forEach(t),icr=i(gl),T(AT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Sqe=i(f),Vd=n(f,"H2",{class:!0});var Nje=s(Vd);yT=n(Nje,"A",{id:!0,class:!0,href:!0});var i7t=s(yT);l1e=n(i7t,"SPAN",{});var d7t=s(l1e);T(QL.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),dcr=i(Nje),i1e=n(Nje,"SPAN",{});var c7t=s(i1e);ccr=r(c7t,"TFAutoModelForPreTraining"),c7t.forEach(t),Nje.forEach(t),Rqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(HL.$$.fragment,hl),fcr=i(hl),Xd=n(hl,"P",{});var MZ=s(Xd);mcr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gW=n(MZ,"A",{href:!0});var f7t=s(gW);gcr=r(f7t,"from_pretrained()"),f7t.forEach(t),hcr=r(MZ," class method or the "),hW=n(MZ,"A",{href:!0});var m7t=s(hW);pcr=r(m7t,"from_config()"),m7t.forEach(t),ucr=r(MZ,` class
method.`),MZ.forEach(t),_cr=i(hl),UL=n(hl,"P",{});var jje=s(UL);bcr=r(jje,"This class cannot be instantiated directly using "),d1e=n(jje,"CODE",{});var g7t=s(d1e);vcr=r(g7t,"__init__()"),g7t.forEach(t),Fcr=r(jje," (throws an error)."),jje.forEach(t),Tcr=i(hl),Lt=n(hl,"DIV",{class:!0});var s6=s(Lt);T(JL.$$.fragment,s6),Mcr=i(s6),c1e=n(s6,"P",{});var h7t=s(c1e);Ecr=r(h7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),h7t.forEach(t),Ccr=i(s6),zd=n(s6,"P",{});var EZ=s(zd);wcr=r(EZ,`Note:
Loading a model from its configuration file does `),f1e=n(EZ,"STRONG",{});var p7t=s(f1e);Acr=r(p7t,"not"),p7t.forEach(t),ycr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(EZ,"A",{href:!0});var u7t=s(pW);Lcr=r(u7t,"from_pretrained()"),u7t.forEach(t),xcr=r(EZ," to load the model weights."),EZ.forEach(t),$cr=i(s6),T(LT.$$.fragment,s6),s6.forEach(t),kcr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(YL.$$.fragment,pl),Scr=i(pl),m1e=n(pl,"P",{});var _7t=s(m1e);Rcr=r(_7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_7t.forEach(t),Pcr=i(pl),Za=n(pl,"P",{});var l6=s(Za);Bcr=r(l6,"The model class to instantiate is selected based on the "),g1e=n(l6,"CODE",{});var b7t=s(g1e);Icr=r(b7t,"model_type"),b7t.forEach(t),qcr=r(l6,` property of the config object (either
passed as an argument or loaded from `),h1e=n(l6,"CODE",{});var v7t=s(h1e);Ncr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),jcr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(l6,"CODE",{});var F7t=s(p1e);Dcr=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),Gcr=r(l6,":"),l6.forEach(t),Ocr=i(pl),se=n(pl,"UL",{});var le=s(se);xT=n(le,"LI",{});var Rke=s(xT);u1e=n(Rke,"STRONG",{});var T7t=s(u1e);Vcr=r(T7t,"albert"),T7t.forEach(t),Xcr=r(Rke," \u2014 "),uW=n(Rke,"A",{href:!0});var M7t=s(uW);zcr=r(M7t,"TFAlbertForPreTraining"),M7t.forEach(t),Wcr=r(Rke," (ALBERT model)"),Rke.forEach(t),Qcr=i(le),$T=n(le,"LI",{});var Pke=s($T);_1e=n(Pke,"STRONG",{});var E7t=s(_1e);Hcr=r(E7t,"bart"),E7t.forEach(t),Ucr=r(Pke," \u2014 "),_W=n(Pke,"A",{href:!0});var C7t=s(_W);Jcr=r(C7t,"TFBartForConditionalGeneration"),C7t.forEach(t),Ycr=r(Pke," (BART model)"),Pke.forEach(t),Kcr=i(le),kT=n(le,"LI",{});var Bke=s(kT);b1e=n(Bke,"STRONG",{});var w7t=s(b1e);Zcr=r(w7t,"bert"),w7t.forEach(t),efr=r(Bke," \u2014 "),bW=n(Bke,"A",{href:!0});var A7t=s(bW);ofr=r(A7t,"TFBertForPreTraining"),A7t.forEach(t),rfr=r(Bke," (BERT model)"),Bke.forEach(t),tfr=i(le),ST=n(le,"LI",{});var Ike=s(ST);v1e=n(Ike,"STRONG",{});var y7t=s(v1e);afr=r(y7t,"camembert"),y7t.forEach(t),nfr=r(Ike," \u2014 "),vW=n(Ike,"A",{href:!0});var L7t=s(vW);sfr=r(L7t,"TFCamembertForMaskedLM"),L7t.forEach(t),lfr=r(Ike," (CamemBERT model)"),Ike.forEach(t),ifr=i(le),RT=n(le,"LI",{});var qke=s(RT);F1e=n(qke,"STRONG",{});var x7t=s(F1e);dfr=r(x7t,"ctrl"),x7t.forEach(t),cfr=r(qke," \u2014 "),FW=n(qke,"A",{href:!0});var $7t=s(FW);ffr=r($7t,"TFCTRLLMHeadModel"),$7t.forEach(t),mfr=r(qke," (CTRL model)"),qke.forEach(t),gfr=i(le),PT=n(le,"LI",{});var Nke=s(PT);T1e=n(Nke,"STRONG",{});var k7t=s(T1e);hfr=r(k7t,"distilbert"),k7t.forEach(t),pfr=r(Nke," \u2014 "),TW=n(Nke,"A",{href:!0});var S7t=s(TW);ufr=r(S7t,"TFDistilBertForMaskedLM"),S7t.forEach(t),_fr=r(Nke," (DistilBERT model)"),Nke.forEach(t),bfr=i(le),BT=n(le,"LI",{});var jke=s(BT);M1e=n(jke,"STRONG",{});var R7t=s(M1e);vfr=r(R7t,"electra"),R7t.forEach(t),Ffr=r(jke," \u2014 "),MW=n(jke,"A",{href:!0});var P7t=s(MW);Tfr=r(P7t,"TFElectraForPreTraining"),P7t.forEach(t),Mfr=r(jke," (ELECTRA model)"),jke.forEach(t),Efr=i(le),IT=n(le,"LI",{});var Dke=s(IT);E1e=n(Dke,"STRONG",{});var B7t=s(E1e);Cfr=r(B7t,"flaubert"),B7t.forEach(t),wfr=r(Dke," \u2014 "),EW=n(Dke,"A",{href:!0});var I7t=s(EW);Afr=r(I7t,"TFFlaubertWithLMHeadModel"),I7t.forEach(t),yfr=r(Dke," (FlauBERT model)"),Dke.forEach(t),Lfr=i(le),qT=n(le,"LI",{});var Gke=s(qT);C1e=n(Gke,"STRONG",{});var q7t=s(C1e);xfr=r(q7t,"funnel"),q7t.forEach(t),$fr=r(Gke," \u2014 "),CW=n(Gke,"A",{href:!0});var N7t=s(CW);kfr=r(N7t,"TFFunnelForPreTraining"),N7t.forEach(t),Sfr=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),Rfr=i(le),NT=n(le,"LI",{});var Oke=s(NT);w1e=n(Oke,"STRONG",{});var j7t=s(w1e);Pfr=r(j7t,"gpt2"),j7t.forEach(t),Bfr=r(Oke," \u2014 "),wW=n(Oke,"A",{href:!0});var D7t=s(wW);Ifr=r(D7t,"TFGPT2LMHeadModel"),D7t.forEach(t),qfr=r(Oke," (OpenAI GPT-2 model)"),Oke.forEach(t),Nfr=i(le),jT=n(le,"LI",{});var Vke=s(jT);A1e=n(Vke,"STRONG",{});var G7t=s(A1e);jfr=r(G7t,"layoutlm"),G7t.forEach(t),Dfr=r(Vke," \u2014 "),AW=n(Vke,"A",{href:!0});var O7t=s(AW);Gfr=r(O7t,"TFLayoutLMForMaskedLM"),O7t.forEach(t),Ofr=r(Vke," (LayoutLM model)"),Vke.forEach(t),Vfr=i(le),DT=n(le,"LI",{});var Xke=s(DT);y1e=n(Xke,"STRONG",{});var V7t=s(y1e);Xfr=r(V7t,"lxmert"),V7t.forEach(t),zfr=r(Xke," \u2014 "),yW=n(Xke,"A",{href:!0});var X7t=s(yW);Wfr=r(X7t,"TFLxmertForPreTraining"),X7t.forEach(t),Qfr=r(Xke," (LXMERT model)"),Xke.forEach(t),Hfr=i(le),GT=n(le,"LI",{});var zke=s(GT);L1e=n(zke,"STRONG",{});var z7t=s(L1e);Ufr=r(z7t,"mobilebert"),z7t.forEach(t),Jfr=r(zke," \u2014 "),LW=n(zke,"A",{href:!0});var W7t=s(LW);Yfr=r(W7t,"TFMobileBertForPreTraining"),W7t.forEach(t),Kfr=r(zke," (MobileBERT model)"),zke.forEach(t),Zfr=i(le),OT=n(le,"LI",{});var Wke=s(OT);x1e=n(Wke,"STRONG",{});var Q7t=s(x1e);emr=r(Q7t,"mpnet"),Q7t.forEach(t),omr=r(Wke," \u2014 "),xW=n(Wke,"A",{href:!0});var H7t=s(xW);rmr=r(H7t,"TFMPNetForMaskedLM"),H7t.forEach(t),tmr=r(Wke," (MPNet model)"),Wke.forEach(t),amr=i(le),VT=n(le,"LI",{});var Qke=s(VT);$1e=n(Qke,"STRONG",{});var U7t=s($1e);nmr=r(U7t,"openai-gpt"),U7t.forEach(t),smr=r(Qke," \u2014 "),$W=n(Qke,"A",{href:!0});var J7t=s($W);lmr=r(J7t,"TFOpenAIGPTLMHeadModel"),J7t.forEach(t),imr=r(Qke," (OpenAI GPT model)"),Qke.forEach(t),dmr=i(le),XT=n(le,"LI",{});var Hke=s(XT);k1e=n(Hke,"STRONG",{});var Y7t=s(k1e);cmr=r(Y7t,"roberta"),Y7t.forEach(t),fmr=r(Hke," \u2014 "),kW=n(Hke,"A",{href:!0});var K7t=s(kW);mmr=r(K7t,"TFRobertaForMaskedLM"),K7t.forEach(t),gmr=r(Hke," (RoBERTa model)"),Hke.forEach(t),hmr=i(le),zT=n(le,"LI",{});var Uke=s(zT);S1e=n(Uke,"STRONG",{});var Z7t=s(S1e);pmr=r(Z7t,"t5"),Z7t.forEach(t),umr=r(Uke," \u2014 "),SW=n(Uke,"A",{href:!0});var ebt=s(SW);_mr=r(ebt,"TFT5ForConditionalGeneration"),ebt.forEach(t),bmr=r(Uke," (T5 model)"),Uke.forEach(t),vmr=i(le),WT=n(le,"LI",{});var Jke=s(WT);R1e=n(Jke,"STRONG",{});var obt=s(R1e);Fmr=r(obt,"tapas"),obt.forEach(t),Tmr=r(Jke," \u2014 "),RW=n(Jke,"A",{href:!0});var rbt=s(RW);Mmr=r(rbt,"TFTapasForMaskedLM"),rbt.forEach(t),Emr=r(Jke," (TAPAS model)"),Jke.forEach(t),Cmr=i(le),QT=n(le,"LI",{});var Yke=s(QT);P1e=n(Yke,"STRONG",{});var tbt=s(P1e);wmr=r(tbt,"transfo-xl"),tbt.forEach(t),Amr=r(Yke," \u2014 "),PW=n(Yke,"A",{href:!0});var abt=s(PW);ymr=r(abt,"TFTransfoXLLMHeadModel"),abt.forEach(t),Lmr=r(Yke," (Transformer-XL model)"),Yke.forEach(t),xmr=i(le),HT=n(le,"LI",{});var Kke=s(HT);B1e=n(Kke,"STRONG",{});var nbt=s(B1e);$mr=r(nbt,"vit_mae"),nbt.forEach(t),kmr=r(Kke," \u2014 "),BW=n(Kke,"A",{href:!0});var sbt=s(BW);Smr=r(sbt,"TFViTMAEForPreTraining"),sbt.forEach(t),Rmr=r(Kke," (ViTMAE model)"),Kke.forEach(t),Pmr=i(le),UT=n(le,"LI",{});var Zke=s(UT);I1e=n(Zke,"STRONG",{});var lbt=s(I1e);Bmr=r(lbt,"xlm"),lbt.forEach(t),Imr=r(Zke," \u2014 "),IW=n(Zke,"A",{href:!0});var ibt=s(IW);qmr=r(ibt,"TFXLMWithLMHeadModel"),ibt.forEach(t),Nmr=r(Zke," (XLM model)"),Zke.forEach(t),jmr=i(le),JT=n(le,"LI",{});var eSe=s(JT);q1e=n(eSe,"STRONG",{});var dbt=s(q1e);Dmr=r(dbt,"xlm-roberta"),dbt.forEach(t),Gmr=r(eSe," \u2014 "),qW=n(eSe,"A",{href:!0});var cbt=s(qW);Omr=r(cbt,"TFXLMRobertaForMaskedLM"),cbt.forEach(t),Vmr=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),Xmr=i(le),YT=n(le,"LI",{});var oSe=s(YT);N1e=n(oSe,"STRONG",{});var fbt=s(N1e);zmr=r(fbt,"xlnet"),fbt.forEach(t),Wmr=r(oSe," \u2014 "),NW=n(oSe,"A",{href:!0});var mbt=s(NW);Qmr=r(mbt,"TFXLNetLMHeadModel"),mbt.forEach(t),Hmr=r(oSe," (XLNet model)"),oSe.forEach(t),le.forEach(t),Umr=i(pl),T(KT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Pqe=i(f),Wd=n(f,"H2",{class:!0});var Dje=s(Wd);ZT=n(Dje,"A",{id:!0,class:!0,href:!0});var gbt=s(ZT);j1e=n(gbt,"SPAN",{});var hbt=s(j1e);T(KL.$$.fragment,hbt),hbt.forEach(t),gbt.forEach(t),Jmr=i(Dje),D1e=n(Dje,"SPAN",{});var pbt=s(D1e);Ymr=r(pbt,"TFAutoModelForCausalLM"),pbt.forEach(t),Dje.forEach(t),Bqe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(ZL.$$.fragment,ul),Kmr=i(ul),Qd=n(ul,"P",{});var CZ=s(Qd);Zmr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jW=n(CZ,"A",{href:!0});var ubt=s(jW);egr=r(ubt,"from_pretrained()"),ubt.forEach(t),ogr=r(CZ," class method or the "),DW=n(CZ,"A",{href:!0});var _bt=s(DW);rgr=r(_bt,"from_config()"),_bt.forEach(t),tgr=r(CZ,` class
method.`),CZ.forEach(t),agr=i(ul),e8=n(ul,"P",{});var Gje=s(e8);ngr=r(Gje,"This class cannot be instantiated directly using "),G1e=n(Gje,"CODE",{});var bbt=s(G1e);sgr=r(bbt,"__init__()"),bbt.forEach(t),lgr=r(Gje," (throws an error)."),Gje.forEach(t),igr=i(ul),xt=n(ul,"DIV",{class:!0});var i6=s(xt);T(o8.$$.fragment,i6),dgr=i(i6),O1e=n(i6,"P",{});var vbt=s(O1e);cgr=r(vbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vbt.forEach(t),fgr=i(i6),Hd=n(i6,"P",{});var wZ=s(Hd);mgr=r(wZ,`Note:
Loading a model from its configuration file does `),V1e=n(wZ,"STRONG",{});var Fbt=s(V1e);ggr=r(Fbt,"not"),Fbt.forEach(t),hgr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(wZ,"A",{href:!0});var Tbt=s(GW);pgr=r(Tbt,"from_pretrained()"),Tbt.forEach(t),ugr=r(wZ," to load the model weights."),wZ.forEach(t),_gr=i(i6),T(eM.$$.fragment,i6),i6.forEach(t),bgr=i(ul),yr=n(ul,"DIV",{class:!0});var _l=s(yr);T(r8.$$.fragment,_l),vgr=i(_l),X1e=n(_l,"P",{});var Mbt=s(X1e);Fgr=r(Mbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mbt.forEach(t),Tgr=i(_l),en=n(_l,"P",{});var d6=s(en);Mgr=r(d6,"The model class to instantiate is selected based on the "),z1e=n(d6,"CODE",{});var Ebt=s(z1e);Egr=r(Ebt,"model_type"),Ebt.forEach(t),Cgr=r(d6,` property of the config object (either
passed as an argument or loaded from `),W1e=n(d6,"CODE",{});var Cbt=s(W1e);wgr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Agr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(d6,"CODE",{});var wbt=s(Q1e);ygr=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),Lgr=r(d6,":"),d6.forEach(t),xgr=i(_l),Te=n(_l,"UL",{});var Ce=s(Te);oM=n(Ce,"LI",{});var rSe=s(oM);H1e=n(rSe,"STRONG",{});var Abt=s(H1e);$gr=r(Abt,"bert"),Abt.forEach(t),kgr=r(rSe," \u2014 "),OW=n(rSe,"A",{href:!0});var ybt=s(OW);Sgr=r(ybt,"TFBertLMHeadModel"),ybt.forEach(t),Rgr=r(rSe," (BERT model)"),rSe.forEach(t),Pgr=i(Ce),rM=n(Ce,"LI",{});var tSe=s(rM);U1e=n(tSe,"STRONG",{});var Lbt=s(U1e);Bgr=r(Lbt,"camembert"),Lbt.forEach(t),Igr=r(tSe," \u2014 "),VW=n(tSe,"A",{href:!0});var xbt=s(VW);qgr=r(xbt,"TFCamembertForCausalLM"),xbt.forEach(t),Ngr=r(tSe," (CamemBERT model)"),tSe.forEach(t),jgr=i(Ce),tM=n(Ce,"LI",{});var aSe=s(tM);J1e=n(aSe,"STRONG",{});var $bt=s(J1e);Dgr=r($bt,"ctrl"),$bt.forEach(t),Ggr=r(aSe," \u2014 "),XW=n(aSe,"A",{href:!0});var kbt=s(XW);Ogr=r(kbt,"TFCTRLLMHeadModel"),kbt.forEach(t),Vgr=r(aSe," (CTRL model)"),aSe.forEach(t),Xgr=i(Ce),aM=n(Ce,"LI",{});var nSe=s(aM);Y1e=n(nSe,"STRONG",{});var Sbt=s(Y1e);zgr=r(Sbt,"gpt2"),Sbt.forEach(t),Wgr=r(nSe," \u2014 "),zW=n(nSe,"A",{href:!0});var Rbt=s(zW);Qgr=r(Rbt,"TFGPT2LMHeadModel"),Rbt.forEach(t),Hgr=r(nSe," (OpenAI GPT-2 model)"),nSe.forEach(t),Ugr=i(Ce),nM=n(Ce,"LI",{});var sSe=s(nM);K1e=n(sSe,"STRONG",{});var Pbt=s(K1e);Jgr=r(Pbt,"gptj"),Pbt.forEach(t),Ygr=r(sSe," \u2014 "),WW=n(sSe,"A",{href:!0});var Bbt=s(WW);Kgr=r(Bbt,"TFGPTJForCausalLM"),Bbt.forEach(t),Zgr=r(sSe," (GPT-J model)"),sSe.forEach(t),ehr=i(Ce),sM=n(Ce,"LI",{});var lSe=s(sM);Z1e=n(lSe,"STRONG",{});var Ibt=s(Z1e);ohr=r(Ibt,"openai-gpt"),Ibt.forEach(t),rhr=r(lSe," \u2014 "),QW=n(lSe,"A",{href:!0});var qbt=s(QW);thr=r(qbt,"TFOpenAIGPTLMHeadModel"),qbt.forEach(t),ahr=r(lSe," (OpenAI GPT model)"),lSe.forEach(t),nhr=i(Ce),lM=n(Ce,"LI",{});var iSe=s(lM);e7e=n(iSe,"STRONG",{});var Nbt=s(e7e);shr=r(Nbt,"rembert"),Nbt.forEach(t),lhr=r(iSe," \u2014 "),HW=n(iSe,"A",{href:!0});var jbt=s(HW);ihr=r(jbt,"TFRemBertForCausalLM"),jbt.forEach(t),dhr=r(iSe," (RemBERT model)"),iSe.forEach(t),chr=i(Ce),iM=n(Ce,"LI",{});var dSe=s(iM);o7e=n(dSe,"STRONG",{});var Dbt=s(o7e);fhr=r(Dbt,"roberta"),Dbt.forEach(t),mhr=r(dSe," \u2014 "),UW=n(dSe,"A",{href:!0});var Gbt=s(UW);ghr=r(Gbt,"TFRobertaForCausalLM"),Gbt.forEach(t),hhr=r(dSe," (RoBERTa model)"),dSe.forEach(t),phr=i(Ce),dM=n(Ce,"LI",{});var cSe=s(dM);r7e=n(cSe,"STRONG",{});var Obt=s(r7e);uhr=r(Obt,"roformer"),Obt.forEach(t),_hr=r(cSe," \u2014 "),JW=n(cSe,"A",{href:!0});var Vbt=s(JW);bhr=r(Vbt,"TFRoFormerForCausalLM"),Vbt.forEach(t),vhr=r(cSe," (RoFormer model)"),cSe.forEach(t),Fhr=i(Ce),cM=n(Ce,"LI",{});var fSe=s(cM);t7e=n(fSe,"STRONG",{});var Xbt=s(t7e);Thr=r(Xbt,"transfo-xl"),Xbt.forEach(t),Mhr=r(fSe," \u2014 "),YW=n(fSe,"A",{href:!0});var zbt=s(YW);Ehr=r(zbt,"TFTransfoXLLMHeadModel"),zbt.forEach(t),Chr=r(fSe," (Transformer-XL model)"),fSe.forEach(t),whr=i(Ce),fM=n(Ce,"LI",{});var mSe=s(fM);a7e=n(mSe,"STRONG",{});var Wbt=s(a7e);Ahr=r(Wbt,"xlm"),Wbt.forEach(t),yhr=r(mSe," \u2014 "),KW=n(mSe,"A",{href:!0});var Qbt=s(KW);Lhr=r(Qbt,"TFXLMWithLMHeadModel"),Qbt.forEach(t),xhr=r(mSe," (XLM model)"),mSe.forEach(t),$hr=i(Ce),mM=n(Ce,"LI",{});var gSe=s(mM);n7e=n(gSe,"STRONG",{});var Hbt=s(n7e);khr=r(Hbt,"xlnet"),Hbt.forEach(t),Shr=r(gSe," \u2014 "),ZW=n(gSe,"A",{href:!0});var Ubt=s(ZW);Rhr=r(Ubt,"TFXLNetLMHeadModel"),Ubt.forEach(t),Phr=r(gSe," (XLNet model)"),gSe.forEach(t),Ce.forEach(t),Bhr=i(_l),T(gM.$$.fragment,_l),_l.forEach(t),ul.forEach(t),Iqe=i(f),Ud=n(f,"H2",{class:!0});var Oje=s(Ud);hM=n(Oje,"A",{id:!0,class:!0,href:!0});var Jbt=s(hM);s7e=n(Jbt,"SPAN",{});var Ybt=s(s7e);T(t8.$$.fragment,Ybt),Ybt.forEach(t),Jbt.forEach(t),Ihr=i(Oje),l7e=n(Oje,"SPAN",{});var Kbt=s(l7e);qhr=r(Kbt,"TFAutoModelForImageClassification"),Kbt.forEach(t),Oje.forEach(t),qqe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(a8.$$.fragment,bl),Nhr=i(bl),Jd=n(bl,"P",{});var AZ=s(Jd);jhr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eQ=n(AZ,"A",{href:!0});var Zbt=s(eQ);Dhr=r(Zbt,"from_pretrained()"),Zbt.forEach(t),Ghr=r(AZ," class method or the "),oQ=n(AZ,"A",{href:!0});var e5t=s(oQ);Ohr=r(e5t,"from_config()"),e5t.forEach(t),Vhr=r(AZ,` class
method.`),AZ.forEach(t),Xhr=i(bl),n8=n(bl,"P",{});var Vje=s(n8);zhr=r(Vje,"This class cannot be instantiated directly using "),i7e=n(Vje,"CODE",{});var o5t=s(i7e);Whr=r(o5t,"__init__()"),o5t.forEach(t),Qhr=r(Vje," (throws an error)."),Vje.forEach(t),Hhr=i(bl),$t=n(bl,"DIV",{class:!0});var c6=s($t);T(s8.$$.fragment,c6),Uhr=i(c6),d7e=n(c6,"P",{});var r5t=s(d7e);Jhr=r(r5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),r5t.forEach(t),Yhr=i(c6),Yd=n(c6,"P",{});var yZ=s(Yd);Khr=r(yZ,`Note:
Loading a model from its configuration file does `),c7e=n(yZ,"STRONG",{});var t5t=s(c7e);Zhr=r(t5t,"not"),t5t.forEach(t),epr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(yZ,"A",{href:!0});var a5t=s(rQ);opr=r(a5t,"from_pretrained()"),a5t.forEach(t),rpr=r(yZ," to load the model weights."),yZ.forEach(t),tpr=i(c6),T(pM.$$.fragment,c6),c6.forEach(t),apr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(l8.$$.fragment,vl),npr=i(vl),f7e=n(vl,"P",{});var n5t=s(f7e);spr=r(n5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),n5t.forEach(t),lpr=i(vl),on=n(vl,"P",{});var f6=s(on);ipr=r(f6,"The model class to instantiate is selected based on the "),m7e=n(f6,"CODE",{});var s5t=s(m7e);dpr=r(s5t,"model_type"),s5t.forEach(t),cpr=r(f6,` property of the config object (either
passed as an argument or loaded from `),g7e=n(f6,"CODE",{});var l5t=s(g7e);fpr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),mpr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(f6,"CODE",{});var i5t=s(h7e);gpr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),hpr=r(f6,":"),f6.forEach(t),ppr=i(vl),rn=n(vl,"UL",{});var m6=s(rn);uM=n(m6,"LI",{});var hSe=s(uM);p7e=n(hSe,"STRONG",{});var d5t=s(p7e);upr=r(d5t,"convnext"),d5t.forEach(t),_pr=r(hSe," \u2014 "),tQ=n(hSe,"A",{href:!0});var c5t=s(tQ);bpr=r(c5t,"TFConvNextForImageClassification"),c5t.forEach(t),vpr=r(hSe," (ConvNext model)"),hSe.forEach(t),Fpr=i(m6),_M=n(m6,"LI",{});var pSe=s(_M);u7e=n(pSe,"STRONG",{});var f5t=s(u7e);Tpr=r(f5t,"data2vec-vision"),f5t.forEach(t),Mpr=r(pSe," \u2014 "),aQ=n(pSe,"A",{href:!0});var m5t=s(aQ);Epr=r(m5t,"TFData2VecVisionForImageClassification"),m5t.forEach(t),Cpr=r(pSe," (Data2VecVision model)"),pSe.forEach(t),wpr=i(m6),bM=n(m6,"LI",{});var uSe=s(bM);_7e=n(uSe,"STRONG",{});var g5t=s(_7e);Apr=r(g5t,"swin"),g5t.forEach(t),ypr=r(uSe," \u2014 "),nQ=n(uSe,"A",{href:!0});var h5t=s(nQ);Lpr=r(h5t,"TFSwinForImageClassification"),h5t.forEach(t),xpr=r(uSe," (Swin model)"),uSe.forEach(t),$pr=i(m6),vM=n(m6,"LI",{});var _Se=s(vM);b7e=n(_Se,"STRONG",{});var p5t=s(b7e);kpr=r(p5t,"vit"),p5t.forEach(t),Spr=r(_Se," \u2014 "),sQ=n(_Se,"A",{href:!0});var u5t=s(sQ);Rpr=r(u5t,"TFViTForImageClassification"),u5t.forEach(t),Ppr=r(_Se," (ViT model)"),_Se.forEach(t),m6.forEach(t),Bpr=i(vl),T(FM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Nqe=i(f),Kd=n(f,"H2",{class:!0});var Xje=s(Kd);TM=n(Xje,"A",{id:!0,class:!0,href:!0});var _5t=s(TM);v7e=n(_5t,"SPAN",{});var b5t=s(v7e);T(i8.$$.fragment,b5t),b5t.forEach(t),_5t.forEach(t),Ipr=i(Xje),F7e=n(Xje,"SPAN",{});var v5t=s(F7e);qpr=r(v5t,"TFAutoModelForMaskedLM"),v5t.forEach(t),Xje.forEach(t),jqe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(d8.$$.fragment,Fl),Npr=i(Fl),Zd=n(Fl,"P",{});var LZ=s(Zd);jpr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lQ=n(LZ,"A",{href:!0});var F5t=s(lQ);Dpr=r(F5t,"from_pretrained()"),F5t.forEach(t),Gpr=r(LZ," class method or the "),iQ=n(LZ,"A",{href:!0});var T5t=s(iQ);Opr=r(T5t,"from_config()"),T5t.forEach(t),Vpr=r(LZ,` class
method.`),LZ.forEach(t),Xpr=i(Fl),c8=n(Fl,"P",{});var zje=s(c8);zpr=r(zje,"This class cannot be instantiated directly using "),T7e=n(zje,"CODE",{});var M5t=s(T7e);Wpr=r(M5t,"__init__()"),M5t.forEach(t),Qpr=r(zje," (throws an error)."),zje.forEach(t),Hpr=i(Fl),kt=n(Fl,"DIV",{class:!0});var g6=s(kt);T(f8.$$.fragment,g6),Upr=i(g6),M7e=n(g6,"P",{});var E5t=s(M7e);Jpr=r(E5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E5t.forEach(t),Ypr=i(g6),ec=n(g6,"P",{});var xZ=s(ec);Kpr=r(xZ,`Note:
Loading a model from its configuration file does `),E7e=n(xZ,"STRONG",{});var C5t=s(E7e);Zpr=r(C5t,"not"),C5t.forEach(t),eur=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(xZ,"A",{href:!0});var w5t=s(dQ);our=r(w5t,"from_pretrained()"),w5t.forEach(t),rur=r(xZ," to load the model weights."),xZ.forEach(t),tur=i(g6),T(MM.$$.fragment,g6),g6.forEach(t),aur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(m8.$$.fragment,Tl),nur=i(Tl),C7e=n(Tl,"P",{});var A5t=s(C7e);sur=r(A5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A5t.forEach(t),lur=i(Tl),tn=n(Tl,"P",{});var h6=s(tn);iur=r(h6,"The model class to instantiate is selected based on the "),w7e=n(h6,"CODE",{});var y5t=s(w7e);dur=r(y5t,"model_type"),y5t.forEach(t),cur=r(h6,` property of the config object (either
passed as an argument or loaded from `),A7e=n(h6,"CODE",{});var L5t=s(A7e);fur=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),mur=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(h6,"CODE",{});var x5t=s(y7e);gur=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),hur=r(h6,":"),h6.forEach(t),pur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);EM=n(fe,"LI",{});var bSe=s(EM);L7e=n(bSe,"STRONG",{});var $5t=s(L7e);uur=r($5t,"albert"),$5t.forEach(t),_ur=r(bSe," \u2014 "),cQ=n(bSe,"A",{href:!0});var k5t=s(cQ);bur=r(k5t,"TFAlbertForMaskedLM"),k5t.forEach(t),vur=r(bSe," (ALBERT model)"),bSe.forEach(t),Fur=i(fe),CM=n(fe,"LI",{});var vSe=s(CM);x7e=n(vSe,"STRONG",{});var S5t=s(x7e);Tur=r(S5t,"bert"),S5t.forEach(t),Mur=r(vSe," \u2014 "),fQ=n(vSe,"A",{href:!0});var R5t=s(fQ);Eur=r(R5t,"TFBertForMaskedLM"),R5t.forEach(t),Cur=r(vSe," (BERT model)"),vSe.forEach(t),wur=i(fe),wM=n(fe,"LI",{});var FSe=s(wM);$7e=n(FSe,"STRONG",{});var P5t=s($7e);Aur=r(P5t,"camembert"),P5t.forEach(t),yur=r(FSe," \u2014 "),mQ=n(FSe,"A",{href:!0});var B5t=s(mQ);Lur=r(B5t,"TFCamembertForMaskedLM"),B5t.forEach(t),xur=r(FSe," (CamemBERT model)"),FSe.forEach(t),$ur=i(fe),AM=n(fe,"LI",{});var TSe=s(AM);k7e=n(TSe,"STRONG",{});var I5t=s(k7e);kur=r(I5t,"convbert"),I5t.forEach(t),Sur=r(TSe," \u2014 "),gQ=n(TSe,"A",{href:!0});var q5t=s(gQ);Rur=r(q5t,"TFConvBertForMaskedLM"),q5t.forEach(t),Pur=r(TSe," (ConvBERT model)"),TSe.forEach(t),Bur=i(fe),yM=n(fe,"LI",{});var MSe=s(yM);S7e=n(MSe,"STRONG",{});var N5t=s(S7e);Iur=r(N5t,"deberta"),N5t.forEach(t),qur=r(MSe," \u2014 "),hQ=n(MSe,"A",{href:!0});var j5t=s(hQ);Nur=r(j5t,"TFDebertaForMaskedLM"),j5t.forEach(t),jur=r(MSe," (DeBERTa model)"),MSe.forEach(t),Dur=i(fe),LM=n(fe,"LI",{});var ESe=s(LM);R7e=n(ESe,"STRONG",{});var D5t=s(R7e);Gur=r(D5t,"deberta-v2"),D5t.forEach(t),Our=r(ESe," \u2014 "),pQ=n(ESe,"A",{href:!0});var G5t=s(pQ);Vur=r(G5t,"TFDebertaV2ForMaskedLM"),G5t.forEach(t),Xur=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),zur=i(fe),xM=n(fe,"LI",{});var CSe=s(xM);P7e=n(CSe,"STRONG",{});var O5t=s(P7e);Wur=r(O5t,"distilbert"),O5t.forEach(t),Qur=r(CSe," \u2014 "),uQ=n(CSe,"A",{href:!0});var V5t=s(uQ);Hur=r(V5t,"TFDistilBertForMaskedLM"),V5t.forEach(t),Uur=r(CSe," (DistilBERT model)"),CSe.forEach(t),Jur=i(fe),$M=n(fe,"LI",{});var wSe=s($M);B7e=n(wSe,"STRONG",{});var X5t=s(B7e);Yur=r(X5t,"electra"),X5t.forEach(t),Kur=r(wSe," \u2014 "),_Q=n(wSe,"A",{href:!0});var z5t=s(_Q);Zur=r(z5t,"TFElectraForMaskedLM"),z5t.forEach(t),e_r=r(wSe," (ELECTRA model)"),wSe.forEach(t),o_r=i(fe),kM=n(fe,"LI",{});var ASe=s(kM);I7e=n(ASe,"STRONG",{});var W5t=s(I7e);r_r=r(W5t,"flaubert"),W5t.forEach(t),t_r=r(ASe," \u2014 "),bQ=n(ASe,"A",{href:!0});var Q5t=s(bQ);a_r=r(Q5t,"TFFlaubertWithLMHeadModel"),Q5t.forEach(t),n_r=r(ASe," (FlauBERT model)"),ASe.forEach(t),s_r=i(fe),SM=n(fe,"LI",{});var ySe=s(SM);q7e=n(ySe,"STRONG",{});var H5t=s(q7e);l_r=r(H5t,"funnel"),H5t.forEach(t),i_r=r(ySe," \u2014 "),vQ=n(ySe,"A",{href:!0});var U5t=s(vQ);d_r=r(U5t,"TFFunnelForMaskedLM"),U5t.forEach(t),c_r=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),f_r=i(fe),RM=n(fe,"LI",{});var LSe=s(RM);N7e=n(LSe,"STRONG",{});var J5t=s(N7e);m_r=r(J5t,"layoutlm"),J5t.forEach(t),g_r=r(LSe," \u2014 "),FQ=n(LSe,"A",{href:!0});var Y5t=s(FQ);h_r=r(Y5t,"TFLayoutLMForMaskedLM"),Y5t.forEach(t),p_r=r(LSe," (LayoutLM model)"),LSe.forEach(t),u_r=i(fe),PM=n(fe,"LI",{});var xSe=s(PM);j7e=n(xSe,"STRONG",{});var K5t=s(j7e);__r=r(K5t,"longformer"),K5t.forEach(t),b_r=r(xSe," \u2014 "),TQ=n(xSe,"A",{href:!0});var Z5t=s(TQ);v_r=r(Z5t,"TFLongformerForMaskedLM"),Z5t.forEach(t),F_r=r(xSe," (Longformer model)"),xSe.forEach(t),T_r=i(fe),BM=n(fe,"LI",{});var $Se=s(BM);D7e=n($Se,"STRONG",{});var evt=s(D7e);M_r=r(evt,"mobilebert"),evt.forEach(t),E_r=r($Se," \u2014 "),MQ=n($Se,"A",{href:!0});var ovt=s(MQ);C_r=r(ovt,"TFMobileBertForMaskedLM"),ovt.forEach(t),w_r=r($Se," (MobileBERT model)"),$Se.forEach(t),A_r=i(fe),IM=n(fe,"LI",{});var kSe=s(IM);G7e=n(kSe,"STRONG",{});var rvt=s(G7e);y_r=r(rvt,"mpnet"),rvt.forEach(t),L_r=r(kSe," \u2014 "),EQ=n(kSe,"A",{href:!0});var tvt=s(EQ);x_r=r(tvt,"TFMPNetForMaskedLM"),tvt.forEach(t),$_r=r(kSe," (MPNet model)"),kSe.forEach(t),k_r=i(fe),qM=n(fe,"LI",{});var SSe=s(qM);O7e=n(SSe,"STRONG",{});var avt=s(O7e);S_r=r(avt,"rembert"),avt.forEach(t),R_r=r(SSe," \u2014 "),CQ=n(SSe,"A",{href:!0});var nvt=s(CQ);P_r=r(nvt,"TFRemBertForMaskedLM"),nvt.forEach(t),B_r=r(SSe," (RemBERT model)"),SSe.forEach(t),I_r=i(fe),NM=n(fe,"LI",{});var RSe=s(NM);V7e=n(RSe,"STRONG",{});var svt=s(V7e);q_r=r(svt,"roberta"),svt.forEach(t),N_r=r(RSe," \u2014 "),wQ=n(RSe,"A",{href:!0});var lvt=s(wQ);j_r=r(lvt,"TFRobertaForMaskedLM"),lvt.forEach(t),D_r=r(RSe," (RoBERTa model)"),RSe.forEach(t),G_r=i(fe),jM=n(fe,"LI",{});var PSe=s(jM);X7e=n(PSe,"STRONG",{});var ivt=s(X7e);O_r=r(ivt,"roformer"),ivt.forEach(t),V_r=r(PSe," \u2014 "),AQ=n(PSe,"A",{href:!0});var dvt=s(AQ);X_r=r(dvt,"TFRoFormerForMaskedLM"),dvt.forEach(t),z_r=r(PSe," (RoFormer model)"),PSe.forEach(t),W_r=i(fe),DM=n(fe,"LI",{});var BSe=s(DM);z7e=n(BSe,"STRONG",{});var cvt=s(z7e);Q_r=r(cvt,"tapas"),cvt.forEach(t),H_r=r(BSe," \u2014 "),yQ=n(BSe,"A",{href:!0});var fvt=s(yQ);U_r=r(fvt,"TFTapasForMaskedLM"),fvt.forEach(t),J_r=r(BSe," (TAPAS model)"),BSe.forEach(t),Y_r=i(fe),GM=n(fe,"LI",{});var ISe=s(GM);W7e=n(ISe,"STRONG",{});var mvt=s(W7e);K_r=r(mvt,"xlm"),mvt.forEach(t),Z_r=r(ISe," \u2014 "),LQ=n(ISe,"A",{href:!0});var gvt=s(LQ);e2r=r(gvt,"TFXLMWithLMHeadModel"),gvt.forEach(t),o2r=r(ISe," (XLM model)"),ISe.forEach(t),r2r=i(fe),OM=n(fe,"LI",{});var qSe=s(OM);Q7e=n(qSe,"STRONG",{});var hvt=s(Q7e);t2r=r(hvt,"xlm-roberta"),hvt.forEach(t),a2r=r(qSe," \u2014 "),xQ=n(qSe,"A",{href:!0});var pvt=s(xQ);n2r=r(pvt,"TFXLMRobertaForMaskedLM"),pvt.forEach(t),s2r=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),fe.forEach(t),l2r=i(Tl),T(VM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Dqe=i(f),oc=n(f,"H2",{class:!0});var Wje=s(oc);XM=n(Wje,"A",{id:!0,class:!0,href:!0});var uvt=s(XM);H7e=n(uvt,"SPAN",{});var _vt=s(H7e);T(g8.$$.fragment,_vt),_vt.forEach(t),uvt.forEach(t),i2r=i(Wje),U7e=n(Wje,"SPAN",{});var bvt=s(U7e);d2r=r(bvt,"TFAutoModelForSeq2SeqLM"),bvt.forEach(t),Wje.forEach(t),Gqe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(h8.$$.fragment,Ml),c2r=i(Ml),rc=n(Ml,"P",{});var $Z=s(rc);f2r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=n($Z,"A",{href:!0});var vvt=s($Q);m2r=r(vvt,"from_pretrained()"),vvt.forEach(t),g2r=r($Z," class method or the "),kQ=n($Z,"A",{href:!0});var Fvt=s(kQ);h2r=r(Fvt,"from_config()"),Fvt.forEach(t),p2r=r($Z,` class
method.`),$Z.forEach(t),u2r=i(Ml),p8=n(Ml,"P",{});var Qje=s(p8);_2r=r(Qje,"This class cannot be instantiated directly using "),J7e=n(Qje,"CODE",{});var Tvt=s(J7e);b2r=r(Tvt,"__init__()"),Tvt.forEach(t),v2r=r(Qje," (throws an error)."),Qje.forEach(t),F2r=i(Ml),St=n(Ml,"DIV",{class:!0});var p6=s(St);T(u8.$$.fragment,p6),T2r=i(p6),Y7e=n(p6,"P",{});var Mvt=s(Y7e);M2r=r(Mvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Mvt.forEach(t),E2r=i(p6),tc=n(p6,"P",{});var kZ=s(tc);C2r=r(kZ,`Note:
Loading a model from its configuration file does `),K7e=n(kZ,"STRONG",{});var Evt=s(K7e);w2r=r(Evt,"not"),Evt.forEach(t),A2r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(kZ,"A",{href:!0});var Cvt=s(SQ);y2r=r(Cvt,"from_pretrained()"),Cvt.forEach(t),L2r=r(kZ," to load the model weights."),kZ.forEach(t),x2r=i(p6),T(zM.$$.fragment,p6),p6.forEach(t),$2r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(_8.$$.fragment,El),k2r=i(El),Z7e=n(El,"P",{});var wvt=s(Z7e);S2r=r(wvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wvt.forEach(t),R2r=i(El),an=n(El,"P",{});var u6=s(an);P2r=r(u6,"The model class to instantiate is selected based on the "),ebe=n(u6,"CODE",{});var Avt=s(ebe);B2r=r(Avt,"model_type"),Avt.forEach(t),I2r=r(u6,` property of the config object (either
passed as an argument or loaded from `),obe=n(u6,"CODE",{});var yvt=s(obe);q2r=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),N2r=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(u6,"CODE",{});var Lvt=s(rbe);j2r=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),D2r=r(u6,":"),u6.forEach(t),G2r=i(El),ye=n(El,"UL",{});var Be=s(ye);WM=n(Be,"LI",{});var NSe=s(WM);tbe=n(NSe,"STRONG",{});var xvt=s(tbe);O2r=r(xvt,"bart"),xvt.forEach(t),V2r=r(NSe," \u2014 "),RQ=n(NSe,"A",{href:!0});var $vt=s(RQ);X2r=r($vt,"TFBartForConditionalGeneration"),$vt.forEach(t),z2r=r(NSe," (BART model)"),NSe.forEach(t),W2r=i(Be),QM=n(Be,"LI",{});var jSe=s(QM);abe=n(jSe,"STRONG",{});var kvt=s(abe);Q2r=r(kvt,"blenderbot"),kvt.forEach(t),H2r=r(jSe," \u2014 "),PQ=n(jSe,"A",{href:!0});var Svt=s(PQ);U2r=r(Svt,"TFBlenderbotForConditionalGeneration"),Svt.forEach(t),J2r=r(jSe," (Blenderbot model)"),jSe.forEach(t),Y2r=i(Be),HM=n(Be,"LI",{});var DSe=s(HM);nbe=n(DSe,"STRONG",{});var Rvt=s(nbe);K2r=r(Rvt,"blenderbot-small"),Rvt.forEach(t),Z2r=r(DSe," \u2014 "),BQ=n(DSe,"A",{href:!0});var Pvt=s(BQ);e1r=r(Pvt,"TFBlenderbotSmallForConditionalGeneration"),Pvt.forEach(t),o1r=r(DSe," (BlenderbotSmall model)"),DSe.forEach(t),r1r=i(Be),UM=n(Be,"LI",{});var GSe=s(UM);sbe=n(GSe,"STRONG",{});var Bvt=s(sbe);t1r=r(Bvt,"encoder-decoder"),Bvt.forEach(t),a1r=r(GSe," \u2014 "),IQ=n(GSe,"A",{href:!0});var Ivt=s(IQ);n1r=r(Ivt,"TFEncoderDecoderModel"),Ivt.forEach(t),s1r=r(GSe," (Encoder decoder model)"),GSe.forEach(t),l1r=i(Be),JM=n(Be,"LI",{});var OSe=s(JM);lbe=n(OSe,"STRONG",{});var qvt=s(lbe);i1r=r(qvt,"led"),qvt.forEach(t),d1r=r(OSe," \u2014 "),qQ=n(OSe,"A",{href:!0});var Nvt=s(qQ);c1r=r(Nvt,"TFLEDForConditionalGeneration"),Nvt.forEach(t),f1r=r(OSe," (LED model)"),OSe.forEach(t),m1r=i(Be),YM=n(Be,"LI",{});var VSe=s(YM);ibe=n(VSe,"STRONG",{});var jvt=s(ibe);g1r=r(jvt,"marian"),jvt.forEach(t),h1r=r(VSe," \u2014 "),NQ=n(VSe,"A",{href:!0});var Dvt=s(NQ);p1r=r(Dvt,"TFMarianMTModel"),Dvt.forEach(t),u1r=r(VSe," (Marian model)"),VSe.forEach(t),_1r=i(Be),KM=n(Be,"LI",{});var XSe=s(KM);dbe=n(XSe,"STRONG",{});var Gvt=s(dbe);b1r=r(Gvt,"mbart"),Gvt.forEach(t),v1r=r(XSe," \u2014 "),jQ=n(XSe,"A",{href:!0});var Ovt=s(jQ);F1r=r(Ovt,"TFMBartForConditionalGeneration"),Ovt.forEach(t),T1r=r(XSe," (mBART model)"),XSe.forEach(t),M1r=i(Be),ZM=n(Be,"LI",{});var zSe=s(ZM);cbe=n(zSe,"STRONG",{});var Vvt=s(cbe);E1r=r(Vvt,"mt5"),Vvt.forEach(t),C1r=r(zSe," \u2014 "),DQ=n(zSe,"A",{href:!0});var Xvt=s(DQ);w1r=r(Xvt,"TFMT5ForConditionalGeneration"),Xvt.forEach(t),A1r=r(zSe," (mT5 model)"),zSe.forEach(t),y1r=i(Be),e4=n(Be,"LI",{});var WSe=s(e4);fbe=n(WSe,"STRONG",{});var zvt=s(fbe);L1r=r(zvt,"pegasus"),zvt.forEach(t),x1r=r(WSe," \u2014 "),GQ=n(WSe,"A",{href:!0});var Wvt=s(GQ);$1r=r(Wvt,"TFPegasusForConditionalGeneration"),Wvt.forEach(t),k1r=r(WSe," (Pegasus model)"),WSe.forEach(t),S1r=i(Be),o4=n(Be,"LI",{});var QSe=s(o4);mbe=n(QSe,"STRONG",{});var Qvt=s(mbe);R1r=r(Qvt,"t5"),Qvt.forEach(t),P1r=r(QSe," \u2014 "),OQ=n(QSe,"A",{href:!0});var Hvt=s(OQ);B1r=r(Hvt,"TFT5ForConditionalGeneration"),Hvt.forEach(t),I1r=r(QSe," (T5 model)"),QSe.forEach(t),Be.forEach(t),q1r=i(El),T(r4.$$.fragment,El),El.forEach(t),Ml.forEach(t),Oqe=i(f),ac=n(f,"H2",{class:!0});var Hje=s(ac);t4=n(Hje,"A",{id:!0,class:!0,href:!0});var Uvt=s(t4);gbe=n(Uvt,"SPAN",{});var Jvt=s(gbe);T(b8.$$.fragment,Jvt),Jvt.forEach(t),Uvt.forEach(t),N1r=i(Hje),hbe=n(Hje,"SPAN",{});var Yvt=s(hbe);j1r=r(Yvt,"TFAutoModelForSequenceClassification"),Yvt.forEach(t),Hje.forEach(t),Vqe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(v8.$$.fragment,Cl),D1r=i(Cl),nc=n(Cl,"P",{});var SZ=s(nc);G1r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VQ=n(SZ,"A",{href:!0});var Kvt=s(VQ);O1r=r(Kvt,"from_pretrained()"),Kvt.forEach(t),V1r=r(SZ," class method or the "),XQ=n(SZ,"A",{href:!0});var Zvt=s(XQ);X1r=r(Zvt,"from_config()"),Zvt.forEach(t),z1r=r(SZ,` class
method.`),SZ.forEach(t),W1r=i(Cl),F8=n(Cl,"P",{});var Uje=s(F8);Q1r=r(Uje,"This class cannot be instantiated directly using "),pbe=n(Uje,"CODE",{});var eFt=s(pbe);H1r=r(eFt,"__init__()"),eFt.forEach(t),U1r=r(Uje," (throws an error)."),Uje.forEach(t),J1r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var _6=s(Rt);T(T8.$$.fragment,_6),Y1r=i(_6),ube=n(_6,"P",{});var oFt=s(ube);K1r=r(oFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oFt.forEach(t),Z1r=i(_6),sc=n(_6,"P",{});var RZ=s(sc);e7r=r(RZ,`Note:
Loading a model from its configuration file does `),_be=n(RZ,"STRONG",{});var rFt=s(_be);o7r=r(rFt,"not"),rFt.forEach(t),r7r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(RZ,"A",{href:!0});var tFt=s(zQ);t7r=r(tFt,"from_pretrained()"),tFt.forEach(t),a7r=r(RZ," to load the model weights."),RZ.forEach(t),n7r=i(_6),T(a4.$$.fragment,_6),_6.forEach(t),s7r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(M8.$$.fragment,wl),l7r=i(wl),bbe=n(wl,"P",{});var aFt=s(bbe);i7r=r(aFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aFt.forEach(t),d7r=i(wl),nn=n(wl,"P",{});var b6=s(nn);c7r=r(b6,"The model class to instantiate is selected based on the "),vbe=n(b6,"CODE",{});var nFt=s(vbe);f7r=r(nFt,"model_type"),nFt.forEach(t),m7r=r(b6,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(b6,"CODE",{});var sFt=s(Fbe);g7r=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),h7r=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(b6,"CODE",{});var lFt=s(Tbe);p7r=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),u7r=r(b6,":"),b6.forEach(t),_7r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);n4=n(ae,"LI",{});var HSe=s(n4);Mbe=n(HSe,"STRONG",{});var iFt=s(Mbe);b7r=r(iFt,"albert"),iFt.forEach(t),v7r=r(HSe," \u2014 "),WQ=n(HSe,"A",{href:!0});var dFt=s(WQ);F7r=r(dFt,"TFAlbertForSequenceClassification"),dFt.forEach(t),T7r=r(HSe," (ALBERT model)"),HSe.forEach(t),M7r=i(ae),s4=n(ae,"LI",{});var USe=s(s4);Ebe=n(USe,"STRONG",{});var cFt=s(Ebe);E7r=r(cFt,"bert"),cFt.forEach(t),C7r=r(USe," \u2014 "),QQ=n(USe,"A",{href:!0});var fFt=s(QQ);w7r=r(fFt,"TFBertForSequenceClassification"),fFt.forEach(t),A7r=r(USe," (BERT model)"),USe.forEach(t),y7r=i(ae),l4=n(ae,"LI",{});var JSe=s(l4);Cbe=n(JSe,"STRONG",{});var mFt=s(Cbe);L7r=r(mFt,"camembert"),mFt.forEach(t),x7r=r(JSe," \u2014 "),HQ=n(JSe,"A",{href:!0});var gFt=s(HQ);$7r=r(gFt,"TFCamembertForSequenceClassification"),gFt.forEach(t),k7r=r(JSe," (CamemBERT model)"),JSe.forEach(t),S7r=i(ae),i4=n(ae,"LI",{});var YSe=s(i4);wbe=n(YSe,"STRONG",{});var hFt=s(wbe);R7r=r(hFt,"convbert"),hFt.forEach(t),P7r=r(YSe," \u2014 "),UQ=n(YSe,"A",{href:!0});var pFt=s(UQ);B7r=r(pFt,"TFConvBertForSequenceClassification"),pFt.forEach(t),I7r=r(YSe," (ConvBERT model)"),YSe.forEach(t),q7r=i(ae),d4=n(ae,"LI",{});var KSe=s(d4);Abe=n(KSe,"STRONG",{});var uFt=s(Abe);N7r=r(uFt,"ctrl"),uFt.forEach(t),j7r=r(KSe," \u2014 "),JQ=n(KSe,"A",{href:!0});var _Ft=s(JQ);D7r=r(_Ft,"TFCTRLForSequenceClassification"),_Ft.forEach(t),G7r=r(KSe," (CTRL model)"),KSe.forEach(t),O7r=i(ae),c4=n(ae,"LI",{});var ZSe=s(c4);ybe=n(ZSe,"STRONG",{});var bFt=s(ybe);V7r=r(bFt,"deberta"),bFt.forEach(t),X7r=r(ZSe," \u2014 "),YQ=n(ZSe,"A",{href:!0});var vFt=s(YQ);z7r=r(vFt,"TFDebertaForSequenceClassification"),vFt.forEach(t),W7r=r(ZSe," (DeBERTa model)"),ZSe.forEach(t),Q7r=i(ae),f4=n(ae,"LI",{});var eRe=s(f4);Lbe=n(eRe,"STRONG",{});var FFt=s(Lbe);H7r=r(FFt,"deberta-v2"),FFt.forEach(t),U7r=r(eRe," \u2014 "),KQ=n(eRe,"A",{href:!0});var TFt=s(KQ);J7r=r(TFt,"TFDebertaV2ForSequenceClassification"),TFt.forEach(t),Y7r=r(eRe," (DeBERTa-v2 model)"),eRe.forEach(t),K7r=i(ae),m4=n(ae,"LI",{});var oRe=s(m4);xbe=n(oRe,"STRONG",{});var MFt=s(xbe);Z7r=r(MFt,"distilbert"),MFt.forEach(t),ebr=r(oRe," \u2014 "),ZQ=n(oRe,"A",{href:!0});var EFt=s(ZQ);obr=r(EFt,"TFDistilBertForSequenceClassification"),EFt.forEach(t),rbr=r(oRe," (DistilBERT model)"),oRe.forEach(t),tbr=i(ae),g4=n(ae,"LI",{});var rRe=s(g4);$be=n(rRe,"STRONG",{});var CFt=s($be);abr=r(CFt,"electra"),CFt.forEach(t),nbr=r(rRe," \u2014 "),eH=n(rRe,"A",{href:!0});var wFt=s(eH);sbr=r(wFt,"TFElectraForSequenceClassification"),wFt.forEach(t),lbr=r(rRe," (ELECTRA model)"),rRe.forEach(t),ibr=i(ae),h4=n(ae,"LI",{});var tRe=s(h4);kbe=n(tRe,"STRONG",{});var AFt=s(kbe);dbr=r(AFt,"flaubert"),AFt.forEach(t),cbr=r(tRe," \u2014 "),oH=n(tRe,"A",{href:!0});var yFt=s(oH);fbr=r(yFt,"TFFlaubertForSequenceClassification"),yFt.forEach(t),mbr=r(tRe," (FlauBERT model)"),tRe.forEach(t),gbr=i(ae),p4=n(ae,"LI",{});var aRe=s(p4);Sbe=n(aRe,"STRONG",{});var LFt=s(Sbe);hbr=r(LFt,"funnel"),LFt.forEach(t),pbr=r(aRe," \u2014 "),rH=n(aRe,"A",{href:!0});var xFt=s(rH);ubr=r(xFt,"TFFunnelForSequenceClassification"),xFt.forEach(t),_br=r(aRe," (Funnel Transformer model)"),aRe.forEach(t),bbr=i(ae),u4=n(ae,"LI",{});var nRe=s(u4);Rbe=n(nRe,"STRONG",{});var $Ft=s(Rbe);vbr=r($Ft,"gpt2"),$Ft.forEach(t),Fbr=r(nRe," \u2014 "),tH=n(nRe,"A",{href:!0});var kFt=s(tH);Tbr=r(kFt,"TFGPT2ForSequenceClassification"),kFt.forEach(t),Mbr=r(nRe," (OpenAI GPT-2 model)"),nRe.forEach(t),Ebr=i(ae),_4=n(ae,"LI",{});var sRe=s(_4);Pbe=n(sRe,"STRONG",{});var SFt=s(Pbe);Cbr=r(SFt,"gptj"),SFt.forEach(t),wbr=r(sRe," \u2014 "),aH=n(sRe,"A",{href:!0});var RFt=s(aH);Abr=r(RFt,"TFGPTJForSequenceClassification"),RFt.forEach(t),ybr=r(sRe," (GPT-J model)"),sRe.forEach(t),Lbr=i(ae),b4=n(ae,"LI",{});var lRe=s(b4);Bbe=n(lRe,"STRONG",{});var PFt=s(Bbe);xbr=r(PFt,"layoutlm"),PFt.forEach(t),$br=r(lRe," \u2014 "),nH=n(lRe,"A",{href:!0});var BFt=s(nH);kbr=r(BFt,"TFLayoutLMForSequenceClassification"),BFt.forEach(t),Sbr=r(lRe," (LayoutLM model)"),lRe.forEach(t),Rbr=i(ae),v4=n(ae,"LI",{});var iRe=s(v4);Ibe=n(iRe,"STRONG",{});var IFt=s(Ibe);Pbr=r(IFt,"longformer"),IFt.forEach(t),Bbr=r(iRe," \u2014 "),sH=n(iRe,"A",{href:!0});var qFt=s(sH);Ibr=r(qFt,"TFLongformerForSequenceClassification"),qFt.forEach(t),qbr=r(iRe," (Longformer model)"),iRe.forEach(t),Nbr=i(ae),F4=n(ae,"LI",{});var dRe=s(F4);qbe=n(dRe,"STRONG",{});var NFt=s(qbe);jbr=r(NFt,"mobilebert"),NFt.forEach(t),Dbr=r(dRe," \u2014 "),lH=n(dRe,"A",{href:!0});var jFt=s(lH);Gbr=r(jFt,"TFMobileBertForSequenceClassification"),jFt.forEach(t),Obr=r(dRe," (MobileBERT model)"),dRe.forEach(t),Vbr=i(ae),T4=n(ae,"LI",{});var cRe=s(T4);Nbe=n(cRe,"STRONG",{});var DFt=s(Nbe);Xbr=r(DFt,"mpnet"),DFt.forEach(t),zbr=r(cRe," \u2014 "),iH=n(cRe,"A",{href:!0});var GFt=s(iH);Wbr=r(GFt,"TFMPNetForSequenceClassification"),GFt.forEach(t),Qbr=r(cRe," (MPNet model)"),cRe.forEach(t),Hbr=i(ae),M4=n(ae,"LI",{});var fRe=s(M4);jbe=n(fRe,"STRONG",{});var OFt=s(jbe);Ubr=r(OFt,"openai-gpt"),OFt.forEach(t),Jbr=r(fRe," \u2014 "),dH=n(fRe,"A",{href:!0});var VFt=s(dH);Ybr=r(VFt,"TFOpenAIGPTForSequenceClassification"),VFt.forEach(t),Kbr=r(fRe," (OpenAI GPT model)"),fRe.forEach(t),Zbr=i(ae),E4=n(ae,"LI",{});var mRe=s(E4);Dbe=n(mRe,"STRONG",{});var XFt=s(Dbe);e5r=r(XFt,"rembert"),XFt.forEach(t),o5r=r(mRe," \u2014 "),cH=n(mRe,"A",{href:!0});var zFt=s(cH);r5r=r(zFt,"TFRemBertForSequenceClassification"),zFt.forEach(t),t5r=r(mRe," (RemBERT model)"),mRe.forEach(t),a5r=i(ae),C4=n(ae,"LI",{});var gRe=s(C4);Gbe=n(gRe,"STRONG",{});var WFt=s(Gbe);n5r=r(WFt,"roberta"),WFt.forEach(t),s5r=r(gRe," \u2014 "),fH=n(gRe,"A",{href:!0});var QFt=s(fH);l5r=r(QFt,"TFRobertaForSequenceClassification"),QFt.forEach(t),i5r=r(gRe," (RoBERTa model)"),gRe.forEach(t),d5r=i(ae),w4=n(ae,"LI",{});var hRe=s(w4);Obe=n(hRe,"STRONG",{});var HFt=s(Obe);c5r=r(HFt,"roformer"),HFt.forEach(t),f5r=r(hRe," \u2014 "),mH=n(hRe,"A",{href:!0});var UFt=s(mH);m5r=r(UFt,"TFRoFormerForSequenceClassification"),UFt.forEach(t),g5r=r(hRe," (RoFormer model)"),hRe.forEach(t),h5r=i(ae),A4=n(ae,"LI",{});var pRe=s(A4);Vbe=n(pRe,"STRONG",{});var JFt=s(Vbe);p5r=r(JFt,"tapas"),JFt.forEach(t),u5r=r(pRe," \u2014 "),gH=n(pRe,"A",{href:!0});var YFt=s(gH);_5r=r(YFt,"TFTapasForSequenceClassification"),YFt.forEach(t),b5r=r(pRe," (TAPAS model)"),pRe.forEach(t),v5r=i(ae),y4=n(ae,"LI",{});var uRe=s(y4);Xbe=n(uRe,"STRONG",{});var KFt=s(Xbe);F5r=r(KFt,"transfo-xl"),KFt.forEach(t),T5r=r(uRe," \u2014 "),hH=n(uRe,"A",{href:!0});var ZFt=s(hH);M5r=r(ZFt,"TFTransfoXLForSequenceClassification"),ZFt.forEach(t),E5r=r(uRe," (Transformer-XL model)"),uRe.forEach(t),C5r=i(ae),L4=n(ae,"LI",{});var _Re=s(L4);zbe=n(_Re,"STRONG",{});var eTt=s(zbe);w5r=r(eTt,"xlm"),eTt.forEach(t),A5r=r(_Re," \u2014 "),pH=n(_Re,"A",{href:!0});var oTt=s(pH);y5r=r(oTt,"TFXLMForSequenceClassification"),oTt.forEach(t),L5r=r(_Re," (XLM model)"),_Re.forEach(t),x5r=i(ae),x4=n(ae,"LI",{});var bRe=s(x4);Wbe=n(bRe,"STRONG",{});var rTt=s(Wbe);$5r=r(rTt,"xlm-roberta"),rTt.forEach(t),k5r=r(bRe," \u2014 "),uH=n(bRe,"A",{href:!0});var tTt=s(uH);S5r=r(tTt,"TFXLMRobertaForSequenceClassification"),tTt.forEach(t),R5r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),P5r=i(ae),$4=n(ae,"LI",{});var vRe=s($4);Qbe=n(vRe,"STRONG",{});var aTt=s(Qbe);B5r=r(aTt,"xlnet"),aTt.forEach(t),I5r=r(vRe," \u2014 "),_H=n(vRe,"A",{href:!0});var nTt=s(_H);q5r=r(nTt,"TFXLNetForSequenceClassification"),nTt.forEach(t),N5r=r(vRe," (XLNet model)"),vRe.forEach(t),ae.forEach(t),j5r=i(wl),T(k4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Xqe=i(f),lc=n(f,"H2",{class:!0});var Jje=s(lc);S4=n(Jje,"A",{id:!0,class:!0,href:!0});var sTt=s(S4);Hbe=n(sTt,"SPAN",{});var lTt=s(Hbe);T(E8.$$.fragment,lTt),lTt.forEach(t),sTt.forEach(t),D5r=i(Jje),Ube=n(Jje,"SPAN",{});var iTt=s(Ube);G5r=r(iTt,"TFAutoModelForMultipleChoice"),iTt.forEach(t),Jje.forEach(t),zqe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(C8.$$.fragment,Al),O5r=i(Al),ic=n(Al,"P",{});var PZ=s(ic);V5r=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bH=n(PZ,"A",{href:!0});var dTt=s(bH);X5r=r(dTt,"from_pretrained()"),dTt.forEach(t),z5r=r(PZ," class method or the "),vH=n(PZ,"A",{href:!0});var cTt=s(vH);W5r=r(cTt,"from_config()"),cTt.forEach(t),Q5r=r(PZ,` class
method.`),PZ.forEach(t),H5r=i(Al),w8=n(Al,"P",{});var Yje=s(w8);U5r=r(Yje,"This class cannot be instantiated directly using "),Jbe=n(Yje,"CODE",{});var fTt=s(Jbe);J5r=r(fTt,"__init__()"),fTt.forEach(t),Y5r=r(Yje," (throws an error)."),Yje.forEach(t),K5r=i(Al),Pt=n(Al,"DIV",{class:!0});var v6=s(Pt);T(A8.$$.fragment,v6),Z5r=i(v6),Ybe=n(v6,"P",{});var mTt=s(Ybe);evr=r(mTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mTt.forEach(t),ovr=i(v6),dc=n(v6,"P",{});var BZ=s(dc);rvr=r(BZ,`Note:
Loading a model from its configuration file does `),Kbe=n(BZ,"STRONG",{});var gTt=s(Kbe);tvr=r(gTt,"not"),gTt.forEach(t),avr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(BZ,"A",{href:!0});var hTt=s(FH);nvr=r(hTt,"from_pretrained()"),hTt.forEach(t),svr=r(BZ," to load the model weights."),BZ.forEach(t),lvr=i(v6),T(R4.$$.fragment,v6),v6.forEach(t),ivr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(y8.$$.fragment,yl),dvr=i(yl),Zbe=n(yl,"P",{});var pTt=s(Zbe);cvr=r(pTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pTt.forEach(t),fvr=i(yl),sn=n(yl,"P",{});var F6=s(sn);mvr=r(F6,"The model class to instantiate is selected based on the "),e5e=n(F6,"CODE",{});var uTt=s(e5e);gvr=r(uTt,"model_type"),uTt.forEach(t),hvr=r(F6,` property of the config object (either
passed as an argument or loaded from `),o5e=n(F6,"CODE",{});var _Tt=s(o5e);pvr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),uvr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(F6,"CODE",{});var bTt=s(r5e);_vr=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),bvr=r(F6,":"),F6.forEach(t),vvr=i(yl),he=n(yl,"UL",{});var _e=s(he);P4=n(_e,"LI",{});var FRe=s(P4);t5e=n(FRe,"STRONG",{});var vTt=s(t5e);Fvr=r(vTt,"albert"),vTt.forEach(t),Tvr=r(FRe," \u2014 "),TH=n(FRe,"A",{href:!0});var FTt=s(TH);Mvr=r(FTt,"TFAlbertForMultipleChoice"),FTt.forEach(t),Evr=r(FRe," (ALBERT model)"),FRe.forEach(t),Cvr=i(_e),B4=n(_e,"LI",{});var TRe=s(B4);a5e=n(TRe,"STRONG",{});var TTt=s(a5e);wvr=r(TTt,"bert"),TTt.forEach(t),Avr=r(TRe," \u2014 "),MH=n(TRe,"A",{href:!0});var MTt=s(MH);yvr=r(MTt,"TFBertForMultipleChoice"),MTt.forEach(t),Lvr=r(TRe," (BERT model)"),TRe.forEach(t),xvr=i(_e),I4=n(_e,"LI",{});var MRe=s(I4);n5e=n(MRe,"STRONG",{});var ETt=s(n5e);$vr=r(ETt,"camembert"),ETt.forEach(t),kvr=r(MRe," \u2014 "),EH=n(MRe,"A",{href:!0});var CTt=s(EH);Svr=r(CTt,"TFCamembertForMultipleChoice"),CTt.forEach(t),Rvr=r(MRe," (CamemBERT model)"),MRe.forEach(t),Pvr=i(_e),q4=n(_e,"LI",{});var ERe=s(q4);s5e=n(ERe,"STRONG",{});var wTt=s(s5e);Bvr=r(wTt,"convbert"),wTt.forEach(t),Ivr=r(ERe," \u2014 "),CH=n(ERe,"A",{href:!0});var ATt=s(CH);qvr=r(ATt,"TFConvBertForMultipleChoice"),ATt.forEach(t),Nvr=r(ERe," (ConvBERT model)"),ERe.forEach(t),jvr=i(_e),N4=n(_e,"LI",{});var CRe=s(N4);l5e=n(CRe,"STRONG",{});var yTt=s(l5e);Dvr=r(yTt,"distilbert"),yTt.forEach(t),Gvr=r(CRe," \u2014 "),wH=n(CRe,"A",{href:!0});var LTt=s(wH);Ovr=r(LTt,"TFDistilBertForMultipleChoice"),LTt.forEach(t),Vvr=r(CRe," (DistilBERT model)"),CRe.forEach(t),Xvr=i(_e),j4=n(_e,"LI",{});var wRe=s(j4);i5e=n(wRe,"STRONG",{});var xTt=s(i5e);zvr=r(xTt,"electra"),xTt.forEach(t),Wvr=r(wRe," \u2014 "),AH=n(wRe,"A",{href:!0});var $Tt=s(AH);Qvr=r($Tt,"TFElectraForMultipleChoice"),$Tt.forEach(t),Hvr=r(wRe," (ELECTRA model)"),wRe.forEach(t),Uvr=i(_e),D4=n(_e,"LI",{});var ARe=s(D4);d5e=n(ARe,"STRONG",{});var kTt=s(d5e);Jvr=r(kTt,"flaubert"),kTt.forEach(t),Yvr=r(ARe," \u2014 "),yH=n(ARe,"A",{href:!0});var STt=s(yH);Kvr=r(STt,"TFFlaubertForMultipleChoice"),STt.forEach(t),Zvr=r(ARe," (FlauBERT model)"),ARe.forEach(t),eFr=i(_e),G4=n(_e,"LI",{});var yRe=s(G4);c5e=n(yRe,"STRONG",{});var RTt=s(c5e);oFr=r(RTt,"funnel"),RTt.forEach(t),rFr=r(yRe," \u2014 "),LH=n(yRe,"A",{href:!0});var PTt=s(LH);tFr=r(PTt,"TFFunnelForMultipleChoice"),PTt.forEach(t),aFr=r(yRe," (Funnel Transformer model)"),yRe.forEach(t),nFr=i(_e),O4=n(_e,"LI",{});var LRe=s(O4);f5e=n(LRe,"STRONG",{});var BTt=s(f5e);sFr=r(BTt,"longformer"),BTt.forEach(t),lFr=r(LRe," \u2014 "),xH=n(LRe,"A",{href:!0});var ITt=s(xH);iFr=r(ITt,"TFLongformerForMultipleChoice"),ITt.forEach(t),dFr=r(LRe," (Longformer model)"),LRe.forEach(t),cFr=i(_e),V4=n(_e,"LI",{});var xRe=s(V4);m5e=n(xRe,"STRONG",{});var qTt=s(m5e);fFr=r(qTt,"mobilebert"),qTt.forEach(t),mFr=r(xRe," \u2014 "),$H=n(xRe,"A",{href:!0});var NTt=s($H);gFr=r(NTt,"TFMobileBertForMultipleChoice"),NTt.forEach(t),hFr=r(xRe," (MobileBERT model)"),xRe.forEach(t),pFr=i(_e),X4=n(_e,"LI",{});var $Re=s(X4);g5e=n($Re,"STRONG",{});var jTt=s(g5e);uFr=r(jTt,"mpnet"),jTt.forEach(t),_Fr=r($Re," \u2014 "),kH=n($Re,"A",{href:!0});var DTt=s(kH);bFr=r(DTt,"TFMPNetForMultipleChoice"),DTt.forEach(t),vFr=r($Re," (MPNet model)"),$Re.forEach(t),FFr=i(_e),z4=n(_e,"LI",{});var kRe=s(z4);h5e=n(kRe,"STRONG",{});var GTt=s(h5e);TFr=r(GTt,"rembert"),GTt.forEach(t),MFr=r(kRe," \u2014 "),SH=n(kRe,"A",{href:!0});var OTt=s(SH);EFr=r(OTt,"TFRemBertForMultipleChoice"),OTt.forEach(t),CFr=r(kRe," (RemBERT model)"),kRe.forEach(t),wFr=i(_e),W4=n(_e,"LI",{});var SRe=s(W4);p5e=n(SRe,"STRONG",{});var VTt=s(p5e);AFr=r(VTt,"roberta"),VTt.forEach(t),yFr=r(SRe," \u2014 "),RH=n(SRe,"A",{href:!0});var XTt=s(RH);LFr=r(XTt,"TFRobertaForMultipleChoice"),XTt.forEach(t),xFr=r(SRe," (RoBERTa model)"),SRe.forEach(t),$Fr=i(_e),Q4=n(_e,"LI",{});var RRe=s(Q4);u5e=n(RRe,"STRONG",{});var zTt=s(u5e);kFr=r(zTt,"roformer"),zTt.forEach(t),SFr=r(RRe," \u2014 "),PH=n(RRe,"A",{href:!0});var WTt=s(PH);RFr=r(WTt,"TFRoFormerForMultipleChoice"),WTt.forEach(t),PFr=r(RRe," (RoFormer model)"),RRe.forEach(t),BFr=i(_e),H4=n(_e,"LI",{});var PRe=s(H4);_5e=n(PRe,"STRONG",{});var QTt=s(_5e);IFr=r(QTt,"xlm"),QTt.forEach(t),qFr=r(PRe," \u2014 "),BH=n(PRe,"A",{href:!0});var HTt=s(BH);NFr=r(HTt,"TFXLMForMultipleChoice"),HTt.forEach(t),jFr=r(PRe," (XLM model)"),PRe.forEach(t),DFr=i(_e),U4=n(_e,"LI",{});var BRe=s(U4);b5e=n(BRe,"STRONG",{});var UTt=s(b5e);GFr=r(UTt,"xlm-roberta"),UTt.forEach(t),OFr=r(BRe," \u2014 "),IH=n(BRe,"A",{href:!0});var JTt=s(IH);VFr=r(JTt,"TFXLMRobertaForMultipleChoice"),JTt.forEach(t),XFr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),zFr=i(_e),J4=n(_e,"LI",{});var IRe=s(J4);v5e=n(IRe,"STRONG",{});var YTt=s(v5e);WFr=r(YTt,"xlnet"),YTt.forEach(t),QFr=r(IRe," \u2014 "),qH=n(IRe,"A",{href:!0});var KTt=s(qH);HFr=r(KTt,"TFXLNetForMultipleChoice"),KTt.forEach(t),UFr=r(IRe," (XLNet model)"),IRe.forEach(t),_e.forEach(t),JFr=i(yl),T(Y4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Wqe=i(f),cc=n(f,"H2",{class:!0});var Kje=s(cc);K4=n(Kje,"A",{id:!0,class:!0,href:!0});var ZTt=s(K4);F5e=n(ZTt,"SPAN",{});var eMt=s(F5e);T(L8.$$.fragment,eMt),eMt.forEach(t),ZTt.forEach(t),YFr=i(Kje),T5e=n(Kje,"SPAN",{});var oMt=s(T5e);KFr=r(oMt,"TFAutoModelForNextSentencePrediction"),oMt.forEach(t),Kje.forEach(t),Qqe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(x8.$$.fragment,Ll),ZFr=i(Ll),fc=n(Ll,"P",{});var IZ=s(fc);eTr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NH=n(IZ,"A",{href:!0});var rMt=s(NH);oTr=r(rMt,"from_pretrained()"),rMt.forEach(t),rTr=r(IZ," class method or the "),jH=n(IZ,"A",{href:!0});var tMt=s(jH);tTr=r(tMt,"from_config()"),tMt.forEach(t),aTr=r(IZ,` class
method.`),IZ.forEach(t),nTr=i(Ll),$8=n(Ll,"P",{});var Zje=s($8);sTr=r(Zje,"This class cannot be instantiated directly using "),M5e=n(Zje,"CODE",{});var aMt=s(M5e);lTr=r(aMt,"__init__()"),aMt.forEach(t),iTr=r(Zje," (throws an error)."),Zje.forEach(t),dTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var T6=s(Bt);T(k8.$$.fragment,T6),cTr=i(T6),E5e=n(T6,"P",{});var nMt=s(E5e);fTr=r(nMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nMt.forEach(t),mTr=i(T6),mc=n(T6,"P",{});var qZ=s(mc);gTr=r(qZ,`Note:
Loading a model from its configuration file does `),C5e=n(qZ,"STRONG",{});var sMt=s(C5e);hTr=r(sMt,"not"),sMt.forEach(t),pTr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(qZ,"A",{href:!0});var lMt=s(DH);uTr=r(lMt,"from_pretrained()"),lMt.forEach(t),_Tr=r(qZ," to load the model weights."),qZ.forEach(t),bTr=i(T6),T(Z4.$$.fragment,T6),T6.forEach(t),vTr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(S8.$$.fragment,xl),FTr=i(xl),w5e=n(xl,"P",{});var iMt=s(w5e);TTr=r(iMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iMt.forEach(t),MTr=i(xl),ln=n(xl,"P",{});var M6=s(ln);ETr=r(M6,"The model class to instantiate is selected based on the "),A5e=n(M6,"CODE",{});var dMt=s(A5e);CTr=r(dMt,"model_type"),dMt.forEach(t),wTr=r(M6,` property of the config object (either
passed as an argument or loaded from `),y5e=n(M6,"CODE",{});var cMt=s(y5e);ATr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),yTr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(M6,"CODE",{});var fMt=s(L5e);LTr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),xTr=r(M6,":"),M6.forEach(t),$Tr=i(xl),R8=n(xl,"UL",{});var eDe=s(R8);eE=n(eDe,"LI",{});var qRe=s(eE);x5e=n(qRe,"STRONG",{});var mMt=s(x5e);kTr=r(mMt,"bert"),mMt.forEach(t),STr=r(qRe," \u2014 "),GH=n(qRe,"A",{href:!0});var gMt=s(GH);RTr=r(gMt,"TFBertForNextSentencePrediction"),gMt.forEach(t),PTr=r(qRe," (BERT model)"),qRe.forEach(t),BTr=i(eDe),oE=n(eDe,"LI",{});var NRe=s(oE);$5e=n(NRe,"STRONG",{});var hMt=s($5e);ITr=r(hMt,"mobilebert"),hMt.forEach(t),qTr=r(NRe," \u2014 "),OH=n(NRe,"A",{href:!0});var pMt=s(OH);NTr=r(pMt,"TFMobileBertForNextSentencePrediction"),pMt.forEach(t),jTr=r(NRe," (MobileBERT model)"),NRe.forEach(t),eDe.forEach(t),DTr=i(xl),T(rE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Hqe=i(f),gc=n(f,"H2",{class:!0});var oDe=s(gc);tE=n(oDe,"A",{id:!0,class:!0,href:!0});var uMt=s(tE);k5e=n(uMt,"SPAN",{});var _Mt=s(k5e);T(P8.$$.fragment,_Mt),_Mt.forEach(t),uMt.forEach(t),GTr=i(oDe),S5e=n(oDe,"SPAN",{});var bMt=s(S5e);OTr=r(bMt,"TFAutoModelForTableQuestionAnswering"),bMt.forEach(t),oDe.forEach(t),Uqe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(B8.$$.fragment,$l),VTr=i($l),hc=n($l,"P",{});var NZ=s(hc);XTr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VH=n(NZ,"A",{href:!0});var vMt=s(VH);zTr=r(vMt,"from_pretrained()"),vMt.forEach(t),WTr=r(NZ," class method or the "),XH=n(NZ,"A",{href:!0});var FMt=s(XH);QTr=r(FMt,"from_config()"),FMt.forEach(t),HTr=r(NZ,` class
method.`),NZ.forEach(t),UTr=i($l),I8=n($l,"P",{});var rDe=s(I8);JTr=r(rDe,"This class cannot be instantiated directly using "),R5e=n(rDe,"CODE",{});var TMt=s(R5e);YTr=r(TMt,"__init__()"),TMt.forEach(t),KTr=r(rDe," (throws an error)."),rDe.forEach(t),ZTr=i($l),It=n($l,"DIV",{class:!0});var E6=s(It);T(q8.$$.fragment,E6),eMr=i(E6),P5e=n(E6,"P",{});var MMt=s(P5e);oMr=r(MMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MMt.forEach(t),rMr=i(E6),pc=n(E6,"P",{});var jZ=s(pc);tMr=r(jZ,`Note:
Loading a model from its configuration file does `),B5e=n(jZ,"STRONG",{});var EMt=s(B5e);aMr=r(EMt,"not"),EMt.forEach(t),nMr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(jZ,"A",{href:!0});var CMt=s(zH);sMr=r(CMt,"from_pretrained()"),CMt.forEach(t),lMr=r(jZ," to load the model weights."),jZ.forEach(t),iMr=i(E6),T(aE.$$.fragment,E6),E6.forEach(t),dMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(N8.$$.fragment,kl),cMr=i(kl),I5e=n(kl,"P",{});var wMt=s(I5e);fMr=r(wMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wMt.forEach(t),mMr=i(kl),dn=n(kl,"P",{});var C6=s(dn);gMr=r(C6,"The model class to instantiate is selected based on the "),q5e=n(C6,"CODE",{});var AMt=s(q5e);hMr=r(AMt,"model_type"),AMt.forEach(t),pMr=r(C6,` property of the config object (either
passed as an argument or loaded from `),N5e=n(C6,"CODE",{});var yMt=s(N5e);uMr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),_Mr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(C6,"CODE",{});var LMt=s(j5e);bMr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),vMr=r(C6,":"),C6.forEach(t),FMr=i(kl),D5e=n(kl,"UL",{});var xMt=s(D5e);nE=n(xMt,"LI",{});var jRe=s(nE);G5e=n(jRe,"STRONG",{});var $Mt=s(G5e);TMr=r($Mt,"tapas"),$Mt.forEach(t),MMr=r(jRe," \u2014 "),WH=n(jRe,"A",{href:!0});var kMt=s(WH);EMr=r(kMt,"TFTapasForQuestionAnswering"),kMt.forEach(t),CMr=r(jRe," (TAPAS model)"),jRe.forEach(t),xMt.forEach(t),wMr=i(kl),T(sE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Jqe=i(f),uc=n(f,"H2",{class:!0});var tDe=s(uc);lE=n(tDe,"A",{id:!0,class:!0,href:!0});var SMt=s(lE);O5e=n(SMt,"SPAN",{});var RMt=s(O5e);T(j8.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),AMr=i(tDe),V5e=n(tDe,"SPAN",{});var PMt=s(V5e);yMr=r(PMt,"TFAutoModelForTokenClassification"),PMt.forEach(t),tDe.forEach(t),Yqe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(D8.$$.fragment,Sl),LMr=i(Sl),_c=n(Sl,"P",{});var DZ=s(_c);xMr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=n(DZ,"A",{href:!0});var BMt=s(QH);$Mr=r(BMt,"from_pretrained()"),BMt.forEach(t),kMr=r(DZ," class method or the "),HH=n(DZ,"A",{href:!0});var IMt=s(HH);SMr=r(IMt,"from_config()"),IMt.forEach(t),RMr=r(DZ,` class
method.`),DZ.forEach(t),PMr=i(Sl),G8=n(Sl,"P",{});var aDe=s(G8);BMr=r(aDe,"This class cannot be instantiated directly using "),X5e=n(aDe,"CODE",{});var qMt=s(X5e);IMr=r(qMt,"__init__()"),qMt.forEach(t),qMr=r(aDe," (throws an error)."),aDe.forEach(t),NMr=i(Sl),qt=n(Sl,"DIV",{class:!0});var w6=s(qt);T(O8.$$.fragment,w6),jMr=i(w6),z5e=n(w6,"P",{});var NMt=s(z5e);DMr=r(NMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NMt.forEach(t),GMr=i(w6),bc=n(w6,"P",{});var GZ=s(bc);OMr=r(GZ,`Note:
Loading a model from its configuration file does `),W5e=n(GZ,"STRONG",{});var jMt=s(W5e);VMr=r(jMt,"not"),jMt.forEach(t),XMr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(GZ,"A",{href:!0});var DMt=s(UH);zMr=r(DMt,"from_pretrained()"),DMt.forEach(t),WMr=r(GZ," to load the model weights."),GZ.forEach(t),QMr=i(w6),T(iE.$$.fragment,w6),w6.forEach(t),HMr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(V8.$$.fragment,Rl),UMr=i(Rl),Q5e=n(Rl,"P",{});var GMt=s(Q5e);JMr=r(GMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GMt.forEach(t),YMr=i(Rl),cn=n(Rl,"P",{});var A6=s(cn);KMr=r(A6,"The model class to instantiate is selected based on the "),H5e=n(A6,"CODE",{});var OMt=s(H5e);ZMr=r(OMt,"model_type"),OMt.forEach(t),e4r=r(A6,` property of the config object (either
passed as an argument or loaded from `),U5e=n(A6,"CODE",{});var VMt=s(U5e);o4r=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),r4r=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(A6,"CODE",{});var XMt=s(J5e);t4r=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),a4r=r(A6,":"),A6.forEach(t),n4r=i(Rl),de=n(Rl,"UL",{});var me=s(de);dE=n(me,"LI",{});var DRe=s(dE);Y5e=n(DRe,"STRONG",{});var zMt=s(Y5e);s4r=r(zMt,"albert"),zMt.forEach(t),l4r=r(DRe," \u2014 "),JH=n(DRe,"A",{href:!0});var WMt=s(JH);i4r=r(WMt,"TFAlbertForTokenClassification"),WMt.forEach(t),d4r=r(DRe," (ALBERT model)"),DRe.forEach(t),c4r=i(me),cE=n(me,"LI",{});var GRe=s(cE);K5e=n(GRe,"STRONG",{});var QMt=s(K5e);f4r=r(QMt,"bert"),QMt.forEach(t),m4r=r(GRe," \u2014 "),YH=n(GRe,"A",{href:!0});var HMt=s(YH);g4r=r(HMt,"TFBertForTokenClassification"),HMt.forEach(t),h4r=r(GRe," (BERT model)"),GRe.forEach(t),p4r=i(me),fE=n(me,"LI",{});var ORe=s(fE);Z5e=n(ORe,"STRONG",{});var UMt=s(Z5e);u4r=r(UMt,"camembert"),UMt.forEach(t),_4r=r(ORe," \u2014 "),KH=n(ORe,"A",{href:!0});var JMt=s(KH);b4r=r(JMt,"TFCamembertForTokenClassification"),JMt.forEach(t),v4r=r(ORe," (CamemBERT model)"),ORe.forEach(t),F4r=i(me),mE=n(me,"LI",{});var VRe=s(mE);eve=n(VRe,"STRONG",{});var YMt=s(eve);T4r=r(YMt,"convbert"),YMt.forEach(t),M4r=r(VRe," \u2014 "),ZH=n(VRe,"A",{href:!0});var KMt=s(ZH);E4r=r(KMt,"TFConvBertForTokenClassification"),KMt.forEach(t),C4r=r(VRe," (ConvBERT model)"),VRe.forEach(t),w4r=i(me),gE=n(me,"LI",{});var XRe=s(gE);ove=n(XRe,"STRONG",{});var ZMt=s(ove);A4r=r(ZMt,"deberta"),ZMt.forEach(t),y4r=r(XRe," \u2014 "),eU=n(XRe,"A",{href:!0});var e4t=s(eU);L4r=r(e4t,"TFDebertaForTokenClassification"),e4t.forEach(t),x4r=r(XRe," (DeBERTa model)"),XRe.forEach(t),$4r=i(me),hE=n(me,"LI",{});var zRe=s(hE);rve=n(zRe,"STRONG",{});var o4t=s(rve);k4r=r(o4t,"deberta-v2"),o4t.forEach(t),S4r=r(zRe," \u2014 "),oU=n(zRe,"A",{href:!0});var r4t=s(oU);R4r=r(r4t,"TFDebertaV2ForTokenClassification"),r4t.forEach(t),P4r=r(zRe," (DeBERTa-v2 model)"),zRe.forEach(t),B4r=i(me),pE=n(me,"LI",{});var WRe=s(pE);tve=n(WRe,"STRONG",{});var t4t=s(tve);I4r=r(t4t,"distilbert"),t4t.forEach(t),q4r=r(WRe," \u2014 "),rU=n(WRe,"A",{href:!0});var a4t=s(rU);N4r=r(a4t,"TFDistilBertForTokenClassification"),a4t.forEach(t),j4r=r(WRe," (DistilBERT model)"),WRe.forEach(t),D4r=i(me),uE=n(me,"LI",{});var QRe=s(uE);ave=n(QRe,"STRONG",{});var n4t=s(ave);G4r=r(n4t,"electra"),n4t.forEach(t),O4r=r(QRe," \u2014 "),tU=n(QRe,"A",{href:!0});var s4t=s(tU);V4r=r(s4t,"TFElectraForTokenClassification"),s4t.forEach(t),X4r=r(QRe," (ELECTRA model)"),QRe.forEach(t),z4r=i(me),_E=n(me,"LI",{});var HRe=s(_E);nve=n(HRe,"STRONG",{});var l4t=s(nve);W4r=r(l4t,"flaubert"),l4t.forEach(t),Q4r=r(HRe," \u2014 "),aU=n(HRe,"A",{href:!0});var i4t=s(aU);H4r=r(i4t,"TFFlaubertForTokenClassification"),i4t.forEach(t),U4r=r(HRe," (FlauBERT model)"),HRe.forEach(t),J4r=i(me),bE=n(me,"LI",{});var URe=s(bE);sve=n(URe,"STRONG",{});var d4t=s(sve);Y4r=r(d4t,"funnel"),d4t.forEach(t),K4r=r(URe," \u2014 "),nU=n(URe,"A",{href:!0});var c4t=s(nU);Z4r=r(c4t,"TFFunnelForTokenClassification"),c4t.forEach(t),eEr=r(URe," (Funnel Transformer model)"),URe.forEach(t),oEr=i(me),vE=n(me,"LI",{});var JRe=s(vE);lve=n(JRe,"STRONG",{});var f4t=s(lve);rEr=r(f4t,"layoutlm"),f4t.forEach(t),tEr=r(JRe," \u2014 "),sU=n(JRe,"A",{href:!0});var m4t=s(sU);aEr=r(m4t,"TFLayoutLMForTokenClassification"),m4t.forEach(t),nEr=r(JRe," (LayoutLM model)"),JRe.forEach(t),sEr=i(me),FE=n(me,"LI",{});var YRe=s(FE);ive=n(YRe,"STRONG",{});var g4t=s(ive);lEr=r(g4t,"longformer"),g4t.forEach(t),iEr=r(YRe," \u2014 "),lU=n(YRe,"A",{href:!0});var h4t=s(lU);dEr=r(h4t,"TFLongformerForTokenClassification"),h4t.forEach(t),cEr=r(YRe," (Longformer model)"),YRe.forEach(t),fEr=i(me),TE=n(me,"LI",{});var KRe=s(TE);dve=n(KRe,"STRONG",{});var p4t=s(dve);mEr=r(p4t,"mobilebert"),p4t.forEach(t),gEr=r(KRe," \u2014 "),iU=n(KRe,"A",{href:!0});var u4t=s(iU);hEr=r(u4t,"TFMobileBertForTokenClassification"),u4t.forEach(t),pEr=r(KRe," (MobileBERT model)"),KRe.forEach(t),uEr=i(me),ME=n(me,"LI",{});var ZRe=s(ME);cve=n(ZRe,"STRONG",{});var _4t=s(cve);_Er=r(_4t,"mpnet"),_4t.forEach(t),bEr=r(ZRe," \u2014 "),dU=n(ZRe,"A",{href:!0});var b4t=s(dU);vEr=r(b4t,"TFMPNetForTokenClassification"),b4t.forEach(t),FEr=r(ZRe," (MPNet model)"),ZRe.forEach(t),TEr=i(me),EE=n(me,"LI",{});var ePe=s(EE);fve=n(ePe,"STRONG",{});var v4t=s(fve);MEr=r(v4t,"rembert"),v4t.forEach(t),EEr=r(ePe," \u2014 "),cU=n(ePe,"A",{href:!0});var F4t=s(cU);CEr=r(F4t,"TFRemBertForTokenClassification"),F4t.forEach(t),wEr=r(ePe," (RemBERT model)"),ePe.forEach(t),AEr=i(me),CE=n(me,"LI",{});var oPe=s(CE);mve=n(oPe,"STRONG",{});var T4t=s(mve);yEr=r(T4t,"roberta"),T4t.forEach(t),LEr=r(oPe," \u2014 "),fU=n(oPe,"A",{href:!0});var M4t=s(fU);xEr=r(M4t,"TFRobertaForTokenClassification"),M4t.forEach(t),$Er=r(oPe," (RoBERTa model)"),oPe.forEach(t),kEr=i(me),wE=n(me,"LI",{});var rPe=s(wE);gve=n(rPe,"STRONG",{});var E4t=s(gve);SEr=r(E4t,"roformer"),E4t.forEach(t),REr=r(rPe," \u2014 "),mU=n(rPe,"A",{href:!0});var C4t=s(mU);PEr=r(C4t,"TFRoFormerForTokenClassification"),C4t.forEach(t),BEr=r(rPe," (RoFormer model)"),rPe.forEach(t),IEr=i(me),AE=n(me,"LI",{});var tPe=s(AE);hve=n(tPe,"STRONG",{});var w4t=s(hve);qEr=r(w4t,"xlm"),w4t.forEach(t),NEr=r(tPe," \u2014 "),gU=n(tPe,"A",{href:!0});var A4t=s(gU);jEr=r(A4t,"TFXLMForTokenClassification"),A4t.forEach(t),DEr=r(tPe," (XLM model)"),tPe.forEach(t),GEr=i(me),yE=n(me,"LI",{});var aPe=s(yE);pve=n(aPe,"STRONG",{});var y4t=s(pve);OEr=r(y4t,"xlm-roberta"),y4t.forEach(t),VEr=r(aPe," \u2014 "),hU=n(aPe,"A",{href:!0});var L4t=s(hU);XEr=r(L4t,"TFXLMRobertaForTokenClassification"),L4t.forEach(t),zEr=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),WEr=i(me),LE=n(me,"LI",{});var nPe=s(LE);uve=n(nPe,"STRONG",{});var x4t=s(uve);QEr=r(x4t,"xlnet"),x4t.forEach(t),HEr=r(nPe," \u2014 "),pU=n(nPe,"A",{href:!0});var $4t=s(pU);UEr=r($4t,"TFXLNetForTokenClassification"),$4t.forEach(t),JEr=r(nPe," (XLNet model)"),nPe.forEach(t),me.forEach(t),YEr=i(Rl),T(xE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Kqe=i(f),vc=n(f,"H2",{class:!0});var nDe=s(vc);$E=n(nDe,"A",{id:!0,class:!0,href:!0});var k4t=s($E);_ve=n(k4t,"SPAN",{});var S4t=s(_ve);T(X8.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),KEr=i(nDe),bve=n(nDe,"SPAN",{});var R4t=s(bve);ZEr=r(R4t,"TFAutoModelForQuestionAnswering"),R4t.forEach(t),nDe.forEach(t),Zqe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(z8.$$.fragment,Pl),eCr=i(Pl),Fc=n(Pl,"P",{});var OZ=s(Fc);oCr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uU=n(OZ,"A",{href:!0});var P4t=s(uU);rCr=r(P4t,"from_pretrained()"),P4t.forEach(t),tCr=r(OZ," class method or the "),_U=n(OZ,"A",{href:!0});var B4t=s(_U);aCr=r(B4t,"from_config()"),B4t.forEach(t),nCr=r(OZ,` class
method.`),OZ.forEach(t),sCr=i(Pl),W8=n(Pl,"P",{});var sDe=s(W8);lCr=r(sDe,"This class cannot be instantiated directly using "),vve=n(sDe,"CODE",{});var I4t=s(vve);iCr=r(I4t,"__init__()"),I4t.forEach(t),dCr=r(sDe," (throws an error)."),sDe.forEach(t),cCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var y6=s(Nt);T(Q8.$$.fragment,y6),fCr=i(y6),Fve=n(y6,"P",{});var q4t=s(Fve);mCr=r(q4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q4t.forEach(t),gCr=i(y6),Tc=n(y6,"P",{});var VZ=s(Tc);hCr=r(VZ,`Note:
Loading a model from its configuration file does `),Tve=n(VZ,"STRONG",{});var N4t=s(Tve);pCr=r(N4t,"not"),N4t.forEach(t),uCr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(VZ,"A",{href:!0});var j4t=s(bU);_Cr=r(j4t,"from_pretrained()"),j4t.forEach(t),bCr=r(VZ," to load the model weights."),VZ.forEach(t),vCr=i(y6),T(kE.$$.fragment,y6),y6.forEach(t),FCr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(H8.$$.fragment,Bl),TCr=i(Bl),Mve=n(Bl,"P",{});var D4t=s(Mve);MCr=r(D4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),D4t.forEach(t),ECr=i(Bl),fn=n(Bl,"P",{});var L6=s(fn);CCr=r(L6,"The model class to instantiate is selected based on the "),Eve=n(L6,"CODE",{});var G4t=s(Eve);wCr=r(G4t,"model_type"),G4t.forEach(t),ACr=r(L6,` property of the config object (either
passed as an argument or loaded from `),Cve=n(L6,"CODE",{});var O4t=s(Cve);yCr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),LCr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(L6,"CODE",{});var V4t=s(wve);xCr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),$Cr=r(L6,":"),L6.forEach(t),kCr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);SE=n(ge,"LI",{});var sPe=s(SE);Ave=n(sPe,"STRONG",{});var X4t=s(Ave);SCr=r(X4t,"albert"),X4t.forEach(t),RCr=r(sPe," \u2014 "),vU=n(sPe,"A",{href:!0});var z4t=s(vU);PCr=r(z4t,"TFAlbertForQuestionAnswering"),z4t.forEach(t),BCr=r(sPe," (ALBERT model)"),sPe.forEach(t),ICr=i(ge),RE=n(ge,"LI",{});var lPe=s(RE);yve=n(lPe,"STRONG",{});var W4t=s(yve);qCr=r(W4t,"bert"),W4t.forEach(t),NCr=r(lPe," \u2014 "),FU=n(lPe,"A",{href:!0});var Q4t=s(FU);jCr=r(Q4t,"TFBertForQuestionAnswering"),Q4t.forEach(t),DCr=r(lPe," (BERT model)"),lPe.forEach(t),GCr=i(ge),PE=n(ge,"LI",{});var iPe=s(PE);Lve=n(iPe,"STRONG",{});var H4t=s(Lve);OCr=r(H4t,"camembert"),H4t.forEach(t),VCr=r(iPe," \u2014 "),TU=n(iPe,"A",{href:!0});var U4t=s(TU);XCr=r(U4t,"TFCamembertForQuestionAnswering"),U4t.forEach(t),zCr=r(iPe," (CamemBERT model)"),iPe.forEach(t),WCr=i(ge),BE=n(ge,"LI",{});var dPe=s(BE);xve=n(dPe,"STRONG",{});var J4t=s(xve);QCr=r(J4t,"convbert"),J4t.forEach(t),HCr=r(dPe," \u2014 "),MU=n(dPe,"A",{href:!0});var Y4t=s(MU);UCr=r(Y4t,"TFConvBertForQuestionAnswering"),Y4t.forEach(t),JCr=r(dPe," (ConvBERT model)"),dPe.forEach(t),YCr=i(ge),IE=n(ge,"LI",{});var cPe=s(IE);$ve=n(cPe,"STRONG",{});var K4t=s($ve);KCr=r(K4t,"deberta"),K4t.forEach(t),ZCr=r(cPe," \u2014 "),EU=n(cPe,"A",{href:!0});var Z4t=s(EU);e3r=r(Z4t,"TFDebertaForQuestionAnswering"),Z4t.forEach(t),o3r=r(cPe," (DeBERTa model)"),cPe.forEach(t),r3r=i(ge),qE=n(ge,"LI",{});var fPe=s(qE);kve=n(fPe,"STRONG",{});var eEt=s(kve);t3r=r(eEt,"deberta-v2"),eEt.forEach(t),a3r=r(fPe," \u2014 "),CU=n(fPe,"A",{href:!0});var oEt=s(CU);n3r=r(oEt,"TFDebertaV2ForQuestionAnswering"),oEt.forEach(t),s3r=r(fPe," (DeBERTa-v2 model)"),fPe.forEach(t),l3r=i(ge),NE=n(ge,"LI",{});var mPe=s(NE);Sve=n(mPe,"STRONG",{});var rEt=s(Sve);i3r=r(rEt,"distilbert"),rEt.forEach(t),d3r=r(mPe," \u2014 "),wU=n(mPe,"A",{href:!0});var tEt=s(wU);c3r=r(tEt,"TFDistilBertForQuestionAnswering"),tEt.forEach(t),f3r=r(mPe," (DistilBERT model)"),mPe.forEach(t),m3r=i(ge),jE=n(ge,"LI",{});var gPe=s(jE);Rve=n(gPe,"STRONG",{});var aEt=s(Rve);g3r=r(aEt,"electra"),aEt.forEach(t),h3r=r(gPe," \u2014 "),AU=n(gPe,"A",{href:!0});var nEt=s(AU);p3r=r(nEt,"TFElectraForQuestionAnswering"),nEt.forEach(t),u3r=r(gPe," (ELECTRA model)"),gPe.forEach(t),_3r=i(ge),DE=n(ge,"LI",{});var hPe=s(DE);Pve=n(hPe,"STRONG",{});var sEt=s(Pve);b3r=r(sEt,"flaubert"),sEt.forEach(t),v3r=r(hPe," \u2014 "),yU=n(hPe,"A",{href:!0});var lEt=s(yU);F3r=r(lEt,"TFFlaubertForQuestionAnsweringSimple"),lEt.forEach(t),T3r=r(hPe," (FlauBERT model)"),hPe.forEach(t),M3r=i(ge),GE=n(ge,"LI",{});var pPe=s(GE);Bve=n(pPe,"STRONG",{});var iEt=s(Bve);E3r=r(iEt,"funnel"),iEt.forEach(t),C3r=r(pPe," \u2014 "),LU=n(pPe,"A",{href:!0});var dEt=s(LU);w3r=r(dEt,"TFFunnelForQuestionAnswering"),dEt.forEach(t),A3r=r(pPe," (Funnel Transformer model)"),pPe.forEach(t),y3r=i(ge),OE=n(ge,"LI",{});var uPe=s(OE);Ive=n(uPe,"STRONG",{});var cEt=s(Ive);L3r=r(cEt,"gptj"),cEt.forEach(t),x3r=r(uPe," \u2014 "),xU=n(uPe,"A",{href:!0});var fEt=s(xU);$3r=r(fEt,"TFGPTJForQuestionAnswering"),fEt.forEach(t),k3r=r(uPe," (GPT-J model)"),uPe.forEach(t),S3r=i(ge),VE=n(ge,"LI",{});var _Pe=s(VE);qve=n(_Pe,"STRONG",{});var mEt=s(qve);R3r=r(mEt,"longformer"),mEt.forEach(t),P3r=r(_Pe," \u2014 "),$U=n(_Pe,"A",{href:!0});var gEt=s($U);B3r=r(gEt,"TFLongformerForQuestionAnswering"),gEt.forEach(t),I3r=r(_Pe," (Longformer model)"),_Pe.forEach(t),q3r=i(ge),XE=n(ge,"LI",{});var bPe=s(XE);Nve=n(bPe,"STRONG",{});var hEt=s(Nve);N3r=r(hEt,"mobilebert"),hEt.forEach(t),j3r=r(bPe," \u2014 "),kU=n(bPe,"A",{href:!0});var pEt=s(kU);D3r=r(pEt,"TFMobileBertForQuestionAnswering"),pEt.forEach(t),G3r=r(bPe," (MobileBERT model)"),bPe.forEach(t),O3r=i(ge),zE=n(ge,"LI",{});var vPe=s(zE);jve=n(vPe,"STRONG",{});var uEt=s(jve);V3r=r(uEt,"mpnet"),uEt.forEach(t),X3r=r(vPe," \u2014 "),SU=n(vPe,"A",{href:!0});var _Et=s(SU);z3r=r(_Et,"TFMPNetForQuestionAnswering"),_Et.forEach(t),W3r=r(vPe," (MPNet model)"),vPe.forEach(t),Q3r=i(ge),WE=n(ge,"LI",{});var FPe=s(WE);Dve=n(FPe,"STRONG",{});var bEt=s(Dve);H3r=r(bEt,"rembert"),bEt.forEach(t),U3r=r(FPe," \u2014 "),RU=n(FPe,"A",{href:!0});var vEt=s(RU);J3r=r(vEt,"TFRemBertForQuestionAnswering"),vEt.forEach(t),Y3r=r(FPe," (RemBERT model)"),FPe.forEach(t),K3r=i(ge),QE=n(ge,"LI",{});var TPe=s(QE);Gve=n(TPe,"STRONG",{});var FEt=s(Gve);Z3r=r(FEt,"roberta"),FEt.forEach(t),ewr=r(TPe," \u2014 "),PU=n(TPe,"A",{href:!0});var TEt=s(PU);owr=r(TEt,"TFRobertaForQuestionAnswering"),TEt.forEach(t),rwr=r(TPe," (RoBERTa model)"),TPe.forEach(t),twr=i(ge),HE=n(ge,"LI",{});var MPe=s(HE);Ove=n(MPe,"STRONG",{});var MEt=s(Ove);awr=r(MEt,"roformer"),MEt.forEach(t),nwr=r(MPe," \u2014 "),BU=n(MPe,"A",{href:!0});var EEt=s(BU);swr=r(EEt,"TFRoFormerForQuestionAnswering"),EEt.forEach(t),lwr=r(MPe," (RoFormer model)"),MPe.forEach(t),iwr=i(ge),UE=n(ge,"LI",{});var EPe=s(UE);Vve=n(EPe,"STRONG",{});var CEt=s(Vve);dwr=r(CEt,"xlm"),CEt.forEach(t),cwr=r(EPe," \u2014 "),IU=n(EPe,"A",{href:!0});var wEt=s(IU);fwr=r(wEt,"TFXLMForQuestionAnsweringSimple"),wEt.forEach(t),mwr=r(EPe," (XLM model)"),EPe.forEach(t),gwr=i(ge),JE=n(ge,"LI",{});var CPe=s(JE);Xve=n(CPe,"STRONG",{});var AEt=s(Xve);hwr=r(AEt,"xlm-roberta"),AEt.forEach(t),pwr=r(CPe," \u2014 "),qU=n(CPe,"A",{href:!0});var yEt=s(qU);uwr=r(yEt,"TFXLMRobertaForQuestionAnswering"),yEt.forEach(t),_wr=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),bwr=i(ge),YE=n(ge,"LI",{});var wPe=s(YE);zve=n(wPe,"STRONG",{});var LEt=s(zve);vwr=r(LEt,"xlnet"),LEt.forEach(t),Fwr=r(wPe," \u2014 "),NU=n(wPe,"A",{href:!0});var xEt=s(NU);Twr=r(xEt,"TFXLNetForQuestionAnsweringSimple"),xEt.forEach(t),Mwr=r(wPe," (XLNet model)"),wPe.forEach(t),ge.forEach(t),Ewr=i(Bl),T(KE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),eNe=i(f),Mc=n(f,"H2",{class:!0});var lDe=s(Mc);ZE=n(lDe,"A",{id:!0,class:!0,href:!0});var $Et=s(ZE);Wve=n($Et,"SPAN",{});var kEt=s(Wve);T(U8.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),Cwr=i(lDe),Qve=n(lDe,"SPAN",{});var SEt=s(Qve);wwr=r(SEt,"TFAutoModelForVision2Seq"),SEt.forEach(t),lDe.forEach(t),oNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(J8.$$.fragment,Il),Awr=i(Il),Ec=n(Il,"P",{});var XZ=s(Ec);ywr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jU=n(XZ,"A",{href:!0});var REt=s(jU);Lwr=r(REt,"from_pretrained()"),REt.forEach(t),xwr=r(XZ," class method or the "),DU=n(XZ,"A",{href:!0});var PEt=s(DU);$wr=r(PEt,"from_config()"),PEt.forEach(t),kwr=r(XZ,` class
method.`),XZ.forEach(t),Swr=i(Il),Y8=n(Il,"P",{});var iDe=s(Y8);Rwr=r(iDe,"This class cannot be instantiated directly using "),Hve=n(iDe,"CODE",{});var BEt=s(Hve);Pwr=r(BEt,"__init__()"),BEt.forEach(t),Bwr=r(iDe," (throws an error)."),iDe.forEach(t),Iwr=i(Il),jt=n(Il,"DIV",{class:!0});var x6=s(jt);T(K8.$$.fragment,x6),qwr=i(x6),Uve=n(x6,"P",{});var IEt=s(Uve);Nwr=r(IEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IEt.forEach(t),jwr=i(x6),Cc=n(x6,"P",{});var zZ=s(Cc);Dwr=r(zZ,`Note:
Loading a model from its configuration file does `),Jve=n(zZ,"STRONG",{});var qEt=s(Jve);Gwr=r(qEt,"not"),qEt.forEach(t),Owr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(zZ,"A",{href:!0});var NEt=s(GU);Vwr=r(NEt,"from_pretrained()"),NEt.forEach(t),Xwr=r(zZ," to load the model weights."),zZ.forEach(t),zwr=i(x6),T(eC.$$.fragment,x6),x6.forEach(t),Wwr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(Z8.$$.fragment,ql),Qwr=i(ql),Yve=n(ql,"P",{});var jEt=s(Yve);Hwr=r(jEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jEt.forEach(t),Uwr=i(ql),mn=n(ql,"P",{});var $6=s(mn);Jwr=r($6,"The model class to instantiate is selected based on the "),Kve=n($6,"CODE",{});var DEt=s(Kve);Ywr=r(DEt,"model_type"),DEt.forEach(t),Kwr=r($6,` property of the config object (either
passed as an argument or loaded from `),Zve=n($6,"CODE",{});var GEt=s(Zve);Zwr=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),eAr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n($6,"CODE",{});var OEt=s(eFe);oAr=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),rAr=r($6,":"),$6.forEach(t),tAr=i(ql),oFe=n(ql,"UL",{});var VEt=s(oFe);oC=n(VEt,"LI",{});var APe=s(oC);rFe=n(APe,"STRONG",{});var XEt=s(rFe);aAr=r(XEt,"vision-encoder-decoder"),XEt.forEach(t),nAr=r(APe," \u2014 "),OU=n(APe,"A",{href:!0});var zEt=s(OU);sAr=r(zEt,"TFVisionEncoderDecoderModel"),zEt.forEach(t),lAr=r(APe," (Vision Encoder decoder model)"),APe.forEach(t),VEt.forEach(t),iAr=i(ql),T(rC.$$.fragment,ql),ql.forEach(t),Il.forEach(t),rNe=i(f),wc=n(f,"H2",{class:!0});var dDe=s(wc);tC=n(dDe,"A",{id:!0,class:!0,href:!0});var WEt=s(tC);tFe=n(WEt,"SPAN",{});var QEt=s(tFe);T(ex.$$.fragment,QEt),QEt.forEach(t),WEt.forEach(t),dAr=i(dDe),aFe=n(dDe,"SPAN",{});var HEt=s(aFe);cAr=r(HEt,"TFAutoModelForSpeechSeq2Seq"),HEt.forEach(t),dDe.forEach(t),tNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(ox.$$.fragment,Nl),fAr=i(Nl),Ac=n(Nl,"P",{});var WZ=s(Ac);mAr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VU=n(WZ,"A",{href:!0});var UEt=s(VU);gAr=r(UEt,"from_pretrained()"),UEt.forEach(t),hAr=r(WZ," class method or the "),XU=n(WZ,"A",{href:!0});var JEt=s(XU);pAr=r(JEt,"from_config()"),JEt.forEach(t),uAr=r(WZ,` class
method.`),WZ.forEach(t),_Ar=i(Nl),rx=n(Nl,"P",{});var cDe=s(rx);bAr=r(cDe,"This class cannot be instantiated directly using "),nFe=n(cDe,"CODE",{});var YEt=s(nFe);vAr=r(YEt,"__init__()"),YEt.forEach(t),FAr=r(cDe," (throws an error)."),cDe.forEach(t),TAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var k6=s(Dt);T(tx.$$.fragment,k6),MAr=i(k6),sFe=n(k6,"P",{});var KEt=s(sFe);EAr=r(KEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),KEt.forEach(t),CAr=i(k6),yc=n(k6,"P",{});var QZ=s(yc);wAr=r(QZ,`Note:
Loading a model from its configuration file does `),lFe=n(QZ,"STRONG",{});var ZEt=s(lFe);AAr=r(ZEt,"not"),ZEt.forEach(t),yAr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(QZ,"A",{href:!0});var eCt=s(zU);LAr=r(eCt,"from_pretrained()"),eCt.forEach(t),xAr=r(QZ," to load the model weights."),QZ.forEach(t),$Ar=i(k6),T(aC.$$.fragment,k6),k6.forEach(t),kAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(ax.$$.fragment,jl),SAr=i(jl),iFe=n(jl,"P",{});var oCt=s(iFe);RAr=r(oCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oCt.forEach(t),PAr=i(jl),gn=n(jl,"P",{});var S6=s(gn);BAr=r(S6,"The model class to instantiate is selected based on the "),dFe=n(S6,"CODE",{});var rCt=s(dFe);IAr=r(rCt,"model_type"),rCt.forEach(t),qAr=r(S6,` property of the config object (either
passed as an argument or loaded from `),cFe=n(S6,"CODE",{});var tCt=s(cFe);NAr=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),jAr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(S6,"CODE",{});var aCt=s(fFe);DAr=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),GAr=r(S6,":"),S6.forEach(t),OAr=i(jl),mFe=n(jl,"UL",{});var nCt=s(mFe);nC=n(nCt,"LI",{});var yPe=s(nC);gFe=n(yPe,"STRONG",{});var sCt=s(gFe);VAr=r(sCt,"speech_to_text"),sCt.forEach(t),XAr=r(yPe," \u2014 "),WU=n(yPe,"A",{href:!0});var lCt=s(WU);zAr=r(lCt,"TFSpeech2TextForConditionalGeneration"),lCt.forEach(t),WAr=r(yPe," (Speech2Text model)"),yPe.forEach(t),nCt.forEach(t),QAr=i(jl),T(sC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),aNe=i(f),Lc=n(f,"H2",{class:!0});var fDe=s(Lc);lC=n(fDe,"A",{id:!0,class:!0,href:!0});var iCt=s(lC);hFe=n(iCt,"SPAN",{});var dCt=s(hFe);T(nx.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),HAr=i(fDe),pFe=n(fDe,"SPAN",{});var cCt=s(pFe);UAr=r(cCt,"FlaxAutoModel"),cCt.forEach(t),fDe.forEach(t),nNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(sx.$$.fragment,Dl),JAr=i(Dl),xc=n(Dl,"P",{});var HZ=s(xc);YAr=r(HZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QU=n(HZ,"A",{href:!0});var fCt=s(QU);KAr=r(fCt,"from_pretrained()"),fCt.forEach(t),ZAr=r(HZ," class method or the "),HU=n(HZ,"A",{href:!0});var mCt=s(HU);e6r=r(mCt,"from_config()"),mCt.forEach(t),o6r=r(HZ,` class
method.`),HZ.forEach(t),r6r=i(Dl),lx=n(Dl,"P",{});var mDe=s(lx);t6r=r(mDe,"This class cannot be instantiated directly using "),uFe=n(mDe,"CODE",{});var gCt=s(uFe);a6r=r(gCt,"__init__()"),gCt.forEach(t),n6r=r(mDe," (throws an error)."),mDe.forEach(t),s6r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var R6=s(Gt);T(ix.$$.fragment,R6),l6r=i(R6),_Fe=n(R6,"P",{});var hCt=s(_Fe);i6r=r(hCt,"Instantiates one of the base model classes of the library from a configuration."),hCt.forEach(t),d6r=i(R6),$c=n(R6,"P",{});var UZ=s($c);c6r=r(UZ,`Note:
Loading a model from its configuration file does `),bFe=n(UZ,"STRONG",{});var pCt=s(bFe);f6r=r(pCt,"not"),pCt.forEach(t),m6r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(UZ,"A",{href:!0});var uCt=s(UU);g6r=r(uCt,"from_pretrained()"),uCt.forEach(t),h6r=r(UZ," to load the model weights."),UZ.forEach(t),p6r=i(R6),T(iC.$$.fragment,R6),R6.forEach(t),u6r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(dx.$$.fragment,Gl),_6r=i(Gl),vFe=n(Gl,"P",{});var _Ct=s(vFe);b6r=r(_Ct,"Instantiate one of the base model classes of the library from a pretrained model."),_Ct.forEach(t),v6r=i(Gl),hn=n(Gl,"P",{});var P6=s(hn);F6r=r(P6,"The model class to instantiate is selected based on the "),FFe=n(P6,"CODE",{});var bCt=s(FFe);T6r=r(bCt,"model_type"),bCt.forEach(t),M6r=r(P6,` property of the config object (either
passed as an argument or loaded from `),TFe=n(P6,"CODE",{});var vCt=s(TFe);E6r=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),C6r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(P6,"CODE",{});var FCt=s(MFe);w6r=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),A6r=r(P6,":"),P6.forEach(t),y6r=i(Gl),re=n(Gl,"UL",{});var ne=s(re);dC=n(ne,"LI",{});var LPe=s(dC);EFe=n(LPe,"STRONG",{});var TCt=s(EFe);L6r=r(TCt,"albert"),TCt.forEach(t),x6r=r(LPe," \u2014 "),JU=n(LPe,"A",{href:!0});var MCt=s(JU);$6r=r(MCt,"FlaxAlbertModel"),MCt.forEach(t),k6r=r(LPe," (ALBERT model)"),LPe.forEach(t),S6r=i(ne),cC=n(ne,"LI",{});var xPe=s(cC);CFe=n(xPe,"STRONG",{});var ECt=s(CFe);R6r=r(ECt,"bart"),ECt.forEach(t),P6r=r(xPe," \u2014 "),YU=n(xPe,"A",{href:!0});var CCt=s(YU);B6r=r(CCt,"FlaxBartModel"),CCt.forEach(t),I6r=r(xPe," (BART model)"),xPe.forEach(t),q6r=i(ne),fC=n(ne,"LI",{});var $Pe=s(fC);wFe=n($Pe,"STRONG",{});var wCt=s(wFe);N6r=r(wCt,"beit"),wCt.forEach(t),j6r=r($Pe," \u2014 "),KU=n($Pe,"A",{href:!0});var ACt=s(KU);D6r=r(ACt,"FlaxBeitModel"),ACt.forEach(t),G6r=r($Pe," (BEiT model)"),$Pe.forEach(t),O6r=i(ne),mC=n(ne,"LI",{});var kPe=s(mC);AFe=n(kPe,"STRONG",{});var yCt=s(AFe);V6r=r(yCt,"bert"),yCt.forEach(t),X6r=r(kPe," \u2014 "),ZU=n(kPe,"A",{href:!0});var LCt=s(ZU);z6r=r(LCt,"FlaxBertModel"),LCt.forEach(t),W6r=r(kPe," (BERT model)"),kPe.forEach(t),Q6r=i(ne),gC=n(ne,"LI",{});var SPe=s(gC);yFe=n(SPe,"STRONG",{});var xCt=s(yFe);H6r=r(xCt,"big_bird"),xCt.forEach(t),U6r=r(SPe," \u2014 "),eJ=n(SPe,"A",{href:!0});var $Ct=s(eJ);J6r=r($Ct,"FlaxBigBirdModel"),$Ct.forEach(t),Y6r=r(SPe," (BigBird model)"),SPe.forEach(t),K6r=i(ne),hC=n(ne,"LI",{});var RPe=s(hC);LFe=n(RPe,"STRONG",{});var kCt=s(LFe);Z6r=r(kCt,"blenderbot"),kCt.forEach(t),e0r=r(RPe," \u2014 "),oJ=n(RPe,"A",{href:!0});var SCt=s(oJ);o0r=r(SCt,"FlaxBlenderbotModel"),SCt.forEach(t),r0r=r(RPe," (Blenderbot model)"),RPe.forEach(t),t0r=i(ne),pC=n(ne,"LI",{});var PPe=s(pC);xFe=n(PPe,"STRONG",{});var RCt=s(xFe);a0r=r(RCt,"blenderbot-small"),RCt.forEach(t),n0r=r(PPe," \u2014 "),rJ=n(PPe,"A",{href:!0});var PCt=s(rJ);s0r=r(PCt,"FlaxBlenderbotSmallModel"),PCt.forEach(t),l0r=r(PPe," (BlenderbotSmall model)"),PPe.forEach(t),i0r=i(ne),uC=n(ne,"LI",{});var BPe=s(uC);$Fe=n(BPe,"STRONG",{});var BCt=s($Fe);d0r=r(BCt,"clip"),BCt.forEach(t),c0r=r(BPe," \u2014 "),tJ=n(BPe,"A",{href:!0});var ICt=s(tJ);f0r=r(ICt,"FlaxCLIPModel"),ICt.forEach(t),m0r=r(BPe," (CLIP model)"),BPe.forEach(t),g0r=i(ne),_C=n(ne,"LI",{});var IPe=s(_C);kFe=n(IPe,"STRONG",{});var qCt=s(kFe);h0r=r(qCt,"distilbert"),qCt.forEach(t),p0r=r(IPe," \u2014 "),aJ=n(IPe,"A",{href:!0});var NCt=s(aJ);u0r=r(NCt,"FlaxDistilBertModel"),NCt.forEach(t),_0r=r(IPe," (DistilBERT model)"),IPe.forEach(t),b0r=i(ne),bC=n(ne,"LI",{});var qPe=s(bC);SFe=n(qPe,"STRONG",{});var jCt=s(SFe);v0r=r(jCt,"electra"),jCt.forEach(t),F0r=r(qPe," \u2014 "),nJ=n(qPe,"A",{href:!0});var DCt=s(nJ);T0r=r(DCt,"FlaxElectraModel"),DCt.forEach(t),M0r=r(qPe," (ELECTRA model)"),qPe.forEach(t),E0r=i(ne),vC=n(ne,"LI",{});var NPe=s(vC);RFe=n(NPe,"STRONG",{});var GCt=s(RFe);C0r=r(GCt,"gpt2"),GCt.forEach(t),w0r=r(NPe," \u2014 "),sJ=n(NPe,"A",{href:!0});var OCt=s(sJ);A0r=r(OCt,"FlaxGPT2Model"),OCt.forEach(t),y0r=r(NPe," (OpenAI GPT-2 model)"),NPe.forEach(t),L0r=i(ne),FC=n(ne,"LI",{});var jPe=s(FC);PFe=n(jPe,"STRONG",{});var VCt=s(PFe);x0r=r(VCt,"gpt_neo"),VCt.forEach(t),$0r=r(jPe," \u2014 "),lJ=n(jPe,"A",{href:!0});var XCt=s(lJ);k0r=r(XCt,"FlaxGPTNeoModel"),XCt.forEach(t),S0r=r(jPe," (GPT Neo model)"),jPe.forEach(t),R0r=i(ne),TC=n(ne,"LI",{});var DPe=s(TC);BFe=n(DPe,"STRONG",{});var zCt=s(BFe);P0r=r(zCt,"gptj"),zCt.forEach(t),B0r=r(DPe," \u2014 "),iJ=n(DPe,"A",{href:!0});var WCt=s(iJ);I0r=r(WCt,"FlaxGPTJModel"),WCt.forEach(t),q0r=r(DPe," (GPT-J model)"),DPe.forEach(t),N0r=i(ne),MC=n(ne,"LI",{});var GPe=s(MC);IFe=n(GPe,"STRONG",{});var QCt=s(IFe);j0r=r(QCt,"marian"),QCt.forEach(t),D0r=r(GPe," \u2014 "),dJ=n(GPe,"A",{href:!0});var HCt=s(dJ);G0r=r(HCt,"FlaxMarianModel"),HCt.forEach(t),O0r=r(GPe," (Marian model)"),GPe.forEach(t),V0r=i(ne),EC=n(ne,"LI",{});var OPe=s(EC);qFe=n(OPe,"STRONG",{});var UCt=s(qFe);X0r=r(UCt,"mbart"),UCt.forEach(t),z0r=r(OPe," \u2014 "),cJ=n(OPe,"A",{href:!0});var JCt=s(cJ);W0r=r(JCt,"FlaxMBartModel"),JCt.forEach(t),Q0r=r(OPe," (mBART model)"),OPe.forEach(t),H0r=i(ne),CC=n(ne,"LI",{});var VPe=s(CC);NFe=n(VPe,"STRONG",{});var YCt=s(NFe);U0r=r(YCt,"mt5"),YCt.forEach(t),J0r=r(VPe," \u2014 "),fJ=n(VPe,"A",{href:!0});var KCt=s(fJ);Y0r=r(KCt,"FlaxMT5Model"),KCt.forEach(t),K0r=r(VPe," (mT5 model)"),VPe.forEach(t),Z0r=i(ne),wC=n(ne,"LI",{});var XPe=s(wC);jFe=n(XPe,"STRONG",{});var ZCt=s(jFe);eyr=r(ZCt,"pegasus"),ZCt.forEach(t),oyr=r(XPe," \u2014 "),mJ=n(XPe,"A",{href:!0});var e3t=s(mJ);ryr=r(e3t,"FlaxPegasusModel"),e3t.forEach(t),tyr=r(XPe," (Pegasus model)"),XPe.forEach(t),ayr=i(ne),AC=n(ne,"LI",{});var zPe=s(AC);DFe=n(zPe,"STRONG",{});var o3t=s(DFe);nyr=r(o3t,"roberta"),o3t.forEach(t),syr=r(zPe," \u2014 "),gJ=n(zPe,"A",{href:!0});var r3t=s(gJ);lyr=r(r3t,"FlaxRobertaModel"),r3t.forEach(t),iyr=r(zPe," (RoBERTa model)"),zPe.forEach(t),dyr=i(ne),yC=n(ne,"LI",{});var WPe=s(yC);GFe=n(WPe,"STRONG",{});var t3t=s(GFe);cyr=r(t3t,"roformer"),t3t.forEach(t),fyr=r(WPe," \u2014 "),hJ=n(WPe,"A",{href:!0});var a3t=s(hJ);myr=r(a3t,"FlaxRoFormerModel"),a3t.forEach(t),gyr=r(WPe," (RoFormer model)"),WPe.forEach(t),hyr=i(ne),LC=n(ne,"LI",{});var QPe=s(LC);OFe=n(QPe,"STRONG",{});var n3t=s(OFe);pyr=r(n3t,"t5"),n3t.forEach(t),uyr=r(QPe," \u2014 "),pJ=n(QPe,"A",{href:!0});var s3t=s(pJ);_yr=r(s3t,"FlaxT5Model"),s3t.forEach(t),byr=r(QPe," (T5 model)"),QPe.forEach(t),vyr=i(ne),xC=n(ne,"LI",{});var HPe=s(xC);VFe=n(HPe,"STRONG",{});var l3t=s(VFe);Fyr=r(l3t,"vision-text-dual-encoder"),l3t.forEach(t),Tyr=r(HPe," \u2014 "),uJ=n(HPe,"A",{href:!0});var i3t=s(uJ);Myr=r(i3t,"FlaxVisionTextDualEncoderModel"),i3t.forEach(t),Eyr=r(HPe," (VisionTextDualEncoder model)"),HPe.forEach(t),Cyr=i(ne),$C=n(ne,"LI",{});var UPe=s($C);XFe=n(UPe,"STRONG",{});var d3t=s(XFe);wyr=r(d3t,"vit"),d3t.forEach(t),Ayr=r(UPe," \u2014 "),_J=n(UPe,"A",{href:!0});var c3t=s(_J);yyr=r(c3t,"FlaxViTModel"),c3t.forEach(t),Lyr=r(UPe," (ViT model)"),UPe.forEach(t),xyr=i(ne),kC=n(ne,"LI",{});var JPe=s(kC);zFe=n(JPe,"STRONG",{});var f3t=s(zFe);$yr=r(f3t,"wav2vec2"),f3t.forEach(t),kyr=r(JPe," \u2014 "),bJ=n(JPe,"A",{href:!0});var m3t=s(bJ);Syr=r(m3t,"FlaxWav2Vec2Model"),m3t.forEach(t),Ryr=r(JPe," (Wav2Vec2 model)"),JPe.forEach(t),Pyr=i(ne),SC=n(ne,"LI",{});var YPe=s(SC);WFe=n(YPe,"STRONG",{});var g3t=s(WFe);Byr=r(g3t,"xglm"),g3t.forEach(t),Iyr=r(YPe," \u2014 "),vJ=n(YPe,"A",{href:!0});var h3t=s(vJ);qyr=r(h3t,"FlaxXGLMModel"),h3t.forEach(t),Nyr=r(YPe," (XGLM model)"),YPe.forEach(t),jyr=i(ne),RC=n(ne,"LI",{});var KPe=s(RC);QFe=n(KPe,"STRONG",{});var p3t=s(QFe);Dyr=r(p3t,"xlm-roberta"),p3t.forEach(t),Gyr=r(KPe," \u2014 "),FJ=n(KPe,"A",{href:!0});var u3t=s(FJ);Oyr=r(u3t,"FlaxXLMRobertaModel"),u3t.forEach(t),Vyr=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),ne.forEach(t),Xyr=i(Gl),T(PC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),sNe=i(f),kc=n(f,"H2",{class:!0});var gDe=s(kc);BC=n(gDe,"A",{id:!0,class:!0,href:!0});var _3t=s(BC);HFe=n(_3t,"SPAN",{});var b3t=s(HFe);T(cx.$$.fragment,b3t),b3t.forEach(t),_3t.forEach(t),zyr=i(gDe),UFe=n(gDe,"SPAN",{});var v3t=s(UFe);Wyr=r(v3t,"FlaxAutoModelForCausalLM"),v3t.forEach(t),gDe.forEach(t),lNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(fx.$$.fragment,Ol),Qyr=i(Ol),Sc=n(Ol,"P",{});var JZ=s(Sc);Hyr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TJ=n(JZ,"A",{href:!0});var F3t=s(TJ);Uyr=r(F3t,"from_pretrained()"),F3t.forEach(t),Jyr=r(JZ," class method or the "),MJ=n(JZ,"A",{href:!0});var T3t=s(MJ);Yyr=r(T3t,"from_config()"),T3t.forEach(t),Kyr=r(JZ,` class
method.`),JZ.forEach(t),Zyr=i(Ol),mx=n(Ol,"P",{});var hDe=s(mx);eLr=r(hDe,"This class cannot be instantiated directly using "),JFe=n(hDe,"CODE",{});var M3t=s(JFe);oLr=r(M3t,"__init__()"),M3t.forEach(t),rLr=r(hDe," (throws an error)."),hDe.forEach(t),tLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var B6=s(Ot);T(gx.$$.fragment,B6),aLr=i(B6),YFe=n(B6,"P",{});var E3t=s(YFe);nLr=r(E3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E3t.forEach(t),sLr=i(B6),Rc=n(B6,"P",{});var YZ=s(Rc);lLr=r(YZ,`Note:
Loading a model from its configuration file does `),KFe=n(YZ,"STRONG",{});var C3t=s(KFe);iLr=r(C3t,"not"),C3t.forEach(t),dLr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(YZ,"A",{href:!0});var w3t=s(EJ);cLr=r(w3t,"from_pretrained()"),w3t.forEach(t),fLr=r(YZ," to load the model weights."),YZ.forEach(t),mLr=i(B6),T(IC.$$.fragment,B6),B6.forEach(t),gLr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(hx.$$.fragment,Vl),hLr=i(Vl),ZFe=n(Vl,"P",{});var A3t=s(ZFe);pLr=r(A3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A3t.forEach(t),uLr=i(Vl),pn=n(Vl,"P",{});var I6=s(pn);_Lr=r(I6,"The model class to instantiate is selected based on the "),eTe=n(I6,"CODE",{});var y3t=s(eTe);bLr=r(y3t,"model_type"),y3t.forEach(t),vLr=r(I6,` property of the config object (either
passed as an argument or loaded from `),oTe=n(I6,"CODE",{});var L3t=s(oTe);FLr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),TLr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(I6,"CODE",{});var x3t=s(rTe);MLr=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),ELr=r(I6,":"),I6.forEach(t),CLr=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);qC=n(Xe,"LI",{});var ZPe=s(qC);tTe=n(ZPe,"STRONG",{});var $3t=s(tTe);wLr=r($3t,"bart"),$3t.forEach(t),ALr=r(ZPe," \u2014 "),CJ=n(ZPe,"A",{href:!0});var k3t=s(CJ);yLr=r(k3t,"FlaxBartForCausalLM"),k3t.forEach(t),LLr=r(ZPe," (BART model)"),ZPe.forEach(t),xLr=i(Xe),NC=n(Xe,"LI",{});var eBe=s(NC);aTe=n(eBe,"STRONG",{});var S3t=s(aTe);$Lr=r(S3t,"bert"),S3t.forEach(t),kLr=r(eBe," \u2014 "),wJ=n(eBe,"A",{href:!0});var R3t=s(wJ);SLr=r(R3t,"FlaxBertForCausalLM"),R3t.forEach(t),RLr=r(eBe," (BERT model)"),eBe.forEach(t),PLr=i(Xe),jC=n(Xe,"LI",{});var oBe=s(jC);nTe=n(oBe,"STRONG",{});var P3t=s(nTe);BLr=r(P3t,"big_bird"),P3t.forEach(t),ILr=r(oBe," \u2014 "),AJ=n(oBe,"A",{href:!0});var B3t=s(AJ);qLr=r(B3t,"FlaxBigBirdForCausalLM"),B3t.forEach(t),NLr=r(oBe," (BigBird model)"),oBe.forEach(t),jLr=i(Xe),DC=n(Xe,"LI",{});var rBe=s(DC);sTe=n(rBe,"STRONG",{});var I3t=s(sTe);DLr=r(I3t,"electra"),I3t.forEach(t),GLr=r(rBe," \u2014 "),yJ=n(rBe,"A",{href:!0});var q3t=s(yJ);OLr=r(q3t,"FlaxElectraForCausalLM"),q3t.forEach(t),VLr=r(rBe," (ELECTRA model)"),rBe.forEach(t),XLr=i(Xe),GC=n(Xe,"LI",{});var tBe=s(GC);lTe=n(tBe,"STRONG",{});var N3t=s(lTe);zLr=r(N3t,"gpt2"),N3t.forEach(t),WLr=r(tBe," \u2014 "),LJ=n(tBe,"A",{href:!0});var j3t=s(LJ);QLr=r(j3t,"FlaxGPT2LMHeadModel"),j3t.forEach(t),HLr=r(tBe," (OpenAI GPT-2 model)"),tBe.forEach(t),ULr=i(Xe),OC=n(Xe,"LI",{});var aBe=s(OC);iTe=n(aBe,"STRONG",{});var D3t=s(iTe);JLr=r(D3t,"gpt_neo"),D3t.forEach(t),YLr=r(aBe," \u2014 "),xJ=n(aBe,"A",{href:!0});var G3t=s(xJ);KLr=r(G3t,"FlaxGPTNeoForCausalLM"),G3t.forEach(t),ZLr=r(aBe," (GPT Neo model)"),aBe.forEach(t),e8r=i(Xe),VC=n(Xe,"LI",{});var nBe=s(VC);dTe=n(nBe,"STRONG",{});var O3t=s(dTe);o8r=r(O3t,"gptj"),O3t.forEach(t),r8r=r(nBe," \u2014 "),$J=n(nBe,"A",{href:!0});var V3t=s($J);t8r=r(V3t,"FlaxGPTJForCausalLM"),V3t.forEach(t),a8r=r(nBe," (GPT-J model)"),nBe.forEach(t),n8r=i(Xe),XC=n(Xe,"LI",{});var sBe=s(XC);cTe=n(sBe,"STRONG",{});var X3t=s(cTe);s8r=r(X3t,"roberta"),X3t.forEach(t),l8r=r(sBe," \u2014 "),kJ=n(sBe,"A",{href:!0});var z3t=s(kJ);i8r=r(z3t,"FlaxRobertaForCausalLM"),z3t.forEach(t),d8r=r(sBe," (RoBERTa model)"),sBe.forEach(t),c8r=i(Xe),zC=n(Xe,"LI",{});var lBe=s(zC);fTe=n(lBe,"STRONG",{});var W3t=s(fTe);f8r=r(W3t,"xglm"),W3t.forEach(t),m8r=r(lBe," \u2014 "),SJ=n(lBe,"A",{href:!0});var Q3t=s(SJ);g8r=r(Q3t,"FlaxXGLMForCausalLM"),Q3t.forEach(t),h8r=r(lBe," (XGLM model)"),lBe.forEach(t),Xe.forEach(t),p8r=i(Vl),T(WC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),iNe=i(f),Pc=n(f,"H2",{class:!0});var pDe=s(Pc);QC=n(pDe,"A",{id:!0,class:!0,href:!0});var H3t=s(QC);mTe=n(H3t,"SPAN",{});var U3t=s(mTe);T(px.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),u8r=i(pDe),gTe=n(pDe,"SPAN",{});var J3t=s(gTe);_8r=r(J3t,"FlaxAutoModelForPreTraining"),J3t.forEach(t),pDe.forEach(t),dNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(ux.$$.fragment,Xl),b8r=i(Xl),Bc=n(Xl,"P",{});var KZ=s(Bc);v8r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=n(KZ,"A",{href:!0});var Y3t=s(RJ);F8r=r(Y3t,"from_pretrained()"),Y3t.forEach(t),T8r=r(KZ," class method or the "),PJ=n(KZ,"A",{href:!0});var K3t=s(PJ);M8r=r(K3t,"from_config()"),K3t.forEach(t),E8r=r(KZ,` class
method.`),KZ.forEach(t),C8r=i(Xl),_x=n(Xl,"P",{});var uDe=s(_x);w8r=r(uDe,"This class cannot be instantiated directly using "),hTe=n(uDe,"CODE",{});var Z3t=s(hTe);A8r=r(Z3t,"__init__()"),Z3t.forEach(t),y8r=r(uDe," (throws an error)."),uDe.forEach(t),L8r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var q6=s(Vt);T(bx.$$.fragment,q6),x8r=i(q6),pTe=n(q6,"P",{});var ewt=s(pTe);$8r=r(ewt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ewt.forEach(t),k8r=i(q6),Ic=n(q6,"P",{});var ZZ=s(Ic);S8r=r(ZZ,`Note:
Loading a model from its configuration file does `),uTe=n(ZZ,"STRONG",{});var owt=s(uTe);R8r=r(owt,"not"),owt.forEach(t),P8r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(ZZ,"A",{href:!0});var rwt=s(BJ);B8r=r(rwt,"from_pretrained()"),rwt.forEach(t),I8r=r(ZZ," to load the model weights."),ZZ.forEach(t),q8r=i(q6),T(HC.$$.fragment,q6),q6.forEach(t),N8r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(vx.$$.fragment,zl),j8r=i(zl),_Te=n(zl,"P",{});var twt=s(_Te);D8r=r(twt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),twt.forEach(t),G8r=i(zl),un=n(zl,"P",{});var N6=s(un);O8r=r(N6,"The model class to instantiate is selected based on the "),bTe=n(N6,"CODE",{});var awt=s(bTe);V8r=r(awt,"model_type"),awt.forEach(t),X8r=r(N6,` property of the config object (either
passed as an argument or loaded from `),vTe=n(N6,"CODE",{});var nwt=s(vTe);z8r=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),W8r=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(N6,"CODE",{});var swt=s(FTe);Q8r=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),H8r=r(N6,":"),N6.forEach(t),U8r=i(zl),Me=n(zl,"UL",{});var we=s(Me);UC=n(we,"LI",{});var iBe=s(UC);TTe=n(iBe,"STRONG",{});var lwt=s(TTe);J8r=r(lwt,"albert"),lwt.forEach(t),Y8r=r(iBe," \u2014 "),IJ=n(iBe,"A",{href:!0});var iwt=s(IJ);K8r=r(iwt,"FlaxAlbertForPreTraining"),iwt.forEach(t),Z8r=r(iBe," (ALBERT model)"),iBe.forEach(t),exr=i(we),JC=n(we,"LI",{});var dBe=s(JC);MTe=n(dBe,"STRONG",{});var dwt=s(MTe);oxr=r(dwt,"bart"),dwt.forEach(t),rxr=r(dBe," \u2014 "),qJ=n(dBe,"A",{href:!0});var cwt=s(qJ);txr=r(cwt,"FlaxBartForConditionalGeneration"),cwt.forEach(t),axr=r(dBe," (BART model)"),dBe.forEach(t),nxr=i(we),YC=n(we,"LI",{});var cBe=s(YC);ETe=n(cBe,"STRONG",{});var fwt=s(ETe);sxr=r(fwt,"bert"),fwt.forEach(t),lxr=r(cBe," \u2014 "),NJ=n(cBe,"A",{href:!0});var mwt=s(NJ);ixr=r(mwt,"FlaxBertForPreTraining"),mwt.forEach(t),dxr=r(cBe," (BERT model)"),cBe.forEach(t),cxr=i(we),KC=n(we,"LI",{});var fBe=s(KC);CTe=n(fBe,"STRONG",{});var gwt=s(CTe);fxr=r(gwt,"big_bird"),gwt.forEach(t),mxr=r(fBe," \u2014 "),jJ=n(fBe,"A",{href:!0});var hwt=s(jJ);gxr=r(hwt,"FlaxBigBirdForPreTraining"),hwt.forEach(t),hxr=r(fBe," (BigBird model)"),fBe.forEach(t),pxr=i(we),ZC=n(we,"LI",{});var mBe=s(ZC);wTe=n(mBe,"STRONG",{});var pwt=s(wTe);uxr=r(pwt,"electra"),pwt.forEach(t),_xr=r(mBe," \u2014 "),DJ=n(mBe,"A",{href:!0});var uwt=s(DJ);bxr=r(uwt,"FlaxElectraForPreTraining"),uwt.forEach(t),vxr=r(mBe," (ELECTRA model)"),mBe.forEach(t),Fxr=i(we),e3=n(we,"LI",{});var gBe=s(e3);ATe=n(gBe,"STRONG",{});var _wt=s(ATe);Txr=r(_wt,"mbart"),_wt.forEach(t),Mxr=r(gBe," \u2014 "),GJ=n(gBe,"A",{href:!0});var bwt=s(GJ);Exr=r(bwt,"FlaxMBartForConditionalGeneration"),bwt.forEach(t),Cxr=r(gBe," (mBART model)"),gBe.forEach(t),wxr=i(we),o3=n(we,"LI",{});var hBe=s(o3);yTe=n(hBe,"STRONG",{});var vwt=s(yTe);Axr=r(vwt,"mt5"),vwt.forEach(t),yxr=r(hBe," \u2014 "),OJ=n(hBe,"A",{href:!0});var Fwt=s(OJ);Lxr=r(Fwt,"FlaxMT5ForConditionalGeneration"),Fwt.forEach(t),xxr=r(hBe," (mT5 model)"),hBe.forEach(t),$xr=i(we),r3=n(we,"LI",{});var pBe=s(r3);LTe=n(pBe,"STRONG",{});var Twt=s(LTe);kxr=r(Twt,"roberta"),Twt.forEach(t),Sxr=r(pBe," \u2014 "),VJ=n(pBe,"A",{href:!0});var Mwt=s(VJ);Rxr=r(Mwt,"FlaxRobertaForMaskedLM"),Mwt.forEach(t),Pxr=r(pBe," (RoBERTa model)"),pBe.forEach(t),Bxr=i(we),t3=n(we,"LI",{});var uBe=s(t3);xTe=n(uBe,"STRONG",{});var Ewt=s(xTe);Ixr=r(Ewt,"roformer"),Ewt.forEach(t),qxr=r(uBe," \u2014 "),XJ=n(uBe,"A",{href:!0});var Cwt=s(XJ);Nxr=r(Cwt,"FlaxRoFormerForMaskedLM"),Cwt.forEach(t),jxr=r(uBe," (RoFormer model)"),uBe.forEach(t),Dxr=i(we),a3=n(we,"LI",{});var _Be=s(a3);$Te=n(_Be,"STRONG",{});var wwt=s($Te);Gxr=r(wwt,"t5"),wwt.forEach(t),Oxr=r(_Be," \u2014 "),zJ=n(_Be,"A",{href:!0});var Awt=s(zJ);Vxr=r(Awt,"FlaxT5ForConditionalGeneration"),Awt.forEach(t),Xxr=r(_Be," (T5 model)"),_Be.forEach(t),zxr=i(we),n3=n(we,"LI",{});var bBe=s(n3);kTe=n(bBe,"STRONG",{});var ywt=s(kTe);Wxr=r(ywt,"wav2vec2"),ywt.forEach(t),Qxr=r(bBe," \u2014 "),WJ=n(bBe,"A",{href:!0});var Lwt=s(WJ);Hxr=r(Lwt,"FlaxWav2Vec2ForPreTraining"),Lwt.forEach(t),Uxr=r(bBe," (Wav2Vec2 model)"),bBe.forEach(t),Jxr=i(we),s3=n(we,"LI",{});var vBe=s(s3);STe=n(vBe,"STRONG",{});var xwt=s(STe);Yxr=r(xwt,"xlm-roberta"),xwt.forEach(t),Kxr=r(vBe," \u2014 "),QJ=n(vBe,"A",{href:!0});var $wt=s(QJ);Zxr=r($wt,"FlaxXLMRobertaForMaskedLM"),$wt.forEach(t),e9r=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),we.forEach(t),o9r=i(zl),T(l3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),cNe=i(f),qc=n(f,"H2",{class:!0});var _De=s(qc);i3=n(_De,"A",{id:!0,class:!0,href:!0});var kwt=s(i3);RTe=n(kwt,"SPAN",{});var Swt=s(RTe);T(Fx.$$.fragment,Swt),Swt.forEach(t),kwt.forEach(t),r9r=i(_De),PTe=n(_De,"SPAN",{});var Rwt=s(PTe);t9r=r(Rwt,"FlaxAutoModelForMaskedLM"),Rwt.forEach(t),_De.forEach(t),fNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(Tx.$$.fragment,Wl),a9r=i(Wl),Nc=n(Wl,"P",{});var eee=s(Nc);n9r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HJ=n(eee,"A",{href:!0});var Pwt=s(HJ);s9r=r(Pwt,"from_pretrained()"),Pwt.forEach(t),l9r=r(eee," class method or the "),UJ=n(eee,"A",{href:!0});var Bwt=s(UJ);i9r=r(Bwt,"from_config()"),Bwt.forEach(t),d9r=r(eee,` class
method.`),eee.forEach(t),c9r=i(Wl),Mx=n(Wl,"P",{});var bDe=s(Mx);f9r=r(bDe,"This class cannot be instantiated directly using "),BTe=n(bDe,"CODE",{});var Iwt=s(BTe);m9r=r(Iwt,"__init__()"),Iwt.forEach(t),g9r=r(bDe," (throws an error)."),bDe.forEach(t),h9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var j6=s(Xt);T(Ex.$$.fragment,j6),p9r=i(j6),ITe=n(j6,"P",{});var qwt=s(ITe);u9r=r(qwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qwt.forEach(t),_9r=i(j6),jc=n(j6,"P",{});var oee=s(jc);b9r=r(oee,`Note:
Loading a model from its configuration file does `),qTe=n(oee,"STRONG",{});var Nwt=s(qTe);v9r=r(Nwt,"not"),Nwt.forEach(t),F9r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(oee,"A",{href:!0});var jwt=s(JJ);T9r=r(jwt,"from_pretrained()"),jwt.forEach(t),M9r=r(oee," to load the model weights."),oee.forEach(t),E9r=i(j6),T(d3.$$.fragment,j6),j6.forEach(t),C9r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(Cx.$$.fragment,Ql),w9r=i(Ql),NTe=n(Ql,"P",{});var Dwt=s(NTe);A9r=r(Dwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dwt.forEach(t),y9r=i(Ql),_n=n(Ql,"P",{});var D6=s(_n);L9r=r(D6,"The model class to instantiate is selected based on the "),jTe=n(D6,"CODE",{});var Gwt=s(jTe);x9r=r(Gwt,"model_type"),Gwt.forEach(t),$9r=r(D6,` property of the config object (either
passed as an argument or loaded from `),DTe=n(D6,"CODE",{});var Owt=s(DTe);k9r=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),S9r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(D6,"CODE",{});var Vwt=s(GTe);R9r=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),P9r=r(D6,":"),D6.forEach(t),B9r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);c3=n(Ie,"LI",{});var FBe=s(c3);OTe=n(FBe,"STRONG",{});var Xwt=s(OTe);I9r=r(Xwt,"albert"),Xwt.forEach(t),q9r=r(FBe," \u2014 "),YJ=n(FBe,"A",{href:!0});var zwt=s(YJ);N9r=r(zwt,"FlaxAlbertForMaskedLM"),zwt.forEach(t),j9r=r(FBe," (ALBERT model)"),FBe.forEach(t),D9r=i(Ie),f3=n(Ie,"LI",{});var TBe=s(f3);VTe=n(TBe,"STRONG",{});var Wwt=s(VTe);G9r=r(Wwt,"bart"),Wwt.forEach(t),O9r=r(TBe," \u2014 "),KJ=n(TBe,"A",{href:!0});var Qwt=s(KJ);V9r=r(Qwt,"FlaxBartForConditionalGeneration"),Qwt.forEach(t),X9r=r(TBe," (BART model)"),TBe.forEach(t),z9r=i(Ie),m3=n(Ie,"LI",{});var MBe=s(m3);XTe=n(MBe,"STRONG",{});var Hwt=s(XTe);W9r=r(Hwt,"bert"),Hwt.forEach(t),Q9r=r(MBe," \u2014 "),ZJ=n(MBe,"A",{href:!0});var Uwt=s(ZJ);H9r=r(Uwt,"FlaxBertForMaskedLM"),Uwt.forEach(t),U9r=r(MBe," (BERT model)"),MBe.forEach(t),J9r=i(Ie),g3=n(Ie,"LI",{});var EBe=s(g3);zTe=n(EBe,"STRONG",{});var Jwt=s(zTe);Y9r=r(Jwt,"big_bird"),Jwt.forEach(t),K9r=r(EBe," \u2014 "),eY=n(EBe,"A",{href:!0});var Ywt=s(eY);Z9r=r(Ywt,"FlaxBigBirdForMaskedLM"),Ywt.forEach(t),e$r=r(EBe," (BigBird model)"),EBe.forEach(t),o$r=i(Ie),h3=n(Ie,"LI",{});var CBe=s(h3);WTe=n(CBe,"STRONG",{});var Kwt=s(WTe);r$r=r(Kwt,"distilbert"),Kwt.forEach(t),t$r=r(CBe," \u2014 "),oY=n(CBe,"A",{href:!0});var Zwt=s(oY);a$r=r(Zwt,"FlaxDistilBertForMaskedLM"),Zwt.forEach(t),n$r=r(CBe," (DistilBERT model)"),CBe.forEach(t),s$r=i(Ie),p3=n(Ie,"LI",{});var wBe=s(p3);QTe=n(wBe,"STRONG",{});var eAt=s(QTe);l$r=r(eAt,"electra"),eAt.forEach(t),i$r=r(wBe," \u2014 "),rY=n(wBe,"A",{href:!0});var oAt=s(rY);d$r=r(oAt,"FlaxElectraForMaskedLM"),oAt.forEach(t),c$r=r(wBe," (ELECTRA model)"),wBe.forEach(t),f$r=i(Ie),u3=n(Ie,"LI",{});var ABe=s(u3);HTe=n(ABe,"STRONG",{});var rAt=s(HTe);m$r=r(rAt,"mbart"),rAt.forEach(t),g$r=r(ABe," \u2014 "),tY=n(ABe,"A",{href:!0});var tAt=s(tY);h$r=r(tAt,"FlaxMBartForConditionalGeneration"),tAt.forEach(t),p$r=r(ABe," (mBART model)"),ABe.forEach(t),u$r=i(Ie),_3=n(Ie,"LI",{});var yBe=s(_3);UTe=n(yBe,"STRONG",{});var aAt=s(UTe);_$r=r(aAt,"roberta"),aAt.forEach(t),b$r=r(yBe," \u2014 "),aY=n(yBe,"A",{href:!0});var nAt=s(aY);v$r=r(nAt,"FlaxRobertaForMaskedLM"),nAt.forEach(t),F$r=r(yBe," (RoBERTa model)"),yBe.forEach(t),T$r=i(Ie),b3=n(Ie,"LI",{});var LBe=s(b3);JTe=n(LBe,"STRONG",{});var sAt=s(JTe);M$r=r(sAt,"roformer"),sAt.forEach(t),E$r=r(LBe," \u2014 "),nY=n(LBe,"A",{href:!0});var lAt=s(nY);C$r=r(lAt,"FlaxRoFormerForMaskedLM"),lAt.forEach(t),w$r=r(LBe," (RoFormer model)"),LBe.forEach(t),A$r=i(Ie),v3=n(Ie,"LI",{});var xBe=s(v3);YTe=n(xBe,"STRONG",{});var iAt=s(YTe);y$r=r(iAt,"xlm-roberta"),iAt.forEach(t),L$r=r(xBe," \u2014 "),sY=n(xBe,"A",{href:!0});var dAt=s(sY);x$r=r(dAt,"FlaxXLMRobertaForMaskedLM"),dAt.forEach(t),$$r=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),Ie.forEach(t),k$r=i(Ql),T(F3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),mNe=i(f),Dc=n(f,"H2",{class:!0});var vDe=s(Dc);T3=n(vDe,"A",{id:!0,class:!0,href:!0});var cAt=s(T3);KTe=n(cAt,"SPAN",{});var fAt=s(KTe);T(wx.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),S$r=i(vDe),ZTe=n(vDe,"SPAN",{});var mAt=s(ZTe);R$r=r(mAt,"FlaxAutoModelForSeq2SeqLM"),mAt.forEach(t),vDe.forEach(t),gNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(Ax.$$.fragment,Hl),P$r=i(Hl),Gc=n(Hl,"P",{});var ree=s(Gc);B$r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lY=n(ree,"A",{href:!0});var gAt=s(lY);I$r=r(gAt,"from_pretrained()"),gAt.forEach(t),q$r=r(ree," class method or the "),iY=n(ree,"A",{href:!0});var hAt=s(iY);N$r=r(hAt,"from_config()"),hAt.forEach(t),j$r=r(ree,` class
method.`),ree.forEach(t),D$r=i(Hl),yx=n(Hl,"P",{});var FDe=s(yx);G$r=r(FDe,"This class cannot be instantiated directly using "),eMe=n(FDe,"CODE",{});var pAt=s(eMe);O$r=r(pAt,"__init__()"),pAt.forEach(t),V$r=r(FDe," (throws an error)."),FDe.forEach(t),X$r=i(Hl),zt=n(Hl,"DIV",{class:!0});var G6=s(zt);T(Lx.$$.fragment,G6),z$r=i(G6),oMe=n(G6,"P",{});var uAt=s(oMe);W$r=r(uAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uAt.forEach(t),Q$r=i(G6),Oc=n(G6,"P",{});var tee=s(Oc);H$r=r(tee,`Note:
Loading a model from its configuration file does `),rMe=n(tee,"STRONG",{});var _At=s(rMe);U$r=r(_At,"not"),_At.forEach(t),J$r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(tee,"A",{href:!0});var bAt=s(dY);Y$r=r(bAt,"from_pretrained()"),bAt.forEach(t),K$r=r(tee," to load the model weights."),tee.forEach(t),Z$r=i(G6),T(M3.$$.fragment,G6),G6.forEach(t),ekr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(xx.$$.fragment,Ul),okr=i(Ul),tMe=n(Ul,"P",{});var vAt=s(tMe);rkr=r(vAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vAt.forEach(t),tkr=i(Ul),bn=n(Ul,"P",{});var O6=s(bn);akr=r(O6,"The model class to instantiate is selected based on the "),aMe=n(O6,"CODE",{});var FAt=s(aMe);nkr=r(FAt,"model_type"),FAt.forEach(t),skr=r(O6,` property of the config object (either
passed as an argument or loaded from `),nMe=n(O6,"CODE",{});var TAt=s(nMe);lkr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),ikr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(O6,"CODE",{});var MAt=s(sMe);dkr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),ckr=r(O6,":"),O6.forEach(t),fkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);E3=n(ze,"LI",{});var $Be=s(E3);lMe=n($Be,"STRONG",{});var EAt=s(lMe);mkr=r(EAt,"bart"),EAt.forEach(t),gkr=r($Be," \u2014 "),cY=n($Be,"A",{href:!0});var CAt=s(cY);hkr=r(CAt,"FlaxBartForConditionalGeneration"),CAt.forEach(t),pkr=r($Be," (BART model)"),$Be.forEach(t),ukr=i(ze),C3=n(ze,"LI",{});var kBe=s(C3);iMe=n(kBe,"STRONG",{});var wAt=s(iMe);_kr=r(wAt,"blenderbot"),wAt.forEach(t),bkr=r(kBe," \u2014 "),fY=n(kBe,"A",{href:!0});var AAt=s(fY);vkr=r(AAt,"FlaxBlenderbotForConditionalGeneration"),AAt.forEach(t),Fkr=r(kBe," (Blenderbot model)"),kBe.forEach(t),Tkr=i(ze),w3=n(ze,"LI",{});var SBe=s(w3);dMe=n(SBe,"STRONG",{});var yAt=s(dMe);Mkr=r(yAt,"blenderbot-small"),yAt.forEach(t),Ekr=r(SBe," \u2014 "),mY=n(SBe,"A",{href:!0});var LAt=s(mY);Ckr=r(LAt,"FlaxBlenderbotSmallForConditionalGeneration"),LAt.forEach(t),wkr=r(SBe," (BlenderbotSmall model)"),SBe.forEach(t),Akr=i(ze),A3=n(ze,"LI",{});var RBe=s(A3);cMe=n(RBe,"STRONG",{});var xAt=s(cMe);ykr=r(xAt,"encoder-decoder"),xAt.forEach(t),Lkr=r(RBe," \u2014 "),gY=n(RBe,"A",{href:!0});var $At=s(gY);xkr=r($At,"FlaxEncoderDecoderModel"),$At.forEach(t),$kr=r(RBe," (Encoder decoder model)"),RBe.forEach(t),kkr=i(ze),y3=n(ze,"LI",{});var PBe=s(y3);fMe=n(PBe,"STRONG",{});var kAt=s(fMe);Skr=r(kAt,"marian"),kAt.forEach(t),Rkr=r(PBe," \u2014 "),hY=n(PBe,"A",{href:!0});var SAt=s(hY);Pkr=r(SAt,"FlaxMarianMTModel"),SAt.forEach(t),Bkr=r(PBe," (Marian model)"),PBe.forEach(t),Ikr=i(ze),L3=n(ze,"LI",{});var BBe=s(L3);mMe=n(BBe,"STRONG",{});var RAt=s(mMe);qkr=r(RAt,"mbart"),RAt.forEach(t),Nkr=r(BBe," \u2014 "),pY=n(BBe,"A",{href:!0});var PAt=s(pY);jkr=r(PAt,"FlaxMBartForConditionalGeneration"),PAt.forEach(t),Dkr=r(BBe," (mBART model)"),BBe.forEach(t),Gkr=i(ze),x3=n(ze,"LI",{});var IBe=s(x3);gMe=n(IBe,"STRONG",{});var BAt=s(gMe);Okr=r(BAt,"mt5"),BAt.forEach(t),Vkr=r(IBe," \u2014 "),uY=n(IBe,"A",{href:!0});var IAt=s(uY);Xkr=r(IAt,"FlaxMT5ForConditionalGeneration"),IAt.forEach(t),zkr=r(IBe," (mT5 model)"),IBe.forEach(t),Wkr=i(ze),$3=n(ze,"LI",{});var qBe=s($3);hMe=n(qBe,"STRONG",{});var qAt=s(hMe);Qkr=r(qAt,"pegasus"),qAt.forEach(t),Hkr=r(qBe," \u2014 "),_Y=n(qBe,"A",{href:!0});var NAt=s(_Y);Ukr=r(NAt,"FlaxPegasusForConditionalGeneration"),NAt.forEach(t),Jkr=r(qBe," (Pegasus model)"),qBe.forEach(t),Ykr=i(ze),k3=n(ze,"LI",{});var NBe=s(k3);pMe=n(NBe,"STRONG",{});var jAt=s(pMe);Kkr=r(jAt,"t5"),jAt.forEach(t),Zkr=r(NBe," \u2014 "),bY=n(NBe,"A",{href:!0});var DAt=s(bY);eSr=r(DAt,"FlaxT5ForConditionalGeneration"),DAt.forEach(t),oSr=r(NBe," (T5 model)"),NBe.forEach(t),ze.forEach(t),rSr=i(Ul),T(S3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),hNe=i(f),Vc=n(f,"H2",{class:!0});var TDe=s(Vc);R3=n(TDe,"A",{id:!0,class:!0,href:!0});var GAt=s(R3);uMe=n(GAt,"SPAN",{});var OAt=s(uMe);T($x.$$.fragment,OAt),OAt.forEach(t),GAt.forEach(t),tSr=i(TDe),_Me=n(TDe,"SPAN",{});var VAt=s(_Me);aSr=r(VAt,"FlaxAutoModelForSequenceClassification"),VAt.forEach(t),TDe.forEach(t),pNe=i(f),ur=n(f,"DIV",{class:!0});var Jl=s(ur);T(kx.$$.fragment,Jl),nSr=i(Jl),Xc=n(Jl,"P",{});var aee=s(Xc);sSr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vY=n(aee,"A",{href:!0});var XAt=s(vY);lSr=r(XAt,"from_pretrained()"),XAt.forEach(t),iSr=r(aee," class method or the "),FY=n(aee,"A",{href:!0});var zAt=s(FY);dSr=r(zAt,"from_config()"),zAt.forEach(t),cSr=r(aee,` class
method.`),aee.forEach(t),fSr=i(Jl),Sx=n(Jl,"P",{});var MDe=s(Sx);mSr=r(MDe,"This class cannot be instantiated directly using "),bMe=n(MDe,"CODE",{});var WAt=s(bMe);gSr=r(WAt,"__init__()"),WAt.forEach(t),hSr=r(MDe," (throws an error)."),MDe.forEach(t),pSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var V6=s(Wt);T(Rx.$$.fragment,V6),uSr=i(V6),vMe=n(V6,"P",{});var QAt=s(vMe);_Sr=r(QAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QAt.forEach(t),bSr=i(V6),zc=n(V6,"P",{});var nee=s(zc);vSr=r(nee,`Note:
Loading a model from its configuration file does `),FMe=n(nee,"STRONG",{});var HAt=s(FMe);FSr=r(HAt,"not"),HAt.forEach(t),TSr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(nee,"A",{href:!0});var UAt=s(TY);MSr=r(UAt,"from_pretrained()"),UAt.forEach(t),ESr=r(nee," to load the model weights."),nee.forEach(t),CSr=i(V6),T(P3.$$.fragment,V6),V6.forEach(t),wSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(Px.$$.fragment,Yl),ASr=i(Yl),TMe=n(Yl,"P",{});var JAt=s(TMe);ySr=r(JAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JAt.forEach(t),LSr=i(Yl),vn=n(Yl,"P",{});var X6=s(vn);xSr=r(X6,"The model class to instantiate is selected based on the "),MMe=n(X6,"CODE",{});var YAt=s(MMe);$Sr=r(YAt,"model_type"),YAt.forEach(t),kSr=r(X6,` property of the config object (either
passed as an argument or loaded from `),EMe=n(X6,"CODE",{});var KAt=s(EMe);SSr=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),RSr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(X6,"CODE",{});var ZAt=s(CMe);PSr=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),BSr=r(X6,":"),X6.forEach(t),ISr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);B3=n(qe,"LI",{});var jBe=s(B3);wMe=n(jBe,"STRONG",{});var e6t=s(wMe);qSr=r(e6t,"albert"),e6t.forEach(t),NSr=r(jBe," \u2014 "),MY=n(jBe,"A",{href:!0});var o6t=s(MY);jSr=r(o6t,"FlaxAlbertForSequenceClassification"),o6t.forEach(t),DSr=r(jBe," (ALBERT model)"),jBe.forEach(t),GSr=i(qe),I3=n(qe,"LI",{});var DBe=s(I3);AMe=n(DBe,"STRONG",{});var r6t=s(AMe);OSr=r(r6t,"bart"),r6t.forEach(t),VSr=r(DBe," \u2014 "),EY=n(DBe,"A",{href:!0});var t6t=s(EY);XSr=r(t6t,"FlaxBartForSequenceClassification"),t6t.forEach(t),zSr=r(DBe," (BART model)"),DBe.forEach(t),WSr=i(qe),q3=n(qe,"LI",{});var GBe=s(q3);yMe=n(GBe,"STRONG",{});var a6t=s(yMe);QSr=r(a6t,"bert"),a6t.forEach(t),HSr=r(GBe," \u2014 "),CY=n(GBe,"A",{href:!0});var n6t=s(CY);USr=r(n6t,"FlaxBertForSequenceClassification"),n6t.forEach(t),JSr=r(GBe," (BERT model)"),GBe.forEach(t),YSr=i(qe),N3=n(qe,"LI",{});var OBe=s(N3);LMe=n(OBe,"STRONG",{});var s6t=s(LMe);KSr=r(s6t,"big_bird"),s6t.forEach(t),ZSr=r(OBe," \u2014 "),wY=n(OBe,"A",{href:!0});var l6t=s(wY);eRr=r(l6t,"FlaxBigBirdForSequenceClassification"),l6t.forEach(t),oRr=r(OBe," (BigBird model)"),OBe.forEach(t),rRr=i(qe),j3=n(qe,"LI",{});var VBe=s(j3);xMe=n(VBe,"STRONG",{});var i6t=s(xMe);tRr=r(i6t,"distilbert"),i6t.forEach(t),aRr=r(VBe," \u2014 "),AY=n(VBe,"A",{href:!0});var d6t=s(AY);nRr=r(d6t,"FlaxDistilBertForSequenceClassification"),d6t.forEach(t),sRr=r(VBe," (DistilBERT model)"),VBe.forEach(t),lRr=i(qe),D3=n(qe,"LI",{});var XBe=s(D3);$Me=n(XBe,"STRONG",{});var c6t=s($Me);iRr=r(c6t,"electra"),c6t.forEach(t),dRr=r(XBe," \u2014 "),yY=n(XBe,"A",{href:!0});var f6t=s(yY);cRr=r(f6t,"FlaxElectraForSequenceClassification"),f6t.forEach(t),fRr=r(XBe," (ELECTRA model)"),XBe.forEach(t),mRr=i(qe),G3=n(qe,"LI",{});var zBe=s(G3);kMe=n(zBe,"STRONG",{});var m6t=s(kMe);gRr=r(m6t,"mbart"),m6t.forEach(t),hRr=r(zBe," \u2014 "),LY=n(zBe,"A",{href:!0});var g6t=s(LY);pRr=r(g6t,"FlaxMBartForSequenceClassification"),g6t.forEach(t),uRr=r(zBe," (mBART model)"),zBe.forEach(t),_Rr=i(qe),O3=n(qe,"LI",{});var WBe=s(O3);SMe=n(WBe,"STRONG",{});var h6t=s(SMe);bRr=r(h6t,"roberta"),h6t.forEach(t),vRr=r(WBe," \u2014 "),xY=n(WBe,"A",{href:!0});var p6t=s(xY);FRr=r(p6t,"FlaxRobertaForSequenceClassification"),p6t.forEach(t),TRr=r(WBe," (RoBERTa model)"),WBe.forEach(t),MRr=i(qe),V3=n(qe,"LI",{});var QBe=s(V3);RMe=n(QBe,"STRONG",{});var u6t=s(RMe);ERr=r(u6t,"roformer"),u6t.forEach(t),CRr=r(QBe," \u2014 "),$Y=n(QBe,"A",{href:!0});var _6t=s($Y);wRr=r(_6t,"FlaxRoFormerForSequenceClassification"),_6t.forEach(t),ARr=r(QBe," (RoFormer model)"),QBe.forEach(t),yRr=i(qe),X3=n(qe,"LI",{});var HBe=s(X3);PMe=n(HBe,"STRONG",{});var b6t=s(PMe);LRr=r(b6t,"xlm-roberta"),b6t.forEach(t),xRr=r(HBe," \u2014 "),kY=n(HBe,"A",{href:!0});var v6t=s(kY);$Rr=r(v6t,"FlaxXLMRobertaForSequenceClassification"),v6t.forEach(t),kRr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),qe.forEach(t),SRr=i(Yl),T(z3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),uNe=i(f),Wc=n(f,"H2",{class:!0});var EDe=s(Wc);W3=n(EDe,"A",{id:!0,class:!0,href:!0});var F6t=s(W3);BMe=n(F6t,"SPAN",{});var T6t=s(BMe);T(Bx.$$.fragment,T6t),T6t.forEach(t),F6t.forEach(t),RRr=i(EDe),IMe=n(EDe,"SPAN",{});var M6t=s(IMe);PRr=r(M6t,"FlaxAutoModelForQuestionAnswering"),M6t.forEach(t),EDe.forEach(t),_Ne=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(Ix.$$.fragment,Kl),BRr=i(Kl),Qc=n(Kl,"P",{});var see=s(Qc);IRr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=n(see,"A",{href:!0});var E6t=s(SY);qRr=r(E6t,"from_pretrained()"),E6t.forEach(t),NRr=r(see," class method or the "),RY=n(see,"A",{href:!0});var C6t=s(RY);jRr=r(C6t,"from_config()"),C6t.forEach(t),DRr=r(see,` class
method.`),see.forEach(t),GRr=i(Kl),qx=n(Kl,"P",{});var CDe=s(qx);ORr=r(CDe,"This class cannot be instantiated directly using "),qMe=n(CDe,"CODE",{});var w6t=s(qMe);VRr=r(w6t,"__init__()"),w6t.forEach(t),XRr=r(CDe," (throws an error)."),CDe.forEach(t),zRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var z6=s(Qt);T(Nx.$$.fragment,z6),WRr=i(z6),NMe=n(z6,"P",{});var A6t=s(NMe);QRr=r(A6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A6t.forEach(t),HRr=i(z6),Hc=n(z6,"P",{});var lee=s(Hc);URr=r(lee,`Note:
Loading a model from its configuration file does `),jMe=n(lee,"STRONG",{});var y6t=s(jMe);JRr=r(y6t,"not"),y6t.forEach(t),YRr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(lee,"A",{href:!0});var L6t=s(PY);KRr=r(L6t,"from_pretrained()"),L6t.forEach(t),ZRr=r(lee," to load the model weights."),lee.forEach(t),ePr=i(z6),T(Q3.$$.fragment,z6),z6.forEach(t),oPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(jx.$$.fragment,Zl),rPr=i(Zl),DMe=n(Zl,"P",{});var x6t=s(DMe);tPr=r(x6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x6t.forEach(t),aPr=i(Zl),Fn=n(Zl,"P",{});var W6=s(Fn);nPr=r(W6,"The model class to instantiate is selected based on the "),GMe=n(W6,"CODE",{});var $6t=s(GMe);sPr=r($6t,"model_type"),$6t.forEach(t),lPr=r(W6,` property of the config object (either
passed as an argument or loaded from `),OMe=n(W6,"CODE",{});var k6t=s(OMe);iPr=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),dPr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(W6,"CODE",{});var S6t=s(VMe);cPr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),fPr=r(W6,":"),W6.forEach(t),mPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);H3=n(Ne,"LI",{});var UBe=s(H3);XMe=n(UBe,"STRONG",{});var R6t=s(XMe);gPr=r(R6t,"albert"),R6t.forEach(t),hPr=r(UBe," \u2014 "),BY=n(UBe,"A",{href:!0});var P6t=s(BY);pPr=r(P6t,"FlaxAlbertForQuestionAnswering"),P6t.forEach(t),uPr=r(UBe," (ALBERT model)"),UBe.forEach(t),_Pr=i(Ne),U3=n(Ne,"LI",{});var JBe=s(U3);zMe=n(JBe,"STRONG",{});var B6t=s(zMe);bPr=r(B6t,"bart"),B6t.forEach(t),vPr=r(JBe," \u2014 "),IY=n(JBe,"A",{href:!0});var I6t=s(IY);FPr=r(I6t,"FlaxBartForQuestionAnswering"),I6t.forEach(t),TPr=r(JBe," (BART model)"),JBe.forEach(t),MPr=i(Ne),J3=n(Ne,"LI",{});var YBe=s(J3);WMe=n(YBe,"STRONG",{});var q6t=s(WMe);EPr=r(q6t,"bert"),q6t.forEach(t),CPr=r(YBe," \u2014 "),qY=n(YBe,"A",{href:!0});var N6t=s(qY);wPr=r(N6t,"FlaxBertForQuestionAnswering"),N6t.forEach(t),APr=r(YBe," (BERT model)"),YBe.forEach(t),yPr=i(Ne),Y3=n(Ne,"LI",{});var KBe=s(Y3);QMe=n(KBe,"STRONG",{});var j6t=s(QMe);LPr=r(j6t,"big_bird"),j6t.forEach(t),xPr=r(KBe," \u2014 "),NY=n(KBe,"A",{href:!0});var D6t=s(NY);$Pr=r(D6t,"FlaxBigBirdForQuestionAnswering"),D6t.forEach(t),kPr=r(KBe," (BigBird model)"),KBe.forEach(t),SPr=i(Ne),K3=n(Ne,"LI",{});var ZBe=s(K3);HMe=n(ZBe,"STRONG",{});var G6t=s(HMe);RPr=r(G6t,"distilbert"),G6t.forEach(t),PPr=r(ZBe," \u2014 "),jY=n(ZBe,"A",{href:!0});var O6t=s(jY);BPr=r(O6t,"FlaxDistilBertForQuestionAnswering"),O6t.forEach(t),IPr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),qPr=i(Ne),Z3=n(Ne,"LI",{});var eIe=s(Z3);UMe=n(eIe,"STRONG",{});var V6t=s(UMe);NPr=r(V6t,"electra"),V6t.forEach(t),jPr=r(eIe," \u2014 "),DY=n(eIe,"A",{href:!0});var X6t=s(DY);DPr=r(X6t,"FlaxElectraForQuestionAnswering"),X6t.forEach(t),GPr=r(eIe," (ELECTRA model)"),eIe.forEach(t),OPr=i(Ne),ew=n(Ne,"LI",{});var oIe=s(ew);JMe=n(oIe,"STRONG",{});var z6t=s(JMe);VPr=r(z6t,"mbart"),z6t.forEach(t),XPr=r(oIe," \u2014 "),GY=n(oIe,"A",{href:!0});var W6t=s(GY);zPr=r(W6t,"FlaxMBartForQuestionAnswering"),W6t.forEach(t),WPr=r(oIe," (mBART model)"),oIe.forEach(t),QPr=i(Ne),ow=n(Ne,"LI",{});var rIe=s(ow);YMe=n(rIe,"STRONG",{});var Q6t=s(YMe);HPr=r(Q6t,"roberta"),Q6t.forEach(t),UPr=r(rIe," \u2014 "),OY=n(rIe,"A",{href:!0});var H6t=s(OY);JPr=r(H6t,"FlaxRobertaForQuestionAnswering"),H6t.forEach(t),YPr=r(rIe," (RoBERTa model)"),rIe.forEach(t),KPr=i(Ne),rw=n(Ne,"LI",{});var tIe=s(rw);KMe=n(tIe,"STRONG",{});var U6t=s(KMe);ZPr=r(U6t,"roformer"),U6t.forEach(t),eBr=r(tIe," \u2014 "),VY=n(tIe,"A",{href:!0});var J6t=s(VY);oBr=r(J6t,"FlaxRoFormerForQuestionAnswering"),J6t.forEach(t),rBr=r(tIe," (RoFormer model)"),tIe.forEach(t),tBr=i(Ne),tw=n(Ne,"LI",{});var aIe=s(tw);ZMe=n(aIe,"STRONG",{});var Y6t=s(ZMe);aBr=r(Y6t,"xlm-roberta"),Y6t.forEach(t),nBr=r(aIe," \u2014 "),XY=n(aIe,"A",{href:!0});var K6t=s(XY);sBr=r(K6t,"FlaxXLMRobertaForQuestionAnswering"),K6t.forEach(t),lBr=r(aIe," (XLM-RoBERTa model)"),aIe.forEach(t),Ne.forEach(t),iBr=i(Zl),T(aw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),bNe=i(f),Uc=n(f,"H2",{class:!0});var wDe=s(Uc);nw=n(wDe,"A",{id:!0,class:!0,href:!0});var Z6t=s(nw);e4e=n(Z6t,"SPAN",{});var e0t=s(e4e);T(Dx.$$.fragment,e0t),e0t.forEach(t),Z6t.forEach(t),dBr=i(wDe),o4e=n(wDe,"SPAN",{});var o0t=s(o4e);cBr=r(o0t,"FlaxAutoModelForTokenClassification"),o0t.forEach(t),wDe.forEach(t),vNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(Gx.$$.fragment,ei),fBr=i(ei),Jc=n(ei,"P",{});var iee=s(Jc);mBr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=n(iee,"A",{href:!0});var r0t=s(zY);gBr=r(r0t,"from_pretrained()"),r0t.forEach(t),hBr=r(iee," class method or the "),WY=n(iee,"A",{href:!0});var t0t=s(WY);pBr=r(t0t,"from_config()"),t0t.forEach(t),uBr=r(iee,` class
method.`),iee.forEach(t),_Br=i(ei),Ox=n(ei,"P",{});var ADe=s(Ox);bBr=r(ADe,"This class cannot be instantiated directly using "),r4e=n(ADe,"CODE",{});var a0t=s(r4e);vBr=r(a0t,"__init__()"),a0t.forEach(t),FBr=r(ADe," (throws an error)."),ADe.forEach(t),TBr=i(ei),Ht=n(ei,"DIV",{class:!0});var Q6=s(Ht);T(Vx.$$.fragment,Q6),MBr=i(Q6),t4e=n(Q6,"P",{});var n0t=s(t4e);EBr=r(n0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n0t.forEach(t),CBr=i(Q6),Yc=n(Q6,"P",{});var dee=s(Yc);wBr=r(dee,`Note:
Loading a model from its configuration file does `),a4e=n(dee,"STRONG",{});var s0t=s(a4e);ABr=r(s0t,"not"),s0t.forEach(t),yBr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(dee,"A",{href:!0});var l0t=s(QY);LBr=r(l0t,"from_pretrained()"),l0t.forEach(t),xBr=r(dee," to load the model weights."),dee.forEach(t),$Br=i(Q6),T(sw.$$.fragment,Q6),Q6.forEach(t),kBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Xx.$$.fragment,oi),SBr=i(oi),n4e=n(oi,"P",{});var i0t=s(n4e);RBr=r(i0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i0t.forEach(t),PBr=i(oi),Tn=n(oi,"P",{});var H6=s(Tn);BBr=r(H6,"The model class to instantiate is selected based on the "),s4e=n(H6,"CODE",{});var d0t=s(s4e);IBr=r(d0t,"model_type"),d0t.forEach(t),qBr=r(H6,` property of the config object (either
passed as an argument or loaded from `),l4e=n(H6,"CODE",{});var c0t=s(l4e);NBr=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),jBr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(H6,"CODE",{});var f0t=s(i4e);DBr=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),GBr=r(H6,":"),H6.forEach(t),OBr=i(oi),De=n(oi,"UL",{});var Fo=s(De);lw=n(Fo,"LI",{});var nIe=s(lw);d4e=n(nIe,"STRONG",{});var m0t=s(d4e);VBr=r(m0t,"albert"),m0t.forEach(t),XBr=r(nIe," \u2014 "),HY=n(nIe,"A",{href:!0});var g0t=s(HY);zBr=r(g0t,"FlaxAlbertForTokenClassification"),g0t.forEach(t),WBr=r(nIe," (ALBERT model)"),nIe.forEach(t),QBr=i(Fo),iw=n(Fo,"LI",{});var sIe=s(iw);c4e=n(sIe,"STRONG",{});var h0t=s(c4e);HBr=r(h0t,"bert"),h0t.forEach(t),UBr=r(sIe," \u2014 "),UY=n(sIe,"A",{href:!0});var p0t=s(UY);JBr=r(p0t,"FlaxBertForTokenClassification"),p0t.forEach(t),YBr=r(sIe," (BERT model)"),sIe.forEach(t),KBr=i(Fo),dw=n(Fo,"LI",{});var lIe=s(dw);f4e=n(lIe,"STRONG",{});var u0t=s(f4e);ZBr=r(u0t,"big_bird"),u0t.forEach(t),eIr=r(lIe," \u2014 "),JY=n(lIe,"A",{href:!0});var _0t=s(JY);oIr=r(_0t,"FlaxBigBirdForTokenClassification"),_0t.forEach(t),rIr=r(lIe," (BigBird model)"),lIe.forEach(t),tIr=i(Fo),cw=n(Fo,"LI",{});var iIe=s(cw);m4e=n(iIe,"STRONG",{});var b0t=s(m4e);aIr=r(b0t,"distilbert"),b0t.forEach(t),nIr=r(iIe," \u2014 "),YY=n(iIe,"A",{href:!0});var v0t=s(YY);sIr=r(v0t,"FlaxDistilBertForTokenClassification"),v0t.forEach(t),lIr=r(iIe," (DistilBERT model)"),iIe.forEach(t),iIr=i(Fo),fw=n(Fo,"LI",{});var dIe=s(fw);g4e=n(dIe,"STRONG",{});var F0t=s(g4e);dIr=r(F0t,"electra"),F0t.forEach(t),cIr=r(dIe," \u2014 "),KY=n(dIe,"A",{href:!0});var T0t=s(KY);fIr=r(T0t,"FlaxElectraForTokenClassification"),T0t.forEach(t),mIr=r(dIe," (ELECTRA model)"),dIe.forEach(t),gIr=i(Fo),mw=n(Fo,"LI",{});var cIe=s(mw);h4e=n(cIe,"STRONG",{});var M0t=s(h4e);hIr=r(M0t,"roberta"),M0t.forEach(t),pIr=r(cIe," \u2014 "),ZY=n(cIe,"A",{href:!0});var E0t=s(ZY);uIr=r(E0t,"FlaxRobertaForTokenClassification"),E0t.forEach(t),_Ir=r(cIe," (RoBERTa model)"),cIe.forEach(t),bIr=i(Fo),gw=n(Fo,"LI",{});var fIe=s(gw);p4e=n(fIe,"STRONG",{});var C0t=s(p4e);vIr=r(C0t,"roformer"),C0t.forEach(t),FIr=r(fIe," \u2014 "),eK=n(fIe,"A",{href:!0});var w0t=s(eK);TIr=r(w0t,"FlaxRoFormerForTokenClassification"),w0t.forEach(t),MIr=r(fIe," (RoFormer model)"),fIe.forEach(t),EIr=i(Fo),hw=n(Fo,"LI",{});var mIe=s(hw);u4e=n(mIe,"STRONG",{});var A0t=s(u4e);CIr=r(A0t,"xlm-roberta"),A0t.forEach(t),wIr=r(mIe," \u2014 "),oK=n(mIe,"A",{href:!0});var y0t=s(oK);AIr=r(y0t,"FlaxXLMRobertaForTokenClassification"),y0t.forEach(t),yIr=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),Fo.forEach(t),LIr=i(oi),T(pw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),FNe=i(f),Kc=n(f,"H2",{class:!0});var yDe=s(Kc);uw=n(yDe,"A",{id:!0,class:!0,href:!0});var L0t=s(uw);_4e=n(L0t,"SPAN",{});var x0t=s(_4e);T(zx.$$.fragment,x0t),x0t.forEach(t),L0t.forEach(t),xIr=i(yDe),b4e=n(yDe,"SPAN",{});var $0t=s(b4e);$Ir=r($0t,"FlaxAutoModelForMultipleChoice"),$0t.forEach(t),yDe.forEach(t),TNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Wx.$$.fragment,ri),kIr=i(ri),Zc=n(ri,"P",{});var cee=s(Zc);SIr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rK=n(cee,"A",{href:!0});var k0t=s(rK);RIr=r(k0t,"from_pretrained()"),k0t.forEach(t),PIr=r(cee," class method or the "),tK=n(cee,"A",{href:!0});var S0t=s(tK);BIr=r(S0t,"from_config()"),S0t.forEach(t),IIr=r(cee,` class
method.`),cee.forEach(t),qIr=i(ri),Qx=n(ri,"P",{});var LDe=s(Qx);NIr=r(LDe,"This class cannot be instantiated directly using "),v4e=n(LDe,"CODE",{});var R0t=s(v4e);jIr=r(R0t,"__init__()"),R0t.forEach(t),DIr=r(LDe," (throws an error)."),LDe.forEach(t),GIr=i(ri),Ut=n(ri,"DIV",{class:!0});var U6=s(Ut);T(Hx.$$.fragment,U6),OIr=i(U6),F4e=n(U6,"P",{});var P0t=s(F4e);VIr=r(P0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P0t.forEach(t),XIr=i(U6),ef=n(U6,"P",{});var fee=s(ef);zIr=r(fee,`Note:
Loading a model from its configuration file does `),T4e=n(fee,"STRONG",{});var B0t=s(T4e);WIr=r(B0t,"not"),B0t.forEach(t),QIr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(fee,"A",{href:!0});var I0t=s(aK);HIr=r(I0t,"from_pretrained()"),I0t.forEach(t),UIr=r(fee," to load the model weights."),fee.forEach(t),JIr=i(U6),T(_w.$$.fragment,U6),U6.forEach(t),YIr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Ux.$$.fragment,ti),KIr=i(ti),M4e=n(ti,"P",{});var q0t=s(M4e);ZIr=r(q0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),q0t.forEach(t),eqr=i(ti),Mn=n(ti,"P",{});var J6=s(Mn);oqr=r(J6,"The model class to instantiate is selected based on the "),E4e=n(J6,"CODE",{});var N0t=s(E4e);rqr=r(N0t,"model_type"),N0t.forEach(t),tqr=r(J6,` property of the config object (either
passed as an argument or loaded from `),C4e=n(J6,"CODE",{});var j0t=s(C4e);aqr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),nqr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(J6,"CODE",{});var D0t=s(w4e);sqr=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),lqr=r(J6,":"),J6.forEach(t),iqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);bw=n(To,"LI",{});var gIe=s(bw);A4e=n(gIe,"STRONG",{});var G0t=s(A4e);dqr=r(G0t,"albert"),G0t.forEach(t),cqr=r(gIe," \u2014 "),nK=n(gIe,"A",{href:!0});var O0t=s(nK);fqr=r(O0t,"FlaxAlbertForMultipleChoice"),O0t.forEach(t),mqr=r(gIe," (ALBERT model)"),gIe.forEach(t),gqr=i(To),vw=n(To,"LI",{});var hIe=s(vw);y4e=n(hIe,"STRONG",{});var V0t=s(y4e);hqr=r(V0t,"bert"),V0t.forEach(t),pqr=r(hIe," \u2014 "),sK=n(hIe,"A",{href:!0});var X0t=s(sK);uqr=r(X0t,"FlaxBertForMultipleChoice"),X0t.forEach(t),_qr=r(hIe," (BERT model)"),hIe.forEach(t),bqr=i(To),Fw=n(To,"LI",{});var pIe=s(Fw);L4e=n(pIe,"STRONG",{});var z0t=s(L4e);vqr=r(z0t,"big_bird"),z0t.forEach(t),Fqr=r(pIe," \u2014 "),lK=n(pIe,"A",{href:!0});var W0t=s(lK);Tqr=r(W0t,"FlaxBigBirdForMultipleChoice"),W0t.forEach(t),Mqr=r(pIe," (BigBird model)"),pIe.forEach(t),Eqr=i(To),Tw=n(To,"LI",{});var uIe=s(Tw);x4e=n(uIe,"STRONG",{});var Q0t=s(x4e);Cqr=r(Q0t,"distilbert"),Q0t.forEach(t),wqr=r(uIe," \u2014 "),iK=n(uIe,"A",{href:!0});var H0t=s(iK);Aqr=r(H0t,"FlaxDistilBertForMultipleChoice"),H0t.forEach(t),yqr=r(uIe," (DistilBERT model)"),uIe.forEach(t),Lqr=i(To),Mw=n(To,"LI",{});var _Ie=s(Mw);$4e=n(_Ie,"STRONG",{});var U0t=s($4e);xqr=r(U0t,"electra"),U0t.forEach(t),$qr=r(_Ie," \u2014 "),dK=n(_Ie,"A",{href:!0});var J0t=s(dK);kqr=r(J0t,"FlaxElectraForMultipleChoice"),J0t.forEach(t),Sqr=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),Rqr=i(To),Ew=n(To,"LI",{});var bIe=s(Ew);k4e=n(bIe,"STRONG",{});var Y0t=s(k4e);Pqr=r(Y0t,"roberta"),Y0t.forEach(t),Bqr=r(bIe," \u2014 "),cK=n(bIe,"A",{href:!0});var K0t=s(cK);Iqr=r(K0t,"FlaxRobertaForMultipleChoice"),K0t.forEach(t),qqr=r(bIe," (RoBERTa model)"),bIe.forEach(t),Nqr=i(To),Cw=n(To,"LI",{});var vIe=s(Cw);S4e=n(vIe,"STRONG",{});var Z0t=s(S4e);jqr=r(Z0t,"roformer"),Z0t.forEach(t),Dqr=r(vIe," \u2014 "),fK=n(vIe,"A",{href:!0});var eyt=s(fK);Gqr=r(eyt,"FlaxRoFormerForMultipleChoice"),eyt.forEach(t),Oqr=r(vIe," (RoFormer model)"),vIe.forEach(t),Vqr=i(To),ww=n(To,"LI",{});var FIe=s(ww);R4e=n(FIe,"STRONG",{});var oyt=s(R4e);Xqr=r(oyt,"xlm-roberta"),oyt.forEach(t),zqr=r(FIe," \u2014 "),mK=n(FIe,"A",{href:!0});var ryt=s(mK);Wqr=r(ryt,"FlaxXLMRobertaForMultipleChoice"),ryt.forEach(t),Qqr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),To.forEach(t),Hqr=i(ti),T(Aw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),MNe=i(f),of=n(f,"H2",{class:!0});var xDe=s(of);yw=n(xDe,"A",{id:!0,class:!0,href:!0});var tyt=s(yw);P4e=n(tyt,"SPAN",{});var ayt=s(P4e);T(Jx.$$.fragment,ayt),ayt.forEach(t),tyt.forEach(t),Uqr=i(xDe),B4e=n(xDe,"SPAN",{});var nyt=s(B4e);Jqr=r(nyt,"FlaxAutoModelForNextSentencePrediction"),nyt.forEach(t),xDe.forEach(t),ENe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(Yx.$$.fragment,ai),Yqr=i(ai),rf=n(ai,"P",{});var mee=s(rf);Kqr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gK=n(mee,"A",{href:!0});var syt=s(gK);Zqr=r(syt,"from_pretrained()"),syt.forEach(t),eNr=r(mee," class method or the "),hK=n(mee,"A",{href:!0});var lyt=s(hK);oNr=r(lyt,"from_config()"),lyt.forEach(t),rNr=r(mee,` class
method.`),mee.forEach(t),tNr=i(ai),Kx=n(ai,"P",{});var $De=s(Kx);aNr=r($De,"This class cannot be instantiated directly using "),I4e=n($De,"CODE",{});var iyt=s(I4e);nNr=r(iyt,"__init__()"),iyt.forEach(t),sNr=r($De," (throws an error)."),$De.forEach(t),lNr=i(ai),Jt=n(ai,"DIV",{class:!0});var Y6=s(Jt);T(Zx.$$.fragment,Y6),iNr=i(Y6),q4e=n(Y6,"P",{});var dyt=s(q4e);dNr=r(dyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dyt.forEach(t),cNr=i(Y6),tf=n(Y6,"P",{});var gee=s(tf);fNr=r(gee,`Note:
Loading a model from its configuration file does `),N4e=n(gee,"STRONG",{});var cyt=s(N4e);mNr=r(cyt,"not"),cyt.forEach(t),gNr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(gee,"A",{href:!0});var fyt=s(pK);hNr=r(fyt,"from_pretrained()"),fyt.forEach(t),pNr=r(gee," to load the model weights."),gee.forEach(t),uNr=i(Y6),T(Lw.$$.fragment,Y6),Y6.forEach(t),_Nr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(e9.$$.fragment,ni),bNr=i(ni),j4e=n(ni,"P",{});var myt=s(j4e);vNr=r(myt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),myt.forEach(t),FNr=i(ni),En=n(ni,"P",{});var K6=s(En);TNr=r(K6,"The model class to instantiate is selected based on the "),D4e=n(K6,"CODE",{});var gyt=s(D4e);MNr=r(gyt,"model_type"),gyt.forEach(t),ENr=r(K6,` property of the config object (either
passed as an argument or loaded from `),G4e=n(K6,"CODE",{});var hyt=s(G4e);CNr=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),wNr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(K6,"CODE",{});var pyt=s(O4e);ANr=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),yNr=r(K6,":"),K6.forEach(t),LNr=i(ni),V4e=n(ni,"UL",{});var uyt=s(V4e);xw=n(uyt,"LI",{});var TIe=s(xw);X4e=n(TIe,"STRONG",{});var _yt=s(X4e);xNr=r(_yt,"bert"),_yt.forEach(t),$Nr=r(TIe," \u2014 "),uK=n(TIe,"A",{href:!0});var byt=s(uK);kNr=r(byt,"FlaxBertForNextSentencePrediction"),byt.forEach(t),SNr=r(TIe," (BERT model)"),TIe.forEach(t),uyt.forEach(t),RNr=i(ni),T($w.$$.fragment,ni),ni.forEach(t),ai.forEach(t),CNe=i(f),af=n(f,"H2",{class:!0});var kDe=s(af);kw=n(kDe,"A",{id:!0,class:!0,href:!0});var vyt=s(kw);z4e=n(vyt,"SPAN",{});var Fyt=s(z4e);T(o9.$$.fragment,Fyt),Fyt.forEach(t),vyt.forEach(t),PNr=i(kDe),W4e=n(kDe,"SPAN",{});var Tyt=s(W4e);BNr=r(Tyt,"FlaxAutoModelForImageClassification"),Tyt.forEach(t),kDe.forEach(t),wNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(r9.$$.fragment,si),INr=i(si),nf=n(si,"P",{});var hee=s(nf);qNr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_K=n(hee,"A",{href:!0});var Myt=s(_K);NNr=r(Myt,"from_pretrained()"),Myt.forEach(t),jNr=r(hee," class method or the "),bK=n(hee,"A",{href:!0});var Eyt=s(bK);DNr=r(Eyt,"from_config()"),Eyt.forEach(t),GNr=r(hee,` class
method.`),hee.forEach(t),ONr=i(si),t9=n(si,"P",{});var SDe=s(t9);VNr=r(SDe,"This class cannot be instantiated directly using "),Q4e=n(SDe,"CODE",{});var Cyt=s(Q4e);XNr=r(Cyt,"__init__()"),Cyt.forEach(t),zNr=r(SDe," (throws an error)."),SDe.forEach(t),WNr=i(si),Yt=n(si,"DIV",{class:!0});var Z6=s(Yt);T(a9.$$.fragment,Z6),QNr=i(Z6),H4e=n(Z6,"P",{});var wyt=s(H4e);HNr=r(wyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wyt.forEach(t),UNr=i(Z6),sf=n(Z6,"P",{});var pee=s(sf);JNr=r(pee,`Note:
Loading a model from its configuration file does `),U4e=n(pee,"STRONG",{});var Ayt=s(U4e);YNr=r(Ayt,"not"),Ayt.forEach(t),KNr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(pee,"A",{href:!0});var yyt=s(vK);ZNr=r(yyt,"from_pretrained()"),yyt.forEach(t),ejr=r(pee," to load the model weights."),pee.forEach(t),ojr=i(Z6),T(Sw.$$.fragment,Z6),Z6.forEach(t),rjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(n9.$$.fragment,li),tjr=i(li),J4e=n(li,"P",{});var Lyt=s(J4e);ajr=r(Lyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lyt.forEach(t),njr=i(li),Cn=n(li,"P",{});var e0=s(Cn);sjr=r(e0,"The model class to instantiate is selected based on the "),Y4e=n(e0,"CODE",{});var xyt=s(Y4e);ljr=r(xyt,"model_type"),xyt.forEach(t),ijr=r(e0,` property of the config object (either
passed as an argument or loaded from `),K4e=n(e0,"CODE",{});var $yt=s(K4e);djr=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),cjr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(e0,"CODE",{});var kyt=s(Z4e);fjr=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),mjr=r(e0,":"),e0.forEach(t),gjr=i(li),s9=n(li,"UL",{});var RDe=s(s9);Rw=n(RDe,"LI",{});var MIe=s(Rw);eEe=n(MIe,"STRONG",{});var Syt=s(eEe);hjr=r(Syt,"beit"),Syt.forEach(t),pjr=r(MIe," \u2014 "),FK=n(MIe,"A",{href:!0});var Ryt=s(FK);ujr=r(Ryt,"FlaxBeitForImageClassification"),Ryt.forEach(t),_jr=r(MIe," (BEiT model)"),MIe.forEach(t),bjr=i(RDe),Pw=n(RDe,"LI",{});var EIe=s(Pw);oEe=n(EIe,"STRONG",{});var Pyt=s(oEe);vjr=r(Pyt,"vit"),Pyt.forEach(t),Fjr=r(EIe," \u2014 "),TK=n(EIe,"A",{href:!0});var Byt=s(TK);Tjr=r(Byt,"FlaxViTForImageClassification"),Byt.forEach(t),Mjr=r(EIe," (ViT model)"),EIe.forEach(t),RDe.forEach(t),Ejr=i(li),T(Bw.$$.fragment,li),li.forEach(t),si.forEach(t),ANe=i(f),lf=n(f,"H2",{class:!0});var PDe=s(lf);Iw=n(PDe,"A",{id:!0,class:!0,href:!0});var Iyt=s(Iw);rEe=n(Iyt,"SPAN",{});var qyt=s(rEe);T(l9.$$.fragment,qyt),qyt.forEach(t),Iyt.forEach(t),Cjr=i(PDe),tEe=n(PDe,"SPAN",{});var Nyt=s(tEe);wjr=r(Nyt,"FlaxAutoModelForVision2Seq"),Nyt.forEach(t),PDe.forEach(t),yNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(i9.$$.fragment,ii),Ajr=i(ii),df=n(ii,"P",{});var uee=s(df);yjr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MK=n(uee,"A",{href:!0});var jyt=s(MK);Ljr=r(jyt,"from_pretrained()"),jyt.forEach(t),xjr=r(uee," class method or the "),EK=n(uee,"A",{href:!0});var Dyt=s(EK);$jr=r(Dyt,"from_config()"),Dyt.forEach(t),kjr=r(uee,` class
method.`),uee.forEach(t),Sjr=i(ii),d9=n(ii,"P",{});var BDe=s(d9);Rjr=r(BDe,"This class cannot be instantiated directly using "),aEe=n(BDe,"CODE",{});var Gyt=s(aEe);Pjr=r(Gyt,"__init__()"),Gyt.forEach(t),Bjr=r(BDe," (throws an error)."),BDe.forEach(t),Ijr=i(ii),Kt=n(ii,"DIV",{class:!0});var o0=s(Kt);T(c9.$$.fragment,o0),qjr=i(o0),nEe=n(o0,"P",{});var Oyt=s(nEe);Njr=r(Oyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Oyt.forEach(t),jjr=i(o0),cf=n(o0,"P",{});var _ee=s(cf);Djr=r(_ee,`Note:
Loading a model from its configuration file does `),sEe=n(_ee,"STRONG",{});var Vyt=s(sEe);Gjr=r(Vyt,"not"),Vyt.forEach(t),Ojr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(_ee,"A",{href:!0});var Xyt=s(CK);Vjr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Xjr=r(_ee," to load the model weights."),_ee.forEach(t),zjr=i(o0),T(qw.$$.fragment,o0),o0.forEach(t),Wjr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(f9.$$.fragment,di),Qjr=i(di),lEe=n(di,"P",{});var zyt=s(lEe);Hjr=r(zyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zyt.forEach(t),Ujr=i(di),wn=n(di,"P",{});var r0=s(wn);Jjr=r(r0,"The model class to instantiate is selected based on the "),iEe=n(r0,"CODE",{});var Wyt=s(iEe);Yjr=r(Wyt,"model_type"),Wyt.forEach(t),Kjr=r(r0,` property of the config object (either
passed as an argument or loaded from `),dEe=n(r0,"CODE",{});var Qyt=s(dEe);Zjr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),eDr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=n(r0,"CODE",{});var Hyt=s(cEe);oDr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),rDr=r(r0,":"),r0.forEach(t),tDr=i(di),fEe=n(di,"UL",{});var Uyt=s(fEe);Nw=n(Uyt,"LI",{});var CIe=s(Nw);mEe=n(CIe,"STRONG",{});var Jyt=s(mEe);aDr=r(Jyt,"vision-encoder-decoder"),Jyt.forEach(t),nDr=r(CIe," \u2014 "),wK=n(CIe,"A",{href:!0});var Yyt=s(wK);sDr=r(Yyt,"FlaxVisionEncoderDecoderModel"),Yyt.forEach(t),lDr=r(CIe," (Vision Encoder decoder model)"),CIe.forEach(t),Uyt.forEach(t),iDr=i(di),T(jw.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(oxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c($$,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(k$,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertConfig"),c(S$,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartConfig"),c(R$,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitConfig"),c(P$,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertConfig"),c(B$,"href","/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(I$,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdConfig"),c(q$,"href","/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(N$,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(j$,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(D$,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertConfig"),c(G$,"href","/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineConfig"),c(O$,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPConfig"),c(V$,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertConfig"),c(X$,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextConfig"),c(z$,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLConfig"),c(W$,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Q$,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(H$,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(U$,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaConfig"),c(J$,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Y$,"href","/docs/transformers/pr_17257/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(K$,"href","/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTConfig"),c(Z$,"href","/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrConfig"),c(ek,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ok,"href","/docs/transformers/pr_17257/en/model_doc/dpr#transformers.DPRConfig"),c(rk,"href","/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTConfig"),c(tk,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraConfig"),c(ak,"href","/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(nk,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertConfig"),c(sk,"href","/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaConfig"),c(lk,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetConfig"),c(ik,"href","/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTConfig"),c(dk,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelConfig"),c(ck,"href","/docs/transformers/pr_17257/en/model_doc/glpn#transformers.GLPNConfig"),c(fk,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Config"),c(mk,"href","/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(gk,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJConfig"),c(hk,"href","/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertConfig"),c(pk,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertConfig"),c(uk,"href","/docs/transformers/pr_17257/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(_k,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(bk,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(vk,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDConfig"),c(Fk,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerConfig"),c(Tk,"href","/docs/transformers/pr_17257/en/model_doc/luke#transformers.LukeConfig"),c(Mk,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ek,"href","/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ck,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianConfig"),c(wk,"href","/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ak,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartConfig"),c(yk,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Lk,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xk,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetConfig"),c($k,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Config"),c(kk,"href","/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Sk,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Rk,"href","/docs/transformers/pr_17257/en/model_doc/opt#transformers.OPTConfig"),c(Pk,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusConfig"),c(Bk,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ik,"href","/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartConfig"),c(qk,"href","/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Nk,"href","/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(jk,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Dk,"href","/docs/transformers/pr_17257/en/model_doc/rag#transformers.RagConfig"),c(Gk,"href","/docs/transformers/pr_17257/en/model_doc/realm#transformers.RealmConfig"),c(Ok,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerConfig"),c(Vk,"href","/docs/transformers/pr_17257/en/model_doc/regnet#transformers.RegNetConfig"),c(Xk,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertConfig"),c(zk,"href","/docs/transformers/pr_17257/en/model_doc/resnet#transformers.ResNetConfig"),c(Wk,"href","/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertConfig"),c(Qk,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaConfig"),c(Hk,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerConfig"),c(Uk,"href","/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerConfig"),c(Jk,"href","/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWConfig"),c(Yk,"href","/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDConfig"),c(Kk,"href","/docs/transformers/pr_17257/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Zk,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(eS,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(oS,"href","/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterConfig"),c(rS,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(tS,"href","/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinConfig"),c(aS,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Config"),c(nS,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasConfig"),c(sS,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(lS,"href","/docs/transformers/pr_17257/en/model_doc/trocr#transformers.TrOCRConfig"),c(iS,"href","/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(dS,"href","/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(cS,"href","/docs/transformers/pr_17257/en/model_doc/van#transformers.VanConfig"),c(fS,"href","/docs/transformers/pr_17257/en/model_doc/vilt#transformers.ViltConfig"),c(mS,"href","/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gS,"href","/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hS,"href","/docs/transformers/pr_17257/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(pS,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTConfig"),c(uS,"href","/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_S,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bS,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(vS,"href","/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMConfig"),c(FS,"href","/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMConfig"),c(TS,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMConfig"),c(MS,"href","/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ES,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(CS,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wS,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetConfig"),c(AS,"href","/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosConfig"),c(yS,"href","/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(LS,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xS,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertTokenizer"),c($S,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kS,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartTokenizer"),c(SS,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartTokenizerFast"),c(RS,"href","/docs/transformers/pr_17257/en/model_doc/barthez#transformers.BarthezTokenizer"),c(PS,"href","/docs/transformers/pr_17257/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BS,"href","/docs/transformers/pr_17257/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(IS,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizer"),c(qS,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizerFast"),c(NS,"href","/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jS,"href","/docs/transformers/pr_17257/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DS,"href","/docs/transformers/pr_17257/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GS,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(OS,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(VS,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XS,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zS,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(WS,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(QS,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(HS,"href","/docs/transformers/pr_17257/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(US,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertTokenizer"),c(JS,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineTokenizer"),c(KS,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZS,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eR,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(oR,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17257/en/model_doc/cpm#transformers.CpmTokenizer"),c(tR,"href","/docs/transformers/pr_17257/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(aR,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nR,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sR,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lR,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaTokenizer"),c(iR,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dR,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cR,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(fR,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mR,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17257/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hR,"href","/docs/transformers/pr_17257/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pR,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraTokenizer"),c(uR,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_R,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bR,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetTokenizer"),c(vR,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(FR,"href","/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(TR,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelTokenizer"),c(MR,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ER,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CR,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wR,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AR,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LR,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xR,"href","/docs/transformers/pr_17257/en/model_doc/herbert#transformers.HerbertTokenizer"),c($R,"href","/docs/transformers/pr_17257/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SR,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(BR,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(IR,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(qR,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17257/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jR,"href","/docs/transformers/pr_17257/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(DR,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDTokenizer"),c(GR,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDTokenizerFast"),c(OR,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerTokenizer"),c(VR,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(XR,"href","/docs/transformers/pr_17257/en/model_doc/luke#transformers.LukeTokenizer"),c(zR,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WR,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(HR,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianTokenizer"),c(UR,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartTokenizer"),c(JR,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(YR,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(KR,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizer"),c(eP,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizerFast"),c(oP,"href","/docs/transformers/pr_17257/en/model_doc/mluke#transformers.MLukeTokenizer"),c(rP,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(tP,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(aP,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(nP,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(sP,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.T5Tokenizer"),c(lP,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.T5TokenizerFast"),c(iP,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertTokenizer"),c(dP,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cP,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(fP,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(mP,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gP,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hP,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(pP,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(uP,"href","/docs/transformers/pr_17257/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_P,"href","/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartTokenizer"),c(bP,"href","/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(vP,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizer"),c(FP,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17257/en/model_doc/rag#transformers.RagTokenizer"),c(MP,"href","/docs/transformers/pr_17257/en/model_doc/realm#transformers.RealmTokenizer"),c(EP,"href","/docs/transformers/pr_17257/en/model_doc/realm#transformers.RealmTokenizerFast"),c(CP,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerTokenizer"),c(wP,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(AP,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertTokenizer"),c(yP,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(xP,"href","/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c($P,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kP,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SP,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(RP,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(PP,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(BP,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(IP,"href","/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterTokenizer"),c(qP,"href","/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NP,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(jP,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.T5Tokenizer"),c(GP,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.T5TokenizerFast"),c(OP,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasTokenizer"),c(VP,"href","/docs/transformers/pr_17257/en/model_doc/tapex#transformers.TapexTokenizer"),c(XP,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(zP,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizer"),c(WP,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HP,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UP,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(JP,"href","/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMTokenizer"),c(YP,"href","/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(KP,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMTokenizer"),c(ZP,"href","/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(eB,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(oB,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(rB,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tB,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aB,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(nB,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(sB,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertTokenizer"),c(lB,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(iB,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(dB,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cB,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fB,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gB,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hB,"href","/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17257/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FB,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(TB,"href","/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PB,"href","/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(BB,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(IB,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPProcessor"),c(qB,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(NB,"href","/docs/transformers/pr_17257/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(jB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GB,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(OB,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(VB,"href","/docs/transformers/pr_17257/en/model_doc/trocr#transformers.TrOCRProcessor"),c(XB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_17257/en/model_doc/vilt#transformers.ViltProcessor"),c(QB,"href","/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(HB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(YB,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KB,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZB,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eI,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertModel"),c(oI,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartModel"),c(rI,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitModel"),c(tI,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertModel"),c(aI,"href","/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(nI,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdModel"),c(sI,"href","/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(lI,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(iI,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(dI,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertModel"),c(cI,"href","/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineModel"),c(fI,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.CLIPModel"),c(mI,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertModel"),c(gI,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextModel"),c(hI,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLModel"),c(pI,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(uI,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(_I,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(bI,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaModel"),c(vI,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(FI,"href","/docs/transformers/pr_17257/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(TI,"href","/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTModel"),c(MI,"href","/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrModel"),c(EI,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertModel"),c(CI,"href","/docs/transformers/pr_17257/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wI,"href","/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTModel"),c(AI,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraModel"),c(yI,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertModel"),c(LI,"href","/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaModel"),c(xI,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetModel"),c($I,"href","/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTModel"),c(kI,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelModel"),c(SI,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelBaseModel"),c(RI,"href","/docs/transformers/pr_17257/en/model_doc/glpn#transformers.GLPNModel"),c(PI,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2Model"),c(BI,"href","/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(II,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJModel"),c(qI,"href","/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertModel"),c(NI,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertModel"),c(jI,"href","/docs/transformers/pr_17257/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(DI,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(GI,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(OI,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDModel"),c(VI,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerModel"),c(XI,"href","/docs/transformers/pr_17257/en/model_doc/luke#transformers.LukeModel"),c(zI,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertModel"),c(WI,"href","/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100Model"),c(QI,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianModel"),c(HI,"href","/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerModel"),c(UI,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartModel"),c(JI,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(YI,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertModel"),c(KI,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetModel"),c(ZI,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5Model"),c(eq,"href","/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerModel"),c(oq,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(rq,"href","/docs/transformers/pr_17257/en/model_doc/opt#transformers.OPTModel"),c(tq,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusModel"),c(aq,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverModel"),c(nq,"href","/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartModel"),c(sq,"href","/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lq,"href","/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iq,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dq,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerModel"),c(cq,"href","/docs/transformers/pr_17257/en/model_doc/regnet#transformers.RegNetModel"),c(fq,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertModel"),c(mq,"href","/docs/transformers/pr_17257/en/model_doc/resnet#transformers.ResNetModel"),c(gq,"href","/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertModel"),c(hq,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaModel"),c(pq,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerModel"),c(uq,"href","/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerModel"),c(_q,"href","/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWModel"),c(bq,"href","/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDModel"),c(vq,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Fq,"href","/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterModel"),c(Tq,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Mq,"href","/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinModel"),c(Eq,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5Model"),c(Cq,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasModel"),c(wq,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Aq,"href","/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechModel"),c(yq,"href","/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Lq,"href","/docs/transformers/pr_17257/en/model_doc/van#transformers.VanModel"),c(xq,"href","/docs/transformers/pr_17257/en/model_doc/vilt#transformers.ViltModel"),c($q,"href","/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kq,"href","/docs/transformers/pr_17257/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Sq,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTModel"),c(Rq,"href","/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Pq,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Bq,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Iq,"href","/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMModel"),c(qq,"href","/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMModel"),c(Nq,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMModel"),c(jq,"href","/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Dq,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Gq,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Oq,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetModel"),c(Vq,"href","/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosModel"),c(Xq,"href","/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vu,"id","transformers.AutoModelForPreTraining"),c(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vu,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(zq,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wq,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qq,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hq,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Uq,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Jq,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Kq,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eN,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oN,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rN,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tN,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aN,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForPreTraining"),c(nN,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sN,"href","/docs/transformers/pr_17257/en/model_doc/flava#transformers.FlavaForPreTraining"),c(lN,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iN,"href","/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dN,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cN,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fN,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mN,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gN,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hN,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pN,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(uN,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_N,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bN,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vN,"href","/docs/transformers/pr_17257/en/model_doc/retribert#transformers.RetriBertModel"),c(FN,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(TN,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MN,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(EN,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CN,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wN,"href","/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AN,"href","/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(yN,"href","/docs/transformers/pr_17257/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(LN,"href","/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xN,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($N,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kN,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SN,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RN,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PN,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P_,"id","transformers.AutoModelForCausalLM"),c(P_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(BN,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IN,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qN,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NN,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForCausalLM"),c(jN,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertLMHeadModel"),c(DN,"href","/docs/transformers/pr_17257/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GN,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(ON,"href","/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VN,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XN,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zN,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(WN,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(QN,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(HN,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForCausalLM"),c(UN,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JN,"href","/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(YN,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(KN,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianForCausalLM"),c(ZN,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForCausalLM"),c(ej,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(oj,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rj,"href","/docs/transformers/pr_17257/en/model_doc/opt#transformers.OPTForCausalLM"),c(tj,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(aj,"href","/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(nj,"href","/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(sj,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(lj,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ij,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(dj,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(cj,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(fj,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(mj,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gj,"href","/docs/transformers/pr_17257/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(hj,"href","/docs/transformers/pr_17257/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(pj,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_j,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(bj,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(vj,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForMaskedLM"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Fj,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tj,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mj,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ej,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(yj,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(xj,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($j,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kj,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(qj,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jj,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(zj,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eD,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oD,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rD,"href","/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n1,"id","transformers.AutoModelForSeq2SeqLM"),c(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(tD,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(fD,"href","/docs/transformers/pr_17257/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17257/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.MarianMTModel"),c(pD,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17257/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17257/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForSequenceClassification"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(MD,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ED,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CD,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wD,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c($D,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17257/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.AutoModelForMultipleChoice"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(_G,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bG,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vG,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FG,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c($G,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eb,"id","transformers.AutoModelForNextSentencePrediction"),c(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eb,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(UG,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ZG,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(eO,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(oO,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(rO,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(db,"id","transformers.AutoModelForTokenClassification"),c(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(db,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(tO,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aO,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nO,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sO,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForTokenClassification"),c(iO,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(dO,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForTokenClassification"),c(fO,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(gO,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(hO,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(pO,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_O,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(vO,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(FO,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(TO,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(EO,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(CO,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wO,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LO,"href","/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xO,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($O,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SO,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RO,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BO,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IO,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(qO,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(NO,"href","/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForQuestionAnswering"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(jO,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17257/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17257/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rV,"href","/docs/transformers/pr_17257/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17257/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17257/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17257/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17257/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17257/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17257/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17257/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17257/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EV,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AV,"href","/docs/transformers/pr_17257/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.AutoModelForTableQuestionAnswering"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(yV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.AutoModelForImageClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(kV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitForImageClassification"),c(BV,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IV,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qV,"href","/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTForImageClassification"),c(NV,"href","/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jV,"href","/docs/transformers/pr_17257/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DV,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(GV,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(OV,"href","/docs/transformers/pr_17257/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(VV,"href","/docs/transformers/pr_17257/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(XV,"href","/docs/transformers/pr_17257/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(zV,"href","/docs/transformers/pr_17257/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(WV,"href","/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QV,"href","/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinForImageClassification"),c(HV,"href","/docs/transformers/pr_17257/en/model_doc/van#transformers.VanForImageClassification"),c(UV,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForVision2Seq"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(JV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForAudioClassification"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(eX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForAudioFrameClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(mX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uX,"href","/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(_X,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bX,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(vX,"href","/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lv,"id","transformers.AutoModelForCTC"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(CX,"href","/docs/transformers/pr_17257/en/model_doc/hubert#transformers.HubertForCTC"),c(wX,"href","/docs/transformers/pr_17257/en/model_doc/sew#transformers.SEWForCTC"),c(AX,"href","/docs/transformers/pr_17257/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yX,"href","/docs/transformers/pr_17257/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LX,"href","/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xX,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($X,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(kX,"href","/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17257/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(IX,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForAudioXVector"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(qX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GX,"href","/docs/transformers/pr_17257/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(OX,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VX,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(XX,"href","/docs/transformers/pr_17257/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForMaskedImageModeling"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(zX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17257/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UX,"href","/docs/transformers/pr_17257/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(JX,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForObjectDetection"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(YX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrForObjectDetection"),c(oz,"href","/docs/transformers/pr_17257/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForImageSegmentation"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17257/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForSemanticSegmentation"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(sz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(cz,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(fz,"href","/docs/transformers/pr_17257/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(mz,"href","/docs/transformers/pr_17257/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForInstanceSegmentation"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(gz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17257/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.TFAutoModel"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(_z,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertModel"),c(Tz,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.TFBartModel"),c(Mz,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertModel"),c(Ez,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Cz,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wz,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertModel"),c(Az,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.TFCLIPModel"),c(yz,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertModel"),c(Lz,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.TFConvNextModel"),c(xz,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLModel"),c($z,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kz,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaModel"),c(Sz,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Rz,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Pz,"href","/docs/transformers/pr_17257/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Bz,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraModel"),c(Iz,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(qz,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelModel"),c(Nz,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(jz,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Dz,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJModel"),c(Gz,"href","/docs/transformers/pr_17257/en/model_doc/hubert#transformers.TFHubertModel"),c(Oz,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Vz,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.TFLEDModel"),c(Xz,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerModel"),c(zz,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Wz,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.TFMarianModel"),c(Qz,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.TFMBartModel"),c(Hz,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Uz,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Jz,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.TFMT5Model"),c(Yz,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Kz,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Zz,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertModel"),c(eW,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaModel"),c(oW,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rW,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tW,"href","/docs/transformers/pr_17257/en/model_doc/swin#transformers.TFSwinModel"),c(aW,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.TFT5Model"),c(nW,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasModel"),c(sW,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(lW,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.TFViTModel"),c(iW,"href","/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(dW,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(cW,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMModel"),c(fW,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(mW,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.TFAutoModelForPreTraining"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(_W,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vW,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FW,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TW,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MW,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EW,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CW,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wW,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AW,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yW,"href","/docs/transformers/pr_17257/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(LW,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xW,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($W,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kW,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SW,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PW,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BW,"href","/docs/transformers/pr_17257/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IW,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qW,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(NW,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForCausalLM"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VW,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XW,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zW,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WW,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QW,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HW,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(UW,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(JW,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(YW,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KW,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForImageClassification"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(eQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/pr_17257/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(aQ,"href","/docs/transformers/pr_17257/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(nQ,"href","/docs/transformers/pr_17257/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(sQ,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForMaskedLM"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(lQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c($Q,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(BQ,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qQ,"href","/docs/transformers/pr_17257/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(NQ,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.TFMarianMTModel"),c(jQ,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(DQ,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForSequenceClassification"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(VQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17257/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17257/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17257/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S4,"id","transformers.TFAutoModelForMultipleChoice"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(bH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(EH,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yH,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xH,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c($H,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kH,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(NH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(OH,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(VH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17257/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForTokenClassification"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(QH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(YH,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(KH,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(oU,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(rU,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(tU,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(aU,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(nU,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(sU,"href","/docs/transformers/pr_17257/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(lU,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(iU,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(cU,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(mU,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(gU,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(hU,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(pU,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForQuestionAnswering"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17257/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17257/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17257/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17257/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17257/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LU,"href","/docs/transformers/pr_17257/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c($U,"href","/docs/transformers/pr_17257/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17257/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17257/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17257/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17257/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qU,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17257/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForVision2Seq"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(VU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17257/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModel"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertModel"),c(YU,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartModel"),c(KU,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.FlaxBeitModel"),c(ZU,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertModel"),c(eJ,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(oJ,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(rJ,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(tJ,"href","/docs/transformers/pr_17257/en/model_doc/clip#transformers.FlaxCLIPModel"),c(aJ,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(nJ,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraModel"),c(sJ,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(lJ,"href","/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(iJ,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(dJ,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.FlaxMarianModel"),c(cJ,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fJ,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.FlaxMT5Model"),c(mJ,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(gJ,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(hJ,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(pJ,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.FlaxT5Model"),c(uJ,"href","/docs/transformers/pr_17257/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_J,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.FlaxViTModel"),c(bJ,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(vJ,"href","/docs/transformers/pr_17257/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(FJ,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.FlaxAutoModelForCausalLM"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(wJ,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(AJ,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yJ,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(LJ,"href","/docs/transformers/pr_17257/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(xJ,"href","/docs/transformers/pr_17257/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($J,"href","/docs/transformers/pr_17257/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(kJ,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(SJ,"href","/docs/transformers/pr_17257/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForPreTraining"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(qJ,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jJ,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(DJ,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(GJ,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17257/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(QJ,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.FlaxAutoModelForMaskedLM"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(KJ,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(eY,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(oY,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(rY,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(tY,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(nY,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(sY,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(lY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fY,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17257/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17257/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(hY,"href","/docs/transformers/pr_17257/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(pY,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17257/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_Y,"href","/docs/transformers/pr_17257/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17257/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(SY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_17257/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17257/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForTokenClassification"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(UY,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(JY,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(YY,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(eK,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(oK,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17257/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(sK,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(lK,"href","/docs/transformers/pr_17257/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(iK,"href","/docs/transformers/pr_17257/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(dK,"href","/docs/transformers/pr_17257/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(cK,"href","/docs/transformers/pr_17257/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(fK,"href","/docs/transformers/pr_17257/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17257/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(gK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17257/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForImageClassification"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(_K,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17257/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(TK,"href","/docs/transformers/pr_17257/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(MK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17257/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17257/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,_),b(f,rt,_),e(rt,fi),e(rt,mi),e(mi,t0),e(rt,pf),b(f,je,_),b(f,We,_),e(We,gi),e(We,yn),e(yn,a0),e(We,Ln),e(We,xn),e(xn,n0),e(We,hi),e(We,$n),e($n,s0),e(We,pi),b(f,uf,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,C$),e(Ae,ui),e(ui,w$),e(Ae,A$),b(f,Eo,_),b(f,wa,_),e(wa,y$),e(wa,_f),e(_f,L$),e(wa,IDe),b(f,wIe,_),b(f,_i,_),e(_i,bf),e(bf,bee),M(l0,bee,null),e(_i,qDe),e(_i,vee),e(vee,NDe),b(f,AIe,_),b(f,kn,_),e(kn,jDe),e(kn,Fee),e(Fee,DDe),e(kn,GDe),e(kn,Tee),e(Tee,ODe),e(kn,VDe),b(f,yIe,_),M(i0,f,_),b(f,LIe,_),b(f,x$,_),e(x$,XDe),b(f,xIe,_),M(vf,f,_),b(f,$Ie,_),b(f,bi,_),e(bi,Ff),e(Ff,Mee),M(d0,Mee,null),e(bi,zDe),e(bi,Eee),e(Eee,WDe),b(f,kIe,_),b(f,Co,_),M(c0,Co,null),e(Co,QDe),e(Co,f0),e(f0,HDe),e(f0,$$),e($$,UDe),e(f0,JDe),e(Co,YDe),e(Co,m0),e(m0,KDe),e(m0,Cee),e(Cee,ZDe),e(m0,eGe),e(Co,oGe),e(Co,Er),M(g0,Er,null),e(Er,rGe),e(Er,wee),e(wee,tGe),e(Er,aGe),e(Er,vi),e(vi,nGe),e(vi,Aee),e(Aee,sGe),e(vi,lGe),e(vi,yee),e(yee,iGe),e(vi,dGe),e(Er,cGe),e(Er,A),e(A,Tf),e(Tf,Lee),e(Lee,fGe),e(Tf,mGe),e(Tf,k$),e(k$,gGe),e(Tf,hGe),e(A,pGe),e(A,Mf),e(Mf,xee),e(xee,uGe),e(Mf,_Ge),e(Mf,S$),e(S$,bGe),e(Mf,vGe),e(A,FGe),e(A,Ef),e(Ef,$ee),e($ee,TGe),e(Ef,MGe),e(Ef,R$),e(R$,EGe),e(Ef,CGe),e(A,wGe),e(A,Cf),e(Cf,kee),e(kee,AGe),e(Cf,yGe),e(Cf,P$),e(P$,LGe),e(Cf,xGe),e(A,$Ge),e(A,wf),e(wf,See),e(See,kGe),e(wf,SGe),e(wf,B$),e(B$,RGe),e(wf,PGe),e(A,BGe),e(A,Af),e(Af,Ree),e(Ree,IGe),e(Af,qGe),e(Af,I$),e(I$,NGe),e(Af,jGe),e(A,DGe),e(A,yf),e(yf,Pee),e(Pee,GGe),e(yf,OGe),e(yf,q$),e(q$,VGe),e(yf,XGe),e(A,zGe),e(A,Lf),e(Lf,Bee),e(Bee,WGe),e(Lf,QGe),e(Lf,N$),e(N$,HGe),e(Lf,UGe),e(A,JGe),e(A,xf),e(xf,Iee),e(Iee,YGe),e(xf,KGe),e(xf,j$),e(j$,ZGe),e(xf,eOe),e(A,oOe),e(A,$f),e($f,qee),e(qee,rOe),e($f,tOe),e($f,D$),e(D$,aOe),e($f,nOe),e(A,sOe),e(A,kf),e(kf,Nee),e(Nee,lOe),e(kf,iOe),e(kf,G$),e(G$,dOe),e(kf,cOe),e(A,fOe),e(A,Sf),e(Sf,jee),e(jee,mOe),e(Sf,gOe),e(Sf,O$),e(O$,hOe),e(Sf,pOe),e(A,uOe),e(A,Rf),e(Rf,Dee),e(Dee,_Oe),e(Rf,bOe),e(Rf,V$),e(V$,vOe),e(Rf,FOe),e(A,TOe),e(A,Pf),e(Pf,Gee),e(Gee,MOe),e(Pf,EOe),e(Pf,X$),e(X$,COe),e(Pf,wOe),e(A,AOe),e(A,Bf),e(Bf,Oee),e(Oee,yOe),e(Bf,LOe),e(Bf,z$),e(z$,xOe),e(Bf,$Oe),e(A,kOe),e(A,If),e(If,Vee),e(Vee,SOe),e(If,ROe),e(If,W$),e(W$,POe),e(If,BOe),e(A,IOe),e(A,qf),e(qf,Xee),e(Xee,qOe),e(qf,NOe),e(qf,Q$),e(Q$,jOe),e(qf,DOe),e(A,GOe),e(A,Nf),e(Nf,zee),e(zee,OOe),e(Nf,VOe),e(Nf,H$),e(H$,XOe),e(Nf,zOe),e(A,WOe),e(A,jf),e(jf,Wee),e(Wee,QOe),e(jf,HOe),e(jf,U$),e(U$,UOe),e(jf,JOe),e(A,YOe),e(A,Df),e(Df,Qee),e(Qee,KOe),e(Df,ZOe),e(Df,J$),e(J$,eVe),e(Df,oVe),e(A,rVe),e(A,Gf),e(Gf,Hee),e(Hee,tVe),e(Gf,aVe),e(Gf,Y$),e(Y$,nVe),e(Gf,sVe),e(A,lVe),e(A,Of),e(Of,Uee),e(Uee,iVe),e(Of,dVe),e(Of,K$),e(K$,cVe),e(Of,fVe),e(A,mVe),e(A,Vf),e(Vf,Jee),e(Jee,gVe),e(Vf,hVe),e(Vf,Z$),e(Z$,pVe),e(Vf,uVe),e(A,_Ve),e(A,Xf),e(Xf,Yee),e(Yee,bVe),e(Xf,vVe),e(Xf,ek),e(ek,FVe),e(Xf,TVe),e(A,MVe),e(A,zf),e(zf,Kee),e(Kee,EVe),e(zf,CVe),e(zf,ok),e(ok,wVe),e(zf,AVe),e(A,yVe),e(A,Wf),e(Wf,Zee),e(Zee,LVe),e(Wf,xVe),e(Wf,rk),e(rk,$Ve),e(Wf,kVe),e(A,SVe),e(A,Qf),e(Qf,eoe),e(eoe,RVe),e(Qf,PVe),e(Qf,tk),e(tk,BVe),e(Qf,IVe),e(A,qVe),e(A,Hf),e(Hf,ooe),e(ooe,NVe),e(Hf,jVe),e(Hf,ak),e(ak,DVe),e(Hf,GVe),e(A,OVe),e(A,Uf),e(Uf,roe),e(roe,VVe),e(Uf,XVe),e(Uf,nk),e(nk,zVe),e(Uf,WVe),e(A,QVe),e(A,Jf),e(Jf,toe),e(toe,HVe),e(Jf,UVe),e(Jf,sk),e(sk,JVe),e(Jf,YVe),e(A,KVe),e(A,Yf),e(Yf,aoe),e(aoe,ZVe),e(Yf,eXe),e(Yf,lk),e(lk,oXe),e(Yf,rXe),e(A,tXe),e(A,Kf),e(Kf,noe),e(noe,aXe),e(Kf,nXe),e(Kf,ik),e(ik,sXe),e(Kf,lXe),e(A,iXe),e(A,Zf),e(Zf,soe),e(soe,dXe),e(Zf,cXe),e(Zf,dk),e(dk,fXe),e(Zf,mXe),e(A,gXe),e(A,em),e(em,loe),e(loe,hXe),e(em,pXe),e(em,ck),e(ck,uXe),e(em,_Xe),e(A,bXe),e(A,om),e(om,ioe),e(ioe,vXe),e(om,FXe),e(om,fk),e(fk,TXe),e(om,MXe),e(A,EXe),e(A,rm),e(rm,doe),e(doe,CXe),e(rm,wXe),e(rm,mk),e(mk,AXe),e(rm,yXe),e(A,LXe),e(A,tm),e(tm,coe),e(coe,xXe),e(tm,$Xe),e(tm,gk),e(gk,kXe),e(tm,SXe),e(A,RXe),e(A,am),e(am,foe),e(foe,PXe),e(am,BXe),e(am,hk),e(hk,IXe),e(am,qXe),e(A,NXe),e(A,nm),e(nm,moe),e(moe,jXe),e(nm,DXe),e(nm,pk),e(pk,GXe),e(nm,OXe),e(A,VXe),e(A,sm),e(sm,goe),e(goe,XXe),e(sm,zXe),e(sm,uk),e(uk,WXe),e(sm,QXe),e(A,HXe),e(A,lm),e(lm,hoe),e(hoe,UXe),e(lm,JXe),e(lm,_k),e(_k,YXe),e(lm,KXe),e(A,ZXe),e(A,im),e(im,poe),e(poe,eze),e(im,oze),e(im,bk),e(bk,rze),e(im,tze),e(A,aze),e(A,dm),e(dm,uoe),e(uoe,nze),e(dm,sze),e(dm,vk),e(vk,lze),e(dm,ize),e(A,dze),e(A,cm),e(cm,_oe),e(_oe,cze),e(cm,fze),e(cm,Fk),e(Fk,mze),e(cm,gze),e(A,hze),e(A,fm),e(fm,boe),e(boe,pze),e(fm,uze),e(fm,Tk),e(Tk,_ze),e(fm,bze),e(A,vze),e(A,mm),e(mm,voe),e(voe,Fze),e(mm,Tze),e(mm,Mk),e(Mk,Mze),e(mm,Eze),e(A,Cze),e(A,gm),e(gm,Foe),e(Foe,wze),e(gm,Aze),e(gm,Ek),e(Ek,yze),e(gm,Lze),e(A,xze),e(A,hm),e(hm,Toe),e(Toe,$ze),e(hm,kze),e(hm,Ck),e(Ck,Sze),e(hm,Rze),e(A,Pze),e(A,pm),e(pm,Moe),e(Moe,Bze),e(pm,Ize),e(pm,wk),e(wk,qze),e(pm,Nze),e(A,jze),e(A,um),e(um,Eoe),e(Eoe,Dze),e(um,Gze),e(um,Ak),e(Ak,Oze),e(um,Vze),e(A,Xze),e(A,_m),e(_m,Coe),e(Coe,zze),e(_m,Wze),e(_m,yk),e(yk,Qze),e(_m,Hze),e(A,Uze),e(A,bm),e(bm,woe),e(woe,Jze),e(bm,Yze),e(bm,Lk),e(Lk,Kze),e(bm,Zze),e(A,eWe),e(A,vm),e(vm,Aoe),e(Aoe,oWe),e(vm,rWe),e(vm,xk),e(xk,tWe),e(vm,aWe),e(A,nWe),e(A,Fm),e(Fm,yoe),e(yoe,sWe),e(Fm,lWe),e(Fm,$k),e($k,iWe),e(Fm,dWe),e(A,cWe),e(A,Tm),e(Tm,Loe),e(Loe,fWe),e(Tm,mWe),e(Tm,kk),e(kk,gWe),e(Tm,hWe),e(A,pWe),e(A,Mm),e(Mm,xoe),e(xoe,uWe),e(Mm,_We),e(Mm,Sk),e(Sk,bWe),e(Mm,vWe),e(A,FWe),e(A,Em),e(Em,$oe),e($oe,TWe),e(Em,MWe),e(Em,Rk),e(Rk,EWe),e(Em,CWe),e(A,wWe),e(A,Cm),e(Cm,koe),e(koe,AWe),e(Cm,yWe),e(Cm,Pk),e(Pk,LWe),e(Cm,xWe),e(A,$We),e(A,wm),e(wm,Soe),e(Soe,kWe),e(wm,SWe),e(wm,Bk),e(Bk,RWe),e(wm,PWe),e(A,BWe),e(A,Am),e(Am,Roe),e(Roe,IWe),e(Am,qWe),e(Am,Ik),e(Ik,NWe),e(Am,jWe),e(A,DWe),e(A,ym),e(ym,Poe),e(Poe,GWe),e(ym,OWe),e(ym,qk),e(qk,VWe),e(ym,XWe),e(A,zWe),e(A,Lm),e(Lm,Boe),e(Boe,WWe),e(Lm,QWe),e(Lm,Nk),e(Nk,HWe),e(Lm,UWe),e(A,JWe),e(A,xm),e(xm,Ioe),e(Ioe,YWe),e(xm,KWe),e(xm,jk),e(jk,ZWe),e(xm,eQe),e(A,oQe),e(A,$m),e($m,qoe),e(qoe,rQe),e($m,tQe),e($m,Dk),e(Dk,aQe),e($m,nQe),e(A,sQe),e(A,km),e(km,Noe),e(Noe,lQe),e(km,iQe),e(km,Gk),e(Gk,dQe),e(km,cQe),e(A,fQe),e(A,Sm),e(Sm,joe),e(joe,mQe),e(Sm,gQe),e(Sm,Ok),e(Ok,hQe),e(Sm,pQe),e(A,uQe),e(A,Rm),e(Rm,Doe),e(Doe,_Qe),e(Rm,bQe),e(Rm,Vk),e(Vk,vQe),e(Rm,FQe),e(A,TQe),e(A,Pm),e(Pm,Goe),e(Goe,MQe),e(Pm,EQe),e(Pm,Xk),e(Xk,CQe),e(Pm,wQe),e(A,AQe),e(A,Bm),e(Bm,Ooe),e(Ooe,yQe),e(Bm,LQe),e(Bm,zk),e(zk,xQe),e(Bm,$Qe),e(A,kQe),e(A,Im),e(Im,Voe),e(Voe,SQe),e(Im,RQe),e(Im,Wk),e(Wk,PQe),e(Im,BQe),e(A,IQe),e(A,qm),e(qm,Xoe),e(Xoe,qQe),e(qm,NQe),e(qm,Qk),e(Qk,jQe),e(qm,DQe),e(A,GQe),e(A,Nm),e(Nm,zoe),e(zoe,OQe),e(Nm,VQe),e(Nm,Hk),e(Hk,XQe),e(Nm,zQe),e(A,WQe),e(A,jm),e(jm,Woe),e(Woe,QQe),e(jm,HQe),e(jm,Uk),e(Uk,UQe),e(jm,JQe),e(A,YQe),e(A,Dm),e(Dm,Qoe),e(Qoe,KQe),e(Dm,ZQe),e(Dm,Jk),e(Jk,eHe),e(Dm,oHe),e(A,rHe),e(A,Gm),e(Gm,Hoe),e(Hoe,tHe),e(Gm,aHe),e(Gm,Yk),e(Yk,nHe),e(Gm,sHe),e(A,lHe),e(A,Om),e(Om,Uoe),e(Uoe,iHe),e(Om,dHe),e(Om,Kk),e(Kk,cHe),e(Om,fHe),e(A,mHe),e(A,Vm),e(Vm,Joe),e(Joe,gHe),e(Vm,hHe),e(Vm,Zk),e(Zk,pHe),e(Vm,uHe),e(A,_He),e(A,Xm),e(Xm,Yoe),e(Yoe,bHe),e(Xm,vHe),e(Xm,eS),e(eS,FHe),e(Xm,THe),e(A,MHe),e(A,zm),e(zm,Koe),e(Koe,EHe),e(zm,CHe),e(zm,oS),e(oS,wHe),e(zm,AHe),e(A,yHe),e(A,Wm),e(Wm,Zoe),e(Zoe,LHe),e(Wm,xHe),e(Wm,rS),e(rS,$He),e(Wm,kHe),e(A,SHe),e(A,Qm),e(Qm,ere),e(ere,RHe),e(Qm,PHe),e(Qm,tS),e(tS,BHe),e(Qm,IHe),e(A,qHe),e(A,Hm),e(Hm,ore),e(ore,NHe),e(Hm,jHe),e(Hm,aS),e(aS,DHe),e(Hm,GHe),e(A,OHe),e(A,Um),e(Um,rre),e(rre,VHe),e(Um,XHe),e(Um,nS),e(nS,zHe),e(Um,WHe),e(A,QHe),e(A,Jm),e(Jm,tre),e(tre,HHe),e(Jm,UHe),e(Jm,sS),e(sS,JHe),e(Jm,YHe),e(A,KHe),e(A,Ym),e(Ym,are),e(are,ZHe),e(Ym,eUe),e(Ym,lS),e(lS,oUe),e(Ym,rUe),e(A,tUe),e(A,Km),e(Km,nre),e(nre,aUe),e(Km,nUe),e(Km,iS),e(iS,sUe),e(Km,lUe),e(A,iUe),e(A,Zm),e(Zm,sre),e(sre,dUe),e(Zm,cUe),e(Zm,dS),e(dS,fUe),e(Zm,mUe),e(A,gUe),e(A,eg),e(eg,lre),e(lre,hUe),e(eg,pUe),e(eg,cS),e(cS,uUe),e(eg,_Ue),e(A,bUe),e(A,og),e(og,ire),e(ire,vUe),e(og,FUe),e(og,fS),e(fS,TUe),e(og,MUe),e(A,EUe),e(A,rg),e(rg,dre),e(dre,CUe),e(rg,wUe),e(rg,mS),e(mS,AUe),e(rg,yUe),e(A,LUe),e(A,tg),e(tg,cre),e(cre,xUe),e(tg,$Ue),e(tg,gS),e(gS,kUe),e(tg,SUe),e(A,RUe),e(A,ag),e(ag,fre),e(fre,PUe),e(ag,BUe),e(ag,hS),e(hS,IUe),e(ag,qUe),e(A,NUe),e(A,ng),e(ng,mre),e(mre,jUe),e(ng,DUe),e(ng,pS),e(pS,GUe),e(ng,OUe),e(A,VUe),e(A,sg),e(sg,gre),e(gre,XUe),e(sg,zUe),e(sg,uS),e(uS,WUe),e(sg,QUe),e(A,HUe),e(A,lg),e(lg,hre),e(hre,UUe),e(lg,JUe),e(lg,_S),e(_S,YUe),e(lg,KUe),e(A,ZUe),e(A,ig),e(ig,pre),e(pre,eJe),e(ig,oJe),e(ig,bS),e(bS,rJe),e(ig,tJe),e(A,aJe),e(A,dg),e(dg,ure),e(ure,nJe),e(dg,sJe),e(dg,vS),e(vS,lJe),e(dg,iJe),e(A,dJe),e(A,cg),e(cg,_re),e(_re,cJe),e(cg,fJe),e(cg,FS),e(FS,mJe),e(cg,gJe),e(A,hJe),e(A,fg),e(fg,bre),e(bre,pJe),e(fg,uJe),e(fg,TS),e(TS,_Je),e(fg,bJe),e(A,vJe),e(A,mg),e(mg,vre),e(vre,FJe),e(mg,TJe),e(mg,MS),e(MS,MJe),e(mg,EJe),e(A,CJe),e(A,gg),e(gg,Fre),e(Fre,wJe),e(gg,AJe),e(gg,ES),e(ES,yJe),e(gg,LJe),e(A,xJe),e(A,hg),e(hg,Tre),e(Tre,$Je),e(hg,kJe),e(hg,CS),e(CS,SJe),e(hg,RJe),e(A,PJe),e(A,pg),e(pg,Mre),e(Mre,BJe),e(pg,IJe),e(pg,wS),e(wS,qJe),e(pg,NJe),e(A,jJe),e(A,ug),e(ug,Ere),e(Ere,DJe),e(ug,GJe),e(ug,AS),e(AS,OJe),e(ug,VJe),e(A,XJe),e(A,_g),e(_g,Cre),e(Cre,zJe),e(_g,WJe),e(_g,yS),e(yS,QJe),e(_g,HJe),e(Er,UJe),M(bg,Er,null),e(Co,JJe),e(Co,vg),M(h0,vg,null),e(vg,YJe),e(vg,wre),e(wre,KJe),b(f,SIe,_),b(f,Fi,_),e(Fi,Fg),e(Fg,Are),M(p0,Are,null),e(Fi,ZJe),e(Fi,yre),e(yre,eYe),b(f,RIe,_),b(f,wo,_),M(u0,wo,null),e(wo,oYe),e(wo,_0),e(_0,rYe),e(_0,LS),e(LS,tYe),e(_0,aYe),e(wo,nYe),e(wo,b0),e(b0,sYe),e(b0,Lre),e(Lre,lYe),e(b0,iYe),e(wo,dYe),e(wo,Cr),M(v0,Cr,null),e(Cr,cYe),e(Cr,xre),e(xre,fYe),e(Cr,mYe),e(Cr,Aa),e(Aa,gYe),e(Aa,$re),e($re,hYe),e(Aa,pYe),e(Aa,kre),e(kre,uYe),e(Aa,_Ye),e(Aa,Sre),e(Sre,bYe),e(Aa,vYe),e(Cr,FYe),e(Cr,k),e(k,Sn),e(Sn,Rre),e(Rre,TYe),e(Sn,MYe),e(Sn,xS),e(xS,EYe),e(Sn,CYe),e(Sn,$S),e($S,wYe),e(Sn,AYe),e(k,yYe),e(k,Rn),e(Rn,Pre),e(Pre,LYe),e(Rn,xYe),e(Rn,kS),e(kS,$Ye),e(Rn,kYe),e(Rn,SS),e(SS,SYe),e(Rn,RYe),e(k,PYe),e(k,Pn),e(Pn,Bre),e(Bre,BYe),e(Pn,IYe),e(Pn,RS),e(RS,qYe),e(Pn,NYe),e(Pn,PS),e(PS,jYe),e(Pn,DYe),e(k,GYe),e(k,Tg),e(Tg,Ire),e(Ire,OYe),e(Tg,VYe),e(Tg,BS),e(BS,XYe),e(Tg,zYe),e(k,WYe),e(k,Bn),e(Bn,qre),e(qre,QYe),e(Bn,HYe),e(Bn,IS),e(IS,UYe),e(Bn,JYe),e(Bn,qS),e(qS,YYe),e(Bn,KYe),e(k,ZYe),e(k,Mg),e(Mg,Nre),e(Nre,eKe),e(Mg,oKe),e(Mg,NS),e(NS,rKe),e(Mg,tKe),e(k,aKe),e(k,Eg),e(Eg,jre),e(jre,nKe),e(Eg,sKe),e(Eg,jS),e(jS,lKe),e(Eg,iKe),e(k,dKe),e(k,Cg),e(Cg,Dre),e(Dre,cKe),e(Cg,fKe),e(Cg,DS),e(DS,mKe),e(Cg,gKe),e(k,hKe),e(k,In),e(In,Gre),e(Gre,pKe),e(In,uKe),e(In,GS),e(GS,_Ke),e(In,bKe),e(In,OS),e(OS,vKe),e(In,FKe),e(k,TKe),e(k,qn),e(qn,Ore),e(Ore,MKe),e(qn,EKe),e(qn,VS),e(VS,CKe),e(qn,wKe),e(qn,XS),e(XS,AKe),e(qn,yKe),e(k,LKe),e(k,Nn),e(Nn,Vre),e(Vre,xKe),e(Nn,$Ke),e(Nn,zS),e(zS,kKe),e(Nn,SKe),e(Nn,WS),e(WS,RKe),e(Nn,PKe),e(k,BKe),e(k,wg),e(wg,Xre),e(Xre,IKe),e(wg,qKe),e(wg,QS),e(QS,NKe),e(wg,jKe),e(k,DKe),e(k,Ag),e(Ag,zre),e(zre,GKe),e(Ag,OKe),e(Ag,HS),e(HS,VKe),e(Ag,XKe),e(k,zKe),e(k,jn),e(jn,Wre),e(Wre,WKe),e(jn,QKe),e(jn,US),e(US,HKe),e(jn,UKe),e(jn,JS),e(JS,JKe),e(jn,YKe),e(k,KKe),e(k,yg),e(yg,Qre),e(Qre,ZKe),e(yg,eZe),e(yg,YS),e(YS,oZe),e(yg,rZe),e(k,tZe),e(k,Dn),e(Dn,Hre),e(Hre,aZe),e(Dn,nZe),e(Dn,KS),e(KS,sZe),e(Dn,lZe),e(Dn,ZS),e(ZS,iZe),e(Dn,dZe),e(k,cZe),e(k,Gn),e(Gn,Ure),e(Ure,fZe),e(Gn,mZe),e(Gn,eR),e(eR,gZe),e(Gn,hZe),e(Gn,oR),e(oR,pZe),e(Gn,uZe),e(k,_Ze),e(k,On),e(On,Jre),e(Jre,bZe),e(On,vZe),e(On,rR),e(rR,FZe),e(On,TZe),e(On,tR),e(tR,MZe),e(On,EZe),e(k,CZe),e(k,Lg),e(Lg,Yre),e(Yre,wZe),e(Lg,AZe),e(Lg,aR),e(aR,yZe),e(Lg,LZe),e(k,xZe),e(k,Vn),e(Vn,Kre),e(Kre,$Ze),e(Vn,kZe),e(Vn,nR),e(nR,SZe),e(Vn,RZe),e(Vn,sR),e(sR,PZe),e(Vn,BZe),e(k,IZe),e(k,Xn),e(Xn,Zre),e(Zre,qZe),e(Xn,NZe),e(Xn,lR),e(lR,jZe),e(Xn,DZe),e(Xn,iR),e(iR,GZe),e(Xn,OZe),e(k,VZe),e(k,zn),e(zn,ete),e(ete,XZe),e(zn,zZe),e(zn,dR),e(dR,WZe),e(zn,QZe),e(zn,cR),e(cR,HZe),e(zn,UZe),e(k,JZe),e(k,Wn),e(Wn,ote),e(ote,YZe),e(Wn,KZe),e(Wn,fR),e(fR,ZZe),e(Wn,eeo),e(Wn,mR),e(mR,oeo),e(Wn,reo),e(k,teo),e(k,Qn),e(Qn,rte),e(rte,aeo),e(Qn,neo),e(Qn,gR),e(gR,seo),e(Qn,leo),e(Qn,hR),e(hR,ieo),e(Qn,deo),e(k,ceo),e(k,Hn),e(Hn,tte),e(tte,feo),e(Hn,meo),e(Hn,pR),e(pR,geo),e(Hn,heo),e(Hn,uR),e(uR,peo),e(Hn,ueo),e(k,_eo),e(k,xg),e(xg,ate),e(ate,beo),e(xg,veo),e(xg,_R),e(_R,Feo),e(xg,Teo),e(k,Meo),e(k,Un),e(Un,nte),e(nte,Eeo),e(Un,Ceo),e(Un,bR),e(bR,weo),e(Un,Aeo),e(Un,vR),e(vR,yeo),e(Un,Leo),e(k,xeo),e(k,$g),e($g,ste),e(ste,$eo),e($g,keo),e($g,FR),e(FR,Seo),e($g,Reo),e(k,Peo),e(k,Jn),e(Jn,lte),e(lte,Beo),e(Jn,Ieo),e(Jn,TR),e(TR,qeo),e(Jn,Neo),e(Jn,MR),e(MR,jeo),e(Jn,Deo),e(k,Geo),e(k,Yn),e(Yn,ite),e(ite,Oeo),e(Yn,Veo),e(Yn,ER),e(ER,Xeo),e(Yn,zeo),e(Yn,CR),e(CR,Weo),e(Yn,Qeo),e(k,Heo),e(k,Kn),e(Kn,dte),e(dte,Ueo),e(Kn,Jeo),e(Kn,wR),e(wR,Yeo),e(Kn,Keo),e(Kn,AR),e(AR,Zeo),e(Kn,eoo),e(k,ooo),e(k,Zn),e(Zn,cte),e(cte,roo),e(Zn,too),e(Zn,yR),e(yR,aoo),e(Zn,noo),e(Zn,LR),e(LR,soo),e(Zn,loo),e(k,ioo),e(k,es),e(es,fte),e(fte,doo),e(es,coo),e(es,xR),e(xR,foo),e(es,moo),e(es,$R),e($R,goo),e(es,hoo),e(k,poo),e(k,kg),e(kg,mte),e(mte,uoo),e(kg,_oo),e(kg,kR),e(kR,boo),e(kg,voo),e(k,Foo),e(k,os),e(os,gte),e(gte,Too),e(os,Moo),e(os,SR),e(SR,Eoo),e(os,Coo),e(os,RR),e(RR,woo),e(os,Aoo),e(k,yoo),e(k,rs),e(rs,hte),e(hte,Loo),e(rs,xoo),e(rs,PR),e(PR,$oo),e(rs,koo),e(rs,BR),e(BR,Soo),e(rs,Roo),e(k,Poo),e(k,ts),e(ts,pte),e(pte,Boo),e(ts,Ioo),e(ts,IR),e(IR,qoo),e(ts,Noo),e(ts,qR),e(qR,joo),e(ts,Doo),e(k,Goo),e(k,as),e(as,ute),e(ute,Ooo),e(as,Voo),e(as,NR),e(NR,Xoo),e(as,zoo),e(as,jR),e(jR,Woo),e(as,Qoo),e(k,Hoo),e(k,ns),e(ns,_te),e(_te,Uoo),e(ns,Joo),e(ns,DR),e(DR,Yoo),e(ns,Koo),e(ns,GR),e(GR,Zoo),e(ns,ero),e(k,oro),e(k,ss),e(ss,bte),e(bte,rro),e(ss,tro),e(ss,OR),e(OR,aro),e(ss,nro),e(ss,VR),e(VR,sro),e(ss,lro),e(k,iro),e(k,Sg),e(Sg,vte),e(vte,dro),e(Sg,cro),e(Sg,XR),e(XR,fro),e(Sg,mro),e(k,gro),e(k,ls),e(ls,Fte),e(Fte,hro),e(ls,pro),e(ls,zR),e(zR,uro),e(ls,_ro),e(ls,WR),e(WR,bro),e(ls,vro),e(k,Fro),e(k,Rg),e(Rg,Tte),e(Tte,Tro),e(Rg,Mro),e(Rg,QR),e(QR,Ero),e(Rg,Cro),e(k,wro),e(k,Pg),e(Pg,Mte),e(Mte,Aro),e(Pg,yro),e(Pg,HR),e(HR,Lro),e(Pg,xro),e(k,$ro),e(k,is),e(is,Ete),e(Ete,kro),e(is,Sro),e(is,UR),e(UR,Rro),e(is,Pro),e(is,JR),e(JR,Bro),e(is,Iro),e(k,qro),e(k,ds),e(ds,Cte),e(Cte,Nro),e(ds,jro),e(ds,YR),e(YR,Dro),e(ds,Gro),e(ds,KR),e(KR,Oro),e(ds,Vro),e(k,Xro),e(k,cs),e(cs,wte),e(wte,zro),e(cs,Wro),e(cs,ZR),e(ZR,Qro),e(cs,Hro),e(cs,eP),e(eP,Uro),e(cs,Jro),e(k,Yro),e(k,Bg),e(Bg,Ate),e(Ate,Kro),e(Bg,Zro),e(Bg,oP),e(oP,eto),e(Bg,oto),e(k,rto),e(k,fs),e(fs,yte),e(yte,tto),e(fs,ato),e(fs,rP),e(rP,nto),e(fs,sto),e(fs,tP),e(tP,lto),e(fs,ito),e(k,dto),e(k,ms),e(ms,Lte),e(Lte,cto),e(ms,fto),e(ms,aP),e(aP,mto),e(ms,gto),e(ms,nP),e(nP,hto),e(ms,pto),e(k,uto),e(k,gs),e(gs,xte),e(xte,_to),e(gs,bto),e(gs,sP),e(sP,vto),e(gs,Fto),e(gs,lP),e(lP,Tto),e(gs,Mto),e(k,Eto),e(k,hs),e(hs,$te),e($te,Cto),e(hs,wto),e(hs,iP),e(iP,Ato),e(hs,yto),e(hs,dP),e(dP,Lto),e(hs,xto),e(k,$to),e(k,ps),e(ps,kte),e(kte,kto),e(ps,Sto),e(ps,cP),e(cP,Rto),e(ps,Pto),e(ps,fP),e(fP,Bto),e(ps,Ito),e(k,qto),e(k,Ig),e(Ig,Ste),e(Ste,Nto),e(Ig,jto),e(Ig,mP),e(mP,Dto),e(Ig,Gto),e(k,Oto),e(k,us),e(us,Rte),e(Rte,Vto),e(us,Xto),e(us,gP),e(gP,zto),e(us,Wto),e(us,hP),e(hP,Qto),e(us,Hto),e(k,Uto),e(k,qg),e(qg,Pte),e(Pte,Jto),e(qg,Yto),e(qg,pP),e(pP,Kto),e(qg,Zto),e(k,eao),e(k,Ng),e(Ng,Bte),e(Bte,oao),e(Ng,rao),e(Ng,uP),e(uP,tao),e(Ng,aao),e(k,nao),e(k,jg),e(jg,Ite),e(Ite,sao),e(jg,lao),e(jg,_P),e(_P,iao),e(jg,dao),e(k,cao),e(k,Dg),e(Dg,qte),e(qte,fao),e(Dg,mao),e(Dg,bP),e(bP,gao),e(Dg,hao),e(k,pao),e(k,_s),e(_s,Nte),e(Nte,uao),e(_s,_ao),e(_s,vP),e(vP,bao),e(_s,vao),e(_s,FP),e(FP,Fao),e(_s,Tao),e(k,Mao),e(k,Gg),e(Gg,jte),e(jte,Eao),e(Gg,Cao),e(Gg,TP),e(TP,wao),e(Gg,Aao),e(k,yao),e(k,bs),e(bs,Dte),e(Dte,Lao),e(bs,xao),e(bs,MP),e(MP,$ao),e(bs,kao),e(bs,EP),e(EP,Sao),e(bs,Rao),e(k,Pao),e(k,vs),e(vs,Gte),e(Gte,Bao),e(vs,Iao),e(vs,CP),e(CP,qao),e(vs,Nao),e(vs,wP),e(wP,jao),e(vs,Dao),e(k,Gao),e(k,Fs),e(Fs,Ote),e(Ote,Oao),e(Fs,Vao),e(Fs,AP),e(AP,Xao),e(Fs,zao),e(Fs,yP),e(yP,Wao),e(Fs,Qao),e(k,Hao),e(k,Ts),e(Ts,Vte),e(Vte,Uao),e(Ts,Jao),e(Ts,LP),e(LP,Yao),e(Ts,Kao),e(Ts,xP),e(xP,Zao),e(Ts,eno),e(k,ono),e(k,Ms),e(Ms,Xte),e(Xte,rno),e(Ms,tno),e(Ms,$P),e($P,ano),e(Ms,nno),e(Ms,kP),e(kP,sno),e(Ms,lno),e(k,ino),e(k,Es),e(Es,zte),e(zte,dno),e(Es,cno),e(Es,SP),e(SP,fno),e(Es,mno),e(Es,RP),e(RP,gno),e(Es,hno),e(k,pno),e(k,Og),e(Og,Wte),e(Wte,uno),e(Og,_no),e(Og,PP),e(PP,bno),e(Og,vno),e(k,Fno),e(k,Vg),e(Vg,Qte),e(Qte,Tno),e(Vg,Mno),e(Vg,BP),e(BP,Eno),e(Vg,Cno),e(k,wno),e(k,Cs),e(Cs,Hte),e(Hte,Ano),e(Cs,yno),e(Cs,IP),e(IP,Lno),e(Cs,xno),e(Cs,qP),e(qP,$no),e(Cs,kno),e(k,Sno),e(k,ws),e(ws,Ute),e(Ute,Rno),e(ws,Pno),e(ws,NP),e(NP,Bno),e(ws,Ino),e(ws,jP),e(jP,qno),e(ws,Nno),e(k,jno),e(k,As),e(As,Jte),e(Jte,Dno),e(As,Gno),e(As,DP),e(DP,Ono),e(As,Vno),e(As,GP),e(GP,Xno),e(As,zno),e(k,Wno),e(k,Xg),e(Xg,Yte),e(Yte,Qno),e(Xg,Hno),e(Xg,OP),e(OP,Uno),e(Xg,Jno),e(k,Yno),e(k,zg),e(zg,Kte),e(Kte,Kno),e(zg,Zno),e(zg,VP),e(VP,eso),e(zg,oso),e(k,rso),e(k,Wg),e(Wg,Zte),e(Zte,tso),e(Wg,aso),e(Wg,XP),e(XP,nso),e(Wg,sso),e(k,lso),e(k,ys),e(ys,eae),e(eae,iso),e(ys,dso),e(ys,zP),e(zP,cso),e(ys,fso),e(ys,WP),e(WP,mso),e(ys,gso),e(k,hso),e(k,Qg),e(Qg,oae),e(oae,pso),e(Qg,uso),e(Qg,QP),e(QP,_so),e(Qg,bso),e(k,vso),e(k,Hg),e(Hg,rae),e(rae,Fso),e(Hg,Tso),e(Hg,HP),e(HP,Mso),e(Hg,Eso),e(k,Cso),e(k,Ug),e(Ug,tae),e(tae,wso),e(Ug,Aso),e(Ug,UP),e(UP,yso),e(Ug,Lso),e(k,xso),e(k,Ls),e(Ls,aae),e(aae,$so),e(Ls,kso),e(Ls,JP),e(JP,Sso),e(Ls,Rso),e(Ls,YP),e(YP,Pso),e(Ls,Bso),e(k,Iso),e(k,Jg),e(Jg,nae),e(nae,qso),e(Jg,Nso),e(Jg,KP),e(KP,jso),e(Jg,Dso),e(k,Gso),e(k,Yg),e(Yg,sae),e(sae,Oso),e(Yg,Vso),e(Yg,ZP),e(ZP,Xso),e(Yg,zso),e(k,Wso),e(k,xs),e(xs,lae),e(lae,Qso),e(xs,Hso),e(xs,eB),e(eB,Uso),e(xs,Jso),e(xs,oB),e(oB,Yso),e(xs,Kso),e(k,Zso),e(k,$s),e($s,iae),e(iae,elo),e($s,olo),e($s,rB),e(rB,rlo),e($s,tlo),e($s,tB),e(tB,alo),e($s,nlo),e(k,slo),e(k,ks),e(ks,dae),e(dae,llo),e(ks,ilo),e(ks,aB),e(aB,dlo),e(ks,clo),e(ks,nB),e(nB,flo),e(ks,mlo),e(k,glo),e(k,Ss),e(Ss,cae),e(cae,hlo),e(Ss,plo),e(Ss,sB),e(sB,ulo),e(Ss,_lo),e(Ss,lB),e(lB,blo),e(Ss,vlo),e(Cr,Flo),M(Kg,Cr,null),e(wo,Tlo),e(wo,Zg),M(F0,Zg,null),e(Zg,Mlo),e(Zg,fae),e(fae,Elo),b(f,PIe,_),b(f,Ti,_),e(Ti,eh),e(eh,mae),M(T0,mae,null),e(Ti,Clo),e(Ti,gae),e(gae,wlo),b(f,BIe,_),b(f,Ao,_),M(M0,Ao,null),e(Ao,Alo),e(Ao,E0),e(E0,ylo),e(E0,iB),e(iB,Llo),e(E0,xlo),e(Ao,$lo),e(Ao,C0),e(C0,klo),e(C0,hae),e(hae,Slo),e(C0,Rlo),e(Ao,Plo),e(Ao,He),M(w0,He,null),e(He,Blo),e(He,pae),e(pae,Ilo),e(He,qlo),e(He,ya),e(ya,Nlo),e(ya,uae),e(uae,jlo),e(ya,Dlo),e(ya,_ae),e(_ae,Glo),e(ya,Olo),e(ya,bae),e(bae,Vlo),e(ya,Xlo),e(He,zlo),e(He,Z),e(Z,oh),e(oh,vae),e(vae,Wlo),e(oh,Qlo),e(oh,dB),e(dB,Hlo),e(oh,Ulo),e(Z,Jlo),e(Z,rh),e(rh,Fae),e(Fae,Ylo),e(rh,Klo),e(rh,cB),e(cB,Zlo),e(rh,eio),e(Z,oio),e(Z,th),e(th,Tae),e(Tae,rio),e(th,tio),e(th,fB),e(fB,aio),e(th,nio),e(Z,sio),e(Z,ah),e(ah,Mae),e(Mae,lio),e(ah,iio),e(ah,mB),e(mB,dio),e(ah,cio),e(Z,fio),e(Z,nh),e(nh,Eae),e(Eae,mio),e(nh,gio),e(nh,gB),e(gB,hio),e(nh,pio),e(Z,uio),e(Z,sh),e(sh,Cae),e(Cae,_io),e(sh,bio),e(sh,hB),e(hB,vio),e(sh,Fio),e(Z,Tio),e(Z,lh),e(lh,wae),e(wae,Mio),e(lh,Eio),e(lh,pB),e(pB,Cio),e(lh,wio),e(Z,Aio),e(Z,ih),e(ih,Aae),e(Aae,yio),e(ih,Lio),e(ih,uB),e(uB,xio),e(ih,$io),e(Z,kio),e(Z,dh),e(dh,yae),e(yae,Sio),e(dh,Rio),e(dh,_B),e(_B,Pio),e(dh,Bio),e(Z,Iio),e(Z,ch),e(ch,Lae),e(Lae,qio),e(ch,Nio),e(ch,bB),e(bB,jio),e(ch,Dio),e(Z,Gio),e(Z,fh),e(fh,xae),e(xae,Oio),e(fh,Vio),e(fh,vB),e(vB,Xio),e(fh,zio),e(Z,Wio),e(Z,mh),e(mh,$ae),e($ae,Qio),e(mh,Hio),e(mh,FB),e(FB,Uio),e(mh,Jio),e(Z,Yio),e(Z,gh),e(gh,kae),e(kae,Kio),e(gh,Zio),e(gh,TB),e(TB,edo),e(gh,odo),e(Z,rdo),e(Z,hh),e(hh,Sae),e(Sae,tdo),e(hh,ado),e(hh,MB),e(MB,ndo),e(hh,sdo),e(Z,ldo),e(Z,ph),e(ph,Rae),e(Rae,ido),e(ph,ddo),e(ph,EB),e(EB,cdo),e(ph,fdo),e(Z,mdo),e(Z,uh),e(uh,Pae),e(Pae,gdo),e(uh,hdo),e(uh,CB),e(CB,pdo),e(uh,udo),e(Z,_do),e(Z,_h),e(_h,Bae),e(Bae,bdo),e(_h,vdo),e(_h,wB),e(wB,Fdo),e(_h,Tdo),e(Z,Mdo),e(Z,bh),e(bh,Iae),e(Iae,Edo),e(bh,Cdo),e(bh,AB),e(AB,wdo),e(bh,Ado),e(Z,ydo),e(Z,vh),e(vh,qae),e(qae,Ldo),e(vh,xdo),e(vh,yB),e(yB,$do),e(vh,kdo),e(Z,Sdo),e(Z,Fh),e(Fh,Nae),e(Nae,Rdo),e(Fh,Pdo),e(Fh,LB),e(LB,Bdo),e(Fh,Ido),e(Z,qdo),e(Z,Th),e(Th,jae),e(jae,Ndo),e(Th,jdo),e(Th,xB),e(xB,Ddo),e(Th,Gdo),e(Z,Odo),e(Z,Mh),e(Mh,Dae),e(Dae,Vdo),e(Mh,Xdo),e(Mh,$B),e($B,zdo),e(Mh,Wdo),e(Z,Qdo),e(Z,Eh),e(Eh,Gae),e(Gae,Hdo),e(Eh,Udo),e(Eh,kB),e(kB,Jdo),e(Eh,Ydo),e(Z,Kdo),e(Z,Ch),e(Ch,Oae),e(Oae,Zdo),e(Ch,eco),e(Ch,SB),e(SB,oco),e(Ch,rco),e(Z,tco),e(Z,wh),e(wh,Vae),e(Vae,aco),e(wh,nco),e(wh,RB),e(RB,sco),e(wh,lco),e(Z,ico),e(Z,Ah),e(Ah,Xae),e(Xae,dco),e(Ah,cco),e(Ah,PB),e(PB,fco),e(Ah,mco),e(He,gco),M(yh,He,null),e(He,hco),M(Lh,He,null),e(Ao,pco),e(Ao,xh),M(A0,xh,null),e(xh,uco),e(xh,zae),e(zae,_co),b(f,IIe,_),b(f,Mi,_),e(Mi,$h),e($h,Wae),M(y0,Wae,null),e(Mi,bco),e(Mi,Qae),e(Qae,vco),b(f,qIe,_),b(f,yo,_),M(L0,yo,null),e(yo,Fco),e(yo,x0),e(x0,Tco),e(x0,BB),e(BB,Mco),e(x0,Eco),e(yo,Cco),e(yo,$0),e($0,wco),e($0,Hae),e(Hae,Aco),e($0,yco),e(yo,Lco),e(yo,Ue),M(k0,Ue,null),e(Ue,xco),e(Ue,Uae),e(Uae,$co),e(Ue,kco),e(Ue,Ei),e(Ei,Sco),e(Ei,Jae),e(Jae,Rco),e(Ei,Pco),e(Ei,Yae),e(Yae,Bco),e(Ei,Ico),e(Ue,qco),e(Ue,pe),e(pe,kh),e(kh,Kae),e(Kae,Nco),e(kh,jco),e(kh,IB),e(IB,Dco),e(kh,Gco),e(pe,Oco),e(pe,Sh),e(Sh,Zae),e(Zae,Vco),e(Sh,Xco),e(Sh,ene),e(ene,zco),e(Sh,Wco),e(pe,Qco),e(pe,Rh),e(Rh,one),e(one,Hco),e(Rh,Uco),e(Rh,qB),e(qB,Jco),e(Rh,Yco),e(pe,Kco),e(pe,Ph),e(Ph,rne),e(rne,Zco),e(Ph,efo),e(Ph,NB),e(NB,ofo),e(Ph,rfo),e(pe,tfo),e(pe,Bh),e(Bh,tne),e(tne,afo),e(Bh,nfo),e(Bh,jB),e(jB,sfo),e(Bh,lfo),e(pe,ifo),e(pe,Ih),e(Ih,ane),e(ane,dfo),e(Ih,cfo),e(Ih,DB),e(DB,ffo),e(Ih,mfo),e(pe,gfo),e(pe,qh),e(qh,nne),e(nne,hfo),e(qh,pfo),e(qh,GB),e(GB,ufo),e(qh,_fo),e(pe,bfo),e(pe,Nh),e(Nh,sne),e(sne,vfo),e(Nh,Ffo),e(Nh,OB),e(OB,Tfo),e(Nh,Mfo),e(pe,Efo),e(pe,jh),e(jh,lne),e(lne,Cfo),e(jh,wfo),e(jh,VB),e(VB,Afo),e(jh,yfo),e(pe,Lfo),e(pe,Dh),e(Dh,ine),e(ine,xfo),e(Dh,$fo),e(Dh,XB),e(XB,kfo),e(Dh,Sfo),e(pe,Rfo),e(pe,Gh),e(Gh,dne),e(dne,Pfo),e(Gh,Bfo),e(Gh,zB),e(zB,Ifo),e(Gh,qfo),e(pe,Nfo),e(pe,Oh),e(Oh,cne),e(cne,jfo),e(Oh,Dfo),e(Oh,WB),e(WB,Gfo),e(Oh,Ofo),e(pe,Vfo),e(pe,Vh),e(Vh,fne),e(fne,Xfo),e(Vh,zfo),e(Vh,QB),e(QB,Wfo),e(Vh,Qfo),e(pe,Hfo),e(pe,Xh),e(Xh,mne),e(mne,Ufo),e(Xh,Jfo),e(Xh,HB),e(HB,Yfo),e(Xh,Kfo),e(pe,Zfo),e(pe,zh),e(zh,gne),e(gne,emo),e(zh,omo),e(zh,UB),e(UB,rmo),e(zh,tmo),e(pe,amo),e(pe,Wh),e(Wh,hne),e(hne,nmo),e(Wh,smo),e(Wh,JB),e(JB,lmo),e(Wh,imo),e(Ue,dmo),M(Qh,Ue,null),e(Ue,cmo),M(Hh,Ue,null),e(yo,fmo),e(yo,Uh),M(S0,Uh,null),e(Uh,mmo),e(Uh,pne),e(pne,gmo),b(f,NIe,_),b(f,Ci,_),e(Ci,Jh),e(Jh,une),M(R0,une,null),e(Ci,hmo),e(Ci,_ne),e(_ne,pmo),b(f,jIe,_),b(f,Lo,_),M(P0,Lo,null),e(Lo,umo),e(Lo,wi),e(wi,_mo),e(wi,YB),e(YB,bmo),e(wi,vmo),e(wi,KB),e(KB,Fmo),e(wi,Tmo),e(Lo,Mmo),e(Lo,B0),e(B0,Emo),e(B0,bne),e(bne,Cmo),e(B0,wmo),e(Lo,Amo),e(Lo,tt),M(I0,tt,null),e(tt,ymo),e(tt,vne),e(vne,Lmo),e(tt,xmo),e(tt,Ai),e(Ai,$mo),e(Ai,Fne),e(Fne,kmo),e(Ai,Smo),e(Ai,ZB),e(ZB,Rmo),e(Ai,Pmo),e(tt,Bmo),M(Yh,tt,null),e(Lo,Imo),e(Lo,Je),M(q0,Je,null),e(Je,qmo),e(Je,Tne),e(Tne,Nmo),e(Je,jmo),e(Je,La),e(La,Dmo),e(La,Mne),e(Mne,Gmo),e(La,Omo),e(La,Ene),e(Ene,Vmo),e(La,Xmo),e(La,Cne),e(Cne,zmo),e(La,Wmo),e(Je,Qmo),e(Je,x),e(x,Kh),e(Kh,wne),e(wne,Hmo),e(Kh,Umo),e(Kh,eI),e(eI,Jmo),e(Kh,Ymo),e(x,Kmo),e(x,Zh),e(Zh,Ane),e(Ane,Zmo),e(Zh,ego),e(Zh,oI),e(oI,ogo),e(Zh,rgo),e(x,tgo),e(x,ep),e(ep,yne),e(yne,ago),e(ep,ngo),e(ep,rI),e(rI,sgo),e(ep,lgo),e(x,igo),e(x,op),e(op,Lne),e(Lne,dgo),e(op,cgo),e(op,tI),e(tI,fgo),e(op,mgo),e(x,ggo),e(x,rp),e(rp,xne),e(xne,hgo),e(rp,pgo),e(rp,aI),e(aI,ugo),e(rp,_go),e(x,bgo),e(x,tp),e(tp,$ne),e($ne,vgo),e(tp,Fgo),e(tp,nI),e(nI,Tgo),e(tp,Mgo),e(x,Ego),e(x,ap),e(ap,kne),e(kne,Cgo),e(ap,wgo),e(ap,sI),e(sI,Ago),e(ap,ygo),e(x,Lgo),e(x,np),e(np,Sne),e(Sne,xgo),e(np,$go),e(np,lI),e(lI,kgo),e(np,Sgo),e(x,Rgo),e(x,sp),e(sp,Rne),e(Rne,Pgo),e(sp,Bgo),e(sp,iI),e(iI,Igo),e(sp,qgo),e(x,Ngo),e(x,lp),e(lp,Pne),e(Pne,jgo),e(lp,Dgo),e(lp,dI),e(dI,Ggo),e(lp,Ogo),e(x,Vgo),e(x,ip),e(ip,Bne),e(Bne,Xgo),e(ip,zgo),e(ip,cI),e(cI,Wgo),e(ip,Qgo),e(x,Hgo),e(x,dp),e(dp,Ine),e(Ine,Ugo),e(dp,Jgo),e(dp,fI),e(fI,Ygo),e(dp,Kgo),e(x,Zgo),e(x,cp),e(cp,qne),e(qne,eho),e(cp,oho),e(cp,mI),e(mI,rho),e(cp,tho),e(x,aho),e(x,fp),e(fp,Nne),e(Nne,nho),e(fp,sho),e(fp,gI),e(gI,lho),e(fp,iho),e(x,dho),e(x,mp),e(mp,jne),e(jne,cho),e(mp,fho),e(mp,hI),e(hI,mho),e(mp,gho),e(x,hho),e(x,gp),e(gp,Dne),e(Dne,pho),e(gp,uho),e(gp,pI),e(pI,_ho),e(gp,bho),e(x,vho),e(x,hp),e(hp,Gne),e(Gne,Fho),e(hp,Tho),e(hp,uI),e(uI,Mho),e(hp,Eho),e(x,Cho),e(x,pp),e(pp,One),e(One,who),e(pp,Aho),e(pp,_I),e(_I,yho),e(pp,Lho),e(x,xho),e(x,up),e(up,Vne),e(Vne,$ho),e(up,kho),e(up,bI),e(bI,Sho),e(up,Rho),e(x,Pho),e(x,_p),e(_p,Xne),e(Xne,Bho),e(_p,Iho),e(_p,vI),e(vI,qho),e(_p,Nho),e(x,jho),e(x,bp),e(bp,zne),e(zne,Dho),e(bp,Gho),e(bp,FI),e(FI,Oho),e(bp,Vho),e(x,Xho),e(x,vp),e(vp,Wne),e(Wne,zho),e(vp,Who),e(vp,TI),e(TI,Qho),e(vp,Hho),e(x,Uho),e(x,Fp),e(Fp,Qne),e(Qne,Jho),e(Fp,Yho),e(Fp,MI),e(MI,Kho),e(Fp,Zho),e(x,epo),e(x,Tp),e(Tp,Hne),e(Hne,opo),e(Tp,rpo),e(Tp,EI),e(EI,tpo),e(Tp,apo),e(x,npo),e(x,Mp),e(Mp,Une),e(Une,spo),e(Mp,lpo),e(Mp,CI),e(CI,ipo),e(Mp,dpo),e(x,cpo),e(x,Ep),e(Ep,Jne),e(Jne,fpo),e(Ep,mpo),e(Ep,wI),e(wI,gpo),e(Ep,hpo),e(x,ppo),e(x,Cp),e(Cp,Yne),e(Yne,upo),e(Cp,_po),e(Cp,AI),e(AI,bpo),e(Cp,vpo),e(x,Fpo),e(x,wp),e(wp,Kne),e(Kne,Tpo),e(wp,Mpo),e(wp,yI),e(yI,Epo),e(wp,Cpo),e(x,wpo),e(x,Ap),e(Ap,Zne),e(Zne,Apo),e(Ap,ypo),e(Ap,LI),e(LI,Lpo),e(Ap,xpo),e(x,$po),e(x,yp),e(yp,ese),e(ese,kpo),e(yp,Spo),e(yp,xI),e(xI,Rpo),e(yp,Ppo),e(x,Bpo),e(x,Lp),e(Lp,ose),e(ose,Ipo),e(Lp,qpo),e(Lp,$I),e($I,Npo),e(Lp,jpo),e(x,Dpo),e(x,Rs),e(Rs,rse),e(rse,Gpo),e(Rs,Opo),e(Rs,kI),e(kI,Vpo),e(Rs,Xpo),e(Rs,SI),e(SI,zpo),e(Rs,Wpo),e(x,Qpo),e(x,xp),e(xp,tse),e(tse,Hpo),e(xp,Upo),e(xp,RI),e(RI,Jpo),e(xp,Ypo),e(x,Kpo),e(x,$p),e($p,ase),e(ase,Zpo),e($p,euo),e($p,PI),e(PI,ouo),e($p,ruo),e(x,tuo),e(x,kp),e(kp,nse),e(nse,auo),e(kp,nuo),e(kp,BI),e(BI,suo),e(kp,luo),e(x,iuo),e(x,Sp),e(Sp,sse),e(sse,duo),e(Sp,cuo),e(Sp,II),e(II,fuo),e(Sp,muo),e(x,guo),e(x,Rp),e(Rp,lse),e(lse,huo),e(Rp,puo),e(Rp,qI),e(qI,uuo),e(Rp,_uo),e(x,buo),e(x,Pp),e(Pp,ise),e(ise,vuo),e(Pp,Fuo),e(Pp,NI),e(NI,Tuo),e(Pp,Muo),e(x,Euo),e(x,Bp),e(Bp,dse),e(dse,Cuo),e(Bp,wuo),e(Bp,jI),e(jI,Auo),e(Bp,yuo),e(x,Luo),e(x,Ip),e(Ip,cse),e(cse,xuo),e(Ip,$uo),e(Ip,DI),e(DI,kuo),e(Ip,Suo),e(x,Ruo),e(x,qp),e(qp,fse),e(fse,Puo),e(qp,Buo),e(qp,GI),e(GI,Iuo),e(qp,quo),e(x,Nuo),e(x,Np),e(Np,mse),e(mse,juo),e(Np,Duo),e(Np,OI),e(OI,Guo),e(Np,Ouo),e(x,Vuo),e(x,jp),e(jp,gse),e(gse,Xuo),e(jp,zuo),e(jp,VI),e(VI,Wuo),e(jp,Quo),e(x,Huo),e(x,Dp),e(Dp,hse),e(hse,Uuo),e(Dp,Juo),e(Dp,XI),e(XI,Yuo),e(Dp,Kuo),e(x,Zuo),e(x,Gp),e(Gp,pse),e(pse,e_o),e(Gp,o_o),e(Gp,zI),e(zI,r_o),e(Gp,t_o),e(x,a_o),e(x,Op),e(Op,use),e(use,n_o),e(Op,s_o),e(Op,WI),e(WI,l_o),e(Op,i_o),e(x,d_o),e(x,Vp),e(Vp,_se),e(_se,c_o),e(Vp,f_o),e(Vp,QI),e(QI,m_o),e(Vp,g_o),e(x,h_o),e(x,Xp),e(Xp,bse),e(bse,p_o),e(Xp,u_o),e(Xp,HI),e(HI,__o),e(Xp,b_o),e(x,v_o),e(x,zp),e(zp,vse),e(vse,F_o),e(zp,T_o),e(zp,UI),e(UI,M_o),e(zp,E_o),e(x,C_o),e(x,Wp),e(Wp,Fse),e(Fse,w_o),e(Wp,A_o),e(Wp,JI),e(JI,y_o),e(Wp,L_o),e(x,x_o),e(x,Qp),e(Qp,Tse),e(Tse,$_o),e(Qp,k_o),e(Qp,YI),e(YI,S_o),e(Qp,R_o),e(x,P_o),e(x,Hp),e(Hp,Mse),e(Mse,B_o),e(Hp,I_o),e(Hp,KI),e(KI,q_o),e(Hp,N_o),e(x,j_o),e(x,Up),e(Up,Ese),e(Ese,D_o),e(Up,G_o),e(Up,ZI),e(ZI,O_o),e(Up,V_o),e(x,X_o),e(x,Jp),e(Jp,Cse),e(Cse,z_o),e(Jp,W_o),e(Jp,eq),e(eq,Q_o),e(Jp,H_o),e(x,U_o),e(x,Yp),e(Yp,wse),e(wse,J_o),e(Yp,Y_o),e(Yp,oq),e(oq,K_o),e(Yp,Z_o),e(x,e2o),e(x,Kp),e(Kp,Ase),e(Ase,o2o),e(Kp,r2o),e(Kp,rq),e(rq,t2o),e(Kp,a2o),e(x,n2o),e(x,Zp),e(Zp,yse),e(yse,s2o),e(Zp,l2o),e(Zp,tq),e(tq,i2o),e(Zp,d2o),e(x,c2o),e(x,eu),e(eu,Lse),e(Lse,f2o),e(eu,m2o),e(eu,aq),e(aq,g2o),e(eu,h2o),e(x,p2o),e(x,ou),e(ou,xse),e(xse,u2o),e(ou,_2o),e(ou,nq),e(nq,b2o),e(ou,v2o),e(x,F2o),e(x,ru),e(ru,$se),e($se,T2o),e(ru,M2o),e(ru,sq),e(sq,E2o),e(ru,C2o),e(x,w2o),e(x,tu),e(tu,kse),e(kse,A2o),e(tu,y2o),e(tu,lq),e(lq,L2o),e(tu,x2o),e(x,$2o),e(x,au),e(au,Sse),e(Sse,k2o),e(au,S2o),e(au,iq),e(iq,R2o),e(au,P2o),e(x,B2o),e(x,nu),e(nu,Rse),e(Rse,I2o),e(nu,q2o),e(nu,dq),e(dq,N2o),e(nu,j2o),e(x,D2o),e(x,su),e(su,Pse),e(Pse,G2o),e(su,O2o),e(su,cq),e(cq,V2o),e(su,X2o),e(x,z2o),e(x,lu),e(lu,Bse),e(Bse,W2o),e(lu,Q2o),e(lu,fq),e(fq,H2o),e(lu,U2o),e(x,J2o),e(x,iu),e(iu,Ise),e(Ise,Y2o),e(iu,K2o),e(iu,mq),e(mq,Z2o),e(iu,e1o),e(x,o1o),e(x,du),e(du,qse),e(qse,r1o),e(du,t1o),e(du,gq),e(gq,a1o),e(du,n1o),e(x,s1o),e(x,cu),e(cu,Nse),e(Nse,l1o),e(cu,i1o),e(cu,hq),e(hq,d1o),e(cu,c1o),e(x,f1o),e(x,fu),e(fu,jse),e(jse,m1o),e(fu,g1o),e(fu,pq),e(pq,h1o),e(fu,p1o),e(x,u1o),e(x,mu),e(mu,Dse),e(Dse,_1o),e(mu,b1o),e(mu,uq),e(uq,v1o),e(mu,F1o),e(x,T1o),e(x,gu),e(gu,Gse),e(Gse,M1o),e(gu,E1o),e(gu,_q),e(_q,C1o),e(gu,w1o),e(x,A1o),e(x,hu),e(hu,Ose),e(Ose,y1o),e(hu,L1o),e(hu,bq),e(bq,x1o),e(hu,$1o),e(x,k1o),e(x,pu),e(pu,Vse),e(Vse,S1o),e(pu,R1o),e(pu,vq),e(vq,P1o),e(pu,B1o),e(x,I1o),e(x,uu),e(uu,Xse),e(Xse,q1o),e(uu,N1o),e(uu,Fq),e(Fq,j1o),e(uu,D1o),e(x,G1o),e(x,_u),e(_u,zse),e(zse,O1o),e(_u,V1o),e(_u,Tq),e(Tq,X1o),e(_u,z1o),e(x,W1o),e(x,bu),e(bu,Wse),e(Wse,Q1o),e(bu,H1o),e(bu,Mq),e(Mq,U1o),e(bu,J1o),e(x,Y1o),e(x,vu),e(vu,Qse),e(Qse,K1o),e(vu,Z1o),e(vu,Eq),e(Eq,e7o),e(vu,o7o),e(x,r7o),e(x,Fu),e(Fu,Hse),e(Hse,t7o),e(Fu,a7o),e(Fu,Cq),e(Cq,n7o),e(Fu,s7o),e(x,l7o),e(x,Tu),e(Tu,Use),e(Use,i7o),e(Tu,d7o),e(Tu,wq),e(wq,c7o),e(Tu,f7o),e(x,m7o),e(x,Mu),e(Mu,Jse),e(Jse,g7o),e(Mu,h7o),e(Mu,Aq),e(Aq,p7o),e(Mu,u7o),e(x,_7o),e(x,Eu),e(Eu,Yse),e(Yse,b7o),e(Eu,v7o),e(Eu,yq),e(yq,F7o),e(Eu,T7o),e(x,M7o),e(x,Cu),e(Cu,Kse),e(Kse,E7o),e(Cu,C7o),e(Cu,Lq),e(Lq,w7o),e(Cu,A7o),e(x,y7o),e(x,wu),e(wu,Zse),e(Zse,L7o),e(wu,x7o),e(wu,xq),e(xq,$7o),e(wu,k7o),e(x,S7o),e(x,Au),e(Au,ele),e(ele,R7o),e(Au,P7o),e(Au,$q),e($q,B7o),e(Au,I7o),e(x,q7o),e(x,yu),e(yu,ole),e(ole,N7o),e(yu,j7o),e(yu,kq),e(kq,D7o),e(yu,G7o),e(x,O7o),e(x,Lu),e(Lu,rle),e(rle,V7o),e(Lu,X7o),e(Lu,Sq),e(Sq,z7o),e(Lu,W7o),e(x,Q7o),e(x,xu),e(xu,tle),e(tle,H7o),e(xu,U7o),e(xu,Rq),e(Rq,J7o),e(xu,Y7o),e(x,K7o),e(x,$u),e($u,ale),e(ale,Z7o),e($u,ebo),e($u,Pq),e(Pq,obo),e($u,rbo),e(x,tbo),e(x,ku),e(ku,nle),e(nle,abo),e(ku,nbo),e(ku,Bq),e(Bq,sbo),e(ku,lbo),e(x,ibo),e(x,Su),e(Su,sle),e(sle,dbo),e(Su,cbo),e(Su,Iq),e(Iq,fbo),e(Su,mbo),e(x,gbo),e(x,Ru),e(Ru,lle),e(lle,hbo),e(Ru,pbo),e(Ru,qq),e(qq,ubo),e(Ru,_bo),e(x,bbo),e(x,Pu),e(Pu,ile),e(ile,vbo),e(Pu,Fbo),e(Pu,Nq),e(Nq,Tbo),e(Pu,Mbo),e(x,Ebo),e(x,Bu),e(Bu,dle),e(dle,Cbo),e(Bu,wbo),e(Bu,jq),e(jq,Abo),e(Bu,ybo),e(x,Lbo),e(x,Iu),e(Iu,cle),e(cle,xbo),e(Iu,$bo),e(Iu,Dq),e(Dq,kbo),e(Iu,Sbo),e(x,Rbo),e(x,qu),e(qu,fle),e(fle,Pbo),e(qu,Bbo),e(qu,Gq),e(Gq,Ibo),e(qu,qbo),e(x,Nbo),e(x,Nu),e(Nu,mle),e(mle,jbo),e(Nu,Dbo),e(Nu,Oq),e(Oq,Gbo),e(Nu,Obo),e(x,Vbo),e(x,ju),e(ju,gle),e(gle,Xbo),e(ju,zbo),e(ju,Vq),e(Vq,Wbo),e(ju,Qbo),e(x,Hbo),e(x,Du),e(Du,hle),e(hle,Ubo),e(Du,Jbo),e(Du,Xq),e(Xq,Ybo),e(Du,Kbo),e(Je,Zbo),e(Je,Gu),e(Gu,e5o),e(Gu,ple),e(ple,o5o),e(Gu,r5o),e(Gu,ule),e(ule,t5o),e(Je,a5o),M(Ou,Je,null),b(f,DIe,_),b(f,yi,_),e(yi,Vu),e(Vu,_le),M(N0,_le,null),e(yi,n5o),e(yi,ble),e(ble,s5o),b(f,GIe,_),b(f,xo,_),M(j0,xo,null),e(xo,l5o),e(xo,Li),e(Li,i5o),e(Li,zq),e(zq,d5o),e(Li,c5o),e(Li,Wq),e(Wq,f5o),e(Li,m5o),e(xo,g5o),e(xo,D0),e(D0,h5o),e(D0,vle),e(vle,p5o),e(D0,u5o),e(xo,_5o),e(xo,at),M(G0,at,null),e(at,b5o),e(at,Fle),e(Fle,v5o),e(at,F5o),e(at,xi),e(xi,T5o),e(xi,Tle),e(Tle,M5o),e(xi,E5o),e(xi,Qq),e(Qq,C5o),e(xi,w5o),e(at,A5o),M(Xu,at,null),e(xo,y5o),e(xo,Ye),M(O0,Ye,null),e(Ye,L5o),e(Ye,Mle),e(Mle,x5o),e(Ye,$5o),e(Ye,xa),e(xa,k5o),e(xa,Ele),e(Ele,S5o),e(xa,R5o),e(xa,Cle),e(Cle,P5o),e(xa,B5o),e(xa,wle),e(wle,I5o),e(xa,q5o),e(Ye,N5o),e(Ye,G),e(G,zu),e(zu,Ale),e(Ale,j5o),e(zu,D5o),e(zu,Hq),e(Hq,G5o),e(zu,O5o),e(G,V5o),e(G,Wu),e(Wu,yle),e(yle,X5o),e(Wu,z5o),e(Wu,Uq),e(Uq,W5o),e(Wu,Q5o),e(G,H5o),e(G,Qu),e(Qu,Lle),e(Lle,U5o),e(Qu,J5o),e(Qu,Jq),e(Jq,Y5o),e(Qu,K5o),e(G,Z5o),e(G,Hu),e(Hu,xle),e(xle,evo),e(Hu,ovo),e(Hu,Yq),e(Yq,rvo),e(Hu,tvo),e(G,avo),e(G,Uu),e(Uu,$le),e($le,nvo),e(Uu,svo),e(Uu,Kq),e(Kq,lvo),e(Uu,ivo),e(G,dvo),e(G,Ju),e(Ju,kle),e(kle,cvo),e(Ju,fvo),e(Ju,Zq),e(Zq,mvo),e(Ju,gvo),e(G,hvo),e(G,Yu),e(Yu,Sle),e(Sle,pvo),e(Yu,uvo),e(Yu,eN),e(eN,_vo),e(Yu,bvo),e(G,vvo),e(G,Ku),e(Ku,Rle),e(Rle,Fvo),e(Ku,Tvo),e(Ku,oN),e(oN,Mvo),e(Ku,Evo),e(G,Cvo),e(G,Zu),e(Zu,Ple),e(Ple,wvo),e(Zu,Avo),e(Zu,rN),e(rN,yvo),e(Zu,Lvo),e(G,xvo),e(G,e_),e(e_,Ble),e(Ble,$vo),e(e_,kvo),e(e_,tN),e(tN,Svo),e(e_,Rvo),e(G,Pvo),e(G,o_),e(o_,Ile),e(Ile,Bvo),e(o_,Ivo),e(o_,aN),e(aN,qvo),e(o_,Nvo),e(G,jvo),e(G,r_),e(r_,qle),e(qle,Dvo),e(r_,Gvo),e(r_,nN),e(nN,Ovo),e(r_,Vvo),e(G,Xvo),e(G,t_),e(t_,Nle),e(Nle,zvo),e(t_,Wvo),e(t_,sN),e(sN,Qvo),e(t_,Hvo),e(G,Uvo),e(G,a_),e(a_,jle),e(jle,Jvo),e(a_,Yvo),e(a_,lN),e(lN,Kvo),e(a_,Zvo),e(G,eFo),e(G,n_),e(n_,Dle),e(Dle,oFo),e(n_,rFo),e(n_,iN),e(iN,tFo),e(n_,aFo),e(G,nFo),e(G,s_),e(s_,Gle),e(Gle,sFo),e(s_,lFo),e(s_,dN),e(dN,iFo),e(s_,dFo),e(G,cFo),e(G,l_),e(l_,Ole),e(Ole,fFo),e(l_,mFo),e(l_,cN),e(cN,gFo),e(l_,hFo),e(G,pFo),e(G,i_),e(i_,Vle),e(Vle,uFo),e(i_,_Fo),e(i_,fN),e(fN,bFo),e(i_,vFo),e(G,FFo),e(G,d_),e(d_,Xle),e(Xle,TFo),e(d_,MFo),e(d_,mN),e(mN,EFo),e(d_,CFo),e(G,wFo),e(G,c_),e(c_,zle),e(zle,AFo),e(c_,yFo),e(c_,gN),e(gN,LFo),e(c_,xFo),e(G,$Fo),e(G,f_),e(f_,Wle),e(Wle,kFo),e(f_,SFo),e(f_,hN),e(hN,RFo),e(f_,PFo),e(G,BFo),e(G,m_),e(m_,Qle),e(Qle,IFo),e(m_,qFo),e(m_,pN),e(pN,NFo),e(m_,jFo),e(G,DFo),e(G,g_),e(g_,Hle),e(Hle,GFo),e(g_,OFo),e(g_,uN),e(uN,VFo),e(g_,XFo),e(G,zFo),e(G,h_),e(h_,Ule),e(Ule,WFo),e(h_,QFo),e(h_,_N),e(_N,HFo),e(h_,UFo),e(G,JFo),e(G,p_),e(p_,Jle),e(Jle,YFo),e(p_,KFo),e(p_,bN),e(bN,ZFo),e(p_,eTo),e(G,oTo),e(G,u_),e(u_,Yle),e(Yle,rTo),e(u_,tTo),e(u_,vN),e(vN,aTo),e(u_,nTo),e(G,sTo),e(G,__),e(__,Kle),e(Kle,lTo),e(__,iTo),e(__,FN),e(FN,dTo),e(__,cTo),e(G,fTo),e(G,b_),e(b_,Zle),e(Zle,mTo),e(b_,gTo),e(b_,TN),e(TN,hTo),e(b_,pTo),e(G,uTo),e(G,v_),e(v_,eie),e(eie,_To),e(v_,bTo),e(v_,MN),e(MN,vTo),e(v_,FTo),e(G,TTo),e(G,F_),e(F_,oie),e(oie,MTo),e(F_,ETo),e(F_,EN),e(EN,CTo),e(F_,wTo),e(G,ATo),e(G,T_),e(T_,rie),e(rie,yTo),e(T_,LTo),e(T_,CN),e(CN,xTo),e(T_,$To),e(G,kTo),e(G,M_),e(M_,tie),e(tie,STo),e(M_,RTo),e(M_,wN),e(wN,PTo),e(M_,BTo),e(G,ITo),e(G,E_),e(E_,aie),e(aie,qTo),e(E_,NTo),e(E_,AN),e(AN,jTo),e(E_,DTo),e(G,GTo),e(G,C_),e(C_,nie),e(nie,OTo),e(C_,VTo),e(C_,yN),e(yN,XTo),e(C_,zTo),e(G,WTo),e(G,w_),e(w_,sie),e(sie,QTo),e(w_,HTo),e(w_,LN),e(LN,UTo),e(w_,JTo),e(G,YTo),e(G,A_),e(A_,lie),e(lie,KTo),e(A_,ZTo),e(A_,xN),e(xN,eMo),e(A_,oMo),e(G,rMo),e(G,y_),e(y_,iie),e(iie,tMo),e(y_,aMo),e(y_,$N),e($N,nMo),e(y_,sMo),e(G,lMo),e(G,L_),e(L_,die),e(die,iMo),e(L_,dMo),e(L_,kN),e(kN,cMo),e(L_,fMo),e(G,mMo),e(G,x_),e(x_,cie),e(cie,gMo),e(x_,hMo),e(x_,SN),e(SN,pMo),e(x_,uMo),e(G,_Mo),e(G,$_),e($_,fie),e(fie,bMo),e($_,vMo),e($_,RN),e(RN,FMo),e($_,TMo),e(G,MMo),e(G,k_),e(k_,mie),e(mie,EMo),e(k_,CMo),e(k_,PN),e(PN,wMo),e(k_,AMo),e(Ye,yMo),e(Ye,S_),e(S_,LMo),e(S_,gie),e(gie,xMo),e(S_,$Mo),e(S_,hie),e(hie,kMo),e(Ye,SMo),M(R_,Ye,null),b(f,OIe,_),b(f,$i,_),e($i,P_),e(P_,pie),M(V0,pie,null),e($i,RMo),e($i,uie),e(uie,PMo),b(f,VIe,_),b(f,$o,_),M(X0,$o,null),e($o,BMo),e($o,ki),e(ki,IMo),e(ki,BN),e(BN,qMo),e(ki,NMo),e(ki,IN),e(IN,jMo),e(ki,DMo),e($o,GMo),e($o,z0),e(z0,OMo),e(z0,_ie),e(_ie,VMo),e(z0,XMo),e($o,zMo),e($o,nt),M(W0,nt,null),e(nt,WMo),e(nt,bie),e(bie,QMo),e(nt,HMo),e(nt,Si),e(Si,UMo),e(Si,vie),e(vie,JMo),e(Si,YMo),e(Si,qN),e(qN,KMo),e(Si,ZMo),e(nt,e4o),M(B_,nt,null),e($o,o4o),e($o,Ke),M(Q0,Ke,null),e(Ke,r4o),e(Ke,Fie),e(Fie,t4o),e(Ke,a4o),e(Ke,$a),e($a,n4o),e($a,Tie),e(Tie,s4o),e($a,l4o),e($a,Mie),e(Mie,i4o),e($a,d4o),e($a,Eie),e(Eie,c4o),e($a,f4o),e(Ke,m4o),e(Ke,z),e(z,I_),e(I_,Cie),e(Cie,g4o),e(I_,h4o),e(I_,NN),e(NN,p4o),e(I_,u4o),e(z,_4o),e(z,q_),e(q_,wie),e(wie,b4o),e(q_,v4o),e(q_,jN),e(jN,F4o),e(q_,T4o),e(z,M4o),e(z,N_),e(N_,Aie),e(Aie,E4o),e(N_,C4o),e(N_,DN),e(DN,w4o),e(N_,A4o),e(z,y4o),e(z,j_),e(j_,yie),e(yie,L4o),e(j_,x4o),e(j_,GN),e(GN,$4o),e(j_,k4o),e(z,S4o),e(z,D_),e(D_,Lie),e(Lie,R4o),e(D_,P4o),e(D_,ON),e(ON,B4o),e(D_,I4o),e(z,q4o),e(z,G_),e(G_,xie),e(xie,N4o),e(G_,j4o),e(G_,VN),e(VN,D4o),e(G_,G4o),e(z,O4o),e(z,O_),e(O_,$ie),e($ie,V4o),e(O_,X4o),e(O_,XN),e(XN,z4o),e(O_,W4o),e(z,Q4o),e(z,V_),e(V_,kie),e(kie,H4o),e(V_,U4o),e(V_,zN),e(zN,J4o),e(V_,Y4o),e(z,K4o),e(z,X_),e(X_,Sie),e(Sie,Z4o),e(X_,eEo),e(X_,WN),e(WN,oEo),e(X_,rEo),e(z,tEo),e(z,z_),e(z_,Rie),e(Rie,aEo),e(z_,nEo),e(z_,QN),e(QN,sEo),e(z_,lEo),e(z,iEo),e(z,W_),e(W_,Pie),e(Pie,dEo),e(W_,cEo),e(W_,HN),e(HN,fEo),e(W_,mEo),e(z,gEo),e(z,Q_),e(Q_,Bie),e(Bie,hEo),e(Q_,pEo),e(Q_,UN),e(UN,uEo),e(Q_,_Eo),e(z,bEo),e(z,H_),e(H_,Iie),e(Iie,vEo),e(H_,FEo),e(H_,JN),e(JN,TEo),e(H_,MEo),e(z,EEo),e(z,U_),e(U_,qie),e(qie,CEo),e(U_,wEo),e(U_,YN),e(YN,AEo),e(U_,yEo),e(z,LEo),e(z,J_),e(J_,Nie),e(Nie,xEo),e(J_,$Eo),e(J_,KN),e(KN,kEo),e(J_,SEo),e(z,REo),e(z,Y_),e(Y_,jie),e(jie,PEo),e(Y_,BEo),e(Y_,ZN),e(ZN,IEo),e(Y_,qEo),e(z,NEo),e(z,K_),e(K_,Die),e(Die,jEo),e(K_,DEo),e(K_,ej),e(ej,GEo),e(K_,OEo),e(z,VEo),e(z,Z_),e(Z_,Gie),e(Gie,XEo),e(Z_,zEo),e(Z_,oj),e(oj,WEo),e(Z_,QEo),e(z,HEo),e(z,e2),e(e2,Oie),e(Oie,UEo),e(e2,JEo),e(e2,rj),e(rj,YEo),e(e2,KEo),e(z,ZEo),e(z,o2),e(o2,Vie),e(Vie,eCo),e(o2,oCo),e(o2,tj),e(tj,rCo),e(o2,tCo),e(z,aCo),e(z,r2),e(r2,Xie),e(Xie,nCo),e(r2,sCo),e(r2,aj),e(aj,lCo),e(r2,iCo),e(z,dCo),e(z,t2),e(t2,zie),e(zie,cCo),e(t2,fCo),e(t2,nj),e(nj,mCo),e(t2,gCo),e(z,hCo),e(z,a2),e(a2,Wie),e(Wie,pCo),e(a2,uCo),e(a2,sj),e(sj,_Co),e(a2,bCo),e(z,vCo),e(z,n2),e(n2,Qie),e(Qie,FCo),e(n2,TCo),e(n2,lj),e(lj,MCo),e(n2,ECo),e(z,CCo),e(z,s2),e(s2,Hie),e(Hie,wCo),e(s2,ACo),e(s2,ij),e(ij,yCo),e(s2,LCo),e(z,xCo),e(z,l2),e(l2,Uie),e(Uie,$Co),e(l2,kCo),e(l2,dj),e(dj,SCo),e(l2,RCo),e(z,PCo),e(z,i2),e(i2,Jie),e(Jie,BCo),e(i2,ICo),e(i2,cj),e(cj,qCo),e(i2,NCo),e(z,jCo),e(z,d2),e(d2,Yie),e(Yie,DCo),e(d2,GCo),e(d2,fj),e(fj,OCo),e(d2,VCo),e(z,XCo),e(z,c2),e(c2,Kie),e(Kie,zCo),e(c2,WCo),e(c2,mj),e(mj,QCo),e(c2,HCo),e(z,UCo),e(z,f2),e(f2,Zie),e(Zie,JCo),e(f2,YCo),e(f2,gj),e(gj,KCo),e(f2,ZCo),e(z,e3o),e(z,m2),e(m2,ede),e(ede,o3o),e(m2,r3o),e(m2,hj),e(hj,t3o),e(m2,a3o),e(z,n3o),e(z,g2),e(g2,ode),e(ode,s3o),e(g2,l3o),e(g2,pj),e(pj,i3o),e(g2,d3o),e(z,c3o),e(z,h2),e(h2,rde),e(rde,f3o),e(h2,m3o),e(h2,uj),e(uj,g3o),e(h2,h3o),e(z,p3o),e(z,p2),e(p2,tde),e(tde,u3o),e(p2,_3o),e(p2,_j),e(_j,b3o),e(p2,v3o),e(z,F3o),e(z,u2),e(u2,ade),e(ade,T3o),e(u2,M3o),e(u2,bj),e(bj,E3o),e(u2,C3o),e(z,w3o),e(z,_2),e(_2,nde),e(nde,A3o),e(_2,y3o),e(_2,vj),e(vj,L3o),e(_2,x3o),e(Ke,$3o),e(Ke,b2),e(b2,k3o),e(b2,sde),e(sde,S3o),e(b2,R3o),e(b2,lde),e(lde,P3o),e(Ke,B3o),M(v2,Ke,null),b(f,XIe,_),b(f,Ri,_),e(Ri,F2),e(F2,ide),M(H0,ide,null),e(Ri,I3o),e(Ri,dde),e(dde,q3o),b(f,zIe,_),b(f,ko,_),M(U0,ko,null),e(ko,N3o),e(ko,Pi),e(Pi,j3o),e(Pi,Fj),e(Fj,D3o),e(Pi,G3o),e(Pi,Tj),e(Tj,O3o),e(Pi,V3o),e(ko,X3o),e(ko,J0),e(J0,z3o),e(J0,cde),e(cde,W3o),e(J0,Q3o),e(ko,H3o),e(ko,st),M(Y0,st,null),e(st,U3o),e(st,fde),e(fde,J3o),e(st,Y3o),e(st,Bi),e(Bi,K3o),e(Bi,mde),e(mde,Z3o),e(Bi,ewo),e(Bi,Mj),e(Mj,owo),e(Bi,rwo),e(st,two),M(T2,st,null),e(ko,awo),e(ko,Ze),M(K0,Ze,null),e(Ze,nwo),e(Ze,gde),e(gde,swo),e(Ze,lwo),e(Ze,ka),e(ka,iwo),e(ka,hde),e(hde,dwo),e(ka,cwo),e(ka,pde),e(pde,fwo),e(ka,mwo),e(ka,ude),e(ude,gwo),e(ka,hwo),e(Ze,pwo),e(Ze,W),e(W,M2),e(M2,_de),e(_de,uwo),e(M2,_wo),e(M2,Ej),e(Ej,bwo),e(M2,vwo),e(W,Fwo),e(W,E2),e(E2,bde),e(bde,Two),e(E2,Mwo),e(E2,Cj),e(Cj,Ewo),e(E2,Cwo),e(W,wwo),e(W,C2),e(C2,vde),e(vde,Awo),e(C2,ywo),e(C2,wj),e(wj,Lwo),e(C2,xwo),e(W,$wo),e(W,w2),e(w2,Fde),e(Fde,kwo),e(w2,Swo),e(w2,Aj),e(Aj,Rwo),e(w2,Pwo),e(W,Bwo),e(W,A2),e(A2,Tde),e(Tde,Iwo),e(A2,qwo),e(A2,yj),e(yj,Nwo),e(A2,jwo),e(W,Dwo),e(W,y2),e(y2,Mde),e(Mde,Gwo),e(y2,Owo),e(y2,Lj),e(Lj,Vwo),e(y2,Xwo),e(W,zwo),e(W,L2),e(L2,Ede),e(Ede,Wwo),e(L2,Qwo),e(L2,xj),e(xj,Hwo),e(L2,Uwo),e(W,Jwo),e(W,x2),e(x2,Cde),e(Cde,Ywo),e(x2,Kwo),e(x2,$j),e($j,Zwo),e(x2,eAo),e(W,oAo),e(W,$2),e($2,wde),e(wde,rAo),e($2,tAo),e($2,kj),e(kj,aAo),e($2,nAo),e(W,sAo),e(W,k2),e(k2,Ade),e(Ade,lAo),e(k2,iAo),e(k2,Sj),e(Sj,dAo),e(k2,cAo),e(W,fAo),e(W,S2),e(S2,yde),e(yde,mAo),e(S2,gAo),e(S2,Rj),e(Rj,hAo),e(S2,pAo),e(W,uAo),e(W,R2),e(R2,Lde),e(Lde,_Ao),e(R2,bAo),e(R2,Pj),e(Pj,vAo),e(R2,FAo),e(W,TAo),e(W,P2),e(P2,xde),e(xde,MAo),e(P2,EAo),e(P2,Bj),e(Bj,CAo),e(P2,wAo),e(W,AAo),e(W,B2),e(B2,$de),e($de,yAo),e(B2,LAo),e(B2,Ij),e(Ij,xAo),e(B2,$Ao),e(W,kAo),e(W,I2),e(I2,kde),e(kde,SAo),e(I2,RAo),e(I2,qj),e(qj,PAo),e(I2,BAo),e(W,IAo),e(W,q2),e(q2,Sde),e(Sde,qAo),e(q2,NAo),e(q2,Nj),e(Nj,jAo),e(q2,DAo),e(W,GAo),e(W,N2),e(N2,Rde),e(Rde,OAo),e(N2,VAo),e(N2,jj),e(jj,XAo),e(N2,zAo),e(W,WAo),e(W,j2),e(j2,Pde),e(Pde,QAo),e(j2,HAo),e(j2,Dj),e(Dj,UAo),e(j2,JAo),e(W,YAo),e(W,D2),e(D2,Bde),e(Bde,KAo),e(D2,ZAo),e(D2,Gj),e(Gj,e6o),e(D2,o6o),e(W,r6o),e(W,G2),e(G2,Ide),e(Ide,t6o),e(G2,a6o),e(G2,Oj),e(Oj,n6o),e(G2,s6o),e(W,l6o),e(W,O2),e(O2,qde),e(qde,i6o),e(O2,d6o),e(O2,Vj),e(Vj,c6o),e(O2,f6o),e(W,m6o),e(W,V2),e(V2,Nde),e(Nde,g6o),e(V2,h6o),e(V2,Xj),e(Xj,p6o),e(V2,u6o),e(W,_6o),e(W,X2),e(X2,jde),e(jde,b6o),e(X2,v6o),e(X2,zj),e(zj,F6o),e(X2,T6o),e(W,M6o),e(W,z2),e(z2,Dde),e(Dde,E6o),e(z2,C6o),e(z2,Wj),e(Wj,w6o),e(z2,A6o),e(W,y6o),e(W,W2),e(W2,Gde),e(Gde,L6o),e(W2,x6o),e(W2,Qj),e(Qj,$6o),e(W2,k6o),e(W,S6o),e(W,Q2),e(Q2,Ode),e(Ode,R6o),e(Q2,P6o),e(Q2,Hj),e(Hj,B6o),e(Q2,I6o),e(W,q6o),e(W,H2),e(H2,Vde),e(Vde,N6o),e(H2,j6o),e(H2,Uj),e(Uj,D6o),e(H2,G6o),e(W,O6o),e(W,U2),e(U2,Xde),e(Xde,V6o),e(U2,X6o),e(U2,Jj),e(Jj,z6o),e(U2,W6o),e(W,Q6o),e(W,J2),e(J2,zde),e(zde,H6o),e(J2,U6o),e(J2,Yj),e(Yj,J6o),e(J2,Y6o),e(W,K6o),e(W,Y2),e(Y2,Wde),e(Wde,Z6o),e(Y2,e0o),e(Y2,Kj),e(Kj,o0o),e(Y2,r0o),e(W,t0o),e(W,K2),e(K2,Qde),e(Qde,a0o),e(K2,n0o),e(K2,Hde),e(Hde,s0o),e(K2,l0o),e(W,i0o),e(W,Z2),e(Z2,Ude),e(Ude,d0o),e(Z2,c0o),e(Z2,Zj),e(Zj,f0o),e(Z2,m0o),e(W,g0o),e(W,e1),e(e1,Jde),e(Jde,h0o),e(e1,p0o),e(e1,eD),e(eD,u0o),e(e1,_0o),e(W,b0o),e(W,o1),e(o1,Yde),e(Yde,v0o),e(o1,F0o),e(o1,oD),e(oD,T0o),e(o1,M0o),e(W,E0o),e(W,r1),e(r1,Kde),e(Kde,C0o),e(r1,w0o),e(r1,rD),e(rD,A0o),e(r1,y0o),e(Ze,L0o),e(Ze,t1),e(t1,x0o),e(t1,Zde),e(Zde,$0o),e(t1,k0o),e(t1,ece),e(ece,S0o),e(Ze,R0o),M(a1,Ze,null),b(f,WIe,_),b(f,Ii,_),e(Ii,n1),e(n1,oce),M(Z0,oce,null),e(Ii,P0o),e(Ii,rce),e(rce,B0o),b(f,QIe,_),b(f,So,_),M(ey,So,null),e(So,I0o),e(So,qi),e(qi,q0o),e(qi,tD),e(tD,N0o),e(qi,j0o),e(qi,aD),e(aD,D0o),e(qi,G0o),e(So,O0o),e(So,oy),e(oy,V0o),e(oy,tce),e(tce,X0o),e(oy,z0o),e(So,W0o),e(So,lt),M(ry,lt,null),e(lt,Q0o),e(lt,ace),e(ace,H0o),e(lt,U0o),e(lt,Ni),e(Ni,J0o),e(Ni,nce),e(nce,Y0o),e(Ni,K0o),e(Ni,nD),e(nD,Z0o),e(Ni,eyo),e(lt,oyo),M(s1,lt,null),e(So,ryo),e(So,eo),M(ty,eo,null),e(eo,tyo),e(eo,sce),e(sce,ayo),e(eo,nyo),e(eo,Sa),e(Sa,syo),e(Sa,lce),e(lce,lyo),e(Sa,iyo),e(Sa,ice),e(ice,dyo),e(Sa,cyo),e(Sa,dce),e(dce,fyo),e(Sa,myo),e(eo,gyo),e(eo,ue),e(ue,l1),e(l1,cce),e(cce,hyo),e(l1,pyo),e(l1,sD),e(sD,uyo),e(l1,_yo),e(ue,byo),e(ue,i1),e(i1,fce),e(fce,vyo),e(i1,Fyo),e(i1,lD),e(lD,Tyo),e(i1,Myo),e(ue,Eyo),e(ue,d1),e(d1,mce),e(mce,Cyo),e(d1,wyo),e(d1,iD),e(iD,Ayo),e(d1,yyo),e(ue,Lyo),e(ue,c1),e(c1,gce),e(gce,xyo),e(c1,$yo),e(c1,dD),e(dD,kyo),e(c1,Syo),e(ue,Ryo),e(ue,f1),e(f1,hce),e(hce,Pyo),e(f1,Byo),e(f1,cD),e(cD,Iyo),e(f1,qyo),e(ue,Nyo),e(ue,m1),e(m1,pce),e(pce,jyo),e(m1,Dyo),e(m1,fD),e(fD,Gyo),e(m1,Oyo),e(ue,Vyo),e(ue,g1),e(g1,uce),e(uce,Xyo),e(g1,zyo),e(g1,mD),e(mD,Wyo),e(g1,Qyo),e(ue,Hyo),e(ue,h1),e(h1,_ce),e(_ce,Uyo),e(h1,Jyo),e(h1,gD),e(gD,Yyo),e(h1,Kyo),e(ue,Zyo),e(ue,p1),e(p1,bce),e(bce,eLo),e(p1,oLo),e(p1,hD),e(hD,rLo),e(p1,tLo),e(ue,aLo),e(ue,u1),e(u1,vce),e(vce,nLo),e(u1,sLo),e(u1,pD),e(pD,lLo),e(u1,iLo),e(ue,dLo),e(ue,_1),e(_1,Fce),e(Fce,cLo),e(_1,fLo),e(_1,uD),e(uD,mLo),e(_1,gLo),e(ue,hLo),e(ue,b1),e(b1,Tce),e(Tce,pLo),e(b1,uLo),e(b1,_D),e(_D,_Lo),e(b1,bLo),e(ue,vLo),e(ue,v1),e(v1,Mce),e(Mce,FLo),e(v1,TLo),e(v1,bD),e(bD,MLo),e(v1,ELo),e(ue,CLo),e(ue,F1),e(F1,Ece),e(Ece,wLo),e(F1,ALo),e(F1,vD),e(vD,yLo),e(F1,LLo),e(ue,xLo),e(ue,T1),e(T1,Cce),e(Cce,$Lo),e(T1,kLo),e(T1,FD),e(FD,SLo),e(T1,RLo),e(ue,PLo),e(ue,M1),e(M1,wce),e(wce,BLo),e(M1,ILo),e(M1,TD),e(TD,qLo),e(M1,NLo),e(eo,jLo),e(eo,E1),e(E1,DLo),e(E1,Ace),e(Ace,GLo),e(E1,OLo),e(E1,yce),e(yce,VLo),e(eo,XLo),M(C1,eo,null),b(f,HIe,_),b(f,ji,_),e(ji,w1),e(w1,Lce),M(ay,Lce,null),e(ji,zLo),e(ji,xce),e(xce,WLo),b(f,UIe,_),b(f,Ro,_),M(ny,Ro,null),e(Ro,QLo),e(Ro,Di),e(Di,HLo),e(Di,MD),e(MD,ULo),e(Di,JLo),e(Di,ED),e(ED,YLo),e(Di,KLo),e(Ro,ZLo),e(Ro,sy),e(sy,e8o),e(sy,$ce),e($ce,o8o),e(sy,r8o),e(Ro,t8o),e(Ro,it),M(ly,it,null),e(it,a8o),e(it,kce),e(kce,n8o),e(it,s8o),e(it,Gi),e(Gi,l8o),e(Gi,Sce),e(Sce,i8o),e(Gi,d8o),e(Gi,CD),e(CD,c8o),e(Gi,f8o),e(it,m8o),M(A1,it,null),e(Ro,g8o),e(Ro,oo),M(iy,oo,null),e(oo,h8o),e(oo,Rce),e(Rce,p8o),e(oo,u8o),e(oo,Ra),e(Ra,_8o),e(Ra,Pce),e(Pce,b8o),e(Ra,v8o),e(Ra,Bce),e(Bce,F8o),e(Ra,T8o),e(Ra,Ice),e(Ice,M8o),e(Ra,E8o),e(oo,C8o),e(oo,q),e(q,y1),e(y1,qce),e(qce,w8o),e(y1,A8o),e(y1,wD),e(wD,y8o),e(y1,L8o),e(q,x8o),e(q,L1),e(L1,Nce),e(Nce,$8o),e(L1,k8o),e(L1,AD),e(AD,S8o),e(L1,R8o),e(q,P8o),e(q,x1),e(x1,jce),e(jce,B8o),e(x1,I8o),e(x1,yD),e(yD,q8o),e(x1,N8o),e(q,j8o),e(q,$1),e($1,Dce),e(Dce,D8o),e($1,G8o),e($1,LD),e(LD,O8o),e($1,V8o),e(q,X8o),e(q,k1),e(k1,Gce),e(Gce,z8o),e(k1,W8o),e(k1,xD),e(xD,Q8o),e(k1,H8o),e(q,U8o),e(q,S1),e(S1,Oce),e(Oce,J8o),e(S1,Y8o),e(S1,$D),e($D,K8o),e(S1,Z8o),e(q,exo),e(q,R1),e(R1,Vce),e(Vce,oxo),e(R1,rxo),e(R1,kD),e(kD,txo),e(R1,axo),e(q,nxo),e(q,P1),e(P1,Xce),e(Xce,sxo),e(P1,lxo),e(P1,SD),e(SD,ixo),e(P1,dxo),e(q,cxo),e(q,B1),e(B1,zce),e(zce,fxo),e(B1,mxo),e(B1,RD),e(RD,gxo),e(B1,hxo),e(q,pxo),e(q,I1),e(I1,Wce),e(Wce,uxo),e(I1,_xo),e(I1,PD),e(PD,bxo),e(I1,vxo),e(q,Fxo),e(q,q1),e(q1,Qce),e(Qce,Txo),e(q1,Mxo),e(q1,BD),e(BD,Exo),e(q1,Cxo),e(q,wxo),e(q,N1),e(N1,Hce),e(Hce,Axo),e(N1,yxo),e(N1,ID),e(ID,Lxo),e(N1,xxo),e(q,$xo),e(q,j1),e(j1,Uce),e(Uce,kxo),e(j1,Sxo),e(j1,qD),e(qD,Rxo),e(j1,Pxo),e(q,Bxo),e(q,D1),e(D1,Jce),e(Jce,Ixo),e(D1,qxo),e(D1,ND),e(ND,Nxo),e(D1,jxo),e(q,Dxo),e(q,G1),e(G1,Yce),e(Yce,Gxo),e(G1,Oxo),e(G1,jD),e(jD,Vxo),e(G1,Xxo),e(q,zxo),e(q,O1),e(O1,Kce),e(Kce,Wxo),e(O1,Qxo),e(O1,DD),e(DD,Hxo),e(O1,Uxo),e(q,Jxo),e(q,V1),e(V1,Zce),e(Zce,Yxo),e(V1,Kxo),e(V1,GD),e(GD,Zxo),e(V1,e9o),e(q,o9o),e(q,X1),e(X1,efe),e(efe,r9o),e(X1,t9o),e(X1,OD),e(OD,a9o),e(X1,n9o),e(q,s9o),e(q,z1),e(z1,ofe),e(ofe,l9o),e(z1,i9o),e(z1,VD),e(VD,d9o),e(z1,c9o),e(q,f9o),e(q,W1),e(W1,rfe),e(rfe,m9o),e(W1,g9o),e(W1,XD),e(XD,h9o),e(W1,p9o),e(q,u9o),e(q,Q1),e(Q1,tfe),e(tfe,_9o),e(Q1,b9o),e(Q1,zD),e(zD,v9o),e(Q1,F9o),e(q,T9o),e(q,H1),e(H1,afe),e(afe,M9o),e(H1,E9o),e(H1,WD),e(WD,C9o),e(H1,w9o),e(q,A9o),e(q,U1),e(U1,nfe),e(nfe,y9o),e(U1,L9o),e(U1,QD),e(QD,x9o),e(U1,$9o),e(q,k9o),e(q,J1),e(J1,sfe),e(sfe,S9o),e(J1,R9o),e(J1,HD),e(HD,P9o),e(J1,B9o),e(q,I9o),e(q,Y1),e(Y1,lfe),e(lfe,q9o),e(Y1,N9o),e(Y1,UD),e(UD,j9o),e(Y1,D9o),e(q,G9o),e(q,K1),e(K1,ife),e(ife,O9o),e(K1,V9o),e(K1,JD),e(JD,X9o),e(K1,z9o),e(q,W9o),e(q,Z1),e(Z1,dfe),e(dfe,Q9o),e(Z1,H9o),e(Z1,YD),e(YD,U9o),e(Z1,J9o),e(q,Y9o),e(q,e7),e(e7,cfe),e(cfe,K9o),e(e7,Z9o),e(e7,KD),e(KD,e$o),e(e7,o$o),e(q,r$o),e(q,o7),e(o7,ffe),e(ffe,t$o),e(o7,a$o),e(o7,ZD),e(ZD,n$o),e(o7,s$o),e(q,l$o),e(q,r7),e(r7,mfe),e(mfe,i$o),e(r7,d$o),e(r7,eG),e(eG,c$o),e(r7,f$o),e(q,m$o),e(q,t7),e(t7,gfe),e(gfe,g$o),e(t7,h$o),e(t7,oG),e(oG,p$o),e(t7,u$o),e(q,_$o),e(q,a7),e(a7,hfe),e(hfe,b$o),e(a7,v$o),e(a7,rG),e(rG,F$o),e(a7,T$o),e(q,M$o),e(q,n7),e(n7,pfe),e(pfe,E$o),e(n7,C$o),e(n7,tG),e(tG,w$o),e(n7,A$o),e(q,y$o),e(q,s7),e(s7,ufe),e(ufe,L$o),e(s7,x$o),e(s7,aG),e(aG,$$o),e(s7,k$o),e(q,S$o),e(q,l7),e(l7,_fe),e(_fe,R$o),e(l7,P$o),e(l7,nG),e(nG,B$o),e(l7,I$o),e(q,q$o),e(q,i7),e(i7,bfe),e(bfe,N$o),e(i7,j$o),e(i7,sG),e(sG,D$o),e(i7,G$o),e(q,O$o),e(q,d7),e(d7,vfe),e(vfe,V$o),e(d7,X$o),e(d7,lG),e(lG,z$o),e(d7,W$o),e(q,Q$o),e(q,c7),e(c7,Ffe),e(Ffe,H$o),e(c7,U$o),e(c7,iG),e(iG,J$o),e(c7,Y$o),e(q,K$o),e(q,f7),e(f7,Tfe),e(Tfe,Z$o),e(f7,eko),e(f7,dG),e(dG,oko),e(f7,rko),e(q,tko),e(q,m7),e(m7,Mfe),e(Mfe,ako),e(m7,nko),e(m7,cG),e(cG,sko),e(m7,lko),e(q,iko),e(q,g7),e(g7,Efe),e(Efe,dko),e(g7,cko),e(g7,fG),e(fG,fko),e(g7,mko),e(q,gko),e(q,h7),e(h7,Cfe),e(Cfe,hko),e(h7,pko),e(h7,mG),e(mG,uko),e(h7,_ko),e(q,bko),e(q,p7),e(p7,wfe),e(wfe,vko),e(p7,Fko),e(p7,gG),e(gG,Tko),e(p7,Mko),e(q,Eko),e(q,u7),e(u7,Afe),e(Afe,Cko),e(u7,wko),e(u7,hG),e(hG,Ako),e(u7,yko),e(q,Lko),e(q,_7),e(_7,yfe),e(yfe,xko),e(_7,$ko),e(_7,pG),e(pG,kko),e(_7,Sko),e(q,Rko),e(q,b7),e(b7,Lfe),e(Lfe,Pko),e(b7,Bko),e(b7,uG),e(uG,Iko),e(b7,qko),e(oo,Nko),e(oo,v7),e(v7,jko),e(v7,xfe),e(xfe,Dko),e(v7,Gko),e(v7,$fe),e($fe,Oko),e(oo,Vko),M(F7,oo,null),b(f,JIe,_),b(f,Oi,_),e(Oi,T7),e(T7,kfe),M(dy,kfe,null),e(Oi,Xko),e(Oi,Sfe),e(Sfe,zko),b(f,YIe,_),b(f,Po,_),M(cy,Po,null),e(Po,Wko),e(Po,Vi),e(Vi,Qko),e(Vi,_G),e(_G,Hko),e(Vi,Uko),e(Vi,bG),e(bG,Jko),e(Vi,Yko),e(Po,Kko),e(Po,fy),e(fy,Zko),e(fy,Rfe),e(Rfe,eSo),e(fy,oSo),e(Po,rSo),e(Po,dt),M(my,dt,null),e(dt,tSo),e(dt,Pfe),e(Pfe,aSo),e(dt,nSo),e(dt,Xi),e(Xi,sSo),e(Xi,Bfe),e(Bfe,lSo),e(Xi,iSo),e(Xi,vG),e(vG,dSo),e(Xi,cSo),e(dt,fSo),M(M7,dt,null),e(Po,mSo),e(Po,ro),M(gy,ro,null),e(ro,gSo),e(ro,Ife),e(Ife,hSo),e(ro,pSo),e(ro,Pa),e(Pa,uSo),e(Pa,qfe),e(qfe,_So),e(Pa,bSo),e(Pa,Nfe),e(Nfe,vSo),e(Pa,FSo),e(Pa,jfe),e(jfe,TSo),e(Pa,MSo),e(ro,ESo),e(ro,Y),e(Y,E7),e(E7,Dfe),e(Dfe,CSo),e(E7,wSo),e(E7,FG),e(FG,ASo),e(E7,ySo),e(Y,LSo),e(Y,C7),e(C7,Gfe),e(Gfe,xSo),e(C7,$So),e(C7,TG),e(TG,kSo),e(C7,SSo),e(Y,RSo),e(Y,w7),e(w7,Ofe),e(Ofe,PSo),e(w7,BSo),e(w7,MG),e(MG,ISo),e(w7,qSo),e(Y,NSo),e(Y,A7),e(A7,Vfe),e(Vfe,jSo),e(A7,DSo),e(A7,EG),e(EG,GSo),e(A7,OSo),e(Y,VSo),e(Y,y7),e(y7,Xfe),e(Xfe,XSo),e(y7,zSo),e(y7,CG),e(CG,WSo),e(y7,QSo),e(Y,HSo),e(Y,L7),e(L7,zfe),e(zfe,USo),e(L7,JSo),e(L7,wG),e(wG,YSo),e(L7,KSo),e(Y,ZSo),e(Y,x7),e(x7,Wfe),e(Wfe,eRo),e(x7,oRo),e(x7,AG),e(AG,rRo),e(x7,tRo),e(Y,aRo),e(Y,$7),e($7,Qfe),e(Qfe,nRo),e($7,sRo),e($7,yG),e(yG,lRo),e($7,iRo),e(Y,dRo),e(Y,k7),e(k7,Hfe),e(Hfe,cRo),e(k7,fRo),e(k7,LG),e(LG,mRo),e(k7,gRo),e(Y,hRo),e(Y,S7),e(S7,Ufe),e(Ufe,pRo),e(S7,uRo),e(S7,xG),e(xG,_Ro),e(S7,bRo),e(Y,vRo),e(Y,R7),e(R7,Jfe),e(Jfe,FRo),e(R7,TRo),e(R7,$G),e($G,MRo),e(R7,ERo),e(Y,CRo),e(Y,P7),e(P7,Yfe),e(Yfe,wRo),e(P7,ARo),e(P7,kG),e(kG,yRo),e(P7,LRo),e(Y,xRo),e(Y,B7),e(B7,Kfe),e(Kfe,$Ro),e(B7,kRo),e(B7,SG),e(SG,SRo),e(B7,RRo),e(Y,PRo),e(Y,I7),e(I7,Zfe),e(Zfe,BRo),e(I7,IRo),e(I7,RG),e(RG,qRo),e(I7,NRo),e(Y,jRo),e(Y,q7),e(q7,eme),e(eme,DRo),e(q7,GRo),e(q7,PG),e(PG,ORo),e(q7,VRo),e(Y,XRo),e(Y,N7),e(N7,ome),e(ome,zRo),e(N7,WRo),e(N7,BG),e(BG,QRo),e(N7,HRo),e(Y,URo),e(Y,j7),e(j7,rme),e(rme,JRo),e(j7,YRo),e(j7,IG),e(IG,KRo),e(j7,ZRo),e(Y,ePo),e(Y,D7),e(D7,tme),e(tme,oPo),e(D7,rPo),e(D7,qG),e(qG,tPo),e(D7,aPo),e(Y,nPo),e(Y,G7),e(G7,ame),e(ame,sPo),e(G7,lPo),e(G7,NG),e(NG,iPo),e(G7,dPo),e(Y,cPo),e(Y,O7),e(O7,nme),e(nme,fPo),e(O7,mPo),e(O7,jG),e(jG,gPo),e(O7,hPo),e(Y,pPo),e(Y,V7),e(V7,sme),e(sme,uPo),e(V7,_Po),e(V7,DG),e(DG,bPo),e(V7,vPo),e(Y,FPo),e(Y,X7),e(X7,lme),e(lme,TPo),e(X7,MPo),e(X7,GG),e(GG,EPo),e(X7,CPo),e(Y,wPo),e(Y,z7),e(z7,ime),e(ime,APo),e(z7,yPo),e(z7,OG),e(OG,LPo),e(z7,xPo),e(Y,$Po),e(Y,W7),e(W7,dme),e(dme,kPo),e(W7,SPo),e(W7,VG),e(VG,RPo),e(W7,PPo),e(Y,BPo),e(Y,Q7),e(Q7,cme),e(cme,IPo),e(Q7,qPo),e(Q7,XG),e(XG,NPo),e(Q7,jPo),e(Y,DPo),e(Y,H7),e(H7,fme),e(fme,GPo),e(H7,OPo),e(H7,zG),e(zG,VPo),e(H7,XPo),e(Y,zPo),e(Y,U7),e(U7,mme),e(mme,WPo),e(U7,QPo),e(U7,WG),e(WG,HPo),e(U7,UPo),e(Y,JPo),e(Y,J7),e(J7,gme),e(gme,YPo),e(J7,KPo),e(J7,QG),e(QG,ZPo),e(J7,eBo),e(Y,oBo),e(Y,Y7),e(Y7,hme),e(hme,rBo),e(Y7,tBo),e(Y7,HG),e(HG,aBo),e(Y7,nBo),e(ro,sBo),e(ro,K7),e(K7,lBo),e(K7,pme),e(pme,iBo),e(K7,dBo),e(K7,ume),e(ume,cBo),e(ro,fBo),M(Z7,ro,null),b(f,KIe,_),b(f,zi,_),e(zi,eb),e(eb,_me),M(hy,_me,null),e(zi,mBo),e(zi,bme),e(bme,gBo),b(f,ZIe,_),b(f,Bo,_),M(py,Bo,null),e(Bo,hBo),e(Bo,Wi),e(Wi,pBo),e(Wi,UG),e(UG,uBo),e(Wi,_Bo),e(Wi,JG),e(JG,bBo),e(Wi,vBo),e(Bo,FBo),e(Bo,uy),e(uy,TBo),e(uy,vme),e(vme,MBo),e(uy,EBo),e(Bo,CBo),e(Bo,ct),M(_y,ct,null),e(ct,wBo),e(ct,Fme),e(Fme,ABo),e(ct,yBo),e(ct,Qi),e(Qi,LBo),e(Qi,Tme),e(Tme,xBo),e(Qi,$Bo),e(Qi,YG),e(YG,kBo),e(Qi,SBo),e(ct,RBo),M(ob,ct,null),e(Bo,PBo),e(Bo,to),M(by,to,null),e(to,BBo),e(to,Mme),e(Mme,IBo),e(to,qBo),e(to,Ba),e(Ba,NBo),e(Ba,Eme),e(Eme,jBo),e(Ba,DBo),e(Ba,Cme),e(Cme,GBo),e(Ba,OBo),e(Ba,wme),e(wme,VBo),e(Ba,XBo),e(to,zBo),e(to,Yr),e(Yr,rb),e(rb,Ame),e(Ame,WBo),e(rb,QBo),e(rb,KG),e(KG,HBo),e(rb,UBo),e(Yr,JBo),e(Yr,tb),e(tb,yme),e(yme,YBo),e(tb,KBo),e(tb,ZG),e(ZG,ZBo),e(tb,eIo),e(Yr,oIo),e(Yr,ab),e(ab,Lme),e(Lme,rIo),e(ab,tIo),e(ab,eO),e(eO,aIo),e(ab,nIo),e(Yr,sIo),e(Yr,nb),e(nb,xme),e(xme,lIo),e(nb,iIo),e(nb,oO),e(oO,dIo),e(nb,cIo),e(Yr,fIo),e(Yr,sb),e(sb,$me),e($me,mIo),e(sb,gIo),e(sb,rO),e(rO,hIo),e(sb,pIo),e(to,uIo),e(to,lb),e(lb,_Io),e(lb,kme),e(kme,bIo),e(lb,vIo),e(lb,Sme),e(Sme,FIo),e(to,TIo),M(ib,to,null),b(f,eqe,_),b(f,Hi,_),e(Hi,db),e(db,Rme),M(vy,Rme,null),e(Hi,MIo),e(Hi,Pme),e(Pme,EIo),b(f,oqe,_),b(f,Io,_),M(Fy,Io,null),e(Io,CIo),e(Io,Ui),e(Ui,wIo),e(Ui,tO),e(tO,AIo),e(Ui,yIo),e(Ui,aO),e(aO,LIo),e(Ui,xIo),e(Io,$Io),e(Io,Ty),e(Ty,kIo),e(Ty,Bme),e(Bme,SIo),e(Ty,RIo),e(Io,PIo),e(Io,ft),M(My,ft,null),e(ft,BIo),e(ft,Ime),e(Ime,IIo),e(ft,qIo),e(ft,Ji),e(Ji,NIo),e(Ji,qme),e(qme,jIo),e(Ji,DIo),e(Ji,nO),e(nO,GIo),e(Ji,OIo),e(ft,VIo),M(cb,ft,null),e(Io,XIo),e(Io,ao),M(Ey,ao,null),e(ao,zIo),e(ao,Nme),e(Nme,WIo),e(ao,QIo),e(ao,Ia),e(Ia,HIo),e(Ia,jme),e(jme,UIo),e(Ia,JIo),e(Ia,Dme),e(Dme,YIo),e(Ia,KIo),e(Ia,Gme),e(Gme,ZIo),e(Ia,eqo),e(ao,oqo),e(ao,U),e(U,fb),e(fb,Ome),e(Ome,rqo),e(fb,tqo),e(fb,sO),e(sO,aqo),e(fb,nqo),e(U,sqo),e(U,mb),e(mb,Vme),e(Vme,lqo),e(mb,iqo),e(mb,lO),e(lO,dqo),e(mb,cqo),e(U,fqo),e(U,gb),e(gb,Xme),e(Xme,mqo),e(gb,gqo),e(gb,iO),e(iO,hqo),e(gb,pqo),e(U,uqo),e(U,hb),e(hb,zme),e(zme,_qo),e(hb,bqo),e(hb,dO),e(dO,vqo),e(hb,Fqo),e(U,Tqo),e(U,pb),e(pb,Wme),e(Wme,Mqo),e(pb,Eqo),e(pb,cO),e(cO,Cqo),e(pb,wqo),e(U,Aqo),e(U,ub),e(ub,Qme),e(Qme,yqo),e(ub,Lqo),e(ub,fO),e(fO,xqo),e(ub,$qo),e(U,kqo),e(U,_b),e(_b,Hme),e(Hme,Sqo),e(_b,Rqo),e(_b,mO),e(mO,Pqo),e(_b,Bqo),e(U,Iqo),e(U,bb),e(bb,Ume),e(Ume,qqo),e(bb,Nqo),e(bb,gO),e(gO,jqo),e(bb,Dqo),e(U,Gqo),e(U,vb),e(vb,Jme),e(Jme,Oqo),e(vb,Vqo),e(vb,hO),e(hO,Xqo),e(vb,zqo),e(U,Wqo),e(U,Fb),e(Fb,Yme),e(Yme,Qqo),e(Fb,Hqo),e(Fb,pO),e(pO,Uqo),e(Fb,Jqo),e(U,Yqo),e(U,Tb),e(Tb,Kme),e(Kme,Kqo),e(Tb,Zqo),e(Tb,uO),e(uO,eNo),e(Tb,oNo),e(U,rNo),e(U,Mb),e(Mb,Zme),e(Zme,tNo),e(Mb,aNo),e(Mb,_O),e(_O,nNo),e(Mb,sNo),e(U,lNo),e(U,Eb),e(Eb,ege),e(ege,iNo),e(Eb,dNo),e(Eb,bO),e(bO,cNo),e(Eb,fNo),e(U,mNo),e(U,Cb),e(Cb,oge),e(oge,gNo),e(Cb,hNo),e(Cb,vO),e(vO,pNo),e(Cb,uNo),e(U,_No),e(U,wb),e(wb,rge),e(rge,bNo),e(wb,vNo),e(wb,FO),e(FO,FNo),e(wb,TNo),e(U,MNo),e(U,Ab),e(Ab,tge),e(tge,ENo),e(Ab,CNo),e(Ab,TO),e(TO,wNo),e(Ab,ANo),e(U,yNo),e(U,yb),e(yb,age),e(age,LNo),e(yb,xNo),e(yb,MO),e(MO,$No),e(yb,kNo),e(U,SNo),e(U,Lb),e(Lb,nge),e(nge,RNo),e(Lb,PNo),e(Lb,EO),e(EO,BNo),e(Lb,INo),e(U,qNo),e(U,xb),e(xb,sge),e(sge,NNo),e(xb,jNo),e(xb,CO),e(CO,DNo),e(xb,GNo),e(U,ONo),e(U,$b),e($b,lge),e(lge,VNo),e($b,XNo),e($b,wO),e(wO,zNo),e($b,WNo),e(U,QNo),e(U,kb),e(kb,ige),e(ige,HNo),e(kb,UNo),e(kb,AO),e(AO,JNo),e(kb,YNo),e(U,KNo),e(U,Sb),e(Sb,dge),e(dge,ZNo),e(Sb,ejo),e(Sb,yO),e(yO,ojo),e(Sb,rjo),e(U,tjo),e(U,Rb),e(Rb,cge),e(cge,ajo),e(Rb,njo),e(Rb,LO),e(LO,sjo),e(Rb,ljo),e(U,ijo),e(U,Pb),e(Pb,fge),e(fge,djo),e(Pb,cjo),e(Pb,xO),e(xO,fjo),e(Pb,mjo),e(U,gjo),e(U,Bb),e(Bb,mge),e(mge,hjo),e(Bb,pjo),e(Bb,$O),e($O,ujo),e(Bb,_jo),e(U,bjo),e(U,Ib),e(Ib,gge),e(gge,vjo),e(Ib,Fjo),e(Ib,kO),e(kO,Tjo),e(Ib,Mjo),e(U,Ejo),e(U,qb),e(qb,hge),e(hge,Cjo),e(qb,wjo),e(qb,SO),e(SO,Ajo),e(qb,yjo),e(U,Ljo),e(U,Nb),e(Nb,pge),e(pge,xjo),e(Nb,$jo),e(Nb,RO),e(RO,kjo),e(Nb,Sjo),e(U,Rjo),e(U,jb),e(jb,uge),e(uge,Pjo),e(jb,Bjo),e(jb,PO),e(PO,Ijo),e(jb,qjo),e(U,Njo),e(U,Db),e(Db,_ge),e(_ge,jjo),e(Db,Djo),e(Db,BO),e(BO,Gjo),e(Db,Ojo),e(U,Vjo),e(U,Gb),e(Gb,bge),e(bge,Xjo),e(Gb,zjo),e(Gb,IO),e(IO,Wjo),e(Gb,Qjo),e(U,Hjo),e(U,Ob),e(Ob,vge),e(vge,Ujo),e(Ob,Jjo),e(Ob,qO),e(qO,Yjo),e(Ob,Kjo),e(U,Zjo),e(U,Vb),e(Vb,Fge),e(Fge,eDo),e(Vb,oDo),e(Vb,NO),e(NO,rDo),e(Vb,tDo),e(ao,aDo),e(ao,Xb),e(Xb,nDo),e(Xb,Tge),e(Tge,sDo),e(Xb,lDo),e(Xb,Mge),e(Mge,iDo),e(ao,dDo),M(zb,ao,null),b(f,rqe,_),b(f,Yi,_),e(Yi,Wb),e(Wb,Ege),M(Cy,Ege,null),e(Yi,cDo),e(Yi,Cge),e(Cge,fDo),b(f,tqe,_),b(f,qo,_),M(wy,qo,null),e(qo,mDo),e(qo,Ki),e(Ki,gDo),e(Ki,jO),e(jO,hDo),e(Ki,pDo),e(Ki,DO),e(DO,uDo),e(Ki,_Do),e(qo,bDo),e(qo,Ay),e(Ay,vDo),e(Ay,wge),e(wge,FDo),e(Ay,TDo),e(qo,MDo),e(qo,mt),M(yy,mt,null),e(mt,EDo),e(mt,Age),e(Age,CDo),e(mt,wDo),e(mt,Zi),e(Zi,ADo),e(Zi,yge),e(yge,yDo),e(Zi,LDo),e(Zi,GO),e(GO,xDo),e(Zi,$Do),e(mt,kDo),M(Qb,mt,null),e(qo,SDo),e(qo,no),M(Ly,no,null),e(no,RDo),e(no,Lge),e(Lge,PDo),e(no,BDo),e(no,qa),e(qa,IDo),e(qa,xge),e(xge,qDo),e(qa,NDo),e(qa,$ge),e($ge,jDo),e(qa,DDo),e(qa,kge),e(kge,GDo),e(qa,ODo),e(no,VDo),e(no,V),e(V,Hb),e(Hb,Sge),e(Sge,XDo),e(Hb,zDo),e(Hb,OO),e(OO,WDo),e(Hb,QDo),e(V,HDo),e(V,Ub),e(Ub,Rge),e(Rge,UDo),e(Ub,JDo),e(Ub,VO),e(VO,YDo),e(Ub,KDo),e(V,ZDo),e(V,Jb),e(Jb,Pge),e(Pge,eGo),e(Jb,oGo),e(Jb,XO),e(XO,rGo),e(Jb,tGo),e(V,aGo),e(V,Yb),e(Yb,Bge),e(Bge,nGo),e(Yb,sGo),e(Yb,zO),e(zO,lGo),e(Yb,iGo),e(V,dGo),e(V,Kb),e(Kb,Ige),e(Ige,cGo),e(Kb,fGo),e(Kb,WO),e(WO,mGo),e(Kb,gGo),e(V,hGo),e(V,Zb),e(Zb,qge),e(qge,pGo),e(Zb,uGo),e(Zb,QO),e(QO,_Go),e(Zb,bGo),e(V,vGo),e(V,e5),e(e5,Nge),e(Nge,FGo),e(e5,TGo),e(e5,HO),e(HO,MGo),e(e5,EGo),e(V,CGo),e(V,o5),e(o5,jge),e(jge,wGo),e(o5,AGo),e(o5,UO),e(UO,yGo),e(o5,LGo),e(V,xGo),e(V,r5),e(r5,Dge),e(Dge,$Go),e(r5,kGo),e(r5,JO),e(JO,SGo),e(r5,RGo),e(V,PGo),e(V,t5),e(t5,Gge),e(Gge,BGo),e(t5,IGo),e(t5,YO),e(YO,qGo),e(t5,NGo),e(V,jGo),e(V,a5),e(a5,Oge),e(Oge,DGo),e(a5,GGo),e(a5,KO),e(KO,OGo),e(a5,VGo),e(V,XGo),e(V,n5),e(n5,Vge),e(Vge,zGo),e(n5,WGo),e(n5,ZO),e(ZO,QGo),e(n5,HGo),e(V,UGo),e(V,s5),e(s5,Xge),e(Xge,JGo),e(s5,YGo),e(s5,eV),e(eV,KGo),e(s5,ZGo),e(V,eOo),e(V,l5),e(l5,zge),e(zge,oOo),e(l5,rOo),e(l5,oV),e(oV,tOo),e(l5,aOo),e(V,nOo),e(V,i5),e(i5,Wge),e(Wge,sOo),e(i5,lOo),e(i5,rV),e(rV,iOo),e(i5,dOo),e(V,cOo),e(V,d5),e(d5,Qge),e(Qge,fOo),e(d5,mOo),e(d5,tV),e(tV,gOo),e(d5,hOo),e(V,pOo),e(V,c5),e(c5,Hge),e(Hge,uOo),e(c5,_Oo),e(c5,aV),e(aV,bOo),e(c5,vOo),e(V,FOo),e(V,f5),e(f5,Uge),e(Uge,TOo),e(f5,MOo),e(f5,nV),e(nV,EOo),e(f5,COo),e(V,wOo),e(V,m5),e(m5,Jge),e(Jge,AOo),e(m5,yOo),e(m5,sV),e(sV,LOo),e(m5,xOo),e(V,$Oo),e(V,g5),e(g5,Yge),e(Yge,kOo),e(g5,SOo),e(g5,lV),e(lV,ROo),e(g5,POo),e(V,BOo),e(V,h5),e(h5,Kge),e(Kge,IOo),e(h5,qOo),e(h5,iV),e(iV,NOo),e(h5,jOo),e(V,DOo),e(V,p5),e(p5,Zge),e(Zge,GOo),e(p5,OOo),e(p5,dV),e(dV,VOo),e(p5,XOo),e(V,zOo),e(V,u5),e(u5,ehe),e(ehe,WOo),e(u5,QOo),e(u5,cV),e(cV,HOo),e(u5,UOo),e(V,JOo),e(V,_5),e(_5,ohe),e(ohe,YOo),e(_5,KOo),e(_5,fV),e(fV,ZOo),e(_5,eVo),e(V,oVo),e(V,b5),e(b5,rhe),e(rhe,rVo),e(b5,tVo),e(b5,mV),e(mV,aVo),e(b5,nVo),e(V,sVo),e(V,v5),e(v5,the),e(the,lVo),e(v5,iVo),e(v5,gV),e(gV,dVo),e(v5,cVo),e(V,fVo),e(V,F5),e(F5,ahe),e(ahe,mVo),e(F5,gVo),e(F5,hV),e(hV,hVo),e(F5,pVo),e(V,uVo),e(V,T5),e(T5,nhe),e(nhe,_Vo),e(T5,bVo),e(T5,pV),e(pV,vVo),e(T5,FVo),e(V,TVo),e(V,M5),e(M5,she),e(she,MVo),e(M5,EVo),e(M5,uV),e(uV,CVo),e(M5,wVo),e(V,AVo),e(V,E5),e(E5,lhe),e(lhe,yVo),e(E5,LVo),e(E5,_V),e(_V,xVo),e(E5,$Vo),e(V,kVo),e(V,C5),e(C5,ihe),e(ihe,SVo),e(C5,RVo),e(C5,bV),e(bV,PVo),e(C5,BVo),e(V,IVo),e(V,w5),e(w5,dhe),e(dhe,qVo),e(w5,NVo),e(w5,vV),e(vV,jVo),e(w5,DVo),e(V,GVo),e(V,A5),e(A5,che),e(che,OVo),e(A5,VVo),e(A5,FV),e(FV,XVo),e(A5,zVo),e(V,WVo),e(V,y5),e(y5,fhe),e(fhe,QVo),e(y5,HVo),e(y5,TV),e(TV,UVo),e(y5,JVo),e(V,YVo),e(V,L5),e(L5,mhe),e(mhe,KVo),e(L5,ZVo),e(L5,MV),e(MV,eXo),e(L5,oXo),e(V,rXo),e(V,x5),e(x5,ghe),e(ghe,tXo),e(x5,aXo),e(x5,EV),e(EV,nXo),e(x5,sXo),e(V,lXo),e(V,$5),e($5,hhe),e(hhe,iXo),e($5,dXo),e($5,CV),e(CV,cXo),e($5,fXo),e(V,mXo),e(V,k5),e(k5,phe),e(phe,gXo),e(k5,hXo),e(k5,wV),e(wV,pXo),e(k5,uXo),e(V,_Xo),e(V,S5),e(S5,uhe),e(uhe,bXo),e(S5,vXo),e(S5,AV),e(AV,FXo),e(S5,TXo),e(no,MXo),e(no,R5),e(R5,EXo),e(R5,_he),e(_he,CXo),e(R5,wXo),e(R5,bhe),e(bhe,AXo),e(no,yXo),M(P5,no,null),b(f,aqe,_),b(f,ed,_),e(ed,B5),e(B5,vhe),M(xy,vhe,null),e(ed,LXo),e(ed,Fhe),e(Fhe,xXo),b(f,nqe,_),b(f,No,_),M($y,No,null),e(No,$Xo),e(No,od),e(od,kXo),e(od,yV),e(yV,SXo),e(od,RXo),e(od,LV),e(LV,PXo),e(od,BXo),e(No,IXo),e(No,ky),e(ky,qXo),e(ky,The),e(The,NXo),e(ky,jXo),e(No,DXo),e(No,gt),M(Sy,gt,null),e(gt,GXo),e(gt,Mhe),e(Mhe,OXo),e(gt,VXo),e(gt,rd),e(rd,XXo),e(rd,Ehe),e(Ehe,zXo),e(rd,WXo),e(rd,xV),e(xV,QXo),e(rd,HXo),e(gt,UXo),M(I5,gt,null),e(No,JXo),e(No,so),M(Ry,so,null),e(so,YXo),e(so,Che),e(Che,KXo),e(so,ZXo),e(so,Na),e(Na,ezo),e(Na,whe),e(whe,ozo),e(Na,rzo),e(Na,Ahe),e(Ahe,tzo),e(Na,azo),e(Na,yhe),e(yhe,nzo),e(Na,szo),e(so,lzo),e(so,Lhe),e(Lhe,q5),e(q5,xhe),e(xhe,izo),e(q5,dzo),e(q5,$V),e($V,czo),e(q5,fzo),e(so,mzo),e(so,N5),e(N5,gzo),e(N5,$he),e($he,hzo),e(N5,pzo),e(N5,khe),e(khe,uzo),e(so,_zo),M(j5,so,null),b(f,sqe,_),b(f,td,_),e(td,D5),e(D5,She),M(Py,She,null),e(td,bzo),e(td,Rhe),e(Rhe,vzo),b(f,lqe,_),b(f,jo,_),M(By,jo,null),e(jo,Fzo),e(jo,ad),e(ad,Tzo),e(ad,kV),e(kV,Mzo),e(ad,Ezo),e(ad,SV),e(SV,Czo),e(ad,wzo),e(jo,Azo),e(jo,Iy),e(Iy,yzo),e(Iy,Phe),e(Phe,Lzo),e(Iy,xzo),e(jo,$zo),e(jo,ht),M(qy,ht,null),e(ht,kzo),e(ht,Bhe),e(Bhe,Szo),e(ht,Rzo),e(ht,nd),e(nd,Pzo),e(nd,Ihe),e(Ihe,Bzo),e(nd,Izo),e(nd,RV),e(RV,qzo),e(nd,Nzo),e(ht,jzo),M(G5,ht,null),e(jo,Dzo),e(jo,lo),M(Ny,lo,null),e(lo,Gzo),e(lo,qhe),e(qhe,Ozo),e(lo,Vzo),e(lo,ja),e(ja,Xzo),e(ja,Nhe),e(Nhe,zzo),e(ja,Wzo),e(ja,jhe),e(jhe,Qzo),e(ja,Hzo),e(ja,Dhe),e(Dhe,Uzo),e(ja,Jzo),e(lo,Yzo),e(lo,Fe),e(Fe,O5),e(O5,Ghe),e(Ghe,Kzo),e(O5,Zzo),e(O5,PV),e(PV,eWo),e(O5,oWo),e(Fe,rWo),e(Fe,V5),e(V5,Ohe),e(Ohe,tWo),e(V5,aWo),e(V5,BV),e(BV,nWo),e(V5,sWo),e(Fe,lWo),e(Fe,X5),e(X5,Vhe),e(Vhe,iWo),e(X5,dWo),e(X5,IV),e(IV,cWo),e(X5,fWo),e(Fe,mWo),e(Fe,Ps),e(Ps,Xhe),e(Xhe,gWo),e(Ps,hWo),e(Ps,qV),e(qV,pWo),e(Ps,uWo),e(Ps,NV),e(NV,_Wo),e(Ps,bWo),e(Fe,vWo),e(Fe,z5),e(z5,zhe),e(zhe,FWo),e(z5,TWo),e(z5,jV),e(jV,MWo),e(z5,EWo),e(Fe,CWo),e(Fe,pt),e(pt,Whe),e(Whe,wWo),e(pt,AWo),e(pt,DV),e(DV,yWo),e(pt,LWo),e(pt,GV),e(GV,xWo),e(pt,$Wo),e(pt,OV),e(OV,kWo),e(pt,SWo),e(Fe,RWo),e(Fe,W5),e(W5,Qhe),e(Qhe,PWo),e(W5,BWo),e(W5,VV),e(VV,IWo),e(W5,qWo),e(Fe,NWo),e(Fe,Q5),e(Q5,Hhe),e(Hhe,jWo),e(Q5,DWo),e(Q5,XV),e(XV,GWo),e(Q5,OWo),e(Fe,VWo),e(Fe,H5),e(H5,Uhe),e(Uhe,XWo),e(H5,zWo),e(H5,zV),e(zV,WWo),e(H5,QWo),e(Fe,HWo),e(Fe,U5),e(U5,Jhe),e(Jhe,UWo),e(U5,JWo),e(U5,WV),e(WV,YWo),e(U5,KWo),e(Fe,ZWo),e(Fe,J5),e(J5,Yhe),e(Yhe,eQo),e(J5,oQo),e(J5,QV),e(QV,rQo),e(J5,tQo),e(Fe,aQo),e(Fe,Y5),e(Y5,Khe),e(Khe,nQo),e(Y5,sQo),e(Y5,HV),e(HV,lQo),e(Y5,iQo),e(Fe,dQo),e(Fe,K5),e(K5,Zhe),e(Zhe,cQo),e(K5,fQo),e(K5,UV),e(UV,mQo),e(K5,gQo),e(lo,hQo),e(lo,Z5),e(Z5,pQo),e(Z5,epe),e(epe,uQo),e(Z5,_Qo),e(Z5,ope),e(ope,bQo),e(lo,vQo),M(ev,lo,null),b(f,iqe,_),b(f,sd,_),e(sd,ov),e(ov,rpe),M(jy,rpe,null),e(sd,FQo),e(sd,tpe),e(tpe,TQo),b(f,dqe,_),b(f,Do,_),M(Dy,Do,null),e(Do,MQo),e(Do,ld),e(ld,EQo),e(ld,JV),e(JV,CQo),e(ld,wQo),e(ld,YV),e(YV,AQo),e(ld,yQo),e(Do,LQo),e(Do,Gy),e(Gy,xQo),e(Gy,ape),e(ape,$Qo),e(Gy,kQo),e(Do,SQo),e(Do,ut),M(Oy,ut,null),e(ut,RQo),e(ut,npe),e(npe,PQo),e(ut,BQo),e(ut,id),e(id,IQo),e(id,spe),e(spe,qQo),e(id,NQo),e(id,KV),e(KV,jQo),e(id,DQo),e(ut,GQo),M(rv,ut,null),e(Do,OQo),e(Do,io),M(Vy,io,null),e(io,VQo),e(io,lpe),e(lpe,XQo),e(io,zQo),e(io,Da),e(Da,WQo),e(Da,ipe),e(ipe,QQo),e(Da,HQo),e(Da,dpe),e(dpe,UQo),e(Da,JQo),e(Da,cpe),e(cpe,YQo),e(Da,KQo),e(io,ZQo),e(io,fpe),e(fpe,tv),e(tv,mpe),e(mpe,eHo),e(tv,oHo),e(tv,ZV),e(ZV,rHo),e(tv,tHo),e(io,aHo),e(io,av),e(av,nHo),e(av,gpe),e(gpe,sHo),e(av,lHo),e(av,hpe),e(hpe,iHo),e(io,dHo),M(nv,io,null),b(f,cqe,_),b(f,dd,_),e(dd,sv),e(sv,ppe),M(Xy,ppe,null),e(dd,cHo),e(dd,upe),e(upe,fHo),b(f,fqe,_),b(f,Go,_),M(zy,Go,null),e(Go,mHo),e(Go,cd),e(cd,gHo),e(cd,eX),e(eX,hHo),e(cd,pHo),e(cd,oX),e(oX,uHo),e(cd,_Ho),e(Go,bHo),e(Go,Wy),e(Wy,vHo),e(Wy,_pe),e(_pe,FHo),e(Wy,THo),e(Go,MHo),e(Go,_t),M(Qy,_t,null),e(_t,EHo),e(_t,bpe),e(bpe,CHo),e(_t,wHo),e(_t,fd),e(fd,AHo),e(fd,vpe),e(vpe,yHo),e(fd,LHo),e(fd,rX),e(rX,xHo),e(fd,$Ho),e(_t,kHo),M(lv,_t,null),e(Go,SHo),e(Go,co),M(Hy,co,null),e(co,RHo),e(co,Fpe),e(Fpe,PHo),e(co,BHo),e(co,Ga),e(Ga,IHo),e(Ga,Tpe),e(Tpe,qHo),e(Ga,NHo),e(Ga,Mpe),e(Mpe,jHo),e(Ga,DHo),e(Ga,Epe),e(Epe,GHo),e(Ga,OHo),e(co,VHo),e(co,ke),e(ke,iv),e(iv,Cpe),e(Cpe,XHo),e(iv,zHo),e(iv,tX),e(tX,WHo),e(iv,QHo),e(ke,HHo),e(ke,dv),e(dv,wpe),e(wpe,UHo),e(dv,JHo),e(dv,aX),e(aX,YHo),e(dv,KHo),e(ke,ZHo),e(ke,cv),e(cv,Ape),e(Ape,eUo),e(cv,oUo),e(cv,nX),e(nX,rUo),e(cv,tUo),e(ke,aUo),e(ke,fv),e(fv,ype),e(ype,nUo),e(fv,sUo),e(fv,sX),e(sX,lUo),e(fv,iUo),e(ke,dUo),e(ke,mv),e(mv,Lpe),e(Lpe,cUo),e(mv,fUo),e(mv,lX),e(lX,mUo),e(mv,gUo),e(ke,hUo),e(ke,gv),e(gv,xpe),e(xpe,pUo),e(gv,uUo),e(gv,iX),e(iX,_Uo),e(gv,bUo),e(ke,vUo),e(ke,hv),e(hv,$pe),e($pe,FUo),e(hv,TUo),e(hv,dX),e(dX,MUo),e(hv,EUo),e(ke,CUo),e(ke,pv),e(pv,kpe),e(kpe,wUo),e(pv,AUo),e(pv,cX),e(cX,yUo),e(pv,LUo),e(ke,xUo),e(ke,uv),e(uv,Spe),e(Spe,$Uo),e(uv,kUo),e(uv,fX),e(fX,SUo),e(uv,RUo),e(co,PUo),e(co,_v),e(_v,BUo),e(_v,Rpe),e(Rpe,IUo),e(_v,qUo),e(_v,Ppe),e(Ppe,NUo),e(co,jUo),M(bv,co,null),b(f,mqe,_),b(f,md,_),e(md,vv),e(vv,Bpe),M(Uy,Bpe,null),e(md,DUo),e(md,Ipe),e(Ipe,GUo),b(f,gqe,_),b(f,Oo,_),M(Jy,Oo,null),e(Oo,OUo),e(Oo,gd),e(gd,VUo),e(gd,mX),e(mX,XUo),e(gd,zUo),e(gd,gX),e(gX,WUo),e(gd,QUo),e(Oo,HUo),e(Oo,Yy),e(Yy,UUo),e(Yy,qpe),e(qpe,JUo),e(Yy,YUo),e(Oo,KUo),e(Oo,bt),M(Ky,bt,null),e(bt,ZUo),e(bt,Npe),e(Npe,eJo),e(bt,oJo),e(bt,hd),e(hd,rJo),e(hd,jpe),e(jpe,tJo),e(hd,aJo),e(hd,hX),e(hX,nJo),e(hd,sJo),e(bt,lJo),M(Fv,bt,null),e(Oo,iJo),e(Oo,fo),M(Zy,fo,null),e(fo,dJo),e(fo,Dpe),e(Dpe,cJo),e(fo,fJo),e(fo,Oa),e(Oa,mJo),e(Oa,Gpe),e(Gpe,gJo),e(Oa,hJo),e(Oa,Ope),e(Ope,pJo),e(Oa,uJo),e(Oa,Vpe),e(Vpe,_Jo),e(Oa,bJo),e(fo,vJo),e(fo,Kr),e(Kr,Tv),e(Tv,Xpe),e(Xpe,FJo),e(Tv,TJo),e(Tv,pX),e(pX,MJo),e(Tv,EJo),e(Kr,CJo),e(Kr,Mv),e(Mv,zpe),e(zpe,wJo),e(Mv,AJo),e(Mv,uX),e(uX,yJo),e(Mv,LJo),e(Kr,xJo),e(Kr,Ev),e(Ev,Wpe),e(Wpe,$Jo),e(Ev,kJo),e(Ev,_X),e(_X,SJo),e(Ev,RJo),e(Kr,PJo),e(Kr,Cv),e(Cv,Qpe),e(Qpe,BJo),e(Cv,IJo),e(Cv,bX),e(bX,qJo),e(Cv,NJo),e(Kr,jJo),e(Kr,wv),e(wv,Hpe),e(Hpe,DJo),e(wv,GJo),e(wv,vX),e(vX,OJo),e(wv,VJo),e(fo,XJo),e(fo,Av),e(Av,zJo),e(Av,Upe),e(Upe,WJo),e(Av,QJo),e(Av,Jpe),e(Jpe,HJo),e(fo,UJo),M(yv,fo,null),b(f,hqe,_),b(f,pd,_),e(pd,Lv),e(Lv,Ype),M(eL,Ype,null),e(pd,JJo),e(pd,Kpe),e(Kpe,YJo),b(f,pqe,_),b(f,Vo,_),M(oL,Vo,null),e(Vo,KJo),e(Vo,ud),e(ud,ZJo),e(ud,FX),e(FX,eYo),e(ud,oYo),e(ud,TX),e(TX,rYo),e(ud,tYo),e(Vo,aYo),e(Vo,rL),e(rL,nYo),e(rL,Zpe),e(Zpe,sYo),e(rL,lYo),e(Vo,iYo),e(Vo,vt),M(tL,vt,null),e(vt,dYo),e(vt,eue),e(eue,cYo),e(vt,fYo),e(vt,_d),e(_d,mYo),e(_d,oue),e(oue,gYo),e(_d,hYo),e(_d,MX),e(MX,pYo),e(_d,uYo),e(vt,_Yo),M(xv,vt,null),e(Vo,bYo),e(Vo,mo),M(aL,mo,null),e(mo,vYo),e(mo,rue),e(rue,FYo),e(mo,TYo),e(mo,Va),e(Va,MYo),e(Va,tue),e(tue,EYo),e(Va,CYo),e(Va,aue),e(aue,wYo),e(Va,AYo),e(Va,nue),e(nue,yYo),e(Va,LYo),e(mo,xYo),e(mo,Se),e(Se,$v),e($v,sue),e(sue,$Yo),e($v,kYo),e($v,EX),e(EX,SYo),e($v,RYo),e(Se,PYo),e(Se,kv),e(kv,lue),e(lue,BYo),e(kv,IYo),e(kv,CX),e(CX,qYo),e(kv,NYo),e(Se,jYo),e(Se,Sv),e(Sv,iue),e(iue,DYo),e(Sv,GYo),e(Sv,wX),e(wX,OYo),e(Sv,VYo),e(Se,XYo),e(Se,Rv),e(Rv,due),e(due,zYo),e(Rv,WYo),e(Rv,AX),e(AX,QYo),e(Rv,HYo),e(Se,UYo),e(Se,Pv),e(Pv,cue),e(cue,JYo),e(Pv,YYo),e(Pv,yX),e(yX,KYo),e(Pv,ZYo),e(Se,eKo),e(Se,Bv),e(Bv,fue),e(fue,oKo),e(Bv,rKo),e(Bv,LX),e(LX,tKo),e(Bv,aKo),e(Se,nKo),e(Se,Iv),e(Iv,mue),e(mue,sKo),e(Iv,lKo),e(Iv,xX),e(xX,iKo),e(Iv,dKo),e(Se,cKo),e(Se,qv),e(qv,gue),e(gue,fKo),e(qv,mKo),e(qv,$X),e($X,gKo),e(qv,hKo),e(Se,pKo),e(Se,Nv),e(Nv,hue),e(hue,uKo),e(Nv,_Ko),e(Nv,kX),e(kX,bKo),e(Nv,vKo),e(mo,FKo),e(mo,jv),e(jv,TKo),e(jv,pue),e(pue,MKo),e(jv,EKo),e(jv,uue),e(uue,CKo),e(mo,wKo),M(Dv,mo,null),b(f,uqe,_),b(f,bd,_),e(bd,Gv),e(Gv,_ue),M(nL,_ue,null),e(bd,AKo),e(bd,bue),e(bue,yKo),b(f,_qe,_),b(f,Xo,_),M(sL,Xo,null),e(Xo,LKo),e(Xo,vd),e(vd,xKo),e(vd,SX),e(SX,$Ko),e(vd,kKo),e(vd,RX),e(RX,SKo),e(vd,RKo),e(Xo,PKo),e(Xo,lL),e(lL,BKo),e(lL,vue),e(vue,IKo),e(lL,qKo),e(Xo,NKo),e(Xo,Ft),M(iL,Ft,null),e(Ft,jKo),e(Ft,Fue),e(Fue,DKo),e(Ft,GKo),e(Ft,Fd),e(Fd,OKo),e(Fd,Tue),e(Tue,VKo),e(Fd,XKo),e(Fd,PX),e(PX,zKo),e(Fd,WKo),e(Ft,QKo),M(Ov,Ft,null),e(Xo,HKo),e(Xo,go),M(dL,go,null),e(go,UKo),e(go,Mue),e(Mue,JKo),e(go,YKo),e(go,Xa),e(Xa,KKo),e(Xa,Eue),e(Eue,ZKo),e(Xa,eZo),e(Xa,Cue),e(Cue,oZo),e(Xa,rZo),e(Xa,wue),e(wue,tZo),e(Xa,aZo),e(go,nZo),e(go,cL),e(cL,Vv),e(Vv,Aue),e(Aue,sZo),e(Vv,lZo),e(Vv,BX),e(BX,iZo),e(Vv,dZo),e(cL,cZo),e(cL,Xv),e(Xv,yue),e(yue,fZo),e(Xv,mZo),e(Xv,IX),e(IX,gZo),e(Xv,hZo),e(go,pZo),e(go,zv),e(zv,uZo),e(zv,Lue),e(Lue,_Zo),e(zv,bZo),e(zv,xue),e(xue,vZo),e(go,FZo),M(Wv,go,null),b(f,bqe,_),b(f,Td,_),e(Td,Qv),e(Qv,$ue),M(fL,$ue,null),e(Td,TZo),e(Td,kue),e(kue,MZo),b(f,vqe,_),b(f,zo,_),M(mL,zo,null),e(zo,EZo),e(zo,Md),e(Md,CZo),e(Md,qX),e(qX,wZo),e(Md,AZo),e(Md,NX),e(NX,yZo),e(Md,LZo),e(zo,xZo),e(zo,gL),e(gL,$Zo),e(gL,Sue),e(Sue,kZo),e(gL,SZo),e(zo,RZo),e(zo,Tt),M(hL,Tt,null),e(Tt,PZo),e(Tt,Rue),e(Rue,BZo),e(Tt,IZo),e(Tt,Ed),e(Ed,qZo),e(Ed,Pue),e(Pue,NZo),e(Ed,jZo),e(Ed,jX),e(jX,DZo),e(Ed,GZo),e(Tt,OZo),M(Hv,Tt,null),e(zo,VZo),e(zo,ho),M(pL,ho,null),e(ho,XZo),e(ho,Bue),e(Bue,zZo),e(ho,WZo),e(ho,za),e(za,QZo),e(za,Iue),e(Iue,HZo),e(za,UZo),e(za,que),e(que,JZo),e(za,YZo),e(za,Nue),e(Nue,KZo),e(za,ZZo),e(ho,eer),e(ho,Zr),e(Zr,Uv),e(Uv,jue),e(jue,oer),e(Uv,rer),e(Uv,DX),e(DX,ter),e(Uv,aer),e(Zr,ner),e(Zr,Jv),e(Jv,Due),e(Due,ser),e(Jv,ler),e(Jv,GX),e(GX,ier),e(Jv,der),e(Zr,cer),e(Zr,Yv),e(Yv,Gue),e(Gue,fer),e(Yv,mer),e(Yv,OX),e(OX,ger),e(Yv,her),e(Zr,per),e(Zr,Kv),e(Kv,Oue),e(Oue,uer),e(Kv,_er),e(Kv,VX),e(VX,ber),e(Kv,ver),e(Zr,Fer),e(Zr,Zv),e(Zv,Vue),e(Vue,Ter),e(Zv,Mer),e(Zv,XX),e(XX,Eer),e(Zv,Cer),e(ho,wer),e(ho,eF),e(eF,Aer),e(eF,Xue),e(Xue,yer),e(eF,Ler),e(eF,zue),e(zue,xer),e(ho,$er),M(oF,ho,null),b(f,Fqe,_),b(f,Cd,_),e(Cd,rF),e(rF,Wue),M(uL,Wue,null),e(Cd,ker),e(Cd,Que),e(Que,Ser),b(f,Tqe,_),b(f,Wo,_),M(_L,Wo,null),e(Wo,Rer),e(Wo,wd),e(wd,Per),e(wd,zX),e(zX,Ber),e(wd,Ier),e(wd,WX),e(WX,qer),e(wd,Ner),e(Wo,jer),e(Wo,bL),e(bL,Der),e(bL,Hue),e(Hue,Ger),e(bL,Oer),e(Wo,Ver),e(Wo,Mt),M(vL,Mt,null),e(Mt,Xer),e(Mt,Uue),e(Uue,zer),e(Mt,Wer),e(Mt,Ad),e(Ad,Qer),e(Ad,Jue),e(Jue,Her),e(Ad,Uer),e(Ad,QX),e(QX,Jer),e(Ad,Yer),e(Mt,Ker),M(tF,Mt,null),e(Wo,Zer),e(Wo,po),M(FL,po,null),e(po,eor),e(po,Yue),e(Yue,oor),e(po,ror),e(po,Wa),e(Wa,tor),e(Wa,Kue),e(Kue,aor),e(Wa,nor),e(Wa,Zue),e(Zue,sor),e(Wa,lor),e(Wa,e_e),e(e_e,ior),e(Wa,dor),e(po,cor),e(po,yd),e(yd,aF),e(aF,o_e),e(o_e,mor),e(aF,gor),e(aF,HX),e(HX,hor),e(aF,por),e(yd,uor),e(yd,nF),e(nF,r_e),e(r_e,_or),e(nF,bor),e(nF,UX),e(UX,vor),e(nF,For),e(yd,Tor),e(yd,sF),e(sF,t_e),e(t_e,Mor),e(sF,Eor),e(sF,JX),e(JX,Cor),e(sF,wor),e(po,Aor),e(po,lF),e(lF,yor),e(lF,a_e),e(a_e,Lor),e(lF,xor),e(lF,n_e),e(n_e,$or),e(po,kor),M(iF,po,null),b(f,Mqe,_),b(f,Ld,_),e(Ld,dF),e(dF,s_e),M(TL,s_e,null),e(Ld,Sor),e(Ld,l_e),e(l_e,Ror),b(f,Eqe,_),b(f,Qo,_),M(ML,Qo,null),e(Qo,Por),e(Qo,xd),e(xd,Bor),e(xd,YX),e(YX,Ior),e(xd,qor),e(xd,KX),e(KX,Nor),e(xd,jor),e(Qo,Dor),e(Qo,EL),e(EL,Gor),e(EL,i_e),e(i_e,Oor),e(EL,Vor),e(Qo,Xor),e(Qo,Et),M(CL,Et,null),e(Et,zor),e(Et,d_e),e(d_e,Wor),e(Et,Qor),e(Et,$d),e($d,Hor),e($d,c_e),e(c_e,Uor),e($d,Jor),e($d,ZX),e(ZX,Yor),e($d,Kor),e(Et,Zor),M(cF,Et,null),e(Qo,err),e(Qo,uo),M(wL,uo,null),e(uo,orr),e(uo,f_e),e(f_e,rrr),e(uo,trr),e(uo,Qa),e(Qa,arr),e(Qa,m_e),e(m_e,nrr),e(Qa,srr),e(Qa,g_e),e(g_e,lrr),e(Qa,irr),e(Qa,h_e),e(h_e,drr),e(Qa,crr),e(uo,frr),e(uo,AL),e(AL,fF),e(fF,p_e),e(p_e,mrr),e(fF,grr),e(fF,ez),e(ez,hrr),e(fF,prr),e(AL,urr),e(AL,mF),e(mF,u_e),e(u_e,_rr),e(mF,brr),e(mF,oz),e(oz,vrr),e(mF,Frr),e(uo,Trr),e(uo,gF),e(gF,Mrr),e(gF,__e),e(__e,Err),e(gF,Crr),e(gF,b_e),e(b_e,wrr),e(uo,Arr),M(hF,uo,null),b(f,Cqe,_),b(f,kd,_),e(kd,pF),e(pF,v_e),M(yL,v_e,null),e(kd,yrr),e(kd,F_e),e(F_e,Lrr),b(f,wqe,_),b(f,Ho,_),M(LL,Ho,null),e(Ho,xrr),e(Ho,Sd),e(Sd,$rr),e(Sd,rz),e(rz,krr),e(Sd,Srr),e(Sd,tz),e(tz,Rrr),e(Sd,Prr),e(Ho,Brr),e(Ho,xL),e(xL,Irr),e(xL,T_e),e(T_e,qrr),e(xL,Nrr),e(Ho,jrr),e(Ho,Ct),M($L,Ct,null),e(Ct,Drr),e(Ct,M_e),e(M_e,Grr),e(Ct,Orr),e(Ct,Rd),e(Rd,Vrr),e(Rd,E_e),e(E_e,Xrr),e(Rd,zrr),e(Rd,az),e(az,Wrr),e(Rd,Qrr),e(Ct,Hrr),M(uF,Ct,null),e(Ho,Urr),e(Ho,_o),M(kL,_o,null),e(_o,Jrr),e(_o,C_e),e(C_e,Yrr),e(_o,Krr),e(_o,Ha),e(Ha,Zrr),e(Ha,w_e),e(w_e,etr),e(Ha,otr),e(Ha,A_e),e(A_e,rtr),e(Ha,ttr),e(Ha,y_e),e(y_e,atr),e(Ha,ntr),e(_o,str),e(_o,L_e),e(L_e,_F),e(_F,x_e),e(x_e,ltr),e(_F,itr),e(_F,nz),e(nz,dtr),e(_F,ctr),e(_o,ftr),e(_o,bF),e(bF,mtr),e(bF,$_e),e($_e,gtr),e(bF,htr),e(bF,k_e),e(k_e,ptr),e(_o,utr),M(vF,_o,null),b(f,Aqe,_),b(f,Pd,_),e(Pd,FF),e(FF,S_e),M(SL,S_e,null),e(Pd,_tr),e(Pd,R_e),e(R_e,btr),b(f,yqe,_),b(f,Uo,_),M(RL,Uo,null),e(Uo,vtr),e(Uo,Bd),e(Bd,Ftr),e(Bd,sz),e(sz,Ttr),e(Bd,Mtr),e(Bd,lz),e(lz,Etr),e(Bd,Ctr),e(Uo,wtr),e(Uo,PL),e(PL,Atr),e(PL,P_e),e(P_e,ytr),e(PL,Ltr),e(Uo,xtr),e(Uo,wt),M(BL,wt,null),e(wt,$tr),e(wt,B_e),e(B_e,ktr),e(wt,Str),e(wt,Id),e(Id,Rtr),e(Id,I_e),e(I_e,Ptr),e(Id,Btr),e(Id,iz),e(iz,Itr),e(Id,qtr),e(wt,Ntr),M(TF,wt,null),e(Uo,jtr),e(Uo,bo),M(IL,bo,null),e(bo,Dtr),e(bo,q_e),e(q_e,Gtr),e(bo,Otr),e(bo,Ua),e(Ua,Vtr),e(Ua,N_e),e(N_e,Xtr),e(Ua,ztr),e(Ua,j_e),e(j_e,Wtr),e(Ua,Qtr),e(Ua,D_e),e(D_e,Htr),e(Ua,Utr),e(bo,Jtr),e(bo,Ja),e(Ja,MF),e(MF,G_e),e(G_e,Ytr),e(MF,Ktr),e(MF,dz),e(dz,Ztr),e(MF,ear),e(Ja,oar),e(Ja,EF),e(EF,O_e),e(O_e,rar),e(EF,tar),e(EF,cz),e(cz,aar),e(EF,nar),e(Ja,sar),e(Ja,CF),e(CF,V_e),e(V_e,lar),e(CF,iar),e(CF,fz),e(fz,dar),e(CF,car),e(Ja,far),e(Ja,wF),e(wF,X_e),e(X_e,mar),e(wF,gar),e(wF,mz),e(mz,har),e(wF,par),e(bo,uar),e(bo,AF),e(AF,_ar),e(AF,z_e),e(z_e,bar),e(AF,Far),e(AF,W_e),e(W_e,Tar),e(bo,Mar),M(yF,bo,null),b(f,Lqe,_),b(f,qd,_),e(qd,LF),e(LF,Q_e),M(qL,Q_e,null),e(qd,Ear),e(qd,H_e),e(H_e,Car),b(f,xqe,_),b(f,Jo,_),M(NL,Jo,null),e(Jo,war),e(Jo,Nd),e(Nd,Aar),e(Nd,gz),e(gz,yar),e(Nd,Lar),e(Nd,hz),e(hz,xar),e(Nd,$ar),e(Jo,kar),e(Jo,jL),e(jL,Sar),e(jL,U_e),e(U_e,Rar),e(jL,Par),e(Jo,Bar),e(Jo,At),M(DL,At,null),e(At,Iar),e(At,J_e),e(J_e,qar),e(At,Nar),e(At,jd),e(jd,jar),e(jd,Y_e),e(Y_e,Dar),e(jd,Gar),e(jd,pz),e(pz,Oar),e(jd,Var),e(At,Xar),M(xF,At,null),e(Jo,zar),e(Jo,vo),M(GL,vo,null),e(vo,War),e(vo,K_e),e(K_e,Qar),e(vo,Har),e(vo,Ya),e(Ya,Uar),e(Ya,Z_e),e(Z_e,Jar),e(Ya,Yar),e(Ya,e2e),e(e2e,Kar),e(Ya,Zar),e(Ya,o2e),e(o2e,enr),e(Ya,onr),e(vo,rnr),e(vo,r2e),e(r2e,$F),e($F,t2e),e(t2e,tnr),e($F,anr),e($F,uz),e(uz,nnr),e($F,snr),e(vo,lnr),e(vo,kF),e(kF,inr),e(kF,a2e),e(a2e,dnr),e(kF,cnr),e(kF,n2e),e(n2e,fnr),e(vo,mnr),M(SF,vo,null),b(f,$qe,_),b(f,Dd,_),e(Dd,RF),e(RF,s2e),M(OL,s2e,null),e(Dd,gnr),e(Dd,l2e),e(l2e,hnr),b(f,kqe,_),b(f,Yo,_),M(VL,Yo,null),e(Yo,pnr),e(Yo,Gd),e(Gd,unr),e(Gd,_z),e(_z,_nr),e(Gd,bnr),e(Gd,bz),e(bz,vnr),e(Gd,Fnr),e(Yo,Tnr),e(Yo,XL),e(XL,Mnr),e(XL,i2e),e(i2e,Enr),e(XL,Cnr),e(Yo,wnr),e(Yo,yt),M(zL,yt,null),e(yt,Anr),e(yt,d2e),e(d2e,ynr),e(yt,Lnr),e(yt,Od),e(Od,xnr),e(Od,c2e),e(c2e,$nr),e(Od,knr),e(Od,vz),e(vz,Snr),e(Od,Rnr),e(yt,Pnr),M(PF,yt,null),e(Yo,Bnr),e(Yo,wr),M(WL,wr,null),e(wr,Inr),e(wr,f2e),e(f2e,qnr),e(wr,Nnr),e(wr,Ka),e(Ka,jnr),e(Ka,m2e),e(m2e,Dnr),e(Ka,Gnr),e(Ka,g2e),e(g2e,Onr),e(Ka,Vnr),e(Ka,h2e),e(h2e,Xnr),e(Ka,znr),e(wr,Wnr),e(wr,N),e(N,BF),e(BF,p2e),e(p2e,Qnr),e(BF,Hnr),e(BF,Fz),e(Fz,Unr),e(BF,Jnr),e(N,Ynr),e(N,IF),e(IF,u2e),e(u2e,Knr),e(IF,Znr),e(IF,Tz),e(Tz,esr),e(IF,osr),e(N,rsr),e(N,qF),e(qF,_2e),e(_2e,tsr),e(qF,asr),e(qF,Mz),e(Mz,nsr),e(qF,ssr),e(N,lsr),e(N,NF),e(NF,b2e),e(b2e,isr),e(NF,dsr),e(NF,Ez),e(Ez,csr),e(NF,fsr),e(N,msr),e(N,jF),e(jF,v2e),e(v2e,gsr),e(jF,hsr),e(jF,Cz),e(Cz,psr),e(jF,usr),e(N,_sr),e(N,DF),e(DF,F2e),e(F2e,bsr),e(DF,vsr),e(DF,wz),e(wz,Fsr),e(DF,Tsr),e(N,Msr),e(N,GF),e(GF,T2e),e(T2e,Esr),e(GF,Csr),e(GF,Az),e(Az,wsr),e(GF,Asr),e(N,ysr),e(N,OF),e(OF,M2e),e(M2e,Lsr),e(OF,xsr),e(OF,yz),e(yz,$sr),e(OF,ksr),e(N,Ssr),e(N,VF),e(VF,E2e),e(E2e,Rsr),e(VF,Psr),e(VF,Lz),e(Lz,Bsr),e(VF,Isr),e(N,qsr),e(N,XF),e(XF,C2e),e(C2e,Nsr),e(XF,jsr),e(XF,xz),e(xz,Dsr),e(XF,Gsr),e(N,Osr),e(N,zF),e(zF,w2e),e(w2e,Vsr),e(zF,Xsr),e(zF,$z),e($z,zsr),e(zF,Wsr),e(N,Qsr),e(N,WF),e(WF,A2e),e(A2e,Hsr),e(WF,Usr),e(WF,kz),e(kz,Jsr),e(WF,Ysr),e(N,Ksr),e(N,QF),e(QF,y2e),e(y2e,Zsr),e(QF,elr),e(QF,Sz),e(Sz,olr),e(QF,rlr),e(N,tlr),e(N,HF),e(HF,L2e),e(L2e,alr),e(HF,nlr),e(HF,Rz),e(Rz,slr),e(HF,llr),e(N,ilr),e(N,UF),e(UF,x2e),e(x2e,dlr),e(UF,clr),e(UF,Pz),e(Pz,flr),e(UF,mlr),e(N,glr),e(N,JF),e(JF,$2e),e($2e,hlr),e(JF,plr),e(JF,Bz),e(Bz,ulr),e(JF,_lr),e(N,blr),e(N,YF),e(YF,k2e),e(k2e,vlr),e(YF,Flr),e(YF,Iz),e(Iz,Tlr),e(YF,Mlr),e(N,Elr),e(N,Bs),e(Bs,S2e),e(S2e,Clr),e(Bs,wlr),e(Bs,qz),e(qz,Alr),e(Bs,ylr),e(Bs,Nz),e(Nz,Llr),e(Bs,xlr),e(N,$lr),e(N,KF),e(KF,R2e),e(R2e,klr),e(KF,Slr),e(KF,jz),e(jz,Rlr),e(KF,Plr),e(N,Blr),e(N,ZF),e(ZF,P2e),e(P2e,Ilr),e(ZF,qlr),e(ZF,Dz),e(Dz,Nlr),e(ZF,jlr),e(N,Dlr),e(N,eT),e(eT,B2e),e(B2e,Glr),e(eT,Olr),e(eT,Gz),e(Gz,Vlr),e(eT,Xlr),e(N,zlr),e(N,oT),e(oT,I2e),e(I2e,Wlr),e(oT,Qlr),e(oT,Oz),e(Oz,Hlr),e(oT,Ulr),e(N,Jlr),e(N,rT),e(rT,q2e),e(q2e,Ylr),e(rT,Klr),e(rT,Vz),e(Vz,Zlr),e(rT,eir),e(N,oir),e(N,tT),e(tT,N2e),e(N2e,rir),e(tT,tir),e(tT,Xz),e(Xz,air),e(tT,nir),e(N,sir),e(N,aT),e(aT,j2e),e(j2e,lir),e(aT,iir),e(aT,zz),e(zz,dir),e(aT,cir),e(N,fir),e(N,nT),e(nT,D2e),e(D2e,mir),e(nT,gir),e(nT,Wz),e(Wz,hir),e(nT,pir),e(N,uir),e(N,sT),e(sT,G2e),e(G2e,_ir),e(sT,bir),e(sT,Qz),e(Qz,vir),e(sT,Fir),e(N,Tir),e(N,lT),e(lT,O2e),e(O2e,Mir),e(lT,Eir),e(lT,Hz),e(Hz,Cir),e(lT,wir),e(N,Air),e(N,iT),e(iT,V2e),e(V2e,yir),e(iT,Lir),e(iT,Uz),e(Uz,xir),e(iT,$ir),e(N,kir),e(N,dT),e(dT,X2e),e(X2e,Sir),e(dT,Rir),e(dT,Jz),e(Jz,Pir),e(dT,Bir),e(N,Iir),e(N,cT),e(cT,z2e),e(z2e,qir),e(cT,Nir),e(cT,Yz),e(Yz,jir),e(cT,Dir),e(N,Gir),e(N,fT),e(fT,W2e),e(W2e,Oir),e(fT,Vir),e(fT,Kz),e(Kz,Xir),e(fT,zir),e(N,Wir),e(N,mT),e(mT,Q2e),e(Q2e,Qir),e(mT,Hir),e(mT,Zz),e(Zz,Uir),e(mT,Jir),e(N,Yir),e(N,gT),e(gT,H2e),e(H2e,Kir),e(gT,Zir),e(gT,eW),e(eW,edr),e(gT,odr),e(N,rdr),e(N,hT),e(hT,U2e),e(U2e,tdr),e(hT,adr),e(hT,oW),e(oW,ndr),e(hT,sdr),e(N,ldr),e(N,pT),e(pT,J2e),e(J2e,idr),e(pT,ddr),e(pT,rW),e(rW,cdr),e(pT,fdr),e(N,mdr),e(N,uT),e(uT,Y2e),e(Y2e,gdr),e(uT,hdr),e(uT,tW),e(tW,pdr),e(uT,udr),e(N,_dr),e(N,_T),e(_T,K2e),e(K2e,bdr),e(_T,vdr),e(_T,aW),e(aW,Fdr),e(_T,Tdr),e(N,Mdr),e(N,bT),e(bT,Z2e),e(Z2e,Edr),e(bT,Cdr),e(bT,nW),e(nW,wdr),e(bT,Adr),e(N,ydr),e(N,vT),e(vT,e1e),e(e1e,Ldr),e(vT,xdr),e(vT,sW),e(sW,$dr),e(vT,kdr),e(N,Sdr),e(N,FT),e(FT,o1e),e(o1e,Rdr),e(FT,Pdr),e(FT,lW),e(lW,Bdr),e(FT,Idr),e(N,qdr),e(N,TT),e(TT,r1e),e(r1e,Ndr),e(TT,jdr),e(TT,iW),e(iW,Ddr),e(TT,Gdr),e(N,Odr),e(N,MT),e(MT,t1e),e(t1e,Vdr),e(MT,Xdr),e(MT,dW),e(dW,zdr),e(MT,Wdr),e(N,Qdr),e(N,ET),e(ET,a1e),e(a1e,Hdr),e(ET,Udr),e(ET,cW),e(cW,Jdr),e(ET,Ydr),e(N,Kdr),e(N,CT),e(CT,n1e),e(n1e,Zdr),e(CT,ecr),e(CT,fW),e(fW,ocr),e(CT,rcr),e(N,tcr),e(N,wT),e(wT,s1e),e(s1e,acr),e(wT,ncr),e(wT,mW),e(mW,scr),e(wT,lcr),e(wr,icr),M(AT,wr,null),b(f,Sqe,_),b(f,Vd,_),e(Vd,yT),e(yT,l1e),M(QL,l1e,null),e(Vd,dcr),e(Vd,i1e),e(i1e,ccr),b(f,Rqe,_),b(f,Ko,_),M(HL,Ko,null),e(Ko,fcr),e(Ko,Xd),e(Xd,mcr),e(Xd,gW),e(gW,gcr),e(Xd,hcr),e(Xd,hW),e(hW,pcr),e(Xd,ucr),e(Ko,_cr),e(Ko,UL),e(UL,bcr),e(UL,d1e),e(d1e,vcr),e(UL,Fcr),e(Ko,Tcr),e(Ko,Lt),M(JL,Lt,null),e(Lt,Mcr),e(Lt,c1e),e(c1e,Ecr),e(Lt,Ccr),e(Lt,zd),e(zd,wcr),e(zd,f1e),e(f1e,Acr),e(zd,ycr),e(zd,pW),e(pW,Lcr),e(zd,xcr),e(Lt,$cr),M(LT,Lt,null),e(Ko,kcr),e(Ko,Ar),M(YL,Ar,null),e(Ar,Scr),e(Ar,m1e),e(m1e,Rcr),e(Ar,Pcr),e(Ar,Za),e(Za,Bcr),e(Za,g1e),e(g1e,Icr),e(Za,qcr),e(Za,h1e),e(h1e,Ncr),e(Za,jcr),e(Za,p1e),e(p1e,Dcr),e(Za,Gcr),e(Ar,Ocr),e(Ar,se),e(se,xT),e(xT,u1e),e(u1e,Vcr),e(xT,Xcr),e(xT,uW),e(uW,zcr),e(xT,Wcr),e(se,Qcr),e(se,$T),e($T,_1e),e(_1e,Hcr),e($T,Ucr),e($T,_W),e(_W,Jcr),e($T,Ycr),e(se,Kcr),e(se,kT),e(kT,b1e),e(b1e,Zcr),e(kT,efr),e(kT,bW),e(bW,ofr),e(kT,rfr),e(se,tfr),e(se,ST),e(ST,v1e),e(v1e,afr),e(ST,nfr),e(ST,vW),e(vW,sfr),e(ST,lfr),e(se,ifr),e(se,RT),e(RT,F1e),e(F1e,dfr),e(RT,cfr),e(RT,FW),e(FW,ffr),e(RT,mfr),e(se,gfr),e(se,PT),e(PT,T1e),e(T1e,hfr),e(PT,pfr),e(PT,TW),e(TW,ufr),e(PT,_fr),e(se,bfr),e(se,BT),e(BT,M1e),e(M1e,vfr),e(BT,Ffr),e(BT,MW),e(MW,Tfr),e(BT,Mfr),e(se,Efr),e(se,IT),e(IT,E1e),e(E1e,Cfr),e(IT,wfr),e(IT,EW),e(EW,Afr),e(IT,yfr),e(se,Lfr),e(se,qT),e(qT,C1e),e(C1e,xfr),e(qT,$fr),e(qT,CW),e(CW,kfr),e(qT,Sfr),e(se,Rfr),e(se,NT),e(NT,w1e),e(w1e,Pfr),e(NT,Bfr),e(NT,wW),e(wW,Ifr),e(NT,qfr),e(se,Nfr),e(se,jT),e(jT,A1e),e(A1e,jfr),e(jT,Dfr),e(jT,AW),e(AW,Gfr),e(jT,Ofr),e(se,Vfr),e(se,DT),e(DT,y1e),e(y1e,Xfr),e(DT,zfr),e(DT,yW),e(yW,Wfr),e(DT,Qfr),e(se,Hfr),e(se,GT),e(GT,L1e),e(L1e,Ufr),e(GT,Jfr),e(GT,LW),e(LW,Yfr),e(GT,Kfr),e(se,Zfr),e(se,OT),e(OT,x1e),e(x1e,emr),e(OT,omr),e(OT,xW),e(xW,rmr),e(OT,tmr),e(se,amr),e(se,VT),e(VT,$1e),e($1e,nmr),e(VT,smr),e(VT,$W),e($W,lmr),e(VT,imr),e(se,dmr),e(se,XT),e(XT,k1e),e(k1e,cmr),e(XT,fmr),e(XT,kW),e(kW,mmr),e(XT,gmr),e(se,hmr),e(se,zT),e(zT,S1e),e(S1e,pmr),e(zT,umr),e(zT,SW),e(SW,_mr),e(zT,bmr),e(se,vmr),e(se,WT),e(WT,R1e),e(R1e,Fmr),e(WT,Tmr),e(WT,RW),e(RW,Mmr),e(WT,Emr),e(se,Cmr),e(se,QT),e(QT,P1e),e(P1e,wmr),e(QT,Amr),e(QT,PW),e(PW,ymr),e(QT,Lmr),e(se,xmr),e(se,HT),e(HT,B1e),e(B1e,$mr),e(HT,kmr),e(HT,BW),e(BW,Smr),e(HT,Rmr),e(se,Pmr),e(se,UT),e(UT,I1e),e(I1e,Bmr),e(UT,Imr),e(UT,IW),e(IW,qmr),e(UT,Nmr),e(se,jmr),e(se,JT),e(JT,q1e),e(q1e,Dmr),e(JT,Gmr),e(JT,qW),e(qW,Omr),e(JT,Vmr),e(se,Xmr),e(se,YT),e(YT,N1e),e(N1e,zmr),e(YT,Wmr),e(YT,NW),e(NW,Qmr),e(YT,Hmr),e(Ar,Umr),M(KT,Ar,null),b(f,Pqe,_),b(f,Wd,_),e(Wd,ZT),e(ZT,j1e),M(KL,j1e,null),e(Wd,Jmr),e(Wd,D1e),e(D1e,Ymr),b(f,Bqe,_),b(f,Zo,_),M(ZL,Zo,null),e(Zo,Kmr),e(Zo,Qd),e(Qd,Zmr),e(Qd,jW),e(jW,egr),e(Qd,ogr),e(Qd,DW),e(DW,rgr),e(Qd,tgr),e(Zo,agr),e(Zo,e8),e(e8,ngr),e(e8,G1e),e(G1e,sgr),e(e8,lgr),e(Zo,igr),e(Zo,xt),M(o8,xt,null),e(xt,dgr),e(xt,O1e),e(O1e,cgr),e(xt,fgr),e(xt,Hd),e(Hd,mgr),e(Hd,V1e),e(V1e,ggr),e(Hd,hgr),e(Hd,GW),e(GW,pgr),e(Hd,ugr),e(xt,_gr),M(eM,xt,null),e(Zo,bgr),e(Zo,yr),M(r8,yr,null),e(yr,vgr),e(yr,X1e),e(X1e,Fgr),e(yr,Tgr),e(yr,en),e(en,Mgr),e(en,z1e),e(z1e,Egr),e(en,Cgr),e(en,W1e),e(W1e,wgr),e(en,Agr),e(en,Q1e),e(Q1e,ygr),e(en,Lgr),e(yr,xgr),e(yr,Te),e(Te,oM),e(oM,H1e),e(H1e,$gr),e(oM,kgr),e(oM,OW),e(OW,Sgr),e(oM,Rgr),e(Te,Pgr),e(Te,rM),e(rM,U1e),e(U1e,Bgr),e(rM,Igr),e(rM,VW),e(VW,qgr),e(rM,Ngr),e(Te,jgr),e(Te,tM),e(tM,J1e),e(J1e,Dgr),e(tM,Ggr),e(tM,XW),e(XW,Ogr),e(tM,Vgr),e(Te,Xgr),e(Te,aM),e(aM,Y1e),e(Y1e,zgr),e(aM,Wgr),e(aM,zW),e(zW,Qgr),e(aM,Hgr),e(Te,Ugr),e(Te,nM),e(nM,K1e),e(K1e,Jgr),e(nM,Ygr),e(nM,WW),e(WW,Kgr),e(nM,Zgr),e(Te,ehr),e(Te,sM),e(sM,Z1e),e(Z1e,ohr),e(sM,rhr),e(sM,QW),e(QW,thr),e(sM,ahr),e(Te,nhr),e(Te,lM),e(lM,e7e),e(e7e,shr),e(lM,lhr),e(lM,HW),e(HW,ihr),e(lM,dhr),e(Te,chr),e(Te,iM),e(iM,o7e),e(o7e,fhr),e(iM,mhr),e(iM,UW),e(UW,ghr),e(iM,hhr),e(Te,phr),e(Te,dM),e(dM,r7e),e(r7e,uhr),e(dM,_hr),e(dM,JW),e(JW,bhr),e(dM,vhr),e(Te,Fhr),e(Te,cM),e(cM,t7e),e(t7e,Thr),e(cM,Mhr),e(cM,YW),e(YW,Ehr),e(cM,Chr),e(Te,whr),e(Te,fM),e(fM,a7e),e(a7e,Ahr),e(fM,yhr),e(fM,KW),e(KW,Lhr),e(fM,xhr),e(Te,$hr),e(Te,mM),e(mM,n7e),e(n7e,khr),e(mM,Shr),e(mM,ZW),e(ZW,Rhr),e(mM,Phr),e(yr,Bhr),M(gM,yr,null),b(f,Iqe,_),b(f,Ud,_),e(Ud,hM),e(hM,s7e),M(t8,s7e,null),e(Ud,Ihr),e(Ud,l7e),e(l7e,qhr),b(f,qqe,_),b(f,er,_),M(a8,er,null),e(er,Nhr),e(er,Jd),e(Jd,jhr),e(Jd,eQ),e(eQ,Dhr),e(Jd,Ghr),e(Jd,oQ),e(oQ,Ohr),e(Jd,Vhr),e(er,Xhr),e(er,n8),e(n8,zhr),e(n8,i7e),e(i7e,Whr),e(n8,Qhr),e(er,Hhr),e(er,$t),M(s8,$t,null),e($t,Uhr),e($t,d7e),e(d7e,Jhr),e($t,Yhr),e($t,Yd),e(Yd,Khr),e(Yd,c7e),e(c7e,Zhr),e(Yd,epr),e(Yd,rQ),e(rQ,opr),e(Yd,rpr),e($t,tpr),M(pM,$t,null),e(er,apr),e(er,Lr),M(l8,Lr,null),e(Lr,npr),e(Lr,f7e),e(f7e,spr),e(Lr,lpr),e(Lr,on),e(on,ipr),e(on,m7e),e(m7e,dpr),e(on,cpr),e(on,g7e),e(g7e,fpr),e(on,mpr),e(on,h7e),e(h7e,gpr),e(on,hpr),e(Lr,ppr),e(Lr,rn),e(rn,uM),e(uM,p7e),e(p7e,upr),e(uM,_pr),e(uM,tQ),e(tQ,bpr),e(uM,vpr),e(rn,Fpr),e(rn,_M),e(_M,u7e),e(u7e,Tpr),e(_M,Mpr),e(_M,aQ),e(aQ,Epr),e(_M,Cpr),e(rn,wpr),e(rn,bM),e(bM,_7e),e(_7e,Apr),e(bM,ypr),e(bM,nQ),e(nQ,Lpr),e(bM,xpr),e(rn,$pr),e(rn,vM),e(vM,b7e),e(b7e,kpr),e(vM,Spr),e(vM,sQ),e(sQ,Rpr),e(vM,Ppr),e(Lr,Bpr),M(FM,Lr,null),b(f,Nqe,_),b(f,Kd,_),e(Kd,TM),e(TM,v7e),M(i8,v7e,null),e(Kd,Ipr),e(Kd,F7e),e(F7e,qpr),b(f,jqe,_),b(f,or,_),M(d8,or,null),e(or,Npr),e(or,Zd),e(Zd,jpr),e(Zd,lQ),e(lQ,Dpr),e(Zd,Gpr),e(Zd,iQ),e(iQ,Opr),e(Zd,Vpr),e(or,Xpr),e(or,c8),e(c8,zpr),e(c8,T7e),e(T7e,Wpr),e(c8,Qpr),e(or,Hpr),e(or,kt),M(f8,kt,null),e(kt,Upr),e(kt,M7e),e(M7e,Jpr),e(kt,Ypr),e(kt,ec),e(ec,Kpr),e(ec,E7e),e(E7e,Zpr),e(ec,eur),e(ec,dQ),e(dQ,our),e(ec,rur),e(kt,tur),M(MM,kt,null),e(or,aur),e(or,xr),M(m8,xr,null),e(xr,nur),e(xr,C7e),e(C7e,sur),e(xr,lur),e(xr,tn),e(tn,iur),e(tn,w7e),e(w7e,dur),e(tn,cur),e(tn,A7e),e(A7e,fur),e(tn,mur),e(tn,y7e),e(y7e,gur),e(tn,hur),e(xr,pur),e(xr,ie),e(ie,EM),e(EM,L7e),e(L7e,uur),e(EM,_ur),e(EM,cQ),e(cQ,bur),e(EM,vur),e(ie,Fur),e(ie,CM),e(CM,x7e),e(x7e,Tur),e(CM,Mur),e(CM,fQ),e(fQ,Eur),e(CM,Cur),e(ie,wur),e(ie,wM),e(wM,$7e),e($7e,Aur),e(wM,yur),e(wM,mQ),e(mQ,Lur),e(wM,xur),e(ie,$ur),e(ie,AM),e(AM,k7e),e(k7e,kur),e(AM,Sur),e(AM,gQ),e(gQ,Rur),e(AM,Pur),e(ie,Bur),e(ie,yM),e(yM,S7e),e(S7e,Iur),e(yM,qur),e(yM,hQ),e(hQ,Nur),e(yM,jur),e(ie,Dur),e(ie,LM),e(LM,R7e),e(R7e,Gur),e(LM,Our),e(LM,pQ),e(pQ,Vur),e(LM,Xur),e(ie,zur),e(ie,xM),e(xM,P7e),e(P7e,Wur),e(xM,Qur),e(xM,uQ),e(uQ,Hur),e(xM,Uur),e(ie,Jur),e(ie,$M),e($M,B7e),e(B7e,Yur),e($M,Kur),e($M,_Q),e(_Q,Zur),e($M,e_r),e(ie,o_r),e(ie,kM),e(kM,I7e),e(I7e,r_r),e(kM,t_r),e(kM,bQ),e(bQ,a_r),e(kM,n_r),e(ie,s_r),e(ie,SM),e(SM,q7e),e(q7e,l_r),e(SM,i_r),e(SM,vQ),e(vQ,d_r),e(SM,c_r),e(ie,f_r),e(ie,RM),e(RM,N7e),e(N7e,m_r),e(RM,g_r),e(RM,FQ),e(FQ,h_r),e(RM,p_r),e(ie,u_r),e(ie,PM),e(PM,j7e),e(j7e,__r),e(PM,b_r),e(PM,TQ),e(TQ,v_r),e(PM,F_r),e(ie,T_r),e(ie,BM),e(BM,D7e),e(D7e,M_r),e(BM,E_r),e(BM,MQ),e(MQ,C_r),e(BM,w_r),e(ie,A_r),e(ie,IM),e(IM,G7e),e(G7e,y_r),e(IM,L_r),e(IM,EQ),e(EQ,x_r),e(IM,$_r),e(ie,k_r),e(ie,qM),e(qM,O7e),e(O7e,S_r),e(qM,R_r),e(qM,CQ),e(CQ,P_r),e(qM,B_r),e(ie,I_r),e(ie,NM),e(NM,V7e),e(V7e,q_r),e(NM,N_r),e(NM,wQ),e(wQ,j_r),e(NM,D_r),e(ie,G_r),e(ie,jM),e(jM,X7e),e(X7e,O_r),e(jM,V_r),e(jM,AQ),e(AQ,X_r),e(jM,z_r),e(ie,W_r),e(ie,DM),e(DM,z7e),e(z7e,Q_r),e(DM,H_r),e(DM,yQ),e(yQ,U_r),e(DM,J_r),e(ie,Y_r),e(ie,GM),e(GM,W7e),e(W7e,K_r),e(GM,Z_r),e(GM,LQ),e(LQ,e2r),e(GM,o2r),e(ie,r2r),e(ie,OM),e(OM,Q7e),e(Q7e,t2r),e(OM,a2r),e(OM,xQ),e(xQ,n2r),e(OM,s2r),e(xr,l2r),M(VM,xr,null),b(f,Dqe,_),b(f,oc,_),e(oc,XM),e(XM,H7e),M(g8,H7e,null),e(oc,i2r),e(oc,U7e),e(U7e,d2r),b(f,Gqe,_),b(f,rr,_),M(h8,rr,null),e(rr,c2r),e(rr,rc),e(rc,f2r),e(rc,$Q),e($Q,m2r),e(rc,g2r),e(rc,kQ),e(kQ,h2r),e(rc,p2r),e(rr,u2r),e(rr,p8),e(p8,_2r),e(p8,J7e),e(J7e,b2r),e(p8,v2r),e(rr,F2r),e(rr,St),M(u8,St,null),e(St,T2r),e(St,Y7e),e(Y7e,M2r),e(St,E2r),e(St,tc),e(tc,C2r),e(tc,K7e),e(K7e,w2r),e(tc,A2r),e(tc,SQ),e(SQ,y2r),e(tc,L2r),e(St,x2r),M(zM,St,null),e(rr,$2r),e(rr,$r),M(_8,$r,null),e($r,k2r),e($r,Z7e),e(Z7e,S2r),e($r,R2r),e($r,an),e(an,P2r),e(an,ebe),e(ebe,B2r),e(an,I2r),e(an,obe),e(obe,q2r),e(an,N2r),e(an,rbe),e(rbe,j2r),e(an,D2r),e($r,G2r),e($r,ye),e(ye,WM),e(WM,tbe),e(tbe,O2r),e(WM,V2r),e(WM,RQ),e(RQ,X2r),e(WM,z2r),e(ye,W2r),e(ye,QM),e(QM,abe),e(abe,Q2r),e(QM,H2r),e(QM,PQ),e(PQ,U2r),e(QM,J2r),e(ye,Y2r),e(ye,HM),e(HM,nbe),e(nbe,K2r),e(HM,Z2r),e(HM,BQ),e(BQ,e1r),e(HM,o1r),e(ye,r1r),e(ye,UM),e(UM,sbe),e(sbe,t1r),e(UM,a1r),e(UM,IQ),e(IQ,n1r),e(UM,s1r),e(ye,l1r),e(ye,JM),e(JM,lbe),e(lbe,i1r),e(JM,d1r),e(JM,qQ),e(qQ,c1r),e(JM,f1r),e(ye,m1r),e(ye,YM),e(YM,ibe),e(ibe,g1r),e(YM,h1r),e(YM,NQ),e(NQ,p1r),e(YM,u1r),e(ye,_1r),e(ye,KM),e(KM,dbe),e(dbe,b1r),e(KM,v1r),e(KM,jQ),e(jQ,F1r),e(KM,T1r),e(ye,M1r),e(ye,ZM),e(ZM,cbe),e(cbe,E1r),e(ZM,C1r),e(ZM,DQ),e(DQ,w1r),e(ZM,A1r),e(ye,y1r),e(ye,e4),e(e4,fbe),e(fbe,L1r),e(e4,x1r),e(e4,GQ),e(GQ,$1r),e(e4,k1r),e(ye,S1r),e(ye,o4),e(o4,mbe),e(mbe,R1r),e(o4,P1r),e(o4,OQ),e(OQ,B1r),e(o4,I1r),e($r,q1r),M(r4,$r,null),b(f,Oqe,_),b(f,ac,_),e(ac,t4),e(t4,gbe),M(b8,gbe,null),e(ac,N1r),e(ac,hbe),e(hbe,j1r),b(f,Vqe,_),b(f,tr,_),M(v8,tr,null),e(tr,D1r),e(tr,nc),e(nc,G1r),e(nc,VQ),e(VQ,O1r),e(nc,V1r),e(nc,XQ),e(XQ,X1r),e(nc,z1r),e(tr,W1r),e(tr,F8),e(F8,Q1r),e(F8,pbe),e(pbe,H1r),e(F8,U1r),e(tr,J1r),e(tr,Rt),M(T8,Rt,null),e(Rt,Y1r),e(Rt,ube),e(ube,K1r),e(Rt,Z1r),e(Rt,sc),e(sc,e7r),e(sc,_be),e(_be,o7r),e(sc,r7r),e(sc,zQ),e(zQ,t7r),e(sc,a7r),e(Rt,n7r),M(a4,Rt,null),e(tr,s7r),e(tr,kr),M(M8,kr,null),e(kr,l7r),e(kr,bbe),e(bbe,i7r),e(kr,d7r),e(kr,nn),e(nn,c7r),e(nn,vbe),e(vbe,f7r),e(nn,m7r),e(nn,Fbe),e(Fbe,g7r),e(nn,h7r),e(nn,Tbe),e(Tbe,p7r),e(nn,u7r),e(kr,_7r),e(kr,ee),e(ee,n4),e(n4,Mbe),e(Mbe,b7r),e(n4,v7r),e(n4,WQ),e(WQ,F7r),e(n4,T7r),e(ee,M7r),e(ee,s4),e(s4,Ebe),e(Ebe,E7r),e(s4,C7r),e(s4,QQ),e(QQ,w7r),e(s4,A7r),e(ee,y7r),e(ee,l4),e(l4,Cbe),e(Cbe,L7r),e(l4,x7r),e(l4,HQ),e(HQ,$7r),e(l4,k7r),e(ee,S7r),e(ee,i4),e(i4,wbe),e(wbe,R7r),e(i4,P7r),e(i4,UQ),e(UQ,B7r),e(i4,I7r),e(ee,q7r),e(ee,d4),e(d4,Abe),e(Abe,N7r),e(d4,j7r),e(d4,JQ),e(JQ,D7r),e(d4,G7r),e(ee,O7r),e(ee,c4),e(c4,ybe),e(ybe,V7r),e(c4,X7r),e(c4,YQ),e(YQ,z7r),e(c4,W7r),e(ee,Q7r),e(ee,f4),e(f4,Lbe),e(Lbe,H7r),e(f4,U7r),e(f4,KQ),e(KQ,J7r),e(f4,Y7r),e(ee,K7r),e(ee,m4),e(m4,xbe),e(xbe,Z7r),e(m4,ebr),e(m4,ZQ),e(ZQ,obr),e(m4,rbr),e(ee,tbr),e(ee,g4),e(g4,$be),e($be,abr),e(g4,nbr),e(g4,eH),e(eH,sbr),e(g4,lbr),e(ee,ibr),e(ee,h4),e(h4,kbe),e(kbe,dbr),e(h4,cbr),e(h4,oH),e(oH,fbr),e(h4,mbr),e(ee,gbr),e(ee,p4),e(p4,Sbe),e(Sbe,hbr),e(p4,pbr),e(p4,rH),e(rH,ubr),e(p4,_br),e(ee,bbr),e(ee,u4),e(u4,Rbe),e(Rbe,vbr),e(u4,Fbr),e(u4,tH),e(tH,Tbr),e(u4,Mbr),e(ee,Ebr),e(ee,_4),e(_4,Pbe),e(Pbe,Cbr),e(_4,wbr),e(_4,aH),e(aH,Abr),e(_4,ybr),e(ee,Lbr),e(ee,b4),e(b4,Bbe),e(Bbe,xbr),e(b4,$br),e(b4,nH),e(nH,kbr),e(b4,Sbr),e(ee,Rbr),e(ee,v4),e(v4,Ibe),e(Ibe,Pbr),e(v4,Bbr),e(v4,sH),e(sH,Ibr),e(v4,qbr),e(ee,Nbr),e(ee,F4),e(F4,qbe),e(qbe,jbr),e(F4,Dbr),e(F4,lH),e(lH,Gbr),e(F4,Obr),e(ee,Vbr),e(ee,T4),e(T4,Nbe),e(Nbe,Xbr),e(T4,zbr),e(T4,iH),e(iH,Wbr),e(T4,Qbr),e(ee,Hbr),e(ee,M4),e(M4,jbe),e(jbe,Ubr),e(M4,Jbr),e(M4,dH),e(dH,Ybr),e(M4,Kbr),e(ee,Zbr),e(ee,E4),e(E4,Dbe),e(Dbe,e5r),e(E4,o5r),e(E4,cH),e(cH,r5r),e(E4,t5r),e(ee,a5r),e(ee,C4),e(C4,Gbe),e(Gbe,n5r),e(C4,s5r),e(C4,fH),e(fH,l5r),e(C4,i5r),e(ee,d5r),e(ee,w4),e(w4,Obe),e(Obe,c5r),e(w4,f5r),e(w4,mH),e(mH,m5r),e(w4,g5r),e(ee,h5r),e(ee,A4),e(A4,Vbe),e(Vbe,p5r),e(A4,u5r),e(A4,gH),e(gH,_5r),e(A4,b5r),e(ee,v5r),e(ee,y4),e(y4,Xbe),e(Xbe,F5r),e(y4,T5r),e(y4,hH),e(hH,M5r),e(y4,E5r),e(ee,C5r),e(ee,L4),e(L4,zbe),e(zbe,w5r),e(L4,A5r),e(L4,pH),e(pH,y5r),e(L4,L5r),e(ee,x5r),e(ee,x4),e(x4,Wbe),e(Wbe,$5r),e(x4,k5r),e(x4,uH),e(uH,S5r),e(x4,R5r),e(ee,P5r),e(ee,$4),e($4,Qbe),e(Qbe,B5r),e($4,I5r),e($4,_H),e(_H,q5r),e($4,N5r),e(kr,j5r),M(k4,kr,null),b(f,Xqe,_),b(f,lc,_),e(lc,S4),e(S4,Hbe),M(E8,Hbe,null),e(lc,D5r),e(lc,Ube),e(Ube,G5r),b(f,zqe,_),b(f,ar,_),M(C8,ar,null),e(ar,O5r),e(ar,ic),e(ic,V5r),e(ic,bH),e(bH,X5r),e(ic,z5r),e(ic,vH),e(vH,W5r),e(ic,Q5r),e(ar,H5r),e(ar,w8),e(w8,U5r),e(w8,Jbe),e(Jbe,J5r),e(w8,Y5r),e(ar,K5r),e(ar,Pt),M(A8,Pt,null),e(Pt,Z5r),e(Pt,Ybe),e(Ybe,evr),e(Pt,ovr),e(Pt,dc),e(dc,rvr),e(dc,Kbe),e(Kbe,tvr),e(dc,avr),e(dc,FH),e(FH,nvr),e(dc,svr),e(Pt,lvr),M(R4,Pt,null),e(ar,ivr),e(ar,Sr),M(y8,Sr,null),e(Sr,dvr),e(Sr,Zbe),e(Zbe,cvr),e(Sr,fvr),e(Sr,sn),e(sn,mvr),e(sn,e5e),e(e5e,gvr),e(sn,hvr),e(sn,o5e),e(o5e,pvr),e(sn,uvr),e(sn,r5e),e(r5e,_vr),e(sn,bvr),e(Sr,vvr),e(Sr,he),e(he,P4),e(P4,t5e),e(t5e,Fvr),e(P4,Tvr),e(P4,TH),e(TH,Mvr),e(P4,Evr),e(he,Cvr),e(he,B4),e(B4,a5e),e(a5e,wvr),e(B4,Avr),e(B4,MH),e(MH,yvr),e(B4,Lvr),e(he,xvr),e(he,I4),e(I4,n5e),e(n5e,$vr),e(I4,kvr),e(I4,EH),e(EH,Svr),e(I4,Rvr),e(he,Pvr),e(he,q4),e(q4,s5e),e(s5e,Bvr),e(q4,Ivr),e(q4,CH),e(CH,qvr),e(q4,Nvr),e(he,jvr),e(he,N4),e(N4,l5e),e(l5e,Dvr),e(N4,Gvr),e(N4,wH),e(wH,Ovr),e(N4,Vvr),e(he,Xvr),e(he,j4),e(j4,i5e),e(i5e,zvr),e(j4,Wvr),e(j4,AH),e(AH,Qvr),e(j4,Hvr),e(he,Uvr),e(he,D4),e(D4,d5e),e(d5e,Jvr),e(D4,Yvr),e(D4,yH),e(yH,Kvr),e(D4,Zvr),e(he,eFr),e(he,G4),e(G4,c5e),e(c5e,oFr),e(G4,rFr),e(G4,LH),e(LH,tFr),e(G4,aFr),e(he,nFr),e(he,O4),e(O4,f5e),e(f5e,sFr),e(O4,lFr),e(O4,xH),e(xH,iFr),e(O4,dFr),e(he,cFr),e(he,V4),e(V4,m5e),e(m5e,fFr),e(V4,mFr),e(V4,$H),e($H,gFr),e(V4,hFr),e(he,pFr),e(he,X4),e(X4,g5e),e(g5e,uFr),e(X4,_Fr),e(X4,kH),e(kH,bFr),e(X4,vFr),e(he,FFr),e(he,z4),e(z4,h5e),e(h5e,TFr),e(z4,MFr),e(z4,SH),e(SH,EFr),e(z4,CFr),e(he,wFr),e(he,W4),e(W4,p5e),e(p5e,AFr),e(W4,yFr),e(W4,RH),e(RH,LFr),e(W4,xFr),e(he,$Fr),e(he,Q4),e(Q4,u5e),e(u5e,kFr),e(Q4,SFr),e(Q4,PH),e(PH,RFr),e(Q4,PFr),e(he,BFr),e(he,H4),e(H4,_5e),e(_5e,IFr),e(H4,qFr),e(H4,BH),e(BH,NFr),e(H4,jFr),e(he,DFr),e(he,U4),e(U4,b5e),e(b5e,GFr),e(U4,OFr),e(U4,IH),e(IH,VFr),e(U4,XFr),e(he,zFr),e(he,J4),e(J4,v5e),e(v5e,WFr),e(J4,QFr),e(J4,qH),e(qH,HFr),e(J4,UFr),e(Sr,JFr),M(Y4,Sr,null),b(f,Wqe,_),b(f,cc,_),e(cc,K4),e(K4,F5e),M(L8,F5e,null),e(cc,YFr),e(cc,T5e),e(T5e,KFr),b(f,Qqe,_),b(f,nr,_),M(x8,nr,null),e(nr,ZFr),e(nr,fc),e(fc,eTr),e(fc,NH),e(NH,oTr),e(fc,rTr),e(fc,jH),e(jH,tTr),e(fc,aTr),e(nr,nTr),e(nr,$8),e($8,sTr),e($8,M5e),e(M5e,lTr),e($8,iTr),e(nr,dTr),e(nr,Bt),M(k8,Bt,null),e(Bt,cTr),e(Bt,E5e),e(E5e,fTr),e(Bt,mTr),e(Bt,mc),e(mc,gTr),e(mc,C5e),e(C5e,hTr),e(mc,pTr),e(mc,DH),e(DH,uTr),e(mc,_Tr),e(Bt,bTr),M(Z4,Bt,null),e(nr,vTr),e(nr,Rr),M(S8,Rr,null),e(Rr,FTr),e(Rr,w5e),e(w5e,TTr),e(Rr,MTr),e(Rr,ln),e(ln,ETr),e(ln,A5e),e(A5e,CTr),e(ln,wTr),e(ln,y5e),e(y5e,ATr),e(ln,yTr),e(ln,L5e),e(L5e,LTr),e(ln,xTr),e(Rr,$Tr),e(Rr,R8),e(R8,eE),e(eE,x5e),e(x5e,kTr),e(eE,STr),e(eE,GH),e(GH,RTr),e(eE,PTr),e(R8,BTr),e(R8,oE),e(oE,$5e),e($5e,ITr),e(oE,qTr),e(oE,OH),e(OH,NTr),e(oE,jTr),e(Rr,DTr),M(rE,Rr,null),b(f,Hqe,_),b(f,gc,_),e(gc,tE),e(tE,k5e),M(P8,k5e,null),e(gc,GTr),e(gc,S5e),e(S5e,OTr),b(f,Uqe,_),b(f,sr,_),M(B8,sr,null),e(sr,VTr),e(sr,hc),e(hc,XTr),e(hc,VH),e(VH,zTr),e(hc,WTr),e(hc,XH),e(XH,QTr),e(hc,HTr),e(sr,UTr),e(sr,I8),e(I8,JTr),e(I8,R5e),e(R5e,YTr),e(I8,KTr),e(sr,ZTr),e(sr,It),M(q8,It,null),e(It,eMr),e(It,P5e),e(P5e,oMr),e(It,rMr),e(It,pc),e(pc,tMr),e(pc,B5e),e(B5e,aMr),e(pc,nMr),e(pc,zH),e(zH,sMr),e(pc,lMr),e(It,iMr),M(aE,It,null),e(sr,dMr),e(sr,Pr),M(N8,Pr,null),e(Pr,cMr),e(Pr,I5e),e(I5e,fMr),e(Pr,mMr),e(Pr,dn),e(dn,gMr),e(dn,q5e),e(q5e,hMr),e(dn,pMr),e(dn,N5e),e(N5e,uMr),e(dn,_Mr),e(dn,j5e),e(j5e,bMr),e(dn,vMr),e(Pr,FMr),e(Pr,D5e),e(D5e,nE),e(nE,G5e),e(G5e,TMr),e(nE,MMr),e(nE,WH),e(WH,EMr),e(nE,CMr),e(Pr,wMr),M(sE,Pr,null),b(f,Jqe,_),b(f,uc,_),e(uc,lE),e(lE,O5e),M(j8,O5e,null),e(uc,AMr),e(uc,V5e),e(V5e,yMr),b(f,Yqe,_),b(f,lr,_),M(D8,lr,null),e(lr,LMr),e(lr,_c),e(_c,xMr),e(_c,QH),e(QH,$Mr),e(_c,kMr),e(_c,HH),e(HH,SMr),e(_c,RMr),e(lr,PMr),e(lr,G8),e(G8,BMr),e(G8,X5e),e(X5e,IMr),e(G8,qMr),e(lr,NMr),e(lr,qt),M(O8,qt,null),e(qt,jMr),e(qt,z5e),e(z5e,DMr),e(qt,GMr),e(qt,bc),e(bc,OMr),e(bc,W5e),e(W5e,VMr),e(bc,XMr),e(bc,UH),e(UH,zMr),e(bc,WMr),e(qt,QMr),M(iE,qt,null),e(lr,HMr),e(lr,Br),M(V8,Br,null),e(Br,UMr),e(Br,Q5e),e(Q5e,JMr),e(Br,YMr),e(Br,cn),e(cn,KMr),e(cn,H5e),e(H5e,ZMr),e(cn,e4r),e(cn,U5e),e(U5e,o4r),e(cn,r4r),e(cn,J5e),e(J5e,t4r),e(cn,a4r),e(Br,n4r),e(Br,de),e(de,dE),e(dE,Y5e),e(Y5e,s4r),e(dE,l4r),e(dE,JH),e(JH,i4r),e(dE,d4r),e(de,c4r),e(de,cE),e(cE,K5e),e(K5e,f4r),e(cE,m4r),e(cE,YH),e(YH,g4r),e(cE,h4r),e(de,p4r),e(de,fE),e(fE,Z5e),e(Z5e,u4r),e(fE,_4r),e(fE,KH),e(KH,b4r),e(fE,v4r),e(de,F4r),e(de,mE),e(mE,eve),e(eve,T4r),e(mE,M4r),e(mE,ZH),e(ZH,E4r),e(mE,C4r),e(de,w4r),e(de,gE),e(gE,ove),e(ove,A4r),e(gE,y4r),e(gE,eU),e(eU,L4r),e(gE,x4r),e(de,$4r),e(de,hE),e(hE,rve),e(rve,k4r),e(hE,S4r),e(hE,oU),e(oU,R4r),e(hE,P4r),e(de,B4r),e(de,pE),e(pE,tve),e(tve,I4r),e(pE,q4r),e(pE,rU),e(rU,N4r),e(pE,j4r),e(de,D4r),e(de,uE),e(uE,ave),e(ave,G4r),e(uE,O4r),e(uE,tU),e(tU,V4r),e(uE,X4r),e(de,z4r),e(de,_E),e(_E,nve),e(nve,W4r),e(_E,Q4r),e(_E,aU),e(aU,H4r),e(_E,U4r),e(de,J4r),e(de,bE),e(bE,sve),e(sve,Y4r),e(bE,K4r),e(bE,nU),e(nU,Z4r),e(bE,eEr),e(de,oEr),e(de,vE),e(vE,lve),e(lve,rEr),e(vE,tEr),e(vE,sU),e(sU,aEr),e(vE,nEr),e(de,sEr),e(de,FE),e(FE,ive),e(ive,lEr),e(FE,iEr),e(FE,lU),e(lU,dEr),e(FE,cEr),e(de,fEr),e(de,TE),e(TE,dve),e(dve,mEr),e(TE,gEr),e(TE,iU),e(iU,hEr),e(TE,pEr),e(de,uEr),e(de,ME),e(ME,cve),e(cve,_Er),e(ME,bEr),e(ME,dU),e(dU,vEr),e(ME,FEr),e(de,TEr),e(de,EE),e(EE,fve),e(fve,MEr),e(EE,EEr),e(EE,cU),e(cU,CEr),e(EE,wEr),e(de,AEr),e(de,CE),e(CE,mve),e(mve,yEr),e(CE,LEr),e(CE,fU),e(fU,xEr),e(CE,$Er),e(de,kEr),e(de,wE),e(wE,gve),e(gve,SEr),e(wE,REr),e(wE,mU),e(mU,PEr),e(wE,BEr),e(de,IEr),e(de,AE),e(AE,hve),e(hve,qEr),e(AE,NEr),e(AE,gU),e(gU,jEr),e(AE,DEr),e(de,GEr),e(de,yE),e(yE,pve),e(pve,OEr),e(yE,VEr),e(yE,hU),e(hU,XEr),e(yE,zEr),e(de,WEr),e(de,LE),e(LE,uve),e(uve,QEr),e(LE,HEr),e(LE,pU),e(pU,UEr),e(LE,JEr),e(Br,YEr),M(xE,Br,null),b(f,Kqe,_),b(f,vc,_),e(vc,$E),e($E,_ve),M(X8,_ve,null),e(vc,KEr),e(vc,bve),e(bve,ZEr),b(f,Zqe,_),b(f,ir,_),M(z8,ir,null),e(ir,eCr),e(ir,Fc),e(Fc,oCr),e(Fc,uU),e(uU,rCr),e(Fc,tCr),e(Fc,_U),e(_U,aCr),e(Fc,nCr),e(ir,sCr),e(ir,W8),e(W8,lCr),e(W8,vve),e(vve,iCr),e(W8,dCr),e(ir,cCr),e(ir,Nt),M(Q8,Nt,null),e(Nt,fCr),e(Nt,Fve),e(Fve,mCr),e(Nt,gCr),e(Nt,Tc),e(Tc,hCr),e(Tc,Tve),e(Tve,pCr),e(Tc,uCr),e(Tc,bU),e(bU,_Cr),e(Tc,bCr),e(Nt,vCr),M(kE,Nt,null),e(ir,FCr),e(ir,Ir),M(H8,Ir,null),e(Ir,TCr),e(Ir,Mve),e(Mve,MCr),e(Ir,ECr),e(Ir,fn),e(fn,CCr),e(fn,Eve),e(Eve,wCr),e(fn,ACr),e(fn,Cve),e(Cve,yCr),e(fn,LCr),e(fn,wve),e(wve,xCr),e(fn,$Cr),e(Ir,kCr),e(Ir,ce),e(ce,SE),e(SE,Ave),e(Ave,SCr),e(SE,RCr),e(SE,vU),e(vU,PCr),e(SE,BCr),e(ce,ICr),e(ce,RE),e(RE,yve),e(yve,qCr),e(RE,NCr),e(RE,FU),e(FU,jCr),e(RE,DCr),e(ce,GCr),e(ce,PE),e(PE,Lve),e(Lve,OCr),e(PE,VCr),e(PE,TU),e(TU,XCr),e(PE,zCr),e(ce,WCr),e(ce,BE),e(BE,xve),e(xve,QCr),e(BE,HCr),e(BE,MU),e(MU,UCr),e(BE,JCr),e(ce,YCr),e(ce,IE),e(IE,$ve),e($ve,KCr),e(IE,ZCr),e(IE,EU),e(EU,e3r),e(IE,o3r),e(ce,r3r),e(ce,qE),e(qE,kve),e(kve,t3r),e(qE,a3r),e(qE,CU),e(CU,n3r),e(qE,s3r),e(ce,l3r),e(ce,NE),e(NE,Sve),e(Sve,i3r),e(NE,d3r),e(NE,wU),e(wU,c3r),e(NE,f3r),e(ce,m3r),e(ce,jE),e(jE,Rve),e(Rve,g3r),e(jE,h3r),e(jE,AU),e(AU,p3r),e(jE,u3r),e(ce,_3r),e(ce,DE),e(DE,Pve),e(Pve,b3r),e(DE,v3r),e(DE,yU),e(yU,F3r),e(DE,T3r),e(ce,M3r),e(ce,GE),e(GE,Bve),e(Bve,E3r),e(GE,C3r),e(GE,LU),e(LU,w3r),e(GE,A3r),e(ce,y3r),e(ce,OE),e(OE,Ive),e(Ive,L3r),e(OE,x3r),e(OE,xU),e(xU,$3r),e(OE,k3r),e(ce,S3r),e(ce,VE),e(VE,qve),e(qve,R3r),e(VE,P3r),e(VE,$U),e($U,B3r),e(VE,I3r),e(ce,q3r),e(ce,XE),e(XE,Nve),e(Nve,N3r),e(XE,j3r),e(XE,kU),e(kU,D3r),e(XE,G3r),e(ce,O3r),e(ce,zE),e(zE,jve),e(jve,V3r),e(zE,X3r),e(zE,SU),e(SU,z3r),e(zE,W3r),e(ce,Q3r),e(ce,WE),e(WE,Dve),e(Dve,H3r),e(WE,U3r),e(WE,RU),e(RU,J3r),e(WE,Y3r),e(ce,K3r),e(ce,QE),e(QE,Gve),e(Gve,Z3r),e(QE,ewr),e(QE,PU),e(PU,owr),e(QE,rwr),e(ce,twr),e(ce,HE),e(HE,Ove),e(Ove,awr),e(HE,nwr),e(HE,BU),e(BU,swr),e(HE,lwr),e(ce,iwr),e(ce,UE),e(UE,Vve),e(Vve,dwr),e(UE,cwr),e(UE,IU),e(IU,fwr),e(UE,mwr),e(ce,gwr),e(ce,JE),e(JE,Xve),e(Xve,hwr),e(JE,pwr),e(JE,qU),e(qU,uwr),e(JE,_wr),e(ce,bwr),e(ce,YE),e(YE,zve),e(zve,vwr),e(YE,Fwr),e(YE,NU),e(NU,Twr),e(YE,Mwr),e(Ir,Ewr),M(KE,Ir,null),b(f,eNe,_),b(f,Mc,_),e(Mc,ZE),e(ZE,Wve),M(U8,Wve,null),e(Mc,Cwr),e(Mc,Qve),e(Qve,wwr),b(f,oNe,_),b(f,dr,_),M(J8,dr,null),e(dr,Awr),e(dr,Ec),e(Ec,ywr),e(Ec,jU),e(jU,Lwr),e(Ec,xwr),e(Ec,DU),e(DU,$wr),e(Ec,kwr),e(dr,Swr),e(dr,Y8),e(Y8,Rwr),e(Y8,Hve),e(Hve,Pwr),e(Y8,Bwr),e(dr,Iwr),e(dr,jt),M(K8,jt,null),e(jt,qwr),e(jt,Uve),e(Uve,Nwr),e(jt,jwr),e(jt,Cc),e(Cc,Dwr),e(Cc,Jve),e(Jve,Gwr),e(Cc,Owr),e(Cc,GU),e(GU,Vwr),e(Cc,Xwr),e(jt,zwr),M(eC,jt,null),e(dr,Wwr),e(dr,qr),M(Z8,qr,null),e(qr,Qwr),e(qr,Yve),e(Yve,Hwr),e(qr,Uwr),e(qr,mn),e(mn,Jwr),e(mn,Kve),e(Kve,Ywr),e(mn,Kwr),e(mn,Zve),e(Zve,Zwr),e(mn,eAr),e(mn,eFe),e(eFe,oAr),e(mn,rAr),e(qr,tAr),e(qr,oFe),e(oFe,oC),e(oC,rFe),e(rFe,aAr),e(oC,nAr),e(oC,OU),e(OU,sAr),e(oC,lAr),e(qr,iAr),M(rC,qr,null),b(f,rNe,_),b(f,wc,_),e(wc,tC),e(tC,tFe),M(ex,tFe,null),e(wc,dAr),e(wc,aFe),e(aFe,cAr),b(f,tNe,_),b(f,cr,_),M(ox,cr,null),e(cr,fAr),e(cr,Ac),e(Ac,mAr),e(Ac,VU),e(VU,gAr),e(Ac,hAr),e(Ac,XU),e(XU,pAr),e(Ac,uAr),e(cr,_Ar),e(cr,rx),e(rx,bAr),e(rx,nFe),e(nFe,vAr),e(rx,FAr),e(cr,TAr),e(cr,Dt),M(tx,Dt,null),e(Dt,MAr),e(Dt,sFe),e(sFe,EAr),e(Dt,CAr),e(Dt,yc),e(yc,wAr),e(yc,lFe),e(lFe,AAr),e(yc,yAr),e(yc,zU),e(zU,LAr),e(yc,xAr),e(Dt,$Ar),M(aC,Dt,null),e(cr,kAr),e(cr,Nr),M(ax,Nr,null),e(Nr,SAr),e(Nr,iFe),e(iFe,RAr),e(Nr,PAr),e(Nr,gn),e(gn,BAr),e(gn,dFe),e(dFe,IAr),e(gn,qAr),e(gn,cFe),e(cFe,NAr),e(gn,jAr),e(gn,fFe),e(fFe,DAr),e(gn,GAr),e(Nr,OAr),e(Nr,mFe),e(mFe,nC),e(nC,gFe),e(gFe,VAr),e(nC,XAr),e(nC,WU),e(WU,zAr),e(nC,WAr),e(Nr,QAr),M(sC,Nr,null),b(f,aNe,_),b(f,Lc,_),e(Lc,lC),e(lC,hFe),M(nx,hFe,null),e(Lc,HAr),e(Lc,pFe),e(pFe,UAr),b(f,nNe,_),b(f,fr,_),M(sx,fr,null),e(fr,JAr),e(fr,xc),e(xc,YAr),e(xc,QU),e(QU,KAr),e(xc,ZAr),e(xc,HU),e(HU,e6r),e(xc,o6r),e(fr,r6r),e(fr,lx),e(lx,t6r),e(lx,uFe),e(uFe,a6r),e(lx,n6r),e(fr,s6r),e(fr,Gt),M(ix,Gt,null),e(Gt,l6r),e(Gt,_Fe),e(_Fe,i6r),e(Gt,d6r),e(Gt,$c),e($c,c6r),e($c,bFe),e(bFe,f6r),e($c,m6r),e($c,UU),e(UU,g6r),e($c,h6r),e(Gt,p6r),M(iC,Gt,null),e(fr,u6r),e(fr,jr),M(dx,jr,null),e(jr,_6r),e(jr,vFe),e(vFe,b6r),e(jr,v6r),e(jr,hn),e(hn,F6r),e(hn,FFe),e(FFe,T6r),e(hn,M6r),e(hn,TFe),e(TFe,E6r),e(hn,C6r),e(hn,MFe),e(MFe,w6r),e(hn,A6r),e(jr,y6r),e(jr,re),e(re,dC),e(dC,EFe),e(EFe,L6r),e(dC,x6r),e(dC,JU),e(JU,$6r),e(dC,k6r),e(re,S6r),e(re,cC),e(cC,CFe),e(CFe,R6r),e(cC,P6r),e(cC,YU),e(YU,B6r),e(cC,I6r),e(re,q6r),e(re,fC),e(fC,wFe),e(wFe,N6r),e(fC,j6r),e(fC,KU),e(KU,D6r),e(fC,G6r),e(re,O6r),e(re,mC),e(mC,AFe),e(AFe,V6r),e(mC,X6r),e(mC,ZU),e(ZU,z6r),e(mC,W6r),e(re,Q6r),e(re,gC),e(gC,yFe),e(yFe,H6r),e(gC,U6r),e(gC,eJ),e(eJ,J6r),e(gC,Y6r),e(re,K6r),e(re,hC),e(hC,LFe),e(LFe,Z6r),e(hC,e0r),e(hC,oJ),e(oJ,o0r),e(hC,r0r),e(re,t0r),e(re,pC),e(pC,xFe),e(xFe,a0r),e(pC,n0r),e(pC,rJ),e(rJ,s0r),e(pC,l0r),e(re,i0r),e(re,uC),e(uC,$Fe),e($Fe,d0r),e(uC,c0r),e(uC,tJ),e(tJ,f0r),e(uC,m0r),e(re,g0r),e(re,_C),e(_C,kFe),e(kFe,h0r),e(_C,p0r),e(_C,aJ),e(aJ,u0r),e(_C,_0r),e(re,b0r),e(re,bC),e(bC,SFe),e(SFe,v0r),e(bC,F0r),e(bC,nJ),e(nJ,T0r),e(bC,M0r),e(re,E0r),e(re,vC),e(vC,RFe),e(RFe,C0r),e(vC,w0r),e(vC,sJ),e(sJ,A0r),e(vC,y0r),e(re,L0r),e(re,FC),e(FC,PFe),e(PFe,x0r),e(FC,$0r),e(FC,lJ),e(lJ,k0r),e(FC,S0r),e(re,R0r),e(re,TC),e(TC,BFe),e(BFe,P0r),e(TC,B0r),e(TC,iJ),e(iJ,I0r),e(TC,q0r),e(re,N0r),e(re,MC),e(MC,IFe),e(IFe,j0r),e(MC,D0r),e(MC,dJ),e(dJ,G0r),e(MC,O0r),e(re,V0r),e(re,EC),e(EC,qFe),e(qFe,X0r),e(EC,z0r),e(EC,cJ),e(cJ,W0r),e(EC,Q0r),e(re,H0r),e(re,CC),e(CC,NFe),e(NFe,U0r),e(CC,J0r),e(CC,fJ),e(fJ,Y0r),e(CC,K0r),e(re,Z0r),e(re,wC),e(wC,jFe),e(jFe,eyr),e(wC,oyr),e(wC,mJ),e(mJ,ryr),e(wC,tyr),e(re,ayr),e(re,AC),e(AC,DFe),e(DFe,nyr),e(AC,syr),e(AC,gJ),e(gJ,lyr),e(AC,iyr),e(re,dyr),e(re,yC),e(yC,GFe),e(GFe,cyr),e(yC,fyr),e(yC,hJ),e(hJ,myr),e(yC,gyr),e(re,hyr),e(re,LC),e(LC,OFe),e(OFe,pyr),e(LC,uyr),e(LC,pJ),e(pJ,_yr),e(LC,byr),e(re,vyr),e(re,xC),e(xC,VFe),e(VFe,Fyr),e(xC,Tyr),e(xC,uJ),e(uJ,Myr),e(xC,Eyr),e(re,Cyr),e(re,$C),e($C,XFe),e(XFe,wyr),e($C,Ayr),e($C,_J),e(_J,yyr),e($C,Lyr),e(re,xyr),e(re,kC),e(kC,zFe),e(zFe,$yr),e(kC,kyr),e(kC,bJ),e(bJ,Syr),e(kC,Ryr),e(re,Pyr),e(re,SC),e(SC,WFe),e(WFe,Byr),e(SC,Iyr),e(SC,vJ),e(vJ,qyr),e(SC,Nyr),e(re,jyr),e(re,RC),e(RC,QFe),e(QFe,Dyr),e(RC,Gyr),e(RC,FJ),e(FJ,Oyr),e(RC,Vyr),e(jr,Xyr),M(PC,jr,null),b(f,sNe,_),b(f,kc,_),e(kc,BC),e(BC,HFe),M(cx,HFe,null),e(kc,zyr),e(kc,UFe),e(UFe,Wyr),b(f,lNe,_),b(f,mr,_),M(fx,mr,null),e(mr,Qyr),e(mr,Sc),e(Sc,Hyr),e(Sc,TJ),e(TJ,Uyr),e(Sc,Jyr),e(Sc,MJ),e(MJ,Yyr),e(Sc,Kyr),e(mr,Zyr),e(mr,mx),e(mx,eLr),e(mx,JFe),e(JFe,oLr),e(mx,rLr),e(mr,tLr),e(mr,Ot),M(gx,Ot,null),e(Ot,aLr),e(Ot,YFe),e(YFe,nLr),e(Ot,sLr),e(Ot,Rc),e(Rc,lLr),e(Rc,KFe),e(KFe,iLr),e(Rc,dLr),e(Rc,EJ),e(EJ,cLr),e(Rc,fLr),e(Ot,mLr),M(IC,Ot,null),e(mr,gLr),e(mr,Dr),M(hx,Dr,null),e(Dr,hLr),e(Dr,ZFe),e(ZFe,pLr),e(Dr,uLr),e(Dr,pn),e(pn,_Lr),e(pn,eTe),e(eTe,bLr),e(pn,vLr),e(pn,oTe),e(oTe,FLr),e(pn,TLr),e(pn,rTe),e(rTe,MLr),e(pn,ELr),e(Dr,CLr),e(Dr,Re),e(Re,qC),e(qC,tTe),e(tTe,wLr),e(qC,ALr),e(qC,CJ),e(CJ,yLr),e(qC,LLr),e(Re,xLr),e(Re,NC),e(NC,aTe),e(aTe,$Lr),e(NC,kLr),e(NC,wJ),e(wJ,SLr),e(NC,RLr),e(Re,PLr),e(Re,jC),e(jC,nTe),e(nTe,BLr),e(jC,ILr),e(jC,AJ),e(AJ,qLr),e(jC,NLr),e(Re,jLr),e(Re,DC),e(DC,sTe),e(sTe,DLr),e(DC,GLr),e(DC,yJ),e(yJ,OLr),e(DC,VLr),e(Re,XLr),e(Re,GC),e(GC,lTe),e(lTe,zLr),e(GC,WLr),e(GC,LJ),e(LJ,QLr),e(GC,HLr),e(Re,ULr),e(Re,OC),e(OC,iTe),e(iTe,JLr),e(OC,YLr),e(OC,xJ),e(xJ,KLr),e(OC,ZLr),e(Re,e8r),e(Re,VC),e(VC,dTe),e(dTe,o8r),e(VC,r8r),e(VC,$J),e($J,t8r),e(VC,a8r),e(Re,n8r),e(Re,XC),e(XC,cTe),e(cTe,s8r),e(XC,l8r),e(XC,kJ),e(kJ,i8r),e(XC,d8r),e(Re,c8r),e(Re,zC),e(zC,fTe),e(fTe,f8r),e(zC,m8r),e(zC,SJ),e(SJ,g8r),e(zC,h8r),e(Dr,p8r),M(WC,Dr,null),b(f,iNe,_),b(f,Pc,_),e(Pc,QC),e(QC,mTe),M(px,mTe,null),e(Pc,u8r),e(Pc,gTe),e(gTe,_8r),b(f,dNe,_),b(f,gr,_),M(ux,gr,null),e(gr,b8r),e(gr,Bc),e(Bc,v8r),e(Bc,RJ),e(RJ,F8r),e(Bc,T8r),e(Bc,PJ),e(PJ,M8r),e(Bc,E8r),e(gr,C8r),e(gr,_x),e(_x,w8r),e(_x,hTe),e(hTe,A8r),e(_x,y8r),e(gr,L8r),e(gr,Vt),M(bx,Vt,null),e(Vt,x8r),e(Vt,pTe),e(pTe,$8r),e(Vt,k8r),e(Vt,Ic),e(Ic,S8r),e(Ic,uTe),e(uTe,R8r),e(Ic,P8r),e(Ic,BJ),e(BJ,B8r),e(Ic,I8r),e(Vt,q8r),M(HC,Vt,null),e(gr,N8r),e(gr,Gr),M(vx,Gr,null),e(Gr,j8r),e(Gr,_Te),e(_Te,D8r),e(Gr,G8r),e(Gr,un),e(un,O8r),e(un,bTe),e(bTe,V8r),e(un,X8r),e(un,vTe),e(vTe,z8r),e(un,W8r),e(un,FTe),e(FTe,Q8r),e(un,H8r),e(Gr,U8r),e(Gr,Me),e(Me,UC),e(UC,TTe),e(TTe,J8r),e(UC,Y8r),e(UC,IJ),e(IJ,K8r),e(UC,Z8r),e(Me,exr),e(Me,JC),e(JC,MTe),e(MTe,oxr),e(JC,rxr),e(JC,qJ),e(qJ,txr),e(JC,axr),e(Me,nxr),e(Me,YC),e(YC,ETe),e(ETe,sxr),e(YC,lxr),e(YC,NJ),e(NJ,ixr),e(YC,dxr),e(Me,cxr),e(Me,KC),e(KC,CTe),e(CTe,fxr),e(KC,mxr),e(KC,jJ),e(jJ,gxr),e(KC,hxr),e(Me,pxr),e(Me,ZC),e(ZC,wTe),e(wTe,uxr),e(ZC,_xr),e(ZC,DJ),e(DJ,bxr),e(ZC,vxr),e(Me,Fxr),e(Me,e3),e(e3,ATe),e(ATe,Txr),e(e3,Mxr),e(e3,GJ),e(GJ,Exr),e(e3,Cxr),e(Me,wxr),e(Me,o3),e(o3,yTe),e(yTe,Axr),e(o3,yxr),e(o3,OJ),e(OJ,Lxr),e(o3,xxr),e(Me,$xr),e(Me,r3),e(r3,LTe),e(LTe,kxr),e(r3,Sxr),e(r3,VJ),e(VJ,Rxr),e(r3,Pxr),e(Me,Bxr),e(Me,t3),e(t3,xTe),e(xTe,Ixr),e(t3,qxr),e(t3,XJ),e(XJ,Nxr),e(t3,jxr),e(Me,Dxr),e(Me,a3),e(a3,$Te),e($Te,Gxr),e(a3,Oxr),e(a3,zJ),e(zJ,Vxr),e(a3,Xxr),e(Me,zxr),e(Me,n3),e(n3,kTe),e(kTe,Wxr),e(n3,Qxr),e(n3,WJ),e(WJ,Hxr),e(n3,Uxr),e(Me,Jxr),e(Me,s3),e(s3,STe),e(STe,Yxr),e(s3,Kxr),e(s3,QJ),e(QJ,Zxr),e(s3,e9r),e(Gr,o9r),M(l3,Gr,null),b(f,cNe,_),b(f,qc,_),e(qc,i3),e(i3,RTe),M(Fx,RTe,null),e(qc,r9r),e(qc,PTe),e(PTe,t9r),b(f,fNe,_),b(f,hr,_),M(Tx,hr,null),e(hr,a9r),e(hr,Nc),e(Nc,n9r),e(Nc,HJ),e(HJ,s9r),e(Nc,l9r),e(Nc,UJ),e(UJ,i9r),e(Nc,d9r),e(hr,c9r),e(hr,Mx),e(Mx,f9r),e(Mx,BTe),e(BTe,m9r),e(Mx,g9r),e(hr,h9r),e(hr,Xt),M(Ex,Xt,null),e(Xt,p9r),e(Xt,ITe),e(ITe,u9r),e(Xt,_9r),e(Xt,jc),e(jc,b9r),e(jc,qTe),e(qTe,v9r),e(jc,F9r),e(jc,JJ),e(JJ,T9r),e(jc,M9r),e(Xt,E9r),M(d3,Xt,null),e(hr,C9r),e(hr,Or),M(Cx,Or,null),e(Or,w9r),e(Or,NTe),e(NTe,A9r),e(Or,y9r),e(Or,_n),e(_n,L9r),e(_n,jTe),e(jTe,x9r),e(_n,$9r),e(_n,DTe),e(DTe,k9r),e(_n,S9r),e(_n,GTe),e(GTe,R9r),e(_n,P9r),e(Or,B9r),e(Or,Le),e(Le,c3),e(c3,OTe),e(OTe,I9r),e(c3,q9r),e(c3,YJ),e(YJ,N9r),e(c3,j9r),e(Le,D9r),e(Le,f3),e(f3,VTe),e(VTe,G9r),e(f3,O9r),e(f3,KJ),e(KJ,V9r),e(f3,X9r),e(Le,z9r),e(Le,m3),e(m3,XTe),e(XTe,W9r),e(m3,Q9r),e(m3,ZJ),e(ZJ,H9r),e(m3,U9r),e(Le,J9r),e(Le,g3),e(g3,zTe),e(zTe,Y9r),e(g3,K9r),e(g3,eY),e(eY,Z9r),e(g3,e$r),e(Le,o$r),e(Le,h3),e(h3,WTe),e(WTe,r$r),e(h3,t$r),e(h3,oY),e(oY,a$r),e(h3,n$r),e(Le,s$r),e(Le,p3),e(p3,QTe),e(QTe,l$r),e(p3,i$r),e(p3,rY),e(rY,d$r),e(p3,c$r),e(Le,f$r),e(Le,u3),e(u3,HTe),e(HTe,m$r),e(u3,g$r),e(u3,tY),e(tY,h$r),e(u3,p$r),e(Le,u$r),e(Le,_3),e(_3,UTe),e(UTe,_$r),e(_3,b$r),e(_3,aY),e(aY,v$r),e(_3,F$r),e(Le,T$r),e(Le,b3),e(b3,JTe),e(JTe,M$r),e(b3,E$r),e(b3,nY),e(nY,C$r),e(b3,w$r),e(Le,A$r),e(Le,v3),e(v3,YTe),e(YTe,y$r),e(v3,L$r),e(v3,sY),e(sY,x$r),e(v3,$$r),e(Or,k$r),M(F3,Or,null),b(f,mNe,_),b(f,Dc,_),e(Dc,T3),e(T3,KTe),M(wx,KTe,null),e(Dc,S$r),e(Dc,ZTe),e(ZTe,R$r),b(f,gNe,_),b(f,pr,_),M(Ax,pr,null),e(pr,P$r),e(pr,Gc),e(Gc,B$r),e(Gc,lY),e(lY,I$r),e(Gc,q$r),e(Gc,iY),e(iY,N$r),e(Gc,j$r),e(pr,D$r),e(pr,yx),e(yx,G$r),e(yx,eMe),e(eMe,O$r),e(yx,V$r),e(pr,X$r),e(pr,zt),M(Lx,zt,null),e(zt,z$r),e(zt,oMe),e(oMe,W$r),e(zt,Q$r),e(zt,Oc),e(Oc,H$r),e(Oc,rMe),e(rMe,U$r),e(Oc,J$r),e(Oc,dY),e(dY,Y$r),e(Oc,K$r),e(zt,Z$r),M(M3,zt,null),e(pr,ekr),e(pr,Vr),M(xx,Vr,null),e(Vr,okr),e(Vr,tMe),e(tMe,rkr),e(Vr,tkr),e(Vr,bn),e(bn,akr),e(bn,aMe),e(aMe,nkr),e(bn,skr),e(bn,nMe),e(nMe,lkr),e(bn,ikr),e(bn,sMe),e(sMe,dkr),e(bn,ckr),e(Vr,fkr),e(Vr,Pe),e(Pe,E3),e(E3,lMe),e(lMe,mkr),e(E3,gkr),e(E3,cY),e(cY,hkr),e(E3,pkr),e(Pe,ukr),e(Pe,C3),e(C3,iMe),e(iMe,_kr),e(C3,bkr),e(C3,fY),e(fY,vkr),e(C3,Fkr),e(Pe,Tkr),e(Pe,w3),e(w3,dMe),e(dMe,Mkr),e(w3,Ekr),e(w3,mY),e(mY,Ckr),e(w3,wkr),e(Pe,Akr),e(Pe,A3),e(A3,cMe),e(cMe,ykr),e(A3,Lkr),e(A3,gY),e(gY,xkr),e(A3,$kr),e(Pe,kkr),e(Pe,y3),e(y3,fMe),e(fMe,Skr),e(y3,Rkr),e(y3,hY),e(hY,Pkr),e(y3,Bkr),e(Pe,Ikr),e(Pe,L3),e(L3,mMe),e(mMe,qkr),e(L3,Nkr),e(L3,pY),e(pY,jkr),e(L3,Dkr),e(Pe,Gkr),e(Pe,x3),e(x3,gMe),e(gMe,Okr),e(x3,Vkr),e(x3,uY),e(uY,Xkr),e(x3,zkr),e(Pe,Wkr),e(Pe,$3),e($3,hMe),e(hMe,Qkr),e($3,Hkr),e($3,_Y),e(_Y,Ukr),e($3,Jkr),e(Pe,Ykr),e(Pe,k3),e(k3,pMe),e(pMe,Kkr),e(k3,Zkr),e(k3,bY),e(bY,eSr),e(k3,oSr),e(Vr,rSr),M(S3,Vr,null),b(f,hNe,_),b(f,Vc,_),e(Vc,R3),e(R3,uMe),M($x,uMe,null),e(Vc,tSr),e(Vc,_Me),e(_Me,aSr),b(f,pNe,_),b(f,ur,_),M(kx,ur,null),e(ur,nSr),e(ur,Xc),e(Xc,sSr),e(Xc,vY),e(vY,lSr),e(Xc,iSr),e(Xc,FY),e(FY,dSr),e(Xc,cSr),e(ur,fSr),e(ur,Sx),e(Sx,mSr),e(Sx,bMe),e(bMe,gSr),e(Sx,hSr),e(ur,pSr),e(ur,Wt),M(Rx,Wt,null),e(Wt,uSr),e(Wt,vMe),e(vMe,_Sr),e(Wt,bSr),e(Wt,zc),e(zc,vSr),e(zc,FMe),e(FMe,FSr),e(zc,TSr),e(zc,TY),e(TY,MSr),e(zc,ESr),e(Wt,CSr),M(P3,Wt,null),e(ur,wSr),e(ur,Xr),M(Px,Xr,null),e(Xr,ASr),e(Xr,TMe),e(TMe,ySr),e(Xr,LSr),e(Xr,vn),e(vn,xSr),e(vn,MMe),e(MMe,$Sr),e(vn,kSr),e(vn,EMe),e(EMe,SSr),e(vn,RSr),e(vn,CMe),e(CMe,PSr),e(vn,BSr),e(Xr,ISr),e(Xr,xe),e(xe,B3),e(B3,wMe),e(wMe,qSr),e(B3,NSr),e(B3,MY),e(MY,jSr),e(B3,DSr),e(xe,GSr),e(xe,I3),e(I3,AMe),e(AMe,OSr),e(I3,VSr),e(I3,EY),e(EY,XSr),e(I3,zSr),e(xe,WSr),e(xe,q3),e(q3,yMe),e(yMe,QSr),e(q3,HSr),e(q3,CY),e(CY,USr),e(q3,JSr),e(xe,YSr),e(xe,N3),e(N3,LMe),e(LMe,KSr),e(N3,ZSr),e(N3,wY),e(wY,eRr),e(N3,oRr),e(xe,rRr),e(xe,j3),e(j3,xMe),e(xMe,tRr),e(j3,aRr),e(j3,AY),e(AY,nRr),e(j3,sRr),e(xe,lRr),e(xe,D3),e(D3,$Me),e($Me,iRr),e(D3,dRr),e(D3,yY),e(yY,cRr),e(D3,fRr),e(xe,mRr),e(xe,G3),e(G3,kMe),e(kMe,gRr),e(G3,hRr),e(G3,LY),e(LY,pRr),e(G3,uRr),e(xe,_Rr),e(xe,O3),e(O3,SMe),e(SMe,bRr),e(O3,vRr),e(O3,xY),e(xY,FRr),e(O3,TRr),e(xe,MRr),e(xe,V3),e(V3,RMe),e(RMe,ERr),e(V3,CRr),e(V3,$Y),e($Y,wRr),e(V3,ARr),e(xe,yRr),e(xe,X3),e(X3,PMe),e(PMe,LRr),e(X3,xRr),e(X3,kY),e(kY,$Rr),e(X3,kRr),e(Xr,SRr),M(z3,Xr,null),b(f,uNe,_),b(f,Wc,_),e(Wc,W3),e(W3,BMe),M(Bx,BMe,null),e(Wc,RRr),e(Wc,IMe),e(IMe,PRr),b(f,_Ne,_),b(f,_r,_),M(Ix,_r,null),e(_r,BRr),e(_r,Qc),e(Qc,IRr),e(Qc,SY),e(SY,qRr),e(Qc,NRr),e(Qc,RY),e(RY,jRr),e(Qc,DRr),e(_r,GRr),e(_r,qx),e(qx,ORr),e(qx,qMe),e(qMe,VRr),e(qx,XRr),e(_r,zRr),e(_r,Qt),M(Nx,Qt,null),e(Qt,WRr),e(Qt,NMe),e(NMe,QRr),e(Qt,HRr),e(Qt,Hc),e(Hc,URr),e(Hc,jMe),e(jMe,JRr),e(Hc,YRr),e(Hc,PY),e(PY,KRr),e(Hc,ZRr),e(Qt,ePr),M(Q3,Qt,null),e(_r,oPr),e(_r,zr),M(jx,zr,null),e(zr,rPr),e(zr,DMe),e(DMe,tPr),e(zr,aPr),e(zr,Fn),e(Fn,nPr),e(Fn,GMe),e(GMe,sPr),e(Fn,lPr),e(Fn,OMe),e(OMe,iPr),e(Fn,dPr),e(Fn,VMe),e(VMe,cPr),e(Fn,fPr),e(zr,mPr),e(zr,$e),e($e,H3),e(H3,XMe),e(XMe,gPr),e(H3,hPr),e(H3,BY),e(BY,pPr),e(H3,uPr),e($e,_Pr),e($e,U3),e(U3,zMe),e(zMe,bPr),e(U3,vPr),e(U3,IY),e(IY,FPr),e(U3,TPr),e($e,MPr),e($e,J3),e(J3,WMe),e(WMe,EPr),e(J3,CPr),e(J3,qY),e(qY,wPr),e(J3,APr),e($e,yPr),e($e,Y3),e(Y3,QMe),e(QMe,LPr),e(Y3,xPr),e(Y3,NY),e(NY,$Pr),e(Y3,kPr),e($e,SPr),e($e,K3),e(K3,HMe),e(HMe,RPr),e(K3,PPr),e(K3,jY),e(jY,BPr),e(K3,IPr),e($e,qPr),e($e,Z3),e(Z3,UMe),e(UMe,NPr),e(Z3,jPr),e(Z3,DY),e(DY,DPr),e(Z3,GPr),e($e,OPr),e($e,ew),e(ew,JMe),e(JMe,VPr),e(ew,XPr),e(ew,GY),e(GY,zPr),e(ew,WPr),e($e,QPr),e($e,ow),e(ow,YMe),e(YMe,HPr),e(ow,UPr),e(ow,OY),e(OY,JPr),e(ow,YPr),e($e,KPr),e($e,rw),e(rw,KMe),e(KMe,ZPr),e(rw,eBr),e(rw,VY),e(VY,oBr),e(rw,rBr),e($e,tBr),e($e,tw),e(tw,ZMe),e(ZMe,aBr),e(tw,nBr),e(tw,XY),e(XY,sBr),e(tw,lBr),e(zr,iBr),M(aw,zr,null),b(f,bNe,_),b(f,Uc,_),e(Uc,nw),e(nw,e4e),M(Dx,e4e,null),e(Uc,dBr),e(Uc,o4e),e(o4e,cBr),b(f,vNe,_),b(f,br,_),M(Gx,br,null),e(br,fBr),e(br,Jc),e(Jc,mBr),e(Jc,zY),e(zY,gBr),e(Jc,hBr),e(Jc,WY),e(WY,pBr),e(Jc,uBr),e(br,_Br),e(br,Ox),e(Ox,bBr),e(Ox,r4e),e(r4e,vBr),e(Ox,FBr),e(br,TBr),e(br,Ht),M(Vx,Ht,null),e(Ht,MBr),e(Ht,t4e),e(t4e,EBr),e(Ht,CBr),e(Ht,Yc),e(Yc,wBr),e(Yc,a4e),e(a4e,ABr),e(Yc,yBr),e(Yc,QY),e(QY,LBr),e(Yc,xBr),e(Ht,$Br),M(sw,Ht,null),e(br,kBr),e(br,Wr),M(Xx,Wr,null),e(Wr,SBr),e(Wr,n4e),e(n4e,RBr),e(Wr,PBr),e(Wr,Tn),e(Tn,BBr),e(Tn,s4e),e(s4e,IBr),e(Tn,qBr),e(Tn,l4e),e(l4e,NBr),e(Tn,jBr),e(Tn,i4e),e(i4e,DBr),e(Tn,GBr),e(Wr,OBr),e(Wr,De),e(De,lw),e(lw,d4e),e(d4e,VBr),e(lw,XBr),e(lw,HY),e(HY,zBr),e(lw,WBr),e(De,QBr),e(De,iw),e(iw,c4e),e(c4e,HBr),e(iw,UBr),e(iw,UY),e(UY,JBr),e(iw,YBr),e(De,KBr),e(De,dw),e(dw,f4e),e(f4e,ZBr),e(dw,eIr),e(dw,JY),e(JY,oIr),e(dw,rIr),e(De,tIr),e(De,cw),e(cw,m4e),e(m4e,aIr),e(cw,nIr),e(cw,YY),e(YY,sIr),e(cw,lIr),e(De,iIr),e(De,fw),e(fw,g4e),e(g4e,dIr),e(fw,cIr),e(fw,KY),e(KY,fIr),e(fw,mIr),e(De,gIr),e(De,mw),e(mw,h4e),e(h4e,hIr),e(mw,pIr),e(mw,ZY),e(ZY,uIr),e(mw,_Ir),e(De,bIr),e(De,gw),e(gw,p4e),e(p4e,vIr),e(gw,FIr),e(gw,eK),e(eK,TIr),e(gw,MIr),e(De,EIr),e(De,hw),e(hw,u4e),e(u4e,CIr),e(hw,wIr),e(hw,oK),e(oK,AIr),e(hw,yIr),e(Wr,LIr),M(pw,Wr,null),b(f,FNe,_),b(f,Kc,_),e(Kc,uw),e(uw,_4e),M(zx,_4e,null),e(Kc,xIr),e(Kc,b4e),e(b4e,$Ir),b(f,TNe,_),b(f,vr,_),M(Wx,vr,null),e(vr,kIr),e(vr,Zc),e(Zc,SIr),e(Zc,rK),e(rK,RIr),e(Zc,PIr),e(Zc,tK),e(tK,BIr),e(Zc,IIr),e(vr,qIr),e(vr,Qx),e(Qx,NIr),e(Qx,v4e),e(v4e,jIr),e(Qx,DIr),e(vr,GIr),e(vr,Ut),M(Hx,Ut,null),e(Ut,OIr),e(Ut,F4e),e(F4e,VIr),e(Ut,XIr),e(Ut,ef),e(ef,zIr),e(ef,T4e),e(T4e,WIr),e(ef,QIr),e(ef,aK),e(aK,HIr),e(ef,UIr),e(Ut,JIr),M(_w,Ut,null),e(vr,YIr),e(vr,Qr),M(Ux,Qr,null),e(Qr,KIr),e(Qr,M4e),e(M4e,ZIr),e(Qr,eqr),e(Qr,Mn),e(Mn,oqr),e(Mn,E4e),e(E4e,rqr),e(Mn,tqr),e(Mn,C4e),e(C4e,aqr),e(Mn,nqr),e(Mn,w4e),e(w4e,sqr),e(Mn,lqr),e(Qr,iqr),e(Qr,Ge),e(Ge,bw),e(bw,A4e),e(A4e,dqr),e(bw,cqr),e(bw,nK),e(nK,fqr),e(bw,mqr),e(Ge,gqr),e(Ge,vw),e(vw,y4e),e(y4e,hqr),e(vw,pqr),e(vw,sK),e(sK,uqr),e(vw,_qr),e(Ge,bqr),e(Ge,Fw),e(Fw,L4e),e(L4e,vqr),e(Fw,Fqr),e(Fw,lK),e(lK,Tqr),e(Fw,Mqr),e(Ge,Eqr),e(Ge,Tw),e(Tw,x4e),e(x4e,Cqr),e(Tw,wqr),e(Tw,iK),e(iK,Aqr),e(Tw,yqr),e(Ge,Lqr),e(Ge,Mw),e(Mw,$4e),e($4e,xqr),e(Mw,$qr),e(Mw,dK),e(dK,kqr),e(Mw,Sqr),e(Ge,Rqr),e(Ge,Ew),e(Ew,k4e),e(k4e,Pqr),e(Ew,Bqr),e(Ew,cK),e(cK,Iqr),e(Ew,qqr),e(Ge,Nqr),e(Ge,Cw),e(Cw,S4e),e(S4e,jqr),e(Cw,Dqr),e(Cw,fK),e(fK,Gqr),e(Cw,Oqr),e(Ge,Vqr),e(Ge,ww),e(ww,R4e),e(R4e,Xqr),e(ww,zqr),e(ww,mK),e(mK,Wqr),e(ww,Qqr),e(Qr,Hqr),M(Aw,Qr,null),b(f,MNe,_),b(f,of,_),e(of,yw),e(yw,P4e),M(Jx,P4e,null),e(of,Uqr),e(of,B4e),e(B4e,Jqr),b(f,ENe,_),b(f,Fr,_),M(Yx,Fr,null),e(Fr,Yqr),e(Fr,rf),e(rf,Kqr),e(rf,gK),e(gK,Zqr),e(rf,eNr),e(rf,hK),e(hK,oNr),e(rf,rNr),e(Fr,tNr),e(Fr,Kx),e(Kx,aNr),e(Kx,I4e),e(I4e,nNr),e(Kx,sNr),e(Fr,lNr),e(Fr,Jt),M(Zx,Jt,null),e(Jt,iNr),e(Jt,q4e),e(q4e,dNr),e(Jt,cNr),e(Jt,tf),e(tf,fNr),e(tf,N4e),e(N4e,mNr),e(tf,gNr),e(tf,pK),e(pK,hNr),e(tf,pNr),e(Jt,uNr),M(Lw,Jt,null),e(Fr,_Nr),e(Fr,Hr),M(e9,Hr,null),e(Hr,bNr),e(Hr,j4e),e(j4e,vNr),e(Hr,FNr),e(Hr,En),e(En,TNr),e(En,D4e),e(D4e,MNr),e(En,ENr),e(En,G4e),e(G4e,CNr),e(En,wNr),e(En,O4e),e(O4e,ANr),e(En,yNr),e(Hr,LNr),e(Hr,V4e),e(V4e,xw),e(xw,X4e),e(X4e,xNr),e(xw,$Nr),e(xw,uK),e(uK,kNr),e(xw,SNr),e(Hr,RNr),M($w,Hr,null),b(f,CNe,_),b(f,af,_),e(af,kw),e(kw,z4e),M(o9,z4e,null),e(af,PNr),e(af,W4e),e(W4e,BNr),b(f,wNe,_),b(f,Tr,_),M(r9,Tr,null),e(Tr,INr),e(Tr,nf),e(nf,qNr),e(nf,_K),e(_K,NNr),e(nf,jNr),e(nf,bK),e(bK,DNr),e(nf,GNr),e(Tr,ONr),e(Tr,t9),e(t9,VNr),e(t9,Q4e),e(Q4e,XNr),e(t9,zNr),e(Tr,WNr),e(Tr,Yt),M(a9,Yt,null),e(Yt,QNr),e(Yt,H4e),e(H4e,HNr),e(Yt,UNr),e(Yt,sf),e(sf,JNr),e(sf,U4e),e(U4e,YNr),e(sf,KNr),e(sf,vK),e(vK,ZNr),e(sf,ejr),e(Yt,ojr),M(Sw,Yt,null),e(Tr,rjr),e(Tr,Ur),M(n9,Ur,null),e(Ur,tjr),e(Ur,J4e),e(J4e,ajr),e(Ur,njr),e(Ur,Cn),e(Cn,sjr),e(Cn,Y4e),e(Y4e,ljr),e(Cn,ijr),e(Cn,K4e),e(K4e,djr),e(Cn,cjr),e(Cn,Z4e),e(Z4e,fjr),e(Cn,mjr),e(Ur,gjr),e(Ur,s9),e(s9,Rw),e(Rw,eEe),e(eEe,hjr),e(Rw,pjr),e(Rw,FK),e(FK,ujr),e(Rw,_jr),e(s9,bjr),e(s9,Pw),e(Pw,oEe),e(oEe,vjr),e(Pw,Fjr),e(Pw,TK),e(TK,Tjr),e(Pw,Mjr),e(Ur,Ejr),M(Bw,Ur,null),b(f,ANe,_),b(f,lf,_),e(lf,Iw),e(Iw,rEe),M(l9,rEe,null),e(lf,Cjr),e(lf,tEe),e(tEe,wjr),b(f,yNe,_),b(f,Mr,_),M(i9,Mr,null),e(Mr,Ajr),e(Mr,df),e(df,yjr),e(df,MK),e(MK,Ljr),e(df,xjr),e(df,EK),e(EK,$jr),e(df,kjr),e(Mr,Sjr),e(Mr,d9),e(d9,Rjr),e(d9,aEe),e(aEe,Pjr),e(d9,Bjr),e(Mr,Ijr),e(Mr,Kt),M(c9,Kt,null),e(Kt,qjr),e(Kt,nEe),e(nEe,Njr),e(Kt,jjr),e(Kt,cf),e(cf,Djr),e(cf,sEe),e(sEe,Gjr),e(cf,Ojr),e(cf,CK),e(CK,Vjr),e(cf,Xjr),e(Kt,zjr),M(qw,Kt,null),e(Mr,Wjr),e(Mr,Jr),M(f9,Jr,null),e(Jr,Qjr),e(Jr,lEe),e(lEe,Hjr),e(Jr,Ujr),e(Jr,wn),e(wn,Jjr),e(wn,iEe),e(iEe,Yjr),e(wn,Kjr),e(wn,dEe),e(dEe,Zjr),e(wn,eDr),e(wn,cEe),e(cEe,oDr),e(wn,rDr),e(Jr,tDr),e(Jr,fEe),e(fEe,Nw),e(Nw,mEe),e(mEe,aDr),e(Nw,nDr),e(Nw,wK),e(wK,sDr),e(Nw,lDr),e(Jr,iDr),M(jw,Jr,null),LNe=!0},p(f,[_]){const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),vf.$set(m9);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),bg.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),Kg.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),yh.$set(pEe);const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),Lh.$set(g9);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),Qh.$set(uEe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Hh.$set(An);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),Yh.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),Ou.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),Xu.$set(vEe);const h9={};_&2&&(h9.$$scope={dirty:_,ctx:f}),R_.$set(h9);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),B_.$set(FEe);const p9={};_&2&&(p9.$$scope={dirty:_,ctx:f}),v2.$set(p9);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),T2.$set(TEe);const u9={};_&2&&(u9.$$scope={dirty:_,ctx:f}),a1.$set(u9);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),s1.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),C1.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),A1.$set(CEe);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),F7.$set(ff);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),M7.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),Z7.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),ob.$set(yEe);const _9={};_&2&&(_9.$$scope={dirty:_,ctx:f}),ib.$set(_9);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),cb.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),zb.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),Qb.$set($Ee);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),P5.$set(et);const b9={};_&2&&(b9.$$scope={dirty:_,ctx:f}),I5.$set(b9);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),j5.$set(kEe);const v9={};_&2&&(v9.$$scope={dirty:_,ctx:f}),G5.$set(v9);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),ev.$set(SEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),rv.$set(ot);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),nv.$set(REe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),lv.$set(mf);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),bv.$set(PEe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),Fv.$set(BEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),yv.$set(y);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),xv.$set(Dw);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),Dv.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),Ov.$set(qEe);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),Wv.$set(Gw);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),Hv.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),oF.$set(jEe);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),tF.$set(Ow);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),iF.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),cF.$set(GEe);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),hF.$set(Vw);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),uF.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),vF.$set(VEe);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),TF.$set(Xw);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),yF.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),xF.$set(zEe);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),SF.$set(zw);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),PF.$set(WEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),AT.$set(QEe);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),LT.$set(Ww);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),KT.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),eM.$set(UEe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),gM.$set(Qw);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),pM.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),FM.$set(YEe);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),MM.$set(Hw);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),VM.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),zM.$set(ZEe);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),r4.$set(Uw);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),a4.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),k4.$set(oCe);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),R4.$set(Jw);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),Y4.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),Z4.$set(tCe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),rE.$set(Yw);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),aE.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),sE.$set(nCe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),iE.$set(Kw);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),xE.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),kE.$set(lCe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),KE.$set(Zw);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),eC.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),rC.$set(dCe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),aC.$set(eA);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),sC.$set(cCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),iC.$set(fCe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),PC.$set(oA);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),IC.$set(mCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),WC.$set(gCe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),HC.$set(rA);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),l3.$set(hCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),d3.$set(pCe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),F3.$set(tA);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),M3.$set(uCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),S3.$set(_Ce);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),P3.$set(aA);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),z3.$set(bCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),Q3.$set(vCe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),aw.$set(nA);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),sw.$set(FCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),pw.$set(TCe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),_w.$set(sA);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),Aw.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),Lw.$set(ECe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),$w.$set(lA);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),Sw.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),Bw.$set(wCe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),qw.$set(iA);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),jw.$set(ACe)},i(f){LNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(vf.$$.fragment,f),E(d0.$$.fragment,f),E(c0.$$.fragment,f),E(g0.$$.fragment,f),E(bg.$$.fragment,f),E(h0.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(v0.$$.fragment,f),E(Kg.$$.fragment,f),E(F0.$$.fragment,f),E(T0.$$.fragment,f),E(M0.$$.fragment,f),E(w0.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(A0.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E(k0.$$.fragment,f),E(Qh.$$.fragment,f),E(Hh.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(I0.$$.fragment,f),E(Yh.$$.fragment,f),E(q0.$$.fragment,f),E(Ou.$$.fragment,f),E(N0.$$.fragment,f),E(j0.$$.fragment,f),E(G0.$$.fragment,f),E(Xu.$$.fragment,f),E(O0.$$.fragment,f),E(R_.$$.fragment,f),E(V0.$$.fragment,f),E(X0.$$.fragment,f),E(W0.$$.fragment,f),E(B_.$$.fragment,f),E(Q0.$$.fragment,f),E(v2.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(Y0.$$.fragment,f),E(T2.$$.fragment,f),E(K0.$$.fragment,f),E(a1.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(s1.$$.fragment,f),E(ty.$$.fragment,f),E(C1.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(A1.$$.fragment,f),E(iy.$$.fragment,f),E(F7.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(M7.$$.fragment,f),E(gy.$$.fragment,f),E(Z7.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(ob.$$.fragment,f),E(by.$$.fragment,f),E(ib.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(cb.$$.fragment,f),E(Ey.$$.fragment,f),E(zb.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Qb.$$.fragment,f),E(Ly.$$.fragment,f),E(P5.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(I5.$$.fragment,f),E(Ry.$$.fragment,f),E(j5.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(G5.$$.fragment,f),E(Ny.$$.fragment,f),E(ev.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(rv.$$.fragment,f),E(Vy.$$.fragment,f),E(nv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(lv.$$.fragment,f),E(Hy.$$.fragment,f),E(bv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(Fv.$$.fragment,f),E(Zy.$$.fragment,f),E(yv.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(xv.$$.fragment,f),E(aL.$$.fragment,f),E(Dv.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(Ov.$$.fragment,f),E(dL.$$.fragment,f),E(Wv.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(Hv.$$.fragment,f),E(pL.$$.fragment,f),E(oF.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(tF.$$.fragment,f),E(FL.$$.fragment,f),E(iF.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(cF.$$.fragment,f),E(wL.$$.fragment,f),E(hF.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(uF.$$.fragment,f),E(kL.$$.fragment,f),E(vF.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(TF.$$.fragment,f),E(IL.$$.fragment,f),E(yF.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(xF.$$.fragment,f),E(GL.$$.fragment,f),E(SF.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(PF.$$.fragment,f),E(WL.$$.fragment,f),E(AT.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(LT.$$.fragment,f),E(YL.$$.fragment,f),E(KT.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(eM.$$.fragment,f),E(r8.$$.fragment,f),E(gM.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(pM.$$.fragment,f),E(l8.$$.fragment,f),E(FM.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(MM.$$.fragment,f),E(m8.$$.fragment,f),E(VM.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(zM.$$.fragment,f),E(_8.$$.fragment,f),E(r4.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(a4.$$.fragment,f),E(M8.$$.fragment,f),E(k4.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(R4.$$.fragment,f),E(y8.$$.fragment,f),E(Y4.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(Z4.$$.fragment,f),E(S8.$$.fragment,f),E(rE.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(q8.$$.fragment,f),E(aE.$$.fragment,f),E(N8.$$.fragment,f),E(sE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(iE.$$.fragment,f),E(V8.$$.fragment,f),E(xE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(kE.$$.fragment,f),E(H8.$$.fragment,f),E(KE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(eC.$$.fragment,f),E(Z8.$$.fragment,f),E(rC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(aC.$$.fragment,f),E(ax.$$.fragment,f),E(sC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(iC.$$.fragment,f),E(dx.$$.fragment,f),E(PC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(IC.$$.fragment,f),E(hx.$$.fragment,f),E(WC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(HC.$$.fragment,f),E(vx.$$.fragment,f),E(l3.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(d3.$$.fragment,f),E(Cx.$$.fragment,f),E(F3.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(M3.$$.fragment,f),E(xx.$$.fragment,f),E(S3.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(P3.$$.fragment,f),E(Px.$$.fragment,f),E(z3.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(Q3.$$.fragment,f),E(jx.$$.fragment,f),E(aw.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(sw.$$.fragment,f),E(Xx.$$.fragment,f),E(pw.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(_w.$$.fragment,f),E(Ux.$$.fragment,f),E(Aw.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(Lw.$$.fragment,f),E(e9.$$.fragment,f),E($w.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(Sw.$$.fragment,f),E(n9.$$.fragment,f),E(Bw.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(qw.$$.fragment,f),E(f9.$$.fragment,f),E(jw.$$.fragment,f),LNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(vf.$$.fragment,f),C(d0.$$.fragment,f),C(c0.$$.fragment,f),C(g0.$$.fragment,f),C(bg.$$.fragment,f),C(h0.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(v0.$$.fragment,f),C(Kg.$$.fragment,f),C(F0.$$.fragment,f),C(T0.$$.fragment,f),C(M0.$$.fragment,f),C(w0.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(A0.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C(k0.$$.fragment,f),C(Qh.$$.fragment,f),C(Hh.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(I0.$$.fragment,f),C(Yh.$$.fragment,f),C(q0.$$.fragment,f),C(Ou.$$.fragment,f),C(N0.$$.fragment,f),C(j0.$$.fragment,f),C(G0.$$.fragment,f),C(Xu.$$.fragment,f),C(O0.$$.fragment,f),C(R_.$$.fragment,f),C(V0.$$.fragment,f),C(X0.$$.fragment,f),C(W0.$$.fragment,f),C(B_.$$.fragment,f),C(Q0.$$.fragment,f),C(v2.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(Y0.$$.fragment,f),C(T2.$$.fragment,f),C(K0.$$.fragment,f),C(a1.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(s1.$$.fragment,f),C(ty.$$.fragment,f),C(C1.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(A1.$$.fragment,f),C(iy.$$.fragment,f),C(F7.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(M7.$$.fragment,f),C(gy.$$.fragment,f),C(Z7.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(ob.$$.fragment,f),C(by.$$.fragment,f),C(ib.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(cb.$$.fragment,f),C(Ey.$$.fragment,f),C(zb.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Qb.$$.fragment,f),C(Ly.$$.fragment,f),C(P5.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(I5.$$.fragment,f),C(Ry.$$.fragment,f),C(j5.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(G5.$$.fragment,f),C(Ny.$$.fragment,f),C(ev.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(rv.$$.fragment,f),C(Vy.$$.fragment,f),C(nv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(lv.$$.fragment,f),C(Hy.$$.fragment,f),C(bv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(Fv.$$.fragment,f),C(Zy.$$.fragment,f),C(yv.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(xv.$$.fragment,f),C(aL.$$.fragment,f),C(Dv.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(Ov.$$.fragment,f),C(dL.$$.fragment,f),C(Wv.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(Hv.$$.fragment,f),C(pL.$$.fragment,f),C(oF.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(tF.$$.fragment,f),C(FL.$$.fragment,f),C(iF.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(cF.$$.fragment,f),C(wL.$$.fragment,f),C(hF.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(uF.$$.fragment,f),C(kL.$$.fragment,f),C(vF.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(TF.$$.fragment,f),C(IL.$$.fragment,f),C(yF.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(xF.$$.fragment,f),C(GL.$$.fragment,f),C(SF.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(PF.$$.fragment,f),C(WL.$$.fragment,f),C(AT.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(LT.$$.fragment,f),C(YL.$$.fragment,f),C(KT.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(eM.$$.fragment,f),C(r8.$$.fragment,f),C(gM.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(pM.$$.fragment,f),C(l8.$$.fragment,f),C(FM.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(MM.$$.fragment,f),C(m8.$$.fragment,f),C(VM.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(zM.$$.fragment,f),C(_8.$$.fragment,f),C(r4.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(a4.$$.fragment,f),C(M8.$$.fragment,f),C(k4.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(R4.$$.fragment,f),C(y8.$$.fragment,f),C(Y4.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(Z4.$$.fragment,f),C(S8.$$.fragment,f),C(rE.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(q8.$$.fragment,f),C(aE.$$.fragment,f),C(N8.$$.fragment,f),C(sE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(iE.$$.fragment,f),C(V8.$$.fragment,f),C(xE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(kE.$$.fragment,f),C(H8.$$.fragment,f),C(KE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(eC.$$.fragment,f),C(Z8.$$.fragment,f),C(rC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(aC.$$.fragment,f),C(ax.$$.fragment,f),C(sC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(iC.$$.fragment,f),C(dx.$$.fragment,f),C(PC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(IC.$$.fragment,f),C(hx.$$.fragment,f),C(WC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(HC.$$.fragment,f),C(vx.$$.fragment,f),C(l3.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(d3.$$.fragment,f),C(Cx.$$.fragment,f),C(F3.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(M3.$$.fragment,f),C(xx.$$.fragment,f),C(S3.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(P3.$$.fragment,f),C(Px.$$.fragment,f),C(z3.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(Q3.$$.fragment,f),C(jx.$$.fragment,f),C(aw.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(sw.$$.fragment,f),C(Xx.$$.fragment,f),C(pw.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(_w.$$.fragment,f),C(Ux.$$.fragment,f),C(Aw.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(Lw.$$.fragment,f),C(e9.$$.fragment,f),C($w.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(Sw.$$.fragment,f),C(n9.$$.fragment,f),C(Bw.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(qw.$$.fragment,f),C(f9.$$.fragment,f),C(jw.$$.fragment,f),LNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(wIe),f&&t(_i),w(l0),f&&t(AIe),f&&t(kn),f&&t(yIe),w(i0,f),f&&t(LIe),f&&t(x$),f&&t(xIe),w(vf,f),f&&t($Ie),f&&t(bi),w(d0),f&&t(kIe),f&&t(Co),w(c0),w(g0),w(bg),w(h0),f&&t(SIe),f&&t(Fi),w(p0),f&&t(RIe),f&&t(wo),w(u0),w(v0),w(Kg),w(F0),f&&t(PIe),f&&t(Ti),w(T0),f&&t(BIe),f&&t(Ao),w(M0),w(w0),w(yh),w(Lh),w(A0),f&&t(IIe),f&&t(Mi),w(y0),f&&t(qIe),f&&t(yo),w(L0),w(k0),w(Qh),w(Hh),w(S0),f&&t(NIe),f&&t(Ci),w(R0),f&&t(jIe),f&&t(Lo),w(P0),w(I0),w(Yh),w(q0),w(Ou),f&&t(DIe),f&&t(yi),w(N0),f&&t(GIe),f&&t(xo),w(j0),w(G0),w(Xu),w(O0),w(R_),f&&t(OIe),f&&t($i),w(V0),f&&t(VIe),f&&t($o),w(X0),w(W0),w(B_),w(Q0),w(v2),f&&t(XIe),f&&t(Ri),w(H0),f&&t(zIe),f&&t(ko),w(U0),w(Y0),w(T2),w(K0),w(a1),f&&t(WIe),f&&t(Ii),w(Z0),f&&t(QIe),f&&t(So),w(ey),w(ry),w(s1),w(ty),w(C1),f&&t(HIe),f&&t(ji),w(ay),f&&t(UIe),f&&t(Ro),w(ny),w(ly),w(A1),w(iy),w(F7),f&&t(JIe),f&&t(Oi),w(dy),f&&t(YIe),f&&t(Po),w(cy),w(my),w(M7),w(gy),w(Z7),f&&t(KIe),f&&t(zi),w(hy),f&&t(ZIe),f&&t(Bo),w(py),w(_y),w(ob),w(by),w(ib),f&&t(eqe),f&&t(Hi),w(vy),f&&t(oqe),f&&t(Io),w(Fy),w(My),w(cb),w(Ey),w(zb),f&&t(rqe),f&&t(Yi),w(Cy),f&&t(tqe),f&&t(qo),w(wy),w(yy),w(Qb),w(Ly),w(P5),f&&t(aqe),f&&t(ed),w(xy),f&&t(nqe),f&&t(No),w($y),w(Sy),w(I5),w(Ry),w(j5),f&&t(sqe),f&&t(td),w(Py),f&&t(lqe),f&&t(jo),w(By),w(qy),w(G5),w(Ny),w(ev),f&&t(iqe),f&&t(sd),w(jy),f&&t(dqe),f&&t(Do),w(Dy),w(Oy),w(rv),w(Vy),w(nv),f&&t(cqe),f&&t(dd),w(Xy),f&&t(fqe),f&&t(Go),w(zy),w(Qy),w(lv),w(Hy),w(bv),f&&t(mqe),f&&t(md),w(Uy),f&&t(gqe),f&&t(Oo),w(Jy),w(Ky),w(Fv),w(Zy),w(yv),f&&t(hqe),f&&t(pd),w(eL),f&&t(pqe),f&&t(Vo),w(oL),w(tL),w(xv),w(aL),w(Dv),f&&t(uqe),f&&t(bd),w(nL),f&&t(_qe),f&&t(Xo),w(sL),w(iL),w(Ov),w(dL),w(Wv),f&&t(bqe),f&&t(Td),w(fL),f&&t(vqe),f&&t(zo),w(mL),w(hL),w(Hv),w(pL),w(oF),f&&t(Fqe),f&&t(Cd),w(uL),f&&t(Tqe),f&&t(Wo),w(_L),w(vL),w(tF),w(FL),w(iF),f&&t(Mqe),f&&t(Ld),w(TL),f&&t(Eqe),f&&t(Qo),w(ML),w(CL),w(cF),w(wL),w(hF),f&&t(Cqe),f&&t(kd),w(yL),f&&t(wqe),f&&t(Ho),w(LL),w($L),w(uF),w(kL),w(vF),f&&t(Aqe),f&&t(Pd),w(SL),f&&t(yqe),f&&t(Uo),w(RL),w(BL),w(TF),w(IL),w(yF),f&&t(Lqe),f&&t(qd),w(qL),f&&t(xqe),f&&t(Jo),w(NL),w(DL),w(xF),w(GL),w(SF),f&&t($qe),f&&t(Dd),w(OL),f&&t(kqe),f&&t(Yo),w(VL),w(zL),w(PF),w(WL),w(AT),f&&t(Sqe),f&&t(Vd),w(QL),f&&t(Rqe),f&&t(Ko),w(HL),w(JL),w(LT),w(YL),w(KT),f&&t(Pqe),f&&t(Wd),w(KL),f&&t(Bqe),f&&t(Zo),w(ZL),w(o8),w(eM),w(r8),w(gM),f&&t(Iqe),f&&t(Ud),w(t8),f&&t(qqe),f&&t(er),w(a8),w(s8),w(pM),w(l8),w(FM),f&&t(Nqe),f&&t(Kd),w(i8),f&&t(jqe),f&&t(or),w(d8),w(f8),w(MM),w(m8),w(VM),f&&t(Dqe),f&&t(oc),w(g8),f&&t(Gqe),f&&t(rr),w(h8),w(u8),w(zM),w(_8),w(r4),f&&t(Oqe),f&&t(ac),w(b8),f&&t(Vqe),f&&t(tr),w(v8),w(T8),w(a4),w(M8),w(k4),f&&t(Xqe),f&&t(lc),w(E8),f&&t(zqe),f&&t(ar),w(C8),w(A8),w(R4),w(y8),w(Y4),f&&t(Wqe),f&&t(cc),w(L8),f&&t(Qqe),f&&t(nr),w(x8),w(k8),w(Z4),w(S8),w(rE),f&&t(Hqe),f&&t(gc),w(P8),f&&t(Uqe),f&&t(sr),w(B8),w(q8),w(aE),w(N8),w(sE),f&&t(Jqe),f&&t(uc),w(j8),f&&t(Yqe),f&&t(lr),w(D8),w(O8),w(iE),w(V8),w(xE),f&&t(Kqe),f&&t(vc),w(X8),f&&t(Zqe),f&&t(ir),w(z8),w(Q8),w(kE),w(H8),w(KE),f&&t(eNe),f&&t(Mc),w(U8),f&&t(oNe),f&&t(dr),w(J8),w(K8),w(eC),w(Z8),w(rC),f&&t(rNe),f&&t(wc),w(ex),f&&t(tNe),f&&t(cr),w(ox),w(tx),w(aC),w(ax),w(sC),f&&t(aNe),f&&t(Lc),w(nx),f&&t(nNe),f&&t(fr),w(sx),w(ix),w(iC),w(dx),w(PC),f&&t(sNe),f&&t(kc),w(cx),f&&t(lNe),f&&t(mr),w(fx),w(gx),w(IC),w(hx),w(WC),f&&t(iNe),f&&t(Pc),w(px),f&&t(dNe),f&&t(gr),w(ux),w(bx),w(HC),w(vx),w(l3),f&&t(cNe),f&&t(qc),w(Fx),f&&t(fNe),f&&t(hr),w(Tx),w(Ex),w(d3),w(Cx),w(F3),f&&t(mNe),f&&t(Dc),w(wx),f&&t(gNe),f&&t(pr),w(Ax),w(Lx),w(M3),w(xx),w(S3),f&&t(hNe),f&&t(Vc),w($x),f&&t(pNe),f&&t(ur),w(kx),w(Rx),w(P3),w(Px),w(z3),f&&t(uNe),f&&t(Wc),w(Bx),f&&t(_Ne),f&&t(_r),w(Ix),w(Nx),w(Q3),w(jx),w(aw),f&&t(bNe),f&&t(Uc),w(Dx),f&&t(vNe),f&&t(br),w(Gx),w(Vx),w(sw),w(Xx),w(pw),f&&t(FNe),f&&t(Kc),w(zx),f&&t(TNe),f&&t(vr),w(Wx),w(Hx),w(_w),w(Ux),w(Aw),f&&t(MNe),f&&t(of),w(Jx),f&&t(ENe),f&&t(Fr),w(Yx),w(Zx),w(Lw),w(e9),w($w),f&&t(CNe),f&&t(af),w(o9),f&&t(wNe),f&&t(Tr),w(r9),w(a9),w(Sw),w(n9),w(Bw),f&&t(ANe),f&&t(lf),w(l9),f&&t(yNe),f&&t(Mr),w(i9),w(c9),w(qw),w(f9),w(jw)}}}const oxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function rxt(L){return rLt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dxt extends Kyt{constructor(g){super();Zyt(this,g,rxt,ext,eLt,{})}}export{dxt as default,oxt as metadata};
