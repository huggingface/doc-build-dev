import{S as WRt,i as QRt,s as HRt,e as a,k as l,w as F,t as o,M as URt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as JRt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as RWr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function YRt(x){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,G6,uf,Ge,We,pi,Ln,O6,yn,xn,V6,_i,$n,X6,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),G6=o(")."),uf=l(),Ge=a("p"),We=o("Likewise, if your "),pi=a("code"),Ln=o("NewModel"),O6=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),V6=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),X6=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ck=s(p);m=r(ck,"NewModelConfig"),ck.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var fk=s(mi);_f=r(fk,"model_type"),fk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var mk=s(gi);hi=r(mk,'"new-model"'),mk.forEach(t),G6=r(Ae,")."),Ae.forEach(t),uf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);Ln=r(wa,"NewModel"),wa.forEach(t),O6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var gk=s(yn);xn=r(gk,"PreTrainedModel"),gk.forEach(t),V6=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),X6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var hk=s(ui);bf=r(hk,"NewModelConfig"),hk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,G6),b(Qe,uf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,pi),e(pi,Ln),e(Ge,O6),e(Ge,yn),e(yn,xn),e(Ge,V6),e(Ge,_i),e(_i,$n),e(Ge,X6),e(Ge,ui),e(ui,bf),e(Ge,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(Ge)}}}function KRt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function oPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function tPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(x){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,G6,uf,Ge,We,pi,Ln,O6,yn,xn,V6,_i,$n,X6,ui,bf,Ca,Qe,Ae,ck,bi,fk,mk,Eo,wa,gk,vf,hk,yVe,uje,vi,Ff,Xoe,z6,xVe,zoe,$Ve,bje,kn,kVe,Woe,SVe,RVe,Qoe,PVe,BVe,vje,W6,Fje,pk,IVe,Tje,Tf,Mje,Fi,Mf,Hoe,Q6,NVe,Uoe,qVe,Eje,Co,H6,jVe,U6,DVe,_k,GVe,OVe,VVe,J6,XVe,Joe,zVe,WVe,QVe,Er,Y6,HVe,Yoe,UVe,JVe,Ti,YVe,Koe,KVe,ZVe,Zoe,eXe,oXe,rXe,A,Ef,ere,tXe,aXe,uk,nXe,sXe,lXe,Cf,ore,iXe,dXe,bk,cXe,fXe,mXe,wf,rre,gXe,hXe,vk,pXe,_Xe,uXe,Af,tre,bXe,vXe,Fk,FXe,TXe,MXe,Lf,are,EXe,CXe,Tk,wXe,AXe,LXe,yf,nre,yXe,xXe,Mk,$Xe,kXe,SXe,xf,sre,RXe,PXe,Ek,BXe,IXe,NXe,$f,lre,qXe,jXe,Ck,DXe,GXe,OXe,kf,ire,VXe,XXe,wk,zXe,WXe,QXe,Sf,dre,HXe,UXe,Ak,JXe,YXe,KXe,Rf,cre,ZXe,eze,Lk,oze,rze,tze,Pf,fre,aze,nze,yk,sze,lze,ize,Bf,mre,dze,cze,xk,fze,mze,gze,If,gre,hze,pze,$k,_ze,uze,bze,Nf,hre,vze,Fze,kk,Tze,Mze,Eze,qf,pre,Cze,wze,Sk,Aze,Lze,yze,jf,_re,xze,$ze,Rk,kze,Sze,Rze,Df,ure,Pze,Bze,Pk,Ize,Nze,qze,Gf,bre,jze,Dze,Bk,Gze,Oze,Vze,Of,vre,Xze,zze,Ik,Wze,Qze,Hze,Vf,Fre,Uze,Jze,Nk,Yze,Kze,Zze,Xf,Tre,eWe,oWe,qk,rWe,tWe,aWe,zf,Mre,nWe,sWe,jk,lWe,iWe,dWe,Wf,Ere,cWe,fWe,Dk,mWe,gWe,hWe,Qf,Cre,pWe,_We,Gk,uWe,bWe,vWe,Hf,wre,FWe,TWe,Ok,MWe,EWe,CWe,Uf,Are,wWe,AWe,Vk,LWe,yWe,xWe,Jf,Lre,$We,kWe,Xk,SWe,RWe,PWe,Yf,yre,BWe,IWe,zk,NWe,qWe,jWe,Kf,xre,DWe,GWe,Wk,OWe,VWe,XWe,Zf,$re,zWe,WWe,Qk,QWe,HWe,UWe,em,kre,JWe,YWe,Hk,KWe,ZWe,eQe,om,Sre,oQe,rQe,Uk,tQe,aQe,nQe,rm,Rre,sQe,lQe,Jk,iQe,dQe,cQe,tm,Pre,fQe,mQe,Yk,gQe,hQe,pQe,am,Bre,_Qe,uQe,Kk,bQe,vQe,FQe,nm,Ire,TQe,MQe,Zk,EQe,CQe,wQe,sm,Nre,AQe,LQe,eS,yQe,xQe,$Qe,lm,qre,kQe,SQe,oS,RQe,PQe,BQe,im,jre,IQe,NQe,rS,qQe,jQe,DQe,dm,Dre,GQe,OQe,tS,VQe,XQe,zQe,cm,Gre,WQe,QQe,aS,HQe,UQe,JQe,fm,Ore,YQe,KQe,nS,ZQe,eHe,oHe,mm,Vre,rHe,tHe,sS,aHe,nHe,sHe,gm,Xre,lHe,iHe,lS,dHe,cHe,fHe,hm,zre,mHe,gHe,iS,hHe,pHe,_He,pm,Wre,uHe,bHe,dS,vHe,FHe,THe,_m,Qre,MHe,EHe,cS,CHe,wHe,AHe,um,Hre,LHe,yHe,fS,xHe,$He,kHe,bm,Ure,SHe,RHe,mS,PHe,BHe,IHe,vm,Jre,NHe,qHe,gS,jHe,DHe,GHe,Fm,Yre,OHe,VHe,hS,XHe,zHe,WHe,Tm,Kre,QHe,HHe,pS,UHe,JHe,YHe,Mm,Zre,KHe,ZHe,_S,eUe,oUe,rUe,Em,ete,tUe,aUe,uS,nUe,sUe,lUe,Cm,ote,iUe,dUe,bS,cUe,fUe,mUe,wm,rte,gUe,hUe,vS,pUe,_Ue,uUe,Am,tte,bUe,vUe,FS,FUe,TUe,MUe,Lm,ate,EUe,CUe,TS,wUe,AUe,LUe,ym,nte,yUe,xUe,MS,$Ue,kUe,SUe,xm,ste,RUe,PUe,ES,BUe,IUe,NUe,$m,lte,qUe,jUe,CS,DUe,GUe,OUe,km,ite,VUe,XUe,wS,zUe,WUe,QUe,Sm,dte,HUe,UUe,AS,JUe,YUe,KUe,Rm,cte,ZUe,eJe,LS,oJe,rJe,tJe,Pm,fte,aJe,nJe,yS,sJe,lJe,iJe,Bm,mte,dJe,cJe,xS,fJe,mJe,gJe,Im,gte,hJe,pJe,$S,_Je,uJe,bJe,Nm,hte,vJe,FJe,kS,TJe,MJe,EJe,qm,pte,CJe,wJe,SS,AJe,LJe,yJe,jm,_te,xJe,$Je,RS,kJe,SJe,RJe,Dm,ute,PJe,BJe,PS,IJe,NJe,qJe,Gm,bte,jJe,DJe,BS,GJe,OJe,VJe,Om,vte,XJe,zJe,IS,WJe,QJe,HJe,Vm,Fte,UJe,JJe,NS,YJe,KJe,ZJe,Xm,Tte,eYe,oYe,qS,rYe,tYe,aYe,zm,Mte,nYe,sYe,jS,lYe,iYe,dYe,Wm,Ete,cYe,fYe,DS,mYe,gYe,hYe,Qm,Cte,pYe,_Ye,GS,uYe,bYe,vYe,Hm,wte,FYe,TYe,OS,MYe,EYe,CYe,Um,Ate,wYe,AYe,VS,LYe,yYe,xYe,Jm,Lte,$Ye,kYe,XS,SYe,RYe,PYe,Ym,yte,BYe,IYe,zS,NYe,qYe,jYe,Km,xte,DYe,GYe,WS,OYe,VYe,XYe,Zm,$te,zYe,WYe,QS,QYe,HYe,UYe,eg,kte,JYe,YYe,HS,KYe,ZYe,eKe,og,Ste,oKe,rKe,US,tKe,aKe,nKe,rg,Rte,sKe,lKe,JS,iKe,dKe,cKe,tg,Pte,fKe,mKe,YS,gKe,hKe,pKe,ag,Bte,_Ke,uKe,KS,bKe,vKe,FKe,ng,Ite,TKe,MKe,ZS,EKe,CKe,wKe,sg,Nte,AKe,LKe,eR,yKe,xKe,$Ke,lg,qte,kKe,SKe,oR,RKe,PKe,BKe,ig,jte,IKe,NKe,rR,qKe,jKe,DKe,dg,Dte,GKe,OKe,tR,VKe,XKe,zKe,cg,Gte,WKe,QKe,aR,HKe,UKe,JKe,fg,Ote,YKe,KKe,nR,ZKe,eZe,oZe,mg,Vte,rZe,tZe,sR,aZe,nZe,sZe,gg,Xte,lZe,iZe,lR,dZe,cZe,fZe,hg,zte,mZe,gZe,iR,hZe,pZe,_Ze,pg,Wte,uZe,bZe,dR,vZe,FZe,TZe,_g,Qte,MZe,EZe,cR,CZe,wZe,AZe,ug,Hte,LZe,yZe,fR,xZe,$Ze,kZe,bg,Ute,SZe,RZe,mR,PZe,BZe,IZe,vg,Jte,NZe,qZe,gR,jZe,DZe,GZe,Fg,Yte,OZe,VZe,hR,XZe,zZe,WZe,Tg,Kte,QZe,HZe,pR,UZe,JZe,YZe,Mg,Zte,KZe,ZZe,_R,eeo,oeo,reo,Eg,eae,teo,aeo,uR,neo,seo,leo,Cg,oae,ieo,deo,bR,ceo,feo,meo,wg,rae,geo,heo,vR,peo,_eo,ueo,Ag,tae,beo,veo,FR,Feo,Teo,Meo,Lg,Eeo,yg,K6,Ceo,aae,weo,Cje,Mi,xg,nae,Z6,Aeo,sae,Leo,wje,wo,eL,yeo,oL,xeo,TR,$eo,keo,Seo,rL,Reo,lae,Peo,Beo,Ieo,Cr,tL,Neo,iae,qeo,jeo,Aa,Deo,dae,Geo,Oeo,cae,Veo,Xeo,fae,zeo,Weo,Qeo,k,Sn,mae,Heo,Ueo,MR,Jeo,Yeo,ER,Keo,Zeo,eoo,Rn,gae,ooo,roo,CR,too,aoo,wR,noo,soo,loo,Pn,hae,ioo,doo,AR,coo,foo,LR,moo,goo,hoo,$g,pae,poo,_oo,yR,uoo,boo,voo,Bn,_ae,Foo,Too,xR,Moo,Eoo,$R,Coo,woo,Aoo,kg,uae,Loo,yoo,kR,xoo,$oo,koo,Sg,bae,Soo,Roo,SR,Poo,Boo,Ioo,Rg,vae,Noo,qoo,RR,joo,Doo,Goo,In,Fae,Ooo,Voo,PR,Xoo,zoo,BR,Woo,Qoo,Hoo,Nn,Tae,Uoo,Joo,IR,Yoo,Koo,NR,Zoo,ero,oro,qn,Mae,rro,tro,qR,aro,nro,jR,sro,lro,iro,Pg,Eae,dro,cro,DR,fro,mro,gro,Bg,Cae,hro,pro,GR,_ro,uro,bro,Ig,wae,vro,Fro,OR,Tro,Mro,Ero,jn,Aae,Cro,wro,VR,Aro,Lro,XR,yro,xro,$ro,Ng,Lae,kro,Sro,zR,Rro,Pro,Bro,Dn,yae,Iro,Nro,WR,qro,jro,QR,Dro,Gro,Oro,Gn,xae,Vro,Xro,HR,zro,Wro,UR,Qro,Hro,Uro,On,$ae,Jro,Yro,JR,Kro,Zro,YR,eto,oto,rto,qg,kae,tto,ato,KR,nto,sto,lto,Vn,Sae,ito,dto,ZR,cto,fto,eP,mto,gto,hto,Xn,Rae,pto,_to,oP,uto,bto,rP,vto,Fto,Tto,zn,Pae,Mto,Eto,tP,Cto,wto,aP,Ato,Lto,yto,Wn,Bae,xto,$to,nP,kto,Sto,sP,Rto,Pto,Bto,Qn,Iae,Ito,Nto,lP,qto,jto,iP,Dto,Gto,Oto,Hn,Nae,Vto,Xto,dP,zto,Wto,cP,Qto,Hto,Uto,jg,qae,Jto,Yto,fP,Kto,Zto,eao,Un,jae,oao,rao,mP,tao,aao,gP,nao,sao,lao,Dg,Dae,iao,dao,hP,cao,fao,mao,Jn,Gae,gao,hao,pP,pao,_ao,_P,uao,bao,vao,Yn,Oae,Fao,Tao,uP,Mao,Eao,bP,Cao,wao,Aao,Kn,Vae,Lao,yao,vP,xao,$ao,FP,kao,Sao,Rao,Gg,Xae,Pao,Bao,TP,Iao,Nao,qao,Zn,zae,jao,Dao,MP,Gao,Oao,EP,Vao,Xao,zao,es,Wae,Wao,Qao,CP,Hao,Uao,wP,Jao,Yao,Kao,Og,Qae,Zao,eno,AP,ono,rno,tno,os,Hae,ano,nno,LP,sno,lno,yP,ino,dno,cno,rs,Uae,fno,mno,xP,gno,hno,$P,pno,_no,uno,ts,Jae,bno,vno,kP,Fno,Tno,SP,Mno,Eno,Cno,as,Yae,wno,Ano,RP,Lno,yno,PP,xno,$no,kno,ns,Kae,Sno,Rno,BP,Pno,Bno,IP,Ino,Nno,qno,ss,Zae,jno,Dno,NP,Gno,Ono,qP,Vno,Xno,zno,ls,ene,Wno,Qno,jP,Hno,Uno,DP,Jno,Yno,Kno,Vg,one,Zno,eso,GP,oso,rso,tso,is,rne,aso,nso,OP,sso,lso,VP,iso,dso,cso,Xg,tne,fso,mso,XP,gso,hso,pso,zg,ane,_so,uso,zP,bso,vso,Fso,ds,nne,Tso,Mso,WP,Eso,Cso,QP,wso,Aso,Lso,cs,sne,yso,xso,HP,$so,kso,UP,Sso,Rso,Pso,fs,lne,Bso,Iso,JP,Nso,qso,YP,jso,Dso,Gso,Wg,ine,Oso,Vso,KP,Xso,zso,Wso,ms,dne,Qso,Hso,ZP,Uso,Jso,eB,Yso,Kso,Zso,gs,cne,elo,olo,oB,rlo,tlo,rB,alo,nlo,slo,hs,fne,llo,ilo,tB,dlo,clo,aB,flo,mlo,glo,ps,mne,hlo,plo,nB,_lo,ulo,sB,blo,vlo,Flo,_s,gne,Tlo,Mlo,lB,Elo,Clo,iB,wlo,Alo,Llo,Qg,hne,ylo,xlo,dB,$lo,klo,Slo,us,pne,Rlo,Plo,cB,Blo,Ilo,fB,Nlo,qlo,jlo,Hg,_ne,Dlo,Glo,mB,Olo,Vlo,Xlo,Ug,une,zlo,Wlo,gB,Qlo,Hlo,Ulo,Jg,bne,Jlo,Ylo,hB,Klo,Zlo,eio,Yg,vne,oio,rio,pB,tio,aio,nio,bs,Fne,sio,lio,_B,iio,dio,uB,cio,fio,mio,Kg,Tne,gio,hio,bB,pio,_io,uio,vs,Mne,bio,vio,vB,Fio,Tio,FB,Mio,Eio,Cio,Fs,Ene,wio,Aio,TB,Lio,yio,MB,xio,$io,kio,Ts,Cne,Sio,Rio,EB,Pio,Bio,CB,Iio,Nio,qio,Ms,wne,jio,Dio,wB,Gio,Oio,AB,Vio,Xio,zio,Es,Ane,Wio,Qio,LB,Hio,Uio,yB,Jio,Yio,Kio,Cs,Lne,Zio,edo,xB,odo,rdo,$B,tdo,ado,ndo,Zg,yne,sdo,ldo,kB,ido,ddo,cdo,eh,xne,fdo,mdo,SB,gdo,hdo,pdo,ws,$ne,_do,udo,RB,bdo,vdo,PB,Fdo,Tdo,Mdo,As,kne,Edo,Cdo,BB,wdo,Ado,IB,Ldo,ydo,xdo,Ls,Sne,$do,kdo,NB,Sdo,Rdo,qB,Pdo,Bdo,Ido,oh,Rne,Ndo,qdo,jB,jdo,Ddo,Gdo,rh,Pne,Odo,Vdo,DB,Xdo,zdo,Wdo,th,Bne,Qdo,Hdo,GB,Udo,Jdo,Ydo,ys,Ine,Kdo,Zdo,OB,eco,oco,VB,rco,tco,aco,ah,Nne,nco,sco,XB,lco,ico,dco,nh,qne,cco,fco,zB,mco,gco,hco,sh,jne,pco,_co,WB,uco,bco,vco,xs,Dne,Fco,Tco,QB,Mco,Eco,HB,Cco,wco,Aco,lh,Gne,Lco,yco,UB,xco,$co,kco,ih,One,Sco,Rco,JB,Pco,Bco,Ico,$s,Vne,Nco,qco,YB,jco,Dco,KB,Gco,Oco,Vco,ks,Xne,Xco,zco,ZB,Wco,Qco,eI,Hco,Uco,Jco,Ss,zne,Yco,Kco,oI,Zco,efo,rI,ofo,rfo,tfo,Rs,Wne,afo,nfo,tI,sfo,lfo,aI,ifo,dfo,cfo,dh,ffo,ch,aL,mfo,Qne,gfo,Aje,Ei,fh,Hne,nL,hfo,Une,pfo,Lje,Ao,sL,_fo,lL,ufo,nI,bfo,vfo,Ffo,iL,Tfo,Jne,Mfo,Efo,Cfo,He,dL,wfo,Yne,Afo,Lfo,La,yfo,Kne,xfo,$fo,Zne,kfo,Sfo,ese,Rfo,Pfo,Bfo,Y,mh,ose,Ifo,Nfo,sI,qfo,jfo,Dfo,gh,rse,Gfo,Ofo,lI,Vfo,Xfo,zfo,hh,tse,Wfo,Qfo,iI,Hfo,Ufo,Jfo,ph,ase,Yfo,Kfo,dI,Zfo,emo,omo,_h,nse,rmo,tmo,cI,amo,nmo,smo,uh,sse,lmo,imo,fI,dmo,cmo,fmo,bh,lse,mmo,gmo,mI,hmo,pmo,_mo,vh,ise,umo,bmo,gI,vmo,Fmo,Tmo,Fh,dse,Mmo,Emo,hI,Cmo,wmo,Amo,Th,cse,Lmo,ymo,pI,xmo,$mo,kmo,Mh,fse,Smo,Rmo,_I,Pmo,Bmo,Imo,Eh,mse,Nmo,qmo,uI,jmo,Dmo,Gmo,Ch,gse,Omo,Vmo,bI,Xmo,zmo,Wmo,wh,hse,Qmo,Hmo,vI,Umo,Jmo,Ymo,Ah,pse,Kmo,Zmo,FI,ego,ogo,rgo,Lh,_se,tgo,ago,TI,ngo,sgo,lgo,yh,use,igo,dgo,MI,cgo,fgo,mgo,xh,bse,ggo,hgo,EI,pgo,_go,ugo,$h,vse,bgo,vgo,CI,Fgo,Tgo,Mgo,kh,Fse,Ego,Cgo,wI,wgo,Ago,Lgo,Sh,Tse,ygo,xgo,AI,$go,kgo,Sgo,Rh,Mse,Rgo,Pgo,LI,Bgo,Igo,Ngo,Ph,Ese,qgo,jgo,yI,Dgo,Ggo,Ogo,Bh,Cse,Vgo,Xgo,xI,zgo,Wgo,Qgo,Ih,wse,Hgo,Ugo,$I,Jgo,Ygo,Kgo,Nh,Ase,Zgo,eho,kI,oho,rho,tho,qh,Lse,aho,nho,SI,sho,lho,iho,jh,yse,dho,cho,RI,fho,mho,gho,Dh,xse,hho,pho,PI,_ho,uho,bho,Gh,$se,vho,Fho,BI,Tho,Mho,Eho,Oh,kse,Cho,who,II,Aho,Lho,yho,Vh,xho,Xh,$ho,zh,cL,kho,Sse,Sho,yje,Ci,Wh,Rse,fL,Rho,Pse,Pho,xje,Lo,mL,Bho,gL,Iho,NI,Nho,qho,jho,hL,Dho,Bse,Gho,Oho,Vho,Ue,pL,Xho,Ise,zho,Who,wi,Qho,Nse,Hho,Uho,qse,Jho,Yho,Kho,he,Qh,jse,Zho,epo,qI,opo,rpo,tpo,Hh,Dse,apo,npo,Gse,spo,lpo,ipo,Uh,Ose,dpo,cpo,jI,fpo,mpo,gpo,Jh,Vse,hpo,ppo,DI,_po,upo,bpo,Yh,Xse,vpo,Fpo,GI,Tpo,Mpo,Epo,Kh,zse,Cpo,wpo,OI,Apo,Lpo,ypo,Zh,Wse,xpo,$po,VI,kpo,Spo,Rpo,ep,Qse,Ppo,Bpo,XI,Ipo,Npo,qpo,op,Hse,jpo,Dpo,zI,Gpo,Opo,Vpo,rp,Use,Xpo,zpo,WI,Wpo,Qpo,Hpo,tp,Jse,Upo,Jpo,QI,Ypo,Kpo,Zpo,ap,Yse,e_o,o_o,HI,r_o,t_o,a_o,np,Kse,n_o,s_o,UI,l_o,i_o,d_o,sp,Zse,c_o,f_o,JI,m_o,g_o,h_o,lp,ele,p_o,__o,YI,u_o,b_o,v_o,ip,ole,F_o,T_o,KI,M_o,E_o,C_o,dp,rle,w_o,A_o,ZI,L_o,y_o,x_o,cp,$_o,fp,k_o,mp,_L,S_o,tle,R_o,$je,Ai,gp,ale,uL,P_o,nle,B_o,kje,yo,bL,I_o,Li,N_o,eN,q_o,j_o,oN,D_o,G_o,O_o,vL,V_o,sle,X_o,z_o,W_o,tt,FL,Q_o,lle,H_o,U_o,yi,J_o,ile,Y_o,K_o,rN,Z_o,euo,ouo,hp,ruo,Je,TL,tuo,dle,auo,nuo,ya,suo,cle,luo,iuo,fle,duo,cuo,mle,fuo,muo,guo,y,pp,gle,huo,puo,tN,_uo,uuo,buo,_p,hle,vuo,Fuo,aN,Tuo,Muo,Euo,up,ple,Cuo,wuo,nN,Auo,Luo,yuo,bp,_le,xuo,$uo,sN,kuo,Suo,Ruo,vp,ule,Puo,Buo,lN,Iuo,Nuo,quo,Fp,ble,juo,Duo,iN,Guo,Ouo,Vuo,Tp,vle,Xuo,zuo,dN,Wuo,Quo,Huo,Mp,Fle,Uuo,Juo,cN,Yuo,Kuo,Zuo,Ep,Tle,e4o,o4o,fN,r4o,t4o,a4o,Cp,Mle,n4o,s4o,mN,l4o,i4o,d4o,wp,Ele,c4o,f4o,gN,m4o,g4o,h4o,Ap,Cle,p4o,_4o,hN,u4o,b4o,v4o,Lp,wle,F4o,T4o,pN,M4o,E4o,C4o,yp,Ale,w4o,A4o,_N,L4o,y4o,x4o,xp,Lle,$4o,k4o,uN,S4o,R4o,P4o,$p,yle,B4o,I4o,bN,N4o,q4o,j4o,kp,xle,D4o,G4o,vN,O4o,V4o,X4o,Sp,$le,z4o,W4o,FN,Q4o,H4o,U4o,Rp,kle,J4o,Y4o,TN,K4o,Z4o,e1o,Pp,Sle,o1o,r1o,MN,t1o,a1o,n1o,Bp,Rle,s1o,l1o,EN,i1o,d1o,c1o,Ip,Ple,f1o,m1o,CN,g1o,h1o,p1o,Np,Ble,_1o,u1o,wN,b1o,v1o,F1o,qp,Ile,T1o,M1o,AN,E1o,C1o,w1o,jp,Nle,A1o,L1o,LN,y1o,x1o,$1o,Dp,qle,k1o,S1o,yN,R1o,P1o,B1o,Gp,jle,I1o,N1o,xN,q1o,j1o,D1o,Op,Dle,G1o,O1o,$N,V1o,X1o,z1o,Vp,Gle,W1o,Q1o,kN,H1o,U1o,J1o,Xp,Ole,Y1o,K1o,SN,Z1o,e7o,o7o,zp,Vle,r7o,t7o,RN,a7o,n7o,s7o,Wp,Xle,l7o,i7o,PN,d7o,c7o,f7o,Qp,zle,m7o,g7o,BN,h7o,p7o,_7o,Ps,Wle,u7o,b7o,IN,v7o,F7o,NN,T7o,M7o,E7o,Hp,Qle,C7o,w7o,qN,A7o,L7o,y7o,Up,Hle,x7o,$7o,jN,k7o,S7o,R7o,Jp,Ule,P7o,B7o,DN,I7o,N7o,q7o,Yp,Jle,j7o,D7o,GN,G7o,O7o,V7o,Kp,Yle,X7o,z7o,ON,W7o,Q7o,H7o,Zp,Kle,U7o,J7o,VN,Y7o,K7o,Z7o,e_,Zle,ebo,obo,XN,rbo,tbo,abo,o_,eie,nbo,sbo,zN,lbo,ibo,dbo,r_,oie,cbo,fbo,WN,mbo,gbo,hbo,t_,rie,pbo,_bo,QN,ubo,bbo,vbo,a_,tie,Fbo,Tbo,HN,Mbo,Ebo,Cbo,n_,aie,wbo,Abo,UN,Lbo,ybo,xbo,s_,nie,$bo,kbo,JN,Sbo,Rbo,Pbo,l_,sie,Bbo,Ibo,YN,Nbo,qbo,jbo,i_,lie,Dbo,Gbo,KN,Obo,Vbo,Xbo,d_,iie,zbo,Wbo,ZN,Qbo,Hbo,Ubo,c_,die,Jbo,Ybo,eq,Kbo,Zbo,e2o,f_,cie,o2o,r2o,oq,t2o,a2o,n2o,m_,fie,s2o,l2o,rq,i2o,d2o,c2o,g_,mie,f2o,m2o,tq,g2o,h2o,p2o,h_,gie,_2o,u2o,aq,b2o,v2o,F2o,p_,hie,T2o,M2o,nq,E2o,C2o,w2o,__,pie,A2o,L2o,sq,y2o,x2o,$2o,u_,_ie,k2o,S2o,lq,R2o,P2o,B2o,b_,uie,I2o,N2o,iq,q2o,j2o,D2o,v_,bie,G2o,O2o,dq,V2o,X2o,z2o,F_,vie,W2o,Q2o,cq,H2o,U2o,J2o,T_,Fie,Y2o,K2o,fq,Z2o,evo,ovo,M_,Tie,rvo,tvo,mq,avo,nvo,svo,E_,Mie,lvo,ivo,gq,dvo,cvo,fvo,C_,Eie,mvo,gvo,hq,hvo,pvo,_vo,w_,Cie,uvo,bvo,pq,vvo,Fvo,Tvo,A_,wie,Mvo,Evo,_q,Cvo,wvo,Avo,L_,Aie,Lvo,yvo,uq,xvo,$vo,kvo,y_,Lie,Svo,Rvo,bq,Pvo,Bvo,Ivo,x_,yie,Nvo,qvo,vq,jvo,Dvo,Gvo,$_,xie,Ovo,Vvo,Fq,Xvo,zvo,Wvo,k_,$ie,Qvo,Hvo,Tq,Uvo,Jvo,Yvo,S_,kie,Kvo,Zvo,Mq,eFo,oFo,rFo,R_,Sie,tFo,aFo,Eq,nFo,sFo,lFo,P_,Rie,iFo,dFo,Cq,cFo,fFo,mFo,B_,Pie,gFo,hFo,wq,pFo,_Fo,uFo,I_,Bie,bFo,vFo,Aq,FFo,TFo,MFo,N_,Iie,EFo,CFo,Lq,wFo,AFo,LFo,q_,Nie,yFo,xFo,yq,$Fo,kFo,SFo,j_,qie,RFo,PFo,xq,BFo,IFo,NFo,D_,jie,qFo,jFo,$q,DFo,GFo,OFo,G_,Die,VFo,XFo,kq,zFo,WFo,QFo,O_,Gie,HFo,UFo,Sq,JFo,YFo,KFo,V_,Oie,ZFo,eTo,Rq,oTo,rTo,tTo,X_,Vie,aTo,nTo,Pq,sTo,lTo,iTo,z_,Xie,dTo,cTo,Bq,fTo,mTo,gTo,W_,zie,hTo,pTo,Iq,_To,uTo,bTo,Q_,Wie,vTo,FTo,Nq,TTo,MTo,ETo,H_,Qie,CTo,wTo,qq,ATo,LTo,yTo,U_,Hie,xTo,$To,jq,kTo,STo,RTo,J_,Uie,PTo,BTo,Dq,ITo,NTo,qTo,Y_,Jie,jTo,DTo,Gq,GTo,OTo,VTo,K_,Yie,XTo,zTo,Oq,WTo,QTo,HTo,Z_,Kie,UTo,JTo,Vq,YTo,KTo,ZTo,eu,Zie,eMo,oMo,Xq,rMo,tMo,aMo,ou,ede,nMo,sMo,zq,lMo,iMo,dMo,ru,ode,cMo,fMo,Wq,mMo,gMo,hMo,tu,rde,pMo,_Mo,Qq,uMo,bMo,vMo,au,tde,FMo,TMo,Hq,MMo,EMo,CMo,nu,ade,wMo,AMo,Uq,LMo,yMo,xMo,su,nde,$Mo,kMo,Jq,SMo,RMo,PMo,lu,sde,BMo,IMo,Yq,NMo,qMo,jMo,iu,lde,DMo,GMo,Kq,OMo,VMo,XMo,du,ide,zMo,WMo,Zq,QMo,HMo,UMo,cu,dde,JMo,YMo,ej,KMo,ZMo,eEo,fu,oEo,cde,rEo,tEo,fde,aEo,nEo,mu,Sje,xi,gu,mde,ML,sEo,gde,lEo,Rje,xo,EL,iEo,$i,dEo,oj,cEo,fEo,rj,mEo,gEo,hEo,CL,pEo,hde,_Eo,uEo,bEo,at,wL,vEo,pde,FEo,TEo,ki,MEo,_de,EEo,CEo,tj,wEo,AEo,LEo,hu,yEo,Ye,AL,xEo,ude,$Eo,kEo,xa,SEo,bde,REo,PEo,vde,BEo,IEo,Fde,NEo,qEo,jEo,G,pu,Tde,DEo,GEo,aj,OEo,VEo,XEo,_u,Mde,zEo,WEo,nj,QEo,HEo,UEo,uu,Ede,JEo,YEo,sj,KEo,ZEo,eCo,bu,Cde,oCo,rCo,lj,tCo,aCo,nCo,vu,wde,sCo,lCo,ij,iCo,dCo,cCo,Fu,Ade,fCo,mCo,dj,gCo,hCo,pCo,Tu,Lde,_Co,uCo,cj,bCo,vCo,FCo,Mu,yde,TCo,MCo,fj,ECo,CCo,wCo,Eu,xde,ACo,LCo,mj,yCo,xCo,$Co,Cu,$de,kCo,SCo,gj,RCo,PCo,BCo,wu,kde,ICo,NCo,hj,qCo,jCo,DCo,Au,Sde,GCo,OCo,pj,VCo,XCo,zCo,Lu,Rde,WCo,QCo,_j,HCo,UCo,JCo,yu,Pde,YCo,KCo,uj,ZCo,e5o,o5o,xu,Bde,r5o,t5o,bj,a5o,n5o,s5o,$u,Ide,l5o,i5o,vj,d5o,c5o,f5o,ku,Nde,m5o,g5o,Fj,h5o,p5o,_5o,Su,qde,u5o,b5o,Tj,v5o,F5o,T5o,Ru,jde,M5o,E5o,Mj,C5o,w5o,A5o,Pu,Dde,L5o,y5o,Ej,x5o,$5o,k5o,Bu,Gde,S5o,R5o,Cj,P5o,B5o,I5o,Iu,Ode,N5o,q5o,wj,j5o,D5o,G5o,Nu,Vde,O5o,V5o,Aj,X5o,z5o,W5o,qu,Xde,Q5o,H5o,Lj,U5o,J5o,Y5o,ju,zde,K5o,Z5o,yj,e3o,o3o,r3o,Du,Wde,t3o,a3o,xj,n3o,s3o,l3o,Gu,Qde,i3o,d3o,$j,c3o,f3o,m3o,Ou,Hde,g3o,h3o,kj,p3o,_3o,u3o,Vu,Ude,b3o,v3o,Sj,F3o,T3o,M3o,Xu,Jde,E3o,C3o,Rj,w3o,A3o,L3o,zu,Yde,y3o,x3o,Pj,$3o,k3o,S3o,Wu,Kde,R3o,P3o,Bj,B3o,I3o,N3o,Qu,Zde,q3o,j3o,Ij,D3o,G3o,O3o,Hu,ece,V3o,X3o,Nj,z3o,W3o,Q3o,Uu,oce,H3o,U3o,qj,J3o,Y3o,K3o,Ju,rce,Z3o,e0o,jj,o0o,r0o,t0o,Yu,tce,a0o,n0o,Dj,s0o,l0o,i0o,Ku,ace,d0o,c0o,Gj,f0o,m0o,g0o,Zu,nce,h0o,p0o,Oj,_0o,u0o,b0o,e4,sce,v0o,F0o,Vj,T0o,M0o,E0o,o4,lce,C0o,w0o,Xj,A0o,L0o,y0o,r4,ice,x0o,$0o,zj,k0o,S0o,R0o,t4,dce,P0o,B0o,Wj,I0o,N0o,q0o,a4,j0o,cce,D0o,G0o,fce,O0o,V0o,n4,Pje,Si,s4,mce,LL,X0o,gce,z0o,Bje,$o,yL,W0o,Ri,Q0o,Qj,H0o,U0o,Hj,J0o,Y0o,K0o,xL,Z0o,hce,ewo,owo,rwo,nt,$L,two,pce,awo,nwo,Pi,swo,_ce,lwo,iwo,Uj,dwo,cwo,fwo,l4,mwo,Ke,kL,gwo,uce,hwo,pwo,$a,_wo,bce,uwo,bwo,vce,vwo,Fwo,Fce,Two,Mwo,Ewo,z,i4,Tce,Cwo,wwo,Jj,Awo,Lwo,ywo,d4,Mce,xwo,$wo,Yj,kwo,Swo,Rwo,c4,Ece,Pwo,Bwo,Kj,Iwo,Nwo,qwo,f4,Cce,jwo,Dwo,Zj,Gwo,Owo,Vwo,m4,wce,Xwo,zwo,eD,Wwo,Qwo,Hwo,g4,Ace,Uwo,Jwo,oD,Ywo,Kwo,Zwo,h4,Lce,eAo,oAo,rD,rAo,tAo,aAo,p4,yce,nAo,sAo,tD,lAo,iAo,dAo,_4,xce,cAo,fAo,aD,mAo,gAo,hAo,u4,$ce,pAo,_Ao,nD,uAo,bAo,vAo,b4,kce,FAo,TAo,sD,MAo,EAo,CAo,v4,Sce,wAo,AAo,lD,LAo,yAo,xAo,F4,Rce,$Ao,kAo,iD,SAo,RAo,PAo,T4,Pce,BAo,IAo,dD,NAo,qAo,jAo,M4,Bce,DAo,GAo,cD,OAo,VAo,XAo,E4,Ice,zAo,WAo,fD,QAo,HAo,UAo,C4,Nce,JAo,YAo,mD,KAo,ZAo,e6o,w4,qce,o6o,r6o,gD,t6o,a6o,n6o,A4,jce,s6o,l6o,hD,i6o,d6o,c6o,L4,Dce,f6o,m6o,pD,g6o,h6o,p6o,y4,Gce,_6o,u6o,_D,b6o,v6o,F6o,x4,Oce,T6o,M6o,uD,E6o,C6o,w6o,$4,Vce,A6o,L6o,bD,y6o,x6o,$6o,k4,Xce,k6o,S6o,vD,R6o,P6o,B6o,S4,zce,I6o,N6o,FD,q6o,j6o,D6o,R4,Wce,G6o,O6o,TD,V6o,X6o,z6o,P4,Qce,W6o,Q6o,MD,H6o,U6o,J6o,B4,Hce,Y6o,K6o,ED,Z6o,eLo,oLo,I4,Uce,rLo,tLo,CD,aLo,nLo,sLo,N4,Jce,lLo,iLo,wD,dLo,cLo,fLo,q4,Yce,mLo,gLo,AD,hLo,pLo,_Lo,j4,Kce,uLo,bLo,LD,vLo,FLo,TLo,D4,Zce,MLo,ELo,yD,CLo,wLo,ALo,G4,efe,LLo,yLo,xD,xLo,$Lo,kLo,O4,ofe,SLo,RLo,$D,PLo,BLo,ILo,V4,rfe,NLo,qLo,kD,jLo,DLo,GLo,X4,tfe,OLo,VLo,SD,XLo,zLo,WLo,z4,afe,QLo,HLo,RD,ULo,JLo,YLo,W4,KLo,nfe,ZLo,eyo,sfe,oyo,ryo,Q4,Ije,Bi,H4,lfe,SL,tyo,ife,ayo,Nje,ko,RL,nyo,Ii,syo,PD,lyo,iyo,BD,dyo,cyo,fyo,PL,myo,dfe,gyo,hyo,pyo,st,BL,_yo,cfe,uyo,byo,Ni,vyo,ffe,Fyo,Tyo,ID,Myo,Eyo,Cyo,U4,wyo,Ze,IL,Ayo,mfe,Lyo,yyo,ka,xyo,gfe,$yo,kyo,hfe,Syo,Ryo,pfe,Pyo,Byo,Iyo,Q,J4,_fe,Nyo,qyo,ND,jyo,Dyo,Gyo,Y4,ufe,Oyo,Vyo,qD,Xyo,zyo,Wyo,K4,bfe,Qyo,Hyo,jD,Uyo,Jyo,Yyo,Z4,vfe,Kyo,Zyo,DD,e8o,o8o,r8o,e1,Ffe,t8o,a8o,GD,n8o,s8o,l8o,o1,Tfe,i8o,d8o,OD,c8o,f8o,m8o,r1,Mfe,g8o,h8o,VD,p8o,_8o,u8o,t1,Efe,b8o,v8o,XD,F8o,T8o,M8o,a1,Cfe,E8o,C8o,zD,w8o,A8o,L8o,n1,wfe,y8o,x8o,WD,$8o,k8o,S8o,s1,Afe,R8o,P8o,QD,B8o,I8o,N8o,l1,Lfe,q8o,j8o,HD,D8o,G8o,O8o,i1,yfe,V8o,X8o,UD,z8o,W8o,Q8o,d1,xfe,H8o,U8o,JD,J8o,Y8o,K8o,c1,$fe,Z8o,e9o,YD,o9o,r9o,t9o,f1,kfe,a9o,n9o,KD,s9o,l9o,i9o,m1,Sfe,d9o,c9o,ZD,f9o,m9o,g9o,g1,Rfe,h9o,p9o,eG,_9o,u9o,b9o,h1,Pfe,v9o,F9o,oG,T9o,M9o,E9o,p1,Bfe,C9o,w9o,rG,A9o,L9o,y9o,_1,Ife,x9o,$9o,tG,k9o,S9o,R9o,u1,Nfe,P9o,B9o,aG,I9o,N9o,q9o,b1,qfe,j9o,D9o,nG,G9o,O9o,V9o,v1,jfe,X9o,z9o,sG,W9o,Q9o,H9o,F1,Dfe,U9o,J9o,lG,Y9o,K9o,Z9o,T1,Gfe,exo,oxo,iG,rxo,txo,axo,M1,Ofe,nxo,sxo,dG,lxo,ixo,dxo,E1,Vfe,cxo,fxo,cG,mxo,gxo,hxo,C1,Xfe,pxo,_xo,fG,uxo,bxo,vxo,w1,zfe,Fxo,Txo,mG,Mxo,Exo,Cxo,A1,Wfe,wxo,Axo,gG,Lxo,yxo,xxo,L1,Qfe,$xo,kxo,Hfe,Sxo,Rxo,Pxo,y1,Ufe,Bxo,Ixo,hG,Nxo,qxo,jxo,x1,Jfe,Dxo,Gxo,pG,Oxo,Vxo,Xxo,$1,Yfe,zxo,Wxo,_G,Qxo,Hxo,Uxo,k1,Kfe,Jxo,Yxo,uG,Kxo,Zxo,e$o,S1,o$o,Zfe,r$o,t$o,eme,a$o,n$o,R1,qje,qi,P1,ome,NL,s$o,rme,l$o,jje,So,qL,i$o,ji,d$o,bG,c$o,f$o,vG,m$o,g$o,h$o,jL,p$o,tme,_$o,u$o,b$o,lt,DL,v$o,ame,F$o,T$o,Di,M$o,nme,E$o,C$o,FG,w$o,A$o,L$o,B1,y$o,eo,GL,x$o,sme,$$o,k$o,Sa,S$o,lme,R$o,P$o,ime,B$o,I$o,dme,N$o,q$o,j$o,_e,I1,cme,D$o,G$o,TG,O$o,V$o,X$o,N1,fme,z$o,W$o,MG,Q$o,H$o,U$o,q1,mme,J$o,Y$o,EG,K$o,Z$o,eko,j1,gme,oko,rko,CG,tko,ako,nko,D1,hme,sko,lko,wG,iko,dko,cko,G1,pme,fko,mko,AG,gko,hko,pko,O1,_me,_ko,uko,LG,bko,vko,Fko,V1,ume,Tko,Mko,yG,Eko,Cko,wko,X1,bme,Ako,Lko,xG,yko,xko,$ko,z1,vme,kko,Sko,$G,Rko,Pko,Bko,W1,Fme,Iko,Nko,kG,qko,jko,Dko,Q1,Tme,Gko,Oko,SG,Vko,Xko,zko,H1,Mme,Wko,Qko,RG,Hko,Uko,Jko,U1,Eme,Yko,Kko,PG,Zko,eSo,oSo,J1,Cme,rSo,tSo,BG,aSo,nSo,sSo,Y1,wme,lSo,iSo,IG,dSo,cSo,fSo,K1,mSo,Ame,gSo,hSo,Lme,pSo,_So,Z1,Dje,Gi,e7,yme,OL,uSo,xme,bSo,Gje,Ro,VL,vSo,Oi,FSo,NG,TSo,MSo,qG,ESo,CSo,wSo,XL,ASo,$me,LSo,ySo,xSo,it,zL,$So,kme,kSo,SSo,Vi,RSo,Sme,PSo,BSo,jG,ISo,NSo,qSo,o7,jSo,oo,WL,DSo,Rme,GSo,OSo,Ra,VSo,Pme,XSo,zSo,Bme,WSo,QSo,Ime,HSo,USo,JSo,N,r7,Nme,YSo,KSo,DG,ZSo,eRo,oRo,t7,qme,rRo,tRo,GG,aRo,nRo,sRo,a7,jme,lRo,iRo,OG,dRo,cRo,fRo,n7,Dme,mRo,gRo,VG,hRo,pRo,_Ro,s7,Gme,uRo,bRo,XG,vRo,FRo,TRo,l7,Ome,MRo,ERo,zG,CRo,wRo,ARo,i7,Vme,LRo,yRo,WG,xRo,$Ro,kRo,d7,Xme,SRo,RRo,QG,PRo,BRo,IRo,c7,zme,NRo,qRo,HG,jRo,DRo,GRo,f7,Wme,ORo,VRo,UG,XRo,zRo,WRo,m7,Qme,QRo,HRo,JG,URo,JRo,YRo,g7,Hme,KRo,ZRo,YG,ePo,oPo,rPo,h7,Ume,tPo,aPo,KG,nPo,sPo,lPo,p7,Jme,iPo,dPo,ZG,cPo,fPo,mPo,_7,Yme,gPo,hPo,eO,pPo,_Po,uPo,u7,Kme,bPo,vPo,oO,FPo,TPo,MPo,b7,Zme,EPo,CPo,rO,wPo,APo,LPo,v7,ege,yPo,xPo,tO,$Po,kPo,SPo,F7,oge,RPo,PPo,aO,BPo,IPo,NPo,T7,rge,qPo,jPo,nO,DPo,GPo,OPo,M7,tge,VPo,XPo,sO,zPo,WPo,QPo,E7,age,HPo,UPo,lO,JPo,YPo,KPo,C7,nge,ZPo,eBo,iO,oBo,rBo,tBo,w7,sge,aBo,nBo,dO,sBo,lBo,iBo,A7,lge,dBo,cBo,cO,fBo,mBo,gBo,L7,ige,hBo,pBo,fO,_Bo,uBo,bBo,y7,dge,vBo,FBo,mO,TBo,MBo,EBo,x7,cge,CBo,wBo,gO,ABo,LBo,yBo,$7,fge,xBo,$Bo,hO,kBo,SBo,RBo,k7,mge,PBo,BBo,pO,IBo,NBo,qBo,S7,gge,jBo,DBo,_O,GBo,OBo,VBo,R7,hge,XBo,zBo,uO,WBo,QBo,HBo,P7,pge,UBo,JBo,bO,YBo,KBo,ZBo,B7,_ge,eIo,oIo,vO,rIo,tIo,aIo,I7,uge,nIo,sIo,FO,lIo,iIo,dIo,N7,bge,cIo,fIo,TO,mIo,gIo,hIo,q7,vge,pIo,_Io,MO,uIo,bIo,vIo,j7,Fge,FIo,TIo,EO,MIo,EIo,CIo,D7,Tge,wIo,AIo,CO,LIo,yIo,xIo,G7,Mge,$Io,kIo,wO,SIo,RIo,PIo,O7,Ege,BIo,IIo,AO,NIo,qIo,jIo,V7,Cge,DIo,GIo,LO,OIo,VIo,XIo,X7,wge,zIo,WIo,yO,QIo,HIo,UIo,z7,Age,JIo,YIo,xO,KIo,ZIo,eNo,W7,Lge,oNo,rNo,$O,tNo,aNo,nNo,Q7,yge,sNo,lNo,kO,iNo,dNo,cNo,H7,xge,fNo,mNo,SO,gNo,hNo,pNo,U7,_No,$ge,uNo,bNo,kge,vNo,FNo,J7,Oje,Xi,Y7,Sge,QL,TNo,Rge,MNo,Vje,Po,HL,ENo,zi,CNo,RO,wNo,ANo,PO,LNo,yNo,xNo,UL,$No,Pge,kNo,SNo,RNo,dt,JL,PNo,Bge,BNo,INo,Wi,NNo,Ige,qNo,jNo,BO,DNo,GNo,ONo,K7,VNo,ro,YL,XNo,Nge,zNo,WNo,Pa,QNo,qge,HNo,UNo,jge,JNo,YNo,Dge,KNo,ZNo,eqo,Z,Z7,Gge,oqo,rqo,IO,tqo,aqo,nqo,eb,Oge,sqo,lqo,NO,iqo,dqo,cqo,ob,Vge,fqo,mqo,qO,gqo,hqo,pqo,rb,Xge,_qo,uqo,jO,bqo,vqo,Fqo,tb,zge,Tqo,Mqo,DO,Eqo,Cqo,wqo,ab,Wge,Aqo,Lqo,GO,yqo,xqo,$qo,nb,Qge,kqo,Sqo,OO,Rqo,Pqo,Bqo,sb,Hge,Iqo,Nqo,VO,qqo,jqo,Dqo,lb,Uge,Gqo,Oqo,XO,Vqo,Xqo,zqo,ib,Jge,Wqo,Qqo,zO,Hqo,Uqo,Jqo,db,Yge,Yqo,Kqo,WO,Zqo,ejo,ojo,cb,Kge,rjo,tjo,QO,ajo,njo,sjo,fb,Zge,ljo,ijo,HO,djo,cjo,fjo,mb,ehe,mjo,gjo,UO,hjo,pjo,_jo,gb,ohe,ujo,bjo,JO,vjo,Fjo,Tjo,hb,rhe,Mjo,Ejo,YO,Cjo,wjo,Ajo,pb,the,Ljo,yjo,KO,xjo,$jo,kjo,_b,ahe,Sjo,Rjo,ZO,Pjo,Bjo,Ijo,ub,nhe,Njo,qjo,eV,jjo,Djo,Gjo,bb,she,Ojo,Vjo,oV,Xjo,zjo,Wjo,vb,lhe,Qjo,Hjo,rV,Ujo,Jjo,Yjo,Fb,ihe,Kjo,Zjo,tV,eDo,oDo,rDo,Tb,dhe,tDo,aDo,aV,nDo,sDo,lDo,Mb,che,iDo,dDo,nV,cDo,fDo,mDo,Eb,fhe,gDo,hDo,sV,pDo,_Do,uDo,Cb,mhe,bDo,vDo,lV,FDo,TDo,MDo,wb,ghe,EDo,CDo,iV,wDo,ADo,LDo,Ab,hhe,yDo,xDo,dV,$Do,kDo,SDo,Lb,phe,RDo,PDo,cV,BDo,IDo,NDo,yb,qDo,_he,jDo,DDo,uhe,GDo,ODo,xb,Xje,Qi,$b,bhe,KL,VDo,vhe,XDo,zje,Bo,ZL,zDo,Hi,WDo,fV,QDo,HDo,mV,UDo,JDo,YDo,ey,KDo,Fhe,ZDo,eGo,oGo,ct,oy,rGo,The,tGo,aGo,Ui,nGo,Mhe,sGo,lGo,gV,iGo,dGo,cGo,kb,fGo,to,ry,mGo,Ehe,gGo,hGo,Ba,pGo,Che,_Go,uGo,whe,bGo,vGo,Ahe,FGo,TGo,MGo,Yr,Sb,Lhe,EGo,CGo,hV,wGo,AGo,LGo,Rb,yhe,yGo,xGo,pV,$Go,kGo,SGo,Pb,xhe,RGo,PGo,_V,BGo,IGo,NGo,Bb,$he,qGo,jGo,uV,DGo,GGo,OGo,Ib,khe,VGo,XGo,bV,zGo,WGo,QGo,Nb,HGo,She,UGo,JGo,Rhe,YGo,KGo,qb,Wje,Ji,jb,Phe,ty,ZGo,Bhe,eOo,Qje,Io,ay,oOo,Yi,rOo,vV,tOo,aOo,FV,nOo,sOo,lOo,ny,iOo,Ihe,dOo,cOo,fOo,ft,sy,mOo,Nhe,gOo,hOo,Ki,pOo,qhe,_Oo,uOo,TV,bOo,vOo,FOo,Db,TOo,ao,ly,MOo,jhe,EOo,COo,Ia,wOo,Dhe,AOo,LOo,Ghe,yOo,xOo,Ohe,$Oo,kOo,SOo,U,Gb,Vhe,ROo,POo,MV,BOo,IOo,NOo,Ob,Xhe,qOo,jOo,EV,DOo,GOo,OOo,Vb,zhe,VOo,XOo,CV,zOo,WOo,QOo,Xb,Whe,HOo,UOo,wV,JOo,YOo,KOo,zb,Qhe,ZOo,eVo,AV,oVo,rVo,tVo,Wb,Hhe,aVo,nVo,LV,sVo,lVo,iVo,Qb,Uhe,dVo,cVo,yV,fVo,mVo,gVo,Hb,Jhe,hVo,pVo,xV,_Vo,uVo,bVo,Ub,Yhe,vVo,FVo,$V,TVo,MVo,EVo,Jb,Khe,CVo,wVo,kV,AVo,LVo,yVo,Yb,Zhe,xVo,$Vo,SV,kVo,SVo,RVo,Kb,epe,PVo,BVo,RV,IVo,NVo,qVo,Zb,ope,jVo,DVo,PV,GVo,OVo,VVo,e2,rpe,XVo,zVo,BV,WVo,QVo,HVo,o2,tpe,UVo,JVo,IV,YVo,KVo,ZVo,r2,ape,eXo,oXo,NV,rXo,tXo,aXo,t2,npe,nXo,sXo,qV,lXo,iXo,dXo,a2,spe,cXo,fXo,jV,mXo,gXo,hXo,n2,lpe,pXo,_Xo,DV,uXo,bXo,vXo,s2,ipe,FXo,TXo,GV,MXo,EXo,CXo,l2,dpe,wXo,AXo,OV,LXo,yXo,xXo,i2,cpe,$Xo,kXo,VV,SXo,RXo,PXo,d2,fpe,BXo,IXo,XV,NXo,qXo,jXo,c2,mpe,DXo,GXo,zV,OXo,VXo,XXo,f2,gpe,zXo,WXo,WV,QXo,HXo,UXo,m2,hpe,JXo,YXo,QV,KXo,ZXo,ezo,g2,ppe,ozo,rzo,HV,tzo,azo,nzo,h2,_pe,szo,lzo,UV,izo,dzo,czo,p2,upe,fzo,mzo,JV,gzo,hzo,pzo,_2,bpe,_zo,uzo,YV,bzo,vzo,Fzo,u2,vpe,Tzo,Mzo,KV,Ezo,Czo,wzo,b2,Fpe,Azo,Lzo,ZV,yzo,xzo,$zo,v2,Tpe,kzo,Szo,eX,Rzo,Pzo,Bzo,F2,Mpe,Izo,Nzo,oX,qzo,jzo,Dzo,T2,Gzo,Epe,Ozo,Vzo,Cpe,Xzo,zzo,M2,Hje,Zi,E2,wpe,iy,Wzo,Ape,Qzo,Uje,No,dy,Hzo,ed,Uzo,rX,Jzo,Yzo,tX,Kzo,Zzo,eWo,cy,oWo,Lpe,rWo,tWo,aWo,mt,fy,nWo,ype,sWo,lWo,od,iWo,xpe,dWo,cWo,aX,fWo,mWo,gWo,C2,hWo,no,my,pWo,$pe,_Wo,uWo,Na,bWo,kpe,vWo,FWo,Spe,TWo,MWo,Rpe,EWo,CWo,wWo,V,w2,Ppe,AWo,LWo,nX,yWo,xWo,$Wo,A2,Bpe,kWo,SWo,sX,RWo,PWo,BWo,L2,Ipe,IWo,NWo,lX,qWo,jWo,DWo,y2,Npe,GWo,OWo,iX,VWo,XWo,zWo,x2,qpe,WWo,QWo,dX,HWo,UWo,JWo,$2,jpe,YWo,KWo,cX,ZWo,eQo,oQo,k2,Dpe,rQo,tQo,fX,aQo,nQo,sQo,S2,Gpe,lQo,iQo,mX,dQo,cQo,fQo,R2,Ope,mQo,gQo,gX,hQo,pQo,_Qo,P2,Vpe,uQo,bQo,hX,vQo,FQo,TQo,B2,Xpe,MQo,EQo,pX,CQo,wQo,AQo,I2,zpe,LQo,yQo,_X,xQo,$Qo,kQo,N2,Wpe,SQo,RQo,uX,PQo,BQo,IQo,q2,Qpe,NQo,qQo,bX,jQo,DQo,GQo,j2,Hpe,OQo,VQo,vX,XQo,zQo,WQo,D2,Upe,QQo,HQo,FX,UQo,JQo,YQo,G2,Jpe,KQo,ZQo,TX,eHo,oHo,rHo,O2,Ype,tHo,aHo,MX,nHo,sHo,lHo,V2,Kpe,iHo,dHo,EX,cHo,fHo,mHo,X2,Zpe,gHo,hHo,CX,pHo,_Ho,uHo,z2,e_e,bHo,vHo,wX,FHo,THo,MHo,W2,o_e,EHo,CHo,AX,wHo,AHo,LHo,Q2,r_e,yHo,xHo,LX,$Ho,kHo,SHo,H2,t_e,RHo,PHo,yX,BHo,IHo,NHo,U2,a_e,qHo,jHo,xX,DHo,GHo,OHo,J2,n_e,VHo,XHo,$X,zHo,WHo,QHo,Y2,s_e,HHo,UHo,kX,JHo,YHo,KHo,K2,l_e,ZHo,eUo,SX,oUo,rUo,tUo,Z2,i_e,aUo,nUo,RX,sUo,lUo,iUo,ev,d_e,dUo,cUo,PX,fUo,mUo,gUo,ov,c_e,hUo,pUo,BX,_Uo,uUo,bUo,rv,f_e,vUo,FUo,IX,TUo,MUo,EUo,tv,m_e,CUo,wUo,NX,AUo,LUo,yUo,av,g_e,xUo,$Uo,qX,kUo,SUo,RUo,nv,h_e,PUo,BUo,jX,IUo,NUo,qUo,sv,p_e,jUo,DUo,DX,GUo,OUo,VUo,lv,__e,XUo,zUo,GX,WUo,QUo,HUo,iv,u_e,UUo,JUo,OX,YUo,KUo,ZUo,dv,b_e,eJo,oJo,VX,rJo,tJo,aJo,cv,v_e,nJo,sJo,XX,lJo,iJo,dJo,fv,cJo,F_e,fJo,mJo,T_e,gJo,hJo,mv,Jje,rd,gv,M_e,gy,pJo,E_e,_Jo,Yje,qo,hy,uJo,td,bJo,zX,vJo,FJo,WX,TJo,MJo,EJo,py,CJo,C_e,wJo,AJo,LJo,gt,_y,yJo,w_e,xJo,$Jo,ad,kJo,A_e,SJo,RJo,QX,PJo,BJo,IJo,hv,NJo,so,uy,qJo,L_e,jJo,DJo,qa,GJo,y_e,OJo,VJo,x_e,XJo,zJo,$_e,WJo,QJo,HJo,k_e,pv,S_e,UJo,JJo,HX,YJo,KJo,ZJo,_v,eYo,R_e,oYo,rYo,P_e,tYo,aYo,uv,Kje,nd,bv,B_e,by,nYo,I_e,sYo,Zje,jo,vy,lYo,sd,iYo,UX,dYo,cYo,JX,fYo,mYo,gYo,Fy,hYo,N_e,pYo,_Yo,uYo,ht,Ty,bYo,q_e,vYo,FYo,ld,TYo,j_e,MYo,EYo,YX,CYo,wYo,AYo,vv,LYo,lo,My,yYo,D_e,xYo,$Yo,ja,kYo,G_e,SYo,RYo,O_e,PYo,BYo,V_e,IYo,NYo,qYo,ve,Fv,X_e,jYo,DYo,KX,GYo,OYo,VYo,Tv,z_e,XYo,zYo,ZX,WYo,QYo,HYo,Mv,W_e,UYo,JYo,ez,YYo,KYo,ZYo,Ev,Q_e,eKo,oKo,oz,rKo,tKo,aKo,Bs,H_e,nKo,sKo,rz,lKo,iKo,tz,dKo,cKo,fKo,Cv,U_e,mKo,gKo,az,hKo,pKo,_Ko,Is,J_e,uKo,bKo,nz,vKo,FKo,sz,TKo,MKo,EKo,pt,Y_e,CKo,wKo,lz,AKo,LKo,iz,yKo,xKo,dz,$Ko,kKo,SKo,wv,K_e,RKo,PKo,cz,BKo,IKo,NKo,Av,Z_e,qKo,jKo,fz,DKo,GKo,OKo,Lv,eue,VKo,XKo,mz,zKo,WKo,QKo,yv,oue,HKo,UKo,gz,JKo,YKo,KKo,xv,rue,ZKo,eZo,hz,oZo,rZo,tZo,$v,tue,aZo,nZo,pz,sZo,lZo,iZo,kv,aue,dZo,cZo,_z,fZo,mZo,gZo,Sv,hZo,nue,pZo,_Zo,sue,uZo,bZo,Rv,eDe,id,Pv,lue,Ey,vZo,iue,FZo,oDe,Do,Cy,TZo,dd,MZo,uz,EZo,CZo,bz,wZo,AZo,LZo,wy,yZo,due,xZo,$Zo,kZo,_t,Ay,SZo,cue,RZo,PZo,cd,BZo,fue,IZo,NZo,vz,qZo,jZo,DZo,Bv,GZo,io,Ly,OZo,mue,VZo,XZo,Da,zZo,gue,WZo,QZo,hue,HZo,UZo,pue,JZo,YZo,KZo,_ue,Iv,uue,ZZo,eer,Fz,oer,rer,ter,Nv,aer,bue,ner,ser,vue,ler,ier,qv,rDe,fd,jv,Fue,yy,der,Tue,cer,tDe,Go,xy,fer,md,mer,Tz,ger,her,Mz,per,_er,uer,$y,ber,Mue,ver,Fer,Ter,ut,ky,Mer,Eue,Eer,Cer,gd,wer,Cue,Aer,Ler,Ez,yer,xer,$er,Dv,ker,co,Sy,Ser,wue,Rer,Per,Ga,Ber,Aue,Ier,Ner,Lue,qer,jer,yue,Der,Ger,Oer,Re,Gv,xue,Ver,Xer,Cz,zer,Wer,Qer,Ov,$ue,Her,Uer,wz,Jer,Yer,Ker,Vv,kue,Zer,eor,Az,oor,ror,tor,Xv,Sue,aor,nor,Lz,sor,lor,ior,zv,Rue,dor,cor,yz,mor,gor,hor,Wv,Pue,por,_or,xz,uor,bor,vor,Qv,Bue,For,Tor,$z,Mor,Eor,Cor,Hv,Iue,wor,Aor,kz,Lor,yor,xor,Uv,Nue,$or,kor,Sz,Sor,Ror,Por,Jv,Bor,que,Ior,Nor,jue,qor,jor,Yv,aDe,hd,Kv,Due,Ry,Dor,Gue,Gor,nDe,Oo,Py,Oor,pd,Vor,Rz,Xor,zor,Pz,Wor,Qor,Hor,By,Uor,Oue,Jor,Yor,Kor,bt,Iy,Zor,Vue,err,orr,_d,rrr,Xue,trr,arr,Bz,nrr,srr,lrr,Zv,irr,fo,Ny,drr,zue,crr,frr,Oa,mrr,Wue,grr,hrr,Que,prr,_rr,Hue,urr,brr,vrr,Kr,eF,Uue,Frr,Trr,Iz,Mrr,Err,Crr,oF,Jue,wrr,Arr,Nz,Lrr,yrr,xrr,rF,Yue,$rr,krr,qz,Srr,Rrr,Prr,tF,Kue,Brr,Irr,jz,Nrr,qrr,jrr,aF,Zue,Drr,Grr,Dz,Orr,Vrr,Xrr,nF,zrr,e4e,Wrr,Qrr,o4e,Hrr,Urr,sF,sDe,ud,lF,r4e,qy,Jrr,t4e,Yrr,lDe,Vo,jy,Krr,bd,Zrr,Gz,etr,otr,Oz,rtr,ttr,atr,Dy,ntr,a4e,str,ltr,itr,vt,Gy,dtr,n4e,ctr,ftr,vd,mtr,s4e,gtr,htr,Vz,ptr,_tr,utr,iF,btr,mo,Oy,vtr,l4e,Ftr,Ttr,Va,Mtr,i4e,Etr,Ctr,d4e,wtr,Atr,c4e,Ltr,ytr,xtr,Le,dF,f4e,$tr,ktr,Xz,Str,Rtr,Ptr,cF,m4e,Btr,Itr,zz,Ntr,qtr,jtr,fF,g4e,Dtr,Gtr,Wz,Otr,Vtr,Xtr,mF,h4e,ztr,Wtr,Qz,Qtr,Htr,Utr,gF,p4e,Jtr,Ytr,Hz,Ktr,Ztr,ear,hF,_4e,oar,rar,Uz,tar,aar,nar,pF,u4e,sar,lar,Jz,iar,dar,car,_F,b4e,far,mar,Yz,gar,har,par,uF,v4e,_ar,uar,Kz,bar,Far,Tar,bF,F4e,Mar,Ear,Zz,Car,war,Aar,vF,Lar,T4e,yar,xar,M4e,$ar,kar,FF,iDe,Fd,TF,E4e,Vy,Sar,C4e,Rar,dDe,Xo,Xy,Par,Td,Bar,eW,Iar,Nar,oW,qar,jar,Dar,zy,Gar,w4e,Oar,Var,Xar,Ft,Wy,zar,A4e,War,Qar,Md,Har,L4e,Uar,Jar,rW,Yar,Kar,Zar,MF,enr,go,Qy,onr,y4e,rnr,tnr,Xa,anr,x4e,nnr,snr,$4e,lnr,inr,k4e,dnr,cnr,fnr,Hy,EF,S4e,mnr,gnr,tW,hnr,pnr,_nr,CF,R4e,unr,bnr,aW,vnr,Fnr,Tnr,wF,Mnr,P4e,Enr,Cnr,B4e,wnr,Anr,AF,cDe,Ed,LF,I4e,Uy,Lnr,N4e,ynr,fDe,zo,Jy,xnr,Cd,$nr,nW,knr,Snr,sW,Rnr,Pnr,Bnr,Yy,Inr,q4e,Nnr,qnr,jnr,Tt,Ky,Dnr,j4e,Gnr,Onr,wd,Vnr,D4e,Xnr,znr,lW,Wnr,Qnr,Hnr,yF,Unr,ho,Zy,Jnr,G4e,Ynr,Knr,za,Znr,O4e,esr,osr,V4e,rsr,tsr,X4e,asr,nsr,ssr,Zr,xF,z4e,lsr,isr,iW,dsr,csr,fsr,$F,W4e,msr,gsr,dW,hsr,psr,_sr,kF,Q4e,usr,bsr,cW,vsr,Fsr,Tsr,SF,H4e,Msr,Esr,fW,Csr,wsr,Asr,RF,U4e,Lsr,ysr,mW,xsr,$sr,ksr,PF,Ssr,J4e,Rsr,Psr,Y4e,Bsr,Isr,BF,mDe,Ad,IF,K4e,e8,Nsr,Z4e,qsr,gDe,Wo,o8,jsr,Ld,Dsr,gW,Gsr,Osr,hW,Vsr,Xsr,zsr,r8,Wsr,e1e,Qsr,Hsr,Usr,Mt,t8,Jsr,o1e,Ysr,Ksr,yd,Zsr,r1e,elr,olr,pW,rlr,tlr,alr,NF,nlr,po,a8,slr,t1e,llr,ilr,Wa,dlr,a1e,clr,flr,n1e,mlr,glr,s1e,hlr,plr,_lr,xd,qF,l1e,ulr,blr,_W,vlr,Flr,Tlr,jF,i1e,Mlr,Elr,uW,Clr,wlr,Alr,DF,d1e,Llr,ylr,bW,xlr,$lr,klr,GF,Slr,c1e,Rlr,Plr,f1e,Blr,Ilr,OF,hDe,$d,VF,m1e,n8,Nlr,g1e,qlr,pDe,Qo,s8,jlr,kd,Dlr,vW,Glr,Olr,FW,Vlr,Xlr,zlr,l8,Wlr,h1e,Qlr,Hlr,Ulr,Et,i8,Jlr,p1e,Ylr,Klr,Sd,Zlr,_1e,eir,oir,TW,rir,tir,air,XF,nir,_o,d8,sir,u1e,lir,iir,Qa,dir,b1e,cir,fir,v1e,mir,gir,F1e,hir,pir,_ir,c8,zF,T1e,uir,bir,MW,vir,Fir,Tir,WF,M1e,Mir,Eir,EW,Cir,wir,Air,QF,Lir,E1e,yir,xir,C1e,$ir,kir,HF,_De,Rd,UF,w1e,f8,Sir,A1e,Rir,uDe,Ho,m8,Pir,Pd,Bir,CW,Iir,Nir,wW,qir,jir,Dir,g8,Gir,L1e,Oir,Vir,Xir,Ct,h8,zir,y1e,Wir,Qir,Bd,Hir,x1e,Uir,Jir,AW,Yir,Kir,Zir,JF,edr,uo,p8,odr,$1e,rdr,tdr,Ha,adr,k1e,ndr,sdr,S1e,ldr,idr,R1e,ddr,cdr,fdr,P1e,YF,B1e,mdr,gdr,LW,hdr,pdr,_dr,KF,udr,I1e,bdr,vdr,N1e,Fdr,Tdr,ZF,bDe,Id,eT,q1e,_8,Mdr,j1e,Edr,vDe,Uo,u8,Cdr,Nd,wdr,yW,Adr,Ldr,xW,ydr,xdr,$dr,b8,kdr,D1e,Sdr,Rdr,Pdr,wt,v8,Bdr,G1e,Idr,Ndr,qd,qdr,O1e,jdr,Ddr,$W,Gdr,Odr,Vdr,oT,Xdr,bo,F8,zdr,V1e,Wdr,Qdr,Ua,Hdr,X1e,Udr,Jdr,z1e,Ydr,Kdr,W1e,Zdr,ecr,ocr,Ja,rT,Q1e,rcr,tcr,kW,acr,ncr,scr,tT,H1e,lcr,icr,SW,dcr,ccr,fcr,aT,U1e,mcr,gcr,RW,hcr,pcr,_cr,nT,J1e,ucr,bcr,PW,vcr,Fcr,Tcr,sT,Mcr,Y1e,Ecr,Ccr,K1e,wcr,Acr,lT,FDe,jd,iT,Z1e,T8,Lcr,e7e,ycr,TDe,Jo,M8,xcr,Dd,$cr,BW,kcr,Scr,IW,Rcr,Pcr,Bcr,E8,Icr,o7e,Ncr,qcr,jcr,At,C8,Dcr,r7e,Gcr,Ocr,Gd,Vcr,t7e,Xcr,zcr,NW,Wcr,Qcr,Hcr,dT,Ucr,vo,w8,Jcr,a7e,Ycr,Kcr,Ya,Zcr,n7e,efr,ofr,s7e,rfr,tfr,l7e,afr,nfr,sfr,i7e,cT,d7e,lfr,ifr,qW,dfr,cfr,ffr,fT,mfr,c7e,gfr,hfr,f7e,pfr,_fr,mT,MDe,Od,gT,m7e,A8,ufr,g7e,bfr,EDe,Yo,L8,vfr,Vd,Ffr,jW,Tfr,Mfr,DW,Efr,Cfr,wfr,y8,Afr,h7e,Lfr,yfr,xfr,Lt,x8,$fr,p7e,kfr,Sfr,Xd,Rfr,_7e,Pfr,Bfr,GW,Ifr,Nfr,qfr,hT,jfr,wr,$8,Dfr,u7e,Gfr,Ofr,Ka,Vfr,b7e,Xfr,zfr,v7e,Wfr,Qfr,F7e,Hfr,Ufr,Jfr,q,pT,T7e,Yfr,Kfr,OW,Zfr,emr,omr,_T,M7e,rmr,tmr,VW,amr,nmr,smr,uT,E7e,lmr,imr,XW,dmr,cmr,fmr,bT,C7e,mmr,gmr,zW,hmr,pmr,_mr,vT,w7e,umr,bmr,WW,vmr,Fmr,Tmr,FT,A7e,Mmr,Emr,QW,Cmr,wmr,Amr,TT,L7e,Lmr,ymr,HW,xmr,$mr,kmr,MT,y7e,Smr,Rmr,UW,Pmr,Bmr,Imr,ET,x7e,Nmr,qmr,JW,jmr,Dmr,Gmr,CT,$7e,Omr,Vmr,YW,Xmr,zmr,Wmr,wT,k7e,Qmr,Hmr,KW,Umr,Jmr,Ymr,AT,S7e,Kmr,Zmr,ZW,egr,ogr,rgr,LT,R7e,tgr,agr,eQ,ngr,sgr,lgr,yT,P7e,igr,dgr,oQ,cgr,fgr,mgr,xT,B7e,ggr,hgr,rQ,pgr,_gr,ugr,$T,I7e,bgr,vgr,tQ,Fgr,Tgr,Mgr,kT,N7e,Egr,Cgr,aQ,wgr,Agr,Lgr,Ns,q7e,ygr,xgr,nQ,$gr,kgr,sQ,Sgr,Rgr,Pgr,ST,j7e,Bgr,Igr,lQ,Ngr,qgr,jgr,RT,D7e,Dgr,Ggr,iQ,Ogr,Vgr,Xgr,PT,G7e,zgr,Wgr,dQ,Qgr,Hgr,Ugr,BT,O7e,Jgr,Ygr,cQ,Kgr,Zgr,ehr,IT,V7e,ohr,rhr,fQ,thr,ahr,nhr,NT,X7e,shr,lhr,mQ,ihr,dhr,chr,qT,z7e,fhr,mhr,gQ,ghr,hhr,phr,jT,W7e,_hr,uhr,hQ,bhr,vhr,Fhr,DT,Q7e,Thr,Mhr,pQ,Ehr,Chr,whr,GT,H7e,Ahr,Lhr,_Q,yhr,xhr,$hr,OT,U7e,khr,Shr,uQ,Rhr,Phr,Bhr,VT,J7e,Ihr,Nhr,bQ,qhr,jhr,Dhr,XT,Y7e,Ghr,Ohr,vQ,Vhr,Xhr,zhr,zT,K7e,Whr,Qhr,FQ,Hhr,Uhr,Jhr,WT,Z7e,Yhr,Khr,TQ,Zhr,epr,opr,QT,ebe,rpr,tpr,MQ,apr,npr,spr,HT,obe,lpr,ipr,EQ,dpr,cpr,fpr,UT,rbe,mpr,gpr,CQ,hpr,ppr,_pr,JT,tbe,upr,bpr,wQ,vpr,Fpr,Tpr,YT,abe,Mpr,Epr,AQ,Cpr,wpr,Apr,KT,nbe,Lpr,ypr,LQ,xpr,$pr,kpr,ZT,sbe,Spr,Rpr,yQ,Ppr,Bpr,Ipr,eM,lbe,Npr,qpr,xQ,jpr,Dpr,Gpr,oM,ibe,Opr,Vpr,$Q,Xpr,zpr,Wpr,rM,dbe,Qpr,Hpr,kQ,Upr,Jpr,Ypr,tM,cbe,Kpr,Zpr,SQ,e_r,o_r,r_r,aM,fbe,t_r,a_r,RQ,n_r,s_r,l_r,nM,mbe,i_r,d_r,PQ,c_r,f_r,m_r,sM,gbe,g_r,h_r,BQ,p_r,__r,u_r,lM,CDe,zd,iM,hbe,k8,b_r,pbe,v_r,wDe,Ko,S8,F_r,Wd,T_r,IQ,M_r,E_r,NQ,C_r,w_r,A_r,R8,L_r,_be,y_r,x_r,$_r,yt,P8,k_r,ube,S_r,R_r,Qd,P_r,bbe,B_r,I_r,qQ,N_r,q_r,j_r,dM,D_r,Ar,B8,G_r,vbe,O_r,V_r,Za,X_r,Fbe,z_r,W_r,Tbe,Q_r,H_r,Mbe,U_r,J_r,Y_r,se,cM,Ebe,K_r,Z_r,jQ,eur,our,rur,fM,Cbe,tur,aur,DQ,nur,sur,lur,mM,wbe,iur,dur,GQ,cur,fur,mur,gM,Abe,gur,hur,OQ,pur,_ur,uur,hM,Lbe,bur,vur,VQ,Fur,Tur,Mur,pM,ybe,Eur,Cur,XQ,wur,Aur,Lur,_M,xbe,yur,xur,zQ,$ur,kur,Sur,uM,$be,Rur,Pur,WQ,Bur,Iur,Nur,bM,kbe,qur,jur,QQ,Dur,Gur,Our,vM,Sbe,Vur,Xur,HQ,zur,Wur,Qur,FM,Rbe,Hur,Uur,UQ,Jur,Yur,Kur,TM,Pbe,Zur,e4r,JQ,o4r,r4r,t4r,MM,Bbe,a4r,n4r,YQ,s4r,l4r,i4r,EM,Ibe,d4r,c4r,KQ,f4r,m4r,g4r,CM,Nbe,h4r,p4r,ZQ,_4r,u4r,b4r,wM,qbe,v4r,F4r,eH,T4r,M4r,E4r,AM,jbe,C4r,w4r,oH,A4r,L4r,y4r,LM,Dbe,x4r,$4r,rH,k4r,S4r,R4r,yM,Gbe,P4r,B4r,tH,I4r,N4r,q4r,xM,Obe,j4r,D4r,aH,G4r,O4r,V4r,$M,Vbe,X4r,z4r,nH,W4r,Q4r,H4r,kM,Xbe,U4r,J4r,sH,Y4r,K4r,Z4r,SM,zbe,e1r,o1r,lH,r1r,t1r,a1r,RM,ADe,Hd,PM,Wbe,I8,n1r,Qbe,s1r,LDe,Zo,N8,l1r,Ud,i1r,iH,d1r,c1r,dH,f1r,m1r,g1r,q8,h1r,Hbe,p1r,_1r,u1r,xt,j8,b1r,Ube,v1r,F1r,Jd,T1r,Jbe,M1r,E1r,cH,C1r,w1r,A1r,BM,L1r,Lr,D8,y1r,Ybe,x1r,$1r,en,k1r,Kbe,S1r,R1r,Zbe,P1r,B1r,e2e,I1r,N1r,q1r,Me,IM,o2e,j1r,D1r,fH,G1r,O1r,V1r,NM,r2e,X1r,z1r,mH,W1r,Q1r,H1r,qM,t2e,U1r,J1r,gH,Y1r,K1r,Z1r,jM,a2e,e7r,o7r,hH,r7r,t7r,a7r,DM,n2e,n7r,s7r,pH,l7r,i7r,d7r,GM,s2e,c7r,f7r,_H,m7r,g7r,h7r,OM,l2e,p7r,_7r,uH,u7r,b7r,v7r,VM,i2e,F7r,T7r,bH,M7r,E7r,C7r,XM,d2e,w7r,A7r,vH,L7r,y7r,x7r,zM,c2e,$7r,k7r,FH,S7r,R7r,P7r,WM,f2e,B7r,I7r,TH,N7r,q7r,j7r,QM,m2e,D7r,G7r,MH,O7r,V7r,X7r,HM,g2e,z7r,W7r,EH,Q7r,H7r,U7r,UM,yDe,Yd,JM,h2e,G8,J7r,p2e,Y7r,xDe,er,O8,K7r,Kd,Z7r,CH,ebr,obr,wH,rbr,tbr,abr,V8,nbr,_2e,sbr,lbr,ibr,$t,X8,dbr,u2e,cbr,fbr,Zd,mbr,b2e,gbr,hbr,AH,pbr,_br,ubr,YM,bbr,yr,z8,vbr,v2e,Fbr,Tbr,on,Mbr,F2e,Ebr,Cbr,T2e,wbr,Abr,M2e,Lbr,ybr,xbr,rn,KM,E2e,$br,kbr,LH,Sbr,Rbr,Pbr,ZM,C2e,Bbr,Ibr,yH,Nbr,qbr,jbr,eE,w2e,Dbr,Gbr,xH,Obr,Vbr,Xbr,oE,A2e,zbr,Wbr,$H,Qbr,Hbr,Ubr,rE,$De,ec,tE,L2e,W8,Jbr,y2e,Ybr,kDe,or,Q8,Kbr,oc,Zbr,kH,e2r,o2r,SH,r2r,t2r,a2r,H8,n2r,x2e,s2r,l2r,i2r,kt,U8,d2r,$2e,c2r,f2r,rc,m2r,k2e,g2r,h2r,RH,p2r,_2r,u2r,aE,b2r,xr,J8,v2r,S2e,F2r,T2r,tn,M2r,R2e,E2r,C2r,P2e,w2r,A2r,B2e,L2r,y2r,x2r,ie,nE,I2e,$2r,k2r,PH,S2r,R2r,P2r,sE,N2e,B2r,I2r,BH,N2r,q2r,j2r,lE,q2e,D2r,G2r,IH,O2r,V2r,X2r,iE,j2e,z2r,W2r,NH,Q2r,H2r,U2r,dE,D2e,J2r,Y2r,qH,K2r,Z2r,evr,cE,G2e,ovr,rvr,jH,tvr,avr,nvr,fE,O2e,svr,lvr,DH,ivr,dvr,cvr,mE,V2e,fvr,mvr,GH,gvr,hvr,pvr,gE,X2e,_vr,uvr,OH,bvr,vvr,Fvr,hE,z2e,Tvr,Mvr,VH,Evr,Cvr,wvr,pE,W2e,Avr,Lvr,XH,yvr,xvr,$vr,_E,Q2e,kvr,Svr,zH,Rvr,Pvr,Bvr,uE,H2e,Ivr,Nvr,WH,qvr,jvr,Dvr,bE,U2e,Gvr,Ovr,QH,Vvr,Xvr,zvr,vE,J2e,Wvr,Qvr,HH,Hvr,Uvr,Jvr,FE,Y2e,Yvr,Kvr,UH,Zvr,eFr,oFr,TE,K2e,rFr,tFr,JH,aFr,nFr,sFr,ME,Z2e,lFr,iFr,YH,dFr,cFr,fFr,EE,eve,mFr,gFr,KH,hFr,pFr,_Fr,CE,ove,uFr,bFr,ZH,vFr,FFr,TFr,wE,SDe,tc,AE,rve,Y8,MFr,tve,EFr,RDe,rr,K8,CFr,ac,wFr,eU,AFr,LFr,oU,yFr,xFr,$Fr,Z8,kFr,ave,SFr,RFr,PFr,St,e9,BFr,nve,IFr,NFr,nc,qFr,sve,jFr,DFr,rU,GFr,OFr,VFr,LE,XFr,$r,o9,zFr,lve,WFr,QFr,an,HFr,ive,UFr,JFr,dve,YFr,KFr,cve,ZFr,eTr,oTr,ye,yE,fve,rTr,tTr,tU,aTr,nTr,sTr,xE,mve,lTr,iTr,aU,dTr,cTr,fTr,$E,gve,mTr,gTr,nU,hTr,pTr,_Tr,kE,hve,uTr,bTr,sU,vTr,FTr,TTr,SE,pve,MTr,ETr,lU,CTr,wTr,ATr,RE,_ve,LTr,yTr,iU,xTr,$Tr,kTr,PE,uve,STr,RTr,dU,PTr,BTr,ITr,BE,bve,NTr,qTr,cU,jTr,DTr,GTr,IE,vve,OTr,VTr,fU,XTr,zTr,WTr,NE,Fve,QTr,HTr,mU,UTr,JTr,YTr,qE,PDe,sc,jE,Tve,r9,KTr,Mve,ZTr,BDe,tr,t9,eMr,lc,oMr,gU,rMr,tMr,hU,aMr,nMr,sMr,a9,lMr,Eve,iMr,dMr,cMr,Rt,n9,fMr,Cve,mMr,gMr,ic,hMr,wve,pMr,_Mr,pU,uMr,bMr,vMr,DE,FMr,kr,s9,TMr,Ave,MMr,EMr,nn,CMr,Lve,wMr,AMr,yve,LMr,yMr,xve,xMr,$Mr,kMr,oe,GE,$ve,SMr,RMr,_U,PMr,BMr,IMr,OE,kve,NMr,qMr,uU,jMr,DMr,GMr,VE,Sve,OMr,VMr,bU,XMr,zMr,WMr,XE,Rve,QMr,HMr,vU,UMr,JMr,YMr,zE,Pve,KMr,ZMr,FU,eEr,oEr,rEr,WE,Bve,tEr,aEr,TU,nEr,sEr,lEr,QE,Ive,iEr,dEr,MU,cEr,fEr,mEr,HE,Nve,gEr,hEr,EU,pEr,_Er,uEr,UE,qve,bEr,vEr,CU,FEr,TEr,MEr,JE,jve,EEr,CEr,wU,wEr,AEr,LEr,YE,Dve,yEr,xEr,AU,$Er,kEr,SEr,KE,Gve,REr,PEr,LU,BEr,IEr,NEr,ZE,Ove,qEr,jEr,yU,DEr,GEr,OEr,eC,Vve,VEr,XEr,xU,zEr,WEr,QEr,oC,Xve,HEr,UEr,$U,JEr,YEr,KEr,rC,zve,ZEr,eCr,kU,oCr,rCr,tCr,tC,Wve,aCr,nCr,SU,sCr,lCr,iCr,aC,Qve,dCr,cCr,RU,fCr,mCr,gCr,nC,Hve,hCr,pCr,PU,_Cr,uCr,bCr,sC,Uve,vCr,FCr,BU,TCr,MCr,ECr,lC,Jve,CCr,wCr,IU,ACr,LCr,yCr,iC,Yve,xCr,$Cr,NU,kCr,SCr,RCr,dC,Kve,PCr,BCr,qU,ICr,NCr,qCr,cC,Zve,jCr,DCr,jU,GCr,OCr,VCr,fC,eFe,XCr,zCr,DU,WCr,QCr,HCr,mC,oFe,UCr,JCr,GU,YCr,KCr,ZCr,gC,IDe,dc,hC,rFe,l9,e5r,tFe,o5r,NDe,ar,i9,r5r,cc,t5r,OU,a5r,n5r,VU,s5r,l5r,i5r,d9,d5r,aFe,c5r,f5r,m5r,Pt,c9,g5r,nFe,h5r,p5r,fc,_5r,sFe,u5r,b5r,XU,v5r,F5r,T5r,pC,M5r,Sr,f9,E5r,lFe,C5r,w5r,sn,A5r,iFe,L5r,y5r,dFe,x5r,$5r,cFe,k5r,S5r,R5r,pe,_C,fFe,P5r,B5r,zU,I5r,N5r,q5r,uC,mFe,j5r,D5r,WU,G5r,O5r,V5r,bC,gFe,X5r,z5r,QU,W5r,Q5r,H5r,vC,hFe,U5r,J5r,HU,Y5r,K5r,Z5r,FC,pFe,e3r,o3r,UU,r3r,t3r,a3r,TC,_Fe,n3r,s3r,JU,l3r,i3r,d3r,MC,uFe,c3r,f3r,YU,m3r,g3r,h3r,EC,bFe,p3r,_3r,KU,u3r,b3r,v3r,CC,vFe,F3r,T3r,ZU,M3r,E3r,C3r,wC,FFe,w3r,A3r,eJ,L3r,y3r,x3r,AC,TFe,$3r,k3r,oJ,S3r,R3r,P3r,LC,MFe,B3r,I3r,rJ,N3r,q3r,j3r,yC,EFe,D3r,G3r,tJ,O3r,V3r,X3r,xC,CFe,z3r,W3r,aJ,Q3r,H3r,U3r,$C,wFe,J3r,Y3r,nJ,K3r,Z3r,e0r,kC,AFe,o0r,r0r,sJ,t0r,a0r,n0r,SC,LFe,s0r,l0r,lJ,i0r,d0r,c0r,RC,qDe,mc,PC,yFe,m9,f0r,xFe,m0r,jDe,nr,g9,g0r,gc,h0r,iJ,p0r,_0r,dJ,u0r,b0r,v0r,h9,F0r,$Fe,T0r,M0r,E0r,Bt,p9,C0r,kFe,w0r,A0r,hc,L0r,SFe,y0r,x0r,cJ,$0r,k0r,S0r,BC,R0r,Rr,_9,P0r,RFe,B0r,I0r,ln,N0r,PFe,q0r,j0r,BFe,D0r,G0r,IFe,O0r,V0r,X0r,u9,IC,NFe,z0r,W0r,fJ,Q0r,H0r,U0r,NC,qFe,J0r,Y0r,mJ,K0r,Z0r,ewr,qC,DDe,pc,jC,jFe,b9,owr,DFe,rwr,GDe,sr,v9,twr,_c,awr,gJ,nwr,swr,hJ,lwr,iwr,dwr,F9,cwr,GFe,fwr,mwr,gwr,It,T9,hwr,OFe,pwr,_wr,uc,uwr,VFe,bwr,vwr,pJ,Fwr,Twr,Mwr,DC,Ewr,Pr,M9,Cwr,XFe,wwr,Awr,dn,Lwr,zFe,ywr,xwr,WFe,$wr,kwr,QFe,Swr,Rwr,Pwr,HFe,GC,UFe,Bwr,Iwr,_J,Nwr,qwr,jwr,OC,ODe,bc,VC,JFe,E9,Dwr,YFe,Gwr,VDe,lr,C9,Owr,vc,Vwr,uJ,Xwr,zwr,bJ,Wwr,Qwr,Hwr,w9,Uwr,KFe,Jwr,Ywr,Kwr,Nt,A9,Zwr,ZFe,eAr,oAr,Fc,rAr,eTe,tAr,aAr,vJ,nAr,sAr,lAr,XC,iAr,Br,L9,dAr,oTe,cAr,fAr,cn,mAr,rTe,gAr,hAr,tTe,pAr,_Ar,aTe,uAr,bAr,vAr,de,zC,nTe,FAr,TAr,FJ,MAr,EAr,CAr,WC,sTe,wAr,AAr,TJ,LAr,yAr,xAr,QC,lTe,$Ar,kAr,MJ,SAr,RAr,PAr,HC,iTe,BAr,IAr,EJ,NAr,qAr,jAr,UC,dTe,DAr,GAr,CJ,OAr,VAr,XAr,JC,cTe,zAr,WAr,wJ,QAr,HAr,UAr,YC,fTe,JAr,YAr,AJ,KAr,ZAr,e6r,KC,mTe,o6r,r6r,LJ,t6r,a6r,n6r,ZC,gTe,s6r,l6r,yJ,i6r,d6r,c6r,e5,hTe,f6r,m6r,xJ,g6r,h6r,p6r,o5,pTe,_6r,u6r,$J,b6r,v6r,F6r,r5,_Te,T6r,M6r,kJ,E6r,C6r,w6r,t5,uTe,A6r,L6r,SJ,y6r,x6r,$6r,a5,bTe,k6r,S6r,RJ,R6r,P6r,B6r,n5,vTe,I6r,N6r,PJ,q6r,j6r,D6r,s5,FTe,G6r,O6r,BJ,V6r,X6r,z6r,l5,TTe,W6r,Q6r,IJ,H6r,U6r,J6r,i5,MTe,Y6r,K6r,NJ,Z6r,eLr,oLr,d5,ETe,rLr,tLr,qJ,aLr,nLr,sLr,c5,CTe,lLr,iLr,jJ,dLr,cLr,fLr,f5,XDe,Tc,m5,wTe,y9,mLr,ATe,gLr,zDe,ir,x9,hLr,Mc,pLr,DJ,_Lr,uLr,GJ,bLr,vLr,FLr,$9,TLr,LTe,MLr,ELr,CLr,qt,k9,wLr,yTe,ALr,LLr,Ec,yLr,xTe,xLr,$Lr,OJ,kLr,SLr,RLr,g5,PLr,Ir,S9,BLr,$Te,ILr,NLr,fn,qLr,kTe,jLr,DLr,STe,GLr,OLr,RTe,VLr,XLr,zLr,ce,h5,PTe,WLr,QLr,VJ,HLr,ULr,JLr,p5,BTe,YLr,KLr,XJ,ZLr,eyr,oyr,_5,ITe,ryr,tyr,zJ,ayr,nyr,syr,u5,NTe,lyr,iyr,WJ,dyr,cyr,fyr,b5,qTe,myr,gyr,QJ,hyr,pyr,_yr,v5,jTe,uyr,byr,HJ,vyr,Fyr,Tyr,F5,DTe,Myr,Eyr,UJ,Cyr,wyr,Ayr,T5,GTe,Lyr,yyr,JJ,xyr,$yr,kyr,M5,OTe,Syr,Ryr,YJ,Pyr,Byr,Iyr,E5,VTe,Nyr,qyr,KJ,jyr,Dyr,Gyr,C5,XTe,Oyr,Vyr,ZJ,Xyr,zyr,Wyr,w5,zTe,Qyr,Hyr,eY,Uyr,Jyr,Yyr,A5,WTe,Kyr,Zyr,oY,e8r,o8r,r8r,L5,QTe,t8r,a8r,rY,n8r,s8r,l8r,y5,HTe,i8r,d8r,tY,c8r,f8r,m8r,x5,UTe,g8r,h8r,aY,p8r,_8r,u8r,$5,JTe,b8r,v8r,nY,F8r,T8r,M8r,k5,YTe,E8r,C8r,sY,w8r,A8r,L8r,S5,KTe,y8r,x8r,lY,$8r,k8r,S8r,R5,ZTe,R8r,P8r,iY,B8r,I8r,N8r,P5,WDe,Cc,B5,eMe,R9,q8r,oMe,j8r,QDe,dr,P9,D8r,wc,G8r,dY,O8r,V8r,cY,X8r,z8r,W8r,B9,Q8r,rMe,H8r,U8r,J8r,jt,I9,Y8r,tMe,K8r,Z8r,Ac,e9r,aMe,o9r,r9r,fY,t9r,a9r,n9r,I5,s9r,Nr,N9,l9r,nMe,i9r,d9r,mn,c9r,sMe,f9r,m9r,lMe,g9r,h9r,iMe,p9r,_9r,u9r,dMe,N5,cMe,b9r,v9r,mY,F9r,T9r,M9r,q5,HDe,Lc,j5,fMe,q9,E9r,mMe,C9r,UDe,cr,j9,w9r,yc,A9r,gY,L9r,y9r,hY,x9r,$9r,k9r,D9,S9r,gMe,R9r,P9r,B9r,Dt,G9,I9r,hMe,N9r,q9r,xc,j9r,pMe,D9r,G9r,pY,O9r,V9r,X9r,D5,z9r,qr,O9,W9r,_Me,Q9r,H9r,gn,U9r,uMe,J9r,Y9r,bMe,K9r,Z9r,vMe,exr,oxr,rxr,FMe,G5,TMe,txr,axr,_Y,nxr,sxr,lxr,O5,JDe,$c,V5,MMe,V9,ixr,EMe,dxr,YDe,fr,X9,cxr,kc,fxr,uY,mxr,gxr,bY,hxr,pxr,_xr,z9,uxr,CMe,bxr,vxr,Fxr,Gt,W9,Txr,wMe,Mxr,Exr,Sc,Cxr,AMe,wxr,Axr,vY,Lxr,yxr,xxr,X5,$xr,jr,Q9,kxr,LMe,Sxr,Rxr,hn,Pxr,yMe,Bxr,Ixr,xMe,Nxr,qxr,$Me,jxr,Dxr,Gxr,re,z5,kMe,Oxr,Vxr,FY,Xxr,zxr,Wxr,W5,SMe,Qxr,Hxr,TY,Uxr,Jxr,Yxr,Q5,RMe,Kxr,Zxr,MY,e$r,o$r,r$r,H5,PMe,t$r,a$r,EY,n$r,s$r,l$r,U5,BMe,i$r,d$r,CY,c$r,f$r,m$r,J5,IMe,g$r,h$r,wY,p$r,_$r,u$r,Y5,NMe,b$r,v$r,AY,F$r,T$r,M$r,K5,qMe,E$r,C$r,LY,w$r,A$r,L$r,Z5,jMe,y$r,x$r,yY,$$r,k$r,S$r,e3,DMe,R$r,P$r,xY,B$r,I$r,N$r,o3,GMe,q$r,j$r,$Y,D$r,G$r,O$r,r3,OMe,V$r,X$r,kY,z$r,W$r,Q$r,t3,VMe,H$r,U$r,SY,J$r,Y$r,K$r,a3,XMe,Z$r,ekr,RY,okr,rkr,tkr,n3,zMe,akr,nkr,PY,skr,lkr,ikr,s3,WMe,dkr,ckr,BY,fkr,mkr,gkr,l3,QMe,hkr,pkr,IY,_kr,ukr,bkr,i3,HMe,vkr,Fkr,NY,Tkr,Mkr,Ekr,d3,UMe,Ckr,wkr,qY,Akr,Lkr,ykr,c3,JMe,xkr,$kr,jY,kkr,Skr,Rkr,f3,YMe,Pkr,Bkr,DY,Ikr,Nkr,qkr,m3,KMe,jkr,Dkr,GY,Gkr,Okr,Vkr,g3,ZMe,Xkr,zkr,OY,Wkr,Qkr,Hkr,h3,eEe,Ukr,Jkr,VY,Ykr,Kkr,Zkr,p3,oEe,eSr,oSr,XY,rSr,tSr,aSr,_3,rEe,nSr,sSr,zY,lSr,iSr,dSr,u3,KDe,Rc,b3,tEe,H9,cSr,aEe,fSr,ZDe,mr,U9,mSr,Pc,gSr,WY,hSr,pSr,QY,_Sr,uSr,bSr,J9,vSr,nEe,FSr,TSr,MSr,Ot,Y9,ESr,sEe,CSr,wSr,Bc,ASr,lEe,LSr,ySr,HY,xSr,$Sr,kSr,v3,SSr,Dr,K9,RSr,iEe,PSr,BSr,pn,ISr,dEe,NSr,qSr,cEe,jSr,DSr,fEe,GSr,OSr,VSr,xe,F3,mEe,XSr,zSr,UY,WSr,QSr,HSr,T3,gEe,USr,JSr,JY,YSr,KSr,ZSr,M3,hEe,eRr,oRr,YY,rRr,tRr,aRr,E3,pEe,nRr,sRr,KY,lRr,iRr,dRr,C3,_Ee,cRr,fRr,ZY,mRr,gRr,hRr,w3,uEe,pRr,_Rr,eK,uRr,bRr,vRr,A3,bEe,FRr,TRr,oK,MRr,ERr,CRr,L3,vEe,wRr,ARr,rK,LRr,yRr,xRr,y3,FEe,$Rr,kRr,tK,SRr,RRr,PRr,x3,TEe,BRr,IRr,aK,NRr,qRr,jRr,$3,eGe,Ic,k3,MEe,Z9,DRr,EEe,GRr,oGe,gr,ex,ORr,Nc,VRr,nK,XRr,zRr,sK,WRr,QRr,HRr,ox,URr,CEe,JRr,YRr,KRr,Vt,rx,ZRr,wEe,ePr,oPr,qc,rPr,AEe,tPr,aPr,lK,nPr,sPr,lPr,S3,iPr,Gr,tx,dPr,LEe,cPr,fPr,_n,mPr,yEe,gPr,hPr,xEe,pPr,_Pr,$Ee,uPr,bPr,vPr,Ee,R3,kEe,FPr,TPr,iK,MPr,EPr,CPr,P3,SEe,wPr,APr,dK,LPr,yPr,xPr,B3,REe,$Pr,kPr,cK,SPr,RPr,PPr,I3,PEe,BPr,IPr,fK,NPr,qPr,jPr,N3,BEe,DPr,GPr,mK,OPr,VPr,XPr,q3,IEe,zPr,WPr,gK,QPr,HPr,UPr,j3,NEe,JPr,YPr,hK,KPr,ZPr,eBr,D3,qEe,oBr,rBr,pK,tBr,aBr,nBr,G3,jEe,sBr,lBr,_K,iBr,dBr,cBr,O3,DEe,fBr,mBr,uK,gBr,hBr,pBr,V3,GEe,_Br,uBr,bK,bBr,vBr,FBr,X3,OEe,TBr,MBr,vK,EBr,CBr,wBr,z3,rGe,jc,W3,VEe,ax,ABr,XEe,LBr,tGe,hr,nx,yBr,Dc,xBr,FK,$Br,kBr,TK,SBr,RBr,PBr,sx,BBr,zEe,IBr,NBr,qBr,Xt,lx,jBr,WEe,DBr,GBr,Gc,OBr,QEe,VBr,XBr,MK,zBr,WBr,QBr,Q3,HBr,Or,ix,UBr,HEe,JBr,YBr,un,KBr,UEe,ZBr,eIr,JEe,oIr,rIr,YEe,tIr,aIr,nIr,$e,H3,KEe,sIr,lIr,EK,iIr,dIr,cIr,U3,ZEe,fIr,mIr,CK,gIr,hIr,pIr,J3,eCe,_Ir,uIr,wK,bIr,vIr,FIr,Y3,oCe,TIr,MIr,AK,EIr,CIr,wIr,K3,rCe,AIr,LIr,LK,yIr,xIr,$Ir,Z3,tCe,kIr,SIr,yK,RIr,PIr,BIr,e0,aCe,IIr,NIr,xK,qIr,jIr,DIr,o0,nCe,GIr,OIr,$K,VIr,XIr,zIr,r0,sCe,WIr,QIr,kK,HIr,UIr,JIr,t0,lCe,YIr,KIr,SK,ZIr,eNr,oNr,a0,aGe,Oc,n0,iCe,dx,rNr,dCe,tNr,nGe,pr,cx,aNr,Vc,nNr,RK,sNr,lNr,PK,iNr,dNr,cNr,fx,fNr,cCe,mNr,gNr,hNr,zt,mx,pNr,fCe,_Nr,uNr,Xc,bNr,mCe,vNr,FNr,BK,TNr,MNr,ENr,s0,CNr,Vr,gx,wNr,gCe,ANr,LNr,bn,yNr,hCe,xNr,$Nr,pCe,kNr,SNr,_Ce,RNr,PNr,BNr,Pe,l0,uCe,INr,NNr,IK,qNr,jNr,DNr,i0,bCe,GNr,ONr,NK,VNr,XNr,zNr,d0,vCe,WNr,QNr,qK,HNr,UNr,JNr,c0,FCe,YNr,KNr,jK,ZNr,eqr,oqr,f0,TCe,rqr,tqr,DK,aqr,nqr,sqr,m0,MCe,lqr,iqr,GK,dqr,cqr,fqr,g0,ECe,mqr,gqr,OK,hqr,pqr,_qr,h0,CCe,uqr,bqr,VK,vqr,Fqr,Tqr,p0,wCe,Mqr,Eqr,XK,Cqr,wqr,Aqr,_0,sGe,zc,u0,ACe,hx,Lqr,LCe,yqr,lGe,_r,px,xqr,Wc,$qr,zK,kqr,Sqr,WK,Rqr,Pqr,Bqr,_x,Iqr,yCe,Nqr,qqr,jqr,Wt,ux,Dqr,xCe,Gqr,Oqr,Qc,Vqr,$Ce,Xqr,zqr,QK,Wqr,Qqr,Hqr,b0,Uqr,Xr,bx,Jqr,kCe,Yqr,Kqr,vn,Zqr,SCe,ejr,ojr,RCe,rjr,tjr,PCe,ajr,njr,sjr,ke,v0,BCe,ljr,ijr,HK,djr,cjr,fjr,F0,ICe,mjr,gjr,UK,hjr,pjr,_jr,T0,NCe,ujr,bjr,JK,vjr,Fjr,Tjr,M0,qCe,Mjr,Ejr,YK,Cjr,wjr,Ajr,E0,jCe,Ljr,yjr,KK,xjr,$jr,kjr,C0,DCe,Sjr,Rjr,ZK,Pjr,Bjr,Ijr,w0,GCe,Njr,qjr,eZ,jjr,Djr,Gjr,A0,OCe,Ojr,Vjr,oZ,Xjr,zjr,Wjr,L0,VCe,Qjr,Hjr,rZ,Ujr,Jjr,Yjr,y0,XCe,Kjr,Zjr,tZ,eDr,oDr,rDr,x0,iGe,Hc,$0,zCe,vx,tDr,WCe,aDr,dGe,ur,Fx,nDr,Uc,sDr,aZ,lDr,iDr,nZ,dDr,cDr,fDr,Tx,mDr,QCe,gDr,hDr,pDr,Qt,Mx,_Dr,HCe,uDr,bDr,Jc,vDr,UCe,FDr,TDr,sZ,MDr,EDr,CDr,k0,wDr,zr,Ex,ADr,JCe,LDr,yDr,Fn,xDr,YCe,$Dr,kDr,KCe,SDr,RDr,ZCe,PDr,BDr,IDr,Se,S0,e5e,NDr,qDr,lZ,jDr,DDr,GDr,R0,o5e,ODr,VDr,iZ,XDr,zDr,WDr,P0,r5e,QDr,HDr,dZ,UDr,JDr,YDr,B0,t5e,KDr,ZDr,cZ,eGr,oGr,rGr,I0,a5e,tGr,aGr,fZ,nGr,sGr,lGr,N0,n5e,iGr,dGr,mZ,cGr,fGr,mGr,q0,s5e,gGr,hGr,gZ,pGr,_Gr,uGr,j0,l5e,bGr,vGr,hZ,FGr,TGr,MGr,D0,i5e,EGr,CGr,pZ,wGr,AGr,LGr,G0,d5e,yGr,xGr,_Z,$Gr,kGr,SGr,O0,cGe,Yc,V0,c5e,Cx,RGr,f5e,PGr,fGe,br,wx,BGr,Kc,IGr,uZ,NGr,qGr,bZ,jGr,DGr,GGr,Ax,OGr,m5e,VGr,XGr,zGr,Ht,Lx,WGr,g5e,QGr,HGr,Zc,UGr,h5e,JGr,YGr,vZ,KGr,ZGr,eOr,X0,oOr,Wr,yx,rOr,p5e,tOr,aOr,Tn,nOr,_5e,sOr,lOr,u5e,iOr,dOr,b5e,cOr,fOr,mOr,Oe,z0,v5e,gOr,hOr,FZ,pOr,_Or,uOr,W0,F5e,bOr,vOr,TZ,FOr,TOr,MOr,Q0,T5e,EOr,COr,MZ,wOr,AOr,LOr,H0,M5e,yOr,xOr,EZ,$Or,kOr,SOr,U0,E5e,ROr,POr,CZ,BOr,IOr,NOr,J0,C5e,qOr,jOr,wZ,DOr,GOr,OOr,Y0,w5e,VOr,XOr,AZ,zOr,WOr,QOr,K0,A5e,HOr,UOr,LZ,JOr,YOr,KOr,Z0,mGe,ef,ew,L5e,xx,ZOr,y5e,eVr,gGe,vr,$x,oVr,of,rVr,yZ,tVr,aVr,xZ,nVr,sVr,lVr,kx,iVr,x5e,dVr,cVr,fVr,Ut,Sx,mVr,$5e,gVr,hVr,rf,pVr,k5e,_Vr,uVr,$Z,bVr,vVr,FVr,ow,TVr,Qr,Rx,MVr,S5e,EVr,CVr,Mn,wVr,R5e,AVr,LVr,P5e,yVr,xVr,B5e,$Vr,kVr,SVr,Ve,rw,I5e,RVr,PVr,kZ,BVr,IVr,NVr,tw,N5e,qVr,jVr,SZ,DVr,GVr,OVr,aw,q5e,VVr,XVr,RZ,zVr,WVr,QVr,nw,j5e,HVr,UVr,PZ,JVr,YVr,KVr,sw,D5e,ZVr,eXr,BZ,oXr,rXr,tXr,lw,G5e,aXr,nXr,IZ,sXr,lXr,iXr,iw,O5e,dXr,cXr,NZ,fXr,mXr,gXr,dw,V5e,hXr,pXr,qZ,_Xr,uXr,bXr,cw,hGe,tf,fw,X5e,Px,vXr,z5e,FXr,pGe,Fr,Bx,TXr,af,MXr,jZ,EXr,CXr,DZ,wXr,AXr,LXr,Ix,yXr,W5e,xXr,$Xr,kXr,Jt,Nx,SXr,Q5e,RXr,PXr,nf,BXr,H5e,IXr,NXr,GZ,qXr,jXr,DXr,mw,GXr,Hr,qx,OXr,U5e,VXr,XXr,En,zXr,J5e,WXr,QXr,Y5e,HXr,UXr,K5e,JXr,YXr,KXr,Z5e,gw,e3e,ZXr,ezr,OZ,ozr,rzr,tzr,hw,_Ge,sf,pw,o3e,jx,azr,r3e,nzr,uGe,Tr,Dx,szr,lf,lzr,VZ,izr,dzr,XZ,czr,fzr,mzr,Gx,gzr,t3e,hzr,pzr,_zr,Yt,Ox,uzr,a3e,bzr,vzr,df,Fzr,n3e,Tzr,Mzr,zZ,Ezr,Czr,wzr,_w,Azr,Ur,Vx,Lzr,s3e,yzr,xzr,Cn,$zr,l3e,kzr,Szr,i3e,Rzr,Pzr,d3e,Bzr,Izr,Nzr,Xx,uw,c3e,qzr,jzr,WZ,Dzr,Gzr,Ozr,bw,f3e,Vzr,Xzr,QZ,zzr,Wzr,Qzr,vw,bGe,cf,Fw,m3e,zx,Hzr,g3e,Uzr,vGe,Mr,Wx,Jzr,ff,Yzr,HZ,Kzr,Zzr,UZ,eWr,oWr,rWr,Qx,tWr,h3e,aWr,nWr,sWr,Kt,Hx,lWr,p3e,iWr,dWr,mf,cWr,_3e,fWr,mWr,JZ,gWr,hWr,pWr,Tw,_Wr,Jr,Ux,uWr,u3e,bWr,vWr,wn,FWr,b3e,TWr,MWr,v3e,EWr,CWr,F3e,wWr,AWr,LWr,T3e,Mw,M3e,yWr,xWr,YZ,$Wr,kWr,SWr,Ew,FGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),z6=new te({}),W6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new RWr({props:{warning:!0,$$slots:{default:[YRt]},$$scope:{ctx:x}}}),Q6=new te({}),H6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L591"}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L614"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:x}}}),K6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L737"}}),Z6=new te({}),eL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L391"}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17474/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L405"}}),dh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ZRt]},$$scope:{ctx:x}}}),aL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L604"}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Vh=new RWr({props:{$$slots:{default:[ePt]},$$scope:{ctx:x}}}),Xh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[oPt]},$$scope:{ctx:x}}}),cL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L88"}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L102"}}),cp=new RWr({props:{$$slots:{default:[rPt]},$$scope:{ctx:x}}}),fp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:x}}}),_L=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L255"}}),uL=new te({}),bL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L744"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),hp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[aPt]},$$scope:{ctx:x}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),mu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:x}}}),ML=new te({}),EL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L751"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),hu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[sPt]},$$scope:{ctx:x}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:x}}}),LL=new te({}),yL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L766"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:x}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:x}}}),SL=new te({}),RL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L773"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cPt]},$$scope:{ctx:x}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fPt]},$$scope:{ctx:x}}}),NL=new te({}),qL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L780"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mPt]},$$scope:{ctx:x}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gPt]},$$scope:{ctx:x}}}),OL=new te({}),VL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L789"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hPt]},$$scope:{ctx:x}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pPt]},$$scope:{ctx:x}}}),QL=new te({}),HL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L823"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Pt]},$$scope:{ctx:x}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uPt]},$$scope:{ctx:x}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L830"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bPt]},$$scope:{ctx:x}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vPt]},$$scope:{ctx:x}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L816"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[FPt]},$$scope:{ctx:x}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),M2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:x}}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L798"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),C2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MPt]},$$scope:{ctx:x}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:x}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L805"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[CPt]},$$scope:{ctx:x}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),uv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:x}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L839"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),vv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:x}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:x}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L878"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:x}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:x}}}),yy=new te({}),xy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L885"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:x}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:x}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L908"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:x}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:x}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L892"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:x}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:x}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L899"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:x}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:x}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L917"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:x}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:x}}}),e8=new te({}),o8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L924"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:x}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:x}}}),n8=new te({}),s8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L871"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:x}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:x}}}),f8=new te({}),m8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L846"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:x}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:x}}}),_8=new te({}),u8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L853"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:x}}}),T8=new te({}),M8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L862"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:x}}}),A8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:x}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:x}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:x}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:x}}}),G8=new te({}),O8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:x}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:x}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[aBt]},$$scope:{ctx:x}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nBt]},$$scope:{ctx:x}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sBt]},$$scope:{ctx:x}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lBt]},$$scope:{ctx:x}}}),r9=new te({}),t9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[iBt]},$$scope:{ctx:x}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dBt]},$$scope:{ctx:x}}}),l9=new te({}),i9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[cBt]},$$scope:{ctx:x}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fBt]},$$scope:{ctx:x}}}),m9=new te({}),g9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mBt]},$$scope:{ctx:x}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gBt]},$$scope:{ctx:x}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[hBt]},$$scope:{ctx:x}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[pBt]},$$scope:{ctx:x}}}),E9=new te({}),C9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[_Bt]},$$scope:{ctx:x}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[uBt]},$$scope:{ctx:x}}}),y9=new te({}),x9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bBt]},$$scope:{ctx:x}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vBt]},$$scope:{ctx:x}}}),R9=new te({}),P9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[FBt]},$$scope:{ctx:x}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[TBt]},$$scope:{ctx:x}}}),q9=new te({}),j9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[MBt]},$$scope:{ctx:x}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:x}}}),V9=new te({}),X9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[CBt]},$$scope:{ctx:x}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:x}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xBt]},$$scope:{ctx:x}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),Px=new te({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),jx=new te({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),zx=new te({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),G6=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),pi=o("Instantiating one of "),Ln=a("a"),O6=o("AutoConfig"),yn=o(", "),xn=a("a"),V6=o("AutoModel"),_i=o(`, and
`),$n=a("a"),X6=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),ck=o("will create a model that is an instance of "),bi=a("a"),fk=o("BertModel"),mk=o("."),Eo=l(),wa=a("p"),gk=o("There is one class of "),vf=a("code"),hk=o("AutoModel"),yVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uje=l(),vi=a("h2"),Ff=a("a"),Xoe=a("span"),F(z6.$$.fragment),xVe=l(),zoe=a("span"),$Ve=o("Extending the Auto Classes"),bje=l(),kn=a("p"),kVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Woe=a("code"),SVe=o("NewModel"),RVe=o(", make sure you have a "),Qoe=a("code"),PVe=o("NewModelConfig"),BVe=o(` then you can add those to the auto
classes like this:`),vje=l(),F(W6.$$.fragment),Fje=l(),pk=a("p"),IVe=o("You will then be able to use the auto classes like you would usually do!"),Tje=l(),F(Tf.$$.fragment),Mje=l(),Fi=a("h2"),Mf=a("a"),Hoe=a("span"),F(Q6.$$.fragment),NVe=l(),Uoe=a("span"),qVe=o("AutoConfig"),Eje=l(),Co=a("div"),F(H6.$$.fragment),jVe=l(),U6=a("p"),DVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_k=a("a"),GVe=o("from_pretrained()"),OVe=o(" class method."),VVe=l(),J6=a("p"),XVe=o("This class cannot be instantiated directly using "),Joe=a("code"),zVe=o("__init__()"),WVe=o(" (throws an error)."),QVe=l(),Er=a("div"),F(Y6.$$.fragment),HVe=l(),Yoe=a("p"),UVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),JVe=l(),Ti=a("p"),YVe=o("The configuration class to instantiate is selected based on the "),Koe=a("code"),KVe=o("model_type"),ZVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zoe=a("code"),eXe=o("pretrained_model_name_or_path"),oXe=o(":"),rXe=l(),A=a("ul"),Ef=a("li"),ere=a("strong"),tXe=o("albert"),aXe=o(" \u2014 "),uk=a("a"),nXe=o("AlbertConfig"),sXe=o(" (ALBERT model)"),lXe=l(),Cf=a("li"),ore=a("strong"),iXe=o("bart"),dXe=o(" \u2014 "),bk=a("a"),cXe=o("BartConfig"),fXe=o(" (BART model)"),mXe=l(),wf=a("li"),rre=a("strong"),gXe=o("beit"),hXe=o(" \u2014 "),vk=a("a"),pXe=o("BeitConfig"),_Xe=o(" (BEiT model)"),uXe=l(),Af=a("li"),tre=a("strong"),bXe=o("bert"),vXe=o(" \u2014 "),Fk=a("a"),FXe=o("BertConfig"),TXe=o(" (BERT model)"),MXe=l(),Lf=a("li"),are=a("strong"),EXe=o("bert-generation"),CXe=o(" \u2014 "),Tk=a("a"),wXe=o("BertGenerationConfig"),AXe=o(" (Bert Generation model)"),LXe=l(),yf=a("li"),nre=a("strong"),yXe=o("big_bird"),xXe=o(" \u2014 "),Mk=a("a"),$Xe=o("BigBirdConfig"),kXe=o(" (BigBird model)"),SXe=l(),xf=a("li"),sre=a("strong"),RXe=o("bigbird_pegasus"),PXe=o(" \u2014 "),Ek=a("a"),BXe=o("BigBirdPegasusConfig"),IXe=o(" (BigBird-Pegasus model)"),NXe=l(),$f=a("li"),lre=a("strong"),qXe=o("blenderbot"),jXe=o(" \u2014 "),Ck=a("a"),DXe=o("BlenderbotConfig"),GXe=o(" (Blenderbot model)"),OXe=l(),kf=a("li"),ire=a("strong"),VXe=o("blenderbot-small"),XXe=o(" \u2014 "),wk=a("a"),zXe=o("BlenderbotSmallConfig"),WXe=o(" (BlenderbotSmall model)"),QXe=l(),Sf=a("li"),dre=a("strong"),HXe=o("bloom"),UXe=o(" \u2014 "),Ak=a("a"),JXe=o("BloomConfig"),YXe=o(" (BLOOM model)"),KXe=l(),Rf=a("li"),cre=a("strong"),ZXe=o("camembert"),eze=o(" \u2014 "),Lk=a("a"),oze=o("CamembertConfig"),rze=o(" (CamemBERT model)"),tze=l(),Pf=a("li"),fre=a("strong"),aze=o("canine"),nze=o(" \u2014 "),yk=a("a"),sze=o("CanineConfig"),lze=o(" (CANINE model)"),ize=l(),Bf=a("li"),mre=a("strong"),dze=o("clip"),cze=o(" \u2014 "),xk=a("a"),fze=o("CLIPConfig"),mze=o(" (CLIP model)"),gze=l(),If=a("li"),gre=a("strong"),hze=o("convbert"),pze=o(" \u2014 "),$k=a("a"),_ze=o("ConvBertConfig"),uze=o(" (ConvBERT model)"),bze=l(),Nf=a("li"),hre=a("strong"),vze=o("convnext"),Fze=o(" \u2014 "),kk=a("a"),Tze=o("ConvNextConfig"),Mze=o(" (ConvNeXT model)"),Eze=l(),qf=a("li"),pre=a("strong"),Cze=o("ctrl"),wze=o(" \u2014 "),Sk=a("a"),Aze=o("CTRLConfig"),Lze=o(" (CTRL model)"),yze=l(),jf=a("li"),_re=a("strong"),xze=o("cvt"),$ze=o(" \u2014 "),Rk=a("a"),kze=o("CvtConfig"),Sze=o(" (CvT model)"),Rze=l(),Df=a("li"),ure=a("strong"),Pze=o("data2vec-audio"),Bze=o(" \u2014 "),Pk=a("a"),Ize=o("Data2VecAudioConfig"),Nze=o(" (Data2VecAudio model)"),qze=l(),Gf=a("li"),bre=a("strong"),jze=o("data2vec-text"),Dze=o(" \u2014 "),Bk=a("a"),Gze=o("Data2VecTextConfig"),Oze=o(" (Data2VecText model)"),Vze=l(),Of=a("li"),vre=a("strong"),Xze=o("data2vec-vision"),zze=o(" \u2014 "),Ik=a("a"),Wze=o("Data2VecVisionConfig"),Qze=o(" (Data2VecVision model)"),Hze=l(),Vf=a("li"),Fre=a("strong"),Uze=o("deberta"),Jze=o(" \u2014 "),Nk=a("a"),Yze=o("DebertaConfig"),Kze=o(" (DeBERTa model)"),Zze=l(),Xf=a("li"),Tre=a("strong"),eWe=o("deberta-v2"),oWe=o(" \u2014 "),qk=a("a"),rWe=o("DebertaV2Config"),tWe=o(" (DeBERTa-v2 model)"),aWe=l(),zf=a("li"),Mre=a("strong"),nWe=o("decision_transformer"),sWe=o(" \u2014 "),jk=a("a"),lWe=o("DecisionTransformerConfig"),iWe=o(" (Decision Transformer model)"),dWe=l(),Wf=a("li"),Ere=a("strong"),cWe=o("deit"),fWe=o(" \u2014 "),Dk=a("a"),mWe=o("DeiTConfig"),gWe=o(" (DeiT model)"),hWe=l(),Qf=a("li"),Cre=a("strong"),pWe=o("detr"),_We=o(" \u2014 "),Gk=a("a"),uWe=o("DetrConfig"),bWe=o(" (DETR model)"),vWe=l(),Hf=a("li"),wre=a("strong"),FWe=o("distilbert"),TWe=o(" \u2014 "),Ok=a("a"),MWe=o("DistilBertConfig"),EWe=o(" (DistilBERT model)"),CWe=l(),Uf=a("li"),Are=a("strong"),wWe=o("dpr"),AWe=o(" \u2014 "),Vk=a("a"),LWe=o("DPRConfig"),yWe=o(" (DPR model)"),xWe=l(),Jf=a("li"),Lre=a("strong"),$We=o("dpt"),kWe=o(" \u2014 "),Xk=a("a"),SWe=o("DPTConfig"),RWe=o(" (DPT model)"),PWe=l(),Yf=a("li"),yre=a("strong"),BWe=o("electra"),IWe=o(" \u2014 "),zk=a("a"),NWe=o("ElectraConfig"),qWe=o(" (ELECTRA model)"),jWe=l(),Kf=a("li"),xre=a("strong"),DWe=o("encoder-decoder"),GWe=o(" \u2014 "),Wk=a("a"),OWe=o("EncoderDecoderConfig"),VWe=o(" (Encoder decoder model)"),XWe=l(),Zf=a("li"),$re=a("strong"),zWe=o("flaubert"),WWe=o(" \u2014 "),Qk=a("a"),QWe=o("FlaubertConfig"),HWe=o(" (FlauBERT model)"),UWe=l(),em=a("li"),kre=a("strong"),JWe=o("flava"),YWe=o(" \u2014 "),Hk=a("a"),KWe=o("FlavaConfig"),ZWe=o(" (FLAVA model)"),eQe=l(),om=a("li"),Sre=a("strong"),oQe=o("fnet"),rQe=o(" \u2014 "),Uk=a("a"),tQe=o("FNetConfig"),aQe=o(" (FNet model)"),nQe=l(),rm=a("li"),Rre=a("strong"),sQe=o("fsmt"),lQe=o(" \u2014 "),Jk=a("a"),iQe=o("FSMTConfig"),dQe=o(" (FairSeq Machine-Translation model)"),cQe=l(),tm=a("li"),Pre=a("strong"),fQe=o("funnel"),mQe=o(" \u2014 "),Yk=a("a"),gQe=o("FunnelConfig"),hQe=o(" (Funnel Transformer model)"),pQe=l(),am=a("li"),Bre=a("strong"),_Qe=o("glpn"),uQe=o(" \u2014 "),Kk=a("a"),bQe=o("GLPNConfig"),vQe=o(" (GLPN model)"),FQe=l(),nm=a("li"),Ire=a("strong"),TQe=o("gpt2"),MQe=o(" \u2014 "),Zk=a("a"),EQe=o("GPT2Config"),CQe=o(" (OpenAI GPT-2 model)"),wQe=l(),sm=a("li"),Nre=a("strong"),AQe=o("gpt_neo"),LQe=o(" \u2014 "),eS=a("a"),yQe=o("GPTNeoConfig"),xQe=o(" (GPT Neo model)"),$Qe=l(),lm=a("li"),qre=a("strong"),kQe=o("gpt_neox"),SQe=o(" \u2014 "),oS=a("a"),RQe=o("GPTNeoXConfig"),PQe=o(" (GPT NeoX model)"),BQe=l(),im=a("li"),jre=a("strong"),IQe=o("gptj"),NQe=o(" \u2014 "),rS=a("a"),qQe=o("GPTJConfig"),jQe=o(" (GPT-J model)"),DQe=l(),dm=a("li"),Dre=a("strong"),GQe=o("hubert"),OQe=o(" \u2014 "),tS=a("a"),VQe=o("HubertConfig"),XQe=o(" (Hubert model)"),zQe=l(),cm=a("li"),Gre=a("strong"),WQe=o("ibert"),QQe=o(" \u2014 "),aS=a("a"),HQe=o("IBertConfig"),UQe=o(" (I-BERT model)"),JQe=l(),fm=a("li"),Ore=a("strong"),YQe=o("imagegpt"),KQe=o(" \u2014 "),nS=a("a"),ZQe=o("ImageGPTConfig"),eHe=o(" (ImageGPT model)"),oHe=l(),mm=a("li"),Vre=a("strong"),rHe=o("layoutlm"),tHe=o(" \u2014 "),sS=a("a"),aHe=o("LayoutLMConfig"),nHe=o(" (LayoutLM model)"),sHe=l(),gm=a("li"),Xre=a("strong"),lHe=o("layoutlmv2"),iHe=o(" \u2014 "),lS=a("a"),dHe=o("LayoutLMv2Config"),cHe=o(" (LayoutLMv2 model)"),fHe=l(),hm=a("li"),zre=a("strong"),mHe=o("layoutlmv3"),gHe=o(" \u2014 "),iS=a("a"),hHe=o("LayoutLMv3Config"),pHe=o(" (LayoutLMv3 model)"),_He=l(),pm=a("li"),Wre=a("strong"),uHe=o("led"),bHe=o(" \u2014 "),dS=a("a"),vHe=o("LEDConfig"),FHe=o(" (LED model)"),THe=l(),_m=a("li"),Qre=a("strong"),MHe=o("levit"),EHe=o(" \u2014 "),cS=a("a"),CHe=o("LevitConfig"),wHe=o(" (LeViT model)"),AHe=l(),um=a("li"),Hre=a("strong"),LHe=o("longformer"),yHe=o(" \u2014 "),fS=a("a"),xHe=o("LongformerConfig"),$He=o(" (Longformer model)"),kHe=l(),bm=a("li"),Ure=a("strong"),SHe=o("luke"),RHe=o(" \u2014 "),mS=a("a"),PHe=o("LukeConfig"),BHe=o(" (LUKE model)"),IHe=l(),vm=a("li"),Jre=a("strong"),NHe=o("lxmert"),qHe=o(" \u2014 "),gS=a("a"),jHe=o("LxmertConfig"),DHe=o(" (LXMERT model)"),GHe=l(),Fm=a("li"),Yre=a("strong"),OHe=o("m2m_100"),VHe=o(" \u2014 "),hS=a("a"),XHe=o("M2M100Config"),zHe=o(" (M2M100 model)"),WHe=l(),Tm=a("li"),Kre=a("strong"),QHe=o("marian"),HHe=o(" \u2014 "),pS=a("a"),UHe=o("MarianConfig"),JHe=o(" (Marian model)"),YHe=l(),Mm=a("li"),Zre=a("strong"),KHe=o("maskformer"),ZHe=o(" \u2014 "),_S=a("a"),eUe=o("MaskFormerConfig"),oUe=o(" (MaskFormer model)"),rUe=l(),Em=a("li"),ete=a("strong"),tUe=o("mbart"),aUe=o(" \u2014 "),uS=a("a"),nUe=o("MBartConfig"),sUe=o(" (mBART model)"),lUe=l(),Cm=a("li"),ote=a("strong"),iUe=o("mctct"),dUe=o(" \u2014 "),bS=a("a"),cUe=o("MCTCTConfig"),fUe=o(" (M-CTC-T model)"),mUe=l(),wm=a("li"),rte=a("strong"),gUe=o("megatron-bert"),hUe=o(" \u2014 "),vS=a("a"),pUe=o("MegatronBertConfig"),_Ue=o(" (Megatron-BERT model)"),uUe=l(),Am=a("li"),tte=a("strong"),bUe=o("mobilebert"),vUe=o(" \u2014 "),FS=a("a"),FUe=o("MobileBertConfig"),TUe=o(" (MobileBERT model)"),MUe=l(),Lm=a("li"),ate=a("strong"),EUe=o("mpnet"),CUe=o(" \u2014 "),TS=a("a"),wUe=o("MPNetConfig"),AUe=o(" (MPNet model)"),LUe=l(),ym=a("li"),nte=a("strong"),yUe=o("mt5"),xUe=o(" \u2014 "),MS=a("a"),$Ue=o("MT5Config"),kUe=o(" (MT5 model)"),SUe=l(),xm=a("li"),ste=a("strong"),RUe=o("nystromformer"),PUe=o(" \u2014 "),ES=a("a"),BUe=o("NystromformerConfig"),IUe=o(" (Nystr\xF6mformer model)"),NUe=l(),$m=a("li"),lte=a("strong"),qUe=o("openai-gpt"),jUe=o(" \u2014 "),CS=a("a"),DUe=o("OpenAIGPTConfig"),GUe=o(" (OpenAI GPT model)"),OUe=l(),km=a("li"),ite=a("strong"),VUe=o("opt"),XUe=o(" \u2014 "),wS=a("a"),zUe=o("OPTConfig"),WUe=o(" (OPT model)"),QUe=l(),Sm=a("li"),dte=a("strong"),HUe=o("pegasus"),UUe=o(" \u2014 "),AS=a("a"),JUe=o("PegasusConfig"),YUe=o(" (Pegasus model)"),KUe=l(),Rm=a("li"),cte=a("strong"),ZUe=o("perceiver"),eJe=o(" \u2014 "),LS=a("a"),oJe=o("PerceiverConfig"),rJe=o(" (Perceiver model)"),tJe=l(),Pm=a("li"),fte=a("strong"),aJe=o("plbart"),nJe=o(" \u2014 "),yS=a("a"),sJe=o("PLBartConfig"),lJe=o(" (PLBart model)"),iJe=l(),Bm=a("li"),mte=a("strong"),dJe=o("poolformer"),cJe=o(" \u2014 "),xS=a("a"),fJe=o("PoolFormerConfig"),mJe=o(" (PoolFormer model)"),gJe=l(),Im=a("li"),gte=a("strong"),hJe=o("prophetnet"),pJe=o(" \u2014 "),$S=a("a"),_Je=o("ProphetNetConfig"),uJe=o(" (ProphetNet model)"),bJe=l(),Nm=a("li"),hte=a("strong"),vJe=o("qdqbert"),FJe=o(" \u2014 "),kS=a("a"),TJe=o("QDQBertConfig"),MJe=o(" (QDQBert model)"),EJe=l(),qm=a("li"),pte=a("strong"),CJe=o("rag"),wJe=o(" \u2014 "),SS=a("a"),AJe=o("RagConfig"),LJe=o(" (RAG model)"),yJe=l(),jm=a("li"),_te=a("strong"),xJe=o("realm"),$Je=o(" \u2014 "),RS=a("a"),kJe=o("RealmConfig"),SJe=o(" (REALM model)"),RJe=l(),Dm=a("li"),ute=a("strong"),PJe=o("reformer"),BJe=o(" \u2014 "),PS=a("a"),IJe=o("ReformerConfig"),NJe=o(" (Reformer model)"),qJe=l(),Gm=a("li"),bte=a("strong"),jJe=o("regnet"),DJe=o(" \u2014 "),BS=a("a"),GJe=o("RegNetConfig"),OJe=o(" (RegNet model)"),VJe=l(),Om=a("li"),vte=a("strong"),XJe=o("rembert"),zJe=o(" \u2014 "),IS=a("a"),WJe=o("RemBertConfig"),QJe=o(" (RemBERT model)"),HJe=l(),Vm=a("li"),Fte=a("strong"),UJe=o("resnet"),JJe=o(" \u2014 "),NS=a("a"),YJe=o("ResNetConfig"),KJe=o(" (ResNet model)"),ZJe=l(),Xm=a("li"),Tte=a("strong"),eYe=o("retribert"),oYe=o(" \u2014 "),qS=a("a"),rYe=o("RetriBertConfig"),tYe=o(" (RetriBERT model)"),aYe=l(),zm=a("li"),Mte=a("strong"),nYe=o("roberta"),sYe=o(" \u2014 "),jS=a("a"),lYe=o("RobertaConfig"),iYe=o(" (RoBERTa model)"),dYe=l(),Wm=a("li"),Ete=a("strong"),cYe=o("roformer"),fYe=o(" \u2014 "),DS=a("a"),mYe=o("RoFormerConfig"),gYe=o(" (RoFormer model)"),hYe=l(),Qm=a("li"),Cte=a("strong"),pYe=o("segformer"),_Ye=o(" \u2014 "),GS=a("a"),uYe=o("SegformerConfig"),bYe=o(" (SegFormer model)"),vYe=l(),Hm=a("li"),wte=a("strong"),FYe=o("sew"),TYe=o(" \u2014 "),OS=a("a"),MYe=o("SEWConfig"),EYe=o(" (SEW model)"),CYe=l(),Um=a("li"),Ate=a("strong"),wYe=o("sew-d"),AYe=o(" \u2014 "),VS=a("a"),LYe=o("SEWDConfig"),yYe=o(" (SEW-D model)"),xYe=l(),Jm=a("li"),Lte=a("strong"),$Ye=o("speech-encoder-decoder"),kYe=o(" \u2014 "),XS=a("a"),SYe=o("SpeechEncoderDecoderConfig"),RYe=o(" (Speech Encoder decoder model)"),PYe=l(),Ym=a("li"),yte=a("strong"),BYe=o("speech_to_text"),IYe=o(" \u2014 "),zS=a("a"),NYe=o("Speech2TextConfig"),qYe=o(" (Speech2Text model)"),jYe=l(),Km=a("li"),xte=a("strong"),DYe=o("speech_to_text_2"),GYe=o(" \u2014 "),WS=a("a"),OYe=o("Speech2Text2Config"),VYe=o(" (Speech2Text2 model)"),XYe=l(),Zm=a("li"),$te=a("strong"),zYe=o("splinter"),WYe=o(" \u2014 "),QS=a("a"),QYe=o("SplinterConfig"),HYe=o(" (Splinter model)"),UYe=l(),eg=a("li"),kte=a("strong"),JYe=o("squeezebert"),YYe=o(" \u2014 "),HS=a("a"),KYe=o("SqueezeBertConfig"),ZYe=o(" (SqueezeBERT model)"),eKe=l(),og=a("li"),Ste=a("strong"),oKe=o("swin"),rKe=o(" \u2014 "),US=a("a"),tKe=o("SwinConfig"),aKe=o(" (Swin Transformer model)"),nKe=l(),rg=a("li"),Rte=a("strong"),sKe=o("t5"),lKe=o(" \u2014 "),JS=a("a"),iKe=o("T5Config"),dKe=o(" (T5 model)"),cKe=l(),tg=a("li"),Pte=a("strong"),fKe=o("tapas"),mKe=o(" \u2014 "),YS=a("a"),gKe=o("TapasConfig"),hKe=o(" (TAPAS model)"),pKe=l(),ag=a("li"),Bte=a("strong"),_Ke=o("trajectory_transformer"),uKe=o(" \u2014 "),KS=a("a"),bKe=o("TrajectoryTransformerConfig"),vKe=o(" (Trajectory Transformer model)"),FKe=l(),ng=a("li"),Ite=a("strong"),TKe=o("transfo-xl"),MKe=o(" \u2014 "),ZS=a("a"),EKe=o("TransfoXLConfig"),CKe=o(" (Transformer-XL model)"),wKe=l(),sg=a("li"),Nte=a("strong"),AKe=o("trocr"),LKe=o(" \u2014 "),eR=a("a"),yKe=o("TrOCRConfig"),xKe=o(" (TrOCR model)"),$Ke=l(),lg=a("li"),qte=a("strong"),kKe=o("unispeech"),SKe=o(" \u2014 "),oR=a("a"),RKe=o("UniSpeechConfig"),PKe=o(" (UniSpeech model)"),BKe=l(),ig=a("li"),jte=a("strong"),IKe=o("unispeech-sat"),NKe=o(" \u2014 "),rR=a("a"),qKe=o("UniSpeechSatConfig"),jKe=o(" (UniSpeechSat model)"),DKe=l(),dg=a("li"),Dte=a("strong"),GKe=o("van"),OKe=o(" \u2014 "),tR=a("a"),VKe=o("VanConfig"),XKe=o(" (VAN model)"),zKe=l(),cg=a("li"),Gte=a("strong"),WKe=o("vilt"),QKe=o(" \u2014 "),aR=a("a"),HKe=o("ViltConfig"),UKe=o(" (ViLT model)"),JKe=l(),fg=a("li"),Ote=a("strong"),YKe=o("vision-encoder-decoder"),KKe=o(" \u2014 "),nR=a("a"),ZKe=o("VisionEncoderDecoderConfig"),eZe=o(" (Vision Encoder decoder model)"),oZe=l(),mg=a("li"),Vte=a("strong"),rZe=o("vision-text-dual-encoder"),tZe=o(" \u2014 "),sR=a("a"),aZe=o("VisionTextDualEncoderConfig"),nZe=o(" (VisionTextDualEncoder model)"),sZe=l(),gg=a("li"),Xte=a("strong"),lZe=o("visual_bert"),iZe=o(" \u2014 "),lR=a("a"),dZe=o("VisualBertConfig"),cZe=o(" (VisualBERT model)"),fZe=l(),hg=a("li"),zte=a("strong"),mZe=o("vit"),gZe=o(" \u2014 "),iR=a("a"),hZe=o("ViTConfig"),pZe=o(" (ViT model)"),_Ze=l(),pg=a("li"),Wte=a("strong"),uZe=o("vit_mae"),bZe=o(" \u2014 "),dR=a("a"),vZe=o("ViTMAEConfig"),FZe=o(" (ViTMAE model)"),TZe=l(),_g=a("li"),Qte=a("strong"),MZe=o("wav2vec2"),EZe=o(" \u2014 "),cR=a("a"),CZe=o("Wav2Vec2Config"),wZe=o(" (Wav2Vec2 model)"),AZe=l(),ug=a("li"),Hte=a("strong"),LZe=o("wav2vec2-conformer"),yZe=o(" \u2014 "),fR=a("a"),xZe=o("Wav2Vec2ConformerConfig"),$Ze=o(" (Wav2Vec2-Conformer model)"),kZe=l(),bg=a("li"),Ute=a("strong"),SZe=o("wavlm"),RZe=o(" \u2014 "),mR=a("a"),PZe=o("WavLMConfig"),BZe=o(" (WavLM model)"),IZe=l(),vg=a("li"),Jte=a("strong"),NZe=o("xglm"),qZe=o(" \u2014 "),gR=a("a"),jZe=o("XGLMConfig"),DZe=o(" (XGLM model)"),GZe=l(),Fg=a("li"),Yte=a("strong"),OZe=o("xlm"),VZe=o(" \u2014 "),hR=a("a"),XZe=o("XLMConfig"),zZe=o(" (XLM model)"),WZe=l(),Tg=a("li"),Kte=a("strong"),QZe=o("xlm-prophetnet"),HZe=o(" \u2014 "),pR=a("a"),UZe=o("XLMProphetNetConfig"),JZe=o(" (XLM-ProphetNet model)"),YZe=l(),Mg=a("li"),Zte=a("strong"),KZe=o("xlm-roberta"),ZZe=o(" \u2014 "),_R=a("a"),eeo=o("XLMRobertaConfig"),oeo=o(" (XLM-RoBERTa model)"),reo=l(),Eg=a("li"),eae=a("strong"),teo=o("xlm-roberta-xl"),aeo=o(" \u2014 "),uR=a("a"),neo=o("XLMRobertaXLConfig"),seo=o(" (XLM-RoBERTa-XL model)"),leo=l(),Cg=a("li"),oae=a("strong"),ieo=o("xlnet"),deo=o(" \u2014 "),bR=a("a"),ceo=o("XLNetConfig"),feo=o(" (XLNet model)"),meo=l(),wg=a("li"),rae=a("strong"),geo=o("yolos"),heo=o(" \u2014 "),vR=a("a"),peo=o("YolosConfig"),_eo=o(" (YOLOS model)"),ueo=l(),Ag=a("li"),tae=a("strong"),beo=o("yoso"),veo=o(" \u2014 "),FR=a("a"),Feo=o("YosoConfig"),Teo=o(" (YOSO model)"),Meo=l(),F(Lg.$$.fragment),Eeo=l(),yg=a("div"),F(K6.$$.fragment),Ceo=l(),aae=a("p"),weo=o("Register a new configuration for this class."),Cje=l(),Mi=a("h2"),xg=a("a"),nae=a("span"),F(Z6.$$.fragment),Aeo=l(),sae=a("span"),Leo=o("AutoTokenizer"),wje=l(),wo=a("div"),F(eL.$$.fragment),yeo=l(),oL=a("p"),xeo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TR=a("a"),$eo=o("AutoTokenizer.from_pretrained()"),keo=o(" class method."),Seo=l(),rL=a("p"),Reo=o("This class cannot be instantiated directly using "),lae=a("code"),Peo=o("__init__()"),Beo=o(" (throws an error)."),Ieo=l(),Cr=a("div"),F(tL.$$.fragment),Neo=l(),iae=a("p"),qeo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jeo=l(),Aa=a("p"),Deo=o("The tokenizer class to instantiate is selected based on the "),dae=a("code"),Geo=o("model_type"),Oeo=o(` property of the config object (either
passed as an argument or loaded from `),cae=a("code"),Veo=o("pretrained_model_name_or_path"),Xeo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fae=a("code"),zeo=o("pretrained_model_name_or_path"),Weo=o(":"),Qeo=l(),k=a("ul"),Sn=a("li"),mae=a("strong"),Heo=o("albert"),Ueo=o(" \u2014 "),MR=a("a"),Jeo=o("AlbertTokenizer"),Yeo=o(" or "),ER=a("a"),Keo=o("AlbertTokenizerFast"),Zeo=o(" (ALBERT model)"),eoo=l(),Rn=a("li"),gae=a("strong"),ooo=o("bart"),roo=o(" \u2014 "),CR=a("a"),too=o("BartTokenizer"),aoo=o(" or "),wR=a("a"),noo=o("BartTokenizerFast"),soo=o(" (BART model)"),loo=l(),Pn=a("li"),hae=a("strong"),ioo=o("barthez"),doo=o(" \u2014 "),AR=a("a"),coo=o("BarthezTokenizer"),foo=o(" or "),LR=a("a"),moo=o("BarthezTokenizerFast"),goo=o(" (BARThez model)"),hoo=l(),$g=a("li"),pae=a("strong"),poo=o("bartpho"),_oo=o(" \u2014 "),yR=a("a"),uoo=o("BartphoTokenizer"),boo=o(" (BARTpho model)"),voo=l(),Bn=a("li"),_ae=a("strong"),Foo=o("bert"),Too=o(" \u2014 "),xR=a("a"),Moo=o("BertTokenizer"),Eoo=o(" or "),$R=a("a"),Coo=o("BertTokenizerFast"),woo=o(" (BERT model)"),Aoo=l(),kg=a("li"),uae=a("strong"),Loo=o("bert-generation"),yoo=o(" \u2014 "),kR=a("a"),xoo=o("BertGenerationTokenizer"),$oo=o(" (Bert Generation model)"),koo=l(),Sg=a("li"),bae=a("strong"),Soo=o("bert-japanese"),Roo=o(" \u2014 "),SR=a("a"),Poo=o("BertJapaneseTokenizer"),Boo=o(" (BertJapanese model)"),Ioo=l(),Rg=a("li"),vae=a("strong"),Noo=o("bertweet"),qoo=o(" \u2014 "),RR=a("a"),joo=o("BertweetTokenizer"),Doo=o(" (BERTweet model)"),Goo=l(),In=a("li"),Fae=a("strong"),Ooo=o("big_bird"),Voo=o(" \u2014 "),PR=a("a"),Xoo=o("BigBirdTokenizer"),zoo=o(" or "),BR=a("a"),Woo=o("BigBirdTokenizerFast"),Qoo=o(" (BigBird model)"),Hoo=l(),Nn=a("li"),Tae=a("strong"),Uoo=o("bigbird_pegasus"),Joo=o(" \u2014 "),IR=a("a"),Yoo=o("PegasusTokenizer"),Koo=o(" or "),NR=a("a"),Zoo=o("PegasusTokenizerFast"),ero=o(" (BigBird-Pegasus model)"),oro=l(),qn=a("li"),Mae=a("strong"),rro=o("blenderbot"),tro=o(" \u2014 "),qR=a("a"),aro=o("BlenderbotTokenizer"),nro=o(" or "),jR=a("a"),sro=o("BlenderbotTokenizerFast"),lro=o(" (Blenderbot model)"),iro=l(),Pg=a("li"),Eae=a("strong"),dro=o("blenderbot-small"),cro=o(" \u2014 "),DR=a("a"),fro=o("BlenderbotSmallTokenizer"),mro=o(" (BlenderbotSmall model)"),gro=l(),Bg=a("li"),Cae=a("strong"),hro=o("bloom"),pro=o(" \u2014 "),GR=a("a"),_ro=o("BloomTokenizerFast"),uro=o(" (BLOOM model)"),bro=l(),Ig=a("li"),wae=a("strong"),vro=o("byt5"),Fro=o(" \u2014 "),OR=a("a"),Tro=o("ByT5Tokenizer"),Mro=o(" (ByT5 model)"),Ero=l(),jn=a("li"),Aae=a("strong"),Cro=o("camembert"),wro=o(" \u2014 "),VR=a("a"),Aro=o("CamembertTokenizer"),Lro=o(" or "),XR=a("a"),yro=o("CamembertTokenizerFast"),xro=o(" (CamemBERT model)"),$ro=l(),Ng=a("li"),Lae=a("strong"),kro=o("canine"),Sro=o(" \u2014 "),zR=a("a"),Rro=o("CanineTokenizer"),Pro=o(" (CANINE model)"),Bro=l(),Dn=a("li"),yae=a("strong"),Iro=o("clip"),Nro=o(" \u2014 "),WR=a("a"),qro=o("CLIPTokenizer"),jro=o(" or "),QR=a("a"),Dro=o("CLIPTokenizerFast"),Gro=o(" (CLIP model)"),Oro=l(),Gn=a("li"),xae=a("strong"),Vro=o("convbert"),Xro=o(" \u2014 "),HR=a("a"),zro=o("ConvBertTokenizer"),Wro=o(" or "),UR=a("a"),Qro=o("ConvBertTokenizerFast"),Hro=o(" (ConvBERT model)"),Uro=l(),On=a("li"),$ae=a("strong"),Jro=o("cpm"),Yro=o(" \u2014 "),JR=a("a"),Kro=o("CpmTokenizer"),Zro=o(" or "),YR=a("a"),eto=o("CpmTokenizerFast"),oto=o(" (CPM model)"),rto=l(),qg=a("li"),kae=a("strong"),tto=o("ctrl"),ato=o(" \u2014 "),KR=a("a"),nto=o("CTRLTokenizer"),sto=o(" (CTRL model)"),lto=l(),Vn=a("li"),Sae=a("strong"),ito=o("data2vec-text"),dto=o(" \u2014 "),ZR=a("a"),cto=o("RobertaTokenizer"),fto=o(" or "),eP=a("a"),mto=o("RobertaTokenizerFast"),gto=o(" (Data2VecText model)"),hto=l(),Xn=a("li"),Rae=a("strong"),pto=o("deberta"),_to=o(" \u2014 "),oP=a("a"),uto=o("DebertaTokenizer"),bto=o(" or "),rP=a("a"),vto=o("DebertaTokenizerFast"),Fto=o(" (DeBERTa model)"),Tto=l(),zn=a("li"),Pae=a("strong"),Mto=o("deberta-v2"),Eto=o(" \u2014 "),tP=a("a"),Cto=o("DebertaV2Tokenizer"),wto=o(" or "),aP=a("a"),Ato=o("DebertaV2TokenizerFast"),Lto=o(" (DeBERTa-v2 model)"),yto=l(),Wn=a("li"),Bae=a("strong"),xto=o("distilbert"),$to=o(" \u2014 "),nP=a("a"),kto=o("DistilBertTokenizer"),Sto=o(" or "),sP=a("a"),Rto=o("DistilBertTokenizerFast"),Pto=o(" (DistilBERT model)"),Bto=l(),Qn=a("li"),Iae=a("strong"),Ito=o("dpr"),Nto=o(" \u2014 "),lP=a("a"),qto=o("DPRQuestionEncoderTokenizer"),jto=o(" or "),iP=a("a"),Dto=o("DPRQuestionEncoderTokenizerFast"),Gto=o(" (DPR model)"),Oto=l(),Hn=a("li"),Nae=a("strong"),Vto=o("electra"),Xto=o(" \u2014 "),dP=a("a"),zto=o("ElectraTokenizer"),Wto=o(" or "),cP=a("a"),Qto=o("ElectraTokenizerFast"),Hto=o(" (ELECTRA model)"),Uto=l(),jg=a("li"),qae=a("strong"),Jto=o("flaubert"),Yto=o(" \u2014 "),fP=a("a"),Kto=o("FlaubertTokenizer"),Zto=o(" (FlauBERT model)"),eao=l(),Un=a("li"),jae=a("strong"),oao=o("fnet"),rao=o(" \u2014 "),mP=a("a"),tao=o("FNetTokenizer"),aao=o(" or "),gP=a("a"),nao=o("FNetTokenizerFast"),sao=o(" (FNet model)"),lao=l(),Dg=a("li"),Dae=a("strong"),iao=o("fsmt"),dao=o(" \u2014 "),hP=a("a"),cao=o("FSMTTokenizer"),fao=o(" (FairSeq Machine-Translation model)"),mao=l(),Jn=a("li"),Gae=a("strong"),gao=o("funnel"),hao=o(" \u2014 "),pP=a("a"),pao=o("FunnelTokenizer"),_ao=o(" or "),_P=a("a"),uao=o("FunnelTokenizerFast"),bao=o(" (Funnel Transformer model)"),vao=l(),Yn=a("li"),Oae=a("strong"),Fao=o("gpt2"),Tao=o(" \u2014 "),uP=a("a"),Mao=o("GPT2Tokenizer"),Eao=o(" or "),bP=a("a"),Cao=o("GPT2TokenizerFast"),wao=o(" (OpenAI GPT-2 model)"),Aao=l(),Kn=a("li"),Vae=a("strong"),Lao=o("gpt_neo"),yao=o(" \u2014 "),vP=a("a"),xao=o("GPT2Tokenizer"),$ao=o(" or "),FP=a("a"),kao=o("GPT2TokenizerFast"),Sao=o(" (GPT Neo model)"),Rao=l(),Gg=a("li"),Xae=a("strong"),Pao=o("gpt_neox"),Bao=o(" \u2014 "),TP=a("a"),Iao=o("GPTNeoXTokenizerFast"),Nao=o(" (GPT NeoX model)"),qao=l(),Zn=a("li"),zae=a("strong"),jao=o("gptj"),Dao=o(" \u2014 "),MP=a("a"),Gao=o("GPT2Tokenizer"),Oao=o(" or "),EP=a("a"),Vao=o("GPT2TokenizerFast"),Xao=o(" (GPT-J model)"),zao=l(),es=a("li"),Wae=a("strong"),Wao=o("herbert"),Qao=o(" \u2014 "),CP=a("a"),Hao=o("HerbertTokenizer"),Uao=o(" or "),wP=a("a"),Jao=o("HerbertTokenizerFast"),Yao=o(" (HerBERT model)"),Kao=l(),Og=a("li"),Qae=a("strong"),Zao=o("hubert"),eno=o(" \u2014 "),AP=a("a"),ono=o("Wav2Vec2CTCTokenizer"),rno=o(" (Hubert model)"),tno=l(),os=a("li"),Hae=a("strong"),ano=o("ibert"),nno=o(" \u2014 "),LP=a("a"),sno=o("RobertaTokenizer"),lno=o(" or "),yP=a("a"),ino=o("RobertaTokenizerFast"),dno=o(" (I-BERT model)"),cno=l(),rs=a("li"),Uae=a("strong"),fno=o("layoutlm"),mno=o(" \u2014 "),xP=a("a"),gno=o("LayoutLMTokenizer"),hno=o(" or "),$P=a("a"),pno=o("LayoutLMTokenizerFast"),_no=o(" (LayoutLM model)"),uno=l(),ts=a("li"),Jae=a("strong"),bno=o("layoutlmv2"),vno=o(" \u2014 "),kP=a("a"),Fno=o("LayoutLMv2Tokenizer"),Tno=o(" or "),SP=a("a"),Mno=o("LayoutLMv2TokenizerFast"),Eno=o(" (LayoutLMv2 model)"),Cno=l(),as=a("li"),Yae=a("strong"),wno=o("layoutlmv3"),Ano=o(" \u2014 "),RP=a("a"),Lno=o("LayoutLMv3Tokenizer"),yno=o(" or "),PP=a("a"),xno=o("LayoutLMv3TokenizerFast"),$no=o(" (LayoutLMv3 model)"),kno=l(),ns=a("li"),Kae=a("strong"),Sno=o("layoutxlm"),Rno=o(" \u2014 "),BP=a("a"),Pno=o("LayoutXLMTokenizer"),Bno=o(" or "),IP=a("a"),Ino=o("LayoutXLMTokenizerFast"),Nno=o(" (LayoutXLM model)"),qno=l(),ss=a("li"),Zae=a("strong"),jno=o("led"),Dno=o(" \u2014 "),NP=a("a"),Gno=o("LEDTokenizer"),Ono=o(" or "),qP=a("a"),Vno=o("LEDTokenizerFast"),Xno=o(" (LED model)"),zno=l(),ls=a("li"),ene=a("strong"),Wno=o("longformer"),Qno=o(" \u2014 "),jP=a("a"),Hno=o("LongformerTokenizer"),Uno=o(" or "),DP=a("a"),Jno=o("LongformerTokenizerFast"),Yno=o(" (Longformer model)"),Kno=l(),Vg=a("li"),one=a("strong"),Zno=o("luke"),eso=o(" \u2014 "),GP=a("a"),oso=o("LukeTokenizer"),rso=o(" (LUKE model)"),tso=l(),is=a("li"),rne=a("strong"),aso=o("lxmert"),nso=o(" \u2014 "),OP=a("a"),sso=o("LxmertTokenizer"),lso=o(" or "),VP=a("a"),iso=o("LxmertTokenizerFast"),dso=o(" (LXMERT model)"),cso=l(),Xg=a("li"),tne=a("strong"),fso=o("m2m_100"),mso=o(" \u2014 "),XP=a("a"),gso=o("M2M100Tokenizer"),hso=o(" (M2M100 model)"),pso=l(),zg=a("li"),ane=a("strong"),_so=o("marian"),uso=o(" \u2014 "),zP=a("a"),bso=o("MarianTokenizer"),vso=o(" (Marian model)"),Fso=l(),ds=a("li"),nne=a("strong"),Tso=o("mbart"),Mso=o(" \u2014 "),WP=a("a"),Eso=o("MBartTokenizer"),Cso=o(" or "),QP=a("a"),wso=o("MBartTokenizerFast"),Aso=o(" (mBART model)"),Lso=l(),cs=a("li"),sne=a("strong"),yso=o("mbart50"),xso=o(" \u2014 "),HP=a("a"),$so=o("MBart50Tokenizer"),kso=o(" or "),UP=a("a"),Sso=o("MBart50TokenizerFast"),Rso=o(" (mBART-50 model)"),Pso=l(),fs=a("li"),lne=a("strong"),Bso=o("megatron-bert"),Iso=o(" \u2014 "),JP=a("a"),Nso=o("BertTokenizer"),qso=o(" or "),YP=a("a"),jso=o("BertTokenizerFast"),Dso=o(" (Megatron-BERT model)"),Gso=l(),Wg=a("li"),ine=a("strong"),Oso=o("mluke"),Vso=o(" \u2014 "),KP=a("a"),Xso=o("MLukeTokenizer"),zso=o(" (mLUKE model)"),Wso=l(),ms=a("li"),dne=a("strong"),Qso=o("mobilebert"),Hso=o(" \u2014 "),ZP=a("a"),Uso=o("MobileBertTokenizer"),Jso=o(" or "),eB=a("a"),Yso=o("MobileBertTokenizerFast"),Kso=o(" (MobileBERT model)"),Zso=l(),gs=a("li"),cne=a("strong"),elo=o("mpnet"),olo=o(" \u2014 "),oB=a("a"),rlo=o("MPNetTokenizer"),tlo=o(" or "),rB=a("a"),alo=o("MPNetTokenizerFast"),nlo=o(" (MPNet model)"),slo=l(),hs=a("li"),fne=a("strong"),llo=o("mt5"),ilo=o(" \u2014 "),tB=a("a"),dlo=o("MT5Tokenizer"),clo=o(" or "),aB=a("a"),flo=o("MT5TokenizerFast"),mlo=o(" (MT5 model)"),glo=l(),ps=a("li"),mne=a("strong"),hlo=o("nystromformer"),plo=o(" \u2014 "),nB=a("a"),_lo=o("AlbertTokenizer"),ulo=o(" or "),sB=a("a"),blo=o("AlbertTokenizerFast"),vlo=o(" (Nystr\xF6mformer model)"),Flo=l(),_s=a("li"),gne=a("strong"),Tlo=o("openai-gpt"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("OpenAIGPTTokenizer"),Clo=o(" or "),iB=a("a"),wlo=o("OpenAIGPTTokenizerFast"),Alo=o(" (OpenAI GPT model)"),Llo=l(),Qg=a("li"),hne=a("strong"),ylo=o("opt"),xlo=o(" \u2014 "),dB=a("a"),$lo=o("GPT2Tokenizer"),klo=o(" (OPT model)"),Slo=l(),us=a("li"),pne=a("strong"),Rlo=o("pegasus"),Plo=o(" \u2014 "),cB=a("a"),Blo=o("PegasusTokenizer"),Ilo=o(" or "),fB=a("a"),Nlo=o("PegasusTokenizerFast"),qlo=o(" (Pegasus model)"),jlo=l(),Hg=a("li"),_ne=a("strong"),Dlo=o("perceiver"),Glo=o(" \u2014 "),mB=a("a"),Olo=o("PerceiverTokenizer"),Vlo=o(" (Perceiver model)"),Xlo=l(),Ug=a("li"),une=a("strong"),zlo=o("phobert"),Wlo=o(" \u2014 "),gB=a("a"),Qlo=o("PhobertTokenizer"),Hlo=o(" (PhoBERT model)"),Ulo=l(),Jg=a("li"),bne=a("strong"),Jlo=o("plbart"),Ylo=o(" \u2014 "),hB=a("a"),Klo=o("PLBartTokenizer"),Zlo=o(" (PLBart model)"),eio=l(),Yg=a("li"),vne=a("strong"),oio=o("prophetnet"),rio=o(" \u2014 "),pB=a("a"),tio=o("ProphetNetTokenizer"),aio=o(" (ProphetNet model)"),nio=l(),bs=a("li"),Fne=a("strong"),sio=o("qdqbert"),lio=o(" \u2014 "),_B=a("a"),iio=o("BertTokenizer"),dio=o(" or "),uB=a("a"),cio=o("BertTokenizerFast"),fio=o(" (QDQBert model)"),mio=l(),Kg=a("li"),Tne=a("strong"),gio=o("rag"),hio=o(" \u2014 "),bB=a("a"),pio=o("RagTokenizer"),_io=o(" (RAG model)"),uio=l(),vs=a("li"),Mne=a("strong"),bio=o("realm"),vio=o(" \u2014 "),vB=a("a"),Fio=o("RealmTokenizer"),Tio=o(" or "),FB=a("a"),Mio=o("RealmTokenizerFast"),Eio=o(" (REALM model)"),Cio=l(),Fs=a("li"),Ene=a("strong"),wio=o("reformer"),Aio=o(" \u2014 "),TB=a("a"),Lio=o("ReformerTokenizer"),yio=o(" or "),MB=a("a"),xio=o("ReformerTokenizerFast"),$io=o(" (Reformer model)"),kio=l(),Ts=a("li"),Cne=a("strong"),Sio=o("rembert"),Rio=o(" \u2014 "),EB=a("a"),Pio=o("RemBertTokenizer"),Bio=o(" or "),CB=a("a"),Iio=o("RemBertTokenizerFast"),Nio=o(" (RemBERT model)"),qio=l(),Ms=a("li"),wne=a("strong"),jio=o("retribert"),Dio=o(" \u2014 "),wB=a("a"),Gio=o("RetriBertTokenizer"),Oio=o(" or "),AB=a("a"),Vio=o("RetriBertTokenizerFast"),Xio=o(" (RetriBERT model)"),zio=l(),Es=a("li"),Ane=a("strong"),Wio=o("roberta"),Qio=o(" \u2014 "),LB=a("a"),Hio=o("RobertaTokenizer"),Uio=o(" or "),yB=a("a"),Jio=o("RobertaTokenizerFast"),Yio=o(" (RoBERTa model)"),Kio=l(),Cs=a("li"),Lne=a("strong"),Zio=o("roformer"),edo=o(" \u2014 "),xB=a("a"),odo=o("RoFormerTokenizer"),rdo=o(" or "),$B=a("a"),tdo=o("RoFormerTokenizerFast"),ado=o(" (RoFormer model)"),ndo=l(),Zg=a("li"),yne=a("strong"),sdo=o("speech_to_text"),ldo=o(" \u2014 "),kB=a("a"),ido=o("Speech2TextTokenizer"),ddo=o(" (Speech2Text model)"),cdo=l(),eh=a("li"),xne=a("strong"),fdo=o("speech_to_text_2"),mdo=o(" \u2014 "),SB=a("a"),gdo=o("Speech2Text2Tokenizer"),hdo=o(" (Speech2Text2 model)"),pdo=l(),ws=a("li"),$ne=a("strong"),_do=o("splinter"),udo=o(" \u2014 "),RB=a("a"),bdo=o("SplinterTokenizer"),vdo=o(" or "),PB=a("a"),Fdo=o("SplinterTokenizerFast"),Tdo=o(" (Splinter model)"),Mdo=l(),As=a("li"),kne=a("strong"),Edo=o("squeezebert"),Cdo=o(" \u2014 "),BB=a("a"),wdo=o("SqueezeBertTokenizer"),Ado=o(" or "),IB=a("a"),Ldo=o("SqueezeBertTokenizerFast"),ydo=o(" (SqueezeBERT model)"),xdo=l(),Ls=a("li"),Sne=a("strong"),$do=o("t5"),kdo=o(" \u2014 "),NB=a("a"),Sdo=o("T5Tokenizer"),Rdo=o(" or "),qB=a("a"),Pdo=o("T5TokenizerFast"),Bdo=o(" (T5 model)"),Ido=l(),oh=a("li"),Rne=a("strong"),Ndo=o("tapas"),qdo=o(" \u2014 "),jB=a("a"),jdo=o("TapasTokenizer"),Ddo=o(" (TAPAS model)"),Gdo=l(),rh=a("li"),Pne=a("strong"),Odo=o("tapex"),Vdo=o(" \u2014 "),DB=a("a"),Xdo=o("TapexTokenizer"),zdo=o(" (TAPEX model)"),Wdo=l(),th=a("li"),Bne=a("strong"),Qdo=o("transfo-xl"),Hdo=o(" \u2014 "),GB=a("a"),Udo=o("TransfoXLTokenizer"),Jdo=o(" (Transformer-XL model)"),Ydo=l(),ys=a("li"),Ine=a("strong"),Kdo=o("visual_bert"),Zdo=o(" \u2014 "),OB=a("a"),eco=o("BertTokenizer"),oco=o(" or "),VB=a("a"),rco=o("BertTokenizerFast"),tco=o(" (VisualBERT model)"),aco=l(),ah=a("li"),Nne=a("strong"),nco=o("wav2vec2"),sco=o(" \u2014 "),XB=a("a"),lco=o("Wav2Vec2CTCTokenizer"),ico=o(" (Wav2Vec2 model)"),dco=l(),nh=a("li"),qne=a("strong"),cco=o("wav2vec2-conformer"),fco=o(" \u2014 "),zB=a("a"),mco=o("Wav2Vec2CTCTokenizer"),gco=o(" (Wav2Vec2-Conformer model)"),hco=l(),sh=a("li"),jne=a("strong"),pco=o("wav2vec2_phoneme"),_co=o(" \u2014 "),WB=a("a"),uco=o("Wav2Vec2PhonemeCTCTokenizer"),bco=o(" (Wav2Vec2Phoneme model)"),vco=l(),xs=a("li"),Dne=a("strong"),Fco=o("xglm"),Tco=o(" \u2014 "),QB=a("a"),Mco=o("XGLMTokenizer"),Eco=o(" or "),HB=a("a"),Cco=o("XGLMTokenizerFast"),wco=o(" (XGLM model)"),Aco=l(),lh=a("li"),Gne=a("strong"),Lco=o("xlm"),yco=o(" \u2014 "),UB=a("a"),xco=o("XLMTokenizer"),$co=o(" (XLM model)"),kco=l(),ih=a("li"),One=a("strong"),Sco=o("xlm-prophetnet"),Rco=o(" \u2014 "),JB=a("a"),Pco=o("XLMProphetNetTokenizer"),Bco=o(" (XLM-ProphetNet model)"),Ico=l(),$s=a("li"),Vne=a("strong"),Nco=o("xlm-roberta"),qco=o(" \u2014 "),YB=a("a"),jco=o("XLMRobertaTokenizer"),Dco=o(" or "),KB=a("a"),Gco=o("XLMRobertaTokenizerFast"),Oco=o(" (XLM-RoBERTa model)"),Vco=l(),ks=a("li"),Xne=a("strong"),Xco=o("xlm-roberta-xl"),zco=o(" \u2014 "),ZB=a("a"),Wco=o("RobertaTokenizer"),Qco=o(" or "),eI=a("a"),Hco=o("RobertaTokenizerFast"),Uco=o(" (XLM-RoBERTa-XL model)"),Jco=l(),Ss=a("li"),zne=a("strong"),Yco=o("xlnet"),Kco=o(" \u2014 "),oI=a("a"),Zco=o("XLNetTokenizer"),efo=o(" or "),rI=a("a"),ofo=o("XLNetTokenizerFast"),rfo=o(" (XLNet model)"),tfo=l(),Rs=a("li"),Wne=a("strong"),afo=o("yoso"),nfo=o(" \u2014 "),tI=a("a"),sfo=o("AlbertTokenizer"),lfo=o(" or "),aI=a("a"),ifo=o("AlbertTokenizerFast"),dfo=o(" (YOSO model)"),cfo=l(),F(dh.$$.fragment),ffo=l(),ch=a("div"),F(aL.$$.fragment),mfo=l(),Qne=a("p"),gfo=o("Register a new tokenizer in this mapping."),Aje=l(),Ei=a("h2"),fh=a("a"),Hne=a("span"),F(nL.$$.fragment),hfo=l(),Une=a("span"),pfo=o("AutoFeatureExtractor"),Lje=l(),Ao=a("div"),F(sL.$$.fragment),_fo=l(),lL=a("p"),ufo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nI=a("a"),bfo=o("AutoFeatureExtractor.from_pretrained()"),vfo=o(" class method."),Ffo=l(),iL=a("p"),Tfo=o("This class cannot be instantiated directly using "),Jne=a("code"),Mfo=o("__init__()"),Efo=o(" (throws an error)."),Cfo=l(),He=a("div"),F(dL.$$.fragment),wfo=l(),Yne=a("p"),Afo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lfo=l(),La=a("p"),yfo=o("The feature extractor class to instantiate is selected based on the "),Kne=a("code"),xfo=o("model_type"),$fo=o(` property of the config object
(either passed as an argument or loaded from `),Zne=a("code"),kfo=o("pretrained_model_name_or_path"),Sfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ese=a("code"),Rfo=o("pretrained_model_name_or_path"),Pfo=o(":"),Bfo=l(),Y=a("ul"),mh=a("li"),ose=a("strong"),Ifo=o("beit"),Nfo=o(" \u2014 "),sI=a("a"),qfo=o("BeitFeatureExtractor"),jfo=o(" (BEiT model)"),Dfo=l(),gh=a("li"),rse=a("strong"),Gfo=o("clip"),Ofo=o(" \u2014 "),lI=a("a"),Vfo=o("CLIPFeatureExtractor"),Xfo=o(" (CLIP model)"),zfo=l(),hh=a("li"),tse=a("strong"),Wfo=o("convnext"),Qfo=o(" \u2014 "),iI=a("a"),Hfo=o("ConvNextFeatureExtractor"),Ufo=o(" (ConvNeXT model)"),Jfo=l(),ph=a("li"),ase=a("strong"),Yfo=o("cvt"),Kfo=o(" \u2014 "),dI=a("a"),Zfo=o("ConvNextFeatureExtractor"),emo=o(" (CvT model)"),omo=l(),_h=a("li"),nse=a("strong"),rmo=o("data2vec-audio"),tmo=o(" \u2014 "),cI=a("a"),amo=o("Wav2Vec2FeatureExtractor"),nmo=o(" (Data2VecAudio model)"),smo=l(),uh=a("li"),sse=a("strong"),lmo=o("data2vec-vision"),imo=o(" \u2014 "),fI=a("a"),dmo=o("BeitFeatureExtractor"),cmo=o(" (Data2VecVision model)"),fmo=l(),bh=a("li"),lse=a("strong"),mmo=o("deit"),gmo=o(" \u2014 "),mI=a("a"),hmo=o("DeiTFeatureExtractor"),pmo=o(" (DeiT model)"),_mo=l(),vh=a("li"),ise=a("strong"),umo=o("detr"),bmo=o(" \u2014 "),gI=a("a"),vmo=o("DetrFeatureExtractor"),Fmo=o(" (DETR model)"),Tmo=l(),Fh=a("li"),dse=a("strong"),Mmo=o("dpt"),Emo=o(" \u2014 "),hI=a("a"),Cmo=o("DPTFeatureExtractor"),wmo=o(" (DPT model)"),Amo=l(),Th=a("li"),cse=a("strong"),Lmo=o("flava"),ymo=o(" \u2014 "),pI=a("a"),xmo=o("FlavaFeatureExtractor"),$mo=o(" (FLAVA model)"),kmo=l(),Mh=a("li"),fse=a("strong"),Smo=o("glpn"),Rmo=o(" \u2014 "),_I=a("a"),Pmo=o("GLPNFeatureExtractor"),Bmo=o(" (GLPN model)"),Imo=l(),Eh=a("li"),mse=a("strong"),Nmo=o("hubert"),qmo=o(" \u2014 "),uI=a("a"),jmo=o("Wav2Vec2FeatureExtractor"),Dmo=o(" (Hubert model)"),Gmo=l(),Ch=a("li"),gse=a("strong"),Omo=o("imagegpt"),Vmo=o(" \u2014 "),bI=a("a"),Xmo=o("ImageGPTFeatureExtractor"),zmo=o(" (ImageGPT model)"),Wmo=l(),wh=a("li"),hse=a("strong"),Qmo=o("layoutlmv2"),Hmo=o(" \u2014 "),vI=a("a"),Umo=o("LayoutLMv2FeatureExtractor"),Jmo=o(" (LayoutLMv2 model)"),Ymo=l(),Ah=a("li"),pse=a("strong"),Kmo=o("layoutlmv3"),Zmo=o(" \u2014 "),FI=a("a"),ego=o("LayoutLMv3FeatureExtractor"),ogo=o(" (LayoutLMv3 model)"),rgo=l(),Lh=a("li"),_se=a("strong"),tgo=o("levit"),ago=o(" \u2014 "),TI=a("a"),ngo=o("LevitFeatureExtractor"),sgo=o(" (LeViT model)"),lgo=l(),yh=a("li"),use=a("strong"),igo=o("maskformer"),dgo=o(" \u2014 "),MI=a("a"),cgo=o("MaskFormerFeatureExtractor"),fgo=o(" (MaskFormer model)"),mgo=l(),xh=a("li"),bse=a("strong"),ggo=o("mctct"),hgo=o(" \u2014 "),EI=a("a"),pgo=o("MCTCTFeatureExtractor"),_go=o(" (M-CTC-T model)"),ugo=l(),$h=a("li"),vse=a("strong"),bgo=o("perceiver"),vgo=o(" \u2014 "),CI=a("a"),Fgo=o("PerceiverFeatureExtractor"),Tgo=o(" (Perceiver model)"),Mgo=l(),kh=a("li"),Fse=a("strong"),Ego=o("poolformer"),Cgo=o(" \u2014 "),wI=a("a"),wgo=o("PoolFormerFeatureExtractor"),Ago=o(" (PoolFormer model)"),Lgo=l(),Sh=a("li"),Tse=a("strong"),ygo=o("regnet"),xgo=o(" \u2014 "),AI=a("a"),$go=o("ConvNextFeatureExtractor"),kgo=o(" (RegNet model)"),Sgo=l(),Rh=a("li"),Mse=a("strong"),Rgo=o("resnet"),Pgo=o(" \u2014 "),LI=a("a"),Bgo=o("ConvNextFeatureExtractor"),Igo=o(" (ResNet model)"),Ngo=l(),Ph=a("li"),Ese=a("strong"),qgo=o("segformer"),jgo=o(" \u2014 "),yI=a("a"),Dgo=o("SegformerFeatureExtractor"),Ggo=o(" (SegFormer model)"),Ogo=l(),Bh=a("li"),Cse=a("strong"),Vgo=o("speech_to_text"),Xgo=o(" \u2014 "),xI=a("a"),zgo=o("Speech2TextFeatureExtractor"),Wgo=o(" (Speech2Text model)"),Qgo=l(),Ih=a("li"),wse=a("strong"),Hgo=o("swin"),Ugo=o(" \u2014 "),$I=a("a"),Jgo=o("ViTFeatureExtractor"),Ygo=o(" (Swin Transformer model)"),Kgo=l(),Nh=a("li"),Ase=a("strong"),Zgo=o("van"),eho=o(" \u2014 "),kI=a("a"),oho=o("ConvNextFeatureExtractor"),rho=o(" (VAN model)"),tho=l(),qh=a("li"),Lse=a("strong"),aho=o("vit"),nho=o(" \u2014 "),SI=a("a"),sho=o("ViTFeatureExtractor"),lho=o(" (ViT model)"),iho=l(),jh=a("li"),yse=a("strong"),dho=o("vit_mae"),cho=o(" \u2014 "),RI=a("a"),fho=o("ViTFeatureExtractor"),mho=o(" (ViTMAE model)"),gho=l(),Dh=a("li"),xse=a("strong"),hho=o("wav2vec2"),pho=o(" \u2014 "),PI=a("a"),_ho=o("Wav2Vec2FeatureExtractor"),uho=o(" (Wav2Vec2 model)"),bho=l(),Gh=a("li"),$se=a("strong"),vho=o("wav2vec2-conformer"),Fho=o(" \u2014 "),BI=a("a"),Tho=o("Wav2Vec2FeatureExtractor"),Mho=o(" (Wav2Vec2-Conformer model)"),Eho=l(),Oh=a("li"),kse=a("strong"),Cho=o("yolos"),who=o(" \u2014 "),II=a("a"),Aho=o("YolosFeatureExtractor"),Lho=o(" (YOLOS model)"),yho=l(),F(Vh.$$.fragment),xho=l(),F(Xh.$$.fragment),$ho=l(),zh=a("div"),F(cL.$$.fragment),kho=l(),Sse=a("p"),Sho=o("Register a new feature extractor for this class."),yje=l(),Ci=a("h2"),Wh=a("a"),Rse=a("span"),F(fL.$$.fragment),Rho=l(),Pse=a("span"),Pho=o("AutoProcessor"),xje=l(),Lo=a("div"),F(mL.$$.fragment),Bho=l(),gL=a("p"),Iho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NI=a("a"),Nho=o("AutoProcessor.from_pretrained()"),qho=o(" class method."),jho=l(),hL=a("p"),Dho=o("This class cannot be instantiated directly using "),Bse=a("code"),Gho=o("__init__()"),Oho=o(" (throws an error)."),Vho=l(),Ue=a("div"),F(pL.$$.fragment),Xho=l(),Ise=a("p"),zho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Who=l(),wi=a("p"),Qho=o("The processor class to instantiate is selected based on the "),Nse=a("code"),Hho=o("model_type"),Uho=o(` property of the config object (either
passed as an argument or loaded from `),qse=a("code"),Jho=o("pretrained_model_name_or_path"),Yho=o(" if possible):"),Kho=l(),he=a("ul"),Qh=a("li"),jse=a("strong"),Zho=o("clip"),epo=o(" \u2014 "),qI=a("a"),opo=o("CLIPProcessor"),rpo=o(" (CLIP model)"),tpo=l(),Hh=a("li"),Dse=a("strong"),apo=o("flava"),npo=o(" \u2014 "),Gse=a("code"),spo=o("FLAVAProcessor"),lpo=o(" (FLAVA model)"),ipo=l(),Uh=a("li"),Ose=a("strong"),dpo=o("layoutlmv2"),cpo=o(" \u2014 "),jI=a("a"),fpo=o("LayoutLMv2Processor"),mpo=o(" (LayoutLMv2 model)"),gpo=l(),Jh=a("li"),Vse=a("strong"),hpo=o("layoutlmv3"),ppo=o(" \u2014 "),DI=a("a"),_po=o("LayoutLMv3Processor"),upo=o(" (LayoutLMv3 model)"),bpo=l(),Yh=a("li"),Xse=a("strong"),vpo=o("layoutxlm"),Fpo=o(" \u2014 "),GI=a("a"),Tpo=o("LayoutXLMProcessor"),Mpo=o(" (LayoutXLM model)"),Epo=l(),Kh=a("li"),zse=a("strong"),Cpo=o("sew"),wpo=o(" \u2014 "),OI=a("a"),Apo=o("Wav2Vec2Processor"),Lpo=o(" (SEW model)"),ypo=l(),Zh=a("li"),Wse=a("strong"),xpo=o("sew-d"),$po=o(" \u2014 "),VI=a("a"),kpo=o("Wav2Vec2Processor"),Spo=o(" (SEW-D model)"),Rpo=l(),ep=a("li"),Qse=a("strong"),Ppo=o("speech_to_text"),Bpo=o(" \u2014 "),XI=a("a"),Ipo=o("Speech2TextProcessor"),Npo=o(" (Speech2Text model)"),qpo=l(),op=a("li"),Hse=a("strong"),jpo=o("speech_to_text_2"),Dpo=o(" \u2014 "),zI=a("a"),Gpo=o("Speech2Text2Processor"),Opo=o(" (Speech2Text2 model)"),Vpo=l(),rp=a("li"),Use=a("strong"),Xpo=o("trocr"),zpo=o(" \u2014 "),WI=a("a"),Wpo=o("TrOCRProcessor"),Qpo=o(" (TrOCR model)"),Hpo=l(),tp=a("li"),Jse=a("strong"),Upo=o("unispeech"),Jpo=o(" \u2014 "),QI=a("a"),Ypo=o("Wav2Vec2Processor"),Kpo=o(" (UniSpeech model)"),Zpo=l(),ap=a("li"),Yse=a("strong"),e_o=o("unispeech-sat"),o_o=o(" \u2014 "),HI=a("a"),r_o=o("Wav2Vec2Processor"),t_o=o(" (UniSpeechSat model)"),a_o=l(),np=a("li"),Kse=a("strong"),n_o=o("vilt"),s_o=o(" \u2014 "),UI=a("a"),l_o=o("ViltProcessor"),i_o=o(" (ViLT model)"),d_o=l(),sp=a("li"),Zse=a("strong"),c_o=o("vision-text-dual-encoder"),f_o=o(" \u2014 "),JI=a("a"),m_o=o("VisionTextDualEncoderProcessor"),g_o=o(" (VisionTextDualEncoder model)"),h_o=l(),lp=a("li"),ele=a("strong"),p_o=o("wav2vec2"),__o=o(" \u2014 "),YI=a("a"),u_o=o("Wav2Vec2Processor"),b_o=o(" (Wav2Vec2 model)"),v_o=l(),ip=a("li"),ole=a("strong"),F_o=o("wav2vec2-conformer"),T_o=o(" \u2014 "),KI=a("a"),M_o=o("Wav2Vec2Processor"),E_o=o(" (Wav2Vec2-Conformer model)"),C_o=l(),dp=a("li"),rle=a("strong"),w_o=o("wavlm"),A_o=o(" \u2014 "),ZI=a("a"),L_o=o("Wav2Vec2Processor"),y_o=o(" (WavLM model)"),x_o=l(),F(cp.$$.fragment),$_o=l(),F(fp.$$.fragment),k_o=l(),mp=a("div"),F(_L.$$.fragment),S_o=l(),tle=a("p"),R_o=o("Register a new processor for this class."),$je=l(),Ai=a("h2"),gp=a("a"),ale=a("span"),F(uL.$$.fragment),P_o=l(),nle=a("span"),B_o=o("AutoModel"),kje=l(),yo=a("div"),F(bL.$$.fragment),I_o=l(),Li=a("p"),N_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eN=a("a"),q_o=o("from_pretrained()"),j_o=o(" class method or the "),oN=a("a"),D_o=o("from_config()"),G_o=o(` class
method.`),O_o=l(),vL=a("p"),V_o=o("This class cannot be instantiated directly using "),sle=a("code"),X_o=o("__init__()"),z_o=o(" (throws an error)."),W_o=l(),tt=a("div"),F(FL.$$.fragment),Q_o=l(),lle=a("p"),H_o=o("Instantiates one of the base model classes of the library from a configuration."),U_o=l(),yi=a("p"),J_o=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),Y_o=o("not"),K_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rN=a("a"),Z_o=o("from_pretrained()"),euo=o(" to load the model weights."),ouo=l(),F(hp.$$.fragment),ruo=l(),Je=a("div"),F(TL.$$.fragment),tuo=l(),dle=a("p"),auo=o("Instantiate one of the base model classes of the library from a pretrained model."),nuo=l(),ya=a("p"),suo=o("The model class to instantiate is selected based on the "),cle=a("code"),luo=o("model_type"),iuo=o(` property of the config object (either
passed as an argument or loaded from `),fle=a("code"),duo=o("pretrained_model_name_or_path"),cuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mle=a("code"),fuo=o("pretrained_model_name_or_path"),muo=o(":"),guo=l(),y=a("ul"),pp=a("li"),gle=a("strong"),huo=o("albert"),puo=o(" \u2014 "),tN=a("a"),_uo=o("AlbertModel"),uuo=o(" (ALBERT model)"),buo=l(),_p=a("li"),hle=a("strong"),vuo=o("bart"),Fuo=o(" \u2014 "),aN=a("a"),Tuo=o("BartModel"),Muo=o(" (BART model)"),Euo=l(),up=a("li"),ple=a("strong"),Cuo=o("beit"),wuo=o(" \u2014 "),nN=a("a"),Auo=o("BeitModel"),Luo=o(" (BEiT model)"),yuo=l(),bp=a("li"),_le=a("strong"),xuo=o("bert"),$uo=o(" \u2014 "),sN=a("a"),kuo=o("BertModel"),Suo=o(" (BERT model)"),Ruo=l(),vp=a("li"),ule=a("strong"),Puo=o("bert-generation"),Buo=o(" \u2014 "),lN=a("a"),Iuo=o("BertGenerationEncoder"),Nuo=o(" (Bert Generation model)"),quo=l(),Fp=a("li"),ble=a("strong"),juo=o("big_bird"),Duo=o(" \u2014 "),iN=a("a"),Guo=o("BigBirdModel"),Ouo=o(" (BigBird model)"),Vuo=l(),Tp=a("li"),vle=a("strong"),Xuo=o("bigbird_pegasus"),zuo=o(" \u2014 "),dN=a("a"),Wuo=o("BigBirdPegasusModel"),Quo=o(" (BigBird-Pegasus model)"),Huo=l(),Mp=a("li"),Fle=a("strong"),Uuo=o("blenderbot"),Juo=o(" \u2014 "),cN=a("a"),Yuo=o("BlenderbotModel"),Kuo=o(" (Blenderbot model)"),Zuo=l(),Ep=a("li"),Tle=a("strong"),e4o=o("blenderbot-small"),o4o=o(" \u2014 "),fN=a("a"),r4o=o("BlenderbotSmallModel"),t4o=o(" (BlenderbotSmall model)"),a4o=l(),Cp=a("li"),Mle=a("strong"),n4o=o("bloom"),s4o=o(" \u2014 "),mN=a("a"),l4o=o("BloomModel"),i4o=o(" (BLOOM model)"),d4o=l(),wp=a("li"),Ele=a("strong"),c4o=o("camembert"),f4o=o(" \u2014 "),gN=a("a"),m4o=o("CamembertModel"),g4o=o(" (CamemBERT model)"),h4o=l(),Ap=a("li"),Cle=a("strong"),p4o=o("canine"),_4o=o(" \u2014 "),hN=a("a"),u4o=o("CanineModel"),b4o=o(" (CANINE model)"),v4o=l(),Lp=a("li"),wle=a("strong"),F4o=o("clip"),T4o=o(" \u2014 "),pN=a("a"),M4o=o("CLIPModel"),E4o=o(" (CLIP model)"),C4o=l(),yp=a("li"),Ale=a("strong"),w4o=o("convbert"),A4o=o(" \u2014 "),_N=a("a"),L4o=o("ConvBertModel"),y4o=o(" (ConvBERT model)"),x4o=l(),xp=a("li"),Lle=a("strong"),$4o=o("convnext"),k4o=o(" \u2014 "),uN=a("a"),S4o=o("ConvNextModel"),R4o=o(" (ConvNeXT model)"),P4o=l(),$p=a("li"),yle=a("strong"),B4o=o("ctrl"),I4o=o(" \u2014 "),bN=a("a"),N4o=o("CTRLModel"),q4o=o(" (CTRL model)"),j4o=l(),kp=a("li"),xle=a("strong"),D4o=o("cvt"),G4o=o(" \u2014 "),vN=a("a"),O4o=o("CvtModel"),V4o=o(" (CvT model)"),X4o=l(),Sp=a("li"),$le=a("strong"),z4o=o("data2vec-audio"),W4o=o(" \u2014 "),FN=a("a"),Q4o=o("Data2VecAudioModel"),H4o=o(" (Data2VecAudio model)"),U4o=l(),Rp=a("li"),kle=a("strong"),J4o=o("data2vec-text"),Y4o=o(" \u2014 "),TN=a("a"),K4o=o("Data2VecTextModel"),Z4o=o(" (Data2VecText model)"),e1o=l(),Pp=a("li"),Sle=a("strong"),o1o=o("data2vec-vision"),r1o=o(" \u2014 "),MN=a("a"),t1o=o("Data2VecVisionModel"),a1o=o(" (Data2VecVision model)"),n1o=l(),Bp=a("li"),Rle=a("strong"),s1o=o("deberta"),l1o=o(" \u2014 "),EN=a("a"),i1o=o("DebertaModel"),d1o=o(" (DeBERTa model)"),c1o=l(),Ip=a("li"),Ple=a("strong"),f1o=o("deberta-v2"),m1o=o(" \u2014 "),CN=a("a"),g1o=o("DebertaV2Model"),h1o=o(" (DeBERTa-v2 model)"),p1o=l(),Np=a("li"),Ble=a("strong"),_1o=o("decision_transformer"),u1o=o(" \u2014 "),wN=a("a"),b1o=o("DecisionTransformerModel"),v1o=o(" (Decision Transformer model)"),F1o=l(),qp=a("li"),Ile=a("strong"),T1o=o("deit"),M1o=o(" \u2014 "),AN=a("a"),E1o=o("DeiTModel"),C1o=o(" (DeiT model)"),w1o=l(),jp=a("li"),Nle=a("strong"),A1o=o("detr"),L1o=o(" \u2014 "),LN=a("a"),y1o=o("DetrModel"),x1o=o(" (DETR model)"),$1o=l(),Dp=a("li"),qle=a("strong"),k1o=o("distilbert"),S1o=o(" \u2014 "),yN=a("a"),R1o=o("DistilBertModel"),P1o=o(" (DistilBERT model)"),B1o=l(),Gp=a("li"),jle=a("strong"),I1o=o("dpr"),N1o=o(" \u2014 "),xN=a("a"),q1o=o("DPRQuestionEncoder"),j1o=o(" (DPR model)"),D1o=l(),Op=a("li"),Dle=a("strong"),G1o=o("dpt"),O1o=o(" \u2014 "),$N=a("a"),V1o=o("DPTModel"),X1o=o(" (DPT model)"),z1o=l(),Vp=a("li"),Gle=a("strong"),W1o=o("electra"),Q1o=o(" \u2014 "),kN=a("a"),H1o=o("ElectraModel"),U1o=o(" (ELECTRA model)"),J1o=l(),Xp=a("li"),Ole=a("strong"),Y1o=o("flaubert"),K1o=o(" \u2014 "),SN=a("a"),Z1o=o("FlaubertModel"),e7o=o(" (FlauBERT model)"),o7o=l(),zp=a("li"),Vle=a("strong"),r7o=o("flava"),t7o=o(" \u2014 "),RN=a("a"),a7o=o("FlavaModel"),n7o=o(" (FLAVA model)"),s7o=l(),Wp=a("li"),Xle=a("strong"),l7o=o("fnet"),i7o=o(" \u2014 "),PN=a("a"),d7o=o("FNetModel"),c7o=o(" (FNet model)"),f7o=l(),Qp=a("li"),zle=a("strong"),m7o=o("fsmt"),g7o=o(" \u2014 "),BN=a("a"),h7o=o("FSMTModel"),p7o=o(" (FairSeq Machine-Translation model)"),_7o=l(),Ps=a("li"),Wle=a("strong"),u7o=o("funnel"),b7o=o(" \u2014 "),IN=a("a"),v7o=o("FunnelModel"),F7o=o(" or "),NN=a("a"),T7o=o("FunnelBaseModel"),M7o=o(" (Funnel Transformer model)"),E7o=l(),Hp=a("li"),Qle=a("strong"),C7o=o("glpn"),w7o=o(" \u2014 "),qN=a("a"),A7o=o("GLPNModel"),L7o=o(" (GLPN model)"),y7o=l(),Up=a("li"),Hle=a("strong"),x7o=o("gpt2"),$7o=o(" \u2014 "),jN=a("a"),k7o=o("GPT2Model"),S7o=o(" (OpenAI GPT-2 model)"),R7o=l(),Jp=a("li"),Ule=a("strong"),P7o=o("gpt_neo"),B7o=o(" \u2014 "),DN=a("a"),I7o=o("GPTNeoModel"),N7o=o(" (GPT Neo model)"),q7o=l(),Yp=a("li"),Jle=a("strong"),j7o=o("gpt_neox"),D7o=o(" \u2014 "),GN=a("a"),G7o=o("GPTNeoXModel"),O7o=o(" (GPT NeoX model)"),V7o=l(),Kp=a("li"),Yle=a("strong"),X7o=o("gptj"),z7o=o(" \u2014 "),ON=a("a"),W7o=o("GPTJModel"),Q7o=o(" (GPT-J model)"),H7o=l(),Zp=a("li"),Kle=a("strong"),U7o=o("hubert"),J7o=o(" \u2014 "),VN=a("a"),Y7o=o("HubertModel"),K7o=o(" (Hubert model)"),Z7o=l(),e_=a("li"),Zle=a("strong"),ebo=o("ibert"),obo=o(" \u2014 "),XN=a("a"),rbo=o("IBertModel"),tbo=o(" (I-BERT model)"),abo=l(),o_=a("li"),eie=a("strong"),nbo=o("imagegpt"),sbo=o(" \u2014 "),zN=a("a"),lbo=o("ImageGPTModel"),ibo=o(" (ImageGPT model)"),dbo=l(),r_=a("li"),oie=a("strong"),cbo=o("layoutlm"),fbo=o(" \u2014 "),WN=a("a"),mbo=o("LayoutLMModel"),gbo=o(" (LayoutLM model)"),hbo=l(),t_=a("li"),rie=a("strong"),pbo=o("layoutlmv2"),_bo=o(" \u2014 "),QN=a("a"),ubo=o("LayoutLMv2Model"),bbo=o(" (LayoutLMv2 model)"),vbo=l(),a_=a("li"),tie=a("strong"),Fbo=o("layoutlmv3"),Tbo=o(" \u2014 "),HN=a("a"),Mbo=o("LayoutLMv3Model"),Ebo=o(" (LayoutLMv3 model)"),Cbo=l(),n_=a("li"),aie=a("strong"),wbo=o("led"),Abo=o(" \u2014 "),UN=a("a"),Lbo=o("LEDModel"),ybo=o(" (LED model)"),xbo=l(),s_=a("li"),nie=a("strong"),$bo=o("levit"),kbo=o(" \u2014 "),JN=a("a"),Sbo=o("LevitModel"),Rbo=o(" (LeViT model)"),Pbo=l(),l_=a("li"),sie=a("strong"),Bbo=o("longformer"),Ibo=o(" \u2014 "),YN=a("a"),Nbo=o("LongformerModel"),qbo=o(" (Longformer model)"),jbo=l(),i_=a("li"),lie=a("strong"),Dbo=o("luke"),Gbo=o(" \u2014 "),KN=a("a"),Obo=o("LukeModel"),Vbo=o(" (LUKE model)"),Xbo=l(),d_=a("li"),iie=a("strong"),zbo=o("lxmert"),Wbo=o(" \u2014 "),ZN=a("a"),Qbo=o("LxmertModel"),Hbo=o(" (LXMERT model)"),Ubo=l(),c_=a("li"),die=a("strong"),Jbo=o("m2m_100"),Ybo=o(" \u2014 "),eq=a("a"),Kbo=o("M2M100Model"),Zbo=o(" (M2M100 model)"),e2o=l(),f_=a("li"),cie=a("strong"),o2o=o("marian"),r2o=o(" \u2014 "),oq=a("a"),t2o=o("MarianModel"),a2o=o(" (Marian model)"),n2o=l(),m_=a("li"),fie=a("strong"),s2o=o("maskformer"),l2o=o(" \u2014 "),rq=a("a"),i2o=o("MaskFormerModel"),d2o=o(" (MaskFormer model)"),c2o=l(),g_=a("li"),mie=a("strong"),f2o=o("mbart"),m2o=o(" \u2014 "),tq=a("a"),g2o=o("MBartModel"),h2o=o(" (mBART model)"),p2o=l(),h_=a("li"),gie=a("strong"),_2o=o("mctct"),u2o=o(" \u2014 "),aq=a("a"),b2o=o("MCTCTModel"),v2o=o(" (M-CTC-T model)"),F2o=l(),p_=a("li"),hie=a("strong"),T2o=o("megatron-bert"),M2o=o(" \u2014 "),nq=a("a"),E2o=o("MegatronBertModel"),C2o=o(" (Megatron-BERT model)"),w2o=l(),__=a("li"),pie=a("strong"),A2o=o("mobilebert"),L2o=o(" \u2014 "),sq=a("a"),y2o=o("MobileBertModel"),x2o=o(" (MobileBERT model)"),$2o=l(),u_=a("li"),_ie=a("strong"),k2o=o("mpnet"),S2o=o(" \u2014 "),lq=a("a"),R2o=o("MPNetModel"),P2o=o(" (MPNet model)"),B2o=l(),b_=a("li"),uie=a("strong"),I2o=o("mt5"),N2o=o(" \u2014 "),iq=a("a"),q2o=o("MT5Model"),j2o=o(" (MT5 model)"),D2o=l(),v_=a("li"),bie=a("strong"),G2o=o("nystromformer"),O2o=o(" \u2014 "),dq=a("a"),V2o=o("NystromformerModel"),X2o=o(" (Nystr\xF6mformer model)"),z2o=l(),F_=a("li"),vie=a("strong"),W2o=o("openai-gpt"),Q2o=o(" \u2014 "),cq=a("a"),H2o=o("OpenAIGPTModel"),U2o=o(" (OpenAI GPT model)"),J2o=l(),T_=a("li"),Fie=a("strong"),Y2o=o("opt"),K2o=o(" \u2014 "),fq=a("a"),Z2o=o("OPTModel"),evo=o(" (OPT model)"),ovo=l(),M_=a("li"),Tie=a("strong"),rvo=o("pegasus"),tvo=o(" \u2014 "),mq=a("a"),avo=o("PegasusModel"),nvo=o(" (Pegasus model)"),svo=l(),E_=a("li"),Mie=a("strong"),lvo=o("perceiver"),ivo=o(" \u2014 "),gq=a("a"),dvo=o("PerceiverModel"),cvo=o(" (Perceiver model)"),fvo=l(),C_=a("li"),Eie=a("strong"),mvo=o("plbart"),gvo=o(" \u2014 "),hq=a("a"),hvo=o("PLBartModel"),pvo=o(" (PLBart model)"),_vo=l(),w_=a("li"),Cie=a("strong"),uvo=o("poolformer"),bvo=o(" \u2014 "),pq=a("a"),vvo=o("PoolFormerModel"),Fvo=o(" (PoolFormer model)"),Tvo=l(),A_=a("li"),wie=a("strong"),Mvo=o("prophetnet"),Evo=o(" \u2014 "),_q=a("a"),Cvo=o("ProphetNetModel"),wvo=o(" (ProphetNet model)"),Avo=l(),L_=a("li"),Aie=a("strong"),Lvo=o("qdqbert"),yvo=o(" \u2014 "),uq=a("a"),xvo=o("QDQBertModel"),$vo=o(" (QDQBert model)"),kvo=l(),y_=a("li"),Lie=a("strong"),Svo=o("reformer"),Rvo=o(" \u2014 "),bq=a("a"),Pvo=o("ReformerModel"),Bvo=o(" (Reformer model)"),Ivo=l(),x_=a("li"),yie=a("strong"),Nvo=o("regnet"),qvo=o(" \u2014 "),vq=a("a"),jvo=o("RegNetModel"),Dvo=o(" (RegNet model)"),Gvo=l(),$_=a("li"),xie=a("strong"),Ovo=o("rembert"),Vvo=o(" \u2014 "),Fq=a("a"),Xvo=o("RemBertModel"),zvo=o(" (RemBERT model)"),Wvo=l(),k_=a("li"),$ie=a("strong"),Qvo=o("resnet"),Hvo=o(" \u2014 "),Tq=a("a"),Uvo=o("ResNetModel"),Jvo=o(" (ResNet model)"),Yvo=l(),S_=a("li"),kie=a("strong"),Kvo=o("retribert"),Zvo=o(" \u2014 "),Mq=a("a"),eFo=o("RetriBertModel"),oFo=o(" (RetriBERT model)"),rFo=l(),R_=a("li"),Sie=a("strong"),tFo=o("roberta"),aFo=o(" \u2014 "),Eq=a("a"),nFo=o("RobertaModel"),sFo=o(" (RoBERTa model)"),lFo=l(),P_=a("li"),Rie=a("strong"),iFo=o("roformer"),dFo=o(" \u2014 "),Cq=a("a"),cFo=o("RoFormerModel"),fFo=o(" (RoFormer model)"),mFo=l(),B_=a("li"),Pie=a("strong"),gFo=o("segformer"),hFo=o(" \u2014 "),wq=a("a"),pFo=o("SegformerModel"),_Fo=o(" (SegFormer model)"),uFo=l(),I_=a("li"),Bie=a("strong"),bFo=o("sew"),vFo=o(" \u2014 "),Aq=a("a"),FFo=o("SEWModel"),TFo=o(" (SEW model)"),MFo=l(),N_=a("li"),Iie=a("strong"),EFo=o("sew-d"),CFo=o(" \u2014 "),Lq=a("a"),wFo=o("SEWDModel"),AFo=o(" (SEW-D model)"),LFo=l(),q_=a("li"),Nie=a("strong"),yFo=o("speech_to_text"),xFo=o(" \u2014 "),yq=a("a"),$Fo=o("Speech2TextModel"),kFo=o(" (Speech2Text model)"),SFo=l(),j_=a("li"),qie=a("strong"),RFo=o("splinter"),PFo=o(" \u2014 "),xq=a("a"),BFo=o("SplinterModel"),IFo=o(" (Splinter model)"),NFo=l(),D_=a("li"),jie=a("strong"),qFo=o("squeezebert"),jFo=o(" \u2014 "),$q=a("a"),DFo=o("SqueezeBertModel"),GFo=o(" (SqueezeBERT model)"),OFo=l(),G_=a("li"),Die=a("strong"),VFo=o("swin"),XFo=o(" \u2014 "),kq=a("a"),zFo=o("SwinModel"),WFo=o(" (Swin Transformer model)"),QFo=l(),O_=a("li"),Gie=a("strong"),HFo=o("t5"),UFo=o(" \u2014 "),Sq=a("a"),JFo=o("T5Model"),YFo=o(" (T5 model)"),KFo=l(),V_=a("li"),Oie=a("strong"),ZFo=o("tapas"),eTo=o(" \u2014 "),Rq=a("a"),oTo=o("TapasModel"),rTo=o(" (TAPAS model)"),tTo=l(),X_=a("li"),Vie=a("strong"),aTo=o("trajectory_transformer"),nTo=o(" \u2014 "),Pq=a("a"),sTo=o("TrajectoryTransformerModel"),lTo=o(" (Trajectory Transformer model)"),iTo=l(),z_=a("li"),Xie=a("strong"),dTo=o("transfo-xl"),cTo=o(" \u2014 "),Bq=a("a"),fTo=o("TransfoXLModel"),mTo=o(" (Transformer-XL model)"),gTo=l(),W_=a("li"),zie=a("strong"),hTo=o("unispeech"),pTo=o(" \u2014 "),Iq=a("a"),_To=o("UniSpeechModel"),uTo=o(" (UniSpeech model)"),bTo=l(),Q_=a("li"),Wie=a("strong"),vTo=o("unispeech-sat"),FTo=o(" \u2014 "),Nq=a("a"),TTo=o("UniSpeechSatModel"),MTo=o(" (UniSpeechSat model)"),ETo=l(),H_=a("li"),Qie=a("strong"),CTo=o("van"),wTo=o(" \u2014 "),qq=a("a"),ATo=o("VanModel"),LTo=o(" (VAN model)"),yTo=l(),U_=a("li"),Hie=a("strong"),xTo=o("vilt"),$To=o(" \u2014 "),jq=a("a"),kTo=o("ViltModel"),STo=o(" (ViLT model)"),RTo=l(),J_=a("li"),Uie=a("strong"),PTo=o("vision-text-dual-encoder"),BTo=o(" \u2014 "),Dq=a("a"),ITo=o("VisionTextDualEncoderModel"),NTo=o(" (VisionTextDualEncoder model)"),qTo=l(),Y_=a("li"),Jie=a("strong"),jTo=o("visual_bert"),DTo=o(" \u2014 "),Gq=a("a"),GTo=o("VisualBertModel"),OTo=o(" (VisualBERT model)"),VTo=l(),K_=a("li"),Yie=a("strong"),XTo=o("vit"),zTo=o(" \u2014 "),Oq=a("a"),WTo=o("ViTModel"),QTo=o(" (ViT model)"),HTo=l(),Z_=a("li"),Kie=a("strong"),UTo=o("vit_mae"),JTo=o(" \u2014 "),Vq=a("a"),YTo=o("ViTMAEModel"),KTo=o(" (ViTMAE model)"),ZTo=l(),eu=a("li"),Zie=a("strong"),eMo=o("wav2vec2"),oMo=o(" \u2014 "),Xq=a("a"),rMo=o("Wav2Vec2Model"),tMo=o(" (Wav2Vec2 model)"),aMo=l(),ou=a("li"),ede=a("strong"),nMo=o("wav2vec2-conformer"),sMo=o(" \u2014 "),zq=a("a"),lMo=o("Wav2Vec2ConformerModel"),iMo=o(" (Wav2Vec2-Conformer model)"),dMo=l(),ru=a("li"),ode=a("strong"),cMo=o("wavlm"),fMo=o(" \u2014 "),Wq=a("a"),mMo=o("WavLMModel"),gMo=o(" (WavLM model)"),hMo=l(),tu=a("li"),rde=a("strong"),pMo=o("xglm"),_Mo=o(" \u2014 "),Qq=a("a"),uMo=o("XGLMModel"),bMo=o(" (XGLM model)"),vMo=l(),au=a("li"),tde=a("strong"),FMo=o("xlm"),TMo=o(" \u2014 "),Hq=a("a"),MMo=o("XLMModel"),EMo=o(" (XLM model)"),CMo=l(),nu=a("li"),ade=a("strong"),wMo=o("xlm-prophetnet"),AMo=o(" \u2014 "),Uq=a("a"),LMo=o("XLMProphetNetModel"),yMo=o(" (XLM-ProphetNet model)"),xMo=l(),su=a("li"),nde=a("strong"),$Mo=o("xlm-roberta"),kMo=o(" \u2014 "),Jq=a("a"),SMo=o("XLMRobertaModel"),RMo=o(" (XLM-RoBERTa model)"),PMo=l(),lu=a("li"),sde=a("strong"),BMo=o("xlm-roberta-xl"),IMo=o(" \u2014 "),Yq=a("a"),NMo=o("XLMRobertaXLModel"),qMo=o(" (XLM-RoBERTa-XL model)"),jMo=l(),iu=a("li"),lde=a("strong"),DMo=o("xlnet"),GMo=o(" \u2014 "),Kq=a("a"),OMo=o("XLNetModel"),VMo=o(" (XLNet model)"),XMo=l(),du=a("li"),ide=a("strong"),zMo=o("yolos"),WMo=o(" \u2014 "),Zq=a("a"),QMo=o("YolosModel"),HMo=o(" (YOLOS model)"),UMo=l(),cu=a("li"),dde=a("strong"),JMo=o("yoso"),YMo=o(" \u2014 "),ej=a("a"),KMo=o("YosoModel"),ZMo=o(" (YOSO model)"),eEo=l(),fu=a("p"),oEo=o("The model is set in evaluation mode by default using "),cde=a("code"),rEo=o("model.eval()"),tEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),aEo=o("model.train()"),nEo=l(),F(mu.$$.fragment),Sje=l(),xi=a("h2"),gu=a("a"),mde=a("span"),F(ML.$$.fragment),sEo=l(),gde=a("span"),lEo=o("AutoModelForPreTraining"),Rje=l(),xo=a("div"),F(EL.$$.fragment),iEo=l(),$i=a("p"),dEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oj=a("a"),cEo=o("from_pretrained()"),fEo=o(" class method or the "),rj=a("a"),mEo=o("from_config()"),gEo=o(` class
method.`),hEo=l(),CL=a("p"),pEo=o("This class cannot be instantiated directly using "),hde=a("code"),_Eo=o("__init__()"),uEo=o(" (throws an error)."),bEo=l(),at=a("div"),F(wL.$$.fragment),vEo=l(),pde=a("p"),FEo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TEo=l(),ki=a("p"),MEo=o(`Note:
Loading a model from its configuration file does `),_de=a("strong"),EEo=o("not"),CEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),wEo=o("from_pretrained()"),AEo=o(" to load the model weights."),LEo=l(),F(hu.$$.fragment),yEo=l(),Ye=a("div"),F(AL.$$.fragment),xEo=l(),ude=a("p"),$Eo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kEo=l(),xa=a("p"),SEo=o("The model class to instantiate is selected based on the "),bde=a("code"),REo=o("model_type"),PEo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),BEo=o("pretrained_model_name_or_path"),IEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),NEo=o("pretrained_model_name_or_path"),qEo=o(":"),jEo=l(),G=a("ul"),pu=a("li"),Tde=a("strong"),DEo=o("albert"),GEo=o(" \u2014 "),aj=a("a"),OEo=o("AlbertForPreTraining"),VEo=o(" (ALBERT model)"),XEo=l(),_u=a("li"),Mde=a("strong"),zEo=o("bart"),WEo=o(" \u2014 "),nj=a("a"),QEo=o("BartForConditionalGeneration"),HEo=o(" (BART model)"),UEo=l(),uu=a("li"),Ede=a("strong"),JEo=o("bert"),YEo=o(" \u2014 "),sj=a("a"),KEo=o("BertForPreTraining"),ZEo=o(" (BERT model)"),eCo=l(),bu=a("li"),Cde=a("strong"),oCo=o("big_bird"),rCo=o(" \u2014 "),lj=a("a"),tCo=o("BigBirdForPreTraining"),aCo=o(" (BigBird model)"),nCo=l(),vu=a("li"),wde=a("strong"),sCo=o("bloom"),lCo=o(" \u2014 "),ij=a("a"),iCo=o("BloomForCausalLM"),dCo=o(" (BLOOM model)"),cCo=l(),Fu=a("li"),Ade=a("strong"),fCo=o("camembert"),mCo=o(" \u2014 "),dj=a("a"),gCo=o("CamembertForMaskedLM"),hCo=o(" (CamemBERT model)"),pCo=l(),Tu=a("li"),Lde=a("strong"),_Co=o("ctrl"),uCo=o(" \u2014 "),cj=a("a"),bCo=o("CTRLLMHeadModel"),vCo=o(" (CTRL model)"),FCo=l(),Mu=a("li"),yde=a("strong"),TCo=o("data2vec-text"),MCo=o(" \u2014 "),fj=a("a"),ECo=o("Data2VecTextForMaskedLM"),CCo=o(" (Data2VecText model)"),wCo=l(),Eu=a("li"),xde=a("strong"),ACo=o("deberta"),LCo=o(" \u2014 "),mj=a("a"),yCo=o("DebertaForMaskedLM"),xCo=o(" (DeBERTa model)"),$Co=l(),Cu=a("li"),$de=a("strong"),kCo=o("deberta-v2"),SCo=o(" \u2014 "),gj=a("a"),RCo=o("DebertaV2ForMaskedLM"),PCo=o(" (DeBERTa-v2 model)"),BCo=l(),wu=a("li"),kde=a("strong"),ICo=o("distilbert"),NCo=o(" \u2014 "),hj=a("a"),qCo=o("DistilBertForMaskedLM"),jCo=o(" (DistilBERT model)"),DCo=l(),Au=a("li"),Sde=a("strong"),GCo=o("electra"),OCo=o(" \u2014 "),pj=a("a"),VCo=o("ElectraForPreTraining"),XCo=o(" (ELECTRA model)"),zCo=l(),Lu=a("li"),Rde=a("strong"),WCo=o("flaubert"),QCo=o(" \u2014 "),_j=a("a"),HCo=o("FlaubertWithLMHeadModel"),UCo=o(" (FlauBERT model)"),JCo=l(),yu=a("li"),Pde=a("strong"),YCo=o("flava"),KCo=o(" \u2014 "),uj=a("a"),ZCo=o("FlavaForPreTraining"),e5o=o(" (FLAVA model)"),o5o=l(),xu=a("li"),Bde=a("strong"),r5o=o("fnet"),t5o=o(" \u2014 "),bj=a("a"),a5o=o("FNetForPreTraining"),n5o=o(" (FNet model)"),s5o=l(),$u=a("li"),Ide=a("strong"),l5o=o("fsmt"),i5o=o(" \u2014 "),vj=a("a"),d5o=o("FSMTForConditionalGeneration"),c5o=o(" (FairSeq Machine-Translation model)"),f5o=l(),ku=a("li"),Nde=a("strong"),m5o=o("funnel"),g5o=o(" \u2014 "),Fj=a("a"),h5o=o("FunnelForPreTraining"),p5o=o(" (Funnel Transformer model)"),_5o=l(),Su=a("li"),qde=a("strong"),u5o=o("gpt2"),b5o=o(" \u2014 "),Tj=a("a"),v5o=o("GPT2LMHeadModel"),F5o=o(" (OpenAI GPT-2 model)"),T5o=l(),Ru=a("li"),jde=a("strong"),M5o=o("ibert"),E5o=o(" \u2014 "),Mj=a("a"),C5o=o("IBertForMaskedLM"),w5o=o(" (I-BERT model)"),A5o=l(),Pu=a("li"),Dde=a("strong"),L5o=o("layoutlm"),y5o=o(" \u2014 "),Ej=a("a"),x5o=o("LayoutLMForMaskedLM"),$5o=o(" (LayoutLM model)"),k5o=l(),Bu=a("li"),Gde=a("strong"),S5o=o("longformer"),R5o=o(" \u2014 "),Cj=a("a"),P5o=o("LongformerForMaskedLM"),B5o=o(" (Longformer model)"),I5o=l(),Iu=a("li"),Ode=a("strong"),N5o=o("lxmert"),q5o=o(" \u2014 "),wj=a("a"),j5o=o("LxmertForPreTraining"),D5o=o(" (LXMERT model)"),G5o=l(),Nu=a("li"),Vde=a("strong"),O5o=o("megatron-bert"),V5o=o(" \u2014 "),Aj=a("a"),X5o=o("MegatronBertForPreTraining"),z5o=o(" (Megatron-BERT model)"),W5o=l(),qu=a("li"),Xde=a("strong"),Q5o=o("mobilebert"),H5o=o(" \u2014 "),Lj=a("a"),U5o=o("MobileBertForPreTraining"),J5o=o(" (MobileBERT model)"),Y5o=l(),ju=a("li"),zde=a("strong"),K5o=o("mpnet"),Z5o=o(" \u2014 "),yj=a("a"),e3o=o("MPNetForMaskedLM"),o3o=o(" (MPNet model)"),r3o=l(),Du=a("li"),Wde=a("strong"),t3o=o("openai-gpt"),a3o=o(" \u2014 "),xj=a("a"),n3o=o("OpenAIGPTLMHeadModel"),s3o=o(" (OpenAI GPT model)"),l3o=l(),Gu=a("li"),Qde=a("strong"),i3o=o("retribert"),d3o=o(" \u2014 "),$j=a("a"),c3o=o("RetriBertModel"),f3o=o(" (RetriBERT model)"),m3o=l(),Ou=a("li"),Hde=a("strong"),g3o=o("roberta"),h3o=o(" \u2014 "),kj=a("a"),p3o=o("RobertaForMaskedLM"),_3o=o(" (RoBERTa model)"),u3o=l(),Vu=a("li"),Ude=a("strong"),b3o=o("splinter"),v3o=o(" \u2014 "),Sj=a("a"),F3o=o("SplinterForPreTraining"),T3o=o(" (Splinter model)"),M3o=l(),Xu=a("li"),Jde=a("strong"),E3o=o("squeezebert"),C3o=o(" \u2014 "),Rj=a("a"),w3o=o("SqueezeBertForMaskedLM"),A3o=o(" (SqueezeBERT model)"),L3o=l(),zu=a("li"),Yde=a("strong"),y3o=o("t5"),x3o=o(" \u2014 "),Pj=a("a"),$3o=o("T5ForConditionalGeneration"),k3o=o(" (T5 model)"),S3o=l(),Wu=a("li"),Kde=a("strong"),R3o=o("tapas"),P3o=o(" \u2014 "),Bj=a("a"),B3o=o("TapasForMaskedLM"),I3o=o(" (TAPAS model)"),N3o=l(),Qu=a("li"),Zde=a("strong"),q3o=o("transfo-xl"),j3o=o(" \u2014 "),Ij=a("a"),D3o=o("TransfoXLLMHeadModel"),G3o=o(" (Transformer-XL model)"),O3o=l(),Hu=a("li"),ece=a("strong"),V3o=o("unispeech"),X3o=o(" \u2014 "),Nj=a("a"),z3o=o("UniSpeechForPreTraining"),W3o=o(" (UniSpeech model)"),Q3o=l(),Uu=a("li"),oce=a("strong"),H3o=o("unispeech-sat"),U3o=o(" \u2014 "),qj=a("a"),J3o=o("UniSpeechSatForPreTraining"),Y3o=o(" (UniSpeechSat model)"),K3o=l(),Ju=a("li"),rce=a("strong"),Z3o=o("visual_bert"),e0o=o(" \u2014 "),jj=a("a"),o0o=o("VisualBertForPreTraining"),r0o=o(" (VisualBERT model)"),t0o=l(),Yu=a("li"),tce=a("strong"),a0o=o("vit_mae"),n0o=o(" \u2014 "),Dj=a("a"),s0o=o("ViTMAEForPreTraining"),l0o=o(" (ViTMAE model)"),i0o=l(),Ku=a("li"),ace=a("strong"),d0o=o("wav2vec2"),c0o=o(" \u2014 "),Gj=a("a"),f0o=o("Wav2Vec2ForPreTraining"),m0o=o(" (Wav2Vec2 model)"),g0o=l(),Zu=a("li"),nce=a("strong"),h0o=o("wav2vec2-conformer"),p0o=o(" \u2014 "),Oj=a("a"),_0o=o("Wav2Vec2ConformerForPreTraining"),u0o=o(" (Wav2Vec2-Conformer model)"),b0o=l(),e4=a("li"),sce=a("strong"),v0o=o("xlm"),F0o=o(" \u2014 "),Vj=a("a"),T0o=o("XLMWithLMHeadModel"),M0o=o(" (XLM model)"),E0o=l(),o4=a("li"),lce=a("strong"),C0o=o("xlm-roberta"),w0o=o(" \u2014 "),Xj=a("a"),A0o=o("XLMRobertaForMaskedLM"),L0o=o(" (XLM-RoBERTa model)"),y0o=l(),r4=a("li"),ice=a("strong"),x0o=o("xlm-roberta-xl"),$0o=o(" \u2014 "),zj=a("a"),k0o=o("XLMRobertaXLForMaskedLM"),S0o=o(" (XLM-RoBERTa-XL model)"),R0o=l(),t4=a("li"),dce=a("strong"),P0o=o("xlnet"),B0o=o(" \u2014 "),Wj=a("a"),I0o=o("XLNetLMHeadModel"),N0o=o(" (XLNet model)"),q0o=l(),a4=a("p"),j0o=o("The model is set in evaluation mode by default using "),cce=a("code"),D0o=o("model.eval()"),G0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),O0o=o("model.train()"),V0o=l(),F(n4.$$.fragment),Pje=l(),Si=a("h2"),s4=a("a"),mce=a("span"),F(LL.$$.fragment),X0o=l(),gce=a("span"),z0o=o("AutoModelForCausalLM"),Bje=l(),$o=a("div"),F(yL.$$.fragment),W0o=l(),Ri=a("p"),Q0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qj=a("a"),H0o=o("from_pretrained()"),U0o=o(" class method or the "),Hj=a("a"),J0o=o("from_config()"),Y0o=o(` class
method.`),K0o=l(),xL=a("p"),Z0o=o("This class cannot be instantiated directly using "),hce=a("code"),ewo=o("__init__()"),owo=o(" (throws an error)."),rwo=l(),nt=a("div"),F($L.$$.fragment),two=l(),pce=a("p"),awo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nwo=l(),Pi=a("p"),swo=o(`Note:
Loading a model from its configuration file does `),_ce=a("strong"),lwo=o("not"),iwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=a("a"),dwo=o("from_pretrained()"),cwo=o(" to load the model weights."),fwo=l(),F(l4.$$.fragment),mwo=l(),Ke=a("div"),F(kL.$$.fragment),gwo=l(),uce=a("p"),hwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pwo=l(),$a=a("p"),_wo=o("The model class to instantiate is selected based on the "),bce=a("code"),uwo=o("model_type"),bwo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),vwo=o("pretrained_model_name_or_path"),Fwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),Two=o("pretrained_model_name_or_path"),Mwo=o(":"),Ewo=l(),z=a("ul"),i4=a("li"),Tce=a("strong"),Cwo=o("bart"),wwo=o(" \u2014 "),Jj=a("a"),Awo=o("BartForCausalLM"),Lwo=o(" (BART model)"),ywo=l(),d4=a("li"),Mce=a("strong"),xwo=o("bert"),$wo=o(" \u2014 "),Yj=a("a"),kwo=o("BertLMHeadModel"),Swo=o(" (BERT model)"),Rwo=l(),c4=a("li"),Ece=a("strong"),Pwo=o("bert-generation"),Bwo=o(" \u2014 "),Kj=a("a"),Iwo=o("BertGenerationDecoder"),Nwo=o(" (Bert Generation model)"),qwo=l(),f4=a("li"),Cce=a("strong"),jwo=o("big_bird"),Dwo=o(" \u2014 "),Zj=a("a"),Gwo=o("BigBirdForCausalLM"),Owo=o(" (BigBird model)"),Vwo=l(),m4=a("li"),wce=a("strong"),Xwo=o("bigbird_pegasus"),zwo=o(" \u2014 "),eD=a("a"),Wwo=o("BigBirdPegasusForCausalLM"),Qwo=o(" (BigBird-Pegasus model)"),Hwo=l(),g4=a("li"),Ace=a("strong"),Uwo=o("blenderbot"),Jwo=o(" \u2014 "),oD=a("a"),Ywo=o("BlenderbotForCausalLM"),Kwo=o(" (Blenderbot model)"),Zwo=l(),h4=a("li"),Lce=a("strong"),eAo=o("blenderbot-small"),oAo=o(" \u2014 "),rD=a("a"),rAo=o("BlenderbotSmallForCausalLM"),tAo=o(" (BlenderbotSmall model)"),aAo=l(),p4=a("li"),yce=a("strong"),nAo=o("bloom"),sAo=o(" \u2014 "),tD=a("a"),lAo=o("BloomForCausalLM"),iAo=o(" (BLOOM model)"),dAo=l(),_4=a("li"),xce=a("strong"),cAo=o("camembert"),fAo=o(" \u2014 "),aD=a("a"),mAo=o("CamembertForCausalLM"),gAo=o(" (CamemBERT model)"),hAo=l(),u4=a("li"),$ce=a("strong"),pAo=o("ctrl"),_Ao=o(" \u2014 "),nD=a("a"),uAo=o("CTRLLMHeadModel"),bAo=o(" (CTRL model)"),vAo=l(),b4=a("li"),kce=a("strong"),FAo=o("data2vec-text"),TAo=o(" \u2014 "),sD=a("a"),MAo=o("Data2VecTextForCausalLM"),EAo=o(" (Data2VecText model)"),CAo=l(),v4=a("li"),Sce=a("strong"),wAo=o("electra"),AAo=o(" \u2014 "),lD=a("a"),LAo=o("ElectraForCausalLM"),yAo=o(" (ELECTRA model)"),xAo=l(),F4=a("li"),Rce=a("strong"),$Ao=o("gpt2"),kAo=o(" \u2014 "),iD=a("a"),SAo=o("GPT2LMHeadModel"),RAo=o(" (OpenAI GPT-2 model)"),PAo=l(),T4=a("li"),Pce=a("strong"),BAo=o("gpt_neo"),IAo=o(" \u2014 "),dD=a("a"),NAo=o("GPTNeoForCausalLM"),qAo=o(" (GPT Neo model)"),jAo=l(),M4=a("li"),Bce=a("strong"),DAo=o("gpt_neox"),GAo=o(" \u2014 "),cD=a("a"),OAo=o("GPTNeoXForCausalLM"),VAo=o(" (GPT NeoX model)"),XAo=l(),E4=a("li"),Ice=a("strong"),zAo=o("gptj"),WAo=o(" \u2014 "),fD=a("a"),QAo=o("GPTJForCausalLM"),HAo=o(" (GPT-J model)"),UAo=l(),C4=a("li"),Nce=a("strong"),JAo=o("marian"),YAo=o(" \u2014 "),mD=a("a"),KAo=o("MarianForCausalLM"),ZAo=o(" (Marian model)"),e6o=l(),w4=a("li"),qce=a("strong"),o6o=o("mbart"),r6o=o(" \u2014 "),gD=a("a"),t6o=o("MBartForCausalLM"),a6o=o(" (mBART model)"),n6o=l(),A4=a("li"),jce=a("strong"),s6o=o("megatron-bert"),l6o=o(" \u2014 "),hD=a("a"),i6o=o("MegatronBertForCausalLM"),d6o=o(" (Megatron-BERT model)"),c6o=l(),L4=a("li"),Dce=a("strong"),f6o=o("openai-gpt"),m6o=o(" \u2014 "),pD=a("a"),g6o=o("OpenAIGPTLMHeadModel"),h6o=o(" (OpenAI GPT model)"),p6o=l(),y4=a("li"),Gce=a("strong"),_6o=o("opt"),u6o=o(" \u2014 "),_D=a("a"),b6o=o("OPTForCausalLM"),v6o=o(" (OPT model)"),F6o=l(),x4=a("li"),Oce=a("strong"),T6o=o("pegasus"),M6o=o(" \u2014 "),uD=a("a"),E6o=o("PegasusForCausalLM"),C6o=o(" (Pegasus model)"),w6o=l(),$4=a("li"),Vce=a("strong"),A6o=o("plbart"),L6o=o(" \u2014 "),bD=a("a"),y6o=o("PLBartForCausalLM"),x6o=o(" (PLBart model)"),$6o=l(),k4=a("li"),Xce=a("strong"),k6o=o("prophetnet"),S6o=o(" \u2014 "),vD=a("a"),R6o=o("ProphetNetForCausalLM"),P6o=o(" (ProphetNet model)"),B6o=l(),S4=a("li"),zce=a("strong"),I6o=o("qdqbert"),N6o=o(" \u2014 "),FD=a("a"),q6o=o("QDQBertLMHeadModel"),j6o=o(" (QDQBert model)"),D6o=l(),R4=a("li"),Wce=a("strong"),G6o=o("reformer"),O6o=o(" \u2014 "),TD=a("a"),V6o=o("ReformerModelWithLMHead"),X6o=o(" (Reformer model)"),z6o=l(),P4=a("li"),Qce=a("strong"),W6o=o("rembert"),Q6o=o(" \u2014 "),MD=a("a"),H6o=o("RemBertForCausalLM"),U6o=o(" (RemBERT model)"),J6o=l(),B4=a("li"),Hce=a("strong"),Y6o=o("roberta"),K6o=o(" \u2014 "),ED=a("a"),Z6o=o("RobertaForCausalLM"),eLo=o(" (RoBERTa model)"),oLo=l(),I4=a("li"),Uce=a("strong"),rLo=o("roformer"),tLo=o(" \u2014 "),CD=a("a"),aLo=o("RoFormerForCausalLM"),nLo=o(" (RoFormer model)"),sLo=l(),N4=a("li"),Jce=a("strong"),lLo=o("speech_to_text_2"),iLo=o(" \u2014 "),wD=a("a"),dLo=o("Speech2Text2ForCausalLM"),cLo=o(" (Speech2Text2 model)"),fLo=l(),q4=a("li"),Yce=a("strong"),mLo=o("transfo-xl"),gLo=o(" \u2014 "),AD=a("a"),hLo=o("TransfoXLLMHeadModel"),pLo=o(" (Transformer-XL model)"),_Lo=l(),j4=a("li"),Kce=a("strong"),uLo=o("trocr"),bLo=o(" \u2014 "),LD=a("a"),vLo=o("TrOCRForCausalLM"),FLo=o(" (TrOCR model)"),TLo=l(),D4=a("li"),Zce=a("strong"),MLo=o("xglm"),ELo=o(" \u2014 "),yD=a("a"),CLo=o("XGLMForCausalLM"),wLo=o(" (XGLM model)"),ALo=l(),G4=a("li"),efe=a("strong"),LLo=o("xlm"),yLo=o(" \u2014 "),xD=a("a"),xLo=o("XLMWithLMHeadModel"),$Lo=o(" (XLM model)"),kLo=l(),O4=a("li"),ofe=a("strong"),SLo=o("xlm-prophetnet"),RLo=o(" \u2014 "),$D=a("a"),PLo=o("XLMProphetNetForCausalLM"),BLo=o(" (XLM-ProphetNet model)"),ILo=l(),V4=a("li"),rfe=a("strong"),NLo=o("xlm-roberta"),qLo=o(" \u2014 "),kD=a("a"),jLo=o("XLMRobertaForCausalLM"),DLo=o(" (XLM-RoBERTa model)"),GLo=l(),X4=a("li"),tfe=a("strong"),OLo=o("xlm-roberta-xl"),VLo=o(" \u2014 "),SD=a("a"),XLo=o("XLMRobertaXLForCausalLM"),zLo=o(" (XLM-RoBERTa-XL model)"),WLo=l(),z4=a("li"),afe=a("strong"),QLo=o("xlnet"),HLo=o(" \u2014 "),RD=a("a"),ULo=o("XLNetLMHeadModel"),JLo=o(" (XLNet model)"),YLo=l(),W4=a("p"),KLo=o("The model is set in evaluation mode by default using "),nfe=a("code"),ZLo=o("model.eval()"),eyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),oyo=o("model.train()"),ryo=l(),F(Q4.$$.fragment),Ije=l(),Bi=a("h2"),H4=a("a"),lfe=a("span"),F(SL.$$.fragment),tyo=l(),ife=a("span"),ayo=o("AutoModelForMaskedLM"),Nje=l(),ko=a("div"),F(RL.$$.fragment),nyo=l(),Ii=a("p"),syo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PD=a("a"),lyo=o("from_pretrained()"),iyo=o(" class method or the "),BD=a("a"),dyo=o("from_config()"),cyo=o(` class
method.`),fyo=l(),PL=a("p"),myo=o("This class cannot be instantiated directly using "),dfe=a("code"),gyo=o("__init__()"),hyo=o(" (throws an error)."),pyo=l(),st=a("div"),F(BL.$$.fragment),_yo=l(),cfe=a("p"),uyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),byo=l(),Ni=a("p"),vyo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),Fyo=o("not"),Tyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=a("a"),Myo=o("from_pretrained()"),Eyo=o(" to load the model weights."),Cyo=l(),F(U4.$$.fragment),wyo=l(),Ze=a("div"),F(IL.$$.fragment),Ayo=l(),mfe=a("p"),Lyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yyo=l(),ka=a("p"),xyo=o("The model class to instantiate is selected based on the "),gfe=a("code"),$yo=o("model_type"),kyo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),Syo=o("pretrained_model_name_or_path"),Ryo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),Pyo=o("pretrained_model_name_or_path"),Byo=o(":"),Iyo=l(),Q=a("ul"),J4=a("li"),_fe=a("strong"),Nyo=o("albert"),qyo=o(" \u2014 "),ND=a("a"),jyo=o("AlbertForMaskedLM"),Dyo=o(" (ALBERT model)"),Gyo=l(),Y4=a("li"),ufe=a("strong"),Oyo=o("bart"),Vyo=o(" \u2014 "),qD=a("a"),Xyo=o("BartForConditionalGeneration"),zyo=o(" (BART model)"),Wyo=l(),K4=a("li"),bfe=a("strong"),Qyo=o("bert"),Hyo=o(" \u2014 "),jD=a("a"),Uyo=o("BertForMaskedLM"),Jyo=o(" (BERT model)"),Yyo=l(),Z4=a("li"),vfe=a("strong"),Kyo=o("big_bird"),Zyo=o(" \u2014 "),DD=a("a"),e8o=o("BigBirdForMaskedLM"),o8o=o(" (BigBird model)"),r8o=l(),e1=a("li"),Ffe=a("strong"),t8o=o("camembert"),a8o=o(" \u2014 "),GD=a("a"),n8o=o("CamembertForMaskedLM"),s8o=o(" (CamemBERT model)"),l8o=l(),o1=a("li"),Tfe=a("strong"),i8o=o("convbert"),d8o=o(" \u2014 "),OD=a("a"),c8o=o("ConvBertForMaskedLM"),f8o=o(" (ConvBERT model)"),m8o=l(),r1=a("li"),Mfe=a("strong"),g8o=o("data2vec-text"),h8o=o(" \u2014 "),VD=a("a"),p8o=o("Data2VecTextForMaskedLM"),_8o=o(" (Data2VecText model)"),u8o=l(),t1=a("li"),Efe=a("strong"),b8o=o("deberta"),v8o=o(" \u2014 "),XD=a("a"),F8o=o("DebertaForMaskedLM"),T8o=o(" (DeBERTa model)"),M8o=l(),a1=a("li"),Cfe=a("strong"),E8o=o("deberta-v2"),C8o=o(" \u2014 "),zD=a("a"),w8o=o("DebertaV2ForMaskedLM"),A8o=o(" (DeBERTa-v2 model)"),L8o=l(),n1=a("li"),wfe=a("strong"),y8o=o("distilbert"),x8o=o(" \u2014 "),WD=a("a"),$8o=o("DistilBertForMaskedLM"),k8o=o(" (DistilBERT model)"),S8o=l(),s1=a("li"),Afe=a("strong"),R8o=o("electra"),P8o=o(" \u2014 "),QD=a("a"),B8o=o("ElectraForMaskedLM"),I8o=o(" (ELECTRA model)"),N8o=l(),l1=a("li"),Lfe=a("strong"),q8o=o("flaubert"),j8o=o(" \u2014 "),HD=a("a"),D8o=o("FlaubertWithLMHeadModel"),G8o=o(" (FlauBERT model)"),O8o=l(),i1=a("li"),yfe=a("strong"),V8o=o("fnet"),X8o=o(" \u2014 "),UD=a("a"),z8o=o("FNetForMaskedLM"),W8o=o(" (FNet model)"),Q8o=l(),d1=a("li"),xfe=a("strong"),H8o=o("funnel"),U8o=o(" \u2014 "),JD=a("a"),J8o=o("FunnelForMaskedLM"),Y8o=o(" (Funnel Transformer model)"),K8o=l(),c1=a("li"),$fe=a("strong"),Z8o=o("ibert"),e9o=o(" \u2014 "),YD=a("a"),o9o=o("IBertForMaskedLM"),r9o=o(" (I-BERT model)"),t9o=l(),f1=a("li"),kfe=a("strong"),a9o=o("layoutlm"),n9o=o(" \u2014 "),KD=a("a"),s9o=o("LayoutLMForMaskedLM"),l9o=o(" (LayoutLM model)"),i9o=l(),m1=a("li"),Sfe=a("strong"),d9o=o("longformer"),c9o=o(" \u2014 "),ZD=a("a"),f9o=o("LongformerForMaskedLM"),m9o=o(" (Longformer model)"),g9o=l(),g1=a("li"),Rfe=a("strong"),h9o=o("luke"),p9o=o(" \u2014 "),eG=a("a"),_9o=o("LukeForMaskedLM"),u9o=o(" (LUKE model)"),b9o=l(),h1=a("li"),Pfe=a("strong"),v9o=o("mbart"),F9o=o(" \u2014 "),oG=a("a"),T9o=o("MBartForConditionalGeneration"),M9o=o(" (mBART model)"),E9o=l(),p1=a("li"),Bfe=a("strong"),C9o=o("megatron-bert"),w9o=o(" \u2014 "),rG=a("a"),A9o=o("MegatronBertForMaskedLM"),L9o=o(" (Megatron-BERT model)"),y9o=l(),_1=a("li"),Ife=a("strong"),x9o=o("mobilebert"),$9o=o(" \u2014 "),tG=a("a"),k9o=o("MobileBertForMaskedLM"),S9o=o(" (MobileBERT model)"),R9o=l(),u1=a("li"),Nfe=a("strong"),P9o=o("mpnet"),B9o=o(" \u2014 "),aG=a("a"),I9o=o("MPNetForMaskedLM"),N9o=o(" (MPNet model)"),q9o=l(),b1=a("li"),qfe=a("strong"),j9o=o("nystromformer"),D9o=o(" \u2014 "),nG=a("a"),G9o=o("NystromformerForMaskedLM"),O9o=o(" (Nystr\xF6mformer model)"),V9o=l(),v1=a("li"),jfe=a("strong"),X9o=o("perceiver"),z9o=o(" \u2014 "),sG=a("a"),W9o=o("PerceiverForMaskedLM"),Q9o=o(" (Perceiver model)"),H9o=l(),F1=a("li"),Dfe=a("strong"),U9o=o("qdqbert"),J9o=o(" \u2014 "),lG=a("a"),Y9o=o("QDQBertForMaskedLM"),K9o=o(" (QDQBert model)"),Z9o=l(),T1=a("li"),Gfe=a("strong"),exo=o("reformer"),oxo=o(" \u2014 "),iG=a("a"),rxo=o("ReformerForMaskedLM"),txo=o(" (Reformer model)"),axo=l(),M1=a("li"),Ofe=a("strong"),nxo=o("rembert"),sxo=o(" \u2014 "),dG=a("a"),lxo=o("RemBertForMaskedLM"),ixo=o(" (RemBERT model)"),dxo=l(),E1=a("li"),Vfe=a("strong"),cxo=o("roberta"),fxo=o(" \u2014 "),cG=a("a"),mxo=o("RobertaForMaskedLM"),gxo=o(" (RoBERTa model)"),hxo=l(),C1=a("li"),Xfe=a("strong"),pxo=o("roformer"),_xo=o(" \u2014 "),fG=a("a"),uxo=o("RoFormerForMaskedLM"),bxo=o(" (RoFormer model)"),vxo=l(),w1=a("li"),zfe=a("strong"),Fxo=o("squeezebert"),Txo=o(" \u2014 "),mG=a("a"),Mxo=o("SqueezeBertForMaskedLM"),Exo=o(" (SqueezeBERT model)"),Cxo=l(),A1=a("li"),Wfe=a("strong"),wxo=o("tapas"),Axo=o(" \u2014 "),gG=a("a"),Lxo=o("TapasForMaskedLM"),yxo=o(" (TAPAS model)"),xxo=l(),L1=a("li"),Qfe=a("strong"),$xo=o("wav2vec2"),kxo=o(" \u2014 "),Hfe=a("code"),Sxo=o("Wav2Vec2ForMaskedLM"),Rxo=o(" (Wav2Vec2 model)"),Pxo=l(),y1=a("li"),Ufe=a("strong"),Bxo=o("xlm"),Ixo=o(" \u2014 "),hG=a("a"),Nxo=o("XLMWithLMHeadModel"),qxo=o(" (XLM model)"),jxo=l(),x1=a("li"),Jfe=a("strong"),Dxo=o("xlm-roberta"),Gxo=o(" \u2014 "),pG=a("a"),Oxo=o("XLMRobertaForMaskedLM"),Vxo=o(" (XLM-RoBERTa model)"),Xxo=l(),$1=a("li"),Yfe=a("strong"),zxo=o("xlm-roberta-xl"),Wxo=o(" \u2014 "),_G=a("a"),Qxo=o("XLMRobertaXLForMaskedLM"),Hxo=o(" (XLM-RoBERTa-XL model)"),Uxo=l(),k1=a("li"),Kfe=a("strong"),Jxo=o("yoso"),Yxo=o(" \u2014 "),uG=a("a"),Kxo=o("YosoForMaskedLM"),Zxo=o(" (YOSO model)"),e$o=l(),S1=a("p"),o$o=o("The model is set in evaluation mode by default using "),Zfe=a("code"),r$o=o("model.eval()"),t$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),a$o=o("model.train()"),n$o=l(),F(R1.$$.fragment),qje=l(),qi=a("h2"),P1=a("a"),ome=a("span"),F(NL.$$.fragment),s$o=l(),rme=a("span"),l$o=o("AutoModelForSeq2SeqLM"),jje=l(),So=a("div"),F(qL.$$.fragment),i$o=l(),ji=a("p"),d$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bG=a("a"),c$o=o("from_pretrained()"),f$o=o(" class method or the "),vG=a("a"),m$o=o("from_config()"),g$o=o(` class
method.`),h$o=l(),jL=a("p"),p$o=o("This class cannot be instantiated directly using "),tme=a("code"),_$o=o("__init__()"),u$o=o(" (throws an error)."),b$o=l(),lt=a("div"),F(DL.$$.fragment),v$o=l(),ame=a("p"),F$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T$o=l(),Di=a("p"),M$o=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),E$o=o("not"),C$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),w$o=o("from_pretrained()"),A$o=o(" to load the model weights."),L$o=l(),F(B1.$$.fragment),y$o=l(),eo=a("div"),F(GL.$$.fragment),x$o=l(),sme=a("p"),$$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k$o=l(),Sa=a("p"),S$o=o("The model class to instantiate is selected based on the "),lme=a("code"),R$o=o("model_type"),P$o=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),B$o=o("pretrained_model_name_or_path"),I$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),N$o=o("pretrained_model_name_or_path"),q$o=o(":"),j$o=l(),_e=a("ul"),I1=a("li"),cme=a("strong"),D$o=o("bart"),G$o=o(" \u2014 "),TG=a("a"),O$o=o("BartForConditionalGeneration"),V$o=o(" (BART model)"),X$o=l(),N1=a("li"),fme=a("strong"),z$o=o("bigbird_pegasus"),W$o=o(" \u2014 "),MG=a("a"),Q$o=o("BigBirdPegasusForConditionalGeneration"),H$o=o(" (BigBird-Pegasus model)"),U$o=l(),q1=a("li"),mme=a("strong"),J$o=o("blenderbot"),Y$o=o(" \u2014 "),EG=a("a"),K$o=o("BlenderbotForConditionalGeneration"),Z$o=o(" (Blenderbot model)"),eko=l(),j1=a("li"),gme=a("strong"),oko=o("blenderbot-small"),rko=o(" \u2014 "),CG=a("a"),tko=o("BlenderbotSmallForConditionalGeneration"),ako=o(" (BlenderbotSmall model)"),nko=l(),D1=a("li"),hme=a("strong"),sko=o("encoder-decoder"),lko=o(" \u2014 "),wG=a("a"),iko=o("EncoderDecoderModel"),dko=o(" (Encoder decoder model)"),cko=l(),G1=a("li"),pme=a("strong"),fko=o("fsmt"),mko=o(" \u2014 "),AG=a("a"),gko=o("FSMTForConditionalGeneration"),hko=o(" (FairSeq Machine-Translation model)"),pko=l(),O1=a("li"),_me=a("strong"),_ko=o("led"),uko=o(" \u2014 "),LG=a("a"),bko=o("LEDForConditionalGeneration"),vko=o(" (LED model)"),Fko=l(),V1=a("li"),ume=a("strong"),Tko=o("m2m_100"),Mko=o(" \u2014 "),yG=a("a"),Eko=o("M2M100ForConditionalGeneration"),Cko=o(" (M2M100 model)"),wko=l(),X1=a("li"),bme=a("strong"),Ako=o("marian"),Lko=o(" \u2014 "),xG=a("a"),yko=o("MarianMTModel"),xko=o(" (Marian model)"),$ko=l(),z1=a("li"),vme=a("strong"),kko=o("mbart"),Sko=o(" \u2014 "),$G=a("a"),Rko=o("MBartForConditionalGeneration"),Pko=o(" (mBART model)"),Bko=l(),W1=a("li"),Fme=a("strong"),Iko=o("mt5"),Nko=o(" \u2014 "),kG=a("a"),qko=o("MT5ForConditionalGeneration"),jko=o(" (MT5 model)"),Dko=l(),Q1=a("li"),Tme=a("strong"),Gko=o("pegasus"),Oko=o(" \u2014 "),SG=a("a"),Vko=o("PegasusForConditionalGeneration"),Xko=o(" (Pegasus model)"),zko=l(),H1=a("li"),Mme=a("strong"),Wko=o("plbart"),Qko=o(" \u2014 "),RG=a("a"),Hko=o("PLBartForConditionalGeneration"),Uko=o(" (PLBart model)"),Jko=l(),U1=a("li"),Eme=a("strong"),Yko=o("prophetnet"),Kko=o(" \u2014 "),PG=a("a"),Zko=o("ProphetNetForConditionalGeneration"),eSo=o(" (ProphetNet model)"),oSo=l(),J1=a("li"),Cme=a("strong"),rSo=o("t5"),tSo=o(" \u2014 "),BG=a("a"),aSo=o("T5ForConditionalGeneration"),nSo=o(" (T5 model)"),sSo=l(),Y1=a("li"),wme=a("strong"),lSo=o("xlm-prophetnet"),iSo=o(" \u2014 "),IG=a("a"),dSo=o("XLMProphetNetForConditionalGeneration"),cSo=o(" (XLM-ProphetNet model)"),fSo=l(),K1=a("p"),mSo=o("The model is set in evaluation mode by default using "),Ame=a("code"),gSo=o("model.eval()"),hSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),pSo=o("model.train()"),_So=l(),F(Z1.$$.fragment),Dje=l(),Gi=a("h2"),e7=a("a"),yme=a("span"),F(OL.$$.fragment),uSo=l(),xme=a("span"),bSo=o("AutoModelForSequenceClassification"),Gje=l(),Ro=a("div"),F(VL.$$.fragment),vSo=l(),Oi=a("p"),FSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NG=a("a"),TSo=o("from_pretrained()"),MSo=o(" class method or the "),qG=a("a"),ESo=o("from_config()"),CSo=o(` class
method.`),wSo=l(),XL=a("p"),ASo=o("This class cannot be instantiated directly using "),$me=a("code"),LSo=o("__init__()"),ySo=o(" (throws an error)."),xSo=l(),it=a("div"),F(zL.$$.fragment),$So=l(),kme=a("p"),kSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SSo=l(),Vi=a("p"),RSo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),PSo=o("not"),BSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),ISo=o("from_pretrained()"),NSo=o(" to load the model weights."),qSo=l(),F(o7.$$.fragment),jSo=l(),oo=a("div"),F(WL.$$.fragment),DSo=l(),Rme=a("p"),GSo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OSo=l(),Ra=a("p"),VSo=o("The model class to instantiate is selected based on the "),Pme=a("code"),XSo=o("model_type"),zSo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),WSo=o("pretrained_model_name_or_path"),QSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=a("code"),HSo=o("pretrained_model_name_or_path"),USo=o(":"),JSo=l(),N=a("ul"),r7=a("li"),Nme=a("strong"),YSo=o("albert"),KSo=o(" \u2014 "),DG=a("a"),ZSo=o("AlbertForSequenceClassification"),eRo=o(" (ALBERT model)"),oRo=l(),t7=a("li"),qme=a("strong"),rRo=o("bart"),tRo=o(" \u2014 "),GG=a("a"),aRo=o("BartForSequenceClassification"),nRo=o(" (BART model)"),sRo=l(),a7=a("li"),jme=a("strong"),lRo=o("bert"),iRo=o(" \u2014 "),OG=a("a"),dRo=o("BertForSequenceClassification"),cRo=o(" (BERT model)"),fRo=l(),n7=a("li"),Dme=a("strong"),mRo=o("big_bird"),gRo=o(" \u2014 "),VG=a("a"),hRo=o("BigBirdForSequenceClassification"),pRo=o(" (BigBird model)"),_Ro=l(),s7=a("li"),Gme=a("strong"),uRo=o("bigbird_pegasus"),bRo=o(" \u2014 "),XG=a("a"),vRo=o("BigBirdPegasusForSequenceClassification"),FRo=o(" (BigBird-Pegasus model)"),TRo=l(),l7=a("li"),Ome=a("strong"),MRo=o("camembert"),ERo=o(" \u2014 "),zG=a("a"),CRo=o("CamembertForSequenceClassification"),wRo=o(" (CamemBERT model)"),ARo=l(),i7=a("li"),Vme=a("strong"),LRo=o("canine"),yRo=o(" \u2014 "),WG=a("a"),xRo=o("CanineForSequenceClassification"),$Ro=o(" (CANINE model)"),kRo=l(),d7=a("li"),Xme=a("strong"),SRo=o("convbert"),RRo=o(" \u2014 "),QG=a("a"),PRo=o("ConvBertForSequenceClassification"),BRo=o(" (ConvBERT model)"),IRo=l(),c7=a("li"),zme=a("strong"),NRo=o("ctrl"),qRo=o(" \u2014 "),HG=a("a"),jRo=o("CTRLForSequenceClassification"),DRo=o(" (CTRL model)"),GRo=l(),f7=a("li"),Wme=a("strong"),ORo=o("data2vec-text"),VRo=o(" \u2014 "),UG=a("a"),XRo=o("Data2VecTextForSequenceClassification"),zRo=o(" (Data2VecText model)"),WRo=l(),m7=a("li"),Qme=a("strong"),QRo=o("deberta"),HRo=o(" \u2014 "),JG=a("a"),URo=o("DebertaForSequenceClassification"),JRo=o(" (DeBERTa model)"),YRo=l(),g7=a("li"),Hme=a("strong"),KRo=o("deberta-v2"),ZRo=o(" \u2014 "),YG=a("a"),ePo=o("DebertaV2ForSequenceClassification"),oPo=o(" (DeBERTa-v2 model)"),rPo=l(),h7=a("li"),Ume=a("strong"),tPo=o("distilbert"),aPo=o(" \u2014 "),KG=a("a"),nPo=o("DistilBertForSequenceClassification"),sPo=o(" (DistilBERT model)"),lPo=l(),p7=a("li"),Jme=a("strong"),iPo=o("electra"),dPo=o(" \u2014 "),ZG=a("a"),cPo=o("ElectraForSequenceClassification"),fPo=o(" (ELECTRA model)"),mPo=l(),_7=a("li"),Yme=a("strong"),gPo=o("flaubert"),hPo=o(" \u2014 "),eO=a("a"),pPo=o("FlaubertForSequenceClassification"),_Po=o(" (FlauBERT model)"),uPo=l(),u7=a("li"),Kme=a("strong"),bPo=o("fnet"),vPo=o(" \u2014 "),oO=a("a"),FPo=o("FNetForSequenceClassification"),TPo=o(" (FNet model)"),MPo=l(),b7=a("li"),Zme=a("strong"),EPo=o("funnel"),CPo=o(" \u2014 "),rO=a("a"),wPo=o("FunnelForSequenceClassification"),APo=o(" (Funnel Transformer model)"),LPo=l(),v7=a("li"),ege=a("strong"),yPo=o("gpt2"),xPo=o(" \u2014 "),tO=a("a"),$Po=o("GPT2ForSequenceClassification"),kPo=o(" (OpenAI GPT-2 model)"),SPo=l(),F7=a("li"),oge=a("strong"),RPo=o("gpt_neo"),PPo=o(" \u2014 "),aO=a("a"),BPo=o("GPTNeoForSequenceClassification"),IPo=o(" (GPT Neo model)"),NPo=l(),T7=a("li"),rge=a("strong"),qPo=o("gptj"),jPo=o(" \u2014 "),nO=a("a"),DPo=o("GPTJForSequenceClassification"),GPo=o(" (GPT-J model)"),OPo=l(),M7=a("li"),tge=a("strong"),VPo=o("ibert"),XPo=o(" \u2014 "),sO=a("a"),zPo=o("IBertForSequenceClassification"),WPo=o(" (I-BERT model)"),QPo=l(),E7=a("li"),age=a("strong"),HPo=o("layoutlm"),UPo=o(" \u2014 "),lO=a("a"),JPo=o("LayoutLMForSequenceClassification"),YPo=o(" (LayoutLM model)"),KPo=l(),C7=a("li"),nge=a("strong"),ZPo=o("layoutlmv2"),eBo=o(" \u2014 "),iO=a("a"),oBo=o("LayoutLMv2ForSequenceClassification"),rBo=o(" (LayoutLMv2 model)"),tBo=l(),w7=a("li"),sge=a("strong"),aBo=o("layoutlmv3"),nBo=o(" \u2014 "),dO=a("a"),sBo=o("LayoutLMv3ForSequenceClassification"),lBo=o(" (LayoutLMv3 model)"),iBo=l(),A7=a("li"),lge=a("strong"),dBo=o("led"),cBo=o(" \u2014 "),cO=a("a"),fBo=o("LEDForSequenceClassification"),mBo=o(" (LED model)"),gBo=l(),L7=a("li"),ige=a("strong"),hBo=o("longformer"),pBo=o(" \u2014 "),fO=a("a"),_Bo=o("LongformerForSequenceClassification"),uBo=o(" (Longformer model)"),bBo=l(),y7=a("li"),dge=a("strong"),vBo=o("mbart"),FBo=o(" \u2014 "),mO=a("a"),TBo=o("MBartForSequenceClassification"),MBo=o(" (mBART model)"),EBo=l(),x7=a("li"),cge=a("strong"),CBo=o("megatron-bert"),wBo=o(" \u2014 "),gO=a("a"),ABo=o("MegatronBertForSequenceClassification"),LBo=o(" (Megatron-BERT model)"),yBo=l(),$7=a("li"),fge=a("strong"),xBo=o("mobilebert"),$Bo=o(" \u2014 "),hO=a("a"),kBo=o("MobileBertForSequenceClassification"),SBo=o(" (MobileBERT model)"),RBo=l(),k7=a("li"),mge=a("strong"),PBo=o("mpnet"),BBo=o(" \u2014 "),pO=a("a"),IBo=o("MPNetForSequenceClassification"),NBo=o(" (MPNet model)"),qBo=l(),S7=a("li"),gge=a("strong"),jBo=o("nystromformer"),DBo=o(" \u2014 "),_O=a("a"),GBo=o("NystromformerForSequenceClassification"),OBo=o(" (Nystr\xF6mformer model)"),VBo=l(),R7=a("li"),hge=a("strong"),XBo=o("openai-gpt"),zBo=o(" \u2014 "),uO=a("a"),WBo=o("OpenAIGPTForSequenceClassification"),QBo=o(" (OpenAI GPT model)"),HBo=l(),P7=a("li"),pge=a("strong"),UBo=o("perceiver"),JBo=o(" \u2014 "),bO=a("a"),YBo=o("PerceiverForSequenceClassification"),KBo=o(" (Perceiver model)"),ZBo=l(),B7=a("li"),_ge=a("strong"),eIo=o("plbart"),oIo=o(" \u2014 "),vO=a("a"),rIo=o("PLBartForSequenceClassification"),tIo=o(" (PLBart model)"),aIo=l(),I7=a("li"),uge=a("strong"),nIo=o("qdqbert"),sIo=o(" \u2014 "),FO=a("a"),lIo=o("QDQBertForSequenceClassification"),iIo=o(" (QDQBert model)"),dIo=l(),N7=a("li"),bge=a("strong"),cIo=o("reformer"),fIo=o(" \u2014 "),TO=a("a"),mIo=o("ReformerForSequenceClassification"),gIo=o(" (Reformer model)"),hIo=l(),q7=a("li"),vge=a("strong"),pIo=o("rembert"),_Io=o(" \u2014 "),MO=a("a"),uIo=o("RemBertForSequenceClassification"),bIo=o(" (RemBERT model)"),vIo=l(),j7=a("li"),Fge=a("strong"),FIo=o("roberta"),TIo=o(" \u2014 "),EO=a("a"),MIo=o("RobertaForSequenceClassification"),EIo=o(" (RoBERTa model)"),CIo=l(),D7=a("li"),Tge=a("strong"),wIo=o("roformer"),AIo=o(" \u2014 "),CO=a("a"),LIo=o("RoFormerForSequenceClassification"),yIo=o(" (RoFormer model)"),xIo=l(),G7=a("li"),Mge=a("strong"),$Io=o("squeezebert"),kIo=o(" \u2014 "),wO=a("a"),SIo=o("SqueezeBertForSequenceClassification"),RIo=o(" (SqueezeBERT model)"),PIo=l(),O7=a("li"),Ege=a("strong"),BIo=o("tapas"),IIo=o(" \u2014 "),AO=a("a"),NIo=o("TapasForSequenceClassification"),qIo=o(" (TAPAS model)"),jIo=l(),V7=a("li"),Cge=a("strong"),DIo=o("transfo-xl"),GIo=o(" \u2014 "),LO=a("a"),OIo=o("TransfoXLForSequenceClassification"),VIo=o(" (Transformer-XL model)"),XIo=l(),X7=a("li"),wge=a("strong"),zIo=o("xlm"),WIo=o(" \u2014 "),yO=a("a"),QIo=o("XLMForSequenceClassification"),HIo=o(" (XLM model)"),UIo=l(),z7=a("li"),Age=a("strong"),JIo=o("xlm-roberta"),YIo=o(" \u2014 "),xO=a("a"),KIo=o("XLMRobertaForSequenceClassification"),ZIo=o(" (XLM-RoBERTa model)"),eNo=l(),W7=a("li"),Lge=a("strong"),oNo=o("xlm-roberta-xl"),rNo=o(" \u2014 "),$O=a("a"),tNo=o("XLMRobertaXLForSequenceClassification"),aNo=o(" (XLM-RoBERTa-XL model)"),nNo=l(),Q7=a("li"),yge=a("strong"),sNo=o("xlnet"),lNo=o(" \u2014 "),kO=a("a"),iNo=o("XLNetForSequenceClassification"),dNo=o(" (XLNet model)"),cNo=l(),H7=a("li"),xge=a("strong"),fNo=o("yoso"),mNo=o(" \u2014 "),SO=a("a"),gNo=o("YosoForSequenceClassification"),hNo=o(" (YOSO model)"),pNo=l(),U7=a("p"),_No=o("The model is set in evaluation mode by default using "),$ge=a("code"),uNo=o("model.eval()"),bNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),vNo=o("model.train()"),FNo=l(),F(J7.$$.fragment),Oje=l(),Xi=a("h2"),Y7=a("a"),Sge=a("span"),F(QL.$$.fragment),TNo=l(),Rge=a("span"),MNo=o("AutoModelForMultipleChoice"),Vje=l(),Po=a("div"),F(HL.$$.fragment),ENo=l(),zi=a("p"),CNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RO=a("a"),wNo=o("from_pretrained()"),ANo=o(" class method or the "),PO=a("a"),LNo=o("from_config()"),yNo=o(` class
method.`),xNo=l(),UL=a("p"),$No=o("This class cannot be instantiated directly using "),Pge=a("code"),kNo=o("__init__()"),SNo=o(" (throws an error)."),RNo=l(),dt=a("div"),F(JL.$$.fragment),PNo=l(),Bge=a("p"),BNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),INo=l(),Wi=a("p"),NNo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),qNo=o("not"),jNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=a("a"),DNo=o("from_pretrained()"),GNo=o(" to load the model weights."),ONo=l(),F(K7.$$.fragment),VNo=l(),ro=a("div"),F(YL.$$.fragment),XNo=l(),Nge=a("p"),zNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WNo=l(),Pa=a("p"),QNo=o("The model class to instantiate is selected based on the "),qge=a("code"),HNo=o("model_type"),UNo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),JNo=o("pretrained_model_name_or_path"),YNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),KNo=o("pretrained_model_name_or_path"),ZNo=o(":"),eqo=l(),Z=a("ul"),Z7=a("li"),Gge=a("strong"),oqo=o("albert"),rqo=o(" \u2014 "),IO=a("a"),tqo=o("AlbertForMultipleChoice"),aqo=o(" (ALBERT model)"),nqo=l(),eb=a("li"),Oge=a("strong"),sqo=o("bert"),lqo=o(" \u2014 "),NO=a("a"),iqo=o("BertForMultipleChoice"),dqo=o(" (BERT model)"),cqo=l(),ob=a("li"),Vge=a("strong"),fqo=o("big_bird"),mqo=o(" \u2014 "),qO=a("a"),gqo=o("BigBirdForMultipleChoice"),hqo=o(" (BigBird model)"),pqo=l(),rb=a("li"),Xge=a("strong"),_qo=o("camembert"),uqo=o(" \u2014 "),jO=a("a"),bqo=o("CamembertForMultipleChoice"),vqo=o(" (CamemBERT model)"),Fqo=l(),tb=a("li"),zge=a("strong"),Tqo=o("canine"),Mqo=o(" \u2014 "),DO=a("a"),Eqo=o("CanineForMultipleChoice"),Cqo=o(" (CANINE model)"),wqo=l(),ab=a("li"),Wge=a("strong"),Aqo=o("convbert"),Lqo=o(" \u2014 "),GO=a("a"),yqo=o("ConvBertForMultipleChoice"),xqo=o(" (ConvBERT model)"),$qo=l(),nb=a("li"),Qge=a("strong"),kqo=o("data2vec-text"),Sqo=o(" \u2014 "),OO=a("a"),Rqo=o("Data2VecTextForMultipleChoice"),Pqo=o(" (Data2VecText model)"),Bqo=l(),sb=a("li"),Hge=a("strong"),Iqo=o("deberta-v2"),Nqo=o(" \u2014 "),VO=a("a"),qqo=o("DebertaV2ForMultipleChoice"),jqo=o(" (DeBERTa-v2 model)"),Dqo=l(),lb=a("li"),Uge=a("strong"),Gqo=o("distilbert"),Oqo=o(" \u2014 "),XO=a("a"),Vqo=o("DistilBertForMultipleChoice"),Xqo=o(" (DistilBERT model)"),zqo=l(),ib=a("li"),Jge=a("strong"),Wqo=o("electra"),Qqo=o(" \u2014 "),zO=a("a"),Hqo=o("ElectraForMultipleChoice"),Uqo=o(" (ELECTRA model)"),Jqo=l(),db=a("li"),Yge=a("strong"),Yqo=o("flaubert"),Kqo=o(" \u2014 "),WO=a("a"),Zqo=o("FlaubertForMultipleChoice"),ejo=o(" (FlauBERT model)"),ojo=l(),cb=a("li"),Kge=a("strong"),rjo=o("fnet"),tjo=o(" \u2014 "),QO=a("a"),ajo=o("FNetForMultipleChoice"),njo=o(" (FNet model)"),sjo=l(),fb=a("li"),Zge=a("strong"),ljo=o("funnel"),ijo=o(" \u2014 "),HO=a("a"),djo=o("FunnelForMultipleChoice"),cjo=o(" (Funnel Transformer model)"),fjo=l(),mb=a("li"),ehe=a("strong"),mjo=o("ibert"),gjo=o(" \u2014 "),UO=a("a"),hjo=o("IBertForMultipleChoice"),pjo=o(" (I-BERT model)"),_jo=l(),gb=a("li"),ohe=a("strong"),ujo=o("longformer"),bjo=o(" \u2014 "),JO=a("a"),vjo=o("LongformerForMultipleChoice"),Fjo=o(" (Longformer model)"),Tjo=l(),hb=a("li"),rhe=a("strong"),Mjo=o("megatron-bert"),Ejo=o(" \u2014 "),YO=a("a"),Cjo=o("MegatronBertForMultipleChoice"),wjo=o(" (Megatron-BERT model)"),Ajo=l(),pb=a("li"),the=a("strong"),Ljo=o("mobilebert"),yjo=o(" \u2014 "),KO=a("a"),xjo=o("MobileBertForMultipleChoice"),$jo=o(" (MobileBERT model)"),kjo=l(),_b=a("li"),ahe=a("strong"),Sjo=o("mpnet"),Rjo=o(" \u2014 "),ZO=a("a"),Pjo=o("MPNetForMultipleChoice"),Bjo=o(" (MPNet model)"),Ijo=l(),ub=a("li"),nhe=a("strong"),Njo=o("nystromformer"),qjo=o(" \u2014 "),eV=a("a"),jjo=o("NystromformerForMultipleChoice"),Djo=o(" (Nystr\xF6mformer model)"),Gjo=l(),bb=a("li"),she=a("strong"),Ojo=o("qdqbert"),Vjo=o(" \u2014 "),oV=a("a"),Xjo=o("QDQBertForMultipleChoice"),zjo=o(" (QDQBert model)"),Wjo=l(),vb=a("li"),lhe=a("strong"),Qjo=o("rembert"),Hjo=o(" \u2014 "),rV=a("a"),Ujo=o("RemBertForMultipleChoice"),Jjo=o(" (RemBERT model)"),Yjo=l(),Fb=a("li"),ihe=a("strong"),Kjo=o("roberta"),Zjo=o(" \u2014 "),tV=a("a"),eDo=o("RobertaForMultipleChoice"),oDo=o(" (RoBERTa model)"),rDo=l(),Tb=a("li"),dhe=a("strong"),tDo=o("roformer"),aDo=o(" \u2014 "),aV=a("a"),nDo=o("RoFormerForMultipleChoice"),sDo=o(" (RoFormer model)"),lDo=l(),Mb=a("li"),che=a("strong"),iDo=o("squeezebert"),dDo=o(" \u2014 "),nV=a("a"),cDo=o("SqueezeBertForMultipleChoice"),fDo=o(" (SqueezeBERT model)"),mDo=l(),Eb=a("li"),fhe=a("strong"),gDo=o("xlm"),hDo=o(" \u2014 "),sV=a("a"),pDo=o("XLMForMultipleChoice"),_Do=o(" (XLM model)"),uDo=l(),Cb=a("li"),mhe=a("strong"),bDo=o("xlm-roberta"),vDo=o(" \u2014 "),lV=a("a"),FDo=o("XLMRobertaForMultipleChoice"),TDo=o(" (XLM-RoBERTa model)"),MDo=l(),wb=a("li"),ghe=a("strong"),EDo=o("xlm-roberta-xl"),CDo=o(" \u2014 "),iV=a("a"),wDo=o("XLMRobertaXLForMultipleChoice"),ADo=o(" (XLM-RoBERTa-XL model)"),LDo=l(),Ab=a("li"),hhe=a("strong"),yDo=o("xlnet"),xDo=o(" \u2014 "),dV=a("a"),$Do=o("XLNetForMultipleChoice"),kDo=o(" (XLNet model)"),SDo=l(),Lb=a("li"),phe=a("strong"),RDo=o("yoso"),PDo=o(" \u2014 "),cV=a("a"),BDo=o("YosoForMultipleChoice"),IDo=o(" (YOSO model)"),NDo=l(),yb=a("p"),qDo=o("The model is set in evaluation mode by default using "),_he=a("code"),jDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),GDo=o("model.train()"),ODo=l(),F(xb.$$.fragment),Xje=l(),Qi=a("h2"),$b=a("a"),bhe=a("span"),F(KL.$$.fragment),VDo=l(),vhe=a("span"),XDo=o("AutoModelForNextSentencePrediction"),zje=l(),Bo=a("div"),F(ZL.$$.fragment),zDo=l(),Hi=a("p"),WDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fV=a("a"),QDo=o("from_pretrained()"),HDo=o(" class method or the "),mV=a("a"),UDo=o("from_config()"),JDo=o(` class
method.`),YDo=l(),ey=a("p"),KDo=o("This class cannot be instantiated directly using "),Fhe=a("code"),ZDo=o("__init__()"),eGo=o(" (throws an error)."),oGo=l(),ct=a("div"),F(oy.$$.fragment),rGo=l(),The=a("p"),tGo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aGo=l(),Ui=a("p"),nGo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),sGo=o("not"),lGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),iGo=o("from_pretrained()"),dGo=o(" to load the model weights."),cGo=l(),F(kb.$$.fragment),fGo=l(),to=a("div"),F(ry.$$.fragment),mGo=l(),Ehe=a("p"),gGo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hGo=l(),Ba=a("p"),pGo=o("The model class to instantiate is selected based on the "),Che=a("code"),_Go=o("model_type"),uGo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),bGo=o("pretrained_model_name_or_path"),vGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),FGo=o("pretrained_model_name_or_path"),TGo=o(":"),MGo=l(),Yr=a("ul"),Sb=a("li"),Lhe=a("strong"),EGo=o("bert"),CGo=o(" \u2014 "),hV=a("a"),wGo=o("BertForNextSentencePrediction"),AGo=o(" (BERT model)"),LGo=l(),Rb=a("li"),yhe=a("strong"),yGo=o("fnet"),xGo=o(" \u2014 "),pV=a("a"),$Go=o("FNetForNextSentencePrediction"),kGo=o(" (FNet model)"),SGo=l(),Pb=a("li"),xhe=a("strong"),RGo=o("megatron-bert"),PGo=o(" \u2014 "),_V=a("a"),BGo=o("MegatronBertForNextSentencePrediction"),IGo=o(" (Megatron-BERT model)"),NGo=l(),Bb=a("li"),$he=a("strong"),qGo=o("mobilebert"),jGo=o(" \u2014 "),uV=a("a"),DGo=o("MobileBertForNextSentencePrediction"),GGo=o(" (MobileBERT model)"),OGo=l(),Ib=a("li"),khe=a("strong"),VGo=o("qdqbert"),XGo=o(" \u2014 "),bV=a("a"),zGo=o("QDQBertForNextSentencePrediction"),WGo=o(" (QDQBert model)"),QGo=l(),Nb=a("p"),HGo=o("The model is set in evaluation mode by default using "),She=a("code"),UGo=o("model.eval()"),JGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),YGo=o("model.train()"),KGo=l(),F(qb.$$.fragment),Wje=l(),Ji=a("h2"),jb=a("a"),Phe=a("span"),F(ty.$$.fragment),ZGo=l(),Bhe=a("span"),eOo=o("AutoModelForTokenClassification"),Qje=l(),Io=a("div"),F(ay.$$.fragment),oOo=l(),Yi=a("p"),rOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vV=a("a"),tOo=o("from_pretrained()"),aOo=o(" class method or the "),FV=a("a"),nOo=o("from_config()"),sOo=o(` class
method.`),lOo=l(),ny=a("p"),iOo=o("This class cannot be instantiated directly using "),Ihe=a("code"),dOo=o("__init__()"),cOo=o(" (throws an error)."),fOo=l(),ft=a("div"),F(sy.$$.fragment),mOo=l(),Nhe=a("p"),gOo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hOo=l(),Ki=a("p"),pOo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),_Oo=o("not"),uOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),bOo=o("from_pretrained()"),vOo=o(" to load the model weights."),FOo=l(),F(Db.$$.fragment),TOo=l(),ao=a("div"),F(ly.$$.fragment),MOo=l(),jhe=a("p"),EOo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),COo=l(),Ia=a("p"),wOo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),AOo=o("model_type"),LOo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),yOo=o("pretrained_model_name_or_path"),xOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),$Oo=o("pretrained_model_name_or_path"),kOo=o(":"),SOo=l(),U=a("ul"),Gb=a("li"),Vhe=a("strong"),ROo=o("albert"),POo=o(" \u2014 "),MV=a("a"),BOo=o("AlbertForTokenClassification"),IOo=o(" (ALBERT model)"),NOo=l(),Ob=a("li"),Xhe=a("strong"),qOo=o("bert"),jOo=o(" \u2014 "),EV=a("a"),DOo=o("BertForTokenClassification"),GOo=o(" (BERT model)"),OOo=l(),Vb=a("li"),zhe=a("strong"),VOo=o("big_bird"),XOo=o(" \u2014 "),CV=a("a"),zOo=o("BigBirdForTokenClassification"),WOo=o(" (BigBird model)"),QOo=l(),Xb=a("li"),Whe=a("strong"),HOo=o("camembert"),UOo=o(" \u2014 "),wV=a("a"),JOo=o("CamembertForTokenClassification"),YOo=o(" (CamemBERT model)"),KOo=l(),zb=a("li"),Qhe=a("strong"),ZOo=o("canine"),eVo=o(" \u2014 "),AV=a("a"),oVo=o("CanineForTokenClassification"),rVo=o(" (CANINE model)"),tVo=l(),Wb=a("li"),Hhe=a("strong"),aVo=o("convbert"),nVo=o(" \u2014 "),LV=a("a"),sVo=o("ConvBertForTokenClassification"),lVo=o(" (ConvBERT model)"),iVo=l(),Qb=a("li"),Uhe=a("strong"),dVo=o("data2vec-text"),cVo=o(" \u2014 "),yV=a("a"),fVo=o("Data2VecTextForTokenClassification"),mVo=o(" (Data2VecText model)"),gVo=l(),Hb=a("li"),Jhe=a("strong"),hVo=o("deberta"),pVo=o(" \u2014 "),xV=a("a"),_Vo=o("DebertaForTokenClassification"),uVo=o(" (DeBERTa model)"),bVo=l(),Ub=a("li"),Yhe=a("strong"),vVo=o("deberta-v2"),FVo=o(" \u2014 "),$V=a("a"),TVo=o("DebertaV2ForTokenClassification"),MVo=o(" (DeBERTa-v2 model)"),EVo=l(),Jb=a("li"),Khe=a("strong"),CVo=o("distilbert"),wVo=o(" \u2014 "),kV=a("a"),AVo=o("DistilBertForTokenClassification"),LVo=o(" (DistilBERT model)"),yVo=l(),Yb=a("li"),Zhe=a("strong"),xVo=o("electra"),$Vo=o(" \u2014 "),SV=a("a"),kVo=o("ElectraForTokenClassification"),SVo=o(" (ELECTRA model)"),RVo=l(),Kb=a("li"),epe=a("strong"),PVo=o("flaubert"),BVo=o(" \u2014 "),RV=a("a"),IVo=o("FlaubertForTokenClassification"),NVo=o(" (FlauBERT model)"),qVo=l(),Zb=a("li"),ope=a("strong"),jVo=o("fnet"),DVo=o(" \u2014 "),PV=a("a"),GVo=o("FNetForTokenClassification"),OVo=o(" (FNet model)"),VVo=l(),e2=a("li"),rpe=a("strong"),XVo=o("funnel"),zVo=o(" \u2014 "),BV=a("a"),WVo=o("FunnelForTokenClassification"),QVo=o(" (Funnel Transformer model)"),HVo=l(),o2=a("li"),tpe=a("strong"),UVo=o("gpt2"),JVo=o(" \u2014 "),IV=a("a"),YVo=o("GPT2ForTokenClassification"),KVo=o(" (OpenAI GPT-2 model)"),ZVo=l(),r2=a("li"),ape=a("strong"),eXo=o("ibert"),oXo=o(" \u2014 "),NV=a("a"),rXo=o("IBertForTokenClassification"),tXo=o(" (I-BERT model)"),aXo=l(),t2=a("li"),npe=a("strong"),nXo=o("layoutlm"),sXo=o(" \u2014 "),qV=a("a"),lXo=o("LayoutLMForTokenClassification"),iXo=o(" (LayoutLM model)"),dXo=l(),a2=a("li"),spe=a("strong"),cXo=o("layoutlmv2"),fXo=o(" \u2014 "),jV=a("a"),mXo=o("LayoutLMv2ForTokenClassification"),gXo=o(" (LayoutLMv2 model)"),hXo=l(),n2=a("li"),lpe=a("strong"),pXo=o("layoutlmv3"),_Xo=o(" \u2014 "),DV=a("a"),uXo=o("LayoutLMv3ForTokenClassification"),bXo=o(" (LayoutLMv3 model)"),vXo=l(),s2=a("li"),ipe=a("strong"),FXo=o("longformer"),TXo=o(" \u2014 "),GV=a("a"),MXo=o("LongformerForTokenClassification"),EXo=o(" (Longformer model)"),CXo=l(),l2=a("li"),dpe=a("strong"),wXo=o("megatron-bert"),AXo=o(" \u2014 "),OV=a("a"),LXo=o("MegatronBertForTokenClassification"),yXo=o(" (Megatron-BERT model)"),xXo=l(),i2=a("li"),cpe=a("strong"),$Xo=o("mobilebert"),kXo=o(" \u2014 "),VV=a("a"),SXo=o("MobileBertForTokenClassification"),RXo=o(" (MobileBERT model)"),PXo=l(),d2=a("li"),fpe=a("strong"),BXo=o("mpnet"),IXo=o(" \u2014 "),XV=a("a"),NXo=o("MPNetForTokenClassification"),qXo=o(" (MPNet model)"),jXo=l(),c2=a("li"),mpe=a("strong"),DXo=o("nystromformer"),GXo=o(" \u2014 "),zV=a("a"),OXo=o("NystromformerForTokenClassification"),VXo=o(" (Nystr\xF6mformer model)"),XXo=l(),f2=a("li"),gpe=a("strong"),zXo=o("qdqbert"),WXo=o(" \u2014 "),WV=a("a"),QXo=o("QDQBertForTokenClassification"),HXo=o(" (QDQBert model)"),UXo=l(),m2=a("li"),hpe=a("strong"),JXo=o("rembert"),YXo=o(" \u2014 "),QV=a("a"),KXo=o("RemBertForTokenClassification"),ZXo=o(" (RemBERT model)"),ezo=l(),g2=a("li"),ppe=a("strong"),ozo=o("roberta"),rzo=o(" \u2014 "),HV=a("a"),tzo=o("RobertaForTokenClassification"),azo=o(" (RoBERTa model)"),nzo=l(),h2=a("li"),_pe=a("strong"),szo=o("roformer"),lzo=o(" \u2014 "),UV=a("a"),izo=o("RoFormerForTokenClassification"),dzo=o(" (RoFormer model)"),czo=l(),p2=a("li"),upe=a("strong"),fzo=o("squeezebert"),mzo=o(" \u2014 "),JV=a("a"),gzo=o("SqueezeBertForTokenClassification"),hzo=o(" (SqueezeBERT model)"),pzo=l(),_2=a("li"),bpe=a("strong"),_zo=o("xlm"),uzo=o(" \u2014 "),YV=a("a"),bzo=o("XLMForTokenClassification"),vzo=o(" (XLM model)"),Fzo=l(),u2=a("li"),vpe=a("strong"),Tzo=o("xlm-roberta"),Mzo=o(" \u2014 "),KV=a("a"),Ezo=o("XLMRobertaForTokenClassification"),Czo=o(" (XLM-RoBERTa model)"),wzo=l(),b2=a("li"),Fpe=a("strong"),Azo=o("xlm-roberta-xl"),Lzo=o(" \u2014 "),ZV=a("a"),yzo=o("XLMRobertaXLForTokenClassification"),xzo=o(" (XLM-RoBERTa-XL model)"),$zo=l(),v2=a("li"),Tpe=a("strong"),kzo=o("xlnet"),Szo=o(" \u2014 "),eX=a("a"),Rzo=o("XLNetForTokenClassification"),Pzo=o(" (XLNet model)"),Bzo=l(),F2=a("li"),Mpe=a("strong"),Izo=o("yoso"),Nzo=o(" \u2014 "),oX=a("a"),qzo=o("YosoForTokenClassification"),jzo=o(" (YOSO model)"),Dzo=l(),T2=a("p"),Gzo=o("The model is set in evaluation mode by default using "),Epe=a("code"),Ozo=o("model.eval()"),Vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),Xzo=o("model.train()"),zzo=l(),F(M2.$$.fragment),Hje=l(),Zi=a("h2"),E2=a("a"),wpe=a("span"),F(iy.$$.fragment),Wzo=l(),Ape=a("span"),Qzo=o("AutoModelForQuestionAnswering"),Uje=l(),No=a("div"),F(dy.$$.fragment),Hzo=l(),ed=a("p"),Uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rX=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" class method or the "),tX=a("a"),Kzo=o("from_config()"),Zzo=o(` class
method.`),eWo=l(),cy=a("p"),oWo=o("This class cannot be instantiated directly using "),Lpe=a("code"),rWo=o("__init__()"),tWo=o(" (throws an error)."),aWo=l(),mt=a("div"),F(fy.$$.fragment),nWo=l(),ype=a("p"),sWo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lWo=l(),od=a("p"),iWo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),dWo=o("not"),cWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),fWo=o("from_pretrained()"),mWo=o(" to load the model weights."),gWo=l(),F(C2.$$.fragment),hWo=l(),no=a("div"),F(my.$$.fragment),pWo=l(),$pe=a("p"),_Wo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uWo=l(),Na=a("p"),bWo=o("The model class to instantiate is selected based on the "),kpe=a("code"),vWo=o("model_type"),FWo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),TWo=o("pretrained_model_name_or_path"),MWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(":"),wWo=l(),V=a("ul"),w2=a("li"),Ppe=a("strong"),AWo=o("albert"),LWo=o(" \u2014 "),nX=a("a"),yWo=o("AlbertForQuestionAnswering"),xWo=o(" (ALBERT model)"),$Wo=l(),A2=a("li"),Bpe=a("strong"),kWo=o("bart"),SWo=o(" \u2014 "),sX=a("a"),RWo=o("BartForQuestionAnswering"),PWo=o(" (BART model)"),BWo=l(),L2=a("li"),Ipe=a("strong"),IWo=o("bert"),NWo=o(" \u2014 "),lX=a("a"),qWo=o("BertForQuestionAnswering"),jWo=o(" (BERT model)"),DWo=l(),y2=a("li"),Npe=a("strong"),GWo=o("big_bird"),OWo=o(" \u2014 "),iX=a("a"),VWo=o("BigBirdForQuestionAnswering"),XWo=o(" (BigBird model)"),zWo=l(),x2=a("li"),qpe=a("strong"),WWo=o("bigbird_pegasus"),QWo=o(" \u2014 "),dX=a("a"),HWo=o("BigBirdPegasusForQuestionAnswering"),UWo=o(" (BigBird-Pegasus model)"),JWo=l(),$2=a("li"),jpe=a("strong"),YWo=o("camembert"),KWo=o(" \u2014 "),cX=a("a"),ZWo=o("CamembertForQuestionAnswering"),eQo=o(" (CamemBERT model)"),oQo=l(),k2=a("li"),Dpe=a("strong"),rQo=o("canine"),tQo=o(" \u2014 "),fX=a("a"),aQo=o("CanineForQuestionAnswering"),nQo=o(" (CANINE model)"),sQo=l(),S2=a("li"),Gpe=a("strong"),lQo=o("convbert"),iQo=o(" \u2014 "),mX=a("a"),dQo=o("ConvBertForQuestionAnswering"),cQo=o(" (ConvBERT model)"),fQo=l(),R2=a("li"),Ope=a("strong"),mQo=o("data2vec-text"),gQo=o(" \u2014 "),gX=a("a"),hQo=o("Data2VecTextForQuestionAnswering"),pQo=o(" (Data2VecText model)"),_Qo=l(),P2=a("li"),Vpe=a("strong"),uQo=o("deberta"),bQo=o(" \u2014 "),hX=a("a"),vQo=o("DebertaForQuestionAnswering"),FQo=o(" (DeBERTa model)"),TQo=l(),B2=a("li"),Xpe=a("strong"),MQo=o("deberta-v2"),EQo=o(" \u2014 "),pX=a("a"),CQo=o("DebertaV2ForQuestionAnswering"),wQo=o(" (DeBERTa-v2 model)"),AQo=l(),I2=a("li"),zpe=a("strong"),LQo=o("distilbert"),yQo=o(" \u2014 "),_X=a("a"),xQo=o("DistilBertForQuestionAnswering"),$Qo=o(" (DistilBERT model)"),kQo=l(),N2=a("li"),Wpe=a("strong"),SQo=o("electra"),RQo=o(" \u2014 "),uX=a("a"),PQo=o("ElectraForQuestionAnswering"),BQo=o(" (ELECTRA model)"),IQo=l(),q2=a("li"),Qpe=a("strong"),NQo=o("flaubert"),qQo=o(" \u2014 "),bX=a("a"),jQo=o("FlaubertForQuestionAnsweringSimple"),DQo=o(" (FlauBERT model)"),GQo=l(),j2=a("li"),Hpe=a("strong"),OQo=o("fnet"),VQo=o(" \u2014 "),vX=a("a"),XQo=o("FNetForQuestionAnswering"),zQo=o(" (FNet model)"),WQo=l(),D2=a("li"),Upe=a("strong"),QQo=o("funnel"),HQo=o(" \u2014 "),FX=a("a"),UQo=o("FunnelForQuestionAnswering"),JQo=o(" (Funnel Transformer model)"),YQo=l(),G2=a("li"),Jpe=a("strong"),KQo=o("gptj"),ZQo=o(" \u2014 "),TX=a("a"),eHo=o("GPTJForQuestionAnswering"),oHo=o(" (GPT-J model)"),rHo=l(),O2=a("li"),Ype=a("strong"),tHo=o("ibert"),aHo=o(" \u2014 "),MX=a("a"),nHo=o("IBertForQuestionAnswering"),sHo=o(" (I-BERT model)"),lHo=l(),V2=a("li"),Kpe=a("strong"),iHo=o("layoutlmv2"),dHo=o(" \u2014 "),EX=a("a"),cHo=o("LayoutLMv2ForQuestionAnswering"),fHo=o(" (LayoutLMv2 model)"),mHo=l(),X2=a("li"),Zpe=a("strong"),gHo=o("layoutlmv3"),hHo=o(" \u2014 "),CX=a("a"),pHo=o("LayoutLMv3ForQuestionAnswering"),_Ho=o(" (LayoutLMv3 model)"),uHo=l(),z2=a("li"),e_e=a("strong"),bHo=o("led"),vHo=o(" \u2014 "),wX=a("a"),FHo=o("LEDForQuestionAnswering"),THo=o(" (LED model)"),MHo=l(),W2=a("li"),o_e=a("strong"),EHo=o("longformer"),CHo=o(" \u2014 "),AX=a("a"),wHo=o("LongformerForQuestionAnswering"),AHo=o(" (Longformer model)"),LHo=l(),Q2=a("li"),r_e=a("strong"),yHo=o("lxmert"),xHo=o(" \u2014 "),LX=a("a"),$Ho=o("LxmertForQuestionAnswering"),kHo=o(" (LXMERT model)"),SHo=l(),H2=a("li"),t_e=a("strong"),RHo=o("mbart"),PHo=o(" \u2014 "),yX=a("a"),BHo=o("MBartForQuestionAnswering"),IHo=o(" (mBART model)"),NHo=l(),U2=a("li"),a_e=a("strong"),qHo=o("megatron-bert"),jHo=o(" \u2014 "),xX=a("a"),DHo=o("MegatronBertForQuestionAnswering"),GHo=o(" (Megatron-BERT model)"),OHo=l(),J2=a("li"),n_e=a("strong"),VHo=o("mobilebert"),XHo=o(" \u2014 "),$X=a("a"),zHo=o("MobileBertForQuestionAnswering"),WHo=o(" (MobileBERT model)"),QHo=l(),Y2=a("li"),s_e=a("strong"),HHo=o("mpnet"),UHo=o(" \u2014 "),kX=a("a"),JHo=o("MPNetForQuestionAnswering"),YHo=o(" (MPNet model)"),KHo=l(),K2=a("li"),l_e=a("strong"),ZHo=o("nystromformer"),eUo=o(" \u2014 "),SX=a("a"),oUo=o("NystromformerForQuestionAnswering"),rUo=o(" (Nystr\xF6mformer model)"),tUo=l(),Z2=a("li"),i_e=a("strong"),aUo=o("qdqbert"),nUo=o(" \u2014 "),RX=a("a"),sUo=o("QDQBertForQuestionAnswering"),lUo=o(" (QDQBert model)"),iUo=l(),ev=a("li"),d_e=a("strong"),dUo=o("reformer"),cUo=o(" \u2014 "),PX=a("a"),fUo=o("ReformerForQuestionAnswering"),mUo=o(" (Reformer model)"),gUo=l(),ov=a("li"),c_e=a("strong"),hUo=o("rembert"),pUo=o(" \u2014 "),BX=a("a"),_Uo=o("RemBertForQuestionAnswering"),uUo=o(" (RemBERT model)"),bUo=l(),rv=a("li"),f_e=a("strong"),vUo=o("roberta"),FUo=o(" \u2014 "),IX=a("a"),TUo=o("RobertaForQuestionAnswering"),MUo=o(" (RoBERTa model)"),EUo=l(),tv=a("li"),m_e=a("strong"),CUo=o("roformer"),wUo=o(" \u2014 "),NX=a("a"),AUo=o("RoFormerForQuestionAnswering"),LUo=o(" (RoFormer model)"),yUo=l(),av=a("li"),g_e=a("strong"),xUo=o("splinter"),$Uo=o(" \u2014 "),qX=a("a"),kUo=o("SplinterForQuestionAnswering"),SUo=o(" (Splinter model)"),RUo=l(),nv=a("li"),h_e=a("strong"),PUo=o("squeezebert"),BUo=o(" \u2014 "),jX=a("a"),IUo=o("SqueezeBertForQuestionAnswering"),NUo=o(" (SqueezeBERT model)"),qUo=l(),sv=a("li"),p_e=a("strong"),jUo=o("xlm"),DUo=o(" \u2014 "),DX=a("a"),GUo=o("XLMForQuestionAnsweringSimple"),OUo=o(" (XLM model)"),VUo=l(),lv=a("li"),__e=a("strong"),XUo=o("xlm-roberta"),zUo=o(" \u2014 "),GX=a("a"),WUo=o("XLMRobertaForQuestionAnswering"),QUo=o(" (XLM-RoBERTa model)"),HUo=l(),iv=a("li"),u_e=a("strong"),UUo=o("xlm-roberta-xl"),JUo=o(" \u2014 "),OX=a("a"),YUo=o("XLMRobertaXLForQuestionAnswering"),KUo=o(" (XLM-RoBERTa-XL model)"),ZUo=l(),dv=a("li"),b_e=a("strong"),eJo=o("xlnet"),oJo=o(" \u2014 "),VX=a("a"),rJo=o("XLNetForQuestionAnsweringSimple"),tJo=o(" (XLNet model)"),aJo=l(),cv=a("li"),v_e=a("strong"),nJo=o("yoso"),sJo=o(" \u2014 "),XX=a("a"),lJo=o("YosoForQuestionAnswering"),iJo=o(" (YOSO model)"),dJo=l(),fv=a("p"),cJo=o("The model is set in evaluation mode by default using "),F_e=a("code"),fJo=o("model.eval()"),mJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),gJo=o("model.train()"),hJo=l(),F(mv.$$.fragment),Jje=l(),rd=a("h2"),gv=a("a"),M_e=a("span"),F(gy.$$.fragment),pJo=l(),E_e=a("span"),_Jo=o("AutoModelForTableQuestionAnswering"),Yje=l(),qo=a("div"),F(hy.$$.fragment),uJo=l(),td=a("p"),bJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zX=a("a"),vJo=o("from_pretrained()"),FJo=o(" class method or the "),WX=a("a"),TJo=o("from_config()"),MJo=o(` class
method.`),EJo=l(),py=a("p"),CJo=o("This class cannot be instantiated directly using "),C_e=a("code"),wJo=o("__init__()"),AJo=o(" (throws an error)."),LJo=l(),gt=a("div"),F(_y.$$.fragment),yJo=l(),w_e=a("p"),xJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Jo=l(),ad=a("p"),kJo=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),SJo=o("not"),RJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),PJo=o("from_pretrained()"),BJo=o(" to load the model weights."),IJo=l(),F(hv.$$.fragment),NJo=l(),so=a("div"),F(uy.$$.fragment),qJo=l(),L_e=a("p"),jJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DJo=l(),qa=a("p"),GJo=o("The model class to instantiate is selected based on the "),y_e=a("code"),OJo=o("model_type"),VJo=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),WJo=o("pretrained_model_name_or_path"),QJo=o(":"),HJo=l(),k_e=a("ul"),pv=a("li"),S_e=a("strong"),UJo=o("tapas"),JJo=o(" \u2014 "),HX=a("a"),YJo=o("TapasForQuestionAnswering"),KJo=o(" (TAPAS model)"),ZJo=l(),_v=a("p"),eYo=o("The model is set in evaluation mode by default using "),R_e=a("code"),oYo=o("model.eval()"),rYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),tYo=o("model.train()"),aYo=l(),F(uv.$$.fragment),Kje=l(),nd=a("h2"),bv=a("a"),B_e=a("span"),F(by.$$.fragment),nYo=l(),I_e=a("span"),sYo=o("AutoModelForImageClassification"),Zje=l(),jo=a("div"),F(vy.$$.fragment),lYo=l(),sd=a("p"),iYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UX=a("a"),dYo=o("from_pretrained()"),cYo=o(" class method or the "),JX=a("a"),fYo=o("from_config()"),mYo=o(` class
method.`),gYo=l(),Fy=a("p"),hYo=o("This class cannot be instantiated directly using "),N_e=a("code"),pYo=o("__init__()"),_Yo=o(" (throws an error)."),uYo=l(),ht=a("div"),F(Ty.$$.fragment),bYo=l(),q_e=a("p"),vYo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FYo=l(),ld=a("p"),TYo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),MYo=o("not"),EYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),CYo=o("from_pretrained()"),wYo=o(" to load the model weights."),AYo=l(),F(vv.$$.fragment),LYo=l(),lo=a("div"),F(My.$$.fragment),yYo=l(),D_e=a("p"),xYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Yo=l(),ja=a("p"),kYo=o("The model class to instantiate is selected based on the "),G_e=a("code"),SYo=o("model_type"),RYo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),IYo=o("pretrained_model_name_or_path"),NYo=o(":"),qYo=l(),ve=a("ul"),Fv=a("li"),X_e=a("strong"),jYo=o("beit"),DYo=o(" \u2014 "),KX=a("a"),GYo=o("BeitForImageClassification"),OYo=o(" (BEiT model)"),VYo=l(),Tv=a("li"),z_e=a("strong"),XYo=o("convnext"),zYo=o(" \u2014 "),ZX=a("a"),WYo=o("ConvNextForImageClassification"),QYo=o(" (ConvNeXT model)"),HYo=l(),Mv=a("li"),W_e=a("strong"),UYo=o("cvt"),JYo=o(" \u2014 "),ez=a("a"),YYo=o("CvtForImageClassification"),KYo=o(" (CvT model)"),ZYo=l(),Ev=a("li"),Q_e=a("strong"),eKo=o("data2vec-vision"),oKo=o(" \u2014 "),oz=a("a"),rKo=o("Data2VecVisionForImageClassification"),tKo=o(" (Data2VecVision model)"),aKo=l(),Bs=a("li"),H_e=a("strong"),nKo=o("deit"),sKo=o(" \u2014 "),rz=a("a"),lKo=o("DeiTForImageClassification"),iKo=o(" or "),tz=a("a"),dKo=o("DeiTForImageClassificationWithTeacher"),cKo=o(" (DeiT model)"),fKo=l(),Cv=a("li"),U_e=a("strong"),mKo=o("imagegpt"),gKo=o(" \u2014 "),az=a("a"),hKo=o("ImageGPTForImageClassification"),pKo=o(" (ImageGPT model)"),_Ko=l(),Is=a("li"),J_e=a("strong"),uKo=o("levit"),bKo=o(" \u2014 "),nz=a("a"),vKo=o("LevitForImageClassification"),FKo=o(" or "),sz=a("a"),TKo=o("LevitForImageClassificationWithTeacher"),MKo=o(" (LeViT model)"),EKo=l(),pt=a("li"),Y_e=a("strong"),CKo=o("perceiver"),wKo=o(" \u2014 "),lz=a("a"),AKo=o("PerceiverForImageClassificationLearned"),LKo=o(" or "),iz=a("a"),yKo=o("PerceiverForImageClassificationFourier"),xKo=o(" or "),dz=a("a"),$Ko=o("PerceiverForImageClassificationConvProcessing"),kKo=o(" (Perceiver model)"),SKo=l(),wv=a("li"),K_e=a("strong"),RKo=o("poolformer"),PKo=o(" \u2014 "),cz=a("a"),BKo=o("PoolFormerForImageClassification"),IKo=o(" (PoolFormer model)"),NKo=l(),Av=a("li"),Z_e=a("strong"),qKo=o("regnet"),jKo=o(" \u2014 "),fz=a("a"),DKo=o("RegNetForImageClassification"),GKo=o(" (RegNet model)"),OKo=l(),Lv=a("li"),eue=a("strong"),VKo=o("resnet"),XKo=o(" \u2014 "),mz=a("a"),zKo=o("ResNetForImageClassification"),WKo=o(" (ResNet model)"),QKo=l(),yv=a("li"),oue=a("strong"),HKo=o("segformer"),UKo=o(" \u2014 "),gz=a("a"),JKo=o("SegformerForImageClassification"),YKo=o(" (SegFormer model)"),KKo=l(),xv=a("li"),rue=a("strong"),ZKo=o("swin"),eZo=o(" \u2014 "),hz=a("a"),oZo=o("SwinForImageClassification"),rZo=o(" (Swin Transformer model)"),tZo=l(),$v=a("li"),tue=a("strong"),aZo=o("van"),nZo=o(" \u2014 "),pz=a("a"),sZo=o("VanForImageClassification"),lZo=o(" (VAN model)"),iZo=l(),kv=a("li"),aue=a("strong"),dZo=o("vit"),cZo=o(" \u2014 "),_z=a("a"),fZo=o("ViTForImageClassification"),mZo=o(" (ViT model)"),gZo=l(),Sv=a("p"),hZo=o("The model is set in evaluation mode by default using "),nue=a("code"),pZo=o("model.eval()"),_Zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),uZo=o("model.train()"),bZo=l(),F(Rv.$$.fragment),eDe=l(),id=a("h2"),Pv=a("a"),lue=a("span"),F(Ey.$$.fragment),vZo=l(),iue=a("span"),FZo=o("AutoModelForVision2Seq"),oDe=l(),Do=a("div"),F(Cy.$$.fragment),TZo=l(),dd=a("p"),MZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uz=a("a"),EZo=o("from_pretrained()"),CZo=o(" class method or the "),bz=a("a"),wZo=o("from_config()"),AZo=o(` class
method.`),LZo=l(),wy=a("p"),yZo=o("This class cannot be instantiated directly using "),due=a("code"),xZo=o("__init__()"),$Zo=o(" (throws an error)."),kZo=l(),_t=a("div"),F(Ay.$$.fragment),SZo=l(),cue=a("p"),RZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PZo=l(),cd=a("p"),BZo=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),IZo=o("not"),NZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),qZo=o("from_pretrained()"),jZo=o(" to load the model weights."),DZo=l(),F(Bv.$$.fragment),GZo=l(),io=a("div"),F(Ly.$$.fragment),OZo=l(),mue=a("p"),VZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XZo=l(),Da=a("p"),zZo=o("The model class to instantiate is selected based on the "),gue=a("code"),WZo=o("model_type"),QZo=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),HZo=o("pretrained_model_name_or_path"),UZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(":"),KZo=l(),_ue=a("ul"),Iv=a("li"),uue=a("strong"),ZZo=o("vision-encoder-decoder"),eer=o(" \u2014 "),Fz=a("a"),oer=o("VisionEncoderDecoderModel"),rer=o(" (Vision Encoder decoder model)"),ter=l(),Nv=a("p"),aer=o("The model is set in evaluation mode by default using "),bue=a("code"),ner=o("model.eval()"),ser=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),ler=o("model.train()"),ier=l(),F(qv.$$.fragment),rDe=l(),fd=a("h2"),jv=a("a"),Fue=a("span"),F(yy.$$.fragment),der=l(),Tue=a("span"),cer=o("AutoModelForAudioClassification"),tDe=l(),Go=a("div"),F(xy.$$.fragment),fer=l(),md=a("p"),mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tz=a("a"),ger=o("from_pretrained()"),her=o(" class method or the "),Mz=a("a"),per=o("from_config()"),_er=o(` class
method.`),uer=l(),$y=a("p"),ber=o("This class cannot be instantiated directly using "),Mue=a("code"),ver=o("__init__()"),Fer=o(" (throws an error)."),Ter=l(),ut=a("div"),F(ky.$$.fragment),Mer=l(),Eue=a("p"),Eer=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cer=l(),gd=a("p"),wer=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),Aer=o("not"),Ler=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),yer=o("from_pretrained()"),xer=o(" to load the model weights."),$er=l(),F(Dv.$$.fragment),ker=l(),co=a("div"),F(Sy.$$.fragment),Ser=l(),wue=a("p"),Rer=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Per=l(),Ga=a("p"),Ber=o("The model class to instantiate is selected based on the "),Aue=a("code"),Ier=o("model_type"),Ner=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),qer=o("pretrained_model_name_or_path"),jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(":"),Oer=l(),Re=a("ul"),Gv=a("li"),xue=a("strong"),Ver=o("data2vec-audio"),Xer=o(" \u2014 "),Cz=a("a"),zer=o("Data2VecAudioForSequenceClassification"),Wer=o(" (Data2VecAudio model)"),Qer=l(),Ov=a("li"),$ue=a("strong"),Her=o("hubert"),Uer=o(" \u2014 "),wz=a("a"),Jer=o("HubertForSequenceClassification"),Yer=o(" (Hubert model)"),Ker=l(),Vv=a("li"),kue=a("strong"),Zer=o("sew"),eor=o(" \u2014 "),Az=a("a"),oor=o("SEWForSequenceClassification"),ror=o(" (SEW model)"),tor=l(),Xv=a("li"),Sue=a("strong"),aor=o("sew-d"),nor=o(" \u2014 "),Lz=a("a"),sor=o("SEWDForSequenceClassification"),lor=o(" (SEW-D model)"),ior=l(),zv=a("li"),Rue=a("strong"),dor=o("unispeech"),cor=o(" \u2014 "),yz=a("a"),mor=o("UniSpeechForSequenceClassification"),gor=o(" (UniSpeech model)"),hor=l(),Wv=a("li"),Pue=a("strong"),por=o("unispeech-sat"),_or=o(" \u2014 "),xz=a("a"),uor=o("UniSpeechSatForSequenceClassification"),bor=o(" (UniSpeechSat model)"),vor=l(),Qv=a("li"),Bue=a("strong"),For=o("wav2vec2"),Tor=o(" \u2014 "),$z=a("a"),Mor=o("Wav2Vec2ForSequenceClassification"),Eor=o(" (Wav2Vec2 model)"),Cor=l(),Hv=a("li"),Iue=a("strong"),wor=o("wav2vec2-conformer"),Aor=o(" \u2014 "),kz=a("a"),Lor=o("Wav2Vec2ConformerForSequenceClassification"),yor=o(" (Wav2Vec2-Conformer model)"),xor=l(),Uv=a("li"),Nue=a("strong"),$or=o("wavlm"),kor=o(" \u2014 "),Sz=a("a"),Sor=o("WavLMForSequenceClassification"),Ror=o(" (WavLM model)"),Por=l(),Jv=a("p"),Bor=o("The model is set in evaluation mode by default using "),que=a("code"),Ior=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),qor=o("model.train()"),jor=l(),F(Yv.$$.fragment),aDe=l(),hd=a("h2"),Kv=a("a"),Due=a("span"),F(Ry.$$.fragment),Dor=l(),Gue=a("span"),Gor=o("AutoModelForAudioFrameClassification"),nDe=l(),Oo=a("div"),F(Py.$$.fragment),Oor=l(),pd=a("p"),Vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Rz=a("a"),Xor=o("from_pretrained()"),zor=o(" class method or the "),Pz=a("a"),Wor=o("from_config()"),Qor=o(` class
method.`),Hor=l(),By=a("p"),Uor=o("This class cannot be instantiated directly using "),Oue=a("code"),Jor=o("__init__()"),Yor=o(" (throws an error)."),Kor=l(),bt=a("div"),F(Iy.$$.fragment),Zor=l(),Vue=a("p"),err=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),orr=l(),_d=a("p"),rrr=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),trr=o("not"),arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),nrr=o("from_pretrained()"),srr=o(" to load the model weights."),lrr=l(),F(Zv.$$.fragment),irr=l(),fo=a("div"),F(Ny.$$.fragment),drr=l(),zue=a("p"),crr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),frr=l(),Oa=a("p"),mrr=o("The model class to instantiate is selected based on the "),Wue=a("code"),grr=o("model_type"),hrr=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),prr=o("pretrained_model_name_or_path"),_rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),urr=o("pretrained_model_name_or_path"),brr=o(":"),vrr=l(),Kr=a("ul"),eF=a("li"),Uue=a("strong"),Frr=o("data2vec-audio"),Trr=o(" \u2014 "),Iz=a("a"),Mrr=o("Data2VecAudioForAudioFrameClassification"),Err=o(" (Data2VecAudio model)"),Crr=l(),oF=a("li"),Jue=a("strong"),wrr=o("unispeech-sat"),Arr=o(" \u2014 "),Nz=a("a"),Lrr=o("UniSpeechSatForAudioFrameClassification"),yrr=o(" (UniSpeechSat model)"),xrr=l(),rF=a("li"),Yue=a("strong"),$rr=o("wav2vec2"),krr=o(" \u2014 "),qz=a("a"),Srr=o("Wav2Vec2ForAudioFrameClassification"),Rrr=o(" (Wav2Vec2 model)"),Prr=l(),tF=a("li"),Kue=a("strong"),Brr=o("wav2vec2-conformer"),Irr=o(" \u2014 "),jz=a("a"),Nrr=o("Wav2Vec2ConformerForAudioFrameClassification"),qrr=o(" (Wav2Vec2-Conformer model)"),jrr=l(),aF=a("li"),Zue=a("strong"),Drr=o("wavlm"),Grr=o(" \u2014 "),Dz=a("a"),Orr=o("WavLMForAudioFrameClassification"),Vrr=o(" (WavLM model)"),Xrr=l(),nF=a("p"),zrr=o("The model is set in evaluation mode by default using "),e4e=a("code"),Wrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o4e=a("code"),Hrr=o("model.train()"),Urr=l(),F(sF.$$.fragment),sDe=l(),ud=a("h2"),lF=a("a"),r4e=a("span"),F(qy.$$.fragment),Jrr=l(),t4e=a("span"),Yrr=o("AutoModelForCTC"),lDe=l(),Vo=a("div"),F(jy.$$.fragment),Krr=l(),bd=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Gz=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),Oz=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),Dy=a("p"),ntr=o("This class cannot be instantiated directly using "),a4e=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),vt=a("div"),F(Gy.$$.fragment),dtr=l(),n4e=a("p"),ctr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ftr=l(),vd=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),ptr=o("from_pretrained()"),_tr=o(" to load the model weights."),utr=l(),F(iF.$$.fragment),btr=l(),mo=a("div"),F(Oy.$$.fragment),vtr=l(),l4e=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ttr=l(),Va=a("p"),Mtr=o("The model class to instantiate is selected based on the "),i4e=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),Ltr=o("pretrained_model_name_or_path"),ytr=o(":"),xtr=l(),Le=a("ul"),dF=a("li"),f4e=a("strong"),$tr=o("data2vec-audio"),ktr=o(" \u2014 "),Xz=a("a"),Str=o("Data2VecAudioForCTC"),Rtr=o(" (Data2VecAudio model)"),Ptr=l(),cF=a("li"),m4e=a("strong"),Btr=o("hubert"),Itr=o(" \u2014 "),zz=a("a"),Ntr=o("HubertForCTC"),qtr=o(" (Hubert model)"),jtr=l(),fF=a("li"),g4e=a("strong"),Dtr=o("mctct"),Gtr=o(" \u2014 "),Wz=a("a"),Otr=o("MCTCTForCTC"),Vtr=o(" (M-CTC-T model)"),Xtr=l(),mF=a("li"),h4e=a("strong"),ztr=o("sew"),Wtr=o(" \u2014 "),Qz=a("a"),Qtr=o("SEWForCTC"),Htr=o(" (SEW model)"),Utr=l(),gF=a("li"),p4e=a("strong"),Jtr=o("sew-d"),Ytr=o(" \u2014 "),Hz=a("a"),Ktr=o("SEWDForCTC"),Ztr=o(" (SEW-D model)"),ear=l(),hF=a("li"),_4e=a("strong"),oar=o("unispeech"),rar=o(" \u2014 "),Uz=a("a"),tar=o("UniSpeechForCTC"),aar=o(" (UniSpeech model)"),nar=l(),pF=a("li"),u4e=a("strong"),sar=o("unispeech-sat"),lar=o(" \u2014 "),Jz=a("a"),iar=o("UniSpeechSatForCTC"),dar=o(" (UniSpeechSat model)"),car=l(),_F=a("li"),b4e=a("strong"),far=o("wav2vec2"),mar=o(" \u2014 "),Yz=a("a"),gar=o("Wav2Vec2ForCTC"),har=o(" (Wav2Vec2 model)"),par=l(),uF=a("li"),v4e=a("strong"),_ar=o("wav2vec2-conformer"),uar=o(" \u2014 "),Kz=a("a"),bar=o("Wav2Vec2ConformerForCTC"),Far=o(" (Wav2Vec2-Conformer model)"),Tar=l(),bF=a("li"),F4e=a("strong"),Mar=o("wavlm"),Ear=o(" \u2014 "),Zz=a("a"),Car=o("WavLMForCTC"),war=o(" (WavLM model)"),Aar=l(),vF=a("p"),Lar=o("The model is set in evaluation mode by default using "),T4e=a("code"),yar=o("model.eval()"),xar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=a("code"),$ar=o("model.train()"),kar=l(),F(FF.$$.fragment),iDe=l(),Fd=a("h2"),TF=a("a"),E4e=a("span"),F(Vy.$$.fragment),Sar=l(),C4e=a("span"),Rar=o("AutoModelForSpeechSeq2Seq"),dDe=l(),Xo=a("div"),F(Xy.$$.fragment),Par=l(),Td=a("p"),Bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eW=a("a"),Iar=o("from_pretrained()"),Nar=o(" class method or the "),oW=a("a"),qar=o("from_config()"),jar=o(` class
method.`),Dar=l(),zy=a("p"),Gar=o("This class cannot be instantiated directly using "),w4e=a("code"),Oar=o("__init__()"),Var=o(" (throws an error)."),Xar=l(),Ft=a("div"),F(Wy.$$.fragment),zar=l(),A4e=a("p"),War=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Qar=l(),Md=a("p"),Har=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),Uar=o("not"),Jar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),Yar=o("from_pretrained()"),Kar=o(" to load the model weights."),Zar=l(),F(MF.$$.fragment),enr=l(),go=a("div"),F(Qy.$$.fragment),onr=l(),y4e=a("p"),rnr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tnr=l(),Xa=a("p"),anr=o("The model class to instantiate is selected based on the "),x4e=a("code"),nnr=o("model_type"),snr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(":"),fnr=l(),Hy=a("ul"),EF=a("li"),S4e=a("strong"),mnr=o("speech-encoder-decoder"),gnr=o(" \u2014 "),tW=a("a"),hnr=o("SpeechEncoderDecoderModel"),pnr=o(" (Speech Encoder decoder model)"),_nr=l(),CF=a("li"),R4e=a("strong"),unr=o("speech_to_text"),bnr=o(" \u2014 "),aW=a("a"),vnr=o("Speech2TextForConditionalGeneration"),Fnr=o(" (Speech2Text model)"),Tnr=l(),wF=a("p"),Mnr=o("The model is set in evaluation mode by default using "),P4e=a("code"),Enr=o("model.eval()"),Cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B4e=a("code"),wnr=o("model.train()"),Anr=l(),F(AF.$$.fragment),cDe=l(),Ed=a("h2"),LF=a("a"),I4e=a("span"),F(Uy.$$.fragment),Lnr=l(),N4e=a("span"),ynr=o("AutoModelForAudioXVector"),fDe=l(),zo=a("div"),F(Jy.$$.fragment),xnr=l(),Cd=a("p"),$nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nW=a("a"),knr=o("from_pretrained()"),Snr=o(" class method or the "),sW=a("a"),Rnr=o("from_config()"),Pnr=o(` class
method.`),Bnr=l(),Yy=a("p"),Inr=o("This class cannot be instantiated directly using "),q4e=a("code"),Nnr=o("__init__()"),qnr=o(" (throws an error)."),jnr=l(),Tt=a("div"),F(Ky.$$.fragment),Dnr=l(),j4e=a("p"),Gnr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Onr=l(),wd=a("p"),Vnr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),Xnr=o("not"),znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Wnr=o("from_pretrained()"),Qnr=o(" to load the model weights."),Hnr=l(),F(yF.$$.fragment),Unr=l(),ho=a("div"),F(Zy.$$.fragment),Jnr=l(),G4e=a("p"),Ynr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Knr=l(),za=a("p"),Znr=o("The model class to instantiate is selected based on the "),O4e=a("code"),esr=o("model_type"),osr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(":"),ssr=l(),Zr=a("ul"),xF=a("li"),z4e=a("strong"),lsr=o("data2vec-audio"),isr=o(" \u2014 "),iW=a("a"),dsr=o("Data2VecAudioForXVector"),csr=o(" (Data2VecAudio model)"),fsr=l(),$F=a("li"),W4e=a("strong"),msr=o("unispeech-sat"),gsr=o(" \u2014 "),dW=a("a"),hsr=o("UniSpeechSatForXVector"),psr=o(" (UniSpeechSat model)"),_sr=l(),kF=a("li"),Q4e=a("strong"),usr=o("wav2vec2"),bsr=o(" \u2014 "),cW=a("a"),vsr=o("Wav2Vec2ForXVector"),Fsr=o(" (Wav2Vec2 model)"),Tsr=l(),SF=a("li"),H4e=a("strong"),Msr=o("wav2vec2-conformer"),Esr=o(" \u2014 "),fW=a("a"),Csr=o("Wav2Vec2ConformerForXVector"),wsr=o(" (Wav2Vec2-Conformer model)"),Asr=l(),RF=a("li"),U4e=a("strong"),Lsr=o("wavlm"),ysr=o(" \u2014 "),mW=a("a"),xsr=o("WavLMForXVector"),$sr=o(" (WavLM model)"),ksr=l(),PF=a("p"),Ssr=o("The model is set in evaluation mode by default using "),J4e=a("code"),Rsr=o("model.eval()"),Psr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=a("code"),Bsr=o("model.train()"),Isr=l(),F(BF.$$.fragment),mDe=l(),Ad=a("h2"),IF=a("a"),K4e=a("span"),F(e8.$$.fragment),Nsr=l(),Z4e=a("span"),qsr=o("AutoModelForMaskedImageModeling"),gDe=l(),Wo=a("div"),F(o8.$$.fragment),jsr=l(),Ld=a("p"),Dsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gW=a("a"),Gsr=o("from_pretrained()"),Osr=o(" class method or the "),hW=a("a"),Vsr=o("from_config()"),Xsr=o(` class
method.`),zsr=l(),r8=a("p"),Wsr=o("This class cannot be instantiated directly using "),e1e=a("code"),Qsr=o("__init__()"),Hsr=o(" (throws an error)."),Usr=l(),Mt=a("div"),F(t8.$$.fragment),Jsr=l(),o1e=a("p"),Ysr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ksr=l(),yd=a("p"),Zsr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),elr=o("not"),olr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),rlr=o("from_pretrained()"),tlr=o(" to load the model weights."),alr=l(),F(NF.$$.fragment),nlr=l(),po=a("div"),F(a8.$$.fragment),slr=l(),t1e=a("p"),llr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ilr=l(),Wa=a("p"),dlr=o("The model class to instantiate is selected based on the "),a1e=a("code"),clr=o("model_type"),flr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),mlr=o("pretrained_model_name_or_path"),glr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(":"),_lr=l(),xd=a("ul"),qF=a("li"),l1e=a("strong"),ulr=o("deit"),blr=o(" \u2014 "),_W=a("a"),vlr=o("DeiTForMaskedImageModeling"),Flr=o(" (DeiT model)"),Tlr=l(),jF=a("li"),i1e=a("strong"),Mlr=o("swin"),Elr=o(" \u2014 "),uW=a("a"),Clr=o("SwinForMaskedImageModeling"),wlr=o(" (Swin Transformer model)"),Alr=l(),DF=a("li"),d1e=a("strong"),Llr=o("vit"),ylr=o(" \u2014 "),bW=a("a"),xlr=o("ViTForMaskedImageModeling"),$lr=o(" (ViT model)"),klr=l(),GF=a("p"),Slr=o("The model is set in evaluation mode by default using "),c1e=a("code"),Rlr=o("model.eval()"),Plr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=a("code"),Blr=o("model.train()"),Ilr=l(),F(OF.$$.fragment),hDe=l(),$d=a("h2"),VF=a("a"),m1e=a("span"),F(n8.$$.fragment),Nlr=l(),g1e=a("span"),qlr=o("AutoModelForObjectDetection"),pDe=l(),Qo=a("div"),F(s8.$$.fragment),jlr=l(),kd=a("p"),Dlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),vW=a("a"),Glr=o("from_pretrained()"),Olr=o(" class method or the "),FW=a("a"),Vlr=o("from_config()"),Xlr=o(` class
method.`),zlr=l(),l8=a("p"),Wlr=o("This class cannot be instantiated directly using "),h1e=a("code"),Qlr=o("__init__()"),Hlr=o(" (throws an error)."),Ulr=l(),Et=a("div"),F(i8.$$.fragment),Jlr=l(),p1e=a("p"),Ylr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Klr=l(),Sd=a("p"),Zlr=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),eir=o("not"),oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),rir=o("from_pretrained()"),tir=o(" to load the model weights."),air=l(),F(XF.$$.fragment),nir=l(),_o=a("div"),F(d8.$$.fragment),sir=l(),u1e=a("p"),lir=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),iir=l(),Qa=a("p"),dir=o("The model class to instantiate is selected based on the "),b1e=a("code"),cir=o("model_type"),fir=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),mir=o("pretrained_model_name_or_path"),gir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),hir=o("pretrained_model_name_or_path"),pir=o(":"),_ir=l(),c8=a("ul"),zF=a("li"),T1e=a("strong"),uir=o("detr"),bir=o(" \u2014 "),MW=a("a"),vir=o("DetrForObjectDetection"),Fir=o(" (DETR model)"),Tir=l(),WF=a("li"),M1e=a("strong"),Mir=o("yolos"),Eir=o(" \u2014 "),EW=a("a"),Cir=o("YolosForObjectDetection"),wir=o(" (YOLOS model)"),Air=l(),QF=a("p"),Lir=o("The model is set in evaluation mode by default using "),E1e=a("code"),yir=o("model.eval()"),xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),$ir=o("model.train()"),kir=l(),F(HF.$$.fragment),_De=l(),Rd=a("h2"),UF=a("a"),w1e=a("span"),F(f8.$$.fragment),Sir=l(),A1e=a("span"),Rir=o("AutoModelForImageSegmentation"),uDe=l(),Ho=a("div"),F(m8.$$.fragment),Pir=l(),Pd=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),CW=a("a"),Iir=o("from_pretrained()"),Nir=o(" class method or the "),wW=a("a"),qir=o("from_config()"),jir=o(` class
method.`),Dir=l(),g8=a("p"),Gir=o("This class cannot be instantiated directly using "),L1e=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Ct=a("div"),F(h8.$$.fragment),zir=l(),y1e=a("p"),Wir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qir=l(),Bd=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(JF.$$.fragment),edr=l(),uo=a("div"),F(p8.$$.fragment),odr=l(),$1e=a("p"),rdr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tdr=l(),Ha=a("p"),adr=o("The model class to instantiate is selected based on the "),k1e=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),P1e=a("ul"),YF=a("li"),B1e=a("strong"),mdr=o("detr"),gdr=o(" \u2014 "),LW=a("a"),hdr=o("DetrForSegmentation"),pdr=o(" (DETR model)"),_dr=l(),KF=a("p"),udr=o("The model is set in evaluation mode by default using "),I1e=a("code"),bdr=o("model.eval()"),vdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=a("code"),Fdr=o("model.train()"),Tdr=l(),F(ZF.$$.fragment),bDe=l(),Id=a("h2"),eT=a("a"),q1e=a("span"),F(_8.$$.fragment),Mdr=l(),j1e=a("span"),Edr=o("AutoModelForSemanticSegmentation"),vDe=l(),Uo=a("div"),F(u8.$$.fragment),Cdr=l(),Nd=a("p"),wdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yW=a("a"),Adr=o("from_pretrained()"),Ldr=o(" class method or the "),xW=a("a"),ydr=o("from_config()"),xdr=o(` class
method.`),$dr=l(),b8=a("p"),kdr=o("This class cannot be instantiated directly using "),D1e=a("code"),Sdr=o("__init__()"),Rdr=o(" (throws an error)."),Pdr=l(),wt=a("div"),F(v8.$$.fragment),Bdr=l(),G1e=a("p"),Idr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ndr=l(),qd=a("p"),qdr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),jdr=o("not"),Ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Gdr=o("from_pretrained()"),Odr=o(" to load the model weights."),Vdr=l(),F(oT.$$.fragment),Xdr=l(),bo=a("div"),F(F8.$$.fragment),zdr=l(),V1e=a("p"),Wdr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qdr=l(),Ua=a("p"),Hdr=o("The model class to instantiate is selected based on the "),X1e=a("code"),Udr=o("model_type"),Jdr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),Zdr=o("pretrained_model_name_or_path"),ecr=o(":"),ocr=l(),Ja=a("ul"),rT=a("li"),Q1e=a("strong"),rcr=o("beit"),tcr=o(" \u2014 "),kW=a("a"),acr=o("BeitForSemanticSegmentation"),ncr=o(" (BEiT model)"),scr=l(),tT=a("li"),H1e=a("strong"),lcr=o("data2vec-vision"),icr=o(" \u2014 "),SW=a("a"),dcr=o("Data2VecVisionForSemanticSegmentation"),ccr=o(" (Data2VecVision model)"),fcr=l(),aT=a("li"),U1e=a("strong"),mcr=o("dpt"),gcr=o(" \u2014 "),RW=a("a"),hcr=o("DPTForSemanticSegmentation"),pcr=o(" (DPT model)"),_cr=l(),nT=a("li"),J1e=a("strong"),ucr=o("segformer"),bcr=o(" \u2014 "),PW=a("a"),vcr=o("SegformerForSemanticSegmentation"),Fcr=o(" (SegFormer model)"),Tcr=l(),sT=a("p"),Mcr=o("The model is set in evaluation mode by default using "),Y1e=a("code"),Ecr=o("model.eval()"),Ccr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),wcr=o("model.train()"),Acr=l(),F(lT.$$.fragment),FDe=l(),jd=a("h2"),iT=a("a"),Z1e=a("span"),F(T8.$$.fragment),Lcr=l(),e7e=a("span"),ycr=o("AutoModelForInstanceSegmentation"),TDe=l(),Jo=a("div"),F(M8.$$.fragment),xcr=l(),Dd=a("p"),$cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BW=a("a"),kcr=o("from_pretrained()"),Scr=o(" class method or the "),IW=a("a"),Rcr=o("from_config()"),Pcr=o(` class
method.`),Bcr=l(),E8=a("p"),Icr=o("This class cannot be instantiated directly using "),o7e=a("code"),Ncr=o("__init__()"),qcr=o(" (throws an error)."),jcr=l(),At=a("div"),F(C8.$$.fragment),Dcr=l(),r7e=a("p"),Gcr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ocr=l(),Gd=a("p"),Vcr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),Xcr=o("not"),zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),Wcr=o("from_pretrained()"),Qcr=o(" to load the model weights."),Hcr=l(),F(dT.$$.fragment),Ucr=l(),vo=a("div"),F(w8.$$.fragment),Jcr=l(),a7e=a("p"),Ycr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Kcr=l(),Ya=a("p"),Zcr=o("The model class to instantiate is selected based on the "),n7e=a("code"),efr=o("model_type"),ofr=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),rfr=o("pretrained_model_name_or_path"),tfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),afr=o("pretrained_model_name_or_path"),nfr=o(":"),sfr=l(),i7e=a("ul"),cT=a("li"),d7e=a("strong"),lfr=o("maskformer"),ifr=o(" \u2014 "),qW=a("a"),dfr=o("MaskFormerForInstanceSegmentation"),cfr=o(" (MaskFormer model)"),ffr=l(),fT=a("p"),mfr=o("The model is set in evaluation mode by default using "),c7e=a("code"),gfr=o("model.eval()"),hfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f7e=a("code"),pfr=o("model.train()"),_fr=l(),F(mT.$$.fragment),MDe=l(),Od=a("h2"),gT=a("a"),m7e=a("span"),F(A8.$$.fragment),ufr=l(),g7e=a("span"),bfr=o("TFAutoModel"),EDe=l(),Yo=a("div"),F(L8.$$.fragment),vfr=l(),Vd=a("p"),Ffr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jW=a("a"),Tfr=o("from_pretrained()"),Mfr=o(" class method or the "),DW=a("a"),Efr=o("from_config()"),Cfr=o(` class
method.`),wfr=l(),y8=a("p"),Afr=o("This class cannot be instantiated directly using "),h7e=a("code"),Lfr=o("__init__()"),yfr=o(" (throws an error)."),xfr=l(),Lt=a("div"),F(x8.$$.fragment),$fr=l(),p7e=a("p"),kfr=o("Instantiates one of the base model classes of the library from a configuration."),Sfr=l(),Xd=a("p"),Rfr=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),Pfr=o("not"),Bfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),Ifr=o("from_pretrained()"),Nfr=o(" to load the model weights."),qfr=l(),F(hT.$$.fragment),jfr=l(),wr=a("div"),F($8.$$.fragment),Dfr=l(),u7e=a("p"),Gfr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ofr=l(),Ka=a("p"),Vfr=o("The model class to instantiate is selected based on the "),b7e=a("code"),Xfr=o("model_type"),zfr=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),Wfr=o("pretrained_model_name_or_path"),Qfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(":"),Jfr=l(),q=a("ul"),pT=a("li"),T7e=a("strong"),Yfr=o("albert"),Kfr=o(" \u2014 "),OW=a("a"),Zfr=o("TFAlbertModel"),emr=o(" (ALBERT model)"),omr=l(),_T=a("li"),M7e=a("strong"),rmr=o("bart"),tmr=o(" \u2014 "),VW=a("a"),amr=o("TFBartModel"),nmr=o(" (BART model)"),smr=l(),uT=a("li"),E7e=a("strong"),lmr=o("bert"),imr=o(" \u2014 "),XW=a("a"),dmr=o("TFBertModel"),cmr=o(" (BERT model)"),fmr=l(),bT=a("li"),C7e=a("strong"),mmr=o("blenderbot"),gmr=o(" \u2014 "),zW=a("a"),hmr=o("TFBlenderbotModel"),pmr=o(" (Blenderbot model)"),_mr=l(),vT=a("li"),w7e=a("strong"),umr=o("blenderbot-small"),bmr=o(" \u2014 "),WW=a("a"),vmr=o("TFBlenderbotSmallModel"),Fmr=o(" (BlenderbotSmall model)"),Tmr=l(),FT=a("li"),A7e=a("strong"),Mmr=o("camembert"),Emr=o(" \u2014 "),QW=a("a"),Cmr=o("TFCamembertModel"),wmr=o(" (CamemBERT model)"),Amr=l(),TT=a("li"),L7e=a("strong"),Lmr=o("clip"),ymr=o(" \u2014 "),HW=a("a"),xmr=o("TFCLIPModel"),$mr=o(" (CLIP model)"),kmr=l(),MT=a("li"),y7e=a("strong"),Smr=o("convbert"),Rmr=o(" \u2014 "),UW=a("a"),Pmr=o("TFConvBertModel"),Bmr=o(" (ConvBERT model)"),Imr=l(),ET=a("li"),x7e=a("strong"),Nmr=o("convnext"),qmr=o(" \u2014 "),JW=a("a"),jmr=o("TFConvNextModel"),Dmr=o(" (ConvNeXT model)"),Gmr=l(),CT=a("li"),$7e=a("strong"),Omr=o("ctrl"),Vmr=o(" \u2014 "),YW=a("a"),Xmr=o("TFCTRLModel"),zmr=o(" (CTRL model)"),Wmr=l(),wT=a("li"),k7e=a("strong"),Qmr=o("data2vec-vision"),Hmr=o(" \u2014 "),KW=a("a"),Umr=o("TFData2VecVisionModel"),Jmr=o(" (Data2VecVision model)"),Ymr=l(),AT=a("li"),S7e=a("strong"),Kmr=o("deberta"),Zmr=o(" \u2014 "),ZW=a("a"),egr=o("TFDebertaModel"),ogr=o(" (DeBERTa model)"),rgr=l(),LT=a("li"),R7e=a("strong"),tgr=o("deberta-v2"),agr=o(" \u2014 "),eQ=a("a"),ngr=o("TFDebertaV2Model"),sgr=o(" (DeBERTa-v2 model)"),lgr=l(),yT=a("li"),P7e=a("strong"),igr=o("distilbert"),dgr=o(" \u2014 "),oQ=a("a"),cgr=o("TFDistilBertModel"),fgr=o(" (DistilBERT model)"),mgr=l(),xT=a("li"),B7e=a("strong"),ggr=o("dpr"),hgr=o(" \u2014 "),rQ=a("a"),pgr=o("TFDPRQuestionEncoder"),_gr=o(" (DPR model)"),ugr=l(),$T=a("li"),I7e=a("strong"),bgr=o("electra"),vgr=o(" \u2014 "),tQ=a("a"),Fgr=o("TFElectraModel"),Tgr=o(" (ELECTRA model)"),Mgr=l(),kT=a("li"),N7e=a("strong"),Egr=o("flaubert"),Cgr=o(" \u2014 "),aQ=a("a"),wgr=o("TFFlaubertModel"),Agr=o(" (FlauBERT model)"),Lgr=l(),Ns=a("li"),q7e=a("strong"),ygr=o("funnel"),xgr=o(" \u2014 "),nQ=a("a"),$gr=o("TFFunnelModel"),kgr=o(" or "),sQ=a("a"),Sgr=o("TFFunnelBaseModel"),Rgr=o(" (Funnel Transformer model)"),Pgr=l(),ST=a("li"),j7e=a("strong"),Bgr=o("gpt2"),Igr=o(" \u2014 "),lQ=a("a"),Ngr=o("TFGPT2Model"),qgr=o(" (OpenAI GPT-2 model)"),jgr=l(),RT=a("li"),D7e=a("strong"),Dgr=o("gptj"),Ggr=o(" \u2014 "),iQ=a("a"),Ogr=o("TFGPTJModel"),Vgr=o(" (GPT-J model)"),Xgr=l(),PT=a("li"),G7e=a("strong"),zgr=o("hubert"),Wgr=o(" \u2014 "),dQ=a("a"),Qgr=o("TFHubertModel"),Hgr=o(" (Hubert model)"),Ugr=l(),BT=a("li"),O7e=a("strong"),Jgr=o("layoutlm"),Ygr=o(" \u2014 "),cQ=a("a"),Kgr=o("TFLayoutLMModel"),Zgr=o(" (LayoutLM model)"),ehr=l(),IT=a("li"),V7e=a("strong"),ohr=o("led"),rhr=o(" \u2014 "),fQ=a("a"),thr=o("TFLEDModel"),ahr=o(" (LED model)"),nhr=l(),NT=a("li"),X7e=a("strong"),shr=o("longformer"),lhr=o(" \u2014 "),mQ=a("a"),ihr=o("TFLongformerModel"),dhr=o(" (Longformer model)"),chr=l(),qT=a("li"),z7e=a("strong"),fhr=o("lxmert"),mhr=o(" \u2014 "),gQ=a("a"),ghr=o("TFLxmertModel"),hhr=o(" (LXMERT model)"),phr=l(),jT=a("li"),W7e=a("strong"),_hr=o("marian"),uhr=o(" \u2014 "),hQ=a("a"),bhr=o("TFMarianModel"),vhr=o(" (Marian model)"),Fhr=l(),DT=a("li"),Q7e=a("strong"),Thr=o("mbart"),Mhr=o(" \u2014 "),pQ=a("a"),Ehr=o("TFMBartModel"),Chr=o(" (mBART model)"),whr=l(),GT=a("li"),H7e=a("strong"),Ahr=o("mobilebert"),Lhr=o(" \u2014 "),_Q=a("a"),yhr=o("TFMobileBertModel"),xhr=o(" (MobileBERT model)"),$hr=l(),OT=a("li"),U7e=a("strong"),khr=o("mpnet"),Shr=o(" \u2014 "),uQ=a("a"),Rhr=o("TFMPNetModel"),Phr=o(" (MPNet model)"),Bhr=l(),VT=a("li"),J7e=a("strong"),Ihr=o("mt5"),Nhr=o(" \u2014 "),bQ=a("a"),qhr=o("TFMT5Model"),jhr=o(" (MT5 model)"),Dhr=l(),XT=a("li"),Y7e=a("strong"),Ghr=o("openai-gpt"),Ohr=o(" \u2014 "),vQ=a("a"),Vhr=o("TFOpenAIGPTModel"),Xhr=o(" (OpenAI GPT model)"),zhr=l(),zT=a("li"),K7e=a("strong"),Whr=o("opt"),Qhr=o(" \u2014 "),FQ=a("a"),Hhr=o("TFOPTModel"),Uhr=o(" (OPT model)"),Jhr=l(),WT=a("li"),Z7e=a("strong"),Yhr=o("pegasus"),Khr=o(" \u2014 "),TQ=a("a"),Zhr=o("TFPegasusModel"),epr=o(" (Pegasus model)"),opr=l(),QT=a("li"),ebe=a("strong"),rpr=o("rembert"),tpr=o(" \u2014 "),MQ=a("a"),apr=o("TFRemBertModel"),npr=o(" (RemBERT model)"),spr=l(),HT=a("li"),obe=a("strong"),lpr=o("roberta"),ipr=o(" \u2014 "),EQ=a("a"),dpr=o("TFRobertaModel"),cpr=o(" (RoBERTa model)"),fpr=l(),UT=a("li"),rbe=a("strong"),mpr=o("roformer"),gpr=o(" \u2014 "),CQ=a("a"),hpr=o("TFRoFormerModel"),ppr=o(" (RoFormer model)"),_pr=l(),JT=a("li"),tbe=a("strong"),upr=o("speech_to_text"),bpr=o(" \u2014 "),wQ=a("a"),vpr=o("TFSpeech2TextModel"),Fpr=o(" (Speech2Text model)"),Tpr=l(),YT=a("li"),abe=a("strong"),Mpr=o("swin"),Epr=o(" \u2014 "),AQ=a("a"),Cpr=o("TFSwinModel"),wpr=o(" (Swin Transformer model)"),Apr=l(),KT=a("li"),nbe=a("strong"),Lpr=o("t5"),ypr=o(" \u2014 "),LQ=a("a"),xpr=o("TFT5Model"),$pr=o(" (T5 model)"),kpr=l(),ZT=a("li"),sbe=a("strong"),Spr=o("tapas"),Rpr=o(" \u2014 "),yQ=a("a"),Ppr=o("TFTapasModel"),Bpr=o(" (TAPAS model)"),Ipr=l(),eM=a("li"),lbe=a("strong"),Npr=o("transfo-xl"),qpr=o(" \u2014 "),xQ=a("a"),jpr=o("TFTransfoXLModel"),Dpr=o(" (Transformer-XL model)"),Gpr=l(),oM=a("li"),ibe=a("strong"),Opr=o("vit"),Vpr=o(" \u2014 "),$Q=a("a"),Xpr=o("TFViTModel"),zpr=o(" (ViT model)"),Wpr=l(),rM=a("li"),dbe=a("strong"),Qpr=o("vit_mae"),Hpr=o(" \u2014 "),kQ=a("a"),Upr=o("TFViTMAEModel"),Jpr=o(" (ViTMAE model)"),Ypr=l(),tM=a("li"),cbe=a("strong"),Kpr=o("wav2vec2"),Zpr=o(" \u2014 "),SQ=a("a"),e_r=o("TFWav2Vec2Model"),o_r=o(" (Wav2Vec2 model)"),r_r=l(),aM=a("li"),fbe=a("strong"),t_r=o("xlm"),a_r=o(" \u2014 "),RQ=a("a"),n_r=o("TFXLMModel"),s_r=o(" (XLM model)"),l_r=l(),nM=a("li"),mbe=a("strong"),i_r=o("xlm-roberta"),d_r=o(" \u2014 "),PQ=a("a"),c_r=o("TFXLMRobertaModel"),f_r=o(" (XLM-RoBERTa model)"),m_r=l(),sM=a("li"),gbe=a("strong"),g_r=o("xlnet"),h_r=o(" \u2014 "),BQ=a("a"),p_r=o("TFXLNetModel"),__r=o(" (XLNet model)"),u_r=l(),F(lM.$$.fragment),CDe=l(),zd=a("h2"),iM=a("a"),hbe=a("span"),F(k8.$$.fragment),b_r=l(),pbe=a("span"),v_r=o("TFAutoModelForPreTraining"),wDe=l(),Ko=a("div"),F(S8.$$.fragment),F_r=l(),Wd=a("p"),T_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IQ=a("a"),M_r=o("from_pretrained()"),E_r=o(" class method or the "),NQ=a("a"),C_r=o("from_config()"),w_r=o(` class
method.`),A_r=l(),R8=a("p"),L_r=o("This class cannot be instantiated directly using "),_be=a("code"),y_r=o("__init__()"),x_r=o(" (throws an error)."),$_r=l(),yt=a("div"),F(P8.$$.fragment),k_r=l(),ube=a("p"),S_r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R_r=l(),Qd=a("p"),P_r=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),B_r=o("not"),I_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),N_r=o("from_pretrained()"),q_r=o(" to load the model weights."),j_r=l(),F(dM.$$.fragment),D_r=l(),Ar=a("div"),F(B8.$$.fragment),G_r=l(),vbe=a("p"),O_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),V_r=l(),Za=a("p"),X_r=o("The model class to instantiate is selected based on the "),Fbe=a("code"),z_r=o("model_type"),W_r=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),Q_r=o("pretrained_model_name_or_path"),H_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(":"),Y_r=l(),se=a("ul"),cM=a("li"),Ebe=a("strong"),K_r=o("albert"),Z_r=o(" \u2014 "),jQ=a("a"),eur=o("TFAlbertForPreTraining"),our=o(" (ALBERT model)"),rur=l(),fM=a("li"),Cbe=a("strong"),tur=o("bart"),aur=o(" \u2014 "),DQ=a("a"),nur=o("TFBartForConditionalGeneration"),sur=o(" (BART model)"),lur=l(),mM=a("li"),wbe=a("strong"),iur=o("bert"),dur=o(" \u2014 "),GQ=a("a"),cur=o("TFBertForPreTraining"),fur=o(" (BERT model)"),mur=l(),gM=a("li"),Abe=a("strong"),gur=o("camembert"),hur=o(" \u2014 "),OQ=a("a"),pur=o("TFCamembertForMaskedLM"),_ur=o(" (CamemBERT model)"),uur=l(),hM=a("li"),Lbe=a("strong"),bur=o("ctrl"),vur=o(" \u2014 "),VQ=a("a"),Fur=o("TFCTRLLMHeadModel"),Tur=o(" (CTRL model)"),Mur=l(),pM=a("li"),ybe=a("strong"),Eur=o("distilbert"),Cur=o(" \u2014 "),XQ=a("a"),wur=o("TFDistilBertForMaskedLM"),Aur=o(" (DistilBERT model)"),Lur=l(),_M=a("li"),xbe=a("strong"),yur=o("electra"),xur=o(" \u2014 "),zQ=a("a"),$ur=o("TFElectraForPreTraining"),kur=o(" (ELECTRA model)"),Sur=l(),uM=a("li"),$be=a("strong"),Rur=o("flaubert"),Pur=o(" \u2014 "),WQ=a("a"),Bur=o("TFFlaubertWithLMHeadModel"),Iur=o(" (FlauBERT model)"),Nur=l(),bM=a("li"),kbe=a("strong"),qur=o("funnel"),jur=o(" \u2014 "),QQ=a("a"),Dur=o("TFFunnelForPreTraining"),Gur=o(" (Funnel Transformer model)"),Our=l(),vM=a("li"),Sbe=a("strong"),Vur=o("gpt2"),Xur=o(" \u2014 "),HQ=a("a"),zur=o("TFGPT2LMHeadModel"),Wur=o(" (OpenAI GPT-2 model)"),Qur=l(),FM=a("li"),Rbe=a("strong"),Hur=o("layoutlm"),Uur=o(" \u2014 "),UQ=a("a"),Jur=o("TFLayoutLMForMaskedLM"),Yur=o(" (LayoutLM model)"),Kur=l(),TM=a("li"),Pbe=a("strong"),Zur=o("lxmert"),e4r=o(" \u2014 "),JQ=a("a"),o4r=o("TFLxmertForPreTraining"),r4r=o(" (LXMERT model)"),t4r=l(),MM=a("li"),Bbe=a("strong"),a4r=o("mobilebert"),n4r=o(" \u2014 "),YQ=a("a"),s4r=o("TFMobileBertForPreTraining"),l4r=o(" (MobileBERT model)"),i4r=l(),EM=a("li"),Ibe=a("strong"),d4r=o("mpnet"),c4r=o(" \u2014 "),KQ=a("a"),f4r=o("TFMPNetForMaskedLM"),m4r=o(" (MPNet model)"),g4r=l(),CM=a("li"),Nbe=a("strong"),h4r=o("openai-gpt"),p4r=o(" \u2014 "),ZQ=a("a"),_4r=o("TFOpenAIGPTLMHeadModel"),u4r=o(" (OpenAI GPT model)"),b4r=l(),wM=a("li"),qbe=a("strong"),v4r=o("roberta"),F4r=o(" \u2014 "),eH=a("a"),T4r=o("TFRobertaForMaskedLM"),M4r=o(" (RoBERTa model)"),E4r=l(),AM=a("li"),jbe=a("strong"),C4r=o("t5"),w4r=o(" \u2014 "),oH=a("a"),A4r=o("TFT5ForConditionalGeneration"),L4r=o(" (T5 model)"),y4r=l(),LM=a("li"),Dbe=a("strong"),x4r=o("tapas"),$4r=o(" \u2014 "),rH=a("a"),k4r=o("TFTapasForMaskedLM"),S4r=o(" (TAPAS model)"),R4r=l(),yM=a("li"),Gbe=a("strong"),P4r=o("transfo-xl"),B4r=o(" \u2014 "),tH=a("a"),I4r=o("TFTransfoXLLMHeadModel"),N4r=o(" (Transformer-XL model)"),q4r=l(),xM=a("li"),Obe=a("strong"),j4r=o("vit_mae"),D4r=o(" \u2014 "),aH=a("a"),G4r=o("TFViTMAEForPreTraining"),O4r=o(" (ViTMAE model)"),V4r=l(),$M=a("li"),Vbe=a("strong"),X4r=o("xlm"),z4r=o(" \u2014 "),nH=a("a"),W4r=o("TFXLMWithLMHeadModel"),Q4r=o(" (XLM model)"),H4r=l(),kM=a("li"),Xbe=a("strong"),U4r=o("xlm-roberta"),J4r=o(" \u2014 "),sH=a("a"),Y4r=o("TFXLMRobertaForMaskedLM"),K4r=o(" (XLM-RoBERTa model)"),Z4r=l(),SM=a("li"),zbe=a("strong"),e1r=o("xlnet"),o1r=o(" \u2014 "),lH=a("a"),r1r=o("TFXLNetLMHeadModel"),t1r=o(" (XLNet model)"),a1r=l(),F(RM.$$.fragment),ADe=l(),Hd=a("h2"),PM=a("a"),Wbe=a("span"),F(I8.$$.fragment),n1r=l(),Qbe=a("span"),s1r=o("TFAutoModelForCausalLM"),LDe=l(),Zo=a("div"),F(N8.$$.fragment),l1r=l(),Ud=a("p"),i1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iH=a("a"),d1r=o("from_pretrained()"),c1r=o(" class method or the "),dH=a("a"),f1r=o("from_config()"),m1r=o(` class
method.`),g1r=l(),q8=a("p"),h1r=o("This class cannot be instantiated directly using "),Hbe=a("code"),p1r=o("__init__()"),_1r=o(" (throws an error)."),u1r=l(),xt=a("div"),F(j8.$$.fragment),b1r=l(),Ube=a("p"),v1r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),F1r=l(),Jd=a("p"),T1r=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),M1r=o("not"),E1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),C1r=o("from_pretrained()"),w1r=o(" to load the model weights."),A1r=l(),F(BM.$$.fragment),L1r=l(),Lr=a("div"),F(D8.$$.fragment),y1r=l(),Ybe=a("p"),x1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$1r=l(),en=a("p"),k1r=o("The model class to instantiate is selected based on the "),Kbe=a("code"),S1r=o("model_type"),R1r=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),P1r=o("pretrained_model_name_or_path"),B1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),I1r=o("pretrained_model_name_or_path"),N1r=o(":"),q1r=l(),Me=a("ul"),IM=a("li"),o2e=a("strong"),j1r=o("bert"),D1r=o(" \u2014 "),fH=a("a"),G1r=o("TFBertLMHeadModel"),O1r=o(" (BERT model)"),V1r=l(),NM=a("li"),r2e=a("strong"),X1r=o("camembert"),z1r=o(" \u2014 "),mH=a("a"),W1r=o("TFCamembertForCausalLM"),Q1r=o(" (CamemBERT model)"),H1r=l(),qM=a("li"),t2e=a("strong"),U1r=o("ctrl"),J1r=o(" \u2014 "),gH=a("a"),Y1r=o("TFCTRLLMHeadModel"),K1r=o(" (CTRL model)"),Z1r=l(),jM=a("li"),a2e=a("strong"),e7r=o("gpt2"),o7r=o(" \u2014 "),hH=a("a"),r7r=o("TFGPT2LMHeadModel"),t7r=o(" (OpenAI GPT-2 model)"),a7r=l(),DM=a("li"),n2e=a("strong"),n7r=o("gptj"),s7r=o(" \u2014 "),pH=a("a"),l7r=o("TFGPTJForCausalLM"),i7r=o(" (GPT-J model)"),d7r=l(),GM=a("li"),s2e=a("strong"),c7r=o("openai-gpt"),f7r=o(" \u2014 "),_H=a("a"),m7r=o("TFOpenAIGPTLMHeadModel"),g7r=o(" (OpenAI GPT model)"),h7r=l(),OM=a("li"),l2e=a("strong"),p7r=o("opt"),_7r=o(" \u2014 "),uH=a("a"),u7r=o("TFOPTForCausalLM"),b7r=o(" (OPT model)"),v7r=l(),VM=a("li"),i2e=a("strong"),F7r=o("rembert"),T7r=o(" \u2014 "),bH=a("a"),M7r=o("TFRemBertForCausalLM"),E7r=o(" (RemBERT model)"),C7r=l(),XM=a("li"),d2e=a("strong"),w7r=o("roberta"),A7r=o(" \u2014 "),vH=a("a"),L7r=o("TFRobertaForCausalLM"),y7r=o(" (RoBERTa model)"),x7r=l(),zM=a("li"),c2e=a("strong"),$7r=o("roformer"),k7r=o(" \u2014 "),FH=a("a"),S7r=o("TFRoFormerForCausalLM"),R7r=o(" (RoFormer model)"),P7r=l(),WM=a("li"),f2e=a("strong"),B7r=o("transfo-xl"),I7r=o(" \u2014 "),TH=a("a"),N7r=o("TFTransfoXLLMHeadModel"),q7r=o(" (Transformer-XL model)"),j7r=l(),QM=a("li"),m2e=a("strong"),D7r=o("xlm"),G7r=o(" \u2014 "),MH=a("a"),O7r=o("TFXLMWithLMHeadModel"),V7r=o(" (XLM model)"),X7r=l(),HM=a("li"),g2e=a("strong"),z7r=o("xlnet"),W7r=o(" \u2014 "),EH=a("a"),Q7r=o("TFXLNetLMHeadModel"),H7r=o(" (XLNet model)"),U7r=l(),F(UM.$$.fragment),yDe=l(),Yd=a("h2"),JM=a("a"),h2e=a("span"),F(G8.$$.fragment),J7r=l(),p2e=a("span"),Y7r=o("TFAutoModelForImageClassification"),xDe=l(),er=a("div"),F(O8.$$.fragment),K7r=l(),Kd=a("p"),Z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CH=a("a"),ebr=o("from_pretrained()"),obr=o(" class method or the "),wH=a("a"),rbr=o("from_config()"),tbr=o(` class
method.`),abr=l(),V8=a("p"),nbr=o("This class cannot be instantiated directly using "),_2e=a("code"),sbr=o("__init__()"),lbr=o(" (throws an error)."),ibr=l(),$t=a("div"),F(X8.$$.fragment),dbr=l(),u2e=a("p"),cbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fbr=l(),Zd=a("p"),mbr=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),gbr=o("not"),hbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),pbr=o("from_pretrained()"),_br=o(" to load the model weights."),ubr=l(),F(YM.$$.fragment),bbr=l(),yr=a("div"),F(z8.$$.fragment),vbr=l(),v2e=a("p"),Fbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tbr=l(),on=a("p"),Mbr=o("The model class to instantiate is selected based on the "),F2e=a("code"),Ebr=o("model_type"),Cbr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),Lbr=o("pretrained_model_name_or_path"),ybr=o(":"),xbr=l(),rn=a("ul"),KM=a("li"),E2e=a("strong"),$br=o("convnext"),kbr=o(" \u2014 "),LH=a("a"),Sbr=o("TFConvNextForImageClassification"),Rbr=o(" (ConvNeXT model)"),Pbr=l(),ZM=a("li"),C2e=a("strong"),Bbr=o("data2vec-vision"),Ibr=o(" \u2014 "),yH=a("a"),Nbr=o("TFData2VecVisionForImageClassification"),qbr=o(" (Data2VecVision model)"),jbr=l(),eE=a("li"),w2e=a("strong"),Dbr=o("swin"),Gbr=o(" \u2014 "),xH=a("a"),Obr=o("TFSwinForImageClassification"),Vbr=o(" (Swin Transformer model)"),Xbr=l(),oE=a("li"),A2e=a("strong"),zbr=o("vit"),Wbr=o(" \u2014 "),$H=a("a"),Qbr=o("TFViTForImageClassification"),Hbr=o(" (ViT model)"),Ubr=l(),F(rE.$$.fragment),$De=l(),ec=a("h2"),tE=a("a"),L2e=a("span"),F(W8.$$.fragment),Jbr=l(),y2e=a("span"),Ybr=o("TFAutoModelForMaskedLM"),kDe=l(),or=a("div"),F(Q8.$$.fragment),Kbr=l(),oc=a("p"),Zbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kH=a("a"),e2r=o("from_pretrained()"),o2r=o(" class method or the "),SH=a("a"),r2r=o("from_config()"),t2r=o(` class
method.`),a2r=l(),H8=a("p"),n2r=o("This class cannot be instantiated directly using "),x2e=a("code"),s2r=o("__init__()"),l2r=o(" (throws an error)."),i2r=l(),kt=a("div"),F(U8.$$.fragment),d2r=l(),$2e=a("p"),c2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f2r=l(),rc=a("p"),m2r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),g2r=o("not"),h2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),p2r=o("from_pretrained()"),_2r=o(" to load the model weights."),u2r=l(),F(aE.$$.fragment),b2r=l(),xr=a("div"),F(J8.$$.fragment),v2r=l(),S2e=a("p"),F2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T2r=l(),tn=a("p"),M2r=o("The model class to instantiate is selected based on the "),R2e=a("code"),E2r=o("model_type"),C2r=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),w2r=o("pretrained_model_name_or_path"),A2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),L2r=o("pretrained_model_name_or_path"),y2r=o(":"),x2r=l(),ie=a("ul"),nE=a("li"),I2e=a("strong"),$2r=o("albert"),k2r=o(" \u2014 "),PH=a("a"),S2r=o("TFAlbertForMaskedLM"),R2r=o(" (ALBERT model)"),P2r=l(),sE=a("li"),N2e=a("strong"),B2r=o("bert"),I2r=o(" \u2014 "),BH=a("a"),N2r=o("TFBertForMaskedLM"),q2r=o(" (BERT model)"),j2r=l(),lE=a("li"),q2e=a("strong"),D2r=o("camembert"),G2r=o(" \u2014 "),IH=a("a"),O2r=o("TFCamembertForMaskedLM"),V2r=o(" (CamemBERT model)"),X2r=l(),iE=a("li"),j2e=a("strong"),z2r=o("convbert"),W2r=o(" \u2014 "),NH=a("a"),Q2r=o("TFConvBertForMaskedLM"),H2r=o(" (ConvBERT model)"),U2r=l(),dE=a("li"),D2e=a("strong"),J2r=o("deberta"),Y2r=o(" \u2014 "),qH=a("a"),K2r=o("TFDebertaForMaskedLM"),Z2r=o(" (DeBERTa model)"),evr=l(),cE=a("li"),G2e=a("strong"),ovr=o("deberta-v2"),rvr=o(" \u2014 "),jH=a("a"),tvr=o("TFDebertaV2ForMaskedLM"),avr=o(" (DeBERTa-v2 model)"),nvr=l(),fE=a("li"),O2e=a("strong"),svr=o("distilbert"),lvr=o(" \u2014 "),DH=a("a"),ivr=o("TFDistilBertForMaskedLM"),dvr=o(" (DistilBERT model)"),cvr=l(),mE=a("li"),V2e=a("strong"),fvr=o("electra"),mvr=o(" \u2014 "),GH=a("a"),gvr=o("TFElectraForMaskedLM"),hvr=o(" (ELECTRA model)"),pvr=l(),gE=a("li"),X2e=a("strong"),_vr=o("flaubert"),uvr=o(" \u2014 "),OH=a("a"),bvr=o("TFFlaubertWithLMHeadModel"),vvr=o(" (FlauBERT model)"),Fvr=l(),hE=a("li"),z2e=a("strong"),Tvr=o("funnel"),Mvr=o(" \u2014 "),VH=a("a"),Evr=o("TFFunnelForMaskedLM"),Cvr=o(" (Funnel Transformer model)"),wvr=l(),pE=a("li"),W2e=a("strong"),Avr=o("layoutlm"),Lvr=o(" \u2014 "),XH=a("a"),yvr=o("TFLayoutLMForMaskedLM"),xvr=o(" (LayoutLM model)"),$vr=l(),_E=a("li"),Q2e=a("strong"),kvr=o("longformer"),Svr=o(" \u2014 "),zH=a("a"),Rvr=o("TFLongformerForMaskedLM"),Pvr=o(" (Longformer model)"),Bvr=l(),uE=a("li"),H2e=a("strong"),Ivr=o("mobilebert"),Nvr=o(" \u2014 "),WH=a("a"),qvr=o("TFMobileBertForMaskedLM"),jvr=o(" (MobileBERT model)"),Dvr=l(),bE=a("li"),U2e=a("strong"),Gvr=o("mpnet"),Ovr=o(" \u2014 "),QH=a("a"),Vvr=o("TFMPNetForMaskedLM"),Xvr=o(" (MPNet model)"),zvr=l(),vE=a("li"),J2e=a("strong"),Wvr=o("rembert"),Qvr=o(" \u2014 "),HH=a("a"),Hvr=o("TFRemBertForMaskedLM"),Uvr=o(" (RemBERT model)"),Jvr=l(),FE=a("li"),Y2e=a("strong"),Yvr=o("roberta"),Kvr=o(" \u2014 "),UH=a("a"),Zvr=o("TFRobertaForMaskedLM"),eFr=o(" (RoBERTa model)"),oFr=l(),TE=a("li"),K2e=a("strong"),rFr=o("roformer"),tFr=o(" \u2014 "),JH=a("a"),aFr=o("TFRoFormerForMaskedLM"),nFr=o(" (RoFormer model)"),sFr=l(),ME=a("li"),Z2e=a("strong"),lFr=o("tapas"),iFr=o(" \u2014 "),YH=a("a"),dFr=o("TFTapasForMaskedLM"),cFr=o(" (TAPAS model)"),fFr=l(),EE=a("li"),eve=a("strong"),mFr=o("xlm"),gFr=o(" \u2014 "),KH=a("a"),hFr=o("TFXLMWithLMHeadModel"),pFr=o(" (XLM model)"),_Fr=l(),CE=a("li"),ove=a("strong"),uFr=o("xlm-roberta"),bFr=o(" \u2014 "),ZH=a("a"),vFr=o("TFXLMRobertaForMaskedLM"),FFr=o(" (XLM-RoBERTa model)"),TFr=l(),F(wE.$$.fragment),SDe=l(),tc=a("h2"),AE=a("a"),rve=a("span"),F(Y8.$$.fragment),MFr=l(),tve=a("span"),EFr=o("TFAutoModelForSeq2SeqLM"),RDe=l(),rr=a("div"),F(K8.$$.fragment),CFr=l(),ac=a("p"),wFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eU=a("a"),AFr=o("from_pretrained()"),LFr=o(" class method or the "),oU=a("a"),yFr=o("from_config()"),xFr=o(` class
method.`),$Fr=l(),Z8=a("p"),kFr=o("This class cannot be instantiated directly using "),ave=a("code"),SFr=o("__init__()"),RFr=o(" (throws an error)."),PFr=l(),St=a("div"),F(e9.$$.fragment),BFr=l(),nve=a("p"),IFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NFr=l(),nc=a("p"),qFr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),jFr=o("not"),DFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),GFr=o("from_pretrained()"),OFr=o(" to load the model weights."),VFr=l(),F(LE.$$.fragment),XFr=l(),$r=a("div"),F(o9.$$.fragment),zFr=l(),lve=a("p"),WFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QFr=l(),an=a("p"),HFr=o("The model class to instantiate is selected based on the "),ive=a("code"),UFr=o("model_type"),JFr=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),YFr=o("pretrained_model_name_or_path"),KFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),ZFr=o("pretrained_model_name_or_path"),eTr=o(":"),oTr=l(),ye=a("ul"),yE=a("li"),fve=a("strong"),rTr=o("bart"),tTr=o(" \u2014 "),tU=a("a"),aTr=o("TFBartForConditionalGeneration"),nTr=o(" (BART model)"),sTr=l(),xE=a("li"),mve=a("strong"),lTr=o("blenderbot"),iTr=o(" \u2014 "),aU=a("a"),dTr=o("TFBlenderbotForConditionalGeneration"),cTr=o(" (Blenderbot model)"),fTr=l(),$E=a("li"),gve=a("strong"),mTr=o("blenderbot-small"),gTr=o(" \u2014 "),nU=a("a"),hTr=o("TFBlenderbotSmallForConditionalGeneration"),pTr=o(" (BlenderbotSmall model)"),_Tr=l(),kE=a("li"),hve=a("strong"),uTr=o("encoder-decoder"),bTr=o(" \u2014 "),sU=a("a"),vTr=o("TFEncoderDecoderModel"),FTr=o(" (Encoder decoder model)"),TTr=l(),SE=a("li"),pve=a("strong"),MTr=o("led"),ETr=o(" \u2014 "),lU=a("a"),CTr=o("TFLEDForConditionalGeneration"),wTr=o(" (LED model)"),ATr=l(),RE=a("li"),_ve=a("strong"),LTr=o("marian"),yTr=o(" \u2014 "),iU=a("a"),xTr=o("TFMarianMTModel"),$Tr=o(" (Marian model)"),kTr=l(),PE=a("li"),uve=a("strong"),STr=o("mbart"),RTr=o(" \u2014 "),dU=a("a"),PTr=o("TFMBartForConditionalGeneration"),BTr=o(" (mBART model)"),ITr=l(),BE=a("li"),bve=a("strong"),NTr=o("mt5"),qTr=o(" \u2014 "),cU=a("a"),jTr=o("TFMT5ForConditionalGeneration"),DTr=o(" (MT5 model)"),GTr=l(),IE=a("li"),vve=a("strong"),OTr=o("pegasus"),VTr=o(" \u2014 "),fU=a("a"),XTr=o("TFPegasusForConditionalGeneration"),zTr=o(" (Pegasus model)"),WTr=l(),NE=a("li"),Fve=a("strong"),QTr=o("t5"),HTr=o(" \u2014 "),mU=a("a"),UTr=o("TFT5ForConditionalGeneration"),JTr=o(" (T5 model)"),YTr=l(),F(qE.$$.fragment),PDe=l(),sc=a("h2"),jE=a("a"),Tve=a("span"),F(r9.$$.fragment),KTr=l(),Mve=a("span"),ZTr=o("TFAutoModelForSequenceClassification"),BDe=l(),tr=a("div"),F(t9.$$.fragment),eMr=l(),lc=a("p"),oMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gU=a("a"),rMr=o("from_pretrained()"),tMr=o(" class method or the "),hU=a("a"),aMr=o("from_config()"),nMr=o(` class
method.`),sMr=l(),a9=a("p"),lMr=o("This class cannot be instantiated directly using "),Eve=a("code"),iMr=o("__init__()"),dMr=o(" (throws an error)."),cMr=l(),Rt=a("div"),F(n9.$$.fragment),fMr=l(),Cve=a("p"),mMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gMr=l(),ic=a("p"),hMr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),pMr=o("not"),_Mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),uMr=o("from_pretrained()"),bMr=o(" to load the model weights."),vMr=l(),F(DE.$$.fragment),FMr=l(),kr=a("div"),F(s9.$$.fragment),TMr=l(),Ave=a("p"),MMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EMr=l(),nn=a("p"),CMr=o("The model class to instantiate is selected based on the "),Lve=a("code"),wMr=o("model_type"),AMr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),LMr=o("pretrained_model_name_or_path"),yMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(":"),kMr=l(),oe=a("ul"),GE=a("li"),$ve=a("strong"),SMr=o("albert"),RMr=o(" \u2014 "),_U=a("a"),PMr=o("TFAlbertForSequenceClassification"),BMr=o(" (ALBERT model)"),IMr=l(),OE=a("li"),kve=a("strong"),NMr=o("bert"),qMr=o(" \u2014 "),uU=a("a"),jMr=o("TFBertForSequenceClassification"),DMr=o(" (BERT model)"),GMr=l(),VE=a("li"),Sve=a("strong"),OMr=o("camembert"),VMr=o(" \u2014 "),bU=a("a"),XMr=o("TFCamembertForSequenceClassification"),zMr=o(" (CamemBERT model)"),WMr=l(),XE=a("li"),Rve=a("strong"),QMr=o("convbert"),HMr=o(" \u2014 "),vU=a("a"),UMr=o("TFConvBertForSequenceClassification"),JMr=o(" (ConvBERT model)"),YMr=l(),zE=a("li"),Pve=a("strong"),KMr=o("ctrl"),ZMr=o(" \u2014 "),FU=a("a"),eEr=o("TFCTRLForSequenceClassification"),oEr=o(" (CTRL model)"),rEr=l(),WE=a("li"),Bve=a("strong"),tEr=o("deberta"),aEr=o(" \u2014 "),TU=a("a"),nEr=o("TFDebertaForSequenceClassification"),sEr=o(" (DeBERTa model)"),lEr=l(),QE=a("li"),Ive=a("strong"),iEr=o("deberta-v2"),dEr=o(" \u2014 "),MU=a("a"),cEr=o("TFDebertaV2ForSequenceClassification"),fEr=o(" (DeBERTa-v2 model)"),mEr=l(),HE=a("li"),Nve=a("strong"),gEr=o("distilbert"),hEr=o(" \u2014 "),EU=a("a"),pEr=o("TFDistilBertForSequenceClassification"),_Er=o(" (DistilBERT model)"),uEr=l(),UE=a("li"),qve=a("strong"),bEr=o("electra"),vEr=o(" \u2014 "),CU=a("a"),FEr=o("TFElectraForSequenceClassification"),TEr=o(" (ELECTRA model)"),MEr=l(),JE=a("li"),jve=a("strong"),EEr=o("flaubert"),CEr=o(" \u2014 "),wU=a("a"),wEr=o("TFFlaubertForSequenceClassification"),AEr=o(" (FlauBERT model)"),LEr=l(),YE=a("li"),Dve=a("strong"),yEr=o("funnel"),xEr=o(" \u2014 "),AU=a("a"),$Er=o("TFFunnelForSequenceClassification"),kEr=o(" (Funnel Transformer model)"),SEr=l(),KE=a("li"),Gve=a("strong"),REr=o("gpt2"),PEr=o(" \u2014 "),LU=a("a"),BEr=o("TFGPT2ForSequenceClassification"),IEr=o(" (OpenAI GPT-2 model)"),NEr=l(),ZE=a("li"),Ove=a("strong"),qEr=o("gptj"),jEr=o(" \u2014 "),yU=a("a"),DEr=o("TFGPTJForSequenceClassification"),GEr=o(" (GPT-J model)"),OEr=l(),eC=a("li"),Vve=a("strong"),VEr=o("layoutlm"),XEr=o(" \u2014 "),xU=a("a"),zEr=o("TFLayoutLMForSequenceClassification"),WEr=o(" (LayoutLM model)"),QEr=l(),oC=a("li"),Xve=a("strong"),HEr=o("longformer"),UEr=o(" \u2014 "),$U=a("a"),JEr=o("TFLongformerForSequenceClassification"),YEr=o(" (Longformer model)"),KEr=l(),rC=a("li"),zve=a("strong"),ZEr=o("mobilebert"),eCr=o(" \u2014 "),kU=a("a"),oCr=o("TFMobileBertForSequenceClassification"),rCr=o(" (MobileBERT model)"),tCr=l(),tC=a("li"),Wve=a("strong"),aCr=o("mpnet"),nCr=o(" \u2014 "),SU=a("a"),sCr=o("TFMPNetForSequenceClassification"),lCr=o(" (MPNet model)"),iCr=l(),aC=a("li"),Qve=a("strong"),dCr=o("openai-gpt"),cCr=o(" \u2014 "),RU=a("a"),fCr=o("TFOpenAIGPTForSequenceClassification"),mCr=o(" (OpenAI GPT model)"),gCr=l(),nC=a("li"),Hve=a("strong"),hCr=o("rembert"),pCr=o(" \u2014 "),PU=a("a"),_Cr=o("TFRemBertForSequenceClassification"),uCr=o(" (RemBERT model)"),bCr=l(),sC=a("li"),Uve=a("strong"),vCr=o("roberta"),FCr=o(" \u2014 "),BU=a("a"),TCr=o("TFRobertaForSequenceClassification"),MCr=o(" (RoBERTa model)"),ECr=l(),lC=a("li"),Jve=a("strong"),CCr=o("roformer"),wCr=o(" \u2014 "),IU=a("a"),ACr=o("TFRoFormerForSequenceClassification"),LCr=o(" (RoFormer model)"),yCr=l(),iC=a("li"),Yve=a("strong"),xCr=o("tapas"),$Cr=o(" \u2014 "),NU=a("a"),kCr=o("TFTapasForSequenceClassification"),SCr=o(" (TAPAS model)"),RCr=l(),dC=a("li"),Kve=a("strong"),PCr=o("transfo-xl"),BCr=o(" \u2014 "),qU=a("a"),ICr=o("TFTransfoXLForSequenceClassification"),NCr=o(" (Transformer-XL model)"),qCr=l(),cC=a("li"),Zve=a("strong"),jCr=o("xlm"),DCr=o(" \u2014 "),jU=a("a"),GCr=o("TFXLMForSequenceClassification"),OCr=o(" (XLM model)"),VCr=l(),fC=a("li"),eFe=a("strong"),XCr=o("xlm-roberta"),zCr=o(" \u2014 "),DU=a("a"),WCr=o("TFXLMRobertaForSequenceClassification"),QCr=o(" (XLM-RoBERTa model)"),HCr=l(),mC=a("li"),oFe=a("strong"),UCr=o("xlnet"),JCr=o(" \u2014 "),GU=a("a"),YCr=o("TFXLNetForSequenceClassification"),KCr=o(" (XLNet model)"),ZCr=l(),F(gC.$$.fragment),IDe=l(),dc=a("h2"),hC=a("a"),rFe=a("span"),F(l9.$$.fragment),e5r=l(),tFe=a("span"),o5r=o("TFAutoModelForMultipleChoice"),NDe=l(),ar=a("div"),F(i9.$$.fragment),r5r=l(),cc=a("p"),t5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OU=a("a"),a5r=o("from_pretrained()"),n5r=o(" class method or the "),VU=a("a"),s5r=o("from_config()"),l5r=o(` class
method.`),i5r=l(),d9=a("p"),d5r=o("This class cannot be instantiated directly using "),aFe=a("code"),c5r=o("__init__()"),f5r=o(" (throws an error)."),m5r=l(),Pt=a("div"),F(c9.$$.fragment),g5r=l(),nFe=a("p"),h5r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),p5r=l(),fc=a("p"),_5r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),u5r=o("not"),b5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),v5r=o("from_pretrained()"),F5r=o(" to load the model weights."),T5r=l(),F(pC.$$.fragment),M5r=l(),Sr=a("div"),F(f9.$$.fragment),E5r=l(),lFe=a("p"),C5r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),w5r=l(),sn=a("p"),A5r=o("The model class to instantiate is selected based on the "),iFe=a("code"),L5r=o("model_type"),y5r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(":"),R5r=l(),pe=a("ul"),_C=a("li"),fFe=a("strong"),P5r=o("albert"),B5r=o(" \u2014 "),zU=a("a"),I5r=o("TFAlbertForMultipleChoice"),N5r=o(" (ALBERT model)"),q5r=l(),uC=a("li"),mFe=a("strong"),j5r=o("bert"),D5r=o(" \u2014 "),WU=a("a"),G5r=o("TFBertForMultipleChoice"),O5r=o(" (BERT model)"),V5r=l(),bC=a("li"),gFe=a("strong"),X5r=o("camembert"),z5r=o(" \u2014 "),QU=a("a"),W5r=o("TFCamembertForMultipleChoice"),Q5r=o(" (CamemBERT model)"),H5r=l(),vC=a("li"),hFe=a("strong"),U5r=o("convbert"),J5r=o(" \u2014 "),HU=a("a"),Y5r=o("TFConvBertForMultipleChoice"),K5r=o(" (ConvBERT model)"),Z5r=l(),FC=a("li"),pFe=a("strong"),e3r=o("distilbert"),o3r=o(" \u2014 "),UU=a("a"),r3r=o("TFDistilBertForMultipleChoice"),t3r=o(" (DistilBERT model)"),a3r=l(),TC=a("li"),_Fe=a("strong"),n3r=o("electra"),s3r=o(" \u2014 "),JU=a("a"),l3r=o("TFElectraForMultipleChoice"),i3r=o(" (ELECTRA model)"),d3r=l(),MC=a("li"),uFe=a("strong"),c3r=o("flaubert"),f3r=o(" \u2014 "),YU=a("a"),m3r=o("TFFlaubertForMultipleChoice"),g3r=o(" (FlauBERT model)"),h3r=l(),EC=a("li"),bFe=a("strong"),p3r=o("funnel"),_3r=o(" \u2014 "),KU=a("a"),u3r=o("TFFunnelForMultipleChoice"),b3r=o(" (Funnel Transformer model)"),v3r=l(),CC=a("li"),vFe=a("strong"),F3r=o("longformer"),T3r=o(" \u2014 "),ZU=a("a"),M3r=o("TFLongformerForMultipleChoice"),E3r=o(" (Longformer model)"),C3r=l(),wC=a("li"),FFe=a("strong"),w3r=o("mobilebert"),A3r=o(" \u2014 "),eJ=a("a"),L3r=o("TFMobileBertForMultipleChoice"),y3r=o(" (MobileBERT model)"),x3r=l(),AC=a("li"),TFe=a("strong"),$3r=o("mpnet"),k3r=o(" \u2014 "),oJ=a("a"),S3r=o("TFMPNetForMultipleChoice"),R3r=o(" (MPNet model)"),P3r=l(),LC=a("li"),MFe=a("strong"),B3r=o("rembert"),I3r=o(" \u2014 "),rJ=a("a"),N3r=o("TFRemBertForMultipleChoice"),q3r=o(" (RemBERT model)"),j3r=l(),yC=a("li"),EFe=a("strong"),D3r=o("roberta"),G3r=o(" \u2014 "),tJ=a("a"),O3r=o("TFRobertaForMultipleChoice"),V3r=o(" (RoBERTa model)"),X3r=l(),xC=a("li"),CFe=a("strong"),z3r=o("roformer"),W3r=o(" \u2014 "),aJ=a("a"),Q3r=o("TFRoFormerForMultipleChoice"),H3r=o(" (RoFormer model)"),U3r=l(),$C=a("li"),wFe=a("strong"),J3r=o("xlm"),Y3r=o(" \u2014 "),nJ=a("a"),K3r=o("TFXLMForMultipleChoice"),Z3r=o(" (XLM model)"),e0r=l(),kC=a("li"),AFe=a("strong"),o0r=o("xlm-roberta"),r0r=o(" \u2014 "),sJ=a("a"),t0r=o("TFXLMRobertaForMultipleChoice"),a0r=o(" (XLM-RoBERTa model)"),n0r=l(),SC=a("li"),LFe=a("strong"),s0r=o("xlnet"),l0r=o(" \u2014 "),lJ=a("a"),i0r=o("TFXLNetForMultipleChoice"),d0r=o(" (XLNet model)"),c0r=l(),F(RC.$$.fragment),qDe=l(),mc=a("h2"),PC=a("a"),yFe=a("span"),F(m9.$$.fragment),f0r=l(),xFe=a("span"),m0r=o("TFAutoModelForNextSentencePrediction"),jDe=l(),nr=a("div"),F(g9.$$.fragment),g0r=l(),gc=a("p"),h0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iJ=a("a"),p0r=o("from_pretrained()"),_0r=o(" class method or the "),dJ=a("a"),u0r=o("from_config()"),b0r=o(` class
method.`),v0r=l(),h9=a("p"),F0r=o("This class cannot be instantiated directly using "),$Fe=a("code"),T0r=o("__init__()"),M0r=o(" (throws an error)."),E0r=l(),Bt=a("div"),F(p9.$$.fragment),C0r=l(),kFe=a("p"),w0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),A0r=l(),hc=a("p"),L0r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),y0r=o("not"),x0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),$0r=o("from_pretrained()"),k0r=o(" to load the model weights."),S0r=l(),F(BC.$$.fragment),R0r=l(),Rr=a("div"),F(_9.$$.fragment),P0r=l(),RFe=a("p"),B0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),I0r=l(),ln=a("p"),N0r=o("The model class to instantiate is selected based on the "),PFe=a("code"),q0r=o("model_type"),j0r=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(":"),X0r=l(),u9=a("ul"),IC=a("li"),NFe=a("strong"),z0r=o("bert"),W0r=o(" \u2014 "),fJ=a("a"),Q0r=o("TFBertForNextSentencePrediction"),H0r=o(" (BERT model)"),U0r=l(),NC=a("li"),qFe=a("strong"),J0r=o("mobilebert"),Y0r=o(" \u2014 "),mJ=a("a"),K0r=o("TFMobileBertForNextSentencePrediction"),Z0r=o(" (MobileBERT model)"),ewr=l(),F(qC.$$.fragment),DDe=l(),pc=a("h2"),jC=a("a"),jFe=a("span"),F(b9.$$.fragment),owr=l(),DFe=a("span"),rwr=o("TFAutoModelForTableQuestionAnswering"),GDe=l(),sr=a("div"),F(v9.$$.fragment),twr=l(),_c=a("p"),awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gJ=a("a"),nwr=o("from_pretrained()"),swr=o(" class method or the "),hJ=a("a"),lwr=o("from_config()"),iwr=o(` class
method.`),dwr=l(),F9=a("p"),cwr=o("This class cannot be instantiated directly using "),GFe=a("code"),fwr=o("__init__()"),mwr=o(" (throws an error)."),gwr=l(),It=a("div"),F(T9.$$.fragment),hwr=l(),OFe=a("p"),pwr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_wr=l(),uc=a("p"),uwr=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),bwr=o("not"),vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),Fwr=o("from_pretrained()"),Twr=o(" to load the model weights."),Mwr=l(),F(DC.$$.fragment),Ewr=l(),Pr=a("div"),F(M9.$$.fragment),Cwr=l(),XFe=a("p"),wwr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Awr=l(),dn=a("p"),Lwr=o("The model class to instantiate is selected based on the "),zFe=a("code"),ywr=o("model_type"),xwr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),$wr=o("pretrained_model_name_or_path"),kwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),Swr=o("pretrained_model_name_or_path"),Rwr=o(":"),Pwr=l(),HFe=a("ul"),GC=a("li"),UFe=a("strong"),Bwr=o("tapas"),Iwr=o(" \u2014 "),_J=a("a"),Nwr=o("TFTapasForQuestionAnswering"),qwr=o(" (TAPAS model)"),jwr=l(),F(OC.$$.fragment),ODe=l(),bc=a("h2"),VC=a("a"),JFe=a("span"),F(E9.$$.fragment),Dwr=l(),YFe=a("span"),Gwr=o("TFAutoModelForTokenClassification"),VDe=l(),lr=a("div"),F(C9.$$.fragment),Owr=l(),vc=a("p"),Vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uJ=a("a"),Xwr=o("from_pretrained()"),zwr=o(" class method or the "),bJ=a("a"),Wwr=o("from_config()"),Qwr=o(` class
method.`),Hwr=l(),w9=a("p"),Uwr=o("This class cannot be instantiated directly using "),KFe=a("code"),Jwr=o("__init__()"),Ywr=o(" (throws an error)."),Kwr=l(),Nt=a("div"),F(A9.$$.fragment),Zwr=l(),ZFe=a("p"),eAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oAr=l(),Fc=a("p"),rAr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),tAr=o("not"),aAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),nAr=o("from_pretrained()"),sAr=o(" to load the model weights."),lAr=l(),F(XC.$$.fragment),iAr=l(),Br=a("div"),F(L9.$$.fragment),dAr=l(),oTe=a("p"),cAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fAr=l(),cn=a("p"),mAr=o("The model class to instantiate is selected based on the "),rTe=a("code"),gAr=o("model_type"),hAr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),pAr=o("pretrained_model_name_or_path"),_Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),uAr=o("pretrained_model_name_or_path"),bAr=o(":"),vAr=l(),de=a("ul"),zC=a("li"),nTe=a("strong"),FAr=o("albert"),TAr=o(" \u2014 "),FJ=a("a"),MAr=o("TFAlbertForTokenClassification"),EAr=o(" (ALBERT model)"),CAr=l(),WC=a("li"),sTe=a("strong"),wAr=o("bert"),AAr=o(" \u2014 "),TJ=a("a"),LAr=o("TFBertForTokenClassification"),yAr=o(" (BERT model)"),xAr=l(),QC=a("li"),lTe=a("strong"),$Ar=o("camembert"),kAr=o(" \u2014 "),MJ=a("a"),SAr=o("TFCamembertForTokenClassification"),RAr=o(" (CamemBERT model)"),PAr=l(),HC=a("li"),iTe=a("strong"),BAr=o("convbert"),IAr=o(" \u2014 "),EJ=a("a"),NAr=o("TFConvBertForTokenClassification"),qAr=o(" (ConvBERT model)"),jAr=l(),UC=a("li"),dTe=a("strong"),DAr=o("deberta"),GAr=o(" \u2014 "),CJ=a("a"),OAr=o("TFDebertaForTokenClassification"),VAr=o(" (DeBERTa model)"),XAr=l(),JC=a("li"),cTe=a("strong"),zAr=o("deberta-v2"),WAr=o(" \u2014 "),wJ=a("a"),QAr=o("TFDebertaV2ForTokenClassification"),HAr=o(" (DeBERTa-v2 model)"),UAr=l(),YC=a("li"),fTe=a("strong"),JAr=o("distilbert"),YAr=o(" \u2014 "),AJ=a("a"),KAr=o("TFDistilBertForTokenClassification"),ZAr=o(" (DistilBERT model)"),e6r=l(),KC=a("li"),mTe=a("strong"),o6r=o("electra"),r6r=o(" \u2014 "),LJ=a("a"),t6r=o("TFElectraForTokenClassification"),a6r=o(" (ELECTRA model)"),n6r=l(),ZC=a("li"),gTe=a("strong"),s6r=o("flaubert"),l6r=o(" \u2014 "),yJ=a("a"),i6r=o("TFFlaubertForTokenClassification"),d6r=o(" (FlauBERT model)"),c6r=l(),e5=a("li"),hTe=a("strong"),f6r=o("funnel"),m6r=o(" \u2014 "),xJ=a("a"),g6r=o("TFFunnelForTokenClassification"),h6r=o(" (Funnel Transformer model)"),p6r=l(),o5=a("li"),pTe=a("strong"),_6r=o("layoutlm"),u6r=o(" \u2014 "),$J=a("a"),b6r=o("TFLayoutLMForTokenClassification"),v6r=o(" (LayoutLM model)"),F6r=l(),r5=a("li"),_Te=a("strong"),T6r=o("longformer"),M6r=o(" \u2014 "),kJ=a("a"),E6r=o("TFLongformerForTokenClassification"),C6r=o(" (Longformer model)"),w6r=l(),t5=a("li"),uTe=a("strong"),A6r=o("mobilebert"),L6r=o(" \u2014 "),SJ=a("a"),y6r=o("TFMobileBertForTokenClassification"),x6r=o(" (MobileBERT model)"),$6r=l(),a5=a("li"),bTe=a("strong"),k6r=o("mpnet"),S6r=o(" \u2014 "),RJ=a("a"),R6r=o("TFMPNetForTokenClassification"),P6r=o(" (MPNet model)"),B6r=l(),n5=a("li"),vTe=a("strong"),I6r=o("rembert"),N6r=o(" \u2014 "),PJ=a("a"),q6r=o("TFRemBertForTokenClassification"),j6r=o(" (RemBERT model)"),D6r=l(),s5=a("li"),FTe=a("strong"),G6r=o("roberta"),O6r=o(" \u2014 "),BJ=a("a"),V6r=o("TFRobertaForTokenClassification"),X6r=o(" (RoBERTa model)"),z6r=l(),l5=a("li"),TTe=a("strong"),W6r=o("roformer"),Q6r=o(" \u2014 "),IJ=a("a"),H6r=o("TFRoFormerForTokenClassification"),U6r=o(" (RoFormer model)"),J6r=l(),i5=a("li"),MTe=a("strong"),Y6r=o("xlm"),K6r=o(" \u2014 "),NJ=a("a"),Z6r=o("TFXLMForTokenClassification"),eLr=o(" (XLM model)"),oLr=l(),d5=a("li"),ETe=a("strong"),rLr=o("xlm-roberta"),tLr=o(" \u2014 "),qJ=a("a"),aLr=o("TFXLMRobertaForTokenClassification"),nLr=o(" (XLM-RoBERTa model)"),sLr=l(),c5=a("li"),CTe=a("strong"),lLr=o("xlnet"),iLr=o(" \u2014 "),jJ=a("a"),dLr=o("TFXLNetForTokenClassification"),cLr=o(" (XLNet model)"),fLr=l(),F(f5.$$.fragment),XDe=l(),Tc=a("h2"),m5=a("a"),wTe=a("span"),F(y9.$$.fragment),mLr=l(),ATe=a("span"),gLr=o("TFAutoModelForQuestionAnswering"),zDe=l(),ir=a("div"),F(x9.$$.fragment),hLr=l(),Mc=a("p"),pLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DJ=a("a"),_Lr=o("from_pretrained()"),uLr=o(" class method or the "),GJ=a("a"),bLr=o("from_config()"),vLr=o(` class
method.`),FLr=l(),$9=a("p"),TLr=o("This class cannot be instantiated directly using "),LTe=a("code"),MLr=o("__init__()"),ELr=o(" (throws an error)."),CLr=l(),qt=a("div"),F(k9.$$.fragment),wLr=l(),yTe=a("p"),ALr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LLr=l(),Ec=a("p"),yLr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),xLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),kLr=o("from_pretrained()"),SLr=o(" to load the model weights."),RLr=l(),F(g5.$$.fragment),PLr=l(),Ir=a("div"),F(S9.$$.fragment),BLr=l(),$Te=a("p"),ILr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NLr=l(),fn=a("p"),qLr=o("The model class to instantiate is selected based on the "),kTe=a("code"),jLr=o("model_type"),DLr=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),VLr=o("pretrained_model_name_or_path"),XLr=o(":"),zLr=l(),ce=a("ul"),h5=a("li"),PTe=a("strong"),WLr=o("albert"),QLr=o(" \u2014 "),VJ=a("a"),HLr=o("TFAlbertForQuestionAnswering"),ULr=o(" (ALBERT model)"),JLr=l(),p5=a("li"),BTe=a("strong"),YLr=o("bert"),KLr=o(" \u2014 "),XJ=a("a"),ZLr=o("TFBertForQuestionAnswering"),eyr=o(" (BERT model)"),oyr=l(),_5=a("li"),ITe=a("strong"),ryr=o("camembert"),tyr=o(" \u2014 "),zJ=a("a"),ayr=o("TFCamembertForQuestionAnswering"),nyr=o(" (CamemBERT model)"),syr=l(),u5=a("li"),NTe=a("strong"),lyr=o("convbert"),iyr=o(" \u2014 "),WJ=a("a"),dyr=o("TFConvBertForQuestionAnswering"),cyr=o(" (ConvBERT model)"),fyr=l(),b5=a("li"),qTe=a("strong"),myr=o("deberta"),gyr=o(" \u2014 "),QJ=a("a"),hyr=o("TFDebertaForQuestionAnswering"),pyr=o(" (DeBERTa model)"),_yr=l(),v5=a("li"),jTe=a("strong"),uyr=o("deberta-v2"),byr=o(" \u2014 "),HJ=a("a"),vyr=o("TFDebertaV2ForQuestionAnswering"),Fyr=o(" (DeBERTa-v2 model)"),Tyr=l(),F5=a("li"),DTe=a("strong"),Myr=o("distilbert"),Eyr=o(" \u2014 "),UJ=a("a"),Cyr=o("TFDistilBertForQuestionAnswering"),wyr=o(" (DistilBERT model)"),Ayr=l(),T5=a("li"),GTe=a("strong"),Lyr=o("electra"),yyr=o(" \u2014 "),JJ=a("a"),xyr=o("TFElectraForQuestionAnswering"),$yr=o(" (ELECTRA model)"),kyr=l(),M5=a("li"),OTe=a("strong"),Syr=o("flaubert"),Ryr=o(" \u2014 "),YJ=a("a"),Pyr=o("TFFlaubertForQuestionAnsweringSimple"),Byr=o(" (FlauBERT model)"),Iyr=l(),E5=a("li"),VTe=a("strong"),Nyr=o("funnel"),qyr=o(" \u2014 "),KJ=a("a"),jyr=o("TFFunnelForQuestionAnswering"),Dyr=o(" (Funnel Transformer model)"),Gyr=l(),C5=a("li"),XTe=a("strong"),Oyr=o("gptj"),Vyr=o(" \u2014 "),ZJ=a("a"),Xyr=o("TFGPTJForQuestionAnswering"),zyr=o(" (GPT-J model)"),Wyr=l(),w5=a("li"),zTe=a("strong"),Qyr=o("longformer"),Hyr=o(" \u2014 "),eY=a("a"),Uyr=o("TFLongformerForQuestionAnswering"),Jyr=o(" (Longformer model)"),Yyr=l(),A5=a("li"),WTe=a("strong"),Kyr=o("mobilebert"),Zyr=o(" \u2014 "),oY=a("a"),e8r=o("TFMobileBertForQuestionAnswering"),o8r=o(" (MobileBERT model)"),r8r=l(),L5=a("li"),QTe=a("strong"),t8r=o("mpnet"),a8r=o(" \u2014 "),rY=a("a"),n8r=o("TFMPNetForQuestionAnswering"),s8r=o(" (MPNet model)"),l8r=l(),y5=a("li"),HTe=a("strong"),i8r=o("rembert"),d8r=o(" \u2014 "),tY=a("a"),c8r=o("TFRemBertForQuestionAnswering"),f8r=o(" (RemBERT model)"),m8r=l(),x5=a("li"),UTe=a("strong"),g8r=o("roberta"),h8r=o(" \u2014 "),aY=a("a"),p8r=o("TFRobertaForQuestionAnswering"),_8r=o(" (RoBERTa model)"),u8r=l(),$5=a("li"),JTe=a("strong"),b8r=o("roformer"),v8r=o(" \u2014 "),nY=a("a"),F8r=o("TFRoFormerForQuestionAnswering"),T8r=o(" (RoFormer model)"),M8r=l(),k5=a("li"),YTe=a("strong"),E8r=o("xlm"),C8r=o(" \u2014 "),sY=a("a"),w8r=o("TFXLMForQuestionAnsweringSimple"),A8r=o(" (XLM model)"),L8r=l(),S5=a("li"),KTe=a("strong"),y8r=o("xlm-roberta"),x8r=o(" \u2014 "),lY=a("a"),$8r=o("TFXLMRobertaForQuestionAnswering"),k8r=o(" (XLM-RoBERTa model)"),S8r=l(),R5=a("li"),ZTe=a("strong"),R8r=o("xlnet"),P8r=o(" \u2014 "),iY=a("a"),B8r=o("TFXLNetForQuestionAnsweringSimple"),I8r=o(" (XLNet model)"),N8r=l(),F(P5.$$.fragment),WDe=l(),Cc=a("h2"),B5=a("a"),eMe=a("span"),F(R9.$$.fragment),q8r=l(),oMe=a("span"),j8r=o("TFAutoModelForVision2Seq"),QDe=l(),dr=a("div"),F(P9.$$.fragment),D8r=l(),wc=a("p"),G8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dY=a("a"),O8r=o("from_pretrained()"),V8r=o(" class method or the "),cY=a("a"),X8r=o("from_config()"),z8r=o(` class
method.`),W8r=l(),B9=a("p"),Q8r=o("This class cannot be instantiated directly using "),rMe=a("code"),H8r=o("__init__()"),U8r=o(" (throws an error)."),J8r=l(),jt=a("div"),F(I9.$$.fragment),Y8r=l(),tMe=a("p"),K8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Z8r=l(),Ac=a("p"),e9r=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),o9r=o("not"),r9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),t9r=o("from_pretrained()"),a9r=o(" to load the model weights."),n9r=l(),F(I5.$$.fragment),s9r=l(),Nr=a("div"),F(N9.$$.fragment),l9r=l(),nMe=a("p"),i9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d9r=l(),mn=a("p"),c9r=o("The model class to instantiate is selected based on the "),sMe=a("code"),f9r=o("model_type"),m9r=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),g9r=o("pretrained_model_name_or_path"),h9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),p9r=o("pretrained_model_name_or_path"),_9r=o(":"),u9r=l(),dMe=a("ul"),N5=a("li"),cMe=a("strong"),b9r=o("vision-encoder-decoder"),v9r=o(" \u2014 "),mY=a("a"),F9r=o("TFVisionEncoderDecoderModel"),T9r=o(" (Vision Encoder decoder model)"),M9r=l(),F(q5.$$.fragment),HDe=l(),Lc=a("h2"),j5=a("a"),fMe=a("span"),F(q9.$$.fragment),E9r=l(),mMe=a("span"),C9r=o("TFAutoModelForSpeechSeq2Seq"),UDe=l(),cr=a("div"),F(j9.$$.fragment),w9r=l(),yc=a("p"),A9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gY=a("a"),L9r=o("from_pretrained()"),y9r=o(" class method or the "),hY=a("a"),x9r=o("from_config()"),$9r=o(` class
method.`),k9r=l(),D9=a("p"),S9r=o("This class cannot be instantiated directly using "),gMe=a("code"),R9r=o("__init__()"),P9r=o(" (throws an error)."),B9r=l(),Dt=a("div"),F(G9.$$.fragment),I9r=l(),hMe=a("p"),N9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),q9r=l(),xc=a("p"),j9r=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),D9r=o("not"),G9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),O9r=o("from_pretrained()"),V9r=o(" to load the model weights."),X9r=l(),F(D5.$$.fragment),z9r=l(),qr=a("div"),F(O9.$$.fragment),W9r=l(),_Me=a("p"),Q9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),H9r=l(),gn=a("p"),U9r=o("The model class to instantiate is selected based on the "),uMe=a("code"),J9r=o("model_type"),Y9r=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(":"),rxr=l(),FMe=a("ul"),G5=a("li"),TMe=a("strong"),txr=o("speech_to_text"),axr=o(" \u2014 "),_Y=a("a"),nxr=o("TFSpeech2TextForConditionalGeneration"),sxr=o(" (Speech2Text model)"),lxr=l(),F(O5.$$.fragment),JDe=l(),$c=a("h2"),V5=a("a"),MMe=a("span"),F(V9.$$.fragment),ixr=l(),EMe=a("span"),dxr=o("FlaxAutoModel"),YDe=l(),fr=a("div"),F(X9.$$.fragment),cxr=l(),kc=a("p"),fxr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uY=a("a"),mxr=o("from_pretrained()"),gxr=o(" class method or the "),bY=a("a"),hxr=o("from_config()"),pxr=o(` class
method.`),_xr=l(),z9=a("p"),uxr=o("This class cannot be instantiated directly using "),CMe=a("code"),bxr=o("__init__()"),vxr=o(" (throws an error)."),Fxr=l(),Gt=a("div"),F(W9.$$.fragment),Txr=l(),wMe=a("p"),Mxr=o("Instantiates one of the base model classes of the library from a configuration."),Exr=l(),Sc=a("p"),Cxr=o(`Note:
Loading a model from its configuration file does `),AMe=a("strong"),wxr=o("not"),Axr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),Lxr=o("from_pretrained()"),yxr=o(" to load the model weights."),xxr=l(),F(X5.$$.fragment),$xr=l(),jr=a("div"),F(Q9.$$.fragment),kxr=l(),LMe=a("p"),Sxr=o("Instantiate one of the base model classes of the library from a pretrained model."),Rxr=l(),hn=a("p"),Pxr=o("The model class to instantiate is selected based on the "),yMe=a("code"),Bxr=o("model_type"),Ixr=o(` property of the config object (either
passed as an argument or loaded from `),xMe=a("code"),Nxr=o("pretrained_model_name_or_path"),qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=a("code"),jxr=o("pretrained_model_name_or_path"),Dxr=o(":"),Gxr=l(),re=a("ul"),z5=a("li"),kMe=a("strong"),Oxr=o("albert"),Vxr=o(" \u2014 "),FY=a("a"),Xxr=o("FlaxAlbertModel"),zxr=o(" (ALBERT model)"),Wxr=l(),W5=a("li"),SMe=a("strong"),Qxr=o("bart"),Hxr=o(" \u2014 "),TY=a("a"),Uxr=o("FlaxBartModel"),Jxr=o(" (BART model)"),Yxr=l(),Q5=a("li"),RMe=a("strong"),Kxr=o("beit"),Zxr=o(" \u2014 "),MY=a("a"),e$r=o("FlaxBeitModel"),o$r=o(" (BEiT model)"),r$r=l(),H5=a("li"),PMe=a("strong"),t$r=o("bert"),a$r=o(" \u2014 "),EY=a("a"),n$r=o("FlaxBertModel"),s$r=o(" (BERT model)"),l$r=l(),U5=a("li"),BMe=a("strong"),i$r=o("big_bird"),d$r=o(" \u2014 "),CY=a("a"),c$r=o("FlaxBigBirdModel"),f$r=o(" (BigBird model)"),m$r=l(),J5=a("li"),IMe=a("strong"),g$r=o("blenderbot"),h$r=o(" \u2014 "),wY=a("a"),p$r=o("FlaxBlenderbotModel"),_$r=o(" (Blenderbot model)"),u$r=l(),Y5=a("li"),NMe=a("strong"),b$r=o("blenderbot-small"),v$r=o(" \u2014 "),AY=a("a"),F$r=o("FlaxBlenderbotSmallModel"),T$r=o(" (BlenderbotSmall model)"),M$r=l(),K5=a("li"),qMe=a("strong"),E$r=o("clip"),C$r=o(" \u2014 "),LY=a("a"),w$r=o("FlaxCLIPModel"),A$r=o(" (CLIP model)"),L$r=l(),Z5=a("li"),jMe=a("strong"),y$r=o("distilbert"),x$r=o(" \u2014 "),yY=a("a"),$$r=o("FlaxDistilBertModel"),k$r=o(" (DistilBERT model)"),S$r=l(),e3=a("li"),DMe=a("strong"),R$r=o("electra"),P$r=o(" \u2014 "),xY=a("a"),B$r=o("FlaxElectraModel"),I$r=o(" (ELECTRA model)"),N$r=l(),o3=a("li"),GMe=a("strong"),q$r=o("gpt2"),j$r=o(" \u2014 "),$Y=a("a"),D$r=o("FlaxGPT2Model"),G$r=o(" (OpenAI GPT-2 model)"),O$r=l(),r3=a("li"),OMe=a("strong"),V$r=o("gpt_neo"),X$r=o(" \u2014 "),kY=a("a"),z$r=o("FlaxGPTNeoModel"),W$r=o(" (GPT Neo model)"),Q$r=l(),t3=a("li"),VMe=a("strong"),H$r=o("gptj"),U$r=o(" \u2014 "),SY=a("a"),J$r=o("FlaxGPTJModel"),Y$r=o(" (GPT-J model)"),K$r=l(),a3=a("li"),XMe=a("strong"),Z$r=o("marian"),ekr=o(" \u2014 "),RY=a("a"),okr=o("FlaxMarianModel"),rkr=o(" (Marian model)"),tkr=l(),n3=a("li"),zMe=a("strong"),akr=o("mbart"),nkr=o(" \u2014 "),PY=a("a"),skr=o("FlaxMBartModel"),lkr=o(" (mBART model)"),ikr=l(),s3=a("li"),WMe=a("strong"),dkr=o("mt5"),ckr=o(" \u2014 "),BY=a("a"),fkr=o("FlaxMT5Model"),mkr=o(" (MT5 model)"),gkr=l(),l3=a("li"),QMe=a("strong"),hkr=o("opt"),pkr=o(" \u2014 "),IY=a("a"),_kr=o("FlaxOPTModel"),ukr=o(" (OPT model)"),bkr=l(),i3=a("li"),HMe=a("strong"),vkr=o("pegasus"),Fkr=o(" \u2014 "),NY=a("a"),Tkr=o("FlaxPegasusModel"),Mkr=o(" (Pegasus model)"),Ekr=l(),d3=a("li"),UMe=a("strong"),Ckr=o("roberta"),wkr=o(" \u2014 "),qY=a("a"),Akr=o("FlaxRobertaModel"),Lkr=o(" (RoBERTa model)"),ykr=l(),c3=a("li"),JMe=a("strong"),xkr=o("roformer"),$kr=o(" \u2014 "),jY=a("a"),kkr=o("FlaxRoFormerModel"),Skr=o(" (RoFormer model)"),Rkr=l(),f3=a("li"),YMe=a("strong"),Pkr=o("t5"),Bkr=o(" \u2014 "),DY=a("a"),Ikr=o("FlaxT5Model"),Nkr=o(" (T5 model)"),qkr=l(),m3=a("li"),KMe=a("strong"),jkr=o("vision-text-dual-encoder"),Dkr=o(" \u2014 "),GY=a("a"),Gkr=o("FlaxVisionTextDualEncoderModel"),Okr=o(" (VisionTextDualEncoder model)"),Vkr=l(),g3=a("li"),ZMe=a("strong"),Xkr=o("vit"),zkr=o(" \u2014 "),OY=a("a"),Wkr=o("FlaxViTModel"),Qkr=o(" (ViT model)"),Hkr=l(),h3=a("li"),eEe=a("strong"),Ukr=o("wav2vec2"),Jkr=o(" \u2014 "),VY=a("a"),Ykr=o("FlaxWav2Vec2Model"),Kkr=o(" (Wav2Vec2 model)"),Zkr=l(),p3=a("li"),oEe=a("strong"),eSr=o("xglm"),oSr=o(" \u2014 "),XY=a("a"),rSr=o("FlaxXGLMModel"),tSr=o(" (XGLM model)"),aSr=l(),_3=a("li"),rEe=a("strong"),nSr=o("xlm-roberta"),sSr=o(" \u2014 "),zY=a("a"),lSr=o("FlaxXLMRobertaModel"),iSr=o(" (XLM-RoBERTa model)"),dSr=l(),F(u3.$$.fragment),KDe=l(),Rc=a("h2"),b3=a("a"),tEe=a("span"),F(H9.$$.fragment),cSr=l(),aEe=a("span"),fSr=o("FlaxAutoModelForCausalLM"),ZDe=l(),mr=a("div"),F(U9.$$.fragment),mSr=l(),Pc=a("p"),gSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WY=a("a"),hSr=o("from_pretrained()"),pSr=o(" class method or the "),QY=a("a"),_Sr=o("from_config()"),uSr=o(` class
method.`),bSr=l(),J9=a("p"),vSr=o("This class cannot be instantiated directly using "),nEe=a("code"),FSr=o("__init__()"),TSr=o(" (throws an error)."),MSr=l(),Ot=a("div"),F(Y9.$$.fragment),ESr=l(),sEe=a("p"),CSr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wSr=l(),Bc=a("p"),ASr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),LSr=o("not"),ySr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),xSr=o("from_pretrained()"),$Sr=o(" to load the model weights."),kSr=l(),F(v3.$$.fragment),SSr=l(),Dr=a("div"),F(K9.$$.fragment),RSr=l(),iEe=a("p"),PSr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BSr=l(),pn=a("p"),ISr=o("The model class to instantiate is selected based on the "),dEe=a("code"),NSr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),jSr=o("pretrained_model_name_or_path"),DSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(":"),VSr=l(),xe=a("ul"),F3=a("li"),mEe=a("strong"),XSr=o("bart"),zSr=o(" \u2014 "),UY=a("a"),WSr=o("FlaxBartForCausalLM"),QSr=o(" (BART model)"),HSr=l(),T3=a("li"),gEe=a("strong"),USr=o("bert"),JSr=o(" \u2014 "),JY=a("a"),YSr=o("FlaxBertForCausalLM"),KSr=o(" (BERT model)"),ZSr=l(),M3=a("li"),hEe=a("strong"),eRr=o("big_bird"),oRr=o(" \u2014 "),YY=a("a"),rRr=o("FlaxBigBirdForCausalLM"),tRr=o(" (BigBird model)"),aRr=l(),E3=a("li"),pEe=a("strong"),nRr=o("electra"),sRr=o(" \u2014 "),KY=a("a"),lRr=o("FlaxElectraForCausalLM"),iRr=o(" (ELECTRA model)"),dRr=l(),C3=a("li"),_Ee=a("strong"),cRr=o("gpt2"),fRr=o(" \u2014 "),ZY=a("a"),mRr=o("FlaxGPT2LMHeadModel"),gRr=o(" (OpenAI GPT-2 model)"),hRr=l(),w3=a("li"),uEe=a("strong"),pRr=o("gpt_neo"),_Rr=o(" \u2014 "),eK=a("a"),uRr=o("FlaxGPTNeoForCausalLM"),bRr=o(" (GPT Neo model)"),vRr=l(),A3=a("li"),bEe=a("strong"),FRr=o("gptj"),TRr=o(" \u2014 "),oK=a("a"),MRr=o("FlaxGPTJForCausalLM"),ERr=o(" (GPT-J model)"),CRr=l(),L3=a("li"),vEe=a("strong"),wRr=o("opt"),ARr=o(" \u2014 "),rK=a("a"),LRr=o("FlaxOPTForCausalLM"),yRr=o(" (OPT model)"),xRr=l(),y3=a("li"),FEe=a("strong"),$Rr=o("roberta"),kRr=o(" \u2014 "),tK=a("a"),SRr=o("FlaxRobertaForCausalLM"),RRr=o(" (RoBERTa model)"),PRr=l(),x3=a("li"),TEe=a("strong"),BRr=o("xglm"),IRr=o(" \u2014 "),aK=a("a"),NRr=o("FlaxXGLMForCausalLM"),qRr=o(" (XGLM model)"),jRr=l(),F($3.$$.fragment),eGe=l(),Ic=a("h2"),k3=a("a"),MEe=a("span"),F(Z9.$$.fragment),DRr=l(),EEe=a("span"),GRr=o("FlaxAutoModelForPreTraining"),oGe=l(),gr=a("div"),F(ex.$$.fragment),ORr=l(),Nc=a("p"),VRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nK=a("a"),XRr=o("from_pretrained()"),zRr=o(" class method or the "),sK=a("a"),WRr=o("from_config()"),QRr=o(` class
method.`),HRr=l(),ox=a("p"),URr=o("This class cannot be instantiated directly using "),CEe=a("code"),JRr=o("__init__()"),YRr=o(" (throws an error)."),KRr=l(),Vt=a("div"),F(rx.$$.fragment),ZRr=l(),wEe=a("p"),ePr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oPr=l(),qc=a("p"),rPr=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),tPr=o("not"),aPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),nPr=o("from_pretrained()"),sPr=o(" to load the model weights."),lPr=l(),F(S3.$$.fragment),iPr=l(),Gr=a("div"),F(tx.$$.fragment),dPr=l(),LEe=a("p"),cPr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fPr=l(),_n=a("p"),mPr=o("The model class to instantiate is selected based on the "),yEe=a("code"),gPr=o("model_type"),hPr=o(` property of the config object (either
passed as an argument or loaded from `),xEe=a("code"),pPr=o("pretrained_model_name_or_path"),_Pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=a("code"),uPr=o("pretrained_model_name_or_path"),bPr=o(":"),vPr=l(),Ee=a("ul"),R3=a("li"),kEe=a("strong"),FPr=o("albert"),TPr=o(" \u2014 "),iK=a("a"),MPr=o("FlaxAlbertForPreTraining"),EPr=o(" (ALBERT model)"),CPr=l(),P3=a("li"),SEe=a("strong"),wPr=o("bart"),APr=o(" \u2014 "),dK=a("a"),LPr=o("FlaxBartForConditionalGeneration"),yPr=o(" (BART model)"),xPr=l(),B3=a("li"),REe=a("strong"),$Pr=o("bert"),kPr=o(" \u2014 "),cK=a("a"),SPr=o("FlaxBertForPreTraining"),RPr=o(" (BERT model)"),PPr=l(),I3=a("li"),PEe=a("strong"),BPr=o("big_bird"),IPr=o(" \u2014 "),fK=a("a"),NPr=o("FlaxBigBirdForPreTraining"),qPr=o(" (BigBird model)"),jPr=l(),N3=a("li"),BEe=a("strong"),DPr=o("electra"),GPr=o(" \u2014 "),mK=a("a"),OPr=o("FlaxElectraForPreTraining"),VPr=o(" (ELECTRA model)"),XPr=l(),q3=a("li"),IEe=a("strong"),zPr=o("mbart"),WPr=o(" \u2014 "),gK=a("a"),QPr=o("FlaxMBartForConditionalGeneration"),HPr=o(" (mBART model)"),UPr=l(),j3=a("li"),NEe=a("strong"),JPr=o("mt5"),YPr=o(" \u2014 "),hK=a("a"),KPr=o("FlaxMT5ForConditionalGeneration"),ZPr=o(" (MT5 model)"),eBr=l(),D3=a("li"),qEe=a("strong"),oBr=o("roberta"),rBr=o(" \u2014 "),pK=a("a"),tBr=o("FlaxRobertaForMaskedLM"),aBr=o(" (RoBERTa model)"),nBr=l(),G3=a("li"),jEe=a("strong"),sBr=o("roformer"),lBr=o(" \u2014 "),_K=a("a"),iBr=o("FlaxRoFormerForMaskedLM"),dBr=o(" (RoFormer model)"),cBr=l(),O3=a("li"),DEe=a("strong"),fBr=o("t5"),mBr=o(" \u2014 "),uK=a("a"),gBr=o("FlaxT5ForConditionalGeneration"),hBr=o(" (T5 model)"),pBr=l(),V3=a("li"),GEe=a("strong"),_Br=o("wav2vec2"),uBr=o(" \u2014 "),bK=a("a"),bBr=o("FlaxWav2Vec2ForPreTraining"),vBr=o(" (Wav2Vec2 model)"),FBr=l(),X3=a("li"),OEe=a("strong"),TBr=o("xlm-roberta"),MBr=o(" \u2014 "),vK=a("a"),EBr=o("FlaxXLMRobertaForMaskedLM"),CBr=o(" (XLM-RoBERTa model)"),wBr=l(),F(z3.$$.fragment),rGe=l(),jc=a("h2"),W3=a("a"),VEe=a("span"),F(ax.$$.fragment),ABr=l(),XEe=a("span"),LBr=o("FlaxAutoModelForMaskedLM"),tGe=l(),hr=a("div"),F(nx.$$.fragment),yBr=l(),Dc=a("p"),xBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FK=a("a"),$Br=o("from_pretrained()"),kBr=o(" class method or the "),TK=a("a"),SBr=o("from_config()"),RBr=o(` class
method.`),PBr=l(),sx=a("p"),BBr=o("This class cannot be instantiated directly using "),zEe=a("code"),IBr=o("__init__()"),NBr=o(" (throws an error)."),qBr=l(),Xt=a("div"),F(lx.$$.fragment),jBr=l(),WEe=a("p"),DBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GBr=l(),Gc=a("p"),OBr=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),VBr=o("not"),XBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),zBr=o("from_pretrained()"),WBr=o(" to load the model weights."),QBr=l(),F(Q3.$$.fragment),HBr=l(),Or=a("div"),F(ix.$$.fragment),UBr=l(),HEe=a("p"),JBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YBr=l(),un=a("p"),KBr=o("The model class to instantiate is selected based on the "),UEe=a("code"),ZBr=o("model_type"),eIr=o(` property of the config object (either
passed as an argument or loaded from `),JEe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=a("code"),tIr=o("pretrained_model_name_or_path"),aIr=o(":"),nIr=l(),$e=a("ul"),H3=a("li"),KEe=a("strong"),sIr=o("albert"),lIr=o(" \u2014 "),EK=a("a"),iIr=o("FlaxAlbertForMaskedLM"),dIr=o(" (ALBERT model)"),cIr=l(),U3=a("li"),ZEe=a("strong"),fIr=o("bart"),mIr=o(" \u2014 "),CK=a("a"),gIr=o("FlaxBartForConditionalGeneration"),hIr=o(" (BART model)"),pIr=l(),J3=a("li"),eCe=a("strong"),_Ir=o("bert"),uIr=o(" \u2014 "),wK=a("a"),bIr=o("FlaxBertForMaskedLM"),vIr=o(" (BERT model)"),FIr=l(),Y3=a("li"),oCe=a("strong"),TIr=o("big_bird"),MIr=o(" \u2014 "),AK=a("a"),EIr=o("FlaxBigBirdForMaskedLM"),CIr=o(" (BigBird model)"),wIr=l(),K3=a("li"),rCe=a("strong"),AIr=o("distilbert"),LIr=o(" \u2014 "),LK=a("a"),yIr=o("FlaxDistilBertForMaskedLM"),xIr=o(" (DistilBERT model)"),$Ir=l(),Z3=a("li"),tCe=a("strong"),kIr=o("electra"),SIr=o(" \u2014 "),yK=a("a"),RIr=o("FlaxElectraForMaskedLM"),PIr=o(" (ELECTRA model)"),BIr=l(),e0=a("li"),aCe=a("strong"),IIr=o("mbart"),NIr=o(" \u2014 "),xK=a("a"),qIr=o("FlaxMBartForConditionalGeneration"),jIr=o(" (mBART model)"),DIr=l(),o0=a("li"),nCe=a("strong"),GIr=o("roberta"),OIr=o(" \u2014 "),$K=a("a"),VIr=o("FlaxRobertaForMaskedLM"),XIr=o(" (RoBERTa model)"),zIr=l(),r0=a("li"),sCe=a("strong"),WIr=o("roformer"),QIr=o(" \u2014 "),kK=a("a"),HIr=o("FlaxRoFormerForMaskedLM"),UIr=o(" (RoFormer model)"),JIr=l(),t0=a("li"),lCe=a("strong"),YIr=o("xlm-roberta"),KIr=o(" \u2014 "),SK=a("a"),ZIr=o("FlaxXLMRobertaForMaskedLM"),eNr=o(" (XLM-RoBERTa model)"),oNr=l(),F(a0.$$.fragment),aGe=l(),Oc=a("h2"),n0=a("a"),iCe=a("span"),F(dx.$$.fragment),rNr=l(),dCe=a("span"),tNr=o("FlaxAutoModelForSeq2SeqLM"),nGe=l(),pr=a("div"),F(cx.$$.fragment),aNr=l(),Vc=a("p"),nNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RK=a("a"),sNr=o("from_pretrained()"),lNr=o(" class method or the "),PK=a("a"),iNr=o("from_config()"),dNr=o(` class
method.`),cNr=l(),fx=a("p"),fNr=o("This class cannot be instantiated directly using "),cCe=a("code"),mNr=o("__init__()"),gNr=o(" (throws an error)."),hNr=l(),zt=a("div"),F(mx.$$.fragment),pNr=l(),fCe=a("p"),_Nr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uNr=l(),Xc=a("p"),bNr=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),vNr=o("not"),FNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),TNr=o("from_pretrained()"),MNr=o(" to load the model weights."),ENr=l(),F(s0.$$.fragment),CNr=l(),Vr=a("div"),F(gx.$$.fragment),wNr=l(),gCe=a("p"),ANr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LNr=l(),bn=a("p"),yNr=o("The model class to instantiate is selected based on the "),hCe=a("code"),xNr=o("model_type"),$Nr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),RNr=o("pretrained_model_name_or_path"),PNr=o(":"),BNr=l(),Pe=a("ul"),l0=a("li"),uCe=a("strong"),INr=o("bart"),NNr=o(" \u2014 "),IK=a("a"),qNr=o("FlaxBartForConditionalGeneration"),jNr=o(" (BART model)"),DNr=l(),i0=a("li"),bCe=a("strong"),GNr=o("blenderbot"),ONr=o(" \u2014 "),NK=a("a"),VNr=o("FlaxBlenderbotForConditionalGeneration"),XNr=o(" (Blenderbot model)"),zNr=l(),d0=a("li"),vCe=a("strong"),WNr=o("blenderbot-small"),QNr=o(" \u2014 "),qK=a("a"),HNr=o("FlaxBlenderbotSmallForConditionalGeneration"),UNr=o(" (BlenderbotSmall model)"),JNr=l(),c0=a("li"),FCe=a("strong"),YNr=o("encoder-decoder"),KNr=o(" \u2014 "),jK=a("a"),ZNr=o("FlaxEncoderDecoderModel"),eqr=o(" (Encoder decoder model)"),oqr=l(),f0=a("li"),TCe=a("strong"),rqr=o("marian"),tqr=o(" \u2014 "),DK=a("a"),aqr=o("FlaxMarianMTModel"),nqr=o(" (Marian model)"),sqr=l(),m0=a("li"),MCe=a("strong"),lqr=o("mbart"),iqr=o(" \u2014 "),GK=a("a"),dqr=o("FlaxMBartForConditionalGeneration"),cqr=o(" (mBART model)"),fqr=l(),g0=a("li"),ECe=a("strong"),mqr=o("mt5"),gqr=o(" \u2014 "),OK=a("a"),hqr=o("FlaxMT5ForConditionalGeneration"),pqr=o(" (MT5 model)"),_qr=l(),h0=a("li"),CCe=a("strong"),uqr=o("pegasus"),bqr=o(" \u2014 "),VK=a("a"),vqr=o("FlaxPegasusForConditionalGeneration"),Fqr=o(" (Pegasus model)"),Tqr=l(),p0=a("li"),wCe=a("strong"),Mqr=o("t5"),Eqr=o(" \u2014 "),XK=a("a"),Cqr=o("FlaxT5ForConditionalGeneration"),wqr=o(" (T5 model)"),Aqr=l(),F(_0.$$.fragment),sGe=l(),zc=a("h2"),u0=a("a"),ACe=a("span"),F(hx.$$.fragment),Lqr=l(),LCe=a("span"),yqr=o("FlaxAutoModelForSequenceClassification"),lGe=l(),_r=a("div"),F(px.$$.fragment),xqr=l(),Wc=a("p"),$qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" class method or the "),WK=a("a"),Rqr=o("from_config()"),Pqr=o(` class
method.`),Bqr=l(),_x=a("p"),Iqr=o("This class cannot be instantiated directly using "),yCe=a("code"),Nqr=o("__init__()"),qqr=o(" (throws an error)."),jqr=l(),Wt=a("div"),F(ux.$$.fragment),Dqr=l(),xCe=a("p"),Gqr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Oqr=l(),Qc=a("p"),Vqr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),Xqr=o("not"),zqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),Wqr=o("from_pretrained()"),Qqr=o(" to load the model weights."),Hqr=l(),F(b0.$$.fragment),Uqr=l(),Xr=a("div"),F(bx.$$.fragment),Jqr=l(),kCe=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kqr=l(),vn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),SCe=a("code"),ejr=o("model_type"),ojr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(":"),sjr=l(),ke=a("ul"),v0=a("li"),BCe=a("strong"),ljr=o("albert"),ijr=o(" \u2014 "),HK=a("a"),djr=o("FlaxAlbertForSequenceClassification"),cjr=o(" (ALBERT model)"),fjr=l(),F0=a("li"),ICe=a("strong"),mjr=o("bart"),gjr=o(" \u2014 "),UK=a("a"),hjr=o("FlaxBartForSequenceClassification"),pjr=o(" (BART model)"),_jr=l(),T0=a("li"),NCe=a("strong"),ujr=o("bert"),bjr=o(" \u2014 "),JK=a("a"),vjr=o("FlaxBertForSequenceClassification"),Fjr=o(" (BERT model)"),Tjr=l(),M0=a("li"),qCe=a("strong"),Mjr=o("big_bird"),Ejr=o(" \u2014 "),YK=a("a"),Cjr=o("FlaxBigBirdForSequenceClassification"),wjr=o(" (BigBird model)"),Ajr=l(),E0=a("li"),jCe=a("strong"),Ljr=o("distilbert"),yjr=o(" \u2014 "),KK=a("a"),xjr=o("FlaxDistilBertForSequenceClassification"),$jr=o(" (DistilBERT model)"),kjr=l(),C0=a("li"),DCe=a("strong"),Sjr=o("electra"),Rjr=o(" \u2014 "),ZK=a("a"),Pjr=o("FlaxElectraForSequenceClassification"),Bjr=o(" (ELECTRA model)"),Ijr=l(),w0=a("li"),GCe=a("strong"),Njr=o("mbart"),qjr=o(" \u2014 "),eZ=a("a"),jjr=o("FlaxMBartForSequenceClassification"),Djr=o(" (mBART model)"),Gjr=l(),A0=a("li"),OCe=a("strong"),Ojr=o("roberta"),Vjr=o(" \u2014 "),oZ=a("a"),Xjr=o("FlaxRobertaForSequenceClassification"),zjr=o(" (RoBERTa model)"),Wjr=l(),L0=a("li"),VCe=a("strong"),Qjr=o("roformer"),Hjr=o(" \u2014 "),rZ=a("a"),Ujr=o("FlaxRoFormerForSequenceClassification"),Jjr=o(" (RoFormer model)"),Yjr=l(),y0=a("li"),XCe=a("strong"),Kjr=o("xlm-roberta"),Zjr=o(" \u2014 "),tZ=a("a"),eDr=o("FlaxXLMRobertaForSequenceClassification"),oDr=o(" (XLM-RoBERTa model)"),rDr=l(),F(x0.$$.fragment),iGe=l(),Hc=a("h2"),$0=a("a"),zCe=a("span"),F(vx.$$.fragment),tDr=l(),WCe=a("span"),aDr=o("FlaxAutoModelForQuestionAnswering"),dGe=l(),ur=a("div"),F(Fx.$$.fragment),nDr=l(),Uc=a("p"),sDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aZ=a("a"),lDr=o("from_pretrained()"),iDr=o(" class method or the "),nZ=a("a"),dDr=o("from_config()"),cDr=o(` class
method.`),fDr=l(),Tx=a("p"),mDr=o("This class cannot be instantiated directly using "),QCe=a("code"),gDr=o("__init__()"),hDr=o(" (throws an error)."),pDr=l(),Qt=a("div"),F(Mx.$$.fragment),_Dr=l(),HCe=a("p"),uDr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bDr=l(),Jc=a("p"),vDr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),FDr=o("not"),TDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=a("a"),MDr=o("from_pretrained()"),EDr=o(" to load the model weights."),CDr=l(),F(k0.$$.fragment),wDr=l(),zr=a("div"),F(Ex.$$.fragment),ADr=l(),JCe=a("p"),LDr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yDr=l(),Fn=a("p"),xDr=o("The model class to instantiate is selected based on the "),YCe=a("code"),$Dr=o("model_type"),kDr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),PDr=o("pretrained_model_name_or_path"),BDr=o(":"),IDr=l(),Se=a("ul"),S0=a("li"),e5e=a("strong"),NDr=o("albert"),qDr=o(" \u2014 "),lZ=a("a"),jDr=o("FlaxAlbertForQuestionAnswering"),DDr=o(" (ALBERT model)"),GDr=l(),R0=a("li"),o5e=a("strong"),ODr=o("bart"),VDr=o(" \u2014 "),iZ=a("a"),XDr=o("FlaxBartForQuestionAnswering"),zDr=o(" (BART model)"),WDr=l(),P0=a("li"),r5e=a("strong"),QDr=o("bert"),HDr=o(" \u2014 "),dZ=a("a"),UDr=o("FlaxBertForQuestionAnswering"),JDr=o(" (BERT model)"),YDr=l(),B0=a("li"),t5e=a("strong"),KDr=o("big_bird"),ZDr=o(" \u2014 "),cZ=a("a"),eGr=o("FlaxBigBirdForQuestionAnswering"),oGr=o(" (BigBird model)"),rGr=l(),I0=a("li"),a5e=a("strong"),tGr=o("distilbert"),aGr=o(" \u2014 "),fZ=a("a"),nGr=o("FlaxDistilBertForQuestionAnswering"),sGr=o(" (DistilBERT model)"),lGr=l(),N0=a("li"),n5e=a("strong"),iGr=o("electra"),dGr=o(" \u2014 "),mZ=a("a"),cGr=o("FlaxElectraForQuestionAnswering"),fGr=o(" (ELECTRA model)"),mGr=l(),q0=a("li"),s5e=a("strong"),gGr=o("mbart"),hGr=o(" \u2014 "),gZ=a("a"),pGr=o("FlaxMBartForQuestionAnswering"),_Gr=o(" (mBART model)"),uGr=l(),j0=a("li"),l5e=a("strong"),bGr=o("roberta"),vGr=o(" \u2014 "),hZ=a("a"),FGr=o("FlaxRobertaForQuestionAnswering"),TGr=o(" (RoBERTa model)"),MGr=l(),D0=a("li"),i5e=a("strong"),EGr=o("roformer"),CGr=o(" \u2014 "),pZ=a("a"),wGr=o("FlaxRoFormerForQuestionAnswering"),AGr=o(" (RoFormer model)"),LGr=l(),G0=a("li"),d5e=a("strong"),yGr=o("xlm-roberta"),xGr=o(" \u2014 "),_Z=a("a"),$Gr=o("FlaxXLMRobertaForQuestionAnswering"),kGr=o(" (XLM-RoBERTa model)"),SGr=l(),F(O0.$$.fragment),cGe=l(),Yc=a("h2"),V0=a("a"),c5e=a("span"),F(Cx.$$.fragment),RGr=l(),f5e=a("span"),PGr=o("FlaxAutoModelForTokenClassification"),fGe=l(),br=a("div"),F(wx.$$.fragment),BGr=l(),Kc=a("p"),IGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uZ=a("a"),NGr=o("from_pretrained()"),qGr=o(" class method or the "),bZ=a("a"),jGr=o("from_config()"),DGr=o(` class
method.`),GGr=l(),Ax=a("p"),OGr=o("This class cannot be instantiated directly using "),m5e=a("code"),VGr=o("__init__()"),XGr=o(" (throws an error)."),zGr=l(),Ht=a("div"),F(Lx.$$.fragment),WGr=l(),g5e=a("p"),QGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HGr=l(),Zc=a("p"),UGr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),JGr=o("not"),YGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),KGr=o("from_pretrained()"),ZGr=o(" to load the model weights."),eOr=l(),F(X0.$$.fragment),oOr=l(),Wr=a("div"),F(yx.$$.fragment),rOr=l(),p5e=a("p"),tOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aOr=l(),Tn=a("p"),nOr=o("The model class to instantiate is selected based on the "),_5e=a("code"),sOr=o("model_type"),lOr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),iOr=o("pretrained_model_name_or_path"),dOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),cOr=o("pretrained_model_name_or_path"),fOr=o(":"),mOr=l(),Oe=a("ul"),z0=a("li"),v5e=a("strong"),gOr=o("albert"),hOr=o(" \u2014 "),FZ=a("a"),pOr=o("FlaxAlbertForTokenClassification"),_Or=o(" (ALBERT model)"),uOr=l(),W0=a("li"),F5e=a("strong"),bOr=o("bert"),vOr=o(" \u2014 "),TZ=a("a"),FOr=o("FlaxBertForTokenClassification"),TOr=o(" (BERT model)"),MOr=l(),Q0=a("li"),T5e=a("strong"),EOr=o("big_bird"),COr=o(" \u2014 "),MZ=a("a"),wOr=o("FlaxBigBirdForTokenClassification"),AOr=o(" (BigBird model)"),LOr=l(),H0=a("li"),M5e=a("strong"),yOr=o("distilbert"),xOr=o(" \u2014 "),EZ=a("a"),$Or=o("FlaxDistilBertForTokenClassification"),kOr=o(" (DistilBERT model)"),SOr=l(),U0=a("li"),E5e=a("strong"),ROr=o("electra"),POr=o(" \u2014 "),CZ=a("a"),BOr=o("FlaxElectraForTokenClassification"),IOr=o(" (ELECTRA model)"),NOr=l(),J0=a("li"),C5e=a("strong"),qOr=o("roberta"),jOr=o(" \u2014 "),wZ=a("a"),DOr=o("FlaxRobertaForTokenClassification"),GOr=o(" (RoBERTa model)"),OOr=l(),Y0=a("li"),w5e=a("strong"),VOr=o("roformer"),XOr=o(" \u2014 "),AZ=a("a"),zOr=o("FlaxRoFormerForTokenClassification"),WOr=o(" (RoFormer model)"),QOr=l(),K0=a("li"),A5e=a("strong"),HOr=o("xlm-roberta"),UOr=o(" \u2014 "),LZ=a("a"),JOr=o("FlaxXLMRobertaForTokenClassification"),YOr=o(" (XLM-RoBERTa model)"),KOr=l(),F(Z0.$$.fragment),mGe=l(),ef=a("h2"),ew=a("a"),L5e=a("span"),F(xx.$$.fragment),ZOr=l(),y5e=a("span"),eVr=o("FlaxAutoModelForMultipleChoice"),gGe=l(),vr=a("div"),F($x.$$.fragment),oVr=l(),of=a("p"),rVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yZ=a("a"),tVr=o("from_pretrained()"),aVr=o(" class method or the "),xZ=a("a"),nVr=o("from_config()"),sVr=o(` class
method.`),lVr=l(),kx=a("p"),iVr=o("This class cannot be instantiated directly using "),x5e=a("code"),dVr=o("__init__()"),cVr=o(" (throws an error)."),fVr=l(),Ut=a("div"),F(Sx.$$.fragment),mVr=l(),$5e=a("p"),gVr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hVr=l(),rf=a("p"),pVr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),_Vr=o("not"),uVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),bVr=o("from_pretrained()"),vVr=o(" to load the model weights."),FVr=l(),F(ow.$$.fragment),TVr=l(),Qr=a("div"),F(Rx.$$.fragment),MVr=l(),S5e=a("p"),EVr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CVr=l(),Mn=a("p"),wVr=o("The model class to instantiate is selected based on the "),R5e=a("code"),AVr=o("model_type"),LVr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),yVr=o("pretrained_model_name_or_path"),xVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),$Vr=o("pretrained_model_name_or_path"),kVr=o(":"),SVr=l(),Ve=a("ul"),rw=a("li"),I5e=a("strong"),RVr=o("albert"),PVr=o(" \u2014 "),kZ=a("a"),BVr=o("FlaxAlbertForMultipleChoice"),IVr=o(" (ALBERT model)"),NVr=l(),tw=a("li"),N5e=a("strong"),qVr=o("bert"),jVr=o(" \u2014 "),SZ=a("a"),DVr=o("FlaxBertForMultipleChoice"),GVr=o(" (BERT model)"),OVr=l(),aw=a("li"),q5e=a("strong"),VVr=o("big_bird"),XVr=o(" \u2014 "),RZ=a("a"),zVr=o("FlaxBigBirdForMultipleChoice"),WVr=o(" (BigBird model)"),QVr=l(),nw=a("li"),j5e=a("strong"),HVr=o("distilbert"),UVr=o(" \u2014 "),PZ=a("a"),JVr=o("FlaxDistilBertForMultipleChoice"),YVr=o(" (DistilBERT model)"),KVr=l(),sw=a("li"),D5e=a("strong"),ZVr=o("electra"),eXr=o(" \u2014 "),BZ=a("a"),oXr=o("FlaxElectraForMultipleChoice"),rXr=o(" (ELECTRA model)"),tXr=l(),lw=a("li"),G5e=a("strong"),aXr=o("roberta"),nXr=o(" \u2014 "),IZ=a("a"),sXr=o("FlaxRobertaForMultipleChoice"),lXr=o(" (RoBERTa model)"),iXr=l(),iw=a("li"),O5e=a("strong"),dXr=o("roformer"),cXr=o(" \u2014 "),NZ=a("a"),fXr=o("FlaxRoFormerForMultipleChoice"),mXr=o(" (RoFormer model)"),gXr=l(),dw=a("li"),V5e=a("strong"),hXr=o("xlm-roberta"),pXr=o(" \u2014 "),qZ=a("a"),_Xr=o("FlaxXLMRobertaForMultipleChoice"),uXr=o(" (XLM-RoBERTa model)"),bXr=l(),F(cw.$$.fragment),hGe=l(),tf=a("h2"),fw=a("a"),X5e=a("span"),F(Px.$$.fragment),vXr=l(),z5e=a("span"),FXr=o("FlaxAutoModelForNextSentencePrediction"),pGe=l(),Fr=a("div"),F(Bx.$$.fragment),TXr=l(),af=a("p"),MXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jZ=a("a"),EXr=o("from_pretrained()"),CXr=o(" class method or the "),DZ=a("a"),wXr=o("from_config()"),AXr=o(` class
method.`),LXr=l(),Ix=a("p"),yXr=o("This class cannot be instantiated directly using "),W5e=a("code"),xXr=o("__init__()"),$Xr=o(" (throws an error)."),kXr=l(),Jt=a("div"),F(Nx.$$.fragment),SXr=l(),Q5e=a("p"),RXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PXr=l(),nf=a("p"),BXr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),IXr=o("not"),NXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("a"),qXr=o("from_pretrained()"),jXr=o(" to load the model weights."),DXr=l(),F(mw.$$.fragment),GXr=l(),Hr=a("div"),F(qx.$$.fragment),OXr=l(),U5e=a("p"),VXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XXr=l(),En=a("p"),zXr=o("The model class to instantiate is selected based on the "),J5e=a("code"),WXr=o("model_type"),QXr=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),HXr=o("pretrained_model_name_or_path"),UXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(":"),KXr=l(),Z5e=a("ul"),gw=a("li"),e3e=a("strong"),ZXr=o("bert"),ezr=o(" \u2014 "),OZ=a("a"),ozr=o("FlaxBertForNextSentencePrediction"),rzr=o(" (BERT model)"),tzr=l(),F(hw.$$.fragment),_Ge=l(),sf=a("h2"),pw=a("a"),o3e=a("span"),F(jx.$$.fragment),azr=l(),r3e=a("span"),nzr=o("FlaxAutoModelForImageClassification"),uGe=l(),Tr=a("div"),F(Dx.$$.fragment),szr=l(),lf=a("p"),lzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VZ=a("a"),izr=o("from_pretrained()"),dzr=o(" class method or the "),XZ=a("a"),czr=o("from_config()"),fzr=o(` class
method.`),mzr=l(),Gx=a("p"),gzr=o("This class cannot be instantiated directly using "),t3e=a("code"),hzr=o("__init__()"),pzr=o(" (throws an error)."),_zr=l(),Yt=a("div"),F(Ox.$$.fragment),uzr=l(),a3e=a("p"),bzr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vzr=l(),df=a("p"),Fzr=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),Tzr=o("not"),Mzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),Ezr=o("from_pretrained()"),Czr=o(" to load the model weights."),wzr=l(),F(_w.$$.fragment),Azr=l(),Ur=a("div"),F(Vx.$$.fragment),Lzr=l(),s3e=a("p"),yzr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xzr=l(),Cn=a("p"),$zr=o("The model class to instantiate is selected based on the "),l3e=a("code"),kzr=o("model_type"),Szr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),Rzr=o("pretrained_model_name_or_path"),Pzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),Bzr=o("pretrained_model_name_or_path"),Izr=o(":"),Nzr=l(),Xx=a("ul"),uw=a("li"),c3e=a("strong"),qzr=o("beit"),jzr=o(" \u2014 "),WZ=a("a"),Dzr=o("FlaxBeitForImageClassification"),Gzr=o(" (BEiT model)"),Ozr=l(),bw=a("li"),f3e=a("strong"),Vzr=o("vit"),Xzr=o(" \u2014 "),QZ=a("a"),zzr=o("FlaxViTForImageClassification"),Wzr=o(" (ViT model)"),Qzr=l(),F(vw.$$.fragment),bGe=l(),cf=a("h2"),Fw=a("a"),m3e=a("span"),F(zx.$$.fragment),Hzr=l(),g3e=a("span"),Uzr=o("FlaxAutoModelForVision2Seq"),vGe=l(),Mr=a("div"),F(Wx.$$.fragment),Jzr=l(),ff=a("p"),Yzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=a("a"),Kzr=o("from_pretrained()"),Zzr=o(" class method or the "),UZ=a("a"),eWr=o("from_config()"),oWr=o(` class
method.`),rWr=l(),Qx=a("p"),tWr=o("This class cannot be instantiated directly using "),h3e=a("code"),aWr=o("__init__()"),nWr=o(" (throws an error)."),sWr=l(),Kt=a("div"),F(Hx.$$.fragment),lWr=l(),p3e=a("p"),iWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dWr=l(),mf=a("p"),cWr=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),fWr=o("not"),mWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),gWr=o("from_pretrained()"),hWr=o(" to load the model weights."),pWr=l(),F(Tw.$$.fragment),_Wr=l(),Jr=a("div"),F(Ux.$$.fragment),uWr=l(),u3e=a("p"),bWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vWr=l(),wn=a("p"),FWr=o("The model class to instantiate is selected based on the "),b3e=a("code"),TWr=o("model_type"),MWr=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),EWr=o("pretrained_model_name_or_path"),CWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),wWr=o("pretrained_model_name_or_path"),AWr=o(":"),LWr=l(),T3e=a("ul"),Mw=a("li"),M3e=a("strong"),yWr=o("vision-encoder-decoder"),xWr=o(" \u2014 "),YZ=a("a"),$Wr=o("FlaxVisionEncoderDecoderModel"),kWr=o(" (Vision Encoder decoder model)"),SWr=l(),F(Ew.$$.fragment),this.h()},l(f){const u=URt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Jx=s(p);m=n(Jx,"A",{id:!0,class:!0,href:!0});var E3e=s(m);_=n(E3e,"SPAN",{});var C3e=s(_);T(d.$$.fragment,C3e),C3e.forEach(t),E3e.forEach(t),h=i(Jx),Mo=n(Jx,"SPAN",{});var w3e=s(Mo);mi=r(w3e,"Auto Classes"),w3e.forEach(t),Jx.forEach(t),_f=i(f),rt=n(f,"P",{});var Yx=s(rt);gi=r(Yx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Yx,"CODE",{});var A3e=s(hi);G6=r(A3e,"from_pretrained()"),A3e.forEach(t),uf=r(Yx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Yx.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var L3e=s(Ln);O6=r(L3e,"AutoConfig"),L3e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var y3e=s(xn);V6=r(y3e,"AutoModel"),y3e.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var x3e=s($n);X6=r(x3e,"AutoTokenizer"),x3e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Kx=s(Ae);ck=r(Kx,"will create a model that is an instance of "),bi=n(Kx,"A",{href:!0});var $3e=s(bi);fk=r($3e,"BertModel"),$3e.forEach(t),mk=r(Kx,"."),Kx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Zx=s(wa);gk=r(Zx,"There is one class of "),vf=n(Zx,"CODE",{});var k3e=s(vf);hk=r(k3e,"AutoModel"),k3e.forEach(t),yVe=r(Zx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Zx.forEach(t),uje=i(f),vi=n(f,"H2",{class:!0});var e$=s(vi);Ff=n(e$,"A",{id:!0,class:!0,href:!0});var S3e=s(Ff);Xoe=n(S3e,"SPAN",{});var R3e=s(Xoe);T(z6.$$.fragment,R3e),R3e.forEach(t),S3e.forEach(t),xVe=i(e$),zoe=n(e$,"SPAN",{});var P3e=s(zoe);$Ve=r(P3e,"Extending the Auto Classes"),P3e.forEach(t),e$.forEach(t),bje=i(f),kn=n(f,"P",{});var gf=s(kn);kVe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Woe=n(gf,"CODE",{});var B3e=s(Woe);SVe=r(B3e,"NewModel"),B3e.forEach(t),RVe=r(gf,", make sure you have a "),Qoe=n(gf,"CODE",{});var I3e=s(Qoe);PVe=r(I3e,"NewModelConfig"),I3e.forEach(t),BVe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),vje=i(f),T(W6.$$.fragment,f),Fje=i(f),pk=n(f,"P",{});var N3e=s(pk);IVe=r(N3e,"You will then be able to use the auto classes like you would usually do!"),N3e.forEach(t),Tje=i(f),T(Tf.$$.fragment,f),Mje=i(f),Fi=n(f,"H2",{class:!0});var o$=s(Fi);Mf=n(o$,"A",{id:!0,class:!0,href:!0});var q3e=s(Mf);Hoe=n(q3e,"SPAN",{});var j3e=s(Hoe);T(Q6.$$.fragment,j3e),j3e.forEach(t),q3e.forEach(t),NVe=i(o$),Uoe=n(o$,"SPAN",{});var D3e=s(Uoe);qVe=r(D3e,"AutoConfig"),D3e.forEach(t),o$.forEach(t),Eje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(H6.$$.fragment,et),jVe=i(et),U6=n(et,"P",{});var r$=s(U6);DVe=r(r$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_k=n(r$,"A",{href:!0});var G3e=s(_k);GVe=r(G3e,"from_pretrained()"),G3e.forEach(t),OVe=r(r$," class method."),r$.forEach(t),VVe=i(et),J6=n(et,"P",{});var t$=s(J6);XVe=r(t$,"This class cannot be instantiated directly using "),Joe=n(t$,"CODE",{});var O3e=s(Joe);zVe=r(O3e,"__init__()"),O3e.forEach(t),WVe=r(t$," (throws an error)."),t$.forEach(t),QVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Y6.$$.fragment,ot),HVe=i(ot),Yoe=n(ot,"P",{});var V3e=s(Yoe);UVe=r(V3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),V3e.forEach(t),JVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);YVe=r(hf,"The configuration class to instantiate is selected based on the "),Koe=n(hf,"CODE",{});var X3e=s(Koe);KVe=r(X3e,"model_type"),X3e.forEach(t),ZVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zoe=n(hf,"CODE",{});var z3e=s(Zoe);eXe=r(z3e,"pretrained_model_name_or_path"),z3e.forEach(t),oXe=r(hf,":"),hf.forEach(t),rXe=i(ot),A=n(ot,"UL",{});var L=s(A);Ef=n(L,"LI",{});var Cw=s(Ef);ere=n(Cw,"STRONG",{});var W3e=s(ere);tXe=r(W3e,"albert"),W3e.forEach(t),aXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var Q3e=s(uk);nXe=r(Q3e,"AlbertConfig"),Q3e.forEach(t),sXe=r(Cw," (ALBERT model)"),Cw.forEach(t),lXe=i(L),Cf=n(L,"LI",{});var ww=s(Cf);ore=n(ww,"STRONG",{});var H3e=s(ore);iXe=r(H3e,"bart"),H3e.forEach(t),dXe=r(ww," \u2014 "),bk=n(ww,"A",{href:!0});var U3e=s(bk);cXe=r(U3e,"BartConfig"),U3e.forEach(t),fXe=r(ww," (BART model)"),ww.forEach(t),mXe=i(L),wf=n(L,"LI",{});var Aw=s(wf);rre=n(Aw,"STRONG",{});var J3e=s(rre);gXe=r(J3e,"beit"),J3e.forEach(t),hXe=r(Aw," \u2014 "),vk=n(Aw,"A",{href:!0});var Y3e=s(vk);pXe=r(Y3e,"BeitConfig"),Y3e.forEach(t),_Xe=r(Aw," (BEiT model)"),Aw.forEach(t),uXe=i(L),Af=n(L,"LI",{});var Lw=s(Af);tre=n(Lw,"STRONG",{});var K3e=s(tre);bXe=r(K3e,"bert"),K3e.forEach(t),vXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var Z3e=s(Fk);FXe=r(Z3e,"BertConfig"),Z3e.forEach(t),TXe=r(Lw," (BERT model)"),Lw.forEach(t),MXe=i(L),Lf=n(L,"LI",{});var yw=s(Lf);are=n(yw,"STRONG",{});var e0e=s(are);EXe=r(e0e,"bert-generation"),e0e.forEach(t),CXe=r(yw," \u2014 "),Tk=n(yw,"A",{href:!0});var o0e=s(Tk);wXe=r(o0e,"BertGenerationConfig"),o0e.forEach(t),AXe=r(yw," (Bert Generation model)"),yw.forEach(t),LXe=i(L),yf=n(L,"LI",{});var xw=s(yf);nre=n(xw,"STRONG",{});var r0e=s(nre);yXe=r(r0e,"big_bird"),r0e.forEach(t),xXe=r(xw," \u2014 "),Mk=n(xw,"A",{href:!0});var t0e=s(Mk);$Xe=r(t0e,"BigBirdConfig"),t0e.forEach(t),kXe=r(xw," (BigBird model)"),xw.forEach(t),SXe=i(L),xf=n(L,"LI",{});var $w=s(xf);sre=n($w,"STRONG",{});var a0e=s(sre);RXe=r(a0e,"bigbird_pegasus"),a0e.forEach(t),PXe=r($w," \u2014 "),Ek=n($w,"A",{href:!0});var n0e=s(Ek);BXe=r(n0e,"BigBirdPegasusConfig"),n0e.forEach(t),IXe=r($w," (BigBird-Pegasus model)"),$w.forEach(t),NXe=i(L),$f=n(L,"LI",{});var kw=s($f);lre=n(kw,"STRONG",{});var s0e=s(lre);qXe=r(s0e,"blenderbot"),s0e.forEach(t),jXe=r(kw," \u2014 "),Ck=n(kw,"A",{href:!0});var l0e=s(Ck);DXe=r(l0e,"BlenderbotConfig"),l0e.forEach(t),GXe=r(kw," (Blenderbot model)"),kw.forEach(t),OXe=i(L),kf=n(L,"LI",{});var Sw=s(kf);ire=n(Sw,"STRONG",{});var i0e=s(ire);VXe=r(i0e,"blenderbot-small"),i0e.forEach(t),XXe=r(Sw," \u2014 "),wk=n(Sw,"A",{href:!0});var d0e=s(wk);zXe=r(d0e,"BlenderbotSmallConfig"),d0e.forEach(t),WXe=r(Sw," (BlenderbotSmall model)"),Sw.forEach(t),QXe=i(L),Sf=n(L,"LI",{});var Rw=s(Sf);dre=n(Rw,"STRONG",{});var c0e=s(dre);HXe=r(c0e,"bloom"),c0e.forEach(t),UXe=r(Rw," \u2014 "),Ak=n(Rw,"A",{href:!0});var f0e=s(Ak);JXe=r(f0e,"BloomConfig"),f0e.forEach(t),YXe=r(Rw," (BLOOM model)"),Rw.forEach(t),KXe=i(L),Rf=n(L,"LI",{});var Pw=s(Rf);cre=n(Pw,"STRONG",{});var m0e=s(cre);ZXe=r(m0e,"camembert"),m0e.forEach(t),eze=r(Pw," \u2014 "),Lk=n(Pw,"A",{href:!0});var g0e=s(Lk);oze=r(g0e,"CamembertConfig"),g0e.forEach(t),rze=r(Pw," (CamemBERT model)"),Pw.forEach(t),tze=i(L),Pf=n(L,"LI",{});var Bw=s(Pf);fre=n(Bw,"STRONG",{});var h0e=s(fre);aze=r(h0e,"canine"),h0e.forEach(t),nze=r(Bw," \u2014 "),yk=n(Bw,"A",{href:!0});var p0e=s(yk);sze=r(p0e,"CanineConfig"),p0e.forEach(t),lze=r(Bw," (CANINE model)"),Bw.forEach(t),ize=i(L),Bf=n(L,"LI",{});var Iw=s(Bf);mre=n(Iw,"STRONG",{});var _0e=s(mre);dze=r(_0e,"clip"),_0e.forEach(t),cze=r(Iw," \u2014 "),xk=n(Iw,"A",{href:!0});var u0e=s(xk);fze=r(u0e,"CLIPConfig"),u0e.forEach(t),mze=r(Iw," (CLIP model)"),Iw.forEach(t),gze=i(L),If=n(L,"LI",{});var Nw=s(If);gre=n(Nw,"STRONG",{});var b0e=s(gre);hze=r(b0e,"convbert"),b0e.forEach(t),pze=r(Nw," \u2014 "),$k=n(Nw,"A",{href:!0});var v0e=s($k);_ze=r(v0e,"ConvBertConfig"),v0e.forEach(t),uze=r(Nw," (ConvBERT model)"),Nw.forEach(t),bze=i(L),Nf=n(L,"LI",{});var qw=s(Nf);hre=n(qw,"STRONG",{});var F0e=s(hre);vze=r(F0e,"convnext"),F0e.forEach(t),Fze=r(qw," \u2014 "),kk=n(qw,"A",{href:!0});var T0e=s(kk);Tze=r(T0e,"ConvNextConfig"),T0e.forEach(t),Mze=r(qw," (ConvNeXT model)"),qw.forEach(t),Eze=i(L),qf=n(L,"LI",{});var jw=s(qf);pre=n(jw,"STRONG",{});var M0e=s(pre);Cze=r(M0e,"ctrl"),M0e.forEach(t),wze=r(jw," \u2014 "),Sk=n(jw,"A",{href:!0});var E0e=s(Sk);Aze=r(E0e,"CTRLConfig"),E0e.forEach(t),Lze=r(jw," (CTRL model)"),jw.forEach(t),yze=i(L),jf=n(L,"LI",{});var Dw=s(jf);_re=n(Dw,"STRONG",{});var C0e=s(_re);xze=r(C0e,"cvt"),C0e.forEach(t),$ze=r(Dw," \u2014 "),Rk=n(Dw,"A",{href:!0});var w0e=s(Rk);kze=r(w0e,"CvtConfig"),w0e.forEach(t),Sze=r(Dw," (CvT model)"),Dw.forEach(t),Rze=i(L),Df=n(L,"LI",{});var Gw=s(Df);ure=n(Gw,"STRONG",{});var A0e=s(ure);Pze=r(A0e,"data2vec-audio"),A0e.forEach(t),Bze=r(Gw," \u2014 "),Pk=n(Gw,"A",{href:!0});var L0e=s(Pk);Ize=r(L0e,"Data2VecAudioConfig"),L0e.forEach(t),Nze=r(Gw," (Data2VecAudio model)"),Gw.forEach(t),qze=i(L),Gf=n(L,"LI",{});var Ow=s(Gf);bre=n(Ow,"STRONG",{});var y0e=s(bre);jze=r(y0e,"data2vec-text"),y0e.forEach(t),Dze=r(Ow," \u2014 "),Bk=n(Ow,"A",{href:!0});var x0e=s(Bk);Gze=r(x0e,"Data2VecTextConfig"),x0e.forEach(t),Oze=r(Ow," (Data2VecText model)"),Ow.forEach(t),Vze=i(L),Of=n(L,"LI",{});var Vw=s(Of);vre=n(Vw,"STRONG",{});var $0e=s(vre);Xze=r($0e,"data2vec-vision"),$0e.forEach(t),zze=r(Vw," \u2014 "),Ik=n(Vw,"A",{href:!0});var k0e=s(Ik);Wze=r(k0e,"Data2VecVisionConfig"),k0e.forEach(t),Qze=r(Vw," (Data2VecVision model)"),Vw.forEach(t),Hze=i(L),Vf=n(L,"LI",{});var Xw=s(Vf);Fre=n(Xw,"STRONG",{});var S0e=s(Fre);Uze=r(S0e,"deberta"),S0e.forEach(t),Jze=r(Xw," \u2014 "),Nk=n(Xw,"A",{href:!0});var R0e=s(Nk);Yze=r(R0e,"DebertaConfig"),R0e.forEach(t),Kze=r(Xw," (DeBERTa model)"),Xw.forEach(t),Zze=i(L),Xf=n(L,"LI",{});var zw=s(Xf);Tre=n(zw,"STRONG",{});var P0e=s(Tre);eWe=r(P0e,"deberta-v2"),P0e.forEach(t),oWe=r(zw," \u2014 "),qk=n(zw,"A",{href:!0});var B0e=s(qk);rWe=r(B0e,"DebertaV2Config"),B0e.forEach(t),tWe=r(zw," (DeBERTa-v2 model)"),zw.forEach(t),aWe=i(L),zf=n(L,"LI",{});var Ww=s(zf);Mre=n(Ww,"STRONG",{});var I0e=s(Mre);nWe=r(I0e,"decision_transformer"),I0e.forEach(t),sWe=r(Ww," \u2014 "),jk=n(Ww,"A",{href:!0});var PWr=s(jk);lWe=r(PWr,"DecisionTransformerConfig"),PWr.forEach(t),iWe=r(Ww," (Decision Transformer model)"),Ww.forEach(t),dWe=i(L),Wf=n(L,"LI",{});var N0e=s(Wf);Ere=n(N0e,"STRONG",{});var BWr=s(Ere);cWe=r(BWr,"deit"),BWr.forEach(t),fWe=r(N0e," \u2014 "),Dk=n(N0e,"A",{href:!0});var IWr=s(Dk);mWe=r(IWr,"DeiTConfig"),IWr.forEach(t),gWe=r(N0e," (DeiT model)"),N0e.forEach(t),hWe=i(L),Qf=n(L,"LI",{});var q0e=s(Qf);Cre=n(q0e,"STRONG",{});var NWr=s(Cre);pWe=r(NWr,"detr"),NWr.forEach(t),_We=r(q0e," \u2014 "),Gk=n(q0e,"A",{href:!0});var qWr=s(Gk);uWe=r(qWr,"DetrConfig"),qWr.forEach(t),bWe=r(q0e," (DETR model)"),q0e.forEach(t),vWe=i(L),Hf=n(L,"LI",{});var j0e=s(Hf);wre=n(j0e,"STRONG",{});var jWr=s(wre);FWe=r(jWr,"distilbert"),jWr.forEach(t),TWe=r(j0e," \u2014 "),Ok=n(j0e,"A",{href:!0});var DWr=s(Ok);MWe=r(DWr,"DistilBertConfig"),DWr.forEach(t),EWe=r(j0e," (DistilBERT model)"),j0e.forEach(t),CWe=i(L),Uf=n(L,"LI",{});var D0e=s(Uf);Are=n(D0e,"STRONG",{});var GWr=s(Are);wWe=r(GWr,"dpr"),GWr.forEach(t),AWe=r(D0e," \u2014 "),Vk=n(D0e,"A",{href:!0});var OWr=s(Vk);LWe=r(OWr,"DPRConfig"),OWr.forEach(t),yWe=r(D0e," (DPR model)"),D0e.forEach(t),xWe=i(L),Jf=n(L,"LI",{});var G0e=s(Jf);Lre=n(G0e,"STRONG",{});var VWr=s(Lre);$We=r(VWr,"dpt"),VWr.forEach(t),kWe=r(G0e," \u2014 "),Xk=n(G0e,"A",{href:!0});var XWr=s(Xk);SWe=r(XWr,"DPTConfig"),XWr.forEach(t),RWe=r(G0e," (DPT model)"),G0e.forEach(t),PWe=i(L),Yf=n(L,"LI",{});var O0e=s(Yf);yre=n(O0e,"STRONG",{});var zWr=s(yre);BWe=r(zWr,"electra"),zWr.forEach(t),IWe=r(O0e," \u2014 "),zk=n(O0e,"A",{href:!0});var WWr=s(zk);NWe=r(WWr,"ElectraConfig"),WWr.forEach(t),qWe=r(O0e," (ELECTRA model)"),O0e.forEach(t),jWe=i(L),Kf=n(L,"LI",{});var V0e=s(Kf);xre=n(V0e,"STRONG",{});var QWr=s(xre);DWe=r(QWr,"encoder-decoder"),QWr.forEach(t),GWe=r(V0e," \u2014 "),Wk=n(V0e,"A",{href:!0});var HWr=s(Wk);OWe=r(HWr,"EncoderDecoderConfig"),HWr.forEach(t),VWe=r(V0e," (Encoder decoder model)"),V0e.forEach(t),XWe=i(L),Zf=n(L,"LI",{});var X0e=s(Zf);$re=n(X0e,"STRONG",{});var UWr=s($re);zWe=r(UWr,"flaubert"),UWr.forEach(t),WWe=r(X0e," \u2014 "),Qk=n(X0e,"A",{href:!0});var JWr=s(Qk);QWe=r(JWr,"FlaubertConfig"),JWr.forEach(t),HWe=r(X0e," (FlauBERT model)"),X0e.forEach(t),UWe=i(L),em=n(L,"LI",{});var z0e=s(em);kre=n(z0e,"STRONG",{});var YWr=s(kre);JWe=r(YWr,"flava"),YWr.forEach(t),YWe=r(z0e," \u2014 "),Hk=n(z0e,"A",{href:!0});var KWr=s(Hk);KWe=r(KWr,"FlavaConfig"),KWr.forEach(t),ZWe=r(z0e," (FLAVA model)"),z0e.forEach(t),eQe=i(L),om=n(L,"LI",{});var W0e=s(om);Sre=n(W0e,"STRONG",{});var ZWr=s(Sre);oQe=r(ZWr,"fnet"),ZWr.forEach(t),rQe=r(W0e," \u2014 "),Uk=n(W0e,"A",{href:!0});var eQr=s(Uk);tQe=r(eQr,"FNetConfig"),eQr.forEach(t),aQe=r(W0e," (FNet model)"),W0e.forEach(t),nQe=i(L),rm=n(L,"LI",{});var Q0e=s(rm);Rre=n(Q0e,"STRONG",{});var oQr=s(Rre);sQe=r(oQr,"fsmt"),oQr.forEach(t),lQe=r(Q0e," \u2014 "),Jk=n(Q0e,"A",{href:!0});var rQr=s(Jk);iQe=r(rQr,"FSMTConfig"),rQr.forEach(t),dQe=r(Q0e," (FairSeq Machine-Translation model)"),Q0e.forEach(t),cQe=i(L),tm=n(L,"LI",{});var H0e=s(tm);Pre=n(H0e,"STRONG",{});var tQr=s(Pre);fQe=r(tQr,"funnel"),tQr.forEach(t),mQe=r(H0e," \u2014 "),Yk=n(H0e,"A",{href:!0});var aQr=s(Yk);gQe=r(aQr,"FunnelConfig"),aQr.forEach(t),hQe=r(H0e," (Funnel Transformer model)"),H0e.forEach(t),pQe=i(L),am=n(L,"LI",{});var U0e=s(am);Bre=n(U0e,"STRONG",{});var nQr=s(Bre);_Qe=r(nQr,"glpn"),nQr.forEach(t),uQe=r(U0e," \u2014 "),Kk=n(U0e,"A",{href:!0});var sQr=s(Kk);bQe=r(sQr,"GLPNConfig"),sQr.forEach(t),vQe=r(U0e," (GLPN model)"),U0e.forEach(t),FQe=i(L),nm=n(L,"LI",{});var J0e=s(nm);Ire=n(J0e,"STRONG",{});var lQr=s(Ire);TQe=r(lQr,"gpt2"),lQr.forEach(t),MQe=r(J0e," \u2014 "),Zk=n(J0e,"A",{href:!0});var iQr=s(Zk);EQe=r(iQr,"GPT2Config"),iQr.forEach(t),CQe=r(J0e," (OpenAI GPT-2 model)"),J0e.forEach(t),wQe=i(L),sm=n(L,"LI",{});var Y0e=s(sm);Nre=n(Y0e,"STRONG",{});var dQr=s(Nre);AQe=r(dQr,"gpt_neo"),dQr.forEach(t),LQe=r(Y0e," \u2014 "),eS=n(Y0e,"A",{href:!0});var cQr=s(eS);yQe=r(cQr,"GPTNeoConfig"),cQr.forEach(t),xQe=r(Y0e," (GPT Neo model)"),Y0e.forEach(t),$Qe=i(L),lm=n(L,"LI",{});var K0e=s(lm);qre=n(K0e,"STRONG",{});var fQr=s(qre);kQe=r(fQr,"gpt_neox"),fQr.forEach(t),SQe=r(K0e," \u2014 "),oS=n(K0e,"A",{href:!0});var mQr=s(oS);RQe=r(mQr,"GPTNeoXConfig"),mQr.forEach(t),PQe=r(K0e," (GPT NeoX model)"),K0e.forEach(t),BQe=i(L),im=n(L,"LI",{});var Z0e=s(im);jre=n(Z0e,"STRONG",{});var gQr=s(jre);IQe=r(gQr,"gptj"),gQr.forEach(t),NQe=r(Z0e," \u2014 "),rS=n(Z0e,"A",{href:!0});var hQr=s(rS);qQe=r(hQr,"GPTJConfig"),hQr.forEach(t),jQe=r(Z0e," (GPT-J model)"),Z0e.forEach(t),DQe=i(L),dm=n(L,"LI",{});var ewe=s(dm);Dre=n(ewe,"STRONG",{});var pQr=s(Dre);GQe=r(pQr,"hubert"),pQr.forEach(t),OQe=r(ewe," \u2014 "),tS=n(ewe,"A",{href:!0});var _Qr=s(tS);VQe=r(_Qr,"HubertConfig"),_Qr.forEach(t),XQe=r(ewe," (Hubert model)"),ewe.forEach(t),zQe=i(L),cm=n(L,"LI",{});var owe=s(cm);Gre=n(owe,"STRONG",{});var uQr=s(Gre);WQe=r(uQr,"ibert"),uQr.forEach(t),QQe=r(owe," \u2014 "),aS=n(owe,"A",{href:!0});var bQr=s(aS);HQe=r(bQr,"IBertConfig"),bQr.forEach(t),UQe=r(owe," (I-BERT model)"),owe.forEach(t),JQe=i(L),fm=n(L,"LI",{});var rwe=s(fm);Ore=n(rwe,"STRONG",{});var vQr=s(Ore);YQe=r(vQr,"imagegpt"),vQr.forEach(t),KQe=r(rwe," \u2014 "),nS=n(rwe,"A",{href:!0});var FQr=s(nS);ZQe=r(FQr,"ImageGPTConfig"),FQr.forEach(t),eHe=r(rwe," (ImageGPT model)"),rwe.forEach(t),oHe=i(L),mm=n(L,"LI",{});var twe=s(mm);Vre=n(twe,"STRONG",{});var TQr=s(Vre);rHe=r(TQr,"layoutlm"),TQr.forEach(t),tHe=r(twe," \u2014 "),sS=n(twe,"A",{href:!0});var MQr=s(sS);aHe=r(MQr,"LayoutLMConfig"),MQr.forEach(t),nHe=r(twe," (LayoutLM model)"),twe.forEach(t),sHe=i(L),gm=n(L,"LI",{});var awe=s(gm);Xre=n(awe,"STRONG",{});var EQr=s(Xre);lHe=r(EQr,"layoutlmv2"),EQr.forEach(t),iHe=r(awe," \u2014 "),lS=n(awe,"A",{href:!0});var CQr=s(lS);dHe=r(CQr,"LayoutLMv2Config"),CQr.forEach(t),cHe=r(awe," (LayoutLMv2 model)"),awe.forEach(t),fHe=i(L),hm=n(L,"LI",{});var nwe=s(hm);zre=n(nwe,"STRONG",{});var wQr=s(zre);mHe=r(wQr,"layoutlmv3"),wQr.forEach(t),gHe=r(nwe," \u2014 "),iS=n(nwe,"A",{href:!0});var AQr=s(iS);hHe=r(AQr,"LayoutLMv3Config"),AQr.forEach(t),pHe=r(nwe," (LayoutLMv3 model)"),nwe.forEach(t),_He=i(L),pm=n(L,"LI",{});var swe=s(pm);Wre=n(swe,"STRONG",{});var LQr=s(Wre);uHe=r(LQr,"led"),LQr.forEach(t),bHe=r(swe," \u2014 "),dS=n(swe,"A",{href:!0});var yQr=s(dS);vHe=r(yQr,"LEDConfig"),yQr.forEach(t),FHe=r(swe," (LED model)"),swe.forEach(t),THe=i(L),_m=n(L,"LI",{});var lwe=s(_m);Qre=n(lwe,"STRONG",{});var xQr=s(Qre);MHe=r(xQr,"levit"),xQr.forEach(t),EHe=r(lwe," \u2014 "),cS=n(lwe,"A",{href:!0});var $Qr=s(cS);CHe=r($Qr,"LevitConfig"),$Qr.forEach(t),wHe=r(lwe," (LeViT model)"),lwe.forEach(t),AHe=i(L),um=n(L,"LI",{});var iwe=s(um);Hre=n(iwe,"STRONG",{});var kQr=s(Hre);LHe=r(kQr,"longformer"),kQr.forEach(t),yHe=r(iwe," \u2014 "),fS=n(iwe,"A",{href:!0});var SQr=s(fS);xHe=r(SQr,"LongformerConfig"),SQr.forEach(t),$He=r(iwe," (Longformer model)"),iwe.forEach(t),kHe=i(L),bm=n(L,"LI",{});var dwe=s(bm);Ure=n(dwe,"STRONG",{});var RQr=s(Ure);SHe=r(RQr,"luke"),RQr.forEach(t),RHe=r(dwe," \u2014 "),mS=n(dwe,"A",{href:!0});var PQr=s(mS);PHe=r(PQr,"LukeConfig"),PQr.forEach(t),BHe=r(dwe," (LUKE model)"),dwe.forEach(t),IHe=i(L),vm=n(L,"LI",{});var cwe=s(vm);Jre=n(cwe,"STRONG",{});var BQr=s(Jre);NHe=r(BQr,"lxmert"),BQr.forEach(t),qHe=r(cwe," \u2014 "),gS=n(cwe,"A",{href:!0});var IQr=s(gS);jHe=r(IQr,"LxmertConfig"),IQr.forEach(t),DHe=r(cwe," (LXMERT model)"),cwe.forEach(t),GHe=i(L),Fm=n(L,"LI",{});var fwe=s(Fm);Yre=n(fwe,"STRONG",{});var NQr=s(Yre);OHe=r(NQr,"m2m_100"),NQr.forEach(t),VHe=r(fwe," \u2014 "),hS=n(fwe,"A",{href:!0});var qQr=s(hS);XHe=r(qQr,"M2M100Config"),qQr.forEach(t),zHe=r(fwe," (M2M100 model)"),fwe.forEach(t),WHe=i(L),Tm=n(L,"LI",{});var mwe=s(Tm);Kre=n(mwe,"STRONG",{});var jQr=s(Kre);QHe=r(jQr,"marian"),jQr.forEach(t),HHe=r(mwe," \u2014 "),pS=n(mwe,"A",{href:!0});var DQr=s(pS);UHe=r(DQr,"MarianConfig"),DQr.forEach(t),JHe=r(mwe," (Marian model)"),mwe.forEach(t),YHe=i(L),Mm=n(L,"LI",{});var gwe=s(Mm);Zre=n(gwe,"STRONG",{});var GQr=s(Zre);KHe=r(GQr,"maskformer"),GQr.forEach(t),ZHe=r(gwe," \u2014 "),_S=n(gwe,"A",{href:!0});var OQr=s(_S);eUe=r(OQr,"MaskFormerConfig"),OQr.forEach(t),oUe=r(gwe," (MaskFormer model)"),gwe.forEach(t),rUe=i(L),Em=n(L,"LI",{});var hwe=s(Em);ete=n(hwe,"STRONG",{});var VQr=s(ete);tUe=r(VQr,"mbart"),VQr.forEach(t),aUe=r(hwe," \u2014 "),uS=n(hwe,"A",{href:!0});var XQr=s(uS);nUe=r(XQr,"MBartConfig"),XQr.forEach(t),sUe=r(hwe," (mBART model)"),hwe.forEach(t),lUe=i(L),Cm=n(L,"LI",{});var pwe=s(Cm);ote=n(pwe,"STRONG",{});var zQr=s(ote);iUe=r(zQr,"mctct"),zQr.forEach(t),dUe=r(pwe," \u2014 "),bS=n(pwe,"A",{href:!0});var WQr=s(bS);cUe=r(WQr,"MCTCTConfig"),WQr.forEach(t),fUe=r(pwe," (M-CTC-T model)"),pwe.forEach(t),mUe=i(L),wm=n(L,"LI",{});var _we=s(wm);rte=n(_we,"STRONG",{});var QQr=s(rte);gUe=r(QQr,"megatron-bert"),QQr.forEach(t),hUe=r(_we," \u2014 "),vS=n(_we,"A",{href:!0});var HQr=s(vS);pUe=r(HQr,"MegatronBertConfig"),HQr.forEach(t),_Ue=r(_we," (Megatron-BERT model)"),_we.forEach(t),uUe=i(L),Am=n(L,"LI",{});var uwe=s(Am);tte=n(uwe,"STRONG",{});var UQr=s(tte);bUe=r(UQr,"mobilebert"),UQr.forEach(t),vUe=r(uwe," \u2014 "),FS=n(uwe,"A",{href:!0});var JQr=s(FS);FUe=r(JQr,"MobileBertConfig"),JQr.forEach(t),TUe=r(uwe," (MobileBERT model)"),uwe.forEach(t),MUe=i(L),Lm=n(L,"LI",{});var bwe=s(Lm);ate=n(bwe,"STRONG",{});var YQr=s(ate);EUe=r(YQr,"mpnet"),YQr.forEach(t),CUe=r(bwe," \u2014 "),TS=n(bwe,"A",{href:!0});var KQr=s(TS);wUe=r(KQr,"MPNetConfig"),KQr.forEach(t),AUe=r(bwe," (MPNet model)"),bwe.forEach(t),LUe=i(L),ym=n(L,"LI",{});var vwe=s(ym);nte=n(vwe,"STRONG",{});var ZQr=s(nte);yUe=r(ZQr,"mt5"),ZQr.forEach(t),xUe=r(vwe," \u2014 "),MS=n(vwe,"A",{href:!0});var eHr=s(MS);$Ue=r(eHr,"MT5Config"),eHr.forEach(t),kUe=r(vwe," (MT5 model)"),vwe.forEach(t),SUe=i(L),xm=n(L,"LI",{});var Fwe=s(xm);ste=n(Fwe,"STRONG",{});var oHr=s(ste);RUe=r(oHr,"nystromformer"),oHr.forEach(t),PUe=r(Fwe," \u2014 "),ES=n(Fwe,"A",{href:!0});var rHr=s(ES);BUe=r(rHr,"NystromformerConfig"),rHr.forEach(t),IUe=r(Fwe," (Nystr\xF6mformer model)"),Fwe.forEach(t),NUe=i(L),$m=n(L,"LI",{});var Twe=s($m);lte=n(Twe,"STRONG",{});var tHr=s(lte);qUe=r(tHr,"openai-gpt"),tHr.forEach(t),jUe=r(Twe," \u2014 "),CS=n(Twe,"A",{href:!0});var aHr=s(CS);DUe=r(aHr,"OpenAIGPTConfig"),aHr.forEach(t),GUe=r(Twe," (OpenAI GPT model)"),Twe.forEach(t),OUe=i(L),km=n(L,"LI",{});var Mwe=s(km);ite=n(Mwe,"STRONG",{});var nHr=s(ite);VUe=r(nHr,"opt"),nHr.forEach(t),XUe=r(Mwe," \u2014 "),wS=n(Mwe,"A",{href:!0});var sHr=s(wS);zUe=r(sHr,"OPTConfig"),sHr.forEach(t),WUe=r(Mwe," (OPT model)"),Mwe.forEach(t),QUe=i(L),Sm=n(L,"LI",{});var Ewe=s(Sm);dte=n(Ewe,"STRONG",{});var lHr=s(dte);HUe=r(lHr,"pegasus"),lHr.forEach(t),UUe=r(Ewe," \u2014 "),AS=n(Ewe,"A",{href:!0});var iHr=s(AS);JUe=r(iHr,"PegasusConfig"),iHr.forEach(t),YUe=r(Ewe," (Pegasus model)"),Ewe.forEach(t),KUe=i(L),Rm=n(L,"LI",{});var Cwe=s(Rm);cte=n(Cwe,"STRONG",{});var dHr=s(cte);ZUe=r(dHr,"perceiver"),dHr.forEach(t),eJe=r(Cwe," \u2014 "),LS=n(Cwe,"A",{href:!0});var cHr=s(LS);oJe=r(cHr,"PerceiverConfig"),cHr.forEach(t),rJe=r(Cwe," (Perceiver model)"),Cwe.forEach(t),tJe=i(L),Pm=n(L,"LI",{});var wwe=s(Pm);fte=n(wwe,"STRONG",{});var fHr=s(fte);aJe=r(fHr,"plbart"),fHr.forEach(t),nJe=r(wwe," \u2014 "),yS=n(wwe,"A",{href:!0});var mHr=s(yS);sJe=r(mHr,"PLBartConfig"),mHr.forEach(t),lJe=r(wwe," (PLBart model)"),wwe.forEach(t),iJe=i(L),Bm=n(L,"LI",{});var Awe=s(Bm);mte=n(Awe,"STRONG",{});var gHr=s(mte);dJe=r(gHr,"poolformer"),gHr.forEach(t),cJe=r(Awe," \u2014 "),xS=n(Awe,"A",{href:!0});var hHr=s(xS);fJe=r(hHr,"PoolFormerConfig"),hHr.forEach(t),mJe=r(Awe," (PoolFormer model)"),Awe.forEach(t),gJe=i(L),Im=n(L,"LI",{});var Lwe=s(Im);gte=n(Lwe,"STRONG",{});var pHr=s(gte);hJe=r(pHr,"prophetnet"),pHr.forEach(t),pJe=r(Lwe," \u2014 "),$S=n(Lwe,"A",{href:!0});var _Hr=s($S);_Je=r(_Hr,"ProphetNetConfig"),_Hr.forEach(t),uJe=r(Lwe," (ProphetNet model)"),Lwe.forEach(t),bJe=i(L),Nm=n(L,"LI",{});var ywe=s(Nm);hte=n(ywe,"STRONG",{});var uHr=s(hte);vJe=r(uHr,"qdqbert"),uHr.forEach(t),FJe=r(ywe," \u2014 "),kS=n(ywe,"A",{href:!0});var bHr=s(kS);TJe=r(bHr,"QDQBertConfig"),bHr.forEach(t),MJe=r(ywe," (QDQBert model)"),ywe.forEach(t),EJe=i(L),qm=n(L,"LI",{});var xwe=s(qm);pte=n(xwe,"STRONG",{});var vHr=s(pte);CJe=r(vHr,"rag"),vHr.forEach(t),wJe=r(xwe," \u2014 "),SS=n(xwe,"A",{href:!0});var FHr=s(SS);AJe=r(FHr,"RagConfig"),FHr.forEach(t),LJe=r(xwe," (RAG model)"),xwe.forEach(t),yJe=i(L),jm=n(L,"LI",{});var $we=s(jm);_te=n($we,"STRONG",{});var THr=s(_te);xJe=r(THr,"realm"),THr.forEach(t),$Je=r($we," \u2014 "),RS=n($we,"A",{href:!0});var MHr=s(RS);kJe=r(MHr,"RealmConfig"),MHr.forEach(t),SJe=r($we," (REALM model)"),$we.forEach(t),RJe=i(L),Dm=n(L,"LI",{});var kwe=s(Dm);ute=n(kwe,"STRONG",{});var EHr=s(ute);PJe=r(EHr,"reformer"),EHr.forEach(t),BJe=r(kwe," \u2014 "),PS=n(kwe,"A",{href:!0});var CHr=s(PS);IJe=r(CHr,"ReformerConfig"),CHr.forEach(t),NJe=r(kwe," (Reformer model)"),kwe.forEach(t),qJe=i(L),Gm=n(L,"LI",{});var Swe=s(Gm);bte=n(Swe,"STRONG",{});var wHr=s(bte);jJe=r(wHr,"regnet"),wHr.forEach(t),DJe=r(Swe," \u2014 "),BS=n(Swe,"A",{href:!0});var AHr=s(BS);GJe=r(AHr,"RegNetConfig"),AHr.forEach(t),OJe=r(Swe," (RegNet model)"),Swe.forEach(t),VJe=i(L),Om=n(L,"LI",{});var Rwe=s(Om);vte=n(Rwe,"STRONG",{});var LHr=s(vte);XJe=r(LHr,"rembert"),LHr.forEach(t),zJe=r(Rwe," \u2014 "),IS=n(Rwe,"A",{href:!0});var yHr=s(IS);WJe=r(yHr,"RemBertConfig"),yHr.forEach(t),QJe=r(Rwe," (RemBERT model)"),Rwe.forEach(t),HJe=i(L),Vm=n(L,"LI",{});var Pwe=s(Vm);Fte=n(Pwe,"STRONG",{});var xHr=s(Fte);UJe=r(xHr,"resnet"),xHr.forEach(t),JJe=r(Pwe," \u2014 "),NS=n(Pwe,"A",{href:!0});var $Hr=s(NS);YJe=r($Hr,"ResNetConfig"),$Hr.forEach(t),KJe=r(Pwe," (ResNet model)"),Pwe.forEach(t),ZJe=i(L),Xm=n(L,"LI",{});var Bwe=s(Xm);Tte=n(Bwe,"STRONG",{});var kHr=s(Tte);eYe=r(kHr,"retribert"),kHr.forEach(t),oYe=r(Bwe," \u2014 "),qS=n(Bwe,"A",{href:!0});var SHr=s(qS);rYe=r(SHr,"RetriBertConfig"),SHr.forEach(t),tYe=r(Bwe," (RetriBERT model)"),Bwe.forEach(t),aYe=i(L),zm=n(L,"LI",{});var Iwe=s(zm);Mte=n(Iwe,"STRONG",{});var RHr=s(Mte);nYe=r(RHr,"roberta"),RHr.forEach(t),sYe=r(Iwe," \u2014 "),jS=n(Iwe,"A",{href:!0});var PHr=s(jS);lYe=r(PHr,"RobertaConfig"),PHr.forEach(t),iYe=r(Iwe," (RoBERTa model)"),Iwe.forEach(t),dYe=i(L),Wm=n(L,"LI",{});var Nwe=s(Wm);Ete=n(Nwe,"STRONG",{});var BHr=s(Ete);cYe=r(BHr,"roformer"),BHr.forEach(t),fYe=r(Nwe," \u2014 "),DS=n(Nwe,"A",{href:!0});var IHr=s(DS);mYe=r(IHr,"RoFormerConfig"),IHr.forEach(t),gYe=r(Nwe," (RoFormer model)"),Nwe.forEach(t),hYe=i(L),Qm=n(L,"LI",{});var qwe=s(Qm);Cte=n(qwe,"STRONG",{});var NHr=s(Cte);pYe=r(NHr,"segformer"),NHr.forEach(t),_Ye=r(qwe," \u2014 "),GS=n(qwe,"A",{href:!0});var qHr=s(GS);uYe=r(qHr,"SegformerConfig"),qHr.forEach(t),bYe=r(qwe," (SegFormer model)"),qwe.forEach(t),vYe=i(L),Hm=n(L,"LI",{});var jwe=s(Hm);wte=n(jwe,"STRONG",{});var jHr=s(wte);FYe=r(jHr,"sew"),jHr.forEach(t),TYe=r(jwe," \u2014 "),OS=n(jwe,"A",{href:!0});var DHr=s(OS);MYe=r(DHr,"SEWConfig"),DHr.forEach(t),EYe=r(jwe," (SEW model)"),jwe.forEach(t),CYe=i(L),Um=n(L,"LI",{});var Dwe=s(Um);Ate=n(Dwe,"STRONG",{});var GHr=s(Ate);wYe=r(GHr,"sew-d"),GHr.forEach(t),AYe=r(Dwe," \u2014 "),VS=n(Dwe,"A",{href:!0});var OHr=s(VS);LYe=r(OHr,"SEWDConfig"),OHr.forEach(t),yYe=r(Dwe," (SEW-D model)"),Dwe.forEach(t),xYe=i(L),Jm=n(L,"LI",{});var Gwe=s(Jm);Lte=n(Gwe,"STRONG",{});var VHr=s(Lte);$Ye=r(VHr,"speech-encoder-decoder"),VHr.forEach(t),kYe=r(Gwe," \u2014 "),XS=n(Gwe,"A",{href:!0});var XHr=s(XS);SYe=r(XHr,"SpeechEncoderDecoderConfig"),XHr.forEach(t),RYe=r(Gwe," (Speech Encoder decoder model)"),Gwe.forEach(t),PYe=i(L),Ym=n(L,"LI",{});var Owe=s(Ym);yte=n(Owe,"STRONG",{});var zHr=s(yte);BYe=r(zHr,"speech_to_text"),zHr.forEach(t),IYe=r(Owe," \u2014 "),zS=n(Owe,"A",{href:!0});var WHr=s(zS);NYe=r(WHr,"Speech2TextConfig"),WHr.forEach(t),qYe=r(Owe," (Speech2Text model)"),Owe.forEach(t),jYe=i(L),Km=n(L,"LI",{});var Vwe=s(Km);xte=n(Vwe,"STRONG",{});var QHr=s(xte);DYe=r(QHr,"speech_to_text_2"),QHr.forEach(t),GYe=r(Vwe," \u2014 "),WS=n(Vwe,"A",{href:!0});var HHr=s(WS);OYe=r(HHr,"Speech2Text2Config"),HHr.forEach(t),VYe=r(Vwe," (Speech2Text2 model)"),Vwe.forEach(t),XYe=i(L),Zm=n(L,"LI",{});var Xwe=s(Zm);$te=n(Xwe,"STRONG",{});var UHr=s($te);zYe=r(UHr,"splinter"),UHr.forEach(t),WYe=r(Xwe," \u2014 "),QS=n(Xwe,"A",{href:!0});var JHr=s(QS);QYe=r(JHr,"SplinterConfig"),JHr.forEach(t),HYe=r(Xwe," (Splinter model)"),Xwe.forEach(t),UYe=i(L),eg=n(L,"LI",{});var zwe=s(eg);kte=n(zwe,"STRONG",{});var YHr=s(kte);JYe=r(YHr,"squeezebert"),YHr.forEach(t),YYe=r(zwe," \u2014 "),HS=n(zwe,"A",{href:!0});var KHr=s(HS);KYe=r(KHr,"SqueezeBertConfig"),KHr.forEach(t),ZYe=r(zwe," (SqueezeBERT model)"),zwe.forEach(t),eKe=i(L),og=n(L,"LI",{});var Wwe=s(og);Ste=n(Wwe,"STRONG",{});var ZHr=s(Ste);oKe=r(ZHr,"swin"),ZHr.forEach(t),rKe=r(Wwe," \u2014 "),US=n(Wwe,"A",{href:!0});var eUr=s(US);tKe=r(eUr,"SwinConfig"),eUr.forEach(t),aKe=r(Wwe," (Swin Transformer model)"),Wwe.forEach(t),nKe=i(L),rg=n(L,"LI",{});var Qwe=s(rg);Rte=n(Qwe,"STRONG",{});var oUr=s(Rte);sKe=r(oUr,"t5"),oUr.forEach(t),lKe=r(Qwe," \u2014 "),JS=n(Qwe,"A",{href:!0});var rUr=s(JS);iKe=r(rUr,"T5Config"),rUr.forEach(t),dKe=r(Qwe," (T5 model)"),Qwe.forEach(t),cKe=i(L),tg=n(L,"LI",{});var Hwe=s(tg);Pte=n(Hwe,"STRONG",{});var tUr=s(Pte);fKe=r(tUr,"tapas"),tUr.forEach(t),mKe=r(Hwe," \u2014 "),YS=n(Hwe,"A",{href:!0});var aUr=s(YS);gKe=r(aUr,"TapasConfig"),aUr.forEach(t),hKe=r(Hwe," (TAPAS model)"),Hwe.forEach(t),pKe=i(L),ag=n(L,"LI",{});var Uwe=s(ag);Bte=n(Uwe,"STRONG",{});var nUr=s(Bte);_Ke=r(nUr,"trajectory_transformer"),nUr.forEach(t),uKe=r(Uwe," \u2014 "),KS=n(Uwe,"A",{href:!0});var sUr=s(KS);bKe=r(sUr,"TrajectoryTransformerConfig"),sUr.forEach(t),vKe=r(Uwe," (Trajectory Transformer model)"),Uwe.forEach(t),FKe=i(L),ng=n(L,"LI",{});var Jwe=s(ng);Ite=n(Jwe,"STRONG",{});var lUr=s(Ite);TKe=r(lUr,"transfo-xl"),lUr.forEach(t),MKe=r(Jwe," \u2014 "),ZS=n(Jwe,"A",{href:!0});var iUr=s(ZS);EKe=r(iUr,"TransfoXLConfig"),iUr.forEach(t),CKe=r(Jwe," (Transformer-XL model)"),Jwe.forEach(t),wKe=i(L),sg=n(L,"LI",{});var Ywe=s(sg);Nte=n(Ywe,"STRONG",{});var dUr=s(Nte);AKe=r(dUr,"trocr"),dUr.forEach(t),LKe=r(Ywe," \u2014 "),eR=n(Ywe,"A",{href:!0});var cUr=s(eR);yKe=r(cUr,"TrOCRConfig"),cUr.forEach(t),xKe=r(Ywe," (TrOCR model)"),Ywe.forEach(t),$Ke=i(L),lg=n(L,"LI",{});var Kwe=s(lg);qte=n(Kwe,"STRONG",{});var fUr=s(qte);kKe=r(fUr,"unispeech"),fUr.forEach(t),SKe=r(Kwe," \u2014 "),oR=n(Kwe,"A",{href:!0});var mUr=s(oR);RKe=r(mUr,"UniSpeechConfig"),mUr.forEach(t),PKe=r(Kwe," (UniSpeech model)"),Kwe.forEach(t),BKe=i(L),ig=n(L,"LI",{});var Zwe=s(ig);jte=n(Zwe,"STRONG",{});var gUr=s(jte);IKe=r(gUr,"unispeech-sat"),gUr.forEach(t),NKe=r(Zwe," \u2014 "),rR=n(Zwe,"A",{href:!0});var hUr=s(rR);qKe=r(hUr,"UniSpeechSatConfig"),hUr.forEach(t),jKe=r(Zwe," (UniSpeechSat model)"),Zwe.forEach(t),DKe=i(L),dg=n(L,"LI",{});var eAe=s(dg);Dte=n(eAe,"STRONG",{});var pUr=s(Dte);GKe=r(pUr,"van"),pUr.forEach(t),OKe=r(eAe," \u2014 "),tR=n(eAe,"A",{href:!0});var _Ur=s(tR);VKe=r(_Ur,"VanConfig"),_Ur.forEach(t),XKe=r(eAe," (VAN model)"),eAe.forEach(t),zKe=i(L),cg=n(L,"LI",{});var oAe=s(cg);Gte=n(oAe,"STRONG",{});var uUr=s(Gte);WKe=r(uUr,"vilt"),uUr.forEach(t),QKe=r(oAe," \u2014 "),aR=n(oAe,"A",{href:!0});var bUr=s(aR);HKe=r(bUr,"ViltConfig"),bUr.forEach(t),UKe=r(oAe," (ViLT model)"),oAe.forEach(t),JKe=i(L),fg=n(L,"LI",{});var rAe=s(fg);Ote=n(rAe,"STRONG",{});var vUr=s(Ote);YKe=r(vUr,"vision-encoder-decoder"),vUr.forEach(t),KKe=r(rAe," \u2014 "),nR=n(rAe,"A",{href:!0});var FUr=s(nR);ZKe=r(FUr,"VisionEncoderDecoderConfig"),FUr.forEach(t),eZe=r(rAe," (Vision Encoder decoder model)"),rAe.forEach(t),oZe=i(L),mg=n(L,"LI",{});var tAe=s(mg);Vte=n(tAe,"STRONG",{});var TUr=s(Vte);rZe=r(TUr,"vision-text-dual-encoder"),TUr.forEach(t),tZe=r(tAe," \u2014 "),sR=n(tAe,"A",{href:!0});var MUr=s(sR);aZe=r(MUr,"VisionTextDualEncoderConfig"),MUr.forEach(t),nZe=r(tAe," (VisionTextDualEncoder model)"),tAe.forEach(t),sZe=i(L),gg=n(L,"LI",{});var aAe=s(gg);Xte=n(aAe,"STRONG",{});var EUr=s(Xte);lZe=r(EUr,"visual_bert"),EUr.forEach(t),iZe=r(aAe," \u2014 "),lR=n(aAe,"A",{href:!0});var CUr=s(lR);dZe=r(CUr,"VisualBertConfig"),CUr.forEach(t),cZe=r(aAe," (VisualBERT model)"),aAe.forEach(t),fZe=i(L),hg=n(L,"LI",{});var nAe=s(hg);zte=n(nAe,"STRONG",{});var wUr=s(zte);mZe=r(wUr,"vit"),wUr.forEach(t),gZe=r(nAe," \u2014 "),iR=n(nAe,"A",{href:!0});var AUr=s(iR);hZe=r(AUr,"ViTConfig"),AUr.forEach(t),pZe=r(nAe," (ViT model)"),nAe.forEach(t),_Ze=i(L),pg=n(L,"LI",{});var sAe=s(pg);Wte=n(sAe,"STRONG",{});var LUr=s(Wte);uZe=r(LUr,"vit_mae"),LUr.forEach(t),bZe=r(sAe," \u2014 "),dR=n(sAe,"A",{href:!0});var yUr=s(dR);vZe=r(yUr,"ViTMAEConfig"),yUr.forEach(t),FZe=r(sAe," (ViTMAE model)"),sAe.forEach(t),TZe=i(L),_g=n(L,"LI",{});var lAe=s(_g);Qte=n(lAe,"STRONG",{});var xUr=s(Qte);MZe=r(xUr,"wav2vec2"),xUr.forEach(t),EZe=r(lAe," \u2014 "),cR=n(lAe,"A",{href:!0});var $Ur=s(cR);CZe=r($Ur,"Wav2Vec2Config"),$Ur.forEach(t),wZe=r(lAe," (Wav2Vec2 model)"),lAe.forEach(t),AZe=i(L),ug=n(L,"LI",{});var iAe=s(ug);Hte=n(iAe,"STRONG",{});var kUr=s(Hte);LZe=r(kUr,"wav2vec2-conformer"),kUr.forEach(t),yZe=r(iAe," \u2014 "),fR=n(iAe,"A",{href:!0});var SUr=s(fR);xZe=r(SUr,"Wav2Vec2ConformerConfig"),SUr.forEach(t),$Ze=r(iAe," (Wav2Vec2-Conformer model)"),iAe.forEach(t),kZe=i(L),bg=n(L,"LI",{});var dAe=s(bg);Ute=n(dAe,"STRONG",{});var RUr=s(Ute);SZe=r(RUr,"wavlm"),RUr.forEach(t),RZe=r(dAe," \u2014 "),mR=n(dAe,"A",{href:!0});var PUr=s(mR);PZe=r(PUr,"WavLMConfig"),PUr.forEach(t),BZe=r(dAe," (WavLM model)"),dAe.forEach(t),IZe=i(L),vg=n(L,"LI",{});var cAe=s(vg);Jte=n(cAe,"STRONG",{});var BUr=s(Jte);NZe=r(BUr,"xglm"),BUr.forEach(t),qZe=r(cAe," \u2014 "),gR=n(cAe,"A",{href:!0});var IUr=s(gR);jZe=r(IUr,"XGLMConfig"),IUr.forEach(t),DZe=r(cAe," (XGLM model)"),cAe.forEach(t),GZe=i(L),Fg=n(L,"LI",{});var fAe=s(Fg);Yte=n(fAe,"STRONG",{});var NUr=s(Yte);OZe=r(NUr,"xlm"),NUr.forEach(t),VZe=r(fAe," \u2014 "),hR=n(fAe,"A",{href:!0});var qUr=s(hR);XZe=r(qUr,"XLMConfig"),qUr.forEach(t),zZe=r(fAe," (XLM model)"),fAe.forEach(t),WZe=i(L),Tg=n(L,"LI",{});var mAe=s(Tg);Kte=n(mAe,"STRONG",{});var jUr=s(Kte);QZe=r(jUr,"xlm-prophetnet"),jUr.forEach(t),HZe=r(mAe," \u2014 "),pR=n(mAe,"A",{href:!0});var DUr=s(pR);UZe=r(DUr,"XLMProphetNetConfig"),DUr.forEach(t),JZe=r(mAe," (XLM-ProphetNet model)"),mAe.forEach(t),YZe=i(L),Mg=n(L,"LI",{});var gAe=s(Mg);Zte=n(gAe,"STRONG",{});var GUr=s(Zte);KZe=r(GUr,"xlm-roberta"),GUr.forEach(t),ZZe=r(gAe," \u2014 "),_R=n(gAe,"A",{href:!0});var OUr=s(_R);eeo=r(OUr,"XLMRobertaConfig"),OUr.forEach(t),oeo=r(gAe," (XLM-RoBERTa model)"),gAe.forEach(t),reo=i(L),Eg=n(L,"LI",{});var hAe=s(Eg);eae=n(hAe,"STRONG",{});var VUr=s(eae);teo=r(VUr,"xlm-roberta-xl"),VUr.forEach(t),aeo=r(hAe," \u2014 "),uR=n(hAe,"A",{href:!0});var XUr=s(uR);neo=r(XUr,"XLMRobertaXLConfig"),XUr.forEach(t),seo=r(hAe," (XLM-RoBERTa-XL model)"),hAe.forEach(t),leo=i(L),Cg=n(L,"LI",{});var pAe=s(Cg);oae=n(pAe,"STRONG",{});var zUr=s(oae);ieo=r(zUr,"xlnet"),zUr.forEach(t),deo=r(pAe," \u2014 "),bR=n(pAe,"A",{href:!0});var WUr=s(bR);ceo=r(WUr,"XLNetConfig"),WUr.forEach(t),feo=r(pAe," (XLNet model)"),pAe.forEach(t),meo=i(L),wg=n(L,"LI",{});var _Ae=s(wg);rae=n(_Ae,"STRONG",{});var QUr=s(rae);geo=r(QUr,"yolos"),QUr.forEach(t),heo=r(_Ae," \u2014 "),vR=n(_Ae,"A",{href:!0});var HUr=s(vR);peo=r(HUr,"YolosConfig"),HUr.forEach(t),_eo=r(_Ae," (YOLOS model)"),_Ae.forEach(t),ueo=i(L),Ag=n(L,"LI",{});var uAe=s(Ag);tae=n(uAe,"STRONG",{});var UUr=s(tae);beo=r(UUr,"yoso"),UUr.forEach(t),veo=r(uAe," \u2014 "),FR=n(uAe,"A",{href:!0});var JUr=s(FR);Feo=r(JUr,"YosoConfig"),JUr.forEach(t),Teo=r(uAe," (YOSO model)"),uAe.forEach(t),L.forEach(t),Meo=i(ot),T(Lg.$$.fragment,ot),ot.forEach(t),Eeo=i(et),yg=n(et,"DIV",{class:!0});var TGe=s(yg);T(K6.$$.fragment,TGe),Ceo=i(TGe),aae=n(TGe,"P",{});var YUr=s(aae);weo=r(YUr,"Register a new configuration for this class."),YUr.forEach(t),TGe.forEach(t),et.forEach(t),Cje=i(f),Mi=n(f,"H2",{class:!0});var MGe=s(Mi);xg=n(MGe,"A",{id:!0,class:!0,href:!0});var KUr=s(xg);nae=n(KUr,"SPAN",{});var ZUr=s(nae);T(Z6.$$.fragment,ZUr),ZUr.forEach(t),KUr.forEach(t),Aeo=i(MGe),sae=n(MGe,"SPAN",{});var eJr=s(sae);Leo=r(eJr,"AutoTokenizer"),eJr.forEach(t),MGe.forEach(t),wje=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(eL.$$.fragment,qs),yeo=i(qs),oL=n(qs,"P",{});var EGe=s(oL);xeo=r(EGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TR=n(EGe,"A",{href:!0});var oJr=s(TR);$eo=r(oJr,"AutoTokenizer.from_pretrained()"),oJr.forEach(t),keo=r(EGe," class method."),EGe.forEach(t),Seo=i(qs),rL=n(qs,"P",{});var CGe=s(rL);Reo=r(CGe,"This class cannot be instantiated directly using "),lae=n(CGe,"CODE",{});var rJr=s(lae);Peo=r(rJr,"__init__()"),rJr.forEach(t),Beo=r(CGe," (throws an error)."),CGe.forEach(t),Ieo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(tL.$$.fragment,js),Neo=i(js),iae=n(js,"P",{});var tJr=s(iae);qeo=r(tJr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tJr.forEach(t),jeo=i(js),Aa=n(js,"P",{});var Qw=s(Aa);Deo=r(Qw,"The tokenizer class to instantiate is selected based on the "),dae=n(Qw,"CODE",{});var aJr=s(dae);Geo=r(aJr,"model_type"),aJr.forEach(t),Oeo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),cae=n(Qw,"CODE",{});var nJr=s(cae);Veo=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),Xeo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fae=n(Qw,"CODE",{});var sJr=s(fae);zeo=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),Weo=r(Qw,":"),Qw.forEach(t),Qeo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var a$=s(Sn);mae=n(a$,"STRONG",{});var lJr=s(mae);Heo=r(lJr,"albert"),lJr.forEach(t),Ueo=r(a$," \u2014 "),MR=n(a$,"A",{href:!0});var iJr=s(MR);Jeo=r(iJr,"AlbertTokenizer"),iJr.forEach(t),Yeo=r(a$," or "),ER=n(a$,"A",{href:!0});var dJr=s(ER);Keo=r(dJr,"AlbertTokenizerFast"),dJr.forEach(t),Zeo=r(a$," (ALBERT model)"),a$.forEach(t),eoo=i(S),Rn=n(S,"LI",{});var n$=s(Rn);gae=n(n$,"STRONG",{});var cJr=s(gae);ooo=r(cJr,"bart"),cJr.forEach(t),roo=r(n$," \u2014 "),CR=n(n$,"A",{href:!0});var fJr=s(CR);too=r(fJr,"BartTokenizer"),fJr.forEach(t),aoo=r(n$," or "),wR=n(n$,"A",{href:!0});var mJr=s(wR);noo=r(mJr,"BartTokenizerFast"),mJr.forEach(t),soo=r(n$," (BART model)"),n$.forEach(t),loo=i(S),Pn=n(S,"LI",{});var s$=s(Pn);hae=n(s$,"STRONG",{});var gJr=s(hae);ioo=r(gJr,"barthez"),gJr.forEach(t),doo=r(s$," \u2014 "),AR=n(s$,"A",{href:!0});var hJr=s(AR);coo=r(hJr,"BarthezTokenizer"),hJr.forEach(t),foo=r(s$," or "),LR=n(s$,"A",{href:!0});var pJr=s(LR);moo=r(pJr,"BarthezTokenizerFast"),pJr.forEach(t),goo=r(s$," (BARThez model)"),s$.forEach(t),hoo=i(S),$g=n(S,"LI",{});var bAe=s($g);pae=n(bAe,"STRONG",{});var _Jr=s(pae);poo=r(_Jr,"bartpho"),_Jr.forEach(t),_oo=r(bAe," \u2014 "),yR=n(bAe,"A",{href:!0});var uJr=s(yR);uoo=r(uJr,"BartphoTokenizer"),uJr.forEach(t),boo=r(bAe," (BARTpho model)"),bAe.forEach(t),voo=i(S),Bn=n(S,"LI",{});var l$=s(Bn);_ae=n(l$,"STRONG",{});var bJr=s(_ae);Foo=r(bJr,"bert"),bJr.forEach(t),Too=r(l$," \u2014 "),xR=n(l$,"A",{href:!0});var vJr=s(xR);Moo=r(vJr,"BertTokenizer"),vJr.forEach(t),Eoo=r(l$," or "),$R=n(l$,"A",{href:!0});var FJr=s($R);Coo=r(FJr,"BertTokenizerFast"),FJr.forEach(t),woo=r(l$," (BERT model)"),l$.forEach(t),Aoo=i(S),kg=n(S,"LI",{});var vAe=s(kg);uae=n(vAe,"STRONG",{});var TJr=s(uae);Loo=r(TJr,"bert-generation"),TJr.forEach(t),yoo=r(vAe," \u2014 "),kR=n(vAe,"A",{href:!0});var MJr=s(kR);xoo=r(MJr,"BertGenerationTokenizer"),MJr.forEach(t),$oo=r(vAe," (Bert Generation model)"),vAe.forEach(t),koo=i(S),Sg=n(S,"LI",{});var FAe=s(Sg);bae=n(FAe,"STRONG",{});var EJr=s(bae);Soo=r(EJr,"bert-japanese"),EJr.forEach(t),Roo=r(FAe," \u2014 "),SR=n(FAe,"A",{href:!0});var CJr=s(SR);Poo=r(CJr,"BertJapaneseTokenizer"),CJr.forEach(t),Boo=r(FAe," (BertJapanese model)"),FAe.forEach(t),Ioo=i(S),Rg=n(S,"LI",{});var TAe=s(Rg);vae=n(TAe,"STRONG",{});var wJr=s(vae);Noo=r(wJr,"bertweet"),wJr.forEach(t),qoo=r(TAe," \u2014 "),RR=n(TAe,"A",{href:!0});var AJr=s(RR);joo=r(AJr,"BertweetTokenizer"),AJr.forEach(t),Doo=r(TAe," (BERTweet model)"),TAe.forEach(t),Goo=i(S),In=n(S,"LI",{});var i$=s(In);Fae=n(i$,"STRONG",{});var LJr=s(Fae);Ooo=r(LJr,"big_bird"),LJr.forEach(t),Voo=r(i$," \u2014 "),PR=n(i$,"A",{href:!0});var yJr=s(PR);Xoo=r(yJr,"BigBirdTokenizer"),yJr.forEach(t),zoo=r(i$," or "),BR=n(i$,"A",{href:!0});var xJr=s(BR);Woo=r(xJr,"BigBirdTokenizerFast"),xJr.forEach(t),Qoo=r(i$," (BigBird model)"),i$.forEach(t),Hoo=i(S),Nn=n(S,"LI",{});var d$=s(Nn);Tae=n(d$,"STRONG",{});var $Jr=s(Tae);Uoo=r($Jr,"bigbird_pegasus"),$Jr.forEach(t),Joo=r(d$," \u2014 "),IR=n(d$,"A",{href:!0});var kJr=s(IR);Yoo=r(kJr,"PegasusTokenizer"),kJr.forEach(t),Koo=r(d$," or "),NR=n(d$,"A",{href:!0});var SJr=s(NR);Zoo=r(SJr,"PegasusTokenizerFast"),SJr.forEach(t),ero=r(d$," (BigBird-Pegasus model)"),d$.forEach(t),oro=i(S),qn=n(S,"LI",{});var c$=s(qn);Mae=n(c$,"STRONG",{});var RJr=s(Mae);rro=r(RJr,"blenderbot"),RJr.forEach(t),tro=r(c$," \u2014 "),qR=n(c$,"A",{href:!0});var PJr=s(qR);aro=r(PJr,"BlenderbotTokenizer"),PJr.forEach(t),nro=r(c$," or "),jR=n(c$,"A",{href:!0});var BJr=s(jR);sro=r(BJr,"BlenderbotTokenizerFast"),BJr.forEach(t),lro=r(c$," (Blenderbot model)"),c$.forEach(t),iro=i(S),Pg=n(S,"LI",{});var MAe=s(Pg);Eae=n(MAe,"STRONG",{});var IJr=s(Eae);dro=r(IJr,"blenderbot-small"),IJr.forEach(t),cro=r(MAe," \u2014 "),DR=n(MAe,"A",{href:!0});var NJr=s(DR);fro=r(NJr,"BlenderbotSmallTokenizer"),NJr.forEach(t),mro=r(MAe," (BlenderbotSmall model)"),MAe.forEach(t),gro=i(S),Bg=n(S,"LI",{});var EAe=s(Bg);Cae=n(EAe,"STRONG",{});var qJr=s(Cae);hro=r(qJr,"bloom"),qJr.forEach(t),pro=r(EAe," \u2014 "),GR=n(EAe,"A",{href:!0});var jJr=s(GR);_ro=r(jJr,"BloomTokenizerFast"),jJr.forEach(t),uro=r(EAe," (BLOOM model)"),EAe.forEach(t),bro=i(S),Ig=n(S,"LI",{});var CAe=s(Ig);wae=n(CAe,"STRONG",{});var DJr=s(wae);vro=r(DJr,"byt5"),DJr.forEach(t),Fro=r(CAe," \u2014 "),OR=n(CAe,"A",{href:!0});var GJr=s(OR);Tro=r(GJr,"ByT5Tokenizer"),GJr.forEach(t),Mro=r(CAe," (ByT5 model)"),CAe.forEach(t),Ero=i(S),jn=n(S,"LI",{});var f$=s(jn);Aae=n(f$,"STRONG",{});var OJr=s(Aae);Cro=r(OJr,"camembert"),OJr.forEach(t),wro=r(f$," \u2014 "),VR=n(f$,"A",{href:!0});var VJr=s(VR);Aro=r(VJr,"CamembertTokenizer"),VJr.forEach(t),Lro=r(f$," or "),XR=n(f$,"A",{href:!0});var XJr=s(XR);yro=r(XJr,"CamembertTokenizerFast"),XJr.forEach(t),xro=r(f$," (CamemBERT model)"),f$.forEach(t),$ro=i(S),Ng=n(S,"LI",{});var wAe=s(Ng);Lae=n(wAe,"STRONG",{});var zJr=s(Lae);kro=r(zJr,"canine"),zJr.forEach(t),Sro=r(wAe," \u2014 "),zR=n(wAe,"A",{href:!0});var WJr=s(zR);Rro=r(WJr,"CanineTokenizer"),WJr.forEach(t),Pro=r(wAe," (CANINE model)"),wAe.forEach(t),Bro=i(S),Dn=n(S,"LI",{});var m$=s(Dn);yae=n(m$,"STRONG",{});var QJr=s(yae);Iro=r(QJr,"clip"),QJr.forEach(t),Nro=r(m$," \u2014 "),WR=n(m$,"A",{href:!0});var HJr=s(WR);qro=r(HJr,"CLIPTokenizer"),HJr.forEach(t),jro=r(m$," or "),QR=n(m$,"A",{href:!0});var UJr=s(QR);Dro=r(UJr,"CLIPTokenizerFast"),UJr.forEach(t),Gro=r(m$," (CLIP model)"),m$.forEach(t),Oro=i(S),Gn=n(S,"LI",{});var g$=s(Gn);xae=n(g$,"STRONG",{});var JJr=s(xae);Vro=r(JJr,"convbert"),JJr.forEach(t),Xro=r(g$," \u2014 "),HR=n(g$,"A",{href:!0});var YJr=s(HR);zro=r(YJr,"ConvBertTokenizer"),YJr.forEach(t),Wro=r(g$," or "),UR=n(g$,"A",{href:!0});var KJr=s(UR);Qro=r(KJr,"ConvBertTokenizerFast"),KJr.forEach(t),Hro=r(g$," (ConvBERT model)"),g$.forEach(t),Uro=i(S),On=n(S,"LI",{});var h$=s(On);$ae=n(h$,"STRONG",{});var ZJr=s($ae);Jro=r(ZJr,"cpm"),ZJr.forEach(t),Yro=r(h$," \u2014 "),JR=n(h$,"A",{href:!0});var eYr=s(JR);Kro=r(eYr,"CpmTokenizer"),eYr.forEach(t),Zro=r(h$," or "),YR=n(h$,"A",{href:!0});var oYr=s(YR);eto=r(oYr,"CpmTokenizerFast"),oYr.forEach(t),oto=r(h$," (CPM model)"),h$.forEach(t),rto=i(S),qg=n(S,"LI",{});var AAe=s(qg);kae=n(AAe,"STRONG",{});var rYr=s(kae);tto=r(rYr,"ctrl"),rYr.forEach(t),ato=r(AAe," \u2014 "),KR=n(AAe,"A",{href:!0});var tYr=s(KR);nto=r(tYr,"CTRLTokenizer"),tYr.forEach(t),sto=r(AAe," (CTRL model)"),AAe.forEach(t),lto=i(S),Vn=n(S,"LI",{});var p$=s(Vn);Sae=n(p$,"STRONG",{});var aYr=s(Sae);ito=r(aYr,"data2vec-text"),aYr.forEach(t),dto=r(p$," \u2014 "),ZR=n(p$,"A",{href:!0});var nYr=s(ZR);cto=r(nYr,"RobertaTokenizer"),nYr.forEach(t),fto=r(p$," or "),eP=n(p$,"A",{href:!0});var sYr=s(eP);mto=r(sYr,"RobertaTokenizerFast"),sYr.forEach(t),gto=r(p$," (Data2VecText model)"),p$.forEach(t),hto=i(S),Xn=n(S,"LI",{});var _$=s(Xn);Rae=n(_$,"STRONG",{});var lYr=s(Rae);pto=r(lYr,"deberta"),lYr.forEach(t),_to=r(_$," \u2014 "),oP=n(_$,"A",{href:!0});var iYr=s(oP);uto=r(iYr,"DebertaTokenizer"),iYr.forEach(t),bto=r(_$," or "),rP=n(_$,"A",{href:!0});var dYr=s(rP);vto=r(dYr,"DebertaTokenizerFast"),dYr.forEach(t),Fto=r(_$," (DeBERTa model)"),_$.forEach(t),Tto=i(S),zn=n(S,"LI",{});var u$=s(zn);Pae=n(u$,"STRONG",{});var cYr=s(Pae);Mto=r(cYr,"deberta-v2"),cYr.forEach(t),Eto=r(u$," \u2014 "),tP=n(u$,"A",{href:!0});var fYr=s(tP);Cto=r(fYr,"DebertaV2Tokenizer"),fYr.forEach(t),wto=r(u$," or "),aP=n(u$,"A",{href:!0});var mYr=s(aP);Ato=r(mYr,"DebertaV2TokenizerFast"),mYr.forEach(t),Lto=r(u$," (DeBERTa-v2 model)"),u$.forEach(t),yto=i(S),Wn=n(S,"LI",{});var b$=s(Wn);Bae=n(b$,"STRONG",{});var gYr=s(Bae);xto=r(gYr,"distilbert"),gYr.forEach(t),$to=r(b$," \u2014 "),nP=n(b$,"A",{href:!0});var hYr=s(nP);kto=r(hYr,"DistilBertTokenizer"),hYr.forEach(t),Sto=r(b$," or "),sP=n(b$,"A",{href:!0});var pYr=s(sP);Rto=r(pYr,"DistilBertTokenizerFast"),pYr.forEach(t),Pto=r(b$," (DistilBERT model)"),b$.forEach(t),Bto=i(S),Qn=n(S,"LI",{});var v$=s(Qn);Iae=n(v$,"STRONG",{});var _Yr=s(Iae);Ito=r(_Yr,"dpr"),_Yr.forEach(t),Nto=r(v$," \u2014 "),lP=n(v$,"A",{href:!0});var uYr=s(lP);qto=r(uYr,"DPRQuestionEncoderTokenizer"),uYr.forEach(t),jto=r(v$," or "),iP=n(v$,"A",{href:!0});var bYr=s(iP);Dto=r(bYr,"DPRQuestionEncoderTokenizerFast"),bYr.forEach(t),Gto=r(v$," (DPR model)"),v$.forEach(t),Oto=i(S),Hn=n(S,"LI",{});var F$=s(Hn);Nae=n(F$,"STRONG",{});var vYr=s(Nae);Vto=r(vYr,"electra"),vYr.forEach(t),Xto=r(F$," \u2014 "),dP=n(F$,"A",{href:!0});var FYr=s(dP);zto=r(FYr,"ElectraTokenizer"),FYr.forEach(t),Wto=r(F$," or "),cP=n(F$,"A",{href:!0});var TYr=s(cP);Qto=r(TYr,"ElectraTokenizerFast"),TYr.forEach(t),Hto=r(F$," (ELECTRA model)"),F$.forEach(t),Uto=i(S),jg=n(S,"LI",{});var LAe=s(jg);qae=n(LAe,"STRONG",{});var MYr=s(qae);Jto=r(MYr,"flaubert"),MYr.forEach(t),Yto=r(LAe," \u2014 "),fP=n(LAe,"A",{href:!0});var EYr=s(fP);Kto=r(EYr,"FlaubertTokenizer"),EYr.forEach(t),Zto=r(LAe," (FlauBERT model)"),LAe.forEach(t),eao=i(S),Un=n(S,"LI",{});var T$=s(Un);jae=n(T$,"STRONG",{});var CYr=s(jae);oao=r(CYr,"fnet"),CYr.forEach(t),rao=r(T$," \u2014 "),mP=n(T$,"A",{href:!0});var wYr=s(mP);tao=r(wYr,"FNetTokenizer"),wYr.forEach(t),aao=r(T$," or "),gP=n(T$,"A",{href:!0});var AYr=s(gP);nao=r(AYr,"FNetTokenizerFast"),AYr.forEach(t),sao=r(T$," (FNet model)"),T$.forEach(t),lao=i(S),Dg=n(S,"LI",{});var yAe=s(Dg);Dae=n(yAe,"STRONG",{});var LYr=s(Dae);iao=r(LYr,"fsmt"),LYr.forEach(t),dao=r(yAe," \u2014 "),hP=n(yAe,"A",{href:!0});var yYr=s(hP);cao=r(yYr,"FSMTTokenizer"),yYr.forEach(t),fao=r(yAe," (FairSeq Machine-Translation model)"),yAe.forEach(t),mao=i(S),Jn=n(S,"LI",{});var M$=s(Jn);Gae=n(M$,"STRONG",{});var xYr=s(Gae);gao=r(xYr,"funnel"),xYr.forEach(t),hao=r(M$," \u2014 "),pP=n(M$,"A",{href:!0});var $Yr=s(pP);pao=r($Yr,"FunnelTokenizer"),$Yr.forEach(t),_ao=r(M$," or "),_P=n(M$,"A",{href:!0});var kYr=s(_P);uao=r(kYr,"FunnelTokenizerFast"),kYr.forEach(t),bao=r(M$," (Funnel Transformer model)"),M$.forEach(t),vao=i(S),Yn=n(S,"LI",{});var E$=s(Yn);Oae=n(E$,"STRONG",{});var SYr=s(Oae);Fao=r(SYr,"gpt2"),SYr.forEach(t),Tao=r(E$," \u2014 "),uP=n(E$,"A",{href:!0});var RYr=s(uP);Mao=r(RYr,"GPT2Tokenizer"),RYr.forEach(t),Eao=r(E$," or "),bP=n(E$,"A",{href:!0});var PYr=s(bP);Cao=r(PYr,"GPT2TokenizerFast"),PYr.forEach(t),wao=r(E$," (OpenAI GPT-2 model)"),E$.forEach(t),Aao=i(S),Kn=n(S,"LI",{});var C$=s(Kn);Vae=n(C$,"STRONG",{});var BYr=s(Vae);Lao=r(BYr,"gpt_neo"),BYr.forEach(t),yao=r(C$," \u2014 "),vP=n(C$,"A",{href:!0});var IYr=s(vP);xao=r(IYr,"GPT2Tokenizer"),IYr.forEach(t),$ao=r(C$," or "),FP=n(C$,"A",{href:!0});var NYr=s(FP);kao=r(NYr,"GPT2TokenizerFast"),NYr.forEach(t),Sao=r(C$," (GPT Neo model)"),C$.forEach(t),Rao=i(S),Gg=n(S,"LI",{});var xAe=s(Gg);Xae=n(xAe,"STRONG",{});var qYr=s(Xae);Pao=r(qYr,"gpt_neox"),qYr.forEach(t),Bao=r(xAe," \u2014 "),TP=n(xAe,"A",{href:!0});var jYr=s(TP);Iao=r(jYr,"GPTNeoXTokenizerFast"),jYr.forEach(t),Nao=r(xAe," (GPT NeoX model)"),xAe.forEach(t),qao=i(S),Zn=n(S,"LI",{});var w$=s(Zn);zae=n(w$,"STRONG",{});var DYr=s(zae);jao=r(DYr,"gptj"),DYr.forEach(t),Dao=r(w$," \u2014 "),MP=n(w$,"A",{href:!0});var GYr=s(MP);Gao=r(GYr,"GPT2Tokenizer"),GYr.forEach(t),Oao=r(w$," or "),EP=n(w$,"A",{href:!0});var OYr=s(EP);Vao=r(OYr,"GPT2TokenizerFast"),OYr.forEach(t),Xao=r(w$," (GPT-J model)"),w$.forEach(t),zao=i(S),es=n(S,"LI",{});var A$=s(es);Wae=n(A$,"STRONG",{});var VYr=s(Wae);Wao=r(VYr,"herbert"),VYr.forEach(t),Qao=r(A$," \u2014 "),CP=n(A$,"A",{href:!0});var XYr=s(CP);Hao=r(XYr,"HerbertTokenizer"),XYr.forEach(t),Uao=r(A$," or "),wP=n(A$,"A",{href:!0});var zYr=s(wP);Jao=r(zYr,"HerbertTokenizerFast"),zYr.forEach(t),Yao=r(A$," (HerBERT model)"),A$.forEach(t),Kao=i(S),Og=n(S,"LI",{});var $Ae=s(Og);Qae=n($Ae,"STRONG",{});var WYr=s(Qae);Zao=r(WYr,"hubert"),WYr.forEach(t),eno=r($Ae," \u2014 "),AP=n($Ae,"A",{href:!0});var QYr=s(AP);ono=r(QYr,"Wav2Vec2CTCTokenizer"),QYr.forEach(t),rno=r($Ae," (Hubert model)"),$Ae.forEach(t),tno=i(S),os=n(S,"LI",{});var L$=s(os);Hae=n(L$,"STRONG",{});var HYr=s(Hae);ano=r(HYr,"ibert"),HYr.forEach(t),nno=r(L$," \u2014 "),LP=n(L$,"A",{href:!0});var UYr=s(LP);sno=r(UYr,"RobertaTokenizer"),UYr.forEach(t),lno=r(L$," or "),yP=n(L$,"A",{href:!0});var JYr=s(yP);ino=r(JYr,"RobertaTokenizerFast"),JYr.forEach(t),dno=r(L$," (I-BERT model)"),L$.forEach(t),cno=i(S),rs=n(S,"LI",{});var y$=s(rs);Uae=n(y$,"STRONG",{});var YYr=s(Uae);fno=r(YYr,"layoutlm"),YYr.forEach(t),mno=r(y$," \u2014 "),xP=n(y$,"A",{href:!0});var KYr=s(xP);gno=r(KYr,"LayoutLMTokenizer"),KYr.forEach(t),hno=r(y$," or "),$P=n(y$,"A",{href:!0});var ZYr=s($P);pno=r(ZYr,"LayoutLMTokenizerFast"),ZYr.forEach(t),_no=r(y$," (LayoutLM model)"),y$.forEach(t),uno=i(S),ts=n(S,"LI",{});var x$=s(ts);Jae=n(x$,"STRONG",{});var eKr=s(Jae);bno=r(eKr,"layoutlmv2"),eKr.forEach(t),vno=r(x$," \u2014 "),kP=n(x$,"A",{href:!0});var oKr=s(kP);Fno=r(oKr,"LayoutLMv2Tokenizer"),oKr.forEach(t),Tno=r(x$," or "),SP=n(x$,"A",{href:!0});var rKr=s(SP);Mno=r(rKr,"LayoutLMv2TokenizerFast"),rKr.forEach(t),Eno=r(x$," (LayoutLMv2 model)"),x$.forEach(t),Cno=i(S),as=n(S,"LI",{});var $$=s(as);Yae=n($$,"STRONG",{});var tKr=s(Yae);wno=r(tKr,"layoutlmv3"),tKr.forEach(t),Ano=r($$," \u2014 "),RP=n($$,"A",{href:!0});var aKr=s(RP);Lno=r(aKr,"LayoutLMv3Tokenizer"),aKr.forEach(t),yno=r($$," or "),PP=n($$,"A",{href:!0});var nKr=s(PP);xno=r(nKr,"LayoutLMv3TokenizerFast"),nKr.forEach(t),$no=r($$," (LayoutLMv3 model)"),$$.forEach(t),kno=i(S),ns=n(S,"LI",{});var k$=s(ns);Kae=n(k$,"STRONG",{});var sKr=s(Kae);Sno=r(sKr,"layoutxlm"),sKr.forEach(t),Rno=r(k$," \u2014 "),BP=n(k$,"A",{href:!0});var lKr=s(BP);Pno=r(lKr,"LayoutXLMTokenizer"),lKr.forEach(t),Bno=r(k$," or "),IP=n(k$,"A",{href:!0});var iKr=s(IP);Ino=r(iKr,"LayoutXLMTokenizerFast"),iKr.forEach(t),Nno=r(k$," (LayoutXLM model)"),k$.forEach(t),qno=i(S),ss=n(S,"LI",{});var S$=s(ss);Zae=n(S$,"STRONG",{});var dKr=s(Zae);jno=r(dKr,"led"),dKr.forEach(t),Dno=r(S$," \u2014 "),NP=n(S$,"A",{href:!0});var cKr=s(NP);Gno=r(cKr,"LEDTokenizer"),cKr.forEach(t),Ono=r(S$," or "),qP=n(S$,"A",{href:!0});var fKr=s(qP);Vno=r(fKr,"LEDTokenizerFast"),fKr.forEach(t),Xno=r(S$," (LED model)"),S$.forEach(t),zno=i(S),ls=n(S,"LI",{});var R$=s(ls);ene=n(R$,"STRONG",{});var mKr=s(ene);Wno=r(mKr,"longformer"),mKr.forEach(t),Qno=r(R$," \u2014 "),jP=n(R$,"A",{href:!0});var gKr=s(jP);Hno=r(gKr,"LongformerTokenizer"),gKr.forEach(t),Uno=r(R$," or "),DP=n(R$,"A",{href:!0});var hKr=s(DP);Jno=r(hKr,"LongformerTokenizerFast"),hKr.forEach(t),Yno=r(R$," (Longformer model)"),R$.forEach(t),Kno=i(S),Vg=n(S,"LI",{});var kAe=s(Vg);one=n(kAe,"STRONG",{});var pKr=s(one);Zno=r(pKr,"luke"),pKr.forEach(t),eso=r(kAe," \u2014 "),GP=n(kAe,"A",{href:!0});var _Kr=s(GP);oso=r(_Kr,"LukeTokenizer"),_Kr.forEach(t),rso=r(kAe," (LUKE model)"),kAe.forEach(t),tso=i(S),is=n(S,"LI",{});var P$=s(is);rne=n(P$,"STRONG",{});var uKr=s(rne);aso=r(uKr,"lxmert"),uKr.forEach(t),nso=r(P$," \u2014 "),OP=n(P$,"A",{href:!0});var bKr=s(OP);sso=r(bKr,"LxmertTokenizer"),bKr.forEach(t),lso=r(P$," or "),VP=n(P$,"A",{href:!0});var vKr=s(VP);iso=r(vKr,"LxmertTokenizerFast"),vKr.forEach(t),dso=r(P$," (LXMERT model)"),P$.forEach(t),cso=i(S),Xg=n(S,"LI",{});var SAe=s(Xg);tne=n(SAe,"STRONG",{});var FKr=s(tne);fso=r(FKr,"m2m_100"),FKr.forEach(t),mso=r(SAe," \u2014 "),XP=n(SAe,"A",{href:!0});var TKr=s(XP);gso=r(TKr,"M2M100Tokenizer"),TKr.forEach(t),hso=r(SAe," (M2M100 model)"),SAe.forEach(t),pso=i(S),zg=n(S,"LI",{});var RAe=s(zg);ane=n(RAe,"STRONG",{});var MKr=s(ane);_so=r(MKr,"marian"),MKr.forEach(t),uso=r(RAe," \u2014 "),zP=n(RAe,"A",{href:!0});var EKr=s(zP);bso=r(EKr,"MarianTokenizer"),EKr.forEach(t),vso=r(RAe," (Marian model)"),RAe.forEach(t),Fso=i(S),ds=n(S,"LI",{});var B$=s(ds);nne=n(B$,"STRONG",{});var CKr=s(nne);Tso=r(CKr,"mbart"),CKr.forEach(t),Mso=r(B$," \u2014 "),WP=n(B$,"A",{href:!0});var wKr=s(WP);Eso=r(wKr,"MBartTokenizer"),wKr.forEach(t),Cso=r(B$," or "),QP=n(B$,"A",{href:!0});var AKr=s(QP);wso=r(AKr,"MBartTokenizerFast"),AKr.forEach(t),Aso=r(B$," (mBART model)"),B$.forEach(t),Lso=i(S),cs=n(S,"LI",{});var I$=s(cs);sne=n(I$,"STRONG",{});var LKr=s(sne);yso=r(LKr,"mbart50"),LKr.forEach(t),xso=r(I$," \u2014 "),HP=n(I$,"A",{href:!0});var yKr=s(HP);$so=r(yKr,"MBart50Tokenizer"),yKr.forEach(t),kso=r(I$," or "),UP=n(I$,"A",{href:!0});var xKr=s(UP);Sso=r(xKr,"MBart50TokenizerFast"),xKr.forEach(t),Rso=r(I$," (mBART-50 model)"),I$.forEach(t),Pso=i(S),fs=n(S,"LI",{});var N$=s(fs);lne=n(N$,"STRONG",{});var $Kr=s(lne);Bso=r($Kr,"megatron-bert"),$Kr.forEach(t),Iso=r(N$," \u2014 "),JP=n(N$,"A",{href:!0});var kKr=s(JP);Nso=r(kKr,"BertTokenizer"),kKr.forEach(t),qso=r(N$," or "),YP=n(N$,"A",{href:!0});var SKr=s(YP);jso=r(SKr,"BertTokenizerFast"),SKr.forEach(t),Dso=r(N$," (Megatron-BERT model)"),N$.forEach(t),Gso=i(S),Wg=n(S,"LI",{});var PAe=s(Wg);ine=n(PAe,"STRONG",{});var RKr=s(ine);Oso=r(RKr,"mluke"),RKr.forEach(t),Vso=r(PAe," \u2014 "),KP=n(PAe,"A",{href:!0});var PKr=s(KP);Xso=r(PKr,"MLukeTokenizer"),PKr.forEach(t),zso=r(PAe," (mLUKE model)"),PAe.forEach(t),Wso=i(S),ms=n(S,"LI",{});var q$=s(ms);dne=n(q$,"STRONG",{});var BKr=s(dne);Qso=r(BKr,"mobilebert"),BKr.forEach(t),Hso=r(q$," \u2014 "),ZP=n(q$,"A",{href:!0});var IKr=s(ZP);Uso=r(IKr,"MobileBertTokenizer"),IKr.forEach(t),Jso=r(q$," or "),eB=n(q$,"A",{href:!0});var NKr=s(eB);Yso=r(NKr,"MobileBertTokenizerFast"),NKr.forEach(t),Kso=r(q$," (MobileBERT model)"),q$.forEach(t),Zso=i(S),gs=n(S,"LI",{});var j$=s(gs);cne=n(j$,"STRONG",{});var qKr=s(cne);elo=r(qKr,"mpnet"),qKr.forEach(t),olo=r(j$," \u2014 "),oB=n(j$,"A",{href:!0});var jKr=s(oB);rlo=r(jKr,"MPNetTokenizer"),jKr.forEach(t),tlo=r(j$," or "),rB=n(j$,"A",{href:!0});var DKr=s(rB);alo=r(DKr,"MPNetTokenizerFast"),DKr.forEach(t),nlo=r(j$," (MPNet model)"),j$.forEach(t),slo=i(S),hs=n(S,"LI",{});var D$=s(hs);fne=n(D$,"STRONG",{});var GKr=s(fne);llo=r(GKr,"mt5"),GKr.forEach(t),ilo=r(D$," \u2014 "),tB=n(D$,"A",{href:!0});var OKr=s(tB);dlo=r(OKr,"MT5Tokenizer"),OKr.forEach(t),clo=r(D$," or "),aB=n(D$,"A",{href:!0});var VKr=s(aB);flo=r(VKr,"MT5TokenizerFast"),VKr.forEach(t),mlo=r(D$," (MT5 model)"),D$.forEach(t),glo=i(S),ps=n(S,"LI",{});var G$=s(ps);mne=n(G$,"STRONG",{});var XKr=s(mne);hlo=r(XKr,"nystromformer"),XKr.forEach(t),plo=r(G$," \u2014 "),nB=n(G$,"A",{href:!0});var zKr=s(nB);_lo=r(zKr,"AlbertTokenizer"),zKr.forEach(t),ulo=r(G$," or "),sB=n(G$,"A",{href:!0});var WKr=s(sB);blo=r(WKr,"AlbertTokenizerFast"),WKr.forEach(t),vlo=r(G$," (Nystr\xF6mformer model)"),G$.forEach(t),Flo=i(S),_s=n(S,"LI",{});var O$=s(_s);gne=n(O$,"STRONG",{});var QKr=s(gne);Tlo=r(QKr,"openai-gpt"),QKr.forEach(t),Mlo=r(O$," \u2014 "),lB=n(O$,"A",{href:!0});var HKr=s(lB);Elo=r(HKr,"OpenAIGPTTokenizer"),HKr.forEach(t),Clo=r(O$," or "),iB=n(O$,"A",{href:!0});var UKr=s(iB);wlo=r(UKr,"OpenAIGPTTokenizerFast"),UKr.forEach(t),Alo=r(O$," (OpenAI GPT model)"),O$.forEach(t),Llo=i(S),Qg=n(S,"LI",{});var BAe=s(Qg);hne=n(BAe,"STRONG",{});var JKr=s(hne);ylo=r(JKr,"opt"),JKr.forEach(t),xlo=r(BAe," \u2014 "),dB=n(BAe,"A",{href:!0});var YKr=s(dB);$lo=r(YKr,"GPT2Tokenizer"),YKr.forEach(t),klo=r(BAe," (OPT model)"),BAe.forEach(t),Slo=i(S),us=n(S,"LI",{});var V$=s(us);pne=n(V$,"STRONG",{});var KKr=s(pne);Rlo=r(KKr,"pegasus"),KKr.forEach(t),Plo=r(V$," \u2014 "),cB=n(V$,"A",{href:!0});var ZKr=s(cB);Blo=r(ZKr,"PegasusTokenizer"),ZKr.forEach(t),Ilo=r(V$," or "),fB=n(V$,"A",{href:!0});var eZr=s(fB);Nlo=r(eZr,"PegasusTokenizerFast"),eZr.forEach(t),qlo=r(V$," (Pegasus model)"),V$.forEach(t),jlo=i(S),Hg=n(S,"LI",{});var IAe=s(Hg);_ne=n(IAe,"STRONG",{});var oZr=s(_ne);Dlo=r(oZr,"perceiver"),oZr.forEach(t),Glo=r(IAe," \u2014 "),mB=n(IAe,"A",{href:!0});var rZr=s(mB);Olo=r(rZr,"PerceiverTokenizer"),rZr.forEach(t),Vlo=r(IAe," (Perceiver model)"),IAe.forEach(t),Xlo=i(S),Ug=n(S,"LI",{});var NAe=s(Ug);une=n(NAe,"STRONG",{});var tZr=s(une);zlo=r(tZr,"phobert"),tZr.forEach(t),Wlo=r(NAe," \u2014 "),gB=n(NAe,"A",{href:!0});var aZr=s(gB);Qlo=r(aZr,"PhobertTokenizer"),aZr.forEach(t),Hlo=r(NAe," (PhoBERT model)"),NAe.forEach(t),Ulo=i(S),Jg=n(S,"LI",{});var qAe=s(Jg);bne=n(qAe,"STRONG",{});var nZr=s(bne);Jlo=r(nZr,"plbart"),nZr.forEach(t),Ylo=r(qAe," \u2014 "),hB=n(qAe,"A",{href:!0});var sZr=s(hB);Klo=r(sZr,"PLBartTokenizer"),sZr.forEach(t),Zlo=r(qAe," (PLBart model)"),qAe.forEach(t),eio=i(S),Yg=n(S,"LI",{});var jAe=s(Yg);vne=n(jAe,"STRONG",{});var lZr=s(vne);oio=r(lZr,"prophetnet"),lZr.forEach(t),rio=r(jAe," \u2014 "),pB=n(jAe,"A",{href:!0});var iZr=s(pB);tio=r(iZr,"ProphetNetTokenizer"),iZr.forEach(t),aio=r(jAe," (ProphetNet model)"),jAe.forEach(t),nio=i(S),bs=n(S,"LI",{});var X$=s(bs);Fne=n(X$,"STRONG",{});var dZr=s(Fne);sio=r(dZr,"qdqbert"),dZr.forEach(t),lio=r(X$," \u2014 "),_B=n(X$,"A",{href:!0});var cZr=s(_B);iio=r(cZr,"BertTokenizer"),cZr.forEach(t),dio=r(X$," or "),uB=n(X$,"A",{href:!0});var fZr=s(uB);cio=r(fZr,"BertTokenizerFast"),fZr.forEach(t),fio=r(X$," (QDQBert model)"),X$.forEach(t),mio=i(S),Kg=n(S,"LI",{});var DAe=s(Kg);Tne=n(DAe,"STRONG",{});var mZr=s(Tne);gio=r(mZr,"rag"),mZr.forEach(t),hio=r(DAe," \u2014 "),bB=n(DAe,"A",{href:!0});var gZr=s(bB);pio=r(gZr,"RagTokenizer"),gZr.forEach(t),_io=r(DAe," (RAG model)"),DAe.forEach(t),uio=i(S),vs=n(S,"LI",{});var z$=s(vs);Mne=n(z$,"STRONG",{});var hZr=s(Mne);bio=r(hZr,"realm"),hZr.forEach(t),vio=r(z$," \u2014 "),vB=n(z$,"A",{href:!0});var pZr=s(vB);Fio=r(pZr,"RealmTokenizer"),pZr.forEach(t),Tio=r(z$," or "),FB=n(z$,"A",{href:!0});var _Zr=s(FB);Mio=r(_Zr,"RealmTokenizerFast"),_Zr.forEach(t),Eio=r(z$," (REALM model)"),z$.forEach(t),Cio=i(S),Fs=n(S,"LI",{});var W$=s(Fs);Ene=n(W$,"STRONG",{});var uZr=s(Ene);wio=r(uZr,"reformer"),uZr.forEach(t),Aio=r(W$," \u2014 "),TB=n(W$,"A",{href:!0});var bZr=s(TB);Lio=r(bZr,"ReformerTokenizer"),bZr.forEach(t),yio=r(W$," or "),MB=n(W$,"A",{href:!0});var vZr=s(MB);xio=r(vZr,"ReformerTokenizerFast"),vZr.forEach(t),$io=r(W$," (Reformer model)"),W$.forEach(t),kio=i(S),Ts=n(S,"LI",{});var Q$=s(Ts);Cne=n(Q$,"STRONG",{});var FZr=s(Cne);Sio=r(FZr,"rembert"),FZr.forEach(t),Rio=r(Q$," \u2014 "),EB=n(Q$,"A",{href:!0});var TZr=s(EB);Pio=r(TZr,"RemBertTokenizer"),TZr.forEach(t),Bio=r(Q$," or "),CB=n(Q$,"A",{href:!0});var MZr=s(CB);Iio=r(MZr,"RemBertTokenizerFast"),MZr.forEach(t),Nio=r(Q$," (RemBERT model)"),Q$.forEach(t),qio=i(S),Ms=n(S,"LI",{});var H$=s(Ms);wne=n(H$,"STRONG",{});var EZr=s(wne);jio=r(EZr,"retribert"),EZr.forEach(t),Dio=r(H$," \u2014 "),wB=n(H$,"A",{href:!0});var CZr=s(wB);Gio=r(CZr,"RetriBertTokenizer"),CZr.forEach(t),Oio=r(H$," or "),AB=n(H$,"A",{href:!0});var wZr=s(AB);Vio=r(wZr,"RetriBertTokenizerFast"),wZr.forEach(t),Xio=r(H$," (RetriBERT model)"),H$.forEach(t),zio=i(S),Es=n(S,"LI",{});var U$=s(Es);Ane=n(U$,"STRONG",{});var AZr=s(Ane);Wio=r(AZr,"roberta"),AZr.forEach(t),Qio=r(U$," \u2014 "),LB=n(U$,"A",{href:!0});var LZr=s(LB);Hio=r(LZr,"RobertaTokenizer"),LZr.forEach(t),Uio=r(U$," or "),yB=n(U$,"A",{href:!0});var yZr=s(yB);Jio=r(yZr,"RobertaTokenizerFast"),yZr.forEach(t),Yio=r(U$," (RoBERTa model)"),U$.forEach(t),Kio=i(S),Cs=n(S,"LI",{});var J$=s(Cs);Lne=n(J$,"STRONG",{});var xZr=s(Lne);Zio=r(xZr,"roformer"),xZr.forEach(t),edo=r(J$," \u2014 "),xB=n(J$,"A",{href:!0});var $Zr=s(xB);odo=r($Zr,"RoFormerTokenizer"),$Zr.forEach(t),rdo=r(J$," or "),$B=n(J$,"A",{href:!0});var kZr=s($B);tdo=r(kZr,"RoFormerTokenizerFast"),kZr.forEach(t),ado=r(J$," (RoFormer model)"),J$.forEach(t),ndo=i(S),Zg=n(S,"LI",{});var GAe=s(Zg);yne=n(GAe,"STRONG",{});var SZr=s(yne);sdo=r(SZr,"speech_to_text"),SZr.forEach(t),ldo=r(GAe," \u2014 "),kB=n(GAe,"A",{href:!0});var RZr=s(kB);ido=r(RZr,"Speech2TextTokenizer"),RZr.forEach(t),ddo=r(GAe," (Speech2Text model)"),GAe.forEach(t),cdo=i(S),eh=n(S,"LI",{});var OAe=s(eh);xne=n(OAe,"STRONG",{});var PZr=s(xne);fdo=r(PZr,"speech_to_text_2"),PZr.forEach(t),mdo=r(OAe," \u2014 "),SB=n(OAe,"A",{href:!0});var BZr=s(SB);gdo=r(BZr,"Speech2Text2Tokenizer"),BZr.forEach(t),hdo=r(OAe," (Speech2Text2 model)"),OAe.forEach(t),pdo=i(S),ws=n(S,"LI",{});var Y$=s(ws);$ne=n(Y$,"STRONG",{});var IZr=s($ne);_do=r(IZr,"splinter"),IZr.forEach(t),udo=r(Y$," \u2014 "),RB=n(Y$,"A",{href:!0});var NZr=s(RB);bdo=r(NZr,"SplinterTokenizer"),NZr.forEach(t),vdo=r(Y$," or "),PB=n(Y$,"A",{href:!0});var qZr=s(PB);Fdo=r(qZr,"SplinterTokenizerFast"),qZr.forEach(t),Tdo=r(Y$," (Splinter model)"),Y$.forEach(t),Mdo=i(S),As=n(S,"LI",{});var K$=s(As);kne=n(K$,"STRONG",{});var jZr=s(kne);Edo=r(jZr,"squeezebert"),jZr.forEach(t),Cdo=r(K$," \u2014 "),BB=n(K$,"A",{href:!0});var DZr=s(BB);wdo=r(DZr,"SqueezeBertTokenizer"),DZr.forEach(t),Ado=r(K$," or "),IB=n(K$,"A",{href:!0});var GZr=s(IB);Ldo=r(GZr,"SqueezeBertTokenizerFast"),GZr.forEach(t),ydo=r(K$," (SqueezeBERT model)"),K$.forEach(t),xdo=i(S),Ls=n(S,"LI",{});var Z$=s(Ls);Sne=n(Z$,"STRONG",{});var OZr=s(Sne);$do=r(OZr,"t5"),OZr.forEach(t),kdo=r(Z$," \u2014 "),NB=n(Z$,"A",{href:!0});var VZr=s(NB);Sdo=r(VZr,"T5Tokenizer"),VZr.forEach(t),Rdo=r(Z$," or "),qB=n(Z$,"A",{href:!0});var XZr=s(qB);Pdo=r(XZr,"T5TokenizerFast"),XZr.forEach(t),Bdo=r(Z$," (T5 model)"),Z$.forEach(t),Ido=i(S),oh=n(S,"LI",{});var VAe=s(oh);Rne=n(VAe,"STRONG",{});var zZr=s(Rne);Ndo=r(zZr,"tapas"),zZr.forEach(t),qdo=r(VAe," \u2014 "),jB=n(VAe,"A",{href:!0});var WZr=s(jB);jdo=r(WZr,"TapasTokenizer"),WZr.forEach(t),Ddo=r(VAe," (TAPAS model)"),VAe.forEach(t),Gdo=i(S),rh=n(S,"LI",{});var XAe=s(rh);Pne=n(XAe,"STRONG",{});var QZr=s(Pne);Odo=r(QZr,"tapex"),QZr.forEach(t),Vdo=r(XAe," \u2014 "),DB=n(XAe,"A",{href:!0});var HZr=s(DB);Xdo=r(HZr,"TapexTokenizer"),HZr.forEach(t),zdo=r(XAe," (TAPEX model)"),XAe.forEach(t),Wdo=i(S),th=n(S,"LI",{});var zAe=s(th);Bne=n(zAe,"STRONG",{});var UZr=s(Bne);Qdo=r(UZr,"transfo-xl"),UZr.forEach(t),Hdo=r(zAe," \u2014 "),GB=n(zAe,"A",{href:!0});var JZr=s(GB);Udo=r(JZr,"TransfoXLTokenizer"),JZr.forEach(t),Jdo=r(zAe," (Transformer-XL model)"),zAe.forEach(t),Ydo=i(S),ys=n(S,"LI",{});var ek=s(ys);Ine=n(ek,"STRONG",{});var YZr=s(Ine);Kdo=r(YZr,"visual_bert"),YZr.forEach(t),Zdo=r(ek," \u2014 "),OB=n(ek,"A",{href:!0});var KZr=s(OB);eco=r(KZr,"BertTokenizer"),KZr.forEach(t),oco=r(ek," or "),VB=n(ek,"A",{href:!0});var ZZr=s(VB);rco=r(ZZr,"BertTokenizerFast"),ZZr.forEach(t),tco=r(ek," (VisualBERT model)"),ek.forEach(t),aco=i(S),ah=n(S,"LI",{});var WAe=s(ah);Nne=n(WAe,"STRONG",{});var eet=s(Nne);nco=r(eet,"wav2vec2"),eet.forEach(t),sco=r(WAe," \u2014 "),XB=n(WAe,"A",{href:!0});var oet=s(XB);lco=r(oet,"Wav2Vec2CTCTokenizer"),oet.forEach(t),ico=r(WAe," (Wav2Vec2 model)"),WAe.forEach(t),dco=i(S),nh=n(S,"LI",{});var QAe=s(nh);qne=n(QAe,"STRONG",{});var ret=s(qne);cco=r(ret,"wav2vec2-conformer"),ret.forEach(t),fco=r(QAe," \u2014 "),zB=n(QAe,"A",{href:!0});var tet=s(zB);mco=r(tet,"Wav2Vec2CTCTokenizer"),tet.forEach(t),gco=r(QAe," (Wav2Vec2-Conformer model)"),QAe.forEach(t),hco=i(S),sh=n(S,"LI",{});var HAe=s(sh);jne=n(HAe,"STRONG",{});var aet=s(jne);pco=r(aet,"wav2vec2_phoneme"),aet.forEach(t),_co=r(HAe," \u2014 "),WB=n(HAe,"A",{href:!0});var net=s(WB);uco=r(net,"Wav2Vec2PhonemeCTCTokenizer"),net.forEach(t),bco=r(HAe," (Wav2Vec2Phoneme model)"),HAe.forEach(t),vco=i(S),xs=n(S,"LI",{});var ok=s(xs);Dne=n(ok,"STRONG",{});var set=s(Dne);Fco=r(set,"xglm"),set.forEach(t),Tco=r(ok," \u2014 "),QB=n(ok,"A",{href:!0});var iet=s(QB);Mco=r(iet,"XGLMTokenizer"),iet.forEach(t),Eco=r(ok," or "),HB=n(ok,"A",{href:!0});var det=s(HB);Cco=r(det,"XGLMTokenizerFast"),det.forEach(t),wco=r(ok," (XGLM model)"),ok.forEach(t),Aco=i(S),lh=n(S,"LI",{});var UAe=s(lh);Gne=n(UAe,"STRONG",{});var cet=s(Gne);Lco=r(cet,"xlm"),cet.forEach(t),yco=r(UAe," \u2014 "),UB=n(UAe,"A",{href:!0});var fet=s(UB);xco=r(fet,"XLMTokenizer"),fet.forEach(t),$co=r(UAe," (XLM model)"),UAe.forEach(t),kco=i(S),ih=n(S,"LI",{});var JAe=s(ih);One=n(JAe,"STRONG",{});var met=s(One);Sco=r(met,"xlm-prophetnet"),met.forEach(t),Rco=r(JAe," \u2014 "),JB=n(JAe,"A",{href:!0});var get=s(JB);Pco=r(get,"XLMProphetNetTokenizer"),get.forEach(t),Bco=r(JAe," (XLM-ProphetNet model)"),JAe.forEach(t),Ico=i(S),$s=n(S,"LI",{});var rk=s($s);Vne=n(rk,"STRONG",{});var het=s(Vne);Nco=r(het,"xlm-roberta"),het.forEach(t),qco=r(rk," \u2014 "),YB=n(rk,"A",{href:!0});var pet=s(YB);jco=r(pet,"XLMRobertaTokenizer"),pet.forEach(t),Dco=r(rk," or "),KB=n(rk,"A",{href:!0});var _et=s(KB);Gco=r(_et,"XLMRobertaTokenizerFast"),_et.forEach(t),Oco=r(rk," (XLM-RoBERTa model)"),rk.forEach(t),Vco=i(S),ks=n(S,"LI",{});var tk=s(ks);Xne=n(tk,"STRONG",{});var uet=s(Xne);Xco=r(uet,"xlm-roberta-xl"),uet.forEach(t),zco=r(tk," \u2014 "),ZB=n(tk,"A",{href:!0});var bet=s(ZB);Wco=r(bet,"RobertaTokenizer"),bet.forEach(t),Qco=r(tk," or "),eI=n(tk,"A",{href:!0});var vet=s(eI);Hco=r(vet,"RobertaTokenizerFast"),vet.forEach(t),Uco=r(tk," (XLM-RoBERTa-XL model)"),tk.forEach(t),Jco=i(S),Ss=n(S,"LI",{});var ak=s(Ss);zne=n(ak,"STRONG",{});var Fet=s(zne);Yco=r(Fet,"xlnet"),Fet.forEach(t),Kco=r(ak," \u2014 "),oI=n(ak,"A",{href:!0});var Tet=s(oI);Zco=r(Tet,"XLNetTokenizer"),Tet.forEach(t),efo=r(ak," or "),rI=n(ak,"A",{href:!0});var Met=s(rI);ofo=r(Met,"XLNetTokenizerFast"),Met.forEach(t),rfo=r(ak," (XLNet model)"),ak.forEach(t),tfo=i(S),Rs=n(S,"LI",{});var nk=s(Rs);Wne=n(nk,"STRONG",{});var Eet=s(Wne);afo=r(Eet,"yoso"),Eet.forEach(t),nfo=r(nk," \u2014 "),tI=n(nk,"A",{href:!0});var Cet=s(tI);sfo=r(Cet,"AlbertTokenizer"),Cet.forEach(t),lfo=r(nk," or "),aI=n(nk,"A",{href:!0});var wet=s(aI);ifo=r(wet,"AlbertTokenizerFast"),wet.forEach(t),dfo=r(nk," (YOSO model)"),nk.forEach(t),S.forEach(t),cfo=i(js),T(dh.$$.fragment,js),js.forEach(t),ffo=i(qs),ch=n(qs,"DIV",{class:!0});var wGe=s(ch);T(aL.$$.fragment,wGe),mfo=i(wGe),Qne=n(wGe,"P",{});var Aet=s(Qne);gfo=r(Aet,"Register a new tokenizer in this mapping."),Aet.forEach(t),wGe.forEach(t),qs.forEach(t),Aje=i(f),Ei=n(f,"H2",{class:!0});var AGe=s(Ei);fh=n(AGe,"A",{id:!0,class:!0,href:!0});var Let=s(fh);Hne=n(Let,"SPAN",{});var yet=s(Hne);T(nL.$$.fragment,yet),yet.forEach(t),Let.forEach(t),hfo=i(AGe),Une=n(AGe,"SPAN",{});var xet=s(Une);pfo=r(xet,"AutoFeatureExtractor"),xet.forEach(t),AGe.forEach(t),Lje=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(sL.$$.fragment,Ds),_fo=i(Ds),lL=n(Ds,"P",{});var LGe=s(lL);ufo=r(LGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nI=n(LGe,"A",{href:!0});var $et=s(nI);bfo=r($et,"AutoFeatureExtractor.from_pretrained()"),$et.forEach(t),vfo=r(LGe," class method."),LGe.forEach(t),Ffo=i(Ds),iL=n(Ds,"P",{});var yGe=s(iL);Tfo=r(yGe,"This class cannot be instantiated directly using "),Jne=n(yGe,"CODE",{});var ket=s(Jne);Mfo=r(ket,"__init__()"),ket.forEach(t),Efo=r(yGe," (throws an error)."),yGe.forEach(t),Cfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(dL.$$.fragment,Zt),wfo=i(Zt),Yne=n(Zt,"P",{});var Set=s(Yne);Afo=r(Set,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Set.forEach(t),Lfo=i(Zt),La=n(Zt,"P",{});var Hw=s(La);yfo=r(Hw,"The feature extractor class to instantiate is selected based on the "),Kne=n(Hw,"CODE",{});var Ret=s(Kne);xfo=r(Ret,"model_type"),Ret.forEach(t),$fo=r(Hw,` property of the config object
(either passed as an argument or loaded from `),Zne=n(Hw,"CODE",{});var Pet=s(Zne);kfo=r(Pet,"pretrained_model_name_or_path"),Pet.forEach(t),Sfo=r(Hw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ese=n(Hw,"CODE",{});var Bet=s(ese);Rfo=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),Pfo=r(Hw,":"),Hw.forEach(t),Bfo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);mh=n(K,"LI",{});var YAe=s(mh);ose=n(YAe,"STRONG",{});var Iet=s(ose);Ifo=r(Iet,"beit"),Iet.forEach(t),Nfo=r(YAe," \u2014 "),sI=n(YAe,"A",{href:!0});var Net=s(sI);qfo=r(Net,"BeitFeatureExtractor"),Net.forEach(t),jfo=r(YAe," (BEiT model)"),YAe.forEach(t),Dfo=i(K),gh=n(K,"LI",{});var KAe=s(gh);rse=n(KAe,"STRONG",{});var qet=s(rse);Gfo=r(qet,"clip"),qet.forEach(t),Ofo=r(KAe," \u2014 "),lI=n(KAe,"A",{href:!0});var jet=s(lI);Vfo=r(jet,"CLIPFeatureExtractor"),jet.forEach(t),Xfo=r(KAe," (CLIP model)"),KAe.forEach(t),zfo=i(K),hh=n(K,"LI",{});var ZAe=s(hh);tse=n(ZAe,"STRONG",{});var Det=s(tse);Wfo=r(Det,"convnext"),Det.forEach(t),Qfo=r(ZAe," \u2014 "),iI=n(ZAe,"A",{href:!0});var Get=s(iI);Hfo=r(Get,"ConvNextFeatureExtractor"),Get.forEach(t),Ufo=r(ZAe," (ConvNeXT model)"),ZAe.forEach(t),Jfo=i(K),ph=n(K,"LI",{});var e6e=s(ph);ase=n(e6e,"STRONG",{});var Oet=s(ase);Yfo=r(Oet,"cvt"),Oet.forEach(t),Kfo=r(e6e," \u2014 "),dI=n(e6e,"A",{href:!0});var Vet=s(dI);Zfo=r(Vet,"ConvNextFeatureExtractor"),Vet.forEach(t),emo=r(e6e," (CvT model)"),e6e.forEach(t),omo=i(K),_h=n(K,"LI",{});var o6e=s(_h);nse=n(o6e,"STRONG",{});var Xet=s(nse);rmo=r(Xet,"data2vec-audio"),Xet.forEach(t),tmo=r(o6e," \u2014 "),cI=n(o6e,"A",{href:!0});var zet=s(cI);amo=r(zet,"Wav2Vec2FeatureExtractor"),zet.forEach(t),nmo=r(o6e," (Data2VecAudio model)"),o6e.forEach(t),smo=i(K),uh=n(K,"LI",{});var r6e=s(uh);sse=n(r6e,"STRONG",{});var Wet=s(sse);lmo=r(Wet,"data2vec-vision"),Wet.forEach(t),imo=r(r6e," \u2014 "),fI=n(r6e,"A",{href:!0});var Qet=s(fI);dmo=r(Qet,"BeitFeatureExtractor"),Qet.forEach(t),cmo=r(r6e," (Data2VecVision model)"),r6e.forEach(t),fmo=i(K),bh=n(K,"LI",{});var t6e=s(bh);lse=n(t6e,"STRONG",{});var Het=s(lse);mmo=r(Het,"deit"),Het.forEach(t),gmo=r(t6e," \u2014 "),mI=n(t6e,"A",{href:!0});var Uet=s(mI);hmo=r(Uet,"DeiTFeatureExtractor"),Uet.forEach(t),pmo=r(t6e," (DeiT model)"),t6e.forEach(t),_mo=i(K),vh=n(K,"LI",{});var a6e=s(vh);ise=n(a6e,"STRONG",{});var Jet=s(ise);umo=r(Jet,"detr"),Jet.forEach(t),bmo=r(a6e," \u2014 "),gI=n(a6e,"A",{href:!0});var Yet=s(gI);vmo=r(Yet,"DetrFeatureExtractor"),Yet.forEach(t),Fmo=r(a6e," (DETR model)"),a6e.forEach(t),Tmo=i(K),Fh=n(K,"LI",{});var n6e=s(Fh);dse=n(n6e,"STRONG",{});var Ket=s(dse);Mmo=r(Ket,"dpt"),Ket.forEach(t),Emo=r(n6e," \u2014 "),hI=n(n6e,"A",{href:!0});var Zet=s(hI);Cmo=r(Zet,"DPTFeatureExtractor"),Zet.forEach(t),wmo=r(n6e," (DPT model)"),n6e.forEach(t),Amo=i(K),Th=n(K,"LI",{});var s6e=s(Th);cse=n(s6e,"STRONG",{});var eot=s(cse);Lmo=r(eot,"flava"),eot.forEach(t),ymo=r(s6e," \u2014 "),pI=n(s6e,"A",{href:!0});var oot=s(pI);xmo=r(oot,"FlavaFeatureExtractor"),oot.forEach(t),$mo=r(s6e," (FLAVA model)"),s6e.forEach(t),kmo=i(K),Mh=n(K,"LI",{});var l6e=s(Mh);fse=n(l6e,"STRONG",{});var rot=s(fse);Smo=r(rot,"glpn"),rot.forEach(t),Rmo=r(l6e," \u2014 "),_I=n(l6e,"A",{href:!0});var tot=s(_I);Pmo=r(tot,"GLPNFeatureExtractor"),tot.forEach(t),Bmo=r(l6e," (GLPN model)"),l6e.forEach(t),Imo=i(K),Eh=n(K,"LI",{});var i6e=s(Eh);mse=n(i6e,"STRONG",{});var aot=s(mse);Nmo=r(aot,"hubert"),aot.forEach(t),qmo=r(i6e," \u2014 "),uI=n(i6e,"A",{href:!0});var not=s(uI);jmo=r(not,"Wav2Vec2FeatureExtractor"),not.forEach(t),Dmo=r(i6e," (Hubert model)"),i6e.forEach(t),Gmo=i(K),Ch=n(K,"LI",{});var d6e=s(Ch);gse=n(d6e,"STRONG",{});var sot=s(gse);Omo=r(sot,"imagegpt"),sot.forEach(t),Vmo=r(d6e," \u2014 "),bI=n(d6e,"A",{href:!0});var lot=s(bI);Xmo=r(lot,"ImageGPTFeatureExtractor"),lot.forEach(t),zmo=r(d6e," (ImageGPT model)"),d6e.forEach(t),Wmo=i(K),wh=n(K,"LI",{});var c6e=s(wh);hse=n(c6e,"STRONG",{});var iot=s(hse);Qmo=r(iot,"layoutlmv2"),iot.forEach(t),Hmo=r(c6e," \u2014 "),vI=n(c6e,"A",{href:!0});var dot=s(vI);Umo=r(dot,"LayoutLMv2FeatureExtractor"),dot.forEach(t),Jmo=r(c6e," (LayoutLMv2 model)"),c6e.forEach(t),Ymo=i(K),Ah=n(K,"LI",{});var f6e=s(Ah);pse=n(f6e,"STRONG",{});var cot=s(pse);Kmo=r(cot,"layoutlmv3"),cot.forEach(t),Zmo=r(f6e," \u2014 "),FI=n(f6e,"A",{href:!0});var fot=s(FI);ego=r(fot,"LayoutLMv3FeatureExtractor"),fot.forEach(t),ogo=r(f6e," (LayoutLMv3 model)"),f6e.forEach(t),rgo=i(K),Lh=n(K,"LI",{});var m6e=s(Lh);_se=n(m6e,"STRONG",{});var mot=s(_se);tgo=r(mot,"levit"),mot.forEach(t),ago=r(m6e," \u2014 "),TI=n(m6e,"A",{href:!0});var got=s(TI);ngo=r(got,"LevitFeatureExtractor"),got.forEach(t),sgo=r(m6e," (LeViT model)"),m6e.forEach(t),lgo=i(K),yh=n(K,"LI",{});var g6e=s(yh);use=n(g6e,"STRONG",{});var hot=s(use);igo=r(hot,"maskformer"),hot.forEach(t),dgo=r(g6e," \u2014 "),MI=n(g6e,"A",{href:!0});var pot=s(MI);cgo=r(pot,"MaskFormerFeatureExtractor"),pot.forEach(t),fgo=r(g6e," (MaskFormer model)"),g6e.forEach(t),mgo=i(K),xh=n(K,"LI",{});var h6e=s(xh);bse=n(h6e,"STRONG",{});var _ot=s(bse);ggo=r(_ot,"mctct"),_ot.forEach(t),hgo=r(h6e," \u2014 "),EI=n(h6e,"A",{href:!0});var uot=s(EI);pgo=r(uot,"MCTCTFeatureExtractor"),uot.forEach(t),_go=r(h6e," (M-CTC-T model)"),h6e.forEach(t),ugo=i(K),$h=n(K,"LI",{});var p6e=s($h);vse=n(p6e,"STRONG",{});var bot=s(vse);bgo=r(bot,"perceiver"),bot.forEach(t),vgo=r(p6e," \u2014 "),CI=n(p6e,"A",{href:!0});var vot=s(CI);Fgo=r(vot,"PerceiverFeatureExtractor"),vot.forEach(t),Tgo=r(p6e," (Perceiver model)"),p6e.forEach(t),Mgo=i(K),kh=n(K,"LI",{});var _6e=s(kh);Fse=n(_6e,"STRONG",{});var Fot=s(Fse);Ego=r(Fot,"poolformer"),Fot.forEach(t),Cgo=r(_6e," \u2014 "),wI=n(_6e,"A",{href:!0});var Tot=s(wI);wgo=r(Tot,"PoolFormerFeatureExtractor"),Tot.forEach(t),Ago=r(_6e," (PoolFormer model)"),_6e.forEach(t),Lgo=i(K),Sh=n(K,"LI",{});var u6e=s(Sh);Tse=n(u6e,"STRONG",{});var Mot=s(Tse);ygo=r(Mot,"regnet"),Mot.forEach(t),xgo=r(u6e," \u2014 "),AI=n(u6e,"A",{href:!0});var Eot=s(AI);$go=r(Eot,"ConvNextFeatureExtractor"),Eot.forEach(t),kgo=r(u6e," (RegNet model)"),u6e.forEach(t),Sgo=i(K),Rh=n(K,"LI",{});var b6e=s(Rh);Mse=n(b6e,"STRONG",{});var Cot=s(Mse);Rgo=r(Cot,"resnet"),Cot.forEach(t),Pgo=r(b6e," \u2014 "),LI=n(b6e,"A",{href:!0});var wot=s(LI);Bgo=r(wot,"ConvNextFeatureExtractor"),wot.forEach(t),Igo=r(b6e," (ResNet model)"),b6e.forEach(t),Ngo=i(K),Ph=n(K,"LI",{});var v6e=s(Ph);Ese=n(v6e,"STRONG",{});var Aot=s(Ese);qgo=r(Aot,"segformer"),Aot.forEach(t),jgo=r(v6e," \u2014 "),yI=n(v6e,"A",{href:!0});var Lot=s(yI);Dgo=r(Lot,"SegformerFeatureExtractor"),Lot.forEach(t),Ggo=r(v6e," (SegFormer model)"),v6e.forEach(t),Ogo=i(K),Bh=n(K,"LI",{});var F6e=s(Bh);Cse=n(F6e,"STRONG",{});var yot=s(Cse);Vgo=r(yot,"speech_to_text"),yot.forEach(t),Xgo=r(F6e," \u2014 "),xI=n(F6e,"A",{href:!0});var xot=s(xI);zgo=r(xot,"Speech2TextFeatureExtractor"),xot.forEach(t),Wgo=r(F6e," (Speech2Text model)"),F6e.forEach(t),Qgo=i(K),Ih=n(K,"LI",{});var T6e=s(Ih);wse=n(T6e,"STRONG",{});var $ot=s(wse);Hgo=r($ot,"swin"),$ot.forEach(t),Ugo=r(T6e," \u2014 "),$I=n(T6e,"A",{href:!0});var kot=s($I);Jgo=r(kot,"ViTFeatureExtractor"),kot.forEach(t),Ygo=r(T6e," (Swin Transformer model)"),T6e.forEach(t),Kgo=i(K),Nh=n(K,"LI",{});var M6e=s(Nh);Ase=n(M6e,"STRONG",{});var Sot=s(Ase);Zgo=r(Sot,"van"),Sot.forEach(t),eho=r(M6e," \u2014 "),kI=n(M6e,"A",{href:!0});var Rot=s(kI);oho=r(Rot,"ConvNextFeatureExtractor"),Rot.forEach(t),rho=r(M6e," (VAN model)"),M6e.forEach(t),tho=i(K),qh=n(K,"LI",{});var E6e=s(qh);Lse=n(E6e,"STRONG",{});var Pot=s(Lse);aho=r(Pot,"vit"),Pot.forEach(t),nho=r(E6e," \u2014 "),SI=n(E6e,"A",{href:!0});var Bot=s(SI);sho=r(Bot,"ViTFeatureExtractor"),Bot.forEach(t),lho=r(E6e," (ViT model)"),E6e.forEach(t),iho=i(K),jh=n(K,"LI",{});var C6e=s(jh);yse=n(C6e,"STRONG",{});var Iot=s(yse);dho=r(Iot,"vit_mae"),Iot.forEach(t),cho=r(C6e," \u2014 "),RI=n(C6e,"A",{href:!0});var Not=s(RI);fho=r(Not,"ViTFeatureExtractor"),Not.forEach(t),mho=r(C6e," (ViTMAE model)"),C6e.forEach(t),gho=i(K),Dh=n(K,"LI",{});var w6e=s(Dh);xse=n(w6e,"STRONG",{});var qot=s(xse);hho=r(qot,"wav2vec2"),qot.forEach(t),pho=r(w6e," \u2014 "),PI=n(w6e,"A",{href:!0});var jot=s(PI);_ho=r(jot,"Wav2Vec2FeatureExtractor"),jot.forEach(t),uho=r(w6e," (Wav2Vec2 model)"),w6e.forEach(t),bho=i(K),Gh=n(K,"LI",{});var A6e=s(Gh);$se=n(A6e,"STRONG",{});var Dot=s($se);vho=r(Dot,"wav2vec2-conformer"),Dot.forEach(t),Fho=r(A6e," \u2014 "),BI=n(A6e,"A",{href:!0});var Got=s(BI);Tho=r(Got,"Wav2Vec2FeatureExtractor"),Got.forEach(t),Mho=r(A6e," (Wav2Vec2-Conformer model)"),A6e.forEach(t),Eho=i(K),Oh=n(K,"LI",{});var L6e=s(Oh);kse=n(L6e,"STRONG",{});var Oot=s(kse);Cho=r(Oot,"yolos"),Oot.forEach(t),who=r(L6e," \u2014 "),II=n(L6e,"A",{href:!0});var Vot=s(II);Aho=r(Vot,"YolosFeatureExtractor"),Vot.forEach(t),Lho=r(L6e," (YOLOS model)"),L6e.forEach(t),K.forEach(t),yho=i(Zt),T(Vh.$$.fragment,Zt),xho=i(Zt),T(Xh.$$.fragment,Zt),Zt.forEach(t),$ho=i(Ds),zh=n(Ds,"DIV",{class:!0});var xGe=s(zh);T(cL.$$.fragment,xGe),kho=i(xGe),Sse=n(xGe,"P",{});var Xot=s(Sse);Sho=r(Xot,"Register a new feature extractor for this class."),Xot.forEach(t),xGe.forEach(t),Ds.forEach(t),yje=i(f),Ci=n(f,"H2",{class:!0});var $Ge=s(Ci);Wh=n($Ge,"A",{id:!0,class:!0,href:!0});var zot=s(Wh);Rse=n(zot,"SPAN",{});var Wot=s(Rse);T(fL.$$.fragment,Wot),Wot.forEach(t),zot.forEach(t),Rho=i($Ge),Pse=n($Ge,"SPAN",{});var Qot=s(Pse);Pho=r(Qot,"AutoProcessor"),Qot.forEach(t),$Ge.forEach(t),xje=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(mL.$$.fragment,Gs),Bho=i(Gs),gL=n(Gs,"P",{});var kGe=s(gL);Iho=r(kGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NI=n(kGe,"A",{href:!0});var Hot=s(NI);Nho=r(Hot,"AutoProcessor.from_pretrained()"),Hot.forEach(t),qho=r(kGe," class method."),kGe.forEach(t),jho=i(Gs),hL=n(Gs,"P",{});var SGe=s(hL);Dho=r(SGe,"This class cannot be instantiated directly using "),Bse=n(SGe,"CODE",{});var Uot=s(Bse);Gho=r(Uot,"__init__()"),Uot.forEach(t),Oho=r(SGe," (throws an error)."),SGe.forEach(t),Vho=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(pL.$$.fragment,ea),Xho=i(ea),Ise=n(ea,"P",{});var Jot=s(Ise);zho=r(Jot,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jot.forEach(t),Who=i(ea),wi=n(ea,"P",{});var KZ=s(wi);Qho=r(KZ,"The processor class to instantiate is selected based on the "),Nse=n(KZ,"CODE",{});var Yot=s(Nse);Hho=r(Yot,"model_type"),Yot.forEach(t),Uho=r(KZ,` property of the config object (either
passed as an argument or loaded from `),qse=n(KZ,"CODE",{});var Kot=s(qse);Jho=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),Yho=r(KZ," if possible):"),KZ.forEach(t),Kho=i(ea),he=n(ea,"UL",{});var ue=s(he);Qh=n(ue,"LI",{});var y6e=s(Qh);jse=n(y6e,"STRONG",{});var Zot=s(jse);Zho=r(Zot,"clip"),Zot.forEach(t),epo=r(y6e," \u2014 "),qI=n(y6e,"A",{href:!0});var ert=s(qI);opo=r(ert,"CLIPProcessor"),ert.forEach(t),rpo=r(y6e," (CLIP model)"),y6e.forEach(t),tpo=i(ue),Hh=n(ue,"LI",{});var x6e=s(Hh);Dse=n(x6e,"STRONG",{});var ort=s(Dse);apo=r(ort,"flava"),ort.forEach(t),npo=r(x6e," \u2014 "),Gse=n(x6e,"CODE",{});var rrt=s(Gse);spo=r(rrt,"FLAVAProcessor"),rrt.forEach(t),lpo=r(x6e," (FLAVA model)"),x6e.forEach(t),ipo=i(ue),Uh=n(ue,"LI",{});var $6e=s(Uh);Ose=n($6e,"STRONG",{});var trt=s(Ose);dpo=r(trt,"layoutlmv2"),trt.forEach(t),cpo=r($6e," \u2014 "),jI=n($6e,"A",{href:!0});var art=s(jI);fpo=r(art,"LayoutLMv2Processor"),art.forEach(t),mpo=r($6e," (LayoutLMv2 model)"),$6e.forEach(t),gpo=i(ue),Jh=n(ue,"LI",{});var k6e=s(Jh);Vse=n(k6e,"STRONG",{});var nrt=s(Vse);hpo=r(nrt,"layoutlmv3"),nrt.forEach(t),ppo=r(k6e," \u2014 "),DI=n(k6e,"A",{href:!0});var srt=s(DI);_po=r(srt,"LayoutLMv3Processor"),srt.forEach(t),upo=r(k6e," (LayoutLMv3 model)"),k6e.forEach(t),bpo=i(ue),Yh=n(ue,"LI",{});var S6e=s(Yh);Xse=n(S6e,"STRONG",{});var lrt=s(Xse);vpo=r(lrt,"layoutxlm"),lrt.forEach(t),Fpo=r(S6e," \u2014 "),GI=n(S6e,"A",{href:!0});var irt=s(GI);Tpo=r(irt,"LayoutXLMProcessor"),irt.forEach(t),Mpo=r(S6e," (LayoutXLM model)"),S6e.forEach(t),Epo=i(ue),Kh=n(ue,"LI",{});var R6e=s(Kh);zse=n(R6e,"STRONG",{});var drt=s(zse);Cpo=r(drt,"sew"),drt.forEach(t),wpo=r(R6e," \u2014 "),OI=n(R6e,"A",{href:!0});var crt=s(OI);Apo=r(crt,"Wav2Vec2Processor"),crt.forEach(t),Lpo=r(R6e," (SEW model)"),R6e.forEach(t),ypo=i(ue),Zh=n(ue,"LI",{});var P6e=s(Zh);Wse=n(P6e,"STRONG",{});var frt=s(Wse);xpo=r(frt,"sew-d"),frt.forEach(t),$po=r(P6e," \u2014 "),VI=n(P6e,"A",{href:!0});var mrt=s(VI);kpo=r(mrt,"Wav2Vec2Processor"),mrt.forEach(t),Spo=r(P6e," (SEW-D model)"),P6e.forEach(t),Rpo=i(ue),ep=n(ue,"LI",{});var B6e=s(ep);Qse=n(B6e,"STRONG",{});var grt=s(Qse);Ppo=r(grt,"speech_to_text"),grt.forEach(t),Bpo=r(B6e," \u2014 "),XI=n(B6e,"A",{href:!0});var hrt=s(XI);Ipo=r(hrt,"Speech2TextProcessor"),hrt.forEach(t),Npo=r(B6e," (Speech2Text model)"),B6e.forEach(t),qpo=i(ue),op=n(ue,"LI",{});var I6e=s(op);Hse=n(I6e,"STRONG",{});var prt=s(Hse);jpo=r(prt,"speech_to_text_2"),prt.forEach(t),Dpo=r(I6e," \u2014 "),zI=n(I6e,"A",{href:!0});var _rt=s(zI);Gpo=r(_rt,"Speech2Text2Processor"),_rt.forEach(t),Opo=r(I6e," (Speech2Text2 model)"),I6e.forEach(t),Vpo=i(ue),rp=n(ue,"LI",{});var N6e=s(rp);Use=n(N6e,"STRONG",{});var urt=s(Use);Xpo=r(urt,"trocr"),urt.forEach(t),zpo=r(N6e," \u2014 "),WI=n(N6e,"A",{href:!0});var brt=s(WI);Wpo=r(brt,"TrOCRProcessor"),brt.forEach(t),Qpo=r(N6e," (TrOCR model)"),N6e.forEach(t),Hpo=i(ue),tp=n(ue,"LI",{});var q6e=s(tp);Jse=n(q6e,"STRONG",{});var vrt=s(Jse);Upo=r(vrt,"unispeech"),vrt.forEach(t),Jpo=r(q6e," \u2014 "),QI=n(q6e,"A",{href:!0});var Frt=s(QI);Ypo=r(Frt,"Wav2Vec2Processor"),Frt.forEach(t),Kpo=r(q6e," (UniSpeech model)"),q6e.forEach(t),Zpo=i(ue),ap=n(ue,"LI",{});var j6e=s(ap);Yse=n(j6e,"STRONG",{});var Trt=s(Yse);e_o=r(Trt,"unispeech-sat"),Trt.forEach(t),o_o=r(j6e," \u2014 "),HI=n(j6e,"A",{href:!0});var Mrt=s(HI);r_o=r(Mrt,"Wav2Vec2Processor"),Mrt.forEach(t),t_o=r(j6e," (UniSpeechSat model)"),j6e.forEach(t),a_o=i(ue),np=n(ue,"LI",{});var D6e=s(np);Kse=n(D6e,"STRONG",{});var Ert=s(Kse);n_o=r(Ert,"vilt"),Ert.forEach(t),s_o=r(D6e," \u2014 "),UI=n(D6e,"A",{href:!0});var Crt=s(UI);l_o=r(Crt,"ViltProcessor"),Crt.forEach(t),i_o=r(D6e," (ViLT model)"),D6e.forEach(t),d_o=i(ue),sp=n(ue,"LI",{});var G6e=s(sp);Zse=n(G6e,"STRONG",{});var wrt=s(Zse);c_o=r(wrt,"vision-text-dual-encoder"),wrt.forEach(t),f_o=r(G6e," \u2014 "),JI=n(G6e,"A",{href:!0});var Art=s(JI);m_o=r(Art,"VisionTextDualEncoderProcessor"),Art.forEach(t),g_o=r(G6e," (VisionTextDualEncoder model)"),G6e.forEach(t),h_o=i(ue),lp=n(ue,"LI",{});var O6e=s(lp);ele=n(O6e,"STRONG",{});var Lrt=s(ele);p_o=r(Lrt,"wav2vec2"),Lrt.forEach(t),__o=r(O6e," \u2014 "),YI=n(O6e,"A",{href:!0});var yrt=s(YI);u_o=r(yrt,"Wav2Vec2Processor"),yrt.forEach(t),b_o=r(O6e," (Wav2Vec2 model)"),O6e.forEach(t),v_o=i(ue),ip=n(ue,"LI",{});var V6e=s(ip);ole=n(V6e,"STRONG",{});var xrt=s(ole);F_o=r(xrt,"wav2vec2-conformer"),xrt.forEach(t),T_o=r(V6e," \u2014 "),KI=n(V6e,"A",{href:!0});var $rt=s(KI);M_o=r($rt,"Wav2Vec2Processor"),$rt.forEach(t),E_o=r(V6e," (Wav2Vec2-Conformer model)"),V6e.forEach(t),C_o=i(ue),dp=n(ue,"LI",{});var X6e=s(dp);rle=n(X6e,"STRONG",{});var krt=s(rle);w_o=r(krt,"wavlm"),krt.forEach(t),A_o=r(X6e," \u2014 "),ZI=n(X6e,"A",{href:!0});var Srt=s(ZI);L_o=r(Srt,"Wav2Vec2Processor"),Srt.forEach(t),y_o=r(X6e," (WavLM model)"),X6e.forEach(t),ue.forEach(t),x_o=i(ea),T(cp.$$.fragment,ea),$_o=i(ea),T(fp.$$.fragment,ea),ea.forEach(t),k_o=i(Gs),mp=n(Gs,"DIV",{class:!0});var RGe=s(mp);T(_L.$$.fragment,RGe),S_o=i(RGe),tle=n(RGe,"P",{});var Rrt=s(tle);R_o=r(Rrt,"Register a new processor for this class."),Rrt.forEach(t),RGe.forEach(t),Gs.forEach(t),$je=i(f),Ai=n(f,"H2",{class:!0});var PGe=s(Ai);gp=n(PGe,"A",{id:!0,class:!0,href:!0});var Prt=s(gp);ale=n(Prt,"SPAN",{});var Brt=s(ale);T(uL.$$.fragment,Brt),Brt.forEach(t),Prt.forEach(t),P_o=i(PGe),nle=n(PGe,"SPAN",{});var Irt=s(nle);B_o=r(Irt,"AutoModel"),Irt.forEach(t),PGe.forEach(t),kje=i(f),yo=n(f,"DIV",{class:!0});var Os=s(yo);T(bL.$$.fragment,Os),I_o=i(Os),Li=n(Os,"P",{});var ZZ=s(Li);N_o=r(ZZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eN=n(ZZ,"A",{href:!0});var Nrt=s(eN);q_o=r(Nrt,"from_pretrained()"),Nrt.forEach(t),j_o=r(ZZ," class method or the "),oN=n(ZZ,"A",{href:!0});var qrt=s(oN);D_o=r(qrt,"from_config()"),qrt.forEach(t),G_o=r(ZZ,` class
method.`),ZZ.forEach(t),O_o=i(Os),vL=n(Os,"P",{});var BGe=s(vL);V_o=r(BGe,"This class cannot be instantiated directly using "),sle=n(BGe,"CODE",{});var jrt=s(sle);X_o=r(jrt,"__init__()"),jrt.forEach(t),z_o=r(BGe," (throws an error)."),BGe.forEach(t),W_o=i(Os),tt=n(Os,"DIV",{class:!0});var Uw=s(tt);T(FL.$$.fragment,Uw),Q_o=i(Uw),lle=n(Uw,"P",{});var Drt=s(lle);H_o=r(Drt,"Instantiates one of the base model classes of the library from a configuration."),Drt.forEach(t),U_o=i(Uw),yi=n(Uw,"P",{});var eee=s(yi);J_o=r(eee,`Note:
Loading a model from its configuration file does `),ile=n(eee,"STRONG",{});var Grt=s(ile);Y_o=r(Grt,"not"),Grt.forEach(t),K_o=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rN=n(eee,"A",{href:!0});var Ort=s(rN);Z_o=r(Ort,"from_pretrained()"),Ort.forEach(t),euo=r(eee," to load the model weights."),eee.forEach(t),ouo=i(Uw),T(hp.$$.fragment,Uw),Uw.forEach(t),ruo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(TL.$$.fragment,oa),tuo=i(oa),dle=n(oa,"P",{});var Vrt=s(dle);auo=r(Vrt,"Instantiate one of the base model classes of the library from a pretrained model."),Vrt.forEach(t),nuo=i(oa),ya=n(oa,"P",{});var Jw=s(ya);suo=r(Jw,"The model class to instantiate is selected based on the "),cle=n(Jw,"CODE",{});var Xrt=s(cle);luo=r(Xrt,"model_type"),Xrt.forEach(t),iuo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),fle=n(Jw,"CODE",{});var zrt=s(fle);duo=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),cuo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mle=n(Jw,"CODE",{});var Wrt=s(mle);fuo=r(Wrt,"pretrained_model_name_or_path"),Wrt.forEach(t),muo=r(Jw,":"),Jw.forEach(t),guo=i(oa),y=n(oa,"UL",{});var $=s(y);pp=n($,"LI",{});var z6e=s(pp);gle=n(z6e,"STRONG",{});var Qrt=s(gle);huo=r(Qrt,"albert"),Qrt.forEach(t),puo=r(z6e," \u2014 "),tN=n(z6e,"A",{href:!0});var Hrt=s(tN);_uo=r(Hrt,"AlbertModel"),Hrt.forEach(t),uuo=r(z6e," (ALBERT model)"),z6e.forEach(t),buo=i($),_p=n($,"LI",{});var W6e=s(_p);hle=n(W6e,"STRONG",{});var Urt=s(hle);vuo=r(Urt,"bart"),Urt.forEach(t),Fuo=r(W6e," \u2014 "),aN=n(W6e,"A",{href:!0});var Jrt=s(aN);Tuo=r(Jrt,"BartModel"),Jrt.forEach(t),Muo=r(W6e," (BART model)"),W6e.forEach(t),Euo=i($),up=n($,"LI",{});var Q6e=s(up);ple=n(Q6e,"STRONG",{});var Yrt=s(ple);Cuo=r(Yrt,"beit"),Yrt.forEach(t),wuo=r(Q6e," \u2014 "),nN=n(Q6e,"A",{href:!0});var Krt=s(nN);Auo=r(Krt,"BeitModel"),Krt.forEach(t),Luo=r(Q6e," (BEiT model)"),Q6e.forEach(t),yuo=i($),bp=n($,"LI",{});var H6e=s(bp);_le=n(H6e,"STRONG",{});var Zrt=s(_le);xuo=r(Zrt,"bert"),Zrt.forEach(t),$uo=r(H6e," \u2014 "),sN=n(H6e,"A",{href:!0});var ett=s(sN);kuo=r(ett,"BertModel"),ett.forEach(t),Suo=r(H6e," (BERT model)"),H6e.forEach(t),Ruo=i($),vp=n($,"LI",{});var U6e=s(vp);ule=n(U6e,"STRONG",{});var ott=s(ule);Puo=r(ott,"bert-generation"),ott.forEach(t),Buo=r(U6e," \u2014 "),lN=n(U6e,"A",{href:!0});var rtt=s(lN);Iuo=r(rtt,"BertGenerationEncoder"),rtt.forEach(t),Nuo=r(U6e," (Bert Generation model)"),U6e.forEach(t),quo=i($),Fp=n($,"LI",{});var J6e=s(Fp);ble=n(J6e,"STRONG",{});var ttt=s(ble);juo=r(ttt,"big_bird"),ttt.forEach(t),Duo=r(J6e," \u2014 "),iN=n(J6e,"A",{href:!0});var att=s(iN);Guo=r(att,"BigBirdModel"),att.forEach(t),Ouo=r(J6e," (BigBird model)"),J6e.forEach(t),Vuo=i($),Tp=n($,"LI",{});var Y6e=s(Tp);vle=n(Y6e,"STRONG",{});var ntt=s(vle);Xuo=r(ntt,"bigbird_pegasus"),ntt.forEach(t),zuo=r(Y6e," \u2014 "),dN=n(Y6e,"A",{href:!0});var stt=s(dN);Wuo=r(stt,"BigBirdPegasusModel"),stt.forEach(t),Quo=r(Y6e," (BigBird-Pegasus model)"),Y6e.forEach(t),Huo=i($),Mp=n($,"LI",{});var K6e=s(Mp);Fle=n(K6e,"STRONG",{});var ltt=s(Fle);Uuo=r(ltt,"blenderbot"),ltt.forEach(t),Juo=r(K6e," \u2014 "),cN=n(K6e,"A",{href:!0});var itt=s(cN);Yuo=r(itt,"BlenderbotModel"),itt.forEach(t),Kuo=r(K6e," (Blenderbot model)"),K6e.forEach(t),Zuo=i($),Ep=n($,"LI",{});var Z6e=s(Ep);Tle=n(Z6e,"STRONG",{});var dtt=s(Tle);e4o=r(dtt,"blenderbot-small"),dtt.forEach(t),o4o=r(Z6e," \u2014 "),fN=n(Z6e,"A",{href:!0});var ctt=s(fN);r4o=r(ctt,"BlenderbotSmallModel"),ctt.forEach(t),t4o=r(Z6e," (BlenderbotSmall model)"),Z6e.forEach(t),a4o=i($),Cp=n($,"LI",{});var eLe=s(Cp);Mle=n(eLe,"STRONG",{});var ftt=s(Mle);n4o=r(ftt,"bloom"),ftt.forEach(t),s4o=r(eLe," \u2014 "),mN=n(eLe,"A",{href:!0});var mtt=s(mN);l4o=r(mtt,"BloomModel"),mtt.forEach(t),i4o=r(eLe," (BLOOM model)"),eLe.forEach(t),d4o=i($),wp=n($,"LI",{});var oLe=s(wp);Ele=n(oLe,"STRONG",{});var gtt=s(Ele);c4o=r(gtt,"camembert"),gtt.forEach(t),f4o=r(oLe," \u2014 "),gN=n(oLe,"A",{href:!0});var htt=s(gN);m4o=r(htt,"CamembertModel"),htt.forEach(t),g4o=r(oLe," (CamemBERT model)"),oLe.forEach(t),h4o=i($),Ap=n($,"LI",{});var rLe=s(Ap);Cle=n(rLe,"STRONG",{});var ptt=s(Cle);p4o=r(ptt,"canine"),ptt.forEach(t),_4o=r(rLe," \u2014 "),hN=n(rLe,"A",{href:!0});var _tt=s(hN);u4o=r(_tt,"CanineModel"),_tt.forEach(t),b4o=r(rLe," (CANINE model)"),rLe.forEach(t),v4o=i($),Lp=n($,"LI",{});var tLe=s(Lp);wle=n(tLe,"STRONG",{});var utt=s(wle);F4o=r(utt,"clip"),utt.forEach(t),T4o=r(tLe," \u2014 "),pN=n(tLe,"A",{href:!0});var btt=s(pN);M4o=r(btt,"CLIPModel"),btt.forEach(t),E4o=r(tLe," (CLIP model)"),tLe.forEach(t),C4o=i($),yp=n($,"LI",{});var aLe=s(yp);Ale=n(aLe,"STRONG",{});var vtt=s(Ale);w4o=r(vtt,"convbert"),vtt.forEach(t),A4o=r(aLe," \u2014 "),_N=n(aLe,"A",{href:!0});var Ftt=s(_N);L4o=r(Ftt,"ConvBertModel"),Ftt.forEach(t),y4o=r(aLe," (ConvBERT model)"),aLe.forEach(t),x4o=i($),xp=n($,"LI",{});var nLe=s(xp);Lle=n(nLe,"STRONG",{});var Ttt=s(Lle);$4o=r(Ttt,"convnext"),Ttt.forEach(t),k4o=r(nLe," \u2014 "),uN=n(nLe,"A",{href:!0});var Mtt=s(uN);S4o=r(Mtt,"ConvNextModel"),Mtt.forEach(t),R4o=r(nLe," (ConvNeXT model)"),nLe.forEach(t),P4o=i($),$p=n($,"LI",{});var sLe=s($p);yle=n(sLe,"STRONG",{});var Ett=s(yle);B4o=r(Ett,"ctrl"),Ett.forEach(t),I4o=r(sLe," \u2014 "),bN=n(sLe,"A",{href:!0});var Ctt=s(bN);N4o=r(Ctt,"CTRLModel"),Ctt.forEach(t),q4o=r(sLe," (CTRL model)"),sLe.forEach(t),j4o=i($),kp=n($,"LI",{});var lLe=s(kp);xle=n(lLe,"STRONG",{});var wtt=s(xle);D4o=r(wtt,"cvt"),wtt.forEach(t),G4o=r(lLe," \u2014 "),vN=n(lLe,"A",{href:!0});var Att=s(vN);O4o=r(Att,"CvtModel"),Att.forEach(t),V4o=r(lLe," (CvT model)"),lLe.forEach(t),X4o=i($),Sp=n($,"LI",{});var iLe=s(Sp);$le=n(iLe,"STRONG",{});var Ltt=s($le);z4o=r(Ltt,"data2vec-audio"),Ltt.forEach(t),W4o=r(iLe," \u2014 "),FN=n(iLe,"A",{href:!0});var ytt=s(FN);Q4o=r(ytt,"Data2VecAudioModel"),ytt.forEach(t),H4o=r(iLe," (Data2VecAudio model)"),iLe.forEach(t),U4o=i($),Rp=n($,"LI",{});var dLe=s(Rp);kle=n(dLe,"STRONG",{});var xtt=s(kle);J4o=r(xtt,"data2vec-text"),xtt.forEach(t),Y4o=r(dLe," \u2014 "),TN=n(dLe,"A",{href:!0});var $tt=s(TN);K4o=r($tt,"Data2VecTextModel"),$tt.forEach(t),Z4o=r(dLe," (Data2VecText model)"),dLe.forEach(t),e1o=i($),Pp=n($,"LI",{});var cLe=s(Pp);Sle=n(cLe,"STRONG",{});var ktt=s(Sle);o1o=r(ktt,"data2vec-vision"),ktt.forEach(t),r1o=r(cLe," \u2014 "),MN=n(cLe,"A",{href:!0});var Stt=s(MN);t1o=r(Stt,"Data2VecVisionModel"),Stt.forEach(t),a1o=r(cLe," (Data2VecVision model)"),cLe.forEach(t),n1o=i($),Bp=n($,"LI",{});var fLe=s(Bp);Rle=n(fLe,"STRONG",{});var Rtt=s(Rle);s1o=r(Rtt,"deberta"),Rtt.forEach(t),l1o=r(fLe," \u2014 "),EN=n(fLe,"A",{href:!0});var Ptt=s(EN);i1o=r(Ptt,"DebertaModel"),Ptt.forEach(t),d1o=r(fLe," (DeBERTa model)"),fLe.forEach(t),c1o=i($),Ip=n($,"LI",{});var mLe=s(Ip);Ple=n(mLe,"STRONG",{});var Btt=s(Ple);f1o=r(Btt,"deberta-v2"),Btt.forEach(t),m1o=r(mLe," \u2014 "),CN=n(mLe,"A",{href:!0});var Itt=s(CN);g1o=r(Itt,"DebertaV2Model"),Itt.forEach(t),h1o=r(mLe," (DeBERTa-v2 model)"),mLe.forEach(t),p1o=i($),Np=n($,"LI",{});var gLe=s(Np);Ble=n(gLe,"STRONG",{});var Ntt=s(Ble);_1o=r(Ntt,"decision_transformer"),Ntt.forEach(t),u1o=r(gLe," \u2014 "),wN=n(gLe,"A",{href:!0});var qtt=s(wN);b1o=r(qtt,"DecisionTransformerModel"),qtt.forEach(t),v1o=r(gLe," (Decision Transformer model)"),gLe.forEach(t),F1o=i($),qp=n($,"LI",{});var hLe=s(qp);Ile=n(hLe,"STRONG",{});var jtt=s(Ile);T1o=r(jtt,"deit"),jtt.forEach(t),M1o=r(hLe," \u2014 "),AN=n(hLe,"A",{href:!0});var Dtt=s(AN);E1o=r(Dtt,"DeiTModel"),Dtt.forEach(t),C1o=r(hLe," (DeiT model)"),hLe.forEach(t),w1o=i($),jp=n($,"LI",{});var pLe=s(jp);Nle=n(pLe,"STRONG",{});var Gtt=s(Nle);A1o=r(Gtt,"detr"),Gtt.forEach(t),L1o=r(pLe," \u2014 "),LN=n(pLe,"A",{href:!0});var Ott=s(LN);y1o=r(Ott,"DetrModel"),Ott.forEach(t),x1o=r(pLe," (DETR model)"),pLe.forEach(t),$1o=i($),Dp=n($,"LI",{});var _Le=s(Dp);qle=n(_Le,"STRONG",{});var Vtt=s(qle);k1o=r(Vtt,"distilbert"),Vtt.forEach(t),S1o=r(_Le," \u2014 "),yN=n(_Le,"A",{href:!0});var Xtt=s(yN);R1o=r(Xtt,"DistilBertModel"),Xtt.forEach(t),P1o=r(_Le," (DistilBERT model)"),_Le.forEach(t),B1o=i($),Gp=n($,"LI",{});var uLe=s(Gp);jle=n(uLe,"STRONG",{});var ztt=s(jle);I1o=r(ztt,"dpr"),ztt.forEach(t),N1o=r(uLe," \u2014 "),xN=n(uLe,"A",{href:!0});var Wtt=s(xN);q1o=r(Wtt,"DPRQuestionEncoder"),Wtt.forEach(t),j1o=r(uLe," (DPR model)"),uLe.forEach(t),D1o=i($),Op=n($,"LI",{});var bLe=s(Op);Dle=n(bLe,"STRONG",{});var Qtt=s(Dle);G1o=r(Qtt,"dpt"),Qtt.forEach(t),O1o=r(bLe," \u2014 "),$N=n(bLe,"A",{href:!0});var Htt=s($N);V1o=r(Htt,"DPTModel"),Htt.forEach(t),X1o=r(bLe," (DPT model)"),bLe.forEach(t),z1o=i($),Vp=n($,"LI",{});var vLe=s(Vp);Gle=n(vLe,"STRONG",{});var Utt=s(Gle);W1o=r(Utt,"electra"),Utt.forEach(t),Q1o=r(vLe," \u2014 "),kN=n(vLe,"A",{href:!0});var Jtt=s(kN);H1o=r(Jtt,"ElectraModel"),Jtt.forEach(t),U1o=r(vLe," (ELECTRA model)"),vLe.forEach(t),J1o=i($),Xp=n($,"LI",{});var FLe=s(Xp);Ole=n(FLe,"STRONG",{});var Ytt=s(Ole);Y1o=r(Ytt,"flaubert"),Ytt.forEach(t),K1o=r(FLe," \u2014 "),SN=n(FLe,"A",{href:!0});var Ktt=s(SN);Z1o=r(Ktt,"FlaubertModel"),Ktt.forEach(t),e7o=r(FLe," (FlauBERT model)"),FLe.forEach(t),o7o=i($),zp=n($,"LI",{});var TLe=s(zp);Vle=n(TLe,"STRONG",{});var Ztt=s(Vle);r7o=r(Ztt,"flava"),Ztt.forEach(t),t7o=r(TLe," \u2014 "),RN=n(TLe,"A",{href:!0});var eat=s(RN);a7o=r(eat,"FlavaModel"),eat.forEach(t),n7o=r(TLe," (FLAVA model)"),TLe.forEach(t),s7o=i($),Wp=n($,"LI",{});var MLe=s(Wp);Xle=n(MLe,"STRONG",{});var oat=s(Xle);l7o=r(oat,"fnet"),oat.forEach(t),i7o=r(MLe," \u2014 "),PN=n(MLe,"A",{href:!0});var rat=s(PN);d7o=r(rat,"FNetModel"),rat.forEach(t),c7o=r(MLe," (FNet model)"),MLe.forEach(t),f7o=i($),Qp=n($,"LI",{});var ELe=s(Qp);zle=n(ELe,"STRONG",{});var tat=s(zle);m7o=r(tat,"fsmt"),tat.forEach(t),g7o=r(ELe," \u2014 "),BN=n(ELe,"A",{href:!0});var aat=s(BN);h7o=r(aat,"FSMTModel"),aat.forEach(t),p7o=r(ELe," (FairSeq Machine-Translation model)"),ELe.forEach(t),_7o=i($),Ps=n($,"LI",{});var sk=s(Ps);Wle=n(sk,"STRONG",{});var nat=s(Wle);u7o=r(nat,"funnel"),nat.forEach(t),b7o=r(sk," \u2014 "),IN=n(sk,"A",{href:!0});var sat=s(IN);v7o=r(sat,"FunnelModel"),sat.forEach(t),F7o=r(sk," or "),NN=n(sk,"A",{href:!0});var lat=s(NN);T7o=r(lat,"FunnelBaseModel"),lat.forEach(t),M7o=r(sk," (Funnel Transformer model)"),sk.forEach(t),E7o=i($),Hp=n($,"LI",{});var CLe=s(Hp);Qle=n(CLe,"STRONG",{});var iat=s(Qle);C7o=r(iat,"glpn"),iat.forEach(t),w7o=r(CLe," \u2014 "),qN=n(CLe,"A",{href:!0});var dat=s(qN);A7o=r(dat,"GLPNModel"),dat.forEach(t),L7o=r(CLe," (GLPN model)"),CLe.forEach(t),y7o=i($),Up=n($,"LI",{});var wLe=s(Up);Hle=n(wLe,"STRONG",{});var cat=s(Hle);x7o=r(cat,"gpt2"),cat.forEach(t),$7o=r(wLe," \u2014 "),jN=n(wLe,"A",{href:!0});var fat=s(jN);k7o=r(fat,"GPT2Model"),fat.forEach(t),S7o=r(wLe," (OpenAI GPT-2 model)"),wLe.forEach(t),R7o=i($),Jp=n($,"LI",{});var ALe=s(Jp);Ule=n(ALe,"STRONG",{});var mat=s(Ule);P7o=r(mat,"gpt_neo"),mat.forEach(t),B7o=r(ALe," \u2014 "),DN=n(ALe,"A",{href:!0});var gat=s(DN);I7o=r(gat,"GPTNeoModel"),gat.forEach(t),N7o=r(ALe," (GPT Neo model)"),ALe.forEach(t),q7o=i($),Yp=n($,"LI",{});var LLe=s(Yp);Jle=n(LLe,"STRONG",{});var hat=s(Jle);j7o=r(hat,"gpt_neox"),hat.forEach(t),D7o=r(LLe," \u2014 "),GN=n(LLe,"A",{href:!0});var pat=s(GN);G7o=r(pat,"GPTNeoXModel"),pat.forEach(t),O7o=r(LLe," (GPT NeoX model)"),LLe.forEach(t),V7o=i($),Kp=n($,"LI",{});var yLe=s(Kp);Yle=n(yLe,"STRONG",{});var _at=s(Yle);X7o=r(_at,"gptj"),_at.forEach(t),z7o=r(yLe," \u2014 "),ON=n(yLe,"A",{href:!0});var uat=s(ON);W7o=r(uat,"GPTJModel"),uat.forEach(t),Q7o=r(yLe," (GPT-J model)"),yLe.forEach(t),H7o=i($),Zp=n($,"LI",{});var xLe=s(Zp);Kle=n(xLe,"STRONG",{});var bat=s(Kle);U7o=r(bat,"hubert"),bat.forEach(t),J7o=r(xLe," \u2014 "),VN=n(xLe,"A",{href:!0});var vat=s(VN);Y7o=r(vat,"HubertModel"),vat.forEach(t),K7o=r(xLe," (Hubert model)"),xLe.forEach(t),Z7o=i($),e_=n($,"LI",{});var $Le=s(e_);Zle=n($Le,"STRONG",{});var Fat=s(Zle);ebo=r(Fat,"ibert"),Fat.forEach(t),obo=r($Le," \u2014 "),XN=n($Le,"A",{href:!0});var Tat=s(XN);rbo=r(Tat,"IBertModel"),Tat.forEach(t),tbo=r($Le," (I-BERT model)"),$Le.forEach(t),abo=i($),o_=n($,"LI",{});var kLe=s(o_);eie=n(kLe,"STRONG",{});var Mat=s(eie);nbo=r(Mat,"imagegpt"),Mat.forEach(t),sbo=r(kLe," \u2014 "),zN=n(kLe,"A",{href:!0});var Eat=s(zN);lbo=r(Eat,"ImageGPTModel"),Eat.forEach(t),ibo=r(kLe," (ImageGPT model)"),kLe.forEach(t),dbo=i($),r_=n($,"LI",{});var SLe=s(r_);oie=n(SLe,"STRONG",{});var Cat=s(oie);cbo=r(Cat,"layoutlm"),Cat.forEach(t),fbo=r(SLe," \u2014 "),WN=n(SLe,"A",{href:!0});var wat=s(WN);mbo=r(wat,"LayoutLMModel"),wat.forEach(t),gbo=r(SLe," (LayoutLM model)"),SLe.forEach(t),hbo=i($),t_=n($,"LI",{});var RLe=s(t_);rie=n(RLe,"STRONG",{});var Aat=s(rie);pbo=r(Aat,"layoutlmv2"),Aat.forEach(t),_bo=r(RLe," \u2014 "),QN=n(RLe,"A",{href:!0});var Lat=s(QN);ubo=r(Lat,"LayoutLMv2Model"),Lat.forEach(t),bbo=r(RLe," (LayoutLMv2 model)"),RLe.forEach(t),vbo=i($),a_=n($,"LI",{});var PLe=s(a_);tie=n(PLe,"STRONG",{});var yat=s(tie);Fbo=r(yat,"layoutlmv3"),yat.forEach(t),Tbo=r(PLe," \u2014 "),HN=n(PLe,"A",{href:!0});var xat=s(HN);Mbo=r(xat,"LayoutLMv3Model"),xat.forEach(t),Ebo=r(PLe," (LayoutLMv3 model)"),PLe.forEach(t),Cbo=i($),n_=n($,"LI",{});var BLe=s(n_);aie=n(BLe,"STRONG",{});var $at=s(aie);wbo=r($at,"led"),$at.forEach(t),Abo=r(BLe," \u2014 "),UN=n(BLe,"A",{href:!0});var kat=s(UN);Lbo=r(kat,"LEDModel"),kat.forEach(t),ybo=r(BLe," (LED model)"),BLe.forEach(t),xbo=i($),s_=n($,"LI",{});var ILe=s(s_);nie=n(ILe,"STRONG",{});var Sat=s(nie);$bo=r(Sat,"levit"),Sat.forEach(t),kbo=r(ILe," \u2014 "),JN=n(ILe,"A",{href:!0});var Rat=s(JN);Sbo=r(Rat,"LevitModel"),Rat.forEach(t),Rbo=r(ILe," (LeViT model)"),ILe.forEach(t),Pbo=i($),l_=n($,"LI",{});var NLe=s(l_);sie=n(NLe,"STRONG",{});var Pat=s(sie);Bbo=r(Pat,"longformer"),Pat.forEach(t),Ibo=r(NLe," \u2014 "),YN=n(NLe,"A",{href:!0});var Bat=s(YN);Nbo=r(Bat,"LongformerModel"),Bat.forEach(t),qbo=r(NLe," (Longformer model)"),NLe.forEach(t),jbo=i($),i_=n($,"LI",{});var qLe=s(i_);lie=n(qLe,"STRONG",{});var Iat=s(lie);Dbo=r(Iat,"luke"),Iat.forEach(t),Gbo=r(qLe," \u2014 "),KN=n(qLe,"A",{href:!0});var Nat=s(KN);Obo=r(Nat,"LukeModel"),Nat.forEach(t),Vbo=r(qLe," (LUKE model)"),qLe.forEach(t),Xbo=i($),d_=n($,"LI",{});var jLe=s(d_);iie=n(jLe,"STRONG",{});var qat=s(iie);zbo=r(qat,"lxmert"),qat.forEach(t),Wbo=r(jLe," \u2014 "),ZN=n(jLe,"A",{href:!0});var jat=s(ZN);Qbo=r(jat,"LxmertModel"),jat.forEach(t),Hbo=r(jLe," (LXMERT model)"),jLe.forEach(t),Ubo=i($),c_=n($,"LI",{});var DLe=s(c_);die=n(DLe,"STRONG",{});var Dat=s(die);Jbo=r(Dat,"m2m_100"),Dat.forEach(t),Ybo=r(DLe," \u2014 "),eq=n(DLe,"A",{href:!0});var Gat=s(eq);Kbo=r(Gat,"M2M100Model"),Gat.forEach(t),Zbo=r(DLe," (M2M100 model)"),DLe.forEach(t),e2o=i($),f_=n($,"LI",{});var GLe=s(f_);cie=n(GLe,"STRONG",{});var Oat=s(cie);o2o=r(Oat,"marian"),Oat.forEach(t),r2o=r(GLe," \u2014 "),oq=n(GLe,"A",{href:!0});var Vat=s(oq);t2o=r(Vat,"MarianModel"),Vat.forEach(t),a2o=r(GLe," (Marian model)"),GLe.forEach(t),n2o=i($),m_=n($,"LI",{});var OLe=s(m_);fie=n(OLe,"STRONG",{});var Xat=s(fie);s2o=r(Xat,"maskformer"),Xat.forEach(t),l2o=r(OLe," \u2014 "),rq=n(OLe,"A",{href:!0});var zat=s(rq);i2o=r(zat,"MaskFormerModel"),zat.forEach(t),d2o=r(OLe," (MaskFormer model)"),OLe.forEach(t),c2o=i($),g_=n($,"LI",{});var VLe=s(g_);mie=n(VLe,"STRONG",{});var Wat=s(mie);f2o=r(Wat,"mbart"),Wat.forEach(t),m2o=r(VLe," \u2014 "),tq=n(VLe,"A",{href:!0});var Qat=s(tq);g2o=r(Qat,"MBartModel"),Qat.forEach(t),h2o=r(VLe," (mBART model)"),VLe.forEach(t),p2o=i($),h_=n($,"LI",{});var XLe=s(h_);gie=n(XLe,"STRONG",{});var Hat=s(gie);_2o=r(Hat,"mctct"),Hat.forEach(t),u2o=r(XLe," \u2014 "),aq=n(XLe,"A",{href:!0});var Uat=s(aq);b2o=r(Uat,"MCTCTModel"),Uat.forEach(t),v2o=r(XLe," (M-CTC-T model)"),XLe.forEach(t),F2o=i($),p_=n($,"LI",{});var zLe=s(p_);hie=n(zLe,"STRONG",{});var Jat=s(hie);T2o=r(Jat,"megatron-bert"),Jat.forEach(t),M2o=r(zLe," \u2014 "),nq=n(zLe,"A",{href:!0});var Yat=s(nq);E2o=r(Yat,"MegatronBertModel"),Yat.forEach(t),C2o=r(zLe," (Megatron-BERT model)"),zLe.forEach(t),w2o=i($),__=n($,"LI",{});var WLe=s(__);pie=n(WLe,"STRONG",{});var Kat=s(pie);A2o=r(Kat,"mobilebert"),Kat.forEach(t),L2o=r(WLe," \u2014 "),sq=n(WLe,"A",{href:!0});var Zat=s(sq);y2o=r(Zat,"MobileBertModel"),Zat.forEach(t),x2o=r(WLe," (MobileBERT model)"),WLe.forEach(t),$2o=i($),u_=n($,"LI",{});var QLe=s(u_);_ie=n(QLe,"STRONG",{});var ent=s(_ie);k2o=r(ent,"mpnet"),ent.forEach(t),S2o=r(QLe," \u2014 "),lq=n(QLe,"A",{href:!0});var ont=s(lq);R2o=r(ont,"MPNetModel"),ont.forEach(t),P2o=r(QLe," (MPNet model)"),QLe.forEach(t),B2o=i($),b_=n($,"LI",{});var HLe=s(b_);uie=n(HLe,"STRONG",{});var rnt=s(uie);I2o=r(rnt,"mt5"),rnt.forEach(t),N2o=r(HLe," \u2014 "),iq=n(HLe,"A",{href:!0});var tnt=s(iq);q2o=r(tnt,"MT5Model"),tnt.forEach(t),j2o=r(HLe," (MT5 model)"),HLe.forEach(t),D2o=i($),v_=n($,"LI",{});var ULe=s(v_);bie=n(ULe,"STRONG",{});var ant=s(bie);G2o=r(ant,"nystromformer"),ant.forEach(t),O2o=r(ULe," \u2014 "),dq=n(ULe,"A",{href:!0});var nnt=s(dq);V2o=r(nnt,"NystromformerModel"),nnt.forEach(t),X2o=r(ULe," (Nystr\xF6mformer model)"),ULe.forEach(t),z2o=i($),F_=n($,"LI",{});var JLe=s(F_);vie=n(JLe,"STRONG",{});var snt=s(vie);W2o=r(snt,"openai-gpt"),snt.forEach(t),Q2o=r(JLe," \u2014 "),cq=n(JLe,"A",{href:!0});var lnt=s(cq);H2o=r(lnt,"OpenAIGPTModel"),lnt.forEach(t),U2o=r(JLe," (OpenAI GPT model)"),JLe.forEach(t),J2o=i($),T_=n($,"LI",{});var YLe=s(T_);Fie=n(YLe,"STRONG",{});var int=s(Fie);Y2o=r(int,"opt"),int.forEach(t),K2o=r(YLe," \u2014 "),fq=n(YLe,"A",{href:!0});var dnt=s(fq);Z2o=r(dnt,"OPTModel"),dnt.forEach(t),evo=r(YLe," (OPT model)"),YLe.forEach(t),ovo=i($),M_=n($,"LI",{});var KLe=s(M_);Tie=n(KLe,"STRONG",{});var cnt=s(Tie);rvo=r(cnt,"pegasus"),cnt.forEach(t),tvo=r(KLe," \u2014 "),mq=n(KLe,"A",{href:!0});var fnt=s(mq);avo=r(fnt,"PegasusModel"),fnt.forEach(t),nvo=r(KLe," (Pegasus model)"),KLe.forEach(t),svo=i($),E_=n($,"LI",{});var ZLe=s(E_);Mie=n(ZLe,"STRONG",{});var mnt=s(Mie);lvo=r(mnt,"perceiver"),mnt.forEach(t),ivo=r(ZLe," \u2014 "),gq=n(ZLe,"A",{href:!0});var gnt=s(gq);dvo=r(gnt,"PerceiverModel"),gnt.forEach(t),cvo=r(ZLe," (Perceiver model)"),ZLe.forEach(t),fvo=i($),C_=n($,"LI",{});var eye=s(C_);Eie=n(eye,"STRONG",{});var hnt=s(Eie);mvo=r(hnt,"plbart"),hnt.forEach(t),gvo=r(eye," \u2014 "),hq=n(eye,"A",{href:!0});var pnt=s(hq);hvo=r(pnt,"PLBartModel"),pnt.forEach(t),pvo=r(eye," (PLBart model)"),eye.forEach(t),_vo=i($),w_=n($,"LI",{});var oye=s(w_);Cie=n(oye,"STRONG",{});var _nt=s(Cie);uvo=r(_nt,"poolformer"),_nt.forEach(t),bvo=r(oye," \u2014 "),pq=n(oye,"A",{href:!0});var unt=s(pq);vvo=r(unt,"PoolFormerModel"),unt.forEach(t),Fvo=r(oye," (PoolFormer model)"),oye.forEach(t),Tvo=i($),A_=n($,"LI",{});var rye=s(A_);wie=n(rye,"STRONG",{});var bnt=s(wie);Mvo=r(bnt,"prophetnet"),bnt.forEach(t),Evo=r(rye," \u2014 "),_q=n(rye,"A",{href:!0});var vnt=s(_q);Cvo=r(vnt,"ProphetNetModel"),vnt.forEach(t),wvo=r(rye," (ProphetNet model)"),rye.forEach(t),Avo=i($),L_=n($,"LI",{});var tye=s(L_);Aie=n(tye,"STRONG",{});var Fnt=s(Aie);Lvo=r(Fnt,"qdqbert"),Fnt.forEach(t),yvo=r(tye," \u2014 "),uq=n(tye,"A",{href:!0});var Tnt=s(uq);xvo=r(Tnt,"QDQBertModel"),Tnt.forEach(t),$vo=r(tye," (QDQBert model)"),tye.forEach(t),kvo=i($),y_=n($,"LI",{});var aye=s(y_);Lie=n(aye,"STRONG",{});var Mnt=s(Lie);Svo=r(Mnt,"reformer"),Mnt.forEach(t),Rvo=r(aye," \u2014 "),bq=n(aye,"A",{href:!0});var Ent=s(bq);Pvo=r(Ent,"ReformerModel"),Ent.forEach(t),Bvo=r(aye," (Reformer model)"),aye.forEach(t),Ivo=i($),x_=n($,"LI",{});var nye=s(x_);yie=n(nye,"STRONG",{});var Cnt=s(yie);Nvo=r(Cnt,"regnet"),Cnt.forEach(t),qvo=r(nye," \u2014 "),vq=n(nye,"A",{href:!0});var wnt=s(vq);jvo=r(wnt,"RegNetModel"),wnt.forEach(t),Dvo=r(nye," (RegNet model)"),nye.forEach(t),Gvo=i($),$_=n($,"LI",{});var sye=s($_);xie=n(sye,"STRONG",{});var Ant=s(xie);Ovo=r(Ant,"rembert"),Ant.forEach(t),Vvo=r(sye," \u2014 "),Fq=n(sye,"A",{href:!0});var Lnt=s(Fq);Xvo=r(Lnt,"RemBertModel"),Lnt.forEach(t),zvo=r(sye," (RemBERT model)"),sye.forEach(t),Wvo=i($),k_=n($,"LI",{});var lye=s(k_);$ie=n(lye,"STRONG",{});var ynt=s($ie);Qvo=r(ynt,"resnet"),ynt.forEach(t),Hvo=r(lye," \u2014 "),Tq=n(lye,"A",{href:!0});var xnt=s(Tq);Uvo=r(xnt,"ResNetModel"),xnt.forEach(t),Jvo=r(lye," (ResNet model)"),lye.forEach(t),Yvo=i($),S_=n($,"LI",{});var iye=s(S_);kie=n(iye,"STRONG",{});var $nt=s(kie);Kvo=r($nt,"retribert"),$nt.forEach(t),Zvo=r(iye," \u2014 "),Mq=n(iye,"A",{href:!0});var knt=s(Mq);eFo=r(knt,"RetriBertModel"),knt.forEach(t),oFo=r(iye," (RetriBERT model)"),iye.forEach(t),rFo=i($),R_=n($,"LI",{});var dye=s(R_);Sie=n(dye,"STRONG",{});var Snt=s(Sie);tFo=r(Snt,"roberta"),Snt.forEach(t),aFo=r(dye," \u2014 "),Eq=n(dye,"A",{href:!0});var Rnt=s(Eq);nFo=r(Rnt,"RobertaModel"),Rnt.forEach(t),sFo=r(dye," (RoBERTa model)"),dye.forEach(t),lFo=i($),P_=n($,"LI",{});var cye=s(P_);Rie=n(cye,"STRONG",{});var Pnt=s(Rie);iFo=r(Pnt,"roformer"),Pnt.forEach(t),dFo=r(cye," \u2014 "),Cq=n(cye,"A",{href:!0});var Bnt=s(Cq);cFo=r(Bnt,"RoFormerModel"),Bnt.forEach(t),fFo=r(cye," (RoFormer model)"),cye.forEach(t),mFo=i($),B_=n($,"LI",{});var fye=s(B_);Pie=n(fye,"STRONG",{});var Int=s(Pie);gFo=r(Int,"segformer"),Int.forEach(t),hFo=r(fye," \u2014 "),wq=n(fye,"A",{href:!0});var Nnt=s(wq);pFo=r(Nnt,"SegformerModel"),Nnt.forEach(t),_Fo=r(fye," (SegFormer model)"),fye.forEach(t),uFo=i($),I_=n($,"LI",{});var mye=s(I_);Bie=n(mye,"STRONG",{});var qnt=s(Bie);bFo=r(qnt,"sew"),qnt.forEach(t),vFo=r(mye," \u2014 "),Aq=n(mye,"A",{href:!0});var jnt=s(Aq);FFo=r(jnt,"SEWModel"),jnt.forEach(t),TFo=r(mye," (SEW model)"),mye.forEach(t),MFo=i($),N_=n($,"LI",{});var gye=s(N_);Iie=n(gye,"STRONG",{});var Dnt=s(Iie);EFo=r(Dnt,"sew-d"),Dnt.forEach(t),CFo=r(gye," \u2014 "),Lq=n(gye,"A",{href:!0});var Gnt=s(Lq);wFo=r(Gnt,"SEWDModel"),Gnt.forEach(t),AFo=r(gye," (SEW-D model)"),gye.forEach(t),LFo=i($),q_=n($,"LI",{});var hye=s(q_);Nie=n(hye,"STRONG",{});var Ont=s(Nie);yFo=r(Ont,"speech_to_text"),Ont.forEach(t),xFo=r(hye," \u2014 "),yq=n(hye,"A",{href:!0});var Vnt=s(yq);$Fo=r(Vnt,"Speech2TextModel"),Vnt.forEach(t),kFo=r(hye," (Speech2Text model)"),hye.forEach(t),SFo=i($),j_=n($,"LI",{});var pye=s(j_);qie=n(pye,"STRONG",{});var Xnt=s(qie);RFo=r(Xnt,"splinter"),Xnt.forEach(t),PFo=r(pye," \u2014 "),xq=n(pye,"A",{href:!0});var znt=s(xq);BFo=r(znt,"SplinterModel"),znt.forEach(t),IFo=r(pye," (Splinter model)"),pye.forEach(t),NFo=i($),D_=n($,"LI",{});var _ye=s(D_);jie=n(_ye,"STRONG",{});var Wnt=s(jie);qFo=r(Wnt,"squeezebert"),Wnt.forEach(t),jFo=r(_ye," \u2014 "),$q=n(_ye,"A",{href:!0});var Qnt=s($q);DFo=r(Qnt,"SqueezeBertModel"),Qnt.forEach(t),GFo=r(_ye," (SqueezeBERT model)"),_ye.forEach(t),OFo=i($),G_=n($,"LI",{});var uye=s(G_);Die=n(uye,"STRONG",{});var Hnt=s(Die);VFo=r(Hnt,"swin"),Hnt.forEach(t),XFo=r(uye," \u2014 "),kq=n(uye,"A",{href:!0});var Unt=s(kq);zFo=r(Unt,"SwinModel"),Unt.forEach(t),WFo=r(uye," (Swin Transformer model)"),uye.forEach(t),QFo=i($),O_=n($,"LI",{});var bye=s(O_);Gie=n(bye,"STRONG",{});var Jnt=s(Gie);HFo=r(Jnt,"t5"),Jnt.forEach(t),UFo=r(bye," \u2014 "),Sq=n(bye,"A",{href:!0});var Ynt=s(Sq);JFo=r(Ynt,"T5Model"),Ynt.forEach(t),YFo=r(bye," (T5 model)"),bye.forEach(t),KFo=i($),V_=n($,"LI",{});var vye=s(V_);Oie=n(vye,"STRONG",{});var Knt=s(Oie);ZFo=r(Knt,"tapas"),Knt.forEach(t),eTo=r(vye," \u2014 "),Rq=n(vye,"A",{href:!0});var Znt=s(Rq);oTo=r(Znt,"TapasModel"),Znt.forEach(t),rTo=r(vye," (TAPAS model)"),vye.forEach(t),tTo=i($),X_=n($,"LI",{});var Fye=s(X_);Vie=n(Fye,"STRONG",{});var est=s(Vie);aTo=r(est,"trajectory_transformer"),est.forEach(t),nTo=r(Fye," \u2014 "),Pq=n(Fye,"A",{href:!0});var ost=s(Pq);sTo=r(ost,"TrajectoryTransformerModel"),ost.forEach(t),lTo=r(Fye," (Trajectory Transformer model)"),Fye.forEach(t),iTo=i($),z_=n($,"LI",{});var Tye=s(z_);Xie=n(Tye,"STRONG",{});var rst=s(Xie);dTo=r(rst,"transfo-xl"),rst.forEach(t),cTo=r(Tye," \u2014 "),Bq=n(Tye,"A",{href:!0});var tst=s(Bq);fTo=r(tst,"TransfoXLModel"),tst.forEach(t),mTo=r(Tye," (Transformer-XL model)"),Tye.forEach(t),gTo=i($),W_=n($,"LI",{});var Mye=s(W_);zie=n(Mye,"STRONG",{});var ast=s(zie);hTo=r(ast,"unispeech"),ast.forEach(t),pTo=r(Mye," \u2014 "),Iq=n(Mye,"A",{href:!0});var nst=s(Iq);_To=r(nst,"UniSpeechModel"),nst.forEach(t),uTo=r(Mye," (UniSpeech model)"),Mye.forEach(t),bTo=i($),Q_=n($,"LI",{});var Eye=s(Q_);Wie=n(Eye,"STRONG",{});var sst=s(Wie);vTo=r(sst,"unispeech-sat"),sst.forEach(t),FTo=r(Eye," \u2014 "),Nq=n(Eye,"A",{href:!0});var lst=s(Nq);TTo=r(lst,"UniSpeechSatModel"),lst.forEach(t),MTo=r(Eye," (UniSpeechSat model)"),Eye.forEach(t),ETo=i($),H_=n($,"LI",{});var Cye=s(H_);Qie=n(Cye,"STRONG",{});var ist=s(Qie);CTo=r(ist,"van"),ist.forEach(t),wTo=r(Cye," \u2014 "),qq=n(Cye,"A",{href:!0});var dst=s(qq);ATo=r(dst,"VanModel"),dst.forEach(t),LTo=r(Cye," (VAN model)"),Cye.forEach(t),yTo=i($),U_=n($,"LI",{});var wye=s(U_);Hie=n(wye,"STRONG",{});var cst=s(Hie);xTo=r(cst,"vilt"),cst.forEach(t),$To=r(wye," \u2014 "),jq=n(wye,"A",{href:!0});var fst=s(jq);kTo=r(fst,"ViltModel"),fst.forEach(t),STo=r(wye," (ViLT model)"),wye.forEach(t),RTo=i($),J_=n($,"LI",{});var Aye=s(J_);Uie=n(Aye,"STRONG",{});var mst=s(Uie);PTo=r(mst,"vision-text-dual-encoder"),mst.forEach(t),BTo=r(Aye," \u2014 "),Dq=n(Aye,"A",{href:!0});var gst=s(Dq);ITo=r(gst,"VisionTextDualEncoderModel"),gst.forEach(t),NTo=r(Aye," (VisionTextDualEncoder model)"),Aye.forEach(t),qTo=i($),Y_=n($,"LI",{});var Lye=s(Y_);Jie=n(Lye,"STRONG",{});var hst=s(Jie);jTo=r(hst,"visual_bert"),hst.forEach(t),DTo=r(Lye," \u2014 "),Gq=n(Lye,"A",{href:!0});var pst=s(Gq);GTo=r(pst,"VisualBertModel"),pst.forEach(t),OTo=r(Lye," (VisualBERT model)"),Lye.forEach(t),VTo=i($),K_=n($,"LI",{});var yye=s(K_);Yie=n(yye,"STRONG",{});var _st=s(Yie);XTo=r(_st,"vit"),_st.forEach(t),zTo=r(yye," \u2014 "),Oq=n(yye,"A",{href:!0});var ust=s(Oq);WTo=r(ust,"ViTModel"),ust.forEach(t),QTo=r(yye," (ViT model)"),yye.forEach(t),HTo=i($),Z_=n($,"LI",{});var xye=s(Z_);Kie=n(xye,"STRONG",{});var bst=s(Kie);UTo=r(bst,"vit_mae"),bst.forEach(t),JTo=r(xye," \u2014 "),Vq=n(xye,"A",{href:!0});var vst=s(Vq);YTo=r(vst,"ViTMAEModel"),vst.forEach(t),KTo=r(xye," (ViTMAE model)"),xye.forEach(t),ZTo=i($),eu=n($,"LI",{});var $ye=s(eu);Zie=n($ye,"STRONG",{});var Fst=s(Zie);eMo=r(Fst,"wav2vec2"),Fst.forEach(t),oMo=r($ye," \u2014 "),Xq=n($ye,"A",{href:!0});var Tst=s(Xq);rMo=r(Tst,"Wav2Vec2Model"),Tst.forEach(t),tMo=r($ye," (Wav2Vec2 model)"),$ye.forEach(t),aMo=i($),ou=n($,"LI",{});var kye=s(ou);ede=n(kye,"STRONG",{});var Mst=s(ede);nMo=r(Mst,"wav2vec2-conformer"),Mst.forEach(t),sMo=r(kye," \u2014 "),zq=n(kye,"A",{href:!0});var Est=s(zq);lMo=r(Est,"Wav2Vec2ConformerModel"),Est.forEach(t),iMo=r(kye," (Wav2Vec2-Conformer model)"),kye.forEach(t),dMo=i($),ru=n($,"LI",{});var Sye=s(ru);ode=n(Sye,"STRONG",{});var Cst=s(ode);cMo=r(Cst,"wavlm"),Cst.forEach(t),fMo=r(Sye," \u2014 "),Wq=n(Sye,"A",{href:!0});var wst=s(Wq);mMo=r(wst,"WavLMModel"),wst.forEach(t),gMo=r(Sye," (WavLM model)"),Sye.forEach(t),hMo=i($),tu=n($,"LI",{});var Rye=s(tu);rde=n(Rye,"STRONG",{});var Ast=s(rde);pMo=r(Ast,"xglm"),Ast.forEach(t),_Mo=r(Rye," \u2014 "),Qq=n(Rye,"A",{href:!0});var Lst=s(Qq);uMo=r(Lst,"XGLMModel"),Lst.forEach(t),bMo=r(Rye," (XGLM model)"),Rye.forEach(t),vMo=i($),au=n($,"LI",{});var Pye=s(au);tde=n(Pye,"STRONG",{});var yst=s(tde);FMo=r(yst,"xlm"),yst.forEach(t),TMo=r(Pye," \u2014 "),Hq=n(Pye,"A",{href:!0});var xst=s(Hq);MMo=r(xst,"XLMModel"),xst.forEach(t),EMo=r(Pye," (XLM model)"),Pye.forEach(t),CMo=i($),nu=n($,"LI",{});var Bye=s(nu);ade=n(Bye,"STRONG",{});var $st=s(ade);wMo=r($st,"xlm-prophetnet"),$st.forEach(t),AMo=r(Bye," \u2014 "),Uq=n(Bye,"A",{href:!0});var kst=s(Uq);LMo=r(kst,"XLMProphetNetModel"),kst.forEach(t),yMo=r(Bye," (XLM-ProphetNet model)"),Bye.forEach(t),xMo=i($),su=n($,"LI",{});var Iye=s(su);nde=n(Iye,"STRONG",{});var Sst=s(nde);$Mo=r(Sst,"xlm-roberta"),Sst.forEach(t),kMo=r(Iye," \u2014 "),Jq=n(Iye,"A",{href:!0});var Rst=s(Jq);SMo=r(Rst,"XLMRobertaModel"),Rst.forEach(t),RMo=r(Iye," (XLM-RoBERTa model)"),Iye.forEach(t),PMo=i($),lu=n($,"LI",{});var Nye=s(lu);sde=n(Nye,"STRONG",{});var Pst=s(sde);BMo=r(Pst,"xlm-roberta-xl"),Pst.forEach(t),IMo=r(Nye," \u2014 "),Yq=n(Nye,"A",{href:!0});var Bst=s(Yq);NMo=r(Bst,"XLMRobertaXLModel"),Bst.forEach(t),qMo=r(Nye," (XLM-RoBERTa-XL model)"),Nye.forEach(t),jMo=i($),iu=n($,"LI",{});var qye=s(iu);lde=n(qye,"STRONG",{});var Ist=s(lde);DMo=r(Ist,"xlnet"),Ist.forEach(t),GMo=r(qye," \u2014 "),Kq=n(qye,"A",{href:!0});var Nst=s(Kq);OMo=r(Nst,"XLNetModel"),Nst.forEach(t),VMo=r(qye," (XLNet model)"),qye.forEach(t),XMo=i($),du=n($,"LI",{});var jye=s(du);ide=n(jye,"STRONG",{});var qst=s(ide);zMo=r(qst,"yolos"),qst.forEach(t),WMo=r(jye," \u2014 "),Zq=n(jye,"A",{href:!0});var jst=s(Zq);QMo=r(jst,"YolosModel"),jst.forEach(t),HMo=r(jye," (YOLOS model)"),jye.forEach(t),UMo=i($),cu=n($,"LI",{});var Dye=s(cu);dde=n(Dye,"STRONG",{});var Dst=s(dde);JMo=r(Dst,"yoso"),Dst.forEach(t),YMo=r(Dye," \u2014 "),ej=n(Dye,"A",{href:!0});var Gst=s(ej);KMo=r(Gst,"YosoModel"),Gst.forEach(t),ZMo=r(Dye," (YOSO model)"),Dye.forEach(t),$.forEach(t),eEo=i(oa),fu=n(oa,"P",{});var Gye=s(fu);oEo=r(Gye,"The model is set in evaluation mode by default using "),cde=n(Gye,"CODE",{});var Ost=s(cde);rEo=r(Ost,"model.eval()"),Ost.forEach(t),tEo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(Gye,"CODE",{});var Vst=s(fde);aEo=r(Vst,"model.train()"),Vst.forEach(t),Gye.forEach(t),nEo=i(oa),T(mu.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Sje=i(f),xi=n(f,"H2",{class:!0});var IGe=s(xi);gu=n(IGe,"A",{id:!0,class:!0,href:!0});var Xst=s(gu);mde=n(Xst,"SPAN",{});var zst=s(mde);T(ML.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),sEo=i(IGe),gde=n(IGe,"SPAN",{});var Wst=s(gde);lEo=r(Wst,"AutoModelForPreTraining"),Wst.forEach(t),IGe.forEach(t),Rje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(EL.$$.fragment,Vs),iEo=i(Vs),$i=n(Vs,"P",{});var oee=s($i);dEo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oj=n(oee,"A",{href:!0});var Qst=s(oj);cEo=r(Qst,"from_pretrained()"),Qst.forEach(t),fEo=r(oee," class method or the "),rj=n(oee,"A",{href:!0});var Hst=s(rj);mEo=r(Hst,"from_config()"),Hst.forEach(t),gEo=r(oee,` class
method.`),oee.forEach(t),hEo=i(Vs),CL=n(Vs,"P",{});var NGe=s(CL);pEo=r(NGe,"This class cannot be instantiated directly using "),hde=n(NGe,"CODE",{});var Ust=s(hde);_Eo=r(Ust,"__init__()"),Ust.forEach(t),uEo=r(NGe," (throws an error)."),NGe.forEach(t),bEo=i(Vs),at=n(Vs,"DIV",{class:!0});var Yw=s(at);T(wL.$$.fragment,Yw),vEo=i(Yw),pde=n(Yw,"P",{});var Jst=s(pde);FEo=r(Jst,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jst.forEach(t),TEo=i(Yw),ki=n(Yw,"P",{});var ree=s(ki);MEo=r(ree,`Note:
Loading a model from its configuration file does `),_de=n(ree,"STRONG",{});var Yst=s(_de);EEo=r(Yst,"not"),Yst.forEach(t),CEo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(ree,"A",{href:!0});var Kst=s(tj);wEo=r(Kst,"from_pretrained()"),Kst.forEach(t),AEo=r(ree," to load the model weights."),ree.forEach(t),LEo=i(Yw),T(hu.$$.fragment,Yw),Yw.forEach(t),yEo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(AL.$$.fragment,ra),xEo=i(ra),ude=n(ra,"P",{});var Zst=s(ude);$Eo=r(Zst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zst.forEach(t),kEo=i(ra),xa=n(ra,"P",{});var Kw=s(xa);SEo=r(Kw,"The model class to instantiate is selected based on the "),bde=n(Kw,"CODE",{});var elt=s(bde);REo=r(elt,"model_type"),elt.forEach(t),PEo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),vde=n(Kw,"CODE",{});var olt=s(vde);BEo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),IEo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(Kw,"CODE",{});var rlt=s(Fde);NEo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),qEo=r(Kw,":"),Kw.forEach(t),jEo=i(ra),G=n(ra,"UL",{});var O=s(G);pu=n(O,"LI",{});var Oye=s(pu);Tde=n(Oye,"STRONG",{});var tlt=s(Tde);DEo=r(tlt,"albert"),tlt.forEach(t),GEo=r(Oye," \u2014 "),aj=n(Oye,"A",{href:!0});var alt=s(aj);OEo=r(alt,"AlbertForPreTraining"),alt.forEach(t),VEo=r(Oye," (ALBERT model)"),Oye.forEach(t),XEo=i(O),_u=n(O,"LI",{});var Vye=s(_u);Mde=n(Vye,"STRONG",{});var nlt=s(Mde);zEo=r(nlt,"bart"),nlt.forEach(t),WEo=r(Vye," \u2014 "),nj=n(Vye,"A",{href:!0});var slt=s(nj);QEo=r(slt,"BartForConditionalGeneration"),slt.forEach(t),HEo=r(Vye," (BART model)"),Vye.forEach(t),UEo=i(O),uu=n(O,"LI",{});var Xye=s(uu);Ede=n(Xye,"STRONG",{});var llt=s(Ede);JEo=r(llt,"bert"),llt.forEach(t),YEo=r(Xye," \u2014 "),sj=n(Xye,"A",{href:!0});var ilt=s(sj);KEo=r(ilt,"BertForPreTraining"),ilt.forEach(t),ZEo=r(Xye," (BERT model)"),Xye.forEach(t),eCo=i(O),bu=n(O,"LI",{});var zye=s(bu);Cde=n(zye,"STRONG",{});var dlt=s(Cde);oCo=r(dlt,"big_bird"),dlt.forEach(t),rCo=r(zye," \u2014 "),lj=n(zye,"A",{href:!0});var clt=s(lj);tCo=r(clt,"BigBirdForPreTraining"),clt.forEach(t),aCo=r(zye," (BigBird model)"),zye.forEach(t),nCo=i(O),vu=n(O,"LI",{});var Wye=s(vu);wde=n(Wye,"STRONG",{});var flt=s(wde);sCo=r(flt,"bloom"),flt.forEach(t),lCo=r(Wye," \u2014 "),ij=n(Wye,"A",{href:!0});var mlt=s(ij);iCo=r(mlt,"BloomForCausalLM"),mlt.forEach(t),dCo=r(Wye," (BLOOM model)"),Wye.forEach(t),cCo=i(O),Fu=n(O,"LI",{});var Qye=s(Fu);Ade=n(Qye,"STRONG",{});var glt=s(Ade);fCo=r(glt,"camembert"),glt.forEach(t),mCo=r(Qye," \u2014 "),dj=n(Qye,"A",{href:!0});var hlt=s(dj);gCo=r(hlt,"CamembertForMaskedLM"),hlt.forEach(t),hCo=r(Qye," (CamemBERT model)"),Qye.forEach(t),pCo=i(O),Tu=n(O,"LI",{});var Hye=s(Tu);Lde=n(Hye,"STRONG",{});var plt=s(Lde);_Co=r(plt,"ctrl"),plt.forEach(t),uCo=r(Hye," \u2014 "),cj=n(Hye,"A",{href:!0});var _lt=s(cj);bCo=r(_lt,"CTRLLMHeadModel"),_lt.forEach(t),vCo=r(Hye," (CTRL model)"),Hye.forEach(t),FCo=i(O),Mu=n(O,"LI",{});var Uye=s(Mu);yde=n(Uye,"STRONG",{});var ult=s(yde);TCo=r(ult,"data2vec-text"),ult.forEach(t),MCo=r(Uye," \u2014 "),fj=n(Uye,"A",{href:!0});var blt=s(fj);ECo=r(blt,"Data2VecTextForMaskedLM"),blt.forEach(t),CCo=r(Uye," (Data2VecText model)"),Uye.forEach(t),wCo=i(O),Eu=n(O,"LI",{});var Jye=s(Eu);xde=n(Jye,"STRONG",{});var vlt=s(xde);ACo=r(vlt,"deberta"),vlt.forEach(t),LCo=r(Jye," \u2014 "),mj=n(Jye,"A",{href:!0});var Flt=s(mj);yCo=r(Flt,"DebertaForMaskedLM"),Flt.forEach(t),xCo=r(Jye," (DeBERTa model)"),Jye.forEach(t),$Co=i(O),Cu=n(O,"LI",{});var Yye=s(Cu);$de=n(Yye,"STRONG",{});var Tlt=s($de);kCo=r(Tlt,"deberta-v2"),Tlt.forEach(t),SCo=r(Yye," \u2014 "),gj=n(Yye,"A",{href:!0});var Mlt=s(gj);RCo=r(Mlt,"DebertaV2ForMaskedLM"),Mlt.forEach(t),PCo=r(Yye," (DeBERTa-v2 model)"),Yye.forEach(t),BCo=i(O),wu=n(O,"LI",{});var Kye=s(wu);kde=n(Kye,"STRONG",{});var Elt=s(kde);ICo=r(Elt,"distilbert"),Elt.forEach(t),NCo=r(Kye," \u2014 "),hj=n(Kye,"A",{href:!0});var Clt=s(hj);qCo=r(Clt,"DistilBertForMaskedLM"),Clt.forEach(t),jCo=r(Kye," (DistilBERT model)"),Kye.forEach(t),DCo=i(O),Au=n(O,"LI",{});var Zye=s(Au);Sde=n(Zye,"STRONG",{});var wlt=s(Sde);GCo=r(wlt,"electra"),wlt.forEach(t),OCo=r(Zye," \u2014 "),pj=n(Zye,"A",{href:!0});var Alt=s(pj);VCo=r(Alt,"ElectraForPreTraining"),Alt.forEach(t),XCo=r(Zye," (ELECTRA model)"),Zye.forEach(t),zCo=i(O),Lu=n(O,"LI",{});var e8e=s(Lu);Rde=n(e8e,"STRONG",{});var Llt=s(Rde);WCo=r(Llt,"flaubert"),Llt.forEach(t),QCo=r(e8e," \u2014 "),_j=n(e8e,"A",{href:!0});var ylt=s(_j);HCo=r(ylt,"FlaubertWithLMHeadModel"),ylt.forEach(t),UCo=r(e8e," (FlauBERT model)"),e8e.forEach(t),JCo=i(O),yu=n(O,"LI",{});var o8e=s(yu);Pde=n(o8e,"STRONG",{});var xlt=s(Pde);YCo=r(xlt,"flava"),xlt.forEach(t),KCo=r(o8e," \u2014 "),uj=n(o8e,"A",{href:!0});var $lt=s(uj);ZCo=r($lt,"FlavaForPreTraining"),$lt.forEach(t),e5o=r(o8e," (FLAVA model)"),o8e.forEach(t),o5o=i(O),xu=n(O,"LI",{});var r8e=s(xu);Bde=n(r8e,"STRONG",{});var klt=s(Bde);r5o=r(klt,"fnet"),klt.forEach(t),t5o=r(r8e," \u2014 "),bj=n(r8e,"A",{href:!0});var Slt=s(bj);a5o=r(Slt,"FNetForPreTraining"),Slt.forEach(t),n5o=r(r8e," (FNet model)"),r8e.forEach(t),s5o=i(O),$u=n(O,"LI",{});var t8e=s($u);Ide=n(t8e,"STRONG",{});var Rlt=s(Ide);l5o=r(Rlt,"fsmt"),Rlt.forEach(t),i5o=r(t8e," \u2014 "),vj=n(t8e,"A",{href:!0});var Plt=s(vj);d5o=r(Plt,"FSMTForConditionalGeneration"),Plt.forEach(t),c5o=r(t8e," (FairSeq Machine-Translation model)"),t8e.forEach(t),f5o=i(O),ku=n(O,"LI",{});var a8e=s(ku);Nde=n(a8e,"STRONG",{});var Blt=s(Nde);m5o=r(Blt,"funnel"),Blt.forEach(t),g5o=r(a8e," \u2014 "),Fj=n(a8e,"A",{href:!0});var Ilt=s(Fj);h5o=r(Ilt,"FunnelForPreTraining"),Ilt.forEach(t),p5o=r(a8e," (Funnel Transformer model)"),a8e.forEach(t),_5o=i(O),Su=n(O,"LI",{});var n8e=s(Su);qde=n(n8e,"STRONG",{});var Nlt=s(qde);u5o=r(Nlt,"gpt2"),Nlt.forEach(t),b5o=r(n8e," \u2014 "),Tj=n(n8e,"A",{href:!0});var qlt=s(Tj);v5o=r(qlt,"GPT2LMHeadModel"),qlt.forEach(t),F5o=r(n8e," (OpenAI GPT-2 model)"),n8e.forEach(t),T5o=i(O),Ru=n(O,"LI",{});var s8e=s(Ru);jde=n(s8e,"STRONG",{});var jlt=s(jde);M5o=r(jlt,"ibert"),jlt.forEach(t),E5o=r(s8e," \u2014 "),Mj=n(s8e,"A",{href:!0});var Dlt=s(Mj);C5o=r(Dlt,"IBertForMaskedLM"),Dlt.forEach(t),w5o=r(s8e," (I-BERT model)"),s8e.forEach(t),A5o=i(O),Pu=n(O,"LI",{});var l8e=s(Pu);Dde=n(l8e,"STRONG",{});var Glt=s(Dde);L5o=r(Glt,"layoutlm"),Glt.forEach(t),y5o=r(l8e," \u2014 "),Ej=n(l8e,"A",{href:!0});var Olt=s(Ej);x5o=r(Olt,"LayoutLMForMaskedLM"),Olt.forEach(t),$5o=r(l8e," (LayoutLM model)"),l8e.forEach(t),k5o=i(O),Bu=n(O,"LI",{});var i8e=s(Bu);Gde=n(i8e,"STRONG",{});var Vlt=s(Gde);S5o=r(Vlt,"longformer"),Vlt.forEach(t),R5o=r(i8e," \u2014 "),Cj=n(i8e,"A",{href:!0});var Xlt=s(Cj);P5o=r(Xlt,"LongformerForMaskedLM"),Xlt.forEach(t),B5o=r(i8e," (Longformer model)"),i8e.forEach(t),I5o=i(O),Iu=n(O,"LI",{});var d8e=s(Iu);Ode=n(d8e,"STRONG",{});var zlt=s(Ode);N5o=r(zlt,"lxmert"),zlt.forEach(t),q5o=r(d8e," \u2014 "),wj=n(d8e,"A",{href:!0});var Wlt=s(wj);j5o=r(Wlt,"LxmertForPreTraining"),Wlt.forEach(t),D5o=r(d8e," (LXMERT model)"),d8e.forEach(t),G5o=i(O),Nu=n(O,"LI",{});var c8e=s(Nu);Vde=n(c8e,"STRONG",{});var Qlt=s(Vde);O5o=r(Qlt,"megatron-bert"),Qlt.forEach(t),V5o=r(c8e," \u2014 "),Aj=n(c8e,"A",{href:!0});var Hlt=s(Aj);X5o=r(Hlt,"MegatronBertForPreTraining"),Hlt.forEach(t),z5o=r(c8e," (Megatron-BERT model)"),c8e.forEach(t),W5o=i(O),qu=n(O,"LI",{});var f8e=s(qu);Xde=n(f8e,"STRONG",{});var Ult=s(Xde);Q5o=r(Ult,"mobilebert"),Ult.forEach(t),H5o=r(f8e," \u2014 "),Lj=n(f8e,"A",{href:!0});var Jlt=s(Lj);U5o=r(Jlt,"MobileBertForPreTraining"),Jlt.forEach(t),J5o=r(f8e," (MobileBERT model)"),f8e.forEach(t),Y5o=i(O),ju=n(O,"LI",{});var m8e=s(ju);zde=n(m8e,"STRONG",{});var Ylt=s(zde);K5o=r(Ylt,"mpnet"),Ylt.forEach(t),Z5o=r(m8e," \u2014 "),yj=n(m8e,"A",{href:!0});var Klt=s(yj);e3o=r(Klt,"MPNetForMaskedLM"),Klt.forEach(t),o3o=r(m8e," (MPNet model)"),m8e.forEach(t),r3o=i(O),Du=n(O,"LI",{});var g8e=s(Du);Wde=n(g8e,"STRONG",{});var Zlt=s(Wde);t3o=r(Zlt,"openai-gpt"),Zlt.forEach(t),a3o=r(g8e," \u2014 "),xj=n(g8e,"A",{href:!0});var eit=s(xj);n3o=r(eit,"OpenAIGPTLMHeadModel"),eit.forEach(t),s3o=r(g8e," (OpenAI GPT model)"),g8e.forEach(t),l3o=i(O),Gu=n(O,"LI",{});var h8e=s(Gu);Qde=n(h8e,"STRONG",{});var oit=s(Qde);i3o=r(oit,"retribert"),oit.forEach(t),d3o=r(h8e," \u2014 "),$j=n(h8e,"A",{href:!0});var rit=s($j);c3o=r(rit,"RetriBertModel"),rit.forEach(t),f3o=r(h8e," (RetriBERT model)"),h8e.forEach(t),m3o=i(O),Ou=n(O,"LI",{});var p8e=s(Ou);Hde=n(p8e,"STRONG",{});var tit=s(Hde);g3o=r(tit,"roberta"),tit.forEach(t),h3o=r(p8e," \u2014 "),kj=n(p8e,"A",{href:!0});var ait=s(kj);p3o=r(ait,"RobertaForMaskedLM"),ait.forEach(t),_3o=r(p8e," (RoBERTa model)"),p8e.forEach(t),u3o=i(O),Vu=n(O,"LI",{});var _8e=s(Vu);Ude=n(_8e,"STRONG",{});var nit=s(Ude);b3o=r(nit,"splinter"),nit.forEach(t),v3o=r(_8e," \u2014 "),Sj=n(_8e,"A",{href:!0});var sit=s(Sj);F3o=r(sit,"SplinterForPreTraining"),sit.forEach(t),T3o=r(_8e," (Splinter model)"),_8e.forEach(t),M3o=i(O),Xu=n(O,"LI",{});var u8e=s(Xu);Jde=n(u8e,"STRONG",{});var lit=s(Jde);E3o=r(lit,"squeezebert"),lit.forEach(t),C3o=r(u8e," \u2014 "),Rj=n(u8e,"A",{href:!0});var iit=s(Rj);w3o=r(iit,"SqueezeBertForMaskedLM"),iit.forEach(t),A3o=r(u8e," (SqueezeBERT model)"),u8e.forEach(t),L3o=i(O),zu=n(O,"LI",{});var b8e=s(zu);Yde=n(b8e,"STRONG",{});var dit=s(Yde);y3o=r(dit,"t5"),dit.forEach(t),x3o=r(b8e," \u2014 "),Pj=n(b8e,"A",{href:!0});var cit=s(Pj);$3o=r(cit,"T5ForConditionalGeneration"),cit.forEach(t),k3o=r(b8e," (T5 model)"),b8e.forEach(t),S3o=i(O),Wu=n(O,"LI",{});var v8e=s(Wu);Kde=n(v8e,"STRONG",{});var fit=s(Kde);R3o=r(fit,"tapas"),fit.forEach(t),P3o=r(v8e," \u2014 "),Bj=n(v8e,"A",{href:!0});var mit=s(Bj);B3o=r(mit,"TapasForMaskedLM"),mit.forEach(t),I3o=r(v8e," (TAPAS model)"),v8e.forEach(t),N3o=i(O),Qu=n(O,"LI",{});var F8e=s(Qu);Zde=n(F8e,"STRONG",{});var git=s(Zde);q3o=r(git,"transfo-xl"),git.forEach(t),j3o=r(F8e," \u2014 "),Ij=n(F8e,"A",{href:!0});var hit=s(Ij);D3o=r(hit,"TransfoXLLMHeadModel"),hit.forEach(t),G3o=r(F8e," (Transformer-XL model)"),F8e.forEach(t),O3o=i(O),Hu=n(O,"LI",{});var T8e=s(Hu);ece=n(T8e,"STRONG",{});var pit=s(ece);V3o=r(pit,"unispeech"),pit.forEach(t),X3o=r(T8e," \u2014 "),Nj=n(T8e,"A",{href:!0});var _it=s(Nj);z3o=r(_it,"UniSpeechForPreTraining"),_it.forEach(t),W3o=r(T8e," (UniSpeech model)"),T8e.forEach(t),Q3o=i(O),Uu=n(O,"LI",{});var M8e=s(Uu);oce=n(M8e,"STRONG",{});var uit=s(oce);H3o=r(uit,"unispeech-sat"),uit.forEach(t),U3o=r(M8e," \u2014 "),qj=n(M8e,"A",{href:!0});var bit=s(qj);J3o=r(bit,"UniSpeechSatForPreTraining"),bit.forEach(t),Y3o=r(M8e," (UniSpeechSat model)"),M8e.forEach(t),K3o=i(O),Ju=n(O,"LI",{});var E8e=s(Ju);rce=n(E8e,"STRONG",{});var vit=s(rce);Z3o=r(vit,"visual_bert"),vit.forEach(t),e0o=r(E8e," \u2014 "),jj=n(E8e,"A",{href:!0});var Fit=s(jj);o0o=r(Fit,"VisualBertForPreTraining"),Fit.forEach(t),r0o=r(E8e," (VisualBERT model)"),E8e.forEach(t),t0o=i(O),Yu=n(O,"LI",{});var C8e=s(Yu);tce=n(C8e,"STRONG",{});var Tit=s(tce);a0o=r(Tit,"vit_mae"),Tit.forEach(t),n0o=r(C8e," \u2014 "),Dj=n(C8e,"A",{href:!0});var Mit=s(Dj);s0o=r(Mit,"ViTMAEForPreTraining"),Mit.forEach(t),l0o=r(C8e," (ViTMAE model)"),C8e.forEach(t),i0o=i(O),Ku=n(O,"LI",{});var w8e=s(Ku);ace=n(w8e,"STRONG",{});var Eit=s(ace);d0o=r(Eit,"wav2vec2"),Eit.forEach(t),c0o=r(w8e," \u2014 "),Gj=n(w8e,"A",{href:!0});var Cit=s(Gj);f0o=r(Cit,"Wav2Vec2ForPreTraining"),Cit.forEach(t),m0o=r(w8e," (Wav2Vec2 model)"),w8e.forEach(t),g0o=i(O),Zu=n(O,"LI",{});var A8e=s(Zu);nce=n(A8e,"STRONG",{});var wit=s(nce);h0o=r(wit,"wav2vec2-conformer"),wit.forEach(t),p0o=r(A8e," \u2014 "),Oj=n(A8e,"A",{href:!0});var Ait=s(Oj);_0o=r(Ait,"Wav2Vec2ConformerForPreTraining"),Ait.forEach(t),u0o=r(A8e," (Wav2Vec2-Conformer model)"),A8e.forEach(t),b0o=i(O),e4=n(O,"LI",{});var L8e=s(e4);sce=n(L8e,"STRONG",{});var Lit=s(sce);v0o=r(Lit,"xlm"),Lit.forEach(t),F0o=r(L8e," \u2014 "),Vj=n(L8e,"A",{href:!0});var yit=s(Vj);T0o=r(yit,"XLMWithLMHeadModel"),yit.forEach(t),M0o=r(L8e," (XLM model)"),L8e.forEach(t),E0o=i(O),o4=n(O,"LI",{});var y8e=s(o4);lce=n(y8e,"STRONG",{});var xit=s(lce);C0o=r(xit,"xlm-roberta"),xit.forEach(t),w0o=r(y8e," \u2014 "),Xj=n(y8e,"A",{href:!0});var $it=s(Xj);A0o=r($it,"XLMRobertaForMaskedLM"),$it.forEach(t),L0o=r(y8e," (XLM-RoBERTa model)"),y8e.forEach(t),y0o=i(O),r4=n(O,"LI",{});var x8e=s(r4);ice=n(x8e,"STRONG",{});var kit=s(ice);x0o=r(kit,"xlm-roberta-xl"),kit.forEach(t),$0o=r(x8e," \u2014 "),zj=n(x8e,"A",{href:!0});var Sit=s(zj);k0o=r(Sit,"XLMRobertaXLForMaskedLM"),Sit.forEach(t),S0o=r(x8e," (XLM-RoBERTa-XL model)"),x8e.forEach(t),R0o=i(O),t4=n(O,"LI",{});var $8e=s(t4);dce=n($8e,"STRONG",{});var Rit=s(dce);P0o=r(Rit,"xlnet"),Rit.forEach(t),B0o=r($8e," \u2014 "),Wj=n($8e,"A",{href:!0});var Pit=s(Wj);I0o=r(Pit,"XLNetLMHeadModel"),Pit.forEach(t),N0o=r($8e," (XLNet model)"),$8e.forEach(t),O.forEach(t),q0o=i(ra),a4=n(ra,"P",{});var k8e=s(a4);j0o=r(k8e,"The model is set in evaluation mode by default using "),cce=n(k8e,"CODE",{});var Bit=s(cce);D0o=r(Bit,"model.eval()"),Bit.forEach(t),G0o=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(k8e,"CODE",{});var Iit=s(fce);O0o=r(Iit,"model.train()"),Iit.forEach(t),k8e.forEach(t),V0o=i(ra),T(n4.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Pje=i(f),Si=n(f,"H2",{class:!0});var qGe=s(Si);s4=n(qGe,"A",{id:!0,class:!0,href:!0});var Nit=s(s4);mce=n(Nit,"SPAN",{});var qit=s(mce);T(LL.$$.fragment,qit),qit.forEach(t),Nit.forEach(t),X0o=i(qGe),gce=n(qGe,"SPAN",{});var jit=s(gce);z0o=r(jit,"AutoModelForCausalLM"),jit.forEach(t),qGe.forEach(t),Bje=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(yL.$$.fragment,Xs),W0o=i(Xs),Ri=n(Xs,"P",{});var tee=s(Ri);Q0o=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qj=n(tee,"A",{href:!0});var Dit=s(Qj);H0o=r(Dit,"from_pretrained()"),Dit.forEach(t),U0o=r(tee," class method or the "),Hj=n(tee,"A",{href:!0});var Git=s(Hj);J0o=r(Git,"from_config()"),Git.forEach(t),Y0o=r(tee,` class
method.`),tee.forEach(t),K0o=i(Xs),xL=n(Xs,"P",{});var jGe=s(xL);Z0o=r(jGe,"This class cannot be instantiated directly using "),hce=n(jGe,"CODE",{});var Oit=s(hce);ewo=r(Oit,"__init__()"),Oit.forEach(t),owo=r(jGe," (throws an error)."),jGe.forEach(t),rwo=i(Xs),nt=n(Xs,"DIV",{class:!0});var Zw=s(nt);T($L.$$.fragment,Zw),two=i(Zw),pce=n(Zw,"P",{});var Vit=s(pce);awo=r(Vit,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vit.forEach(t),nwo=i(Zw),Pi=n(Zw,"P",{});var aee=s(Pi);swo=r(aee,`Note:
Loading a model from its configuration file does `),_ce=n(aee,"STRONG",{});var Xit=s(_ce);lwo=r(Xit,"not"),Xit.forEach(t),iwo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=n(aee,"A",{href:!0});var zit=s(Uj);dwo=r(zit,"from_pretrained()"),zit.forEach(t),cwo=r(aee," to load the model weights."),aee.forEach(t),fwo=i(Zw),T(l4.$$.fragment,Zw),Zw.forEach(t),mwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(kL.$$.fragment,ta),gwo=i(ta),uce=n(ta,"P",{});var Wit=s(uce);hwo=r(Wit,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wit.forEach(t),pwo=i(ta),$a=n(ta,"P",{});var eA=s($a);_wo=r(eA,"The model class to instantiate is selected based on the "),bce=n(eA,"CODE",{});var Qit=s(bce);uwo=r(Qit,"model_type"),Qit.forEach(t),bwo=r(eA,` property of the config object (either
passed as an argument or loaded from `),vce=n(eA,"CODE",{});var Hit=s(vce);vwo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),Fwo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(eA,"CODE",{});var Uit=s(Fce);Two=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),Mwo=r(eA,":"),eA.forEach(t),Ewo=i(ta),z=n(ta,"UL",{});var W=s(z);i4=n(W,"LI",{});var S8e=s(i4);Tce=n(S8e,"STRONG",{});var Jit=s(Tce);Cwo=r(Jit,"bart"),Jit.forEach(t),wwo=r(S8e," \u2014 "),Jj=n(S8e,"A",{href:!0});var Yit=s(Jj);Awo=r(Yit,"BartForCausalLM"),Yit.forEach(t),Lwo=r(S8e," (BART model)"),S8e.forEach(t),ywo=i(W),d4=n(W,"LI",{});var R8e=s(d4);Mce=n(R8e,"STRONG",{});var Kit=s(Mce);xwo=r(Kit,"bert"),Kit.forEach(t),$wo=r(R8e," \u2014 "),Yj=n(R8e,"A",{href:!0});var Zit=s(Yj);kwo=r(Zit,"BertLMHeadModel"),Zit.forEach(t),Swo=r(R8e," (BERT model)"),R8e.forEach(t),Rwo=i(W),c4=n(W,"LI",{});var P8e=s(c4);Ece=n(P8e,"STRONG",{});var edt=s(Ece);Pwo=r(edt,"bert-generation"),edt.forEach(t),Bwo=r(P8e," \u2014 "),Kj=n(P8e,"A",{href:!0});var odt=s(Kj);Iwo=r(odt,"BertGenerationDecoder"),odt.forEach(t),Nwo=r(P8e," (Bert Generation model)"),P8e.forEach(t),qwo=i(W),f4=n(W,"LI",{});var B8e=s(f4);Cce=n(B8e,"STRONG",{});var rdt=s(Cce);jwo=r(rdt,"big_bird"),rdt.forEach(t),Dwo=r(B8e," \u2014 "),Zj=n(B8e,"A",{href:!0});var tdt=s(Zj);Gwo=r(tdt,"BigBirdForCausalLM"),tdt.forEach(t),Owo=r(B8e," (BigBird model)"),B8e.forEach(t),Vwo=i(W),m4=n(W,"LI",{});var I8e=s(m4);wce=n(I8e,"STRONG",{});var adt=s(wce);Xwo=r(adt,"bigbird_pegasus"),adt.forEach(t),zwo=r(I8e," \u2014 "),eD=n(I8e,"A",{href:!0});var ndt=s(eD);Wwo=r(ndt,"BigBirdPegasusForCausalLM"),ndt.forEach(t),Qwo=r(I8e," (BigBird-Pegasus model)"),I8e.forEach(t),Hwo=i(W),g4=n(W,"LI",{});var N8e=s(g4);Ace=n(N8e,"STRONG",{});var sdt=s(Ace);Uwo=r(sdt,"blenderbot"),sdt.forEach(t),Jwo=r(N8e," \u2014 "),oD=n(N8e,"A",{href:!0});var ldt=s(oD);Ywo=r(ldt,"BlenderbotForCausalLM"),ldt.forEach(t),Kwo=r(N8e," (Blenderbot model)"),N8e.forEach(t),Zwo=i(W),h4=n(W,"LI",{});var q8e=s(h4);Lce=n(q8e,"STRONG",{});var idt=s(Lce);eAo=r(idt,"blenderbot-small"),idt.forEach(t),oAo=r(q8e," \u2014 "),rD=n(q8e,"A",{href:!0});var ddt=s(rD);rAo=r(ddt,"BlenderbotSmallForCausalLM"),ddt.forEach(t),tAo=r(q8e," (BlenderbotSmall model)"),q8e.forEach(t),aAo=i(W),p4=n(W,"LI",{});var j8e=s(p4);yce=n(j8e,"STRONG",{});var cdt=s(yce);nAo=r(cdt,"bloom"),cdt.forEach(t),sAo=r(j8e," \u2014 "),tD=n(j8e,"A",{href:!0});var fdt=s(tD);lAo=r(fdt,"BloomForCausalLM"),fdt.forEach(t),iAo=r(j8e," (BLOOM model)"),j8e.forEach(t),dAo=i(W),_4=n(W,"LI",{});var D8e=s(_4);xce=n(D8e,"STRONG",{});var mdt=s(xce);cAo=r(mdt,"camembert"),mdt.forEach(t),fAo=r(D8e," \u2014 "),aD=n(D8e,"A",{href:!0});var gdt=s(aD);mAo=r(gdt,"CamembertForCausalLM"),gdt.forEach(t),gAo=r(D8e," (CamemBERT model)"),D8e.forEach(t),hAo=i(W),u4=n(W,"LI",{});var G8e=s(u4);$ce=n(G8e,"STRONG",{});var hdt=s($ce);pAo=r(hdt,"ctrl"),hdt.forEach(t),_Ao=r(G8e," \u2014 "),nD=n(G8e,"A",{href:!0});var pdt=s(nD);uAo=r(pdt,"CTRLLMHeadModel"),pdt.forEach(t),bAo=r(G8e," (CTRL model)"),G8e.forEach(t),vAo=i(W),b4=n(W,"LI",{});var O8e=s(b4);kce=n(O8e,"STRONG",{});var _dt=s(kce);FAo=r(_dt,"data2vec-text"),_dt.forEach(t),TAo=r(O8e," \u2014 "),sD=n(O8e,"A",{href:!0});var udt=s(sD);MAo=r(udt,"Data2VecTextForCausalLM"),udt.forEach(t),EAo=r(O8e," (Data2VecText model)"),O8e.forEach(t),CAo=i(W),v4=n(W,"LI",{});var V8e=s(v4);Sce=n(V8e,"STRONG",{});var bdt=s(Sce);wAo=r(bdt,"electra"),bdt.forEach(t),AAo=r(V8e," \u2014 "),lD=n(V8e,"A",{href:!0});var vdt=s(lD);LAo=r(vdt,"ElectraForCausalLM"),vdt.forEach(t),yAo=r(V8e," (ELECTRA model)"),V8e.forEach(t),xAo=i(W),F4=n(W,"LI",{});var X8e=s(F4);Rce=n(X8e,"STRONG",{});var Fdt=s(Rce);$Ao=r(Fdt,"gpt2"),Fdt.forEach(t),kAo=r(X8e," \u2014 "),iD=n(X8e,"A",{href:!0});var Tdt=s(iD);SAo=r(Tdt,"GPT2LMHeadModel"),Tdt.forEach(t),RAo=r(X8e," (OpenAI GPT-2 model)"),X8e.forEach(t),PAo=i(W),T4=n(W,"LI",{});var z8e=s(T4);Pce=n(z8e,"STRONG",{});var Mdt=s(Pce);BAo=r(Mdt,"gpt_neo"),Mdt.forEach(t),IAo=r(z8e," \u2014 "),dD=n(z8e,"A",{href:!0});var Edt=s(dD);NAo=r(Edt,"GPTNeoForCausalLM"),Edt.forEach(t),qAo=r(z8e," (GPT Neo model)"),z8e.forEach(t),jAo=i(W),M4=n(W,"LI",{});var W8e=s(M4);Bce=n(W8e,"STRONG",{});var Cdt=s(Bce);DAo=r(Cdt,"gpt_neox"),Cdt.forEach(t),GAo=r(W8e," \u2014 "),cD=n(W8e,"A",{href:!0});var wdt=s(cD);OAo=r(wdt,"GPTNeoXForCausalLM"),wdt.forEach(t),VAo=r(W8e," (GPT NeoX model)"),W8e.forEach(t),XAo=i(W),E4=n(W,"LI",{});var Q8e=s(E4);Ice=n(Q8e,"STRONG",{});var Adt=s(Ice);zAo=r(Adt,"gptj"),Adt.forEach(t),WAo=r(Q8e," \u2014 "),fD=n(Q8e,"A",{href:!0});var Ldt=s(fD);QAo=r(Ldt,"GPTJForCausalLM"),Ldt.forEach(t),HAo=r(Q8e," (GPT-J model)"),Q8e.forEach(t),UAo=i(W),C4=n(W,"LI",{});var H8e=s(C4);Nce=n(H8e,"STRONG",{});var ydt=s(Nce);JAo=r(ydt,"marian"),ydt.forEach(t),YAo=r(H8e," \u2014 "),mD=n(H8e,"A",{href:!0});var xdt=s(mD);KAo=r(xdt,"MarianForCausalLM"),xdt.forEach(t),ZAo=r(H8e," (Marian model)"),H8e.forEach(t),e6o=i(W),w4=n(W,"LI",{});var U8e=s(w4);qce=n(U8e,"STRONG",{});var $dt=s(qce);o6o=r($dt,"mbart"),$dt.forEach(t),r6o=r(U8e," \u2014 "),gD=n(U8e,"A",{href:!0});var kdt=s(gD);t6o=r(kdt,"MBartForCausalLM"),kdt.forEach(t),a6o=r(U8e," (mBART model)"),U8e.forEach(t),n6o=i(W),A4=n(W,"LI",{});var J8e=s(A4);jce=n(J8e,"STRONG",{});var Sdt=s(jce);s6o=r(Sdt,"megatron-bert"),Sdt.forEach(t),l6o=r(J8e," \u2014 "),hD=n(J8e,"A",{href:!0});var Rdt=s(hD);i6o=r(Rdt,"MegatronBertForCausalLM"),Rdt.forEach(t),d6o=r(J8e," (Megatron-BERT model)"),J8e.forEach(t),c6o=i(W),L4=n(W,"LI",{});var Y8e=s(L4);Dce=n(Y8e,"STRONG",{});var Pdt=s(Dce);f6o=r(Pdt,"openai-gpt"),Pdt.forEach(t),m6o=r(Y8e," \u2014 "),pD=n(Y8e,"A",{href:!0});var Bdt=s(pD);g6o=r(Bdt,"OpenAIGPTLMHeadModel"),Bdt.forEach(t),h6o=r(Y8e," (OpenAI GPT model)"),Y8e.forEach(t),p6o=i(W),y4=n(W,"LI",{});var K8e=s(y4);Gce=n(K8e,"STRONG",{});var Idt=s(Gce);_6o=r(Idt,"opt"),Idt.forEach(t),u6o=r(K8e," \u2014 "),_D=n(K8e,"A",{href:!0});var Ndt=s(_D);b6o=r(Ndt,"OPTForCausalLM"),Ndt.forEach(t),v6o=r(K8e," (OPT model)"),K8e.forEach(t),F6o=i(W),x4=n(W,"LI",{});var Z8e=s(x4);Oce=n(Z8e,"STRONG",{});var qdt=s(Oce);T6o=r(qdt,"pegasus"),qdt.forEach(t),M6o=r(Z8e," \u2014 "),uD=n(Z8e,"A",{href:!0});var jdt=s(uD);E6o=r(jdt,"PegasusForCausalLM"),jdt.forEach(t),C6o=r(Z8e," (Pegasus model)"),Z8e.forEach(t),w6o=i(W),$4=n(W,"LI",{});var e9e=s($4);Vce=n(e9e,"STRONG",{});var Ddt=s(Vce);A6o=r(Ddt,"plbart"),Ddt.forEach(t),L6o=r(e9e," \u2014 "),bD=n(e9e,"A",{href:!0});var Gdt=s(bD);y6o=r(Gdt,"PLBartForCausalLM"),Gdt.forEach(t),x6o=r(e9e," (PLBart model)"),e9e.forEach(t),$6o=i(W),k4=n(W,"LI",{});var o9e=s(k4);Xce=n(o9e,"STRONG",{});var Odt=s(Xce);k6o=r(Odt,"prophetnet"),Odt.forEach(t),S6o=r(o9e," \u2014 "),vD=n(o9e,"A",{href:!0});var Vdt=s(vD);R6o=r(Vdt,"ProphetNetForCausalLM"),Vdt.forEach(t),P6o=r(o9e," (ProphetNet model)"),o9e.forEach(t),B6o=i(W),S4=n(W,"LI",{});var r9e=s(S4);zce=n(r9e,"STRONG",{});var Xdt=s(zce);I6o=r(Xdt,"qdqbert"),Xdt.forEach(t),N6o=r(r9e," \u2014 "),FD=n(r9e,"A",{href:!0});var zdt=s(FD);q6o=r(zdt,"QDQBertLMHeadModel"),zdt.forEach(t),j6o=r(r9e," (QDQBert model)"),r9e.forEach(t),D6o=i(W),R4=n(W,"LI",{});var t9e=s(R4);Wce=n(t9e,"STRONG",{});var Wdt=s(Wce);G6o=r(Wdt,"reformer"),Wdt.forEach(t),O6o=r(t9e," \u2014 "),TD=n(t9e,"A",{href:!0});var Qdt=s(TD);V6o=r(Qdt,"ReformerModelWithLMHead"),Qdt.forEach(t),X6o=r(t9e," (Reformer model)"),t9e.forEach(t),z6o=i(W),P4=n(W,"LI",{});var a9e=s(P4);Qce=n(a9e,"STRONG",{});var Hdt=s(Qce);W6o=r(Hdt,"rembert"),Hdt.forEach(t),Q6o=r(a9e," \u2014 "),MD=n(a9e,"A",{href:!0});var Udt=s(MD);H6o=r(Udt,"RemBertForCausalLM"),Udt.forEach(t),U6o=r(a9e," (RemBERT model)"),a9e.forEach(t),J6o=i(W),B4=n(W,"LI",{});var n9e=s(B4);Hce=n(n9e,"STRONG",{});var Jdt=s(Hce);Y6o=r(Jdt,"roberta"),Jdt.forEach(t),K6o=r(n9e," \u2014 "),ED=n(n9e,"A",{href:!0});var Ydt=s(ED);Z6o=r(Ydt,"RobertaForCausalLM"),Ydt.forEach(t),eLo=r(n9e," (RoBERTa model)"),n9e.forEach(t),oLo=i(W),I4=n(W,"LI",{});var s9e=s(I4);Uce=n(s9e,"STRONG",{});var Kdt=s(Uce);rLo=r(Kdt,"roformer"),Kdt.forEach(t),tLo=r(s9e," \u2014 "),CD=n(s9e,"A",{href:!0});var Zdt=s(CD);aLo=r(Zdt,"RoFormerForCausalLM"),Zdt.forEach(t),nLo=r(s9e," (RoFormer model)"),s9e.forEach(t),sLo=i(W),N4=n(W,"LI",{});var l9e=s(N4);Jce=n(l9e,"STRONG",{});var ect=s(Jce);lLo=r(ect,"speech_to_text_2"),ect.forEach(t),iLo=r(l9e," \u2014 "),wD=n(l9e,"A",{href:!0});var oct=s(wD);dLo=r(oct,"Speech2Text2ForCausalLM"),oct.forEach(t),cLo=r(l9e," (Speech2Text2 model)"),l9e.forEach(t),fLo=i(W),q4=n(W,"LI",{});var i9e=s(q4);Yce=n(i9e,"STRONG",{});var rct=s(Yce);mLo=r(rct,"transfo-xl"),rct.forEach(t),gLo=r(i9e," \u2014 "),AD=n(i9e,"A",{href:!0});var tct=s(AD);hLo=r(tct,"TransfoXLLMHeadModel"),tct.forEach(t),pLo=r(i9e," (Transformer-XL model)"),i9e.forEach(t),_Lo=i(W),j4=n(W,"LI",{});var d9e=s(j4);Kce=n(d9e,"STRONG",{});var act=s(Kce);uLo=r(act,"trocr"),act.forEach(t),bLo=r(d9e," \u2014 "),LD=n(d9e,"A",{href:!0});var nct=s(LD);vLo=r(nct,"TrOCRForCausalLM"),nct.forEach(t),FLo=r(d9e," (TrOCR model)"),d9e.forEach(t),TLo=i(W),D4=n(W,"LI",{});var c9e=s(D4);Zce=n(c9e,"STRONG",{});var sct=s(Zce);MLo=r(sct,"xglm"),sct.forEach(t),ELo=r(c9e," \u2014 "),yD=n(c9e,"A",{href:!0});var lct=s(yD);CLo=r(lct,"XGLMForCausalLM"),lct.forEach(t),wLo=r(c9e," (XGLM model)"),c9e.forEach(t),ALo=i(W),G4=n(W,"LI",{});var f9e=s(G4);efe=n(f9e,"STRONG",{});var ict=s(efe);LLo=r(ict,"xlm"),ict.forEach(t),yLo=r(f9e," \u2014 "),xD=n(f9e,"A",{href:!0});var dct=s(xD);xLo=r(dct,"XLMWithLMHeadModel"),dct.forEach(t),$Lo=r(f9e," (XLM model)"),f9e.forEach(t),kLo=i(W),O4=n(W,"LI",{});var m9e=s(O4);ofe=n(m9e,"STRONG",{});var cct=s(ofe);SLo=r(cct,"xlm-prophetnet"),cct.forEach(t),RLo=r(m9e," \u2014 "),$D=n(m9e,"A",{href:!0});var fct=s($D);PLo=r(fct,"XLMProphetNetForCausalLM"),fct.forEach(t),BLo=r(m9e," (XLM-ProphetNet model)"),m9e.forEach(t),ILo=i(W),V4=n(W,"LI",{});var g9e=s(V4);rfe=n(g9e,"STRONG",{});var mct=s(rfe);NLo=r(mct,"xlm-roberta"),mct.forEach(t),qLo=r(g9e," \u2014 "),kD=n(g9e,"A",{href:!0});var gct=s(kD);jLo=r(gct,"XLMRobertaForCausalLM"),gct.forEach(t),DLo=r(g9e," (XLM-RoBERTa model)"),g9e.forEach(t),GLo=i(W),X4=n(W,"LI",{});var h9e=s(X4);tfe=n(h9e,"STRONG",{});var hct=s(tfe);OLo=r(hct,"xlm-roberta-xl"),hct.forEach(t),VLo=r(h9e," \u2014 "),SD=n(h9e,"A",{href:!0});var pct=s(SD);XLo=r(pct,"XLMRobertaXLForCausalLM"),pct.forEach(t),zLo=r(h9e," (XLM-RoBERTa-XL model)"),h9e.forEach(t),WLo=i(W),z4=n(W,"LI",{});var p9e=s(z4);afe=n(p9e,"STRONG",{});var _ct=s(afe);QLo=r(_ct,"xlnet"),_ct.forEach(t),HLo=r(p9e," \u2014 "),RD=n(p9e,"A",{href:!0});var uct=s(RD);ULo=r(uct,"XLNetLMHeadModel"),uct.forEach(t),JLo=r(p9e," (XLNet model)"),p9e.forEach(t),W.forEach(t),YLo=i(ta),W4=n(ta,"P",{});var _9e=s(W4);KLo=r(_9e,"The model is set in evaluation mode by default using "),nfe=n(_9e,"CODE",{});var bct=s(nfe);ZLo=r(bct,"model.eval()"),bct.forEach(t),eyo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(_9e,"CODE",{});var vct=s(sfe);oyo=r(vct,"model.train()"),vct.forEach(t),_9e.forEach(t),ryo=i(ta),T(Q4.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Ije=i(f),Bi=n(f,"H2",{class:!0});var DGe=s(Bi);H4=n(DGe,"A",{id:!0,class:!0,href:!0});var Fct=s(H4);lfe=n(Fct,"SPAN",{});var Tct=s(lfe);T(SL.$$.fragment,Tct),Tct.forEach(t),Fct.forEach(t),tyo=i(DGe),ife=n(DGe,"SPAN",{});var Mct=s(ife);ayo=r(Mct,"AutoModelForMaskedLM"),Mct.forEach(t),DGe.forEach(t),Nje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(RL.$$.fragment,zs),nyo=i(zs),Ii=n(zs,"P",{});var nee=s(Ii);syo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PD=n(nee,"A",{href:!0});var Ect=s(PD);lyo=r(Ect,"from_pretrained()"),Ect.forEach(t),iyo=r(nee," class method or the "),BD=n(nee,"A",{href:!0});var Cct=s(BD);dyo=r(Cct,"from_config()"),Cct.forEach(t),cyo=r(nee,` class
method.`),nee.forEach(t),fyo=i(zs),PL=n(zs,"P",{});var GGe=s(PL);myo=r(GGe,"This class cannot be instantiated directly using "),dfe=n(GGe,"CODE",{});var wct=s(dfe);gyo=r(wct,"__init__()"),wct.forEach(t),hyo=r(GGe," (throws an error)."),GGe.forEach(t),pyo=i(zs),st=n(zs,"DIV",{class:!0});var oA=s(st);T(BL.$$.fragment,oA),_yo=i(oA),cfe=n(oA,"P",{});var Act=s(cfe);uyo=r(Act,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Act.forEach(t),byo=i(oA),Ni=n(oA,"P",{});var see=s(Ni);vyo=r(see,`Note:
Loading a model from its configuration file does `),ffe=n(see,"STRONG",{});var Lct=s(ffe);Fyo=r(Lct,"not"),Lct.forEach(t),Tyo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=n(see,"A",{href:!0});var yct=s(ID);Myo=r(yct,"from_pretrained()"),yct.forEach(t),Eyo=r(see," to load the model weights."),see.forEach(t),Cyo=i(oA),T(U4.$$.fragment,oA),oA.forEach(t),wyo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(IL.$$.fragment,aa),Ayo=i(aa),mfe=n(aa,"P",{});var xct=s(mfe);Lyo=r(xct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xct.forEach(t),yyo=i(aa),ka=n(aa,"P",{});var rA=s(ka);xyo=r(rA,"The model class to instantiate is selected based on the "),gfe=n(rA,"CODE",{});var $ct=s(gfe);$yo=r($ct,"model_type"),$ct.forEach(t),kyo=r(rA,` property of the config object (either
passed as an argument or loaded from `),hfe=n(rA,"CODE",{});var kct=s(hfe);Syo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),Ryo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(rA,"CODE",{});var Sct=s(pfe);Pyo=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),Byo=r(rA,":"),rA.forEach(t),Iyo=i(aa),Q=n(aa,"UL",{});var H=s(Q);J4=n(H,"LI",{});var u9e=s(J4);_fe=n(u9e,"STRONG",{});var Rct=s(_fe);Nyo=r(Rct,"albert"),Rct.forEach(t),qyo=r(u9e," \u2014 "),ND=n(u9e,"A",{href:!0});var Pct=s(ND);jyo=r(Pct,"AlbertForMaskedLM"),Pct.forEach(t),Dyo=r(u9e," (ALBERT model)"),u9e.forEach(t),Gyo=i(H),Y4=n(H,"LI",{});var b9e=s(Y4);ufe=n(b9e,"STRONG",{});var Bct=s(ufe);Oyo=r(Bct,"bart"),Bct.forEach(t),Vyo=r(b9e," \u2014 "),qD=n(b9e,"A",{href:!0});var Ict=s(qD);Xyo=r(Ict,"BartForConditionalGeneration"),Ict.forEach(t),zyo=r(b9e," (BART model)"),b9e.forEach(t),Wyo=i(H),K4=n(H,"LI",{});var v9e=s(K4);bfe=n(v9e,"STRONG",{});var Nct=s(bfe);Qyo=r(Nct,"bert"),Nct.forEach(t),Hyo=r(v9e," \u2014 "),jD=n(v9e,"A",{href:!0});var qct=s(jD);Uyo=r(qct,"BertForMaskedLM"),qct.forEach(t),Jyo=r(v9e," (BERT model)"),v9e.forEach(t),Yyo=i(H),Z4=n(H,"LI",{});var F9e=s(Z4);vfe=n(F9e,"STRONG",{});var jct=s(vfe);Kyo=r(jct,"big_bird"),jct.forEach(t),Zyo=r(F9e," \u2014 "),DD=n(F9e,"A",{href:!0});var Dct=s(DD);e8o=r(Dct,"BigBirdForMaskedLM"),Dct.forEach(t),o8o=r(F9e," (BigBird model)"),F9e.forEach(t),r8o=i(H),e1=n(H,"LI",{});var T9e=s(e1);Ffe=n(T9e,"STRONG",{});var Gct=s(Ffe);t8o=r(Gct,"camembert"),Gct.forEach(t),a8o=r(T9e," \u2014 "),GD=n(T9e,"A",{href:!0});var Oct=s(GD);n8o=r(Oct,"CamembertForMaskedLM"),Oct.forEach(t),s8o=r(T9e," (CamemBERT model)"),T9e.forEach(t),l8o=i(H),o1=n(H,"LI",{});var M9e=s(o1);Tfe=n(M9e,"STRONG",{});var Vct=s(Tfe);i8o=r(Vct,"convbert"),Vct.forEach(t),d8o=r(M9e," \u2014 "),OD=n(M9e,"A",{href:!0});var Xct=s(OD);c8o=r(Xct,"ConvBertForMaskedLM"),Xct.forEach(t),f8o=r(M9e," (ConvBERT model)"),M9e.forEach(t),m8o=i(H),r1=n(H,"LI",{});var E9e=s(r1);Mfe=n(E9e,"STRONG",{});var zct=s(Mfe);g8o=r(zct,"data2vec-text"),zct.forEach(t),h8o=r(E9e," \u2014 "),VD=n(E9e,"A",{href:!0});var Wct=s(VD);p8o=r(Wct,"Data2VecTextForMaskedLM"),Wct.forEach(t),_8o=r(E9e," (Data2VecText model)"),E9e.forEach(t),u8o=i(H),t1=n(H,"LI",{});var C9e=s(t1);Efe=n(C9e,"STRONG",{});var Qct=s(Efe);b8o=r(Qct,"deberta"),Qct.forEach(t),v8o=r(C9e," \u2014 "),XD=n(C9e,"A",{href:!0});var Hct=s(XD);F8o=r(Hct,"DebertaForMaskedLM"),Hct.forEach(t),T8o=r(C9e," (DeBERTa model)"),C9e.forEach(t),M8o=i(H),a1=n(H,"LI",{});var w9e=s(a1);Cfe=n(w9e,"STRONG",{});var Uct=s(Cfe);E8o=r(Uct,"deberta-v2"),Uct.forEach(t),C8o=r(w9e," \u2014 "),zD=n(w9e,"A",{href:!0});var Jct=s(zD);w8o=r(Jct,"DebertaV2ForMaskedLM"),Jct.forEach(t),A8o=r(w9e," (DeBERTa-v2 model)"),w9e.forEach(t),L8o=i(H),n1=n(H,"LI",{});var A9e=s(n1);wfe=n(A9e,"STRONG",{});var Yct=s(wfe);y8o=r(Yct,"distilbert"),Yct.forEach(t),x8o=r(A9e," \u2014 "),WD=n(A9e,"A",{href:!0});var Kct=s(WD);$8o=r(Kct,"DistilBertForMaskedLM"),Kct.forEach(t),k8o=r(A9e," (DistilBERT model)"),A9e.forEach(t),S8o=i(H),s1=n(H,"LI",{});var L9e=s(s1);Afe=n(L9e,"STRONG",{});var Zct=s(Afe);R8o=r(Zct,"electra"),Zct.forEach(t),P8o=r(L9e," \u2014 "),QD=n(L9e,"A",{href:!0});var eft=s(QD);B8o=r(eft,"ElectraForMaskedLM"),eft.forEach(t),I8o=r(L9e," (ELECTRA model)"),L9e.forEach(t),N8o=i(H),l1=n(H,"LI",{});var y9e=s(l1);Lfe=n(y9e,"STRONG",{});var oft=s(Lfe);q8o=r(oft,"flaubert"),oft.forEach(t),j8o=r(y9e," \u2014 "),HD=n(y9e,"A",{href:!0});var rft=s(HD);D8o=r(rft,"FlaubertWithLMHeadModel"),rft.forEach(t),G8o=r(y9e," (FlauBERT model)"),y9e.forEach(t),O8o=i(H),i1=n(H,"LI",{});var x9e=s(i1);yfe=n(x9e,"STRONG",{});var tft=s(yfe);V8o=r(tft,"fnet"),tft.forEach(t),X8o=r(x9e," \u2014 "),UD=n(x9e,"A",{href:!0});var aft=s(UD);z8o=r(aft,"FNetForMaskedLM"),aft.forEach(t),W8o=r(x9e," (FNet model)"),x9e.forEach(t),Q8o=i(H),d1=n(H,"LI",{});var $9e=s(d1);xfe=n($9e,"STRONG",{});var nft=s(xfe);H8o=r(nft,"funnel"),nft.forEach(t),U8o=r($9e," \u2014 "),JD=n($9e,"A",{href:!0});var sft=s(JD);J8o=r(sft,"FunnelForMaskedLM"),sft.forEach(t),Y8o=r($9e," (Funnel Transformer model)"),$9e.forEach(t),K8o=i(H),c1=n(H,"LI",{});var k9e=s(c1);$fe=n(k9e,"STRONG",{});var lft=s($fe);Z8o=r(lft,"ibert"),lft.forEach(t),e9o=r(k9e," \u2014 "),YD=n(k9e,"A",{href:!0});var ift=s(YD);o9o=r(ift,"IBertForMaskedLM"),ift.forEach(t),r9o=r(k9e," (I-BERT model)"),k9e.forEach(t),t9o=i(H),f1=n(H,"LI",{});var S9e=s(f1);kfe=n(S9e,"STRONG",{});var dft=s(kfe);a9o=r(dft,"layoutlm"),dft.forEach(t),n9o=r(S9e," \u2014 "),KD=n(S9e,"A",{href:!0});var cft=s(KD);s9o=r(cft,"LayoutLMForMaskedLM"),cft.forEach(t),l9o=r(S9e," (LayoutLM model)"),S9e.forEach(t),i9o=i(H),m1=n(H,"LI",{});var R9e=s(m1);Sfe=n(R9e,"STRONG",{});var fft=s(Sfe);d9o=r(fft,"longformer"),fft.forEach(t),c9o=r(R9e," \u2014 "),ZD=n(R9e,"A",{href:!0});var mft=s(ZD);f9o=r(mft,"LongformerForMaskedLM"),mft.forEach(t),m9o=r(R9e," (Longformer model)"),R9e.forEach(t),g9o=i(H),g1=n(H,"LI",{});var P9e=s(g1);Rfe=n(P9e,"STRONG",{});var gft=s(Rfe);h9o=r(gft,"luke"),gft.forEach(t),p9o=r(P9e," \u2014 "),eG=n(P9e,"A",{href:!0});var hft=s(eG);_9o=r(hft,"LukeForMaskedLM"),hft.forEach(t),u9o=r(P9e," (LUKE model)"),P9e.forEach(t),b9o=i(H),h1=n(H,"LI",{});var B9e=s(h1);Pfe=n(B9e,"STRONG",{});var pft=s(Pfe);v9o=r(pft,"mbart"),pft.forEach(t),F9o=r(B9e," \u2014 "),oG=n(B9e,"A",{href:!0});var _ft=s(oG);T9o=r(_ft,"MBartForConditionalGeneration"),_ft.forEach(t),M9o=r(B9e," (mBART model)"),B9e.forEach(t),E9o=i(H),p1=n(H,"LI",{});var I9e=s(p1);Bfe=n(I9e,"STRONG",{});var uft=s(Bfe);C9o=r(uft,"megatron-bert"),uft.forEach(t),w9o=r(I9e," \u2014 "),rG=n(I9e,"A",{href:!0});var bft=s(rG);A9o=r(bft,"MegatronBertForMaskedLM"),bft.forEach(t),L9o=r(I9e," (Megatron-BERT model)"),I9e.forEach(t),y9o=i(H),_1=n(H,"LI",{});var N9e=s(_1);Ife=n(N9e,"STRONG",{});var vft=s(Ife);x9o=r(vft,"mobilebert"),vft.forEach(t),$9o=r(N9e," \u2014 "),tG=n(N9e,"A",{href:!0});var Fft=s(tG);k9o=r(Fft,"MobileBertForMaskedLM"),Fft.forEach(t),S9o=r(N9e," (MobileBERT model)"),N9e.forEach(t),R9o=i(H),u1=n(H,"LI",{});var q9e=s(u1);Nfe=n(q9e,"STRONG",{});var Tft=s(Nfe);P9o=r(Tft,"mpnet"),Tft.forEach(t),B9o=r(q9e," \u2014 "),aG=n(q9e,"A",{href:!0});var Mft=s(aG);I9o=r(Mft,"MPNetForMaskedLM"),Mft.forEach(t),N9o=r(q9e," (MPNet model)"),q9e.forEach(t),q9o=i(H),b1=n(H,"LI",{});var j9e=s(b1);qfe=n(j9e,"STRONG",{});var Eft=s(qfe);j9o=r(Eft,"nystromformer"),Eft.forEach(t),D9o=r(j9e," \u2014 "),nG=n(j9e,"A",{href:!0});var Cft=s(nG);G9o=r(Cft,"NystromformerForMaskedLM"),Cft.forEach(t),O9o=r(j9e," (Nystr\xF6mformer model)"),j9e.forEach(t),V9o=i(H),v1=n(H,"LI",{});var D9e=s(v1);jfe=n(D9e,"STRONG",{});var wft=s(jfe);X9o=r(wft,"perceiver"),wft.forEach(t),z9o=r(D9e," \u2014 "),sG=n(D9e,"A",{href:!0});var Aft=s(sG);W9o=r(Aft,"PerceiverForMaskedLM"),Aft.forEach(t),Q9o=r(D9e," (Perceiver model)"),D9e.forEach(t),H9o=i(H),F1=n(H,"LI",{});var G9e=s(F1);Dfe=n(G9e,"STRONG",{});var Lft=s(Dfe);U9o=r(Lft,"qdqbert"),Lft.forEach(t),J9o=r(G9e," \u2014 "),lG=n(G9e,"A",{href:!0});var yft=s(lG);Y9o=r(yft,"QDQBertForMaskedLM"),yft.forEach(t),K9o=r(G9e," (QDQBert model)"),G9e.forEach(t),Z9o=i(H),T1=n(H,"LI",{});var O9e=s(T1);Gfe=n(O9e,"STRONG",{});var xft=s(Gfe);exo=r(xft,"reformer"),xft.forEach(t),oxo=r(O9e," \u2014 "),iG=n(O9e,"A",{href:!0});var $ft=s(iG);rxo=r($ft,"ReformerForMaskedLM"),$ft.forEach(t),txo=r(O9e," (Reformer model)"),O9e.forEach(t),axo=i(H),M1=n(H,"LI",{});var V9e=s(M1);Ofe=n(V9e,"STRONG",{});var kft=s(Ofe);nxo=r(kft,"rembert"),kft.forEach(t),sxo=r(V9e," \u2014 "),dG=n(V9e,"A",{href:!0});var Sft=s(dG);lxo=r(Sft,"RemBertForMaskedLM"),Sft.forEach(t),ixo=r(V9e," (RemBERT model)"),V9e.forEach(t),dxo=i(H),E1=n(H,"LI",{});var X9e=s(E1);Vfe=n(X9e,"STRONG",{});var Rft=s(Vfe);cxo=r(Rft,"roberta"),Rft.forEach(t),fxo=r(X9e," \u2014 "),cG=n(X9e,"A",{href:!0});var Pft=s(cG);mxo=r(Pft,"RobertaForMaskedLM"),Pft.forEach(t),gxo=r(X9e," (RoBERTa model)"),X9e.forEach(t),hxo=i(H),C1=n(H,"LI",{});var z9e=s(C1);Xfe=n(z9e,"STRONG",{});var Bft=s(Xfe);pxo=r(Bft,"roformer"),Bft.forEach(t),_xo=r(z9e," \u2014 "),fG=n(z9e,"A",{href:!0});var Ift=s(fG);uxo=r(Ift,"RoFormerForMaskedLM"),Ift.forEach(t),bxo=r(z9e," (RoFormer model)"),z9e.forEach(t),vxo=i(H),w1=n(H,"LI",{});var W9e=s(w1);zfe=n(W9e,"STRONG",{});var Nft=s(zfe);Fxo=r(Nft,"squeezebert"),Nft.forEach(t),Txo=r(W9e," \u2014 "),mG=n(W9e,"A",{href:!0});var qft=s(mG);Mxo=r(qft,"SqueezeBertForMaskedLM"),qft.forEach(t),Exo=r(W9e," (SqueezeBERT model)"),W9e.forEach(t),Cxo=i(H),A1=n(H,"LI",{});var Q9e=s(A1);Wfe=n(Q9e,"STRONG",{});var jft=s(Wfe);wxo=r(jft,"tapas"),jft.forEach(t),Axo=r(Q9e," \u2014 "),gG=n(Q9e,"A",{href:!0});var Dft=s(gG);Lxo=r(Dft,"TapasForMaskedLM"),Dft.forEach(t),yxo=r(Q9e," (TAPAS model)"),Q9e.forEach(t),xxo=i(H),L1=n(H,"LI",{});var H9e=s(L1);Qfe=n(H9e,"STRONG",{});var Gft=s(Qfe);$xo=r(Gft,"wav2vec2"),Gft.forEach(t),kxo=r(H9e," \u2014 "),Hfe=n(H9e,"CODE",{});var Oft=s(Hfe);Sxo=r(Oft,"Wav2Vec2ForMaskedLM"),Oft.forEach(t),Rxo=r(H9e," (Wav2Vec2 model)"),H9e.forEach(t),Pxo=i(H),y1=n(H,"LI",{});var U9e=s(y1);Ufe=n(U9e,"STRONG",{});var Vft=s(Ufe);Bxo=r(Vft,"xlm"),Vft.forEach(t),Ixo=r(U9e," \u2014 "),hG=n(U9e,"A",{href:!0});var Xft=s(hG);Nxo=r(Xft,"XLMWithLMHeadModel"),Xft.forEach(t),qxo=r(U9e," (XLM model)"),U9e.forEach(t),jxo=i(H),x1=n(H,"LI",{});var J9e=s(x1);Jfe=n(J9e,"STRONG",{});var zft=s(Jfe);Dxo=r(zft,"xlm-roberta"),zft.forEach(t),Gxo=r(J9e," \u2014 "),pG=n(J9e,"A",{href:!0});var Wft=s(pG);Oxo=r(Wft,"XLMRobertaForMaskedLM"),Wft.forEach(t),Vxo=r(J9e," (XLM-RoBERTa model)"),J9e.forEach(t),Xxo=i(H),$1=n(H,"LI",{});var Y9e=s($1);Yfe=n(Y9e,"STRONG",{});var Qft=s(Yfe);zxo=r(Qft,"xlm-roberta-xl"),Qft.forEach(t),Wxo=r(Y9e," \u2014 "),_G=n(Y9e,"A",{href:!0});var Hft=s(_G);Qxo=r(Hft,"XLMRobertaXLForMaskedLM"),Hft.forEach(t),Hxo=r(Y9e," (XLM-RoBERTa-XL model)"),Y9e.forEach(t),Uxo=i(H),k1=n(H,"LI",{});var K9e=s(k1);Kfe=n(K9e,"STRONG",{});var Uft=s(Kfe);Jxo=r(Uft,"yoso"),Uft.forEach(t),Yxo=r(K9e," \u2014 "),uG=n(K9e,"A",{href:!0});var Jft=s(uG);Kxo=r(Jft,"YosoForMaskedLM"),Jft.forEach(t),Zxo=r(K9e," (YOSO model)"),K9e.forEach(t),H.forEach(t),e$o=i(aa),S1=n(aa,"P",{});var Z9e=s(S1);o$o=r(Z9e,"The model is set in evaluation mode by default using "),Zfe=n(Z9e,"CODE",{});var Yft=s(Zfe);r$o=r(Yft,"model.eval()"),Yft.forEach(t),t$o=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(Z9e,"CODE",{});var Kft=s(eme);a$o=r(Kft,"model.train()"),Kft.forEach(t),Z9e.forEach(t),n$o=i(aa),T(R1.$$.fragment,aa),aa.forEach(t),zs.forEach(t),qje=i(f),qi=n(f,"H2",{class:!0});var OGe=s(qi);P1=n(OGe,"A",{id:!0,class:!0,href:!0});var Zft=s(P1);ome=n(Zft,"SPAN",{});var emt=s(ome);T(NL.$$.fragment,emt),emt.forEach(t),Zft.forEach(t),s$o=i(OGe),rme=n(OGe,"SPAN",{});var omt=s(rme);l$o=r(omt,"AutoModelForSeq2SeqLM"),omt.forEach(t),OGe.forEach(t),jje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(qL.$$.fragment,Ws),i$o=i(Ws),ji=n(Ws,"P",{});var lee=s(ji);d$o=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bG=n(lee,"A",{href:!0});var rmt=s(bG);c$o=r(rmt,"from_pretrained()"),rmt.forEach(t),f$o=r(lee," class method or the "),vG=n(lee,"A",{href:!0});var tmt=s(vG);m$o=r(tmt,"from_config()"),tmt.forEach(t),g$o=r(lee,` class
method.`),lee.forEach(t),h$o=i(Ws),jL=n(Ws,"P",{});var VGe=s(jL);p$o=r(VGe,"This class cannot be instantiated directly using "),tme=n(VGe,"CODE",{});var amt=s(tme);_$o=r(amt,"__init__()"),amt.forEach(t),u$o=r(VGe," (throws an error)."),VGe.forEach(t),b$o=i(Ws),lt=n(Ws,"DIV",{class:!0});var tA=s(lt);T(DL.$$.fragment,tA),v$o=i(tA),ame=n(tA,"P",{});var nmt=s(ame);F$o=r(nmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nmt.forEach(t),T$o=i(tA),Di=n(tA,"P",{});var iee=s(Di);M$o=r(iee,`Note:
Loading a model from its configuration file does `),nme=n(iee,"STRONG",{});var smt=s(nme);E$o=r(smt,"not"),smt.forEach(t),C$o=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(iee,"A",{href:!0});var lmt=s(FG);w$o=r(lmt,"from_pretrained()"),lmt.forEach(t),A$o=r(iee," to load the model weights."),iee.forEach(t),L$o=i(tA),T(B1.$$.fragment,tA),tA.forEach(t),y$o=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(GL.$$.fragment,na),x$o=i(na),sme=n(na,"P",{});var imt=s(sme);$$o=r(imt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),imt.forEach(t),k$o=i(na),Sa=n(na,"P",{});var aA=s(Sa);S$o=r(aA,"The model class to instantiate is selected based on the "),lme=n(aA,"CODE",{});var dmt=s(lme);R$o=r(dmt,"model_type"),dmt.forEach(t),P$o=r(aA,` property of the config object (either
passed as an argument or loaded from `),ime=n(aA,"CODE",{});var cmt=s(ime);B$o=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),I$o=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(aA,"CODE",{});var fmt=s(dme);N$o=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),q$o=r(aA,":"),aA.forEach(t),j$o=i(na),_e=n(na,"UL",{});var Fe=s(_e);I1=n(Fe,"LI",{});var exe=s(I1);cme=n(exe,"STRONG",{});var mmt=s(cme);D$o=r(mmt,"bart"),mmt.forEach(t),G$o=r(exe," \u2014 "),TG=n(exe,"A",{href:!0});var gmt=s(TG);O$o=r(gmt,"BartForConditionalGeneration"),gmt.forEach(t),V$o=r(exe," (BART model)"),exe.forEach(t),X$o=i(Fe),N1=n(Fe,"LI",{});var oxe=s(N1);fme=n(oxe,"STRONG",{});var hmt=s(fme);z$o=r(hmt,"bigbird_pegasus"),hmt.forEach(t),W$o=r(oxe," \u2014 "),MG=n(oxe,"A",{href:!0});var pmt=s(MG);Q$o=r(pmt,"BigBirdPegasusForConditionalGeneration"),pmt.forEach(t),H$o=r(oxe," (BigBird-Pegasus model)"),oxe.forEach(t),U$o=i(Fe),q1=n(Fe,"LI",{});var rxe=s(q1);mme=n(rxe,"STRONG",{});var _mt=s(mme);J$o=r(_mt,"blenderbot"),_mt.forEach(t),Y$o=r(rxe," \u2014 "),EG=n(rxe,"A",{href:!0});var umt=s(EG);K$o=r(umt,"BlenderbotForConditionalGeneration"),umt.forEach(t),Z$o=r(rxe," (Blenderbot model)"),rxe.forEach(t),eko=i(Fe),j1=n(Fe,"LI",{});var txe=s(j1);gme=n(txe,"STRONG",{});var bmt=s(gme);oko=r(bmt,"blenderbot-small"),bmt.forEach(t),rko=r(txe," \u2014 "),CG=n(txe,"A",{href:!0});var vmt=s(CG);tko=r(vmt,"BlenderbotSmallForConditionalGeneration"),vmt.forEach(t),ako=r(txe," (BlenderbotSmall model)"),txe.forEach(t),nko=i(Fe),D1=n(Fe,"LI",{});var axe=s(D1);hme=n(axe,"STRONG",{});var Fmt=s(hme);sko=r(Fmt,"encoder-decoder"),Fmt.forEach(t),lko=r(axe," \u2014 "),wG=n(axe,"A",{href:!0});var Tmt=s(wG);iko=r(Tmt,"EncoderDecoderModel"),Tmt.forEach(t),dko=r(axe," (Encoder decoder model)"),axe.forEach(t),cko=i(Fe),G1=n(Fe,"LI",{});var nxe=s(G1);pme=n(nxe,"STRONG",{});var Mmt=s(pme);fko=r(Mmt,"fsmt"),Mmt.forEach(t),mko=r(nxe," \u2014 "),AG=n(nxe,"A",{href:!0});var Emt=s(AG);gko=r(Emt,"FSMTForConditionalGeneration"),Emt.forEach(t),hko=r(nxe," (FairSeq Machine-Translation model)"),nxe.forEach(t),pko=i(Fe),O1=n(Fe,"LI",{});var sxe=s(O1);_me=n(sxe,"STRONG",{});var Cmt=s(_me);_ko=r(Cmt,"led"),Cmt.forEach(t),uko=r(sxe," \u2014 "),LG=n(sxe,"A",{href:!0});var wmt=s(LG);bko=r(wmt,"LEDForConditionalGeneration"),wmt.forEach(t),vko=r(sxe," (LED model)"),sxe.forEach(t),Fko=i(Fe),V1=n(Fe,"LI",{});var lxe=s(V1);ume=n(lxe,"STRONG",{});var Amt=s(ume);Tko=r(Amt,"m2m_100"),Amt.forEach(t),Mko=r(lxe," \u2014 "),yG=n(lxe,"A",{href:!0});var Lmt=s(yG);Eko=r(Lmt,"M2M100ForConditionalGeneration"),Lmt.forEach(t),Cko=r(lxe," (M2M100 model)"),lxe.forEach(t),wko=i(Fe),X1=n(Fe,"LI",{});var ixe=s(X1);bme=n(ixe,"STRONG",{});var ymt=s(bme);Ako=r(ymt,"marian"),ymt.forEach(t),Lko=r(ixe," \u2014 "),xG=n(ixe,"A",{href:!0});var xmt=s(xG);yko=r(xmt,"MarianMTModel"),xmt.forEach(t),xko=r(ixe," (Marian model)"),ixe.forEach(t),$ko=i(Fe),z1=n(Fe,"LI",{});var dxe=s(z1);vme=n(dxe,"STRONG",{});var $mt=s(vme);kko=r($mt,"mbart"),$mt.forEach(t),Sko=r(dxe," \u2014 "),$G=n(dxe,"A",{href:!0});var kmt=s($G);Rko=r(kmt,"MBartForConditionalGeneration"),kmt.forEach(t),Pko=r(dxe," (mBART model)"),dxe.forEach(t),Bko=i(Fe),W1=n(Fe,"LI",{});var cxe=s(W1);Fme=n(cxe,"STRONG",{});var Smt=s(Fme);Iko=r(Smt,"mt5"),Smt.forEach(t),Nko=r(cxe," \u2014 "),kG=n(cxe,"A",{href:!0});var Rmt=s(kG);qko=r(Rmt,"MT5ForConditionalGeneration"),Rmt.forEach(t),jko=r(cxe," (MT5 model)"),cxe.forEach(t),Dko=i(Fe),Q1=n(Fe,"LI",{});var fxe=s(Q1);Tme=n(fxe,"STRONG",{});var Pmt=s(Tme);Gko=r(Pmt,"pegasus"),Pmt.forEach(t),Oko=r(fxe," \u2014 "),SG=n(fxe,"A",{href:!0});var Bmt=s(SG);Vko=r(Bmt,"PegasusForConditionalGeneration"),Bmt.forEach(t),Xko=r(fxe," (Pegasus model)"),fxe.forEach(t),zko=i(Fe),H1=n(Fe,"LI",{});var mxe=s(H1);Mme=n(mxe,"STRONG",{});var Imt=s(Mme);Wko=r(Imt,"plbart"),Imt.forEach(t),Qko=r(mxe," \u2014 "),RG=n(mxe,"A",{href:!0});var Nmt=s(RG);Hko=r(Nmt,"PLBartForConditionalGeneration"),Nmt.forEach(t),Uko=r(mxe," (PLBart model)"),mxe.forEach(t),Jko=i(Fe),U1=n(Fe,"LI",{});var gxe=s(U1);Eme=n(gxe,"STRONG",{});var qmt=s(Eme);Yko=r(qmt,"prophetnet"),qmt.forEach(t),Kko=r(gxe," \u2014 "),PG=n(gxe,"A",{href:!0});var jmt=s(PG);Zko=r(jmt,"ProphetNetForConditionalGeneration"),jmt.forEach(t),eSo=r(gxe," (ProphetNet model)"),gxe.forEach(t),oSo=i(Fe),J1=n(Fe,"LI",{});var hxe=s(J1);Cme=n(hxe,"STRONG",{});var Dmt=s(Cme);rSo=r(Dmt,"t5"),Dmt.forEach(t),tSo=r(hxe," \u2014 "),BG=n(hxe,"A",{href:!0});var Gmt=s(BG);aSo=r(Gmt,"T5ForConditionalGeneration"),Gmt.forEach(t),nSo=r(hxe," (T5 model)"),hxe.forEach(t),sSo=i(Fe),Y1=n(Fe,"LI",{});var pxe=s(Y1);wme=n(pxe,"STRONG",{});var Omt=s(wme);lSo=r(Omt,"xlm-prophetnet"),Omt.forEach(t),iSo=r(pxe," \u2014 "),IG=n(pxe,"A",{href:!0});var Vmt=s(IG);dSo=r(Vmt,"XLMProphetNetForConditionalGeneration"),Vmt.forEach(t),cSo=r(pxe," (XLM-ProphetNet model)"),pxe.forEach(t),Fe.forEach(t),fSo=i(na),K1=n(na,"P",{});var _xe=s(K1);mSo=r(_xe,"The model is set in evaluation mode by default using "),Ame=n(_xe,"CODE",{});var Xmt=s(Ame);gSo=r(Xmt,"model.eval()"),Xmt.forEach(t),hSo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(_xe,"CODE",{});var zmt=s(Lme);pSo=r(zmt,"model.train()"),zmt.forEach(t),_xe.forEach(t),_So=i(na),T(Z1.$$.fragment,na),na.forEach(t),Ws.forEach(t),Dje=i(f),Gi=n(f,"H2",{class:!0});var XGe=s(Gi);e7=n(XGe,"A",{id:!0,class:!0,href:!0});var Wmt=s(e7);yme=n(Wmt,"SPAN",{});var Qmt=s(yme);T(OL.$$.fragment,Qmt),Qmt.forEach(t),Wmt.forEach(t),uSo=i(XGe),xme=n(XGe,"SPAN",{});var Hmt=s(xme);bSo=r(Hmt,"AutoModelForSequenceClassification"),Hmt.forEach(t),XGe.forEach(t),Gje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(VL.$$.fragment,Qs),vSo=i(Qs),Oi=n(Qs,"P",{});var dee=s(Oi);FSo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NG=n(dee,"A",{href:!0});var Umt=s(NG);TSo=r(Umt,"from_pretrained()"),Umt.forEach(t),MSo=r(dee," class method or the "),qG=n(dee,"A",{href:!0});var Jmt=s(qG);ESo=r(Jmt,"from_config()"),Jmt.forEach(t),CSo=r(dee,` class
method.`),dee.forEach(t),wSo=i(Qs),XL=n(Qs,"P",{});var zGe=s(XL);ASo=r(zGe,"This class cannot be instantiated directly using "),$me=n(zGe,"CODE",{});var Ymt=s($me);LSo=r(Ymt,"__init__()"),Ymt.forEach(t),ySo=r(zGe," (throws an error)."),zGe.forEach(t),xSo=i(Qs),it=n(Qs,"DIV",{class:!0});var nA=s(it);T(zL.$$.fragment,nA),$So=i(nA),kme=n(nA,"P",{});var Kmt=s(kme);kSo=r(Kmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kmt.forEach(t),SSo=i(nA),Vi=n(nA,"P",{});var cee=s(Vi);RSo=r(cee,`Note:
Loading a model from its configuration file does `),Sme=n(cee,"STRONG",{});var Zmt=s(Sme);PSo=r(Zmt,"not"),Zmt.forEach(t),BSo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(cee,"A",{href:!0});var egt=s(jG);ISo=r(egt,"from_pretrained()"),egt.forEach(t),NSo=r(cee," to load the model weights."),cee.forEach(t),qSo=i(nA),T(o7.$$.fragment,nA),nA.forEach(t),jSo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(WL.$$.fragment,sa),DSo=i(sa),Rme=n(sa,"P",{});var ogt=s(Rme);GSo=r(ogt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ogt.forEach(t),OSo=i(sa),Ra=n(sa,"P",{});var sA=s(Ra);VSo=r(sA,"The model class to instantiate is selected based on the "),Pme=n(sA,"CODE",{});var rgt=s(Pme);XSo=r(rgt,"model_type"),rgt.forEach(t),zSo=r(sA,` property of the config object (either
passed as an argument or loaded from `),Bme=n(sA,"CODE",{});var tgt=s(Bme);WSo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),QSo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=n(sA,"CODE",{});var agt=s(Ime);HSo=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),USo=r(sA,":"),sA.forEach(t),JSo=i(sa),N=n(sa,"UL",{});var j=s(N);r7=n(j,"LI",{});var uxe=s(r7);Nme=n(uxe,"STRONG",{});var ngt=s(Nme);YSo=r(ngt,"albert"),ngt.forEach(t),KSo=r(uxe," \u2014 "),DG=n(uxe,"A",{href:!0});var sgt=s(DG);ZSo=r(sgt,"AlbertForSequenceClassification"),sgt.forEach(t),eRo=r(uxe," (ALBERT model)"),uxe.forEach(t),oRo=i(j),t7=n(j,"LI",{});var bxe=s(t7);qme=n(bxe,"STRONG",{});var lgt=s(qme);rRo=r(lgt,"bart"),lgt.forEach(t),tRo=r(bxe," \u2014 "),GG=n(bxe,"A",{href:!0});var igt=s(GG);aRo=r(igt,"BartForSequenceClassification"),igt.forEach(t),nRo=r(bxe," (BART model)"),bxe.forEach(t),sRo=i(j),a7=n(j,"LI",{});var vxe=s(a7);jme=n(vxe,"STRONG",{});var dgt=s(jme);lRo=r(dgt,"bert"),dgt.forEach(t),iRo=r(vxe," \u2014 "),OG=n(vxe,"A",{href:!0});var cgt=s(OG);dRo=r(cgt,"BertForSequenceClassification"),cgt.forEach(t),cRo=r(vxe," (BERT model)"),vxe.forEach(t),fRo=i(j),n7=n(j,"LI",{});var Fxe=s(n7);Dme=n(Fxe,"STRONG",{});var fgt=s(Dme);mRo=r(fgt,"big_bird"),fgt.forEach(t),gRo=r(Fxe," \u2014 "),VG=n(Fxe,"A",{href:!0});var mgt=s(VG);hRo=r(mgt,"BigBirdForSequenceClassification"),mgt.forEach(t),pRo=r(Fxe," (BigBird model)"),Fxe.forEach(t),_Ro=i(j),s7=n(j,"LI",{});var Txe=s(s7);Gme=n(Txe,"STRONG",{});var ggt=s(Gme);uRo=r(ggt,"bigbird_pegasus"),ggt.forEach(t),bRo=r(Txe," \u2014 "),XG=n(Txe,"A",{href:!0});var hgt=s(XG);vRo=r(hgt,"BigBirdPegasusForSequenceClassification"),hgt.forEach(t),FRo=r(Txe," (BigBird-Pegasus model)"),Txe.forEach(t),TRo=i(j),l7=n(j,"LI",{});var Mxe=s(l7);Ome=n(Mxe,"STRONG",{});var pgt=s(Ome);MRo=r(pgt,"camembert"),pgt.forEach(t),ERo=r(Mxe," \u2014 "),zG=n(Mxe,"A",{href:!0});var _gt=s(zG);CRo=r(_gt,"CamembertForSequenceClassification"),_gt.forEach(t),wRo=r(Mxe," (CamemBERT model)"),Mxe.forEach(t),ARo=i(j),i7=n(j,"LI",{});var Exe=s(i7);Vme=n(Exe,"STRONG",{});var ugt=s(Vme);LRo=r(ugt,"canine"),ugt.forEach(t),yRo=r(Exe," \u2014 "),WG=n(Exe,"A",{href:!0});var bgt=s(WG);xRo=r(bgt,"CanineForSequenceClassification"),bgt.forEach(t),$Ro=r(Exe," (CANINE model)"),Exe.forEach(t),kRo=i(j),d7=n(j,"LI",{});var Cxe=s(d7);Xme=n(Cxe,"STRONG",{});var vgt=s(Xme);SRo=r(vgt,"convbert"),vgt.forEach(t),RRo=r(Cxe," \u2014 "),QG=n(Cxe,"A",{href:!0});var Fgt=s(QG);PRo=r(Fgt,"ConvBertForSequenceClassification"),Fgt.forEach(t),BRo=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),IRo=i(j),c7=n(j,"LI",{});var wxe=s(c7);zme=n(wxe,"STRONG",{});var Tgt=s(zme);NRo=r(Tgt,"ctrl"),Tgt.forEach(t),qRo=r(wxe," \u2014 "),HG=n(wxe,"A",{href:!0});var Mgt=s(HG);jRo=r(Mgt,"CTRLForSequenceClassification"),Mgt.forEach(t),DRo=r(wxe," (CTRL model)"),wxe.forEach(t),GRo=i(j),f7=n(j,"LI",{});var Axe=s(f7);Wme=n(Axe,"STRONG",{});var Egt=s(Wme);ORo=r(Egt,"data2vec-text"),Egt.forEach(t),VRo=r(Axe," \u2014 "),UG=n(Axe,"A",{href:!0});var Cgt=s(UG);XRo=r(Cgt,"Data2VecTextForSequenceClassification"),Cgt.forEach(t),zRo=r(Axe," (Data2VecText model)"),Axe.forEach(t),WRo=i(j),m7=n(j,"LI",{});var Lxe=s(m7);Qme=n(Lxe,"STRONG",{});var wgt=s(Qme);QRo=r(wgt,"deberta"),wgt.forEach(t),HRo=r(Lxe," \u2014 "),JG=n(Lxe,"A",{href:!0});var Agt=s(JG);URo=r(Agt,"DebertaForSequenceClassification"),Agt.forEach(t),JRo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),YRo=i(j),g7=n(j,"LI",{});var yxe=s(g7);Hme=n(yxe,"STRONG",{});var Lgt=s(Hme);KRo=r(Lgt,"deberta-v2"),Lgt.forEach(t),ZRo=r(yxe," \u2014 "),YG=n(yxe,"A",{href:!0});var ygt=s(YG);ePo=r(ygt,"DebertaV2ForSequenceClassification"),ygt.forEach(t),oPo=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),rPo=i(j),h7=n(j,"LI",{});var xxe=s(h7);Ume=n(xxe,"STRONG",{});var xgt=s(Ume);tPo=r(xgt,"distilbert"),xgt.forEach(t),aPo=r(xxe," \u2014 "),KG=n(xxe,"A",{href:!0});var $gt=s(KG);nPo=r($gt,"DistilBertForSequenceClassification"),$gt.forEach(t),sPo=r(xxe," (DistilBERT model)"),xxe.forEach(t),lPo=i(j),p7=n(j,"LI",{});var $xe=s(p7);Jme=n($xe,"STRONG",{});var kgt=s(Jme);iPo=r(kgt,"electra"),kgt.forEach(t),dPo=r($xe," \u2014 "),ZG=n($xe,"A",{href:!0});var Sgt=s(ZG);cPo=r(Sgt,"ElectraForSequenceClassification"),Sgt.forEach(t),fPo=r($xe," (ELECTRA model)"),$xe.forEach(t),mPo=i(j),_7=n(j,"LI",{});var kxe=s(_7);Yme=n(kxe,"STRONG",{});var Rgt=s(Yme);gPo=r(Rgt,"flaubert"),Rgt.forEach(t),hPo=r(kxe," \u2014 "),eO=n(kxe,"A",{href:!0});var Pgt=s(eO);pPo=r(Pgt,"FlaubertForSequenceClassification"),Pgt.forEach(t),_Po=r(kxe," (FlauBERT model)"),kxe.forEach(t),uPo=i(j),u7=n(j,"LI",{});var Sxe=s(u7);Kme=n(Sxe,"STRONG",{});var Bgt=s(Kme);bPo=r(Bgt,"fnet"),Bgt.forEach(t),vPo=r(Sxe," \u2014 "),oO=n(Sxe,"A",{href:!0});var Igt=s(oO);FPo=r(Igt,"FNetForSequenceClassification"),Igt.forEach(t),TPo=r(Sxe," (FNet model)"),Sxe.forEach(t),MPo=i(j),b7=n(j,"LI",{});var Rxe=s(b7);Zme=n(Rxe,"STRONG",{});var Ngt=s(Zme);EPo=r(Ngt,"funnel"),Ngt.forEach(t),CPo=r(Rxe," \u2014 "),rO=n(Rxe,"A",{href:!0});var qgt=s(rO);wPo=r(qgt,"FunnelForSequenceClassification"),qgt.forEach(t),APo=r(Rxe," (Funnel Transformer model)"),Rxe.forEach(t),LPo=i(j),v7=n(j,"LI",{});var Pxe=s(v7);ege=n(Pxe,"STRONG",{});var jgt=s(ege);yPo=r(jgt,"gpt2"),jgt.forEach(t),xPo=r(Pxe," \u2014 "),tO=n(Pxe,"A",{href:!0});var Dgt=s(tO);$Po=r(Dgt,"GPT2ForSequenceClassification"),Dgt.forEach(t),kPo=r(Pxe," (OpenAI GPT-2 model)"),Pxe.forEach(t),SPo=i(j),F7=n(j,"LI",{});var Bxe=s(F7);oge=n(Bxe,"STRONG",{});var Ggt=s(oge);RPo=r(Ggt,"gpt_neo"),Ggt.forEach(t),PPo=r(Bxe," \u2014 "),aO=n(Bxe,"A",{href:!0});var Ogt=s(aO);BPo=r(Ogt,"GPTNeoForSequenceClassification"),Ogt.forEach(t),IPo=r(Bxe," (GPT Neo model)"),Bxe.forEach(t),NPo=i(j),T7=n(j,"LI",{});var Ixe=s(T7);rge=n(Ixe,"STRONG",{});var Vgt=s(rge);qPo=r(Vgt,"gptj"),Vgt.forEach(t),jPo=r(Ixe," \u2014 "),nO=n(Ixe,"A",{href:!0});var Xgt=s(nO);DPo=r(Xgt,"GPTJForSequenceClassification"),Xgt.forEach(t),GPo=r(Ixe," (GPT-J model)"),Ixe.forEach(t),OPo=i(j),M7=n(j,"LI",{});var Nxe=s(M7);tge=n(Nxe,"STRONG",{});var zgt=s(tge);VPo=r(zgt,"ibert"),zgt.forEach(t),XPo=r(Nxe," \u2014 "),sO=n(Nxe,"A",{href:!0});var Wgt=s(sO);zPo=r(Wgt,"IBertForSequenceClassification"),Wgt.forEach(t),WPo=r(Nxe," (I-BERT model)"),Nxe.forEach(t),QPo=i(j),E7=n(j,"LI",{});var qxe=s(E7);age=n(qxe,"STRONG",{});var Qgt=s(age);HPo=r(Qgt,"layoutlm"),Qgt.forEach(t),UPo=r(qxe," \u2014 "),lO=n(qxe,"A",{href:!0});var Hgt=s(lO);JPo=r(Hgt,"LayoutLMForSequenceClassification"),Hgt.forEach(t),YPo=r(qxe," (LayoutLM model)"),qxe.forEach(t),KPo=i(j),C7=n(j,"LI",{});var jxe=s(C7);nge=n(jxe,"STRONG",{});var Ugt=s(nge);ZPo=r(Ugt,"layoutlmv2"),Ugt.forEach(t),eBo=r(jxe," \u2014 "),iO=n(jxe,"A",{href:!0});var Jgt=s(iO);oBo=r(Jgt,"LayoutLMv2ForSequenceClassification"),Jgt.forEach(t),rBo=r(jxe," (LayoutLMv2 model)"),jxe.forEach(t),tBo=i(j),w7=n(j,"LI",{});var Dxe=s(w7);sge=n(Dxe,"STRONG",{});var Ygt=s(sge);aBo=r(Ygt,"layoutlmv3"),Ygt.forEach(t),nBo=r(Dxe," \u2014 "),dO=n(Dxe,"A",{href:!0});var Kgt=s(dO);sBo=r(Kgt,"LayoutLMv3ForSequenceClassification"),Kgt.forEach(t),lBo=r(Dxe," (LayoutLMv3 model)"),Dxe.forEach(t),iBo=i(j),A7=n(j,"LI",{});var Gxe=s(A7);lge=n(Gxe,"STRONG",{});var Zgt=s(lge);dBo=r(Zgt,"led"),Zgt.forEach(t),cBo=r(Gxe," \u2014 "),cO=n(Gxe,"A",{href:!0});var eht=s(cO);fBo=r(eht,"LEDForSequenceClassification"),eht.forEach(t),mBo=r(Gxe," (LED model)"),Gxe.forEach(t),gBo=i(j),L7=n(j,"LI",{});var Oxe=s(L7);ige=n(Oxe,"STRONG",{});var oht=s(ige);hBo=r(oht,"longformer"),oht.forEach(t),pBo=r(Oxe," \u2014 "),fO=n(Oxe,"A",{href:!0});var rht=s(fO);_Bo=r(rht,"LongformerForSequenceClassification"),rht.forEach(t),uBo=r(Oxe," (Longformer model)"),Oxe.forEach(t),bBo=i(j),y7=n(j,"LI",{});var Vxe=s(y7);dge=n(Vxe,"STRONG",{});var tht=s(dge);vBo=r(tht,"mbart"),tht.forEach(t),FBo=r(Vxe," \u2014 "),mO=n(Vxe,"A",{href:!0});var aht=s(mO);TBo=r(aht,"MBartForSequenceClassification"),aht.forEach(t),MBo=r(Vxe," (mBART model)"),Vxe.forEach(t),EBo=i(j),x7=n(j,"LI",{});var Xxe=s(x7);cge=n(Xxe,"STRONG",{});var nht=s(cge);CBo=r(nht,"megatron-bert"),nht.forEach(t),wBo=r(Xxe," \u2014 "),gO=n(Xxe,"A",{href:!0});var sht=s(gO);ABo=r(sht,"MegatronBertForSequenceClassification"),sht.forEach(t),LBo=r(Xxe," (Megatron-BERT model)"),Xxe.forEach(t),yBo=i(j),$7=n(j,"LI",{});var zxe=s($7);fge=n(zxe,"STRONG",{});var lht=s(fge);xBo=r(lht,"mobilebert"),lht.forEach(t),$Bo=r(zxe," \u2014 "),hO=n(zxe,"A",{href:!0});var iht=s(hO);kBo=r(iht,"MobileBertForSequenceClassification"),iht.forEach(t),SBo=r(zxe," (MobileBERT model)"),zxe.forEach(t),RBo=i(j),k7=n(j,"LI",{});var Wxe=s(k7);mge=n(Wxe,"STRONG",{});var dht=s(mge);PBo=r(dht,"mpnet"),dht.forEach(t),BBo=r(Wxe," \u2014 "),pO=n(Wxe,"A",{href:!0});var cht=s(pO);IBo=r(cht,"MPNetForSequenceClassification"),cht.forEach(t),NBo=r(Wxe," (MPNet model)"),Wxe.forEach(t),qBo=i(j),S7=n(j,"LI",{});var Qxe=s(S7);gge=n(Qxe,"STRONG",{});var fht=s(gge);jBo=r(fht,"nystromformer"),fht.forEach(t),DBo=r(Qxe," \u2014 "),_O=n(Qxe,"A",{href:!0});var mht=s(_O);GBo=r(mht,"NystromformerForSequenceClassification"),mht.forEach(t),OBo=r(Qxe," (Nystr\xF6mformer model)"),Qxe.forEach(t),VBo=i(j),R7=n(j,"LI",{});var Hxe=s(R7);hge=n(Hxe,"STRONG",{});var ght=s(hge);XBo=r(ght,"openai-gpt"),ght.forEach(t),zBo=r(Hxe," \u2014 "),uO=n(Hxe,"A",{href:!0});var hht=s(uO);WBo=r(hht,"OpenAIGPTForSequenceClassification"),hht.forEach(t),QBo=r(Hxe," (OpenAI GPT model)"),Hxe.forEach(t),HBo=i(j),P7=n(j,"LI",{});var Uxe=s(P7);pge=n(Uxe,"STRONG",{});var pht=s(pge);UBo=r(pht,"perceiver"),pht.forEach(t),JBo=r(Uxe," \u2014 "),bO=n(Uxe,"A",{href:!0});var _ht=s(bO);YBo=r(_ht,"PerceiverForSequenceClassification"),_ht.forEach(t),KBo=r(Uxe," (Perceiver model)"),Uxe.forEach(t),ZBo=i(j),B7=n(j,"LI",{});var Jxe=s(B7);_ge=n(Jxe,"STRONG",{});var uht=s(_ge);eIo=r(uht,"plbart"),uht.forEach(t),oIo=r(Jxe," \u2014 "),vO=n(Jxe,"A",{href:!0});var bht=s(vO);rIo=r(bht,"PLBartForSequenceClassification"),bht.forEach(t),tIo=r(Jxe," (PLBart model)"),Jxe.forEach(t),aIo=i(j),I7=n(j,"LI",{});var Yxe=s(I7);uge=n(Yxe,"STRONG",{});var vht=s(uge);nIo=r(vht,"qdqbert"),vht.forEach(t),sIo=r(Yxe," \u2014 "),FO=n(Yxe,"A",{href:!0});var Fht=s(FO);lIo=r(Fht,"QDQBertForSequenceClassification"),Fht.forEach(t),iIo=r(Yxe," (QDQBert model)"),Yxe.forEach(t),dIo=i(j),N7=n(j,"LI",{});var Kxe=s(N7);bge=n(Kxe,"STRONG",{});var Tht=s(bge);cIo=r(Tht,"reformer"),Tht.forEach(t),fIo=r(Kxe," \u2014 "),TO=n(Kxe,"A",{href:!0});var Mht=s(TO);mIo=r(Mht,"ReformerForSequenceClassification"),Mht.forEach(t),gIo=r(Kxe," (Reformer model)"),Kxe.forEach(t),hIo=i(j),q7=n(j,"LI",{});var Zxe=s(q7);vge=n(Zxe,"STRONG",{});var Eht=s(vge);pIo=r(Eht,"rembert"),Eht.forEach(t),_Io=r(Zxe," \u2014 "),MO=n(Zxe,"A",{href:!0});var Cht=s(MO);uIo=r(Cht,"RemBertForSequenceClassification"),Cht.forEach(t),bIo=r(Zxe," (RemBERT model)"),Zxe.forEach(t),vIo=i(j),j7=n(j,"LI",{});var e$e=s(j7);Fge=n(e$e,"STRONG",{});var wht=s(Fge);FIo=r(wht,"roberta"),wht.forEach(t),TIo=r(e$e," \u2014 "),EO=n(e$e,"A",{href:!0});var Aht=s(EO);MIo=r(Aht,"RobertaForSequenceClassification"),Aht.forEach(t),EIo=r(e$e," (RoBERTa model)"),e$e.forEach(t),CIo=i(j),D7=n(j,"LI",{});var o$e=s(D7);Tge=n(o$e,"STRONG",{});var Lht=s(Tge);wIo=r(Lht,"roformer"),Lht.forEach(t),AIo=r(o$e," \u2014 "),CO=n(o$e,"A",{href:!0});var yht=s(CO);LIo=r(yht,"RoFormerForSequenceClassification"),yht.forEach(t),yIo=r(o$e," (RoFormer model)"),o$e.forEach(t),xIo=i(j),G7=n(j,"LI",{});var r$e=s(G7);Mge=n(r$e,"STRONG",{});var xht=s(Mge);$Io=r(xht,"squeezebert"),xht.forEach(t),kIo=r(r$e," \u2014 "),wO=n(r$e,"A",{href:!0});var $ht=s(wO);SIo=r($ht,"SqueezeBertForSequenceClassification"),$ht.forEach(t),RIo=r(r$e," (SqueezeBERT model)"),r$e.forEach(t),PIo=i(j),O7=n(j,"LI",{});var t$e=s(O7);Ege=n(t$e,"STRONG",{});var kht=s(Ege);BIo=r(kht,"tapas"),kht.forEach(t),IIo=r(t$e," \u2014 "),AO=n(t$e,"A",{href:!0});var Sht=s(AO);NIo=r(Sht,"TapasForSequenceClassification"),Sht.forEach(t),qIo=r(t$e," (TAPAS model)"),t$e.forEach(t),jIo=i(j),V7=n(j,"LI",{});var a$e=s(V7);Cge=n(a$e,"STRONG",{});var Rht=s(Cge);DIo=r(Rht,"transfo-xl"),Rht.forEach(t),GIo=r(a$e," \u2014 "),LO=n(a$e,"A",{href:!0});var Pht=s(LO);OIo=r(Pht,"TransfoXLForSequenceClassification"),Pht.forEach(t),VIo=r(a$e," (Transformer-XL model)"),a$e.forEach(t),XIo=i(j),X7=n(j,"LI",{});var n$e=s(X7);wge=n(n$e,"STRONG",{});var Bht=s(wge);zIo=r(Bht,"xlm"),Bht.forEach(t),WIo=r(n$e," \u2014 "),yO=n(n$e,"A",{href:!0});var Iht=s(yO);QIo=r(Iht,"XLMForSequenceClassification"),Iht.forEach(t),HIo=r(n$e," (XLM model)"),n$e.forEach(t),UIo=i(j),z7=n(j,"LI",{});var s$e=s(z7);Age=n(s$e,"STRONG",{});var Nht=s(Age);JIo=r(Nht,"xlm-roberta"),Nht.forEach(t),YIo=r(s$e," \u2014 "),xO=n(s$e,"A",{href:!0});var qht=s(xO);KIo=r(qht,"XLMRobertaForSequenceClassification"),qht.forEach(t),ZIo=r(s$e," (XLM-RoBERTa model)"),s$e.forEach(t),eNo=i(j),W7=n(j,"LI",{});var l$e=s(W7);Lge=n(l$e,"STRONG",{});var jht=s(Lge);oNo=r(jht,"xlm-roberta-xl"),jht.forEach(t),rNo=r(l$e," \u2014 "),$O=n(l$e,"A",{href:!0});var Dht=s($O);tNo=r(Dht,"XLMRobertaXLForSequenceClassification"),Dht.forEach(t),aNo=r(l$e," (XLM-RoBERTa-XL model)"),l$e.forEach(t),nNo=i(j),Q7=n(j,"LI",{});var i$e=s(Q7);yge=n(i$e,"STRONG",{});var Ght=s(yge);sNo=r(Ght,"xlnet"),Ght.forEach(t),lNo=r(i$e," \u2014 "),kO=n(i$e,"A",{href:!0});var Oht=s(kO);iNo=r(Oht,"XLNetForSequenceClassification"),Oht.forEach(t),dNo=r(i$e," (XLNet model)"),i$e.forEach(t),cNo=i(j),H7=n(j,"LI",{});var d$e=s(H7);xge=n(d$e,"STRONG",{});var Vht=s(xge);fNo=r(Vht,"yoso"),Vht.forEach(t),mNo=r(d$e," \u2014 "),SO=n(d$e,"A",{href:!0});var Xht=s(SO);gNo=r(Xht,"YosoForSequenceClassification"),Xht.forEach(t),hNo=r(d$e," (YOSO model)"),d$e.forEach(t),j.forEach(t),pNo=i(sa),U7=n(sa,"P",{});var c$e=s(U7);_No=r(c$e,"The model is set in evaluation mode by default using "),$ge=n(c$e,"CODE",{});var zht=s($ge);uNo=r(zht,"model.eval()"),zht.forEach(t),bNo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(c$e,"CODE",{});var Wht=s(kge);vNo=r(Wht,"model.train()"),Wht.forEach(t),c$e.forEach(t),FNo=i(sa),T(J7.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Oje=i(f),Xi=n(f,"H2",{class:!0});var WGe=s(Xi);Y7=n(WGe,"A",{id:!0,class:!0,href:!0});var Qht=s(Y7);Sge=n(Qht,"SPAN",{});var Hht=s(Sge);T(QL.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),TNo=i(WGe),Rge=n(WGe,"SPAN",{});var Uht=s(Rge);MNo=r(Uht,"AutoModelForMultipleChoice"),Uht.forEach(t),WGe.forEach(t),Vje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(HL.$$.fragment,Hs),ENo=i(Hs),zi=n(Hs,"P",{});var fee=s(zi);CNo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RO=n(fee,"A",{href:!0});var Jht=s(RO);wNo=r(Jht,"from_pretrained()"),Jht.forEach(t),ANo=r(fee," class method or the "),PO=n(fee,"A",{href:!0});var Yht=s(PO);LNo=r(Yht,"from_config()"),Yht.forEach(t),yNo=r(fee,` class
method.`),fee.forEach(t),xNo=i(Hs),UL=n(Hs,"P",{});var QGe=s(UL);$No=r(QGe,"This class cannot be instantiated directly using "),Pge=n(QGe,"CODE",{});var Kht=s(Pge);kNo=r(Kht,"__init__()"),Kht.forEach(t),SNo=r(QGe," (throws an error)."),QGe.forEach(t),RNo=i(Hs),dt=n(Hs,"DIV",{class:!0});var lA=s(dt);T(JL.$$.fragment,lA),PNo=i(lA),Bge=n(lA,"P",{});var Zht=s(Bge);BNo=r(Zht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zht.forEach(t),INo=i(lA),Wi=n(lA,"P",{});var mee=s(Wi);NNo=r(mee,`Note:
Loading a model from its configuration file does `),Ige=n(mee,"STRONG",{});var ept=s(Ige);qNo=r(ept,"not"),ept.forEach(t),jNo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=n(mee,"A",{href:!0});var opt=s(BO);DNo=r(opt,"from_pretrained()"),opt.forEach(t),GNo=r(mee," to load the model weights."),mee.forEach(t),ONo=i(lA),T(K7.$$.fragment,lA),lA.forEach(t),VNo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(YL.$$.fragment,la),XNo=i(la),Nge=n(la,"P",{});var rpt=s(Nge);zNo=r(rpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rpt.forEach(t),WNo=i(la),Pa=n(la,"P",{});var iA=s(Pa);QNo=r(iA,"The model class to instantiate is selected based on the "),qge=n(iA,"CODE",{});var tpt=s(qge);HNo=r(tpt,"model_type"),tpt.forEach(t),UNo=r(iA,` property of the config object (either
passed as an argument or loaded from `),jge=n(iA,"CODE",{});var apt=s(jge);JNo=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),YNo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(iA,"CODE",{});var npt=s(Dge);KNo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),ZNo=r(iA,":"),iA.forEach(t),eqo=i(la),Z=n(la,"UL",{});var ee=s(Z);Z7=n(ee,"LI",{});var f$e=s(Z7);Gge=n(f$e,"STRONG",{});var spt=s(Gge);oqo=r(spt,"albert"),spt.forEach(t),rqo=r(f$e," \u2014 "),IO=n(f$e,"A",{href:!0});var lpt=s(IO);tqo=r(lpt,"AlbertForMultipleChoice"),lpt.forEach(t),aqo=r(f$e," (ALBERT model)"),f$e.forEach(t),nqo=i(ee),eb=n(ee,"LI",{});var m$e=s(eb);Oge=n(m$e,"STRONG",{});var ipt=s(Oge);sqo=r(ipt,"bert"),ipt.forEach(t),lqo=r(m$e," \u2014 "),NO=n(m$e,"A",{href:!0});var dpt=s(NO);iqo=r(dpt,"BertForMultipleChoice"),dpt.forEach(t),dqo=r(m$e," (BERT model)"),m$e.forEach(t),cqo=i(ee),ob=n(ee,"LI",{});var g$e=s(ob);Vge=n(g$e,"STRONG",{});var cpt=s(Vge);fqo=r(cpt,"big_bird"),cpt.forEach(t),mqo=r(g$e," \u2014 "),qO=n(g$e,"A",{href:!0});var fpt=s(qO);gqo=r(fpt,"BigBirdForMultipleChoice"),fpt.forEach(t),hqo=r(g$e," (BigBird model)"),g$e.forEach(t),pqo=i(ee),rb=n(ee,"LI",{});var h$e=s(rb);Xge=n(h$e,"STRONG",{});var mpt=s(Xge);_qo=r(mpt,"camembert"),mpt.forEach(t),uqo=r(h$e," \u2014 "),jO=n(h$e,"A",{href:!0});var gpt=s(jO);bqo=r(gpt,"CamembertForMultipleChoice"),gpt.forEach(t),vqo=r(h$e," (CamemBERT model)"),h$e.forEach(t),Fqo=i(ee),tb=n(ee,"LI",{});var p$e=s(tb);zge=n(p$e,"STRONG",{});var hpt=s(zge);Tqo=r(hpt,"canine"),hpt.forEach(t),Mqo=r(p$e," \u2014 "),DO=n(p$e,"A",{href:!0});var ppt=s(DO);Eqo=r(ppt,"CanineForMultipleChoice"),ppt.forEach(t),Cqo=r(p$e," (CANINE model)"),p$e.forEach(t),wqo=i(ee),ab=n(ee,"LI",{});var _$e=s(ab);Wge=n(_$e,"STRONG",{});var _pt=s(Wge);Aqo=r(_pt,"convbert"),_pt.forEach(t),Lqo=r(_$e," \u2014 "),GO=n(_$e,"A",{href:!0});var upt=s(GO);yqo=r(upt,"ConvBertForMultipleChoice"),upt.forEach(t),xqo=r(_$e," (ConvBERT model)"),_$e.forEach(t),$qo=i(ee),nb=n(ee,"LI",{});var u$e=s(nb);Qge=n(u$e,"STRONG",{});var bpt=s(Qge);kqo=r(bpt,"data2vec-text"),bpt.forEach(t),Sqo=r(u$e," \u2014 "),OO=n(u$e,"A",{href:!0});var vpt=s(OO);Rqo=r(vpt,"Data2VecTextForMultipleChoice"),vpt.forEach(t),Pqo=r(u$e," (Data2VecText model)"),u$e.forEach(t),Bqo=i(ee),sb=n(ee,"LI",{});var b$e=s(sb);Hge=n(b$e,"STRONG",{});var Fpt=s(Hge);Iqo=r(Fpt,"deberta-v2"),Fpt.forEach(t),Nqo=r(b$e," \u2014 "),VO=n(b$e,"A",{href:!0});var Tpt=s(VO);qqo=r(Tpt,"DebertaV2ForMultipleChoice"),Tpt.forEach(t),jqo=r(b$e," (DeBERTa-v2 model)"),b$e.forEach(t),Dqo=i(ee),lb=n(ee,"LI",{});var v$e=s(lb);Uge=n(v$e,"STRONG",{});var Mpt=s(Uge);Gqo=r(Mpt,"distilbert"),Mpt.forEach(t),Oqo=r(v$e," \u2014 "),XO=n(v$e,"A",{href:!0});var Ept=s(XO);Vqo=r(Ept,"DistilBertForMultipleChoice"),Ept.forEach(t),Xqo=r(v$e," (DistilBERT model)"),v$e.forEach(t),zqo=i(ee),ib=n(ee,"LI",{});var F$e=s(ib);Jge=n(F$e,"STRONG",{});var Cpt=s(Jge);Wqo=r(Cpt,"electra"),Cpt.forEach(t),Qqo=r(F$e," \u2014 "),zO=n(F$e,"A",{href:!0});var wpt=s(zO);Hqo=r(wpt,"ElectraForMultipleChoice"),wpt.forEach(t),Uqo=r(F$e," (ELECTRA model)"),F$e.forEach(t),Jqo=i(ee),db=n(ee,"LI",{});var T$e=s(db);Yge=n(T$e,"STRONG",{});var Apt=s(Yge);Yqo=r(Apt,"flaubert"),Apt.forEach(t),Kqo=r(T$e," \u2014 "),WO=n(T$e,"A",{href:!0});var Lpt=s(WO);Zqo=r(Lpt,"FlaubertForMultipleChoice"),Lpt.forEach(t),ejo=r(T$e," (FlauBERT model)"),T$e.forEach(t),ojo=i(ee),cb=n(ee,"LI",{});var M$e=s(cb);Kge=n(M$e,"STRONG",{});var ypt=s(Kge);rjo=r(ypt,"fnet"),ypt.forEach(t),tjo=r(M$e," \u2014 "),QO=n(M$e,"A",{href:!0});var xpt=s(QO);ajo=r(xpt,"FNetForMultipleChoice"),xpt.forEach(t),njo=r(M$e," (FNet model)"),M$e.forEach(t),sjo=i(ee),fb=n(ee,"LI",{});var E$e=s(fb);Zge=n(E$e,"STRONG",{});var $pt=s(Zge);ljo=r($pt,"funnel"),$pt.forEach(t),ijo=r(E$e," \u2014 "),HO=n(E$e,"A",{href:!0});var kpt=s(HO);djo=r(kpt,"FunnelForMultipleChoice"),kpt.forEach(t),cjo=r(E$e," (Funnel Transformer model)"),E$e.forEach(t),fjo=i(ee),mb=n(ee,"LI",{});var C$e=s(mb);ehe=n(C$e,"STRONG",{});var Spt=s(ehe);mjo=r(Spt,"ibert"),Spt.forEach(t),gjo=r(C$e," \u2014 "),UO=n(C$e,"A",{href:!0});var Rpt=s(UO);hjo=r(Rpt,"IBertForMultipleChoice"),Rpt.forEach(t),pjo=r(C$e," (I-BERT model)"),C$e.forEach(t),_jo=i(ee),gb=n(ee,"LI",{});var w$e=s(gb);ohe=n(w$e,"STRONG",{});var Ppt=s(ohe);ujo=r(Ppt,"longformer"),Ppt.forEach(t),bjo=r(w$e," \u2014 "),JO=n(w$e,"A",{href:!0});var Bpt=s(JO);vjo=r(Bpt,"LongformerForMultipleChoice"),Bpt.forEach(t),Fjo=r(w$e," (Longformer model)"),w$e.forEach(t),Tjo=i(ee),hb=n(ee,"LI",{});var A$e=s(hb);rhe=n(A$e,"STRONG",{});var Ipt=s(rhe);Mjo=r(Ipt,"megatron-bert"),Ipt.forEach(t),Ejo=r(A$e," \u2014 "),YO=n(A$e,"A",{href:!0});var Npt=s(YO);Cjo=r(Npt,"MegatronBertForMultipleChoice"),Npt.forEach(t),wjo=r(A$e," (Megatron-BERT model)"),A$e.forEach(t),Ajo=i(ee),pb=n(ee,"LI",{});var L$e=s(pb);the=n(L$e,"STRONG",{});var qpt=s(the);Ljo=r(qpt,"mobilebert"),qpt.forEach(t),yjo=r(L$e," \u2014 "),KO=n(L$e,"A",{href:!0});var jpt=s(KO);xjo=r(jpt,"MobileBertForMultipleChoice"),jpt.forEach(t),$jo=r(L$e," (MobileBERT model)"),L$e.forEach(t),kjo=i(ee),_b=n(ee,"LI",{});var y$e=s(_b);ahe=n(y$e,"STRONG",{});var Dpt=s(ahe);Sjo=r(Dpt,"mpnet"),Dpt.forEach(t),Rjo=r(y$e," \u2014 "),ZO=n(y$e,"A",{href:!0});var Gpt=s(ZO);Pjo=r(Gpt,"MPNetForMultipleChoice"),Gpt.forEach(t),Bjo=r(y$e," (MPNet model)"),y$e.forEach(t),Ijo=i(ee),ub=n(ee,"LI",{});var x$e=s(ub);nhe=n(x$e,"STRONG",{});var Opt=s(nhe);Njo=r(Opt,"nystromformer"),Opt.forEach(t),qjo=r(x$e," \u2014 "),eV=n(x$e,"A",{href:!0});var Vpt=s(eV);jjo=r(Vpt,"NystromformerForMultipleChoice"),Vpt.forEach(t),Djo=r(x$e," (Nystr\xF6mformer model)"),x$e.forEach(t),Gjo=i(ee),bb=n(ee,"LI",{});var $$e=s(bb);she=n($$e,"STRONG",{});var Xpt=s(she);Ojo=r(Xpt,"qdqbert"),Xpt.forEach(t),Vjo=r($$e," \u2014 "),oV=n($$e,"A",{href:!0});var zpt=s(oV);Xjo=r(zpt,"QDQBertForMultipleChoice"),zpt.forEach(t),zjo=r($$e," (QDQBert model)"),$$e.forEach(t),Wjo=i(ee),vb=n(ee,"LI",{});var k$e=s(vb);lhe=n(k$e,"STRONG",{});var Wpt=s(lhe);Qjo=r(Wpt,"rembert"),Wpt.forEach(t),Hjo=r(k$e," \u2014 "),rV=n(k$e,"A",{href:!0});var Qpt=s(rV);Ujo=r(Qpt,"RemBertForMultipleChoice"),Qpt.forEach(t),Jjo=r(k$e," (RemBERT model)"),k$e.forEach(t),Yjo=i(ee),Fb=n(ee,"LI",{});var S$e=s(Fb);ihe=n(S$e,"STRONG",{});var Hpt=s(ihe);Kjo=r(Hpt,"roberta"),Hpt.forEach(t),Zjo=r(S$e," \u2014 "),tV=n(S$e,"A",{href:!0});var Upt=s(tV);eDo=r(Upt,"RobertaForMultipleChoice"),Upt.forEach(t),oDo=r(S$e," (RoBERTa model)"),S$e.forEach(t),rDo=i(ee),Tb=n(ee,"LI",{});var R$e=s(Tb);dhe=n(R$e,"STRONG",{});var Jpt=s(dhe);tDo=r(Jpt,"roformer"),Jpt.forEach(t),aDo=r(R$e," \u2014 "),aV=n(R$e,"A",{href:!0});var Ypt=s(aV);nDo=r(Ypt,"RoFormerForMultipleChoice"),Ypt.forEach(t),sDo=r(R$e," (RoFormer model)"),R$e.forEach(t),lDo=i(ee),Mb=n(ee,"LI",{});var P$e=s(Mb);che=n(P$e,"STRONG",{});var Kpt=s(che);iDo=r(Kpt,"squeezebert"),Kpt.forEach(t),dDo=r(P$e," \u2014 "),nV=n(P$e,"A",{href:!0});var Zpt=s(nV);cDo=r(Zpt,"SqueezeBertForMultipleChoice"),Zpt.forEach(t),fDo=r(P$e," (SqueezeBERT model)"),P$e.forEach(t),mDo=i(ee),Eb=n(ee,"LI",{});var B$e=s(Eb);fhe=n(B$e,"STRONG",{});var e_t=s(fhe);gDo=r(e_t,"xlm"),e_t.forEach(t),hDo=r(B$e," \u2014 "),sV=n(B$e,"A",{href:!0});var o_t=s(sV);pDo=r(o_t,"XLMForMultipleChoice"),o_t.forEach(t),_Do=r(B$e," (XLM model)"),B$e.forEach(t),uDo=i(ee),Cb=n(ee,"LI",{});var I$e=s(Cb);mhe=n(I$e,"STRONG",{});var r_t=s(mhe);bDo=r(r_t,"xlm-roberta"),r_t.forEach(t),vDo=r(I$e," \u2014 "),lV=n(I$e,"A",{href:!0});var t_t=s(lV);FDo=r(t_t,"XLMRobertaForMultipleChoice"),t_t.forEach(t),TDo=r(I$e," (XLM-RoBERTa model)"),I$e.forEach(t),MDo=i(ee),wb=n(ee,"LI",{});var N$e=s(wb);ghe=n(N$e,"STRONG",{});var a_t=s(ghe);EDo=r(a_t,"xlm-roberta-xl"),a_t.forEach(t),CDo=r(N$e," \u2014 "),iV=n(N$e,"A",{href:!0});var n_t=s(iV);wDo=r(n_t,"XLMRobertaXLForMultipleChoice"),n_t.forEach(t),ADo=r(N$e," (XLM-RoBERTa-XL model)"),N$e.forEach(t),LDo=i(ee),Ab=n(ee,"LI",{});var q$e=s(Ab);hhe=n(q$e,"STRONG",{});var s_t=s(hhe);yDo=r(s_t,"xlnet"),s_t.forEach(t),xDo=r(q$e," \u2014 "),dV=n(q$e,"A",{href:!0});var l_t=s(dV);$Do=r(l_t,"XLNetForMultipleChoice"),l_t.forEach(t),kDo=r(q$e," (XLNet model)"),q$e.forEach(t),SDo=i(ee),Lb=n(ee,"LI",{});var j$e=s(Lb);phe=n(j$e,"STRONG",{});var i_t=s(phe);RDo=r(i_t,"yoso"),i_t.forEach(t),PDo=r(j$e," \u2014 "),cV=n(j$e,"A",{href:!0});var d_t=s(cV);BDo=r(d_t,"YosoForMultipleChoice"),d_t.forEach(t),IDo=r(j$e," (YOSO model)"),j$e.forEach(t),ee.forEach(t),NDo=i(la),yb=n(la,"P",{});var D$e=s(yb);qDo=r(D$e,"The model is set in evaluation mode by default using "),_he=n(D$e,"CODE",{});var c_t=s(_he);jDo=r(c_t,"model.eval()"),c_t.forEach(t),DDo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n(D$e,"CODE",{});var f_t=s(uhe);GDo=r(f_t,"model.train()"),f_t.forEach(t),D$e.forEach(t),ODo=i(la),T(xb.$$.fragment,la),la.forEach(t),Hs.forEach(t),Xje=i(f),Qi=n(f,"H2",{class:!0});var HGe=s(Qi);$b=n(HGe,"A",{id:!0,class:!0,href:!0});var m_t=s($b);bhe=n(m_t,"SPAN",{});var g_t=s(bhe);T(KL.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),VDo=i(HGe),vhe=n(HGe,"SPAN",{});var h_t=s(vhe);XDo=r(h_t,"AutoModelForNextSentencePrediction"),h_t.forEach(t),HGe.forEach(t),zje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(ZL.$$.fragment,Us),zDo=i(Us),Hi=n(Us,"P",{});var gee=s(Hi);WDo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fV=n(gee,"A",{href:!0});var p_t=s(fV);QDo=r(p_t,"from_pretrained()"),p_t.forEach(t),HDo=r(gee," class method or the "),mV=n(gee,"A",{href:!0});var __t=s(mV);UDo=r(__t,"from_config()"),__t.forEach(t),JDo=r(gee,` class
method.`),gee.forEach(t),YDo=i(Us),ey=n(Us,"P",{});var UGe=s(ey);KDo=r(UGe,"This class cannot be instantiated directly using "),Fhe=n(UGe,"CODE",{});var u_t=s(Fhe);ZDo=r(u_t,"__init__()"),u_t.forEach(t),eGo=r(UGe," (throws an error)."),UGe.forEach(t),oGo=i(Us),ct=n(Us,"DIV",{class:!0});var dA=s(ct);T(oy.$$.fragment,dA),rGo=i(dA),The=n(dA,"P",{});var b_t=s(The);tGo=r(b_t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b_t.forEach(t),aGo=i(dA),Ui=n(dA,"P",{});var hee=s(Ui);nGo=r(hee,`Note:
Loading a model from its configuration file does `),Mhe=n(hee,"STRONG",{});var v_t=s(Mhe);sGo=r(v_t,"not"),v_t.forEach(t),lGo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(hee,"A",{href:!0});var F_t=s(gV);iGo=r(F_t,"from_pretrained()"),F_t.forEach(t),dGo=r(hee," to load the model weights."),hee.forEach(t),cGo=i(dA),T(kb.$$.fragment,dA),dA.forEach(t),fGo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(ry.$$.fragment,ia),mGo=i(ia),Ehe=n(ia,"P",{});var T_t=s(Ehe);gGo=r(T_t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T_t.forEach(t),hGo=i(ia),Ba=n(ia,"P",{});var cA=s(Ba);pGo=r(cA,"The model class to instantiate is selected based on the "),Che=n(cA,"CODE",{});var M_t=s(Che);_Go=r(M_t,"model_type"),M_t.forEach(t),uGo=r(cA,` property of the config object (either
passed as an argument or loaded from `),whe=n(cA,"CODE",{});var E_t=s(whe);bGo=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),vGo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(cA,"CODE",{});var C_t=s(Ahe);FGo=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),TGo=r(cA,":"),cA.forEach(t),MGo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);Sb=n(Js,"LI",{});var G$e=s(Sb);Lhe=n(G$e,"STRONG",{});var w_t=s(Lhe);EGo=r(w_t,"bert"),w_t.forEach(t),CGo=r(G$e," \u2014 "),hV=n(G$e,"A",{href:!0});var A_t=s(hV);wGo=r(A_t,"BertForNextSentencePrediction"),A_t.forEach(t),AGo=r(G$e," (BERT model)"),G$e.forEach(t),LGo=i(Js),Rb=n(Js,"LI",{});var O$e=s(Rb);yhe=n(O$e,"STRONG",{});var L_t=s(yhe);yGo=r(L_t,"fnet"),L_t.forEach(t),xGo=r(O$e," \u2014 "),pV=n(O$e,"A",{href:!0});var y_t=s(pV);$Go=r(y_t,"FNetForNextSentencePrediction"),y_t.forEach(t),kGo=r(O$e," (FNet model)"),O$e.forEach(t),SGo=i(Js),Pb=n(Js,"LI",{});var V$e=s(Pb);xhe=n(V$e,"STRONG",{});var x_t=s(xhe);RGo=r(x_t,"megatron-bert"),x_t.forEach(t),PGo=r(V$e," \u2014 "),_V=n(V$e,"A",{href:!0});var $_t=s(_V);BGo=r($_t,"MegatronBertForNextSentencePrediction"),$_t.forEach(t),IGo=r(V$e," (Megatron-BERT model)"),V$e.forEach(t),NGo=i(Js),Bb=n(Js,"LI",{});var X$e=s(Bb);$he=n(X$e,"STRONG",{});var k_t=s($he);qGo=r(k_t,"mobilebert"),k_t.forEach(t),jGo=r(X$e," \u2014 "),uV=n(X$e,"A",{href:!0});var S_t=s(uV);DGo=r(S_t,"MobileBertForNextSentencePrediction"),S_t.forEach(t),GGo=r(X$e," (MobileBERT model)"),X$e.forEach(t),OGo=i(Js),Ib=n(Js,"LI",{});var z$e=s(Ib);khe=n(z$e,"STRONG",{});var R_t=s(khe);VGo=r(R_t,"qdqbert"),R_t.forEach(t),XGo=r(z$e," \u2014 "),bV=n(z$e,"A",{href:!0});var P_t=s(bV);zGo=r(P_t,"QDQBertForNextSentencePrediction"),P_t.forEach(t),WGo=r(z$e," (QDQBert model)"),z$e.forEach(t),Js.forEach(t),QGo=i(ia),Nb=n(ia,"P",{});var W$e=s(Nb);HGo=r(W$e,"The model is set in evaluation mode by default using "),She=n(W$e,"CODE",{});var B_t=s(She);UGo=r(B_t,"model.eval()"),B_t.forEach(t),JGo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(W$e,"CODE",{});var I_t=s(Rhe);YGo=r(I_t,"model.train()"),I_t.forEach(t),W$e.forEach(t),KGo=i(ia),T(qb.$$.fragment,ia),ia.forEach(t),Us.forEach(t),Wje=i(f),Ji=n(f,"H2",{class:!0});var JGe=s(Ji);jb=n(JGe,"A",{id:!0,class:!0,href:!0});var N_t=s(jb);Phe=n(N_t,"SPAN",{});var q_t=s(Phe);T(ty.$$.fragment,q_t),q_t.forEach(t),N_t.forEach(t),ZGo=i(JGe),Bhe=n(JGe,"SPAN",{});var j_t=s(Bhe);eOo=r(j_t,"AutoModelForTokenClassification"),j_t.forEach(t),JGe.forEach(t),Qje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(ay.$$.fragment,Ys),oOo=i(Ys),Yi=n(Ys,"P",{});var pee=s(Yi);rOo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vV=n(pee,"A",{href:!0});var D_t=s(vV);tOo=r(D_t,"from_pretrained()"),D_t.forEach(t),aOo=r(pee," class method or the "),FV=n(pee,"A",{href:!0});var G_t=s(FV);nOo=r(G_t,"from_config()"),G_t.forEach(t),sOo=r(pee,` class
method.`),pee.forEach(t),lOo=i(Ys),ny=n(Ys,"P",{});var YGe=s(ny);iOo=r(YGe,"This class cannot be instantiated directly using "),Ihe=n(YGe,"CODE",{});var O_t=s(Ihe);dOo=r(O_t,"__init__()"),O_t.forEach(t),cOo=r(YGe," (throws an error)."),YGe.forEach(t),fOo=i(Ys),ft=n(Ys,"DIV",{class:!0});var fA=s(ft);T(sy.$$.fragment,fA),mOo=i(fA),Nhe=n(fA,"P",{});var V_t=s(Nhe);gOo=r(V_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V_t.forEach(t),hOo=i(fA),Ki=n(fA,"P",{});var _ee=s(Ki);pOo=r(_ee,`Note:
Loading a model from its configuration file does `),qhe=n(_ee,"STRONG",{});var X_t=s(qhe);_Oo=r(X_t,"not"),X_t.forEach(t),uOo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(_ee,"A",{href:!0});var z_t=s(TV);bOo=r(z_t,"from_pretrained()"),z_t.forEach(t),vOo=r(_ee," to load the model weights."),_ee.forEach(t),FOo=i(fA),T(Db.$$.fragment,fA),fA.forEach(t),TOo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(ly.$$.fragment,da),MOo=i(da),jhe=n(da,"P",{});var W_t=s(jhe);EOo=r(W_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W_t.forEach(t),COo=i(da),Ia=n(da,"P",{});var mA=s(Ia);wOo=r(mA,"The model class to instantiate is selected based on the "),Dhe=n(mA,"CODE",{});var Q_t=s(Dhe);AOo=r(Q_t,"model_type"),Q_t.forEach(t),LOo=r(mA,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(mA,"CODE",{});var H_t=s(Ghe);yOo=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),xOo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(mA,"CODE",{});var U_t=s(Ohe);$Oo=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),kOo=r(mA,":"),mA.forEach(t),SOo=i(da),U=n(da,"UL",{});var J=s(U);Gb=n(J,"LI",{});var Q$e=s(Gb);Vhe=n(Q$e,"STRONG",{});var J_t=s(Vhe);ROo=r(J_t,"albert"),J_t.forEach(t),POo=r(Q$e," \u2014 "),MV=n(Q$e,"A",{href:!0});var Y_t=s(MV);BOo=r(Y_t,"AlbertForTokenClassification"),Y_t.forEach(t),IOo=r(Q$e," (ALBERT model)"),Q$e.forEach(t),NOo=i(J),Ob=n(J,"LI",{});var H$e=s(Ob);Xhe=n(H$e,"STRONG",{});var K_t=s(Xhe);qOo=r(K_t,"bert"),K_t.forEach(t),jOo=r(H$e," \u2014 "),EV=n(H$e,"A",{href:!0});var Z_t=s(EV);DOo=r(Z_t,"BertForTokenClassification"),Z_t.forEach(t),GOo=r(H$e," (BERT model)"),H$e.forEach(t),OOo=i(J),Vb=n(J,"LI",{});var U$e=s(Vb);zhe=n(U$e,"STRONG",{});var eut=s(zhe);VOo=r(eut,"big_bird"),eut.forEach(t),XOo=r(U$e," \u2014 "),CV=n(U$e,"A",{href:!0});var out=s(CV);zOo=r(out,"BigBirdForTokenClassification"),out.forEach(t),WOo=r(U$e," (BigBird model)"),U$e.forEach(t),QOo=i(J),Xb=n(J,"LI",{});var J$e=s(Xb);Whe=n(J$e,"STRONG",{});var rut=s(Whe);HOo=r(rut,"camembert"),rut.forEach(t),UOo=r(J$e," \u2014 "),wV=n(J$e,"A",{href:!0});var tut=s(wV);JOo=r(tut,"CamembertForTokenClassification"),tut.forEach(t),YOo=r(J$e," (CamemBERT model)"),J$e.forEach(t),KOo=i(J),zb=n(J,"LI",{});var Y$e=s(zb);Qhe=n(Y$e,"STRONG",{});var aut=s(Qhe);ZOo=r(aut,"canine"),aut.forEach(t),eVo=r(Y$e," \u2014 "),AV=n(Y$e,"A",{href:!0});var nut=s(AV);oVo=r(nut,"CanineForTokenClassification"),nut.forEach(t),rVo=r(Y$e," (CANINE model)"),Y$e.forEach(t),tVo=i(J),Wb=n(J,"LI",{});var K$e=s(Wb);Hhe=n(K$e,"STRONG",{});var sut=s(Hhe);aVo=r(sut,"convbert"),sut.forEach(t),nVo=r(K$e," \u2014 "),LV=n(K$e,"A",{href:!0});var lut=s(LV);sVo=r(lut,"ConvBertForTokenClassification"),lut.forEach(t),lVo=r(K$e," (ConvBERT model)"),K$e.forEach(t),iVo=i(J),Qb=n(J,"LI",{});var Z$e=s(Qb);Uhe=n(Z$e,"STRONG",{});var iut=s(Uhe);dVo=r(iut,"data2vec-text"),iut.forEach(t),cVo=r(Z$e," \u2014 "),yV=n(Z$e,"A",{href:!0});var dut=s(yV);fVo=r(dut,"Data2VecTextForTokenClassification"),dut.forEach(t),mVo=r(Z$e," (Data2VecText model)"),Z$e.forEach(t),gVo=i(J),Hb=n(J,"LI",{});var eke=s(Hb);Jhe=n(eke,"STRONG",{});var cut=s(Jhe);hVo=r(cut,"deberta"),cut.forEach(t),pVo=r(eke," \u2014 "),xV=n(eke,"A",{href:!0});var fut=s(xV);_Vo=r(fut,"DebertaForTokenClassification"),fut.forEach(t),uVo=r(eke," (DeBERTa model)"),eke.forEach(t),bVo=i(J),Ub=n(J,"LI",{});var oke=s(Ub);Yhe=n(oke,"STRONG",{});var mut=s(Yhe);vVo=r(mut,"deberta-v2"),mut.forEach(t),FVo=r(oke," \u2014 "),$V=n(oke,"A",{href:!0});var gut=s($V);TVo=r(gut,"DebertaV2ForTokenClassification"),gut.forEach(t),MVo=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),EVo=i(J),Jb=n(J,"LI",{});var rke=s(Jb);Khe=n(rke,"STRONG",{});var hut=s(Khe);CVo=r(hut,"distilbert"),hut.forEach(t),wVo=r(rke," \u2014 "),kV=n(rke,"A",{href:!0});var put=s(kV);AVo=r(put,"DistilBertForTokenClassification"),put.forEach(t),LVo=r(rke," (DistilBERT model)"),rke.forEach(t),yVo=i(J),Yb=n(J,"LI",{});var tke=s(Yb);Zhe=n(tke,"STRONG",{});var _ut=s(Zhe);xVo=r(_ut,"electra"),_ut.forEach(t),$Vo=r(tke," \u2014 "),SV=n(tke,"A",{href:!0});var uut=s(SV);kVo=r(uut,"ElectraForTokenClassification"),uut.forEach(t),SVo=r(tke," (ELECTRA model)"),tke.forEach(t),RVo=i(J),Kb=n(J,"LI",{});var ake=s(Kb);epe=n(ake,"STRONG",{});var but=s(epe);PVo=r(but,"flaubert"),but.forEach(t),BVo=r(ake," \u2014 "),RV=n(ake,"A",{href:!0});var vut=s(RV);IVo=r(vut,"FlaubertForTokenClassification"),vut.forEach(t),NVo=r(ake," (FlauBERT model)"),ake.forEach(t),qVo=i(J),Zb=n(J,"LI",{});var nke=s(Zb);ope=n(nke,"STRONG",{});var Fut=s(ope);jVo=r(Fut,"fnet"),Fut.forEach(t),DVo=r(nke," \u2014 "),PV=n(nke,"A",{href:!0});var Tut=s(PV);GVo=r(Tut,"FNetForTokenClassification"),Tut.forEach(t),OVo=r(nke," (FNet model)"),nke.forEach(t),VVo=i(J),e2=n(J,"LI",{});var ske=s(e2);rpe=n(ske,"STRONG",{});var Mut=s(rpe);XVo=r(Mut,"funnel"),Mut.forEach(t),zVo=r(ske," \u2014 "),BV=n(ske,"A",{href:!0});var Eut=s(BV);WVo=r(Eut,"FunnelForTokenClassification"),Eut.forEach(t),QVo=r(ske," (Funnel Transformer model)"),ske.forEach(t),HVo=i(J),o2=n(J,"LI",{});var lke=s(o2);tpe=n(lke,"STRONG",{});var Cut=s(tpe);UVo=r(Cut,"gpt2"),Cut.forEach(t),JVo=r(lke," \u2014 "),IV=n(lke,"A",{href:!0});var wut=s(IV);YVo=r(wut,"GPT2ForTokenClassification"),wut.forEach(t),KVo=r(lke," (OpenAI GPT-2 model)"),lke.forEach(t),ZVo=i(J),r2=n(J,"LI",{});var ike=s(r2);ape=n(ike,"STRONG",{});var Aut=s(ape);eXo=r(Aut,"ibert"),Aut.forEach(t),oXo=r(ike," \u2014 "),NV=n(ike,"A",{href:!0});var Lut=s(NV);rXo=r(Lut,"IBertForTokenClassification"),Lut.forEach(t),tXo=r(ike," (I-BERT model)"),ike.forEach(t),aXo=i(J),t2=n(J,"LI",{});var dke=s(t2);npe=n(dke,"STRONG",{});var yut=s(npe);nXo=r(yut,"layoutlm"),yut.forEach(t),sXo=r(dke," \u2014 "),qV=n(dke,"A",{href:!0});var xut=s(qV);lXo=r(xut,"LayoutLMForTokenClassification"),xut.forEach(t),iXo=r(dke," (LayoutLM model)"),dke.forEach(t),dXo=i(J),a2=n(J,"LI",{});var cke=s(a2);spe=n(cke,"STRONG",{});var $ut=s(spe);cXo=r($ut,"layoutlmv2"),$ut.forEach(t),fXo=r(cke," \u2014 "),jV=n(cke,"A",{href:!0});var kut=s(jV);mXo=r(kut,"LayoutLMv2ForTokenClassification"),kut.forEach(t),gXo=r(cke," (LayoutLMv2 model)"),cke.forEach(t),hXo=i(J),n2=n(J,"LI",{});var fke=s(n2);lpe=n(fke,"STRONG",{});var Sut=s(lpe);pXo=r(Sut,"layoutlmv3"),Sut.forEach(t),_Xo=r(fke," \u2014 "),DV=n(fke,"A",{href:!0});var Rut=s(DV);uXo=r(Rut,"LayoutLMv3ForTokenClassification"),Rut.forEach(t),bXo=r(fke," (LayoutLMv3 model)"),fke.forEach(t),vXo=i(J),s2=n(J,"LI",{});var mke=s(s2);ipe=n(mke,"STRONG",{});var Put=s(ipe);FXo=r(Put,"longformer"),Put.forEach(t),TXo=r(mke," \u2014 "),GV=n(mke,"A",{href:!0});var But=s(GV);MXo=r(But,"LongformerForTokenClassification"),But.forEach(t),EXo=r(mke," (Longformer model)"),mke.forEach(t),CXo=i(J),l2=n(J,"LI",{});var gke=s(l2);dpe=n(gke,"STRONG",{});var Iut=s(dpe);wXo=r(Iut,"megatron-bert"),Iut.forEach(t),AXo=r(gke," \u2014 "),OV=n(gke,"A",{href:!0});var Nut=s(OV);LXo=r(Nut,"MegatronBertForTokenClassification"),Nut.forEach(t),yXo=r(gke," (Megatron-BERT model)"),gke.forEach(t),xXo=i(J),i2=n(J,"LI",{});var hke=s(i2);cpe=n(hke,"STRONG",{});var qut=s(cpe);$Xo=r(qut,"mobilebert"),qut.forEach(t),kXo=r(hke," \u2014 "),VV=n(hke,"A",{href:!0});var jut=s(VV);SXo=r(jut,"MobileBertForTokenClassification"),jut.forEach(t),RXo=r(hke," (MobileBERT model)"),hke.forEach(t),PXo=i(J),d2=n(J,"LI",{});var pke=s(d2);fpe=n(pke,"STRONG",{});var Dut=s(fpe);BXo=r(Dut,"mpnet"),Dut.forEach(t),IXo=r(pke," \u2014 "),XV=n(pke,"A",{href:!0});var Gut=s(XV);NXo=r(Gut,"MPNetForTokenClassification"),Gut.forEach(t),qXo=r(pke," (MPNet model)"),pke.forEach(t),jXo=i(J),c2=n(J,"LI",{});var _ke=s(c2);mpe=n(_ke,"STRONG",{});var Out=s(mpe);DXo=r(Out,"nystromformer"),Out.forEach(t),GXo=r(_ke," \u2014 "),zV=n(_ke,"A",{href:!0});var Vut=s(zV);OXo=r(Vut,"NystromformerForTokenClassification"),Vut.forEach(t),VXo=r(_ke," (Nystr\xF6mformer model)"),_ke.forEach(t),XXo=i(J),f2=n(J,"LI",{});var uke=s(f2);gpe=n(uke,"STRONG",{});var Xut=s(gpe);zXo=r(Xut,"qdqbert"),Xut.forEach(t),WXo=r(uke," \u2014 "),WV=n(uke,"A",{href:!0});var zut=s(WV);QXo=r(zut,"QDQBertForTokenClassification"),zut.forEach(t),HXo=r(uke," (QDQBert model)"),uke.forEach(t),UXo=i(J),m2=n(J,"LI",{});var bke=s(m2);hpe=n(bke,"STRONG",{});var Wut=s(hpe);JXo=r(Wut,"rembert"),Wut.forEach(t),YXo=r(bke," \u2014 "),QV=n(bke,"A",{href:!0});var Qut=s(QV);KXo=r(Qut,"RemBertForTokenClassification"),Qut.forEach(t),ZXo=r(bke," (RemBERT model)"),bke.forEach(t),ezo=i(J),g2=n(J,"LI",{});var vke=s(g2);ppe=n(vke,"STRONG",{});var Hut=s(ppe);ozo=r(Hut,"roberta"),Hut.forEach(t),rzo=r(vke," \u2014 "),HV=n(vke,"A",{href:!0});var Uut=s(HV);tzo=r(Uut,"RobertaForTokenClassification"),Uut.forEach(t),azo=r(vke," (RoBERTa model)"),vke.forEach(t),nzo=i(J),h2=n(J,"LI",{});var Fke=s(h2);_pe=n(Fke,"STRONG",{});var Jut=s(_pe);szo=r(Jut,"roformer"),Jut.forEach(t),lzo=r(Fke," \u2014 "),UV=n(Fke,"A",{href:!0});var Yut=s(UV);izo=r(Yut,"RoFormerForTokenClassification"),Yut.forEach(t),dzo=r(Fke," (RoFormer model)"),Fke.forEach(t),czo=i(J),p2=n(J,"LI",{});var Tke=s(p2);upe=n(Tke,"STRONG",{});var Kut=s(upe);fzo=r(Kut,"squeezebert"),Kut.forEach(t),mzo=r(Tke," \u2014 "),JV=n(Tke,"A",{href:!0});var Zut=s(JV);gzo=r(Zut,"SqueezeBertForTokenClassification"),Zut.forEach(t),hzo=r(Tke," (SqueezeBERT model)"),Tke.forEach(t),pzo=i(J),_2=n(J,"LI",{});var Mke=s(_2);bpe=n(Mke,"STRONG",{});var e4t=s(bpe);_zo=r(e4t,"xlm"),e4t.forEach(t),uzo=r(Mke," \u2014 "),YV=n(Mke,"A",{href:!0});var o4t=s(YV);bzo=r(o4t,"XLMForTokenClassification"),o4t.forEach(t),vzo=r(Mke," (XLM model)"),Mke.forEach(t),Fzo=i(J),u2=n(J,"LI",{});var Eke=s(u2);vpe=n(Eke,"STRONG",{});var r4t=s(vpe);Tzo=r(r4t,"xlm-roberta"),r4t.forEach(t),Mzo=r(Eke," \u2014 "),KV=n(Eke,"A",{href:!0});var t4t=s(KV);Ezo=r(t4t,"XLMRobertaForTokenClassification"),t4t.forEach(t),Czo=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),wzo=i(J),b2=n(J,"LI",{});var Cke=s(b2);Fpe=n(Cke,"STRONG",{});var a4t=s(Fpe);Azo=r(a4t,"xlm-roberta-xl"),a4t.forEach(t),Lzo=r(Cke," \u2014 "),ZV=n(Cke,"A",{href:!0});var n4t=s(ZV);yzo=r(n4t,"XLMRobertaXLForTokenClassification"),n4t.forEach(t),xzo=r(Cke," (XLM-RoBERTa-XL model)"),Cke.forEach(t),$zo=i(J),v2=n(J,"LI",{});var wke=s(v2);Tpe=n(wke,"STRONG",{});var s4t=s(Tpe);kzo=r(s4t,"xlnet"),s4t.forEach(t),Szo=r(wke," \u2014 "),eX=n(wke,"A",{href:!0});var l4t=s(eX);Rzo=r(l4t,"XLNetForTokenClassification"),l4t.forEach(t),Pzo=r(wke," (XLNet model)"),wke.forEach(t),Bzo=i(J),F2=n(J,"LI",{});var Ake=s(F2);Mpe=n(Ake,"STRONG",{});var i4t=s(Mpe);Izo=r(i4t,"yoso"),i4t.forEach(t),Nzo=r(Ake," \u2014 "),oX=n(Ake,"A",{href:!0});var d4t=s(oX);qzo=r(d4t,"YosoForTokenClassification"),d4t.forEach(t),jzo=r(Ake," (YOSO model)"),Ake.forEach(t),J.forEach(t),Dzo=i(da),T2=n(da,"P",{});var Lke=s(T2);Gzo=r(Lke,"The model is set in evaluation mode by default using "),Epe=n(Lke,"CODE",{});var c4t=s(Epe);Ozo=r(c4t,"model.eval()"),c4t.forEach(t),Vzo=r(Lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(Lke,"CODE",{});var f4t=s(Cpe);Xzo=r(f4t,"model.train()"),f4t.forEach(t),Lke.forEach(t),zzo=i(da),T(M2.$$.fragment,da),da.forEach(t),Ys.forEach(t),Hje=i(f),Zi=n(f,"H2",{class:!0});var KGe=s(Zi);E2=n(KGe,"A",{id:!0,class:!0,href:!0});var m4t=s(E2);wpe=n(m4t,"SPAN",{});var g4t=s(wpe);T(iy.$$.fragment,g4t),g4t.forEach(t),m4t.forEach(t),Wzo=i(KGe),Ape=n(KGe,"SPAN",{});var h4t=s(Ape);Qzo=r(h4t,"AutoModelForQuestionAnswering"),h4t.forEach(t),KGe.forEach(t),Uje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(dy.$$.fragment,Ks),Hzo=i(Ks),ed=n(Ks,"P",{});var uee=s(ed);Uzo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rX=n(uee,"A",{href:!0});var p4t=s(rX);Jzo=r(p4t,"from_pretrained()"),p4t.forEach(t),Yzo=r(uee," class method or the "),tX=n(uee,"A",{href:!0});var _4t=s(tX);Kzo=r(_4t,"from_config()"),_4t.forEach(t),Zzo=r(uee,` class
method.`),uee.forEach(t),eWo=i(Ks),cy=n(Ks,"P",{});var ZGe=s(cy);oWo=r(ZGe,"This class cannot be instantiated directly using "),Lpe=n(ZGe,"CODE",{});var u4t=s(Lpe);rWo=r(u4t,"__init__()"),u4t.forEach(t),tWo=r(ZGe," (throws an error)."),ZGe.forEach(t),aWo=i(Ks),mt=n(Ks,"DIV",{class:!0});var gA=s(mt);T(fy.$$.fragment,gA),nWo=i(gA),ype=n(gA,"P",{});var b4t=s(ype);sWo=r(b4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),b4t.forEach(t),lWo=i(gA),od=n(gA,"P",{});var bee=s(od);iWo=r(bee,`Note:
Loading a model from its configuration file does `),xpe=n(bee,"STRONG",{});var v4t=s(xpe);dWo=r(v4t,"not"),v4t.forEach(t),cWo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(bee,"A",{href:!0});var F4t=s(aX);fWo=r(F4t,"from_pretrained()"),F4t.forEach(t),mWo=r(bee," to load the model weights."),bee.forEach(t),gWo=i(gA),T(C2.$$.fragment,gA),gA.forEach(t),hWo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(my.$$.fragment,ca),pWo=i(ca),$pe=n(ca,"P",{});var T4t=s($pe);_Wo=r(T4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),T4t.forEach(t),uWo=i(ca),Na=n(ca,"P",{});var hA=s(Na);bWo=r(hA,"The model class to instantiate is selected based on the "),kpe=n(hA,"CODE",{});var M4t=s(kpe);vWo=r(M4t,"model_type"),M4t.forEach(t),FWo=r(hA,` property of the config object (either
passed as an argument or loaded from `),Spe=n(hA,"CODE",{});var E4t=s(Spe);TWo=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),MWo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(hA,"CODE",{});var C4t=s(Rpe);EWo=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),CWo=r(hA,":"),hA.forEach(t),wWo=i(ca),V=n(ca,"UL",{});var X=s(V);w2=n(X,"LI",{});var yke=s(w2);Ppe=n(yke,"STRONG",{});var w4t=s(Ppe);AWo=r(w4t,"albert"),w4t.forEach(t),LWo=r(yke," \u2014 "),nX=n(yke,"A",{href:!0});var A4t=s(nX);yWo=r(A4t,"AlbertForQuestionAnswering"),A4t.forEach(t),xWo=r(yke," (ALBERT model)"),yke.forEach(t),$Wo=i(X),A2=n(X,"LI",{});var xke=s(A2);Bpe=n(xke,"STRONG",{});var L4t=s(Bpe);kWo=r(L4t,"bart"),L4t.forEach(t),SWo=r(xke," \u2014 "),sX=n(xke,"A",{href:!0});var y4t=s(sX);RWo=r(y4t,"BartForQuestionAnswering"),y4t.forEach(t),PWo=r(xke," (BART model)"),xke.forEach(t),BWo=i(X),L2=n(X,"LI",{});var $ke=s(L2);Ipe=n($ke,"STRONG",{});var x4t=s(Ipe);IWo=r(x4t,"bert"),x4t.forEach(t),NWo=r($ke," \u2014 "),lX=n($ke,"A",{href:!0});var $4t=s(lX);qWo=r($4t,"BertForQuestionAnswering"),$4t.forEach(t),jWo=r($ke," (BERT model)"),$ke.forEach(t),DWo=i(X),y2=n(X,"LI",{});var kke=s(y2);Npe=n(kke,"STRONG",{});var k4t=s(Npe);GWo=r(k4t,"big_bird"),k4t.forEach(t),OWo=r(kke," \u2014 "),iX=n(kke,"A",{href:!0});var S4t=s(iX);VWo=r(S4t,"BigBirdForQuestionAnswering"),S4t.forEach(t),XWo=r(kke," (BigBird model)"),kke.forEach(t),zWo=i(X),x2=n(X,"LI",{});var Ske=s(x2);qpe=n(Ske,"STRONG",{});var R4t=s(qpe);WWo=r(R4t,"bigbird_pegasus"),R4t.forEach(t),QWo=r(Ske," \u2014 "),dX=n(Ske,"A",{href:!0});var P4t=s(dX);HWo=r(P4t,"BigBirdPegasusForQuestionAnswering"),P4t.forEach(t),UWo=r(Ske," (BigBird-Pegasus model)"),Ske.forEach(t),JWo=i(X),$2=n(X,"LI",{});var Rke=s($2);jpe=n(Rke,"STRONG",{});var B4t=s(jpe);YWo=r(B4t,"camembert"),B4t.forEach(t),KWo=r(Rke," \u2014 "),cX=n(Rke,"A",{href:!0});var I4t=s(cX);ZWo=r(I4t,"CamembertForQuestionAnswering"),I4t.forEach(t),eQo=r(Rke," (CamemBERT model)"),Rke.forEach(t),oQo=i(X),k2=n(X,"LI",{});var Pke=s(k2);Dpe=n(Pke,"STRONG",{});var N4t=s(Dpe);rQo=r(N4t,"canine"),N4t.forEach(t),tQo=r(Pke," \u2014 "),fX=n(Pke,"A",{href:!0});var q4t=s(fX);aQo=r(q4t,"CanineForQuestionAnswering"),q4t.forEach(t),nQo=r(Pke," (CANINE model)"),Pke.forEach(t),sQo=i(X),S2=n(X,"LI",{});var Bke=s(S2);Gpe=n(Bke,"STRONG",{});var j4t=s(Gpe);lQo=r(j4t,"convbert"),j4t.forEach(t),iQo=r(Bke," \u2014 "),mX=n(Bke,"A",{href:!0});var D4t=s(mX);dQo=r(D4t,"ConvBertForQuestionAnswering"),D4t.forEach(t),cQo=r(Bke," (ConvBERT model)"),Bke.forEach(t),fQo=i(X),R2=n(X,"LI",{});var Ike=s(R2);Ope=n(Ike,"STRONG",{});var G4t=s(Ope);mQo=r(G4t,"data2vec-text"),G4t.forEach(t),gQo=r(Ike," \u2014 "),gX=n(Ike,"A",{href:!0});var O4t=s(gX);hQo=r(O4t,"Data2VecTextForQuestionAnswering"),O4t.forEach(t),pQo=r(Ike," (Data2VecText model)"),Ike.forEach(t),_Qo=i(X),P2=n(X,"LI",{});var Nke=s(P2);Vpe=n(Nke,"STRONG",{});var V4t=s(Vpe);uQo=r(V4t,"deberta"),V4t.forEach(t),bQo=r(Nke," \u2014 "),hX=n(Nke,"A",{href:!0});var X4t=s(hX);vQo=r(X4t,"DebertaForQuestionAnswering"),X4t.forEach(t),FQo=r(Nke," (DeBERTa model)"),Nke.forEach(t),TQo=i(X),B2=n(X,"LI",{});var qke=s(B2);Xpe=n(qke,"STRONG",{});var z4t=s(Xpe);MQo=r(z4t,"deberta-v2"),z4t.forEach(t),EQo=r(qke," \u2014 "),pX=n(qke,"A",{href:!0});var W4t=s(pX);CQo=r(W4t,"DebertaV2ForQuestionAnswering"),W4t.forEach(t),wQo=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),AQo=i(X),I2=n(X,"LI",{});var jke=s(I2);zpe=n(jke,"STRONG",{});var Q4t=s(zpe);LQo=r(Q4t,"distilbert"),Q4t.forEach(t),yQo=r(jke," \u2014 "),_X=n(jke,"A",{href:!0});var H4t=s(_X);xQo=r(H4t,"DistilBertForQuestionAnswering"),H4t.forEach(t),$Qo=r(jke," (DistilBERT model)"),jke.forEach(t),kQo=i(X),N2=n(X,"LI",{});var Dke=s(N2);Wpe=n(Dke,"STRONG",{});var U4t=s(Wpe);SQo=r(U4t,"electra"),U4t.forEach(t),RQo=r(Dke," \u2014 "),uX=n(Dke,"A",{href:!0});var J4t=s(uX);PQo=r(J4t,"ElectraForQuestionAnswering"),J4t.forEach(t),BQo=r(Dke," (ELECTRA model)"),Dke.forEach(t),IQo=i(X),q2=n(X,"LI",{});var Gke=s(q2);Qpe=n(Gke,"STRONG",{});var Y4t=s(Qpe);NQo=r(Y4t,"flaubert"),Y4t.forEach(t),qQo=r(Gke," \u2014 "),bX=n(Gke,"A",{href:!0});var K4t=s(bX);jQo=r(K4t,"FlaubertForQuestionAnsweringSimple"),K4t.forEach(t),DQo=r(Gke," (FlauBERT model)"),Gke.forEach(t),GQo=i(X),j2=n(X,"LI",{});var Oke=s(j2);Hpe=n(Oke,"STRONG",{});var Z4t=s(Hpe);OQo=r(Z4t,"fnet"),Z4t.forEach(t),VQo=r(Oke," \u2014 "),vX=n(Oke,"A",{href:!0});var e1t=s(vX);XQo=r(e1t,"FNetForQuestionAnswering"),e1t.forEach(t),zQo=r(Oke," (FNet model)"),Oke.forEach(t),WQo=i(X),D2=n(X,"LI",{});var Vke=s(D2);Upe=n(Vke,"STRONG",{});var o1t=s(Upe);QQo=r(o1t,"funnel"),o1t.forEach(t),HQo=r(Vke," \u2014 "),FX=n(Vke,"A",{href:!0});var r1t=s(FX);UQo=r(r1t,"FunnelForQuestionAnswering"),r1t.forEach(t),JQo=r(Vke," (Funnel Transformer model)"),Vke.forEach(t),YQo=i(X),G2=n(X,"LI",{});var Xke=s(G2);Jpe=n(Xke,"STRONG",{});var t1t=s(Jpe);KQo=r(t1t,"gptj"),t1t.forEach(t),ZQo=r(Xke," \u2014 "),TX=n(Xke,"A",{href:!0});var a1t=s(TX);eHo=r(a1t,"GPTJForQuestionAnswering"),a1t.forEach(t),oHo=r(Xke," (GPT-J model)"),Xke.forEach(t),rHo=i(X),O2=n(X,"LI",{});var zke=s(O2);Ype=n(zke,"STRONG",{});var n1t=s(Ype);tHo=r(n1t,"ibert"),n1t.forEach(t),aHo=r(zke," \u2014 "),MX=n(zke,"A",{href:!0});var s1t=s(MX);nHo=r(s1t,"IBertForQuestionAnswering"),s1t.forEach(t),sHo=r(zke," (I-BERT model)"),zke.forEach(t),lHo=i(X),V2=n(X,"LI",{});var Wke=s(V2);Kpe=n(Wke,"STRONG",{});var l1t=s(Kpe);iHo=r(l1t,"layoutlmv2"),l1t.forEach(t),dHo=r(Wke," \u2014 "),EX=n(Wke,"A",{href:!0});var i1t=s(EX);cHo=r(i1t,"LayoutLMv2ForQuestionAnswering"),i1t.forEach(t),fHo=r(Wke," (LayoutLMv2 model)"),Wke.forEach(t),mHo=i(X),X2=n(X,"LI",{});var Qke=s(X2);Zpe=n(Qke,"STRONG",{});var d1t=s(Zpe);gHo=r(d1t,"layoutlmv3"),d1t.forEach(t),hHo=r(Qke," \u2014 "),CX=n(Qke,"A",{href:!0});var c1t=s(CX);pHo=r(c1t,"LayoutLMv3ForQuestionAnswering"),c1t.forEach(t),_Ho=r(Qke," (LayoutLMv3 model)"),Qke.forEach(t),uHo=i(X),z2=n(X,"LI",{});var Hke=s(z2);e_e=n(Hke,"STRONG",{});var f1t=s(e_e);bHo=r(f1t,"led"),f1t.forEach(t),vHo=r(Hke," \u2014 "),wX=n(Hke,"A",{href:!0});var m1t=s(wX);FHo=r(m1t,"LEDForQuestionAnswering"),m1t.forEach(t),THo=r(Hke," (LED model)"),Hke.forEach(t),MHo=i(X),W2=n(X,"LI",{});var Uke=s(W2);o_e=n(Uke,"STRONG",{});var g1t=s(o_e);EHo=r(g1t,"longformer"),g1t.forEach(t),CHo=r(Uke," \u2014 "),AX=n(Uke,"A",{href:!0});var h1t=s(AX);wHo=r(h1t,"LongformerForQuestionAnswering"),h1t.forEach(t),AHo=r(Uke," (Longformer model)"),Uke.forEach(t),LHo=i(X),Q2=n(X,"LI",{});var Jke=s(Q2);r_e=n(Jke,"STRONG",{});var p1t=s(r_e);yHo=r(p1t,"lxmert"),p1t.forEach(t),xHo=r(Jke," \u2014 "),LX=n(Jke,"A",{href:!0});var _1t=s(LX);$Ho=r(_1t,"LxmertForQuestionAnswering"),_1t.forEach(t),kHo=r(Jke," (LXMERT model)"),Jke.forEach(t),SHo=i(X),H2=n(X,"LI",{});var Yke=s(H2);t_e=n(Yke,"STRONG",{});var u1t=s(t_e);RHo=r(u1t,"mbart"),u1t.forEach(t),PHo=r(Yke," \u2014 "),yX=n(Yke,"A",{href:!0});var b1t=s(yX);BHo=r(b1t,"MBartForQuestionAnswering"),b1t.forEach(t),IHo=r(Yke," (mBART model)"),Yke.forEach(t),NHo=i(X),U2=n(X,"LI",{});var Kke=s(U2);a_e=n(Kke,"STRONG",{});var v1t=s(a_e);qHo=r(v1t,"megatron-bert"),v1t.forEach(t),jHo=r(Kke," \u2014 "),xX=n(Kke,"A",{href:!0});var F1t=s(xX);DHo=r(F1t,"MegatronBertForQuestionAnswering"),F1t.forEach(t),GHo=r(Kke," (Megatron-BERT model)"),Kke.forEach(t),OHo=i(X),J2=n(X,"LI",{});var Zke=s(J2);n_e=n(Zke,"STRONG",{});var T1t=s(n_e);VHo=r(T1t,"mobilebert"),T1t.forEach(t),XHo=r(Zke," \u2014 "),$X=n(Zke,"A",{href:!0});var M1t=s($X);zHo=r(M1t,"MobileBertForQuestionAnswering"),M1t.forEach(t),WHo=r(Zke," (MobileBERT model)"),Zke.forEach(t),QHo=i(X),Y2=n(X,"LI",{});var eSe=s(Y2);s_e=n(eSe,"STRONG",{});var E1t=s(s_e);HHo=r(E1t,"mpnet"),E1t.forEach(t),UHo=r(eSe," \u2014 "),kX=n(eSe,"A",{href:!0});var C1t=s(kX);JHo=r(C1t,"MPNetForQuestionAnswering"),C1t.forEach(t),YHo=r(eSe," (MPNet model)"),eSe.forEach(t),KHo=i(X),K2=n(X,"LI",{});var oSe=s(K2);l_e=n(oSe,"STRONG",{});var w1t=s(l_e);ZHo=r(w1t,"nystromformer"),w1t.forEach(t),eUo=r(oSe," \u2014 "),SX=n(oSe,"A",{href:!0});var A1t=s(SX);oUo=r(A1t,"NystromformerForQuestionAnswering"),A1t.forEach(t),rUo=r(oSe," (Nystr\xF6mformer model)"),oSe.forEach(t),tUo=i(X),Z2=n(X,"LI",{});var rSe=s(Z2);i_e=n(rSe,"STRONG",{});var L1t=s(i_e);aUo=r(L1t,"qdqbert"),L1t.forEach(t),nUo=r(rSe," \u2014 "),RX=n(rSe,"A",{href:!0});var y1t=s(RX);sUo=r(y1t,"QDQBertForQuestionAnswering"),y1t.forEach(t),lUo=r(rSe," (QDQBert model)"),rSe.forEach(t),iUo=i(X),ev=n(X,"LI",{});var tSe=s(ev);d_e=n(tSe,"STRONG",{});var x1t=s(d_e);dUo=r(x1t,"reformer"),x1t.forEach(t),cUo=r(tSe," \u2014 "),PX=n(tSe,"A",{href:!0});var $1t=s(PX);fUo=r($1t,"ReformerForQuestionAnswering"),$1t.forEach(t),mUo=r(tSe," (Reformer model)"),tSe.forEach(t),gUo=i(X),ov=n(X,"LI",{});var aSe=s(ov);c_e=n(aSe,"STRONG",{});var k1t=s(c_e);hUo=r(k1t,"rembert"),k1t.forEach(t),pUo=r(aSe," \u2014 "),BX=n(aSe,"A",{href:!0});var S1t=s(BX);_Uo=r(S1t,"RemBertForQuestionAnswering"),S1t.forEach(t),uUo=r(aSe," (RemBERT model)"),aSe.forEach(t),bUo=i(X),rv=n(X,"LI",{});var nSe=s(rv);f_e=n(nSe,"STRONG",{});var R1t=s(f_e);vUo=r(R1t,"roberta"),R1t.forEach(t),FUo=r(nSe," \u2014 "),IX=n(nSe,"A",{href:!0});var P1t=s(IX);TUo=r(P1t,"RobertaForQuestionAnswering"),P1t.forEach(t),MUo=r(nSe," (RoBERTa model)"),nSe.forEach(t),EUo=i(X),tv=n(X,"LI",{});var sSe=s(tv);m_e=n(sSe,"STRONG",{});var B1t=s(m_e);CUo=r(B1t,"roformer"),B1t.forEach(t),wUo=r(sSe," \u2014 "),NX=n(sSe,"A",{href:!0});var I1t=s(NX);AUo=r(I1t,"RoFormerForQuestionAnswering"),I1t.forEach(t),LUo=r(sSe," (RoFormer model)"),sSe.forEach(t),yUo=i(X),av=n(X,"LI",{});var lSe=s(av);g_e=n(lSe,"STRONG",{});var N1t=s(g_e);xUo=r(N1t,"splinter"),N1t.forEach(t),$Uo=r(lSe," \u2014 "),qX=n(lSe,"A",{href:!0});var q1t=s(qX);kUo=r(q1t,"SplinterForQuestionAnswering"),q1t.forEach(t),SUo=r(lSe," (Splinter model)"),lSe.forEach(t),RUo=i(X),nv=n(X,"LI",{});var iSe=s(nv);h_e=n(iSe,"STRONG",{});var j1t=s(h_e);PUo=r(j1t,"squeezebert"),j1t.forEach(t),BUo=r(iSe," \u2014 "),jX=n(iSe,"A",{href:!0});var D1t=s(jX);IUo=r(D1t,"SqueezeBertForQuestionAnswering"),D1t.forEach(t),NUo=r(iSe," (SqueezeBERT model)"),iSe.forEach(t),qUo=i(X),sv=n(X,"LI",{});var dSe=s(sv);p_e=n(dSe,"STRONG",{});var G1t=s(p_e);jUo=r(G1t,"xlm"),G1t.forEach(t),DUo=r(dSe," \u2014 "),DX=n(dSe,"A",{href:!0});var O1t=s(DX);GUo=r(O1t,"XLMForQuestionAnsweringSimple"),O1t.forEach(t),OUo=r(dSe," (XLM model)"),dSe.forEach(t),VUo=i(X),lv=n(X,"LI",{});var cSe=s(lv);__e=n(cSe,"STRONG",{});var V1t=s(__e);XUo=r(V1t,"xlm-roberta"),V1t.forEach(t),zUo=r(cSe," \u2014 "),GX=n(cSe,"A",{href:!0});var X1t=s(GX);WUo=r(X1t,"XLMRobertaForQuestionAnswering"),X1t.forEach(t),QUo=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),HUo=i(X),iv=n(X,"LI",{});var fSe=s(iv);u_e=n(fSe,"STRONG",{});var z1t=s(u_e);UUo=r(z1t,"xlm-roberta-xl"),z1t.forEach(t),JUo=r(fSe," \u2014 "),OX=n(fSe,"A",{href:!0});var W1t=s(OX);YUo=r(W1t,"XLMRobertaXLForQuestionAnswering"),W1t.forEach(t),KUo=r(fSe," (XLM-RoBERTa-XL model)"),fSe.forEach(t),ZUo=i(X),dv=n(X,"LI",{});var mSe=s(dv);b_e=n(mSe,"STRONG",{});var Q1t=s(b_e);eJo=r(Q1t,"xlnet"),Q1t.forEach(t),oJo=r(mSe," \u2014 "),VX=n(mSe,"A",{href:!0});var H1t=s(VX);rJo=r(H1t,"XLNetForQuestionAnsweringSimple"),H1t.forEach(t),tJo=r(mSe," (XLNet model)"),mSe.forEach(t),aJo=i(X),cv=n(X,"LI",{});var gSe=s(cv);v_e=n(gSe,"STRONG",{});var U1t=s(v_e);nJo=r(U1t,"yoso"),U1t.forEach(t),sJo=r(gSe," \u2014 "),XX=n(gSe,"A",{href:!0});var J1t=s(XX);lJo=r(J1t,"YosoForQuestionAnswering"),J1t.forEach(t),iJo=r(gSe," (YOSO model)"),gSe.forEach(t),X.forEach(t),dJo=i(ca),fv=n(ca,"P",{});var hSe=s(fv);cJo=r(hSe,"The model is set in evaluation mode by default using "),F_e=n(hSe,"CODE",{});var Y1t=s(F_e);fJo=r(Y1t,"model.eval()"),Y1t.forEach(t),mJo=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(hSe,"CODE",{});var K1t=s(T_e);gJo=r(K1t,"model.train()"),K1t.forEach(t),hSe.forEach(t),hJo=i(ca),T(mv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),Jje=i(f),rd=n(f,"H2",{class:!0});var eOe=s(rd);gv=n(eOe,"A",{id:!0,class:!0,href:!0});var Z1t=s(gv);M_e=n(Z1t,"SPAN",{});var e7t=s(M_e);T(gy.$$.fragment,e7t),e7t.forEach(t),Z1t.forEach(t),pJo=i(eOe),E_e=n(eOe,"SPAN",{});var o7t=s(E_e);_Jo=r(o7t,"AutoModelForTableQuestionAnswering"),o7t.forEach(t),eOe.forEach(t),Yje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(hy.$$.fragment,Zs),uJo=i(Zs),td=n(Zs,"P",{});var vee=s(td);bJo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zX=n(vee,"A",{href:!0});var r7t=s(zX);vJo=r(r7t,"from_pretrained()"),r7t.forEach(t),FJo=r(vee," class method or the "),WX=n(vee,"A",{href:!0});var t7t=s(WX);TJo=r(t7t,"from_config()"),t7t.forEach(t),MJo=r(vee,` class
method.`),vee.forEach(t),EJo=i(Zs),py=n(Zs,"P",{});var oOe=s(py);CJo=r(oOe,"This class cannot be instantiated directly using "),C_e=n(oOe,"CODE",{});var a7t=s(C_e);wJo=r(a7t,"__init__()"),a7t.forEach(t),AJo=r(oOe," (throws an error)."),oOe.forEach(t),LJo=i(Zs),gt=n(Zs,"DIV",{class:!0});var pA=s(gt);T(_y.$$.fragment,pA),yJo=i(pA),w_e=n(pA,"P",{});var n7t=s(w_e);xJo=r(n7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n7t.forEach(t),$Jo=i(pA),ad=n(pA,"P",{});var Fee=s(ad);kJo=r(Fee,`Note:
Loading a model from its configuration file does `),A_e=n(Fee,"STRONG",{});var s7t=s(A_e);SJo=r(s7t,"not"),s7t.forEach(t),RJo=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(Fee,"A",{href:!0});var l7t=s(QX);PJo=r(l7t,"from_pretrained()"),l7t.forEach(t),BJo=r(Fee," to load the model weights."),Fee.forEach(t),IJo=i(pA),T(hv.$$.fragment,pA),pA.forEach(t),NJo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(uy.$$.fragment,fa),qJo=i(fa),L_e=n(fa,"P",{});var i7t=s(L_e);jJo=r(i7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),i7t.forEach(t),DJo=i(fa),qa=n(fa,"P",{});var _A=s(qa);GJo=r(_A,"The model class to instantiate is selected based on the "),y_e=n(_A,"CODE",{});var d7t=s(y_e);OJo=r(d7t,"model_type"),d7t.forEach(t),VJo=r(_A,` property of the config object (either
passed as an argument or loaded from `),x_e=n(_A,"CODE",{});var c7t=s(x_e);XJo=r(c7t,"pretrained_model_name_or_path"),c7t.forEach(t),zJo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(_A,"CODE",{});var f7t=s($_e);WJo=r(f7t,"pretrained_model_name_or_path"),f7t.forEach(t),QJo=r(_A,":"),_A.forEach(t),HJo=i(fa),k_e=n(fa,"UL",{});var m7t=s(k_e);pv=n(m7t,"LI",{});var pSe=s(pv);S_e=n(pSe,"STRONG",{});var g7t=s(S_e);UJo=r(g7t,"tapas"),g7t.forEach(t),JJo=r(pSe," \u2014 "),HX=n(pSe,"A",{href:!0});var h7t=s(HX);YJo=r(h7t,"TapasForQuestionAnswering"),h7t.forEach(t),KJo=r(pSe," (TAPAS model)"),pSe.forEach(t),m7t.forEach(t),ZJo=i(fa),_v=n(fa,"P",{});var _Se=s(_v);eYo=r(_Se,"The model is set in evaluation mode by default using "),R_e=n(_Se,"CODE",{});var p7t=s(R_e);oYo=r(p7t,"model.eval()"),p7t.forEach(t),rYo=r(_Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(_Se,"CODE",{});var _7t=s(P_e);tYo=r(_7t,"model.train()"),_7t.forEach(t),_Se.forEach(t),aYo=i(fa),T(uv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),Kje=i(f),nd=n(f,"H2",{class:!0});var rOe=s(nd);bv=n(rOe,"A",{id:!0,class:!0,href:!0});var u7t=s(bv);B_e=n(u7t,"SPAN",{});var b7t=s(B_e);T(by.$$.fragment,b7t),b7t.forEach(t),u7t.forEach(t),nYo=i(rOe),I_e=n(rOe,"SPAN",{});var v7t=s(I_e);sYo=r(v7t,"AutoModelForImageClassification"),v7t.forEach(t),rOe.forEach(t),Zje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(vy.$$.fragment,el),lYo=i(el),sd=n(el,"P",{});var Tee=s(sd);iYo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UX=n(Tee,"A",{href:!0});var F7t=s(UX);dYo=r(F7t,"from_pretrained()"),F7t.forEach(t),cYo=r(Tee," class method or the "),JX=n(Tee,"A",{href:!0});var T7t=s(JX);fYo=r(T7t,"from_config()"),T7t.forEach(t),mYo=r(Tee,` class
method.`),Tee.forEach(t),gYo=i(el),Fy=n(el,"P",{});var tOe=s(Fy);hYo=r(tOe,"This class cannot be instantiated directly using "),N_e=n(tOe,"CODE",{});var M7t=s(N_e);pYo=r(M7t,"__init__()"),M7t.forEach(t),_Yo=r(tOe," (throws an error)."),tOe.forEach(t),uYo=i(el),ht=n(el,"DIV",{class:!0});var uA=s(ht);T(Ty.$$.fragment,uA),bYo=i(uA),q_e=n(uA,"P",{});var E7t=s(q_e);vYo=r(E7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E7t.forEach(t),FYo=i(uA),ld=n(uA,"P",{});var Mee=s(ld);TYo=r(Mee,`Note:
Loading a model from its configuration file does `),j_e=n(Mee,"STRONG",{});var C7t=s(j_e);MYo=r(C7t,"not"),C7t.forEach(t),EYo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(Mee,"A",{href:!0});var w7t=s(YX);CYo=r(w7t,"from_pretrained()"),w7t.forEach(t),wYo=r(Mee," to load the model weights."),Mee.forEach(t),AYo=i(uA),T(vv.$$.fragment,uA),uA.forEach(t),LYo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(My.$$.fragment,ma),yYo=i(ma),D_e=n(ma,"P",{});var A7t=s(D_e);xYo=r(A7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A7t.forEach(t),$Yo=i(ma),ja=n(ma,"P",{});var bA=s(ja);kYo=r(bA,"The model class to instantiate is selected based on the "),G_e=n(bA,"CODE",{});var L7t=s(G_e);SYo=r(L7t,"model_type"),L7t.forEach(t),RYo=r(bA,` property of the config object (either
passed as an argument or loaded from `),O_e=n(bA,"CODE",{});var y7t=s(O_e);PYo=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),BYo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(bA,"CODE",{});var x7t=s(V_e);IYo=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),NYo=r(bA,":"),bA.forEach(t),qYo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);Fv=n(Te,"LI",{});var uSe=s(Fv);X_e=n(uSe,"STRONG",{});var $7t=s(X_e);jYo=r($7t,"beit"),$7t.forEach(t),DYo=r(uSe," \u2014 "),KX=n(uSe,"A",{href:!0});var k7t=s(KX);GYo=r(k7t,"BeitForImageClassification"),k7t.forEach(t),OYo=r(uSe," (BEiT model)"),uSe.forEach(t),VYo=i(Te),Tv=n(Te,"LI",{});var bSe=s(Tv);z_e=n(bSe,"STRONG",{});var S7t=s(z_e);XYo=r(S7t,"convnext"),S7t.forEach(t),zYo=r(bSe," \u2014 "),ZX=n(bSe,"A",{href:!0});var R7t=s(ZX);WYo=r(R7t,"ConvNextForImageClassification"),R7t.forEach(t),QYo=r(bSe," (ConvNeXT model)"),bSe.forEach(t),HYo=i(Te),Mv=n(Te,"LI",{});var vSe=s(Mv);W_e=n(vSe,"STRONG",{});var P7t=s(W_e);UYo=r(P7t,"cvt"),P7t.forEach(t),JYo=r(vSe," \u2014 "),ez=n(vSe,"A",{href:!0});var B7t=s(ez);YYo=r(B7t,"CvtForImageClassification"),B7t.forEach(t),KYo=r(vSe," (CvT model)"),vSe.forEach(t),ZYo=i(Te),Ev=n(Te,"LI",{});var FSe=s(Ev);Q_e=n(FSe,"STRONG",{});var I7t=s(Q_e);eKo=r(I7t,"data2vec-vision"),I7t.forEach(t),oKo=r(FSe," \u2014 "),oz=n(FSe,"A",{href:!0});var N7t=s(oz);rKo=r(N7t,"Data2VecVisionForImageClassification"),N7t.forEach(t),tKo=r(FSe," (Data2VecVision model)"),FSe.forEach(t),aKo=i(Te),Bs=n(Te,"LI",{});var lk=s(Bs);H_e=n(lk,"STRONG",{});var q7t=s(H_e);nKo=r(q7t,"deit"),q7t.forEach(t),sKo=r(lk," \u2014 "),rz=n(lk,"A",{href:!0});var j7t=s(rz);lKo=r(j7t,"DeiTForImageClassification"),j7t.forEach(t),iKo=r(lk," or "),tz=n(lk,"A",{href:!0});var D7t=s(tz);dKo=r(D7t,"DeiTForImageClassificationWithTeacher"),D7t.forEach(t),cKo=r(lk," (DeiT model)"),lk.forEach(t),fKo=i(Te),Cv=n(Te,"LI",{});var TSe=s(Cv);U_e=n(TSe,"STRONG",{});var G7t=s(U_e);mKo=r(G7t,"imagegpt"),G7t.forEach(t),gKo=r(TSe," \u2014 "),az=n(TSe,"A",{href:!0});var O7t=s(az);hKo=r(O7t,"ImageGPTForImageClassification"),O7t.forEach(t),pKo=r(TSe," (ImageGPT model)"),TSe.forEach(t),_Ko=i(Te),Is=n(Te,"LI",{});var ik=s(Is);J_e=n(ik,"STRONG",{});var V7t=s(J_e);uKo=r(V7t,"levit"),V7t.forEach(t),bKo=r(ik," \u2014 "),nz=n(ik,"A",{href:!0});var X7t=s(nz);vKo=r(X7t,"LevitForImageClassification"),X7t.forEach(t),FKo=r(ik," or "),sz=n(ik,"A",{href:!0});var z7t=s(sz);TKo=r(z7t,"LevitForImageClassificationWithTeacher"),z7t.forEach(t),MKo=r(ik," (LeViT model)"),ik.forEach(t),EKo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);Y_e=n(pf,"STRONG",{});var W7t=s(Y_e);CKo=r(W7t,"perceiver"),W7t.forEach(t),wKo=r(pf," \u2014 "),lz=n(pf,"A",{href:!0});var Q7t=s(lz);AKo=r(Q7t,"PerceiverForImageClassificationLearned"),Q7t.forEach(t),LKo=r(pf," or "),iz=n(pf,"A",{href:!0});var H7t=s(iz);yKo=r(H7t,"PerceiverForImageClassificationFourier"),H7t.forEach(t),xKo=r(pf," or "),dz=n(pf,"A",{href:!0});var U7t=s(dz);$Ko=r(U7t,"PerceiverForImageClassificationConvProcessing"),U7t.forEach(t),kKo=r(pf," (Perceiver model)"),pf.forEach(t),SKo=i(Te),wv=n(Te,"LI",{});var MSe=s(wv);K_e=n(MSe,"STRONG",{});var J7t=s(K_e);RKo=r(J7t,"poolformer"),J7t.forEach(t),PKo=r(MSe," \u2014 "),cz=n(MSe,"A",{href:!0});var Y7t=s(cz);BKo=r(Y7t,"PoolFormerForImageClassification"),Y7t.forEach(t),IKo=r(MSe," (PoolFormer model)"),MSe.forEach(t),NKo=i(Te),Av=n(Te,"LI",{});var ESe=s(Av);Z_e=n(ESe,"STRONG",{});var K7t=s(Z_e);qKo=r(K7t,"regnet"),K7t.forEach(t),jKo=r(ESe," \u2014 "),fz=n(ESe,"A",{href:!0});var Z7t=s(fz);DKo=r(Z7t,"RegNetForImageClassification"),Z7t.forEach(t),GKo=r(ESe," (RegNet model)"),ESe.forEach(t),OKo=i(Te),Lv=n(Te,"LI",{});var CSe=s(Lv);eue=n(CSe,"STRONG",{});var ebt=s(eue);VKo=r(ebt,"resnet"),ebt.forEach(t),XKo=r(CSe," \u2014 "),mz=n(CSe,"A",{href:!0});var obt=s(mz);zKo=r(obt,"ResNetForImageClassification"),obt.forEach(t),WKo=r(CSe," (ResNet model)"),CSe.forEach(t),QKo=i(Te),yv=n(Te,"LI",{});var wSe=s(yv);oue=n(wSe,"STRONG",{});var rbt=s(oue);HKo=r(rbt,"segformer"),rbt.forEach(t),UKo=r(wSe," \u2014 "),gz=n(wSe,"A",{href:!0});var tbt=s(gz);JKo=r(tbt,"SegformerForImageClassification"),tbt.forEach(t),YKo=r(wSe," (SegFormer model)"),wSe.forEach(t),KKo=i(Te),xv=n(Te,"LI",{});var ASe=s(xv);rue=n(ASe,"STRONG",{});var abt=s(rue);ZKo=r(abt,"swin"),abt.forEach(t),eZo=r(ASe," \u2014 "),hz=n(ASe,"A",{href:!0});var nbt=s(hz);oZo=r(nbt,"SwinForImageClassification"),nbt.forEach(t),rZo=r(ASe," (Swin Transformer model)"),ASe.forEach(t),tZo=i(Te),$v=n(Te,"LI",{});var LSe=s($v);tue=n(LSe,"STRONG",{});var sbt=s(tue);aZo=r(sbt,"van"),sbt.forEach(t),nZo=r(LSe," \u2014 "),pz=n(LSe,"A",{href:!0});var lbt=s(pz);sZo=r(lbt,"VanForImageClassification"),lbt.forEach(t),lZo=r(LSe," (VAN model)"),LSe.forEach(t),iZo=i(Te),kv=n(Te,"LI",{});var ySe=s(kv);aue=n(ySe,"STRONG",{});var ibt=s(aue);dZo=r(ibt,"vit"),ibt.forEach(t),cZo=r(ySe," \u2014 "),_z=n(ySe,"A",{href:!0});var dbt=s(_z);fZo=r(dbt,"ViTForImageClassification"),dbt.forEach(t),mZo=r(ySe," (ViT model)"),ySe.forEach(t),Te.forEach(t),gZo=i(ma),Sv=n(ma,"P",{});var xSe=s(Sv);hZo=r(xSe,"The model is set in evaluation mode by default using "),nue=n(xSe,"CODE",{});var cbt=s(nue);pZo=r(cbt,"model.eval()"),cbt.forEach(t),_Zo=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(xSe,"CODE",{});var fbt=s(sue);uZo=r(fbt,"model.train()"),fbt.forEach(t),xSe.forEach(t),bZo=i(ma),T(Rv.$$.fragment,ma),ma.forEach(t),el.forEach(t),eDe=i(f),id=n(f,"H2",{class:!0});var aOe=s(id);Pv=n(aOe,"A",{id:!0,class:!0,href:!0});var mbt=s(Pv);lue=n(mbt,"SPAN",{});var gbt=s(lue);T(Ey.$$.fragment,gbt),gbt.forEach(t),mbt.forEach(t),vZo=i(aOe),iue=n(aOe,"SPAN",{});var hbt=s(iue);FZo=r(hbt,"AutoModelForVision2Seq"),hbt.forEach(t),aOe.forEach(t),oDe=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(Cy.$$.fragment,ol),TZo=i(ol),dd=n(ol,"P",{});var Eee=s(dd);MZo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uz=n(Eee,"A",{href:!0});var pbt=s(uz);EZo=r(pbt,"from_pretrained()"),pbt.forEach(t),CZo=r(Eee," class method or the "),bz=n(Eee,"A",{href:!0});var _bt=s(bz);wZo=r(_bt,"from_config()"),_bt.forEach(t),AZo=r(Eee,` class
method.`),Eee.forEach(t),LZo=i(ol),wy=n(ol,"P",{});var nOe=s(wy);yZo=r(nOe,"This class cannot be instantiated directly using "),due=n(nOe,"CODE",{});var ubt=s(due);xZo=r(ubt,"__init__()"),ubt.forEach(t),$Zo=r(nOe," (throws an error)."),nOe.forEach(t),kZo=i(ol),_t=n(ol,"DIV",{class:!0});var vA=s(_t);T(Ay.$$.fragment,vA),SZo=i(vA),cue=n(vA,"P",{});var bbt=s(cue);RZo=r(bbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bbt.forEach(t),PZo=i(vA),cd=n(vA,"P",{});var Cee=s(cd);BZo=r(Cee,`Note:
Loading a model from its configuration file does `),fue=n(Cee,"STRONG",{});var vbt=s(fue);IZo=r(vbt,"not"),vbt.forEach(t),NZo=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(Cee,"A",{href:!0});var Fbt=s(vz);qZo=r(Fbt,"from_pretrained()"),Fbt.forEach(t),jZo=r(Cee," to load the model weights."),Cee.forEach(t),DZo=i(vA),T(Bv.$$.fragment,vA),vA.forEach(t),GZo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(Ly.$$.fragment,ga),OZo=i(ga),mue=n(ga,"P",{});var Tbt=s(mue);VZo=r(Tbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tbt.forEach(t),XZo=i(ga),Da=n(ga,"P",{});var FA=s(Da);zZo=r(FA,"The model class to instantiate is selected based on the "),gue=n(FA,"CODE",{});var Mbt=s(gue);WZo=r(Mbt,"model_type"),Mbt.forEach(t),QZo=r(FA,` property of the config object (either
passed as an argument or loaded from `),hue=n(FA,"CODE",{});var Ebt=s(hue);HZo=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),UZo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(FA,"CODE",{});var Cbt=s(pue);JZo=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),YZo=r(FA,":"),FA.forEach(t),KZo=i(ga),_ue=n(ga,"UL",{});var wbt=s(_ue);Iv=n(wbt,"LI",{});var $Se=s(Iv);uue=n($Se,"STRONG",{});var Abt=s(uue);ZZo=r(Abt,"vision-encoder-decoder"),Abt.forEach(t),eer=r($Se," \u2014 "),Fz=n($Se,"A",{href:!0});var Lbt=s(Fz);oer=r(Lbt,"VisionEncoderDecoderModel"),Lbt.forEach(t),rer=r($Se," (Vision Encoder decoder model)"),$Se.forEach(t),wbt.forEach(t),ter=i(ga),Nv=n(ga,"P",{});var kSe=s(Nv);aer=r(kSe,"The model is set in evaluation mode by default using "),bue=n(kSe,"CODE",{});var ybt=s(bue);ner=r(ybt,"model.eval()"),ybt.forEach(t),ser=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(kSe,"CODE",{});var xbt=s(vue);ler=r(xbt,"model.train()"),xbt.forEach(t),kSe.forEach(t),ier=i(ga),T(qv.$$.fragment,ga),ga.forEach(t),ol.forEach(t),rDe=i(f),fd=n(f,"H2",{class:!0});var sOe=s(fd);jv=n(sOe,"A",{id:!0,class:!0,href:!0});var $bt=s(jv);Fue=n($bt,"SPAN",{});var kbt=s(Fue);T(yy.$$.fragment,kbt),kbt.forEach(t),$bt.forEach(t),der=i(sOe),Tue=n(sOe,"SPAN",{});var Sbt=s(Tue);cer=r(Sbt,"AutoModelForAudioClassification"),Sbt.forEach(t),sOe.forEach(t),tDe=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(xy.$$.fragment,rl),fer=i(rl),md=n(rl,"P",{});var wee=s(md);mer=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tz=n(wee,"A",{href:!0});var Rbt=s(Tz);ger=r(Rbt,"from_pretrained()"),Rbt.forEach(t),her=r(wee," class method or the "),Mz=n(wee,"A",{href:!0});var Pbt=s(Mz);per=r(Pbt,"from_config()"),Pbt.forEach(t),_er=r(wee,` class
method.`),wee.forEach(t),uer=i(rl),$y=n(rl,"P",{});var lOe=s($y);ber=r(lOe,"This class cannot be instantiated directly using "),Mue=n(lOe,"CODE",{});var Bbt=s(Mue);ver=r(Bbt,"__init__()"),Bbt.forEach(t),Fer=r(lOe," (throws an error)."),lOe.forEach(t),Ter=i(rl),ut=n(rl,"DIV",{class:!0});var TA=s(ut);T(ky.$$.fragment,TA),Mer=i(TA),Eue=n(TA,"P",{});var Ibt=s(Eue);Eer=r(Ibt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ibt.forEach(t),Cer=i(TA),gd=n(TA,"P",{});var Aee=s(gd);wer=r(Aee,`Note:
Loading a model from its configuration file does `),Cue=n(Aee,"STRONG",{});var Nbt=s(Cue);Aer=r(Nbt,"not"),Nbt.forEach(t),Ler=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(Aee,"A",{href:!0});var qbt=s(Ez);yer=r(qbt,"from_pretrained()"),qbt.forEach(t),xer=r(Aee," to load the model weights."),Aee.forEach(t),$er=i(TA),T(Dv.$$.fragment,TA),TA.forEach(t),ker=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Sy.$$.fragment,ha),Ser=i(ha),wue=n(ha,"P",{});var jbt=s(wue);Rer=r(jbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jbt.forEach(t),Per=i(ha),Ga=n(ha,"P",{});var MA=s(Ga);Ber=r(MA,"The model class to instantiate is selected based on the "),Aue=n(MA,"CODE",{});var Dbt=s(Aue);Ier=r(Dbt,"model_type"),Dbt.forEach(t),Ner=r(MA,` property of the config object (either
passed as an argument or loaded from `),Lue=n(MA,"CODE",{});var Gbt=s(Lue);qer=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),jer=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(MA,"CODE",{});var Obt=s(yue);Der=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),Ger=r(MA,":"),MA.forEach(t),Oer=i(ha),Re=n(ha,"UL",{});var Xe=s(Re);Gv=n(Xe,"LI",{});var SSe=s(Gv);xue=n(SSe,"STRONG",{});var Vbt=s(xue);Ver=r(Vbt,"data2vec-audio"),Vbt.forEach(t),Xer=r(SSe," \u2014 "),Cz=n(SSe,"A",{href:!0});var Xbt=s(Cz);zer=r(Xbt,"Data2VecAudioForSequenceClassification"),Xbt.forEach(t),Wer=r(SSe," (Data2VecAudio model)"),SSe.forEach(t),Qer=i(Xe),Ov=n(Xe,"LI",{});var RSe=s(Ov);$ue=n(RSe,"STRONG",{});var zbt=s($ue);Her=r(zbt,"hubert"),zbt.forEach(t),Uer=r(RSe," \u2014 "),wz=n(RSe,"A",{href:!0});var Wbt=s(wz);Jer=r(Wbt,"HubertForSequenceClassification"),Wbt.forEach(t),Yer=r(RSe," (Hubert model)"),RSe.forEach(t),Ker=i(Xe),Vv=n(Xe,"LI",{});var PSe=s(Vv);kue=n(PSe,"STRONG",{});var Qbt=s(kue);Zer=r(Qbt,"sew"),Qbt.forEach(t),eor=r(PSe," \u2014 "),Az=n(PSe,"A",{href:!0});var Hbt=s(Az);oor=r(Hbt,"SEWForSequenceClassification"),Hbt.forEach(t),ror=r(PSe," (SEW model)"),PSe.forEach(t),tor=i(Xe),Xv=n(Xe,"LI",{});var BSe=s(Xv);Sue=n(BSe,"STRONG",{});var Ubt=s(Sue);aor=r(Ubt,"sew-d"),Ubt.forEach(t),nor=r(BSe," \u2014 "),Lz=n(BSe,"A",{href:!0});var Jbt=s(Lz);sor=r(Jbt,"SEWDForSequenceClassification"),Jbt.forEach(t),lor=r(BSe," (SEW-D model)"),BSe.forEach(t),ior=i(Xe),zv=n(Xe,"LI",{});var ISe=s(zv);Rue=n(ISe,"STRONG",{});var Ybt=s(Rue);dor=r(Ybt,"unispeech"),Ybt.forEach(t),cor=r(ISe," \u2014 "),yz=n(ISe,"A",{href:!0});var Kbt=s(yz);mor=r(Kbt,"UniSpeechForSequenceClassification"),Kbt.forEach(t),gor=r(ISe," (UniSpeech model)"),ISe.forEach(t),hor=i(Xe),Wv=n(Xe,"LI",{});var NSe=s(Wv);Pue=n(NSe,"STRONG",{});var Zbt=s(Pue);por=r(Zbt,"unispeech-sat"),Zbt.forEach(t),_or=r(NSe," \u2014 "),xz=n(NSe,"A",{href:!0});var e2t=s(xz);uor=r(e2t,"UniSpeechSatForSequenceClassification"),e2t.forEach(t),bor=r(NSe," (UniSpeechSat model)"),NSe.forEach(t),vor=i(Xe),Qv=n(Xe,"LI",{});var qSe=s(Qv);Bue=n(qSe,"STRONG",{});var o2t=s(Bue);For=r(o2t,"wav2vec2"),o2t.forEach(t),Tor=r(qSe," \u2014 "),$z=n(qSe,"A",{href:!0});var r2t=s($z);Mor=r(r2t,"Wav2Vec2ForSequenceClassification"),r2t.forEach(t),Eor=r(qSe," (Wav2Vec2 model)"),qSe.forEach(t),Cor=i(Xe),Hv=n(Xe,"LI",{});var jSe=s(Hv);Iue=n(jSe,"STRONG",{});var t2t=s(Iue);wor=r(t2t,"wav2vec2-conformer"),t2t.forEach(t),Aor=r(jSe," \u2014 "),kz=n(jSe,"A",{href:!0});var a2t=s(kz);Lor=r(a2t,"Wav2Vec2ConformerForSequenceClassification"),a2t.forEach(t),yor=r(jSe," (Wav2Vec2-Conformer model)"),jSe.forEach(t),xor=i(Xe),Uv=n(Xe,"LI",{});var DSe=s(Uv);Nue=n(DSe,"STRONG",{});var n2t=s(Nue);$or=r(n2t,"wavlm"),n2t.forEach(t),kor=r(DSe," \u2014 "),Sz=n(DSe,"A",{href:!0});var s2t=s(Sz);Sor=r(s2t,"WavLMForSequenceClassification"),s2t.forEach(t),Ror=r(DSe," (WavLM model)"),DSe.forEach(t),Xe.forEach(t),Por=i(ha),Jv=n(ha,"P",{});var GSe=s(Jv);Bor=r(GSe,"The model is set in evaluation mode by default using "),que=n(GSe,"CODE",{});var l2t=s(que);Ior=r(l2t,"model.eval()"),l2t.forEach(t),Nor=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(GSe,"CODE",{});var i2t=s(jue);qor=r(i2t,"model.train()"),i2t.forEach(t),GSe.forEach(t),jor=i(ha),T(Yv.$$.fragment,ha),ha.forEach(t),rl.forEach(t),aDe=i(f),hd=n(f,"H2",{class:!0});var iOe=s(hd);Kv=n(iOe,"A",{id:!0,class:!0,href:!0});var d2t=s(Kv);Due=n(d2t,"SPAN",{});var c2t=s(Due);T(Ry.$$.fragment,c2t),c2t.forEach(t),d2t.forEach(t),Dor=i(iOe),Gue=n(iOe,"SPAN",{});var f2t=s(Gue);Gor=r(f2t,"AutoModelForAudioFrameClassification"),f2t.forEach(t),iOe.forEach(t),nDe=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(Py.$$.fragment,tl),Oor=i(tl),pd=n(tl,"P",{});var Lee=s(pd);Vor=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Rz=n(Lee,"A",{href:!0});var m2t=s(Rz);Xor=r(m2t,"from_pretrained()"),m2t.forEach(t),zor=r(Lee," class method or the "),Pz=n(Lee,"A",{href:!0});var g2t=s(Pz);Wor=r(g2t,"from_config()"),g2t.forEach(t),Qor=r(Lee,` class
method.`),Lee.forEach(t),Hor=i(tl),By=n(tl,"P",{});var dOe=s(By);Uor=r(dOe,"This class cannot be instantiated directly using "),Oue=n(dOe,"CODE",{});var h2t=s(Oue);Jor=r(h2t,"__init__()"),h2t.forEach(t),Yor=r(dOe," (throws an error)."),dOe.forEach(t),Kor=i(tl),bt=n(tl,"DIV",{class:!0});var EA=s(bt);T(Iy.$$.fragment,EA),Zor=i(EA),Vue=n(EA,"P",{});var p2t=s(Vue);err=r(p2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),p2t.forEach(t),orr=i(EA),_d=n(EA,"P",{});var yee=s(_d);rrr=r(yee,`Note:
Loading a model from its configuration file does `),Xue=n(yee,"STRONG",{});var _2t=s(Xue);trr=r(_2t,"not"),_2t.forEach(t),arr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(yee,"A",{href:!0});var u2t=s(Bz);nrr=r(u2t,"from_pretrained()"),u2t.forEach(t),srr=r(yee," to load the model weights."),yee.forEach(t),lrr=i(EA),T(Zv.$$.fragment,EA),EA.forEach(t),irr=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Ny.$$.fragment,pa),drr=i(pa),zue=n(pa,"P",{});var b2t=s(zue);crr=r(b2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),b2t.forEach(t),frr=i(pa),Oa=n(pa,"P",{});var CA=s(Oa);mrr=r(CA,"The model class to instantiate is selected based on the "),Wue=n(CA,"CODE",{});var v2t=s(Wue);grr=r(v2t,"model_type"),v2t.forEach(t),hrr=r(CA,` property of the config object (either
passed as an argument or loaded from `),Que=n(CA,"CODE",{});var F2t=s(Que);prr=r(F2t,"pretrained_model_name_or_path"),F2t.forEach(t),_rr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(CA,"CODE",{});var T2t=s(Hue);urr=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),brr=r(CA,":"),CA.forEach(t),vrr=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);eF=n(al,"LI",{});var OSe=s(eF);Uue=n(OSe,"STRONG",{});var M2t=s(Uue);Frr=r(M2t,"data2vec-audio"),M2t.forEach(t),Trr=r(OSe," \u2014 "),Iz=n(OSe,"A",{href:!0});var E2t=s(Iz);Mrr=r(E2t,"Data2VecAudioForAudioFrameClassification"),E2t.forEach(t),Err=r(OSe," (Data2VecAudio model)"),OSe.forEach(t),Crr=i(al),oF=n(al,"LI",{});var VSe=s(oF);Jue=n(VSe,"STRONG",{});var C2t=s(Jue);wrr=r(C2t,"unispeech-sat"),C2t.forEach(t),Arr=r(VSe," \u2014 "),Nz=n(VSe,"A",{href:!0});var w2t=s(Nz);Lrr=r(w2t,"UniSpeechSatForAudioFrameClassification"),w2t.forEach(t),yrr=r(VSe," (UniSpeechSat model)"),VSe.forEach(t),xrr=i(al),rF=n(al,"LI",{});var XSe=s(rF);Yue=n(XSe,"STRONG",{});var A2t=s(Yue);$rr=r(A2t,"wav2vec2"),A2t.forEach(t),krr=r(XSe," \u2014 "),qz=n(XSe,"A",{href:!0});var L2t=s(qz);Srr=r(L2t,"Wav2Vec2ForAudioFrameClassification"),L2t.forEach(t),Rrr=r(XSe," (Wav2Vec2 model)"),XSe.forEach(t),Prr=i(al),tF=n(al,"LI",{});var zSe=s(tF);Kue=n(zSe,"STRONG",{});var y2t=s(Kue);Brr=r(y2t,"wav2vec2-conformer"),y2t.forEach(t),Irr=r(zSe," \u2014 "),jz=n(zSe,"A",{href:!0});var x2t=s(jz);Nrr=r(x2t,"Wav2Vec2ConformerForAudioFrameClassification"),x2t.forEach(t),qrr=r(zSe," (Wav2Vec2-Conformer model)"),zSe.forEach(t),jrr=i(al),aF=n(al,"LI",{});var WSe=s(aF);Zue=n(WSe,"STRONG",{});var $2t=s(Zue);Drr=r($2t,"wavlm"),$2t.forEach(t),Grr=r(WSe," \u2014 "),Dz=n(WSe,"A",{href:!0});var k2t=s(Dz);Orr=r(k2t,"WavLMForAudioFrameClassification"),k2t.forEach(t),Vrr=r(WSe," (WavLM model)"),WSe.forEach(t),al.forEach(t),Xrr=i(pa),nF=n(pa,"P",{});var QSe=s(nF);zrr=r(QSe,"The model is set in evaluation mode by default using "),e4e=n(QSe,"CODE",{});var S2t=s(e4e);Wrr=r(S2t,"model.eval()"),S2t.forEach(t),Qrr=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o4e=n(QSe,"CODE",{});var R2t=s(o4e);Hrr=r(R2t,"model.train()"),R2t.forEach(t),QSe.forEach(t),Urr=i(pa),T(sF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),sDe=i(f),ud=n(f,"H2",{class:!0});var cOe=s(ud);lF=n(cOe,"A",{id:!0,class:!0,href:!0});var P2t=s(lF);r4e=n(P2t,"SPAN",{});var B2t=s(r4e);T(qy.$$.fragment,B2t),B2t.forEach(t),P2t.forEach(t),Jrr=i(cOe),t4e=n(cOe,"SPAN",{});var I2t=s(t4e);Yrr=r(I2t,"AutoModelForCTC"),I2t.forEach(t),cOe.forEach(t),lDe=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(jy.$$.fragment,nl),Krr=i(nl),bd=n(nl,"P",{});var xee=s(bd);Zrr=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Gz=n(xee,"A",{href:!0});var N2t=s(Gz);etr=r(N2t,"from_pretrained()"),N2t.forEach(t),otr=r(xee," class method or the "),Oz=n(xee,"A",{href:!0});var q2t=s(Oz);rtr=r(q2t,"from_config()"),q2t.forEach(t),ttr=r(xee,` class
method.`),xee.forEach(t),atr=i(nl),Dy=n(nl,"P",{});var fOe=s(Dy);ntr=r(fOe,"This class cannot be instantiated directly using "),a4e=n(fOe,"CODE",{});var j2t=s(a4e);str=r(j2t,"__init__()"),j2t.forEach(t),ltr=r(fOe," (throws an error)."),fOe.forEach(t),itr=i(nl),vt=n(nl,"DIV",{class:!0});var wA=s(vt);T(Gy.$$.fragment,wA),dtr=i(wA),n4e=n(wA,"P",{});var D2t=s(n4e);ctr=r(D2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),D2t.forEach(t),ftr=i(wA),vd=n(wA,"P",{});var $ee=s(vd);mtr=r($ee,`Note:
Loading a model from its configuration file does `),s4e=n($ee,"STRONG",{});var G2t=s(s4e);gtr=r(G2t,"not"),G2t.forEach(t),htr=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n($ee,"A",{href:!0});var O2t=s(Vz);ptr=r(O2t,"from_pretrained()"),O2t.forEach(t),_tr=r($ee," to load the model weights."),$ee.forEach(t),utr=i(wA),T(iF.$$.fragment,wA),wA.forEach(t),btr=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(Oy.$$.fragment,_a),vtr=i(_a),l4e=n(_a,"P",{});var V2t=s(l4e);Ftr=r(V2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),V2t.forEach(t),Ttr=i(_a),Va=n(_a,"P",{});var AA=s(Va);Mtr=r(AA,"The model class to instantiate is selected based on the "),i4e=n(AA,"CODE",{});var X2t=s(i4e);Etr=r(X2t,"model_type"),X2t.forEach(t),Ctr=r(AA,` property of the config object (either
passed as an argument or loaded from `),d4e=n(AA,"CODE",{});var z2t=s(d4e);wtr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),Atr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(AA,"CODE",{});var W2t=s(c4e);Ltr=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),ytr=r(AA,":"),AA.forEach(t),xtr=i(_a),Le=n(_a,"UL",{});var Be=s(Le);dF=n(Be,"LI",{});var HSe=s(dF);f4e=n(HSe,"STRONG",{});var Q2t=s(f4e);$tr=r(Q2t,"data2vec-audio"),Q2t.forEach(t),ktr=r(HSe," \u2014 "),Xz=n(HSe,"A",{href:!0});var H2t=s(Xz);Str=r(H2t,"Data2VecAudioForCTC"),H2t.forEach(t),Rtr=r(HSe," (Data2VecAudio model)"),HSe.forEach(t),Ptr=i(Be),cF=n(Be,"LI",{});var USe=s(cF);m4e=n(USe,"STRONG",{});var U2t=s(m4e);Btr=r(U2t,"hubert"),U2t.forEach(t),Itr=r(USe," \u2014 "),zz=n(USe,"A",{href:!0});var J2t=s(zz);Ntr=r(J2t,"HubertForCTC"),J2t.forEach(t),qtr=r(USe," (Hubert model)"),USe.forEach(t),jtr=i(Be),fF=n(Be,"LI",{});var JSe=s(fF);g4e=n(JSe,"STRONG",{});var Y2t=s(g4e);Dtr=r(Y2t,"mctct"),Y2t.forEach(t),Gtr=r(JSe," \u2014 "),Wz=n(JSe,"A",{href:!0});var K2t=s(Wz);Otr=r(K2t,"MCTCTForCTC"),K2t.forEach(t),Vtr=r(JSe," (M-CTC-T model)"),JSe.forEach(t),Xtr=i(Be),mF=n(Be,"LI",{});var YSe=s(mF);h4e=n(YSe,"STRONG",{});var Z2t=s(h4e);ztr=r(Z2t,"sew"),Z2t.forEach(t),Wtr=r(YSe," \u2014 "),Qz=n(YSe,"A",{href:!0});var evt=s(Qz);Qtr=r(evt,"SEWForCTC"),evt.forEach(t),Htr=r(YSe," (SEW model)"),YSe.forEach(t),Utr=i(Be),gF=n(Be,"LI",{});var KSe=s(gF);p4e=n(KSe,"STRONG",{});var ovt=s(p4e);Jtr=r(ovt,"sew-d"),ovt.forEach(t),Ytr=r(KSe," \u2014 "),Hz=n(KSe,"A",{href:!0});var rvt=s(Hz);Ktr=r(rvt,"SEWDForCTC"),rvt.forEach(t),Ztr=r(KSe," (SEW-D model)"),KSe.forEach(t),ear=i(Be),hF=n(Be,"LI",{});var ZSe=s(hF);_4e=n(ZSe,"STRONG",{});var tvt=s(_4e);oar=r(tvt,"unispeech"),tvt.forEach(t),rar=r(ZSe," \u2014 "),Uz=n(ZSe,"A",{href:!0});var avt=s(Uz);tar=r(avt,"UniSpeechForCTC"),avt.forEach(t),aar=r(ZSe," (UniSpeech model)"),ZSe.forEach(t),nar=i(Be),pF=n(Be,"LI",{});var eRe=s(pF);u4e=n(eRe,"STRONG",{});var nvt=s(u4e);sar=r(nvt,"unispeech-sat"),nvt.forEach(t),lar=r(eRe," \u2014 "),Jz=n(eRe,"A",{href:!0});var svt=s(Jz);iar=r(svt,"UniSpeechSatForCTC"),svt.forEach(t),dar=r(eRe," (UniSpeechSat model)"),eRe.forEach(t),car=i(Be),_F=n(Be,"LI",{});var oRe=s(_F);b4e=n(oRe,"STRONG",{});var lvt=s(b4e);far=r(lvt,"wav2vec2"),lvt.forEach(t),mar=r(oRe," \u2014 "),Yz=n(oRe,"A",{href:!0});var ivt=s(Yz);gar=r(ivt,"Wav2Vec2ForCTC"),ivt.forEach(t),har=r(oRe," (Wav2Vec2 model)"),oRe.forEach(t),par=i(Be),uF=n(Be,"LI",{});var rRe=s(uF);v4e=n(rRe,"STRONG",{});var dvt=s(v4e);_ar=r(dvt,"wav2vec2-conformer"),dvt.forEach(t),uar=r(rRe," \u2014 "),Kz=n(rRe,"A",{href:!0});var cvt=s(Kz);bar=r(cvt,"Wav2Vec2ConformerForCTC"),cvt.forEach(t),Far=r(rRe," (Wav2Vec2-Conformer model)"),rRe.forEach(t),Tar=i(Be),bF=n(Be,"LI",{});var tRe=s(bF);F4e=n(tRe,"STRONG",{});var fvt=s(F4e);Mar=r(fvt,"wavlm"),fvt.forEach(t),Ear=r(tRe," \u2014 "),Zz=n(tRe,"A",{href:!0});var mvt=s(Zz);Car=r(mvt,"WavLMForCTC"),mvt.forEach(t),war=r(tRe," (WavLM model)"),tRe.forEach(t),Be.forEach(t),Aar=i(_a),vF=n(_a,"P",{});var aRe=s(vF);Lar=r(aRe,"The model is set in evaluation mode by default using "),T4e=n(aRe,"CODE",{});var gvt=s(T4e);yar=r(gvt,"model.eval()"),gvt.forEach(t),xar=r(aRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=n(aRe,"CODE",{});var hvt=s(M4e);$ar=r(hvt,"model.train()"),hvt.forEach(t),aRe.forEach(t),kar=i(_a),T(FF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),iDe=i(f),Fd=n(f,"H2",{class:!0});var mOe=s(Fd);TF=n(mOe,"A",{id:!0,class:!0,href:!0});var pvt=s(TF);E4e=n(pvt,"SPAN",{});var _vt=s(E4e);T(Vy.$$.fragment,_vt),_vt.forEach(t),pvt.forEach(t),Sar=i(mOe),C4e=n(mOe,"SPAN",{});var uvt=s(C4e);Rar=r(uvt,"AutoModelForSpeechSeq2Seq"),uvt.forEach(t),mOe.forEach(t),dDe=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(Xy.$$.fragment,sl),Par=i(sl),Td=n(sl,"P",{});var kee=s(Td);Bar=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eW=n(kee,"A",{href:!0});var bvt=s(eW);Iar=r(bvt,"from_pretrained()"),bvt.forEach(t),Nar=r(kee," class method or the "),oW=n(kee,"A",{href:!0});var vvt=s(oW);qar=r(vvt,"from_config()"),vvt.forEach(t),jar=r(kee,` class
method.`),kee.forEach(t),Dar=i(sl),zy=n(sl,"P",{});var gOe=s(zy);Gar=r(gOe,"This class cannot be instantiated directly using "),w4e=n(gOe,"CODE",{});var Fvt=s(w4e);Oar=r(Fvt,"__init__()"),Fvt.forEach(t),Var=r(gOe," (throws an error)."),gOe.forEach(t),Xar=i(sl),Ft=n(sl,"DIV",{class:!0});var LA=s(Ft);T(Wy.$$.fragment,LA),zar=i(LA),A4e=n(LA,"P",{});var Tvt=s(A4e);War=r(Tvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tvt.forEach(t),Qar=i(LA),Md=n(LA,"P",{});var See=s(Md);Har=r(See,`Note:
Loading a model from its configuration file does `),L4e=n(See,"STRONG",{});var Mvt=s(L4e);Uar=r(Mvt,"not"),Mvt.forEach(t),Jar=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(See,"A",{href:!0});var Evt=s(rW);Yar=r(Evt,"from_pretrained()"),Evt.forEach(t),Kar=r(See," to load the model weights."),See.forEach(t),Zar=i(LA),T(MF.$$.fragment,LA),LA.forEach(t),enr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(Qy.$$.fragment,ua),onr=i(ua),y4e=n(ua,"P",{});var Cvt=s(y4e);rnr=r(Cvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cvt.forEach(t),tnr=i(ua),Xa=n(ua,"P",{});var yA=s(Xa);anr=r(yA,"The model class to instantiate is selected based on the "),x4e=n(yA,"CODE",{});var wvt=s(x4e);nnr=r(wvt,"model_type"),wvt.forEach(t),snr=r(yA,` property of the config object (either
passed as an argument or loaded from `),$4e=n(yA,"CODE",{});var Avt=s($4e);lnr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),inr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(yA,"CODE",{});var Lvt=s(k4e);dnr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),cnr=r(yA,":"),yA.forEach(t),fnr=i(ua),Hy=n(ua,"UL",{});var hOe=s(Hy);EF=n(hOe,"LI",{});var nRe=s(EF);S4e=n(nRe,"STRONG",{});var yvt=s(S4e);mnr=r(yvt,"speech-encoder-decoder"),yvt.forEach(t),gnr=r(nRe," \u2014 "),tW=n(nRe,"A",{href:!0});var xvt=s(tW);hnr=r(xvt,"SpeechEncoderDecoderModel"),xvt.forEach(t),pnr=r(nRe," (Speech Encoder decoder model)"),nRe.forEach(t),_nr=i(hOe),CF=n(hOe,"LI",{});var sRe=s(CF);R4e=n(sRe,"STRONG",{});var $vt=s(R4e);unr=r($vt,"speech_to_text"),$vt.forEach(t),bnr=r(sRe," \u2014 "),aW=n(sRe,"A",{href:!0});var kvt=s(aW);vnr=r(kvt,"Speech2TextForConditionalGeneration"),kvt.forEach(t),Fnr=r(sRe," (Speech2Text model)"),sRe.forEach(t),hOe.forEach(t),Tnr=i(ua),wF=n(ua,"P",{});var lRe=s(wF);Mnr=r(lRe,"The model is set in evaluation mode by default using "),P4e=n(lRe,"CODE",{});var Svt=s(P4e);Enr=r(Svt,"model.eval()"),Svt.forEach(t),Cnr=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B4e=n(lRe,"CODE",{});var Rvt=s(B4e);wnr=r(Rvt,"model.train()"),Rvt.forEach(t),lRe.forEach(t),Anr=i(ua),T(AF.$$.fragment,ua),ua.forEach(t),sl.forEach(t),cDe=i(f),Ed=n(f,"H2",{class:!0});var pOe=s(Ed);LF=n(pOe,"A",{id:!0,class:!0,href:!0});var Pvt=s(LF);I4e=n(Pvt,"SPAN",{});var Bvt=s(I4e);T(Uy.$$.fragment,Bvt),Bvt.forEach(t),Pvt.forEach(t),Lnr=i(pOe),N4e=n(pOe,"SPAN",{});var Ivt=s(N4e);ynr=r(Ivt,"AutoModelForAudioXVector"),Ivt.forEach(t),pOe.forEach(t),fDe=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(Jy.$$.fragment,ll),xnr=i(ll),Cd=n(ll,"P",{});var Ree=s(Cd);$nr=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nW=n(Ree,"A",{href:!0});var Nvt=s(nW);knr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),Snr=r(Ree," class method or the "),sW=n(Ree,"A",{href:!0});var qvt=s(sW);Rnr=r(qvt,"from_config()"),qvt.forEach(t),Pnr=r(Ree,` class
method.`),Ree.forEach(t),Bnr=i(ll),Yy=n(ll,"P",{});var _Oe=s(Yy);Inr=r(_Oe,"This class cannot be instantiated directly using "),q4e=n(_Oe,"CODE",{});var jvt=s(q4e);Nnr=r(jvt,"__init__()"),jvt.forEach(t),qnr=r(_Oe," (throws an error)."),_Oe.forEach(t),jnr=i(ll),Tt=n(ll,"DIV",{class:!0});var xA=s(Tt);T(Ky.$$.fragment,xA),Dnr=i(xA),j4e=n(xA,"P",{});var Dvt=s(j4e);Gnr=r(Dvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dvt.forEach(t),Onr=i(xA),wd=n(xA,"P",{});var Pee=s(wd);Vnr=r(Pee,`Note:
Loading a model from its configuration file does `),D4e=n(Pee,"STRONG",{});var Gvt=s(D4e);Xnr=r(Gvt,"not"),Gvt.forEach(t),znr=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(Pee,"A",{href:!0});var Ovt=s(lW);Wnr=r(Ovt,"from_pretrained()"),Ovt.forEach(t),Qnr=r(Pee," to load the model weights."),Pee.forEach(t),Hnr=i(xA),T(yF.$$.fragment,xA),xA.forEach(t),Unr=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(Zy.$$.fragment,ba),Jnr=i(ba),G4e=n(ba,"P",{});var Vvt=s(G4e);Ynr=r(Vvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vvt.forEach(t),Knr=i(ba),za=n(ba,"P",{});var $A=s(za);Znr=r($A,"The model class to instantiate is selected based on the "),O4e=n($A,"CODE",{});var Xvt=s(O4e);esr=r(Xvt,"model_type"),Xvt.forEach(t),osr=r($A,` property of the config object (either
passed as an argument or loaded from `),V4e=n($A,"CODE",{});var zvt=s(V4e);rsr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),tsr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n($A,"CODE",{});var Wvt=s(X4e);asr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),nsr=r($A,":"),$A.forEach(t),ssr=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);xF=n(il,"LI",{});var iRe=s(xF);z4e=n(iRe,"STRONG",{});var Qvt=s(z4e);lsr=r(Qvt,"data2vec-audio"),Qvt.forEach(t),isr=r(iRe," \u2014 "),iW=n(iRe,"A",{href:!0});var Hvt=s(iW);dsr=r(Hvt,"Data2VecAudioForXVector"),Hvt.forEach(t),csr=r(iRe," (Data2VecAudio model)"),iRe.forEach(t),fsr=i(il),$F=n(il,"LI",{});var dRe=s($F);W4e=n(dRe,"STRONG",{});var Uvt=s(W4e);msr=r(Uvt,"unispeech-sat"),Uvt.forEach(t),gsr=r(dRe," \u2014 "),dW=n(dRe,"A",{href:!0});var Jvt=s(dW);hsr=r(Jvt,"UniSpeechSatForXVector"),Jvt.forEach(t),psr=r(dRe," (UniSpeechSat model)"),dRe.forEach(t),_sr=i(il),kF=n(il,"LI",{});var cRe=s(kF);Q4e=n(cRe,"STRONG",{});var Yvt=s(Q4e);usr=r(Yvt,"wav2vec2"),Yvt.forEach(t),bsr=r(cRe," \u2014 "),cW=n(cRe,"A",{href:!0});var Kvt=s(cW);vsr=r(Kvt,"Wav2Vec2ForXVector"),Kvt.forEach(t),Fsr=r(cRe," (Wav2Vec2 model)"),cRe.forEach(t),Tsr=i(il),SF=n(il,"LI",{});var fRe=s(SF);H4e=n(fRe,"STRONG",{});var Zvt=s(H4e);Msr=r(Zvt,"wav2vec2-conformer"),Zvt.forEach(t),Esr=r(fRe," \u2014 "),fW=n(fRe,"A",{href:!0});var eFt=s(fW);Csr=r(eFt,"Wav2Vec2ConformerForXVector"),eFt.forEach(t),wsr=r(fRe," (Wav2Vec2-Conformer model)"),fRe.forEach(t),Asr=i(il),RF=n(il,"LI",{});var mRe=s(RF);U4e=n(mRe,"STRONG",{});var oFt=s(U4e);Lsr=r(oFt,"wavlm"),oFt.forEach(t),ysr=r(mRe," \u2014 "),mW=n(mRe,"A",{href:!0});var rFt=s(mW);xsr=r(rFt,"WavLMForXVector"),rFt.forEach(t),$sr=r(mRe," (WavLM model)"),mRe.forEach(t),il.forEach(t),ksr=i(ba),PF=n(ba,"P",{});var gRe=s(PF);Ssr=r(gRe,"The model is set in evaluation mode by default using "),J4e=n(gRe,"CODE",{});var tFt=s(J4e);Rsr=r(tFt,"model.eval()"),tFt.forEach(t),Psr=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=n(gRe,"CODE",{});var aFt=s(Y4e);Bsr=r(aFt,"model.train()"),aFt.forEach(t),gRe.forEach(t),Isr=i(ba),T(BF.$$.fragment,ba),ba.forEach(t),ll.forEach(t),mDe=i(f),Ad=n(f,"H2",{class:!0});var uOe=s(Ad);IF=n(uOe,"A",{id:!0,class:!0,href:!0});var nFt=s(IF);K4e=n(nFt,"SPAN",{});var sFt=s(K4e);T(e8.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),Nsr=i(uOe),Z4e=n(uOe,"SPAN",{});var lFt=s(Z4e);qsr=r(lFt,"AutoModelForMaskedImageModeling"),lFt.forEach(t),uOe.forEach(t),gDe=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(o8.$$.fragment,dl),jsr=i(dl),Ld=n(dl,"P",{});var Bee=s(Ld);Dsr=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gW=n(Bee,"A",{href:!0});var iFt=s(gW);Gsr=r(iFt,"from_pretrained()"),iFt.forEach(t),Osr=r(Bee," class method or the "),hW=n(Bee,"A",{href:!0});var dFt=s(hW);Vsr=r(dFt,"from_config()"),dFt.forEach(t),Xsr=r(Bee,` class
method.`),Bee.forEach(t),zsr=i(dl),r8=n(dl,"P",{});var bOe=s(r8);Wsr=r(bOe,"This class cannot be instantiated directly using "),e1e=n(bOe,"CODE",{});var cFt=s(e1e);Qsr=r(cFt,"__init__()"),cFt.forEach(t),Hsr=r(bOe," (throws an error)."),bOe.forEach(t),Usr=i(dl),Mt=n(dl,"DIV",{class:!0});var kA=s(Mt);T(t8.$$.fragment,kA),Jsr=i(kA),o1e=n(kA,"P",{});var fFt=s(o1e);Ysr=r(fFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fFt.forEach(t),Ksr=i(kA),yd=n(kA,"P",{});var Iee=s(yd);Zsr=r(Iee,`Note:
Loading a model from its configuration file does `),r1e=n(Iee,"STRONG",{});var mFt=s(r1e);elr=r(mFt,"not"),mFt.forEach(t),olr=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(Iee,"A",{href:!0});var gFt=s(pW);rlr=r(gFt,"from_pretrained()"),gFt.forEach(t),tlr=r(Iee," to load the model weights."),Iee.forEach(t),alr=i(kA),T(NF.$$.fragment,kA),kA.forEach(t),nlr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(a8.$$.fragment,va),slr=i(va),t1e=n(va,"P",{});var hFt=s(t1e);llr=r(hFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hFt.forEach(t),ilr=i(va),Wa=n(va,"P",{});var SA=s(Wa);dlr=r(SA,"The model class to instantiate is selected based on the "),a1e=n(SA,"CODE",{});var pFt=s(a1e);clr=r(pFt,"model_type"),pFt.forEach(t),flr=r(SA,` property of the config object (either
passed as an argument or loaded from `),n1e=n(SA,"CODE",{});var _Ft=s(n1e);mlr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),glr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(SA,"CODE",{});var uFt=s(s1e);hlr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),plr=r(SA,":"),SA.forEach(t),_lr=i(va),xd=n(va,"UL",{});var Nee=s(xd);qF=n(Nee,"LI",{});var hRe=s(qF);l1e=n(hRe,"STRONG",{});var bFt=s(l1e);ulr=r(bFt,"deit"),bFt.forEach(t),blr=r(hRe," \u2014 "),_W=n(hRe,"A",{href:!0});var vFt=s(_W);vlr=r(vFt,"DeiTForMaskedImageModeling"),vFt.forEach(t),Flr=r(hRe," (DeiT model)"),hRe.forEach(t),Tlr=i(Nee),jF=n(Nee,"LI",{});var pRe=s(jF);i1e=n(pRe,"STRONG",{});var FFt=s(i1e);Mlr=r(FFt,"swin"),FFt.forEach(t),Elr=r(pRe," \u2014 "),uW=n(pRe,"A",{href:!0});var TFt=s(uW);Clr=r(TFt,"SwinForMaskedImageModeling"),TFt.forEach(t),wlr=r(pRe," (Swin Transformer model)"),pRe.forEach(t),Alr=i(Nee),DF=n(Nee,"LI",{});var _Re=s(DF);d1e=n(_Re,"STRONG",{});var MFt=s(d1e);Llr=r(MFt,"vit"),MFt.forEach(t),ylr=r(_Re," \u2014 "),bW=n(_Re,"A",{href:!0});var EFt=s(bW);xlr=r(EFt,"ViTForMaskedImageModeling"),EFt.forEach(t),$lr=r(_Re," (ViT model)"),_Re.forEach(t),Nee.forEach(t),klr=i(va),GF=n(va,"P",{});var uRe=s(GF);Slr=r(uRe,"The model is set in evaluation mode by default using "),c1e=n(uRe,"CODE",{});var CFt=s(c1e);Rlr=r(CFt,"model.eval()"),CFt.forEach(t),Plr=r(uRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=n(uRe,"CODE",{});var wFt=s(f1e);Blr=r(wFt,"model.train()"),wFt.forEach(t),uRe.forEach(t),Ilr=i(va),T(OF.$$.fragment,va),va.forEach(t),dl.forEach(t),hDe=i(f),$d=n(f,"H2",{class:!0});var vOe=s($d);VF=n(vOe,"A",{id:!0,class:!0,href:!0});var AFt=s(VF);m1e=n(AFt,"SPAN",{});var LFt=s(m1e);T(n8.$$.fragment,LFt),LFt.forEach(t),AFt.forEach(t),Nlr=i(vOe),g1e=n(vOe,"SPAN",{});var yFt=s(g1e);qlr=r(yFt,"AutoModelForObjectDetection"),yFt.forEach(t),vOe.forEach(t),pDe=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(s8.$$.fragment,cl),jlr=i(cl),kd=n(cl,"P",{});var qee=s(kd);Dlr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),vW=n(qee,"A",{href:!0});var xFt=s(vW);Glr=r(xFt,"from_pretrained()"),xFt.forEach(t),Olr=r(qee," class method or the "),FW=n(qee,"A",{href:!0});var $Ft=s(FW);Vlr=r($Ft,"from_config()"),$Ft.forEach(t),Xlr=r(qee,` class
method.`),qee.forEach(t),zlr=i(cl),l8=n(cl,"P",{});var FOe=s(l8);Wlr=r(FOe,"This class cannot be instantiated directly using "),h1e=n(FOe,"CODE",{});var kFt=s(h1e);Qlr=r(kFt,"__init__()"),kFt.forEach(t),Hlr=r(FOe," (throws an error)."),FOe.forEach(t),Ulr=i(cl),Et=n(cl,"DIV",{class:!0});var RA=s(Et);T(i8.$$.fragment,RA),Jlr=i(RA),p1e=n(RA,"P",{});var SFt=s(p1e);Ylr=r(SFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),SFt.forEach(t),Klr=i(RA),Sd=n(RA,"P",{});var jee=s(Sd);Zlr=r(jee,`Note:
Loading a model from its configuration file does `),_1e=n(jee,"STRONG",{});var RFt=s(_1e);eir=r(RFt,"not"),RFt.forEach(t),oir=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(jee,"A",{href:!0});var PFt=s(TW);rir=r(PFt,"from_pretrained()"),PFt.forEach(t),tir=r(jee," to load the model weights."),jee.forEach(t),air=i(RA),T(XF.$$.fragment,RA),RA.forEach(t),nir=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(d8.$$.fragment,Fa),sir=i(Fa),u1e=n(Fa,"P",{});var BFt=s(u1e);lir=r(BFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),BFt.forEach(t),iir=i(Fa),Qa=n(Fa,"P",{});var PA=s(Qa);dir=r(PA,"The model class to instantiate is selected based on the "),b1e=n(PA,"CODE",{});var IFt=s(b1e);cir=r(IFt,"model_type"),IFt.forEach(t),fir=r(PA,` property of the config object (either
passed as an argument or loaded from `),v1e=n(PA,"CODE",{});var NFt=s(v1e);mir=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),gir=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(PA,"CODE",{});var qFt=s(F1e);hir=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),pir=r(PA,":"),PA.forEach(t),_ir=i(Fa),c8=n(Fa,"UL",{});var TOe=s(c8);zF=n(TOe,"LI",{});var bRe=s(zF);T1e=n(bRe,"STRONG",{});var jFt=s(T1e);uir=r(jFt,"detr"),jFt.forEach(t),bir=r(bRe," \u2014 "),MW=n(bRe,"A",{href:!0});var DFt=s(MW);vir=r(DFt,"DetrForObjectDetection"),DFt.forEach(t),Fir=r(bRe," (DETR model)"),bRe.forEach(t),Tir=i(TOe),WF=n(TOe,"LI",{});var vRe=s(WF);M1e=n(vRe,"STRONG",{});var GFt=s(M1e);Mir=r(GFt,"yolos"),GFt.forEach(t),Eir=r(vRe," \u2014 "),EW=n(vRe,"A",{href:!0});var OFt=s(EW);Cir=r(OFt,"YolosForObjectDetection"),OFt.forEach(t),wir=r(vRe," (YOLOS model)"),vRe.forEach(t),TOe.forEach(t),Air=i(Fa),QF=n(Fa,"P",{});var FRe=s(QF);Lir=r(FRe,"The model is set in evaluation mode by default using "),E1e=n(FRe,"CODE",{});var VFt=s(E1e);yir=r(VFt,"model.eval()"),VFt.forEach(t),xir=r(FRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(FRe,"CODE",{});var XFt=s(C1e);$ir=r(XFt,"model.train()"),XFt.forEach(t),FRe.forEach(t),kir=i(Fa),T(HF.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),_De=i(f),Rd=n(f,"H2",{class:!0});var MOe=s(Rd);UF=n(MOe,"A",{id:!0,class:!0,href:!0});var zFt=s(UF);w1e=n(zFt,"SPAN",{});var WFt=s(w1e);T(f8.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),Sir=i(MOe),A1e=n(MOe,"SPAN",{});var QFt=s(A1e);Rir=r(QFt,"AutoModelForImageSegmentation"),QFt.forEach(t),MOe.forEach(t),uDe=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(m8.$$.fragment,fl),Pir=i(fl),Pd=n(fl,"P",{});var Dee=s(Pd);Bir=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),CW=n(Dee,"A",{href:!0});var HFt=s(CW);Iir=r(HFt,"from_pretrained()"),HFt.forEach(t),Nir=r(Dee," class method or the "),wW=n(Dee,"A",{href:!0});var UFt=s(wW);qir=r(UFt,"from_config()"),UFt.forEach(t),jir=r(Dee,` class
method.`),Dee.forEach(t),Dir=i(fl),g8=n(fl,"P",{});var EOe=s(g8);Gir=r(EOe,"This class cannot be instantiated directly using "),L1e=n(EOe,"CODE",{});var JFt=s(L1e);Oir=r(JFt,"__init__()"),JFt.forEach(t),Vir=r(EOe," (throws an error)."),EOe.forEach(t),Xir=i(fl),Ct=n(fl,"DIV",{class:!0});var BA=s(Ct);T(h8.$$.fragment,BA),zir=i(BA),y1e=n(BA,"P",{});var YFt=s(y1e);Wir=r(YFt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YFt.forEach(t),Qir=i(BA),Bd=n(BA,"P",{});var Gee=s(Bd);Hir=r(Gee,`Note:
Loading a model from its configuration file does `),x1e=n(Gee,"STRONG",{});var KFt=s(x1e);Uir=r(KFt,"not"),KFt.forEach(t),Jir=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(Gee,"A",{href:!0});var ZFt=s(AW);Yir=r(ZFt,"from_pretrained()"),ZFt.forEach(t),Kir=r(Gee," to load the model weights."),Gee.forEach(t),Zir=i(BA),T(JF.$$.fragment,BA),BA.forEach(t),edr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(p8.$$.fragment,Ta),odr=i(Ta),$1e=n(Ta,"P",{});var eTt=s($1e);rdr=r(eTt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),eTt.forEach(t),tdr=i(Ta),Ha=n(Ta,"P",{});var IA=s(Ha);adr=r(IA,"The model class to instantiate is selected based on the "),k1e=n(IA,"CODE",{});var oTt=s(k1e);ndr=r(oTt,"model_type"),oTt.forEach(t),sdr=r(IA,` property of the config object (either
passed as an argument or loaded from `),S1e=n(IA,"CODE",{});var rTt=s(S1e);ldr=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),idr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(IA,"CODE",{});var tTt=s(R1e);ddr=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),cdr=r(IA,":"),IA.forEach(t),fdr=i(Ta),P1e=n(Ta,"UL",{});var aTt=s(P1e);YF=n(aTt,"LI",{});var TRe=s(YF);B1e=n(TRe,"STRONG",{});var nTt=s(B1e);mdr=r(nTt,"detr"),nTt.forEach(t),gdr=r(TRe," \u2014 "),LW=n(TRe,"A",{href:!0});var sTt=s(LW);hdr=r(sTt,"DetrForSegmentation"),sTt.forEach(t),pdr=r(TRe," (DETR model)"),TRe.forEach(t),aTt.forEach(t),_dr=i(Ta),KF=n(Ta,"P",{});var MRe=s(KF);udr=r(MRe,"The model is set in evaluation mode by default using "),I1e=n(MRe,"CODE",{});var lTt=s(I1e);bdr=r(lTt,"model.eval()"),lTt.forEach(t),vdr=r(MRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=n(MRe,"CODE",{});var iTt=s(N1e);Fdr=r(iTt,"model.train()"),iTt.forEach(t),MRe.forEach(t),Tdr=i(Ta),T(ZF.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),bDe=i(f),Id=n(f,"H2",{class:!0});var COe=s(Id);eT=n(COe,"A",{id:!0,class:!0,href:!0});var dTt=s(eT);q1e=n(dTt,"SPAN",{});var cTt=s(q1e);T(_8.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),Mdr=i(COe),j1e=n(COe,"SPAN",{});var fTt=s(j1e);Edr=r(fTt,"AutoModelForSemanticSegmentation"),fTt.forEach(t),COe.forEach(t),vDe=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(u8.$$.fragment,ml),Cdr=i(ml),Nd=n(ml,"P",{});var Oee=s(Nd);wdr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yW=n(Oee,"A",{href:!0});var mTt=s(yW);Adr=r(mTt,"from_pretrained()"),mTt.forEach(t),Ldr=r(Oee," class method or the "),xW=n(Oee,"A",{href:!0});var gTt=s(xW);ydr=r(gTt,"from_config()"),gTt.forEach(t),xdr=r(Oee,` class
method.`),Oee.forEach(t),$dr=i(ml),b8=n(ml,"P",{});var wOe=s(b8);kdr=r(wOe,"This class cannot be instantiated directly using "),D1e=n(wOe,"CODE",{});var hTt=s(D1e);Sdr=r(hTt,"__init__()"),hTt.forEach(t),Rdr=r(wOe," (throws an error)."),wOe.forEach(t),Pdr=i(ml),wt=n(ml,"DIV",{class:!0});var NA=s(wt);T(v8.$$.fragment,NA),Bdr=i(NA),G1e=n(NA,"P",{});var pTt=s(G1e);Idr=r(pTt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),pTt.forEach(t),Ndr=i(NA),qd=n(NA,"P",{});var Vee=s(qd);qdr=r(Vee,`Note:
Loading a model from its configuration file does `),O1e=n(Vee,"STRONG",{});var _Tt=s(O1e);jdr=r(_Tt,"not"),_Tt.forEach(t),Ddr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Vee,"A",{href:!0});var uTt=s($W);Gdr=r(uTt,"from_pretrained()"),uTt.forEach(t),Odr=r(Vee," to load the model weights."),Vee.forEach(t),Vdr=i(NA),T(oT.$$.fragment,NA),NA.forEach(t),Xdr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(F8.$$.fragment,Ma),zdr=i(Ma),V1e=n(Ma,"P",{});var bTt=s(V1e);Wdr=r(bTt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),bTt.forEach(t),Qdr=i(Ma),Ua=n(Ma,"P",{});var qA=s(Ua);Hdr=r(qA,"The model class to instantiate is selected based on the "),X1e=n(qA,"CODE",{});var vTt=s(X1e);Udr=r(vTt,"model_type"),vTt.forEach(t),Jdr=r(qA,` property of the config object (either
passed as an argument or loaded from `),z1e=n(qA,"CODE",{});var FTt=s(z1e);Ydr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),Kdr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(qA,"CODE",{});var TTt=s(W1e);Zdr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),ecr=r(qA,":"),qA.forEach(t),ocr=i(Ma),Ja=n(Ma,"UL",{});var jA=s(Ja);rT=n(jA,"LI",{});var ERe=s(rT);Q1e=n(ERe,"STRONG",{});var MTt=s(Q1e);rcr=r(MTt,"beit"),MTt.forEach(t),tcr=r(ERe," \u2014 "),kW=n(ERe,"A",{href:!0});var ETt=s(kW);acr=r(ETt,"BeitForSemanticSegmentation"),ETt.forEach(t),ncr=r(ERe," (BEiT model)"),ERe.forEach(t),scr=i(jA),tT=n(jA,"LI",{});var CRe=s(tT);H1e=n(CRe,"STRONG",{});var CTt=s(H1e);lcr=r(CTt,"data2vec-vision"),CTt.forEach(t),icr=r(CRe," \u2014 "),SW=n(CRe,"A",{href:!0});var wTt=s(SW);dcr=r(wTt,"Data2VecVisionForSemanticSegmentation"),wTt.forEach(t),ccr=r(CRe," (Data2VecVision model)"),CRe.forEach(t),fcr=i(jA),aT=n(jA,"LI",{});var wRe=s(aT);U1e=n(wRe,"STRONG",{});var ATt=s(U1e);mcr=r(ATt,"dpt"),ATt.forEach(t),gcr=r(wRe," \u2014 "),RW=n(wRe,"A",{href:!0});var LTt=s(RW);hcr=r(LTt,"DPTForSemanticSegmentation"),LTt.forEach(t),pcr=r(wRe," (DPT model)"),wRe.forEach(t),_cr=i(jA),nT=n(jA,"LI",{});var ARe=s(nT);J1e=n(ARe,"STRONG",{});var yTt=s(J1e);ucr=r(yTt,"segformer"),yTt.forEach(t),bcr=r(ARe," \u2014 "),PW=n(ARe,"A",{href:!0});var xTt=s(PW);vcr=r(xTt,"SegformerForSemanticSegmentation"),xTt.forEach(t),Fcr=r(ARe," (SegFormer model)"),ARe.forEach(t),jA.forEach(t),Tcr=i(Ma),sT=n(Ma,"P",{});var LRe=s(sT);Mcr=r(LRe,"The model is set in evaluation mode by default using "),Y1e=n(LRe,"CODE",{});var $Tt=s(Y1e);Ecr=r($Tt,"model.eval()"),$Tt.forEach(t),Ccr=r(LRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(LRe,"CODE",{});var kTt=s(K1e);wcr=r(kTt,"model.train()"),kTt.forEach(t),LRe.forEach(t),Acr=i(Ma),T(lT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),FDe=i(f),jd=n(f,"H2",{class:!0});var AOe=s(jd);iT=n(AOe,"A",{id:!0,class:!0,href:!0});var STt=s(iT);Z1e=n(STt,"SPAN",{});var RTt=s(Z1e);T(T8.$$.fragment,RTt),RTt.forEach(t),STt.forEach(t),Lcr=i(AOe),e7e=n(AOe,"SPAN",{});var PTt=s(e7e);ycr=r(PTt,"AutoModelForInstanceSegmentation"),PTt.forEach(t),AOe.forEach(t),TDe=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(M8.$$.fragment,gl),xcr=i(gl),Dd=n(gl,"P",{});var Xee=s(Dd);$cr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BW=n(Xee,"A",{href:!0});var BTt=s(BW);kcr=r(BTt,"from_pretrained()"),BTt.forEach(t),Scr=r(Xee," class method or the "),IW=n(Xee,"A",{href:!0});var ITt=s(IW);Rcr=r(ITt,"from_config()"),ITt.forEach(t),Pcr=r(Xee,` class
method.`),Xee.forEach(t),Bcr=i(gl),E8=n(gl,"P",{});var LOe=s(E8);Icr=r(LOe,"This class cannot be instantiated directly using "),o7e=n(LOe,"CODE",{});var NTt=s(o7e);Ncr=r(NTt,"__init__()"),NTt.forEach(t),qcr=r(LOe," (throws an error)."),LOe.forEach(t),jcr=i(gl),At=n(gl,"DIV",{class:!0});var DA=s(At);T(C8.$$.fragment,DA),Dcr=i(DA),r7e=n(DA,"P",{});var qTt=s(r7e);Gcr=r(qTt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),qTt.forEach(t),Ocr=i(DA),Gd=n(DA,"P",{});var zee=s(Gd);Vcr=r(zee,`Note:
Loading a model from its configuration file does `),t7e=n(zee,"STRONG",{});var jTt=s(t7e);Xcr=r(jTt,"not"),jTt.forEach(t),zcr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(zee,"A",{href:!0});var DTt=s(NW);Wcr=r(DTt,"from_pretrained()"),DTt.forEach(t),Qcr=r(zee," to load the model weights."),zee.forEach(t),Hcr=i(DA),T(dT.$$.fragment,DA),DA.forEach(t),Ucr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(w8.$$.fragment,Ea),Jcr=i(Ea),a7e=n(Ea,"P",{});var GTt=s(a7e);Ycr=r(GTt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),GTt.forEach(t),Kcr=i(Ea),Ya=n(Ea,"P",{});var GA=s(Ya);Zcr=r(GA,"The model class to instantiate is selected based on the "),n7e=n(GA,"CODE",{});var OTt=s(n7e);efr=r(OTt,"model_type"),OTt.forEach(t),ofr=r(GA,` property of the config object (either
passed as an argument or loaded from `),s7e=n(GA,"CODE",{});var VTt=s(s7e);rfr=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),tfr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(GA,"CODE",{});var XTt=s(l7e);afr=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),nfr=r(GA,":"),GA.forEach(t),sfr=i(Ea),i7e=n(Ea,"UL",{});var zTt=s(i7e);cT=n(zTt,"LI",{});var yRe=s(cT);d7e=n(yRe,"STRONG",{});var WTt=s(d7e);lfr=r(WTt,"maskformer"),WTt.forEach(t),ifr=r(yRe," \u2014 "),qW=n(yRe,"A",{href:!0});var QTt=s(qW);dfr=r(QTt,"MaskFormerForInstanceSegmentation"),QTt.forEach(t),cfr=r(yRe," (MaskFormer model)"),yRe.forEach(t),zTt.forEach(t),ffr=i(Ea),fT=n(Ea,"P",{});var xRe=s(fT);mfr=r(xRe,"The model is set in evaluation mode by default using "),c7e=n(xRe,"CODE",{});var HTt=s(c7e);gfr=r(HTt,"model.eval()"),HTt.forEach(t),hfr=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f7e=n(xRe,"CODE",{});var UTt=s(f7e);pfr=r(UTt,"model.train()"),UTt.forEach(t),xRe.forEach(t),_fr=i(Ea),T(mT.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),MDe=i(f),Od=n(f,"H2",{class:!0});var yOe=s(Od);gT=n(yOe,"A",{id:!0,class:!0,href:!0});var JTt=s(gT);m7e=n(JTt,"SPAN",{});var YTt=s(m7e);T(A8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),ufr=i(yOe),g7e=n(yOe,"SPAN",{});var KTt=s(g7e);bfr=r(KTt,"TFAutoModel"),KTt.forEach(t),yOe.forEach(t),EDe=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(L8.$$.fragment,hl),vfr=i(hl),Vd=n(hl,"P",{});var Wee=s(Vd);Ffr=r(Wee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jW=n(Wee,"A",{href:!0});var ZTt=s(jW);Tfr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),Mfr=r(Wee," class method or the "),DW=n(Wee,"A",{href:!0});var eMt=s(DW);Efr=r(eMt,"from_config()"),eMt.forEach(t),Cfr=r(Wee,` class
method.`),Wee.forEach(t),wfr=i(hl),y8=n(hl,"P",{});var xOe=s(y8);Afr=r(xOe,"This class cannot be instantiated directly using "),h7e=n(xOe,"CODE",{});var oMt=s(h7e);Lfr=r(oMt,"__init__()"),oMt.forEach(t),yfr=r(xOe," (throws an error)."),xOe.forEach(t),xfr=i(hl),Lt=n(hl,"DIV",{class:!0});var OA=s(Lt);T(x8.$$.fragment,OA),$fr=i(OA),p7e=n(OA,"P",{});var rMt=s(p7e);kfr=r(rMt,"Instantiates one of the base model classes of the library from a configuration."),rMt.forEach(t),Sfr=i(OA),Xd=n(OA,"P",{});var Qee=s(Xd);Rfr=r(Qee,`Note:
Loading a model from its configuration file does `),_7e=n(Qee,"STRONG",{});var tMt=s(_7e);Pfr=r(tMt,"not"),tMt.forEach(t),Bfr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(Qee,"A",{href:!0});var aMt=s(GW);Ifr=r(aMt,"from_pretrained()"),aMt.forEach(t),Nfr=r(Qee," to load the model weights."),Qee.forEach(t),qfr=i(OA),T(hT.$$.fragment,OA),OA.forEach(t),jfr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T($8.$$.fragment,pl),Dfr=i(pl),u7e=n(pl,"P",{});var nMt=s(u7e);Gfr=r(nMt,"Instantiate one of the base model classes of the library from a pretrained model."),nMt.forEach(t),Ofr=i(pl),Ka=n(pl,"P",{});var VA=s(Ka);Vfr=r(VA,"The model class to instantiate is selected based on the "),b7e=n(VA,"CODE",{});var sMt=s(b7e);Xfr=r(sMt,"model_type"),sMt.forEach(t),zfr=r(VA,` property of the config object (either
passed as an argument or loaded from `),v7e=n(VA,"CODE",{});var lMt=s(v7e);Wfr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),Qfr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(VA,"CODE",{});var iMt=s(F7e);Hfr=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),Ufr=r(VA,":"),VA.forEach(t),Jfr=i(pl),q=n(pl,"UL",{});var D=s(q);pT=n(D,"LI",{});var $Re=s(pT);T7e=n($Re,"STRONG",{});var dMt=s(T7e);Yfr=r(dMt,"albert"),dMt.forEach(t),Kfr=r($Re," \u2014 "),OW=n($Re,"A",{href:!0});var cMt=s(OW);Zfr=r(cMt,"TFAlbertModel"),cMt.forEach(t),emr=r($Re," (ALBERT model)"),$Re.forEach(t),omr=i(D),_T=n(D,"LI",{});var kRe=s(_T);M7e=n(kRe,"STRONG",{});var fMt=s(M7e);rmr=r(fMt,"bart"),fMt.forEach(t),tmr=r(kRe," \u2014 "),VW=n(kRe,"A",{href:!0});var mMt=s(VW);amr=r(mMt,"TFBartModel"),mMt.forEach(t),nmr=r(kRe," (BART model)"),kRe.forEach(t),smr=i(D),uT=n(D,"LI",{});var SRe=s(uT);E7e=n(SRe,"STRONG",{});var gMt=s(E7e);lmr=r(gMt,"bert"),gMt.forEach(t),imr=r(SRe," \u2014 "),XW=n(SRe,"A",{href:!0});var hMt=s(XW);dmr=r(hMt,"TFBertModel"),hMt.forEach(t),cmr=r(SRe," (BERT model)"),SRe.forEach(t),fmr=i(D),bT=n(D,"LI",{});var RRe=s(bT);C7e=n(RRe,"STRONG",{});var pMt=s(C7e);mmr=r(pMt,"blenderbot"),pMt.forEach(t),gmr=r(RRe," \u2014 "),zW=n(RRe,"A",{href:!0});var _Mt=s(zW);hmr=r(_Mt,"TFBlenderbotModel"),_Mt.forEach(t),pmr=r(RRe," (Blenderbot model)"),RRe.forEach(t),_mr=i(D),vT=n(D,"LI",{});var PRe=s(vT);w7e=n(PRe,"STRONG",{});var uMt=s(w7e);umr=r(uMt,"blenderbot-small"),uMt.forEach(t),bmr=r(PRe," \u2014 "),WW=n(PRe,"A",{href:!0});var bMt=s(WW);vmr=r(bMt,"TFBlenderbotSmallModel"),bMt.forEach(t),Fmr=r(PRe," (BlenderbotSmall model)"),PRe.forEach(t),Tmr=i(D),FT=n(D,"LI",{});var BRe=s(FT);A7e=n(BRe,"STRONG",{});var vMt=s(A7e);Mmr=r(vMt,"camembert"),vMt.forEach(t),Emr=r(BRe," \u2014 "),QW=n(BRe,"A",{href:!0});var FMt=s(QW);Cmr=r(FMt,"TFCamembertModel"),FMt.forEach(t),wmr=r(BRe," (CamemBERT model)"),BRe.forEach(t),Amr=i(D),TT=n(D,"LI",{});var IRe=s(TT);L7e=n(IRe,"STRONG",{});var TMt=s(L7e);Lmr=r(TMt,"clip"),TMt.forEach(t),ymr=r(IRe," \u2014 "),HW=n(IRe,"A",{href:!0});var MMt=s(HW);xmr=r(MMt,"TFCLIPModel"),MMt.forEach(t),$mr=r(IRe," (CLIP model)"),IRe.forEach(t),kmr=i(D),MT=n(D,"LI",{});var NRe=s(MT);y7e=n(NRe,"STRONG",{});var EMt=s(y7e);Smr=r(EMt,"convbert"),EMt.forEach(t),Rmr=r(NRe," \u2014 "),UW=n(NRe,"A",{href:!0});var CMt=s(UW);Pmr=r(CMt,"TFConvBertModel"),CMt.forEach(t),Bmr=r(NRe," (ConvBERT model)"),NRe.forEach(t),Imr=i(D),ET=n(D,"LI",{});var qRe=s(ET);x7e=n(qRe,"STRONG",{});var wMt=s(x7e);Nmr=r(wMt,"convnext"),wMt.forEach(t),qmr=r(qRe," \u2014 "),JW=n(qRe,"A",{href:!0});var AMt=s(JW);jmr=r(AMt,"TFConvNextModel"),AMt.forEach(t),Dmr=r(qRe," (ConvNeXT model)"),qRe.forEach(t),Gmr=i(D),CT=n(D,"LI",{});var jRe=s(CT);$7e=n(jRe,"STRONG",{});var LMt=s($7e);Omr=r(LMt,"ctrl"),LMt.forEach(t),Vmr=r(jRe," \u2014 "),YW=n(jRe,"A",{href:!0});var yMt=s(YW);Xmr=r(yMt,"TFCTRLModel"),yMt.forEach(t),zmr=r(jRe," (CTRL model)"),jRe.forEach(t),Wmr=i(D),wT=n(D,"LI",{});var DRe=s(wT);k7e=n(DRe,"STRONG",{});var xMt=s(k7e);Qmr=r(xMt,"data2vec-vision"),xMt.forEach(t),Hmr=r(DRe," \u2014 "),KW=n(DRe,"A",{href:!0});var $Mt=s(KW);Umr=r($Mt,"TFData2VecVisionModel"),$Mt.forEach(t),Jmr=r(DRe," (Data2VecVision model)"),DRe.forEach(t),Ymr=i(D),AT=n(D,"LI",{});var GRe=s(AT);S7e=n(GRe,"STRONG",{});var kMt=s(S7e);Kmr=r(kMt,"deberta"),kMt.forEach(t),Zmr=r(GRe," \u2014 "),ZW=n(GRe,"A",{href:!0});var SMt=s(ZW);egr=r(SMt,"TFDebertaModel"),SMt.forEach(t),ogr=r(GRe," (DeBERTa model)"),GRe.forEach(t),rgr=i(D),LT=n(D,"LI",{});var ORe=s(LT);R7e=n(ORe,"STRONG",{});var RMt=s(R7e);tgr=r(RMt,"deberta-v2"),RMt.forEach(t),agr=r(ORe," \u2014 "),eQ=n(ORe,"A",{href:!0});var PMt=s(eQ);ngr=r(PMt,"TFDebertaV2Model"),PMt.forEach(t),sgr=r(ORe," (DeBERTa-v2 model)"),ORe.forEach(t),lgr=i(D),yT=n(D,"LI",{});var VRe=s(yT);P7e=n(VRe,"STRONG",{});var BMt=s(P7e);igr=r(BMt,"distilbert"),BMt.forEach(t),dgr=r(VRe," \u2014 "),oQ=n(VRe,"A",{href:!0});var IMt=s(oQ);cgr=r(IMt,"TFDistilBertModel"),IMt.forEach(t),fgr=r(VRe," (DistilBERT model)"),VRe.forEach(t),mgr=i(D),xT=n(D,"LI",{});var XRe=s(xT);B7e=n(XRe,"STRONG",{});var NMt=s(B7e);ggr=r(NMt,"dpr"),NMt.forEach(t),hgr=r(XRe," \u2014 "),rQ=n(XRe,"A",{href:!0});var qMt=s(rQ);pgr=r(qMt,"TFDPRQuestionEncoder"),qMt.forEach(t),_gr=r(XRe," (DPR model)"),XRe.forEach(t),ugr=i(D),$T=n(D,"LI",{});var zRe=s($T);I7e=n(zRe,"STRONG",{});var jMt=s(I7e);bgr=r(jMt,"electra"),jMt.forEach(t),vgr=r(zRe," \u2014 "),tQ=n(zRe,"A",{href:!0});var DMt=s(tQ);Fgr=r(DMt,"TFElectraModel"),DMt.forEach(t),Tgr=r(zRe," (ELECTRA model)"),zRe.forEach(t),Mgr=i(D),kT=n(D,"LI",{});var WRe=s(kT);N7e=n(WRe,"STRONG",{});var GMt=s(N7e);Egr=r(GMt,"flaubert"),GMt.forEach(t),Cgr=r(WRe," \u2014 "),aQ=n(WRe,"A",{href:!0});var OMt=s(aQ);wgr=r(OMt,"TFFlaubertModel"),OMt.forEach(t),Agr=r(WRe," (FlauBERT model)"),WRe.forEach(t),Lgr=i(D),Ns=n(D,"LI",{});var dk=s(Ns);q7e=n(dk,"STRONG",{});var VMt=s(q7e);ygr=r(VMt,"funnel"),VMt.forEach(t),xgr=r(dk," \u2014 "),nQ=n(dk,"A",{href:!0});var XMt=s(nQ);$gr=r(XMt,"TFFunnelModel"),XMt.forEach(t),kgr=r(dk," or "),sQ=n(dk,"A",{href:!0});var zMt=s(sQ);Sgr=r(zMt,"TFFunnelBaseModel"),zMt.forEach(t),Rgr=r(dk," (Funnel Transformer model)"),dk.forEach(t),Pgr=i(D),ST=n(D,"LI",{});var QRe=s(ST);j7e=n(QRe,"STRONG",{});var WMt=s(j7e);Bgr=r(WMt,"gpt2"),WMt.forEach(t),Igr=r(QRe," \u2014 "),lQ=n(QRe,"A",{href:!0});var QMt=s(lQ);Ngr=r(QMt,"TFGPT2Model"),QMt.forEach(t),qgr=r(QRe," (OpenAI GPT-2 model)"),QRe.forEach(t),jgr=i(D),RT=n(D,"LI",{});var HRe=s(RT);D7e=n(HRe,"STRONG",{});var HMt=s(D7e);Dgr=r(HMt,"gptj"),HMt.forEach(t),Ggr=r(HRe," \u2014 "),iQ=n(HRe,"A",{href:!0});var UMt=s(iQ);Ogr=r(UMt,"TFGPTJModel"),UMt.forEach(t),Vgr=r(HRe," (GPT-J model)"),HRe.forEach(t),Xgr=i(D),PT=n(D,"LI",{});var URe=s(PT);G7e=n(URe,"STRONG",{});var JMt=s(G7e);zgr=r(JMt,"hubert"),JMt.forEach(t),Wgr=r(URe," \u2014 "),dQ=n(URe,"A",{href:!0});var YMt=s(dQ);Qgr=r(YMt,"TFHubertModel"),YMt.forEach(t),Hgr=r(URe," (Hubert model)"),URe.forEach(t),Ugr=i(D),BT=n(D,"LI",{});var JRe=s(BT);O7e=n(JRe,"STRONG",{});var KMt=s(O7e);Jgr=r(KMt,"layoutlm"),KMt.forEach(t),Ygr=r(JRe," \u2014 "),cQ=n(JRe,"A",{href:!0});var ZMt=s(cQ);Kgr=r(ZMt,"TFLayoutLMModel"),ZMt.forEach(t),Zgr=r(JRe," (LayoutLM model)"),JRe.forEach(t),ehr=i(D),IT=n(D,"LI",{});var YRe=s(IT);V7e=n(YRe,"STRONG",{});var eEt=s(V7e);ohr=r(eEt,"led"),eEt.forEach(t),rhr=r(YRe," \u2014 "),fQ=n(YRe,"A",{href:!0});var oEt=s(fQ);thr=r(oEt,"TFLEDModel"),oEt.forEach(t),ahr=r(YRe," (LED model)"),YRe.forEach(t),nhr=i(D),NT=n(D,"LI",{});var KRe=s(NT);X7e=n(KRe,"STRONG",{});var rEt=s(X7e);shr=r(rEt,"longformer"),rEt.forEach(t),lhr=r(KRe," \u2014 "),mQ=n(KRe,"A",{href:!0});var tEt=s(mQ);ihr=r(tEt,"TFLongformerModel"),tEt.forEach(t),dhr=r(KRe," (Longformer model)"),KRe.forEach(t),chr=i(D),qT=n(D,"LI",{});var ZRe=s(qT);z7e=n(ZRe,"STRONG",{});var aEt=s(z7e);fhr=r(aEt,"lxmert"),aEt.forEach(t),mhr=r(ZRe," \u2014 "),gQ=n(ZRe,"A",{href:!0});var nEt=s(gQ);ghr=r(nEt,"TFLxmertModel"),nEt.forEach(t),hhr=r(ZRe," (LXMERT model)"),ZRe.forEach(t),phr=i(D),jT=n(D,"LI",{});var ePe=s(jT);W7e=n(ePe,"STRONG",{});var sEt=s(W7e);_hr=r(sEt,"marian"),sEt.forEach(t),uhr=r(ePe," \u2014 "),hQ=n(ePe,"A",{href:!0});var lEt=s(hQ);bhr=r(lEt,"TFMarianModel"),lEt.forEach(t),vhr=r(ePe," (Marian model)"),ePe.forEach(t),Fhr=i(D),DT=n(D,"LI",{});var oPe=s(DT);Q7e=n(oPe,"STRONG",{});var iEt=s(Q7e);Thr=r(iEt,"mbart"),iEt.forEach(t),Mhr=r(oPe," \u2014 "),pQ=n(oPe,"A",{href:!0});var dEt=s(pQ);Ehr=r(dEt,"TFMBartModel"),dEt.forEach(t),Chr=r(oPe," (mBART model)"),oPe.forEach(t),whr=i(D),GT=n(D,"LI",{});var rPe=s(GT);H7e=n(rPe,"STRONG",{});var cEt=s(H7e);Ahr=r(cEt,"mobilebert"),cEt.forEach(t),Lhr=r(rPe," \u2014 "),_Q=n(rPe,"A",{href:!0});var fEt=s(_Q);yhr=r(fEt,"TFMobileBertModel"),fEt.forEach(t),xhr=r(rPe," (MobileBERT model)"),rPe.forEach(t),$hr=i(D),OT=n(D,"LI",{});var tPe=s(OT);U7e=n(tPe,"STRONG",{});var mEt=s(U7e);khr=r(mEt,"mpnet"),mEt.forEach(t),Shr=r(tPe," \u2014 "),uQ=n(tPe,"A",{href:!0});var gEt=s(uQ);Rhr=r(gEt,"TFMPNetModel"),gEt.forEach(t),Phr=r(tPe," (MPNet model)"),tPe.forEach(t),Bhr=i(D),VT=n(D,"LI",{});var aPe=s(VT);J7e=n(aPe,"STRONG",{});var hEt=s(J7e);Ihr=r(hEt,"mt5"),hEt.forEach(t),Nhr=r(aPe," \u2014 "),bQ=n(aPe,"A",{href:!0});var pEt=s(bQ);qhr=r(pEt,"TFMT5Model"),pEt.forEach(t),jhr=r(aPe," (MT5 model)"),aPe.forEach(t),Dhr=i(D),XT=n(D,"LI",{});var nPe=s(XT);Y7e=n(nPe,"STRONG",{});var _Et=s(Y7e);Ghr=r(_Et,"openai-gpt"),_Et.forEach(t),Ohr=r(nPe," \u2014 "),vQ=n(nPe,"A",{href:!0});var uEt=s(vQ);Vhr=r(uEt,"TFOpenAIGPTModel"),uEt.forEach(t),Xhr=r(nPe," (OpenAI GPT model)"),nPe.forEach(t),zhr=i(D),zT=n(D,"LI",{});var sPe=s(zT);K7e=n(sPe,"STRONG",{});var bEt=s(K7e);Whr=r(bEt,"opt"),bEt.forEach(t),Qhr=r(sPe," \u2014 "),FQ=n(sPe,"A",{href:!0});var vEt=s(FQ);Hhr=r(vEt,"TFOPTModel"),vEt.forEach(t),Uhr=r(sPe," (OPT model)"),sPe.forEach(t),Jhr=i(D),WT=n(D,"LI",{});var lPe=s(WT);Z7e=n(lPe,"STRONG",{});var FEt=s(Z7e);Yhr=r(FEt,"pegasus"),FEt.forEach(t),Khr=r(lPe," \u2014 "),TQ=n(lPe,"A",{href:!0});var TEt=s(TQ);Zhr=r(TEt,"TFPegasusModel"),TEt.forEach(t),epr=r(lPe," (Pegasus model)"),lPe.forEach(t),opr=i(D),QT=n(D,"LI",{});var iPe=s(QT);ebe=n(iPe,"STRONG",{});var MEt=s(ebe);rpr=r(MEt,"rembert"),MEt.forEach(t),tpr=r(iPe," \u2014 "),MQ=n(iPe,"A",{href:!0});var EEt=s(MQ);apr=r(EEt,"TFRemBertModel"),EEt.forEach(t),npr=r(iPe," (RemBERT model)"),iPe.forEach(t),spr=i(D),HT=n(D,"LI",{});var dPe=s(HT);obe=n(dPe,"STRONG",{});var CEt=s(obe);lpr=r(CEt,"roberta"),CEt.forEach(t),ipr=r(dPe," \u2014 "),EQ=n(dPe,"A",{href:!0});var wEt=s(EQ);dpr=r(wEt,"TFRobertaModel"),wEt.forEach(t),cpr=r(dPe," (RoBERTa model)"),dPe.forEach(t),fpr=i(D),UT=n(D,"LI",{});var cPe=s(UT);rbe=n(cPe,"STRONG",{});var AEt=s(rbe);mpr=r(AEt,"roformer"),AEt.forEach(t),gpr=r(cPe," \u2014 "),CQ=n(cPe,"A",{href:!0});var LEt=s(CQ);hpr=r(LEt,"TFRoFormerModel"),LEt.forEach(t),ppr=r(cPe," (RoFormer model)"),cPe.forEach(t),_pr=i(D),JT=n(D,"LI",{});var fPe=s(JT);tbe=n(fPe,"STRONG",{});var yEt=s(tbe);upr=r(yEt,"speech_to_text"),yEt.forEach(t),bpr=r(fPe," \u2014 "),wQ=n(fPe,"A",{href:!0});var xEt=s(wQ);vpr=r(xEt,"TFSpeech2TextModel"),xEt.forEach(t),Fpr=r(fPe," (Speech2Text model)"),fPe.forEach(t),Tpr=i(D),YT=n(D,"LI",{});var mPe=s(YT);abe=n(mPe,"STRONG",{});var $Et=s(abe);Mpr=r($Et,"swin"),$Et.forEach(t),Epr=r(mPe," \u2014 "),AQ=n(mPe,"A",{href:!0});var kEt=s(AQ);Cpr=r(kEt,"TFSwinModel"),kEt.forEach(t),wpr=r(mPe," (Swin Transformer model)"),mPe.forEach(t),Apr=i(D),KT=n(D,"LI",{});var gPe=s(KT);nbe=n(gPe,"STRONG",{});var SEt=s(nbe);Lpr=r(SEt,"t5"),SEt.forEach(t),ypr=r(gPe," \u2014 "),LQ=n(gPe,"A",{href:!0});var REt=s(LQ);xpr=r(REt,"TFT5Model"),REt.forEach(t),$pr=r(gPe," (T5 model)"),gPe.forEach(t),kpr=i(D),ZT=n(D,"LI",{});var hPe=s(ZT);sbe=n(hPe,"STRONG",{});var PEt=s(sbe);Spr=r(PEt,"tapas"),PEt.forEach(t),Rpr=r(hPe," \u2014 "),yQ=n(hPe,"A",{href:!0});var BEt=s(yQ);Ppr=r(BEt,"TFTapasModel"),BEt.forEach(t),Bpr=r(hPe," (TAPAS model)"),hPe.forEach(t),Ipr=i(D),eM=n(D,"LI",{});var pPe=s(eM);lbe=n(pPe,"STRONG",{});var IEt=s(lbe);Npr=r(IEt,"transfo-xl"),IEt.forEach(t),qpr=r(pPe," \u2014 "),xQ=n(pPe,"A",{href:!0});var NEt=s(xQ);jpr=r(NEt,"TFTransfoXLModel"),NEt.forEach(t),Dpr=r(pPe," (Transformer-XL model)"),pPe.forEach(t),Gpr=i(D),oM=n(D,"LI",{});var _Pe=s(oM);ibe=n(_Pe,"STRONG",{});var qEt=s(ibe);Opr=r(qEt,"vit"),qEt.forEach(t),Vpr=r(_Pe," \u2014 "),$Q=n(_Pe,"A",{href:!0});var jEt=s($Q);Xpr=r(jEt,"TFViTModel"),jEt.forEach(t),zpr=r(_Pe," (ViT model)"),_Pe.forEach(t),Wpr=i(D),rM=n(D,"LI",{});var uPe=s(rM);dbe=n(uPe,"STRONG",{});var DEt=s(dbe);Qpr=r(DEt,"vit_mae"),DEt.forEach(t),Hpr=r(uPe," \u2014 "),kQ=n(uPe,"A",{href:!0});var GEt=s(kQ);Upr=r(GEt,"TFViTMAEModel"),GEt.forEach(t),Jpr=r(uPe," (ViTMAE model)"),uPe.forEach(t),Ypr=i(D),tM=n(D,"LI",{});var bPe=s(tM);cbe=n(bPe,"STRONG",{});var OEt=s(cbe);Kpr=r(OEt,"wav2vec2"),OEt.forEach(t),Zpr=r(bPe," \u2014 "),SQ=n(bPe,"A",{href:!0});var VEt=s(SQ);e_r=r(VEt,"TFWav2Vec2Model"),VEt.forEach(t),o_r=r(bPe," (Wav2Vec2 model)"),bPe.forEach(t),r_r=i(D),aM=n(D,"LI",{});var vPe=s(aM);fbe=n(vPe,"STRONG",{});var XEt=s(fbe);t_r=r(XEt,"xlm"),XEt.forEach(t),a_r=r(vPe," \u2014 "),RQ=n(vPe,"A",{href:!0});var zEt=s(RQ);n_r=r(zEt,"TFXLMModel"),zEt.forEach(t),s_r=r(vPe," (XLM model)"),vPe.forEach(t),l_r=i(D),nM=n(D,"LI",{});var FPe=s(nM);mbe=n(FPe,"STRONG",{});var WEt=s(mbe);i_r=r(WEt,"xlm-roberta"),WEt.forEach(t),d_r=r(FPe," \u2014 "),PQ=n(FPe,"A",{href:!0});var QEt=s(PQ);c_r=r(QEt,"TFXLMRobertaModel"),QEt.forEach(t),f_r=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),m_r=i(D),sM=n(D,"LI",{});var TPe=s(sM);gbe=n(TPe,"STRONG",{});var HEt=s(gbe);g_r=r(HEt,"xlnet"),HEt.forEach(t),h_r=r(TPe," \u2014 "),BQ=n(TPe,"A",{href:!0});var UEt=s(BQ);p_r=r(UEt,"TFXLNetModel"),UEt.forEach(t),__r=r(TPe," (XLNet model)"),TPe.forEach(t),D.forEach(t),u_r=i(pl),T(lM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),CDe=i(f),zd=n(f,"H2",{class:!0});var $Oe=s(zd);iM=n($Oe,"A",{id:!0,class:!0,href:!0});var JEt=s(iM);hbe=n(JEt,"SPAN",{});var YEt=s(hbe);T(k8.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),b_r=i($Oe),pbe=n($Oe,"SPAN",{});var KEt=s(pbe);v_r=r(KEt,"TFAutoModelForPreTraining"),KEt.forEach(t),$Oe.forEach(t),wDe=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(S8.$$.fragment,_l),F_r=i(_l),Wd=n(_l,"P",{});var Hee=s(Wd);T_r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IQ=n(Hee,"A",{href:!0});var ZEt=s(IQ);M_r=r(ZEt,"from_pretrained()"),ZEt.forEach(t),E_r=r(Hee," class method or the "),NQ=n(Hee,"A",{href:!0});var eCt=s(NQ);C_r=r(eCt,"from_config()"),eCt.forEach(t),w_r=r(Hee,` class
method.`),Hee.forEach(t),A_r=i(_l),R8=n(_l,"P",{});var kOe=s(R8);L_r=r(kOe,"This class cannot be instantiated directly using "),_be=n(kOe,"CODE",{});var oCt=s(_be);y_r=r(oCt,"__init__()"),oCt.forEach(t),x_r=r(kOe," (throws an error)."),kOe.forEach(t),$_r=i(_l),yt=n(_l,"DIV",{class:!0});var XA=s(yt);T(P8.$$.fragment,XA),k_r=i(XA),ube=n(XA,"P",{});var rCt=s(ube);S_r=r(rCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rCt.forEach(t),R_r=i(XA),Qd=n(XA,"P",{});var Uee=s(Qd);P_r=r(Uee,`Note:
Loading a model from its configuration file does `),bbe=n(Uee,"STRONG",{});var tCt=s(bbe);B_r=r(tCt,"not"),tCt.forEach(t),I_r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(Uee,"A",{href:!0});var aCt=s(qQ);N_r=r(aCt,"from_pretrained()"),aCt.forEach(t),q_r=r(Uee," to load the model weights."),Uee.forEach(t),j_r=i(XA),T(dM.$$.fragment,XA),XA.forEach(t),D_r=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(B8.$$.fragment,ul),G_r=i(ul),vbe=n(ul,"P",{});var nCt=s(vbe);O_r=r(nCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nCt.forEach(t),V_r=i(ul),Za=n(ul,"P",{});var zA=s(Za);X_r=r(zA,"The model class to instantiate is selected based on the "),Fbe=n(zA,"CODE",{});var sCt=s(Fbe);z_r=r(sCt,"model_type"),sCt.forEach(t),W_r=r(zA,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(zA,"CODE",{});var lCt=s(Tbe);Q_r=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),H_r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(zA,"CODE",{});var iCt=s(Mbe);U_r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),J_r=r(zA,":"),zA.forEach(t),Y_r=i(ul),se=n(ul,"UL",{});var le=s(se);cM=n(le,"LI",{});var MPe=s(cM);Ebe=n(MPe,"STRONG",{});var dCt=s(Ebe);K_r=r(dCt,"albert"),dCt.forEach(t),Z_r=r(MPe," \u2014 "),jQ=n(MPe,"A",{href:!0});var cCt=s(jQ);eur=r(cCt,"TFAlbertForPreTraining"),cCt.forEach(t),our=r(MPe," (ALBERT model)"),MPe.forEach(t),rur=i(le),fM=n(le,"LI",{});var EPe=s(fM);Cbe=n(EPe,"STRONG",{});var fCt=s(Cbe);tur=r(fCt,"bart"),fCt.forEach(t),aur=r(EPe," \u2014 "),DQ=n(EPe,"A",{href:!0});var mCt=s(DQ);nur=r(mCt,"TFBartForConditionalGeneration"),mCt.forEach(t),sur=r(EPe," (BART model)"),EPe.forEach(t),lur=i(le),mM=n(le,"LI",{});var CPe=s(mM);wbe=n(CPe,"STRONG",{});var gCt=s(wbe);iur=r(gCt,"bert"),gCt.forEach(t),dur=r(CPe," \u2014 "),GQ=n(CPe,"A",{href:!0});var hCt=s(GQ);cur=r(hCt,"TFBertForPreTraining"),hCt.forEach(t),fur=r(CPe," (BERT model)"),CPe.forEach(t),mur=i(le),gM=n(le,"LI",{});var wPe=s(gM);Abe=n(wPe,"STRONG",{});var pCt=s(Abe);gur=r(pCt,"camembert"),pCt.forEach(t),hur=r(wPe," \u2014 "),OQ=n(wPe,"A",{href:!0});var _Ct=s(OQ);pur=r(_Ct,"TFCamembertForMaskedLM"),_Ct.forEach(t),_ur=r(wPe," (CamemBERT model)"),wPe.forEach(t),uur=i(le),hM=n(le,"LI",{});var APe=s(hM);Lbe=n(APe,"STRONG",{});var uCt=s(Lbe);bur=r(uCt,"ctrl"),uCt.forEach(t),vur=r(APe," \u2014 "),VQ=n(APe,"A",{href:!0});var bCt=s(VQ);Fur=r(bCt,"TFCTRLLMHeadModel"),bCt.forEach(t),Tur=r(APe," (CTRL model)"),APe.forEach(t),Mur=i(le),pM=n(le,"LI",{});var LPe=s(pM);ybe=n(LPe,"STRONG",{});var vCt=s(ybe);Eur=r(vCt,"distilbert"),vCt.forEach(t),Cur=r(LPe," \u2014 "),XQ=n(LPe,"A",{href:!0});var FCt=s(XQ);wur=r(FCt,"TFDistilBertForMaskedLM"),FCt.forEach(t),Aur=r(LPe," (DistilBERT model)"),LPe.forEach(t),Lur=i(le),_M=n(le,"LI",{});var yPe=s(_M);xbe=n(yPe,"STRONG",{});var TCt=s(xbe);yur=r(TCt,"electra"),TCt.forEach(t),xur=r(yPe," \u2014 "),zQ=n(yPe,"A",{href:!0});var MCt=s(zQ);$ur=r(MCt,"TFElectraForPreTraining"),MCt.forEach(t),kur=r(yPe," (ELECTRA model)"),yPe.forEach(t),Sur=i(le),uM=n(le,"LI",{});var xPe=s(uM);$be=n(xPe,"STRONG",{});var ECt=s($be);Rur=r(ECt,"flaubert"),ECt.forEach(t),Pur=r(xPe," \u2014 "),WQ=n(xPe,"A",{href:!0});var CCt=s(WQ);Bur=r(CCt,"TFFlaubertWithLMHeadModel"),CCt.forEach(t),Iur=r(xPe," (FlauBERT model)"),xPe.forEach(t),Nur=i(le),bM=n(le,"LI",{});var $Pe=s(bM);kbe=n($Pe,"STRONG",{});var wCt=s(kbe);qur=r(wCt,"funnel"),wCt.forEach(t),jur=r($Pe," \u2014 "),QQ=n($Pe,"A",{href:!0});var ACt=s(QQ);Dur=r(ACt,"TFFunnelForPreTraining"),ACt.forEach(t),Gur=r($Pe," (Funnel Transformer model)"),$Pe.forEach(t),Our=i(le),vM=n(le,"LI",{});var kPe=s(vM);Sbe=n(kPe,"STRONG",{});var LCt=s(Sbe);Vur=r(LCt,"gpt2"),LCt.forEach(t),Xur=r(kPe," \u2014 "),HQ=n(kPe,"A",{href:!0});var yCt=s(HQ);zur=r(yCt,"TFGPT2LMHeadModel"),yCt.forEach(t),Wur=r(kPe," (OpenAI GPT-2 model)"),kPe.forEach(t),Qur=i(le),FM=n(le,"LI",{});var SPe=s(FM);Rbe=n(SPe,"STRONG",{});var xCt=s(Rbe);Hur=r(xCt,"layoutlm"),xCt.forEach(t),Uur=r(SPe," \u2014 "),UQ=n(SPe,"A",{href:!0});var $Ct=s(UQ);Jur=r($Ct,"TFLayoutLMForMaskedLM"),$Ct.forEach(t),Yur=r(SPe," (LayoutLM model)"),SPe.forEach(t),Kur=i(le),TM=n(le,"LI",{});var RPe=s(TM);Pbe=n(RPe,"STRONG",{});var kCt=s(Pbe);Zur=r(kCt,"lxmert"),kCt.forEach(t),e4r=r(RPe," \u2014 "),JQ=n(RPe,"A",{href:!0});var SCt=s(JQ);o4r=r(SCt,"TFLxmertForPreTraining"),SCt.forEach(t),r4r=r(RPe," (LXMERT model)"),RPe.forEach(t),t4r=i(le),MM=n(le,"LI",{});var PPe=s(MM);Bbe=n(PPe,"STRONG",{});var RCt=s(Bbe);a4r=r(RCt,"mobilebert"),RCt.forEach(t),n4r=r(PPe," \u2014 "),YQ=n(PPe,"A",{href:!0});var PCt=s(YQ);s4r=r(PCt,"TFMobileBertForPreTraining"),PCt.forEach(t),l4r=r(PPe," (MobileBERT model)"),PPe.forEach(t),i4r=i(le),EM=n(le,"LI",{});var BPe=s(EM);Ibe=n(BPe,"STRONG",{});var BCt=s(Ibe);d4r=r(BCt,"mpnet"),BCt.forEach(t),c4r=r(BPe," \u2014 "),KQ=n(BPe,"A",{href:!0});var ICt=s(KQ);f4r=r(ICt,"TFMPNetForMaskedLM"),ICt.forEach(t),m4r=r(BPe," (MPNet model)"),BPe.forEach(t),g4r=i(le),CM=n(le,"LI",{});var IPe=s(CM);Nbe=n(IPe,"STRONG",{});var NCt=s(Nbe);h4r=r(NCt,"openai-gpt"),NCt.forEach(t),p4r=r(IPe," \u2014 "),ZQ=n(IPe,"A",{href:!0});var qCt=s(ZQ);_4r=r(qCt,"TFOpenAIGPTLMHeadModel"),qCt.forEach(t),u4r=r(IPe," (OpenAI GPT model)"),IPe.forEach(t),b4r=i(le),wM=n(le,"LI",{});var NPe=s(wM);qbe=n(NPe,"STRONG",{});var jCt=s(qbe);v4r=r(jCt,"roberta"),jCt.forEach(t),F4r=r(NPe," \u2014 "),eH=n(NPe,"A",{href:!0});var DCt=s(eH);T4r=r(DCt,"TFRobertaForMaskedLM"),DCt.forEach(t),M4r=r(NPe," (RoBERTa model)"),NPe.forEach(t),E4r=i(le),AM=n(le,"LI",{});var qPe=s(AM);jbe=n(qPe,"STRONG",{});var GCt=s(jbe);C4r=r(GCt,"t5"),GCt.forEach(t),w4r=r(qPe," \u2014 "),oH=n(qPe,"A",{href:!0});var OCt=s(oH);A4r=r(OCt,"TFT5ForConditionalGeneration"),OCt.forEach(t),L4r=r(qPe," (T5 model)"),qPe.forEach(t),y4r=i(le),LM=n(le,"LI",{});var jPe=s(LM);Dbe=n(jPe,"STRONG",{});var VCt=s(Dbe);x4r=r(VCt,"tapas"),VCt.forEach(t),$4r=r(jPe," \u2014 "),rH=n(jPe,"A",{href:!0});var XCt=s(rH);k4r=r(XCt,"TFTapasForMaskedLM"),XCt.forEach(t),S4r=r(jPe," (TAPAS model)"),jPe.forEach(t),R4r=i(le),yM=n(le,"LI",{});var DPe=s(yM);Gbe=n(DPe,"STRONG",{});var zCt=s(Gbe);P4r=r(zCt,"transfo-xl"),zCt.forEach(t),B4r=r(DPe," \u2014 "),tH=n(DPe,"A",{href:!0});var WCt=s(tH);I4r=r(WCt,"TFTransfoXLLMHeadModel"),WCt.forEach(t),N4r=r(DPe," (Transformer-XL model)"),DPe.forEach(t),q4r=i(le),xM=n(le,"LI",{});var GPe=s(xM);Obe=n(GPe,"STRONG",{});var QCt=s(Obe);j4r=r(QCt,"vit_mae"),QCt.forEach(t),D4r=r(GPe," \u2014 "),aH=n(GPe,"A",{href:!0});var HCt=s(aH);G4r=r(HCt,"TFViTMAEForPreTraining"),HCt.forEach(t),O4r=r(GPe," (ViTMAE model)"),GPe.forEach(t),V4r=i(le),$M=n(le,"LI",{});var OPe=s($M);Vbe=n(OPe,"STRONG",{});var UCt=s(Vbe);X4r=r(UCt,"xlm"),UCt.forEach(t),z4r=r(OPe," \u2014 "),nH=n(OPe,"A",{href:!0});var JCt=s(nH);W4r=r(JCt,"TFXLMWithLMHeadModel"),JCt.forEach(t),Q4r=r(OPe," (XLM model)"),OPe.forEach(t),H4r=i(le),kM=n(le,"LI",{});var VPe=s(kM);Xbe=n(VPe,"STRONG",{});var YCt=s(Xbe);U4r=r(YCt,"xlm-roberta"),YCt.forEach(t),J4r=r(VPe," \u2014 "),sH=n(VPe,"A",{href:!0});var KCt=s(sH);Y4r=r(KCt,"TFXLMRobertaForMaskedLM"),KCt.forEach(t),K4r=r(VPe," (XLM-RoBERTa model)"),VPe.forEach(t),Z4r=i(le),SM=n(le,"LI",{});var XPe=s(SM);zbe=n(XPe,"STRONG",{});var ZCt=s(zbe);e1r=r(ZCt,"xlnet"),ZCt.forEach(t),o1r=r(XPe," \u2014 "),lH=n(XPe,"A",{href:!0});var e5t=s(lH);r1r=r(e5t,"TFXLNetLMHeadModel"),e5t.forEach(t),t1r=r(XPe," (XLNet model)"),XPe.forEach(t),le.forEach(t),a1r=i(ul),T(RM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),ADe=i(f),Hd=n(f,"H2",{class:!0});var SOe=s(Hd);PM=n(SOe,"A",{id:!0,class:!0,href:!0});var o5t=s(PM);Wbe=n(o5t,"SPAN",{});var r5t=s(Wbe);T(I8.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),n1r=i(SOe),Qbe=n(SOe,"SPAN",{});var t5t=s(Qbe);s1r=r(t5t,"TFAutoModelForCausalLM"),t5t.forEach(t),SOe.forEach(t),LDe=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(N8.$$.fragment,bl),l1r=i(bl),Ud=n(bl,"P",{});var Jee=s(Ud);i1r=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iH=n(Jee,"A",{href:!0});var a5t=s(iH);d1r=r(a5t,"from_pretrained()"),a5t.forEach(t),c1r=r(Jee," class method or the "),dH=n(Jee,"A",{href:!0});var n5t=s(dH);f1r=r(n5t,"from_config()"),n5t.forEach(t),m1r=r(Jee,` class
method.`),Jee.forEach(t),g1r=i(bl),q8=n(bl,"P",{});var ROe=s(q8);h1r=r(ROe,"This class cannot be instantiated directly using "),Hbe=n(ROe,"CODE",{});var s5t=s(Hbe);p1r=r(s5t,"__init__()"),s5t.forEach(t),_1r=r(ROe," (throws an error)."),ROe.forEach(t),u1r=i(bl),xt=n(bl,"DIV",{class:!0});var WA=s(xt);T(j8.$$.fragment,WA),b1r=i(WA),Ube=n(WA,"P",{});var l5t=s(Ube);v1r=r(l5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),l5t.forEach(t),F1r=i(WA),Jd=n(WA,"P",{});var Yee=s(Jd);T1r=r(Yee,`Note:
Loading a model from its configuration file does `),Jbe=n(Yee,"STRONG",{});var i5t=s(Jbe);M1r=r(i5t,"not"),i5t.forEach(t),E1r=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Yee,"A",{href:!0});var d5t=s(cH);C1r=r(d5t,"from_pretrained()"),d5t.forEach(t),w1r=r(Yee," to load the model weights."),Yee.forEach(t),A1r=i(WA),T(BM.$$.fragment,WA),WA.forEach(t),L1r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(D8.$$.fragment,vl),y1r=i(vl),Ybe=n(vl,"P",{});var c5t=s(Ybe);x1r=r(c5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c5t.forEach(t),$1r=i(vl),en=n(vl,"P",{});var QA=s(en);k1r=r(QA,"The model class to instantiate is selected based on the "),Kbe=n(QA,"CODE",{});var f5t=s(Kbe);S1r=r(f5t,"model_type"),f5t.forEach(t),R1r=r(QA,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(QA,"CODE",{});var m5t=s(Zbe);P1r=r(m5t,"pretrained_model_name_or_path"),m5t.forEach(t),B1r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(QA,"CODE",{});var g5t=s(e2e);I1r=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),N1r=r(QA,":"),QA.forEach(t),q1r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);IM=n(Ce,"LI",{});var zPe=s(IM);o2e=n(zPe,"STRONG",{});var h5t=s(o2e);j1r=r(h5t,"bert"),h5t.forEach(t),D1r=r(zPe," \u2014 "),fH=n(zPe,"A",{href:!0});var p5t=s(fH);G1r=r(p5t,"TFBertLMHeadModel"),p5t.forEach(t),O1r=r(zPe," (BERT model)"),zPe.forEach(t),V1r=i(Ce),NM=n(Ce,"LI",{});var WPe=s(NM);r2e=n(WPe,"STRONG",{});var _5t=s(r2e);X1r=r(_5t,"camembert"),_5t.forEach(t),z1r=r(WPe," \u2014 "),mH=n(WPe,"A",{href:!0});var u5t=s(mH);W1r=r(u5t,"TFCamembertForCausalLM"),u5t.forEach(t),Q1r=r(WPe," (CamemBERT model)"),WPe.forEach(t),H1r=i(Ce),qM=n(Ce,"LI",{});var QPe=s(qM);t2e=n(QPe,"STRONG",{});var b5t=s(t2e);U1r=r(b5t,"ctrl"),b5t.forEach(t),J1r=r(QPe," \u2014 "),gH=n(QPe,"A",{href:!0});var v5t=s(gH);Y1r=r(v5t,"TFCTRLLMHeadModel"),v5t.forEach(t),K1r=r(QPe," (CTRL model)"),QPe.forEach(t),Z1r=i(Ce),jM=n(Ce,"LI",{});var HPe=s(jM);a2e=n(HPe,"STRONG",{});var F5t=s(a2e);e7r=r(F5t,"gpt2"),F5t.forEach(t),o7r=r(HPe," \u2014 "),hH=n(HPe,"A",{href:!0});var T5t=s(hH);r7r=r(T5t,"TFGPT2LMHeadModel"),T5t.forEach(t),t7r=r(HPe," (OpenAI GPT-2 model)"),HPe.forEach(t),a7r=i(Ce),DM=n(Ce,"LI",{});var UPe=s(DM);n2e=n(UPe,"STRONG",{});var M5t=s(n2e);n7r=r(M5t,"gptj"),M5t.forEach(t),s7r=r(UPe," \u2014 "),pH=n(UPe,"A",{href:!0});var E5t=s(pH);l7r=r(E5t,"TFGPTJForCausalLM"),E5t.forEach(t),i7r=r(UPe," (GPT-J model)"),UPe.forEach(t),d7r=i(Ce),GM=n(Ce,"LI",{});var JPe=s(GM);s2e=n(JPe,"STRONG",{});var C5t=s(s2e);c7r=r(C5t,"openai-gpt"),C5t.forEach(t),f7r=r(JPe," \u2014 "),_H=n(JPe,"A",{href:!0});var w5t=s(_H);m7r=r(w5t,"TFOpenAIGPTLMHeadModel"),w5t.forEach(t),g7r=r(JPe," (OpenAI GPT model)"),JPe.forEach(t),h7r=i(Ce),OM=n(Ce,"LI",{});var YPe=s(OM);l2e=n(YPe,"STRONG",{});var A5t=s(l2e);p7r=r(A5t,"opt"),A5t.forEach(t),_7r=r(YPe," \u2014 "),uH=n(YPe,"A",{href:!0});var L5t=s(uH);u7r=r(L5t,"TFOPTForCausalLM"),L5t.forEach(t),b7r=r(YPe," (OPT model)"),YPe.forEach(t),v7r=i(Ce),VM=n(Ce,"LI",{});var KPe=s(VM);i2e=n(KPe,"STRONG",{});var y5t=s(i2e);F7r=r(y5t,"rembert"),y5t.forEach(t),T7r=r(KPe," \u2014 "),bH=n(KPe,"A",{href:!0});var x5t=s(bH);M7r=r(x5t,"TFRemBertForCausalLM"),x5t.forEach(t),E7r=r(KPe," (RemBERT model)"),KPe.forEach(t),C7r=i(Ce),XM=n(Ce,"LI",{});var ZPe=s(XM);d2e=n(ZPe,"STRONG",{});var $5t=s(d2e);w7r=r($5t,"roberta"),$5t.forEach(t),A7r=r(ZPe," \u2014 "),vH=n(ZPe,"A",{href:!0});var k5t=s(vH);L7r=r(k5t,"TFRobertaForCausalLM"),k5t.forEach(t),y7r=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),x7r=i(Ce),zM=n(Ce,"LI",{});var eBe=s(zM);c2e=n(eBe,"STRONG",{});var S5t=s(c2e);$7r=r(S5t,"roformer"),S5t.forEach(t),k7r=r(eBe," \u2014 "),FH=n(eBe,"A",{href:!0});var R5t=s(FH);S7r=r(R5t,"TFRoFormerForCausalLM"),R5t.forEach(t),R7r=r(eBe," (RoFormer model)"),eBe.forEach(t),P7r=i(Ce),WM=n(Ce,"LI",{});var oBe=s(WM);f2e=n(oBe,"STRONG",{});var P5t=s(f2e);B7r=r(P5t,"transfo-xl"),P5t.forEach(t),I7r=r(oBe," \u2014 "),TH=n(oBe,"A",{href:!0});var B5t=s(TH);N7r=r(B5t,"TFTransfoXLLMHeadModel"),B5t.forEach(t),q7r=r(oBe," (Transformer-XL model)"),oBe.forEach(t),j7r=i(Ce),QM=n(Ce,"LI",{});var rBe=s(QM);m2e=n(rBe,"STRONG",{});var I5t=s(m2e);D7r=r(I5t,"xlm"),I5t.forEach(t),G7r=r(rBe," \u2014 "),MH=n(rBe,"A",{href:!0});var N5t=s(MH);O7r=r(N5t,"TFXLMWithLMHeadModel"),N5t.forEach(t),V7r=r(rBe," (XLM model)"),rBe.forEach(t),X7r=i(Ce),HM=n(Ce,"LI",{});var tBe=s(HM);g2e=n(tBe,"STRONG",{});var q5t=s(g2e);z7r=r(q5t,"xlnet"),q5t.forEach(t),W7r=r(tBe," \u2014 "),EH=n(tBe,"A",{href:!0});var j5t=s(EH);Q7r=r(j5t,"TFXLNetLMHeadModel"),j5t.forEach(t),H7r=r(tBe," (XLNet model)"),tBe.forEach(t),Ce.forEach(t),U7r=i(vl),T(UM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),yDe=i(f),Yd=n(f,"H2",{class:!0});var POe=s(Yd);JM=n(POe,"A",{id:!0,class:!0,href:!0});var D5t=s(JM);h2e=n(D5t,"SPAN",{});var G5t=s(h2e);T(G8.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),J7r=i(POe),p2e=n(POe,"SPAN",{});var O5t=s(p2e);Y7r=r(O5t,"TFAutoModelForImageClassification"),O5t.forEach(t),POe.forEach(t),xDe=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(O8.$$.fragment,Fl),K7r=i(Fl),Kd=n(Fl,"P",{});var Kee=s(Kd);Z7r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CH=n(Kee,"A",{href:!0});var V5t=s(CH);ebr=r(V5t,"from_pretrained()"),V5t.forEach(t),obr=r(Kee," class method or the "),wH=n(Kee,"A",{href:!0});var X5t=s(wH);rbr=r(X5t,"from_config()"),X5t.forEach(t),tbr=r(Kee,` class
method.`),Kee.forEach(t),abr=i(Fl),V8=n(Fl,"P",{});var BOe=s(V8);nbr=r(BOe,"This class cannot be instantiated directly using "),_2e=n(BOe,"CODE",{});var z5t=s(_2e);sbr=r(z5t,"__init__()"),z5t.forEach(t),lbr=r(BOe," (throws an error)."),BOe.forEach(t),ibr=i(Fl),$t=n(Fl,"DIV",{class:!0});var HA=s($t);T(X8.$$.fragment,HA),dbr=i(HA),u2e=n(HA,"P",{});var W5t=s(u2e);cbr=r(W5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),W5t.forEach(t),fbr=i(HA),Zd=n(HA,"P",{});var Zee=s(Zd);mbr=r(Zee,`Note:
Loading a model from its configuration file does `),b2e=n(Zee,"STRONG",{});var Q5t=s(b2e);gbr=r(Q5t,"not"),Q5t.forEach(t),hbr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(Zee,"A",{href:!0});var H5t=s(AH);pbr=r(H5t,"from_pretrained()"),H5t.forEach(t),_br=r(Zee," to load the model weights."),Zee.forEach(t),ubr=i(HA),T(YM.$$.fragment,HA),HA.forEach(t),bbr=i(Fl),yr=n(Fl,"DIV",{class:!0});var Tl=s(yr);T(z8.$$.fragment,Tl),vbr=i(Tl),v2e=n(Tl,"P",{});var U5t=s(v2e);Fbr=r(U5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),U5t.forEach(t),Tbr=i(Tl),on=n(Tl,"P",{});var UA=s(on);Mbr=r(UA,"The model class to instantiate is selected based on the "),F2e=n(UA,"CODE",{});var J5t=s(F2e);Ebr=r(J5t,"model_type"),J5t.forEach(t),Cbr=r(UA,` property of the config object (either
passed as an argument or loaded from `),T2e=n(UA,"CODE",{});var Y5t=s(T2e);wbr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),Abr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(UA,"CODE",{});var K5t=s(M2e);Lbr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),ybr=r(UA,":"),UA.forEach(t),xbr=i(Tl),rn=n(Tl,"UL",{});var JA=s(rn);KM=n(JA,"LI",{});var aBe=s(KM);E2e=n(aBe,"STRONG",{});var Z5t=s(E2e);$br=r(Z5t,"convnext"),Z5t.forEach(t),kbr=r(aBe," \u2014 "),LH=n(aBe,"A",{href:!0});var e3t=s(LH);Sbr=r(e3t,"TFConvNextForImageClassification"),e3t.forEach(t),Rbr=r(aBe," (ConvNeXT model)"),aBe.forEach(t),Pbr=i(JA),ZM=n(JA,"LI",{});var nBe=s(ZM);C2e=n(nBe,"STRONG",{});var o3t=s(C2e);Bbr=r(o3t,"data2vec-vision"),o3t.forEach(t),Ibr=r(nBe," \u2014 "),yH=n(nBe,"A",{href:!0});var r3t=s(yH);Nbr=r(r3t,"TFData2VecVisionForImageClassification"),r3t.forEach(t),qbr=r(nBe," (Data2VecVision model)"),nBe.forEach(t),jbr=i(JA),eE=n(JA,"LI",{});var sBe=s(eE);w2e=n(sBe,"STRONG",{});var t3t=s(w2e);Dbr=r(t3t,"swin"),t3t.forEach(t),Gbr=r(sBe," \u2014 "),xH=n(sBe,"A",{href:!0});var a3t=s(xH);Obr=r(a3t,"TFSwinForImageClassification"),a3t.forEach(t),Vbr=r(sBe," (Swin Transformer model)"),sBe.forEach(t),Xbr=i(JA),oE=n(JA,"LI",{});var lBe=s(oE);A2e=n(lBe,"STRONG",{});var n3t=s(A2e);zbr=r(n3t,"vit"),n3t.forEach(t),Wbr=r(lBe," \u2014 "),$H=n(lBe,"A",{href:!0});var s3t=s($H);Qbr=r(s3t,"TFViTForImageClassification"),s3t.forEach(t),Hbr=r(lBe," (ViT model)"),lBe.forEach(t),JA.forEach(t),Ubr=i(Tl),T(rE.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),$De=i(f),ec=n(f,"H2",{class:!0});var IOe=s(ec);tE=n(IOe,"A",{id:!0,class:!0,href:!0});var l3t=s(tE);L2e=n(l3t,"SPAN",{});var i3t=s(L2e);T(W8.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),Jbr=i(IOe),y2e=n(IOe,"SPAN",{});var d3t=s(y2e);Ybr=r(d3t,"TFAutoModelForMaskedLM"),d3t.forEach(t),IOe.forEach(t),kDe=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(Q8.$$.fragment,Ml),Kbr=i(Ml),oc=n(Ml,"P",{});var eoe=s(oc);Zbr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kH=n(eoe,"A",{href:!0});var c3t=s(kH);e2r=r(c3t,"from_pretrained()"),c3t.forEach(t),o2r=r(eoe," class method or the "),SH=n(eoe,"A",{href:!0});var f3t=s(SH);r2r=r(f3t,"from_config()"),f3t.forEach(t),t2r=r(eoe,` class
method.`),eoe.forEach(t),a2r=i(Ml),H8=n(Ml,"P",{});var NOe=s(H8);n2r=r(NOe,"This class cannot be instantiated directly using "),x2e=n(NOe,"CODE",{});var m3t=s(x2e);s2r=r(m3t,"__init__()"),m3t.forEach(t),l2r=r(NOe," (throws an error)."),NOe.forEach(t),i2r=i(Ml),kt=n(Ml,"DIV",{class:!0});var YA=s(kt);T(U8.$$.fragment,YA),d2r=i(YA),$2e=n(YA,"P",{});var g3t=s($2e);c2r=r(g3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g3t.forEach(t),f2r=i(YA),rc=n(YA,"P",{});var ooe=s(rc);m2r=r(ooe,`Note:
Loading a model from its configuration file does `),k2e=n(ooe,"STRONG",{});var h3t=s(k2e);g2r=r(h3t,"not"),h3t.forEach(t),h2r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(ooe,"A",{href:!0});var p3t=s(RH);p2r=r(p3t,"from_pretrained()"),p3t.forEach(t),_2r=r(ooe," to load the model weights."),ooe.forEach(t),u2r=i(YA),T(aE.$$.fragment,YA),YA.forEach(t),b2r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(J8.$$.fragment,El),v2r=i(El),S2e=n(El,"P",{});var _3t=s(S2e);F2r=r(_3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_3t.forEach(t),T2r=i(El),tn=n(El,"P",{});var KA=s(tn);M2r=r(KA,"The model class to instantiate is selected based on the "),R2e=n(KA,"CODE",{});var u3t=s(R2e);E2r=r(u3t,"model_type"),u3t.forEach(t),C2r=r(KA,` property of the config object (either
passed as an argument or loaded from `),P2e=n(KA,"CODE",{});var b3t=s(P2e);w2r=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),A2r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(KA,"CODE",{});var v3t=s(B2e);L2r=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),y2r=r(KA,":"),KA.forEach(t),x2r=i(El),ie=n(El,"UL",{});var fe=s(ie);nE=n(fe,"LI",{});var iBe=s(nE);I2e=n(iBe,"STRONG",{});var F3t=s(I2e);$2r=r(F3t,"albert"),F3t.forEach(t),k2r=r(iBe," \u2014 "),PH=n(iBe,"A",{href:!0});var T3t=s(PH);S2r=r(T3t,"TFAlbertForMaskedLM"),T3t.forEach(t),R2r=r(iBe," (ALBERT model)"),iBe.forEach(t),P2r=i(fe),sE=n(fe,"LI",{});var dBe=s(sE);N2e=n(dBe,"STRONG",{});var M3t=s(N2e);B2r=r(M3t,"bert"),M3t.forEach(t),I2r=r(dBe," \u2014 "),BH=n(dBe,"A",{href:!0});var E3t=s(BH);N2r=r(E3t,"TFBertForMaskedLM"),E3t.forEach(t),q2r=r(dBe," (BERT model)"),dBe.forEach(t),j2r=i(fe),lE=n(fe,"LI",{});var cBe=s(lE);q2e=n(cBe,"STRONG",{});var C3t=s(q2e);D2r=r(C3t,"camembert"),C3t.forEach(t),G2r=r(cBe," \u2014 "),IH=n(cBe,"A",{href:!0});var w3t=s(IH);O2r=r(w3t,"TFCamembertForMaskedLM"),w3t.forEach(t),V2r=r(cBe," (CamemBERT model)"),cBe.forEach(t),X2r=i(fe),iE=n(fe,"LI",{});var fBe=s(iE);j2e=n(fBe,"STRONG",{});var A3t=s(j2e);z2r=r(A3t,"convbert"),A3t.forEach(t),W2r=r(fBe," \u2014 "),NH=n(fBe,"A",{href:!0});var L3t=s(NH);Q2r=r(L3t,"TFConvBertForMaskedLM"),L3t.forEach(t),H2r=r(fBe," (ConvBERT model)"),fBe.forEach(t),U2r=i(fe),dE=n(fe,"LI",{});var mBe=s(dE);D2e=n(mBe,"STRONG",{});var y3t=s(D2e);J2r=r(y3t,"deberta"),y3t.forEach(t),Y2r=r(mBe," \u2014 "),qH=n(mBe,"A",{href:!0});var x3t=s(qH);K2r=r(x3t,"TFDebertaForMaskedLM"),x3t.forEach(t),Z2r=r(mBe," (DeBERTa model)"),mBe.forEach(t),evr=i(fe),cE=n(fe,"LI",{});var gBe=s(cE);G2e=n(gBe,"STRONG",{});var $3t=s(G2e);ovr=r($3t,"deberta-v2"),$3t.forEach(t),rvr=r(gBe," \u2014 "),jH=n(gBe,"A",{href:!0});var k3t=s(jH);tvr=r(k3t,"TFDebertaV2ForMaskedLM"),k3t.forEach(t),avr=r(gBe," (DeBERTa-v2 model)"),gBe.forEach(t),nvr=i(fe),fE=n(fe,"LI",{});var hBe=s(fE);O2e=n(hBe,"STRONG",{});var S3t=s(O2e);svr=r(S3t,"distilbert"),S3t.forEach(t),lvr=r(hBe," \u2014 "),DH=n(hBe,"A",{href:!0});var R3t=s(DH);ivr=r(R3t,"TFDistilBertForMaskedLM"),R3t.forEach(t),dvr=r(hBe," (DistilBERT model)"),hBe.forEach(t),cvr=i(fe),mE=n(fe,"LI",{});var pBe=s(mE);V2e=n(pBe,"STRONG",{});var P3t=s(V2e);fvr=r(P3t,"electra"),P3t.forEach(t),mvr=r(pBe," \u2014 "),GH=n(pBe,"A",{href:!0});var B3t=s(GH);gvr=r(B3t,"TFElectraForMaskedLM"),B3t.forEach(t),hvr=r(pBe," (ELECTRA model)"),pBe.forEach(t),pvr=i(fe),gE=n(fe,"LI",{});var _Be=s(gE);X2e=n(_Be,"STRONG",{});var I3t=s(X2e);_vr=r(I3t,"flaubert"),I3t.forEach(t),uvr=r(_Be," \u2014 "),OH=n(_Be,"A",{href:!0});var N3t=s(OH);bvr=r(N3t,"TFFlaubertWithLMHeadModel"),N3t.forEach(t),vvr=r(_Be," (FlauBERT model)"),_Be.forEach(t),Fvr=i(fe),hE=n(fe,"LI",{});var uBe=s(hE);z2e=n(uBe,"STRONG",{});var q3t=s(z2e);Tvr=r(q3t,"funnel"),q3t.forEach(t),Mvr=r(uBe," \u2014 "),VH=n(uBe,"A",{href:!0});var j3t=s(VH);Evr=r(j3t,"TFFunnelForMaskedLM"),j3t.forEach(t),Cvr=r(uBe," (Funnel Transformer model)"),uBe.forEach(t),wvr=i(fe),pE=n(fe,"LI",{});var bBe=s(pE);W2e=n(bBe,"STRONG",{});var D3t=s(W2e);Avr=r(D3t,"layoutlm"),D3t.forEach(t),Lvr=r(bBe," \u2014 "),XH=n(bBe,"A",{href:!0});var G3t=s(XH);yvr=r(G3t,"TFLayoutLMForMaskedLM"),G3t.forEach(t),xvr=r(bBe," (LayoutLM model)"),bBe.forEach(t),$vr=i(fe),_E=n(fe,"LI",{});var vBe=s(_E);Q2e=n(vBe,"STRONG",{});var O3t=s(Q2e);kvr=r(O3t,"longformer"),O3t.forEach(t),Svr=r(vBe," \u2014 "),zH=n(vBe,"A",{href:!0});var V3t=s(zH);Rvr=r(V3t,"TFLongformerForMaskedLM"),V3t.forEach(t),Pvr=r(vBe," (Longformer model)"),vBe.forEach(t),Bvr=i(fe),uE=n(fe,"LI",{});var FBe=s(uE);H2e=n(FBe,"STRONG",{});var X3t=s(H2e);Ivr=r(X3t,"mobilebert"),X3t.forEach(t),Nvr=r(FBe," \u2014 "),WH=n(FBe,"A",{href:!0});var z3t=s(WH);qvr=r(z3t,"TFMobileBertForMaskedLM"),z3t.forEach(t),jvr=r(FBe," (MobileBERT model)"),FBe.forEach(t),Dvr=i(fe),bE=n(fe,"LI",{});var TBe=s(bE);U2e=n(TBe,"STRONG",{});var W3t=s(U2e);Gvr=r(W3t,"mpnet"),W3t.forEach(t),Ovr=r(TBe," \u2014 "),QH=n(TBe,"A",{href:!0});var Q3t=s(QH);Vvr=r(Q3t,"TFMPNetForMaskedLM"),Q3t.forEach(t),Xvr=r(TBe," (MPNet model)"),TBe.forEach(t),zvr=i(fe),vE=n(fe,"LI",{});var MBe=s(vE);J2e=n(MBe,"STRONG",{});var H3t=s(J2e);Wvr=r(H3t,"rembert"),H3t.forEach(t),Qvr=r(MBe," \u2014 "),HH=n(MBe,"A",{href:!0});var U3t=s(HH);Hvr=r(U3t,"TFRemBertForMaskedLM"),U3t.forEach(t),Uvr=r(MBe," (RemBERT model)"),MBe.forEach(t),Jvr=i(fe),FE=n(fe,"LI",{});var EBe=s(FE);Y2e=n(EBe,"STRONG",{});var J3t=s(Y2e);Yvr=r(J3t,"roberta"),J3t.forEach(t),Kvr=r(EBe," \u2014 "),UH=n(EBe,"A",{href:!0});var Y3t=s(UH);Zvr=r(Y3t,"TFRobertaForMaskedLM"),Y3t.forEach(t),eFr=r(EBe," (RoBERTa model)"),EBe.forEach(t),oFr=i(fe),TE=n(fe,"LI",{});var CBe=s(TE);K2e=n(CBe,"STRONG",{});var K3t=s(K2e);rFr=r(K3t,"roformer"),K3t.forEach(t),tFr=r(CBe," \u2014 "),JH=n(CBe,"A",{href:!0});var Z3t=s(JH);aFr=r(Z3t,"TFRoFormerForMaskedLM"),Z3t.forEach(t),nFr=r(CBe," (RoFormer model)"),CBe.forEach(t),sFr=i(fe),ME=n(fe,"LI",{});var wBe=s(ME);Z2e=n(wBe,"STRONG",{});var e0t=s(Z2e);lFr=r(e0t,"tapas"),e0t.forEach(t),iFr=r(wBe," \u2014 "),YH=n(wBe,"A",{href:!0});var o0t=s(YH);dFr=r(o0t,"TFTapasForMaskedLM"),o0t.forEach(t),cFr=r(wBe," (TAPAS model)"),wBe.forEach(t),fFr=i(fe),EE=n(fe,"LI",{});var ABe=s(EE);eve=n(ABe,"STRONG",{});var r0t=s(eve);mFr=r(r0t,"xlm"),r0t.forEach(t),gFr=r(ABe," \u2014 "),KH=n(ABe,"A",{href:!0});var t0t=s(KH);hFr=r(t0t,"TFXLMWithLMHeadModel"),t0t.forEach(t),pFr=r(ABe," (XLM model)"),ABe.forEach(t),_Fr=i(fe),CE=n(fe,"LI",{});var LBe=s(CE);ove=n(LBe,"STRONG",{});var a0t=s(ove);uFr=r(a0t,"xlm-roberta"),a0t.forEach(t),bFr=r(LBe," \u2014 "),ZH=n(LBe,"A",{href:!0});var n0t=s(ZH);vFr=r(n0t,"TFXLMRobertaForMaskedLM"),n0t.forEach(t),FFr=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),fe.forEach(t),TFr=i(El),T(wE.$$.fragment,El),El.forEach(t),Ml.forEach(t),SDe=i(f),tc=n(f,"H2",{class:!0});var qOe=s(tc);AE=n(qOe,"A",{id:!0,class:!0,href:!0});var s0t=s(AE);rve=n(s0t,"SPAN",{});var l0t=s(rve);T(Y8.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),MFr=i(qOe),tve=n(qOe,"SPAN",{});var i0t=s(tve);EFr=r(i0t,"TFAutoModelForSeq2SeqLM"),i0t.forEach(t),qOe.forEach(t),RDe=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(K8.$$.fragment,Cl),CFr=i(Cl),ac=n(Cl,"P",{});var roe=s(ac);wFr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eU=n(roe,"A",{href:!0});var d0t=s(eU);AFr=r(d0t,"from_pretrained()"),d0t.forEach(t),LFr=r(roe," class method or the "),oU=n(roe,"A",{href:!0});var c0t=s(oU);yFr=r(c0t,"from_config()"),c0t.forEach(t),xFr=r(roe,` class
method.`),roe.forEach(t),$Fr=i(Cl),Z8=n(Cl,"P",{});var jOe=s(Z8);kFr=r(jOe,"This class cannot be instantiated directly using "),ave=n(jOe,"CODE",{});var f0t=s(ave);SFr=r(f0t,"__init__()"),f0t.forEach(t),RFr=r(jOe," (throws an error)."),jOe.forEach(t),PFr=i(Cl),St=n(Cl,"DIV",{class:!0});var ZA=s(St);T(e9.$$.fragment,ZA),BFr=i(ZA),nve=n(ZA,"P",{});var m0t=s(nve);IFr=r(m0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),m0t.forEach(t),NFr=i(ZA),nc=n(ZA,"P",{});var toe=s(nc);qFr=r(toe,`Note:
Loading a model from its configuration file does `),sve=n(toe,"STRONG",{});var g0t=s(sve);jFr=r(g0t,"not"),g0t.forEach(t),DFr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(toe,"A",{href:!0});var h0t=s(rU);GFr=r(h0t,"from_pretrained()"),h0t.forEach(t),OFr=r(toe," to load the model weights."),toe.forEach(t),VFr=i(ZA),T(LE.$$.fragment,ZA),ZA.forEach(t),XFr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(o9.$$.fragment,wl),zFr=i(wl),lve=n(wl,"P",{});var p0t=s(lve);WFr=r(p0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p0t.forEach(t),QFr=i(wl),an=n(wl,"P",{});var e6=s(an);HFr=r(e6,"The model class to instantiate is selected based on the "),ive=n(e6,"CODE",{});var _0t=s(ive);UFr=r(_0t,"model_type"),_0t.forEach(t),JFr=r(e6,` property of the config object (either
passed as an argument or loaded from `),dve=n(e6,"CODE",{});var u0t=s(dve);YFr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),KFr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(e6,"CODE",{});var b0t=s(cve);ZFr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),eTr=r(e6,":"),e6.forEach(t),oTr=i(wl),ye=n(wl,"UL",{});var Ie=s(ye);yE=n(Ie,"LI",{});var yBe=s(yE);fve=n(yBe,"STRONG",{});var v0t=s(fve);rTr=r(v0t,"bart"),v0t.forEach(t),tTr=r(yBe," \u2014 "),tU=n(yBe,"A",{href:!0});var F0t=s(tU);aTr=r(F0t,"TFBartForConditionalGeneration"),F0t.forEach(t),nTr=r(yBe," (BART model)"),yBe.forEach(t),sTr=i(Ie),xE=n(Ie,"LI",{});var xBe=s(xE);mve=n(xBe,"STRONG",{});var T0t=s(mve);lTr=r(T0t,"blenderbot"),T0t.forEach(t),iTr=r(xBe," \u2014 "),aU=n(xBe,"A",{href:!0});var M0t=s(aU);dTr=r(M0t,"TFBlenderbotForConditionalGeneration"),M0t.forEach(t),cTr=r(xBe," (Blenderbot model)"),xBe.forEach(t),fTr=i(Ie),$E=n(Ie,"LI",{});var $Be=s($E);gve=n($Be,"STRONG",{});var E0t=s(gve);mTr=r(E0t,"blenderbot-small"),E0t.forEach(t),gTr=r($Be," \u2014 "),nU=n($Be,"A",{href:!0});var C0t=s(nU);hTr=r(C0t,"TFBlenderbotSmallForConditionalGeneration"),C0t.forEach(t),pTr=r($Be," (BlenderbotSmall model)"),$Be.forEach(t),_Tr=i(Ie),kE=n(Ie,"LI",{});var kBe=s(kE);hve=n(kBe,"STRONG",{});var w0t=s(hve);uTr=r(w0t,"encoder-decoder"),w0t.forEach(t),bTr=r(kBe," \u2014 "),sU=n(kBe,"A",{href:!0});var A0t=s(sU);vTr=r(A0t,"TFEncoderDecoderModel"),A0t.forEach(t),FTr=r(kBe," (Encoder decoder model)"),kBe.forEach(t),TTr=i(Ie),SE=n(Ie,"LI",{});var SBe=s(SE);pve=n(SBe,"STRONG",{});var L0t=s(pve);MTr=r(L0t,"led"),L0t.forEach(t),ETr=r(SBe," \u2014 "),lU=n(SBe,"A",{href:!0});var y0t=s(lU);CTr=r(y0t,"TFLEDForConditionalGeneration"),y0t.forEach(t),wTr=r(SBe," (LED model)"),SBe.forEach(t),ATr=i(Ie),RE=n(Ie,"LI",{});var RBe=s(RE);_ve=n(RBe,"STRONG",{});var x0t=s(_ve);LTr=r(x0t,"marian"),x0t.forEach(t),yTr=r(RBe," \u2014 "),iU=n(RBe,"A",{href:!0});var $0t=s(iU);xTr=r($0t,"TFMarianMTModel"),$0t.forEach(t),$Tr=r(RBe," (Marian model)"),RBe.forEach(t),kTr=i(Ie),PE=n(Ie,"LI",{});var PBe=s(PE);uve=n(PBe,"STRONG",{});var k0t=s(uve);STr=r(k0t,"mbart"),k0t.forEach(t),RTr=r(PBe," \u2014 "),dU=n(PBe,"A",{href:!0});var S0t=s(dU);PTr=r(S0t,"TFMBartForConditionalGeneration"),S0t.forEach(t),BTr=r(PBe," (mBART model)"),PBe.forEach(t),ITr=i(Ie),BE=n(Ie,"LI",{});var BBe=s(BE);bve=n(BBe,"STRONG",{});var R0t=s(bve);NTr=r(R0t,"mt5"),R0t.forEach(t),qTr=r(BBe," \u2014 "),cU=n(BBe,"A",{href:!0});var P0t=s(cU);jTr=r(P0t,"TFMT5ForConditionalGeneration"),P0t.forEach(t),DTr=r(BBe," (MT5 model)"),BBe.forEach(t),GTr=i(Ie),IE=n(Ie,"LI",{});var IBe=s(IE);vve=n(IBe,"STRONG",{});var B0t=s(vve);OTr=r(B0t,"pegasus"),B0t.forEach(t),VTr=r(IBe," \u2014 "),fU=n(IBe,"A",{href:!0});var I0t=s(fU);XTr=r(I0t,"TFPegasusForConditionalGeneration"),I0t.forEach(t),zTr=r(IBe," (Pegasus model)"),IBe.forEach(t),WTr=i(Ie),NE=n(Ie,"LI",{});var NBe=s(NE);Fve=n(NBe,"STRONG",{});var N0t=s(Fve);QTr=r(N0t,"t5"),N0t.forEach(t),HTr=r(NBe," \u2014 "),mU=n(NBe,"A",{href:!0});var q0t=s(mU);UTr=r(q0t,"TFT5ForConditionalGeneration"),q0t.forEach(t),JTr=r(NBe," (T5 model)"),NBe.forEach(t),Ie.forEach(t),YTr=i(wl),T(qE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),PDe=i(f),sc=n(f,"H2",{class:!0});var DOe=s(sc);jE=n(DOe,"A",{id:!0,class:!0,href:!0});var j0t=s(jE);Tve=n(j0t,"SPAN",{});var D0t=s(Tve);T(r9.$$.fragment,D0t),D0t.forEach(t),j0t.forEach(t),KTr=i(DOe),Mve=n(DOe,"SPAN",{});var G0t=s(Mve);ZTr=r(G0t,"TFAutoModelForSequenceClassification"),G0t.forEach(t),DOe.forEach(t),BDe=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(t9.$$.fragment,Al),eMr=i(Al),lc=n(Al,"P",{});var aoe=s(lc);oMr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gU=n(aoe,"A",{href:!0});var O0t=s(gU);rMr=r(O0t,"from_pretrained()"),O0t.forEach(t),tMr=r(aoe," class method or the "),hU=n(aoe,"A",{href:!0});var V0t=s(hU);aMr=r(V0t,"from_config()"),V0t.forEach(t),nMr=r(aoe,` class
method.`),aoe.forEach(t),sMr=i(Al),a9=n(Al,"P",{});var GOe=s(a9);lMr=r(GOe,"This class cannot be instantiated directly using "),Eve=n(GOe,"CODE",{});var X0t=s(Eve);iMr=r(X0t,"__init__()"),X0t.forEach(t),dMr=r(GOe," (throws an error)."),GOe.forEach(t),cMr=i(Al),Rt=n(Al,"DIV",{class:!0});var o6=s(Rt);T(n9.$$.fragment,o6),fMr=i(o6),Cve=n(o6,"P",{});var z0t=s(Cve);mMr=r(z0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z0t.forEach(t),gMr=i(o6),ic=n(o6,"P",{});var noe=s(ic);hMr=r(noe,`Note:
Loading a model from its configuration file does `),wve=n(noe,"STRONG",{});var W0t=s(wve);pMr=r(W0t,"not"),W0t.forEach(t),_Mr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(noe,"A",{href:!0});var Q0t=s(pU);uMr=r(Q0t,"from_pretrained()"),Q0t.forEach(t),bMr=r(noe," to load the model weights."),noe.forEach(t),vMr=i(o6),T(DE.$$.fragment,o6),o6.forEach(t),FMr=i(Al),kr=n(Al,"DIV",{class:!0});var Ll=s(kr);T(s9.$$.fragment,Ll),TMr=i(Ll),Ave=n(Ll,"P",{});var H0t=s(Ave);MMr=r(H0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H0t.forEach(t),EMr=i(Ll),nn=n(Ll,"P",{});var r6=s(nn);CMr=r(r6,"The model class to instantiate is selected based on the "),Lve=n(r6,"CODE",{});var U0t=s(Lve);wMr=r(U0t,"model_type"),U0t.forEach(t),AMr=r(r6,` property of the config object (either
passed as an argument or loaded from `),yve=n(r6,"CODE",{});var J0t=s(yve);LMr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),yMr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(r6,"CODE",{});var Y0t=s(xve);xMr=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),$Mr=r(r6,":"),r6.forEach(t),kMr=i(Ll),oe=n(Ll,"UL",{});var ae=s(oe);GE=n(ae,"LI",{});var qBe=s(GE);$ve=n(qBe,"STRONG",{});var K0t=s($ve);SMr=r(K0t,"albert"),K0t.forEach(t),RMr=r(qBe," \u2014 "),_U=n(qBe,"A",{href:!0});var Z0t=s(_U);PMr=r(Z0t,"TFAlbertForSequenceClassification"),Z0t.forEach(t),BMr=r(qBe," (ALBERT model)"),qBe.forEach(t),IMr=i(ae),OE=n(ae,"LI",{});var jBe=s(OE);kve=n(jBe,"STRONG",{});var ewt=s(kve);NMr=r(ewt,"bert"),ewt.forEach(t),qMr=r(jBe," \u2014 "),uU=n(jBe,"A",{href:!0});var owt=s(uU);jMr=r(owt,"TFBertForSequenceClassification"),owt.forEach(t),DMr=r(jBe," (BERT model)"),jBe.forEach(t),GMr=i(ae),VE=n(ae,"LI",{});var DBe=s(VE);Sve=n(DBe,"STRONG",{});var rwt=s(Sve);OMr=r(rwt,"camembert"),rwt.forEach(t),VMr=r(DBe," \u2014 "),bU=n(DBe,"A",{href:!0});var twt=s(bU);XMr=r(twt,"TFCamembertForSequenceClassification"),twt.forEach(t),zMr=r(DBe," (CamemBERT model)"),DBe.forEach(t),WMr=i(ae),XE=n(ae,"LI",{});var GBe=s(XE);Rve=n(GBe,"STRONG",{});var awt=s(Rve);QMr=r(awt,"convbert"),awt.forEach(t),HMr=r(GBe," \u2014 "),vU=n(GBe,"A",{href:!0});var nwt=s(vU);UMr=r(nwt,"TFConvBertForSequenceClassification"),nwt.forEach(t),JMr=r(GBe," (ConvBERT model)"),GBe.forEach(t),YMr=i(ae),zE=n(ae,"LI",{});var OBe=s(zE);Pve=n(OBe,"STRONG",{});var swt=s(Pve);KMr=r(swt,"ctrl"),swt.forEach(t),ZMr=r(OBe," \u2014 "),FU=n(OBe,"A",{href:!0});var lwt=s(FU);eEr=r(lwt,"TFCTRLForSequenceClassification"),lwt.forEach(t),oEr=r(OBe," (CTRL model)"),OBe.forEach(t),rEr=i(ae),WE=n(ae,"LI",{});var VBe=s(WE);Bve=n(VBe,"STRONG",{});var iwt=s(Bve);tEr=r(iwt,"deberta"),iwt.forEach(t),aEr=r(VBe," \u2014 "),TU=n(VBe,"A",{href:!0});var dwt=s(TU);nEr=r(dwt,"TFDebertaForSequenceClassification"),dwt.forEach(t),sEr=r(VBe," (DeBERTa model)"),VBe.forEach(t),lEr=i(ae),QE=n(ae,"LI",{});var XBe=s(QE);Ive=n(XBe,"STRONG",{});var cwt=s(Ive);iEr=r(cwt,"deberta-v2"),cwt.forEach(t),dEr=r(XBe," \u2014 "),MU=n(XBe,"A",{href:!0});var fwt=s(MU);cEr=r(fwt,"TFDebertaV2ForSequenceClassification"),fwt.forEach(t),fEr=r(XBe," (DeBERTa-v2 model)"),XBe.forEach(t),mEr=i(ae),HE=n(ae,"LI",{});var zBe=s(HE);Nve=n(zBe,"STRONG",{});var mwt=s(Nve);gEr=r(mwt,"distilbert"),mwt.forEach(t),hEr=r(zBe," \u2014 "),EU=n(zBe,"A",{href:!0});var gwt=s(EU);pEr=r(gwt,"TFDistilBertForSequenceClassification"),gwt.forEach(t),_Er=r(zBe," (DistilBERT model)"),zBe.forEach(t),uEr=i(ae),UE=n(ae,"LI",{});var WBe=s(UE);qve=n(WBe,"STRONG",{});var hwt=s(qve);bEr=r(hwt,"electra"),hwt.forEach(t),vEr=r(WBe," \u2014 "),CU=n(WBe,"A",{href:!0});var pwt=s(CU);FEr=r(pwt,"TFElectraForSequenceClassification"),pwt.forEach(t),TEr=r(WBe," (ELECTRA model)"),WBe.forEach(t),MEr=i(ae),JE=n(ae,"LI",{});var QBe=s(JE);jve=n(QBe,"STRONG",{});var _wt=s(jve);EEr=r(_wt,"flaubert"),_wt.forEach(t),CEr=r(QBe," \u2014 "),wU=n(QBe,"A",{href:!0});var uwt=s(wU);wEr=r(uwt,"TFFlaubertForSequenceClassification"),uwt.forEach(t),AEr=r(QBe," (FlauBERT model)"),QBe.forEach(t),LEr=i(ae),YE=n(ae,"LI",{});var HBe=s(YE);Dve=n(HBe,"STRONG",{});var bwt=s(Dve);yEr=r(bwt,"funnel"),bwt.forEach(t),xEr=r(HBe," \u2014 "),AU=n(HBe,"A",{href:!0});var vwt=s(AU);$Er=r(vwt,"TFFunnelForSequenceClassification"),vwt.forEach(t),kEr=r(HBe," (Funnel Transformer model)"),HBe.forEach(t),SEr=i(ae),KE=n(ae,"LI",{});var UBe=s(KE);Gve=n(UBe,"STRONG",{});var Fwt=s(Gve);REr=r(Fwt,"gpt2"),Fwt.forEach(t),PEr=r(UBe," \u2014 "),LU=n(UBe,"A",{href:!0});var Twt=s(LU);BEr=r(Twt,"TFGPT2ForSequenceClassification"),Twt.forEach(t),IEr=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),NEr=i(ae),ZE=n(ae,"LI",{});var JBe=s(ZE);Ove=n(JBe,"STRONG",{});var Mwt=s(Ove);qEr=r(Mwt,"gptj"),Mwt.forEach(t),jEr=r(JBe," \u2014 "),yU=n(JBe,"A",{href:!0});var Ewt=s(yU);DEr=r(Ewt,"TFGPTJForSequenceClassification"),Ewt.forEach(t),GEr=r(JBe," (GPT-J model)"),JBe.forEach(t),OEr=i(ae),eC=n(ae,"LI",{});var YBe=s(eC);Vve=n(YBe,"STRONG",{});var Cwt=s(Vve);VEr=r(Cwt,"layoutlm"),Cwt.forEach(t),XEr=r(YBe," \u2014 "),xU=n(YBe,"A",{href:!0});var wwt=s(xU);zEr=r(wwt,"TFLayoutLMForSequenceClassification"),wwt.forEach(t),WEr=r(YBe," (LayoutLM model)"),YBe.forEach(t),QEr=i(ae),oC=n(ae,"LI",{});var KBe=s(oC);Xve=n(KBe,"STRONG",{});var Awt=s(Xve);HEr=r(Awt,"longformer"),Awt.forEach(t),UEr=r(KBe," \u2014 "),$U=n(KBe,"A",{href:!0});var Lwt=s($U);JEr=r(Lwt,"TFLongformerForSequenceClassification"),Lwt.forEach(t),YEr=r(KBe," (Longformer model)"),KBe.forEach(t),KEr=i(ae),rC=n(ae,"LI",{});var ZBe=s(rC);zve=n(ZBe,"STRONG",{});var ywt=s(zve);ZEr=r(ywt,"mobilebert"),ywt.forEach(t),eCr=r(ZBe," \u2014 "),kU=n(ZBe,"A",{href:!0});var xwt=s(kU);oCr=r(xwt,"TFMobileBertForSequenceClassification"),xwt.forEach(t),rCr=r(ZBe," (MobileBERT model)"),ZBe.forEach(t),tCr=i(ae),tC=n(ae,"LI",{});var eIe=s(tC);Wve=n(eIe,"STRONG",{});var $wt=s(Wve);aCr=r($wt,"mpnet"),$wt.forEach(t),nCr=r(eIe," \u2014 "),SU=n(eIe,"A",{href:!0});var kwt=s(SU);sCr=r(kwt,"TFMPNetForSequenceClassification"),kwt.forEach(t),lCr=r(eIe," (MPNet model)"),eIe.forEach(t),iCr=i(ae),aC=n(ae,"LI",{});var oIe=s(aC);Qve=n(oIe,"STRONG",{});var Swt=s(Qve);dCr=r(Swt,"openai-gpt"),Swt.forEach(t),cCr=r(oIe," \u2014 "),RU=n(oIe,"A",{href:!0});var Rwt=s(RU);fCr=r(Rwt,"TFOpenAIGPTForSequenceClassification"),Rwt.forEach(t),mCr=r(oIe," (OpenAI GPT model)"),oIe.forEach(t),gCr=i(ae),nC=n(ae,"LI",{});var rIe=s(nC);Hve=n(rIe,"STRONG",{});var Pwt=s(Hve);hCr=r(Pwt,"rembert"),Pwt.forEach(t),pCr=r(rIe," \u2014 "),PU=n(rIe,"A",{href:!0});var Bwt=s(PU);_Cr=r(Bwt,"TFRemBertForSequenceClassification"),Bwt.forEach(t),uCr=r(rIe," (RemBERT model)"),rIe.forEach(t),bCr=i(ae),sC=n(ae,"LI",{});var tIe=s(sC);Uve=n(tIe,"STRONG",{});var Iwt=s(Uve);vCr=r(Iwt,"roberta"),Iwt.forEach(t),FCr=r(tIe," \u2014 "),BU=n(tIe,"A",{href:!0});var Nwt=s(BU);TCr=r(Nwt,"TFRobertaForSequenceClassification"),Nwt.forEach(t),MCr=r(tIe," (RoBERTa model)"),tIe.forEach(t),ECr=i(ae),lC=n(ae,"LI",{});var aIe=s(lC);Jve=n(aIe,"STRONG",{});var qwt=s(Jve);CCr=r(qwt,"roformer"),qwt.forEach(t),wCr=r(aIe," \u2014 "),IU=n(aIe,"A",{href:!0});var jwt=s(IU);ACr=r(jwt,"TFRoFormerForSequenceClassification"),jwt.forEach(t),LCr=r(aIe," (RoFormer model)"),aIe.forEach(t),yCr=i(ae),iC=n(ae,"LI",{});var nIe=s(iC);Yve=n(nIe,"STRONG",{});var Dwt=s(Yve);xCr=r(Dwt,"tapas"),Dwt.forEach(t),$Cr=r(nIe," \u2014 "),NU=n(nIe,"A",{href:!0});var Gwt=s(NU);kCr=r(Gwt,"TFTapasForSequenceClassification"),Gwt.forEach(t),SCr=r(nIe," (TAPAS model)"),nIe.forEach(t),RCr=i(ae),dC=n(ae,"LI",{});var sIe=s(dC);Kve=n(sIe,"STRONG",{});var Owt=s(Kve);PCr=r(Owt,"transfo-xl"),Owt.forEach(t),BCr=r(sIe," \u2014 "),qU=n(sIe,"A",{href:!0});var Vwt=s(qU);ICr=r(Vwt,"TFTransfoXLForSequenceClassification"),Vwt.forEach(t),NCr=r(sIe," (Transformer-XL model)"),sIe.forEach(t),qCr=i(ae),cC=n(ae,"LI",{});var lIe=s(cC);Zve=n(lIe,"STRONG",{});var Xwt=s(Zve);jCr=r(Xwt,"xlm"),Xwt.forEach(t),DCr=r(lIe," \u2014 "),jU=n(lIe,"A",{href:!0});var zwt=s(jU);GCr=r(zwt,"TFXLMForSequenceClassification"),zwt.forEach(t),OCr=r(lIe," (XLM model)"),lIe.forEach(t),VCr=i(ae),fC=n(ae,"LI",{});var iIe=s(fC);eFe=n(iIe,"STRONG",{});var Wwt=s(eFe);XCr=r(Wwt,"xlm-roberta"),Wwt.forEach(t),zCr=r(iIe," \u2014 "),DU=n(iIe,"A",{href:!0});var Qwt=s(DU);WCr=r(Qwt,"TFXLMRobertaForSequenceClassification"),Qwt.forEach(t),QCr=r(iIe," (XLM-RoBERTa model)"),iIe.forEach(t),HCr=i(ae),mC=n(ae,"LI",{});var dIe=s(mC);oFe=n(dIe,"STRONG",{});var Hwt=s(oFe);UCr=r(Hwt,"xlnet"),Hwt.forEach(t),JCr=r(dIe," \u2014 "),GU=n(dIe,"A",{href:!0});var Uwt=s(GU);YCr=r(Uwt,"TFXLNetForSequenceClassification"),Uwt.forEach(t),KCr=r(dIe," (XLNet model)"),dIe.forEach(t),ae.forEach(t),ZCr=i(Ll),T(gC.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),IDe=i(f),dc=n(f,"H2",{class:!0});var OOe=s(dc);hC=n(OOe,"A",{id:!0,class:!0,href:!0});var Jwt=s(hC);rFe=n(Jwt,"SPAN",{});var Ywt=s(rFe);T(l9.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),e5r=i(OOe),tFe=n(OOe,"SPAN",{});var Kwt=s(tFe);o5r=r(Kwt,"TFAutoModelForMultipleChoice"),Kwt.forEach(t),OOe.forEach(t),NDe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(i9.$$.fragment,yl),r5r=i(yl),cc=n(yl,"P",{});var soe=s(cc);t5r=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OU=n(soe,"A",{href:!0});var Zwt=s(OU);a5r=r(Zwt,"from_pretrained()"),Zwt.forEach(t),n5r=r(soe," class method or the "),VU=n(soe,"A",{href:!0});var eAt=s(VU);s5r=r(eAt,"from_config()"),eAt.forEach(t),l5r=r(soe,` class
method.`),soe.forEach(t),i5r=i(yl),d9=n(yl,"P",{});var VOe=s(d9);d5r=r(VOe,"This class cannot be instantiated directly using "),aFe=n(VOe,"CODE",{});var oAt=s(aFe);c5r=r(oAt,"__init__()"),oAt.forEach(t),f5r=r(VOe," (throws an error)."),VOe.forEach(t),m5r=i(yl),Pt=n(yl,"DIV",{class:!0});var t6=s(Pt);T(c9.$$.fragment,t6),g5r=i(t6),nFe=n(t6,"P",{});var rAt=s(nFe);h5r=r(rAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rAt.forEach(t),p5r=i(t6),fc=n(t6,"P",{});var loe=s(fc);_5r=r(loe,`Note:
Loading a model from its configuration file does `),sFe=n(loe,"STRONG",{});var tAt=s(sFe);u5r=r(tAt,"not"),tAt.forEach(t),b5r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(loe,"A",{href:!0});var aAt=s(XU);v5r=r(aAt,"from_pretrained()"),aAt.forEach(t),F5r=r(loe," to load the model weights."),loe.forEach(t),T5r=i(t6),T(pC.$$.fragment,t6),t6.forEach(t),M5r=i(yl),Sr=n(yl,"DIV",{class:!0});var xl=s(Sr);T(f9.$$.fragment,xl),E5r=i(xl),lFe=n(xl,"P",{});var nAt=s(lFe);C5r=r(nAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nAt.forEach(t),w5r=i(xl),sn=n(xl,"P",{});var a6=s(sn);A5r=r(a6,"The model class to instantiate is selected based on the "),iFe=n(a6,"CODE",{});var sAt=s(iFe);L5r=r(sAt,"model_type"),sAt.forEach(t),y5r=r(a6,` property of the config object (either
passed as an argument or loaded from `),dFe=n(a6,"CODE",{});var lAt=s(dFe);x5r=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),$5r=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(a6,"CODE",{});var iAt=s(cFe);k5r=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),S5r=r(a6,":"),a6.forEach(t),R5r=i(xl),pe=n(xl,"UL",{});var be=s(pe);_C=n(be,"LI",{});var cIe=s(_C);fFe=n(cIe,"STRONG",{});var dAt=s(fFe);P5r=r(dAt,"albert"),dAt.forEach(t),B5r=r(cIe," \u2014 "),zU=n(cIe,"A",{href:!0});var cAt=s(zU);I5r=r(cAt,"TFAlbertForMultipleChoice"),cAt.forEach(t),N5r=r(cIe," (ALBERT model)"),cIe.forEach(t),q5r=i(be),uC=n(be,"LI",{});var fIe=s(uC);mFe=n(fIe,"STRONG",{});var fAt=s(mFe);j5r=r(fAt,"bert"),fAt.forEach(t),D5r=r(fIe," \u2014 "),WU=n(fIe,"A",{href:!0});var mAt=s(WU);G5r=r(mAt,"TFBertForMultipleChoice"),mAt.forEach(t),O5r=r(fIe," (BERT model)"),fIe.forEach(t),V5r=i(be),bC=n(be,"LI",{});var mIe=s(bC);gFe=n(mIe,"STRONG",{});var gAt=s(gFe);X5r=r(gAt,"camembert"),gAt.forEach(t),z5r=r(mIe," \u2014 "),QU=n(mIe,"A",{href:!0});var hAt=s(QU);W5r=r(hAt,"TFCamembertForMultipleChoice"),hAt.forEach(t),Q5r=r(mIe," (CamemBERT model)"),mIe.forEach(t),H5r=i(be),vC=n(be,"LI",{});var gIe=s(vC);hFe=n(gIe,"STRONG",{});var pAt=s(hFe);U5r=r(pAt,"convbert"),pAt.forEach(t),J5r=r(gIe," \u2014 "),HU=n(gIe,"A",{href:!0});var _At=s(HU);Y5r=r(_At,"TFConvBertForMultipleChoice"),_At.forEach(t),K5r=r(gIe," (ConvBERT model)"),gIe.forEach(t),Z5r=i(be),FC=n(be,"LI",{});var hIe=s(FC);pFe=n(hIe,"STRONG",{});var uAt=s(pFe);e3r=r(uAt,"distilbert"),uAt.forEach(t),o3r=r(hIe," \u2014 "),UU=n(hIe,"A",{href:!0});var bAt=s(UU);r3r=r(bAt,"TFDistilBertForMultipleChoice"),bAt.forEach(t),t3r=r(hIe," (DistilBERT model)"),hIe.forEach(t),a3r=i(be),TC=n(be,"LI",{});var pIe=s(TC);_Fe=n(pIe,"STRONG",{});var vAt=s(_Fe);n3r=r(vAt,"electra"),vAt.forEach(t),s3r=r(pIe," \u2014 "),JU=n(pIe,"A",{href:!0});var FAt=s(JU);l3r=r(FAt,"TFElectraForMultipleChoice"),FAt.forEach(t),i3r=r(pIe," (ELECTRA model)"),pIe.forEach(t),d3r=i(be),MC=n(be,"LI",{});var _Ie=s(MC);uFe=n(_Ie,"STRONG",{});var TAt=s(uFe);c3r=r(TAt,"flaubert"),TAt.forEach(t),f3r=r(_Ie," \u2014 "),YU=n(_Ie,"A",{href:!0});var MAt=s(YU);m3r=r(MAt,"TFFlaubertForMultipleChoice"),MAt.forEach(t),g3r=r(_Ie," (FlauBERT model)"),_Ie.forEach(t),h3r=i(be),EC=n(be,"LI",{});var uIe=s(EC);bFe=n(uIe,"STRONG",{});var EAt=s(bFe);p3r=r(EAt,"funnel"),EAt.forEach(t),_3r=r(uIe," \u2014 "),KU=n(uIe,"A",{href:!0});var CAt=s(KU);u3r=r(CAt,"TFFunnelForMultipleChoice"),CAt.forEach(t),b3r=r(uIe," (Funnel Transformer model)"),uIe.forEach(t),v3r=i(be),CC=n(be,"LI",{});var bIe=s(CC);vFe=n(bIe,"STRONG",{});var wAt=s(vFe);F3r=r(wAt,"longformer"),wAt.forEach(t),T3r=r(bIe," \u2014 "),ZU=n(bIe,"A",{href:!0});var AAt=s(ZU);M3r=r(AAt,"TFLongformerForMultipleChoice"),AAt.forEach(t),E3r=r(bIe," (Longformer model)"),bIe.forEach(t),C3r=i(be),wC=n(be,"LI",{});var vIe=s(wC);FFe=n(vIe,"STRONG",{});var LAt=s(FFe);w3r=r(LAt,"mobilebert"),LAt.forEach(t),A3r=r(vIe," \u2014 "),eJ=n(vIe,"A",{href:!0});var yAt=s(eJ);L3r=r(yAt,"TFMobileBertForMultipleChoice"),yAt.forEach(t),y3r=r(vIe," (MobileBERT model)"),vIe.forEach(t),x3r=i(be),AC=n(be,"LI",{});var FIe=s(AC);TFe=n(FIe,"STRONG",{});var xAt=s(TFe);$3r=r(xAt,"mpnet"),xAt.forEach(t),k3r=r(FIe," \u2014 "),oJ=n(FIe,"A",{href:!0});var $At=s(oJ);S3r=r($At,"TFMPNetForMultipleChoice"),$At.forEach(t),R3r=r(FIe," (MPNet model)"),FIe.forEach(t),P3r=i(be),LC=n(be,"LI",{});var TIe=s(LC);MFe=n(TIe,"STRONG",{});var kAt=s(MFe);B3r=r(kAt,"rembert"),kAt.forEach(t),I3r=r(TIe," \u2014 "),rJ=n(TIe,"A",{href:!0});var SAt=s(rJ);N3r=r(SAt,"TFRemBertForMultipleChoice"),SAt.forEach(t),q3r=r(TIe," (RemBERT model)"),TIe.forEach(t),j3r=i(be),yC=n(be,"LI",{});var MIe=s(yC);EFe=n(MIe,"STRONG",{});var RAt=s(EFe);D3r=r(RAt,"roberta"),RAt.forEach(t),G3r=r(MIe," \u2014 "),tJ=n(MIe,"A",{href:!0});var PAt=s(tJ);O3r=r(PAt,"TFRobertaForMultipleChoice"),PAt.forEach(t),V3r=r(MIe," (RoBERTa model)"),MIe.forEach(t),X3r=i(be),xC=n(be,"LI",{});var EIe=s(xC);CFe=n(EIe,"STRONG",{});var BAt=s(CFe);z3r=r(BAt,"roformer"),BAt.forEach(t),W3r=r(EIe," \u2014 "),aJ=n(EIe,"A",{href:!0});var IAt=s(aJ);Q3r=r(IAt,"TFRoFormerForMultipleChoice"),IAt.forEach(t),H3r=r(EIe," (RoFormer model)"),EIe.forEach(t),U3r=i(be),$C=n(be,"LI",{});var CIe=s($C);wFe=n(CIe,"STRONG",{});var NAt=s(wFe);J3r=r(NAt,"xlm"),NAt.forEach(t),Y3r=r(CIe," \u2014 "),nJ=n(CIe,"A",{href:!0});var qAt=s(nJ);K3r=r(qAt,"TFXLMForMultipleChoice"),qAt.forEach(t),Z3r=r(CIe," (XLM model)"),CIe.forEach(t),e0r=i(be),kC=n(be,"LI",{});var wIe=s(kC);AFe=n(wIe,"STRONG",{});var jAt=s(AFe);o0r=r(jAt,"xlm-roberta"),jAt.forEach(t),r0r=r(wIe," \u2014 "),sJ=n(wIe,"A",{href:!0});var DAt=s(sJ);t0r=r(DAt,"TFXLMRobertaForMultipleChoice"),DAt.forEach(t),a0r=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),n0r=i(be),SC=n(be,"LI",{});var AIe=s(SC);LFe=n(AIe,"STRONG",{});var GAt=s(LFe);s0r=r(GAt,"xlnet"),GAt.forEach(t),l0r=r(AIe," \u2014 "),lJ=n(AIe,"A",{href:!0});var OAt=s(lJ);i0r=r(OAt,"TFXLNetForMultipleChoice"),OAt.forEach(t),d0r=r(AIe," (XLNet model)"),AIe.forEach(t),be.forEach(t),c0r=i(xl),T(RC.$$.fragment,xl),xl.forEach(t),yl.forEach(t),qDe=i(f),mc=n(f,"H2",{class:!0});var XOe=s(mc);PC=n(XOe,"A",{id:!0,class:!0,href:!0});var VAt=s(PC);yFe=n(VAt,"SPAN",{});var XAt=s(yFe);T(m9.$$.fragment,XAt),XAt.forEach(t),VAt.forEach(t),f0r=i(XOe),xFe=n(XOe,"SPAN",{});var zAt=s(xFe);m0r=r(zAt,"TFAutoModelForNextSentencePrediction"),zAt.forEach(t),XOe.forEach(t),jDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(g9.$$.fragment,$l),g0r=i($l),gc=n($l,"P",{});var ioe=s(gc);h0r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iJ=n(ioe,"A",{href:!0});var WAt=s(iJ);p0r=r(WAt,"from_pretrained()"),WAt.forEach(t),_0r=r(ioe," class method or the "),dJ=n(ioe,"A",{href:!0});var QAt=s(dJ);u0r=r(QAt,"from_config()"),QAt.forEach(t),b0r=r(ioe,` class
method.`),ioe.forEach(t),v0r=i($l),h9=n($l,"P",{});var zOe=s(h9);F0r=r(zOe,"This class cannot be instantiated directly using "),$Fe=n(zOe,"CODE",{});var HAt=s($Fe);T0r=r(HAt,"__init__()"),HAt.forEach(t),M0r=r(zOe," (throws an error)."),zOe.forEach(t),E0r=i($l),Bt=n($l,"DIV",{class:!0});var n6=s(Bt);T(p9.$$.fragment,n6),C0r=i(n6),kFe=n(n6,"P",{});var UAt=s(kFe);w0r=r(UAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UAt.forEach(t),A0r=i(n6),hc=n(n6,"P",{});var doe=s(hc);L0r=r(doe,`Note:
Loading a model from its configuration file does `),SFe=n(doe,"STRONG",{});var JAt=s(SFe);y0r=r(JAt,"not"),JAt.forEach(t),x0r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(doe,"A",{href:!0});var YAt=s(cJ);$0r=r(YAt,"from_pretrained()"),YAt.forEach(t),k0r=r(doe," to load the model weights."),doe.forEach(t),S0r=i(n6),T(BC.$$.fragment,n6),n6.forEach(t),R0r=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(_9.$$.fragment,kl),P0r=i(kl),RFe=n(kl,"P",{});var KAt=s(RFe);B0r=r(KAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KAt.forEach(t),I0r=i(kl),ln=n(kl,"P",{});var s6=s(ln);N0r=r(s6,"The model class to instantiate is selected based on the "),PFe=n(s6,"CODE",{});var ZAt=s(PFe);q0r=r(ZAt,"model_type"),ZAt.forEach(t),j0r=r(s6,` property of the config object (either
passed as an argument or loaded from `),BFe=n(s6,"CODE",{});var e6t=s(BFe);D0r=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),G0r=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(s6,"CODE",{});var o6t=s(IFe);O0r=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),V0r=r(s6,":"),s6.forEach(t),X0r=i(kl),u9=n(kl,"UL",{});var WOe=s(u9);IC=n(WOe,"LI",{});var LIe=s(IC);NFe=n(LIe,"STRONG",{});var r6t=s(NFe);z0r=r(r6t,"bert"),r6t.forEach(t),W0r=r(LIe," \u2014 "),fJ=n(LIe,"A",{href:!0});var t6t=s(fJ);Q0r=r(t6t,"TFBertForNextSentencePrediction"),t6t.forEach(t),H0r=r(LIe," (BERT model)"),LIe.forEach(t),U0r=i(WOe),NC=n(WOe,"LI",{});var yIe=s(NC);qFe=n(yIe,"STRONG",{});var a6t=s(qFe);J0r=r(a6t,"mobilebert"),a6t.forEach(t),Y0r=r(yIe," \u2014 "),mJ=n(yIe,"A",{href:!0});var n6t=s(mJ);K0r=r(n6t,"TFMobileBertForNextSentencePrediction"),n6t.forEach(t),Z0r=r(yIe," (MobileBERT model)"),yIe.forEach(t),WOe.forEach(t),ewr=i(kl),T(qC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),DDe=i(f),pc=n(f,"H2",{class:!0});var QOe=s(pc);jC=n(QOe,"A",{id:!0,class:!0,href:!0});var s6t=s(jC);jFe=n(s6t,"SPAN",{});var l6t=s(jFe);T(b9.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),owr=i(QOe),DFe=n(QOe,"SPAN",{});var i6t=s(DFe);rwr=r(i6t,"TFAutoModelForTableQuestionAnswering"),i6t.forEach(t),QOe.forEach(t),GDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(v9.$$.fragment,Sl),twr=i(Sl),_c=n(Sl,"P",{});var coe=s(_c);awr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gJ=n(coe,"A",{href:!0});var d6t=s(gJ);nwr=r(d6t,"from_pretrained()"),d6t.forEach(t),swr=r(coe," class method or the "),hJ=n(coe,"A",{href:!0});var c6t=s(hJ);lwr=r(c6t,"from_config()"),c6t.forEach(t),iwr=r(coe,` class
method.`),coe.forEach(t),dwr=i(Sl),F9=n(Sl,"P",{});var HOe=s(F9);cwr=r(HOe,"This class cannot be instantiated directly using "),GFe=n(HOe,"CODE",{});var f6t=s(GFe);fwr=r(f6t,"__init__()"),f6t.forEach(t),mwr=r(HOe," (throws an error)."),HOe.forEach(t),gwr=i(Sl),It=n(Sl,"DIV",{class:!0});var l6=s(It);T(T9.$$.fragment,l6),hwr=i(l6),OFe=n(l6,"P",{});var m6t=s(OFe);pwr=r(m6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),m6t.forEach(t),_wr=i(l6),uc=n(l6,"P",{});var foe=s(uc);uwr=r(foe,`Note:
Loading a model from its configuration file does `),VFe=n(foe,"STRONG",{});var g6t=s(VFe);bwr=r(g6t,"not"),g6t.forEach(t),vwr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(foe,"A",{href:!0});var h6t=s(pJ);Fwr=r(h6t,"from_pretrained()"),h6t.forEach(t),Twr=r(foe," to load the model weights."),foe.forEach(t),Mwr=i(l6),T(DC.$$.fragment,l6),l6.forEach(t),Ewr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(M9.$$.fragment,Rl),Cwr=i(Rl),XFe=n(Rl,"P",{});var p6t=s(XFe);wwr=r(p6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),p6t.forEach(t),Awr=i(Rl),dn=n(Rl,"P",{});var i6=s(dn);Lwr=r(i6,"The model class to instantiate is selected based on the "),zFe=n(i6,"CODE",{});var _6t=s(zFe);ywr=r(_6t,"model_type"),_6t.forEach(t),xwr=r(i6,` property of the config object (either
passed as an argument or loaded from `),WFe=n(i6,"CODE",{});var u6t=s(WFe);$wr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),kwr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(i6,"CODE",{});var b6t=s(QFe);Swr=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),Rwr=r(i6,":"),i6.forEach(t),Pwr=i(Rl),HFe=n(Rl,"UL",{});var v6t=s(HFe);GC=n(v6t,"LI",{});var xIe=s(GC);UFe=n(xIe,"STRONG",{});var F6t=s(UFe);Bwr=r(F6t,"tapas"),F6t.forEach(t),Iwr=r(xIe," \u2014 "),_J=n(xIe,"A",{href:!0});var T6t=s(_J);Nwr=r(T6t,"TFTapasForQuestionAnswering"),T6t.forEach(t),qwr=r(xIe," (TAPAS model)"),xIe.forEach(t),v6t.forEach(t),jwr=i(Rl),T(OC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ODe=i(f),bc=n(f,"H2",{class:!0});var UOe=s(bc);VC=n(UOe,"A",{id:!0,class:!0,href:!0});var M6t=s(VC);JFe=n(M6t,"SPAN",{});var E6t=s(JFe);T(E9.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),Dwr=i(UOe),YFe=n(UOe,"SPAN",{});var C6t=s(YFe);Gwr=r(C6t,"TFAutoModelForTokenClassification"),C6t.forEach(t),UOe.forEach(t),VDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(C9.$$.fragment,Pl),Owr=i(Pl),vc=n(Pl,"P",{});var moe=s(vc);Vwr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uJ=n(moe,"A",{href:!0});var w6t=s(uJ);Xwr=r(w6t,"from_pretrained()"),w6t.forEach(t),zwr=r(moe," class method or the "),bJ=n(moe,"A",{href:!0});var A6t=s(bJ);Wwr=r(A6t,"from_config()"),A6t.forEach(t),Qwr=r(moe,` class
method.`),moe.forEach(t),Hwr=i(Pl),w9=n(Pl,"P",{});var JOe=s(w9);Uwr=r(JOe,"This class cannot be instantiated directly using "),KFe=n(JOe,"CODE",{});var L6t=s(KFe);Jwr=r(L6t,"__init__()"),L6t.forEach(t),Ywr=r(JOe," (throws an error)."),JOe.forEach(t),Kwr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var d6=s(Nt);T(A9.$$.fragment,d6),Zwr=i(d6),ZFe=n(d6,"P",{});var y6t=s(ZFe);eAr=r(y6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y6t.forEach(t),oAr=i(d6),Fc=n(d6,"P",{});var goe=s(Fc);rAr=r(goe,`Note:
Loading a model from its configuration file does `),eTe=n(goe,"STRONG",{});var x6t=s(eTe);tAr=r(x6t,"not"),x6t.forEach(t),aAr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(goe,"A",{href:!0});var $6t=s(vJ);nAr=r($6t,"from_pretrained()"),$6t.forEach(t),sAr=r(goe," to load the model weights."),goe.forEach(t),lAr=i(d6),T(XC.$$.fragment,d6),d6.forEach(t),iAr=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(L9.$$.fragment,Bl),dAr=i(Bl),oTe=n(Bl,"P",{});var k6t=s(oTe);cAr=r(k6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k6t.forEach(t),fAr=i(Bl),cn=n(Bl,"P",{});var c6=s(cn);mAr=r(c6,"The model class to instantiate is selected based on the "),rTe=n(c6,"CODE",{});var S6t=s(rTe);gAr=r(S6t,"model_type"),S6t.forEach(t),hAr=r(c6,` property of the config object (either
passed as an argument or loaded from `),tTe=n(c6,"CODE",{});var R6t=s(tTe);pAr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),_Ar=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(c6,"CODE",{});var P6t=s(aTe);uAr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),bAr=r(c6,":"),c6.forEach(t),vAr=i(Bl),de=n(Bl,"UL",{});var me=s(de);zC=n(me,"LI",{});var $Ie=s(zC);nTe=n($Ie,"STRONG",{});var B6t=s(nTe);FAr=r(B6t,"albert"),B6t.forEach(t),TAr=r($Ie," \u2014 "),FJ=n($Ie,"A",{href:!0});var I6t=s(FJ);MAr=r(I6t,"TFAlbertForTokenClassification"),I6t.forEach(t),EAr=r($Ie," (ALBERT model)"),$Ie.forEach(t),CAr=i(me),WC=n(me,"LI",{});var kIe=s(WC);sTe=n(kIe,"STRONG",{});var N6t=s(sTe);wAr=r(N6t,"bert"),N6t.forEach(t),AAr=r(kIe," \u2014 "),TJ=n(kIe,"A",{href:!0});var q6t=s(TJ);LAr=r(q6t,"TFBertForTokenClassification"),q6t.forEach(t),yAr=r(kIe," (BERT model)"),kIe.forEach(t),xAr=i(me),QC=n(me,"LI",{});var SIe=s(QC);lTe=n(SIe,"STRONG",{});var j6t=s(lTe);$Ar=r(j6t,"camembert"),j6t.forEach(t),kAr=r(SIe," \u2014 "),MJ=n(SIe,"A",{href:!0});var D6t=s(MJ);SAr=r(D6t,"TFCamembertForTokenClassification"),D6t.forEach(t),RAr=r(SIe," (CamemBERT model)"),SIe.forEach(t),PAr=i(me),HC=n(me,"LI",{});var RIe=s(HC);iTe=n(RIe,"STRONG",{});var G6t=s(iTe);BAr=r(G6t,"convbert"),G6t.forEach(t),IAr=r(RIe," \u2014 "),EJ=n(RIe,"A",{href:!0});var O6t=s(EJ);NAr=r(O6t,"TFConvBertForTokenClassification"),O6t.forEach(t),qAr=r(RIe," (ConvBERT model)"),RIe.forEach(t),jAr=i(me),UC=n(me,"LI",{});var PIe=s(UC);dTe=n(PIe,"STRONG",{});var V6t=s(dTe);DAr=r(V6t,"deberta"),V6t.forEach(t),GAr=r(PIe," \u2014 "),CJ=n(PIe,"A",{href:!0});var X6t=s(CJ);OAr=r(X6t,"TFDebertaForTokenClassification"),X6t.forEach(t),VAr=r(PIe," (DeBERTa model)"),PIe.forEach(t),XAr=i(me),JC=n(me,"LI",{});var BIe=s(JC);cTe=n(BIe,"STRONG",{});var z6t=s(cTe);zAr=r(z6t,"deberta-v2"),z6t.forEach(t),WAr=r(BIe," \u2014 "),wJ=n(BIe,"A",{href:!0});var W6t=s(wJ);QAr=r(W6t,"TFDebertaV2ForTokenClassification"),W6t.forEach(t),HAr=r(BIe," (DeBERTa-v2 model)"),BIe.forEach(t),UAr=i(me),YC=n(me,"LI",{});var IIe=s(YC);fTe=n(IIe,"STRONG",{});var Q6t=s(fTe);JAr=r(Q6t,"distilbert"),Q6t.forEach(t),YAr=r(IIe," \u2014 "),AJ=n(IIe,"A",{href:!0});var H6t=s(AJ);KAr=r(H6t,"TFDistilBertForTokenClassification"),H6t.forEach(t),ZAr=r(IIe," (DistilBERT model)"),IIe.forEach(t),e6r=i(me),KC=n(me,"LI",{});var NIe=s(KC);mTe=n(NIe,"STRONG",{});var U6t=s(mTe);o6r=r(U6t,"electra"),U6t.forEach(t),r6r=r(NIe," \u2014 "),LJ=n(NIe,"A",{href:!0});var J6t=s(LJ);t6r=r(J6t,"TFElectraForTokenClassification"),J6t.forEach(t),a6r=r(NIe," (ELECTRA model)"),NIe.forEach(t),n6r=i(me),ZC=n(me,"LI",{});var qIe=s(ZC);gTe=n(qIe,"STRONG",{});var Y6t=s(gTe);s6r=r(Y6t,"flaubert"),Y6t.forEach(t),l6r=r(qIe," \u2014 "),yJ=n(qIe,"A",{href:!0});var K6t=s(yJ);i6r=r(K6t,"TFFlaubertForTokenClassification"),K6t.forEach(t),d6r=r(qIe," (FlauBERT model)"),qIe.forEach(t),c6r=i(me),e5=n(me,"LI",{});var jIe=s(e5);hTe=n(jIe,"STRONG",{});var Z6t=s(hTe);f6r=r(Z6t,"funnel"),Z6t.forEach(t),m6r=r(jIe," \u2014 "),xJ=n(jIe,"A",{href:!0});var eLt=s(xJ);g6r=r(eLt,"TFFunnelForTokenClassification"),eLt.forEach(t),h6r=r(jIe," (Funnel Transformer model)"),jIe.forEach(t),p6r=i(me),o5=n(me,"LI",{});var DIe=s(o5);pTe=n(DIe,"STRONG",{});var oLt=s(pTe);_6r=r(oLt,"layoutlm"),oLt.forEach(t),u6r=r(DIe," \u2014 "),$J=n(DIe,"A",{href:!0});var rLt=s($J);b6r=r(rLt,"TFLayoutLMForTokenClassification"),rLt.forEach(t),v6r=r(DIe," (LayoutLM model)"),DIe.forEach(t),F6r=i(me),r5=n(me,"LI",{});var GIe=s(r5);_Te=n(GIe,"STRONG",{});var tLt=s(_Te);T6r=r(tLt,"longformer"),tLt.forEach(t),M6r=r(GIe," \u2014 "),kJ=n(GIe,"A",{href:!0});var aLt=s(kJ);E6r=r(aLt,"TFLongformerForTokenClassification"),aLt.forEach(t),C6r=r(GIe," (Longformer model)"),GIe.forEach(t),w6r=i(me),t5=n(me,"LI",{});var OIe=s(t5);uTe=n(OIe,"STRONG",{});var nLt=s(uTe);A6r=r(nLt,"mobilebert"),nLt.forEach(t),L6r=r(OIe," \u2014 "),SJ=n(OIe,"A",{href:!0});var sLt=s(SJ);y6r=r(sLt,"TFMobileBertForTokenClassification"),sLt.forEach(t),x6r=r(OIe," (MobileBERT model)"),OIe.forEach(t),$6r=i(me),a5=n(me,"LI",{});var VIe=s(a5);bTe=n(VIe,"STRONG",{});var lLt=s(bTe);k6r=r(lLt,"mpnet"),lLt.forEach(t),S6r=r(VIe," \u2014 "),RJ=n(VIe,"A",{href:!0});var iLt=s(RJ);R6r=r(iLt,"TFMPNetForTokenClassification"),iLt.forEach(t),P6r=r(VIe," (MPNet model)"),VIe.forEach(t),B6r=i(me),n5=n(me,"LI",{});var XIe=s(n5);vTe=n(XIe,"STRONG",{});var dLt=s(vTe);I6r=r(dLt,"rembert"),dLt.forEach(t),N6r=r(XIe," \u2014 "),PJ=n(XIe,"A",{href:!0});var cLt=s(PJ);q6r=r(cLt,"TFRemBertForTokenClassification"),cLt.forEach(t),j6r=r(XIe," (RemBERT model)"),XIe.forEach(t),D6r=i(me),s5=n(me,"LI",{});var zIe=s(s5);FTe=n(zIe,"STRONG",{});var fLt=s(FTe);G6r=r(fLt,"roberta"),fLt.forEach(t),O6r=r(zIe," \u2014 "),BJ=n(zIe,"A",{href:!0});var mLt=s(BJ);V6r=r(mLt,"TFRobertaForTokenClassification"),mLt.forEach(t),X6r=r(zIe," (RoBERTa model)"),zIe.forEach(t),z6r=i(me),l5=n(me,"LI",{});var WIe=s(l5);TTe=n(WIe,"STRONG",{});var gLt=s(TTe);W6r=r(gLt,"roformer"),gLt.forEach(t),Q6r=r(WIe," \u2014 "),IJ=n(WIe,"A",{href:!0});var hLt=s(IJ);H6r=r(hLt,"TFRoFormerForTokenClassification"),hLt.forEach(t),U6r=r(WIe," (RoFormer model)"),WIe.forEach(t),J6r=i(me),i5=n(me,"LI",{});var QIe=s(i5);MTe=n(QIe,"STRONG",{});var pLt=s(MTe);Y6r=r(pLt,"xlm"),pLt.forEach(t),K6r=r(QIe," \u2014 "),NJ=n(QIe,"A",{href:!0});var _Lt=s(NJ);Z6r=r(_Lt,"TFXLMForTokenClassification"),_Lt.forEach(t),eLr=r(QIe," (XLM model)"),QIe.forEach(t),oLr=i(me),d5=n(me,"LI",{});var HIe=s(d5);ETe=n(HIe,"STRONG",{});var uLt=s(ETe);rLr=r(uLt,"xlm-roberta"),uLt.forEach(t),tLr=r(HIe," \u2014 "),qJ=n(HIe,"A",{href:!0});var bLt=s(qJ);aLr=r(bLt,"TFXLMRobertaForTokenClassification"),bLt.forEach(t),nLr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),sLr=i(me),c5=n(me,"LI",{});var UIe=s(c5);CTe=n(UIe,"STRONG",{});var vLt=s(CTe);lLr=r(vLt,"xlnet"),vLt.forEach(t),iLr=r(UIe," \u2014 "),jJ=n(UIe,"A",{href:!0});var FLt=s(jJ);dLr=r(FLt,"TFXLNetForTokenClassification"),FLt.forEach(t),cLr=r(UIe," (XLNet model)"),UIe.forEach(t),me.forEach(t),fLr=i(Bl),T(f5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),XDe=i(f),Tc=n(f,"H2",{class:!0});var YOe=s(Tc);m5=n(YOe,"A",{id:!0,class:!0,href:!0});var TLt=s(m5);wTe=n(TLt,"SPAN",{});var MLt=s(wTe);T(y9.$$.fragment,MLt),MLt.forEach(t),TLt.forEach(t),mLr=i(YOe),ATe=n(YOe,"SPAN",{});var ELt=s(ATe);gLr=r(ELt,"TFAutoModelForQuestionAnswering"),ELt.forEach(t),YOe.forEach(t),zDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(x9.$$.fragment,Il),hLr=i(Il),Mc=n(Il,"P",{});var hoe=s(Mc);pLr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DJ=n(hoe,"A",{href:!0});var CLt=s(DJ);_Lr=r(CLt,"from_pretrained()"),CLt.forEach(t),uLr=r(hoe," class method or the "),GJ=n(hoe,"A",{href:!0});var wLt=s(GJ);bLr=r(wLt,"from_config()"),wLt.forEach(t),vLr=r(hoe,` class
method.`),hoe.forEach(t),FLr=i(Il),$9=n(Il,"P",{});var KOe=s($9);TLr=r(KOe,"This class cannot be instantiated directly using "),LTe=n(KOe,"CODE",{});var ALt=s(LTe);MLr=r(ALt,"__init__()"),ALt.forEach(t),ELr=r(KOe," (throws an error)."),KOe.forEach(t),CLr=i(Il),qt=n(Il,"DIV",{class:!0});var f6=s(qt);T(k9.$$.fragment,f6),wLr=i(f6),yTe=n(f6,"P",{});var LLt=s(yTe);ALr=r(LLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LLt.forEach(t),LLr=i(f6),Ec=n(f6,"P",{});var poe=s(Ec);yLr=r(poe,`Note:
Loading a model from its configuration file does `),xTe=n(poe,"STRONG",{});var yLt=s(xTe);xLr=r(yLt,"not"),yLt.forEach(t),$Lr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(poe,"A",{href:!0});var xLt=s(OJ);kLr=r(xLt,"from_pretrained()"),xLt.forEach(t),SLr=r(poe," to load the model weights."),poe.forEach(t),RLr=i(f6),T(g5.$$.fragment,f6),f6.forEach(t),PLr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(S9.$$.fragment,Nl),BLr=i(Nl),$Te=n(Nl,"P",{});var $Lt=s($Te);ILr=r($Lt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Lt.forEach(t),NLr=i(Nl),fn=n(Nl,"P",{});var m6=s(fn);qLr=r(m6,"The model class to instantiate is selected based on the "),kTe=n(m6,"CODE",{});var kLt=s(kTe);jLr=r(kLt,"model_type"),kLt.forEach(t),DLr=r(m6,` property of the config object (either
passed as an argument or loaded from `),STe=n(m6,"CODE",{});var SLt=s(STe);GLr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),OLr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(m6,"CODE",{});var RLt=s(RTe);VLr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),XLr=r(m6,":"),m6.forEach(t),zLr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);h5=n(ge,"LI",{});var JIe=s(h5);PTe=n(JIe,"STRONG",{});var PLt=s(PTe);WLr=r(PLt,"albert"),PLt.forEach(t),QLr=r(JIe," \u2014 "),VJ=n(JIe,"A",{href:!0});var BLt=s(VJ);HLr=r(BLt,"TFAlbertForQuestionAnswering"),BLt.forEach(t),ULr=r(JIe," (ALBERT model)"),JIe.forEach(t),JLr=i(ge),p5=n(ge,"LI",{});var YIe=s(p5);BTe=n(YIe,"STRONG",{});var ILt=s(BTe);YLr=r(ILt,"bert"),ILt.forEach(t),KLr=r(YIe," \u2014 "),XJ=n(YIe,"A",{href:!0});var NLt=s(XJ);ZLr=r(NLt,"TFBertForQuestionAnswering"),NLt.forEach(t),eyr=r(YIe," (BERT model)"),YIe.forEach(t),oyr=i(ge),_5=n(ge,"LI",{});var KIe=s(_5);ITe=n(KIe,"STRONG",{});var qLt=s(ITe);ryr=r(qLt,"camembert"),qLt.forEach(t),tyr=r(KIe," \u2014 "),zJ=n(KIe,"A",{href:!0});var jLt=s(zJ);ayr=r(jLt,"TFCamembertForQuestionAnswering"),jLt.forEach(t),nyr=r(KIe," (CamemBERT model)"),KIe.forEach(t),syr=i(ge),u5=n(ge,"LI",{});var ZIe=s(u5);NTe=n(ZIe,"STRONG",{});var DLt=s(NTe);lyr=r(DLt,"convbert"),DLt.forEach(t),iyr=r(ZIe," \u2014 "),WJ=n(ZIe,"A",{href:!0});var GLt=s(WJ);dyr=r(GLt,"TFConvBertForQuestionAnswering"),GLt.forEach(t),cyr=r(ZIe," (ConvBERT model)"),ZIe.forEach(t),fyr=i(ge),b5=n(ge,"LI",{});var eNe=s(b5);qTe=n(eNe,"STRONG",{});var OLt=s(qTe);myr=r(OLt,"deberta"),OLt.forEach(t),gyr=r(eNe," \u2014 "),QJ=n(eNe,"A",{href:!0});var VLt=s(QJ);hyr=r(VLt,"TFDebertaForQuestionAnswering"),VLt.forEach(t),pyr=r(eNe," (DeBERTa model)"),eNe.forEach(t),_yr=i(ge),v5=n(ge,"LI",{});var oNe=s(v5);jTe=n(oNe,"STRONG",{});var XLt=s(jTe);uyr=r(XLt,"deberta-v2"),XLt.forEach(t),byr=r(oNe," \u2014 "),HJ=n(oNe,"A",{href:!0});var zLt=s(HJ);vyr=r(zLt,"TFDebertaV2ForQuestionAnswering"),zLt.forEach(t),Fyr=r(oNe," (DeBERTa-v2 model)"),oNe.forEach(t),Tyr=i(ge),F5=n(ge,"LI",{});var rNe=s(F5);DTe=n(rNe,"STRONG",{});var WLt=s(DTe);Myr=r(WLt,"distilbert"),WLt.forEach(t),Eyr=r(rNe," \u2014 "),UJ=n(rNe,"A",{href:!0});var QLt=s(UJ);Cyr=r(QLt,"TFDistilBertForQuestionAnswering"),QLt.forEach(t),wyr=r(rNe," (DistilBERT model)"),rNe.forEach(t),Ayr=i(ge),T5=n(ge,"LI",{});var tNe=s(T5);GTe=n(tNe,"STRONG",{});var HLt=s(GTe);Lyr=r(HLt,"electra"),HLt.forEach(t),yyr=r(tNe," \u2014 "),JJ=n(tNe,"A",{href:!0});var ULt=s(JJ);xyr=r(ULt,"TFElectraForQuestionAnswering"),ULt.forEach(t),$yr=r(tNe," (ELECTRA model)"),tNe.forEach(t),kyr=i(ge),M5=n(ge,"LI",{});var aNe=s(M5);OTe=n(aNe,"STRONG",{});var JLt=s(OTe);Syr=r(JLt,"flaubert"),JLt.forEach(t),Ryr=r(aNe," \u2014 "),YJ=n(aNe,"A",{href:!0});var YLt=s(YJ);Pyr=r(YLt,"TFFlaubertForQuestionAnsweringSimple"),YLt.forEach(t),Byr=r(aNe," (FlauBERT model)"),aNe.forEach(t),Iyr=i(ge),E5=n(ge,"LI",{});var nNe=s(E5);VTe=n(nNe,"STRONG",{});var KLt=s(VTe);Nyr=r(KLt,"funnel"),KLt.forEach(t),qyr=r(nNe," \u2014 "),KJ=n(nNe,"A",{href:!0});var ZLt=s(KJ);jyr=r(ZLt,"TFFunnelForQuestionAnswering"),ZLt.forEach(t),Dyr=r(nNe," (Funnel Transformer model)"),nNe.forEach(t),Gyr=i(ge),C5=n(ge,"LI",{});var sNe=s(C5);XTe=n(sNe,"STRONG",{});var eyt=s(XTe);Oyr=r(eyt,"gptj"),eyt.forEach(t),Vyr=r(sNe," \u2014 "),ZJ=n(sNe,"A",{href:!0});var oyt=s(ZJ);Xyr=r(oyt,"TFGPTJForQuestionAnswering"),oyt.forEach(t),zyr=r(sNe," (GPT-J model)"),sNe.forEach(t),Wyr=i(ge),w5=n(ge,"LI",{});var lNe=s(w5);zTe=n(lNe,"STRONG",{});var ryt=s(zTe);Qyr=r(ryt,"longformer"),ryt.forEach(t),Hyr=r(lNe," \u2014 "),eY=n(lNe,"A",{href:!0});var tyt=s(eY);Uyr=r(tyt,"TFLongformerForQuestionAnswering"),tyt.forEach(t),Jyr=r(lNe," (Longformer model)"),lNe.forEach(t),Yyr=i(ge),A5=n(ge,"LI",{});var iNe=s(A5);WTe=n(iNe,"STRONG",{});var ayt=s(WTe);Kyr=r(ayt,"mobilebert"),ayt.forEach(t),Zyr=r(iNe," \u2014 "),oY=n(iNe,"A",{href:!0});var nyt=s(oY);e8r=r(nyt,"TFMobileBertForQuestionAnswering"),nyt.forEach(t),o8r=r(iNe," (MobileBERT model)"),iNe.forEach(t),r8r=i(ge),L5=n(ge,"LI",{});var dNe=s(L5);QTe=n(dNe,"STRONG",{});var syt=s(QTe);t8r=r(syt,"mpnet"),syt.forEach(t),a8r=r(dNe," \u2014 "),rY=n(dNe,"A",{href:!0});var lyt=s(rY);n8r=r(lyt,"TFMPNetForQuestionAnswering"),lyt.forEach(t),s8r=r(dNe," (MPNet model)"),dNe.forEach(t),l8r=i(ge),y5=n(ge,"LI",{});var cNe=s(y5);HTe=n(cNe,"STRONG",{});var iyt=s(HTe);i8r=r(iyt,"rembert"),iyt.forEach(t),d8r=r(cNe," \u2014 "),tY=n(cNe,"A",{href:!0});var dyt=s(tY);c8r=r(dyt,"TFRemBertForQuestionAnswering"),dyt.forEach(t),f8r=r(cNe," (RemBERT model)"),cNe.forEach(t),m8r=i(ge),x5=n(ge,"LI",{});var fNe=s(x5);UTe=n(fNe,"STRONG",{});var cyt=s(UTe);g8r=r(cyt,"roberta"),cyt.forEach(t),h8r=r(fNe," \u2014 "),aY=n(fNe,"A",{href:!0});var fyt=s(aY);p8r=r(fyt,"TFRobertaForQuestionAnswering"),fyt.forEach(t),_8r=r(fNe," (RoBERTa model)"),fNe.forEach(t),u8r=i(ge),$5=n(ge,"LI",{});var mNe=s($5);JTe=n(mNe,"STRONG",{});var myt=s(JTe);b8r=r(myt,"roformer"),myt.forEach(t),v8r=r(mNe," \u2014 "),nY=n(mNe,"A",{href:!0});var gyt=s(nY);F8r=r(gyt,"TFRoFormerForQuestionAnswering"),gyt.forEach(t),T8r=r(mNe," (RoFormer model)"),mNe.forEach(t),M8r=i(ge),k5=n(ge,"LI",{});var gNe=s(k5);YTe=n(gNe,"STRONG",{});var hyt=s(YTe);E8r=r(hyt,"xlm"),hyt.forEach(t),C8r=r(gNe," \u2014 "),sY=n(gNe,"A",{href:!0});var pyt=s(sY);w8r=r(pyt,"TFXLMForQuestionAnsweringSimple"),pyt.forEach(t),A8r=r(gNe," (XLM model)"),gNe.forEach(t),L8r=i(ge),S5=n(ge,"LI",{});var hNe=s(S5);KTe=n(hNe,"STRONG",{});var _yt=s(KTe);y8r=r(_yt,"xlm-roberta"),_yt.forEach(t),x8r=r(hNe," \u2014 "),lY=n(hNe,"A",{href:!0});var uyt=s(lY);$8r=r(uyt,"TFXLMRobertaForQuestionAnswering"),uyt.forEach(t),k8r=r(hNe," (XLM-RoBERTa model)"),hNe.forEach(t),S8r=i(ge),R5=n(ge,"LI",{});var pNe=s(R5);ZTe=n(pNe,"STRONG",{});var byt=s(ZTe);R8r=r(byt,"xlnet"),byt.forEach(t),P8r=r(pNe," \u2014 "),iY=n(pNe,"A",{href:!0});var vyt=s(iY);B8r=r(vyt,"TFXLNetForQuestionAnsweringSimple"),vyt.forEach(t),I8r=r(pNe," (XLNet model)"),pNe.forEach(t),ge.forEach(t),N8r=i(Nl),T(P5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),WDe=i(f),Cc=n(f,"H2",{class:!0});var ZOe=s(Cc);B5=n(ZOe,"A",{id:!0,class:!0,href:!0});var Fyt=s(B5);eMe=n(Fyt,"SPAN",{});var Tyt=s(eMe);T(R9.$$.fragment,Tyt),Tyt.forEach(t),Fyt.forEach(t),q8r=i(ZOe),oMe=n(ZOe,"SPAN",{});var Myt=s(oMe);j8r=r(Myt,"TFAutoModelForVision2Seq"),Myt.forEach(t),ZOe.forEach(t),QDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(P9.$$.fragment,ql),D8r=i(ql),wc=n(ql,"P",{});var _oe=s(wc);G8r=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dY=n(_oe,"A",{href:!0});var Eyt=s(dY);O8r=r(Eyt,"from_pretrained()"),Eyt.forEach(t),V8r=r(_oe," class method or the "),cY=n(_oe,"A",{href:!0});var Cyt=s(cY);X8r=r(Cyt,"from_config()"),Cyt.forEach(t),z8r=r(_oe,` class
method.`),_oe.forEach(t),W8r=i(ql),B9=n(ql,"P",{});var eVe=s(B9);Q8r=r(eVe,"This class cannot be instantiated directly using "),rMe=n(eVe,"CODE",{});var wyt=s(rMe);H8r=r(wyt,"__init__()"),wyt.forEach(t),U8r=r(eVe," (throws an error)."),eVe.forEach(t),J8r=i(ql),jt=n(ql,"DIV",{class:!0});var g6=s(jt);T(I9.$$.fragment,g6),Y8r=i(g6),tMe=n(g6,"P",{});var Ayt=s(tMe);K8r=r(Ayt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ayt.forEach(t),Z8r=i(g6),Ac=n(g6,"P",{});var uoe=s(Ac);e9r=r(uoe,`Note:
Loading a model from its configuration file does `),aMe=n(uoe,"STRONG",{});var Lyt=s(aMe);o9r=r(Lyt,"not"),Lyt.forEach(t),r9r=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(uoe,"A",{href:!0});var yyt=s(fY);t9r=r(yyt,"from_pretrained()"),yyt.forEach(t),a9r=r(uoe," to load the model weights."),uoe.forEach(t),n9r=i(g6),T(I5.$$.fragment,g6),g6.forEach(t),s9r=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(N9.$$.fragment,jl),l9r=i(jl),nMe=n(jl,"P",{});var xyt=s(nMe);i9r=r(xyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xyt.forEach(t),d9r=i(jl),mn=n(jl,"P",{});var h6=s(mn);c9r=r(h6,"The model class to instantiate is selected based on the "),sMe=n(h6,"CODE",{});var $yt=s(sMe);f9r=r($yt,"model_type"),$yt.forEach(t),m9r=r(h6,` property of the config object (either
passed as an argument or loaded from `),lMe=n(h6,"CODE",{});var kyt=s(lMe);g9r=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),h9r=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(h6,"CODE",{});var Syt=s(iMe);p9r=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),_9r=r(h6,":"),h6.forEach(t),u9r=i(jl),dMe=n(jl,"UL",{});var Ryt=s(dMe);N5=n(Ryt,"LI",{});var _Ne=s(N5);cMe=n(_Ne,"STRONG",{});var Pyt=s(cMe);b9r=r(Pyt,"vision-encoder-decoder"),Pyt.forEach(t),v9r=r(_Ne," \u2014 "),mY=n(_Ne,"A",{href:!0});var Byt=s(mY);F9r=r(Byt,"TFVisionEncoderDecoderModel"),Byt.forEach(t),T9r=r(_Ne," (Vision Encoder decoder model)"),_Ne.forEach(t),Ryt.forEach(t),M9r=i(jl),T(q5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),HDe=i(f),Lc=n(f,"H2",{class:!0});var oVe=s(Lc);j5=n(oVe,"A",{id:!0,class:!0,href:!0});var Iyt=s(j5);fMe=n(Iyt,"SPAN",{});var Nyt=s(fMe);T(q9.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),E9r=i(oVe),mMe=n(oVe,"SPAN",{});var qyt=s(mMe);C9r=r(qyt,"TFAutoModelForSpeechSeq2Seq"),qyt.forEach(t),oVe.forEach(t),UDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(j9.$$.fragment,Dl),w9r=i(Dl),yc=n(Dl,"P",{});var boe=s(yc);A9r=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gY=n(boe,"A",{href:!0});var jyt=s(gY);L9r=r(jyt,"from_pretrained()"),jyt.forEach(t),y9r=r(boe," class method or the "),hY=n(boe,"A",{href:!0});var Dyt=s(hY);x9r=r(Dyt,"from_config()"),Dyt.forEach(t),$9r=r(boe,` class
method.`),boe.forEach(t),k9r=i(Dl),D9=n(Dl,"P",{});var rVe=s(D9);S9r=r(rVe,"This class cannot be instantiated directly using "),gMe=n(rVe,"CODE",{});var Gyt=s(gMe);R9r=r(Gyt,"__init__()"),Gyt.forEach(t),P9r=r(rVe," (throws an error)."),rVe.forEach(t),B9r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var p6=s(Dt);T(G9.$$.fragment,p6),I9r=i(p6),hMe=n(p6,"P",{});var Oyt=s(hMe);N9r=r(Oyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oyt.forEach(t),q9r=i(p6),xc=n(p6,"P",{});var voe=s(xc);j9r=r(voe,`Note:
Loading a model from its configuration file does `),pMe=n(voe,"STRONG",{});var Vyt=s(pMe);D9r=r(Vyt,"not"),Vyt.forEach(t),G9r=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(voe,"A",{href:!0});var Xyt=s(pY);O9r=r(Xyt,"from_pretrained()"),Xyt.forEach(t),V9r=r(voe," to load the model weights."),voe.forEach(t),X9r=i(p6),T(D5.$$.fragment,p6),p6.forEach(t),z9r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(O9.$$.fragment,Gl),W9r=i(Gl),_Me=n(Gl,"P",{});var zyt=s(_Me);Q9r=r(zyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zyt.forEach(t),H9r=i(Gl),gn=n(Gl,"P",{});var _6=s(gn);U9r=r(_6,"The model class to instantiate is selected based on the "),uMe=n(_6,"CODE",{});var Wyt=s(uMe);J9r=r(Wyt,"model_type"),Wyt.forEach(t),Y9r=r(_6,` property of the config object (either
passed as an argument or loaded from `),bMe=n(_6,"CODE",{});var Qyt=s(bMe);K9r=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),Z9r=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(_6,"CODE",{});var Hyt=s(vMe);exr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),oxr=r(_6,":"),_6.forEach(t),rxr=i(Gl),FMe=n(Gl,"UL",{});var Uyt=s(FMe);G5=n(Uyt,"LI",{});var uNe=s(G5);TMe=n(uNe,"STRONG",{});var Jyt=s(TMe);txr=r(Jyt,"speech_to_text"),Jyt.forEach(t),axr=r(uNe," \u2014 "),_Y=n(uNe,"A",{href:!0});var Yyt=s(_Y);nxr=r(Yyt,"TFSpeech2TextForConditionalGeneration"),Yyt.forEach(t),sxr=r(uNe," (Speech2Text model)"),uNe.forEach(t),Uyt.forEach(t),lxr=i(Gl),T(O5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),JDe=i(f),$c=n(f,"H2",{class:!0});var tVe=s($c);V5=n(tVe,"A",{id:!0,class:!0,href:!0});var Kyt=s(V5);MMe=n(Kyt,"SPAN",{});var Zyt=s(MMe);T(V9.$$.fragment,Zyt),Zyt.forEach(t),Kyt.forEach(t),ixr=i(tVe),EMe=n(tVe,"SPAN",{});var e8t=s(EMe);dxr=r(e8t,"FlaxAutoModel"),e8t.forEach(t),tVe.forEach(t),YDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(X9.$$.fragment,Ol),cxr=i(Ol),kc=n(Ol,"P",{});var Foe=s(kc);fxr=r(Foe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uY=n(Foe,"A",{href:!0});var o8t=s(uY);mxr=r(o8t,"from_pretrained()"),o8t.forEach(t),gxr=r(Foe," class method or the "),bY=n(Foe,"A",{href:!0});var r8t=s(bY);hxr=r(r8t,"from_config()"),r8t.forEach(t),pxr=r(Foe,` class
method.`),Foe.forEach(t),_xr=i(Ol),z9=n(Ol,"P",{});var aVe=s(z9);uxr=r(aVe,"This class cannot be instantiated directly using "),CMe=n(aVe,"CODE",{});var t8t=s(CMe);bxr=r(t8t,"__init__()"),t8t.forEach(t),vxr=r(aVe," (throws an error)."),aVe.forEach(t),Fxr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var u6=s(Gt);T(W9.$$.fragment,u6),Txr=i(u6),wMe=n(u6,"P",{});var a8t=s(wMe);Mxr=r(a8t,"Instantiates one of the base model classes of the library from a configuration."),a8t.forEach(t),Exr=i(u6),Sc=n(u6,"P",{});var Toe=s(Sc);Cxr=r(Toe,`Note:
Loading a model from its configuration file does `),AMe=n(Toe,"STRONG",{});var n8t=s(AMe);wxr=r(n8t,"not"),n8t.forEach(t),Axr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(Toe,"A",{href:!0});var s8t=s(vY);Lxr=r(s8t,"from_pretrained()"),s8t.forEach(t),yxr=r(Toe," to load the model weights."),Toe.forEach(t),xxr=i(u6),T(X5.$$.fragment,u6),u6.forEach(t),$xr=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(Q9.$$.fragment,Vl),kxr=i(Vl),LMe=n(Vl,"P",{});var l8t=s(LMe);Sxr=r(l8t,"Instantiate one of the base model classes of the library from a pretrained model."),l8t.forEach(t),Rxr=i(Vl),hn=n(Vl,"P",{});var b6=s(hn);Pxr=r(b6,"The model class to instantiate is selected based on the "),yMe=n(b6,"CODE",{});var i8t=s(yMe);Bxr=r(i8t,"model_type"),i8t.forEach(t),Ixr=r(b6,` property of the config object (either
passed as an argument or loaded from `),xMe=n(b6,"CODE",{});var d8t=s(xMe);Nxr=r(d8t,"pretrained_model_name_or_path"),d8t.forEach(t),qxr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=n(b6,"CODE",{});var c8t=s($Me);jxr=r(c8t,"pretrained_model_name_or_path"),c8t.forEach(t),Dxr=r(b6,":"),b6.forEach(t),Gxr=i(Vl),re=n(Vl,"UL",{});var ne=s(re);z5=n(ne,"LI",{});var bNe=s(z5);kMe=n(bNe,"STRONG",{});var f8t=s(kMe);Oxr=r(f8t,"albert"),f8t.forEach(t),Vxr=r(bNe," \u2014 "),FY=n(bNe,"A",{href:!0});var m8t=s(FY);Xxr=r(m8t,"FlaxAlbertModel"),m8t.forEach(t),zxr=r(bNe," (ALBERT model)"),bNe.forEach(t),Wxr=i(ne),W5=n(ne,"LI",{});var vNe=s(W5);SMe=n(vNe,"STRONG",{});var g8t=s(SMe);Qxr=r(g8t,"bart"),g8t.forEach(t),Hxr=r(vNe," \u2014 "),TY=n(vNe,"A",{href:!0});var h8t=s(TY);Uxr=r(h8t,"FlaxBartModel"),h8t.forEach(t),Jxr=r(vNe," (BART model)"),vNe.forEach(t),Yxr=i(ne),Q5=n(ne,"LI",{});var FNe=s(Q5);RMe=n(FNe,"STRONG",{});var p8t=s(RMe);Kxr=r(p8t,"beit"),p8t.forEach(t),Zxr=r(FNe," \u2014 "),MY=n(FNe,"A",{href:!0});var _8t=s(MY);e$r=r(_8t,"FlaxBeitModel"),_8t.forEach(t),o$r=r(FNe," (BEiT model)"),FNe.forEach(t),r$r=i(ne),H5=n(ne,"LI",{});var TNe=s(H5);PMe=n(TNe,"STRONG",{});var u8t=s(PMe);t$r=r(u8t,"bert"),u8t.forEach(t),a$r=r(TNe," \u2014 "),EY=n(TNe,"A",{href:!0});var b8t=s(EY);n$r=r(b8t,"FlaxBertModel"),b8t.forEach(t),s$r=r(TNe," (BERT model)"),TNe.forEach(t),l$r=i(ne),U5=n(ne,"LI",{});var MNe=s(U5);BMe=n(MNe,"STRONG",{});var v8t=s(BMe);i$r=r(v8t,"big_bird"),v8t.forEach(t),d$r=r(MNe," \u2014 "),CY=n(MNe,"A",{href:!0});var F8t=s(CY);c$r=r(F8t,"FlaxBigBirdModel"),F8t.forEach(t),f$r=r(MNe," (BigBird model)"),MNe.forEach(t),m$r=i(ne),J5=n(ne,"LI",{});var ENe=s(J5);IMe=n(ENe,"STRONG",{});var T8t=s(IMe);g$r=r(T8t,"blenderbot"),T8t.forEach(t),h$r=r(ENe," \u2014 "),wY=n(ENe,"A",{href:!0});var M8t=s(wY);p$r=r(M8t,"FlaxBlenderbotModel"),M8t.forEach(t),_$r=r(ENe," (Blenderbot model)"),ENe.forEach(t),u$r=i(ne),Y5=n(ne,"LI",{});var CNe=s(Y5);NMe=n(CNe,"STRONG",{});var E8t=s(NMe);b$r=r(E8t,"blenderbot-small"),E8t.forEach(t),v$r=r(CNe," \u2014 "),AY=n(CNe,"A",{href:!0});var C8t=s(AY);F$r=r(C8t,"FlaxBlenderbotSmallModel"),C8t.forEach(t),T$r=r(CNe," (BlenderbotSmall model)"),CNe.forEach(t),M$r=i(ne),K5=n(ne,"LI",{});var wNe=s(K5);qMe=n(wNe,"STRONG",{});var w8t=s(qMe);E$r=r(w8t,"clip"),w8t.forEach(t),C$r=r(wNe," \u2014 "),LY=n(wNe,"A",{href:!0});var A8t=s(LY);w$r=r(A8t,"FlaxCLIPModel"),A8t.forEach(t),A$r=r(wNe," (CLIP model)"),wNe.forEach(t),L$r=i(ne),Z5=n(ne,"LI",{});var ANe=s(Z5);jMe=n(ANe,"STRONG",{});var L8t=s(jMe);y$r=r(L8t,"distilbert"),L8t.forEach(t),x$r=r(ANe," \u2014 "),yY=n(ANe,"A",{href:!0});var y8t=s(yY);$$r=r(y8t,"FlaxDistilBertModel"),y8t.forEach(t),k$r=r(ANe," (DistilBERT model)"),ANe.forEach(t),S$r=i(ne),e3=n(ne,"LI",{});var LNe=s(e3);DMe=n(LNe,"STRONG",{});var x8t=s(DMe);R$r=r(x8t,"electra"),x8t.forEach(t),P$r=r(LNe," \u2014 "),xY=n(LNe,"A",{href:!0});var $8t=s(xY);B$r=r($8t,"FlaxElectraModel"),$8t.forEach(t),I$r=r(LNe," (ELECTRA model)"),LNe.forEach(t),N$r=i(ne),o3=n(ne,"LI",{});var yNe=s(o3);GMe=n(yNe,"STRONG",{});var k8t=s(GMe);q$r=r(k8t,"gpt2"),k8t.forEach(t),j$r=r(yNe," \u2014 "),$Y=n(yNe,"A",{href:!0});var S8t=s($Y);D$r=r(S8t,"FlaxGPT2Model"),S8t.forEach(t),G$r=r(yNe," (OpenAI GPT-2 model)"),yNe.forEach(t),O$r=i(ne),r3=n(ne,"LI",{});var xNe=s(r3);OMe=n(xNe,"STRONG",{});var R8t=s(OMe);V$r=r(R8t,"gpt_neo"),R8t.forEach(t),X$r=r(xNe," \u2014 "),kY=n(xNe,"A",{href:!0});var P8t=s(kY);z$r=r(P8t,"FlaxGPTNeoModel"),P8t.forEach(t),W$r=r(xNe," (GPT Neo model)"),xNe.forEach(t),Q$r=i(ne),t3=n(ne,"LI",{});var $Ne=s(t3);VMe=n($Ne,"STRONG",{});var B8t=s(VMe);H$r=r(B8t,"gptj"),B8t.forEach(t),U$r=r($Ne," \u2014 "),SY=n($Ne,"A",{href:!0});var I8t=s(SY);J$r=r(I8t,"FlaxGPTJModel"),I8t.forEach(t),Y$r=r($Ne," (GPT-J model)"),$Ne.forEach(t),K$r=i(ne),a3=n(ne,"LI",{});var kNe=s(a3);XMe=n(kNe,"STRONG",{});var N8t=s(XMe);Z$r=r(N8t,"marian"),N8t.forEach(t),ekr=r(kNe," \u2014 "),RY=n(kNe,"A",{href:!0});var q8t=s(RY);okr=r(q8t,"FlaxMarianModel"),q8t.forEach(t),rkr=r(kNe," (Marian model)"),kNe.forEach(t),tkr=i(ne),n3=n(ne,"LI",{});var SNe=s(n3);zMe=n(SNe,"STRONG",{});var j8t=s(zMe);akr=r(j8t,"mbart"),j8t.forEach(t),nkr=r(SNe," \u2014 "),PY=n(SNe,"A",{href:!0});var D8t=s(PY);skr=r(D8t,"FlaxMBartModel"),D8t.forEach(t),lkr=r(SNe," (mBART model)"),SNe.forEach(t),ikr=i(ne),s3=n(ne,"LI",{});var RNe=s(s3);WMe=n(RNe,"STRONG",{});var G8t=s(WMe);dkr=r(G8t,"mt5"),G8t.forEach(t),ckr=r(RNe," \u2014 "),BY=n(RNe,"A",{href:!0});var O8t=s(BY);fkr=r(O8t,"FlaxMT5Model"),O8t.forEach(t),mkr=r(RNe," (MT5 model)"),RNe.forEach(t),gkr=i(ne),l3=n(ne,"LI",{});var PNe=s(l3);QMe=n(PNe,"STRONG",{});var V8t=s(QMe);hkr=r(V8t,"opt"),V8t.forEach(t),pkr=r(PNe," \u2014 "),IY=n(PNe,"A",{href:!0});var X8t=s(IY);_kr=r(X8t,"FlaxOPTModel"),X8t.forEach(t),ukr=r(PNe," (OPT model)"),PNe.forEach(t),bkr=i(ne),i3=n(ne,"LI",{});var BNe=s(i3);HMe=n(BNe,"STRONG",{});var z8t=s(HMe);vkr=r(z8t,"pegasus"),z8t.forEach(t),Fkr=r(BNe," \u2014 "),NY=n(BNe,"A",{href:!0});var W8t=s(NY);Tkr=r(W8t,"FlaxPegasusModel"),W8t.forEach(t),Mkr=r(BNe," (Pegasus model)"),BNe.forEach(t),Ekr=i(ne),d3=n(ne,"LI",{});var INe=s(d3);UMe=n(INe,"STRONG",{});var Q8t=s(UMe);Ckr=r(Q8t,"roberta"),Q8t.forEach(t),wkr=r(INe," \u2014 "),qY=n(INe,"A",{href:!0});var H8t=s(qY);Akr=r(H8t,"FlaxRobertaModel"),H8t.forEach(t),Lkr=r(INe," (RoBERTa model)"),INe.forEach(t),ykr=i(ne),c3=n(ne,"LI",{});var NNe=s(c3);JMe=n(NNe,"STRONG",{});var U8t=s(JMe);xkr=r(U8t,"roformer"),U8t.forEach(t),$kr=r(NNe," \u2014 "),jY=n(NNe,"A",{href:!0});var J8t=s(jY);kkr=r(J8t,"FlaxRoFormerModel"),J8t.forEach(t),Skr=r(NNe," (RoFormer model)"),NNe.forEach(t),Rkr=i(ne),f3=n(ne,"LI",{});var qNe=s(f3);YMe=n(qNe,"STRONG",{});var Y8t=s(YMe);Pkr=r(Y8t,"t5"),Y8t.forEach(t),Bkr=r(qNe," \u2014 "),DY=n(qNe,"A",{href:!0});var K8t=s(DY);Ikr=r(K8t,"FlaxT5Model"),K8t.forEach(t),Nkr=r(qNe," (T5 model)"),qNe.forEach(t),qkr=i(ne),m3=n(ne,"LI",{});var jNe=s(m3);KMe=n(jNe,"STRONG",{});var Z8t=s(KMe);jkr=r(Z8t,"vision-text-dual-encoder"),Z8t.forEach(t),Dkr=r(jNe," \u2014 "),GY=n(jNe,"A",{href:!0});var e9t=s(GY);Gkr=r(e9t,"FlaxVisionTextDualEncoderModel"),e9t.forEach(t),Okr=r(jNe," (VisionTextDualEncoder model)"),jNe.forEach(t),Vkr=i(ne),g3=n(ne,"LI",{});var DNe=s(g3);ZMe=n(DNe,"STRONG",{});var o9t=s(ZMe);Xkr=r(o9t,"vit"),o9t.forEach(t),zkr=r(DNe," \u2014 "),OY=n(DNe,"A",{href:!0});var r9t=s(OY);Wkr=r(r9t,"FlaxViTModel"),r9t.forEach(t),Qkr=r(DNe," (ViT model)"),DNe.forEach(t),Hkr=i(ne),h3=n(ne,"LI",{});var GNe=s(h3);eEe=n(GNe,"STRONG",{});var t9t=s(eEe);Ukr=r(t9t,"wav2vec2"),t9t.forEach(t),Jkr=r(GNe," \u2014 "),VY=n(GNe,"A",{href:!0});var a9t=s(VY);Ykr=r(a9t,"FlaxWav2Vec2Model"),a9t.forEach(t),Kkr=r(GNe," (Wav2Vec2 model)"),GNe.forEach(t),Zkr=i(ne),p3=n(ne,"LI",{});var ONe=s(p3);oEe=n(ONe,"STRONG",{});var n9t=s(oEe);eSr=r(n9t,"xglm"),n9t.forEach(t),oSr=r(ONe," \u2014 "),XY=n(ONe,"A",{href:!0});var s9t=s(XY);rSr=r(s9t,"FlaxXGLMModel"),s9t.forEach(t),tSr=r(ONe," (XGLM model)"),ONe.forEach(t),aSr=i(ne),_3=n(ne,"LI",{});var VNe=s(_3);rEe=n(VNe,"STRONG",{});var l9t=s(rEe);nSr=r(l9t,"xlm-roberta"),l9t.forEach(t),sSr=r(VNe," \u2014 "),zY=n(VNe,"A",{href:!0});var i9t=s(zY);lSr=r(i9t,"FlaxXLMRobertaModel"),i9t.forEach(t),iSr=r(VNe," (XLM-RoBERTa model)"),VNe.forEach(t),ne.forEach(t),dSr=i(Vl),T(u3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),KDe=i(f),Rc=n(f,"H2",{class:!0});var nVe=s(Rc);b3=n(nVe,"A",{id:!0,class:!0,href:!0});var d9t=s(b3);tEe=n(d9t,"SPAN",{});var c9t=s(tEe);T(H9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),cSr=i(nVe),aEe=n(nVe,"SPAN",{});var f9t=s(aEe);fSr=r(f9t,"FlaxAutoModelForCausalLM"),f9t.forEach(t),nVe.forEach(t),ZDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(U9.$$.fragment,Xl),mSr=i(Xl),Pc=n(Xl,"P",{});var Moe=s(Pc);gSr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WY=n(Moe,"A",{href:!0});var m9t=s(WY);hSr=r(m9t,"from_pretrained()"),m9t.forEach(t),pSr=r(Moe," class method or the "),QY=n(Moe,"A",{href:!0});var g9t=s(QY);_Sr=r(g9t,"from_config()"),g9t.forEach(t),uSr=r(Moe,` class
method.`),Moe.forEach(t),bSr=i(Xl),J9=n(Xl,"P",{});var sVe=s(J9);vSr=r(sVe,"This class cannot be instantiated directly using "),nEe=n(sVe,"CODE",{});var h9t=s(nEe);FSr=r(h9t,"__init__()"),h9t.forEach(t),TSr=r(sVe," (throws an error)."),sVe.forEach(t),MSr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var v6=s(Ot);T(Y9.$$.fragment,v6),ESr=i(v6),sEe=n(v6,"P",{});var p9t=s(sEe);CSr=r(p9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p9t.forEach(t),wSr=i(v6),Bc=n(v6,"P",{});var Eoe=s(Bc);ASr=r(Eoe,`Note:
Loading a model from its configuration file does `),lEe=n(Eoe,"STRONG",{});var _9t=s(lEe);LSr=r(_9t,"not"),_9t.forEach(t),ySr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Eoe,"A",{href:!0});var u9t=s(HY);xSr=r(u9t,"from_pretrained()"),u9t.forEach(t),$Sr=r(Eoe," to load the model weights."),Eoe.forEach(t),kSr=i(v6),T(v3.$$.fragment,v6),v6.forEach(t),SSr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(K9.$$.fragment,zl),RSr=i(zl),iEe=n(zl,"P",{});var b9t=s(iEe);PSr=r(b9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),b9t.forEach(t),BSr=i(zl),pn=n(zl,"P",{});var F6=s(pn);ISr=r(F6,"The model class to instantiate is selected based on the "),dEe=n(F6,"CODE",{});var v9t=s(dEe);NSr=r(v9t,"model_type"),v9t.forEach(t),qSr=r(F6,` property of the config object (either
passed as an argument or loaded from `),cEe=n(F6,"CODE",{});var F9t=s(cEe);jSr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),DSr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(F6,"CODE",{});var T9t=s(fEe);GSr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),OSr=r(F6,":"),F6.forEach(t),VSr=i(zl),xe=n(zl,"UL",{});var Ne=s(xe);F3=n(Ne,"LI",{});var XNe=s(F3);mEe=n(XNe,"STRONG",{});var M9t=s(mEe);XSr=r(M9t,"bart"),M9t.forEach(t),zSr=r(XNe," \u2014 "),UY=n(XNe,"A",{href:!0});var E9t=s(UY);WSr=r(E9t,"FlaxBartForCausalLM"),E9t.forEach(t),QSr=r(XNe," (BART model)"),XNe.forEach(t),HSr=i(Ne),T3=n(Ne,"LI",{});var zNe=s(T3);gEe=n(zNe,"STRONG",{});var C9t=s(gEe);USr=r(C9t,"bert"),C9t.forEach(t),JSr=r(zNe," \u2014 "),JY=n(zNe,"A",{href:!0});var w9t=s(JY);YSr=r(w9t,"FlaxBertForCausalLM"),w9t.forEach(t),KSr=r(zNe," (BERT model)"),zNe.forEach(t),ZSr=i(Ne),M3=n(Ne,"LI",{});var WNe=s(M3);hEe=n(WNe,"STRONG",{});var A9t=s(hEe);eRr=r(A9t,"big_bird"),A9t.forEach(t),oRr=r(WNe," \u2014 "),YY=n(WNe,"A",{href:!0});var L9t=s(YY);rRr=r(L9t,"FlaxBigBirdForCausalLM"),L9t.forEach(t),tRr=r(WNe," (BigBird model)"),WNe.forEach(t),aRr=i(Ne),E3=n(Ne,"LI",{});var QNe=s(E3);pEe=n(QNe,"STRONG",{});var y9t=s(pEe);nRr=r(y9t,"electra"),y9t.forEach(t),sRr=r(QNe," \u2014 "),KY=n(QNe,"A",{href:!0});var x9t=s(KY);lRr=r(x9t,"FlaxElectraForCausalLM"),x9t.forEach(t),iRr=r(QNe," (ELECTRA model)"),QNe.forEach(t),dRr=i(Ne),C3=n(Ne,"LI",{});var HNe=s(C3);_Ee=n(HNe,"STRONG",{});var $9t=s(_Ee);cRr=r($9t,"gpt2"),$9t.forEach(t),fRr=r(HNe," \u2014 "),ZY=n(HNe,"A",{href:!0});var k9t=s(ZY);mRr=r(k9t,"FlaxGPT2LMHeadModel"),k9t.forEach(t),gRr=r(HNe," (OpenAI GPT-2 model)"),HNe.forEach(t),hRr=i(Ne),w3=n(Ne,"LI",{});var UNe=s(w3);uEe=n(UNe,"STRONG",{});var S9t=s(uEe);pRr=r(S9t,"gpt_neo"),S9t.forEach(t),_Rr=r(UNe," \u2014 "),eK=n(UNe,"A",{href:!0});var R9t=s(eK);uRr=r(R9t,"FlaxGPTNeoForCausalLM"),R9t.forEach(t),bRr=r(UNe," (GPT Neo model)"),UNe.forEach(t),vRr=i(Ne),A3=n(Ne,"LI",{});var JNe=s(A3);bEe=n(JNe,"STRONG",{});var P9t=s(bEe);FRr=r(P9t,"gptj"),P9t.forEach(t),TRr=r(JNe," \u2014 "),oK=n(JNe,"A",{href:!0});var B9t=s(oK);MRr=r(B9t,"FlaxGPTJForCausalLM"),B9t.forEach(t),ERr=r(JNe," (GPT-J model)"),JNe.forEach(t),CRr=i(Ne),L3=n(Ne,"LI",{});var YNe=s(L3);vEe=n(YNe,"STRONG",{});var I9t=s(vEe);wRr=r(I9t,"opt"),I9t.forEach(t),ARr=r(YNe," \u2014 "),rK=n(YNe,"A",{href:!0});var N9t=s(rK);LRr=r(N9t,"FlaxOPTForCausalLM"),N9t.forEach(t),yRr=r(YNe," (OPT model)"),YNe.forEach(t),xRr=i(Ne),y3=n(Ne,"LI",{});var KNe=s(y3);FEe=n(KNe,"STRONG",{});var q9t=s(FEe);$Rr=r(q9t,"roberta"),q9t.forEach(t),kRr=r(KNe," \u2014 "),tK=n(KNe,"A",{href:!0});var j9t=s(tK);SRr=r(j9t,"FlaxRobertaForCausalLM"),j9t.forEach(t),RRr=r(KNe," (RoBERTa model)"),KNe.forEach(t),PRr=i(Ne),x3=n(Ne,"LI",{});var ZNe=s(x3);TEe=n(ZNe,"STRONG",{});var D9t=s(TEe);BRr=r(D9t,"xglm"),D9t.forEach(t),IRr=r(ZNe," \u2014 "),aK=n(ZNe,"A",{href:!0});var G9t=s(aK);NRr=r(G9t,"FlaxXGLMForCausalLM"),G9t.forEach(t),qRr=r(ZNe," (XGLM model)"),ZNe.forEach(t),Ne.forEach(t),jRr=i(zl),T($3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),eGe=i(f),Ic=n(f,"H2",{class:!0});var lVe=s(Ic);k3=n(lVe,"A",{id:!0,class:!0,href:!0});var O9t=s(k3);MEe=n(O9t,"SPAN",{});var V9t=s(MEe);T(Z9.$$.fragment,V9t),V9t.forEach(t),O9t.forEach(t),DRr=i(lVe),EEe=n(lVe,"SPAN",{});var X9t=s(EEe);GRr=r(X9t,"FlaxAutoModelForPreTraining"),X9t.forEach(t),lVe.forEach(t),oGe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(ex.$$.fragment,Wl),ORr=i(Wl),Nc=n(Wl,"P",{});var Coe=s(Nc);VRr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nK=n(Coe,"A",{href:!0});var z9t=s(nK);XRr=r(z9t,"from_pretrained()"),z9t.forEach(t),zRr=r(Coe," class method or the "),sK=n(Coe,"A",{href:!0});var W9t=s(sK);WRr=r(W9t,"from_config()"),W9t.forEach(t),QRr=r(Coe,` class
method.`),Coe.forEach(t),HRr=i(Wl),ox=n(Wl,"P",{});var iVe=s(ox);URr=r(iVe,"This class cannot be instantiated directly using "),CEe=n(iVe,"CODE",{});var Q9t=s(CEe);JRr=r(Q9t,"__init__()"),Q9t.forEach(t),YRr=r(iVe," (throws an error)."),iVe.forEach(t),KRr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var T6=s(Vt);T(rx.$$.fragment,T6),ZRr=i(T6),wEe=n(T6,"P",{});var H9t=s(wEe);ePr=r(H9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H9t.forEach(t),oPr=i(T6),qc=n(T6,"P",{});var woe=s(qc);rPr=r(woe,`Note:
Loading a model from its configuration file does `),AEe=n(woe,"STRONG",{});var U9t=s(AEe);tPr=r(U9t,"not"),U9t.forEach(t),aPr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(woe,"A",{href:!0});var J9t=s(lK);nPr=r(J9t,"from_pretrained()"),J9t.forEach(t),sPr=r(woe," to load the model weights."),woe.forEach(t),lPr=i(T6),T(S3.$$.fragment,T6),T6.forEach(t),iPr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(tx.$$.fragment,Ql),dPr=i(Ql),LEe=n(Ql,"P",{});var Y9t=s(LEe);cPr=r(Y9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y9t.forEach(t),fPr=i(Ql),_n=n(Ql,"P",{});var M6=s(_n);mPr=r(M6,"The model class to instantiate is selected based on the "),yEe=n(M6,"CODE",{});var K9t=s(yEe);gPr=r(K9t,"model_type"),K9t.forEach(t),hPr=r(M6,` property of the config object (either
passed as an argument or loaded from `),xEe=n(M6,"CODE",{});var Z9t=s(xEe);pPr=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),_Pr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=n(M6,"CODE",{});var ext=s($Ee);uPr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),bPr=r(M6,":"),M6.forEach(t),vPr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);R3=n(we,"LI",{});var eqe=s(R3);kEe=n(eqe,"STRONG",{});var oxt=s(kEe);FPr=r(oxt,"albert"),oxt.forEach(t),TPr=r(eqe," \u2014 "),iK=n(eqe,"A",{href:!0});var rxt=s(iK);MPr=r(rxt,"FlaxAlbertForPreTraining"),rxt.forEach(t),EPr=r(eqe," (ALBERT model)"),eqe.forEach(t),CPr=i(we),P3=n(we,"LI",{});var oqe=s(P3);SEe=n(oqe,"STRONG",{});var txt=s(SEe);wPr=r(txt,"bart"),txt.forEach(t),APr=r(oqe," \u2014 "),dK=n(oqe,"A",{href:!0});var axt=s(dK);LPr=r(axt,"FlaxBartForConditionalGeneration"),axt.forEach(t),yPr=r(oqe," (BART model)"),oqe.forEach(t),xPr=i(we),B3=n(we,"LI",{});var rqe=s(B3);REe=n(rqe,"STRONG",{});var nxt=s(REe);$Pr=r(nxt,"bert"),nxt.forEach(t),kPr=r(rqe," \u2014 "),cK=n(rqe,"A",{href:!0});var sxt=s(cK);SPr=r(sxt,"FlaxBertForPreTraining"),sxt.forEach(t),RPr=r(rqe," (BERT model)"),rqe.forEach(t),PPr=i(we),I3=n(we,"LI",{});var tqe=s(I3);PEe=n(tqe,"STRONG",{});var lxt=s(PEe);BPr=r(lxt,"big_bird"),lxt.forEach(t),IPr=r(tqe," \u2014 "),fK=n(tqe,"A",{href:!0});var ixt=s(fK);NPr=r(ixt,"FlaxBigBirdForPreTraining"),ixt.forEach(t),qPr=r(tqe," (BigBird model)"),tqe.forEach(t),jPr=i(we),N3=n(we,"LI",{});var aqe=s(N3);BEe=n(aqe,"STRONG",{});var dxt=s(BEe);DPr=r(dxt,"electra"),dxt.forEach(t),GPr=r(aqe," \u2014 "),mK=n(aqe,"A",{href:!0});var cxt=s(mK);OPr=r(cxt,"FlaxElectraForPreTraining"),cxt.forEach(t),VPr=r(aqe," (ELECTRA model)"),aqe.forEach(t),XPr=i(we),q3=n(we,"LI",{});var nqe=s(q3);IEe=n(nqe,"STRONG",{});var fxt=s(IEe);zPr=r(fxt,"mbart"),fxt.forEach(t),WPr=r(nqe," \u2014 "),gK=n(nqe,"A",{href:!0});var mxt=s(gK);QPr=r(mxt,"FlaxMBartForConditionalGeneration"),mxt.forEach(t),HPr=r(nqe," (mBART model)"),nqe.forEach(t),UPr=i(we),j3=n(we,"LI",{});var sqe=s(j3);NEe=n(sqe,"STRONG",{});var gxt=s(NEe);JPr=r(gxt,"mt5"),gxt.forEach(t),YPr=r(sqe," \u2014 "),hK=n(sqe,"A",{href:!0});var hxt=s(hK);KPr=r(hxt,"FlaxMT5ForConditionalGeneration"),hxt.forEach(t),ZPr=r(sqe," (MT5 model)"),sqe.forEach(t),eBr=i(we),D3=n(we,"LI",{});var lqe=s(D3);qEe=n(lqe,"STRONG",{});var pxt=s(qEe);oBr=r(pxt,"roberta"),pxt.forEach(t),rBr=r(lqe," \u2014 "),pK=n(lqe,"A",{href:!0});var _xt=s(pK);tBr=r(_xt,"FlaxRobertaForMaskedLM"),_xt.forEach(t),aBr=r(lqe," (RoBERTa model)"),lqe.forEach(t),nBr=i(we),G3=n(we,"LI",{});var iqe=s(G3);jEe=n(iqe,"STRONG",{});var uxt=s(jEe);sBr=r(uxt,"roformer"),uxt.forEach(t),lBr=r(iqe," \u2014 "),_K=n(iqe,"A",{href:!0});var bxt=s(_K);iBr=r(bxt,"FlaxRoFormerForMaskedLM"),bxt.forEach(t),dBr=r(iqe," (RoFormer model)"),iqe.forEach(t),cBr=i(we),O3=n(we,"LI",{});var dqe=s(O3);DEe=n(dqe,"STRONG",{});var vxt=s(DEe);fBr=r(vxt,"t5"),vxt.forEach(t),mBr=r(dqe," \u2014 "),uK=n(dqe,"A",{href:!0});var Fxt=s(uK);gBr=r(Fxt,"FlaxT5ForConditionalGeneration"),Fxt.forEach(t),hBr=r(dqe," (T5 model)"),dqe.forEach(t),pBr=i(we),V3=n(we,"LI",{});var cqe=s(V3);GEe=n(cqe,"STRONG",{});var Txt=s(GEe);_Br=r(Txt,"wav2vec2"),Txt.forEach(t),uBr=r(cqe," \u2014 "),bK=n(cqe,"A",{href:!0});var Mxt=s(bK);bBr=r(Mxt,"FlaxWav2Vec2ForPreTraining"),Mxt.forEach(t),vBr=r(cqe," (Wav2Vec2 model)"),cqe.forEach(t),FBr=i(we),X3=n(we,"LI",{});var fqe=s(X3);OEe=n(fqe,"STRONG",{});var Ext=s(OEe);TBr=r(Ext,"xlm-roberta"),Ext.forEach(t),MBr=r(fqe," \u2014 "),vK=n(fqe,"A",{href:!0});var Cxt=s(vK);EBr=r(Cxt,"FlaxXLMRobertaForMaskedLM"),Cxt.forEach(t),CBr=r(fqe," (XLM-RoBERTa model)"),fqe.forEach(t),we.forEach(t),wBr=i(Ql),T(z3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),rGe=i(f),jc=n(f,"H2",{class:!0});var dVe=s(jc);W3=n(dVe,"A",{id:!0,class:!0,href:!0});var wxt=s(W3);VEe=n(wxt,"SPAN",{});var Axt=s(VEe);T(ax.$$.fragment,Axt),Axt.forEach(t),wxt.forEach(t),ABr=i(dVe),XEe=n(dVe,"SPAN",{});var Lxt=s(XEe);LBr=r(Lxt,"FlaxAutoModelForMaskedLM"),Lxt.forEach(t),dVe.forEach(t),tGe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(nx.$$.fragment,Hl),yBr=i(Hl),Dc=n(Hl,"P",{});var Aoe=s(Dc);xBr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FK=n(Aoe,"A",{href:!0});var yxt=s(FK);$Br=r(yxt,"from_pretrained()"),yxt.forEach(t),kBr=r(Aoe," class method or the "),TK=n(Aoe,"A",{href:!0});var xxt=s(TK);SBr=r(xxt,"from_config()"),xxt.forEach(t),RBr=r(Aoe,` class
method.`),Aoe.forEach(t),PBr=i(Hl),sx=n(Hl,"P",{});var cVe=s(sx);BBr=r(cVe,"This class cannot be instantiated directly using "),zEe=n(cVe,"CODE",{});var $xt=s(zEe);IBr=r($xt,"__init__()"),$xt.forEach(t),NBr=r(cVe," (throws an error)."),cVe.forEach(t),qBr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var E6=s(Xt);T(lx.$$.fragment,E6),jBr=i(E6),WEe=n(E6,"P",{});var kxt=s(WEe);DBr=r(kxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kxt.forEach(t),GBr=i(E6),Gc=n(E6,"P",{});var Loe=s(Gc);OBr=r(Loe,`Note:
Loading a model from its configuration file does `),QEe=n(Loe,"STRONG",{});var Sxt=s(QEe);VBr=r(Sxt,"not"),Sxt.forEach(t),XBr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(Loe,"A",{href:!0});var Rxt=s(MK);zBr=r(Rxt,"from_pretrained()"),Rxt.forEach(t),WBr=r(Loe," to load the model weights."),Loe.forEach(t),QBr=i(E6),T(Q3.$$.fragment,E6),E6.forEach(t),HBr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(ix.$$.fragment,Ul),UBr=i(Ul),HEe=n(Ul,"P",{});var Pxt=s(HEe);JBr=r(Pxt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pxt.forEach(t),YBr=i(Ul),un=n(Ul,"P",{});var C6=s(un);KBr=r(C6,"The model class to instantiate is selected based on the "),UEe=n(C6,"CODE",{});var Bxt=s(UEe);ZBr=r(Bxt,"model_type"),Bxt.forEach(t),eIr=r(C6,` property of the config object (either
passed as an argument or loaded from `),JEe=n(C6,"CODE",{});var Ixt=s(JEe);oIr=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),rIr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=n(C6,"CODE",{});var Nxt=s(YEe);tIr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),aIr=r(C6,":"),C6.forEach(t),nIr=i(Ul),$e=n(Ul,"UL",{});var qe=s($e);H3=n(qe,"LI",{});var mqe=s(H3);KEe=n(mqe,"STRONG",{});var qxt=s(KEe);sIr=r(qxt,"albert"),qxt.forEach(t),lIr=r(mqe," \u2014 "),EK=n(mqe,"A",{href:!0});var jxt=s(EK);iIr=r(jxt,"FlaxAlbertForMaskedLM"),jxt.forEach(t),dIr=r(mqe," (ALBERT model)"),mqe.forEach(t),cIr=i(qe),U3=n(qe,"LI",{});var gqe=s(U3);ZEe=n(gqe,"STRONG",{});var Dxt=s(ZEe);fIr=r(Dxt,"bart"),Dxt.forEach(t),mIr=r(gqe," \u2014 "),CK=n(gqe,"A",{href:!0});var Gxt=s(CK);gIr=r(Gxt,"FlaxBartForConditionalGeneration"),Gxt.forEach(t),hIr=r(gqe," (BART model)"),gqe.forEach(t),pIr=i(qe),J3=n(qe,"LI",{});var hqe=s(J3);eCe=n(hqe,"STRONG",{});var Oxt=s(eCe);_Ir=r(Oxt,"bert"),Oxt.forEach(t),uIr=r(hqe," \u2014 "),wK=n(hqe,"A",{href:!0});var Vxt=s(wK);bIr=r(Vxt,"FlaxBertForMaskedLM"),Vxt.forEach(t),vIr=r(hqe," (BERT model)"),hqe.forEach(t),FIr=i(qe),Y3=n(qe,"LI",{});var pqe=s(Y3);oCe=n(pqe,"STRONG",{});var Xxt=s(oCe);TIr=r(Xxt,"big_bird"),Xxt.forEach(t),MIr=r(pqe," \u2014 "),AK=n(pqe,"A",{href:!0});var zxt=s(AK);EIr=r(zxt,"FlaxBigBirdForMaskedLM"),zxt.forEach(t),CIr=r(pqe," (BigBird model)"),pqe.forEach(t),wIr=i(qe),K3=n(qe,"LI",{});var _qe=s(K3);rCe=n(_qe,"STRONG",{});var Wxt=s(rCe);AIr=r(Wxt,"distilbert"),Wxt.forEach(t),LIr=r(_qe," \u2014 "),LK=n(_qe,"A",{href:!0});var Qxt=s(LK);yIr=r(Qxt,"FlaxDistilBertForMaskedLM"),Qxt.forEach(t),xIr=r(_qe," (DistilBERT model)"),_qe.forEach(t),$Ir=i(qe),Z3=n(qe,"LI",{});var uqe=s(Z3);tCe=n(uqe,"STRONG",{});var Hxt=s(tCe);kIr=r(Hxt,"electra"),Hxt.forEach(t),SIr=r(uqe," \u2014 "),yK=n(uqe,"A",{href:!0});var Uxt=s(yK);RIr=r(Uxt,"FlaxElectraForMaskedLM"),Uxt.forEach(t),PIr=r(uqe," (ELECTRA model)"),uqe.forEach(t),BIr=i(qe),e0=n(qe,"LI",{});var bqe=s(e0);aCe=n(bqe,"STRONG",{});var Jxt=s(aCe);IIr=r(Jxt,"mbart"),Jxt.forEach(t),NIr=r(bqe," \u2014 "),xK=n(bqe,"A",{href:!0});var Yxt=s(xK);qIr=r(Yxt,"FlaxMBartForConditionalGeneration"),Yxt.forEach(t),jIr=r(bqe," (mBART model)"),bqe.forEach(t),DIr=i(qe),o0=n(qe,"LI",{});var vqe=s(o0);nCe=n(vqe,"STRONG",{});var Kxt=s(nCe);GIr=r(Kxt,"roberta"),Kxt.forEach(t),OIr=r(vqe," \u2014 "),$K=n(vqe,"A",{href:!0});var Zxt=s($K);VIr=r(Zxt,"FlaxRobertaForMaskedLM"),Zxt.forEach(t),XIr=r(vqe," (RoBERTa model)"),vqe.forEach(t),zIr=i(qe),r0=n(qe,"LI",{});var Fqe=s(r0);sCe=n(Fqe,"STRONG",{});var e$t=s(sCe);WIr=r(e$t,"roformer"),e$t.forEach(t),QIr=r(Fqe," \u2014 "),kK=n(Fqe,"A",{href:!0});var o$t=s(kK);HIr=r(o$t,"FlaxRoFormerForMaskedLM"),o$t.forEach(t),UIr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),JIr=i(qe),t0=n(qe,"LI",{});var Tqe=s(t0);lCe=n(Tqe,"STRONG",{});var r$t=s(lCe);YIr=r(r$t,"xlm-roberta"),r$t.forEach(t),KIr=r(Tqe," \u2014 "),SK=n(Tqe,"A",{href:!0});var t$t=s(SK);ZIr=r(t$t,"FlaxXLMRobertaForMaskedLM"),t$t.forEach(t),eNr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),qe.forEach(t),oNr=i(Ul),T(a0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),aGe=i(f),Oc=n(f,"H2",{class:!0});var fVe=s(Oc);n0=n(fVe,"A",{id:!0,class:!0,href:!0});var a$t=s(n0);iCe=n(a$t,"SPAN",{});var n$t=s(iCe);T(dx.$$.fragment,n$t),n$t.forEach(t),a$t.forEach(t),rNr=i(fVe),dCe=n(fVe,"SPAN",{});var s$t=s(dCe);tNr=r(s$t,"FlaxAutoModelForSeq2SeqLM"),s$t.forEach(t),fVe.forEach(t),nGe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(cx.$$.fragment,Jl),aNr=i(Jl),Vc=n(Jl,"P",{});var yoe=s(Vc);nNr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RK=n(yoe,"A",{href:!0});var l$t=s(RK);sNr=r(l$t,"from_pretrained()"),l$t.forEach(t),lNr=r(yoe," class method or the "),PK=n(yoe,"A",{href:!0});var i$t=s(PK);iNr=r(i$t,"from_config()"),i$t.forEach(t),dNr=r(yoe,` class
method.`),yoe.forEach(t),cNr=i(Jl),fx=n(Jl,"P",{});var mVe=s(fx);fNr=r(mVe,"This class cannot be instantiated directly using "),cCe=n(mVe,"CODE",{});var d$t=s(cCe);mNr=r(d$t,"__init__()"),d$t.forEach(t),gNr=r(mVe," (throws an error)."),mVe.forEach(t),hNr=i(Jl),zt=n(Jl,"DIV",{class:!0});var w6=s(zt);T(mx.$$.fragment,w6),pNr=i(w6),fCe=n(w6,"P",{});var c$t=s(fCe);_Nr=r(c$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c$t.forEach(t),uNr=i(w6),Xc=n(w6,"P",{});var xoe=s(Xc);bNr=r(xoe,`Note:
Loading a model from its configuration file does `),mCe=n(xoe,"STRONG",{});var f$t=s(mCe);vNr=r(f$t,"not"),f$t.forEach(t),FNr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(xoe,"A",{href:!0});var m$t=s(BK);TNr=r(m$t,"from_pretrained()"),m$t.forEach(t),MNr=r(xoe," to load the model weights."),xoe.forEach(t),ENr=i(w6),T(s0.$$.fragment,w6),w6.forEach(t),CNr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(gx.$$.fragment,Yl),wNr=i(Yl),gCe=n(Yl,"P",{});var g$t=s(gCe);ANr=r(g$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g$t.forEach(t),LNr=i(Yl),bn=n(Yl,"P",{});var A6=s(bn);yNr=r(A6,"The model class to instantiate is selected based on the "),hCe=n(A6,"CODE",{});var h$t=s(hCe);xNr=r(h$t,"model_type"),h$t.forEach(t),$Nr=r(A6,` property of the config object (either
passed as an argument or loaded from `),pCe=n(A6,"CODE",{});var p$t=s(pCe);kNr=r(p$t,"pretrained_model_name_or_path"),p$t.forEach(t),SNr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(A6,"CODE",{});var _$t=s(_Ce);RNr=r(_$t,"pretrained_model_name_or_path"),_$t.forEach(t),PNr=r(A6,":"),A6.forEach(t),BNr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);l0=n(ze,"LI",{});var Mqe=s(l0);uCe=n(Mqe,"STRONG",{});var u$t=s(uCe);INr=r(u$t,"bart"),u$t.forEach(t),NNr=r(Mqe," \u2014 "),IK=n(Mqe,"A",{href:!0});var b$t=s(IK);qNr=r(b$t,"FlaxBartForConditionalGeneration"),b$t.forEach(t),jNr=r(Mqe," (BART model)"),Mqe.forEach(t),DNr=i(ze),i0=n(ze,"LI",{});var Eqe=s(i0);bCe=n(Eqe,"STRONG",{});var v$t=s(bCe);GNr=r(v$t,"blenderbot"),v$t.forEach(t),ONr=r(Eqe," \u2014 "),NK=n(Eqe,"A",{href:!0});var F$t=s(NK);VNr=r(F$t,"FlaxBlenderbotForConditionalGeneration"),F$t.forEach(t),XNr=r(Eqe," (Blenderbot model)"),Eqe.forEach(t),zNr=i(ze),d0=n(ze,"LI",{});var Cqe=s(d0);vCe=n(Cqe,"STRONG",{});var T$t=s(vCe);WNr=r(T$t,"blenderbot-small"),T$t.forEach(t),QNr=r(Cqe," \u2014 "),qK=n(Cqe,"A",{href:!0});var M$t=s(qK);HNr=r(M$t,"FlaxBlenderbotSmallForConditionalGeneration"),M$t.forEach(t),UNr=r(Cqe," (BlenderbotSmall model)"),Cqe.forEach(t),JNr=i(ze),c0=n(ze,"LI",{});var wqe=s(c0);FCe=n(wqe,"STRONG",{});var E$t=s(FCe);YNr=r(E$t,"encoder-decoder"),E$t.forEach(t),KNr=r(wqe," \u2014 "),jK=n(wqe,"A",{href:!0});var C$t=s(jK);ZNr=r(C$t,"FlaxEncoderDecoderModel"),C$t.forEach(t),eqr=r(wqe," (Encoder decoder model)"),wqe.forEach(t),oqr=i(ze),f0=n(ze,"LI",{});var Aqe=s(f0);TCe=n(Aqe,"STRONG",{});var w$t=s(TCe);rqr=r(w$t,"marian"),w$t.forEach(t),tqr=r(Aqe," \u2014 "),DK=n(Aqe,"A",{href:!0});var A$t=s(DK);aqr=r(A$t,"FlaxMarianMTModel"),A$t.forEach(t),nqr=r(Aqe," (Marian model)"),Aqe.forEach(t),sqr=i(ze),m0=n(ze,"LI",{});var Lqe=s(m0);MCe=n(Lqe,"STRONG",{});var L$t=s(MCe);lqr=r(L$t,"mbart"),L$t.forEach(t),iqr=r(Lqe," \u2014 "),GK=n(Lqe,"A",{href:!0});var y$t=s(GK);dqr=r(y$t,"FlaxMBartForConditionalGeneration"),y$t.forEach(t),cqr=r(Lqe," (mBART model)"),Lqe.forEach(t),fqr=i(ze),g0=n(ze,"LI",{});var yqe=s(g0);ECe=n(yqe,"STRONG",{});var x$t=s(ECe);mqr=r(x$t,"mt5"),x$t.forEach(t),gqr=r(yqe," \u2014 "),OK=n(yqe,"A",{href:!0});var $$t=s(OK);hqr=r($$t,"FlaxMT5ForConditionalGeneration"),$$t.forEach(t),pqr=r(yqe," (MT5 model)"),yqe.forEach(t),_qr=i(ze),h0=n(ze,"LI",{});var xqe=s(h0);CCe=n(xqe,"STRONG",{});var k$t=s(CCe);uqr=r(k$t,"pegasus"),k$t.forEach(t),bqr=r(xqe," \u2014 "),VK=n(xqe,"A",{href:!0});var S$t=s(VK);vqr=r(S$t,"FlaxPegasusForConditionalGeneration"),S$t.forEach(t),Fqr=r(xqe," (Pegasus model)"),xqe.forEach(t),Tqr=i(ze),p0=n(ze,"LI",{});var $qe=s(p0);wCe=n($qe,"STRONG",{});var R$t=s(wCe);Mqr=r(R$t,"t5"),R$t.forEach(t),Eqr=r($qe," \u2014 "),XK=n($qe,"A",{href:!0});var P$t=s(XK);Cqr=r(P$t,"FlaxT5ForConditionalGeneration"),P$t.forEach(t),wqr=r($qe," (T5 model)"),$qe.forEach(t),ze.forEach(t),Aqr=i(Yl),T(_0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),sGe=i(f),zc=n(f,"H2",{class:!0});var gVe=s(zc);u0=n(gVe,"A",{id:!0,class:!0,href:!0});var B$t=s(u0);ACe=n(B$t,"SPAN",{});var I$t=s(ACe);T(hx.$$.fragment,I$t),I$t.forEach(t),B$t.forEach(t),Lqr=i(gVe),LCe=n(gVe,"SPAN",{});var N$t=s(LCe);yqr=r(N$t,"FlaxAutoModelForSequenceClassification"),N$t.forEach(t),gVe.forEach(t),lGe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(px.$$.fragment,Kl),xqr=i(Kl),Wc=n(Kl,"P",{});var $oe=s(Wc);$qr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zK=n($oe,"A",{href:!0});var q$t=s(zK);kqr=r(q$t,"from_pretrained()"),q$t.forEach(t),Sqr=r($oe," class method or the "),WK=n($oe,"A",{href:!0});var j$t=s(WK);Rqr=r(j$t,"from_config()"),j$t.forEach(t),Pqr=r($oe,` class
method.`),$oe.forEach(t),Bqr=i(Kl),_x=n(Kl,"P",{});var hVe=s(_x);Iqr=r(hVe,"This class cannot be instantiated directly using "),yCe=n(hVe,"CODE",{});var D$t=s(yCe);Nqr=r(D$t,"__init__()"),D$t.forEach(t),qqr=r(hVe," (throws an error)."),hVe.forEach(t),jqr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var L6=s(Wt);T(ux.$$.fragment,L6),Dqr=i(L6),xCe=n(L6,"P",{});var G$t=s(xCe);Gqr=r(G$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),G$t.forEach(t),Oqr=i(L6),Qc=n(L6,"P",{});var koe=s(Qc);Vqr=r(koe,`Note:
Loading a model from its configuration file does `),$Ce=n(koe,"STRONG",{});var O$t=s($Ce);Xqr=r(O$t,"not"),O$t.forEach(t),zqr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(koe,"A",{href:!0});var V$t=s(QK);Wqr=r(V$t,"from_pretrained()"),V$t.forEach(t),Qqr=r(koe," to load the model weights."),koe.forEach(t),Hqr=i(L6),T(b0.$$.fragment,L6),L6.forEach(t),Uqr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(bx.$$.fragment,Zl),Jqr=i(Zl),kCe=n(Zl,"P",{});var X$t=s(kCe);Yqr=r(X$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X$t.forEach(t),Kqr=i(Zl),vn=n(Zl,"P",{});var y6=s(vn);Zqr=r(y6,"The model class to instantiate is selected based on the "),SCe=n(y6,"CODE",{});var z$t=s(SCe);ejr=r(z$t,"model_type"),z$t.forEach(t),ojr=r(y6,` property of the config object (either
passed as an argument or loaded from `),RCe=n(y6,"CODE",{});var W$t=s(RCe);rjr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),tjr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(y6,"CODE",{});var Q$t=s(PCe);ajr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),njr=r(y6,":"),y6.forEach(t),sjr=i(Zl),ke=n(Zl,"UL",{});var je=s(ke);v0=n(je,"LI",{});var kqe=s(v0);BCe=n(kqe,"STRONG",{});var H$t=s(BCe);ljr=r(H$t,"albert"),H$t.forEach(t),ijr=r(kqe," \u2014 "),HK=n(kqe,"A",{href:!0});var U$t=s(HK);djr=r(U$t,"FlaxAlbertForSequenceClassification"),U$t.forEach(t),cjr=r(kqe," (ALBERT model)"),kqe.forEach(t),fjr=i(je),F0=n(je,"LI",{});var Sqe=s(F0);ICe=n(Sqe,"STRONG",{});var J$t=s(ICe);mjr=r(J$t,"bart"),J$t.forEach(t),gjr=r(Sqe," \u2014 "),UK=n(Sqe,"A",{href:!0});var Y$t=s(UK);hjr=r(Y$t,"FlaxBartForSequenceClassification"),Y$t.forEach(t),pjr=r(Sqe," (BART model)"),Sqe.forEach(t),_jr=i(je),T0=n(je,"LI",{});var Rqe=s(T0);NCe=n(Rqe,"STRONG",{});var K$t=s(NCe);ujr=r(K$t,"bert"),K$t.forEach(t),bjr=r(Rqe," \u2014 "),JK=n(Rqe,"A",{href:!0});var Z$t=s(JK);vjr=r(Z$t,"FlaxBertForSequenceClassification"),Z$t.forEach(t),Fjr=r(Rqe," (BERT model)"),Rqe.forEach(t),Tjr=i(je),M0=n(je,"LI",{});var Pqe=s(M0);qCe=n(Pqe,"STRONG",{});var ekt=s(qCe);Mjr=r(ekt,"big_bird"),ekt.forEach(t),Ejr=r(Pqe," \u2014 "),YK=n(Pqe,"A",{href:!0});var okt=s(YK);Cjr=r(okt,"FlaxBigBirdForSequenceClassification"),okt.forEach(t),wjr=r(Pqe," (BigBird model)"),Pqe.forEach(t),Ajr=i(je),E0=n(je,"LI",{});var Bqe=s(E0);jCe=n(Bqe,"STRONG",{});var rkt=s(jCe);Ljr=r(rkt,"distilbert"),rkt.forEach(t),yjr=r(Bqe," \u2014 "),KK=n(Bqe,"A",{href:!0});var tkt=s(KK);xjr=r(tkt,"FlaxDistilBertForSequenceClassification"),tkt.forEach(t),$jr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),kjr=i(je),C0=n(je,"LI",{});var Iqe=s(C0);DCe=n(Iqe,"STRONG",{});var akt=s(DCe);Sjr=r(akt,"electra"),akt.forEach(t),Rjr=r(Iqe," \u2014 "),ZK=n(Iqe,"A",{href:!0});var nkt=s(ZK);Pjr=r(nkt,"FlaxElectraForSequenceClassification"),nkt.forEach(t),Bjr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),Ijr=i(je),w0=n(je,"LI",{});var Nqe=s(w0);GCe=n(Nqe,"STRONG",{});var skt=s(GCe);Njr=r(skt,"mbart"),skt.forEach(t),qjr=r(Nqe," \u2014 "),eZ=n(Nqe,"A",{href:!0});var lkt=s(eZ);jjr=r(lkt,"FlaxMBartForSequenceClassification"),lkt.forEach(t),Djr=r(Nqe," (mBART model)"),Nqe.forEach(t),Gjr=i(je),A0=n(je,"LI",{});var qqe=s(A0);OCe=n(qqe,"STRONG",{});var ikt=s(OCe);Ojr=r(ikt,"roberta"),ikt.forEach(t),Vjr=r(qqe," \u2014 "),oZ=n(qqe,"A",{href:!0});var dkt=s(oZ);Xjr=r(dkt,"FlaxRobertaForSequenceClassification"),dkt.forEach(t),zjr=r(qqe," (RoBERTa model)"),qqe.forEach(t),Wjr=i(je),L0=n(je,"LI",{});var jqe=s(L0);VCe=n(jqe,"STRONG",{});var ckt=s(VCe);Qjr=r(ckt,"roformer"),ckt.forEach(t),Hjr=r(jqe," \u2014 "),rZ=n(jqe,"A",{href:!0});var fkt=s(rZ);Ujr=r(fkt,"FlaxRoFormerForSequenceClassification"),fkt.forEach(t),Jjr=r(jqe," (RoFormer model)"),jqe.forEach(t),Yjr=i(je),y0=n(je,"LI",{});var Dqe=s(y0);XCe=n(Dqe,"STRONG",{});var mkt=s(XCe);Kjr=r(mkt,"xlm-roberta"),mkt.forEach(t),Zjr=r(Dqe," \u2014 "),tZ=n(Dqe,"A",{href:!0});var gkt=s(tZ);eDr=r(gkt,"FlaxXLMRobertaForSequenceClassification"),gkt.forEach(t),oDr=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),je.forEach(t),rDr=i(Zl),T(x0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),iGe=i(f),Hc=n(f,"H2",{class:!0});var pVe=s(Hc);$0=n(pVe,"A",{id:!0,class:!0,href:!0});var hkt=s($0);zCe=n(hkt,"SPAN",{});var pkt=s(zCe);T(vx.$$.fragment,pkt),pkt.forEach(t),hkt.forEach(t),tDr=i(pVe),WCe=n(pVe,"SPAN",{});var _kt=s(WCe);aDr=r(_kt,"FlaxAutoModelForQuestionAnswering"),_kt.forEach(t),pVe.forEach(t),dGe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(Fx.$$.fragment,ei),nDr=i(ei),Uc=n(ei,"P",{});var Soe=s(Uc);sDr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aZ=n(Soe,"A",{href:!0});var ukt=s(aZ);lDr=r(ukt,"from_pretrained()"),ukt.forEach(t),iDr=r(Soe," class method or the "),nZ=n(Soe,"A",{href:!0});var bkt=s(nZ);dDr=r(bkt,"from_config()"),bkt.forEach(t),cDr=r(Soe,` class
method.`),Soe.forEach(t),fDr=i(ei),Tx=n(ei,"P",{});var _Ve=s(Tx);mDr=r(_Ve,"This class cannot be instantiated directly using "),QCe=n(_Ve,"CODE",{});var vkt=s(QCe);gDr=r(vkt,"__init__()"),vkt.forEach(t),hDr=r(_Ve," (throws an error)."),_Ve.forEach(t),pDr=i(ei),Qt=n(ei,"DIV",{class:!0});var x6=s(Qt);T(Mx.$$.fragment,x6),_Dr=i(x6),HCe=n(x6,"P",{});var Fkt=s(HCe);uDr=r(Fkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fkt.forEach(t),bDr=i(x6),Jc=n(x6,"P",{});var Roe=s(Jc);vDr=r(Roe,`Note:
Loading a model from its configuration file does `),UCe=n(Roe,"STRONG",{});var Tkt=s(UCe);FDr=r(Tkt,"not"),Tkt.forEach(t),TDr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=n(Roe,"A",{href:!0});var Mkt=s(sZ);MDr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),EDr=r(Roe," to load the model weights."),Roe.forEach(t),CDr=i(x6),T(k0.$$.fragment,x6),x6.forEach(t),wDr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(Ex.$$.fragment,oi),ADr=i(oi),JCe=n(oi,"P",{});var Ekt=s(JCe);LDr=r(Ekt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ekt.forEach(t),yDr=i(oi),Fn=n(oi,"P",{});var $6=s(Fn);xDr=r($6,"The model class to instantiate is selected based on the "),YCe=n($6,"CODE",{});var Ckt=s(YCe);$Dr=r(Ckt,"model_type"),Ckt.forEach(t),kDr=r($6,` property of the config object (either
passed as an argument or loaded from `),KCe=n($6,"CODE",{});var wkt=s(KCe);SDr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),RDr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n($6,"CODE",{});var Akt=s(ZCe);PDr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),BDr=r($6,":"),$6.forEach(t),IDr=i(oi),Se=n(oi,"UL",{});var De=s(Se);S0=n(De,"LI",{});var Gqe=s(S0);e5e=n(Gqe,"STRONG",{});var Lkt=s(e5e);NDr=r(Lkt,"albert"),Lkt.forEach(t),qDr=r(Gqe," \u2014 "),lZ=n(Gqe,"A",{href:!0});var ykt=s(lZ);jDr=r(ykt,"FlaxAlbertForQuestionAnswering"),ykt.forEach(t),DDr=r(Gqe," (ALBERT model)"),Gqe.forEach(t),GDr=i(De),R0=n(De,"LI",{});var Oqe=s(R0);o5e=n(Oqe,"STRONG",{});var xkt=s(o5e);ODr=r(xkt,"bart"),xkt.forEach(t),VDr=r(Oqe," \u2014 "),iZ=n(Oqe,"A",{href:!0});var $kt=s(iZ);XDr=r($kt,"FlaxBartForQuestionAnswering"),$kt.forEach(t),zDr=r(Oqe," (BART model)"),Oqe.forEach(t),WDr=i(De),P0=n(De,"LI",{});var Vqe=s(P0);r5e=n(Vqe,"STRONG",{});var kkt=s(r5e);QDr=r(kkt,"bert"),kkt.forEach(t),HDr=r(Vqe," \u2014 "),dZ=n(Vqe,"A",{href:!0});var Skt=s(dZ);UDr=r(Skt,"FlaxBertForQuestionAnswering"),Skt.forEach(t),JDr=r(Vqe," (BERT model)"),Vqe.forEach(t),YDr=i(De),B0=n(De,"LI",{});var Xqe=s(B0);t5e=n(Xqe,"STRONG",{});var Rkt=s(t5e);KDr=r(Rkt,"big_bird"),Rkt.forEach(t),ZDr=r(Xqe," \u2014 "),cZ=n(Xqe,"A",{href:!0});var Pkt=s(cZ);eGr=r(Pkt,"FlaxBigBirdForQuestionAnswering"),Pkt.forEach(t),oGr=r(Xqe," (BigBird model)"),Xqe.forEach(t),rGr=i(De),I0=n(De,"LI",{});var zqe=s(I0);a5e=n(zqe,"STRONG",{});var Bkt=s(a5e);tGr=r(Bkt,"distilbert"),Bkt.forEach(t),aGr=r(zqe," \u2014 "),fZ=n(zqe,"A",{href:!0});var Ikt=s(fZ);nGr=r(Ikt,"FlaxDistilBertForQuestionAnswering"),Ikt.forEach(t),sGr=r(zqe," (DistilBERT model)"),zqe.forEach(t),lGr=i(De),N0=n(De,"LI",{});var Wqe=s(N0);n5e=n(Wqe,"STRONG",{});var Nkt=s(n5e);iGr=r(Nkt,"electra"),Nkt.forEach(t),dGr=r(Wqe," \u2014 "),mZ=n(Wqe,"A",{href:!0});var qkt=s(mZ);cGr=r(qkt,"FlaxElectraForQuestionAnswering"),qkt.forEach(t),fGr=r(Wqe," (ELECTRA model)"),Wqe.forEach(t),mGr=i(De),q0=n(De,"LI",{});var Qqe=s(q0);s5e=n(Qqe,"STRONG",{});var jkt=s(s5e);gGr=r(jkt,"mbart"),jkt.forEach(t),hGr=r(Qqe," \u2014 "),gZ=n(Qqe,"A",{href:!0});var Dkt=s(gZ);pGr=r(Dkt,"FlaxMBartForQuestionAnswering"),Dkt.forEach(t),_Gr=r(Qqe," (mBART model)"),Qqe.forEach(t),uGr=i(De),j0=n(De,"LI",{});var Hqe=s(j0);l5e=n(Hqe,"STRONG",{});var Gkt=s(l5e);bGr=r(Gkt,"roberta"),Gkt.forEach(t),vGr=r(Hqe," \u2014 "),hZ=n(Hqe,"A",{href:!0});var Okt=s(hZ);FGr=r(Okt,"FlaxRobertaForQuestionAnswering"),Okt.forEach(t),TGr=r(Hqe," (RoBERTa model)"),Hqe.forEach(t),MGr=i(De),D0=n(De,"LI",{});var Uqe=s(D0);i5e=n(Uqe,"STRONG",{});var Vkt=s(i5e);EGr=r(Vkt,"roformer"),Vkt.forEach(t),CGr=r(Uqe," \u2014 "),pZ=n(Uqe,"A",{href:!0});var Xkt=s(pZ);wGr=r(Xkt,"FlaxRoFormerForQuestionAnswering"),Xkt.forEach(t),AGr=r(Uqe," (RoFormer model)"),Uqe.forEach(t),LGr=i(De),G0=n(De,"LI",{});var Jqe=s(G0);d5e=n(Jqe,"STRONG",{});var zkt=s(d5e);yGr=r(zkt,"xlm-roberta"),zkt.forEach(t),xGr=r(Jqe," \u2014 "),_Z=n(Jqe,"A",{href:!0});var Wkt=s(_Z);$Gr=r(Wkt,"FlaxXLMRobertaForQuestionAnswering"),Wkt.forEach(t),kGr=r(Jqe," (XLM-RoBERTa model)"),Jqe.forEach(t),De.forEach(t),SGr=i(oi),T(O0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),cGe=i(f),Yc=n(f,"H2",{class:!0});var uVe=s(Yc);V0=n(uVe,"A",{id:!0,class:!0,href:!0});var Qkt=s(V0);c5e=n(Qkt,"SPAN",{});var Hkt=s(c5e);T(Cx.$$.fragment,Hkt),Hkt.forEach(t),Qkt.forEach(t),RGr=i(uVe),f5e=n(uVe,"SPAN",{});var Ukt=s(f5e);PGr=r(Ukt,"FlaxAutoModelForTokenClassification"),Ukt.forEach(t),uVe.forEach(t),fGe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(wx.$$.fragment,ri),BGr=i(ri),Kc=n(ri,"P",{});var Poe=s(Kc);IGr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uZ=n(Poe,"A",{href:!0});var Jkt=s(uZ);NGr=r(Jkt,"from_pretrained()"),Jkt.forEach(t),qGr=r(Poe," class method or the "),bZ=n(Poe,"A",{href:!0});var Ykt=s(bZ);jGr=r(Ykt,"from_config()"),Ykt.forEach(t),DGr=r(Poe,` class
method.`),Poe.forEach(t),GGr=i(ri),Ax=n(ri,"P",{});var bVe=s(Ax);OGr=r(bVe,"This class cannot be instantiated directly using "),m5e=n(bVe,"CODE",{});var Kkt=s(m5e);VGr=r(Kkt,"__init__()"),Kkt.forEach(t),XGr=r(bVe," (throws an error)."),bVe.forEach(t),zGr=i(ri),Ht=n(ri,"DIV",{class:!0});var k6=s(Ht);T(Lx.$$.fragment,k6),WGr=i(k6),g5e=n(k6,"P",{});var Zkt=s(g5e);QGr=r(Zkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zkt.forEach(t),HGr=i(k6),Zc=n(k6,"P",{});var Boe=s(Zc);UGr=r(Boe,`Note:
Loading a model from its configuration file does `),h5e=n(Boe,"STRONG",{});var eSt=s(h5e);JGr=r(eSt,"not"),eSt.forEach(t),YGr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Boe,"A",{href:!0});var oSt=s(vZ);KGr=r(oSt,"from_pretrained()"),oSt.forEach(t),ZGr=r(Boe," to load the model weights."),Boe.forEach(t),eOr=i(k6),T(X0.$$.fragment,k6),k6.forEach(t),oOr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(yx.$$.fragment,ti),rOr=i(ti),p5e=n(ti,"P",{});var rSt=s(p5e);tOr=r(rSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rSt.forEach(t),aOr=i(ti),Tn=n(ti,"P",{});var S6=s(Tn);nOr=r(S6,"The model class to instantiate is selected based on the "),_5e=n(S6,"CODE",{});var tSt=s(_5e);sOr=r(tSt,"model_type"),tSt.forEach(t),lOr=r(S6,` property of the config object (either
passed as an argument or loaded from `),u5e=n(S6,"CODE",{});var aSt=s(u5e);iOr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),dOr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(S6,"CODE",{});var nSt=s(b5e);cOr=r(nSt,"pretrained_model_name_or_path"),nSt.forEach(t),fOr=r(S6,":"),S6.forEach(t),mOr=i(ti),Oe=n(ti,"UL",{});var Fo=s(Oe);z0=n(Fo,"LI",{});var Yqe=s(z0);v5e=n(Yqe,"STRONG",{});var sSt=s(v5e);gOr=r(sSt,"albert"),sSt.forEach(t),hOr=r(Yqe," \u2014 "),FZ=n(Yqe,"A",{href:!0});var lSt=s(FZ);pOr=r(lSt,"FlaxAlbertForTokenClassification"),lSt.forEach(t),_Or=r(Yqe," (ALBERT model)"),Yqe.forEach(t),uOr=i(Fo),W0=n(Fo,"LI",{});var Kqe=s(W0);F5e=n(Kqe,"STRONG",{});var iSt=s(F5e);bOr=r(iSt,"bert"),iSt.forEach(t),vOr=r(Kqe," \u2014 "),TZ=n(Kqe,"A",{href:!0});var dSt=s(TZ);FOr=r(dSt,"FlaxBertForTokenClassification"),dSt.forEach(t),TOr=r(Kqe," (BERT model)"),Kqe.forEach(t),MOr=i(Fo),Q0=n(Fo,"LI",{});var Zqe=s(Q0);T5e=n(Zqe,"STRONG",{});var cSt=s(T5e);EOr=r(cSt,"big_bird"),cSt.forEach(t),COr=r(Zqe," \u2014 "),MZ=n(Zqe,"A",{href:!0});var fSt=s(MZ);wOr=r(fSt,"FlaxBigBirdForTokenClassification"),fSt.forEach(t),AOr=r(Zqe," (BigBird model)"),Zqe.forEach(t),LOr=i(Fo),H0=n(Fo,"LI",{});var eje=s(H0);M5e=n(eje,"STRONG",{});var mSt=s(M5e);yOr=r(mSt,"distilbert"),mSt.forEach(t),xOr=r(eje," \u2014 "),EZ=n(eje,"A",{href:!0});var gSt=s(EZ);$Or=r(gSt,"FlaxDistilBertForTokenClassification"),gSt.forEach(t),kOr=r(eje," (DistilBERT model)"),eje.forEach(t),SOr=i(Fo),U0=n(Fo,"LI",{});var oje=s(U0);E5e=n(oje,"STRONG",{});var hSt=s(E5e);ROr=r(hSt,"electra"),hSt.forEach(t),POr=r(oje," \u2014 "),CZ=n(oje,"A",{href:!0});var pSt=s(CZ);BOr=r(pSt,"FlaxElectraForTokenClassification"),pSt.forEach(t),IOr=r(oje," (ELECTRA model)"),oje.forEach(t),NOr=i(Fo),J0=n(Fo,"LI",{});var rje=s(J0);C5e=n(rje,"STRONG",{});var _St=s(C5e);qOr=r(_St,"roberta"),_St.forEach(t),jOr=r(rje," \u2014 "),wZ=n(rje,"A",{href:!0});var uSt=s(wZ);DOr=r(uSt,"FlaxRobertaForTokenClassification"),uSt.forEach(t),GOr=r(rje," (RoBERTa model)"),rje.forEach(t),OOr=i(Fo),Y0=n(Fo,"LI",{});var tje=s(Y0);w5e=n(tje,"STRONG",{});var bSt=s(w5e);VOr=r(bSt,"roformer"),bSt.forEach(t),XOr=r(tje," \u2014 "),AZ=n(tje,"A",{href:!0});var vSt=s(AZ);zOr=r(vSt,"FlaxRoFormerForTokenClassification"),vSt.forEach(t),WOr=r(tje," (RoFormer model)"),tje.forEach(t),QOr=i(Fo),K0=n(Fo,"LI",{});var aje=s(K0);A5e=n(aje,"STRONG",{});var FSt=s(A5e);HOr=r(FSt,"xlm-roberta"),FSt.forEach(t),UOr=r(aje," \u2014 "),LZ=n(aje,"A",{href:!0});var TSt=s(LZ);JOr=r(TSt,"FlaxXLMRobertaForTokenClassification"),TSt.forEach(t),YOr=r(aje," (XLM-RoBERTa model)"),aje.forEach(t),Fo.forEach(t),KOr=i(ti),T(Z0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),mGe=i(f),ef=n(f,"H2",{class:!0});var vVe=s(ef);ew=n(vVe,"A",{id:!0,class:!0,href:!0});var MSt=s(ew);L5e=n(MSt,"SPAN",{});var ESt=s(L5e);T(xx.$$.fragment,ESt),ESt.forEach(t),MSt.forEach(t),ZOr=i(vVe),y5e=n(vVe,"SPAN",{});var CSt=s(y5e);eVr=r(CSt,"FlaxAutoModelForMultipleChoice"),CSt.forEach(t),vVe.forEach(t),gGe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T($x.$$.fragment,ai),oVr=i(ai),of=n(ai,"P",{});var Ioe=s(of);rVr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yZ=n(Ioe,"A",{href:!0});var wSt=s(yZ);tVr=r(wSt,"from_pretrained()"),wSt.forEach(t),aVr=r(Ioe," class method or the "),xZ=n(Ioe,"A",{href:!0});var ASt=s(xZ);nVr=r(ASt,"from_config()"),ASt.forEach(t),sVr=r(Ioe,` class
method.`),Ioe.forEach(t),lVr=i(ai),kx=n(ai,"P",{});var FVe=s(kx);iVr=r(FVe,"This class cannot be instantiated directly using "),x5e=n(FVe,"CODE",{});var LSt=s(x5e);dVr=r(LSt,"__init__()"),LSt.forEach(t),cVr=r(FVe," (throws an error)."),FVe.forEach(t),fVr=i(ai),Ut=n(ai,"DIV",{class:!0});var R6=s(Ut);T(Sx.$$.fragment,R6),mVr=i(R6),$5e=n(R6,"P",{});var ySt=s($5e);gVr=r(ySt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ySt.forEach(t),hVr=i(R6),rf=n(R6,"P",{});var Noe=s(rf);pVr=r(Noe,`Note:
Loading a model from its configuration file does `),k5e=n(Noe,"STRONG",{});var xSt=s(k5e);_Vr=r(xSt,"not"),xSt.forEach(t),uVr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(Noe,"A",{href:!0});var $St=s($Z);bVr=r($St,"from_pretrained()"),$St.forEach(t),vVr=r(Noe," to load the model weights."),Noe.forEach(t),FVr=i(R6),T(ow.$$.fragment,R6),R6.forEach(t),TVr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Rx.$$.fragment,ni),MVr=i(ni),S5e=n(ni,"P",{});var kSt=s(S5e);EVr=r(kSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kSt.forEach(t),CVr=i(ni),Mn=n(ni,"P",{});var P6=s(Mn);wVr=r(P6,"The model class to instantiate is selected based on the "),R5e=n(P6,"CODE",{});var SSt=s(R5e);AVr=r(SSt,"model_type"),SSt.forEach(t),LVr=r(P6,` property of the config object (either
passed as an argument or loaded from `),P5e=n(P6,"CODE",{});var RSt=s(P5e);yVr=r(RSt,"pretrained_model_name_or_path"),RSt.forEach(t),xVr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(P6,"CODE",{});var PSt=s(B5e);$Vr=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),kVr=r(P6,":"),P6.forEach(t),SVr=i(ni),Ve=n(ni,"UL",{});var To=s(Ve);rw=n(To,"LI",{});var nje=s(rw);I5e=n(nje,"STRONG",{});var BSt=s(I5e);RVr=r(BSt,"albert"),BSt.forEach(t),PVr=r(nje," \u2014 "),kZ=n(nje,"A",{href:!0});var ISt=s(kZ);BVr=r(ISt,"FlaxAlbertForMultipleChoice"),ISt.forEach(t),IVr=r(nje," (ALBERT model)"),nje.forEach(t),NVr=i(To),tw=n(To,"LI",{});var sje=s(tw);N5e=n(sje,"STRONG",{});var NSt=s(N5e);qVr=r(NSt,"bert"),NSt.forEach(t),jVr=r(sje," \u2014 "),SZ=n(sje,"A",{href:!0});var qSt=s(SZ);DVr=r(qSt,"FlaxBertForMultipleChoice"),qSt.forEach(t),GVr=r(sje," (BERT model)"),sje.forEach(t),OVr=i(To),aw=n(To,"LI",{});var lje=s(aw);q5e=n(lje,"STRONG",{});var jSt=s(q5e);VVr=r(jSt,"big_bird"),jSt.forEach(t),XVr=r(lje," \u2014 "),RZ=n(lje,"A",{href:!0});var DSt=s(RZ);zVr=r(DSt,"FlaxBigBirdForMultipleChoice"),DSt.forEach(t),WVr=r(lje," (BigBird model)"),lje.forEach(t),QVr=i(To),nw=n(To,"LI",{});var ije=s(nw);j5e=n(ije,"STRONG",{});var GSt=s(j5e);HVr=r(GSt,"distilbert"),GSt.forEach(t),UVr=r(ije," \u2014 "),PZ=n(ije,"A",{href:!0});var OSt=s(PZ);JVr=r(OSt,"FlaxDistilBertForMultipleChoice"),OSt.forEach(t),YVr=r(ije," (DistilBERT model)"),ije.forEach(t),KVr=i(To),sw=n(To,"LI",{});var dje=s(sw);D5e=n(dje,"STRONG",{});var VSt=s(D5e);ZVr=r(VSt,"electra"),VSt.forEach(t),eXr=r(dje," \u2014 "),BZ=n(dje,"A",{href:!0});var XSt=s(BZ);oXr=r(XSt,"FlaxElectraForMultipleChoice"),XSt.forEach(t),rXr=r(dje," (ELECTRA model)"),dje.forEach(t),tXr=i(To),lw=n(To,"LI",{});var cje=s(lw);G5e=n(cje,"STRONG",{});var zSt=s(G5e);aXr=r(zSt,"roberta"),zSt.forEach(t),nXr=r(cje," \u2014 "),IZ=n(cje,"A",{href:!0});var WSt=s(IZ);sXr=r(WSt,"FlaxRobertaForMultipleChoice"),WSt.forEach(t),lXr=r(cje," (RoBERTa model)"),cje.forEach(t),iXr=i(To),iw=n(To,"LI",{});var fje=s(iw);O5e=n(fje,"STRONG",{});var QSt=s(O5e);dXr=r(QSt,"roformer"),QSt.forEach(t),cXr=r(fje," \u2014 "),NZ=n(fje,"A",{href:!0});var HSt=s(NZ);fXr=r(HSt,"FlaxRoFormerForMultipleChoice"),HSt.forEach(t),mXr=r(fje," (RoFormer model)"),fje.forEach(t),gXr=i(To),dw=n(To,"LI",{});var mje=s(dw);V5e=n(mje,"STRONG",{});var USt=s(V5e);hXr=r(USt,"xlm-roberta"),USt.forEach(t),pXr=r(mje," \u2014 "),qZ=n(mje,"A",{href:!0});var JSt=s(qZ);_Xr=r(JSt,"FlaxXLMRobertaForMultipleChoice"),JSt.forEach(t),uXr=r(mje," (XLM-RoBERTa model)"),mje.forEach(t),To.forEach(t),bXr=i(ni),T(cw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),hGe=i(f),tf=n(f,"H2",{class:!0});var TVe=s(tf);fw=n(TVe,"A",{id:!0,class:!0,href:!0});var YSt=s(fw);X5e=n(YSt,"SPAN",{});var KSt=s(X5e);T(Px.$$.fragment,KSt),KSt.forEach(t),YSt.forEach(t),vXr=i(TVe),z5e=n(TVe,"SPAN",{});var ZSt=s(z5e);FXr=r(ZSt,"FlaxAutoModelForNextSentencePrediction"),ZSt.forEach(t),TVe.forEach(t),pGe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Bx.$$.fragment,si),TXr=i(si),af=n(si,"P",{});var qoe=s(af);MXr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jZ=n(qoe,"A",{href:!0});var eRt=s(jZ);EXr=r(eRt,"from_pretrained()"),eRt.forEach(t),CXr=r(qoe," class method or the "),DZ=n(qoe,"A",{href:!0});var oRt=s(DZ);wXr=r(oRt,"from_config()"),oRt.forEach(t),AXr=r(qoe,` class
method.`),qoe.forEach(t),LXr=i(si),Ix=n(si,"P",{});var MVe=s(Ix);yXr=r(MVe,"This class cannot be instantiated directly using "),W5e=n(MVe,"CODE",{});var rRt=s(W5e);xXr=r(rRt,"__init__()"),rRt.forEach(t),$Xr=r(MVe," (throws an error)."),MVe.forEach(t),kXr=i(si),Jt=n(si,"DIV",{class:!0});var B6=s(Jt);T(Nx.$$.fragment,B6),SXr=i(B6),Q5e=n(B6,"P",{});var tRt=s(Q5e);RXr=r(tRt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRt.forEach(t),PXr=i(B6),nf=n(B6,"P",{});var joe=s(nf);BXr=r(joe,`Note:
Loading a model from its configuration file does `),H5e=n(joe,"STRONG",{});var aRt=s(H5e);IXr=r(aRt,"not"),aRt.forEach(t),NXr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(joe,"A",{href:!0});var nRt=s(GZ);qXr=r(nRt,"from_pretrained()"),nRt.forEach(t),jXr=r(joe," to load the model weights."),joe.forEach(t),DXr=i(B6),T(mw.$$.fragment,B6),B6.forEach(t),GXr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(qx.$$.fragment,li),OXr=i(li),U5e=n(li,"P",{});var sRt=s(U5e);VXr=r(sRt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sRt.forEach(t),XXr=i(li),En=n(li,"P",{});var I6=s(En);zXr=r(I6,"The model class to instantiate is selected based on the "),J5e=n(I6,"CODE",{});var lRt=s(J5e);WXr=r(lRt,"model_type"),lRt.forEach(t),QXr=r(I6,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(I6,"CODE",{});var iRt=s(Y5e);HXr=r(iRt,"pretrained_model_name_or_path"),iRt.forEach(t),UXr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(I6,"CODE",{});var dRt=s(K5e);JXr=r(dRt,"pretrained_model_name_or_path"),dRt.forEach(t),YXr=r(I6,":"),I6.forEach(t),KXr=i(li),Z5e=n(li,"UL",{});var cRt=s(Z5e);gw=n(cRt,"LI",{});var gje=s(gw);e3e=n(gje,"STRONG",{});var fRt=s(e3e);ZXr=r(fRt,"bert"),fRt.forEach(t),ezr=r(gje," \u2014 "),OZ=n(gje,"A",{href:!0});var mRt=s(OZ);ozr=r(mRt,"FlaxBertForNextSentencePrediction"),mRt.forEach(t),rzr=r(gje," (BERT model)"),gje.forEach(t),cRt.forEach(t),tzr=i(li),T(hw.$$.fragment,li),li.forEach(t),si.forEach(t),_Ge=i(f),sf=n(f,"H2",{class:!0});var EVe=s(sf);pw=n(EVe,"A",{id:!0,class:!0,href:!0});var gRt=s(pw);o3e=n(gRt,"SPAN",{});var hRt=s(o3e);T(jx.$$.fragment,hRt),hRt.forEach(t),gRt.forEach(t),azr=i(EVe),r3e=n(EVe,"SPAN",{});var pRt=s(r3e);nzr=r(pRt,"FlaxAutoModelForImageClassification"),pRt.forEach(t),EVe.forEach(t),uGe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Dx.$$.fragment,ii),szr=i(ii),lf=n(ii,"P",{});var Doe=s(lf);lzr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VZ=n(Doe,"A",{href:!0});var _Rt=s(VZ);izr=r(_Rt,"from_pretrained()"),_Rt.forEach(t),dzr=r(Doe," class method or the "),XZ=n(Doe,"A",{href:!0});var uRt=s(XZ);czr=r(uRt,"from_config()"),uRt.forEach(t),fzr=r(Doe,` class
method.`),Doe.forEach(t),mzr=i(ii),Gx=n(ii,"P",{});var CVe=s(Gx);gzr=r(CVe,"This class cannot be instantiated directly using "),t3e=n(CVe,"CODE",{});var bRt=s(t3e);hzr=r(bRt,"__init__()"),bRt.forEach(t),pzr=r(CVe," (throws an error)."),CVe.forEach(t),_zr=i(ii),Yt=n(ii,"DIV",{class:!0});var N6=s(Yt);T(Ox.$$.fragment,N6),uzr=i(N6),a3e=n(N6,"P",{});var vRt=s(a3e);bzr=r(vRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vRt.forEach(t),vzr=i(N6),df=n(N6,"P",{});var Goe=s(df);Fzr=r(Goe,`Note:
Loading a model from its configuration file does `),n3e=n(Goe,"STRONG",{});var FRt=s(n3e);Tzr=r(FRt,"not"),FRt.forEach(t),Mzr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(Goe,"A",{href:!0});var TRt=s(zZ);Ezr=r(TRt,"from_pretrained()"),TRt.forEach(t),Czr=r(Goe," to load the model weights."),Goe.forEach(t),wzr=i(N6),T(_w.$$.fragment,N6),N6.forEach(t),Azr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Vx.$$.fragment,di),Lzr=i(di),s3e=n(di,"P",{});var MRt=s(s3e);yzr=r(MRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MRt.forEach(t),xzr=i(di),Cn=n(di,"P",{});var q6=s(Cn);$zr=r(q6,"The model class to instantiate is selected based on the "),l3e=n(q6,"CODE",{});var ERt=s(l3e);kzr=r(ERt,"model_type"),ERt.forEach(t),Szr=r(q6,` property of the config object (either
passed as an argument or loaded from `),i3e=n(q6,"CODE",{});var CRt=s(i3e);Rzr=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),Pzr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(q6,"CODE",{});var wRt=s(d3e);Bzr=r(wRt,"pretrained_model_name_or_path"),wRt.forEach(t),Izr=r(q6,":"),q6.forEach(t),Nzr=i(di),Xx=n(di,"UL",{});var wVe=s(Xx);uw=n(wVe,"LI",{});var hje=s(uw);c3e=n(hje,"STRONG",{});var ARt=s(c3e);qzr=r(ARt,"beit"),ARt.forEach(t),jzr=r(hje," \u2014 "),WZ=n(hje,"A",{href:!0});var LRt=s(WZ);Dzr=r(LRt,"FlaxBeitForImageClassification"),LRt.forEach(t),Gzr=r(hje," (BEiT model)"),hje.forEach(t),Ozr=i(wVe),bw=n(wVe,"LI",{});var pje=s(bw);f3e=n(pje,"STRONG",{});var yRt=s(f3e);Vzr=r(yRt,"vit"),yRt.forEach(t),Xzr=r(pje," \u2014 "),QZ=n(pje,"A",{href:!0});var xRt=s(QZ);zzr=r(xRt,"FlaxViTForImageClassification"),xRt.forEach(t),Wzr=r(pje," (ViT model)"),pje.forEach(t),wVe.forEach(t),Qzr=i(di),T(vw.$$.fragment,di),di.forEach(t),ii.forEach(t),bGe=i(f),cf=n(f,"H2",{class:!0});var AVe=s(cf);Fw=n(AVe,"A",{id:!0,class:!0,href:!0});var $Rt=s(Fw);m3e=n($Rt,"SPAN",{});var kRt=s(m3e);T(zx.$$.fragment,kRt),kRt.forEach(t),$Rt.forEach(t),Hzr=i(AVe),g3e=n(AVe,"SPAN",{});var SRt=s(g3e);Uzr=r(SRt,"FlaxAutoModelForVision2Seq"),SRt.forEach(t),AVe.forEach(t),vGe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Wx.$$.fragment,ci),Jzr=i(ci),ff=n(ci,"P",{});var Ooe=s(ff);Yzr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=n(Ooe,"A",{href:!0});var RRt=s(HZ);Kzr=r(RRt,"from_pretrained()"),RRt.forEach(t),Zzr=r(Ooe," class method or the "),UZ=n(Ooe,"A",{href:!0});var PRt=s(UZ);eWr=r(PRt,"from_config()"),PRt.forEach(t),oWr=r(Ooe,` class
method.`),Ooe.forEach(t),rWr=i(ci),Qx=n(ci,"P",{});var LVe=s(Qx);tWr=r(LVe,"This class cannot be instantiated directly using "),h3e=n(LVe,"CODE",{});var BRt=s(h3e);aWr=r(BRt,"__init__()"),BRt.forEach(t),nWr=r(LVe," (throws an error)."),LVe.forEach(t),sWr=i(ci),Kt=n(ci,"DIV",{class:!0});var j6=s(Kt);T(Hx.$$.fragment,j6),lWr=i(j6),p3e=n(j6,"P",{});var IRt=s(p3e);iWr=r(IRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IRt.forEach(t),dWr=i(j6),mf=n(j6,"P",{});var Voe=s(mf);cWr=r(Voe,`Note:
Loading a model from its configuration file does `),_3e=n(Voe,"STRONG",{});var NRt=s(_3e);fWr=r(NRt,"not"),NRt.forEach(t),mWr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(Voe,"A",{href:!0});var qRt=s(JZ);gWr=r(qRt,"from_pretrained()"),qRt.forEach(t),hWr=r(Voe," to load the model weights."),Voe.forEach(t),pWr=i(j6),T(Tw.$$.fragment,j6),j6.forEach(t),_Wr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Ux.$$.fragment,fi),uWr=i(fi),u3e=n(fi,"P",{});var jRt=s(u3e);bWr=r(jRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jRt.forEach(t),vWr=i(fi),wn=n(fi,"P",{});var D6=s(wn);FWr=r(D6,"The model class to instantiate is selected based on the "),b3e=n(D6,"CODE",{});var DRt=s(b3e);TWr=r(DRt,"model_type"),DRt.forEach(t),MWr=r(D6,` property of the config object (either
passed as an argument or loaded from `),v3e=n(D6,"CODE",{});var GRt=s(v3e);EWr=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),CWr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(D6,"CODE",{});var ORt=s(F3e);wWr=r(ORt,"pretrained_model_name_or_path"),ORt.forEach(t),AWr=r(D6,":"),D6.forEach(t),LWr=i(fi),T3e=n(fi,"UL",{});var VRt=s(T3e);Mw=n(VRt,"LI",{});var _je=s(Mw);M3e=n(_je,"STRONG",{});var XRt=s(M3e);yWr=r(XRt,"vision-encoder-decoder"),XRt.forEach(t),xWr=r(_je," \u2014 "),YZ=n(_je,"A",{href:!0});var zRt=s(YZ);$Wr=r(zRt,"FlaxVisionEncoderDecoderModel"),zRt.forEach(t),kWr=r(_je," (Vision Encoder decoder model)"),_je.forEach(t),VRt.forEach(t),SWr=i(fi),T(Ew.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(UBt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(_k,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(uk,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig"),c(bk,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig"),c(vk,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig"),c(Fk,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig"),c(Tk,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Mk,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Ek,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Ck,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(wk,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Ak,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig"),c(Lk,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig"),c(yk,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig"),c(xk,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig"),c($k,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig"),c(kk,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig"),c(Sk,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig"),c(Rk,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig"),c(Pk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Bk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ik,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Nk,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig"),c(qk,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(jk,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Dk,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig"),c(Gk,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig"),c(Ok,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Vk,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig"),c(Xk,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig"),c(zk,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig"),c(Wk,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Qk,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Hk,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig"),c(Uk,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig"),c(Jk,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig"),c(Yk,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig"),c(Kk,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig"),c(Zk,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config"),c(eS,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(oS,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(rS,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig"),c(tS,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig"),c(aS,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig"),c(nS,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(sS,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(lS,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(iS,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(dS,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig"),c(cS,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitConfig"),c(fS,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig"),c(mS,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig"),c(gS,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig"),c(hS,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config"),c(pS,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig"),c(_S,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uS,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig"),c(bS,"href","/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTConfig"),c(vS,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FS,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TS,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig"),c(MS,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config"),c(ES,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(CS,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wS,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig"),c(AS,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig"),c(LS,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig"),c(yS,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig"),c(xS,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig"),c($S,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(kS,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(SS,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagConfig"),c(RS,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmConfig"),c(PS,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig"),c(BS,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig"),c(IS,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig"),c(NS,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig"),c(qS,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig"),c(jS,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig"),c(DS,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig"),c(GS,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig"),c(OS,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig"),c(VS,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig"),c(XS,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(zS,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(WS,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(QS,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig"),c(HS,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(US,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig"),c(JS,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config"),c(YS,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig"),c(KS,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(ZS,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(eR,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig"),c(oR,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(rR,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(tR,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig"),c(aR,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig"),c(nR,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(sR,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(lR,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(iR,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig"),c(dR,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(cR,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(fR,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(mR,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig"),c(gR,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig"),c(hR,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig"),c(pR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(_R,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(uR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(bR,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig"),c(vR,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig"),c(FR,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(TR,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(MR,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(ER,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizer"),c(wR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizerFast"),c(AR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizer"),c(LR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(yR,"href","/docs/transformers/pr_17474/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(xR,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c($R,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(SR,"href","/docs/transformers/pr_17474/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(RR,"href","/docs/transformers/pr_17474/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(PR,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(BR,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(IR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(NR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(jR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(DR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(GR,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(OR,"href","/docs/transformers/pr_17474/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(VR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizer"),c(XR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineTokenizer"),c(WR,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizer"),c(QR,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(UR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizer"),c(YR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(KR,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ZR,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oP,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizer"),c(rP,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(tP,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(aP,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(nP,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(sP,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(lP,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(iP,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(dP,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizer"),c(cP,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(fP,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(mP,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizer"),c(gP,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(hP,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(pP,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizer"),c(_P,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(uP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TP,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(MP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizer"),c(wP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c($P,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(kP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(SP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(RP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(PP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(BP,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(IP,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(NP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizer"),c(qP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizerFast"),c(jP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizer"),c(DP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(GP,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeTokenizer"),c(OP,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(VP,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zP,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianTokenizer"),c(WP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizer"),c(QP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(HP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(UP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(JP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(YP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17474/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZP,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(eB,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rB,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(aB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(nB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(sB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(iB,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(dB,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cB,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fB,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mB,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(gB,"href","/docs/transformers/pr_17474/en/model_doc/phobert#transformers.PhobertTokenizer"),c(hB,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartTokenizer"),c(pB,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(_B,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(uB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagTokenizer"),c(vB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizer"),c(FB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizerFast"),c(TB,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizer"),c(MB,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(EB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizer"),c(CB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(AB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xB,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizer"),c($B,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kB,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(SB,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizer"),c(PB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(BB,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(IB,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(NB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(qB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(jB,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasTokenizer"),c(DB,"href","/docs/transformers/pr_17474/en/model_doc/tapex#transformers.TapexTokenizer"),c(GB,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(OB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(VB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizer"),c(HB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(UB,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMTokenizer"),c(JB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(YB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(KB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eI,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oI,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(rI,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(tI,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(aI,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"id","transformers.AutoFeatureExtractor"),c(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fh,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(nI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(sI,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fI,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bI,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(FI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(TI,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c($I,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(II,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"id","transformers.AutoProcessor"),c(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(NI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(qI,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPProcessor"),c(jI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(DI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(GI,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(OI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(WI,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRProcessor"),c(QI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UI,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltProcessor"),c(JI,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"id","transformers.AutoModel"),c(gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(eN,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oN,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rN,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tN,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel"),c(aN,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel"),c(nN,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel"),c(sN,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(lN,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(iN,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel"),c(dN,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cN,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fN,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mN,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel"),c(gN,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel"),c(hN,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel"),c(pN,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel"),c(_N,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel"),c(uN,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel"),c(bN,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel"),c(vN,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel"),c(FN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(TN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(MN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(EN,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel"),c(CN,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(wN,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(AN,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel"),c(LN,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel"),c(yN,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel"),c(xN,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c($N,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel"),c(kN,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel"),c(SN,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel"),c(RN,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel"),c(PN,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel"),c(BN,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel"),c(IN,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel"),c(NN,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qN,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel"),c(jN,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model"),c(DN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(GN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(ON,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel"),c(VN,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel"),c(XN,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel"),c(zN,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(WN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(QN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(HN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(UN,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel"),c(JN,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitModel"),c(YN,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel"),c(KN,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel"),c(ZN,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel"),c(eq,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model"),c(oq,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel"),c(rq,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel"),c(tq,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel"),c(aq,"href","/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTModel"),c(nq,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(sq,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel"),c(lq,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel"),c(iq,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model"),c(dq,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel"),c(cq,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(fq,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel"),c(mq,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel"),c(gq,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel"),c(hq,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel"),c(pq,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel"),c(_q,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(uq,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel"),c(bq,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel"),c(vq,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel"),c(Fq,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel"),c(Tq,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel"),c(Mq,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(Eq,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel"),c(Cq,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel"),c(wq,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel"),c(Aq,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel"),c(Lq,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel"),c(yq,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xq,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel"),c($q,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(kq,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel"),c(Sq,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model"),c(Rq,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel"),c(Pq,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Bq,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Iq,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Nq,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qq,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel"),c(jq,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel"),c(Dq,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Gq,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Oq,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel"),c(Vq,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Xq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Wq,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel"),c(Qq,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel"),c(Hq,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel"),c(Uq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Jq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Yq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Kq,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel"),c(Zq,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel"),c(ej,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gu,"id","transformers.AutoModelForPreTraining"),c(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(oj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining"),c(nj,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining"),c(lj,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ij,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(dj,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fj,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mj,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gj,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hj,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pj,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining"),c(_j,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining"),c(bj,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining"),c(vj,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Tj,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Mj,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wj,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Aj,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Lj,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(yj,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xj,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($j,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(kj,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Rj,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Nj,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(qj,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(jj,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Dj,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Gj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Oj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Vj,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.AutoModelForCausalLM"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Qj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jj,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM"),c(Yj,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel"),c(Kj,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Zj,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eD,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oD,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rD,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tD,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aD,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nD,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sD,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(lD,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM"),c(iD,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dD,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(cD,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(fD,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(mD,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM"),c(gD,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM"),c(hD,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(pD,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_D,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM"),c(uD,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(bD,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(vD,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(FD,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(TD,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(MD,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(ED,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(CD,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(wD,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(AD,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LD,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yD,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(xD,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($D,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(kD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(SD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(RD,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.AutoModelForMaskedLM"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(PD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ID,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(GD,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(XD,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zD,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(WD,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(HD,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UD,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(JD,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(YD,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(KD,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eG,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeForMaskedLM"),c(oG,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tG,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aG,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nG,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sG,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lG,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iG,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dG,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cG,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fG,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(mG,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gG,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hG,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pG,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_G,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(uG,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForSeq2SeqLM"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(bG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AG,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel"),c($G,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(SG,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.AutoModelForSequenceClassification"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(NG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DG,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c($O,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.AutoModelForMultipleChoice"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(RO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(sV,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(lV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(iV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(dV,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(cV,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($b,"id","transformers.AutoModelForNextSentencePrediction"),c($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($b,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(fV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(pV,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(_V,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(uV,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(bV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForTokenClassification"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(vV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(EV,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification"),c(CV,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(wV,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification"),c(LV,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(xV,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c($V,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(kV,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(SV,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(RV,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(BV,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(IV,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(NV,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(jV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(DV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(GV,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(OV,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(VV,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(XV,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zV,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(WV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(QV,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(HV,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(UV,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(JV,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(YV,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(KV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(eX,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(oX,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E2,"id","transformers.AutoModelForQuestionAnswering"),c(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E2,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(rX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(vX,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(GX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(XX,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForTableQuestionAnswering"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(zX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bv,"id","transformers.AutoModelForImageClassification"),c(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bv,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(UX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification"),c(ZX,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ez,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification"),c(oz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(rz,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification"),c(tz,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(az,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(nz,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassification"),c(sz,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(lz,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(iz,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(dz,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(cz,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(fz,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(mz,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(gz,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(hz,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification"),c(pz,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification"),c(_z,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForVision2Seq"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(uz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(wz,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Az,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(yz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(xz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c($z,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(kz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Sz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForAudioFrameClassification"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Nz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(qz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(jz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Dz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForCTC"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(zz,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC"),c(Wz,"href","/docs/transformers/pr_17474/en/model_doc/mctct#transformers.MCTCTForCTC"),c(Qz,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC"),c(Hz,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Uz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Jz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Yz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Kz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Zz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(aW,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForAudioXVector"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(nW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(dW,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(cW,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(fW,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(mW,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForMaskedImageModeling"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(gW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(uW,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(bW,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForObjectDetection"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(vW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection"),c(EW,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForImageSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(CW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForSemanticSegmentation"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(yW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(SW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(RW,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(PW,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForInstanceSegmentation"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(BW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.TFAutoModel"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(jW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel"),c(VW,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel"),c(XW,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel"),c(zW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(WW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(QW,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel"),c(HW,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel"),c(UW,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel"),c(JW,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel"),c(YW,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel"),c(KW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(ZW,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel"),c(eQ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(oQ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(rQ,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(tQ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel"),c(aQ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(nQ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel"),c(sQ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(lQ,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model"),c(iQ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel"),c(dQ,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel"),c(cQ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(fQ,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel"),c(mQ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel"),c(gQ,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel"),c(hQ,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel"),c(pQ,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel"),c(_Q,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(uQ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel"),c(bQ,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model"),c(vQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(FQ,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTModel"),c(TQ,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel"),c(MQ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel"),c(EQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel"),c(CQ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel"),c(wQ,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(AQ,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel"),c(LQ,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model"),c(yQ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel"),c(xQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c($Q,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel"),c(kQ,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(SQ,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(RQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel"),c(PQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(BQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForPreTraining"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(DQ,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining"),c(OQ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(XQ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(WQ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(QQ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(HQ,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UQ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(YQ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(KQ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(eH,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oH,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tH,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aH,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(nH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sH,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(lH,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForCausalLM"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(iH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(mH,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(gH,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(hH,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(pH,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(_H,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(uH,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(bH,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(vH,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(FH,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(TH,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(MH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EH,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForImageClassification"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(CH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(yH,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(xH,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification"),c($H,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForMaskedLM"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(kH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(BH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(IH,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(NH,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(qH,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(jH,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(DH,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(OH,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VH,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(XH,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zH,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(WH,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(QH,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HH,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(UH,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JH,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(YH,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(eU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aU,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(nU,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(sU,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(lU,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(iU,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel"),c(dU,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(cU,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(fU,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForSequenceClassification"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c($U,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(PU,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(BU,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(IU,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(NU,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(qU,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jU,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(DU,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(GU,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.TFAutoModelForMultipleChoice"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(OU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(WU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(QU,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(HU,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(UU,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(eJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(oJ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(rJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(tJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(aJ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(nJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(sJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(lJ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(mJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModelForTokenClassification"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(MJ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($J,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(SJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(RJ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(PJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(BJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(IJ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(NJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(qJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForQuestionAnswering"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(KJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lY,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.TFAutoModelForVision2Seq"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModel"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(uY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel"),c(MY,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel"),c(EY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel"),c(CY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wY,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AY,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(LY,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel"),c(yY,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel"),c($Y,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kY,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SY,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RY,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel"),c(PY,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel"),c(BY,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IY,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTModel"),c(NY,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jY,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DY,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model"),c(GY,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(OY,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel"),c(VY,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(XY,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(zY,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForCausalLM"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(JY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(YY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(KY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(ZY,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eK,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oK,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rK,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(tK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(aK,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForPreTraining"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(nK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(fK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(mK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_K,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(uK,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(vK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForMaskedLM"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(FK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(CK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(AK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(LK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(yK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(xK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($K,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(RK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NK,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(qK,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(jK,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(DK,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(GK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OK,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VK,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(XK,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(zK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(UK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(JK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(YK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(KK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ZK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(eZ,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(oZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(rZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(tZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(aZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(dZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(fZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForTokenClassification"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(uZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(MZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(CZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(LZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForMultipleChoice"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(yZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(SZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(RZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(PZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(BZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(IZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(NZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(qZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(jZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForImageClassification"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(QZ,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(HZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,G6),e(rt,uf),b(f,Ge,u),b(f,We,u),e(We,pi),e(We,Ln),e(Ln,O6),e(We,yn),e(We,xn),e(xn,V6),e(We,_i),e(We,$n),e($n,X6),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ck),e(Ae,bi),e(bi,fk),e(Ae,mk),b(f,Eo,u),b(f,wa,u),e(wa,gk),e(wa,vf),e(vf,hk),e(wa,yVe),b(f,uje,u),b(f,vi,u),e(vi,Ff),e(Ff,Xoe),M(z6,Xoe,null),e(vi,xVe),e(vi,zoe),e(zoe,$Ve),b(f,bje,u),b(f,kn,u),e(kn,kVe),e(kn,Woe),e(Woe,SVe),e(kn,RVe),e(kn,Qoe),e(Qoe,PVe),e(kn,BVe),b(f,vje,u),M(W6,f,u),b(f,Fje,u),b(f,pk,u),e(pk,IVe),b(f,Tje,u),M(Tf,f,u),b(f,Mje,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Hoe),M(Q6,Hoe,null),e(Fi,NVe),e(Fi,Uoe),e(Uoe,qVe),b(f,Eje,u),b(f,Co,u),M(H6,Co,null),e(Co,jVe),e(Co,U6),e(U6,DVe),e(U6,_k),e(_k,GVe),e(U6,OVe),e(Co,VVe),e(Co,J6),e(J6,XVe),e(J6,Joe),e(Joe,zVe),e(J6,WVe),e(Co,QVe),e(Co,Er),M(Y6,Er,null),e(Er,HVe),e(Er,Yoe),e(Yoe,UVe),e(Er,JVe),e(Er,Ti),e(Ti,YVe),e(Ti,Koe),e(Koe,KVe),e(Ti,ZVe),e(Ti,Zoe),e(Zoe,eXe),e(Ti,oXe),e(Er,rXe),e(Er,A),e(A,Ef),e(Ef,ere),e(ere,tXe),e(Ef,aXe),e(Ef,uk),e(uk,nXe),e(Ef,sXe),e(A,lXe),e(A,Cf),e(Cf,ore),e(ore,iXe),e(Cf,dXe),e(Cf,bk),e(bk,cXe),e(Cf,fXe),e(A,mXe),e(A,wf),e(wf,rre),e(rre,gXe),e(wf,hXe),e(wf,vk),e(vk,pXe),e(wf,_Xe),e(A,uXe),e(A,Af),e(Af,tre),e(tre,bXe),e(Af,vXe),e(Af,Fk),e(Fk,FXe),e(Af,TXe),e(A,MXe),e(A,Lf),e(Lf,are),e(are,EXe),e(Lf,CXe),e(Lf,Tk),e(Tk,wXe),e(Lf,AXe),e(A,LXe),e(A,yf),e(yf,nre),e(nre,yXe),e(yf,xXe),e(yf,Mk),e(Mk,$Xe),e(yf,kXe),e(A,SXe),e(A,xf),e(xf,sre),e(sre,RXe),e(xf,PXe),e(xf,Ek),e(Ek,BXe),e(xf,IXe),e(A,NXe),e(A,$f),e($f,lre),e(lre,qXe),e($f,jXe),e($f,Ck),e(Ck,DXe),e($f,GXe),e(A,OXe),e(A,kf),e(kf,ire),e(ire,VXe),e(kf,XXe),e(kf,wk),e(wk,zXe),e(kf,WXe),e(A,QXe),e(A,Sf),e(Sf,dre),e(dre,HXe),e(Sf,UXe),e(Sf,Ak),e(Ak,JXe),e(Sf,YXe),e(A,KXe),e(A,Rf),e(Rf,cre),e(cre,ZXe),e(Rf,eze),e(Rf,Lk),e(Lk,oze),e(Rf,rze),e(A,tze),e(A,Pf),e(Pf,fre),e(fre,aze),e(Pf,nze),e(Pf,yk),e(yk,sze),e(Pf,lze),e(A,ize),e(A,Bf),e(Bf,mre),e(mre,dze),e(Bf,cze),e(Bf,xk),e(xk,fze),e(Bf,mze),e(A,gze),e(A,If),e(If,gre),e(gre,hze),e(If,pze),e(If,$k),e($k,_ze),e(If,uze),e(A,bze),e(A,Nf),e(Nf,hre),e(hre,vze),e(Nf,Fze),e(Nf,kk),e(kk,Tze),e(Nf,Mze),e(A,Eze),e(A,qf),e(qf,pre),e(pre,Cze),e(qf,wze),e(qf,Sk),e(Sk,Aze),e(qf,Lze),e(A,yze),e(A,jf),e(jf,_re),e(_re,xze),e(jf,$ze),e(jf,Rk),e(Rk,kze),e(jf,Sze),e(A,Rze),e(A,Df),e(Df,ure),e(ure,Pze),e(Df,Bze),e(Df,Pk),e(Pk,Ize),e(Df,Nze),e(A,qze),e(A,Gf),e(Gf,bre),e(bre,jze),e(Gf,Dze),e(Gf,Bk),e(Bk,Gze),e(Gf,Oze),e(A,Vze),e(A,Of),e(Of,vre),e(vre,Xze),e(Of,zze),e(Of,Ik),e(Ik,Wze),e(Of,Qze),e(A,Hze),e(A,Vf),e(Vf,Fre),e(Fre,Uze),e(Vf,Jze),e(Vf,Nk),e(Nk,Yze),e(Vf,Kze),e(A,Zze),e(A,Xf),e(Xf,Tre),e(Tre,eWe),e(Xf,oWe),e(Xf,qk),e(qk,rWe),e(Xf,tWe),e(A,aWe),e(A,zf),e(zf,Mre),e(Mre,nWe),e(zf,sWe),e(zf,jk),e(jk,lWe),e(zf,iWe),e(A,dWe),e(A,Wf),e(Wf,Ere),e(Ere,cWe),e(Wf,fWe),e(Wf,Dk),e(Dk,mWe),e(Wf,gWe),e(A,hWe),e(A,Qf),e(Qf,Cre),e(Cre,pWe),e(Qf,_We),e(Qf,Gk),e(Gk,uWe),e(Qf,bWe),e(A,vWe),e(A,Hf),e(Hf,wre),e(wre,FWe),e(Hf,TWe),e(Hf,Ok),e(Ok,MWe),e(Hf,EWe),e(A,CWe),e(A,Uf),e(Uf,Are),e(Are,wWe),e(Uf,AWe),e(Uf,Vk),e(Vk,LWe),e(Uf,yWe),e(A,xWe),e(A,Jf),e(Jf,Lre),e(Lre,$We),e(Jf,kWe),e(Jf,Xk),e(Xk,SWe),e(Jf,RWe),e(A,PWe),e(A,Yf),e(Yf,yre),e(yre,BWe),e(Yf,IWe),e(Yf,zk),e(zk,NWe),e(Yf,qWe),e(A,jWe),e(A,Kf),e(Kf,xre),e(xre,DWe),e(Kf,GWe),e(Kf,Wk),e(Wk,OWe),e(Kf,VWe),e(A,XWe),e(A,Zf),e(Zf,$re),e($re,zWe),e(Zf,WWe),e(Zf,Qk),e(Qk,QWe),e(Zf,HWe),e(A,UWe),e(A,em),e(em,kre),e(kre,JWe),e(em,YWe),e(em,Hk),e(Hk,KWe),e(em,ZWe),e(A,eQe),e(A,om),e(om,Sre),e(Sre,oQe),e(om,rQe),e(om,Uk),e(Uk,tQe),e(om,aQe),e(A,nQe),e(A,rm),e(rm,Rre),e(Rre,sQe),e(rm,lQe),e(rm,Jk),e(Jk,iQe),e(rm,dQe),e(A,cQe),e(A,tm),e(tm,Pre),e(Pre,fQe),e(tm,mQe),e(tm,Yk),e(Yk,gQe),e(tm,hQe),e(A,pQe),e(A,am),e(am,Bre),e(Bre,_Qe),e(am,uQe),e(am,Kk),e(Kk,bQe),e(am,vQe),e(A,FQe),e(A,nm),e(nm,Ire),e(Ire,TQe),e(nm,MQe),e(nm,Zk),e(Zk,EQe),e(nm,CQe),e(A,wQe),e(A,sm),e(sm,Nre),e(Nre,AQe),e(sm,LQe),e(sm,eS),e(eS,yQe),e(sm,xQe),e(A,$Qe),e(A,lm),e(lm,qre),e(qre,kQe),e(lm,SQe),e(lm,oS),e(oS,RQe),e(lm,PQe),e(A,BQe),e(A,im),e(im,jre),e(jre,IQe),e(im,NQe),e(im,rS),e(rS,qQe),e(im,jQe),e(A,DQe),e(A,dm),e(dm,Dre),e(Dre,GQe),e(dm,OQe),e(dm,tS),e(tS,VQe),e(dm,XQe),e(A,zQe),e(A,cm),e(cm,Gre),e(Gre,WQe),e(cm,QQe),e(cm,aS),e(aS,HQe),e(cm,UQe),e(A,JQe),e(A,fm),e(fm,Ore),e(Ore,YQe),e(fm,KQe),e(fm,nS),e(nS,ZQe),e(fm,eHe),e(A,oHe),e(A,mm),e(mm,Vre),e(Vre,rHe),e(mm,tHe),e(mm,sS),e(sS,aHe),e(mm,nHe),e(A,sHe),e(A,gm),e(gm,Xre),e(Xre,lHe),e(gm,iHe),e(gm,lS),e(lS,dHe),e(gm,cHe),e(A,fHe),e(A,hm),e(hm,zre),e(zre,mHe),e(hm,gHe),e(hm,iS),e(iS,hHe),e(hm,pHe),e(A,_He),e(A,pm),e(pm,Wre),e(Wre,uHe),e(pm,bHe),e(pm,dS),e(dS,vHe),e(pm,FHe),e(A,THe),e(A,_m),e(_m,Qre),e(Qre,MHe),e(_m,EHe),e(_m,cS),e(cS,CHe),e(_m,wHe),e(A,AHe),e(A,um),e(um,Hre),e(Hre,LHe),e(um,yHe),e(um,fS),e(fS,xHe),e(um,$He),e(A,kHe),e(A,bm),e(bm,Ure),e(Ure,SHe),e(bm,RHe),e(bm,mS),e(mS,PHe),e(bm,BHe),e(A,IHe),e(A,vm),e(vm,Jre),e(Jre,NHe),e(vm,qHe),e(vm,gS),e(gS,jHe),e(vm,DHe),e(A,GHe),e(A,Fm),e(Fm,Yre),e(Yre,OHe),e(Fm,VHe),e(Fm,hS),e(hS,XHe),e(Fm,zHe),e(A,WHe),e(A,Tm),e(Tm,Kre),e(Kre,QHe),e(Tm,HHe),e(Tm,pS),e(pS,UHe),e(Tm,JHe),e(A,YHe),e(A,Mm),e(Mm,Zre),e(Zre,KHe),e(Mm,ZHe),e(Mm,_S),e(_S,eUe),e(Mm,oUe),e(A,rUe),e(A,Em),e(Em,ete),e(ete,tUe),e(Em,aUe),e(Em,uS),e(uS,nUe),e(Em,sUe),e(A,lUe),e(A,Cm),e(Cm,ote),e(ote,iUe),e(Cm,dUe),e(Cm,bS),e(bS,cUe),e(Cm,fUe),e(A,mUe),e(A,wm),e(wm,rte),e(rte,gUe),e(wm,hUe),e(wm,vS),e(vS,pUe),e(wm,_Ue),e(A,uUe),e(A,Am),e(Am,tte),e(tte,bUe),e(Am,vUe),e(Am,FS),e(FS,FUe),e(Am,TUe),e(A,MUe),e(A,Lm),e(Lm,ate),e(ate,EUe),e(Lm,CUe),e(Lm,TS),e(TS,wUe),e(Lm,AUe),e(A,LUe),e(A,ym),e(ym,nte),e(nte,yUe),e(ym,xUe),e(ym,MS),e(MS,$Ue),e(ym,kUe),e(A,SUe),e(A,xm),e(xm,ste),e(ste,RUe),e(xm,PUe),e(xm,ES),e(ES,BUe),e(xm,IUe),e(A,NUe),e(A,$m),e($m,lte),e(lte,qUe),e($m,jUe),e($m,CS),e(CS,DUe),e($m,GUe),e(A,OUe),e(A,km),e(km,ite),e(ite,VUe),e(km,XUe),e(km,wS),e(wS,zUe),e(km,WUe),e(A,QUe),e(A,Sm),e(Sm,dte),e(dte,HUe),e(Sm,UUe),e(Sm,AS),e(AS,JUe),e(Sm,YUe),e(A,KUe),e(A,Rm),e(Rm,cte),e(cte,ZUe),e(Rm,eJe),e(Rm,LS),e(LS,oJe),e(Rm,rJe),e(A,tJe),e(A,Pm),e(Pm,fte),e(fte,aJe),e(Pm,nJe),e(Pm,yS),e(yS,sJe),e(Pm,lJe),e(A,iJe),e(A,Bm),e(Bm,mte),e(mte,dJe),e(Bm,cJe),e(Bm,xS),e(xS,fJe),e(Bm,mJe),e(A,gJe),e(A,Im),e(Im,gte),e(gte,hJe),e(Im,pJe),e(Im,$S),e($S,_Je),e(Im,uJe),e(A,bJe),e(A,Nm),e(Nm,hte),e(hte,vJe),e(Nm,FJe),e(Nm,kS),e(kS,TJe),e(Nm,MJe),e(A,EJe),e(A,qm),e(qm,pte),e(pte,CJe),e(qm,wJe),e(qm,SS),e(SS,AJe),e(qm,LJe),e(A,yJe),e(A,jm),e(jm,_te),e(_te,xJe),e(jm,$Je),e(jm,RS),e(RS,kJe),e(jm,SJe),e(A,RJe),e(A,Dm),e(Dm,ute),e(ute,PJe),e(Dm,BJe),e(Dm,PS),e(PS,IJe),e(Dm,NJe),e(A,qJe),e(A,Gm),e(Gm,bte),e(bte,jJe),e(Gm,DJe),e(Gm,BS),e(BS,GJe),e(Gm,OJe),e(A,VJe),e(A,Om),e(Om,vte),e(vte,XJe),e(Om,zJe),e(Om,IS),e(IS,WJe),e(Om,QJe),e(A,HJe),e(A,Vm),e(Vm,Fte),e(Fte,UJe),e(Vm,JJe),e(Vm,NS),e(NS,YJe),e(Vm,KJe),e(A,ZJe),e(A,Xm),e(Xm,Tte),e(Tte,eYe),e(Xm,oYe),e(Xm,qS),e(qS,rYe),e(Xm,tYe),e(A,aYe),e(A,zm),e(zm,Mte),e(Mte,nYe),e(zm,sYe),e(zm,jS),e(jS,lYe),e(zm,iYe),e(A,dYe),e(A,Wm),e(Wm,Ete),e(Ete,cYe),e(Wm,fYe),e(Wm,DS),e(DS,mYe),e(Wm,gYe),e(A,hYe),e(A,Qm),e(Qm,Cte),e(Cte,pYe),e(Qm,_Ye),e(Qm,GS),e(GS,uYe),e(Qm,bYe),e(A,vYe),e(A,Hm),e(Hm,wte),e(wte,FYe),e(Hm,TYe),e(Hm,OS),e(OS,MYe),e(Hm,EYe),e(A,CYe),e(A,Um),e(Um,Ate),e(Ate,wYe),e(Um,AYe),e(Um,VS),e(VS,LYe),e(Um,yYe),e(A,xYe),e(A,Jm),e(Jm,Lte),e(Lte,$Ye),e(Jm,kYe),e(Jm,XS),e(XS,SYe),e(Jm,RYe),e(A,PYe),e(A,Ym),e(Ym,yte),e(yte,BYe),e(Ym,IYe),e(Ym,zS),e(zS,NYe),e(Ym,qYe),e(A,jYe),e(A,Km),e(Km,xte),e(xte,DYe),e(Km,GYe),e(Km,WS),e(WS,OYe),e(Km,VYe),e(A,XYe),e(A,Zm),e(Zm,$te),e($te,zYe),e(Zm,WYe),e(Zm,QS),e(QS,QYe),e(Zm,HYe),e(A,UYe),e(A,eg),e(eg,kte),e(kte,JYe),e(eg,YYe),e(eg,HS),e(HS,KYe),e(eg,ZYe),e(A,eKe),e(A,og),e(og,Ste),e(Ste,oKe),e(og,rKe),e(og,US),e(US,tKe),e(og,aKe),e(A,nKe),e(A,rg),e(rg,Rte),e(Rte,sKe),e(rg,lKe),e(rg,JS),e(JS,iKe),e(rg,dKe),e(A,cKe),e(A,tg),e(tg,Pte),e(Pte,fKe),e(tg,mKe),e(tg,YS),e(YS,gKe),e(tg,hKe),e(A,pKe),e(A,ag),e(ag,Bte),e(Bte,_Ke),e(ag,uKe),e(ag,KS),e(KS,bKe),e(ag,vKe),e(A,FKe),e(A,ng),e(ng,Ite),e(Ite,TKe),e(ng,MKe),e(ng,ZS),e(ZS,EKe),e(ng,CKe),e(A,wKe),e(A,sg),e(sg,Nte),e(Nte,AKe),e(sg,LKe),e(sg,eR),e(eR,yKe),e(sg,xKe),e(A,$Ke),e(A,lg),e(lg,qte),e(qte,kKe),e(lg,SKe),e(lg,oR),e(oR,RKe),e(lg,PKe),e(A,BKe),e(A,ig),e(ig,jte),e(jte,IKe),e(ig,NKe),e(ig,rR),e(rR,qKe),e(ig,jKe),e(A,DKe),e(A,dg),e(dg,Dte),e(Dte,GKe),e(dg,OKe),e(dg,tR),e(tR,VKe),e(dg,XKe),e(A,zKe),e(A,cg),e(cg,Gte),e(Gte,WKe),e(cg,QKe),e(cg,aR),e(aR,HKe),e(cg,UKe),e(A,JKe),e(A,fg),e(fg,Ote),e(Ote,YKe),e(fg,KKe),e(fg,nR),e(nR,ZKe),e(fg,eZe),e(A,oZe),e(A,mg),e(mg,Vte),e(Vte,rZe),e(mg,tZe),e(mg,sR),e(sR,aZe),e(mg,nZe),e(A,sZe),e(A,gg),e(gg,Xte),e(Xte,lZe),e(gg,iZe),e(gg,lR),e(lR,dZe),e(gg,cZe),e(A,fZe),e(A,hg),e(hg,zte),e(zte,mZe),e(hg,gZe),e(hg,iR),e(iR,hZe),e(hg,pZe),e(A,_Ze),e(A,pg),e(pg,Wte),e(Wte,uZe),e(pg,bZe),e(pg,dR),e(dR,vZe),e(pg,FZe),e(A,TZe),e(A,_g),e(_g,Qte),e(Qte,MZe),e(_g,EZe),e(_g,cR),e(cR,CZe),e(_g,wZe),e(A,AZe),e(A,ug),e(ug,Hte),e(Hte,LZe),e(ug,yZe),e(ug,fR),e(fR,xZe),e(ug,$Ze),e(A,kZe),e(A,bg),e(bg,Ute),e(Ute,SZe),e(bg,RZe),e(bg,mR),e(mR,PZe),e(bg,BZe),e(A,IZe),e(A,vg),e(vg,Jte),e(Jte,NZe),e(vg,qZe),e(vg,gR),e(gR,jZe),e(vg,DZe),e(A,GZe),e(A,Fg),e(Fg,Yte),e(Yte,OZe),e(Fg,VZe),e(Fg,hR),e(hR,XZe),e(Fg,zZe),e(A,WZe),e(A,Tg),e(Tg,Kte),e(Kte,QZe),e(Tg,HZe),e(Tg,pR),e(pR,UZe),e(Tg,JZe),e(A,YZe),e(A,Mg),e(Mg,Zte),e(Zte,KZe),e(Mg,ZZe),e(Mg,_R),e(_R,eeo),e(Mg,oeo),e(A,reo),e(A,Eg),e(Eg,eae),e(eae,teo),e(Eg,aeo),e(Eg,uR),e(uR,neo),e(Eg,seo),e(A,leo),e(A,Cg),e(Cg,oae),e(oae,ieo),e(Cg,deo),e(Cg,bR),e(bR,ceo),e(Cg,feo),e(A,meo),e(A,wg),e(wg,rae),e(rae,geo),e(wg,heo),e(wg,vR),e(vR,peo),e(wg,_eo),e(A,ueo),e(A,Ag),e(Ag,tae),e(tae,beo),e(Ag,veo),e(Ag,FR),e(FR,Feo),e(Ag,Teo),e(Er,Meo),M(Lg,Er,null),e(Co,Eeo),e(Co,yg),M(K6,yg,null),e(yg,Ceo),e(yg,aae),e(aae,weo),b(f,Cje,u),b(f,Mi,u),e(Mi,xg),e(xg,nae),M(Z6,nae,null),e(Mi,Aeo),e(Mi,sae),e(sae,Leo),b(f,wje,u),b(f,wo,u),M(eL,wo,null),e(wo,yeo),e(wo,oL),e(oL,xeo),e(oL,TR),e(TR,$eo),e(oL,keo),e(wo,Seo),e(wo,rL),e(rL,Reo),e(rL,lae),e(lae,Peo),e(rL,Beo),e(wo,Ieo),e(wo,Cr),M(tL,Cr,null),e(Cr,Neo),e(Cr,iae),e(iae,qeo),e(Cr,jeo),e(Cr,Aa),e(Aa,Deo),e(Aa,dae),e(dae,Geo),e(Aa,Oeo),e(Aa,cae),e(cae,Veo),e(Aa,Xeo),e(Aa,fae),e(fae,zeo),e(Aa,Weo),e(Cr,Qeo),e(Cr,k),e(k,Sn),e(Sn,mae),e(mae,Heo),e(Sn,Ueo),e(Sn,MR),e(MR,Jeo),e(Sn,Yeo),e(Sn,ER),e(ER,Keo),e(Sn,Zeo),e(k,eoo),e(k,Rn),e(Rn,gae),e(gae,ooo),e(Rn,roo),e(Rn,CR),e(CR,too),e(Rn,aoo),e(Rn,wR),e(wR,noo),e(Rn,soo),e(k,loo),e(k,Pn),e(Pn,hae),e(hae,ioo),e(Pn,doo),e(Pn,AR),e(AR,coo),e(Pn,foo),e(Pn,LR),e(LR,moo),e(Pn,goo),e(k,hoo),e(k,$g),e($g,pae),e(pae,poo),e($g,_oo),e($g,yR),e(yR,uoo),e($g,boo),e(k,voo),e(k,Bn),e(Bn,_ae),e(_ae,Foo),e(Bn,Too),e(Bn,xR),e(xR,Moo),e(Bn,Eoo),e(Bn,$R),e($R,Coo),e(Bn,woo),e(k,Aoo),e(k,kg),e(kg,uae),e(uae,Loo),e(kg,yoo),e(kg,kR),e(kR,xoo),e(kg,$oo),e(k,koo),e(k,Sg),e(Sg,bae),e(bae,Soo),e(Sg,Roo),e(Sg,SR),e(SR,Poo),e(Sg,Boo),e(k,Ioo),e(k,Rg),e(Rg,vae),e(vae,Noo),e(Rg,qoo),e(Rg,RR),e(RR,joo),e(Rg,Doo),e(k,Goo),e(k,In),e(In,Fae),e(Fae,Ooo),e(In,Voo),e(In,PR),e(PR,Xoo),e(In,zoo),e(In,BR),e(BR,Woo),e(In,Qoo),e(k,Hoo),e(k,Nn),e(Nn,Tae),e(Tae,Uoo),e(Nn,Joo),e(Nn,IR),e(IR,Yoo),e(Nn,Koo),e(Nn,NR),e(NR,Zoo),e(Nn,ero),e(k,oro),e(k,qn),e(qn,Mae),e(Mae,rro),e(qn,tro),e(qn,qR),e(qR,aro),e(qn,nro),e(qn,jR),e(jR,sro),e(qn,lro),e(k,iro),e(k,Pg),e(Pg,Eae),e(Eae,dro),e(Pg,cro),e(Pg,DR),e(DR,fro),e(Pg,mro),e(k,gro),e(k,Bg),e(Bg,Cae),e(Cae,hro),e(Bg,pro),e(Bg,GR),e(GR,_ro),e(Bg,uro),e(k,bro),e(k,Ig),e(Ig,wae),e(wae,vro),e(Ig,Fro),e(Ig,OR),e(OR,Tro),e(Ig,Mro),e(k,Ero),e(k,jn),e(jn,Aae),e(Aae,Cro),e(jn,wro),e(jn,VR),e(VR,Aro),e(jn,Lro),e(jn,XR),e(XR,yro),e(jn,xro),e(k,$ro),e(k,Ng),e(Ng,Lae),e(Lae,kro),e(Ng,Sro),e(Ng,zR),e(zR,Rro),e(Ng,Pro),e(k,Bro),e(k,Dn),e(Dn,yae),e(yae,Iro),e(Dn,Nro),e(Dn,WR),e(WR,qro),e(Dn,jro),e(Dn,QR),e(QR,Dro),e(Dn,Gro),e(k,Oro),e(k,Gn),e(Gn,xae),e(xae,Vro),e(Gn,Xro),e(Gn,HR),e(HR,zro),e(Gn,Wro),e(Gn,UR),e(UR,Qro),e(Gn,Hro),e(k,Uro),e(k,On),e(On,$ae),e($ae,Jro),e(On,Yro),e(On,JR),e(JR,Kro),e(On,Zro),e(On,YR),e(YR,eto),e(On,oto),e(k,rto),e(k,qg),e(qg,kae),e(kae,tto),e(qg,ato),e(qg,KR),e(KR,nto),e(qg,sto),e(k,lto),e(k,Vn),e(Vn,Sae),e(Sae,ito),e(Vn,dto),e(Vn,ZR),e(ZR,cto),e(Vn,fto),e(Vn,eP),e(eP,mto),e(Vn,gto),e(k,hto),e(k,Xn),e(Xn,Rae),e(Rae,pto),e(Xn,_to),e(Xn,oP),e(oP,uto),e(Xn,bto),e(Xn,rP),e(rP,vto),e(Xn,Fto),e(k,Tto),e(k,zn),e(zn,Pae),e(Pae,Mto),e(zn,Eto),e(zn,tP),e(tP,Cto),e(zn,wto),e(zn,aP),e(aP,Ato),e(zn,Lto),e(k,yto),e(k,Wn),e(Wn,Bae),e(Bae,xto),e(Wn,$to),e(Wn,nP),e(nP,kto),e(Wn,Sto),e(Wn,sP),e(sP,Rto),e(Wn,Pto),e(k,Bto),e(k,Qn),e(Qn,Iae),e(Iae,Ito),e(Qn,Nto),e(Qn,lP),e(lP,qto),e(Qn,jto),e(Qn,iP),e(iP,Dto),e(Qn,Gto),e(k,Oto),e(k,Hn),e(Hn,Nae),e(Nae,Vto),e(Hn,Xto),e(Hn,dP),e(dP,zto),e(Hn,Wto),e(Hn,cP),e(cP,Qto),e(Hn,Hto),e(k,Uto),e(k,jg),e(jg,qae),e(qae,Jto),e(jg,Yto),e(jg,fP),e(fP,Kto),e(jg,Zto),e(k,eao),e(k,Un),e(Un,jae),e(jae,oao),e(Un,rao),e(Un,mP),e(mP,tao),e(Un,aao),e(Un,gP),e(gP,nao),e(Un,sao),e(k,lao),e(k,Dg),e(Dg,Dae),e(Dae,iao),e(Dg,dao),e(Dg,hP),e(hP,cao),e(Dg,fao),e(k,mao),e(k,Jn),e(Jn,Gae),e(Gae,gao),e(Jn,hao),e(Jn,pP),e(pP,pao),e(Jn,_ao),e(Jn,_P),e(_P,uao),e(Jn,bao),e(k,vao),e(k,Yn),e(Yn,Oae),e(Oae,Fao),e(Yn,Tao),e(Yn,uP),e(uP,Mao),e(Yn,Eao),e(Yn,bP),e(bP,Cao),e(Yn,wao),e(k,Aao),e(k,Kn),e(Kn,Vae),e(Vae,Lao),e(Kn,yao),e(Kn,vP),e(vP,xao),e(Kn,$ao),e(Kn,FP),e(FP,kao),e(Kn,Sao),e(k,Rao),e(k,Gg),e(Gg,Xae),e(Xae,Pao),e(Gg,Bao),e(Gg,TP),e(TP,Iao),e(Gg,Nao),e(k,qao),e(k,Zn),e(Zn,zae),e(zae,jao),e(Zn,Dao),e(Zn,MP),e(MP,Gao),e(Zn,Oao),e(Zn,EP),e(EP,Vao),e(Zn,Xao),e(k,zao),e(k,es),e(es,Wae),e(Wae,Wao),e(es,Qao),e(es,CP),e(CP,Hao),e(es,Uao),e(es,wP),e(wP,Jao),e(es,Yao),e(k,Kao),e(k,Og),e(Og,Qae),e(Qae,Zao),e(Og,eno),e(Og,AP),e(AP,ono),e(Og,rno),e(k,tno),e(k,os),e(os,Hae),e(Hae,ano),e(os,nno),e(os,LP),e(LP,sno),e(os,lno),e(os,yP),e(yP,ino),e(os,dno),e(k,cno),e(k,rs),e(rs,Uae),e(Uae,fno),e(rs,mno),e(rs,xP),e(xP,gno),e(rs,hno),e(rs,$P),e($P,pno),e(rs,_no),e(k,uno),e(k,ts),e(ts,Jae),e(Jae,bno),e(ts,vno),e(ts,kP),e(kP,Fno),e(ts,Tno),e(ts,SP),e(SP,Mno),e(ts,Eno),e(k,Cno),e(k,as),e(as,Yae),e(Yae,wno),e(as,Ano),e(as,RP),e(RP,Lno),e(as,yno),e(as,PP),e(PP,xno),e(as,$no),e(k,kno),e(k,ns),e(ns,Kae),e(Kae,Sno),e(ns,Rno),e(ns,BP),e(BP,Pno),e(ns,Bno),e(ns,IP),e(IP,Ino),e(ns,Nno),e(k,qno),e(k,ss),e(ss,Zae),e(Zae,jno),e(ss,Dno),e(ss,NP),e(NP,Gno),e(ss,Ono),e(ss,qP),e(qP,Vno),e(ss,Xno),e(k,zno),e(k,ls),e(ls,ene),e(ene,Wno),e(ls,Qno),e(ls,jP),e(jP,Hno),e(ls,Uno),e(ls,DP),e(DP,Jno),e(ls,Yno),e(k,Kno),e(k,Vg),e(Vg,one),e(one,Zno),e(Vg,eso),e(Vg,GP),e(GP,oso),e(Vg,rso),e(k,tso),e(k,is),e(is,rne),e(rne,aso),e(is,nso),e(is,OP),e(OP,sso),e(is,lso),e(is,VP),e(VP,iso),e(is,dso),e(k,cso),e(k,Xg),e(Xg,tne),e(tne,fso),e(Xg,mso),e(Xg,XP),e(XP,gso),e(Xg,hso),e(k,pso),e(k,zg),e(zg,ane),e(ane,_so),e(zg,uso),e(zg,zP),e(zP,bso),e(zg,vso),e(k,Fso),e(k,ds),e(ds,nne),e(nne,Tso),e(ds,Mso),e(ds,WP),e(WP,Eso),e(ds,Cso),e(ds,QP),e(QP,wso),e(ds,Aso),e(k,Lso),e(k,cs),e(cs,sne),e(sne,yso),e(cs,xso),e(cs,HP),e(HP,$so),e(cs,kso),e(cs,UP),e(UP,Sso),e(cs,Rso),e(k,Pso),e(k,fs),e(fs,lne),e(lne,Bso),e(fs,Iso),e(fs,JP),e(JP,Nso),e(fs,qso),e(fs,YP),e(YP,jso),e(fs,Dso),e(k,Gso),e(k,Wg),e(Wg,ine),e(ine,Oso),e(Wg,Vso),e(Wg,KP),e(KP,Xso),e(Wg,zso),e(k,Wso),e(k,ms),e(ms,dne),e(dne,Qso),e(ms,Hso),e(ms,ZP),e(ZP,Uso),e(ms,Jso),e(ms,eB),e(eB,Yso),e(ms,Kso),e(k,Zso),e(k,gs),e(gs,cne),e(cne,elo),e(gs,olo),e(gs,oB),e(oB,rlo),e(gs,tlo),e(gs,rB),e(rB,alo),e(gs,nlo),e(k,slo),e(k,hs),e(hs,fne),e(fne,llo),e(hs,ilo),e(hs,tB),e(tB,dlo),e(hs,clo),e(hs,aB),e(aB,flo),e(hs,mlo),e(k,glo),e(k,ps),e(ps,mne),e(mne,hlo),e(ps,plo),e(ps,nB),e(nB,_lo),e(ps,ulo),e(ps,sB),e(sB,blo),e(ps,vlo),e(k,Flo),e(k,_s),e(_s,gne),e(gne,Tlo),e(_s,Mlo),e(_s,lB),e(lB,Elo),e(_s,Clo),e(_s,iB),e(iB,wlo),e(_s,Alo),e(k,Llo),e(k,Qg),e(Qg,hne),e(hne,ylo),e(Qg,xlo),e(Qg,dB),e(dB,$lo),e(Qg,klo),e(k,Slo),e(k,us),e(us,pne),e(pne,Rlo),e(us,Plo),e(us,cB),e(cB,Blo),e(us,Ilo),e(us,fB),e(fB,Nlo),e(us,qlo),e(k,jlo),e(k,Hg),e(Hg,_ne),e(_ne,Dlo),e(Hg,Glo),e(Hg,mB),e(mB,Olo),e(Hg,Vlo),e(k,Xlo),e(k,Ug),e(Ug,une),e(une,zlo),e(Ug,Wlo),e(Ug,gB),e(gB,Qlo),e(Ug,Hlo),e(k,Ulo),e(k,Jg),e(Jg,bne),e(bne,Jlo),e(Jg,Ylo),e(Jg,hB),e(hB,Klo),e(Jg,Zlo),e(k,eio),e(k,Yg),e(Yg,vne),e(vne,oio),e(Yg,rio),e(Yg,pB),e(pB,tio),e(Yg,aio),e(k,nio),e(k,bs),e(bs,Fne),e(Fne,sio),e(bs,lio),e(bs,_B),e(_B,iio),e(bs,dio),e(bs,uB),e(uB,cio),e(bs,fio),e(k,mio),e(k,Kg),e(Kg,Tne),e(Tne,gio),e(Kg,hio),e(Kg,bB),e(bB,pio),e(Kg,_io),e(k,uio),e(k,vs),e(vs,Mne),e(Mne,bio),e(vs,vio),e(vs,vB),e(vB,Fio),e(vs,Tio),e(vs,FB),e(FB,Mio),e(vs,Eio),e(k,Cio),e(k,Fs),e(Fs,Ene),e(Ene,wio),e(Fs,Aio),e(Fs,TB),e(TB,Lio),e(Fs,yio),e(Fs,MB),e(MB,xio),e(Fs,$io),e(k,kio),e(k,Ts),e(Ts,Cne),e(Cne,Sio),e(Ts,Rio),e(Ts,EB),e(EB,Pio),e(Ts,Bio),e(Ts,CB),e(CB,Iio),e(Ts,Nio),e(k,qio),e(k,Ms),e(Ms,wne),e(wne,jio),e(Ms,Dio),e(Ms,wB),e(wB,Gio),e(Ms,Oio),e(Ms,AB),e(AB,Vio),e(Ms,Xio),e(k,zio),e(k,Es),e(Es,Ane),e(Ane,Wio),e(Es,Qio),e(Es,LB),e(LB,Hio),e(Es,Uio),e(Es,yB),e(yB,Jio),e(Es,Yio),e(k,Kio),e(k,Cs),e(Cs,Lne),e(Lne,Zio),e(Cs,edo),e(Cs,xB),e(xB,odo),e(Cs,rdo),e(Cs,$B),e($B,tdo),e(Cs,ado),e(k,ndo),e(k,Zg),e(Zg,yne),e(yne,sdo),e(Zg,ldo),e(Zg,kB),e(kB,ido),e(Zg,ddo),e(k,cdo),e(k,eh),e(eh,xne),e(xne,fdo),e(eh,mdo),e(eh,SB),e(SB,gdo),e(eh,hdo),e(k,pdo),e(k,ws),e(ws,$ne),e($ne,_do),e(ws,udo),e(ws,RB),e(RB,bdo),e(ws,vdo),e(ws,PB),e(PB,Fdo),e(ws,Tdo),e(k,Mdo),e(k,As),e(As,kne),e(kne,Edo),e(As,Cdo),e(As,BB),e(BB,wdo),e(As,Ado),e(As,IB),e(IB,Ldo),e(As,ydo),e(k,xdo),e(k,Ls),e(Ls,Sne),e(Sne,$do),e(Ls,kdo),e(Ls,NB),e(NB,Sdo),e(Ls,Rdo),e(Ls,qB),e(qB,Pdo),e(Ls,Bdo),e(k,Ido),e(k,oh),e(oh,Rne),e(Rne,Ndo),e(oh,qdo),e(oh,jB),e(jB,jdo),e(oh,Ddo),e(k,Gdo),e(k,rh),e(rh,Pne),e(Pne,Odo),e(rh,Vdo),e(rh,DB),e(DB,Xdo),e(rh,zdo),e(k,Wdo),e(k,th),e(th,Bne),e(Bne,Qdo),e(th,Hdo),e(th,GB),e(GB,Udo),e(th,Jdo),e(k,Ydo),e(k,ys),e(ys,Ine),e(Ine,Kdo),e(ys,Zdo),e(ys,OB),e(OB,eco),e(ys,oco),e(ys,VB),e(VB,rco),e(ys,tco),e(k,aco),e(k,ah),e(ah,Nne),e(Nne,nco),e(ah,sco),e(ah,XB),e(XB,lco),e(ah,ico),e(k,dco),e(k,nh),e(nh,qne),e(qne,cco),e(nh,fco),e(nh,zB),e(zB,mco),e(nh,gco),e(k,hco),e(k,sh),e(sh,jne),e(jne,pco),e(sh,_co),e(sh,WB),e(WB,uco),e(sh,bco),e(k,vco),e(k,xs),e(xs,Dne),e(Dne,Fco),e(xs,Tco),e(xs,QB),e(QB,Mco),e(xs,Eco),e(xs,HB),e(HB,Cco),e(xs,wco),e(k,Aco),e(k,lh),e(lh,Gne),e(Gne,Lco),e(lh,yco),e(lh,UB),e(UB,xco),e(lh,$co),e(k,kco),e(k,ih),e(ih,One),e(One,Sco),e(ih,Rco),e(ih,JB),e(JB,Pco),e(ih,Bco),e(k,Ico),e(k,$s),e($s,Vne),e(Vne,Nco),e($s,qco),e($s,YB),e(YB,jco),e($s,Dco),e($s,KB),e(KB,Gco),e($s,Oco),e(k,Vco),e(k,ks),e(ks,Xne),e(Xne,Xco),e(ks,zco),e(ks,ZB),e(ZB,Wco),e(ks,Qco),e(ks,eI),e(eI,Hco),e(ks,Uco),e(k,Jco),e(k,Ss),e(Ss,zne),e(zne,Yco),e(Ss,Kco),e(Ss,oI),e(oI,Zco),e(Ss,efo),e(Ss,rI),e(rI,ofo),e(Ss,rfo),e(k,tfo),e(k,Rs),e(Rs,Wne),e(Wne,afo),e(Rs,nfo),e(Rs,tI),e(tI,sfo),e(Rs,lfo),e(Rs,aI),e(aI,ifo),e(Rs,dfo),e(Cr,cfo),M(dh,Cr,null),e(wo,ffo),e(wo,ch),M(aL,ch,null),e(ch,mfo),e(ch,Qne),e(Qne,gfo),b(f,Aje,u),b(f,Ei,u),e(Ei,fh),e(fh,Hne),M(nL,Hne,null),e(Ei,hfo),e(Ei,Une),e(Une,pfo),b(f,Lje,u),b(f,Ao,u),M(sL,Ao,null),e(Ao,_fo),e(Ao,lL),e(lL,ufo),e(lL,nI),e(nI,bfo),e(lL,vfo),e(Ao,Ffo),e(Ao,iL),e(iL,Tfo),e(iL,Jne),e(Jne,Mfo),e(iL,Efo),e(Ao,Cfo),e(Ao,He),M(dL,He,null),e(He,wfo),e(He,Yne),e(Yne,Afo),e(He,Lfo),e(He,La),e(La,yfo),e(La,Kne),e(Kne,xfo),e(La,$fo),e(La,Zne),e(Zne,kfo),e(La,Sfo),e(La,ese),e(ese,Rfo),e(La,Pfo),e(He,Bfo),e(He,Y),e(Y,mh),e(mh,ose),e(ose,Ifo),e(mh,Nfo),e(mh,sI),e(sI,qfo),e(mh,jfo),e(Y,Dfo),e(Y,gh),e(gh,rse),e(rse,Gfo),e(gh,Ofo),e(gh,lI),e(lI,Vfo),e(gh,Xfo),e(Y,zfo),e(Y,hh),e(hh,tse),e(tse,Wfo),e(hh,Qfo),e(hh,iI),e(iI,Hfo),e(hh,Ufo),e(Y,Jfo),e(Y,ph),e(ph,ase),e(ase,Yfo),e(ph,Kfo),e(ph,dI),e(dI,Zfo),e(ph,emo),e(Y,omo),e(Y,_h),e(_h,nse),e(nse,rmo),e(_h,tmo),e(_h,cI),e(cI,amo),e(_h,nmo),e(Y,smo),e(Y,uh),e(uh,sse),e(sse,lmo),e(uh,imo),e(uh,fI),e(fI,dmo),e(uh,cmo),e(Y,fmo),e(Y,bh),e(bh,lse),e(lse,mmo),e(bh,gmo),e(bh,mI),e(mI,hmo),e(bh,pmo),e(Y,_mo),e(Y,vh),e(vh,ise),e(ise,umo),e(vh,bmo),e(vh,gI),e(gI,vmo),e(vh,Fmo),e(Y,Tmo),e(Y,Fh),e(Fh,dse),e(dse,Mmo),e(Fh,Emo),e(Fh,hI),e(hI,Cmo),e(Fh,wmo),e(Y,Amo),e(Y,Th),e(Th,cse),e(cse,Lmo),e(Th,ymo),e(Th,pI),e(pI,xmo),e(Th,$mo),e(Y,kmo),e(Y,Mh),e(Mh,fse),e(fse,Smo),e(Mh,Rmo),e(Mh,_I),e(_I,Pmo),e(Mh,Bmo),e(Y,Imo),e(Y,Eh),e(Eh,mse),e(mse,Nmo),e(Eh,qmo),e(Eh,uI),e(uI,jmo),e(Eh,Dmo),e(Y,Gmo),e(Y,Ch),e(Ch,gse),e(gse,Omo),e(Ch,Vmo),e(Ch,bI),e(bI,Xmo),e(Ch,zmo),e(Y,Wmo),e(Y,wh),e(wh,hse),e(hse,Qmo),e(wh,Hmo),e(wh,vI),e(vI,Umo),e(wh,Jmo),e(Y,Ymo),e(Y,Ah),e(Ah,pse),e(pse,Kmo),e(Ah,Zmo),e(Ah,FI),e(FI,ego),e(Ah,ogo),e(Y,rgo),e(Y,Lh),e(Lh,_se),e(_se,tgo),e(Lh,ago),e(Lh,TI),e(TI,ngo),e(Lh,sgo),e(Y,lgo),e(Y,yh),e(yh,use),e(use,igo),e(yh,dgo),e(yh,MI),e(MI,cgo),e(yh,fgo),e(Y,mgo),e(Y,xh),e(xh,bse),e(bse,ggo),e(xh,hgo),e(xh,EI),e(EI,pgo),e(xh,_go),e(Y,ugo),e(Y,$h),e($h,vse),e(vse,bgo),e($h,vgo),e($h,CI),e(CI,Fgo),e($h,Tgo),e(Y,Mgo),e(Y,kh),e(kh,Fse),e(Fse,Ego),e(kh,Cgo),e(kh,wI),e(wI,wgo),e(kh,Ago),e(Y,Lgo),e(Y,Sh),e(Sh,Tse),e(Tse,ygo),e(Sh,xgo),e(Sh,AI),e(AI,$go),e(Sh,kgo),e(Y,Sgo),e(Y,Rh),e(Rh,Mse),e(Mse,Rgo),e(Rh,Pgo),e(Rh,LI),e(LI,Bgo),e(Rh,Igo),e(Y,Ngo),e(Y,Ph),e(Ph,Ese),e(Ese,qgo),e(Ph,jgo),e(Ph,yI),e(yI,Dgo),e(Ph,Ggo),e(Y,Ogo),e(Y,Bh),e(Bh,Cse),e(Cse,Vgo),e(Bh,Xgo),e(Bh,xI),e(xI,zgo),e(Bh,Wgo),e(Y,Qgo),e(Y,Ih),e(Ih,wse),e(wse,Hgo),e(Ih,Ugo),e(Ih,$I),e($I,Jgo),e(Ih,Ygo),e(Y,Kgo),e(Y,Nh),e(Nh,Ase),e(Ase,Zgo),e(Nh,eho),e(Nh,kI),e(kI,oho),e(Nh,rho),e(Y,tho),e(Y,qh),e(qh,Lse),e(Lse,aho),e(qh,nho),e(qh,SI),e(SI,sho),e(qh,lho),e(Y,iho),e(Y,jh),e(jh,yse),e(yse,dho),e(jh,cho),e(jh,RI),e(RI,fho),e(jh,mho),e(Y,gho),e(Y,Dh),e(Dh,xse),e(xse,hho),e(Dh,pho),e(Dh,PI),e(PI,_ho),e(Dh,uho),e(Y,bho),e(Y,Gh),e(Gh,$se),e($se,vho),e(Gh,Fho),e(Gh,BI),e(BI,Tho),e(Gh,Mho),e(Y,Eho),e(Y,Oh),e(Oh,kse),e(kse,Cho),e(Oh,who),e(Oh,II),e(II,Aho),e(Oh,Lho),e(He,yho),M(Vh,He,null),e(He,xho),M(Xh,He,null),e(Ao,$ho),e(Ao,zh),M(cL,zh,null),e(zh,kho),e(zh,Sse),e(Sse,Sho),b(f,yje,u),b(f,Ci,u),e(Ci,Wh),e(Wh,Rse),M(fL,Rse,null),e(Ci,Rho),e(Ci,Pse),e(Pse,Pho),b(f,xje,u),b(f,Lo,u),M(mL,Lo,null),e(Lo,Bho),e(Lo,gL),e(gL,Iho),e(gL,NI),e(NI,Nho),e(gL,qho),e(Lo,jho),e(Lo,hL),e(hL,Dho),e(hL,Bse),e(Bse,Gho),e(hL,Oho),e(Lo,Vho),e(Lo,Ue),M(pL,Ue,null),e(Ue,Xho),e(Ue,Ise),e(Ise,zho),e(Ue,Who),e(Ue,wi),e(wi,Qho),e(wi,Nse),e(Nse,Hho),e(wi,Uho),e(wi,qse),e(qse,Jho),e(wi,Yho),e(Ue,Kho),e(Ue,he),e(he,Qh),e(Qh,jse),e(jse,Zho),e(Qh,epo),e(Qh,qI),e(qI,opo),e(Qh,rpo),e(he,tpo),e(he,Hh),e(Hh,Dse),e(Dse,apo),e(Hh,npo),e(Hh,Gse),e(Gse,spo),e(Hh,lpo),e(he,ipo),e(he,Uh),e(Uh,Ose),e(Ose,dpo),e(Uh,cpo),e(Uh,jI),e(jI,fpo),e(Uh,mpo),e(he,gpo),e(he,Jh),e(Jh,Vse),e(Vse,hpo),e(Jh,ppo),e(Jh,DI),e(DI,_po),e(Jh,upo),e(he,bpo),e(he,Yh),e(Yh,Xse),e(Xse,vpo),e(Yh,Fpo),e(Yh,GI),e(GI,Tpo),e(Yh,Mpo),e(he,Epo),e(he,Kh),e(Kh,zse),e(zse,Cpo),e(Kh,wpo),e(Kh,OI),e(OI,Apo),e(Kh,Lpo),e(he,ypo),e(he,Zh),e(Zh,Wse),e(Wse,xpo),e(Zh,$po),e(Zh,VI),e(VI,kpo),e(Zh,Spo),e(he,Rpo),e(he,ep),e(ep,Qse),e(Qse,Ppo),e(ep,Bpo),e(ep,XI),e(XI,Ipo),e(ep,Npo),e(he,qpo),e(he,op),e(op,Hse),e(Hse,jpo),e(op,Dpo),e(op,zI),e(zI,Gpo),e(op,Opo),e(he,Vpo),e(he,rp),e(rp,Use),e(Use,Xpo),e(rp,zpo),e(rp,WI),e(WI,Wpo),e(rp,Qpo),e(he,Hpo),e(he,tp),e(tp,Jse),e(Jse,Upo),e(tp,Jpo),e(tp,QI),e(QI,Ypo),e(tp,Kpo),e(he,Zpo),e(he,ap),e(ap,Yse),e(Yse,e_o),e(ap,o_o),e(ap,HI),e(HI,r_o),e(ap,t_o),e(he,a_o),e(he,np),e(np,Kse),e(Kse,n_o),e(np,s_o),e(np,UI),e(UI,l_o),e(np,i_o),e(he,d_o),e(he,sp),e(sp,Zse),e(Zse,c_o),e(sp,f_o),e(sp,JI),e(JI,m_o),e(sp,g_o),e(he,h_o),e(he,lp),e(lp,ele),e(ele,p_o),e(lp,__o),e(lp,YI),e(YI,u_o),e(lp,b_o),e(he,v_o),e(he,ip),e(ip,ole),e(ole,F_o),e(ip,T_o),e(ip,KI),e(KI,M_o),e(ip,E_o),e(he,C_o),e(he,dp),e(dp,rle),e(rle,w_o),e(dp,A_o),e(dp,ZI),e(ZI,L_o),e(dp,y_o),e(Ue,x_o),M(cp,Ue,null),e(Ue,$_o),M(fp,Ue,null),e(Lo,k_o),e(Lo,mp),M(_L,mp,null),e(mp,S_o),e(mp,tle),e(tle,R_o),b(f,$je,u),b(f,Ai,u),e(Ai,gp),e(gp,ale),M(uL,ale,null),e(Ai,P_o),e(Ai,nle),e(nle,B_o),b(f,kje,u),b(f,yo,u),M(bL,yo,null),e(yo,I_o),e(yo,Li),e(Li,N_o),e(Li,eN),e(eN,q_o),e(Li,j_o),e(Li,oN),e(oN,D_o),e(Li,G_o),e(yo,O_o),e(yo,vL),e(vL,V_o),e(vL,sle),e(sle,X_o),e(vL,z_o),e(yo,W_o),e(yo,tt),M(FL,tt,null),e(tt,Q_o),e(tt,lle),e(lle,H_o),e(tt,U_o),e(tt,yi),e(yi,J_o),e(yi,ile),e(ile,Y_o),e(yi,K_o),e(yi,rN),e(rN,Z_o),e(yi,euo),e(tt,ouo),M(hp,tt,null),e(yo,ruo),e(yo,Je),M(TL,Je,null),e(Je,tuo),e(Je,dle),e(dle,auo),e(Je,nuo),e(Je,ya),e(ya,suo),e(ya,cle),e(cle,luo),e(ya,iuo),e(ya,fle),e(fle,duo),e(ya,cuo),e(ya,mle),e(mle,fuo),e(ya,muo),e(Je,guo),e(Je,y),e(y,pp),e(pp,gle),e(gle,huo),e(pp,puo),e(pp,tN),e(tN,_uo),e(pp,uuo),e(y,buo),e(y,_p),e(_p,hle),e(hle,vuo),e(_p,Fuo),e(_p,aN),e(aN,Tuo),e(_p,Muo),e(y,Euo),e(y,up),e(up,ple),e(ple,Cuo),e(up,wuo),e(up,nN),e(nN,Auo),e(up,Luo),e(y,yuo),e(y,bp),e(bp,_le),e(_le,xuo),e(bp,$uo),e(bp,sN),e(sN,kuo),e(bp,Suo),e(y,Ruo),e(y,vp),e(vp,ule),e(ule,Puo),e(vp,Buo),e(vp,lN),e(lN,Iuo),e(vp,Nuo),e(y,quo),e(y,Fp),e(Fp,ble),e(ble,juo),e(Fp,Duo),e(Fp,iN),e(iN,Guo),e(Fp,Ouo),e(y,Vuo),e(y,Tp),e(Tp,vle),e(vle,Xuo),e(Tp,zuo),e(Tp,dN),e(dN,Wuo),e(Tp,Quo),e(y,Huo),e(y,Mp),e(Mp,Fle),e(Fle,Uuo),e(Mp,Juo),e(Mp,cN),e(cN,Yuo),e(Mp,Kuo),e(y,Zuo),e(y,Ep),e(Ep,Tle),e(Tle,e4o),e(Ep,o4o),e(Ep,fN),e(fN,r4o),e(Ep,t4o),e(y,a4o),e(y,Cp),e(Cp,Mle),e(Mle,n4o),e(Cp,s4o),e(Cp,mN),e(mN,l4o),e(Cp,i4o),e(y,d4o),e(y,wp),e(wp,Ele),e(Ele,c4o),e(wp,f4o),e(wp,gN),e(gN,m4o),e(wp,g4o),e(y,h4o),e(y,Ap),e(Ap,Cle),e(Cle,p4o),e(Ap,_4o),e(Ap,hN),e(hN,u4o),e(Ap,b4o),e(y,v4o),e(y,Lp),e(Lp,wle),e(wle,F4o),e(Lp,T4o),e(Lp,pN),e(pN,M4o),e(Lp,E4o),e(y,C4o),e(y,yp),e(yp,Ale),e(Ale,w4o),e(yp,A4o),e(yp,_N),e(_N,L4o),e(yp,y4o),e(y,x4o),e(y,xp),e(xp,Lle),e(Lle,$4o),e(xp,k4o),e(xp,uN),e(uN,S4o),e(xp,R4o),e(y,P4o),e(y,$p),e($p,yle),e(yle,B4o),e($p,I4o),e($p,bN),e(bN,N4o),e($p,q4o),e(y,j4o),e(y,kp),e(kp,xle),e(xle,D4o),e(kp,G4o),e(kp,vN),e(vN,O4o),e(kp,V4o),e(y,X4o),e(y,Sp),e(Sp,$le),e($le,z4o),e(Sp,W4o),e(Sp,FN),e(FN,Q4o),e(Sp,H4o),e(y,U4o),e(y,Rp),e(Rp,kle),e(kle,J4o),e(Rp,Y4o),e(Rp,TN),e(TN,K4o),e(Rp,Z4o),e(y,e1o),e(y,Pp),e(Pp,Sle),e(Sle,o1o),e(Pp,r1o),e(Pp,MN),e(MN,t1o),e(Pp,a1o),e(y,n1o),e(y,Bp),e(Bp,Rle),e(Rle,s1o),e(Bp,l1o),e(Bp,EN),e(EN,i1o),e(Bp,d1o),e(y,c1o),e(y,Ip),e(Ip,Ple),e(Ple,f1o),e(Ip,m1o),e(Ip,CN),e(CN,g1o),e(Ip,h1o),e(y,p1o),e(y,Np),e(Np,Ble),e(Ble,_1o),e(Np,u1o),e(Np,wN),e(wN,b1o),e(Np,v1o),e(y,F1o),e(y,qp),e(qp,Ile),e(Ile,T1o),e(qp,M1o),e(qp,AN),e(AN,E1o),e(qp,C1o),e(y,w1o),e(y,jp),e(jp,Nle),e(Nle,A1o),e(jp,L1o),e(jp,LN),e(LN,y1o),e(jp,x1o),e(y,$1o),e(y,Dp),e(Dp,qle),e(qle,k1o),e(Dp,S1o),e(Dp,yN),e(yN,R1o),e(Dp,P1o),e(y,B1o),e(y,Gp),e(Gp,jle),e(jle,I1o),e(Gp,N1o),e(Gp,xN),e(xN,q1o),e(Gp,j1o),e(y,D1o),e(y,Op),e(Op,Dle),e(Dle,G1o),e(Op,O1o),e(Op,$N),e($N,V1o),e(Op,X1o),e(y,z1o),e(y,Vp),e(Vp,Gle),e(Gle,W1o),e(Vp,Q1o),e(Vp,kN),e(kN,H1o),e(Vp,U1o),e(y,J1o),e(y,Xp),e(Xp,Ole),e(Ole,Y1o),e(Xp,K1o),e(Xp,SN),e(SN,Z1o),e(Xp,e7o),e(y,o7o),e(y,zp),e(zp,Vle),e(Vle,r7o),e(zp,t7o),e(zp,RN),e(RN,a7o),e(zp,n7o),e(y,s7o),e(y,Wp),e(Wp,Xle),e(Xle,l7o),e(Wp,i7o),e(Wp,PN),e(PN,d7o),e(Wp,c7o),e(y,f7o),e(y,Qp),e(Qp,zle),e(zle,m7o),e(Qp,g7o),e(Qp,BN),e(BN,h7o),e(Qp,p7o),e(y,_7o),e(y,Ps),e(Ps,Wle),e(Wle,u7o),e(Ps,b7o),e(Ps,IN),e(IN,v7o),e(Ps,F7o),e(Ps,NN),e(NN,T7o),e(Ps,M7o),e(y,E7o),e(y,Hp),e(Hp,Qle),e(Qle,C7o),e(Hp,w7o),e(Hp,qN),e(qN,A7o),e(Hp,L7o),e(y,y7o),e(y,Up),e(Up,Hle),e(Hle,x7o),e(Up,$7o),e(Up,jN),e(jN,k7o),e(Up,S7o),e(y,R7o),e(y,Jp),e(Jp,Ule),e(Ule,P7o),e(Jp,B7o),e(Jp,DN),e(DN,I7o),e(Jp,N7o),e(y,q7o),e(y,Yp),e(Yp,Jle),e(Jle,j7o),e(Yp,D7o),e(Yp,GN),e(GN,G7o),e(Yp,O7o),e(y,V7o),e(y,Kp),e(Kp,Yle),e(Yle,X7o),e(Kp,z7o),e(Kp,ON),e(ON,W7o),e(Kp,Q7o),e(y,H7o),e(y,Zp),e(Zp,Kle),e(Kle,U7o),e(Zp,J7o),e(Zp,VN),e(VN,Y7o),e(Zp,K7o),e(y,Z7o),e(y,e_),e(e_,Zle),e(Zle,ebo),e(e_,obo),e(e_,XN),e(XN,rbo),e(e_,tbo),e(y,abo),e(y,o_),e(o_,eie),e(eie,nbo),e(o_,sbo),e(o_,zN),e(zN,lbo),e(o_,ibo),e(y,dbo),e(y,r_),e(r_,oie),e(oie,cbo),e(r_,fbo),e(r_,WN),e(WN,mbo),e(r_,gbo),e(y,hbo),e(y,t_),e(t_,rie),e(rie,pbo),e(t_,_bo),e(t_,QN),e(QN,ubo),e(t_,bbo),e(y,vbo),e(y,a_),e(a_,tie),e(tie,Fbo),e(a_,Tbo),e(a_,HN),e(HN,Mbo),e(a_,Ebo),e(y,Cbo),e(y,n_),e(n_,aie),e(aie,wbo),e(n_,Abo),e(n_,UN),e(UN,Lbo),e(n_,ybo),e(y,xbo),e(y,s_),e(s_,nie),e(nie,$bo),e(s_,kbo),e(s_,JN),e(JN,Sbo),e(s_,Rbo),e(y,Pbo),e(y,l_),e(l_,sie),e(sie,Bbo),e(l_,Ibo),e(l_,YN),e(YN,Nbo),e(l_,qbo),e(y,jbo),e(y,i_),e(i_,lie),e(lie,Dbo),e(i_,Gbo),e(i_,KN),e(KN,Obo),e(i_,Vbo),e(y,Xbo),e(y,d_),e(d_,iie),e(iie,zbo),e(d_,Wbo),e(d_,ZN),e(ZN,Qbo),e(d_,Hbo),e(y,Ubo),e(y,c_),e(c_,die),e(die,Jbo),e(c_,Ybo),e(c_,eq),e(eq,Kbo),e(c_,Zbo),e(y,e2o),e(y,f_),e(f_,cie),e(cie,o2o),e(f_,r2o),e(f_,oq),e(oq,t2o),e(f_,a2o),e(y,n2o),e(y,m_),e(m_,fie),e(fie,s2o),e(m_,l2o),e(m_,rq),e(rq,i2o),e(m_,d2o),e(y,c2o),e(y,g_),e(g_,mie),e(mie,f2o),e(g_,m2o),e(g_,tq),e(tq,g2o),e(g_,h2o),e(y,p2o),e(y,h_),e(h_,gie),e(gie,_2o),e(h_,u2o),e(h_,aq),e(aq,b2o),e(h_,v2o),e(y,F2o),e(y,p_),e(p_,hie),e(hie,T2o),e(p_,M2o),e(p_,nq),e(nq,E2o),e(p_,C2o),e(y,w2o),e(y,__),e(__,pie),e(pie,A2o),e(__,L2o),e(__,sq),e(sq,y2o),e(__,x2o),e(y,$2o),e(y,u_),e(u_,_ie),e(_ie,k2o),e(u_,S2o),e(u_,lq),e(lq,R2o),e(u_,P2o),e(y,B2o),e(y,b_),e(b_,uie),e(uie,I2o),e(b_,N2o),e(b_,iq),e(iq,q2o),e(b_,j2o),e(y,D2o),e(y,v_),e(v_,bie),e(bie,G2o),e(v_,O2o),e(v_,dq),e(dq,V2o),e(v_,X2o),e(y,z2o),e(y,F_),e(F_,vie),e(vie,W2o),e(F_,Q2o),e(F_,cq),e(cq,H2o),e(F_,U2o),e(y,J2o),e(y,T_),e(T_,Fie),e(Fie,Y2o),e(T_,K2o),e(T_,fq),e(fq,Z2o),e(T_,evo),e(y,ovo),e(y,M_),e(M_,Tie),e(Tie,rvo),e(M_,tvo),e(M_,mq),e(mq,avo),e(M_,nvo),e(y,svo),e(y,E_),e(E_,Mie),e(Mie,lvo),e(E_,ivo),e(E_,gq),e(gq,dvo),e(E_,cvo),e(y,fvo),e(y,C_),e(C_,Eie),e(Eie,mvo),e(C_,gvo),e(C_,hq),e(hq,hvo),e(C_,pvo),e(y,_vo),e(y,w_),e(w_,Cie),e(Cie,uvo),e(w_,bvo),e(w_,pq),e(pq,vvo),e(w_,Fvo),e(y,Tvo),e(y,A_),e(A_,wie),e(wie,Mvo),e(A_,Evo),e(A_,_q),e(_q,Cvo),e(A_,wvo),e(y,Avo),e(y,L_),e(L_,Aie),e(Aie,Lvo),e(L_,yvo),e(L_,uq),e(uq,xvo),e(L_,$vo),e(y,kvo),e(y,y_),e(y_,Lie),e(Lie,Svo),e(y_,Rvo),e(y_,bq),e(bq,Pvo),e(y_,Bvo),e(y,Ivo),e(y,x_),e(x_,yie),e(yie,Nvo),e(x_,qvo),e(x_,vq),e(vq,jvo),e(x_,Dvo),e(y,Gvo),e(y,$_),e($_,xie),e(xie,Ovo),e($_,Vvo),e($_,Fq),e(Fq,Xvo),e($_,zvo),e(y,Wvo),e(y,k_),e(k_,$ie),e($ie,Qvo),e(k_,Hvo),e(k_,Tq),e(Tq,Uvo),e(k_,Jvo),e(y,Yvo),e(y,S_),e(S_,kie),e(kie,Kvo),e(S_,Zvo),e(S_,Mq),e(Mq,eFo),e(S_,oFo),e(y,rFo),e(y,R_),e(R_,Sie),e(Sie,tFo),e(R_,aFo),e(R_,Eq),e(Eq,nFo),e(R_,sFo),e(y,lFo),e(y,P_),e(P_,Rie),e(Rie,iFo),e(P_,dFo),e(P_,Cq),e(Cq,cFo),e(P_,fFo),e(y,mFo),e(y,B_),e(B_,Pie),e(Pie,gFo),e(B_,hFo),e(B_,wq),e(wq,pFo),e(B_,_Fo),e(y,uFo),e(y,I_),e(I_,Bie),e(Bie,bFo),e(I_,vFo),e(I_,Aq),e(Aq,FFo),e(I_,TFo),e(y,MFo),e(y,N_),e(N_,Iie),e(Iie,EFo),e(N_,CFo),e(N_,Lq),e(Lq,wFo),e(N_,AFo),e(y,LFo),e(y,q_),e(q_,Nie),e(Nie,yFo),e(q_,xFo),e(q_,yq),e(yq,$Fo),e(q_,kFo),e(y,SFo),e(y,j_),e(j_,qie),e(qie,RFo),e(j_,PFo),e(j_,xq),e(xq,BFo),e(j_,IFo),e(y,NFo),e(y,D_),e(D_,jie),e(jie,qFo),e(D_,jFo),e(D_,$q),e($q,DFo),e(D_,GFo),e(y,OFo),e(y,G_),e(G_,Die),e(Die,VFo),e(G_,XFo),e(G_,kq),e(kq,zFo),e(G_,WFo),e(y,QFo),e(y,O_),e(O_,Gie),e(Gie,HFo),e(O_,UFo),e(O_,Sq),e(Sq,JFo),e(O_,YFo),e(y,KFo),e(y,V_),e(V_,Oie),e(Oie,ZFo),e(V_,eTo),e(V_,Rq),e(Rq,oTo),e(V_,rTo),e(y,tTo),e(y,X_),e(X_,Vie),e(Vie,aTo),e(X_,nTo),e(X_,Pq),e(Pq,sTo),e(X_,lTo),e(y,iTo),e(y,z_),e(z_,Xie),e(Xie,dTo),e(z_,cTo),e(z_,Bq),e(Bq,fTo),e(z_,mTo),e(y,gTo),e(y,W_),e(W_,zie),e(zie,hTo),e(W_,pTo),e(W_,Iq),e(Iq,_To),e(W_,uTo),e(y,bTo),e(y,Q_),e(Q_,Wie),e(Wie,vTo),e(Q_,FTo),e(Q_,Nq),e(Nq,TTo),e(Q_,MTo),e(y,ETo),e(y,H_),e(H_,Qie),e(Qie,CTo),e(H_,wTo),e(H_,qq),e(qq,ATo),e(H_,LTo),e(y,yTo),e(y,U_),e(U_,Hie),e(Hie,xTo),e(U_,$To),e(U_,jq),e(jq,kTo),e(U_,STo),e(y,RTo),e(y,J_),e(J_,Uie),e(Uie,PTo),e(J_,BTo),e(J_,Dq),e(Dq,ITo),e(J_,NTo),e(y,qTo),e(y,Y_),e(Y_,Jie),e(Jie,jTo),e(Y_,DTo),e(Y_,Gq),e(Gq,GTo),e(Y_,OTo),e(y,VTo),e(y,K_),e(K_,Yie),e(Yie,XTo),e(K_,zTo),e(K_,Oq),e(Oq,WTo),e(K_,QTo),e(y,HTo),e(y,Z_),e(Z_,Kie),e(Kie,UTo),e(Z_,JTo),e(Z_,Vq),e(Vq,YTo),e(Z_,KTo),e(y,ZTo),e(y,eu),e(eu,Zie),e(Zie,eMo),e(eu,oMo),e(eu,Xq),e(Xq,rMo),e(eu,tMo),e(y,aMo),e(y,ou),e(ou,ede),e(ede,nMo),e(ou,sMo),e(ou,zq),e(zq,lMo),e(ou,iMo),e(y,dMo),e(y,ru),e(ru,ode),e(ode,cMo),e(ru,fMo),e(ru,Wq),e(Wq,mMo),e(ru,gMo),e(y,hMo),e(y,tu),e(tu,rde),e(rde,pMo),e(tu,_Mo),e(tu,Qq),e(Qq,uMo),e(tu,bMo),e(y,vMo),e(y,au),e(au,tde),e(tde,FMo),e(au,TMo),e(au,Hq),e(Hq,MMo),e(au,EMo),e(y,CMo),e(y,nu),e(nu,ade),e(ade,wMo),e(nu,AMo),e(nu,Uq),e(Uq,LMo),e(nu,yMo),e(y,xMo),e(y,su),e(su,nde),e(nde,$Mo),e(su,kMo),e(su,Jq),e(Jq,SMo),e(su,RMo),e(y,PMo),e(y,lu),e(lu,sde),e(sde,BMo),e(lu,IMo),e(lu,Yq),e(Yq,NMo),e(lu,qMo),e(y,jMo),e(y,iu),e(iu,lde),e(lde,DMo),e(iu,GMo),e(iu,Kq),e(Kq,OMo),e(iu,VMo),e(y,XMo),e(y,du),e(du,ide),e(ide,zMo),e(du,WMo),e(du,Zq),e(Zq,QMo),e(du,HMo),e(y,UMo),e(y,cu),e(cu,dde),e(dde,JMo),e(cu,YMo),e(cu,ej),e(ej,KMo),e(cu,ZMo),e(Je,eEo),e(Je,fu),e(fu,oEo),e(fu,cde),e(cde,rEo),e(fu,tEo),e(fu,fde),e(fde,aEo),e(Je,nEo),M(mu,Je,null),b(f,Sje,u),b(f,xi,u),e(xi,gu),e(gu,mde),M(ML,mde,null),e(xi,sEo),e(xi,gde),e(gde,lEo),b(f,Rje,u),b(f,xo,u),M(EL,xo,null),e(xo,iEo),e(xo,$i),e($i,dEo),e($i,oj),e(oj,cEo),e($i,fEo),e($i,rj),e(rj,mEo),e($i,gEo),e(xo,hEo),e(xo,CL),e(CL,pEo),e(CL,hde),e(hde,_Eo),e(CL,uEo),e(xo,bEo),e(xo,at),M(wL,at,null),e(at,vEo),e(at,pde),e(pde,FEo),e(at,TEo),e(at,ki),e(ki,MEo),e(ki,_de),e(_de,EEo),e(ki,CEo),e(ki,tj),e(tj,wEo),e(ki,AEo),e(at,LEo),M(hu,at,null),e(xo,yEo),e(xo,Ye),M(AL,Ye,null),e(Ye,xEo),e(Ye,ude),e(ude,$Eo),e(Ye,kEo),e(Ye,xa),e(xa,SEo),e(xa,bde),e(bde,REo),e(xa,PEo),e(xa,vde),e(vde,BEo),e(xa,IEo),e(xa,Fde),e(Fde,NEo),e(xa,qEo),e(Ye,jEo),e(Ye,G),e(G,pu),e(pu,Tde),e(Tde,DEo),e(pu,GEo),e(pu,aj),e(aj,OEo),e(pu,VEo),e(G,XEo),e(G,_u),e(_u,Mde),e(Mde,zEo),e(_u,WEo),e(_u,nj),e(nj,QEo),e(_u,HEo),e(G,UEo),e(G,uu),e(uu,Ede),e(Ede,JEo),e(uu,YEo),e(uu,sj),e(sj,KEo),e(uu,ZEo),e(G,eCo),e(G,bu),e(bu,Cde),e(Cde,oCo),e(bu,rCo),e(bu,lj),e(lj,tCo),e(bu,aCo),e(G,nCo),e(G,vu),e(vu,wde),e(wde,sCo),e(vu,lCo),e(vu,ij),e(ij,iCo),e(vu,dCo),e(G,cCo),e(G,Fu),e(Fu,Ade),e(Ade,fCo),e(Fu,mCo),e(Fu,dj),e(dj,gCo),e(Fu,hCo),e(G,pCo),e(G,Tu),e(Tu,Lde),e(Lde,_Co),e(Tu,uCo),e(Tu,cj),e(cj,bCo),e(Tu,vCo),e(G,FCo),e(G,Mu),e(Mu,yde),e(yde,TCo),e(Mu,MCo),e(Mu,fj),e(fj,ECo),e(Mu,CCo),e(G,wCo),e(G,Eu),e(Eu,xde),e(xde,ACo),e(Eu,LCo),e(Eu,mj),e(mj,yCo),e(Eu,xCo),e(G,$Co),e(G,Cu),e(Cu,$de),e($de,kCo),e(Cu,SCo),e(Cu,gj),e(gj,RCo),e(Cu,PCo),e(G,BCo),e(G,wu),e(wu,kde),e(kde,ICo),e(wu,NCo),e(wu,hj),e(hj,qCo),e(wu,jCo),e(G,DCo),e(G,Au),e(Au,Sde),e(Sde,GCo),e(Au,OCo),e(Au,pj),e(pj,VCo),e(Au,XCo),e(G,zCo),e(G,Lu),e(Lu,Rde),e(Rde,WCo),e(Lu,QCo),e(Lu,_j),e(_j,HCo),e(Lu,UCo),e(G,JCo),e(G,yu),e(yu,Pde),e(Pde,YCo),e(yu,KCo),e(yu,uj),e(uj,ZCo),e(yu,e5o),e(G,o5o),e(G,xu),e(xu,Bde),e(Bde,r5o),e(xu,t5o),e(xu,bj),e(bj,a5o),e(xu,n5o),e(G,s5o),e(G,$u),e($u,Ide),e(Ide,l5o),e($u,i5o),e($u,vj),e(vj,d5o),e($u,c5o),e(G,f5o),e(G,ku),e(ku,Nde),e(Nde,m5o),e(ku,g5o),e(ku,Fj),e(Fj,h5o),e(ku,p5o),e(G,_5o),e(G,Su),e(Su,qde),e(qde,u5o),e(Su,b5o),e(Su,Tj),e(Tj,v5o),e(Su,F5o),e(G,T5o),e(G,Ru),e(Ru,jde),e(jde,M5o),e(Ru,E5o),e(Ru,Mj),e(Mj,C5o),e(Ru,w5o),e(G,A5o),e(G,Pu),e(Pu,Dde),e(Dde,L5o),e(Pu,y5o),e(Pu,Ej),e(Ej,x5o),e(Pu,$5o),e(G,k5o),e(G,Bu),e(Bu,Gde),e(Gde,S5o),e(Bu,R5o),e(Bu,Cj),e(Cj,P5o),e(Bu,B5o),e(G,I5o),e(G,Iu),e(Iu,Ode),e(Ode,N5o),e(Iu,q5o),e(Iu,wj),e(wj,j5o),e(Iu,D5o),e(G,G5o),e(G,Nu),e(Nu,Vde),e(Vde,O5o),e(Nu,V5o),e(Nu,Aj),e(Aj,X5o),e(Nu,z5o),e(G,W5o),e(G,qu),e(qu,Xde),e(Xde,Q5o),e(qu,H5o),e(qu,Lj),e(Lj,U5o),e(qu,J5o),e(G,Y5o),e(G,ju),e(ju,zde),e(zde,K5o),e(ju,Z5o),e(ju,yj),e(yj,e3o),e(ju,o3o),e(G,r3o),e(G,Du),e(Du,Wde),e(Wde,t3o),e(Du,a3o),e(Du,xj),e(xj,n3o),e(Du,s3o),e(G,l3o),e(G,Gu),e(Gu,Qde),e(Qde,i3o),e(Gu,d3o),e(Gu,$j),e($j,c3o),e(Gu,f3o),e(G,m3o),e(G,Ou),e(Ou,Hde),e(Hde,g3o),e(Ou,h3o),e(Ou,kj),e(kj,p3o),e(Ou,_3o),e(G,u3o),e(G,Vu),e(Vu,Ude),e(Ude,b3o),e(Vu,v3o),e(Vu,Sj),e(Sj,F3o),e(Vu,T3o),e(G,M3o),e(G,Xu),e(Xu,Jde),e(Jde,E3o),e(Xu,C3o),e(Xu,Rj),e(Rj,w3o),e(Xu,A3o),e(G,L3o),e(G,zu),e(zu,Yde),e(Yde,y3o),e(zu,x3o),e(zu,Pj),e(Pj,$3o),e(zu,k3o),e(G,S3o),e(G,Wu),e(Wu,Kde),e(Kde,R3o),e(Wu,P3o),e(Wu,Bj),e(Bj,B3o),e(Wu,I3o),e(G,N3o),e(G,Qu),e(Qu,Zde),e(Zde,q3o),e(Qu,j3o),e(Qu,Ij),e(Ij,D3o),e(Qu,G3o),e(G,O3o),e(G,Hu),e(Hu,ece),e(ece,V3o),e(Hu,X3o),e(Hu,Nj),e(Nj,z3o),e(Hu,W3o),e(G,Q3o),e(G,Uu),e(Uu,oce),e(oce,H3o),e(Uu,U3o),e(Uu,qj),e(qj,J3o),e(Uu,Y3o),e(G,K3o),e(G,Ju),e(Ju,rce),e(rce,Z3o),e(Ju,e0o),e(Ju,jj),e(jj,o0o),e(Ju,r0o),e(G,t0o),e(G,Yu),e(Yu,tce),e(tce,a0o),e(Yu,n0o),e(Yu,Dj),e(Dj,s0o),e(Yu,l0o),e(G,i0o),e(G,Ku),e(Ku,ace),e(ace,d0o),e(Ku,c0o),e(Ku,Gj),e(Gj,f0o),e(Ku,m0o),e(G,g0o),e(G,Zu),e(Zu,nce),e(nce,h0o),e(Zu,p0o),e(Zu,Oj),e(Oj,_0o),e(Zu,u0o),e(G,b0o),e(G,e4),e(e4,sce),e(sce,v0o),e(e4,F0o),e(e4,Vj),e(Vj,T0o),e(e4,M0o),e(G,E0o),e(G,o4),e(o4,lce),e(lce,C0o),e(o4,w0o),e(o4,Xj),e(Xj,A0o),e(o4,L0o),e(G,y0o),e(G,r4),e(r4,ice),e(ice,x0o),e(r4,$0o),e(r4,zj),e(zj,k0o),e(r4,S0o),e(G,R0o),e(G,t4),e(t4,dce),e(dce,P0o),e(t4,B0o),e(t4,Wj),e(Wj,I0o),e(t4,N0o),e(Ye,q0o),e(Ye,a4),e(a4,j0o),e(a4,cce),e(cce,D0o),e(a4,G0o),e(a4,fce),e(fce,O0o),e(Ye,V0o),M(n4,Ye,null),b(f,Pje,u),b(f,Si,u),e(Si,s4),e(s4,mce),M(LL,mce,null),e(Si,X0o),e(Si,gce),e(gce,z0o),b(f,Bje,u),b(f,$o,u),M(yL,$o,null),e($o,W0o),e($o,Ri),e(Ri,Q0o),e(Ri,Qj),e(Qj,H0o),e(Ri,U0o),e(Ri,Hj),e(Hj,J0o),e(Ri,Y0o),e($o,K0o),e($o,xL),e(xL,Z0o),e(xL,hce),e(hce,ewo),e(xL,owo),e($o,rwo),e($o,nt),M($L,nt,null),e(nt,two),e(nt,pce),e(pce,awo),e(nt,nwo),e(nt,Pi),e(Pi,swo),e(Pi,_ce),e(_ce,lwo),e(Pi,iwo),e(Pi,Uj),e(Uj,dwo),e(Pi,cwo),e(nt,fwo),M(l4,nt,null),e($o,mwo),e($o,Ke),M(kL,Ke,null),e(Ke,gwo),e(Ke,uce),e(uce,hwo),e(Ke,pwo),e(Ke,$a),e($a,_wo),e($a,bce),e(bce,uwo),e($a,bwo),e($a,vce),e(vce,vwo),e($a,Fwo),e($a,Fce),e(Fce,Two),e($a,Mwo),e(Ke,Ewo),e(Ke,z),e(z,i4),e(i4,Tce),e(Tce,Cwo),e(i4,wwo),e(i4,Jj),e(Jj,Awo),e(i4,Lwo),e(z,ywo),e(z,d4),e(d4,Mce),e(Mce,xwo),e(d4,$wo),e(d4,Yj),e(Yj,kwo),e(d4,Swo),e(z,Rwo),e(z,c4),e(c4,Ece),e(Ece,Pwo),e(c4,Bwo),e(c4,Kj),e(Kj,Iwo),e(c4,Nwo),e(z,qwo),e(z,f4),e(f4,Cce),e(Cce,jwo),e(f4,Dwo),e(f4,Zj),e(Zj,Gwo),e(f4,Owo),e(z,Vwo),e(z,m4),e(m4,wce),e(wce,Xwo),e(m4,zwo),e(m4,eD),e(eD,Wwo),e(m4,Qwo),e(z,Hwo),e(z,g4),e(g4,Ace),e(Ace,Uwo),e(g4,Jwo),e(g4,oD),e(oD,Ywo),e(g4,Kwo),e(z,Zwo),e(z,h4),e(h4,Lce),e(Lce,eAo),e(h4,oAo),e(h4,rD),e(rD,rAo),e(h4,tAo),e(z,aAo),e(z,p4),e(p4,yce),e(yce,nAo),e(p4,sAo),e(p4,tD),e(tD,lAo),e(p4,iAo),e(z,dAo),e(z,_4),e(_4,xce),e(xce,cAo),e(_4,fAo),e(_4,aD),e(aD,mAo),e(_4,gAo),e(z,hAo),e(z,u4),e(u4,$ce),e($ce,pAo),e(u4,_Ao),e(u4,nD),e(nD,uAo),e(u4,bAo),e(z,vAo),e(z,b4),e(b4,kce),e(kce,FAo),e(b4,TAo),e(b4,sD),e(sD,MAo),e(b4,EAo),e(z,CAo),e(z,v4),e(v4,Sce),e(Sce,wAo),e(v4,AAo),e(v4,lD),e(lD,LAo),e(v4,yAo),e(z,xAo),e(z,F4),e(F4,Rce),e(Rce,$Ao),e(F4,kAo),e(F4,iD),e(iD,SAo),e(F4,RAo),e(z,PAo),e(z,T4),e(T4,Pce),e(Pce,BAo),e(T4,IAo),e(T4,dD),e(dD,NAo),e(T4,qAo),e(z,jAo),e(z,M4),e(M4,Bce),e(Bce,DAo),e(M4,GAo),e(M4,cD),e(cD,OAo),e(M4,VAo),e(z,XAo),e(z,E4),e(E4,Ice),e(Ice,zAo),e(E4,WAo),e(E4,fD),e(fD,QAo),e(E4,HAo),e(z,UAo),e(z,C4),e(C4,Nce),e(Nce,JAo),e(C4,YAo),e(C4,mD),e(mD,KAo),e(C4,ZAo),e(z,e6o),e(z,w4),e(w4,qce),e(qce,o6o),e(w4,r6o),e(w4,gD),e(gD,t6o),e(w4,a6o),e(z,n6o),e(z,A4),e(A4,jce),e(jce,s6o),e(A4,l6o),e(A4,hD),e(hD,i6o),e(A4,d6o),e(z,c6o),e(z,L4),e(L4,Dce),e(Dce,f6o),e(L4,m6o),e(L4,pD),e(pD,g6o),e(L4,h6o),e(z,p6o),e(z,y4),e(y4,Gce),e(Gce,_6o),e(y4,u6o),e(y4,_D),e(_D,b6o),e(y4,v6o),e(z,F6o),e(z,x4),e(x4,Oce),e(Oce,T6o),e(x4,M6o),e(x4,uD),e(uD,E6o),e(x4,C6o),e(z,w6o),e(z,$4),e($4,Vce),e(Vce,A6o),e($4,L6o),e($4,bD),e(bD,y6o),e($4,x6o),e(z,$6o),e(z,k4),e(k4,Xce),e(Xce,k6o),e(k4,S6o),e(k4,vD),e(vD,R6o),e(k4,P6o),e(z,B6o),e(z,S4),e(S4,zce),e(zce,I6o),e(S4,N6o),e(S4,FD),e(FD,q6o),e(S4,j6o),e(z,D6o),e(z,R4),e(R4,Wce),e(Wce,G6o),e(R4,O6o),e(R4,TD),e(TD,V6o),e(R4,X6o),e(z,z6o),e(z,P4),e(P4,Qce),e(Qce,W6o),e(P4,Q6o),e(P4,MD),e(MD,H6o),e(P4,U6o),e(z,J6o),e(z,B4),e(B4,Hce),e(Hce,Y6o),e(B4,K6o),e(B4,ED),e(ED,Z6o),e(B4,eLo),e(z,oLo),e(z,I4),e(I4,Uce),e(Uce,rLo),e(I4,tLo),e(I4,CD),e(CD,aLo),e(I4,nLo),e(z,sLo),e(z,N4),e(N4,Jce),e(Jce,lLo),e(N4,iLo),e(N4,wD),e(wD,dLo),e(N4,cLo),e(z,fLo),e(z,q4),e(q4,Yce),e(Yce,mLo),e(q4,gLo),e(q4,AD),e(AD,hLo),e(q4,pLo),e(z,_Lo),e(z,j4),e(j4,Kce),e(Kce,uLo),e(j4,bLo),e(j4,LD),e(LD,vLo),e(j4,FLo),e(z,TLo),e(z,D4),e(D4,Zce),e(Zce,MLo),e(D4,ELo),e(D4,yD),e(yD,CLo),e(D4,wLo),e(z,ALo),e(z,G4),e(G4,efe),e(efe,LLo),e(G4,yLo),e(G4,xD),e(xD,xLo),e(G4,$Lo),e(z,kLo),e(z,O4),e(O4,ofe),e(ofe,SLo),e(O4,RLo),e(O4,$D),e($D,PLo),e(O4,BLo),e(z,ILo),e(z,V4),e(V4,rfe),e(rfe,NLo),e(V4,qLo),e(V4,kD),e(kD,jLo),e(V4,DLo),e(z,GLo),e(z,X4),e(X4,tfe),e(tfe,OLo),e(X4,VLo),e(X4,SD),e(SD,XLo),e(X4,zLo),e(z,WLo),e(z,z4),e(z4,afe),e(afe,QLo),e(z4,HLo),e(z4,RD),e(RD,ULo),e(z4,JLo),e(Ke,YLo),e(Ke,W4),e(W4,KLo),e(W4,nfe),e(nfe,ZLo),e(W4,eyo),e(W4,sfe),e(sfe,oyo),e(Ke,ryo),M(Q4,Ke,null),b(f,Ije,u),b(f,Bi,u),e(Bi,H4),e(H4,lfe),M(SL,lfe,null),e(Bi,tyo),e(Bi,ife),e(ife,ayo),b(f,Nje,u),b(f,ko,u),M(RL,ko,null),e(ko,nyo),e(ko,Ii),e(Ii,syo),e(Ii,PD),e(PD,lyo),e(Ii,iyo),e(Ii,BD),e(BD,dyo),e(Ii,cyo),e(ko,fyo),e(ko,PL),e(PL,myo),e(PL,dfe),e(dfe,gyo),e(PL,hyo),e(ko,pyo),e(ko,st),M(BL,st,null),e(st,_yo),e(st,cfe),e(cfe,uyo),e(st,byo),e(st,Ni),e(Ni,vyo),e(Ni,ffe),e(ffe,Fyo),e(Ni,Tyo),e(Ni,ID),e(ID,Myo),e(Ni,Eyo),e(st,Cyo),M(U4,st,null),e(ko,wyo),e(ko,Ze),M(IL,Ze,null),e(Ze,Ayo),e(Ze,mfe),e(mfe,Lyo),e(Ze,yyo),e(Ze,ka),e(ka,xyo),e(ka,gfe),e(gfe,$yo),e(ka,kyo),e(ka,hfe),e(hfe,Syo),e(ka,Ryo),e(ka,pfe),e(pfe,Pyo),e(ka,Byo),e(Ze,Iyo),e(Ze,Q),e(Q,J4),e(J4,_fe),e(_fe,Nyo),e(J4,qyo),e(J4,ND),e(ND,jyo),e(J4,Dyo),e(Q,Gyo),e(Q,Y4),e(Y4,ufe),e(ufe,Oyo),e(Y4,Vyo),e(Y4,qD),e(qD,Xyo),e(Y4,zyo),e(Q,Wyo),e(Q,K4),e(K4,bfe),e(bfe,Qyo),e(K4,Hyo),e(K4,jD),e(jD,Uyo),e(K4,Jyo),e(Q,Yyo),e(Q,Z4),e(Z4,vfe),e(vfe,Kyo),e(Z4,Zyo),e(Z4,DD),e(DD,e8o),e(Z4,o8o),e(Q,r8o),e(Q,e1),e(e1,Ffe),e(Ffe,t8o),e(e1,a8o),e(e1,GD),e(GD,n8o),e(e1,s8o),e(Q,l8o),e(Q,o1),e(o1,Tfe),e(Tfe,i8o),e(o1,d8o),e(o1,OD),e(OD,c8o),e(o1,f8o),e(Q,m8o),e(Q,r1),e(r1,Mfe),e(Mfe,g8o),e(r1,h8o),e(r1,VD),e(VD,p8o),e(r1,_8o),e(Q,u8o),e(Q,t1),e(t1,Efe),e(Efe,b8o),e(t1,v8o),e(t1,XD),e(XD,F8o),e(t1,T8o),e(Q,M8o),e(Q,a1),e(a1,Cfe),e(Cfe,E8o),e(a1,C8o),e(a1,zD),e(zD,w8o),e(a1,A8o),e(Q,L8o),e(Q,n1),e(n1,wfe),e(wfe,y8o),e(n1,x8o),e(n1,WD),e(WD,$8o),e(n1,k8o),e(Q,S8o),e(Q,s1),e(s1,Afe),e(Afe,R8o),e(s1,P8o),e(s1,QD),e(QD,B8o),e(s1,I8o),e(Q,N8o),e(Q,l1),e(l1,Lfe),e(Lfe,q8o),e(l1,j8o),e(l1,HD),e(HD,D8o),e(l1,G8o),e(Q,O8o),e(Q,i1),e(i1,yfe),e(yfe,V8o),e(i1,X8o),e(i1,UD),e(UD,z8o),e(i1,W8o),e(Q,Q8o),e(Q,d1),e(d1,xfe),e(xfe,H8o),e(d1,U8o),e(d1,JD),e(JD,J8o),e(d1,Y8o),e(Q,K8o),e(Q,c1),e(c1,$fe),e($fe,Z8o),e(c1,e9o),e(c1,YD),e(YD,o9o),e(c1,r9o),e(Q,t9o),e(Q,f1),e(f1,kfe),e(kfe,a9o),e(f1,n9o),e(f1,KD),e(KD,s9o),e(f1,l9o),e(Q,i9o),e(Q,m1),e(m1,Sfe),e(Sfe,d9o),e(m1,c9o),e(m1,ZD),e(ZD,f9o),e(m1,m9o),e(Q,g9o),e(Q,g1),e(g1,Rfe),e(Rfe,h9o),e(g1,p9o),e(g1,eG),e(eG,_9o),e(g1,u9o),e(Q,b9o),e(Q,h1),e(h1,Pfe),e(Pfe,v9o),e(h1,F9o),e(h1,oG),e(oG,T9o),e(h1,M9o),e(Q,E9o),e(Q,p1),e(p1,Bfe),e(Bfe,C9o),e(p1,w9o),e(p1,rG),e(rG,A9o),e(p1,L9o),e(Q,y9o),e(Q,_1),e(_1,Ife),e(Ife,x9o),e(_1,$9o),e(_1,tG),e(tG,k9o),e(_1,S9o),e(Q,R9o),e(Q,u1),e(u1,Nfe),e(Nfe,P9o),e(u1,B9o),e(u1,aG),e(aG,I9o),e(u1,N9o),e(Q,q9o),e(Q,b1),e(b1,qfe),e(qfe,j9o),e(b1,D9o),e(b1,nG),e(nG,G9o),e(b1,O9o),e(Q,V9o),e(Q,v1),e(v1,jfe),e(jfe,X9o),e(v1,z9o),e(v1,sG),e(sG,W9o),e(v1,Q9o),e(Q,H9o),e(Q,F1),e(F1,Dfe),e(Dfe,U9o),e(F1,J9o),e(F1,lG),e(lG,Y9o),e(F1,K9o),e(Q,Z9o),e(Q,T1),e(T1,Gfe),e(Gfe,exo),e(T1,oxo),e(T1,iG),e(iG,rxo),e(T1,txo),e(Q,axo),e(Q,M1),e(M1,Ofe),e(Ofe,nxo),e(M1,sxo),e(M1,dG),e(dG,lxo),e(M1,ixo),e(Q,dxo),e(Q,E1),e(E1,Vfe),e(Vfe,cxo),e(E1,fxo),e(E1,cG),e(cG,mxo),e(E1,gxo),e(Q,hxo),e(Q,C1),e(C1,Xfe),e(Xfe,pxo),e(C1,_xo),e(C1,fG),e(fG,uxo),e(C1,bxo),e(Q,vxo),e(Q,w1),e(w1,zfe),e(zfe,Fxo),e(w1,Txo),e(w1,mG),e(mG,Mxo),e(w1,Exo),e(Q,Cxo),e(Q,A1),e(A1,Wfe),e(Wfe,wxo),e(A1,Axo),e(A1,gG),e(gG,Lxo),e(A1,yxo),e(Q,xxo),e(Q,L1),e(L1,Qfe),e(Qfe,$xo),e(L1,kxo),e(L1,Hfe),e(Hfe,Sxo),e(L1,Rxo),e(Q,Pxo),e(Q,y1),e(y1,Ufe),e(Ufe,Bxo),e(y1,Ixo),e(y1,hG),e(hG,Nxo),e(y1,qxo),e(Q,jxo),e(Q,x1),e(x1,Jfe),e(Jfe,Dxo),e(x1,Gxo),e(x1,pG),e(pG,Oxo),e(x1,Vxo),e(Q,Xxo),e(Q,$1),e($1,Yfe),e(Yfe,zxo),e($1,Wxo),e($1,_G),e(_G,Qxo),e($1,Hxo),e(Q,Uxo),e(Q,k1),e(k1,Kfe),e(Kfe,Jxo),e(k1,Yxo),e(k1,uG),e(uG,Kxo),e(k1,Zxo),e(Ze,e$o),e(Ze,S1),e(S1,o$o),e(S1,Zfe),e(Zfe,r$o),e(S1,t$o),e(S1,eme),e(eme,a$o),e(Ze,n$o),M(R1,Ze,null),b(f,qje,u),b(f,qi,u),e(qi,P1),e(P1,ome),M(NL,ome,null),e(qi,s$o),e(qi,rme),e(rme,l$o),b(f,jje,u),b(f,So,u),M(qL,So,null),e(So,i$o),e(So,ji),e(ji,d$o),e(ji,bG),e(bG,c$o),e(ji,f$o),e(ji,vG),e(vG,m$o),e(ji,g$o),e(So,h$o),e(So,jL),e(jL,p$o),e(jL,tme),e(tme,_$o),e(jL,u$o),e(So,b$o),e(So,lt),M(DL,lt,null),e(lt,v$o),e(lt,ame),e(ame,F$o),e(lt,T$o),e(lt,Di),e(Di,M$o),e(Di,nme),e(nme,E$o),e(Di,C$o),e(Di,FG),e(FG,w$o),e(Di,A$o),e(lt,L$o),M(B1,lt,null),e(So,y$o),e(So,eo),M(GL,eo,null),e(eo,x$o),e(eo,sme),e(sme,$$o),e(eo,k$o),e(eo,Sa),e(Sa,S$o),e(Sa,lme),e(lme,R$o),e(Sa,P$o),e(Sa,ime),e(ime,B$o),e(Sa,I$o),e(Sa,dme),e(dme,N$o),e(Sa,q$o),e(eo,j$o),e(eo,_e),e(_e,I1),e(I1,cme),e(cme,D$o),e(I1,G$o),e(I1,TG),e(TG,O$o),e(I1,V$o),e(_e,X$o),e(_e,N1),e(N1,fme),e(fme,z$o),e(N1,W$o),e(N1,MG),e(MG,Q$o),e(N1,H$o),e(_e,U$o),e(_e,q1),e(q1,mme),e(mme,J$o),e(q1,Y$o),e(q1,EG),e(EG,K$o),e(q1,Z$o),e(_e,eko),e(_e,j1),e(j1,gme),e(gme,oko),e(j1,rko),e(j1,CG),e(CG,tko),e(j1,ako),e(_e,nko),e(_e,D1),e(D1,hme),e(hme,sko),e(D1,lko),e(D1,wG),e(wG,iko),e(D1,dko),e(_e,cko),e(_e,G1),e(G1,pme),e(pme,fko),e(G1,mko),e(G1,AG),e(AG,gko),e(G1,hko),e(_e,pko),e(_e,O1),e(O1,_me),e(_me,_ko),e(O1,uko),e(O1,LG),e(LG,bko),e(O1,vko),e(_e,Fko),e(_e,V1),e(V1,ume),e(ume,Tko),e(V1,Mko),e(V1,yG),e(yG,Eko),e(V1,Cko),e(_e,wko),e(_e,X1),e(X1,bme),e(bme,Ako),e(X1,Lko),e(X1,xG),e(xG,yko),e(X1,xko),e(_e,$ko),e(_e,z1),e(z1,vme),e(vme,kko),e(z1,Sko),e(z1,$G),e($G,Rko),e(z1,Pko),e(_e,Bko),e(_e,W1),e(W1,Fme),e(Fme,Iko),e(W1,Nko),e(W1,kG),e(kG,qko),e(W1,jko),e(_e,Dko),e(_e,Q1),e(Q1,Tme),e(Tme,Gko),e(Q1,Oko),e(Q1,SG),e(SG,Vko),e(Q1,Xko),e(_e,zko),e(_e,H1),e(H1,Mme),e(Mme,Wko),e(H1,Qko),e(H1,RG),e(RG,Hko),e(H1,Uko),e(_e,Jko),e(_e,U1),e(U1,Eme),e(Eme,Yko),e(U1,Kko),e(U1,PG),e(PG,Zko),e(U1,eSo),e(_e,oSo),e(_e,J1),e(J1,Cme),e(Cme,rSo),e(J1,tSo),e(J1,BG),e(BG,aSo),e(J1,nSo),e(_e,sSo),e(_e,Y1),e(Y1,wme),e(wme,lSo),e(Y1,iSo),e(Y1,IG),e(IG,dSo),e(Y1,cSo),e(eo,fSo),e(eo,K1),e(K1,mSo),e(K1,Ame),e(Ame,gSo),e(K1,hSo),e(K1,Lme),e(Lme,pSo),e(eo,_So),M(Z1,eo,null),b(f,Dje,u),b(f,Gi,u),e(Gi,e7),e(e7,yme),M(OL,yme,null),e(Gi,uSo),e(Gi,xme),e(xme,bSo),b(f,Gje,u),b(f,Ro,u),M(VL,Ro,null),e(Ro,vSo),e(Ro,Oi),e(Oi,FSo),e(Oi,NG),e(NG,TSo),e(Oi,MSo),e(Oi,qG),e(qG,ESo),e(Oi,CSo),e(Ro,wSo),e(Ro,XL),e(XL,ASo),e(XL,$me),e($me,LSo),e(XL,ySo),e(Ro,xSo),e(Ro,it),M(zL,it,null),e(it,$So),e(it,kme),e(kme,kSo),e(it,SSo),e(it,Vi),e(Vi,RSo),e(Vi,Sme),e(Sme,PSo),e(Vi,BSo),e(Vi,jG),e(jG,ISo),e(Vi,NSo),e(it,qSo),M(o7,it,null),e(Ro,jSo),e(Ro,oo),M(WL,oo,null),e(oo,DSo),e(oo,Rme),e(Rme,GSo),e(oo,OSo),e(oo,Ra),e(Ra,VSo),e(Ra,Pme),e(Pme,XSo),e(Ra,zSo),e(Ra,Bme),e(Bme,WSo),e(Ra,QSo),e(Ra,Ime),e(Ime,HSo),e(Ra,USo),e(oo,JSo),e(oo,N),e(N,r7),e(r7,Nme),e(Nme,YSo),e(r7,KSo),e(r7,DG),e(DG,ZSo),e(r7,eRo),e(N,oRo),e(N,t7),e(t7,qme),e(qme,rRo),e(t7,tRo),e(t7,GG),e(GG,aRo),e(t7,nRo),e(N,sRo),e(N,a7),e(a7,jme),e(jme,lRo),e(a7,iRo),e(a7,OG),e(OG,dRo),e(a7,cRo),e(N,fRo),e(N,n7),e(n7,Dme),e(Dme,mRo),e(n7,gRo),e(n7,VG),e(VG,hRo),e(n7,pRo),e(N,_Ro),e(N,s7),e(s7,Gme),e(Gme,uRo),e(s7,bRo),e(s7,XG),e(XG,vRo),e(s7,FRo),e(N,TRo),e(N,l7),e(l7,Ome),e(Ome,MRo),e(l7,ERo),e(l7,zG),e(zG,CRo),e(l7,wRo),e(N,ARo),e(N,i7),e(i7,Vme),e(Vme,LRo),e(i7,yRo),e(i7,WG),e(WG,xRo),e(i7,$Ro),e(N,kRo),e(N,d7),e(d7,Xme),e(Xme,SRo),e(d7,RRo),e(d7,QG),e(QG,PRo),e(d7,BRo),e(N,IRo),e(N,c7),e(c7,zme),e(zme,NRo),e(c7,qRo),e(c7,HG),e(HG,jRo),e(c7,DRo),e(N,GRo),e(N,f7),e(f7,Wme),e(Wme,ORo),e(f7,VRo),e(f7,UG),e(UG,XRo),e(f7,zRo),e(N,WRo),e(N,m7),e(m7,Qme),e(Qme,QRo),e(m7,HRo),e(m7,JG),e(JG,URo),e(m7,JRo),e(N,YRo),e(N,g7),e(g7,Hme),e(Hme,KRo),e(g7,ZRo),e(g7,YG),e(YG,ePo),e(g7,oPo),e(N,rPo),e(N,h7),e(h7,Ume),e(Ume,tPo),e(h7,aPo),e(h7,KG),e(KG,nPo),e(h7,sPo),e(N,lPo),e(N,p7),e(p7,Jme),e(Jme,iPo),e(p7,dPo),e(p7,ZG),e(ZG,cPo),e(p7,fPo),e(N,mPo),e(N,_7),e(_7,Yme),e(Yme,gPo),e(_7,hPo),e(_7,eO),e(eO,pPo),e(_7,_Po),e(N,uPo),e(N,u7),e(u7,Kme),e(Kme,bPo),e(u7,vPo),e(u7,oO),e(oO,FPo),e(u7,TPo),e(N,MPo),e(N,b7),e(b7,Zme),e(Zme,EPo),e(b7,CPo),e(b7,rO),e(rO,wPo),e(b7,APo),e(N,LPo),e(N,v7),e(v7,ege),e(ege,yPo),e(v7,xPo),e(v7,tO),e(tO,$Po),e(v7,kPo),e(N,SPo),e(N,F7),e(F7,oge),e(oge,RPo),e(F7,PPo),e(F7,aO),e(aO,BPo),e(F7,IPo),e(N,NPo),e(N,T7),e(T7,rge),e(rge,qPo),e(T7,jPo),e(T7,nO),e(nO,DPo),e(T7,GPo),e(N,OPo),e(N,M7),e(M7,tge),e(tge,VPo),e(M7,XPo),e(M7,sO),e(sO,zPo),e(M7,WPo),e(N,QPo),e(N,E7),e(E7,age),e(age,HPo),e(E7,UPo),e(E7,lO),e(lO,JPo),e(E7,YPo),e(N,KPo),e(N,C7),e(C7,nge),e(nge,ZPo),e(C7,eBo),e(C7,iO),e(iO,oBo),e(C7,rBo),e(N,tBo),e(N,w7),e(w7,sge),e(sge,aBo),e(w7,nBo),e(w7,dO),e(dO,sBo),e(w7,lBo),e(N,iBo),e(N,A7),e(A7,lge),e(lge,dBo),e(A7,cBo),e(A7,cO),e(cO,fBo),e(A7,mBo),e(N,gBo),e(N,L7),e(L7,ige),e(ige,hBo),e(L7,pBo),e(L7,fO),e(fO,_Bo),e(L7,uBo),e(N,bBo),e(N,y7),e(y7,dge),e(dge,vBo),e(y7,FBo),e(y7,mO),e(mO,TBo),e(y7,MBo),e(N,EBo),e(N,x7),e(x7,cge),e(cge,CBo),e(x7,wBo),e(x7,gO),e(gO,ABo),e(x7,LBo),e(N,yBo),e(N,$7),e($7,fge),e(fge,xBo),e($7,$Bo),e($7,hO),e(hO,kBo),e($7,SBo),e(N,RBo),e(N,k7),e(k7,mge),e(mge,PBo),e(k7,BBo),e(k7,pO),e(pO,IBo),e(k7,NBo),e(N,qBo),e(N,S7),e(S7,gge),e(gge,jBo),e(S7,DBo),e(S7,_O),e(_O,GBo),e(S7,OBo),e(N,VBo),e(N,R7),e(R7,hge),e(hge,XBo),e(R7,zBo),e(R7,uO),e(uO,WBo),e(R7,QBo),e(N,HBo),e(N,P7),e(P7,pge),e(pge,UBo),e(P7,JBo),e(P7,bO),e(bO,YBo),e(P7,KBo),e(N,ZBo),e(N,B7),e(B7,_ge),e(_ge,eIo),e(B7,oIo),e(B7,vO),e(vO,rIo),e(B7,tIo),e(N,aIo),e(N,I7),e(I7,uge),e(uge,nIo),e(I7,sIo),e(I7,FO),e(FO,lIo),e(I7,iIo),e(N,dIo),e(N,N7),e(N7,bge),e(bge,cIo),e(N7,fIo),e(N7,TO),e(TO,mIo),e(N7,gIo),e(N,hIo),e(N,q7),e(q7,vge),e(vge,pIo),e(q7,_Io),e(q7,MO),e(MO,uIo),e(q7,bIo),e(N,vIo),e(N,j7),e(j7,Fge),e(Fge,FIo),e(j7,TIo),e(j7,EO),e(EO,MIo),e(j7,EIo),e(N,CIo),e(N,D7),e(D7,Tge),e(Tge,wIo),e(D7,AIo),e(D7,CO),e(CO,LIo),e(D7,yIo),e(N,xIo),e(N,G7),e(G7,Mge),e(Mge,$Io),e(G7,kIo),e(G7,wO),e(wO,SIo),e(G7,RIo),e(N,PIo),e(N,O7),e(O7,Ege),e(Ege,BIo),e(O7,IIo),e(O7,AO),e(AO,NIo),e(O7,qIo),e(N,jIo),e(N,V7),e(V7,Cge),e(Cge,DIo),e(V7,GIo),e(V7,LO),e(LO,OIo),e(V7,VIo),e(N,XIo),e(N,X7),e(X7,wge),e(wge,zIo),e(X7,WIo),e(X7,yO),e(yO,QIo),e(X7,HIo),e(N,UIo),e(N,z7),e(z7,Age),e(Age,JIo),e(z7,YIo),e(z7,xO),e(xO,KIo),e(z7,ZIo),e(N,eNo),e(N,W7),e(W7,Lge),e(Lge,oNo),e(W7,rNo),e(W7,$O),e($O,tNo),e(W7,aNo),e(N,nNo),e(N,Q7),e(Q7,yge),e(yge,sNo),e(Q7,lNo),e(Q7,kO),e(kO,iNo),e(Q7,dNo),e(N,cNo),e(N,H7),e(H7,xge),e(xge,fNo),e(H7,mNo),e(H7,SO),e(SO,gNo),e(H7,hNo),e(oo,pNo),e(oo,U7),e(U7,_No),e(U7,$ge),e($ge,uNo),e(U7,bNo),e(U7,kge),e(kge,vNo),e(oo,FNo),M(J7,oo,null),b(f,Oje,u),b(f,Xi,u),e(Xi,Y7),e(Y7,Sge),M(QL,Sge,null),e(Xi,TNo),e(Xi,Rge),e(Rge,MNo),b(f,Vje,u),b(f,Po,u),M(HL,Po,null),e(Po,ENo),e(Po,zi),e(zi,CNo),e(zi,RO),e(RO,wNo),e(zi,ANo),e(zi,PO),e(PO,LNo),e(zi,yNo),e(Po,xNo),e(Po,UL),e(UL,$No),e(UL,Pge),e(Pge,kNo),e(UL,SNo),e(Po,RNo),e(Po,dt),M(JL,dt,null),e(dt,PNo),e(dt,Bge),e(Bge,BNo),e(dt,INo),e(dt,Wi),e(Wi,NNo),e(Wi,Ige),e(Ige,qNo),e(Wi,jNo),e(Wi,BO),e(BO,DNo),e(Wi,GNo),e(dt,ONo),M(K7,dt,null),e(Po,VNo),e(Po,ro),M(YL,ro,null),e(ro,XNo),e(ro,Nge),e(Nge,zNo),e(ro,WNo),e(ro,Pa),e(Pa,QNo),e(Pa,qge),e(qge,HNo),e(Pa,UNo),e(Pa,jge),e(jge,JNo),e(Pa,YNo),e(Pa,Dge),e(Dge,KNo),e(Pa,ZNo),e(ro,eqo),e(ro,Z),e(Z,Z7),e(Z7,Gge),e(Gge,oqo),e(Z7,rqo),e(Z7,IO),e(IO,tqo),e(Z7,aqo),e(Z,nqo),e(Z,eb),e(eb,Oge),e(Oge,sqo),e(eb,lqo),e(eb,NO),e(NO,iqo),e(eb,dqo),e(Z,cqo),e(Z,ob),e(ob,Vge),e(Vge,fqo),e(ob,mqo),e(ob,qO),e(qO,gqo),e(ob,hqo),e(Z,pqo),e(Z,rb),e(rb,Xge),e(Xge,_qo),e(rb,uqo),e(rb,jO),e(jO,bqo),e(rb,vqo),e(Z,Fqo),e(Z,tb),e(tb,zge),e(zge,Tqo),e(tb,Mqo),e(tb,DO),e(DO,Eqo),e(tb,Cqo),e(Z,wqo),e(Z,ab),e(ab,Wge),e(Wge,Aqo),e(ab,Lqo),e(ab,GO),e(GO,yqo),e(ab,xqo),e(Z,$qo),e(Z,nb),e(nb,Qge),e(Qge,kqo),e(nb,Sqo),e(nb,OO),e(OO,Rqo),e(nb,Pqo),e(Z,Bqo),e(Z,sb),e(sb,Hge),e(Hge,Iqo),e(sb,Nqo),e(sb,VO),e(VO,qqo),e(sb,jqo),e(Z,Dqo),e(Z,lb),e(lb,Uge),e(Uge,Gqo),e(lb,Oqo),e(lb,XO),e(XO,Vqo),e(lb,Xqo),e(Z,zqo),e(Z,ib),e(ib,Jge),e(Jge,Wqo),e(ib,Qqo),e(ib,zO),e(zO,Hqo),e(ib,Uqo),e(Z,Jqo),e(Z,db),e(db,Yge),e(Yge,Yqo),e(db,Kqo),e(db,WO),e(WO,Zqo),e(db,ejo),e(Z,ojo),e(Z,cb),e(cb,Kge),e(Kge,rjo),e(cb,tjo),e(cb,QO),e(QO,ajo),e(cb,njo),e(Z,sjo),e(Z,fb),e(fb,Zge),e(Zge,ljo),e(fb,ijo),e(fb,HO),e(HO,djo),e(fb,cjo),e(Z,fjo),e(Z,mb),e(mb,ehe),e(ehe,mjo),e(mb,gjo),e(mb,UO),e(UO,hjo),e(mb,pjo),e(Z,_jo),e(Z,gb),e(gb,ohe),e(ohe,ujo),e(gb,bjo),e(gb,JO),e(JO,vjo),e(gb,Fjo),e(Z,Tjo),e(Z,hb),e(hb,rhe),e(rhe,Mjo),e(hb,Ejo),e(hb,YO),e(YO,Cjo),e(hb,wjo),e(Z,Ajo),e(Z,pb),e(pb,the),e(the,Ljo),e(pb,yjo),e(pb,KO),e(KO,xjo),e(pb,$jo),e(Z,kjo),e(Z,_b),e(_b,ahe),e(ahe,Sjo),e(_b,Rjo),e(_b,ZO),e(ZO,Pjo),e(_b,Bjo),e(Z,Ijo),e(Z,ub),e(ub,nhe),e(nhe,Njo),e(ub,qjo),e(ub,eV),e(eV,jjo),e(ub,Djo),e(Z,Gjo),e(Z,bb),e(bb,she),e(she,Ojo),e(bb,Vjo),e(bb,oV),e(oV,Xjo),e(bb,zjo),e(Z,Wjo),e(Z,vb),e(vb,lhe),e(lhe,Qjo),e(vb,Hjo),e(vb,rV),e(rV,Ujo),e(vb,Jjo),e(Z,Yjo),e(Z,Fb),e(Fb,ihe),e(ihe,Kjo),e(Fb,Zjo),e(Fb,tV),e(tV,eDo),e(Fb,oDo),e(Z,rDo),e(Z,Tb),e(Tb,dhe),e(dhe,tDo),e(Tb,aDo),e(Tb,aV),e(aV,nDo),e(Tb,sDo),e(Z,lDo),e(Z,Mb),e(Mb,che),e(che,iDo),e(Mb,dDo),e(Mb,nV),e(nV,cDo),e(Mb,fDo),e(Z,mDo),e(Z,Eb),e(Eb,fhe),e(fhe,gDo),e(Eb,hDo),e(Eb,sV),e(sV,pDo),e(Eb,_Do),e(Z,uDo),e(Z,Cb),e(Cb,mhe),e(mhe,bDo),e(Cb,vDo),e(Cb,lV),e(lV,FDo),e(Cb,TDo),e(Z,MDo),e(Z,wb),e(wb,ghe),e(ghe,EDo),e(wb,CDo),e(wb,iV),e(iV,wDo),e(wb,ADo),e(Z,LDo),e(Z,Ab),e(Ab,hhe),e(hhe,yDo),e(Ab,xDo),e(Ab,dV),e(dV,$Do),e(Ab,kDo),e(Z,SDo),e(Z,Lb),e(Lb,phe),e(phe,RDo),e(Lb,PDo),e(Lb,cV),e(cV,BDo),e(Lb,IDo),e(ro,NDo),e(ro,yb),e(yb,qDo),e(yb,_he),e(_he,jDo),e(yb,DDo),e(yb,uhe),e(uhe,GDo),e(ro,ODo),M(xb,ro,null),b(f,Xje,u),b(f,Qi,u),e(Qi,$b),e($b,bhe),M(KL,bhe,null),e(Qi,VDo),e(Qi,vhe),e(vhe,XDo),b(f,zje,u),b(f,Bo,u),M(ZL,Bo,null),e(Bo,zDo),e(Bo,Hi),e(Hi,WDo),e(Hi,fV),e(fV,QDo),e(Hi,HDo),e(Hi,mV),e(mV,UDo),e(Hi,JDo),e(Bo,YDo),e(Bo,ey),e(ey,KDo),e(ey,Fhe),e(Fhe,ZDo),e(ey,eGo),e(Bo,oGo),e(Bo,ct),M(oy,ct,null),e(ct,rGo),e(ct,The),e(The,tGo),e(ct,aGo),e(ct,Ui),e(Ui,nGo),e(Ui,Mhe),e(Mhe,sGo),e(Ui,lGo),e(Ui,gV),e(gV,iGo),e(Ui,dGo),e(ct,cGo),M(kb,ct,null),e(Bo,fGo),e(Bo,to),M(ry,to,null),e(to,mGo),e(to,Ehe),e(Ehe,gGo),e(to,hGo),e(to,Ba),e(Ba,pGo),e(Ba,Che),e(Che,_Go),e(Ba,uGo),e(Ba,whe),e(whe,bGo),e(Ba,vGo),e(Ba,Ahe),e(Ahe,FGo),e(Ba,TGo),e(to,MGo),e(to,Yr),e(Yr,Sb),e(Sb,Lhe),e(Lhe,EGo),e(Sb,CGo),e(Sb,hV),e(hV,wGo),e(Sb,AGo),e(Yr,LGo),e(Yr,Rb),e(Rb,yhe),e(yhe,yGo),e(Rb,xGo),e(Rb,pV),e(pV,$Go),e(Rb,kGo),e(Yr,SGo),e(Yr,Pb),e(Pb,xhe),e(xhe,RGo),e(Pb,PGo),e(Pb,_V),e(_V,BGo),e(Pb,IGo),e(Yr,NGo),e(Yr,Bb),e(Bb,$he),e($he,qGo),e(Bb,jGo),e(Bb,uV),e(uV,DGo),e(Bb,GGo),e(Yr,OGo),e(Yr,Ib),e(Ib,khe),e(khe,VGo),e(Ib,XGo),e(Ib,bV),e(bV,zGo),e(Ib,WGo),e(to,QGo),e(to,Nb),e(Nb,HGo),e(Nb,She),e(She,UGo),e(Nb,JGo),e(Nb,Rhe),e(Rhe,YGo),e(to,KGo),M(qb,to,null),b(f,Wje,u),b(f,Ji,u),e(Ji,jb),e(jb,Phe),M(ty,Phe,null),e(Ji,ZGo),e(Ji,Bhe),e(Bhe,eOo),b(f,Qje,u),b(f,Io,u),M(ay,Io,null),e(Io,oOo),e(Io,Yi),e(Yi,rOo),e(Yi,vV),e(vV,tOo),e(Yi,aOo),e(Yi,FV),e(FV,nOo),e(Yi,sOo),e(Io,lOo),e(Io,ny),e(ny,iOo),e(ny,Ihe),e(Ihe,dOo),e(ny,cOo),e(Io,fOo),e(Io,ft),M(sy,ft,null),e(ft,mOo),e(ft,Nhe),e(Nhe,gOo),e(ft,hOo),e(ft,Ki),e(Ki,pOo),e(Ki,qhe),e(qhe,_Oo),e(Ki,uOo),e(Ki,TV),e(TV,bOo),e(Ki,vOo),e(ft,FOo),M(Db,ft,null),e(Io,TOo),e(Io,ao),M(ly,ao,null),e(ao,MOo),e(ao,jhe),e(jhe,EOo),e(ao,COo),e(ao,Ia),e(Ia,wOo),e(Ia,Dhe),e(Dhe,AOo),e(Ia,LOo),e(Ia,Ghe),e(Ghe,yOo),e(Ia,xOo),e(Ia,Ohe),e(Ohe,$Oo),e(Ia,kOo),e(ao,SOo),e(ao,U),e(U,Gb),e(Gb,Vhe),e(Vhe,ROo),e(Gb,POo),e(Gb,MV),e(MV,BOo),e(Gb,IOo),e(U,NOo),e(U,Ob),e(Ob,Xhe),e(Xhe,qOo),e(Ob,jOo),e(Ob,EV),e(EV,DOo),e(Ob,GOo),e(U,OOo),e(U,Vb),e(Vb,zhe),e(zhe,VOo),e(Vb,XOo),e(Vb,CV),e(CV,zOo),e(Vb,WOo),e(U,QOo),e(U,Xb),e(Xb,Whe),e(Whe,HOo),e(Xb,UOo),e(Xb,wV),e(wV,JOo),e(Xb,YOo),e(U,KOo),e(U,zb),e(zb,Qhe),e(Qhe,ZOo),e(zb,eVo),e(zb,AV),e(AV,oVo),e(zb,rVo),e(U,tVo),e(U,Wb),e(Wb,Hhe),e(Hhe,aVo),e(Wb,nVo),e(Wb,LV),e(LV,sVo),e(Wb,lVo),e(U,iVo),e(U,Qb),e(Qb,Uhe),e(Uhe,dVo),e(Qb,cVo),e(Qb,yV),e(yV,fVo),e(Qb,mVo),e(U,gVo),e(U,Hb),e(Hb,Jhe),e(Jhe,hVo),e(Hb,pVo),e(Hb,xV),e(xV,_Vo),e(Hb,uVo),e(U,bVo),e(U,Ub),e(Ub,Yhe),e(Yhe,vVo),e(Ub,FVo),e(Ub,$V),e($V,TVo),e(Ub,MVo),e(U,EVo),e(U,Jb),e(Jb,Khe),e(Khe,CVo),e(Jb,wVo),e(Jb,kV),e(kV,AVo),e(Jb,LVo),e(U,yVo),e(U,Yb),e(Yb,Zhe),e(Zhe,xVo),e(Yb,$Vo),e(Yb,SV),e(SV,kVo),e(Yb,SVo),e(U,RVo),e(U,Kb),e(Kb,epe),e(epe,PVo),e(Kb,BVo),e(Kb,RV),e(RV,IVo),e(Kb,NVo),e(U,qVo),e(U,Zb),e(Zb,ope),e(ope,jVo),e(Zb,DVo),e(Zb,PV),e(PV,GVo),e(Zb,OVo),e(U,VVo),e(U,e2),e(e2,rpe),e(rpe,XVo),e(e2,zVo),e(e2,BV),e(BV,WVo),e(e2,QVo),e(U,HVo),e(U,o2),e(o2,tpe),e(tpe,UVo),e(o2,JVo),e(o2,IV),e(IV,YVo),e(o2,KVo),e(U,ZVo),e(U,r2),e(r2,ape),e(ape,eXo),e(r2,oXo),e(r2,NV),e(NV,rXo),e(r2,tXo),e(U,aXo),e(U,t2),e(t2,npe),e(npe,nXo),e(t2,sXo),e(t2,qV),e(qV,lXo),e(t2,iXo),e(U,dXo),e(U,a2),e(a2,spe),e(spe,cXo),e(a2,fXo),e(a2,jV),e(jV,mXo),e(a2,gXo),e(U,hXo),e(U,n2),e(n2,lpe),e(lpe,pXo),e(n2,_Xo),e(n2,DV),e(DV,uXo),e(n2,bXo),e(U,vXo),e(U,s2),e(s2,ipe),e(ipe,FXo),e(s2,TXo),e(s2,GV),e(GV,MXo),e(s2,EXo),e(U,CXo),e(U,l2),e(l2,dpe),e(dpe,wXo),e(l2,AXo),e(l2,OV),e(OV,LXo),e(l2,yXo),e(U,xXo),e(U,i2),e(i2,cpe),e(cpe,$Xo),e(i2,kXo),e(i2,VV),e(VV,SXo),e(i2,RXo),e(U,PXo),e(U,d2),e(d2,fpe),e(fpe,BXo),e(d2,IXo),e(d2,XV),e(XV,NXo),e(d2,qXo),e(U,jXo),e(U,c2),e(c2,mpe),e(mpe,DXo),e(c2,GXo),e(c2,zV),e(zV,OXo),e(c2,VXo),e(U,XXo),e(U,f2),e(f2,gpe),e(gpe,zXo),e(f2,WXo),e(f2,WV),e(WV,QXo),e(f2,HXo),e(U,UXo),e(U,m2),e(m2,hpe),e(hpe,JXo),e(m2,YXo),e(m2,QV),e(QV,KXo),e(m2,ZXo),e(U,ezo),e(U,g2),e(g2,ppe),e(ppe,ozo),e(g2,rzo),e(g2,HV),e(HV,tzo),e(g2,azo),e(U,nzo),e(U,h2),e(h2,_pe),e(_pe,szo),e(h2,lzo),e(h2,UV),e(UV,izo),e(h2,dzo),e(U,czo),e(U,p2),e(p2,upe),e(upe,fzo),e(p2,mzo),e(p2,JV),e(JV,gzo),e(p2,hzo),e(U,pzo),e(U,_2),e(_2,bpe),e(bpe,_zo),e(_2,uzo),e(_2,YV),e(YV,bzo),e(_2,vzo),e(U,Fzo),e(U,u2),e(u2,vpe),e(vpe,Tzo),e(u2,Mzo),e(u2,KV),e(KV,Ezo),e(u2,Czo),e(U,wzo),e(U,b2),e(b2,Fpe),e(Fpe,Azo),e(b2,Lzo),e(b2,ZV),e(ZV,yzo),e(b2,xzo),e(U,$zo),e(U,v2),e(v2,Tpe),e(Tpe,kzo),e(v2,Szo),e(v2,eX),e(eX,Rzo),e(v2,Pzo),e(U,Bzo),e(U,F2),e(F2,Mpe),e(Mpe,Izo),e(F2,Nzo),e(F2,oX),e(oX,qzo),e(F2,jzo),e(ao,Dzo),e(ao,T2),e(T2,Gzo),e(T2,Epe),e(Epe,Ozo),e(T2,Vzo),e(T2,Cpe),e(Cpe,Xzo),e(ao,zzo),M(M2,ao,null),b(f,Hje,u),b(f,Zi,u),e(Zi,E2),e(E2,wpe),M(iy,wpe,null),e(Zi,Wzo),e(Zi,Ape),e(Ape,Qzo),b(f,Uje,u),b(f,No,u),M(dy,No,null),e(No,Hzo),e(No,ed),e(ed,Uzo),e(ed,rX),e(rX,Jzo),e(ed,Yzo),e(ed,tX),e(tX,Kzo),e(ed,Zzo),e(No,eWo),e(No,cy),e(cy,oWo),e(cy,Lpe),e(Lpe,rWo),e(cy,tWo),e(No,aWo),e(No,mt),M(fy,mt,null),e(mt,nWo),e(mt,ype),e(ype,sWo),e(mt,lWo),e(mt,od),e(od,iWo),e(od,xpe),e(xpe,dWo),e(od,cWo),e(od,aX),e(aX,fWo),e(od,mWo),e(mt,gWo),M(C2,mt,null),e(No,hWo),e(No,no),M(my,no,null),e(no,pWo),e(no,$pe),e($pe,_Wo),e(no,uWo),e(no,Na),e(Na,bWo),e(Na,kpe),e(kpe,vWo),e(Na,FWo),e(Na,Spe),e(Spe,TWo),e(Na,MWo),e(Na,Rpe),e(Rpe,EWo),e(Na,CWo),e(no,wWo),e(no,V),e(V,w2),e(w2,Ppe),e(Ppe,AWo),e(w2,LWo),e(w2,nX),e(nX,yWo),e(w2,xWo),e(V,$Wo),e(V,A2),e(A2,Bpe),e(Bpe,kWo),e(A2,SWo),e(A2,sX),e(sX,RWo),e(A2,PWo),e(V,BWo),e(V,L2),e(L2,Ipe),e(Ipe,IWo),e(L2,NWo),e(L2,lX),e(lX,qWo),e(L2,jWo),e(V,DWo),e(V,y2),e(y2,Npe),e(Npe,GWo),e(y2,OWo),e(y2,iX),e(iX,VWo),e(y2,XWo),e(V,zWo),e(V,x2),e(x2,qpe),e(qpe,WWo),e(x2,QWo),e(x2,dX),e(dX,HWo),e(x2,UWo),e(V,JWo),e(V,$2),e($2,jpe),e(jpe,YWo),e($2,KWo),e($2,cX),e(cX,ZWo),e($2,eQo),e(V,oQo),e(V,k2),e(k2,Dpe),e(Dpe,rQo),e(k2,tQo),e(k2,fX),e(fX,aQo),e(k2,nQo),e(V,sQo),e(V,S2),e(S2,Gpe),e(Gpe,lQo),e(S2,iQo),e(S2,mX),e(mX,dQo),e(S2,cQo),e(V,fQo),e(V,R2),e(R2,Ope),e(Ope,mQo),e(R2,gQo),e(R2,gX),e(gX,hQo),e(R2,pQo),e(V,_Qo),e(V,P2),e(P2,Vpe),e(Vpe,uQo),e(P2,bQo),e(P2,hX),e(hX,vQo),e(P2,FQo),e(V,TQo),e(V,B2),e(B2,Xpe),e(Xpe,MQo),e(B2,EQo),e(B2,pX),e(pX,CQo),e(B2,wQo),e(V,AQo),e(V,I2),e(I2,zpe),e(zpe,LQo),e(I2,yQo),e(I2,_X),e(_X,xQo),e(I2,$Qo),e(V,kQo),e(V,N2),e(N2,Wpe),e(Wpe,SQo),e(N2,RQo),e(N2,uX),e(uX,PQo),e(N2,BQo),e(V,IQo),e(V,q2),e(q2,Qpe),e(Qpe,NQo),e(q2,qQo),e(q2,bX),e(bX,jQo),e(q2,DQo),e(V,GQo),e(V,j2),e(j2,Hpe),e(Hpe,OQo),e(j2,VQo),e(j2,vX),e(vX,XQo),e(j2,zQo),e(V,WQo),e(V,D2),e(D2,Upe),e(Upe,QQo),e(D2,HQo),e(D2,FX),e(FX,UQo),e(D2,JQo),e(V,YQo),e(V,G2),e(G2,Jpe),e(Jpe,KQo),e(G2,ZQo),e(G2,TX),e(TX,eHo),e(G2,oHo),e(V,rHo),e(V,O2),e(O2,Ype),e(Ype,tHo),e(O2,aHo),e(O2,MX),e(MX,nHo),e(O2,sHo),e(V,lHo),e(V,V2),e(V2,Kpe),e(Kpe,iHo),e(V2,dHo),e(V2,EX),e(EX,cHo),e(V2,fHo),e(V,mHo),e(V,X2),e(X2,Zpe),e(Zpe,gHo),e(X2,hHo),e(X2,CX),e(CX,pHo),e(X2,_Ho),e(V,uHo),e(V,z2),e(z2,e_e),e(e_e,bHo),e(z2,vHo),e(z2,wX),e(wX,FHo),e(z2,THo),e(V,MHo),e(V,W2),e(W2,o_e),e(o_e,EHo),e(W2,CHo),e(W2,AX),e(AX,wHo),e(W2,AHo),e(V,LHo),e(V,Q2),e(Q2,r_e),e(r_e,yHo),e(Q2,xHo),e(Q2,LX),e(LX,$Ho),e(Q2,kHo),e(V,SHo),e(V,H2),e(H2,t_e),e(t_e,RHo),e(H2,PHo),e(H2,yX),e(yX,BHo),e(H2,IHo),e(V,NHo),e(V,U2),e(U2,a_e),e(a_e,qHo),e(U2,jHo),e(U2,xX),e(xX,DHo),e(U2,GHo),e(V,OHo),e(V,J2),e(J2,n_e),e(n_e,VHo),e(J2,XHo),e(J2,$X),e($X,zHo),e(J2,WHo),e(V,QHo),e(V,Y2),e(Y2,s_e),e(s_e,HHo),e(Y2,UHo),e(Y2,kX),e(kX,JHo),e(Y2,YHo),e(V,KHo),e(V,K2),e(K2,l_e),e(l_e,ZHo),e(K2,eUo),e(K2,SX),e(SX,oUo),e(K2,rUo),e(V,tUo),e(V,Z2),e(Z2,i_e),e(i_e,aUo),e(Z2,nUo),e(Z2,RX),e(RX,sUo),e(Z2,lUo),e(V,iUo),e(V,ev),e(ev,d_e),e(d_e,dUo),e(ev,cUo),e(ev,PX),e(PX,fUo),e(ev,mUo),e(V,gUo),e(V,ov),e(ov,c_e),e(c_e,hUo),e(ov,pUo),e(ov,BX),e(BX,_Uo),e(ov,uUo),e(V,bUo),e(V,rv),e(rv,f_e),e(f_e,vUo),e(rv,FUo),e(rv,IX),e(IX,TUo),e(rv,MUo),e(V,EUo),e(V,tv),e(tv,m_e),e(m_e,CUo),e(tv,wUo),e(tv,NX),e(NX,AUo),e(tv,LUo),e(V,yUo),e(V,av),e(av,g_e),e(g_e,xUo),e(av,$Uo),e(av,qX),e(qX,kUo),e(av,SUo),e(V,RUo),e(V,nv),e(nv,h_e),e(h_e,PUo),e(nv,BUo),e(nv,jX),e(jX,IUo),e(nv,NUo),e(V,qUo),e(V,sv),e(sv,p_e),e(p_e,jUo),e(sv,DUo),e(sv,DX),e(DX,GUo),e(sv,OUo),e(V,VUo),e(V,lv),e(lv,__e),e(__e,XUo),e(lv,zUo),e(lv,GX),e(GX,WUo),e(lv,QUo),e(V,HUo),e(V,iv),e(iv,u_e),e(u_e,UUo),e(iv,JUo),e(iv,OX),e(OX,YUo),e(iv,KUo),e(V,ZUo),e(V,dv),e(dv,b_e),e(b_e,eJo),e(dv,oJo),e(dv,VX),e(VX,rJo),e(dv,tJo),e(V,aJo),e(V,cv),e(cv,v_e),e(v_e,nJo),e(cv,sJo),e(cv,XX),e(XX,lJo),e(cv,iJo),e(no,dJo),e(no,fv),e(fv,cJo),e(fv,F_e),e(F_e,fJo),e(fv,mJo),e(fv,T_e),e(T_e,gJo),e(no,hJo),M(mv,no,null),b(f,Jje,u),b(f,rd,u),e(rd,gv),e(gv,M_e),M(gy,M_e,null),e(rd,pJo),e(rd,E_e),e(E_e,_Jo),b(f,Yje,u),b(f,qo,u),M(hy,qo,null),e(qo,uJo),e(qo,td),e(td,bJo),e(td,zX),e(zX,vJo),e(td,FJo),e(td,WX),e(WX,TJo),e(td,MJo),e(qo,EJo),e(qo,py),e(py,CJo),e(py,C_e),e(C_e,wJo),e(py,AJo),e(qo,LJo),e(qo,gt),M(_y,gt,null),e(gt,yJo),e(gt,w_e),e(w_e,xJo),e(gt,$Jo),e(gt,ad),e(ad,kJo),e(ad,A_e),e(A_e,SJo),e(ad,RJo),e(ad,QX),e(QX,PJo),e(ad,BJo),e(gt,IJo),M(hv,gt,null),e(qo,NJo),e(qo,so),M(uy,so,null),e(so,qJo),e(so,L_e),e(L_e,jJo),e(so,DJo),e(so,qa),e(qa,GJo),e(qa,y_e),e(y_e,OJo),e(qa,VJo),e(qa,x_e),e(x_e,XJo),e(qa,zJo),e(qa,$_e),e($_e,WJo),e(qa,QJo),e(so,HJo),e(so,k_e),e(k_e,pv),e(pv,S_e),e(S_e,UJo),e(pv,JJo),e(pv,HX),e(HX,YJo),e(pv,KJo),e(so,ZJo),e(so,_v),e(_v,eYo),e(_v,R_e),e(R_e,oYo),e(_v,rYo),e(_v,P_e),e(P_e,tYo),e(so,aYo),M(uv,so,null),b(f,Kje,u),b(f,nd,u),e(nd,bv),e(bv,B_e),M(by,B_e,null),e(nd,nYo),e(nd,I_e),e(I_e,sYo),b(f,Zje,u),b(f,jo,u),M(vy,jo,null),e(jo,lYo),e(jo,sd),e(sd,iYo),e(sd,UX),e(UX,dYo),e(sd,cYo),e(sd,JX),e(JX,fYo),e(sd,mYo),e(jo,gYo),e(jo,Fy),e(Fy,hYo),e(Fy,N_e),e(N_e,pYo),e(Fy,_Yo),e(jo,uYo),e(jo,ht),M(Ty,ht,null),e(ht,bYo),e(ht,q_e),e(q_e,vYo),e(ht,FYo),e(ht,ld),e(ld,TYo),e(ld,j_e),e(j_e,MYo),e(ld,EYo),e(ld,YX),e(YX,CYo),e(ld,wYo),e(ht,AYo),M(vv,ht,null),e(jo,LYo),e(jo,lo),M(My,lo,null),e(lo,yYo),e(lo,D_e),e(D_e,xYo),e(lo,$Yo),e(lo,ja),e(ja,kYo),e(ja,G_e),e(G_e,SYo),e(ja,RYo),e(ja,O_e),e(O_e,PYo),e(ja,BYo),e(ja,V_e),e(V_e,IYo),e(ja,NYo),e(lo,qYo),e(lo,ve),e(ve,Fv),e(Fv,X_e),e(X_e,jYo),e(Fv,DYo),e(Fv,KX),e(KX,GYo),e(Fv,OYo),e(ve,VYo),e(ve,Tv),e(Tv,z_e),e(z_e,XYo),e(Tv,zYo),e(Tv,ZX),e(ZX,WYo),e(Tv,QYo),e(ve,HYo),e(ve,Mv),e(Mv,W_e),e(W_e,UYo),e(Mv,JYo),e(Mv,ez),e(ez,YYo),e(Mv,KYo),e(ve,ZYo),e(ve,Ev),e(Ev,Q_e),e(Q_e,eKo),e(Ev,oKo),e(Ev,oz),e(oz,rKo),e(Ev,tKo),e(ve,aKo),e(ve,Bs),e(Bs,H_e),e(H_e,nKo),e(Bs,sKo),e(Bs,rz),e(rz,lKo),e(Bs,iKo),e(Bs,tz),e(tz,dKo),e(Bs,cKo),e(ve,fKo),e(ve,Cv),e(Cv,U_e),e(U_e,mKo),e(Cv,gKo),e(Cv,az),e(az,hKo),e(Cv,pKo),e(ve,_Ko),e(ve,Is),e(Is,J_e),e(J_e,uKo),e(Is,bKo),e(Is,nz),e(nz,vKo),e(Is,FKo),e(Is,sz),e(sz,TKo),e(Is,MKo),e(ve,EKo),e(ve,pt),e(pt,Y_e),e(Y_e,CKo),e(pt,wKo),e(pt,lz),e(lz,AKo),e(pt,LKo),e(pt,iz),e(iz,yKo),e(pt,xKo),e(pt,dz),e(dz,$Ko),e(pt,kKo),e(ve,SKo),e(ve,wv),e(wv,K_e),e(K_e,RKo),e(wv,PKo),e(wv,cz),e(cz,BKo),e(wv,IKo),e(ve,NKo),e(ve,Av),e(Av,Z_e),e(Z_e,qKo),e(Av,jKo),e(Av,fz),e(fz,DKo),e(Av,GKo),e(ve,OKo),e(ve,Lv),e(Lv,eue),e(eue,VKo),e(Lv,XKo),e(Lv,mz),e(mz,zKo),e(Lv,WKo),e(ve,QKo),e(ve,yv),e(yv,oue),e(oue,HKo),e(yv,UKo),e(yv,gz),e(gz,JKo),e(yv,YKo),e(ve,KKo),e(ve,xv),e(xv,rue),e(rue,ZKo),e(xv,eZo),e(xv,hz),e(hz,oZo),e(xv,rZo),e(ve,tZo),e(ve,$v),e($v,tue),e(tue,aZo),e($v,nZo),e($v,pz),e(pz,sZo),e($v,lZo),e(ve,iZo),e(ve,kv),e(kv,aue),e(aue,dZo),e(kv,cZo),e(kv,_z),e(_z,fZo),e(kv,mZo),e(lo,gZo),e(lo,Sv),e(Sv,hZo),e(Sv,nue),e(nue,pZo),e(Sv,_Zo),e(Sv,sue),e(sue,uZo),e(lo,bZo),M(Rv,lo,null),b(f,eDe,u),b(f,id,u),e(id,Pv),e(Pv,lue),M(Ey,lue,null),e(id,vZo),e(id,iue),e(iue,FZo),b(f,oDe,u),b(f,Do,u),M(Cy,Do,null),e(Do,TZo),e(Do,dd),e(dd,MZo),e(dd,uz),e(uz,EZo),e(dd,CZo),e(dd,bz),e(bz,wZo),e(dd,AZo),e(Do,LZo),e(Do,wy),e(wy,yZo),e(wy,due),e(due,xZo),e(wy,$Zo),e(Do,kZo),e(Do,_t),M(Ay,_t,null),e(_t,SZo),e(_t,cue),e(cue,RZo),e(_t,PZo),e(_t,cd),e(cd,BZo),e(cd,fue),e(fue,IZo),e(cd,NZo),e(cd,vz),e(vz,qZo),e(cd,jZo),e(_t,DZo),M(Bv,_t,null),e(Do,GZo),e(Do,io),M(Ly,io,null),e(io,OZo),e(io,mue),e(mue,VZo),e(io,XZo),e(io,Da),e(Da,zZo),e(Da,gue),e(gue,WZo),e(Da,QZo),e(Da,hue),e(hue,HZo),e(Da,UZo),e(Da,pue),e(pue,JZo),e(Da,YZo),e(io,KZo),e(io,_ue),e(_ue,Iv),e(Iv,uue),e(uue,ZZo),e(Iv,eer),e(Iv,Fz),e(Fz,oer),e(Iv,rer),e(io,ter),e(io,Nv),e(Nv,aer),e(Nv,bue),e(bue,ner),e(Nv,ser),e(Nv,vue),e(vue,ler),e(io,ier),M(qv,io,null),b(f,rDe,u),b(f,fd,u),e(fd,jv),e(jv,Fue),M(yy,Fue,null),e(fd,der),e(fd,Tue),e(Tue,cer),b(f,tDe,u),b(f,Go,u),M(xy,Go,null),e(Go,fer),e(Go,md),e(md,mer),e(md,Tz),e(Tz,ger),e(md,her),e(md,Mz),e(Mz,per),e(md,_er),e(Go,uer),e(Go,$y),e($y,ber),e($y,Mue),e(Mue,ver),e($y,Fer),e(Go,Ter),e(Go,ut),M(ky,ut,null),e(ut,Mer),e(ut,Eue),e(Eue,Eer),e(ut,Cer),e(ut,gd),e(gd,wer),e(gd,Cue),e(Cue,Aer),e(gd,Ler),e(gd,Ez),e(Ez,yer),e(gd,xer),e(ut,$er),M(Dv,ut,null),e(Go,ker),e(Go,co),M(Sy,co,null),e(co,Ser),e(co,wue),e(wue,Rer),e(co,Per),e(co,Ga),e(Ga,Ber),e(Ga,Aue),e(Aue,Ier),e(Ga,Ner),e(Ga,Lue),e(Lue,qer),e(Ga,jer),e(Ga,yue),e(yue,Der),e(Ga,Ger),e(co,Oer),e(co,Re),e(Re,Gv),e(Gv,xue),e(xue,Ver),e(Gv,Xer),e(Gv,Cz),e(Cz,zer),e(Gv,Wer),e(Re,Qer),e(Re,Ov),e(Ov,$ue),e($ue,Her),e(Ov,Uer),e(Ov,wz),e(wz,Jer),e(Ov,Yer),e(Re,Ker),e(Re,Vv),e(Vv,kue),e(kue,Zer),e(Vv,eor),e(Vv,Az),e(Az,oor),e(Vv,ror),e(Re,tor),e(Re,Xv),e(Xv,Sue),e(Sue,aor),e(Xv,nor),e(Xv,Lz),e(Lz,sor),e(Xv,lor),e(Re,ior),e(Re,zv),e(zv,Rue),e(Rue,dor),e(zv,cor),e(zv,yz),e(yz,mor),e(zv,gor),e(Re,hor),e(Re,Wv),e(Wv,Pue),e(Pue,por),e(Wv,_or),e(Wv,xz),e(xz,uor),e(Wv,bor),e(Re,vor),e(Re,Qv),e(Qv,Bue),e(Bue,For),e(Qv,Tor),e(Qv,$z),e($z,Mor),e(Qv,Eor),e(Re,Cor),e(Re,Hv),e(Hv,Iue),e(Iue,wor),e(Hv,Aor),e(Hv,kz),e(kz,Lor),e(Hv,yor),e(Re,xor),e(Re,Uv),e(Uv,Nue),e(Nue,$or),e(Uv,kor),e(Uv,Sz),e(Sz,Sor),e(Uv,Ror),e(co,Por),e(co,Jv),e(Jv,Bor),e(Jv,que),e(que,Ior),e(Jv,Nor),e(Jv,jue),e(jue,qor),e(co,jor),M(Yv,co,null),b(f,aDe,u),b(f,hd,u),e(hd,Kv),e(Kv,Due),M(Ry,Due,null),e(hd,Dor),e(hd,Gue),e(Gue,Gor),b(f,nDe,u),b(f,Oo,u),M(Py,Oo,null),e(Oo,Oor),e(Oo,pd),e(pd,Vor),e(pd,Rz),e(Rz,Xor),e(pd,zor),e(pd,Pz),e(Pz,Wor),e(pd,Qor),e(Oo,Hor),e(Oo,By),e(By,Uor),e(By,Oue),e(Oue,Jor),e(By,Yor),e(Oo,Kor),e(Oo,bt),M(Iy,bt,null),e(bt,Zor),e(bt,Vue),e(Vue,err),e(bt,orr),e(bt,_d),e(_d,rrr),e(_d,Xue),e(Xue,trr),e(_d,arr),e(_d,Bz),e(Bz,nrr),e(_d,srr),e(bt,lrr),M(Zv,bt,null),e(Oo,irr),e(Oo,fo),M(Ny,fo,null),e(fo,drr),e(fo,zue),e(zue,crr),e(fo,frr),e(fo,Oa),e(Oa,mrr),e(Oa,Wue),e(Wue,grr),e(Oa,hrr),e(Oa,Que),e(Que,prr),e(Oa,_rr),e(Oa,Hue),e(Hue,urr),e(Oa,brr),e(fo,vrr),e(fo,Kr),e(Kr,eF),e(eF,Uue),e(Uue,Frr),e(eF,Trr),e(eF,Iz),e(Iz,Mrr),e(eF,Err),e(Kr,Crr),e(Kr,oF),e(oF,Jue),e(Jue,wrr),e(oF,Arr),e(oF,Nz),e(Nz,Lrr),e(oF,yrr),e(Kr,xrr),e(Kr,rF),e(rF,Yue),e(Yue,$rr),e(rF,krr),e(rF,qz),e(qz,Srr),e(rF,Rrr),e(Kr,Prr),e(Kr,tF),e(tF,Kue),e(Kue,Brr),e(tF,Irr),e(tF,jz),e(jz,Nrr),e(tF,qrr),e(Kr,jrr),e(Kr,aF),e(aF,Zue),e(Zue,Drr),e(aF,Grr),e(aF,Dz),e(Dz,Orr),e(aF,Vrr),e(fo,Xrr),e(fo,nF),e(nF,zrr),e(nF,e4e),e(e4e,Wrr),e(nF,Qrr),e(nF,o4e),e(o4e,Hrr),e(fo,Urr),M(sF,fo,null),b(f,sDe,u),b(f,ud,u),e(ud,lF),e(lF,r4e),M(qy,r4e,null),e(ud,Jrr),e(ud,t4e),e(t4e,Yrr),b(f,lDe,u),b(f,Vo,u),M(jy,Vo,null),e(Vo,Krr),e(Vo,bd),e(bd,Zrr),e(bd,Gz),e(Gz,etr),e(bd,otr),e(bd,Oz),e(Oz,rtr),e(bd,ttr),e(Vo,atr),e(Vo,Dy),e(Dy,ntr),e(Dy,a4e),e(a4e,str),e(Dy,ltr),e(Vo,itr),e(Vo,vt),M(Gy,vt,null),e(vt,dtr),e(vt,n4e),e(n4e,ctr),e(vt,ftr),e(vt,vd),e(vd,mtr),e(vd,s4e),e(s4e,gtr),e(vd,htr),e(vd,Vz),e(Vz,ptr),e(vd,_tr),e(vt,utr),M(iF,vt,null),e(Vo,btr),e(Vo,mo),M(Oy,mo,null),e(mo,vtr),e(mo,l4e),e(l4e,Ftr),e(mo,Ttr),e(mo,Va),e(Va,Mtr),e(Va,i4e),e(i4e,Etr),e(Va,Ctr),e(Va,d4e),e(d4e,wtr),e(Va,Atr),e(Va,c4e),e(c4e,Ltr),e(Va,ytr),e(mo,xtr),e(mo,Le),e(Le,dF),e(dF,f4e),e(f4e,$tr),e(dF,ktr),e(dF,Xz),e(Xz,Str),e(dF,Rtr),e(Le,Ptr),e(Le,cF),e(cF,m4e),e(m4e,Btr),e(cF,Itr),e(cF,zz),e(zz,Ntr),e(cF,qtr),e(Le,jtr),e(Le,fF),e(fF,g4e),e(g4e,Dtr),e(fF,Gtr),e(fF,Wz),e(Wz,Otr),e(fF,Vtr),e(Le,Xtr),e(Le,mF),e(mF,h4e),e(h4e,ztr),e(mF,Wtr),e(mF,Qz),e(Qz,Qtr),e(mF,Htr),e(Le,Utr),e(Le,gF),e(gF,p4e),e(p4e,Jtr),e(gF,Ytr),e(gF,Hz),e(Hz,Ktr),e(gF,Ztr),e(Le,ear),e(Le,hF),e(hF,_4e),e(_4e,oar),e(hF,rar),e(hF,Uz),e(Uz,tar),e(hF,aar),e(Le,nar),e(Le,pF),e(pF,u4e),e(u4e,sar),e(pF,lar),e(pF,Jz),e(Jz,iar),e(pF,dar),e(Le,car),e(Le,_F),e(_F,b4e),e(b4e,far),e(_F,mar),e(_F,Yz),e(Yz,gar),e(_F,har),e(Le,par),e(Le,uF),e(uF,v4e),e(v4e,_ar),e(uF,uar),e(uF,Kz),e(Kz,bar),e(uF,Far),e(Le,Tar),e(Le,bF),e(bF,F4e),e(F4e,Mar),e(bF,Ear),e(bF,Zz),e(Zz,Car),e(bF,war),e(mo,Aar),e(mo,vF),e(vF,Lar),e(vF,T4e),e(T4e,yar),e(vF,xar),e(vF,M4e),e(M4e,$ar),e(mo,kar),M(FF,mo,null),b(f,iDe,u),b(f,Fd,u),e(Fd,TF),e(TF,E4e),M(Vy,E4e,null),e(Fd,Sar),e(Fd,C4e),e(C4e,Rar),b(f,dDe,u),b(f,Xo,u),M(Xy,Xo,null),e(Xo,Par),e(Xo,Td),e(Td,Bar),e(Td,eW),e(eW,Iar),e(Td,Nar),e(Td,oW),e(oW,qar),e(Td,jar),e(Xo,Dar),e(Xo,zy),e(zy,Gar),e(zy,w4e),e(w4e,Oar),e(zy,Var),e(Xo,Xar),e(Xo,Ft),M(Wy,Ft,null),e(Ft,zar),e(Ft,A4e),e(A4e,War),e(Ft,Qar),e(Ft,Md),e(Md,Har),e(Md,L4e),e(L4e,Uar),e(Md,Jar),e(Md,rW),e(rW,Yar),e(Md,Kar),e(Ft,Zar),M(MF,Ft,null),e(Xo,enr),e(Xo,go),M(Qy,go,null),e(go,onr),e(go,y4e),e(y4e,rnr),e(go,tnr),e(go,Xa),e(Xa,anr),e(Xa,x4e),e(x4e,nnr),e(Xa,snr),e(Xa,$4e),e($4e,lnr),e(Xa,inr),e(Xa,k4e),e(k4e,dnr),e(Xa,cnr),e(go,fnr),e(go,Hy),e(Hy,EF),e(EF,S4e),e(S4e,mnr),e(EF,gnr),e(EF,tW),e(tW,hnr),e(EF,pnr),e(Hy,_nr),e(Hy,CF),e(CF,R4e),e(R4e,unr),e(CF,bnr),e(CF,aW),e(aW,vnr),e(CF,Fnr),e(go,Tnr),e(go,wF),e(wF,Mnr),e(wF,P4e),e(P4e,Enr),e(wF,Cnr),e(wF,B4e),e(B4e,wnr),e(go,Anr),M(AF,go,null),b(f,cDe,u),b(f,Ed,u),e(Ed,LF),e(LF,I4e),M(Uy,I4e,null),e(Ed,Lnr),e(Ed,N4e),e(N4e,ynr),b(f,fDe,u),b(f,zo,u),M(Jy,zo,null),e(zo,xnr),e(zo,Cd),e(Cd,$nr),e(Cd,nW),e(nW,knr),e(Cd,Snr),e(Cd,sW),e(sW,Rnr),e(Cd,Pnr),e(zo,Bnr),e(zo,Yy),e(Yy,Inr),e(Yy,q4e),e(q4e,Nnr),e(Yy,qnr),e(zo,jnr),e(zo,Tt),M(Ky,Tt,null),e(Tt,Dnr),e(Tt,j4e),e(j4e,Gnr),e(Tt,Onr),e(Tt,wd),e(wd,Vnr),e(wd,D4e),e(D4e,Xnr),e(wd,znr),e(wd,lW),e(lW,Wnr),e(wd,Qnr),e(Tt,Hnr),M(yF,Tt,null),e(zo,Unr),e(zo,ho),M(Zy,ho,null),e(ho,Jnr),e(ho,G4e),e(G4e,Ynr),e(ho,Knr),e(ho,za),e(za,Znr),e(za,O4e),e(O4e,esr),e(za,osr),e(za,V4e),e(V4e,rsr),e(za,tsr),e(za,X4e),e(X4e,asr),e(za,nsr),e(ho,ssr),e(ho,Zr),e(Zr,xF),e(xF,z4e),e(z4e,lsr),e(xF,isr),e(xF,iW),e(iW,dsr),e(xF,csr),e(Zr,fsr),e(Zr,$F),e($F,W4e),e(W4e,msr),e($F,gsr),e($F,dW),e(dW,hsr),e($F,psr),e(Zr,_sr),e(Zr,kF),e(kF,Q4e),e(Q4e,usr),e(kF,bsr),e(kF,cW),e(cW,vsr),e(kF,Fsr),e(Zr,Tsr),e(Zr,SF),e(SF,H4e),e(H4e,Msr),e(SF,Esr),e(SF,fW),e(fW,Csr),e(SF,wsr),e(Zr,Asr),e(Zr,RF),e(RF,U4e),e(U4e,Lsr),e(RF,ysr),e(RF,mW),e(mW,xsr),e(RF,$sr),e(ho,ksr),e(ho,PF),e(PF,Ssr),e(PF,J4e),e(J4e,Rsr),e(PF,Psr),e(PF,Y4e),e(Y4e,Bsr),e(ho,Isr),M(BF,ho,null),b(f,mDe,u),b(f,Ad,u),e(Ad,IF),e(IF,K4e),M(e8,K4e,null),e(Ad,Nsr),e(Ad,Z4e),e(Z4e,qsr),b(f,gDe,u),b(f,Wo,u),M(o8,Wo,null),e(Wo,jsr),e(Wo,Ld),e(Ld,Dsr),e(Ld,gW),e(gW,Gsr),e(Ld,Osr),e(Ld,hW),e(hW,Vsr),e(Ld,Xsr),e(Wo,zsr),e(Wo,r8),e(r8,Wsr),e(r8,e1e),e(e1e,Qsr),e(r8,Hsr),e(Wo,Usr),e(Wo,Mt),M(t8,Mt,null),e(Mt,Jsr),e(Mt,o1e),e(o1e,Ysr),e(Mt,Ksr),e(Mt,yd),e(yd,Zsr),e(yd,r1e),e(r1e,elr),e(yd,olr),e(yd,pW),e(pW,rlr),e(yd,tlr),e(Mt,alr),M(NF,Mt,null),e(Wo,nlr),e(Wo,po),M(a8,po,null),e(po,slr),e(po,t1e),e(t1e,llr),e(po,ilr),e(po,Wa),e(Wa,dlr),e(Wa,a1e),e(a1e,clr),e(Wa,flr),e(Wa,n1e),e(n1e,mlr),e(Wa,glr),e(Wa,s1e),e(s1e,hlr),e(Wa,plr),e(po,_lr),e(po,xd),e(xd,qF),e(qF,l1e),e(l1e,ulr),e(qF,blr),e(qF,_W),e(_W,vlr),e(qF,Flr),e(xd,Tlr),e(xd,jF),e(jF,i1e),e(i1e,Mlr),e(jF,Elr),e(jF,uW),e(uW,Clr),e(jF,wlr),e(xd,Alr),e(xd,DF),e(DF,d1e),e(d1e,Llr),e(DF,ylr),e(DF,bW),e(bW,xlr),e(DF,$lr),e(po,klr),e(po,GF),e(GF,Slr),e(GF,c1e),e(c1e,Rlr),e(GF,Plr),e(GF,f1e),e(f1e,Blr),e(po,Ilr),M(OF,po,null),b(f,hDe,u),b(f,$d,u),e($d,VF),e(VF,m1e),M(n8,m1e,null),e($d,Nlr),e($d,g1e),e(g1e,qlr),b(f,pDe,u),b(f,Qo,u),M(s8,Qo,null),e(Qo,jlr),e(Qo,kd),e(kd,Dlr),e(kd,vW),e(vW,Glr),e(kd,Olr),e(kd,FW),e(FW,Vlr),e(kd,Xlr),e(Qo,zlr),e(Qo,l8),e(l8,Wlr),e(l8,h1e),e(h1e,Qlr),e(l8,Hlr),e(Qo,Ulr),e(Qo,Et),M(i8,Et,null),e(Et,Jlr),e(Et,p1e),e(p1e,Ylr),e(Et,Klr),e(Et,Sd),e(Sd,Zlr),e(Sd,_1e),e(_1e,eir),e(Sd,oir),e(Sd,TW),e(TW,rir),e(Sd,tir),e(Et,air),M(XF,Et,null),e(Qo,nir),e(Qo,_o),M(d8,_o,null),e(_o,sir),e(_o,u1e),e(u1e,lir),e(_o,iir),e(_o,Qa),e(Qa,dir),e(Qa,b1e),e(b1e,cir),e(Qa,fir),e(Qa,v1e),e(v1e,mir),e(Qa,gir),e(Qa,F1e),e(F1e,hir),e(Qa,pir),e(_o,_ir),e(_o,c8),e(c8,zF),e(zF,T1e),e(T1e,uir),e(zF,bir),e(zF,MW),e(MW,vir),e(zF,Fir),e(c8,Tir),e(c8,WF),e(WF,M1e),e(M1e,Mir),e(WF,Eir),e(WF,EW),e(EW,Cir),e(WF,wir),e(_o,Air),e(_o,QF),e(QF,Lir),e(QF,E1e),e(E1e,yir),e(QF,xir),e(QF,C1e),e(C1e,$ir),e(_o,kir),M(HF,_o,null),b(f,_De,u),b(f,Rd,u),e(Rd,UF),e(UF,w1e),M(f8,w1e,null),e(Rd,Sir),e(Rd,A1e),e(A1e,Rir),b(f,uDe,u),b(f,Ho,u),M(m8,Ho,null),e(Ho,Pir),e(Ho,Pd),e(Pd,Bir),e(Pd,CW),e(CW,Iir),e(Pd,Nir),e(Pd,wW),e(wW,qir),e(Pd,jir),e(Ho,Dir),e(Ho,g8),e(g8,Gir),e(g8,L1e),e(L1e,Oir),e(g8,Vir),e(Ho,Xir),e(Ho,Ct),M(h8,Ct,null),e(Ct,zir),e(Ct,y1e),e(y1e,Wir),e(Ct,Qir),e(Ct,Bd),e(Bd,Hir),e(Bd,x1e),e(x1e,Uir),e(Bd,Jir),e(Bd,AW),e(AW,Yir),e(Bd,Kir),e(Ct,Zir),M(JF,Ct,null),e(Ho,edr),e(Ho,uo),M(p8,uo,null),e(uo,odr),e(uo,$1e),e($1e,rdr),e(uo,tdr),e(uo,Ha),e(Ha,adr),e(Ha,k1e),e(k1e,ndr),e(Ha,sdr),e(Ha,S1e),e(S1e,ldr),e(Ha,idr),e(Ha,R1e),e(R1e,ddr),e(Ha,cdr),e(uo,fdr),e(uo,P1e),e(P1e,YF),e(YF,B1e),e(B1e,mdr),e(YF,gdr),e(YF,LW),e(LW,hdr),e(YF,pdr),e(uo,_dr),e(uo,KF),e(KF,udr),e(KF,I1e),e(I1e,bdr),e(KF,vdr),e(KF,N1e),e(N1e,Fdr),e(uo,Tdr),M(ZF,uo,null),b(f,bDe,u),b(f,Id,u),e(Id,eT),e(eT,q1e),M(_8,q1e,null),e(Id,Mdr),e(Id,j1e),e(j1e,Edr),b(f,vDe,u),b(f,Uo,u),M(u8,Uo,null),e(Uo,Cdr),e(Uo,Nd),e(Nd,wdr),e(Nd,yW),e(yW,Adr),e(Nd,Ldr),e(Nd,xW),e(xW,ydr),e(Nd,xdr),e(Uo,$dr),e(Uo,b8),e(b8,kdr),e(b8,D1e),e(D1e,Sdr),e(b8,Rdr),e(Uo,Pdr),e(Uo,wt),M(v8,wt,null),e(wt,Bdr),e(wt,G1e),e(G1e,Idr),e(wt,Ndr),e(wt,qd),e(qd,qdr),e(qd,O1e),e(O1e,jdr),e(qd,Ddr),e(qd,$W),e($W,Gdr),e(qd,Odr),e(wt,Vdr),M(oT,wt,null),e(Uo,Xdr),e(Uo,bo),M(F8,bo,null),e(bo,zdr),e(bo,V1e),e(V1e,Wdr),e(bo,Qdr),e(bo,Ua),e(Ua,Hdr),e(Ua,X1e),e(X1e,Udr),e(Ua,Jdr),e(Ua,z1e),e(z1e,Ydr),e(Ua,Kdr),e(Ua,W1e),e(W1e,Zdr),e(Ua,ecr),e(bo,ocr),e(bo,Ja),e(Ja,rT),e(rT,Q1e),e(Q1e,rcr),e(rT,tcr),e(rT,kW),e(kW,acr),e(rT,ncr),e(Ja,scr),e(Ja,tT),e(tT,H1e),e(H1e,lcr),e(tT,icr),e(tT,SW),e(SW,dcr),e(tT,ccr),e(Ja,fcr),e(Ja,aT),e(aT,U1e),e(U1e,mcr),e(aT,gcr),e(aT,RW),e(RW,hcr),e(aT,pcr),e(Ja,_cr),e(Ja,nT),e(nT,J1e),e(J1e,ucr),e(nT,bcr),e(nT,PW),e(PW,vcr),e(nT,Fcr),e(bo,Tcr),e(bo,sT),e(sT,Mcr),e(sT,Y1e),e(Y1e,Ecr),e(sT,Ccr),e(sT,K1e),e(K1e,wcr),e(bo,Acr),M(lT,bo,null),b(f,FDe,u),b(f,jd,u),e(jd,iT),e(iT,Z1e),M(T8,Z1e,null),e(jd,Lcr),e(jd,e7e),e(e7e,ycr),b(f,TDe,u),b(f,Jo,u),M(M8,Jo,null),e(Jo,xcr),e(Jo,Dd),e(Dd,$cr),e(Dd,BW),e(BW,kcr),e(Dd,Scr),e(Dd,IW),e(IW,Rcr),e(Dd,Pcr),e(Jo,Bcr),e(Jo,E8),e(E8,Icr),e(E8,o7e),e(o7e,Ncr),e(E8,qcr),e(Jo,jcr),e(Jo,At),M(C8,At,null),e(At,Dcr),e(At,r7e),e(r7e,Gcr),e(At,Ocr),e(At,Gd),e(Gd,Vcr),e(Gd,t7e),e(t7e,Xcr),e(Gd,zcr),e(Gd,NW),e(NW,Wcr),e(Gd,Qcr),e(At,Hcr),M(dT,At,null),e(Jo,Ucr),e(Jo,vo),M(w8,vo,null),e(vo,Jcr),e(vo,a7e),e(a7e,Ycr),e(vo,Kcr),e(vo,Ya),e(Ya,Zcr),e(Ya,n7e),e(n7e,efr),e(Ya,ofr),e(Ya,s7e),e(s7e,rfr),e(Ya,tfr),e(Ya,l7e),e(l7e,afr),e(Ya,nfr),e(vo,sfr),e(vo,i7e),e(i7e,cT),e(cT,d7e),e(d7e,lfr),e(cT,ifr),e(cT,qW),e(qW,dfr),e(cT,cfr),e(vo,ffr),e(vo,fT),e(fT,mfr),e(fT,c7e),e(c7e,gfr),e(fT,hfr),e(fT,f7e),e(f7e,pfr),e(vo,_fr),M(mT,vo,null),b(f,MDe,u),b(f,Od,u),e(Od,gT),e(gT,m7e),M(A8,m7e,null),e(Od,ufr),e(Od,g7e),e(g7e,bfr),b(f,EDe,u),b(f,Yo,u),M(L8,Yo,null),e(Yo,vfr),e(Yo,Vd),e(Vd,Ffr),e(Vd,jW),e(jW,Tfr),e(Vd,Mfr),e(Vd,DW),e(DW,Efr),e(Vd,Cfr),e(Yo,wfr),e(Yo,y8),e(y8,Afr),e(y8,h7e),e(h7e,Lfr),e(y8,yfr),e(Yo,xfr),e(Yo,Lt),M(x8,Lt,null),e(Lt,$fr),e(Lt,p7e),e(p7e,kfr),e(Lt,Sfr),e(Lt,Xd),e(Xd,Rfr),e(Xd,_7e),e(_7e,Pfr),e(Xd,Bfr),e(Xd,GW),e(GW,Ifr),e(Xd,Nfr),e(Lt,qfr),M(hT,Lt,null),e(Yo,jfr),e(Yo,wr),M($8,wr,null),e(wr,Dfr),e(wr,u7e),e(u7e,Gfr),e(wr,Ofr),e(wr,Ka),e(Ka,Vfr),e(Ka,b7e),e(b7e,Xfr),e(Ka,zfr),e(Ka,v7e),e(v7e,Wfr),e(Ka,Qfr),e(Ka,F7e),e(F7e,Hfr),e(Ka,Ufr),e(wr,Jfr),e(wr,q),e(q,pT),e(pT,T7e),e(T7e,Yfr),e(pT,Kfr),e(pT,OW),e(OW,Zfr),e(pT,emr),e(q,omr),e(q,_T),e(_T,M7e),e(M7e,rmr),e(_T,tmr),e(_T,VW),e(VW,amr),e(_T,nmr),e(q,smr),e(q,uT),e(uT,E7e),e(E7e,lmr),e(uT,imr),e(uT,XW),e(XW,dmr),e(uT,cmr),e(q,fmr),e(q,bT),e(bT,C7e),e(C7e,mmr),e(bT,gmr),e(bT,zW),e(zW,hmr),e(bT,pmr),e(q,_mr),e(q,vT),e(vT,w7e),e(w7e,umr),e(vT,bmr),e(vT,WW),e(WW,vmr),e(vT,Fmr),e(q,Tmr),e(q,FT),e(FT,A7e),e(A7e,Mmr),e(FT,Emr),e(FT,QW),e(QW,Cmr),e(FT,wmr),e(q,Amr),e(q,TT),e(TT,L7e),e(L7e,Lmr),e(TT,ymr),e(TT,HW),e(HW,xmr),e(TT,$mr),e(q,kmr),e(q,MT),e(MT,y7e),e(y7e,Smr),e(MT,Rmr),e(MT,UW),e(UW,Pmr),e(MT,Bmr),e(q,Imr),e(q,ET),e(ET,x7e),e(x7e,Nmr),e(ET,qmr),e(ET,JW),e(JW,jmr),e(ET,Dmr),e(q,Gmr),e(q,CT),e(CT,$7e),e($7e,Omr),e(CT,Vmr),e(CT,YW),e(YW,Xmr),e(CT,zmr),e(q,Wmr),e(q,wT),e(wT,k7e),e(k7e,Qmr),e(wT,Hmr),e(wT,KW),e(KW,Umr),e(wT,Jmr),e(q,Ymr),e(q,AT),e(AT,S7e),e(S7e,Kmr),e(AT,Zmr),e(AT,ZW),e(ZW,egr),e(AT,ogr),e(q,rgr),e(q,LT),e(LT,R7e),e(R7e,tgr),e(LT,agr),e(LT,eQ),e(eQ,ngr),e(LT,sgr),e(q,lgr),e(q,yT),e(yT,P7e),e(P7e,igr),e(yT,dgr),e(yT,oQ),e(oQ,cgr),e(yT,fgr),e(q,mgr),e(q,xT),e(xT,B7e),e(B7e,ggr),e(xT,hgr),e(xT,rQ),e(rQ,pgr),e(xT,_gr),e(q,ugr),e(q,$T),e($T,I7e),e(I7e,bgr),e($T,vgr),e($T,tQ),e(tQ,Fgr),e($T,Tgr),e(q,Mgr),e(q,kT),e(kT,N7e),e(N7e,Egr),e(kT,Cgr),e(kT,aQ),e(aQ,wgr),e(kT,Agr),e(q,Lgr),e(q,Ns),e(Ns,q7e),e(q7e,ygr),e(Ns,xgr),e(Ns,nQ),e(nQ,$gr),e(Ns,kgr),e(Ns,sQ),e(sQ,Sgr),e(Ns,Rgr),e(q,Pgr),e(q,ST),e(ST,j7e),e(j7e,Bgr),e(ST,Igr),e(ST,lQ),e(lQ,Ngr),e(ST,qgr),e(q,jgr),e(q,RT),e(RT,D7e),e(D7e,Dgr),e(RT,Ggr),e(RT,iQ),e(iQ,Ogr),e(RT,Vgr),e(q,Xgr),e(q,PT),e(PT,G7e),e(G7e,zgr),e(PT,Wgr),e(PT,dQ),e(dQ,Qgr),e(PT,Hgr),e(q,Ugr),e(q,BT),e(BT,O7e),e(O7e,Jgr),e(BT,Ygr),e(BT,cQ),e(cQ,Kgr),e(BT,Zgr),e(q,ehr),e(q,IT),e(IT,V7e),e(V7e,ohr),e(IT,rhr),e(IT,fQ),e(fQ,thr),e(IT,ahr),e(q,nhr),e(q,NT),e(NT,X7e),e(X7e,shr),e(NT,lhr),e(NT,mQ),e(mQ,ihr),e(NT,dhr),e(q,chr),e(q,qT),e(qT,z7e),e(z7e,fhr),e(qT,mhr),e(qT,gQ),e(gQ,ghr),e(qT,hhr),e(q,phr),e(q,jT),e(jT,W7e),e(W7e,_hr),e(jT,uhr),e(jT,hQ),e(hQ,bhr),e(jT,vhr),e(q,Fhr),e(q,DT),e(DT,Q7e),e(Q7e,Thr),e(DT,Mhr),e(DT,pQ),e(pQ,Ehr),e(DT,Chr),e(q,whr),e(q,GT),e(GT,H7e),e(H7e,Ahr),e(GT,Lhr),e(GT,_Q),e(_Q,yhr),e(GT,xhr),e(q,$hr),e(q,OT),e(OT,U7e),e(U7e,khr),e(OT,Shr),e(OT,uQ),e(uQ,Rhr),e(OT,Phr),e(q,Bhr),e(q,VT),e(VT,J7e),e(J7e,Ihr),e(VT,Nhr),e(VT,bQ),e(bQ,qhr),e(VT,jhr),e(q,Dhr),e(q,XT),e(XT,Y7e),e(Y7e,Ghr),e(XT,Ohr),e(XT,vQ),e(vQ,Vhr),e(XT,Xhr),e(q,zhr),e(q,zT),e(zT,K7e),e(K7e,Whr),e(zT,Qhr),e(zT,FQ),e(FQ,Hhr),e(zT,Uhr),e(q,Jhr),e(q,WT),e(WT,Z7e),e(Z7e,Yhr),e(WT,Khr),e(WT,TQ),e(TQ,Zhr),e(WT,epr),e(q,opr),e(q,QT),e(QT,ebe),e(ebe,rpr),e(QT,tpr),e(QT,MQ),e(MQ,apr),e(QT,npr),e(q,spr),e(q,HT),e(HT,obe),e(obe,lpr),e(HT,ipr),e(HT,EQ),e(EQ,dpr),e(HT,cpr),e(q,fpr),e(q,UT),e(UT,rbe),e(rbe,mpr),e(UT,gpr),e(UT,CQ),e(CQ,hpr),e(UT,ppr),e(q,_pr),e(q,JT),e(JT,tbe),e(tbe,upr),e(JT,bpr),e(JT,wQ),e(wQ,vpr),e(JT,Fpr),e(q,Tpr),e(q,YT),e(YT,abe),e(abe,Mpr),e(YT,Epr),e(YT,AQ),e(AQ,Cpr),e(YT,wpr),e(q,Apr),e(q,KT),e(KT,nbe),e(nbe,Lpr),e(KT,ypr),e(KT,LQ),e(LQ,xpr),e(KT,$pr),e(q,kpr),e(q,ZT),e(ZT,sbe),e(sbe,Spr),e(ZT,Rpr),e(ZT,yQ),e(yQ,Ppr),e(ZT,Bpr),e(q,Ipr),e(q,eM),e(eM,lbe),e(lbe,Npr),e(eM,qpr),e(eM,xQ),e(xQ,jpr),e(eM,Dpr),e(q,Gpr),e(q,oM),e(oM,ibe),e(ibe,Opr),e(oM,Vpr),e(oM,$Q),e($Q,Xpr),e(oM,zpr),e(q,Wpr),e(q,rM),e(rM,dbe),e(dbe,Qpr),e(rM,Hpr),e(rM,kQ),e(kQ,Upr),e(rM,Jpr),e(q,Ypr),e(q,tM),e(tM,cbe),e(cbe,Kpr),e(tM,Zpr),e(tM,SQ),e(SQ,e_r),e(tM,o_r),e(q,r_r),e(q,aM),e(aM,fbe),e(fbe,t_r),e(aM,a_r),e(aM,RQ),e(RQ,n_r),e(aM,s_r),e(q,l_r),e(q,nM),e(nM,mbe),e(mbe,i_r),e(nM,d_r),e(nM,PQ),e(PQ,c_r),e(nM,f_r),e(q,m_r),e(q,sM),e(sM,gbe),e(gbe,g_r),e(sM,h_r),e(sM,BQ),e(BQ,p_r),e(sM,__r),e(wr,u_r),M(lM,wr,null),b(f,CDe,u),b(f,zd,u),e(zd,iM),e(iM,hbe),M(k8,hbe,null),e(zd,b_r),e(zd,pbe),e(pbe,v_r),b(f,wDe,u),b(f,Ko,u),M(S8,Ko,null),e(Ko,F_r),e(Ko,Wd),e(Wd,T_r),e(Wd,IQ),e(IQ,M_r),e(Wd,E_r),e(Wd,NQ),e(NQ,C_r),e(Wd,w_r),e(Ko,A_r),e(Ko,R8),e(R8,L_r),e(R8,_be),e(_be,y_r),e(R8,x_r),e(Ko,$_r),e(Ko,yt),M(P8,yt,null),e(yt,k_r),e(yt,ube),e(ube,S_r),e(yt,R_r),e(yt,Qd),e(Qd,P_r),e(Qd,bbe),e(bbe,B_r),e(Qd,I_r),e(Qd,qQ),e(qQ,N_r),e(Qd,q_r),e(yt,j_r),M(dM,yt,null),e(Ko,D_r),e(Ko,Ar),M(B8,Ar,null),e(Ar,G_r),e(Ar,vbe),e(vbe,O_r),e(Ar,V_r),e(Ar,Za),e(Za,X_r),e(Za,Fbe),e(Fbe,z_r),e(Za,W_r),e(Za,Tbe),e(Tbe,Q_r),e(Za,H_r),e(Za,Mbe),e(Mbe,U_r),e(Za,J_r),e(Ar,Y_r),e(Ar,se),e(se,cM),e(cM,Ebe),e(Ebe,K_r),e(cM,Z_r),e(cM,jQ),e(jQ,eur),e(cM,our),e(se,rur),e(se,fM),e(fM,Cbe),e(Cbe,tur),e(fM,aur),e(fM,DQ),e(DQ,nur),e(fM,sur),e(se,lur),e(se,mM),e(mM,wbe),e(wbe,iur),e(mM,dur),e(mM,GQ),e(GQ,cur),e(mM,fur),e(se,mur),e(se,gM),e(gM,Abe),e(Abe,gur),e(gM,hur),e(gM,OQ),e(OQ,pur),e(gM,_ur),e(se,uur),e(se,hM),e(hM,Lbe),e(Lbe,bur),e(hM,vur),e(hM,VQ),e(VQ,Fur),e(hM,Tur),e(se,Mur),e(se,pM),e(pM,ybe),e(ybe,Eur),e(pM,Cur),e(pM,XQ),e(XQ,wur),e(pM,Aur),e(se,Lur),e(se,_M),e(_M,xbe),e(xbe,yur),e(_M,xur),e(_M,zQ),e(zQ,$ur),e(_M,kur),e(se,Sur),e(se,uM),e(uM,$be),e($be,Rur),e(uM,Pur),e(uM,WQ),e(WQ,Bur),e(uM,Iur),e(se,Nur),e(se,bM),e(bM,kbe),e(kbe,qur),e(bM,jur),e(bM,QQ),e(QQ,Dur),e(bM,Gur),e(se,Our),e(se,vM),e(vM,Sbe),e(Sbe,Vur),e(vM,Xur),e(vM,HQ),e(HQ,zur),e(vM,Wur),e(se,Qur),e(se,FM),e(FM,Rbe),e(Rbe,Hur),e(FM,Uur),e(FM,UQ),e(UQ,Jur),e(FM,Yur),e(se,Kur),e(se,TM),e(TM,Pbe),e(Pbe,Zur),e(TM,e4r),e(TM,JQ),e(JQ,o4r),e(TM,r4r),e(se,t4r),e(se,MM),e(MM,Bbe),e(Bbe,a4r),e(MM,n4r),e(MM,YQ),e(YQ,s4r),e(MM,l4r),e(se,i4r),e(se,EM),e(EM,Ibe),e(Ibe,d4r),e(EM,c4r),e(EM,KQ),e(KQ,f4r),e(EM,m4r),e(se,g4r),e(se,CM),e(CM,Nbe),e(Nbe,h4r),e(CM,p4r),e(CM,ZQ),e(ZQ,_4r),e(CM,u4r),e(se,b4r),e(se,wM),e(wM,qbe),e(qbe,v4r),e(wM,F4r),e(wM,eH),e(eH,T4r),e(wM,M4r),e(se,E4r),e(se,AM),e(AM,jbe),e(jbe,C4r),e(AM,w4r),e(AM,oH),e(oH,A4r),e(AM,L4r),e(se,y4r),e(se,LM),e(LM,Dbe),e(Dbe,x4r),e(LM,$4r),e(LM,rH),e(rH,k4r),e(LM,S4r),e(se,R4r),e(se,yM),e(yM,Gbe),e(Gbe,P4r),e(yM,B4r),e(yM,tH),e(tH,I4r),e(yM,N4r),e(se,q4r),e(se,xM),e(xM,Obe),e(Obe,j4r),e(xM,D4r),e(xM,aH),e(aH,G4r),e(xM,O4r),e(se,V4r),e(se,$M),e($M,Vbe),e(Vbe,X4r),e($M,z4r),e($M,nH),e(nH,W4r),e($M,Q4r),e(se,H4r),e(se,kM),e(kM,Xbe),e(Xbe,U4r),e(kM,J4r),e(kM,sH),e(sH,Y4r),e(kM,K4r),e(se,Z4r),e(se,SM),e(SM,zbe),e(zbe,e1r),e(SM,o1r),e(SM,lH),e(lH,r1r),e(SM,t1r),e(Ar,a1r),M(RM,Ar,null),b(f,ADe,u),b(f,Hd,u),e(Hd,PM),e(PM,Wbe),M(I8,Wbe,null),e(Hd,n1r),e(Hd,Qbe),e(Qbe,s1r),b(f,LDe,u),b(f,Zo,u),M(N8,Zo,null),e(Zo,l1r),e(Zo,Ud),e(Ud,i1r),e(Ud,iH),e(iH,d1r),e(Ud,c1r),e(Ud,dH),e(dH,f1r),e(Ud,m1r),e(Zo,g1r),e(Zo,q8),e(q8,h1r),e(q8,Hbe),e(Hbe,p1r),e(q8,_1r),e(Zo,u1r),e(Zo,xt),M(j8,xt,null),e(xt,b1r),e(xt,Ube),e(Ube,v1r),e(xt,F1r),e(xt,Jd),e(Jd,T1r),e(Jd,Jbe),e(Jbe,M1r),e(Jd,E1r),e(Jd,cH),e(cH,C1r),e(Jd,w1r),e(xt,A1r),M(BM,xt,null),e(Zo,L1r),e(Zo,Lr),M(D8,Lr,null),e(Lr,y1r),e(Lr,Ybe),e(Ybe,x1r),e(Lr,$1r),e(Lr,en),e(en,k1r),e(en,Kbe),e(Kbe,S1r),e(en,R1r),e(en,Zbe),e(Zbe,P1r),e(en,B1r),e(en,e2e),e(e2e,I1r),e(en,N1r),e(Lr,q1r),e(Lr,Me),e(Me,IM),e(IM,o2e),e(o2e,j1r),e(IM,D1r),e(IM,fH),e(fH,G1r),e(IM,O1r),e(Me,V1r),e(Me,NM),e(NM,r2e),e(r2e,X1r),e(NM,z1r),e(NM,mH),e(mH,W1r),e(NM,Q1r),e(Me,H1r),e(Me,qM),e(qM,t2e),e(t2e,U1r),e(qM,J1r),e(qM,gH),e(gH,Y1r),e(qM,K1r),e(Me,Z1r),e(Me,jM),e(jM,a2e),e(a2e,e7r),e(jM,o7r),e(jM,hH),e(hH,r7r),e(jM,t7r),e(Me,a7r),e(Me,DM),e(DM,n2e),e(n2e,n7r),e(DM,s7r),e(DM,pH),e(pH,l7r),e(DM,i7r),e(Me,d7r),e(Me,GM),e(GM,s2e),e(s2e,c7r),e(GM,f7r),e(GM,_H),e(_H,m7r),e(GM,g7r),e(Me,h7r),e(Me,OM),e(OM,l2e),e(l2e,p7r),e(OM,_7r),e(OM,uH),e(uH,u7r),e(OM,b7r),e(Me,v7r),e(Me,VM),e(VM,i2e),e(i2e,F7r),e(VM,T7r),e(VM,bH),e(bH,M7r),e(VM,E7r),e(Me,C7r),e(Me,XM),e(XM,d2e),e(d2e,w7r),e(XM,A7r),e(XM,vH),e(vH,L7r),e(XM,y7r),e(Me,x7r),e(Me,zM),e(zM,c2e),e(c2e,$7r),e(zM,k7r),e(zM,FH),e(FH,S7r),e(zM,R7r),e(Me,P7r),e(Me,WM),e(WM,f2e),e(f2e,B7r),e(WM,I7r),e(WM,TH),e(TH,N7r),e(WM,q7r),e(Me,j7r),e(Me,QM),e(QM,m2e),e(m2e,D7r),e(QM,G7r),e(QM,MH),e(MH,O7r),e(QM,V7r),e(Me,X7r),e(Me,HM),e(HM,g2e),e(g2e,z7r),e(HM,W7r),e(HM,EH),e(EH,Q7r),e(HM,H7r),e(Lr,U7r),M(UM,Lr,null),b(f,yDe,u),b(f,Yd,u),e(Yd,JM),e(JM,h2e),M(G8,h2e,null),e(Yd,J7r),e(Yd,p2e),e(p2e,Y7r),b(f,xDe,u),b(f,er,u),M(O8,er,null),e(er,K7r),e(er,Kd),e(Kd,Z7r),e(Kd,CH),e(CH,ebr),e(Kd,obr),e(Kd,wH),e(wH,rbr),e(Kd,tbr),e(er,abr),e(er,V8),e(V8,nbr),e(V8,_2e),e(_2e,sbr),e(V8,lbr),e(er,ibr),e(er,$t),M(X8,$t,null),e($t,dbr),e($t,u2e),e(u2e,cbr),e($t,fbr),e($t,Zd),e(Zd,mbr),e(Zd,b2e),e(b2e,gbr),e(Zd,hbr),e(Zd,AH),e(AH,pbr),e(Zd,_br),e($t,ubr),M(YM,$t,null),e(er,bbr),e(er,yr),M(z8,yr,null),e(yr,vbr),e(yr,v2e),e(v2e,Fbr),e(yr,Tbr),e(yr,on),e(on,Mbr),e(on,F2e),e(F2e,Ebr),e(on,Cbr),e(on,T2e),e(T2e,wbr),e(on,Abr),e(on,M2e),e(M2e,Lbr),e(on,ybr),e(yr,xbr),e(yr,rn),e(rn,KM),e(KM,E2e),e(E2e,$br),e(KM,kbr),e(KM,LH),e(LH,Sbr),e(KM,Rbr),e(rn,Pbr),e(rn,ZM),e(ZM,C2e),e(C2e,Bbr),e(ZM,Ibr),e(ZM,yH),e(yH,Nbr),e(ZM,qbr),e(rn,jbr),e(rn,eE),e(eE,w2e),e(w2e,Dbr),e(eE,Gbr),e(eE,xH),e(xH,Obr),e(eE,Vbr),e(rn,Xbr),e(rn,oE),e(oE,A2e),e(A2e,zbr),e(oE,Wbr),e(oE,$H),e($H,Qbr),e(oE,Hbr),e(yr,Ubr),M(rE,yr,null),b(f,$De,u),b(f,ec,u),e(ec,tE),e(tE,L2e),M(W8,L2e,null),e(ec,Jbr),e(ec,y2e),e(y2e,Ybr),b(f,kDe,u),b(f,or,u),M(Q8,or,null),e(or,Kbr),e(or,oc),e(oc,Zbr),e(oc,kH),e(kH,e2r),e(oc,o2r),e(oc,SH),e(SH,r2r),e(oc,t2r),e(or,a2r),e(or,H8),e(H8,n2r),e(H8,x2e),e(x2e,s2r),e(H8,l2r),e(or,i2r),e(or,kt),M(U8,kt,null),e(kt,d2r),e(kt,$2e),e($2e,c2r),e(kt,f2r),e(kt,rc),e(rc,m2r),e(rc,k2e),e(k2e,g2r),e(rc,h2r),e(rc,RH),e(RH,p2r),e(rc,_2r),e(kt,u2r),M(aE,kt,null),e(or,b2r),e(or,xr),M(J8,xr,null),e(xr,v2r),e(xr,S2e),e(S2e,F2r),e(xr,T2r),e(xr,tn),e(tn,M2r),e(tn,R2e),e(R2e,E2r),e(tn,C2r),e(tn,P2e),e(P2e,w2r),e(tn,A2r),e(tn,B2e),e(B2e,L2r),e(tn,y2r),e(xr,x2r),e(xr,ie),e(ie,nE),e(nE,I2e),e(I2e,$2r),e(nE,k2r),e(nE,PH),e(PH,S2r),e(nE,R2r),e(ie,P2r),e(ie,sE),e(sE,N2e),e(N2e,B2r),e(sE,I2r),e(sE,BH),e(BH,N2r),e(sE,q2r),e(ie,j2r),e(ie,lE),e(lE,q2e),e(q2e,D2r),e(lE,G2r),e(lE,IH),e(IH,O2r),e(lE,V2r),e(ie,X2r),e(ie,iE),e(iE,j2e),e(j2e,z2r),e(iE,W2r),e(iE,NH),e(NH,Q2r),e(iE,H2r),e(ie,U2r),e(ie,dE),e(dE,D2e),e(D2e,J2r),e(dE,Y2r),e(dE,qH),e(qH,K2r),e(dE,Z2r),e(ie,evr),e(ie,cE),e(cE,G2e),e(G2e,ovr),e(cE,rvr),e(cE,jH),e(jH,tvr),e(cE,avr),e(ie,nvr),e(ie,fE),e(fE,O2e),e(O2e,svr),e(fE,lvr),e(fE,DH),e(DH,ivr),e(fE,dvr),e(ie,cvr),e(ie,mE),e(mE,V2e),e(V2e,fvr),e(mE,mvr),e(mE,GH),e(GH,gvr),e(mE,hvr),e(ie,pvr),e(ie,gE),e(gE,X2e),e(X2e,_vr),e(gE,uvr),e(gE,OH),e(OH,bvr),e(gE,vvr),e(ie,Fvr),e(ie,hE),e(hE,z2e),e(z2e,Tvr),e(hE,Mvr),e(hE,VH),e(VH,Evr),e(hE,Cvr),e(ie,wvr),e(ie,pE),e(pE,W2e),e(W2e,Avr),e(pE,Lvr),e(pE,XH),e(XH,yvr),e(pE,xvr),e(ie,$vr),e(ie,_E),e(_E,Q2e),e(Q2e,kvr),e(_E,Svr),e(_E,zH),e(zH,Rvr),e(_E,Pvr),e(ie,Bvr),e(ie,uE),e(uE,H2e),e(H2e,Ivr),e(uE,Nvr),e(uE,WH),e(WH,qvr),e(uE,jvr),e(ie,Dvr),e(ie,bE),e(bE,U2e),e(U2e,Gvr),e(bE,Ovr),e(bE,QH),e(QH,Vvr),e(bE,Xvr),e(ie,zvr),e(ie,vE),e(vE,J2e),e(J2e,Wvr),e(vE,Qvr),e(vE,HH),e(HH,Hvr),e(vE,Uvr),e(ie,Jvr),e(ie,FE),e(FE,Y2e),e(Y2e,Yvr),e(FE,Kvr),e(FE,UH),e(UH,Zvr),e(FE,eFr),e(ie,oFr),e(ie,TE),e(TE,K2e),e(K2e,rFr),e(TE,tFr),e(TE,JH),e(JH,aFr),e(TE,nFr),e(ie,sFr),e(ie,ME),e(ME,Z2e),e(Z2e,lFr),e(ME,iFr),e(ME,YH),e(YH,dFr),e(ME,cFr),e(ie,fFr),e(ie,EE),e(EE,eve),e(eve,mFr),e(EE,gFr),e(EE,KH),e(KH,hFr),e(EE,pFr),e(ie,_Fr),e(ie,CE),e(CE,ove),e(ove,uFr),e(CE,bFr),e(CE,ZH),e(ZH,vFr),e(CE,FFr),e(xr,TFr),M(wE,xr,null),b(f,SDe,u),b(f,tc,u),e(tc,AE),e(AE,rve),M(Y8,rve,null),e(tc,MFr),e(tc,tve),e(tve,EFr),b(f,RDe,u),b(f,rr,u),M(K8,rr,null),e(rr,CFr),e(rr,ac),e(ac,wFr),e(ac,eU),e(eU,AFr),e(ac,LFr),e(ac,oU),e(oU,yFr),e(ac,xFr),e(rr,$Fr),e(rr,Z8),e(Z8,kFr),e(Z8,ave),e(ave,SFr),e(Z8,RFr),e(rr,PFr),e(rr,St),M(e9,St,null),e(St,BFr),e(St,nve),e(nve,IFr),e(St,NFr),e(St,nc),e(nc,qFr),e(nc,sve),e(sve,jFr),e(nc,DFr),e(nc,rU),e(rU,GFr),e(nc,OFr),e(St,VFr),M(LE,St,null),e(rr,XFr),e(rr,$r),M(o9,$r,null),e($r,zFr),e($r,lve),e(lve,WFr),e($r,QFr),e($r,an),e(an,HFr),e(an,ive),e(ive,UFr),e(an,JFr),e(an,dve),e(dve,YFr),e(an,KFr),e(an,cve),e(cve,ZFr),e(an,eTr),e($r,oTr),e($r,ye),e(ye,yE),e(yE,fve),e(fve,rTr),e(yE,tTr),e(yE,tU),e(tU,aTr),e(yE,nTr),e(ye,sTr),e(ye,xE),e(xE,mve),e(mve,lTr),e(xE,iTr),e(xE,aU),e(aU,dTr),e(xE,cTr),e(ye,fTr),e(ye,$E),e($E,gve),e(gve,mTr),e($E,gTr),e($E,nU),e(nU,hTr),e($E,pTr),e(ye,_Tr),e(ye,kE),e(kE,hve),e(hve,uTr),e(kE,bTr),e(kE,sU),e(sU,vTr),e(kE,FTr),e(ye,TTr),e(ye,SE),e(SE,pve),e(pve,MTr),e(SE,ETr),e(SE,lU),e(lU,CTr),e(SE,wTr),e(ye,ATr),e(ye,RE),e(RE,_ve),e(_ve,LTr),e(RE,yTr),e(RE,iU),e(iU,xTr),e(RE,$Tr),e(ye,kTr),e(ye,PE),e(PE,uve),e(uve,STr),e(PE,RTr),e(PE,dU),e(dU,PTr),e(PE,BTr),e(ye,ITr),e(ye,BE),e(BE,bve),e(bve,NTr),e(BE,qTr),e(BE,cU),e(cU,jTr),e(BE,DTr),e(ye,GTr),e(ye,IE),e(IE,vve),e(vve,OTr),e(IE,VTr),e(IE,fU),e(fU,XTr),e(IE,zTr),e(ye,WTr),e(ye,NE),e(NE,Fve),e(Fve,QTr),e(NE,HTr),e(NE,mU),e(mU,UTr),e(NE,JTr),e($r,YTr),M(qE,$r,null),b(f,PDe,u),b(f,sc,u),e(sc,jE),e(jE,Tve),M(r9,Tve,null),e(sc,KTr),e(sc,Mve),e(Mve,ZTr),b(f,BDe,u),b(f,tr,u),M(t9,tr,null),e(tr,eMr),e(tr,lc),e(lc,oMr),e(lc,gU),e(gU,rMr),e(lc,tMr),e(lc,hU),e(hU,aMr),e(lc,nMr),e(tr,sMr),e(tr,a9),e(a9,lMr),e(a9,Eve),e(Eve,iMr),e(a9,dMr),e(tr,cMr),e(tr,Rt),M(n9,Rt,null),e(Rt,fMr),e(Rt,Cve),e(Cve,mMr),e(Rt,gMr),e(Rt,ic),e(ic,hMr),e(ic,wve),e(wve,pMr),e(ic,_Mr),e(ic,pU),e(pU,uMr),e(ic,bMr),e(Rt,vMr),M(DE,Rt,null),e(tr,FMr),e(tr,kr),M(s9,kr,null),e(kr,TMr),e(kr,Ave),e(Ave,MMr),e(kr,EMr),e(kr,nn),e(nn,CMr),e(nn,Lve),e(Lve,wMr),e(nn,AMr),e(nn,yve),e(yve,LMr),e(nn,yMr),e(nn,xve),e(xve,xMr),e(nn,$Mr),e(kr,kMr),e(kr,oe),e(oe,GE),e(GE,$ve),e($ve,SMr),e(GE,RMr),e(GE,_U),e(_U,PMr),e(GE,BMr),e(oe,IMr),e(oe,OE),e(OE,kve),e(kve,NMr),e(OE,qMr),e(OE,uU),e(uU,jMr),e(OE,DMr),e(oe,GMr),e(oe,VE),e(VE,Sve),e(Sve,OMr),e(VE,VMr),e(VE,bU),e(bU,XMr),e(VE,zMr),e(oe,WMr),e(oe,XE),e(XE,Rve),e(Rve,QMr),e(XE,HMr),e(XE,vU),e(vU,UMr),e(XE,JMr),e(oe,YMr),e(oe,zE),e(zE,Pve),e(Pve,KMr),e(zE,ZMr),e(zE,FU),e(FU,eEr),e(zE,oEr),e(oe,rEr),e(oe,WE),e(WE,Bve),e(Bve,tEr),e(WE,aEr),e(WE,TU),e(TU,nEr),e(WE,sEr),e(oe,lEr),e(oe,QE),e(QE,Ive),e(Ive,iEr),e(QE,dEr),e(QE,MU),e(MU,cEr),e(QE,fEr),e(oe,mEr),e(oe,HE),e(HE,Nve),e(Nve,gEr),e(HE,hEr),e(HE,EU),e(EU,pEr),e(HE,_Er),e(oe,uEr),e(oe,UE),e(UE,qve),e(qve,bEr),e(UE,vEr),e(UE,CU),e(CU,FEr),e(UE,TEr),e(oe,MEr),e(oe,JE),e(JE,jve),e(jve,EEr),e(JE,CEr),e(JE,wU),e(wU,wEr),e(JE,AEr),e(oe,LEr),e(oe,YE),e(YE,Dve),e(Dve,yEr),e(YE,xEr),e(YE,AU),e(AU,$Er),e(YE,kEr),e(oe,SEr),e(oe,KE),e(KE,Gve),e(Gve,REr),e(KE,PEr),e(KE,LU),e(LU,BEr),e(KE,IEr),e(oe,NEr),e(oe,ZE),e(ZE,Ove),e(Ove,qEr),e(ZE,jEr),e(ZE,yU),e(yU,DEr),e(ZE,GEr),e(oe,OEr),e(oe,eC),e(eC,Vve),e(Vve,VEr),e(eC,XEr),e(eC,xU),e(xU,zEr),e(eC,WEr),e(oe,QEr),e(oe,oC),e(oC,Xve),e(Xve,HEr),e(oC,UEr),e(oC,$U),e($U,JEr),e(oC,YEr),e(oe,KEr),e(oe,rC),e(rC,zve),e(zve,ZEr),e(rC,eCr),e(rC,kU),e(kU,oCr),e(rC,rCr),e(oe,tCr),e(oe,tC),e(tC,Wve),e(Wve,aCr),e(tC,nCr),e(tC,SU),e(SU,sCr),e(tC,lCr),e(oe,iCr),e(oe,aC),e(aC,Qve),e(Qve,dCr),e(aC,cCr),e(aC,RU),e(RU,fCr),e(aC,mCr),e(oe,gCr),e(oe,nC),e(nC,Hve),e(Hve,hCr),e(nC,pCr),e(nC,PU),e(PU,_Cr),e(nC,uCr),e(oe,bCr),e(oe,sC),e(sC,Uve),e(Uve,vCr),e(sC,FCr),e(sC,BU),e(BU,TCr),e(sC,MCr),e(oe,ECr),e(oe,lC),e(lC,Jve),e(Jve,CCr),e(lC,wCr),e(lC,IU),e(IU,ACr),e(lC,LCr),e(oe,yCr),e(oe,iC),e(iC,Yve),e(Yve,xCr),e(iC,$Cr),e(iC,NU),e(NU,kCr),e(iC,SCr),e(oe,RCr),e(oe,dC),e(dC,Kve),e(Kve,PCr),e(dC,BCr),e(dC,qU),e(qU,ICr),e(dC,NCr),e(oe,qCr),e(oe,cC),e(cC,Zve),e(Zve,jCr),e(cC,DCr),e(cC,jU),e(jU,GCr),e(cC,OCr),e(oe,VCr),e(oe,fC),e(fC,eFe),e(eFe,XCr),e(fC,zCr),e(fC,DU),e(DU,WCr),e(fC,QCr),e(oe,HCr),e(oe,mC),e(mC,oFe),e(oFe,UCr),e(mC,JCr),e(mC,GU),e(GU,YCr),e(mC,KCr),e(kr,ZCr),M(gC,kr,null),b(f,IDe,u),b(f,dc,u),e(dc,hC),e(hC,rFe),M(l9,rFe,null),e(dc,e5r),e(dc,tFe),e(tFe,o5r),b(f,NDe,u),b(f,ar,u),M(i9,ar,null),e(ar,r5r),e(ar,cc),e(cc,t5r),e(cc,OU),e(OU,a5r),e(cc,n5r),e(cc,VU),e(VU,s5r),e(cc,l5r),e(ar,i5r),e(ar,d9),e(d9,d5r),e(d9,aFe),e(aFe,c5r),e(d9,f5r),e(ar,m5r),e(ar,Pt),M(c9,Pt,null),e(Pt,g5r),e(Pt,nFe),e(nFe,h5r),e(Pt,p5r),e(Pt,fc),e(fc,_5r),e(fc,sFe),e(sFe,u5r),e(fc,b5r),e(fc,XU),e(XU,v5r),e(fc,F5r),e(Pt,T5r),M(pC,Pt,null),e(ar,M5r),e(ar,Sr),M(f9,Sr,null),e(Sr,E5r),e(Sr,lFe),e(lFe,C5r),e(Sr,w5r),e(Sr,sn),e(sn,A5r),e(sn,iFe),e(iFe,L5r),e(sn,y5r),e(sn,dFe),e(dFe,x5r),e(sn,$5r),e(sn,cFe),e(cFe,k5r),e(sn,S5r),e(Sr,R5r),e(Sr,pe),e(pe,_C),e(_C,fFe),e(fFe,P5r),e(_C,B5r),e(_C,zU),e(zU,I5r),e(_C,N5r),e(pe,q5r),e(pe,uC),e(uC,mFe),e(mFe,j5r),e(uC,D5r),e(uC,WU),e(WU,G5r),e(uC,O5r),e(pe,V5r),e(pe,bC),e(bC,gFe),e(gFe,X5r),e(bC,z5r),e(bC,QU),e(QU,W5r),e(bC,Q5r),e(pe,H5r),e(pe,vC),e(vC,hFe),e(hFe,U5r),e(vC,J5r),e(vC,HU),e(HU,Y5r),e(vC,K5r),e(pe,Z5r),e(pe,FC),e(FC,pFe),e(pFe,e3r),e(FC,o3r),e(FC,UU),e(UU,r3r),e(FC,t3r),e(pe,a3r),e(pe,TC),e(TC,_Fe),e(_Fe,n3r),e(TC,s3r),e(TC,JU),e(JU,l3r),e(TC,i3r),e(pe,d3r),e(pe,MC),e(MC,uFe),e(uFe,c3r),e(MC,f3r),e(MC,YU),e(YU,m3r),e(MC,g3r),e(pe,h3r),e(pe,EC),e(EC,bFe),e(bFe,p3r),e(EC,_3r),e(EC,KU),e(KU,u3r),e(EC,b3r),e(pe,v3r),e(pe,CC),e(CC,vFe),e(vFe,F3r),e(CC,T3r),e(CC,ZU),e(ZU,M3r),e(CC,E3r),e(pe,C3r),e(pe,wC),e(wC,FFe),e(FFe,w3r),e(wC,A3r),e(wC,eJ),e(eJ,L3r),e(wC,y3r),e(pe,x3r),e(pe,AC),e(AC,TFe),e(TFe,$3r),e(AC,k3r),e(AC,oJ),e(oJ,S3r),e(AC,R3r),e(pe,P3r),e(pe,LC),e(LC,MFe),e(MFe,B3r),e(LC,I3r),e(LC,rJ),e(rJ,N3r),e(LC,q3r),e(pe,j3r),e(pe,yC),e(yC,EFe),e(EFe,D3r),e(yC,G3r),e(yC,tJ),e(tJ,O3r),e(yC,V3r),e(pe,X3r),e(pe,xC),e(xC,CFe),e(CFe,z3r),e(xC,W3r),e(xC,aJ),e(aJ,Q3r),e(xC,H3r),e(pe,U3r),e(pe,$C),e($C,wFe),e(wFe,J3r),e($C,Y3r),e($C,nJ),e(nJ,K3r),e($C,Z3r),e(pe,e0r),e(pe,kC),e(kC,AFe),e(AFe,o0r),e(kC,r0r),e(kC,sJ),e(sJ,t0r),e(kC,a0r),e(pe,n0r),e(pe,SC),e(SC,LFe),e(LFe,s0r),e(SC,l0r),e(SC,lJ),e(lJ,i0r),e(SC,d0r),e(Sr,c0r),M(RC,Sr,null),b(f,qDe,u),b(f,mc,u),e(mc,PC),e(PC,yFe),M(m9,yFe,null),e(mc,f0r),e(mc,xFe),e(xFe,m0r),b(f,jDe,u),b(f,nr,u),M(g9,nr,null),e(nr,g0r),e(nr,gc),e(gc,h0r),e(gc,iJ),e(iJ,p0r),e(gc,_0r),e(gc,dJ),e(dJ,u0r),e(gc,b0r),e(nr,v0r),e(nr,h9),e(h9,F0r),e(h9,$Fe),e($Fe,T0r),e(h9,M0r),e(nr,E0r),e(nr,Bt),M(p9,Bt,null),e(Bt,C0r),e(Bt,kFe),e(kFe,w0r),e(Bt,A0r),e(Bt,hc),e(hc,L0r),e(hc,SFe),e(SFe,y0r),e(hc,x0r),e(hc,cJ),e(cJ,$0r),e(hc,k0r),e(Bt,S0r),M(BC,Bt,null),e(nr,R0r),e(nr,Rr),M(_9,Rr,null),e(Rr,P0r),e(Rr,RFe),e(RFe,B0r),e(Rr,I0r),e(Rr,ln),e(ln,N0r),e(ln,PFe),e(PFe,q0r),e(ln,j0r),e(ln,BFe),e(BFe,D0r),e(ln,G0r),e(ln,IFe),e(IFe,O0r),e(ln,V0r),e(Rr,X0r),e(Rr,u9),e(u9,IC),e(IC,NFe),e(NFe,z0r),e(IC,W0r),e(IC,fJ),e(fJ,Q0r),e(IC,H0r),e(u9,U0r),e(u9,NC),e(NC,qFe),e(qFe,J0r),e(NC,Y0r),e(NC,mJ),e(mJ,K0r),e(NC,Z0r),e(Rr,ewr),M(qC,Rr,null),b(f,DDe,u),b(f,pc,u),e(pc,jC),e(jC,jFe),M(b9,jFe,null),e(pc,owr),e(pc,DFe),e(DFe,rwr),b(f,GDe,u),b(f,sr,u),M(v9,sr,null),e(sr,twr),e(sr,_c),e(_c,awr),e(_c,gJ),e(gJ,nwr),e(_c,swr),e(_c,hJ),e(hJ,lwr),e(_c,iwr),e(sr,dwr),e(sr,F9),e(F9,cwr),e(F9,GFe),e(GFe,fwr),e(F9,mwr),e(sr,gwr),e(sr,It),M(T9,It,null),e(It,hwr),e(It,OFe),e(OFe,pwr),e(It,_wr),e(It,uc),e(uc,uwr),e(uc,VFe),e(VFe,bwr),e(uc,vwr),e(uc,pJ),e(pJ,Fwr),e(uc,Twr),e(It,Mwr),M(DC,It,null),e(sr,Ewr),e(sr,Pr),M(M9,Pr,null),e(Pr,Cwr),e(Pr,XFe),e(XFe,wwr),e(Pr,Awr),e(Pr,dn),e(dn,Lwr),e(dn,zFe),e(zFe,ywr),e(dn,xwr),e(dn,WFe),e(WFe,$wr),e(dn,kwr),e(dn,QFe),e(QFe,Swr),e(dn,Rwr),e(Pr,Pwr),e(Pr,HFe),e(HFe,GC),e(GC,UFe),e(UFe,Bwr),e(GC,Iwr),e(GC,_J),e(_J,Nwr),e(GC,qwr),e(Pr,jwr),M(OC,Pr,null),b(f,ODe,u),b(f,bc,u),e(bc,VC),e(VC,JFe),M(E9,JFe,null),e(bc,Dwr),e(bc,YFe),e(YFe,Gwr),b(f,VDe,u),b(f,lr,u),M(C9,lr,null),e(lr,Owr),e(lr,vc),e(vc,Vwr),e(vc,uJ),e(uJ,Xwr),e(vc,zwr),e(vc,bJ),e(bJ,Wwr),e(vc,Qwr),e(lr,Hwr),e(lr,w9),e(w9,Uwr),e(w9,KFe),e(KFe,Jwr),e(w9,Ywr),e(lr,Kwr),e(lr,Nt),M(A9,Nt,null),e(Nt,Zwr),e(Nt,ZFe),e(ZFe,eAr),e(Nt,oAr),e(Nt,Fc),e(Fc,rAr),e(Fc,eTe),e(eTe,tAr),e(Fc,aAr),e(Fc,vJ),e(vJ,nAr),e(Fc,sAr),e(Nt,lAr),M(XC,Nt,null),e(lr,iAr),e(lr,Br),M(L9,Br,null),e(Br,dAr),e(Br,oTe),e(oTe,cAr),e(Br,fAr),e(Br,cn),e(cn,mAr),e(cn,rTe),e(rTe,gAr),e(cn,hAr),e(cn,tTe),e(tTe,pAr),e(cn,_Ar),e(cn,aTe),e(aTe,uAr),e(cn,bAr),e(Br,vAr),e(Br,de),e(de,zC),e(zC,nTe),e(nTe,FAr),e(zC,TAr),e(zC,FJ),e(FJ,MAr),e(zC,EAr),e(de,CAr),e(de,WC),e(WC,sTe),e(sTe,wAr),e(WC,AAr),e(WC,TJ),e(TJ,LAr),e(WC,yAr),e(de,xAr),e(de,QC),e(QC,lTe),e(lTe,$Ar),e(QC,kAr),e(QC,MJ),e(MJ,SAr),e(QC,RAr),e(de,PAr),e(de,HC),e(HC,iTe),e(iTe,BAr),e(HC,IAr),e(HC,EJ),e(EJ,NAr),e(HC,qAr),e(de,jAr),e(de,UC),e(UC,dTe),e(dTe,DAr),e(UC,GAr),e(UC,CJ),e(CJ,OAr),e(UC,VAr),e(de,XAr),e(de,JC),e(JC,cTe),e(cTe,zAr),e(JC,WAr),e(JC,wJ),e(wJ,QAr),e(JC,HAr),e(de,UAr),e(de,YC),e(YC,fTe),e(fTe,JAr),e(YC,YAr),e(YC,AJ),e(AJ,KAr),e(YC,ZAr),e(de,e6r),e(de,KC),e(KC,mTe),e(mTe,o6r),e(KC,r6r),e(KC,LJ),e(LJ,t6r),e(KC,a6r),e(de,n6r),e(de,ZC),e(ZC,gTe),e(gTe,s6r),e(ZC,l6r),e(ZC,yJ),e(yJ,i6r),e(ZC,d6r),e(de,c6r),e(de,e5),e(e5,hTe),e(hTe,f6r),e(e5,m6r),e(e5,xJ),e(xJ,g6r),e(e5,h6r),e(de,p6r),e(de,o5),e(o5,pTe),e(pTe,_6r),e(o5,u6r),e(o5,$J),e($J,b6r),e(o5,v6r),e(de,F6r),e(de,r5),e(r5,_Te),e(_Te,T6r),e(r5,M6r),e(r5,kJ),e(kJ,E6r),e(r5,C6r),e(de,w6r),e(de,t5),e(t5,uTe),e(uTe,A6r),e(t5,L6r),e(t5,SJ),e(SJ,y6r),e(t5,x6r),e(de,$6r),e(de,a5),e(a5,bTe),e(bTe,k6r),e(a5,S6r),e(a5,RJ),e(RJ,R6r),e(a5,P6r),e(de,B6r),e(de,n5),e(n5,vTe),e(vTe,I6r),e(n5,N6r),e(n5,PJ),e(PJ,q6r),e(n5,j6r),e(de,D6r),e(de,s5),e(s5,FTe),e(FTe,G6r),e(s5,O6r),e(s5,BJ),e(BJ,V6r),e(s5,X6r),e(de,z6r),e(de,l5),e(l5,TTe),e(TTe,W6r),e(l5,Q6r),e(l5,IJ),e(IJ,H6r),e(l5,U6r),e(de,J6r),e(de,i5),e(i5,MTe),e(MTe,Y6r),e(i5,K6r),e(i5,NJ),e(NJ,Z6r),e(i5,eLr),e(de,oLr),e(de,d5),e(d5,ETe),e(ETe,rLr),e(d5,tLr),e(d5,qJ),e(qJ,aLr),e(d5,nLr),e(de,sLr),e(de,c5),e(c5,CTe),e(CTe,lLr),e(c5,iLr),e(c5,jJ),e(jJ,dLr),e(c5,cLr),e(Br,fLr),M(f5,Br,null),b(f,XDe,u),b(f,Tc,u),e(Tc,m5),e(m5,wTe),M(y9,wTe,null),e(Tc,mLr),e(Tc,ATe),e(ATe,gLr),b(f,zDe,u),b(f,ir,u),M(x9,ir,null),e(ir,hLr),e(ir,Mc),e(Mc,pLr),e(Mc,DJ),e(DJ,_Lr),e(Mc,uLr),e(Mc,GJ),e(GJ,bLr),e(Mc,vLr),e(ir,FLr),e(ir,$9),e($9,TLr),e($9,LTe),e(LTe,MLr),e($9,ELr),e(ir,CLr),e(ir,qt),M(k9,qt,null),e(qt,wLr),e(qt,yTe),e(yTe,ALr),e(qt,LLr),e(qt,Ec),e(Ec,yLr),e(Ec,xTe),e(xTe,xLr),e(Ec,$Lr),e(Ec,OJ),e(OJ,kLr),e(Ec,SLr),e(qt,RLr),M(g5,qt,null),e(ir,PLr),e(ir,Ir),M(S9,Ir,null),e(Ir,BLr),e(Ir,$Te),e($Te,ILr),e(Ir,NLr),e(Ir,fn),e(fn,qLr),e(fn,kTe),e(kTe,jLr),e(fn,DLr),e(fn,STe),e(STe,GLr),e(fn,OLr),e(fn,RTe),e(RTe,VLr),e(fn,XLr),e(Ir,zLr),e(Ir,ce),e(ce,h5),e(h5,PTe),e(PTe,WLr),e(h5,QLr),e(h5,VJ),e(VJ,HLr),e(h5,ULr),e(ce,JLr),e(ce,p5),e(p5,BTe),e(BTe,YLr),e(p5,KLr),e(p5,XJ),e(XJ,ZLr),e(p5,eyr),e(ce,oyr),e(ce,_5),e(_5,ITe),e(ITe,ryr),e(_5,tyr),e(_5,zJ),e(zJ,ayr),e(_5,nyr),e(ce,syr),e(ce,u5),e(u5,NTe),e(NTe,lyr),e(u5,iyr),e(u5,WJ),e(WJ,dyr),e(u5,cyr),e(ce,fyr),e(ce,b5),e(b5,qTe),e(qTe,myr),e(b5,gyr),e(b5,QJ),e(QJ,hyr),e(b5,pyr),e(ce,_yr),e(ce,v5),e(v5,jTe),e(jTe,uyr),e(v5,byr),e(v5,HJ),e(HJ,vyr),e(v5,Fyr),e(ce,Tyr),e(ce,F5),e(F5,DTe),e(DTe,Myr),e(F5,Eyr),e(F5,UJ),e(UJ,Cyr),e(F5,wyr),e(ce,Ayr),e(ce,T5),e(T5,GTe),e(GTe,Lyr),e(T5,yyr),e(T5,JJ),e(JJ,xyr),e(T5,$yr),e(ce,kyr),e(ce,M5),e(M5,OTe),e(OTe,Syr),e(M5,Ryr),e(M5,YJ),e(YJ,Pyr),e(M5,Byr),e(ce,Iyr),e(ce,E5),e(E5,VTe),e(VTe,Nyr),e(E5,qyr),e(E5,KJ),e(KJ,jyr),e(E5,Dyr),e(ce,Gyr),e(ce,C5),e(C5,XTe),e(XTe,Oyr),e(C5,Vyr),e(C5,ZJ),e(ZJ,Xyr),e(C5,zyr),e(ce,Wyr),e(ce,w5),e(w5,zTe),e(zTe,Qyr),e(w5,Hyr),e(w5,eY),e(eY,Uyr),e(w5,Jyr),e(ce,Yyr),e(ce,A5),e(A5,WTe),e(WTe,Kyr),e(A5,Zyr),e(A5,oY),e(oY,e8r),e(A5,o8r),e(ce,r8r),e(ce,L5),e(L5,QTe),e(QTe,t8r),e(L5,a8r),e(L5,rY),e(rY,n8r),e(L5,s8r),e(ce,l8r),e(ce,y5),e(y5,HTe),e(HTe,i8r),e(y5,d8r),e(y5,tY),e(tY,c8r),e(y5,f8r),e(ce,m8r),e(ce,x5),e(x5,UTe),e(UTe,g8r),e(x5,h8r),e(x5,aY),e(aY,p8r),e(x5,_8r),e(ce,u8r),e(ce,$5),e($5,JTe),e(JTe,b8r),e($5,v8r),e($5,nY),e(nY,F8r),e($5,T8r),e(ce,M8r),e(ce,k5),e(k5,YTe),e(YTe,E8r),e(k5,C8r),e(k5,sY),e(sY,w8r),e(k5,A8r),e(ce,L8r),e(ce,S5),e(S5,KTe),e(KTe,y8r),e(S5,x8r),e(S5,lY),e(lY,$8r),e(S5,k8r),e(ce,S8r),e(ce,R5),e(R5,ZTe),e(ZTe,R8r),e(R5,P8r),e(R5,iY),e(iY,B8r),e(R5,I8r),e(Ir,N8r),M(P5,Ir,null),b(f,WDe,u),b(f,Cc,u),e(Cc,B5),e(B5,eMe),M(R9,eMe,null),e(Cc,q8r),e(Cc,oMe),e(oMe,j8r),b(f,QDe,u),b(f,dr,u),M(P9,dr,null),e(dr,D8r),e(dr,wc),e(wc,G8r),e(wc,dY),e(dY,O8r),e(wc,V8r),e(wc,cY),e(cY,X8r),e(wc,z8r),e(dr,W8r),e(dr,B9),e(B9,Q8r),e(B9,rMe),e(rMe,H8r),e(B9,U8r),e(dr,J8r),e(dr,jt),M(I9,jt,null),e(jt,Y8r),e(jt,tMe),e(tMe,K8r),e(jt,Z8r),e(jt,Ac),e(Ac,e9r),e(Ac,aMe),e(aMe,o9r),e(Ac,r9r),e(Ac,fY),e(fY,t9r),e(Ac,a9r),e(jt,n9r),M(I5,jt,null),e(dr,s9r),e(dr,Nr),M(N9,Nr,null),e(Nr,l9r),e(Nr,nMe),e(nMe,i9r),e(Nr,d9r),e(Nr,mn),e(mn,c9r),e(mn,sMe),e(sMe,f9r),e(mn,m9r),e(mn,lMe),e(lMe,g9r),e(mn,h9r),e(mn,iMe),e(iMe,p9r),e(mn,_9r),e(Nr,u9r),e(Nr,dMe),e(dMe,N5),e(N5,cMe),e(cMe,b9r),e(N5,v9r),e(N5,mY),e(mY,F9r),e(N5,T9r),e(Nr,M9r),M(q5,Nr,null),b(f,HDe,u),b(f,Lc,u),e(Lc,j5),e(j5,fMe),M(q9,fMe,null),e(Lc,E9r),e(Lc,mMe),e(mMe,C9r),b(f,UDe,u),b(f,cr,u),M(j9,cr,null),e(cr,w9r),e(cr,yc),e(yc,A9r),e(yc,gY),e(gY,L9r),e(yc,y9r),e(yc,hY),e(hY,x9r),e(yc,$9r),e(cr,k9r),e(cr,D9),e(D9,S9r),e(D9,gMe),e(gMe,R9r),e(D9,P9r),e(cr,B9r),e(cr,Dt),M(G9,Dt,null),e(Dt,I9r),e(Dt,hMe),e(hMe,N9r),e(Dt,q9r),e(Dt,xc),e(xc,j9r),e(xc,pMe),e(pMe,D9r),e(xc,G9r),e(xc,pY),e(pY,O9r),e(xc,V9r),e(Dt,X9r),M(D5,Dt,null),e(cr,z9r),e(cr,qr),M(O9,qr,null),e(qr,W9r),e(qr,_Me),e(_Me,Q9r),e(qr,H9r),e(qr,gn),e(gn,U9r),e(gn,uMe),e(uMe,J9r),e(gn,Y9r),e(gn,bMe),e(bMe,K9r),e(gn,Z9r),e(gn,vMe),e(vMe,exr),e(gn,oxr),e(qr,rxr),e(qr,FMe),e(FMe,G5),e(G5,TMe),e(TMe,txr),e(G5,axr),e(G5,_Y),e(_Y,nxr),e(G5,sxr),e(qr,lxr),M(O5,qr,null),b(f,JDe,u),b(f,$c,u),e($c,V5),e(V5,MMe),M(V9,MMe,null),e($c,ixr),e($c,EMe),e(EMe,dxr),b(f,YDe,u),b(f,fr,u),M(X9,fr,null),e(fr,cxr),e(fr,kc),e(kc,fxr),e(kc,uY),e(uY,mxr),e(kc,gxr),e(kc,bY),e(bY,hxr),e(kc,pxr),e(fr,_xr),e(fr,z9),e(z9,uxr),e(z9,CMe),e(CMe,bxr),e(z9,vxr),e(fr,Fxr),e(fr,Gt),M(W9,Gt,null),e(Gt,Txr),e(Gt,wMe),e(wMe,Mxr),e(Gt,Exr),e(Gt,Sc),e(Sc,Cxr),e(Sc,AMe),e(AMe,wxr),e(Sc,Axr),e(Sc,vY),e(vY,Lxr),e(Sc,yxr),e(Gt,xxr),M(X5,Gt,null),e(fr,$xr),e(fr,jr),M(Q9,jr,null),e(jr,kxr),e(jr,LMe),e(LMe,Sxr),e(jr,Rxr),e(jr,hn),e(hn,Pxr),e(hn,yMe),e(yMe,Bxr),e(hn,Ixr),e(hn,xMe),e(xMe,Nxr),e(hn,qxr),e(hn,$Me),e($Me,jxr),e(hn,Dxr),e(jr,Gxr),e(jr,re),e(re,z5),e(z5,kMe),e(kMe,Oxr),e(z5,Vxr),e(z5,FY),e(FY,Xxr),e(z5,zxr),e(re,Wxr),e(re,W5),e(W5,SMe),e(SMe,Qxr),e(W5,Hxr),e(W5,TY),e(TY,Uxr),e(W5,Jxr),e(re,Yxr),e(re,Q5),e(Q5,RMe),e(RMe,Kxr),e(Q5,Zxr),e(Q5,MY),e(MY,e$r),e(Q5,o$r),e(re,r$r),e(re,H5),e(H5,PMe),e(PMe,t$r),e(H5,a$r),e(H5,EY),e(EY,n$r),e(H5,s$r),e(re,l$r),e(re,U5),e(U5,BMe),e(BMe,i$r),e(U5,d$r),e(U5,CY),e(CY,c$r),e(U5,f$r),e(re,m$r),e(re,J5),e(J5,IMe),e(IMe,g$r),e(J5,h$r),e(J5,wY),e(wY,p$r),e(J5,_$r),e(re,u$r),e(re,Y5),e(Y5,NMe),e(NMe,b$r),e(Y5,v$r),e(Y5,AY),e(AY,F$r),e(Y5,T$r),e(re,M$r),e(re,K5),e(K5,qMe),e(qMe,E$r),e(K5,C$r),e(K5,LY),e(LY,w$r),e(K5,A$r),e(re,L$r),e(re,Z5),e(Z5,jMe),e(jMe,y$r),e(Z5,x$r),e(Z5,yY),e(yY,$$r),e(Z5,k$r),e(re,S$r),e(re,e3),e(e3,DMe),e(DMe,R$r),e(e3,P$r),e(e3,xY),e(xY,B$r),e(e3,I$r),e(re,N$r),e(re,o3),e(o3,GMe),e(GMe,q$r),e(o3,j$r),e(o3,$Y),e($Y,D$r),e(o3,G$r),e(re,O$r),e(re,r3),e(r3,OMe),e(OMe,V$r),e(r3,X$r),e(r3,kY),e(kY,z$r),e(r3,W$r),e(re,Q$r),e(re,t3),e(t3,VMe),e(VMe,H$r),e(t3,U$r),e(t3,SY),e(SY,J$r),e(t3,Y$r),e(re,K$r),e(re,a3),e(a3,XMe),e(XMe,Z$r),e(a3,ekr),e(a3,RY),e(RY,okr),e(a3,rkr),e(re,tkr),e(re,n3),e(n3,zMe),e(zMe,akr),e(n3,nkr),e(n3,PY),e(PY,skr),e(n3,lkr),e(re,ikr),e(re,s3),e(s3,WMe),e(WMe,dkr),e(s3,ckr),e(s3,BY),e(BY,fkr),e(s3,mkr),e(re,gkr),e(re,l3),e(l3,QMe),e(QMe,hkr),e(l3,pkr),e(l3,IY),e(IY,_kr),e(l3,ukr),e(re,bkr),e(re,i3),e(i3,HMe),e(HMe,vkr),e(i3,Fkr),e(i3,NY),e(NY,Tkr),e(i3,Mkr),e(re,Ekr),e(re,d3),e(d3,UMe),e(UMe,Ckr),e(d3,wkr),e(d3,qY),e(qY,Akr),e(d3,Lkr),e(re,ykr),e(re,c3),e(c3,JMe),e(JMe,xkr),e(c3,$kr),e(c3,jY),e(jY,kkr),e(c3,Skr),e(re,Rkr),e(re,f3),e(f3,YMe),e(YMe,Pkr),e(f3,Bkr),e(f3,DY),e(DY,Ikr),e(f3,Nkr),e(re,qkr),e(re,m3),e(m3,KMe),e(KMe,jkr),e(m3,Dkr),e(m3,GY),e(GY,Gkr),e(m3,Okr),e(re,Vkr),e(re,g3),e(g3,ZMe),e(ZMe,Xkr),e(g3,zkr),e(g3,OY),e(OY,Wkr),e(g3,Qkr),e(re,Hkr),e(re,h3),e(h3,eEe),e(eEe,Ukr),e(h3,Jkr),e(h3,VY),e(VY,Ykr),e(h3,Kkr),e(re,Zkr),e(re,p3),e(p3,oEe),e(oEe,eSr),e(p3,oSr),e(p3,XY),e(XY,rSr),e(p3,tSr),e(re,aSr),e(re,_3),e(_3,rEe),e(rEe,nSr),e(_3,sSr),e(_3,zY),e(zY,lSr),e(_3,iSr),e(jr,dSr),M(u3,jr,null),b(f,KDe,u),b(f,Rc,u),e(Rc,b3),e(b3,tEe),M(H9,tEe,null),e(Rc,cSr),e(Rc,aEe),e(aEe,fSr),b(f,ZDe,u),b(f,mr,u),M(U9,mr,null),e(mr,mSr),e(mr,Pc),e(Pc,gSr),e(Pc,WY),e(WY,hSr),e(Pc,pSr),e(Pc,QY),e(QY,_Sr),e(Pc,uSr),e(mr,bSr),e(mr,J9),e(J9,vSr),e(J9,nEe),e(nEe,FSr),e(J9,TSr),e(mr,MSr),e(mr,Ot),M(Y9,Ot,null),e(Ot,ESr),e(Ot,sEe),e(sEe,CSr),e(Ot,wSr),e(Ot,Bc),e(Bc,ASr),e(Bc,lEe),e(lEe,LSr),e(Bc,ySr),e(Bc,HY),e(HY,xSr),e(Bc,$Sr),e(Ot,kSr),M(v3,Ot,null),e(mr,SSr),e(mr,Dr),M(K9,Dr,null),e(Dr,RSr),e(Dr,iEe),e(iEe,PSr),e(Dr,BSr),e(Dr,pn),e(pn,ISr),e(pn,dEe),e(dEe,NSr),e(pn,qSr),e(pn,cEe),e(cEe,jSr),e(pn,DSr),e(pn,fEe),e(fEe,GSr),e(pn,OSr),e(Dr,VSr),e(Dr,xe),e(xe,F3),e(F3,mEe),e(mEe,XSr),e(F3,zSr),e(F3,UY),e(UY,WSr),e(F3,QSr),e(xe,HSr),e(xe,T3),e(T3,gEe),e(gEe,USr),e(T3,JSr),e(T3,JY),e(JY,YSr),e(T3,KSr),e(xe,ZSr),e(xe,M3),e(M3,hEe),e(hEe,eRr),e(M3,oRr),e(M3,YY),e(YY,rRr),e(M3,tRr),e(xe,aRr),e(xe,E3),e(E3,pEe),e(pEe,nRr),e(E3,sRr),e(E3,KY),e(KY,lRr),e(E3,iRr),e(xe,dRr),e(xe,C3),e(C3,_Ee),e(_Ee,cRr),e(C3,fRr),e(C3,ZY),e(ZY,mRr),e(C3,gRr),e(xe,hRr),e(xe,w3),e(w3,uEe),e(uEe,pRr),e(w3,_Rr),e(w3,eK),e(eK,uRr),e(w3,bRr),e(xe,vRr),e(xe,A3),e(A3,bEe),e(bEe,FRr),e(A3,TRr),e(A3,oK),e(oK,MRr),e(A3,ERr),e(xe,CRr),e(xe,L3),e(L3,vEe),e(vEe,wRr),e(L3,ARr),e(L3,rK),e(rK,LRr),e(L3,yRr),e(xe,xRr),e(xe,y3),e(y3,FEe),e(FEe,$Rr),e(y3,kRr),e(y3,tK),e(tK,SRr),e(y3,RRr),e(xe,PRr),e(xe,x3),e(x3,TEe),e(TEe,BRr),e(x3,IRr),e(x3,aK),e(aK,NRr),e(x3,qRr),e(Dr,jRr),M($3,Dr,null),b(f,eGe,u),b(f,Ic,u),e(Ic,k3),e(k3,MEe),M(Z9,MEe,null),e(Ic,DRr),e(Ic,EEe),e(EEe,GRr),b(f,oGe,u),b(f,gr,u),M(ex,gr,null),e(gr,ORr),e(gr,Nc),e(Nc,VRr),e(Nc,nK),e(nK,XRr),e(Nc,zRr),e(Nc,sK),e(sK,WRr),e(Nc,QRr),e(gr,HRr),e(gr,ox),e(ox,URr),e(ox,CEe),e(CEe,JRr),e(ox,YRr),e(gr,KRr),e(gr,Vt),M(rx,Vt,null),e(Vt,ZRr),e(Vt,wEe),e(wEe,ePr),e(Vt,oPr),e(Vt,qc),e(qc,rPr),e(qc,AEe),e(AEe,tPr),e(qc,aPr),e(qc,lK),e(lK,nPr),e(qc,sPr),e(Vt,lPr),M(S3,Vt,null),e(gr,iPr),e(gr,Gr),M(tx,Gr,null),e(Gr,dPr),e(Gr,LEe),e(LEe,cPr),e(Gr,fPr),e(Gr,_n),e(_n,mPr),e(_n,yEe),e(yEe,gPr),e(_n,hPr),e(_n,xEe),e(xEe,pPr),e(_n,_Pr),e(_n,$Ee),e($Ee,uPr),e(_n,bPr),e(Gr,vPr),e(Gr,Ee),e(Ee,R3),e(R3,kEe),e(kEe,FPr),e(R3,TPr),e(R3,iK),e(iK,MPr),e(R3,EPr),e(Ee,CPr),e(Ee,P3),e(P3,SEe),e(SEe,wPr),e(P3,APr),e(P3,dK),e(dK,LPr),e(P3,yPr),e(Ee,xPr),e(Ee,B3),e(B3,REe),e(REe,$Pr),e(B3,kPr),e(B3,cK),e(cK,SPr),e(B3,RPr),e(Ee,PPr),e(Ee,I3),e(I3,PEe),e(PEe,BPr),e(I3,IPr),e(I3,fK),e(fK,NPr),e(I3,qPr),e(Ee,jPr),e(Ee,N3),e(N3,BEe),e(BEe,DPr),e(N3,GPr),e(N3,mK),e(mK,OPr),e(N3,VPr),e(Ee,XPr),e(Ee,q3),e(q3,IEe),e(IEe,zPr),e(q3,WPr),e(q3,gK),e(gK,QPr),e(q3,HPr),e(Ee,UPr),e(Ee,j3),e(j3,NEe),e(NEe,JPr),e(j3,YPr),e(j3,hK),e(hK,KPr),e(j3,ZPr),e(Ee,eBr),e(Ee,D3),e(D3,qEe),e(qEe,oBr),e(D3,rBr),e(D3,pK),e(pK,tBr),e(D3,aBr),e(Ee,nBr),e(Ee,G3),e(G3,jEe),e(jEe,sBr),e(G3,lBr),e(G3,_K),e(_K,iBr),e(G3,dBr),e(Ee,cBr),e(Ee,O3),e(O3,DEe),e(DEe,fBr),e(O3,mBr),e(O3,uK),e(uK,gBr),e(O3,hBr),e(Ee,pBr),e(Ee,V3),e(V3,GEe),e(GEe,_Br),e(V3,uBr),e(V3,bK),e(bK,bBr),e(V3,vBr),e(Ee,FBr),e(Ee,X3),e(X3,OEe),e(OEe,TBr),e(X3,MBr),e(X3,vK),e(vK,EBr),e(X3,CBr),e(Gr,wBr),M(z3,Gr,null),b(f,rGe,u),b(f,jc,u),e(jc,W3),e(W3,VEe),M(ax,VEe,null),e(jc,ABr),e(jc,XEe),e(XEe,LBr),b(f,tGe,u),b(f,hr,u),M(nx,hr,null),e(hr,yBr),e(hr,Dc),e(Dc,xBr),e(Dc,FK),e(FK,$Br),e(Dc,kBr),e(Dc,TK),e(TK,SBr),e(Dc,RBr),e(hr,PBr),e(hr,sx),e(sx,BBr),e(sx,zEe),e(zEe,IBr),e(sx,NBr),e(hr,qBr),e(hr,Xt),M(lx,Xt,null),e(Xt,jBr),e(Xt,WEe),e(WEe,DBr),e(Xt,GBr),e(Xt,Gc),e(Gc,OBr),e(Gc,QEe),e(QEe,VBr),e(Gc,XBr),e(Gc,MK),e(MK,zBr),e(Gc,WBr),e(Xt,QBr),M(Q3,Xt,null),e(hr,HBr),e(hr,Or),M(ix,Or,null),e(Or,UBr),e(Or,HEe),e(HEe,JBr),e(Or,YBr),e(Or,un),e(un,KBr),e(un,UEe),e(UEe,ZBr),e(un,eIr),e(un,JEe),e(JEe,oIr),e(un,rIr),e(un,YEe),e(YEe,tIr),e(un,aIr),e(Or,nIr),e(Or,$e),e($e,H3),e(H3,KEe),e(KEe,sIr),e(H3,lIr),e(H3,EK),e(EK,iIr),e(H3,dIr),e($e,cIr),e($e,U3),e(U3,ZEe),e(ZEe,fIr),e(U3,mIr),e(U3,CK),e(CK,gIr),e(U3,hIr),e($e,pIr),e($e,J3),e(J3,eCe),e(eCe,_Ir),e(J3,uIr),e(J3,wK),e(wK,bIr),e(J3,vIr),e($e,FIr),e($e,Y3),e(Y3,oCe),e(oCe,TIr),e(Y3,MIr),e(Y3,AK),e(AK,EIr),e(Y3,CIr),e($e,wIr),e($e,K3),e(K3,rCe),e(rCe,AIr),e(K3,LIr),e(K3,LK),e(LK,yIr),e(K3,xIr),e($e,$Ir),e($e,Z3),e(Z3,tCe),e(tCe,kIr),e(Z3,SIr),e(Z3,yK),e(yK,RIr),e(Z3,PIr),e($e,BIr),e($e,e0),e(e0,aCe),e(aCe,IIr),e(e0,NIr),e(e0,xK),e(xK,qIr),e(e0,jIr),e($e,DIr),e($e,o0),e(o0,nCe),e(nCe,GIr),e(o0,OIr),e(o0,$K),e($K,VIr),e(o0,XIr),e($e,zIr),e($e,r0),e(r0,sCe),e(sCe,WIr),e(r0,QIr),e(r0,kK),e(kK,HIr),e(r0,UIr),e($e,JIr),e($e,t0),e(t0,lCe),e(lCe,YIr),e(t0,KIr),e(t0,SK),e(SK,ZIr),e(t0,eNr),e(Or,oNr),M(a0,Or,null),b(f,aGe,u),b(f,Oc,u),e(Oc,n0),e(n0,iCe),M(dx,iCe,null),e(Oc,rNr),e(Oc,dCe),e(dCe,tNr),b(f,nGe,u),b(f,pr,u),M(cx,pr,null),e(pr,aNr),e(pr,Vc),e(Vc,nNr),e(Vc,RK),e(RK,sNr),e(Vc,lNr),e(Vc,PK),e(PK,iNr),e(Vc,dNr),e(pr,cNr),e(pr,fx),e(fx,fNr),e(fx,cCe),e(cCe,mNr),e(fx,gNr),e(pr,hNr),e(pr,zt),M(mx,zt,null),e(zt,pNr),e(zt,fCe),e(fCe,_Nr),e(zt,uNr),e(zt,Xc),e(Xc,bNr),e(Xc,mCe),e(mCe,vNr),e(Xc,FNr),e(Xc,BK),e(BK,TNr),e(Xc,MNr),e(zt,ENr),M(s0,zt,null),e(pr,CNr),e(pr,Vr),M(gx,Vr,null),e(Vr,wNr),e(Vr,gCe),e(gCe,ANr),e(Vr,LNr),e(Vr,bn),e(bn,yNr),e(bn,hCe),e(hCe,xNr),e(bn,$Nr),e(bn,pCe),e(pCe,kNr),e(bn,SNr),e(bn,_Ce),e(_Ce,RNr),e(bn,PNr),e(Vr,BNr),e(Vr,Pe),e(Pe,l0),e(l0,uCe),e(uCe,INr),e(l0,NNr),e(l0,IK),e(IK,qNr),e(l0,jNr),e(Pe,DNr),e(Pe,i0),e(i0,bCe),e(bCe,GNr),e(i0,ONr),e(i0,NK),e(NK,VNr),e(i0,XNr),e(Pe,zNr),e(Pe,d0),e(d0,vCe),e(vCe,WNr),e(d0,QNr),e(d0,qK),e(qK,HNr),e(d0,UNr),e(Pe,JNr),e(Pe,c0),e(c0,FCe),e(FCe,YNr),e(c0,KNr),e(c0,jK),e(jK,ZNr),e(c0,eqr),e(Pe,oqr),e(Pe,f0),e(f0,TCe),e(TCe,rqr),e(f0,tqr),e(f0,DK),e(DK,aqr),e(f0,nqr),e(Pe,sqr),e(Pe,m0),e(m0,MCe),e(MCe,lqr),e(m0,iqr),e(m0,GK),e(GK,dqr),e(m0,cqr),e(Pe,fqr),e(Pe,g0),e(g0,ECe),e(ECe,mqr),e(g0,gqr),e(g0,OK),e(OK,hqr),e(g0,pqr),e(Pe,_qr),e(Pe,h0),e(h0,CCe),e(CCe,uqr),e(h0,bqr),e(h0,VK),e(VK,vqr),e(h0,Fqr),e(Pe,Tqr),e(Pe,p0),e(p0,wCe),e(wCe,Mqr),e(p0,Eqr),e(p0,XK),e(XK,Cqr),e(p0,wqr),e(Vr,Aqr),M(_0,Vr,null),b(f,sGe,u),b(f,zc,u),e(zc,u0),e(u0,ACe),M(hx,ACe,null),e(zc,Lqr),e(zc,LCe),e(LCe,yqr),b(f,lGe,u),b(f,_r,u),M(px,_r,null),e(_r,xqr),e(_r,Wc),e(Wc,$qr),e(Wc,zK),e(zK,kqr),e(Wc,Sqr),e(Wc,WK),e(WK,Rqr),e(Wc,Pqr),e(_r,Bqr),e(_r,_x),e(_x,Iqr),e(_x,yCe),e(yCe,Nqr),e(_x,qqr),e(_r,jqr),e(_r,Wt),M(ux,Wt,null),e(Wt,Dqr),e(Wt,xCe),e(xCe,Gqr),e(Wt,Oqr),e(Wt,Qc),e(Qc,Vqr),e(Qc,$Ce),e($Ce,Xqr),e(Qc,zqr),e(Qc,QK),e(QK,Wqr),e(Qc,Qqr),e(Wt,Hqr),M(b0,Wt,null),e(_r,Uqr),e(_r,Xr),M(bx,Xr,null),e(Xr,Jqr),e(Xr,kCe),e(kCe,Yqr),e(Xr,Kqr),e(Xr,vn),e(vn,Zqr),e(vn,SCe),e(SCe,ejr),e(vn,ojr),e(vn,RCe),e(RCe,rjr),e(vn,tjr),e(vn,PCe),e(PCe,ajr),e(vn,njr),e(Xr,sjr),e(Xr,ke),e(ke,v0),e(v0,BCe),e(BCe,ljr),e(v0,ijr),e(v0,HK),e(HK,djr),e(v0,cjr),e(ke,fjr),e(ke,F0),e(F0,ICe),e(ICe,mjr),e(F0,gjr),e(F0,UK),e(UK,hjr),e(F0,pjr),e(ke,_jr),e(ke,T0),e(T0,NCe),e(NCe,ujr),e(T0,bjr),e(T0,JK),e(JK,vjr),e(T0,Fjr),e(ke,Tjr),e(ke,M0),e(M0,qCe),e(qCe,Mjr),e(M0,Ejr),e(M0,YK),e(YK,Cjr),e(M0,wjr),e(ke,Ajr),e(ke,E0),e(E0,jCe),e(jCe,Ljr),e(E0,yjr),e(E0,KK),e(KK,xjr),e(E0,$jr),e(ke,kjr),e(ke,C0),e(C0,DCe),e(DCe,Sjr),e(C0,Rjr),e(C0,ZK),e(ZK,Pjr),e(C0,Bjr),e(ke,Ijr),e(ke,w0),e(w0,GCe),e(GCe,Njr),e(w0,qjr),e(w0,eZ),e(eZ,jjr),e(w0,Djr),e(ke,Gjr),e(ke,A0),e(A0,OCe),e(OCe,Ojr),e(A0,Vjr),e(A0,oZ),e(oZ,Xjr),e(A0,zjr),e(ke,Wjr),e(ke,L0),e(L0,VCe),e(VCe,Qjr),e(L0,Hjr),e(L0,rZ),e(rZ,Ujr),e(L0,Jjr),e(ke,Yjr),e(ke,y0),e(y0,XCe),e(XCe,Kjr),e(y0,Zjr),e(y0,tZ),e(tZ,eDr),e(y0,oDr),e(Xr,rDr),M(x0,Xr,null),b(f,iGe,u),b(f,Hc,u),e(Hc,$0),e($0,zCe),M(vx,zCe,null),e(Hc,tDr),e(Hc,WCe),e(WCe,aDr),b(f,dGe,u),b(f,ur,u),M(Fx,ur,null),e(ur,nDr),e(ur,Uc),e(Uc,sDr),e(Uc,aZ),e(aZ,lDr),e(Uc,iDr),e(Uc,nZ),e(nZ,dDr),e(Uc,cDr),e(ur,fDr),e(ur,Tx),e(Tx,mDr),e(Tx,QCe),e(QCe,gDr),e(Tx,hDr),e(ur,pDr),e(ur,Qt),M(Mx,Qt,null),e(Qt,_Dr),e(Qt,HCe),e(HCe,uDr),e(Qt,bDr),e(Qt,Jc),e(Jc,vDr),e(Jc,UCe),e(UCe,FDr),e(Jc,TDr),e(Jc,sZ),e(sZ,MDr),e(Jc,EDr),e(Qt,CDr),M(k0,Qt,null),e(ur,wDr),e(ur,zr),M(Ex,zr,null),e(zr,ADr),e(zr,JCe),e(JCe,LDr),e(zr,yDr),e(zr,Fn),e(Fn,xDr),e(Fn,YCe),e(YCe,$Dr),e(Fn,kDr),e(Fn,KCe),e(KCe,SDr),e(Fn,RDr),e(Fn,ZCe),e(ZCe,PDr),e(Fn,BDr),e(zr,IDr),e(zr,Se),e(Se,S0),e(S0,e5e),e(e5e,NDr),e(S0,qDr),e(S0,lZ),e(lZ,jDr),e(S0,DDr),e(Se,GDr),e(Se,R0),e(R0,o5e),e(o5e,ODr),e(R0,VDr),e(R0,iZ),e(iZ,XDr),e(R0,zDr),e(Se,WDr),e(Se,P0),e(P0,r5e),e(r5e,QDr),e(P0,HDr),e(P0,dZ),e(dZ,UDr),e(P0,JDr),e(Se,YDr),e(Se,B0),e(B0,t5e),e(t5e,KDr),e(B0,ZDr),e(B0,cZ),e(cZ,eGr),e(B0,oGr),e(Se,rGr),e(Se,I0),e(I0,a5e),e(a5e,tGr),e(I0,aGr),e(I0,fZ),e(fZ,nGr),e(I0,sGr),e(Se,lGr),e(Se,N0),e(N0,n5e),e(n5e,iGr),e(N0,dGr),e(N0,mZ),e(mZ,cGr),e(N0,fGr),e(Se,mGr),e(Se,q0),e(q0,s5e),e(s5e,gGr),e(q0,hGr),e(q0,gZ),e(gZ,pGr),e(q0,_Gr),e(Se,uGr),e(Se,j0),e(j0,l5e),e(l5e,bGr),e(j0,vGr),e(j0,hZ),e(hZ,FGr),e(j0,TGr),e(Se,MGr),e(Se,D0),e(D0,i5e),e(i5e,EGr),e(D0,CGr),e(D0,pZ),e(pZ,wGr),e(D0,AGr),e(Se,LGr),e(Se,G0),e(G0,d5e),e(d5e,yGr),e(G0,xGr),e(G0,_Z),e(_Z,$Gr),e(G0,kGr),e(zr,SGr),M(O0,zr,null),b(f,cGe,u),b(f,Yc,u),e(Yc,V0),e(V0,c5e),M(Cx,c5e,null),e(Yc,RGr),e(Yc,f5e),e(f5e,PGr),b(f,fGe,u),b(f,br,u),M(wx,br,null),e(br,BGr),e(br,Kc),e(Kc,IGr),e(Kc,uZ),e(uZ,NGr),e(Kc,qGr),e(Kc,bZ),e(bZ,jGr),e(Kc,DGr),e(br,GGr),e(br,Ax),e(Ax,OGr),e(Ax,m5e),e(m5e,VGr),e(Ax,XGr),e(br,zGr),e(br,Ht),M(Lx,Ht,null),e(Ht,WGr),e(Ht,g5e),e(g5e,QGr),e(Ht,HGr),e(Ht,Zc),e(Zc,UGr),e(Zc,h5e),e(h5e,JGr),e(Zc,YGr),e(Zc,vZ),e(vZ,KGr),e(Zc,ZGr),e(Ht,eOr),M(X0,Ht,null),e(br,oOr),e(br,Wr),M(yx,Wr,null),e(Wr,rOr),e(Wr,p5e),e(p5e,tOr),e(Wr,aOr),e(Wr,Tn),e(Tn,nOr),e(Tn,_5e),e(_5e,sOr),e(Tn,lOr),e(Tn,u5e),e(u5e,iOr),e(Tn,dOr),e(Tn,b5e),e(b5e,cOr),e(Tn,fOr),e(Wr,mOr),e(Wr,Oe),e(Oe,z0),e(z0,v5e),e(v5e,gOr),e(z0,hOr),e(z0,FZ),e(FZ,pOr),e(z0,_Or),e(Oe,uOr),e(Oe,W0),e(W0,F5e),e(F5e,bOr),e(W0,vOr),e(W0,TZ),e(TZ,FOr),e(W0,TOr),e(Oe,MOr),e(Oe,Q0),e(Q0,T5e),e(T5e,EOr),e(Q0,COr),e(Q0,MZ),e(MZ,wOr),e(Q0,AOr),e(Oe,LOr),e(Oe,H0),e(H0,M5e),e(M5e,yOr),e(H0,xOr),e(H0,EZ),e(EZ,$Or),e(H0,kOr),e(Oe,SOr),e(Oe,U0),e(U0,E5e),e(E5e,ROr),e(U0,POr),e(U0,CZ),e(CZ,BOr),e(U0,IOr),e(Oe,NOr),e(Oe,J0),e(J0,C5e),e(C5e,qOr),e(J0,jOr),e(J0,wZ),e(wZ,DOr),e(J0,GOr),e(Oe,OOr),e(Oe,Y0),e(Y0,w5e),e(w5e,VOr),e(Y0,XOr),e(Y0,AZ),e(AZ,zOr),e(Y0,WOr),e(Oe,QOr),e(Oe,K0),e(K0,A5e),e(A5e,HOr),e(K0,UOr),e(K0,LZ),e(LZ,JOr),e(K0,YOr),e(Wr,KOr),M(Z0,Wr,null),b(f,mGe,u),b(f,ef,u),e(ef,ew),e(ew,L5e),M(xx,L5e,null),e(ef,ZOr),e(ef,y5e),e(y5e,eVr),b(f,gGe,u),b(f,vr,u),M($x,vr,null),e(vr,oVr),e(vr,of),e(of,rVr),e(of,yZ),e(yZ,tVr),e(of,aVr),e(of,xZ),e(xZ,nVr),e(of,sVr),e(vr,lVr),e(vr,kx),e(kx,iVr),e(kx,x5e),e(x5e,dVr),e(kx,cVr),e(vr,fVr),e(vr,Ut),M(Sx,Ut,null),e(Ut,mVr),e(Ut,$5e),e($5e,gVr),e(Ut,hVr),e(Ut,rf),e(rf,pVr),e(rf,k5e),e(k5e,_Vr),e(rf,uVr),e(rf,$Z),e($Z,bVr),e(rf,vVr),e(Ut,FVr),M(ow,Ut,null),e(vr,TVr),e(vr,Qr),M(Rx,Qr,null),e(Qr,MVr),e(Qr,S5e),e(S5e,EVr),e(Qr,CVr),e(Qr,Mn),e(Mn,wVr),e(Mn,R5e),e(R5e,AVr),e(Mn,LVr),e(Mn,P5e),e(P5e,yVr),e(Mn,xVr),e(Mn,B5e),e(B5e,$Vr),e(Mn,kVr),e(Qr,SVr),e(Qr,Ve),e(Ve,rw),e(rw,I5e),e(I5e,RVr),e(rw,PVr),e(rw,kZ),e(kZ,BVr),e(rw,IVr),e(Ve,NVr),e(Ve,tw),e(tw,N5e),e(N5e,qVr),e(tw,jVr),e(tw,SZ),e(SZ,DVr),e(tw,GVr),e(Ve,OVr),e(Ve,aw),e(aw,q5e),e(q5e,VVr),e(aw,XVr),e(aw,RZ),e(RZ,zVr),e(aw,WVr),e(Ve,QVr),e(Ve,nw),e(nw,j5e),e(j5e,HVr),e(nw,UVr),e(nw,PZ),e(PZ,JVr),e(nw,YVr),e(Ve,KVr),e(Ve,sw),e(sw,D5e),e(D5e,ZVr),e(sw,eXr),e(sw,BZ),e(BZ,oXr),e(sw,rXr),e(Ve,tXr),e(Ve,lw),e(lw,G5e),e(G5e,aXr),e(lw,nXr),e(lw,IZ),e(IZ,sXr),e(lw,lXr),e(Ve,iXr),e(Ve,iw),e(iw,O5e),e(O5e,dXr),e(iw,cXr),e(iw,NZ),e(NZ,fXr),e(iw,mXr),e(Ve,gXr),e(Ve,dw),e(dw,V5e),e(V5e,hXr),e(dw,pXr),e(dw,qZ),e(qZ,_Xr),e(dw,uXr),e(Qr,bXr),M(cw,Qr,null),b(f,hGe,u),b(f,tf,u),e(tf,fw),e(fw,X5e),M(Px,X5e,null),e(tf,vXr),e(tf,z5e),e(z5e,FXr),b(f,pGe,u),b(f,Fr,u),M(Bx,Fr,null),e(Fr,TXr),e(Fr,af),e(af,MXr),e(af,jZ),e(jZ,EXr),e(af,CXr),e(af,DZ),e(DZ,wXr),e(af,AXr),e(Fr,LXr),e(Fr,Ix),e(Ix,yXr),e(Ix,W5e),e(W5e,xXr),e(Ix,$Xr),e(Fr,kXr),e(Fr,Jt),M(Nx,Jt,null),e(Jt,SXr),e(Jt,Q5e),e(Q5e,RXr),e(Jt,PXr),e(Jt,nf),e(nf,BXr),e(nf,H5e),e(H5e,IXr),e(nf,NXr),e(nf,GZ),e(GZ,qXr),e(nf,jXr),e(Jt,DXr),M(mw,Jt,null),e(Fr,GXr),e(Fr,Hr),M(qx,Hr,null),e(Hr,OXr),e(Hr,U5e),e(U5e,VXr),e(Hr,XXr),e(Hr,En),e(En,zXr),e(En,J5e),e(J5e,WXr),e(En,QXr),e(En,Y5e),e(Y5e,HXr),e(En,UXr),e(En,K5e),e(K5e,JXr),e(En,YXr),e(Hr,KXr),e(Hr,Z5e),e(Z5e,gw),e(gw,e3e),e(e3e,ZXr),e(gw,ezr),e(gw,OZ),e(OZ,ozr),e(gw,rzr),e(Hr,tzr),M(hw,Hr,null),b(f,_Ge,u),b(f,sf,u),e(sf,pw),e(pw,o3e),M(jx,o3e,null),e(sf,azr),e(sf,r3e),e(r3e,nzr),b(f,uGe,u),b(f,Tr,u),M(Dx,Tr,null),e(Tr,szr),e(Tr,lf),e(lf,lzr),e(lf,VZ),e(VZ,izr),e(lf,dzr),e(lf,XZ),e(XZ,czr),e(lf,fzr),e(Tr,mzr),e(Tr,Gx),e(Gx,gzr),e(Gx,t3e),e(t3e,hzr),e(Gx,pzr),e(Tr,_zr),e(Tr,Yt),M(Ox,Yt,null),e(Yt,uzr),e(Yt,a3e),e(a3e,bzr),e(Yt,vzr),e(Yt,df),e(df,Fzr),e(df,n3e),e(n3e,Tzr),e(df,Mzr),e(df,zZ),e(zZ,Ezr),e(df,Czr),e(Yt,wzr),M(_w,Yt,null),e(Tr,Azr),e(Tr,Ur),M(Vx,Ur,null),e(Ur,Lzr),e(Ur,s3e),e(s3e,yzr),e(Ur,xzr),e(Ur,Cn),e(Cn,$zr),e(Cn,l3e),e(l3e,kzr),e(Cn,Szr),e(Cn,i3e),e(i3e,Rzr),e(Cn,Pzr),e(Cn,d3e),e(d3e,Bzr),e(Cn,Izr),e(Ur,Nzr),e(Ur,Xx),e(Xx,uw),e(uw,c3e),e(c3e,qzr),e(uw,jzr),e(uw,WZ),e(WZ,Dzr),e(uw,Gzr),e(Xx,Ozr),e(Xx,bw),e(bw,f3e),e(f3e,Vzr),e(bw,Xzr),e(bw,QZ),e(QZ,zzr),e(bw,Wzr),e(Ur,Qzr),M(vw,Ur,null),b(f,bGe,u),b(f,cf,u),e(cf,Fw),e(Fw,m3e),M(zx,m3e,null),e(cf,Hzr),e(cf,g3e),e(g3e,Uzr),b(f,vGe,u),b(f,Mr,u),M(Wx,Mr,null),e(Mr,Jzr),e(Mr,ff),e(ff,Yzr),e(ff,HZ),e(HZ,Kzr),e(ff,Zzr),e(ff,UZ),e(UZ,eWr),e(ff,oWr),e(Mr,rWr),e(Mr,Qx),e(Qx,tWr),e(Qx,h3e),e(h3e,aWr),e(Qx,nWr),e(Mr,sWr),e(Mr,Kt),M(Hx,Kt,null),e(Kt,lWr),e(Kt,p3e),e(p3e,iWr),e(Kt,dWr),e(Kt,mf),e(mf,cWr),e(mf,_3e),e(_3e,fWr),e(mf,mWr),e(mf,JZ),e(JZ,gWr),e(mf,hWr),e(Kt,pWr),M(Tw,Kt,null),e(Mr,_Wr),e(Mr,Jr),M(Ux,Jr,null),e(Jr,uWr),e(Jr,u3e),e(u3e,bWr),e(Jr,vWr),e(Jr,wn),e(wn,FWr),e(wn,b3e),e(b3e,TWr),e(wn,MWr),e(wn,v3e),e(v3e,EWr),e(wn,CWr),e(wn,F3e),e(F3e,wWr),e(wn,AWr),e(Jr,LWr),e(Jr,T3e),e(T3e,Mw),e(Mw,M3e),e(M3e,yWr),e(Mw,xWr),e(Mw,YZ),e(YZ,$Wr),e(Mw,kWr),e(Jr,SWr),M(Ew,Jr,null),FGe=!0},p(f,[u]){const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),Tf.$set(Jx);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),Lg.$set(E3e);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),dh.$set(C3e);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),Vh.$set(w3e);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),Xh.$set(Yx);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),cp.$set(A3e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),fp.$set(An);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),hp.$set(L3e);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),mu.$set(y3e);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),hu.$set(x3e);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),n4.$set(Kx);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),l4.$set($3e);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),Q4.$set(Zx);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),U4.$set(k3e);const e$={};u&2&&(e$.$$scope={dirty:u,ctx:f}),R1.$set(e$);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),B1.$set(S3e);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),Z1.$set(R3e);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),o7.$set(P3e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),J7.$set(gf);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),K7.$set(B3e);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),xb.$set(I3e);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),kb.$set(N3e);const o$={};u&2&&(o$.$$scope={dirty:u,ctx:f}),qb.$set(o$);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),Db.$set(q3e);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),M2.$set(j3e);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),C2.$set(D3e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),mv.$set(et);const r$={};u&2&&(r$.$$scope={dirty:u,ctx:f}),hv.$set(r$);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),uv.$set(G3e);const t$={};u&2&&(t$.$$scope={dirty:u,ctx:f}),vv.$set(t$);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),Rv.$set(O3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),Bv.$set(ot);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),qv.$set(V3e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Dv.$set(hf);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),Yv.$set(X3e);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),Zv.$set(z3e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),sF.$set(L);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),iF.$set(Cw);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),FF.$set(W3e);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),MF.$set(Q3e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),AF.$set(ww);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),yF.$set(H3e);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),BF.$set(U3e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),NF.$set(Aw);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),OF.$set(J3e);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),XF.$set(Y3e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),HF.$set(Lw);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),JF.$set(K3e);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),ZF.$set(Z3e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),oT.$set(yw);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),lT.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),dT.$set(o0e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),mT.$set(xw);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),hT.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),lM.$set(t0e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),dM.$set($w);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),RM.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),BM.$set(n0e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),UM.$set(kw);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),YM.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),rE.$set(l0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),aE.$set(Sw);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),wE.$set(i0e);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),LE.$set(d0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),qE.$set(Rw);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),DE.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),gC.$set(f0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),pC.$set(Pw);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),RC.$set(m0e);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),BC.$set(g0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),qC.$set(Bw);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),DC.$set(h0e);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),OC.$set(p0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),XC.$set(Iw);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),f5.$set(_0e);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),g5.$set(u0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),P5.$set(Nw);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),I5.$set(b0e);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),q5.$set(v0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),D5.$set(qw);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),O5.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),X5.$set(T0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),u3.$set(jw);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),v3.$set(M0e);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),$3.$set(E0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),S3.$set(Dw);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),z3.$set(C0e);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),Q3.$set(w0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),a0.$set(Gw);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),s0.$set(A0e);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),_0.$set(L0e);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),b0.$set(Ow);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),x0.$set(y0e);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),k0.$set(x0e);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),O0.$set(Vw);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),X0.$set($0e);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),Z0.$set(k0e);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),ow.$set(Xw);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),cw.$set(S0e);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),mw.$set(R0e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),hw.$set(zw);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),_w.$set(P0e);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),vw.$set(B0e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),Tw.$set(Ww);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),Ew.$set(I0e)},i(f){FGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(Tf.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(Y6.$$.fragment,f),E(Lg.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(tL.$$.fragment,f),E(dh.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(dL.$$.fragment,f),E(Vh.$$.fragment,f),E(Xh.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(pL.$$.fragment,f),E(cp.$$.fragment,f),E(fp.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(hp.$$.fragment,f),E(TL.$$.fragment,f),E(mu.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(hu.$$.fragment,f),E(AL.$$.fragment,f),E(n4.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E($L.$$.fragment,f),E(l4.$$.fragment,f),E(kL.$$.fragment,f),E(Q4.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(U4.$$.fragment,f),E(IL.$$.fragment,f),E(R1.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(B1.$$.fragment,f),E(GL.$$.fragment,f),E(Z1.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(o7.$$.fragment,f),E(WL.$$.fragment,f),E(J7.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(K7.$$.fragment,f),E(YL.$$.fragment,f),E(xb.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(kb.$$.fragment,f),E(ry.$$.fragment,f),E(qb.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Db.$$.fragment,f),E(ly.$$.fragment,f),E(M2.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(C2.$$.fragment,f),E(my.$$.fragment,f),E(mv.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(hv.$$.fragment,f),E(uy.$$.fragment,f),E(uv.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(vv.$$.fragment,f),E(My.$$.fragment,f),E(Rv.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(Bv.$$.fragment,f),E(Ly.$$.fragment,f),E(qv.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(Dv.$$.fragment,f),E(Sy.$$.fragment,f),E(Yv.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Zv.$$.fragment,f),E(Ny.$$.fragment,f),E(sF.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(iF.$$.fragment,f),E(Oy.$$.fragment,f),E(FF.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(MF.$$.fragment,f),E(Qy.$$.fragment,f),E(AF.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(yF.$$.fragment,f),E(Zy.$$.fragment,f),E(BF.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(NF.$$.fragment,f),E(a8.$$.fragment,f),E(OF.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(XF.$$.fragment,f),E(d8.$$.fragment,f),E(HF.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(JF.$$.fragment,f),E(p8.$$.fragment,f),E(ZF.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(oT.$$.fragment,f),E(F8.$$.fragment,f),E(lT.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(dT.$$.fragment,f),E(w8.$$.fragment,f),E(mT.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(hT.$$.fragment,f),E($8.$$.fragment,f),E(lM.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(dM.$$.fragment,f),E(B8.$$.fragment,f),E(RM.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(BM.$$.fragment,f),E(D8.$$.fragment,f),E(UM.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(YM.$$.fragment,f),E(z8.$$.fragment,f),E(rE.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(aE.$$.fragment,f),E(J8.$$.fragment,f),E(wE.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(LE.$$.fragment,f),E(o9.$$.fragment,f),E(qE.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(DE.$$.fragment,f),E(s9.$$.fragment,f),E(gC.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(pC.$$.fragment,f),E(f9.$$.fragment,f),E(RC.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(BC.$$.fragment,f),E(_9.$$.fragment,f),E(qC.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(DC.$$.fragment,f),E(M9.$$.fragment,f),E(OC.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(XC.$$.fragment,f),E(L9.$$.fragment,f),E(f5.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(g5.$$.fragment,f),E(S9.$$.fragment,f),E(P5.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(I5.$$.fragment,f),E(N9.$$.fragment,f),E(q5.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(D5.$$.fragment,f),E(O9.$$.fragment,f),E(O5.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(X5.$$.fragment,f),E(Q9.$$.fragment,f),E(u3.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(v3.$$.fragment,f),E(K9.$$.fragment,f),E($3.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(S3.$$.fragment,f),E(tx.$$.fragment,f),E(z3.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(Q3.$$.fragment,f),E(ix.$$.fragment,f),E(a0.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(s0.$$.fragment,f),E(gx.$$.fragment,f),E(_0.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(b0.$$.fragment,f),E(bx.$$.fragment,f),E(x0.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(k0.$$.fragment,f),E(Ex.$$.fragment,f),E(O0.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(X0.$$.fragment,f),E(yx.$$.fragment,f),E(Z0.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(ow.$$.fragment,f),E(Rx.$$.fragment,f),E(cw.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(mw.$$.fragment,f),E(qx.$$.fragment,f),E(hw.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(_w.$$.fragment,f),E(Vx.$$.fragment,f),E(vw.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Tw.$$.fragment,f),E(Ux.$$.fragment,f),E(Ew.$$.fragment,f),FGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(Tf.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(Y6.$$.fragment,f),C(Lg.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(tL.$$.fragment,f),C(dh.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(dL.$$.fragment,f),C(Vh.$$.fragment,f),C(Xh.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(pL.$$.fragment,f),C(cp.$$.fragment,f),C(fp.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(hp.$$.fragment,f),C(TL.$$.fragment,f),C(mu.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(hu.$$.fragment,f),C(AL.$$.fragment,f),C(n4.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C($L.$$.fragment,f),C(l4.$$.fragment,f),C(kL.$$.fragment,f),C(Q4.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(U4.$$.fragment,f),C(IL.$$.fragment,f),C(R1.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(B1.$$.fragment,f),C(GL.$$.fragment,f),C(Z1.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(o7.$$.fragment,f),C(WL.$$.fragment,f),C(J7.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(K7.$$.fragment,f),C(YL.$$.fragment,f),C(xb.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(kb.$$.fragment,f),C(ry.$$.fragment,f),C(qb.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Db.$$.fragment,f),C(ly.$$.fragment,f),C(M2.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(C2.$$.fragment,f),C(my.$$.fragment,f),C(mv.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(hv.$$.fragment,f),C(uy.$$.fragment,f),C(uv.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(vv.$$.fragment,f),C(My.$$.fragment,f),C(Rv.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(Bv.$$.fragment,f),C(Ly.$$.fragment,f),C(qv.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(Dv.$$.fragment,f),C(Sy.$$.fragment,f),C(Yv.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Zv.$$.fragment,f),C(Ny.$$.fragment,f),C(sF.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(iF.$$.fragment,f),C(Oy.$$.fragment,f),C(FF.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(MF.$$.fragment,f),C(Qy.$$.fragment,f),C(AF.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(yF.$$.fragment,f),C(Zy.$$.fragment,f),C(BF.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(NF.$$.fragment,f),C(a8.$$.fragment,f),C(OF.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(XF.$$.fragment,f),C(d8.$$.fragment,f),C(HF.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(JF.$$.fragment,f),C(p8.$$.fragment,f),C(ZF.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(oT.$$.fragment,f),C(F8.$$.fragment,f),C(lT.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(dT.$$.fragment,f),C(w8.$$.fragment,f),C(mT.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(hT.$$.fragment,f),C($8.$$.fragment,f),C(lM.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(dM.$$.fragment,f),C(B8.$$.fragment,f),C(RM.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(BM.$$.fragment,f),C(D8.$$.fragment,f),C(UM.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(YM.$$.fragment,f),C(z8.$$.fragment,f),C(rE.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(aE.$$.fragment,f),C(J8.$$.fragment,f),C(wE.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(LE.$$.fragment,f),C(o9.$$.fragment,f),C(qE.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(DE.$$.fragment,f),C(s9.$$.fragment,f),C(gC.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(pC.$$.fragment,f),C(f9.$$.fragment,f),C(RC.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(BC.$$.fragment,f),C(_9.$$.fragment,f),C(qC.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(DC.$$.fragment,f),C(M9.$$.fragment,f),C(OC.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(XC.$$.fragment,f),C(L9.$$.fragment,f),C(f5.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(g5.$$.fragment,f),C(S9.$$.fragment,f),C(P5.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(I5.$$.fragment,f),C(N9.$$.fragment,f),C(q5.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(D5.$$.fragment,f),C(O9.$$.fragment,f),C(O5.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(X5.$$.fragment,f),C(Q9.$$.fragment,f),C(u3.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(v3.$$.fragment,f),C(K9.$$.fragment,f),C($3.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(S3.$$.fragment,f),C(tx.$$.fragment,f),C(z3.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(Q3.$$.fragment,f),C(ix.$$.fragment,f),C(a0.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(s0.$$.fragment,f),C(gx.$$.fragment,f),C(_0.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(b0.$$.fragment,f),C(bx.$$.fragment,f),C(x0.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(k0.$$.fragment,f),C(Ex.$$.fragment,f),C(O0.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(X0.$$.fragment,f),C(yx.$$.fragment,f),C(Z0.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(ow.$$.fragment,f),C(Rx.$$.fragment,f),C(cw.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(mw.$$.fragment,f),C(qx.$$.fragment,f),C(hw.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(_w.$$.fragment,f),C(Vx.$$.fragment,f),C(vw.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Tw.$$.fragment,f),C(Ux.$$.fragment,f),C(Ew.$$.fragment,f),FGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(Ge),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(uje),f&&t(vi),w(z6),f&&t(bje),f&&t(kn),f&&t(vje),w(W6,f),f&&t(Fje),f&&t(pk),f&&t(Tje),w(Tf,f),f&&t(Mje),f&&t(Fi),w(Q6),f&&t(Eje),f&&t(Co),w(H6),w(Y6),w(Lg),w(K6),f&&t(Cje),f&&t(Mi),w(Z6),f&&t(wje),f&&t(wo),w(eL),w(tL),w(dh),w(aL),f&&t(Aje),f&&t(Ei),w(nL),f&&t(Lje),f&&t(Ao),w(sL),w(dL),w(Vh),w(Xh),w(cL),f&&t(yje),f&&t(Ci),w(fL),f&&t(xje),f&&t(Lo),w(mL),w(pL),w(cp),w(fp),w(_L),f&&t($je),f&&t(Ai),w(uL),f&&t(kje),f&&t(yo),w(bL),w(FL),w(hp),w(TL),w(mu),f&&t(Sje),f&&t(xi),w(ML),f&&t(Rje),f&&t(xo),w(EL),w(wL),w(hu),w(AL),w(n4),f&&t(Pje),f&&t(Si),w(LL),f&&t(Bje),f&&t($o),w(yL),w($L),w(l4),w(kL),w(Q4),f&&t(Ije),f&&t(Bi),w(SL),f&&t(Nje),f&&t(ko),w(RL),w(BL),w(U4),w(IL),w(R1),f&&t(qje),f&&t(qi),w(NL),f&&t(jje),f&&t(So),w(qL),w(DL),w(B1),w(GL),w(Z1),f&&t(Dje),f&&t(Gi),w(OL),f&&t(Gje),f&&t(Ro),w(VL),w(zL),w(o7),w(WL),w(J7),f&&t(Oje),f&&t(Xi),w(QL),f&&t(Vje),f&&t(Po),w(HL),w(JL),w(K7),w(YL),w(xb),f&&t(Xje),f&&t(Qi),w(KL),f&&t(zje),f&&t(Bo),w(ZL),w(oy),w(kb),w(ry),w(qb),f&&t(Wje),f&&t(Ji),w(ty),f&&t(Qje),f&&t(Io),w(ay),w(sy),w(Db),w(ly),w(M2),f&&t(Hje),f&&t(Zi),w(iy),f&&t(Uje),f&&t(No),w(dy),w(fy),w(C2),w(my),w(mv),f&&t(Jje),f&&t(rd),w(gy),f&&t(Yje),f&&t(qo),w(hy),w(_y),w(hv),w(uy),w(uv),f&&t(Kje),f&&t(nd),w(by),f&&t(Zje),f&&t(jo),w(vy),w(Ty),w(vv),w(My),w(Rv),f&&t(eDe),f&&t(id),w(Ey),f&&t(oDe),f&&t(Do),w(Cy),w(Ay),w(Bv),w(Ly),w(qv),f&&t(rDe),f&&t(fd),w(yy),f&&t(tDe),f&&t(Go),w(xy),w(ky),w(Dv),w(Sy),w(Yv),f&&t(aDe),f&&t(hd),w(Ry),f&&t(nDe),f&&t(Oo),w(Py),w(Iy),w(Zv),w(Ny),w(sF),f&&t(sDe),f&&t(ud),w(qy),f&&t(lDe),f&&t(Vo),w(jy),w(Gy),w(iF),w(Oy),w(FF),f&&t(iDe),f&&t(Fd),w(Vy),f&&t(dDe),f&&t(Xo),w(Xy),w(Wy),w(MF),w(Qy),w(AF),f&&t(cDe),f&&t(Ed),w(Uy),f&&t(fDe),f&&t(zo),w(Jy),w(Ky),w(yF),w(Zy),w(BF),f&&t(mDe),f&&t(Ad),w(e8),f&&t(gDe),f&&t(Wo),w(o8),w(t8),w(NF),w(a8),w(OF),f&&t(hDe),f&&t($d),w(n8),f&&t(pDe),f&&t(Qo),w(s8),w(i8),w(XF),w(d8),w(HF),f&&t(_De),f&&t(Rd),w(f8),f&&t(uDe),f&&t(Ho),w(m8),w(h8),w(JF),w(p8),w(ZF),f&&t(bDe),f&&t(Id),w(_8),f&&t(vDe),f&&t(Uo),w(u8),w(v8),w(oT),w(F8),w(lT),f&&t(FDe),f&&t(jd),w(T8),f&&t(TDe),f&&t(Jo),w(M8),w(C8),w(dT),w(w8),w(mT),f&&t(MDe),f&&t(Od),w(A8),f&&t(EDe),f&&t(Yo),w(L8),w(x8),w(hT),w($8),w(lM),f&&t(CDe),f&&t(zd),w(k8),f&&t(wDe),f&&t(Ko),w(S8),w(P8),w(dM),w(B8),w(RM),f&&t(ADe),f&&t(Hd),w(I8),f&&t(LDe),f&&t(Zo),w(N8),w(j8),w(BM),w(D8),w(UM),f&&t(yDe),f&&t(Yd),w(G8),f&&t(xDe),f&&t(er),w(O8),w(X8),w(YM),w(z8),w(rE),f&&t($De),f&&t(ec),w(W8),f&&t(kDe),f&&t(or),w(Q8),w(U8),w(aE),w(J8),w(wE),f&&t(SDe),f&&t(tc),w(Y8),f&&t(RDe),f&&t(rr),w(K8),w(e9),w(LE),w(o9),w(qE),f&&t(PDe),f&&t(sc),w(r9),f&&t(BDe),f&&t(tr),w(t9),w(n9),w(DE),w(s9),w(gC),f&&t(IDe),f&&t(dc),w(l9),f&&t(NDe),f&&t(ar),w(i9),w(c9),w(pC),w(f9),w(RC),f&&t(qDe),f&&t(mc),w(m9),f&&t(jDe),f&&t(nr),w(g9),w(p9),w(BC),w(_9),w(qC),f&&t(DDe),f&&t(pc),w(b9),f&&t(GDe),f&&t(sr),w(v9),w(T9),w(DC),w(M9),w(OC),f&&t(ODe),f&&t(bc),w(E9),f&&t(VDe),f&&t(lr),w(C9),w(A9),w(XC),w(L9),w(f5),f&&t(XDe),f&&t(Tc),w(y9),f&&t(zDe),f&&t(ir),w(x9),w(k9),w(g5),w(S9),w(P5),f&&t(WDe),f&&t(Cc),w(R9),f&&t(QDe),f&&t(dr),w(P9),w(I9),w(I5),w(N9),w(q5),f&&t(HDe),f&&t(Lc),w(q9),f&&t(UDe),f&&t(cr),w(j9),w(G9),w(D5),w(O9),w(O5),f&&t(JDe),f&&t($c),w(V9),f&&t(YDe),f&&t(fr),w(X9),w(W9),w(X5),w(Q9),w(u3),f&&t(KDe),f&&t(Rc),w(H9),f&&t(ZDe),f&&t(mr),w(U9),w(Y9),w(v3),w(K9),w($3),f&&t(eGe),f&&t(Ic),w(Z9),f&&t(oGe),f&&t(gr),w(ex),w(rx),w(S3),w(tx),w(z3),f&&t(rGe),f&&t(jc),w(ax),f&&t(tGe),f&&t(hr),w(nx),w(lx),w(Q3),w(ix),w(a0),f&&t(aGe),f&&t(Oc),w(dx),f&&t(nGe),f&&t(pr),w(cx),w(mx),w(s0),w(gx),w(_0),f&&t(sGe),f&&t(zc),w(hx),f&&t(lGe),f&&t(_r),w(px),w(ux),w(b0),w(bx),w(x0),f&&t(iGe),f&&t(Hc),w(vx),f&&t(dGe),f&&t(ur),w(Fx),w(Mx),w(k0),w(Ex),w(O0),f&&t(cGe),f&&t(Yc),w(Cx),f&&t(fGe),f&&t(br),w(wx),w(Lx),w(X0),w(yx),w(Z0),f&&t(mGe),f&&t(ef),w(xx),f&&t(gGe),f&&t(vr),w($x),w(Sx),w(ow),w(Rx),w(cw),f&&t(hGe),f&&t(tf),w(Px),f&&t(pGe),f&&t(Fr),w(Bx),w(Nx),w(mw),w(qx),w(hw),f&&t(_Ge),f&&t(sf),w(jx),f&&t(uGe),f&&t(Tr),w(Dx),w(Ox),w(_w),w(Vx),w(vw),f&&t(bGe),f&&t(cf),w(zx),f&&t(vGe),f&&t(Mr),w(Wx),w(Hx),w(Tw),w(Ux),w(Ew)}}}const UBt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function JBt(x){return JRt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class tIt extends WRt{constructor(g){super();QRt(this,g,JBt,HBt,HRt,{})}}export{tIt as default,UBt as metadata};
