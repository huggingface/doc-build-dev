import{S as Ykt,i as Kkt,s as Zkt,e as a,k as l,w as F,t as o,M as eSt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as oSt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as tzr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function rSt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,SA,_f,De,We,hi,yn,RA,Ln,xn,PA,pi,$n,BA,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),SA=o(")."),_f=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),RA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),PA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),BA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ek=s(p);m=r(ek,"NewModelConfig"),ek.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var ok=s(fi);pf=r(ok,"model_type"),ok.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var rk=s(mi);gi=r(rk,'"new-model"'),rk.forEach(t),SA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),RA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var tk=s(Ln);xn=r(tk,"PreTrainedModel"),tk.forEach(t),PA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),BA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var ak=s(_i);uf=r(ak,"NewModelConfig"),ak.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,SA),b(Qe,_f,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,RA),e(De,Ln),e(Ln,xn),e(De,PA),e(De,pi),e(pi,$n),e(De,BA),e(De,_i),e(_i,uf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(De)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,SA,_f,De,We,hi,yn,RA,Ln,xn,PA,pi,$n,BA,_i,uf,Ca,Qe,Ae,ek,ui,ok,rk,Eo,wa,tk,bf,ak,zOe,Pqe,bi,vf,Coe,IA,WOe,woe,QOe,Bqe,kn,HOe,Aoe,UOe,JOe,yoe,YOe,KOe,Iqe,NA,Nqe,nk,ZOe,qqe,Ff,jqe,vi,Tf,Loe,qA,eVe,xoe,oVe,Dqe,Co,jA,rVe,DA,tVe,sk,aVe,nVe,sVe,GA,lVe,$oe,iVe,dVe,cVe,Er,OA,fVe,koe,mVe,gVe,Fi,hVe,Soe,pVe,_Ve,Roe,uVe,bVe,vVe,A,Mf,Poe,FVe,TVe,lk,MVe,EVe,CVe,Ef,Boe,wVe,AVe,ik,yVe,LVe,xVe,Cf,Ioe,$Ve,kVe,dk,SVe,RVe,PVe,wf,Noe,BVe,IVe,ck,NVe,qVe,jVe,Af,qoe,DVe,GVe,fk,OVe,VVe,XVe,yf,joe,zVe,WVe,mk,QVe,HVe,UVe,Lf,Doe,JVe,YVe,gk,KVe,ZVe,eXe,xf,Goe,oXe,rXe,hk,tXe,aXe,nXe,$f,Ooe,sXe,lXe,pk,iXe,dXe,cXe,kf,Voe,fXe,mXe,_k,gXe,hXe,pXe,Sf,Xoe,_Xe,uXe,uk,bXe,vXe,FXe,Rf,zoe,TXe,MXe,bk,EXe,CXe,wXe,Pf,Woe,AXe,yXe,vk,LXe,xXe,$Xe,Bf,Qoe,kXe,SXe,Fk,RXe,PXe,BXe,If,Hoe,IXe,NXe,Tk,qXe,jXe,DXe,Nf,Uoe,GXe,OXe,Mk,VXe,XXe,zXe,qf,Joe,WXe,QXe,Ek,HXe,UXe,JXe,jf,Yoe,YXe,KXe,Ck,ZXe,eze,oze,Df,Koe,rze,tze,wk,aze,nze,sze,Gf,Zoe,lze,ize,Ak,dze,cze,fze,Of,ere,mze,gze,yk,hze,pze,_ze,Vf,ore,uze,bze,Lk,vze,Fze,Tze,Xf,rre,Mze,Eze,xk,Cze,wze,Aze,zf,tre,yze,Lze,$k,xze,$ze,kze,Wf,are,Sze,Rze,kk,Pze,Bze,Ize,Qf,nre,Nze,qze,Sk,jze,Dze,Gze,Hf,sre,Oze,Vze,Rk,Xze,zze,Wze,Uf,lre,Qze,Hze,Pk,Uze,Jze,Yze,Jf,ire,Kze,Zze,Bk,eWe,oWe,rWe,Yf,dre,tWe,aWe,Ik,nWe,sWe,lWe,Kf,cre,iWe,dWe,Nk,cWe,fWe,mWe,Zf,fre,gWe,hWe,qk,pWe,_We,uWe,em,mre,bWe,vWe,jk,FWe,TWe,MWe,om,gre,EWe,CWe,Dk,wWe,AWe,yWe,rm,hre,LWe,xWe,Gk,$We,kWe,SWe,tm,pre,RWe,PWe,Ok,BWe,IWe,NWe,am,_re,qWe,jWe,Vk,DWe,GWe,OWe,nm,ure,VWe,XWe,Xk,zWe,WWe,QWe,sm,bre,HWe,UWe,zk,JWe,YWe,KWe,lm,vre,ZWe,eQe,Wk,oQe,rQe,tQe,im,Fre,aQe,nQe,Qk,sQe,lQe,iQe,dm,Tre,dQe,cQe,Hk,fQe,mQe,gQe,cm,Mre,hQe,pQe,Uk,_Qe,uQe,bQe,fm,Ere,vQe,FQe,Jk,TQe,MQe,EQe,mm,Cre,CQe,wQe,Yk,AQe,yQe,LQe,gm,wre,xQe,$Qe,Kk,kQe,SQe,RQe,hm,Are,PQe,BQe,Zk,IQe,NQe,qQe,pm,yre,jQe,DQe,eS,GQe,OQe,VQe,_m,Lre,XQe,zQe,oS,WQe,QQe,HQe,um,xre,UQe,JQe,rS,YQe,KQe,ZQe,bm,$re,eHe,oHe,tS,rHe,tHe,aHe,vm,kre,nHe,sHe,aS,lHe,iHe,dHe,Fm,Sre,cHe,fHe,nS,mHe,gHe,hHe,Tm,Rre,pHe,_He,sS,uHe,bHe,vHe,Mm,Pre,FHe,THe,lS,MHe,EHe,CHe,Em,Bre,wHe,AHe,iS,yHe,LHe,xHe,Cm,Ire,$He,kHe,dS,SHe,RHe,PHe,wm,Nre,BHe,IHe,cS,NHe,qHe,jHe,Am,qre,DHe,GHe,fS,OHe,VHe,XHe,ym,jre,zHe,WHe,mS,QHe,HHe,UHe,Lm,Dre,JHe,YHe,gS,KHe,ZHe,eUe,xm,Gre,oUe,rUe,hS,tUe,aUe,nUe,$m,Ore,sUe,lUe,pS,iUe,dUe,cUe,km,Vre,fUe,mUe,_S,gUe,hUe,pUe,Sm,Xre,_Ue,uUe,uS,bUe,vUe,FUe,Rm,zre,TUe,MUe,bS,EUe,CUe,wUe,Pm,Wre,AUe,yUe,vS,LUe,xUe,$Ue,Bm,Qre,kUe,SUe,FS,RUe,PUe,BUe,Im,Hre,IUe,NUe,TS,qUe,jUe,DUe,Nm,Ure,GUe,OUe,MS,VUe,XUe,zUe,qm,Jre,WUe,QUe,ES,HUe,UUe,JUe,jm,Yre,YUe,KUe,CS,ZUe,eJe,oJe,Dm,Kre,rJe,tJe,wS,aJe,nJe,sJe,Gm,Zre,lJe,iJe,AS,dJe,cJe,fJe,Om,ete,mJe,gJe,yS,hJe,pJe,_Je,Vm,ote,uJe,bJe,LS,vJe,FJe,TJe,Xm,rte,MJe,EJe,xS,CJe,wJe,AJe,zm,tte,yJe,LJe,$S,xJe,$Je,kJe,Wm,ate,SJe,RJe,kS,PJe,BJe,IJe,Qm,nte,NJe,qJe,SS,jJe,DJe,GJe,Hm,ste,OJe,VJe,RS,XJe,zJe,WJe,Um,lte,QJe,HJe,PS,UJe,JJe,YJe,Jm,ite,KJe,ZJe,BS,eYe,oYe,rYe,Ym,dte,tYe,aYe,IS,nYe,sYe,lYe,Km,cte,iYe,dYe,NS,cYe,fYe,mYe,Zm,fte,gYe,hYe,qS,pYe,_Ye,uYe,eg,mte,bYe,vYe,jS,FYe,TYe,MYe,og,gte,EYe,CYe,DS,wYe,AYe,yYe,rg,hte,LYe,xYe,GS,$Ye,kYe,SYe,tg,pte,RYe,PYe,OS,BYe,IYe,NYe,ag,_te,qYe,jYe,VS,DYe,GYe,OYe,ng,ute,VYe,XYe,XS,zYe,WYe,QYe,sg,bte,HYe,UYe,zS,JYe,YYe,KYe,lg,vte,ZYe,eKe,WS,oKe,rKe,tKe,ig,Fte,aKe,nKe,QS,sKe,lKe,iKe,dg,Tte,dKe,cKe,HS,fKe,mKe,gKe,cg,Mte,hKe,pKe,US,_Ke,uKe,bKe,fg,Ete,vKe,FKe,JS,TKe,MKe,EKe,mg,Cte,CKe,wKe,YS,AKe,yKe,LKe,gg,wte,xKe,$Ke,KS,kKe,SKe,RKe,hg,Ate,PKe,BKe,ZS,IKe,NKe,qKe,pg,yte,jKe,DKe,eR,GKe,OKe,VKe,_g,Lte,XKe,zKe,oR,WKe,QKe,HKe,ug,xte,UKe,JKe,rR,YKe,KKe,ZKe,bg,$te,eZe,oZe,tR,rZe,tZe,aZe,vg,kte,nZe,sZe,aR,lZe,iZe,dZe,Fg,Ste,cZe,fZe,nR,mZe,gZe,hZe,Tg,Rte,pZe,_Ze,sR,uZe,bZe,vZe,Mg,Pte,FZe,TZe,lR,MZe,EZe,CZe,Eg,Bte,wZe,AZe,iR,yZe,LZe,xZe,Cg,$Ze,wg,VA,kZe,Ite,SZe,Gqe,Ti,Ag,Nte,XA,RZe,qte,PZe,Oqe,wo,zA,BZe,WA,IZe,dR,NZe,qZe,jZe,QA,DZe,jte,GZe,OZe,VZe,Cr,HA,XZe,Dte,zZe,WZe,Aa,QZe,Gte,HZe,UZe,Ote,JZe,YZe,Vte,KZe,ZZe,eeo,k,Sn,Xte,oeo,reo,cR,teo,aeo,fR,neo,seo,leo,Rn,zte,ieo,deo,mR,ceo,feo,gR,meo,geo,heo,Pn,Wte,peo,_eo,hR,ueo,beo,pR,veo,Feo,Teo,yg,Qte,Meo,Eeo,_R,Ceo,weo,Aeo,Bn,Hte,yeo,Leo,uR,xeo,$eo,bR,keo,Seo,Reo,Lg,Ute,Peo,Beo,vR,Ieo,Neo,qeo,xg,Jte,jeo,Deo,FR,Geo,Oeo,Veo,$g,Yte,Xeo,zeo,TR,Weo,Qeo,Heo,In,Kte,Ueo,Jeo,MR,Yeo,Keo,ER,Zeo,eoo,ooo,Nn,Zte,roo,too,CR,aoo,noo,wR,soo,loo,ioo,qn,eae,doo,coo,AR,foo,moo,yR,goo,hoo,poo,kg,oae,_oo,uoo,LR,boo,voo,Foo,Sg,rae,Too,Moo,xR,Eoo,Coo,woo,Rg,tae,Aoo,yoo,$R,Loo,xoo,$oo,jn,aae,koo,Soo,kR,Roo,Poo,SR,Boo,Ioo,Noo,Pg,nae,qoo,joo,RR,Doo,Goo,Ooo,Dn,sae,Voo,Xoo,PR,zoo,Woo,BR,Qoo,Hoo,Uoo,Gn,lae,Joo,Yoo,IR,Koo,Zoo,NR,ero,oro,rro,On,iae,tro,aro,qR,nro,sro,jR,lro,iro,dro,Bg,dae,cro,fro,DR,mro,gro,hro,Vn,cae,pro,_ro,GR,uro,bro,OR,vro,Fro,Tro,Xn,fae,Mro,Ero,VR,Cro,wro,XR,Aro,yro,Lro,zn,mae,xro,$ro,zR,kro,Sro,WR,Rro,Pro,Bro,Wn,gae,Iro,Nro,QR,qro,jro,HR,Dro,Gro,Oro,Qn,hae,Vro,Xro,UR,zro,Wro,JR,Qro,Hro,Uro,Hn,pae,Jro,Yro,YR,Kro,Zro,KR,eto,oto,rto,Ig,_ae,tto,ato,ZR,nto,sto,lto,Un,uae,ito,dto,eP,cto,fto,oP,mto,gto,hto,Ng,bae,pto,_to,rP,uto,bto,vto,Jn,vae,Fto,Tto,tP,Mto,Eto,aP,Cto,wto,Ato,Yn,Fae,yto,Lto,nP,xto,$to,sP,kto,Sto,Rto,Kn,Tae,Pto,Bto,lP,Ito,Nto,iP,qto,jto,Dto,qg,Mae,Gto,Oto,dP,Vto,Xto,zto,Zn,Eae,Wto,Qto,cP,Hto,Uto,fP,Jto,Yto,Kto,es,Cae,Zto,eao,mP,oao,rao,gP,tao,aao,nao,jg,wae,sao,lao,hP,iao,dao,cao,os,Aae,fao,mao,pP,gao,hao,_P,pao,_ao,uao,rs,yae,bao,vao,uP,Fao,Tao,bP,Mao,Eao,Cao,ts,Lae,wao,Aao,vP,yao,Lao,FP,xao,$ao,kao,as,xae,Sao,Rao,TP,Pao,Bao,MP,Iao,Nao,qao,ns,$ae,jao,Dao,EP,Gao,Oao,CP,Vao,Xao,zao,ss,kae,Wao,Qao,wP,Hao,Uao,AP,Jao,Yao,Kao,ls,Sae,Zao,eno,yP,ono,rno,LP,tno,ano,nno,Dg,Rae,sno,lno,xP,ino,dno,cno,is,Pae,fno,mno,$P,gno,hno,kP,pno,_no,uno,Gg,Bae,bno,vno,SP,Fno,Tno,Mno,Og,Iae,Eno,Cno,RP,wno,Ano,yno,ds,Nae,Lno,xno,PP,$no,kno,BP,Sno,Rno,Pno,cs,qae,Bno,Ino,IP,Nno,qno,NP,jno,Dno,Gno,fs,jae,Ono,Vno,qP,Xno,zno,jP,Wno,Qno,Hno,Vg,Dae,Uno,Jno,DP,Yno,Kno,Zno,ms,Gae,eso,oso,GP,rso,tso,OP,aso,nso,sso,gs,Oae,lso,iso,VP,dso,cso,XP,fso,mso,gso,hs,Vae,hso,pso,zP,_so,uso,WP,bso,vso,Fso,ps,Xae,Tso,Mso,QP,Eso,Cso,HP,wso,Aso,yso,_s,zae,Lso,xso,UP,$so,kso,JP,Sso,Rso,Pso,Xg,Wae,Bso,Iso,YP,Nso,qso,jso,us,Qae,Dso,Gso,KP,Oso,Vso,ZP,Xso,zso,Wso,zg,Hae,Qso,Hso,eB,Uso,Jso,Yso,Wg,Uae,Kso,Zso,oB,elo,olo,rlo,Qg,Jae,tlo,alo,rB,nlo,slo,llo,Hg,Yae,ilo,dlo,tB,clo,flo,mlo,bs,Kae,glo,hlo,aB,plo,_lo,nB,ulo,blo,vlo,Ug,Zae,Flo,Tlo,sB,Mlo,Elo,Clo,vs,ene,wlo,Alo,lB,ylo,Llo,iB,xlo,$lo,klo,Fs,one,Slo,Rlo,dB,Plo,Blo,cB,Ilo,Nlo,qlo,Ts,rne,jlo,Dlo,fB,Glo,Olo,mB,Vlo,Xlo,zlo,Ms,tne,Wlo,Qlo,gB,Hlo,Ulo,hB,Jlo,Ylo,Klo,Es,ane,Zlo,eio,pB,oio,rio,_B,tio,aio,nio,Cs,nne,sio,lio,uB,iio,dio,bB,cio,fio,mio,Jg,sne,gio,hio,vB,pio,_io,uio,Yg,lne,bio,vio,FB,Fio,Tio,Mio,ws,ine,Eio,Cio,TB,wio,Aio,MB,yio,Lio,xio,As,dne,$io,kio,EB,Sio,Rio,CB,Pio,Bio,Iio,ys,cne,Nio,qio,wB,jio,Dio,AB,Gio,Oio,Vio,Kg,fne,Xio,zio,yB,Wio,Qio,Hio,Zg,mne,Uio,Jio,LB,Yio,Kio,Zio,eh,gne,edo,odo,xB,rdo,tdo,ado,Ls,hne,ndo,sdo,$B,ldo,ido,kB,ddo,cdo,fdo,oh,pne,mdo,gdo,SB,hdo,pdo,_do,rh,_ne,udo,bdo,RB,vdo,Fdo,Tdo,th,une,Mdo,Edo,PB,Cdo,wdo,Ado,xs,bne,ydo,Ldo,BB,xdo,$do,IB,kdo,Sdo,Rdo,ah,vne,Pdo,Bdo,NB,Ido,Ndo,qdo,nh,Fne,jdo,Ddo,qB,Gdo,Odo,Vdo,$s,Tne,Xdo,zdo,jB,Wdo,Qdo,DB,Hdo,Udo,Jdo,ks,Mne,Ydo,Kdo,GB,Zdo,eco,OB,oco,rco,tco,Ss,Ene,aco,nco,VB,sco,lco,XB,ico,dco,cco,Rs,Cne,fco,mco,zB,gco,hco,WB,pco,_co,uco,sh,bco,lh,UA,vco,wne,Fco,Vqe,Mi,ih,Ane,JA,Tco,yne,Mco,Xqe,Ao,YA,Eco,KA,Cco,QB,wco,Aco,yco,ZA,Lco,Lne,xco,$co,kco,He,ey,Sco,xne,Rco,Pco,ya,Bco,$ne,Ico,Nco,kne,qco,jco,Sne,Dco,Gco,Oco,Y,dh,Rne,Vco,Xco,HB,zco,Wco,Qco,ch,Pne,Hco,Uco,UB,Jco,Yco,Kco,fh,Bne,Zco,efo,JB,ofo,rfo,tfo,mh,Ine,afo,nfo,YB,sfo,lfo,ifo,gh,Nne,dfo,cfo,KB,ffo,mfo,gfo,hh,qne,hfo,pfo,ZB,_fo,ufo,bfo,ph,jne,vfo,Ffo,eI,Tfo,Mfo,Efo,_h,Dne,Cfo,wfo,oI,Afo,yfo,Lfo,uh,Gne,xfo,$fo,rI,kfo,Sfo,Rfo,bh,One,Pfo,Bfo,tI,Ifo,Nfo,qfo,vh,Vne,jfo,Dfo,aI,Gfo,Ofo,Vfo,Fh,Xne,Xfo,zfo,nI,Wfo,Qfo,Hfo,Th,zne,Ufo,Jfo,sI,Yfo,Kfo,Zfo,Mh,Wne,emo,omo,lI,rmo,tmo,amo,Eh,Qne,nmo,smo,iI,lmo,imo,dmo,Ch,Hne,cmo,fmo,dI,mmo,gmo,hmo,wh,Une,pmo,_mo,cI,umo,bmo,vmo,Ah,Jne,Fmo,Tmo,fI,Mmo,Emo,Cmo,yh,Yne,wmo,Amo,mI,ymo,Lmo,xmo,Lh,Kne,$mo,kmo,gI,Smo,Rmo,Pmo,xh,Zne,Bmo,Imo,hI,Nmo,qmo,jmo,$h,ese,Dmo,Gmo,pI,Omo,Vmo,Xmo,kh,ose,zmo,Wmo,_I,Qmo,Hmo,Umo,Sh,rse,Jmo,Ymo,uI,Kmo,Zmo,ego,Rh,tse,ogo,rgo,bI,tgo,ago,ngo,Ph,ase,sgo,lgo,vI,igo,dgo,cgo,Bh,nse,fgo,mgo,FI,ggo,hgo,pgo,Ih,sse,_go,ugo,TI,bgo,vgo,Fgo,Nh,lse,Tgo,Mgo,MI,Ego,Cgo,wgo,qh,Ago,jh,ygo,Dh,oy,Lgo,ise,xgo,zqe,Ei,Gh,dse,ry,$go,cse,kgo,Wqe,yo,ty,Sgo,ay,Rgo,EI,Pgo,Bgo,Igo,ny,Ngo,fse,qgo,jgo,Dgo,Ue,sy,Ggo,mse,Ogo,Vgo,Ci,Xgo,gse,zgo,Wgo,hse,Qgo,Hgo,Ugo,he,Oh,pse,Jgo,Ygo,CI,Kgo,Zgo,eho,Vh,_se,oho,rho,use,tho,aho,nho,Xh,bse,sho,lho,wI,iho,dho,cho,zh,vse,fho,mho,AI,gho,hho,pho,Wh,Fse,_ho,uho,yI,bho,vho,Fho,Qh,Tse,Tho,Mho,LI,Eho,Cho,who,Hh,Mse,Aho,yho,xI,Lho,xho,$ho,Uh,Ese,kho,Sho,$I,Rho,Pho,Bho,Jh,Cse,Iho,Nho,kI,qho,jho,Dho,Yh,wse,Gho,Oho,SI,Vho,Xho,zho,Kh,Ase,Who,Qho,RI,Hho,Uho,Jho,Zh,yse,Yho,Kho,PI,Zho,epo,opo,ep,Lse,rpo,tpo,BI,apo,npo,spo,op,xse,lpo,ipo,II,dpo,cpo,fpo,rp,$se,mpo,gpo,NI,hpo,ppo,_po,tp,kse,upo,bpo,qI,vpo,Fpo,Tpo,ap,Sse,Mpo,Epo,jI,Cpo,wpo,Apo,np,ypo,sp,Lpo,lp,ly,xpo,Rse,$po,Qqe,wi,ip,Pse,iy,kpo,Bse,Spo,Hqe,Lo,dy,Rpo,Ai,Ppo,DI,Bpo,Ipo,GI,Npo,qpo,jpo,cy,Dpo,Ise,Gpo,Opo,Vpo,tt,fy,Xpo,Nse,zpo,Wpo,yi,Qpo,qse,Hpo,Upo,OI,Jpo,Ypo,Kpo,dp,Zpo,Je,my,e_o,jse,o_o,r_o,La,t_o,Dse,a_o,n_o,Gse,s_o,l_o,Ose,i_o,d_o,c_o,x,cp,Vse,f_o,m_o,VI,g_o,h_o,p_o,fp,Xse,__o,u_o,XI,b_o,v_o,F_o,mp,zse,T_o,M_o,zI,E_o,C_o,w_o,gp,Wse,A_o,y_o,WI,L_o,x_o,$_o,hp,Qse,k_o,S_o,QI,R_o,P_o,B_o,pp,Hse,I_o,N_o,HI,q_o,j_o,D_o,_p,Use,G_o,O_o,UI,V_o,X_o,z_o,up,Jse,W_o,Q_o,JI,H_o,U_o,J_o,bp,Yse,Y_o,K_o,YI,Z_o,euo,ouo,vp,Kse,ruo,tuo,KI,auo,nuo,suo,Fp,Zse,luo,iuo,ZI,duo,cuo,fuo,Tp,ele,muo,guo,eN,huo,puo,_uo,Mp,ole,uuo,buo,oN,vuo,Fuo,Tuo,Ep,rle,Muo,Euo,rN,Cuo,wuo,Auo,Cp,tle,yuo,Luo,tN,xuo,$uo,kuo,wp,ale,Suo,Ruo,aN,Puo,Buo,Iuo,Ap,nle,Nuo,quo,nN,juo,Duo,Guo,yp,sle,Ouo,Vuo,sN,Xuo,zuo,Wuo,Lp,lle,Quo,Huo,lN,Uuo,Juo,Yuo,xp,ile,Kuo,Zuo,iN,e4o,o4o,r4o,$p,dle,t4o,a4o,dN,n4o,s4o,l4o,kp,cle,i4o,d4o,cN,c4o,f4o,m4o,Sp,fle,g4o,h4o,fN,p4o,_4o,u4o,Rp,mle,b4o,v4o,mN,F4o,T4o,M4o,Pp,gle,E4o,C4o,gN,w4o,A4o,y4o,Bp,hle,L4o,x4o,hN,$4o,k4o,S4o,Ip,ple,R4o,P4o,pN,B4o,I4o,N4o,Np,_le,q4o,j4o,_N,D4o,G4o,O4o,qp,ule,V4o,X4o,uN,z4o,W4o,Q4o,jp,ble,H4o,U4o,bN,J4o,Y4o,K4o,Dp,vle,Z4o,e1o,vN,o1o,r1o,t1o,Gp,Fle,a1o,n1o,FN,s1o,l1o,i1o,Op,Tle,d1o,c1o,TN,f1o,m1o,g1o,Ps,Mle,h1o,p1o,MN,_1o,u1o,EN,b1o,v1o,F1o,Vp,Ele,T1o,M1o,CN,E1o,C1o,w1o,Xp,Cle,A1o,y1o,wN,L1o,x1o,$1o,zp,wle,k1o,S1o,AN,R1o,P1o,B1o,Wp,Ale,I1o,N1o,yN,q1o,j1o,D1o,Qp,yle,G1o,O1o,LN,V1o,X1o,z1o,Hp,Lle,W1o,Q1o,xN,H1o,U1o,J1o,Up,xle,Y1o,K1o,$N,Z1o,e7o,o7o,Jp,$le,r7o,t7o,kN,a7o,n7o,s7o,Yp,kle,l7o,i7o,SN,d7o,c7o,f7o,Kp,Sle,m7o,g7o,RN,h7o,p7o,_7o,Zp,Rle,u7o,b7o,PN,v7o,F7o,T7o,e_,Ple,M7o,E7o,BN,C7o,w7o,A7o,o_,Ble,y7o,L7o,IN,x7o,$7o,k7o,r_,Ile,S7o,R7o,NN,P7o,B7o,I7o,t_,Nle,N7o,q7o,qN,j7o,D7o,G7o,a_,qle,O7o,V7o,jN,X7o,z7o,W7o,n_,jle,Q7o,H7o,DN,U7o,J7o,Y7o,s_,Dle,K7o,Z7o,GN,ebo,obo,rbo,l_,Gle,tbo,abo,ON,nbo,sbo,lbo,i_,Ole,ibo,dbo,VN,cbo,fbo,mbo,d_,Vle,gbo,hbo,XN,pbo,_bo,ubo,c_,Xle,bbo,vbo,zN,Fbo,Tbo,Mbo,f_,zle,Ebo,Cbo,WN,wbo,Abo,ybo,m_,Wle,Lbo,xbo,QN,$bo,kbo,Sbo,g_,Qle,Rbo,Pbo,HN,Bbo,Ibo,Nbo,h_,Hle,qbo,jbo,UN,Dbo,Gbo,Obo,p_,Ule,Vbo,Xbo,JN,zbo,Wbo,Qbo,__,Jle,Hbo,Ubo,YN,Jbo,Ybo,Kbo,u_,Yle,Zbo,e2o,KN,o2o,r2o,t2o,b_,Kle,a2o,n2o,ZN,s2o,l2o,i2o,v_,Zle,d2o,c2o,eq,f2o,m2o,g2o,F_,eie,h2o,p2o,oq,_2o,u2o,b2o,T_,oie,v2o,F2o,rq,T2o,M2o,E2o,M_,rie,C2o,w2o,tq,A2o,y2o,L2o,E_,tie,x2o,$2o,aq,k2o,S2o,R2o,C_,aie,P2o,B2o,nq,I2o,N2o,q2o,w_,nie,j2o,D2o,sq,G2o,O2o,V2o,A_,sie,X2o,z2o,lq,W2o,Q2o,H2o,y_,lie,U2o,J2o,iq,Y2o,K2o,Z2o,L_,iie,evo,ovo,dq,rvo,tvo,avo,x_,die,nvo,svo,cq,lvo,ivo,dvo,$_,cie,cvo,fvo,fq,mvo,gvo,hvo,k_,fie,pvo,_vo,mq,uvo,bvo,vvo,S_,mie,Fvo,Tvo,gq,Mvo,Evo,Cvo,R_,gie,wvo,Avo,hq,yvo,Lvo,xvo,P_,hie,$vo,kvo,pq,Svo,Rvo,Pvo,B_,pie,Bvo,Ivo,_q,Nvo,qvo,jvo,I_,_ie,Dvo,Gvo,uq,Ovo,Vvo,Xvo,N_,uie,zvo,Wvo,bq,Qvo,Hvo,Uvo,q_,bie,Jvo,Yvo,vq,Kvo,Zvo,eFo,j_,vie,oFo,rFo,Fq,tFo,aFo,nFo,D_,Fie,sFo,lFo,Tq,iFo,dFo,cFo,G_,Tie,fFo,mFo,Mq,gFo,hFo,pFo,O_,Mie,_Fo,uFo,Eq,bFo,vFo,FFo,V_,Eie,TFo,MFo,Cq,EFo,CFo,wFo,X_,Cie,AFo,yFo,wq,LFo,xFo,$Fo,z_,wie,kFo,SFo,Aq,RFo,PFo,BFo,W_,Aie,IFo,NFo,yq,qFo,jFo,DFo,Q_,yie,GFo,OFo,Lq,VFo,XFo,zFo,H_,Lie,WFo,QFo,xq,HFo,UFo,JFo,U_,xie,YFo,KFo,$q,ZFo,eTo,oTo,J_,$ie,rTo,tTo,kq,aTo,nTo,sTo,Y_,kie,lTo,iTo,Sq,dTo,cTo,fTo,K_,Sie,mTo,gTo,Rq,hTo,pTo,_To,Z_,Rie,uTo,bTo,Pq,vTo,FTo,TTo,eu,Pie,MTo,ETo,Bq,CTo,wTo,ATo,ou,Bie,yTo,LTo,Iq,xTo,$To,kTo,ru,Iie,STo,RTo,Nq,PTo,BTo,ITo,tu,Nie,NTo,qTo,qq,jTo,DTo,GTo,au,OTo,qie,VTo,XTo,jie,zTo,WTo,nu,Uqe,Li,su,Die,gy,QTo,Gie,HTo,Jqe,xo,hy,UTo,xi,JTo,jq,YTo,KTo,Dq,ZTo,eMo,oMo,py,rMo,Oie,tMo,aMo,nMo,at,_y,sMo,Vie,lMo,iMo,$i,dMo,Xie,cMo,fMo,Gq,mMo,gMo,hMo,lu,pMo,Ye,uy,_Mo,zie,uMo,bMo,xa,vMo,Wie,FMo,TMo,Qie,MMo,EMo,Hie,CMo,wMo,AMo,G,iu,Uie,yMo,LMo,Oq,xMo,$Mo,kMo,du,Jie,SMo,RMo,Vq,PMo,BMo,IMo,cu,Yie,NMo,qMo,Xq,jMo,DMo,GMo,fu,Kie,OMo,VMo,zq,XMo,zMo,WMo,mu,Zie,QMo,HMo,Wq,UMo,JMo,YMo,gu,ede,KMo,ZMo,Qq,eEo,oEo,rEo,hu,ode,tEo,aEo,Hq,nEo,sEo,lEo,pu,rde,iEo,dEo,Uq,cEo,fEo,mEo,_u,tde,gEo,hEo,Jq,pEo,_Eo,uEo,uu,ade,bEo,vEo,Yq,FEo,TEo,MEo,bu,nde,EEo,CEo,Kq,wEo,AEo,yEo,vu,sde,LEo,xEo,Zq,$Eo,kEo,SEo,Fu,lde,REo,PEo,ej,BEo,IEo,NEo,Tu,ide,qEo,jEo,oj,DEo,GEo,OEo,Mu,dde,VEo,XEo,rj,zEo,WEo,QEo,Eu,cde,HEo,UEo,tj,JEo,YEo,KEo,Cu,fde,ZEo,eCo,aj,oCo,rCo,tCo,wu,mde,aCo,nCo,nj,sCo,lCo,iCo,Au,gde,dCo,cCo,sj,fCo,mCo,gCo,yu,hde,hCo,pCo,lj,_Co,uCo,bCo,Lu,pde,vCo,FCo,ij,TCo,MCo,ECo,xu,_de,CCo,wCo,dj,ACo,yCo,LCo,$u,ude,xCo,$Co,cj,kCo,SCo,RCo,ku,bde,PCo,BCo,fj,ICo,NCo,qCo,Su,vde,jCo,DCo,mj,GCo,OCo,VCo,Ru,Fde,XCo,zCo,gj,WCo,QCo,HCo,Pu,Tde,UCo,JCo,hj,YCo,KCo,ZCo,Bu,Mde,e5o,o5o,pj,r5o,t5o,a5o,Iu,Ede,n5o,s5o,_j,l5o,i5o,d5o,Nu,Cde,c5o,f5o,uj,m5o,g5o,h5o,qu,wde,p5o,_5o,bj,u5o,b5o,v5o,ju,Ade,F5o,T5o,vj,M5o,E5o,C5o,Du,yde,w5o,A5o,Fj,y5o,L5o,x5o,Gu,Lde,$5o,k5o,Tj,S5o,R5o,P5o,Ou,xde,B5o,I5o,Mj,N5o,q5o,j5o,Vu,$de,D5o,G5o,Ej,O5o,V5o,X5o,Xu,kde,z5o,W5o,Cj,Q5o,H5o,U5o,zu,Sde,J5o,Y5o,wj,K5o,Z5o,e3o,Wu,Rde,o3o,r3o,Aj,t3o,a3o,n3o,Qu,Pde,s3o,l3o,yj,i3o,d3o,c3o,Hu,Bde,f3o,m3o,Lj,g3o,h3o,p3o,Uu,Ide,_3o,u3o,xj,b3o,v3o,F3o,Ju,Nde,T3o,M3o,$j,E3o,C3o,w3o,Yu,A3o,qde,y3o,L3o,jde,x3o,$3o,Ku,Yqe,ki,Zu,Dde,by,k3o,Gde,S3o,Kqe,$o,vy,R3o,Si,P3o,kj,B3o,I3o,Sj,N3o,q3o,j3o,Fy,D3o,Ode,G3o,O3o,V3o,nt,Ty,X3o,Vde,z3o,W3o,Ri,Q3o,Xde,H3o,U3o,Rj,J3o,Y3o,K3o,e4,Z3o,Ke,My,e0o,zde,o0o,r0o,$a,t0o,Wde,a0o,n0o,Qde,s0o,l0o,Hde,i0o,d0o,c0o,z,o4,Ude,f0o,m0o,Pj,g0o,h0o,p0o,r4,Jde,_0o,u0o,Bj,b0o,v0o,F0o,t4,Yde,T0o,M0o,Ij,E0o,C0o,w0o,a4,Kde,A0o,y0o,Nj,L0o,x0o,$0o,n4,Zde,k0o,S0o,qj,R0o,P0o,B0o,s4,ece,I0o,N0o,jj,q0o,j0o,D0o,l4,oce,G0o,O0o,Dj,V0o,X0o,z0o,i4,rce,W0o,Q0o,Gj,H0o,U0o,J0o,d4,tce,Y0o,K0o,Oj,Z0o,ewo,owo,c4,ace,rwo,two,Vj,awo,nwo,swo,f4,nce,lwo,iwo,Xj,dwo,cwo,fwo,m4,sce,mwo,gwo,zj,hwo,pwo,_wo,g4,lce,uwo,bwo,Wj,vwo,Fwo,Two,h4,ice,Mwo,Ewo,Qj,Cwo,wwo,Awo,p4,dce,ywo,Lwo,Hj,xwo,$wo,kwo,_4,cce,Swo,Rwo,Uj,Pwo,Bwo,Iwo,u4,fce,Nwo,qwo,Jj,jwo,Dwo,Gwo,b4,mce,Owo,Vwo,Yj,Xwo,zwo,Wwo,v4,gce,Qwo,Hwo,Kj,Uwo,Jwo,Ywo,F4,hce,Kwo,Zwo,Zj,e6o,o6o,r6o,T4,pce,t6o,a6o,eD,n6o,s6o,l6o,M4,_ce,i6o,d6o,oD,c6o,f6o,m6o,E4,uce,g6o,h6o,rD,p6o,_6o,u6o,C4,bce,b6o,v6o,tD,F6o,T6o,M6o,w4,vce,E6o,C6o,aD,w6o,A6o,y6o,A4,Fce,L6o,x6o,nD,$6o,k6o,S6o,y4,Tce,R6o,P6o,sD,B6o,I6o,N6o,L4,Mce,q6o,j6o,lD,D6o,G6o,O6o,x4,Ece,V6o,X6o,iD,z6o,W6o,Q6o,$4,Cce,H6o,U6o,dD,J6o,Y6o,K6o,k4,wce,Z6o,eAo,cD,oAo,rAo,tAo,S4,Ace,aAo,nAo,fD,sAo,lAo,iAo,R4,yce,dAo,cAo,mD,fAo,mAo,gAo,P4,Lce,hAo,pAo,gD,_Ao,uAo,bAo,B4,xce,vAo,FAo,hD,TAo,MAo,EAo,I4,$ce,CAo,wAo,pD,AAo,yAo,LAo,N4,kce,xAo,$Ao,_D,kAo,SAo,RAo,q4,Sce,PAo,BAo,uD,IAo,NAo,qAo,j4,jAo,Rce,DAo,GAo,Pce,OAo,VAo,D4,Zqe,Pi,G4,Bce,Ey,XAo,Ice,zAo,eje,ko,Cy,WAo,Bi,QAo,bD,HAo,UAo,vD,JAo,YAo,KAo,wy,ZAo,Nce,eyo,oyo,ryo,st,Ay,tyo,qce,ayo,nyo,Ii,syo,jce,lyo,iyo,FD,dyo,cyo,fyo,O4,myo,Ze,yy,gyo,Dce,hyo,pyo,ka,_yo,Gce,uyo,byo,Oce,vyo,Fyo,Vce,Tyo,Myo,Eyo,Q,V4,Xce,Cyo,wyo,TD,Ayo,yyo,Lyo,X4,zce,xyo,$yo,MD,kyo,Syo,Ryo,z4,Wce,Pyo,Byo,ED,Iyo,Nyo,qyo,W4,Qce,jyo,Dyo,CD,Gyo,Oyo,Vyo,Q4,Hce,Xyo,zyo,wD,Wyo,Qyo,Hyo,H4,Uce,Uyo,Jyo,AD,Yyo,Kyo,Zyo,U4,Jce,eLo,oLo,yD,rLo,tLo,aLo,J4,Yce,nLo,sLo,LD,lLo,iLo,dLo,Y4,Kce,cLo,fLo,xD,mLo,gLo,hLo,K4,Zce,pLo,_Lo,$D,uLo,bLo,vLo,Z4,efe,FLo,TLo,kD,MLo,ELo,CLo,e1,ofe,wLo,ALo,SD,yLo,LLo,xLo,o1,rfe,$Lo,kLo,RD,SLo,RLo,PLo,r1,tfe,BLo,ILo,PD,NLo,qLo,jLo,t1,afe,DLo,GLo,BD,OLo,VLo,XLo,a1,nfe,zLo,WLo,ID,QLo,HLo,ULo,n1,sfe,JLo,YLo,ND,KLo,ZLo,e8o,s1,lfe,o8o,r8o,qD,t8o,a8o,n8o,l1,ife,s8o,l8o,jD,i8o,d8o,c8o,i1,dfe,f8o,m8o,DD,g8o,h8o,p8o,d1,cfe,_8o,u8o,GD,b8o,v8o,F8o,c1,ffe,T8o,M8o,OD,E8o,C8o,w8o,f1,mfe,A8o,y8o,VD,L8o,x8o,$8o,m1,gfe,k8o,S8o,XD,R8o,P8o,B8o,g1,hfe,I8o,N8o,zD,q8o,j8o,D8o,h1,pfe,G8o,O8o,WD,V8o,X8o,z8o,p1,_fe,W8o,Q8o,QD,H8o,U8o,J8o,_1,ufe,Y8o,K8o,HD,Z8o,e9o,o9o,u1,bfe,r9o,t9o,UD,a9o,n9o,s9o,b1,vfe,l9o,i9o,JD,d9o,c9o,f9o,v1,Ffe,m9o,g9o,Tfe,h9o,p9o,_9o,F1,Mfe,u9o,b9o,YD,v9o,F9o,T9o,T1,Efe,M9o,E9o,KD,C9o,w9o,A9o,M1,Cfe,y9o,L9o,ZD,x9o,$9o,k9o,E1,wfe,S9o,R9o,eG,P9o,B9o,I9o,C1,N9o,Afe,q9o,j9o,yfe,D9o,G9o,w1,oje,Ni,A1,Lfe,Ly,O9o,xfe,V9o,rje,So,xy,X9o,qi,z9o,oG,W9o,Q9o,rG,H9o,U9o,J9o,$y,Y9o,$fe,K9o,Z9o,exo,lt,ky,oxo,kfe,rxo,txo,ji,axo,Sfe,nxo,sxo,tG,lxo,ixo,dxo,y1,cxo,eo,Sy,fxo,Rfe,mxo,gxo,Sa,hxo,Pfe,pxo,_xo,Bfe,uxo,bxo,Ife,vxo,Fxo,Txo,_e,L1,Nfe,Mxo,Exo,aG,Cxo,wxo,Axo,x1,qfe,yxo,Lxo,nG,xxo,$xo,kxo,$1,jfe,Sxo,Rxo,sG,Pxo,Bxo,Ixo,k1,Dfe,Nxo,qxo,lG,jxo,Dxo,Gxo,S1,Gfe,Oxo,Vxo,iG,Xxo,zxo,Wxo,R1,Ofe,Qxo,Hxo,dG,Uxo,Jxo,Yxo,P1,Vfe,Kxo,Zxo,cG,e$o,o$o,r$o,B1,Xfe,t$o,a$o,fG,n$o,s$o,l$o,I1,zfe,i$o,d$o,mG,c$o,f$o,m$o,N1,Wfe,g$o,h$o,gG,p$o,_$o,u$o,q1,Qfe,b$o,v$o,hG,F$o,T$o,M$o,j1,Hfe,E$o,C$o,pG,w$o,A$o,y$o,D1,Ufe,L$o,x$o,_G,$$o,k$o,S$o,G1,Jfe,R$o,P$o,uG,B$o,I$o,N$o,O1,Yfe,q$o,j$o,bG,D$o,G$o,O$o,V1,Kfe,V$o,X$o,vG,z$o,W$o,Q$o,X1,H$o,Zfe,U$o,J$o,eme,Y$o,K$o,z1,tje,Di,W1,ome,Ry,Z$o,rme,eko,aje,Ro,Py,oko,Gi,rko,FG,tko,ako,TG,nko,sko,lko,By,iko,tme,dko,cko,fko,it,Iy,mko,ame,gko,hko,Oi,pko,nme,_ko,uko,MG,bko,vko,Fko,Q1,Tko,oo,Ny,Mko,sme,Eko,Cko,Ra,wko,lme,Ako,yko,ime,Lko,xko,dme,$ko,kko,Sko,N,H1,cme,Rko,Pko,EG,Bko,Iko,Nko,U1,fme,qko,jko,CG,Dko,Gko,Oko,J1,mme,Vko,Xko,wG,zko,Wko,Qko,Y1,gme,Hko,Uko,AG,Jko,Yko,Kko,K1,hme,Zko,eSo,yG,oSo,rSo,tSo,Z1,pme,aSo,nSo,LG,sSo,lSo,iSo,e7,_me,dSo,cSo,xG,fSo,mSo,gSo,o7,ume,hSo,pSo,$G,_So,uSo,bSo,r7,bme,vSo,FSo,kG,TSo,MSo,ESo,t7,vme,CSo,wSo,SG,ASo,ySo,LSo,a7,Fme,xSo,$So,RG,kSo,SSo,RSo,n7,Tme,PSo,BSo,PG,ISo,NSo,qSo,s7,Mme,jSo,DSo,BG,GSo,OSo,VSo,l7,Eme,XSo,zSo,IG,WSo,QSo,HSo,i7,Cme,USo,JSo,NG,YSo,KSo,ZSo,d7,wme,eRo,oRo,qG,rRo,tRo,aRo,c7,Ame,nRo,sRo,jG,lRo,iRo,dRo,f7,yme,cRo,fRo,DG,mRo,gRo,hRo,m7,Lme,pRo,_Ro,GG,uRo,bRo,vRo,g7,xme,FRo,TRo,OG,MRo,ERo,CRo,h7,$me,wRo,ARo,VG,yRo,LRo,xRo,p7,kme,$Ro,kRo,XG,SRo,RRo,PRo,_7,Sme,BRo,IRo,zG,NRo,qRo,jRo,u7,Rme,DRo,GRo,WG,ORo,VRo,XRo,b7,Pme,zRo,WRo,QG,QRo,HRo,URo,v7,Bme,JRo,YRo,HG,KRo,ZRo,ePo,F7,Ime,oPo,rPo,UG,tPo,aPo,nPo,T7,Nme,sPo,lPo,JG,iPo,dPo,cPo,M7,qme,fPo,mPo,YG,gPo,hPo,pPo,E7,jme,_Po,uPo,KG,bPo,vPo,FPo,C7,Dme,TPo,MPo,ZG,EPo,CPo,wPo,w7,Gme,APo,yPo,eO,LPo,xPo,$Po,A7,Ome,kPo,SPo,oO,RPo,PPo,BPo,y7,Vme,IPo,NPo,rO,qPo,jPo,DPo,L7,Xme,GPo,OPo,tO,VPo,XPo,zPo,x7,zme,WPo,QPo,aO,HPo,UPo,JPo,$7,Wme,YPo,KPo,nO,ZPo,eBo,oBo,k7,Qme,rBo,tBo,sO,aBo,nBo,sBo,S7,Hme,lBo,iBo,lO,dBo,cBo,fBo,R7,Ume,mBo,gBo,iO,hBo,pBo,_Bo,P7,Jme,uBo,bBo,dO,vBo,FBo,TBo,B7,Yme,MBo,EBo,cO,CBo,wBo,ABo,I7,Kme,yBo,LBo,fO,xBo,$Bo,kBo,N7,Zme,SBo,RBo,mO,PBo,BBo,IBo,q7,ege,NBo,qBo,gO,jBo,DBo,GBo,j7,oge,OBo,VBo,hO,XBo,zBo,WBo,D7,rge,QBo,HBo,pO,UBo,JBo,YBo,G7,KBo,tge,ZBo,eIo,age,oIo,rIo,O7,nje,Vi,V7,nge,qy,tIo,sge,aIo,sje,Po,jy,nIo,Xi,sIo,_O,lIo,iIo,uO,dIo,cIo,fIo,Dy,mIo,lge,gIo,hIo,pIo,dt,Gy,_Io,ige,uIo,bIo,zi,vIo,dge,FIo,TIo,bO,MIo,EIo,CIo,X7,wIo,ro,Oy,AIo,cge,yIo,LIo,Pa,xIo,fge,$Io,kIo,mge,SIo,RIo,gge,PIo,BIo,IIo,K,z7,hge,NIo,qIo,vO,jIo,DIo,GIo,W7,pge,OIo,VIo,FO,XIo,zIo,WIo,Q7,_ge,QIo,HIo,TO,UIo,JIo,YIo,H7,uge,KIo,ZIo,MO,eNo,oNo,rNo,U7,bge,tNo,aNo,EO,nNo,sNo,lNo,J7,vge,iNo,dNo,CO,cNo,fNo,mNo,Y7,Fge,gNo,hNo,wO,pNo,_No,uNo,K7,Tge,bNo,vNo,AO,FNo,TNo,MNo,Z7,Mge,ENo,CNo,yO,wNo,ANo,yNo,eb,Ege,LNo,xNo,LO,$No,kNo,SNo,ob,Cge,RNo,PNo,xO,BNo,INo,NNo,rb,wge,qNo,jNo,$O,DNo,GNo,ONo,tb,Age,VNo,XNo,kO,zNo,WNo,QNo,ab,yge,HNo,UNo,SO,JNo,YNo,KNo,nb,Lge,ZNo,eqo,RO,oqo,rqo,tqo,sb,xge,aqo,nqo,PO,sqo,lqo,iqo,lb,$ge,dqo,cqo,BO,fqo,mqo,gqo,ib,kge,hqo,pqo,IO,_qo,uqo,bqo,db,Sge,vqo,Fqo,NO,Tqo,Mqo,Eqo,cb,Rge,Cqo,wqo,qO,Aqo,yqo,Lqo,fb,Pge,xqo,$qo,jO,kqo,Sqo,Rqo,mb,Bge,Pqo,Bqo,DO,Iqo,Nqo,qqo,gb,Ige,jqo,Dqo,GO,Gqo,Oqo,Vqo,hb,Nge,Xqo,zqo,OO,Wqo,Qqo,Hqo,pb,qge,Uqo,Jqo,VO,Yqo,Kqo,Zqo,_b,jge,ejo,ojo,XO,rjo,tjo,ajo,ub,Dge,njo,sjo,zO,ljo,ijo,djo,bb,Gge,cjo,fjo,WO,mjo,gjo,hjo,vb,Oge,pjo,_jo,QO,ujo,bjo,vjo,Fb,Fjo,Vge,Tjo,Mjo,Xge,Ejo,Cjo,Tb,lje,Wi,Mb,zge,Vy,wjo,Wge,Ajo,ije,Bo,Xy,yjo,Qi,Ljo,HO,xjo,$jo,UO,kjo,Sjo,Rjo,zy,Pjo,Qge,Bjo,Ijo,Njo,ct,Wy,qjo,Hge,jjo,Djo,Hi,Gjo,Uge,Ojo,Vjo,JO,Xjo,zjo,Wjo,Eb,Qjo,to,Qy,Hjo,Jge,Ujo,Jjo,Ba,Yjo,Yge,Kjo,Zjo,Kge,eDo,oDo,Zge,rDo,tDo,aDo,Yr,Cb,ehe,nDo,sDo,YO,lDo,iDo,dDo,wb,ohe,cDo,fDo,KO,mDo,gDo,hDo,Ab,rhe,pDo,_Do,ZO,uDo,bDo,vDo,yb,the,FDo,TDo,eV,MDo,EDo,CDo,Lb,ahe,wDo,ADo,oV,yDo,LDo,xDo,xb,$Do,nhe,kDo,SDo,she,RDo,PDo,$b,dje,Ui,kb,lhe,Hy,BDo,ihe,IDo,cje,Io,Uy,NDo,Ji,qDo,rV,jDo,DDo,tV,GDo,ODo,VDo,Jy,XDo,dhe,zDo,WDo,QDo,ft,Yy,HDo,che,UDo,JDo,Yi,YDo,fhe,KDo,ZDo,aV,eGo,oGo,rGo,Sb,tGo,ao,Ky,aGo,mhe,nGo,sGo,Ia,lGo,ghe,iGo,dGo,hhe,cGo,fGo,phe,mGo,gGo,hGo,H,Rb,_he,pGo,_Go,nV,uGo,bGo,vGo,Pb,uhe,FGo,TGo,sV,MGo,EGo,CGo,Bb,bhe,wGo,AGo,lV,yGo,LGo,xGo,Ib,vhe,$Go,kGo,iV,SGo,RGo,PGo,Nb,Fhe,BGo,IGo,dV,NGo,qGo,jGo,qb,The,DGo,GGo,cV,OGo,VGo,XGo,jb,Mhe,zGo,WGo,fV,QGo,HGo,UGo,Db,Ehe,JGo,YGo,mV,KGo,ZGo,eOo,Gb,Che,oOo,rOo,gV,tOo,aOo,nOo,Ob,whe,sOo,lOo,hV,iOo,dOo,cOo,Vb,Ahe,fOo,mOo,pV,gOo,hOo,pOo,Xb,yhe,_Oo,uOo,_V,bOo,vOo,FOo,zb,Lhe,TOo,MOo,uV,EOo,COo,wOo,Wb,xhe,AOo,yOo,bV,LOo,xOo,$Oo,Qb,$he,kOo,SOo,vV,ROo,POo,BOo,Hb,khe,IOo,NOo,FV,qOo,jOo,DOo,Ub,She,GOo,OOo,TV,VOo,XOo,zOo,Jb,Rhe,WOo,QOo,MV,HOo,UOo,JOo,Yb,Phe,YOo,KOo,EV,ZOo,eVo,oVo,Kb,Bhe,rVo,tVo,CV,aVo,nVo,sVo,Zb,Ihe,lVo,iVo,wV,dVo,cVo,fVo,e2,Nhe,mVo,gVo,AV,hVo,pVo,_Vo,o2,qhe,uVo,bVo,yV,vVo,FVo,TVo,r2,jhe,MVo,EVo,LV,CVo,wVo,AVo,t2,Dhe,yVo,LVo,xV,xVo,$Vo,kVo,a2,Ghe,SVo,RVo,$V,PVo,BVo,IVo,n2,Ohe,NVo,qVo,kV,jVo,DVo,GVo,s2,Vhe,OVo,VVo,SV,XVo,zVo,WVo,l2,Xhe,QVo,HVo,RV,UVo,JVo,YVo,i2,zhe,KVo,ZVo,PV,eXo,oXo,rXo,d2,Whe,tXo,aXo,BV,nXo,sXo,lXo,c2,Qhe,iXo,dXo,IV,cXo,fXo,mXo,f2,Hhe,gXo,hXo,NV,pXo,_Xo,uXo,m2,Uhe,bXo,vXo,qV,FXo,TXo,MXo,g2,EXo,Jhe,CXo,wXo,Yhe,AXo,yXo,h2,fje,Ki,p2,Khe,Zy,LXo,Zhe,xXo,mje,No,eL,$Xo,Zi,kXo,jV,SXo,RXo,DV,PXo,BXo,IXo,oL,NXo,epe,qXo,jXo,DXo,mt,rL,GXo,ope,OXo,VXo,ed,XXo,rpe,zXo,WXo,GV,QXo,HXo,UXo,_2,JXo,no,tL,YXo,tpe,KXo,ZXo,Na,ezo,ape,ozo,rzo,npe,tzo,azo,spe,nzo,szo,lzo,V,u2,lpe,izo,dzo,OV,czo,fzo,mzo,b2,ipe,gzo,hzo,VV,pzo,_zo,uzo,v2,dpe,bzo,vzo,XV,Fzo,Tzo,Mzo,F2,cpe,Ezo,Czo,zV,wzo,Azo,yzo,T2,fpe,Lzo,xzo,WV,$zo,kzo,Szo,M2,mpe,Rzo,Pzo,QV,Bzo,Izo,Nzo,E2,gpe,qzo,jzo,HV,Dzo,Gzo,Ozo,C2,hpe,Vzo,Xzo,UV,zzo,Wzo,Qzo,w2,ppe,Hzo,Uzo,JV,Jzo,Yzo,Kzo,A2,_pe,Zzo,eWo,YV,oWo,rWo,tWo,y2,upe,aWo,nWo,KV,sWo,lWo,iWo,L2,bpe,dWo,cWo,ZV,fWo,mWo,gWo,x2,vpe,hWo,pWo,eX,_Wo,uWo,bWo,$2,Fpe,vWo,FWo,oX,TWo,MWo,EWo,k2,Tpe,CWo,wWo,rX,AWo,yWo,LWo,S2,Mpe,xWo,$Wo,tX,kWo,SWo,RWo,R2,Epe,PWo,BWo,aX,IWo,NWo,qWo,P2,Cpe,jWo,DWo,nX,GWo,OWo,VWo,B2,wpe,XWo,zWo,sX,WWo,QWo,HWo,I2,Ape,UWo,JWo,lX,YWo,KWo,ZWo,N2,ype,eQo,oQo,iX,rQo,tQo,aQo,q2,Lpe,nQo,sQo,dX,lQo,iQo,dQo,j2,xpe,cQo,fQo,cX,mQo,gQo,hQo,D2,$pe,pQo,_Qo,fX,uQo,bQo,vQo,G2,kpe,FQo,TQo,mX,MQo,EQo,CQo,O2,Spe,wQo,AQo,gX,yQo,LQo,xQo,V2,Rpe,$Qo,kQo,hX,SQo,RQo,PQo,X2,Ppe,BQo,IQo,pX,NQo,qQo,jQo,z2,Bpe,DQo,GQo,_X,OQo,VQo,XQo,W2,Ipe,zQo,WQo,uX,QQo,HQo,UQo,Q2,Npe,JQo,YQo,bX,KQo,ZQo,eHo,H2,qpe,oHo,rHo,vX,tHo,aHo,nHo,U2,jpe,sHo,lHo,FX,iHo,dHo,cHo,J2,Dpe,fHo,mHo,TX,gHo,hHo,pHo,Y2,Gpe,_Ho,uHo,MX,bHo,vHo,FHo,K2,Ope,THo,MHo,EX,EHo,CHo,wHo,Z2,Vpe,AHo,yHo,CX,LHo,xHo,$Ho,ev,Xpe,kHo,SHo,wX,RHo,PHo,BHo,ov,zpe,IHo,NHo,AX,qHo,jHo,DHo,rv,Wpe,GHo,OHo,yX,VHo,XHo,zHo,tv,WHo,Qpe,QHo,HHo,Hpe,UHo,JHo,av,gje,od,nv,Upe,aL,YHo,Jpe,KHo,hje,qo,nL,ZHo,rd,eUo,LX,oUo,rUo,xX,tUo,aUo,nUo,sL,sUo,Ype,lUo,iUo,dUo,gt,lL,cUo,Kpe,fUo,mUo,td,gUo,Zpe,hUo,pUo,$X,_Uo,uUo,bUo,sv,vUo,so,iL,FUo,e_e,TUo,MUo,qa,EUo,o_e,CUo,wUo,r_e,AUo,yUo,t_e,LUo,xUo,$Uo,a_e,lv,n_e,kUo,SUo,kX,RUo,PUo,BUo,iv,IUo,s_e,NUo,qUo,l_e,jUo,DUo,dv,pje,ad,cv,i_e,dL,GUo,d_e,OUo,_je,jo,cL,VUo,nd,XUo,SX,zUo,WUo,RX,QUo,HUo,UUo,fL,JUo,c_e,YUo,KUo,ZUo,ht,mL,eJo,f_e,oJo,rJo,sd,tJo,m_e,aJo,nJo,PX,sJo,lJo,iJo,fv,dJo,lo,gL,cJo,g_e,fJo,mJo,ja,gJo,h_e,hJo,pJo,p_e,_Jo,uJo,__e,bJo,vJo,FJo,Fe,mv,u_e,TJo,MJo,BX,EJo,CJo,wJo,gv,b_e,AJo,yJo,IX,LJo,xJo,$Jo,hv,v_e,kJo,SJo,NX,RJo,PJo,BJo,pv,F_e,IJo,NJo,qX,qJo,jJo,DJo,Bs,T_e,GJo,OJo,jX,VJo,XJo,DX,zJo,WJo,QJo,_v,M_e,HJo,UJo,GX,JJo,YJo,KJo,pt,E_e,ZJo,eYo,OX,oYo,rYo,VX,tYo,aYo,XX,nYo,sYo,lYo,uv,C_e,iYo,dYo,zX,cYo,fYo,mYo,bv,w_e,gYo,hYo,WX,pYo,_Yo,uYo,vv,A_e,bYo,vYo,QX,FYo,TYo,MYo,Fv,y_e,EYo,CYo,HX,wYo,AYo,yYo,Tv,L_e,LYo,xYo,UX,$Yo,kYo,SYo,Mv,x_e,RYo,PYo,JX,BYo,IYo,NYo,Ev,$_e,qYo,jYo,YX,DYo,GYo,OYo,Cv,VYo,k_e,XYo,zYo,S_e,WYo,QYo,wv,uje,ld,Av,R_e,hL,HYo,P_e,UYo,bje,Do,pL,JYo,id,YYo,KX,KYo,ZYo,ZX,eKo,oKo,rKo,_L,tKo,B_e,aKo,nKo,sKo,_t,uL,lKo,I_e,iKo,dKo,dd,cKo,N_e,fKo,mKo,ez,gKo,hKo,pKo,yv,_Ko,io,bL,uKo,q_e,bKo,vKo,Da,FKo,j_e,TKo,MKo,D_e,EKo,CKo,G_e,wKo,AKo,yKo,O_e,Lv,V_e,LKo,xKo,oz,$Ko,kKo,SKo,xv,RKo,X_e,PKo,BKo,z_e,IKo,NKo,$v,vje,cd,kv,W_e,vL,qKo,Q_e,jKo,Fje,Go,FL,DKo,fd,GKo,rz,OKo,VKo,tz,XKo,zKo,WKo,TL,QKo,H_e,HKo,UKo,JKo,ut,ML,YKo,U_e,KKo,ZKo,md,eZo,J_e,oZo,rZo,az,tZo,aZo,nZo,Sv,sZo,co,EL,lZo,Y_e,iZo,dZo,Ga,cZo,K_e,fZo,mZo,Z_e,gZo,hZo,eue,pZo,_Zo,uZo,Se,Rv,oue,bZo,vZo,nz,FZo,TZo,MZo,Pv,rue,EZo,CZo,sz,wZo,AZo,yZo,Bv,tue,LZo,xZo,lz,$Zo,kZo,SZo,Iv,aue,RZo,PZo,iz,BZo,IZo,NZo,Nv,nue,qZo,jZo,dz,DZo,GZo,OZo,qv,sue,VZo,XZo,cz,zZo,WZo,QZo,jv,lue,HZo,UZo,fz,JZo,YZo,KZo,Dv,iue,ZZo,eer,mz,oer,rer,ter,Gv,due,aer,ner,gz,ser,ler,ier,Ov,der,cue,cer,fer,fue,mer,ger,Vv,Tje,gd,Xv,mue,CL,her,gue,per,Mje,Oo,wL,_er,hd,uer,hz,ber,ver,pz,Fer,Ter,Mer,AL,Eer,hue,Cer,wer,Aer,bt,yL,yer,pue,Ler,xer,pd,$er,_ue,ker,Ser,_z,Rer,Per,Ber,zv,Ier,fo,LL,Ner,uue,qer,jer,Oa,Der,bue,Ger,Oer,vue,Ver,Xer,Fue,zer,Wer,Qer,Kr,Wv,Tue,Her,Uer,uz,Jer,Yer,Ker,Qv,Mue,Zer,eor,bz,oor,ror,tor,Hv,Eue,aor,nor,vz,sor,lor,ior,Uv,Cue,dor,cor,Fz,mor,gor,hor,Jv,wue,por,_or,Tz,uor,bor,vor,Yv,For,Aue,Tor,Mor,yue,Eor,Cor,Kv,Eje,_d,Zv,Lue,xL,wor,xue,Aor,Cje,Vo,$L,yor,ud,Lor,Mz,xor,$or,Ez,kor,Sor,Ror,kL,Por,$ue,Bor,Ior,Nor,vt,SL,qor,kue,jor,Dor,bd,Gor,Sue,Oor,Vor,Cz,Xor,zor,Wor,eF,Qor,mo,RL,Hor,Rue,Uor,Jor,Va,Yor,Pue,Kor,Zor,Bue,err,orr,Iue,rrr,trr,arr,Re,oF,Nue,nrr,srr,wz,lrr,irr,drr,rF,que,crr,frr,Az,mrr,grr,hrr,tF,jue,prr,_rr,yz,urr,brr,vrr,aF,Due,Frr,Trr,Lz,Mrr,Err,Crr,nF,Gue,wrr,Arr,xz,yrr,Lrr,xrr,sF,Oue,$rr,krr,$z,Srr,Rrr,Prr,lF,Vue,Brr,Irr,kz,Nrr,qrr,jrr,iF,Xue,Drr,Grr,Sz,Orr,Vrr,Xrr,dF,zue,zrr,Wrr,Rz,Qrr,Hrr,Urr,cF,Jrr,Wue,Yrr,Krr,Que,Zrr,etr,fF,wje,vd,mF,Hue,PL,otr,Uue,rtr,Aje,Xo,BL,ttr,Fd,atr,Pz,ntr,str,Bz,ltr,itr,dtr,IL,ctr,Jue,ftr,mtr,gtr,Ft,NL,htr,Yue,ptr,_tr,Td,utr,Kue,btr,vtr,Iz,Ftr,Ttr,Mtr,gF,Etr,go,qL,Ctr,Zue,wtr,Atr,Xa,ytr,e4e,Ltr,xtr,o4e,$tr,ktr,r4e,Str,Rtr,Ptr,jL,hF,t4e,Btr,Itr,Nz,Ntr,qtr,jtr,pF,a4e,Dtr,Gtr,qz,Otr,Vtr,Xtr,_F,ztr,n4e,Wtr,Qtr,s4e,Htr,Utr,uF,yje,Md,bF,l4e,DL,Jtr,i4e,Ytr,Lje,zo,GL,Ktr,Ed,Ztr,jz,ear,oar,Dz,rar,tar,aar,OL,nar,d4e,sar,lar,iar,Tt,VL,dar,c4e,car,far,Cd,mar,f4e,gar,har,Gz,par,_ar,uar,vF,bar,ho,XL,Far,m4e,Tar,Mar,za,Ear,g4e,Car,war,h4e,Aar,yar,p4e,Lar,xar,$ar,Zr,FF,_4e,kar,Sar,Oz,Rar,Par,Bar,TF,u4e,Iar,Nar,Vz,qar,jar,Dar,MF,b4e,Gar,Oar,Xz,Var,Xar,zar,EF,v4e,War,Qar,zz,Har,Uar,Jar,CF,F4e,Yar,Kar,Wz,Zar,enr,onr,wF,rnr,T4e,tnr,anr,M4e,nnr,snr,AF,xje,wd,yF,E4e,zL,lnr,C4e,inr,$je,Wo,WL,dnr,Ad,cnr,Qz,fnr,mnr,Hz,gnr,hnr,pnr,QL,_nr,w4e,unr,bnr,vnr,Mt,HL,Fnr,A4e,Tnr,Mnr,yd,Enr,y4e,Cnr,wnr,Uz,Anr,ynr,Lnr,LF,xnr,po,UL,$nr,L4e,knr,Snr,Wa,Rnr,x4e,Pnr,Bnr,$4e,Inr,Nnr,k4e,qnr,jnr,Dnr,Ld,xF,S4e,Gnr,Onr,Jz,Vnr,Xnr,znr,$F,R4e,Wnr,Qnr,Yz,Hnr,Unr,Jnr,kF,P4e,Ynr,Knr,Kz,Znr,esr,osr,SF,rsr,B4e,tsr,asr,I4e,nsr,ssr,RF,kje,xd,PF,N4e,JL,lsr,q4e,isr,Sje,Qo,YL,dsr,$d,csr,Zz,fsr,msr,eW,gsr,hsr,psr,KL,_sr,j4e,usr,bsr,vsr,Et,ZL,Fsr,D4e,Tsr,Msr,kd,Esr,G4e,Csr,wsr,oW,Asr,ysr,Lsr,BF,xsr,_o,e8,$sr,O4e,ksr,Ssr,Qa,Rsr,V4e,Psr,Bsr,X4e,Isr,Nsr,z4e,qsr,jsr,Dsr,o8,IF,W4e,Gsr,Osr,rW,Vsr,Xsr,zsr,NF,Q4e,Wsr,Qsr,tW,Hsr,Usr,Jsr,qF,Ysr,H4e,Ksr,Zsr,U4e,elr,olr,jF,Rje,Sd,DF,J4e,r8,rlr,Y4e,tlr,Pje,Ho,t8,alr,Rd,nlr,aW,slr,llr,nW,ilr,dlr,clr,a8,flr,K4e,mlr,glr,hlr,Ct,n8,plr,Z4e,_lr,ulr,Pd,blr,e1e,vlr,Flr,sW,Tlr,Mlr,Elr,GF,Clr,uo,s8,wlr,o1e,Alr,ylr,Ha,Llr,r1e,xlr,$lr,t1e,klr,Slr,a1e,Rlr,Plr,Blr,n1e,OF,s1e,Ilr,Nlr,lW,qlr,jlr,Dlr,VF,Glr,l1e,Olr,Vlr,i1e,Xlr,zlr,XF,Bje,Bd,zF,d1e,l8,Wlr,c1e,Qlr,Ije,Uo,i8,Hlr,Id,Ulr,iW,Jlr,Ylr,dW,Klr,Zlr,eir,d8,oir,f1e,rir,tir,air,wt,c8,nir,m1e,sir,lir,Nd,iir,g1e,dir,cir,cW,fir,mir,gir,WF,hir,bo,f8,pir,h1e,_ir,uir,Ua,bir,p1e,vir,Fir,_1e,Tir,Mir,u1e,Eir,Cir,wir,Ja,QF,b1e,Air,yir,fW,Lir,xir,$ir,HF,v1e,kir,Sir,mW,Rir,Pir,Bir,UF,F1e,Iir,Nir,gW,qir,jir,Dir,JF,T1e,Gir,Oir,hW,Vir,Xir,zir,YF,Wir,M1e,Qir,Hir,E1e,Uir,Jir,KF,Nje,qd,ZF,C1e,m8,Yir,w1e,Kir,qje,Jo,g8,Zir,jd,edr,pW,odr,rdr,_W,tdr,adr,ndr,h8,sdr,A1e,ldr,idr,ddr,At,p8,cdr,y1e,fdr,mdr,Dd,gdr,L1e,hdr,pdr,uW,_dr,udr,bdr,eT,vdr,vo,_8,Fdr,x1e,Tdr,Mdr,Ya,Edr,$1e,Cdr,wdr,k1e,Adr,ydr,S1e,Ldr,xdr,$dr,R1e,oT,P1e,kdr,Sdr,bW,Rdr,Pdr,Bdr,rT,Idr,B1e,Ndr,qdr,I1e,jdr,Ddr,tT,jje,Gd,aT,N1e,u8,Gdr,q1e,Odr,Dje,Yo,b8,Vdr,Od,Xdr,vW,zdr,Wdr,FW,Qdr,Hdr,Udr,v8,Jdr,j1e,Ydr,Kdr,Zdr,yt,F8,ecr,D1e,ocr,rcr,Vd,tcr,G1e,acr,ncr,TW,scr,lcr,icr,nT,dcr,wr,T8,ccr,O1e,fcr,mcr,Ka,gcr,V1e,hcr,pcr,X1e,_cr,ucr,z1e,bcr,vcr,Fcr,q,sT,W1e,Tcr,Mcr,MW,Ecr,Ccr,wcr,lT,Q1e,Acr,ycr,EW,Lcr,xcr,$cr,iT,H1e,kcr,Scr,CW,Rcr,Pcr,Bcr,dT,U1e,Icr,Ncr,wW,qcr,jcr,Dcr,cT,J1e,Gcr,Ocr,AW,Vcr,Xcr,zcr,fT,Y1e,Wcr,Qcr,yW,Hcr,Ucr,Jcr,mT,K1e,Ycr,Kcr,LW,Zcr,efr,ofr,gT,Z1e,rfr,tfr,xW,afr,nfr,sfr,hT,e7e,lfr,ifr,$W,dfr,cfr,ffr,pT,o7e,mfr,gfr,kW,hfr,pfr,_fr,_T,r7e,ufr,bfr,SW,vfr,Ffr,Tfr,uT,t7e,Mfr,Efr,RW,Cfr,wfr,Afr,bT,a7e,yfr,Lfr,PW,xfr,$fr,kfr,vT,n7e,Sfr,Rfr,BW,Pfr,Bfr,Ifr,FT,s7e,Nfr,qfr,IW,jfr,Dfr,Gfr,TT,l7e,Ofr,Vfr,NW,Xfr,zfr,Wfr,MT,i7e,Qfr,Hfr,qW,Ufr,Jfr,Yfr,Is,d7e,Kfr,Zfr,jW,emr,omr,DW,rmr,tmr,amr,ET,c7e,nmr,smr,GW,lmr,imr,dmr,CT,f7e,cmr,fmr,OW,mmr,gmr,hmr,wT,m7e,pmr,_mr,VW,umr,bmr,vmr,AT,g7e,Fmr,Tmr,XW,Mmr,Emr,Cmr,yT,h7e,wmr,Amr,zW,ymr,Lmr,xmr,LT,p7e,$mr,kmr,WW,Smr,Rmr,Pmr,xT,_7e,Bmr,Imr,QW,Nmr,qmr,jmr,$T,u7e,Dmr,Gmr,HW,Omr,Vmr,Xmr,kT,b7e,zmr,Wmr,UW,Qmr,Hmr,Umr,ST,v7e,Jmr,Ymr,JW,Kmr,Zmr,egr,RT,F7e,ogr,rgr,YW,tgr,agr,ngr,PT,T7e,sgr,lgr,KW,igr,dgr,cgr,BT,M7e,fgr,mgr,ZW,ggr,hgr,pgr,IT,E7e,_gr,ugr,eQ,bgr,vgr,Fgr,NT,C7e,Tgr,Mgr,oQ,Egr,Cgr,wgr,qT,w7e,Agr,ygr,rQ,Lgr,xgr,$gr,jT,A7e,kgr,Sgr,tQ,Rgr,Pgr,Bgr,DT,y7e,Igr,Ngr,aQ,qgr,jgr,Dgr,GT,L7e,Ggr,Ogr,nQ,Vgr,Xgr,zgr,OT,x7e,Wgr,Qgr,sQ,Hgr,Ugr,Jgr,VT,$7e,Ygr,Kgr,lQ,Zgr,ehr,ohr,XT,k7e,rhr,thr,iQ,ahr,nhr,shr,zT,S7e,lhr,ihr,dQ,dhr,chr,fhr,WT,R7e,mhr,ghr,cQ,hhr,phr,_hr,QT,P7e,uhr,bhr,fQ,vhr,Fhr,Thr,HT,B7e,Mhr,Ehr,mQ,Chr,whr,Ahr,UT,I7e,yhr,Lhr,gQ,xhr,$hr,khr,JT,N7e,Shr,Rhr,hQ,Phr,Bhr,Ihr,YT,q7e,Nhr,qhr,pQ,jhr,Dhr,Ghr,KT,Gje,Xd,ZT,j7e,M8,Ohr,D7e,Vhr,Oje,Ko,E8,Xhr,zd,zhr,_Q,Whr,Qhr,uQ,Hhr,Uhr,Jhr,C8,Yhr,G7e,Khr,Zhr,epr,Lt,w8,opr,O7e,rpr,tpr,Wd,apr,V7e,npr,spr,bQ,lpr,ipr,dpr,eM,cpr,Ar,A8,fpr,X7e,mpr,gpr,Za,hpr,z7e,ppr,_pr,W7e,upr,bpr,Q7e,vpr,Fpr,Tpr,se,oM,H7e,Mpr,Epr,vQ,Cpr,wpr,Apr,rM,U7e,ypr,Lpr,FQ,xpr,$pr,kpr,tM,J7e,Spr,Rpr,TQ,Ppr,Bpr,Ipr,aM,Y7e,Npr,qpr,MQ,jpr,Dpr,Gpr,nM,K7e,Opr,Vpr,EQ,Xpr,zpr,Wpr,sM,Z7e,Qpr,Hpr,CQ,Upr,Jpr,Ypr,lM,ebe,Kpr,Zpr,wQ,e_r,o_r,r_r,iM,obe,t_r,a_r,AQ,n_r,s_r,l_r,dM,rbe,i_r,d_r,yQ,c_r,f_r,m_r,cM,tbe,g_r,h_r,LQ,p_r,__r,u_r,fM,abe,b_r,v_r,xQ,F_r,T_r,M_r,mM,nbe,E_r,C_r,$Q,w_r,A_r,y_r,gM,sbe,L_r,x_r,kQ,$_r,k_r,S_r,hM,lbe,R_r,P_r,SQ,B_r,I_r,N_r,pM,ibe,q_r,j_r,RQ,D_r,G_r,O_r,_M,dbe,V_r,X_r,PQ,z_r,W_r,Q_r,uM,cbe,H_r,U_r,BQ,J_r,Y_r,K_r,bM,fbe,Z_r,eur,IQ,our,rur,tur,vM,mbe,aur,nur,NQ,sur,lur,iur,FM,gbe,dur,cur,qQ,fur,mur,gur,TM,hbe,hur,pur,jQ,_ur,uur,bur,MM,pbe,vur,Fur,DQ,Tur,Mur,Eur,EM,_be,Cur,wur,GQ,Aur,yur,Lur,CM,Vje,Qd,wM,ube,y8,xur,bbe,$ur,Xje,Zo,L8,kur,Hd,Sur,OQ,Rur,Pur,VQ,Bur,Iur,Nur,x8,qur,vbe,jur,Dur,Gur,xt,$8,Our,Fbe,Vur,Xur,Ud,zur,Tbe,Wur,Qur,XQ,Hur,Uur,Jur,AM,Yur,yr,k8,Kur,Mbe,Zur,e4r,en,o4r,Ebe,r4r,t4r,Cbe,a4r,n4r,wbe,s4r,l4r,i4r,Te,yM,Abe,d4r,c4r,zQ,f4r,m4r,g4r,LM,ybe,h4r,p4r,WQ,_4r,u4r,b4r,xM,Lbe,v4r,F4r,QQ,T4r,M4r,E4r,$M,xbe,C4r,w4r,HQ,A4r,y4r,L4r,kM,$be,x4r,$4r,UQ,k4r,S4r,R4r,SM,kbe,P4r,B4r,JQ,I4r,N4r,q4r,RM,Sbe,j4r,D4r,YQ,G4r,O4r,V4r,PM,Rbe,X4r,z4r,KQ,W4r,Q4r,H4r,BM,Pbe,U4r,J4r,ZQ,Y4r,K4r,Z4r,IM,Bbe,e1r,o1r,eH,r1r,t1r,a1r,NM,Ibe,n1r,s1r,oH,l1r,i1r,d1r,qM,Nbe,c1r,f1r,rH,m1r,g1r,h1r,jM,qbe,p1r,_1r,tH,u1r,b1r,v1r,DM,zje,Jd,GM,jbe,S8,F1r,Dbe,T1r,Wje,er,R8,M1r,Yd,E1r,aH,C1r,w1r,nH,A1r,y1r,L1r,P8,x1r,Gbe,$1r,k1r,S1r,$t,B8,R1r,Obe,P1r,B1r,Kd,I1r,Vbe,N1r,q1r,sH,j1r,D1r,G1r,OM,O1r,Lr,I8,V1r,Xbe,X1r,z1r,on,W1r,zbe,Q1r,H1r,Wbe,U1r,J1r,Qbe,Y1r,K1r,Z1r,rn,VM,Hbe,e7r,o7r,lH,r7r,t7r,a7r,XM,Ube,n7r,s7r,iH,l7r,i7r,d7r,zM,Jbe,c7r,f7r,dH,m7r,g7r,h7r,WM,Ybe,p7r,_7r,cH,u7r,b7r,v7r,QM,Qje,Zd,HM,Kbe,N8,F7r,Zbe,T7r,Hje,or,q8,M7r,ec,E7r,fH,C7r,w7r,mH,A7r,y7r,L7r,j8,x7r,e2e,$7r,k7r,S7r,kt,D8,R7r,o2e,P7r,B7r,oc,I7r,r2e,N7r,q7r,gH,j7r,D7r,G7r,UM,O7r,xr,G8,V7r,t2e,X7r,z7r,tn,W7r,a2e,Q7r,H7r,n2e,U7r,J7r,s2e,Y7r,K7r,Z7r,ie,JM,l2e,ebr,obr,hH,rbr,tbr,abr,YM,i2e,nbr,sbr,pH,lbr,ibr,dbr,KM,d2e,cbr,fbr,_H,mbr,gbr,hbr,ZM,c2e,pbr,_br,uH,ubr,bbr,vbr,eE,f2e,Fbr,Tbr,bH,Mbr,Ebr,Cbr,oE,m2e,wbr,Abr,vH,ybr,Lbr,xbr,rE,g2e,$br,kbr,FH,Sbr,Rbr,Pbr,tE,h2e,Bbr,Ibr,TH,Nbr,qbr,jbr,aE,p2e,Dbr,Gbr,MH,Obr,Vbr,Xbr,nE,_2e,zbr,Wbr,EH,Qbr,Hbr,Ubr,sE,u2e,Jbr,Ybr,CH,Kbr,Zbr,e2r,lE,b2e,o2r,r2r,wH,t2r,a2r,n2r,iE,v2e,s2r,l2r,AH,i2r,d2r,c2r,dE,F2e,f2r,m2r,yH,g2r,h2r,p2r,cE,T2e,_2r,u2r,LH,b2r,v2r,F2r,fE,M2e,T2r,M2r,xH,E2r,C2r,w2r,mE,E2e,A2r,y2r,$H,L2r,x2r,$2r,gE,C2e,k2r,S2r,kH,R2r,P2r,B2r,hE,w2e,I2r,N2r,SH,q2r,j2r,D2r,pE,A2e,G2r,O2r,RH,V2r,X2r,z2r,_E,Uje,rc,uE,y2e,O8,W2r,L2e,Q2r,Jje,rr,V8,H2r,tc,U2r,PH,J2r,Y2r,BH,K2r,Z2r,evr,X8,ovr,x2e,rvr,tvr,avr,St,z8,nvr,$2e,svr,lvr,ac,ivr,k2e,dvr,cvr,IH,fvr,mvr,gvr,bE,hvr,$r,W8,pvr,S2e,_vr,uvr,an,bvr,R2e,vvr,Fvr,P2e,Tvr,Mvr,B2e,Evr,Cvr,wvr,ye,vE,I2e,Avr,yvr,NH,Lvr,xvr,$vr,FE,N2e,kvr,Svr,qH,Rvr,Pvr,Bvr,TE,q2e,Ivr,Nvr,jH,qvr,jvr,Dvr,ME,j2e,Gvr,Ovr,DH,Vvr,Xvr,zvr,EE,D2e,Wvr,Qvr,GH,Hvr,Uvr,Jvr,CE,G2e,Yvr,Kvr,OH,Zvr,eFr,oFr,wE,O2e,rFr,tFr,VH,aFr,nFr,sFr,AE,V2e,lFr,iFr,XH,dFr,cFr,fFr,yE,X2e,mFr,gFr,zH,hFr,pFr,_Fr,LE,z2e,uFr,bFr,WH,vFr,FFr,TFr,xE,Yje,nc,$E,W2e,Q8,MFr,Q2e,EFr,Kje,tr,H8,CFr,sc,wFr,QH,AFr,yFr,HH,LFr,xFr,$Fr,U8,kFr,H2e,SFr,RFr,PFr,Rt,J8,BFr,U2e,IFr,NFr,lc,qFr,J2e,jFr,DFr,UH,GFr,OFr,VFr,kE,XFr,kr,Y8,zFr,Y2e,WFr,QFr,nn,HFr,K2e,UFr,JFr,Z2e,YFr,KFr,eve,ZFr,eTr,oTr,oe,SE,ove,rTr,tTr,JH,aTr,nTr,sTr,RE,rve,lTr,iTr,YH,dTr,cTr,fTr,PE,tve,mTr,gTr,KH,hTr,pTr,_Tr,BE,ave,uTr,bTr,ZH,vTr,FTr,TTr,IE,nve,MTr,ETr,eU,CTr,wTr,ATr,NE,sve,yTr,LTr,oU,xTr,$Tr,kTr,qE,lve,STr,RTr,rU,PTr,BTr,ITr,jE,ive,NTr,qTr,tU,jTr,DTr,GTr,DE,dve,OTr,VTr,aU,XTr,zTr,WTr,GE,cve,QTr,HTr,nU,UTr,JTr,YTr,OE,fve,KTr,ZTr,sU,eMr,oMr,rMr,VE,mve,tMr,aMr,lU,nMr,sMr,lMr,XE,gve,iMr,dMr,iU,cMr,fMr,mMr,zE,hve,gMr,hMr,dU,pMr,_Mr,uMr,WE,pve,bMr,vMr,cU,FMr,TMr,MMr,QE,_ve,EMr,CMr,fU,wMr,AMr,yMr,HE,uve,LMr,xMr,mU,$Mr,kMr,SMr,UE,bve,RMr,PMr,gU,BMr,IMr,NMr,JE,vve,qMr,jMr,hU,DMr,GMr,OMr,YE,Fve,VMr,XMr,pU,zMr,WMr,QMr,KE,Tve,HMr,UMr,_U,JMr,YMr,KMr,ZE,Mve,ZMr,eEr,uU,oEr,rEr,tEr,eC,Eve,aEr,nEr,bU,sEr,lEr,iEr,oC,Cve,dEr,cEr,vU,fEr,mEr,gEr,rC,wve,hEr,pEr,FU,_Er,uEr,bEr,tC,Ave,vEr,FEr,TU,TEr,MEr,EEr,aC,Zje,ic,nC,yve,K8,CEr,Lve,wEr,eDe,ar,Z8,AEr,dc,yEr,MU,LEr,xEr,EU,$Er,kEr,SEr,e9,REr,xve,PEr,BEr,IEr,Pt,o9,NEr,$ve,qEr,jEr,cc,DEr,kve,GEr,OEr,CU,VEr,XEr,zEr,sC,WEr,Sr,r9,QEr,Sve,HEr,UEr,sn,JEr,Rve,YEr,KEr,Pve,ZEr,eCr,Bve,oCr,rCr,tCr,pe,lC,Ive,aCr,nCr,wU,sCr,lCr,iCr,iC,Nve,dCr,cCr,AU,fCr,mCr,gCr,dC,qve,hCr,pCr,yU,_Cr,uCr,bCr,cC,jve,vCr,FCr,LU,TCr,MCr,ECr,fC,Dve,CCr,wCr,xU,ACr,yCr,LCr,mC,Gve,xCr,$Cr,$U,kCr,SCr,RCr,gC,Ove,PCr,BCr,kU,ICr,NCr,qCr,hC,Vve,jCr,DCr,SU,GCr,OCr,VCr,pC,Xve,XCr,zCr,RU,WCr,QCr,HCr,_C,zve,UCr,JCr,PU,YCr,KCr,ZCr,uC,Wve,e5r,o5r,BU,r5r,t5r,a5r,bC,Qve,n5r,s5r,IU,l5r,i5r,d5r,vC,Hve,c5r,f5r,NU,m5r,g5r,h5r,FC,Uve,p5r,_5r,qU,u5r,b5r,v5r,TC,Jve,F5r,T5r,jU,M5r,E5r,C5r,MC,Yve,w5r,A5r,DU,y5r,L5r,x5r,EC,Kve,$5r,k5r,GU,S5r,R5r,P5r,CC,oDe,fc,wC,Zve,t9,B5r,eFe,I5r,rDe,nr,a9,N5r,mc,q5r,OU,j5r,D5r,VU,G5r,O5r,V5r,n9,X5r,oFe,z5r,W5r,Q5r,Bt,s9,H5r,rFe,U5r,J5r,gc,Y5r,tFe,K5r,Z5r,XU,e3r,o3r,r3r,AC,t3r,Rr,l9,a3r,aFe,n3r,s3r,ln,l3r,nFe,i3r,d3r,sFe,c3r,f3r,lFe,m3r,g3r,h3r,i9,yC,iFe,p3r,_3r,zU,u3r,b3r,v3r,LC,dFe,F3r,T3r,WU,M3r,E3r,C3r,xC,tDe,hc,$C,cFe,d9,w3r,fFe,A3r,aDe,sr,c9,y3r,pc,L3r,QU,x3r,$3r,HU,k3r,S3r,R3r,f9,P3r,mFe,B3r,I3r,N3r,It,m9,q3r,gFe,j3r,D3r,_c,G3r,hFe,O3r,V3r,UU,X3r,z3r,W3r,kC,Q3r,Pr,g9,H3r,pFe,U3r,J3r,dn,Y3r,_Fe,K3r,Z3r,uFe,e0r,o0r,bFe,r0r,t0r,a0r,vFe,SC,FFe,n0r,s0r,JU,l0r,i0r,d0r,RC,nDe,uc,PC,TFe,h9,c0r,MFe,f0r,sDe,lr,p9,m0r,bc,g0r,YU,h0r,p0r,KU,_0r,u0r,b0r,_9,v0r,EFe,F0r,T0r,M0r,Nt,u9,E0r,CFe,C0r,w0r,vc,A0r,wFe,y0r,L0r,ZU,x0r,$0r,k0r,BC,S0r,Br,b9,R0r,AFe,P0r,B0r,cn,I0r,yFe,N0r,q0r,LFe,j0r,D0r,xFe,G0r,O0r,V0r,de,IC,$Fe,X0r,z0r,eJ,W0r,Q0r,H0r,NC,kFe,U0r,J0r,oJ,Y0r,K0r,Z0r,qC,SFe,ewr,owr,rJ,rwr,twr,awr,jC,RFe,nwr,swr,tJ,lwr,iwr,dwr,DC,PFe,cwr,fwr,aJ,mwr,gwr,hwr,GC,BFe,pwr,_wr,nJ,uwr,bwr,vwr,OC,IFe,Fwr,Twr,sJ,Mwr,Ewr,Cwr,VC,NFe,wwr,Awr,lJ,ywr,Lwr,xwr,XC,qFe,$wr,kwr,iJ,Swr,Rwr,Pwr,zC,jFe,Bwr,Iwr,dJ,Nwr,qwr,jwr,WC,DFe,Dwr,Gwr,cJ,Owr,Vwr,Xwr,QC,GFe,zwr,Wwr,fJ,Qwr,Hwr,Uwr,HC,OFe,Jwr,Ywr,mJ,Kwr,Zwr,e6r,UC,VFe,o6r,r6r,gJ,t6r,a6r,n6r,JC,XFe,s6r,l6r,hJ,i6r,d6r,c6r,YC,zFe,f6r,m6r,pJ,g6r,h6r,p6r,KC,WFe,_6r,u6r,_J,b6r,v6r,F6r,ZC,QFe,T6r,M6r,uJ,E6r,C6r,w6r,e5,HFe,A6r,y6r,bJ,L6r,x6r,$6r,o5,UFe,k6r,S6r,vJ,R6r,P6r,B6r,r5,lDe,Fc,t5,JFe,v9,I6r,YFe,N6r,iDe,ir,F9,q6r,Tc,j6r,FJ,D6r,G6r,TJ,O6r,V6r,X6r,T9,z6r,KFe,W6r,Q6r,H6r,qt,M9,U6r,ZFe,J6r,Y6r,Mc,K6r,eTe,Z6r,eAr,MJ,oAr,rAr,tAr,a5,aAr,Ir,E9,nAr,oTe,sAr,lAr,fn,iAr,rTe,dAr,cAr,tTe,fAr,mAr,aTe,gAr,hAr,pAr,ce,n5,nTe,_Ar,uAr,EJ,bAr,vAr,FAr,s5,sTe,TAr,MAr,CJ,EAr,CAr,wAr,l5,lTe,AAr,yAr,wJ,LAr,xAr,$Ar,i5,iTe,kAr,SAr,AJ,RAr,PAr,BAr,d5,dTe,IAr,NAr,yJ,qAr,jAr,DAr,c5,cTe,GAr,OAr,LJ,VAr,XAr,zAr,f5,fTe,WAr,QAr,xJ,HAr,UAr,JAr,m5,mTe,YAr,KAr,$J,ZAr,eyr,oyr,g5,gTe,ryr,tyr,kJ,ayr,nyr,syr,h5,hTe,lyr,iyr,SJ,dyr,cyr,fyr,p5,pTe,myr,gyr,RJ,hyr,pyr,_yr,_5,_Te,uyr,byr,PJ,vyr,Fyr,Tyr,u5,uTe,Myr,Eyr,BJ,Cyr,wyr,Ayr,b5,bTe,yyr,Lyr,IJ,xyr,$yr,kyr,v5,vTe,Syr,Ryr,NJ,Pyr,Byr,Iyr,F5,FTe,Nyr,qyr,qJ,jyr,Dyr,Gyr,T5,TTe,Oyr,Vyr,jJ,Xyr,zyr,Wyr,M5,MTe,Qyr,Hyr,DJ,Uyr,Jyr,Yyr,E5,ETe,Kyr,Zyr,GJ,eLr,oLr,rLr,C5,CTe,tLr,aLr,OJ,nLr,sLr,lLr,w5,dDe,Ec,A5,wTe,C9,iLr,ATe,dLr,cDe,dr,w9,cLr,Cc,fLr,VJ,mLr,gLr,XJ,hLr,pLr,_Lr,A9,uLr,yTe,bLr,vLr,FLr,jt,y9,TLr,LTe,MLr,ELr,wc,CLr,xTe,wLr,ALr,zJ,yLr,LLr,xLr,y5,$Lr,Nr,L9,kLr,$Te,SLr,RLr,mn,PLr,kTe,BLr,ILr,STe,NLr,qLr,RTe,jLr,DLr,GLr,PTe,L5,BTe,OLr,VLr,WJ,XLr,zLr,WLr,x5,fDe,Ac,$5,ITe,x9,QLr,NTe,HLr,mDe,cr,$9,ULr,yc,JLr,QJ,YLr,KLr,HJ,ZLr,e8r,o8r,k9,r8r,qTe,t8r,a8r,n8r,Dt,S9,s8r,jTe,l8r,i8r,Lc,d8r,DTe,c8r,f8r,UJ,m8r,g8r,h8r,k5,p8r,qr,R9,_8r,GTe,u8r,b8r,gn,v8r,OTe,F8r,T8r,VTe,M8r,E8r,XTe,C8r,w8r,A8r,zTe,S5,WTe,y8r,L8r,JJ,x8r,$8r,k8r,R5,gDe,xc,P5,QTe,P9,S8r,HTe,R8r,hDe,fr,B9,P8r,$c,B8r,YJ,I8r,N8r,KJ,q8r,j8r,D8r,I9,G8r,UTe,O8r,V8r,X8r,Gt,N9,z8r,JTe,W8r,Q8r,kc,H8r,YTe,U8r,J8r,ZJ,Y8r,K8r,Z8r,B5,e9r,jr,q9,o9r,KTe,r9r,t9r,hn,a9r,ZTe,n9r,s9r,eMe,l9r,i9r,oMe,d9r,c9r,f9r,re,I5,rMe,m9r,g9r,eY,h9r,p9r,_9r,N5,tMe,u9r,b9r,oY,v9r,F9r,T9r,q5,aMe,M9r,E9r,rY,C9r,w9r,A9r,j5,nMe,y9r,L9r,tY,x9r,$9r,k9r,D5,sMe,S9r,R9r,aY,P9r,B9r,I9r,G5,lMe,N9r,q9r,nY,j9r,D9r,G9r,O5,iMe,O9r,V9r,sY,X9r,z9r,W9r,V5,dMe,Q9r,H9r,lY,U9r,J9r,Y9r,X5,cMe,K9r,Z9r,iY,exr,oxr,rxr,z5,fMe,txr,axr,dY,nxr,sxr,lxr,W5,mMe,ixr,dxr,cY,cxr,fxr,mxr,Q5,gMe,gxr,hxr,fY,pxr,_xr,uxr,H5,hMe,bxr,vxr,mY,Fxr,Txr,Mxr,U5,pMe,Exr,Cxr,gY,wxr,Axr,yxr,J5,_Me,Lxr,xxr,hY,$xr,kxr,Sxr,Y5,uMe,Rxr,Pxr,pY,Bxr,Ixr,Nxr,K5,bMe,qxr,jxr,_Y,Dxr,Gxr,Oxr,Z5,vMe,Vxr,Xxr,uY,zxr,Wxr,Qxr,e3,FMe,Hxr,Uxr,bY,Jxr,Yxr,Kxr,o3,TMe,Zxr,e$r,vY,o$r,r$r,t$r,r3,MMe,a$r,n$r,FY,s$r,l$r,i$r,t3,EMe,d$r,c$r,TY,f$r,m$r,g$r,a3,CMe,h$r,p$r,MY,_$r,u$r,b$r,n3,wMe,v$r,F$r,EY,T$r,M$r,E$r,s3,AMe,C$r,w$r,CY,A$r,y$r,L$r,l3,yMe,x$r,$$r,wY,k$r,S$r,R$r,i3,pDe,Sc,d3,LMe,j9,P$r,xMe,B$r,_De,mr,D9,I$r,Rc,N$r,AY,q$r,j$r,yY,D$r,G$r,O$r,G9,V$r,$Me,X$r,z$r,W$r,Ot,O9,Q$r,kMe,H$r,U$r,Pc,J$r,SMe,Y$r,K$r,LY,Z$r,ekr,okr,c3,rkr,Dr,V9,tkr,RMe,akr,nkr,pn,skr,PMe,lkr,ikr,BMe,dkr,ckr,IMe,fkr,mkr,gkr,Le,f3,NMe,hkr,pkr,xY,_kr,ukr,bkr,m3,qMe,vkr,Fkr,$Y,Tkr,Mkr,Ekr,g3,jMe,Ckr,wkr,kY,Akr,ykr,Lkr,h3,DMe,xkr,$kr,SY,kkr,Skr,Rkr,p3,GMe,Pkr,Bkr,RY,Ikr,Nkr,qkr,_3,OMe,jkr,Dkr,PY,Gkr,Okr,Vkr,u3,VMe,Xkr,zkr,BY,Wkr,Qkr,Hkr,b3,XMe,Ukr,Jkr,IY,Ykr,Kkr,Zkr,v3,zMe,eSr,oSr,NY,rSr,tSr,aSr,F3,WMe,nSr,sSr,qY,lSr,iSr,dSr,T3,uDe,Bc,M3,QMe,X9,cSr,HMe,fSr,bDe,gr,z9,mSr,Ic,gSr,jY,hSr,pSr,DY,_Sr,uSr,bSr,W9,vSr,UMe,FSr,TSr,MSr,Vt,Q9,ESr,JMe,CSr,wSr,Nc,ASr,YMe,ySr,LSr,GY,xSr,$Sr,kSr,E3,SSr,Gr,H9,RSr,KMe,PSr,BSr,_n,ISr,ZMe,NSr,qSr,eEe,jSr,DSr,oEe,GSr,OSr,VSr,Ee,C3,rEe,XSr,zSr,OY,WSr,QSr,HSr,w3,tEe,USr,JSr,VY,YSr,KSr,ZSr,A3,aEe,eRr,oRr,XY,rRr,tRr,aRr,y3,nEe,nRr,sRr,zY,lRr,iRr,dRr,L3,sEe,cRr,fRr,WY,mRr,gRr,hRr,x3,lEe,pRr,_Rr,QY,uRr,bRr,vRr,$3,iEe,FRr,TRr,HY,MRr,ERr,CRr,k3,dEe,wRr,ARr,UY,yRr,LRr,xRr,S3,cEe,$Rr,kRr,JY,SRr,RRr,PRr,R3,fEe,BRr,IRr,YY,NRr,qRr,jRr,P3,mEe,DRr,GRr,KY,ORr,VRr,XRr,B3,gEe,zRr,WRr,ZY,QRr,HRr,URr,I3,vDe,qc,N3,hEe,U9,JRr,pEe,YRr,FDe,hr,J9,KRr,jc,ZRr,eK,ePr,oPr,oK,rPr,tPr,aPr,Y9,nPr,_Ee,sPr,lPr,iPr,Xt,K9,dPr,uEe,cPr,fPr,Dc,mPr,bEe,gPr,hPr,rK,pPr,_Pr,uPr,q3,bPr,Or,Z9,vPr,vEe,FPr,TPr,un,MPr,FEe,EPr,CPr,TEe,wPr,APr,MEe,yPr,LPr,xPr,xe,j3,EEe,$Pr,kPr,tK,SPr,RPr,PPr,D3,CEe,BPr,IPr,aK,NPr,qPr,jPr,G3,wEe,DPr,GPr,nK,OPr,VPr,XPr,O3,AEe,zPr,WPr,sK,QPr,HPr,UPr,V3,yEe,JPr,YPr,lK,KPr,ZPr,eBr,X3,LEe,oBr,rBr,iK,tBr,aBr,nBr,z3,xEe,sBr,lBr,dK,iBr,dBr,cBr,W3,$Ee,fBr,mBr,cK,gBr,hBr,pBr,Q3,kEe,_Br,uBr,fK,bBr,vBr,FBr,H3,SEe,TBr,MBr,mK,EBr,CBr,wBr,U3,TDe,Gc,J3,REe,ex,ABr,PEe,yBr,MDe,pr,ox,LBr,Oc,xBr,gK,$Br,kBr,hK,SBr,RBr,PBr,rx,BBr,BEe,IBr,NBr,qBr,zt,tx,jBr,IEe,DBr,GBr,Vc,OBr,NEe,VBr,XBr,pK,zBr,WBr,QBr,Y3,HBr,Vr,ax,UBr,qEe,JBr,YBr,bn,KBr,jEe,ZBr,eIr,DEe,oIr,rIr,GEe,tIr,aIr,nIr,Pe,K3,OEe,sIr,lIr,_K,iIr,dIr,cIr,Z3,VEe,fIr,mIr,uK,gIr,hIr,pIr,e0,XEe,_Ir,uIr,bK,bIr,vIr,FIr,o0,zEe,TIr,MIr,vK,EIr,CIr,wIr,r0,WEe,AIr,yIr,FK,LIr,xIr,$Ir,t0,QEe,kIr,SIr,TK,RIr,PIr,BIr,a0,HEe,IIr,NIr,MK,qIr,jIr,DIr,n0,UEe,GIr,OIr,EK,VIr,XIr,zIr,s0,JEe,WIr,QIr,CK,HIr,UIr,JIr,l0,EDe,Xc,i0,YEe,nx,YIr,KEe,KIr,CDe,_r,sx,ZIr,zc,eNr,wK,oNr,rNr,AK,tNr,aNr,nNr,lx,sNr,ZEe,lNr,iNr,dNr,Wt,ix,cNr,eCe,fNr,mNr,Wc,gNr,oCe,hNr,pNr,yK,_Nr,uNr,bNr,d0,vNr,Xr,dx,FNr,rCe,TNr,MNr,vn,ENr,tCe,CNr,wNr,aCe,ANr,yNr,nCe,LNr,xNr,$Nr,$e,c0,sCe,kNr,SNr,LK,RNr,PNr,BNr,f0,lCe,INr,NNr,xK,qNr,jNr,DNr,m0,iCe,GNr,ONr,$K,VNr,XNr,zNr,g0,dCe,WNr,QNr,kK,HNr,UNr,JNr,h0,cCe,YNr,KNr,SK,ZNr,eqr,oqr,p0,fCe,rqr,tqr,RK,aqr,nqr,sqr,_0,mCe,lqr,iqr,PK,dqr,cqr,fqr,u0,gCe,mqr,gqr,BK,hqr,pqr,_qr,b0,hCe,uqr,bqr,IK,vqr,Fqr,Tqr,v0,pCe,Mqr,Eqr,NK,Cqr,wqr,Aqr,F0,wDe,Qc,T0,_Ce,cx,yqr,uCe,Lqr,ADe,ur,fx,xqr,Hc,$qr,qK,kqr,Sqr,jK,Rqr,Pqr,Bqr,mx,Iqr,bCe,Nqr,qqr,jqr,Qt,gx,Dqr,vCe,Gqr,Oqr,Uc,Vqr,FCe,Xqr,zqr,DK,Wqr,Qqr,Hqr,M0,Uqr,zr,hx,Jqr,TCe,Yqr,Kqr,Fn,Zqr,MCe,ejr,ojr,ECe,rjr,tjr,CCe,ajr,njr,sjr,ke,E0,wCe,ljr,ijr,GK,djr,cjr,fjr,C0,ACe,mjr,gjr,OK,hjr,pjr,_jr,w0,yCe,ujr,bjr,VK,vjr,Fjr,Tjr,A0,LCe,Mjr,Ejr,XK,Cjr,wjr,Ajr,y0,xCe,yjr,Ljr,zK,xjr,$jr,kjr,L0,$Ce,Sjr,Rjr,WK,Pjr,Bjr,Ijr,x0,kCe,Njr,qjr,QK,jjr,Djr,Gjr,$0,SCe,Ojr,Vjr,HK,Xjr,zjr,Wjr,k0,RCe,Qjr,Hjr,UK,Ujr,Jjr,Yjr,S0,PCe,Kjr,Zjr,JK,eDr,oDr,rDr,R0,yDe,Jc,P0,BCe,px,tDr,ICe,aDr,LDe,br,_x,nDr,Yc,sDr,YK,lDr,iDr,KK,dDr,cDr,fDr,ux,mDr,NCe,gDr,hDr,pDr,Ht,bx,_Dr,qCe,uDr,bDr,Kc,vDr,jCe,FDr,TDr,ZK,MDr,EDr,CDr,B0,wDr,Wr,vx,ADr,DCe,yDr,LDr,Tn,xDr,GCe,$Dr,kDr,OCe,SDr,RDr,VCe,PDr,BDr,IDr,Ge,I0,XCe,NDr,qDr,eZ,jDr,DDr,GDr,N0,zCe,ODr,VDr,oZ,XDr,zDr,WDr,q0,WCe,QDr,HDr,rZ,UDr,JDr,YDr,j0,QCe,KDr,ZDr,tZ,eGr,oGr,rGr,D0,HCe,tGr,aGr,aZ,nGr,sGr,lGr,G0,UCe,iGr,dGr,nZ,cGr,fGr,mGr,O0,JCe,gGr,hGr,sZ,pGr,_Gr,uGr,V0,YCe,bGr,vGr,lZ,FGr,TGr,MGr,X0,xDe,Zc,z0,KCe,Fx,EGr,ZCe,CGr,$De,vr,Tx,wGr,ef,AGr,iZ,yGr,LGr,dZ,xGr,$Gr,kGr,Mx,SGr,e5e,RGr,PGr,BGr,Ut,Ex,IGr,o5e,NGr,qGr,of,jGr,r5e,DGr,GGr,cZ,OGr,VGr,XGr,W0,zGr,Qr,Cx,WGr,t5e,QGr,HGr,Mn,UGr,a5e,JGr,YGr,n5e,KGr,ZGr,s5e,eOr,oOr,rOr,Oe,Q0,l5e,tOr,aOr,fZ,nOr,sOr,lOr,H0,i5e,iOr,dOr,mZ,cOr,fOr,mOr,U0,d5e,gOr,hOr,gZ,pOr,_Or,uOr,J0,c5e,bOr,vOr,hZ,FOr,TOr,MOr,Y0,f5e,EOr,COr,pZ,wOr,AOr,yOr,K0,m5e,LOr,xOr,_Z,$Or,kOr,SOr,Z0,g5e,ROr,POr,uZ,BOr,IOr,NOr,ew,h5e,qOr,jOr,bZ,DOr,GOr,OOr,ow,kDe,rf,rw,p5e,wx,VOr,_5e,XOr,SDe,Fr,Ax,zOr,tf,WOr,vZ,QOr,HOr,FZ,UOr,JOr,YOr,yx,KOr,u5e,ZOr,eVr,oVr,Jt,Lx,rVr,b5e,tVr,aVr,af,nVr,v5e,sVr,lVr,TZ,iVr,dVr,cVr,tw,fVr,Hr,xx,mVr,F5e,gVr,hVr,En,pVr,T5e,_Vr,uVr,M5e,bVr,vVr,E5e,FVr,TVr,MVr,C5e,aw,w5e,EVr,CVr,MZ,wVr,AVr,yVr,nw,RDe,nf,sw,A5e,$x,LVr,y5e,xVr,PDe,Tr,kx,$Vr,sf,kVr,EZ,SVr,RVr,CZ,PVr,BVr,IVr,Sx,NVr,L5e,qVr,jVr,DVr,Yt,Rx,GVr,x5e,OVr,VVr,lf,XVr,$5e,zVr,WVr,wZ,QVr,HVr,UVr,lw,JVr,Ur,Px,YVr,k5e,KVr,ZVr,Cn,eXr,S5e,oXr,rXr,R5e,tXr,aXr,P5e,nXr,sXr,lXr,Bx,iw,B5e,iXr,dXr,AZ,cXr,fXr,mXr,dw,I5e,gXr,hXr,yZ,pXr,_Xr,uXr,cw,BDe,df,fw,N5e,Ix,bXr,q5e,vXr,IDe,Mr,Nx,FXr,cf,TXr,LZ,MXr,EXr,xZ,CXr,wXr,AXr,qx,yXr,j5e,LXr,xXr,$Xr,Kt,jx,kXr,D5e,SXr,RXr,ff,PXr,G5e,BXr,IXr,$Z,NXr,qXr,jXr,mw,DXr,Jr,Dx,GXr,O5e,OXr,VXr,wn,XXr,V5e,zXr,WXr,X5e,QXr,HXr,z5e,UXr,JXr,YXr,W5e,gw,Q5e,KXr,ZXr,kZ,ezr,ozr,rzr,hw,NDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),IA=new te({}),NA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new tzr({props:{warning:!0,$$slots:{default:[rSt]},$$scope:{ctx:L}}}),qA=new te({}),jA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L585"}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L608"}}),Cg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),VA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L731"}}),XA=new te({}),zA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L391"}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17474/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L405"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),UA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L604"}}),JA=new te({}),YA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),qh=new tzr({props:{$$slots:{default:[nSt]},$$scope:{ctx:L}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),oy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),ry=new te({}),ty=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L88"}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L102"}}),np=new tzr({props:{$$slots:{default:[lSt]},$$scope:{ctx:L}}}),sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L255"}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L739"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),dp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L746"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L761"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L768"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),Ly=new te({}),xy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L775"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L784"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L818"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L825"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L811"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Zy=new te({}),eL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L793"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),aL=new te({}),nL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L800"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),dL=new te({}),cL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L834"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),hL=new te({}),pL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L873"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),vL=new te({}),FL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L880"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),CL=new te({}),wL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L903"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),xL=new te({}),$L=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L887"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),PL=new te({}),BL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L894"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),DL=new te({}),GL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L912"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),zL=new te({}),WL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L919"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),JL=new te({}),YL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L866"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),r8=new te({}),t8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L841"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),l8=new te({}),i8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L848"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),m8=new te({}),g8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L857"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),u8=new te({}),b8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),M8=new te({}),E8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),y8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),S8=new te({}),R8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),N8=new te({}),q8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),O8=new te({}),V8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),Q8=new te({}),H8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),d9=new te({}),c9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),x9=new te({}),$9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),P9=new te({}),B9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[WRt]},$$scope:{ctx:L}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QRt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[HRt]},$$scope:{ctx:L}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[URt]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JRt]},$$scope:{ctx:L}}}),Ix=new te({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[YRt]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),SA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),RA=o("AutoConfig"),Ln=o(", "),xn=a("a"),PA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),BA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),ek=o("will create a model that is an instance of "),ui=a("a"),ok=o("BertModel"),rk=o("."),Eo=l(),wa=a("p"),tk=o("There is one class of "),bf=a("code"),ak=o("AutoModel"),zOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Pqe=l(),bi=a("h2"),vf=a("a"),Coe=a("span"),F(IA.$$.fragment),WOe=l(),woe=a("span"),QOe=o("Extending the Auto Classes"),Bqe=l(),kn=a("p"),HOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=a("code"),UOe=o("NewModel"),JOe=o(", make sure you have a "),yoe=a("code"),YOe=o("NewModelConfig"),KOe=o(` then you can add those to the auto
classes like this:`),Iqe=l(),F(NA.$$.fragment),Nqe=l(),nk=a("p"),ZOe=o("You will then be able to use the auto classes like you would usually do!"),qqe=l(),F(Ff.$$.fragment),jqe=l(),vi=a("h2"),Tf=a("a"),Loe=a("span"),F(qA.$$.fragment),eVe=l(),xoe=a("span"),oVe=o("AutoConfig"),Dqe=l(),Co=a("div"),F(jA.$$.fragment),rVe=l(),DA=a("p"),tVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=a("a"),aVe=o("from_pretrained()"),nVe=o(" class method."),sVe=l(),GA=a("p"),lVe=o("This class cannot be instantiated directly using "),$oe=a("code"),iVe=o("__init__()"),dVe=o(" (throws an error)."),cVe=l(),Er=a("div"),F(OA.$$.fragment),fVe=l(),koe=a("p"),mVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),gVe=l(),Fi=a("p"),hVe=o("The configuration class to instantiate is selected based on the "),Soe=a("code"),pVe=o("model_type"),_Ve=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=a("code"),uVe=o("pretrained_model_name_or_path"),bVe=o(":"),vVe=l(),A=a("ul"),Mf=a("li"),Poe=a("strong"),FVe=o("albert"),TVe=o(" \u2014 "),lk=a("a"),MVe=o("AlbertConfig"),EVe=o(" (ALBERT model)"),CVe=l(),Ef=a("li"),Boe=a("strong"),wVe=o("bart"),AVe=o(" \u2014 "),ik=a("a"),yVe=o("BartConfig"),LVe=o(" (BART model)"),xVe=l(),Cf=a("li"),Ioe=a("strong"),$Ve=o("beit"),kVe=o(" \u2014 "),dk=a("a"),SVe=o("BeitConfig"),RVe=o(" (BEiT model)"),PVe=l(),wf=a("li"),Noe=a("strong"),BVe=o("bert"),IVe=o(" \u2014 "),ck=a("a"),NVe=o("BertConfig"),qVe=o(" (BERT model)"),jVe=l(),Af=a("li"),qoe=a("strong"),DVe=o("bert-generation"),GVe=o(" \u2014 "),fk=a("a"),OVe=o("BertGenerationConfig"),VVe=o(" (Bert Generation model)"),XVe=l(),yf=a("li"),joe=a("strong"),zVe=o("big_bird"),WVe=o(" \u2014 "),mk=a("a"),QVe=o("BigBirdConfig"),HVe=o(" (BigBird model)"),UVe=l(),Lf=a("li"),Doe=a("strong"),JVe=o("bigbird_pegasus"),YVe=o(" \u2014 "),gk=a("a"),KVe=o("BigBirdPegasusConfig"),ZVe=o(" (BigBirdPegasus model)"),eXe=l(),xf=a("li"),Goe=a("strong"),oXe=o("blenderbot"),rXe=o(" \u2014 "),hk=a("a"),tXe=o("BlenderbotConfig"),aXe=o(" (Blenderbot model)"),nXe=l(),$f=a("li"),Ooe=a("strong"),sXe=o("blenderbot-small"),lXe=o(" \u2014 "),pk=a("a"),iXe=o("BlenderbotSmallConfig"),dXe=o(" (BlenderbotSmall model)"),cXe=l(),kf=a("li"),Voe=a("strong"),fXe=o("bloom"),mXe=o(" \u2014 "),_k=a("a"),gXe=o("BloomConfig"),hXe=o(" (BLOOM model)"),pXe=l(),Sf=a("li"),Xoe=a("strong"),_Xe=o("camembert"),uXe=o(" \u2014 "),uk=a("a"),bXe=o("CamembertConfig"),vXe=o(" (CamemBERT model)"),FXe=l(),Rf=a("li"),zoe=a("strong"),TXe=o("canine"),MXe=o(" \u2014 "),bk=a("a"),EXe=o("CanineConfig"),CXe=o(" (Canine model)"),wXe=l(),Pf=a("li"),Woe=a("strong"),AXe=o("clip"),yXe=o(" \u2014 "),vk=a("a"),LXe=o("CLIPConfig"),xXe=o(" (CLIP model)"),$Xe=l(),Bf=a("li"),Qoe=a("strong"),kXe=o("convbert"),SXe=o(" \u2014 "),Fk=a("a"),RXe=o("ConvBertConfig"),PXe=o(" (ConvBERT model)"),BXe=l(),If=a("li"),Hoe=a("strong"),IXe=o("convnext"),NXe=o(" \u2014 "),Tk=a("a"),qXe=o("ConvNextConfig"),jXe=o(" (ConvNext model)"),DXe=l(),Nf=a("li"),Uoe=a("strong"),GXe=o("ctrl"),OXe=o(" \u2014 "),Mk=a("a"),VXe=o("CTRLConfig"),XXe=o(" (CTRL model)"),zXe=l(),qf=a("li"),Joe=a("strong"),WXe=o("cvt"),QXe=o(" \u2014 "),Ek=a("a"),HXe=o("CvtConfig"),UXe=o(" (CvT model)"),JXe=l(),jf=a("li"),Yoe=a("strong"),YXe=o("data2vec-audio"),KXe=o(" \u2014 "),Ck=a("a"),ZXe=o("Data2VecAudioConfig"),eze=o(" (Data2VecAudio model)"),oze=l(),Df=a("li"),Koe=a("strong"),rze=o("data2vec-text"),tze=o(" \u2014 "),wk=a("a"),aze=o("Data2VecTextConfig"),nze=o(" (Data2VecText model)"),sze=l(),Gf=a("li"),Zoe=a("strong"),lze=o("data2vec-vision"),ize=o(" \u2014 "),Ak=a("a"),dze=o("Data2VecVisionConfig"),cze=o(" (Data2VecVision model)"),fze=l(),Of=a("li"),ere=a("strong"),mze=o("deberta"),gze=o(" \u2014 "),yk=a("a"),hze=o("DebertaConfig"),pze=o(" (DeBERTa model)"),_ze=l(),Vf=a("li"),ore=a("strong"),uze=o("deberta-v2"),bze=o(" \u2014 "),Lk=a("a"),vze=o("DebertaV2Config"),Fze=o(" (DeBERTa-v2 model)"),Tze=l(),Xf=a("li"),rre=a("strong"),Mze=o("decision_transformer"),Eze=o(" \u2014 "),xk=a("a"),Cze=o("DecisionTransformerConfig"),wze=o(" (Decision Transformer model)"),Aze=l(),zf=a("li"),tre=a("strong"),yze=o("deit"),Lze=o(" \u2014 "),$k=a("a"),xze=o("DeiTConfig"),$ze=o(" (DeiT model)"),kze=l(),Wf=a("li"),are=a("strong"),Sze=o("detr"),Rze=o(" \u2014 "),kk=a("a"),Pze=o("DetrConfig"),Bze=o(" (DETR model)"),Ize=l(),Qf=a("li"),nre=a("strong"),Nze=o("distilbert"),qze=o(" \u2014 "),Sk=a("a"),jze=o("DistilBertConfig"),Dze=o(" (DistilBERT model)"),Gze=l(),Hf=a("li"),sre=a("strong"),Oze=o("dpr"),Vze=o(" \u2014 "),Rk=a("a"),Xze=o("DPRConfig"),zze=o(" (DPR model)"),Wze=l(),Uf=a("li"),lre=a("strong"),Qze=o("dpt"),Hze=o(" \u2014 "),Pk=a("a"),Uze=o("DPTConfig"),Jze=o(" (DPT model)"),Yze=l(),Jf=a("li"),ire=a("strong"),Kze=o("electra"),Zze=o(" \u2014 "),Bk=a("a"),eWe=o("ElectraConfig"),oWe=o(" (ELECTRA model)"),rWe=l(),Yf=a("li"),dre=a("strong"),tWe=o("encoder-decoder"),aWe=o(" \u2014 "),Ik=a("a"),nWe=o("EncoderDecoderConfig"),sWe=o(" (Encoder decoder model)"),lWe=l(),Kf=a("li"),cre=a("strong"),iWe=o("flaubert"),dWe=o(" \u2014 "),Nk=a("a"),cWe=o("FlaubertConfig"),fWe=o(" (FlauBERT model)"),mWe=l(),Zf=a("li"),fre=a("strong"),gWe=o("flava"),hWe=o(" \u2014 "),qk=a("a"),pWe=o("FlavaConfig"),_We=o(" (Flava model)"),uWe=l(),em=a("li"),mre=a("strong"),bWe=o("fnet"),vWe=o(" \u2014 "),jk=a("a"),FWe=o("FNetConfig"),TWe=o(" (FNet model)"),MWe=l(),om=a("li"),gre=a("strong"),EWe=o("fsmt"),CWe=o(" \u2014 "),Dk=a("a"),wWe=o("FSMTConfig"),AWe=o(" (FairSeq Machine-Translation model)"),yWe=l(),rm=a("li"),hre=a("strong"),LWe=o("funnel"),xWe=o(" \u2014 "),Gk=a("a"),$We=o("FunnelConfig"),kWe=o(" (Funnel Transformer model)"),SWe=l(),tm=a("li"),pre=a("strong"),RWe=o("glpn"),PWe=o(" \u2014 "),Ok=a("a"),BWe=o("GLPNConfig"),IWe=o(" (GLPN model)"),NWe=l(),am=a("li"),_re=a("strong"),qWe=o("gpt2"),jWe=o(" \u2014 "),Vk=a("a"),DWe=o("GPT2Config"),GWe=o(" (OpenAI GPT-2 model)"),OWe=l(),nm=a("li"),ure=a("strong"),VWe=o("gpt_neo"),XWe=o(" \u2014 "),Xk=a("a"),zWe=o("GPTNeoConfig"),WWe=o(" (GPT Neo model)"),QWe=l(),sm=a("li"),bre=a("strong"),HWe=o("gpt_neox"),UWe=o(" \u2014 "),zk=a("a"),JWe=o("GPTNeoXConfig"),YWe=o(" (GPT NeoX model)"),KWe=l(),lm=a("li"),vre=a("strong"),ZWe=o("gptj"),eQe=o(" \u2014 "),Wk=a("a"),oQe=o("GPTJConfig"),rQe=o(" (GPT-J model)"),tQe=l(),im=a("li"),Fre=a("strong"),aQe=o("hubert"),nQe=o(" \u2014 "),Qk=a("a"),sQe=o("HubertConfig"),lQe=o(" (Hubert model)"),iQe=l(),dm=a("li"),Tre=a("strong"),dQe=o("ibert"),cQe=o(" \u2014 "),Hk=a("a"),fQe=o("IBertConfig"),mQe=o(" (I-BERT model)"),gQe=l(),cm=a("li"),Mre=a("strong"),hQe=o("imagegpt"),pQe=o(" \u2014 "),Uk=a("a"),_Qe=o("ImageGPTConfig"),uQe=o(" (ImageGPT model)"),bQe=l(),fm=a("li"),Ere=a("strong"),vQe=o("layoutlm"),FQe=o(" \u2014 "),Jk=a("a"),TQe=o("LayoutLMConfig"),MQe=o(" (LayoutLM model)"),EQe=l(),mm=a("li"),Cre=a("strong"),CQe=o("layoutlmv2"),wQe=o(" \u2014 "),Yk=a("a"),AQe=o("LayoutLMv2Config"),yQe=o(" (LayoutLMv2 model)"),LQe=l(),gm=a("li"),wre=a("strong"),xQe=o("layoutlmv3"),$Qe=o(" \u2014 "),Kk=a("a"),kQe=o("LayoutLMv3Config"),SQe=o(" (LayoutLMv3 model)"),RQe=l(),hm=a("li"),Are=a("strong"),PQe=o("led"),BQe=o(" \u2014 "),Zk=a("a"),IQe=o("LEDConfig"),NQe=o(" (LED model)"),qQe=l(),pm=a("li"),yre=a("strong"),jQe=o("longformer"),DQe=o(" \u2014 "),eS=a("a"),GQe=o("LongformerConfig"),OQe=o(" (Longformer model)"),VQe=l(),_m=a("li"),Lre=a("strong"),XQe=o("luke"),zQe=o(" \u2014 "),oS=a("a"),WQe=o("LukeConfig"),QQe=o(" (LUKE model)"),HQe=l(),um=a("li"),xre=a("strong"),UQe=o("lxmert"),JQe=o(" \u2014 "),rS=a("a"),YQe=o("LxmertConfig"),KQe=o(" (LXMERT model)"),ZQe=l(),bm=a("li"),$re=a("strong"),eHe=o("m2m_100"),oHe=o(" \u2014 "),tS=a("a"),rHe=o("M2M100Config"),tHe=o(" (M2M100 model)"),aHe=l(),vm=a("li"),kre=a("strong"),nHe=o("marian"),sHe=o(" \u2014 "),aS=a("a"),lHe=o("MarianConfig"),iHe=o(" (Marian model)"),dHe=l(),Fm=a("li"),Sre=a("strong"),cHe=o("maskformer"),fHe=o(" \u2014 "),nS=a("a"),mHe=o("MaskFormerConfig"),gHe=o(" (MaskFormer model)"),hHe=l(),Tm=a("li"),Rre=a("strong"),pHe=o("mbart"),_He=o(" \u2014 "),sS=a("a"),uHe=o("MBartConfig"),bHe=o(" (mBART model)"),vHe=l(),Mm=a("li"),Pre=a("strong"),FHe=o("megatron-bert"),THe=o(" \u2014 "),lS=a("a"),MHe=o("MegatronBertConfig"),EHe=o(" (MegatronBert model)"),CHe=l(),Em=a("li"),Bre=a("strong"),wHe=o("mobilebert"),AHe=o(" \u2014 "),iS=a("a"),yHe=o("MobileBertConfig"),LHe=o(" (MobileBERT model)"),xHe=l(),Cm=a("li"),Ire=a("strong"),$He=o("mpnet"),kHe=o(" \u2014 "),dS=a("a"),SHe=o("MPNetConfig"),RHe=o(" (MPNet model)"),PHe=l(),wm=a("li"),Nre=a("strong"),BHe=o("mt5"),IHe=o(" \u2014 "),cS=a("a"),NHe=o("MT5Config"),qHe=o(" (mT5 model)"),jHe=l(),Am=a("li"),qre=a("strong"),DHe=o("nystromformer"),GHe=o(" \u2014 "),fS=a("a"),OHe=o("NystromformerConfig"),VHe=o(" (Nystromformer model)"),XHe=l(),ym=a("li"),jre=a("strong"),zHe=o("openai-gpt"),WHe=o(" \u2014 "),mS=a("a"),QHe=o("OpenAIGPTConfig"),HHe=o(" (OpenAI GPT model)"),UHe=l(),Lm=a("li"),Dre=a("strong"),JHe=o("opt"),YHe=o(" \u2014 "),gS=a("a"),KHe=o("OPTConfig"),ZHe=o(" (OPT model)"),eUe=l(),xm=a("li"),Gre=a("strong"),oUe=o("pegasus"),rUe=o(" \u2014 "),hS=a("a"),tUe=o("PegasusConfig"),aUe=o(" (Pegasus model)"),nUe=l(),$m=a("li"),Ore=a("strong"),sUe=o("perceiver"),lUe=o(" \u2014 "),pS=a("a"),iUe=o("PerceiverConfig"),dUe=o(" (Perceiver model)"),cUe=l(),km=a("li"),Vre=a("strong"),fUe=o("plbart"),mUe=o(" \u2014 "),_S=a("a"),gUe=o("PLBartConfig"),hUe=o(" (PLBart model)"),pUe=l(),Sm=a("li"),Xre=a("strong"),_Ue=o("poolformer"),uUe=o(" \u2014 "),uS=a("a"),bUe=o("PoolFormerConfig"),vUe=o(" (PoolFormer model)"),FUe=l(),Rm=a("li"),zre=a("strong"),TUe=o("prophetnet"),MUe=o(" \u2014 "),bS=a("a"),EUe=o("ProphetNetConfig"),CUe=o(" (ProphetNet model)"),wUe=l(),Pm=a("li"),Wre=a("strong"),AUe=o("qdqbert"),yUe=o(" \u2014 "),vS=a("a"),LUe=o("QDQBertConfig"),xUe=o(" (QDQBert model)"),$Ue=l(),Bm=a("li"),Qre=a("strong"),kUe=o("rag"),SUe=o(" \u2014 "),FS=a("a"),RUe=o("RagConfig"),PUe=o(" (RAG model)"),BUe=l(),Im=a("li"),Hre=a("strong"),IUe=o("realm"),NUe=o(" \u2014 "),TS=a("a"),qUe=o("RealmConfig"),jUe=o(" (Realm model)"),DUe=l(),Nm=a("li"),Ure=a("strong"),GUe=o("reformer"),OUe=o(" \u2014 "),MS=a("a"),VUe=o("ReformerConfig"),XUe=o(" (Reformer model)"),zUe=l(),qm=a("li"),Jre=a("strong"),WUe=o("regnet"),QUe=o(" \u2014 "),ES=a("a"),HUe=o("RegNetConfig"),UUe=o(" (RegNet model)"),JUe=l(),jm=a("li"),Yre=a("strong"),YUe=o("rembert"),KUe=o(" \u2014 "),CS=a("a"),ZUe=o("RemBertConfig"),eJe=o(" (RemBERT model)"),oJe=l(),Dm=a("li"),Kre=a("strong"),rJe=o("resnet"),tJe=o(" \u2014 "),wS=a("a"),aJe=o("ResNetConfig"),nJe=o(" (ResNet model)"),sJe=l(),Gm=a("li"),Zre=a("strong"),lJe=o("retribert"),iJe=o(" \u2014 "),AS=a("a"),dJe=o("RetriBertConfig"),cJe=o(" (RetriBERT model)"),fJe=l(),Om=a("li"),ete=a("strong"),mJe=o("roberta"),gJe=o(" \u2014 "),yS=a("a"),hJe=o("RobertaConfig"),pJe=o(" (RoBERTa model)"),_Je=l(),Vm=a("li"),ote=a("strong"),uJe=o("roformer"),bJe=o(" \u2014 "),LS=a("a"),vJe=o("RoFormerConfig"),FJe=o(" (RoFormer model)"),TJe=l(),Xm=a("li"),rte=a("strong"),MJe=o("segformer"),EJe=o(" \u2014 "),xS=a("a"),CJe=o("SegformerConfig"),wJe=o(" (SegFormer model)"),AJe=l(),zm=a("li"),tte=a("strong"),yJe=o("sew"),LJe=o(" \u2014 "),$S=a("a"),xJe=o("SEWConfig"),$Je=o(" (SEW model)"),kJe=l(),Wm=a("li"),ate=a("strong"),SJe=o("sew-d"),RJe=o(" \u2014 "),kS=a("a"),PJe=o("SEWDConfig"),BJe=o(" (SEW-D model)"),IJe=l(),Qm=a("li"),nte=a("strong"),NJe=o("speech-encoder-decoder"),qJe=o(" \u2014 "),SS=a("a"),jJe=o("SpeechEncoderDecoderConfig"),DJe=o(" (Speech Encoder decoder model)"),GJe=l(),Hm=a("li"),ste=a("strong"),OJe=o("speech_to_text"),VJe=o(" \u2014 "),RS=a("a"),XJe=o("Speech2TextConfig"),zJe=o(" (Speech2Text model)"),WJe=l(),Um=a("li"),lte=a("strong"),QJe=o("speech_to_text_2"),HJe=o(" \u2014 "),PS=a("a"),UJe=o("Speech2Text2Config"),JJe=o(" (Speech2Text2 model)"),YJe=l(),Jm=a("li"),ite=a("strong"),KJe=o("splinter"),ZJe=o(" \u2014 "),BS=a("a"),eYe=o("SplinterConfig"),oYe=o(" (Splinter model)"),rYe=l(),Ym=a("li"),dte=a("strong"),tYe=o("squeezebert"),aYe=o(" \u2014 "),IS=a("a"),nYe=o("SqueezeBertConfig"),sYe=o(" (SqueezeBERT model)"),lYe=l(),Km=a("li"),cte=a("strong"),iYe=o("swin"),dYe=o(" \u2014 "),NS=a("a"),cYe=o("SwinConfig"),fYe=o(" (Swin model)"),mYe=l(),Zm=a("li"),fte=a("strong"),gYe=o("t5"),hYe=o(" \u2014 "),qS=a("a"),pYe=o("T5Config"),_Ye=o(" (T5 model)"),uYe=l(),eg=a("li"),mte=a("strong"),bYe=o("tapas"),vYe=o(" \u2014 "),jS=a("a"),FYe=o("TapasConfig"),TYe=o(" (TAPAS model)"),MYe=l(),og=a("li"),gte=a("strong"),EYe=o("trajectory_transformer"),CYe=o(" \u2014 "),DS=a("a"),wYe=o("TrajectoryTransformerConfig"),AYe=o(" (Trajectory Transformer model)"),yYe=l(),rg=a("li"),hte=a("strong"),LYe=o("transfo-xl"),xYe=o(" \u2014 "),GS=a("a"),$Ye=o("TransfoXLConfig"),kYe=o(" (Transformer-XL model)"),SYe=l(),tg=a("li"),pte=a("strong"),RYe=o("trocr"),PYe=o(" \u2014 "),OS=a("a"),BYe=o("TrOCRConfig"),IYe=o(" (TrOCR model)"),NYe=l(),ag=a("li"),_te=a("strong"),qYe=o("unispeech"),jYe=o(" \u2014 "),VS=a("a"),DYe=o("UniSpeechConfig"),GYe=o(" (UniSpeech model)"),OYe=l(),ng=a("li"),ute=a("strong"),VYe=o("unispeech-sat"),XYe=o(" \u2014 "),XS=a("a"),zYe=o("UniSpeechSatConfig"),WYe=o(" (UniSpeechSat model)"),QYe=l(),sg=a("li"),bte=a("strong"),HYe=o("van"),UYe=o(" \u2014 "),zS=a("a"),JYe=o("VanConfig"),YYe=o(" (VAN model)"),KYe=l(),lg=a("li"),vte=a("strong"),ZYe=o("vilt"),eKe=o(" \u2014 "),WS=a("a"),oKe=o("ViltConfig"),rKe=o(" (ViLT model)"),tKe=l(),ig=a("li"),Fte=a("strong"),aKe=o("vision-encoder-decoder"),nKe=o(" \u2014 "),QS=a("a"),sKe=o("VisionEncoderDecoderConfig"),lKe=o(" (Vision Encoder decoder model)"),iKe=l(),dg=a("li"),Tte=a("strong"),dKe=o("vision-text-dual-encoder"),cKe=o(" \u2014 "),HS=a("a"),fKe=o("VisionTextDualEncoderConfig"),mKe=o(" (VisionTextDualEncoder model)"),gKe=l(),cg=a("li"),Mte=a("strong"),hKe=o("visual_bert"),pKe=o(" \u2014 "),US=a("a"),_Ke=o("VisualBertConfig"),uKe=o(" (VisualBert model)"),bKe=l(),fg=a("li"),Ete=a("strong"),vKe=o("vit"),FKe=o(" \u2014 "),JS=a("a"),TKe=o("ViTConfig"),MKe=o(" (ViT model)"),EKe=l(),mg=a("li"),Cte=a("strong"),CKe=o("vit_mae"),wKe=o(" \u2014 "),YS=a("a"),AKe=o("ViTMAEConfig"),yKe=o(" (ViTMAE model)"),LKe=l(),gg=a("li"),wte=a("strong"),xKe=o("wav2vec2"),$Ke=o(" \u2014 "),KS=a("a"),kKe=o("Wav2Vec2Config"),SKe=o(" (Wav2Vec2 model)"),RKe=l(),hg=a("li"),Ate=a("strong"),PKe=o("wav2vec2-conformer"),BKe=o(" \u2014 "),ZS=a("a"),IKe=o("Wav2Vec2ConformerConfig"),NKe=o(" (Wav2Vec2-Conformer model)"),qKe=l(),pg=a("li"),yte=a("strong"),jKe=o("wavlm"),DKe=o(" \u2014 "),eR=a("a"),GKe=o("WavLMConfig"),OKe=o(" (WavLM model)"),VKe=l(),_g=a("li"),Lte=a("strong"),XKe=o("xglm"),zKe=o(" \u2014 "),oR=a("a"),WKe=o("XGLMConfig"),QKe=o(" (XGLM model)"),HKe=l(),ug=a("li"),xte=a("strong"),UKe=o("xlm"),JKe=o(" \u2014 "),rR=a("a"),YKe=o("XLMConfig"),KKe=o(" (XLM model)"),ZKe=l(),bg=a("li"),$te=a("strong"),eZe=o("xlm-prophetnet"),oZe=o(" \u2014 "),tR=a("a"),rZe=o("XLMProphetNetConfig"),tZe=o(" (XLMProphetNet model)"),aZe=l(),vg=a("li"),kte=a("strong"),nZe=o("xlm-roberta"),sZe=o(" \u2014 "),aR=a("a"),lZe=o("XLMRobertaConfig"),iZe=o(" (XLM-RoBERTa model)"),dZe=l(),Fg=a("li"),Ste=a("strong"),cZe=o("xlm-roberta-xl"),fZe=o(" \u2014 "),nR=a("a"),mZe=o("XLMRobertaXLConfig"),gZe=o(" (XLM-RoBERTa-XL model)"),hZe=l(),Tg=a("li"),Rte=a("strong"),pZe=o("xlnet"),_Ze=o(" \u2014 "),sR=a("a"),uZe=o("XLNetConfig"),bZe=o(" (XLNet model)"),vZe=l(),Mg=a("li"),Pte=a("strong"),FZe=o("yolos"),TZe=o(" \u2014 "),lR=a("a"),MZe=o("YolosConfig"),EZe=o(" (YOLOS model)"),CZe=l(),Eg=a("li"),Bte=a("strong"),wZe=o("yoso"),AZe=o(" \u2014 "),iR=a("a"),yZe=o("YosoConfig"),LZe=o(" (YOSO model)"),xZe=l(),F(Cg.$$.fragment),$Ze=l(),wg=a("div"),F(VA.$$.fragment),kZe=l(),Ite=a("p"),SZe=o("Register a new configuration for this class."),Gqe=l(),Ti=a("h2"),Ag=a("a"),Nte=a("span"),F(XA.$$.fragment),RZe=l(),qte=a("span"),PZe=o("AutoTokenizer"),Oqe=l(),wo=a("div"),F(zA.$$.fragment),BZe=l(),WA=a("p"),IZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=a("a"),NZe=o("AutoTokenizer.from_pretrained()"),qZe=o(" class method."),jZe=l(),QA=a("p"),DZe=o("This class cannot be instantiated directly using "),jte=a("code"),GZe=o("__init__()"),OZe=o(" (throws an error)."),VZe=l(),Cr=a("div"),F(HA.$$.fragment),XZe=l(),Dte=a("p"),zZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),WZe=l(),Aa=a("p"),QZe=o("The tokenizer class to instantiate is selected based on the "),Gte=a("code"),HZe=o("model_type"),UZe=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),JZe=o("pretrained_model_name_or_path"),YZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=a("code"),KZe=o("pretrained_model_name_or_path"),ZZe=o(":"),eeo=l(),k=a("ul"),Sn=a("li"),Xte=a("strong"),oeo=o("albert"),reo=o(" \u2014 "),cR=a("a"),teo=o("AlbertTokenizer"),aeo=o(" or "),fR=a("a"),neo=o("AlbertTokenizerFast"),seo=o(" (ALBERT model)"),leo=l(),Rn=a("li"),zte=a("strong"),ieo=o("bart"),deo=o(" \u2014 "),mR=a("a"),ceo=o("BartTokenizer"),feo=o(" or "),gR=a("a"),meo=o("BartTokenizerFast"),geo=o(" (BART model)"),heo=l(),Pn=a("li"),Wte=a("strong"),peo=o("barthez"),_eo=o(" \u2014 "),hR=a("a"),ueo=o("BarthezTokenizer"),beo=o(" or "),pR=a("a"),veo=o("BarthezTokenizerFast"),Feo=o(" (BARThez model)"),Teo=l(),yg=a("li"),Qte=a("strong"),Meo=o("bartpho"),Eeo=o(" \u2014 "),_R=a("a"),Ceo=o("BartphoTokenizer"),weo=o(" (BARTpho model)"),Aeo=l(),Bn=a("li"),Hte=a("strong"),yeo=o("bert"),Leo=o(" \u2014 "),uR=a("a"),xeo=o("BertTokenizer"),$eo=o(" or "),bR=a("a"),keo=o("BertTokenizerFast"),Seo=o(" (BERT model)"),Reo=l(),Lg=a("li"),Ute=a("strong"),Peo=o("bert-generation"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("BertGenerationTokenizer"),Neo=o(" (Bert Generation model)"),qeo=l(),xg=a("li"),Jte=a("strong"),jeo=o("bert-japanese"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("BertJapaneseTokenizer"),Oeo=o(" (BertJapanese model)"),Veo=l(),$g=a("li"),Yte=a("strong"),Xeo=o("bertweet"),zeo=o(" \u2014 "),TR=a("a"),Weo=o("BertweetTokenizer"),Qeo=o(" (Bertweet model)"),Heo=l(),In=a("li"),Kte=a("strong"),Ueo=o("big_bird"),Jeo=o(" \u2014 "),MR=a("a"),Yeo=o("BigBirdTokenizer"),Keo=o(" or "),ER=a("a"),Zeo=o("BigBirdTokenizerFast"),eoo=o(" (BigBird model)"),ooo=l(),Nn=a("li"),Zte=a("strong"),roo=o("bigbird_pegasus"),too=o(" \u2014 "),CR=a("a"),aoo=o("PegasusTokenizer"),noo=o(" or "),wR=a("a"),soo=o("PegasusTokenizerFast"),loo=o(" (BigBirdPegasus model)"),ioo=l(),qn=a("li"),eae=a("strong"),doo=o("blenderbot"),coo=o(" \u2014 "),AR=a("a"),foo=o("BlenderbotTokenizer"),moo=o(" or "),yR=a("a"),goo=o("BlenderbotTokenizerFast"),hoo=o(" (Blenderbot model)"),poo=l(),kg=a("li"),oae=a("strong"),_oo=o("blenderbot-small"),uoo=o(" \u2014 "),LR=a("a"),boo=o("BlenderbotSmallTokenizer"),voo=o(" (BlenderbotSmall model)"),Foo=l(),Sg=a("li"),rae=a("strong"),Too=o("bloom"),Moo=o(" \u2014 "),xR=a("a"),Eoo=o("BloomTokenizerFast"),Coo=o(" (BLOOM model)"),woo=l(),Rg=a("li"),tae=a("strong"),Aoo=o("byt5"),yoo=o(" \u2014 "),$R=a("a"),Loo=o("ByT5Tokenizer"),xoo=o(" (ByT5 model)"),$oo=l(),jn=a("li"),aae=a("strong"),koo=o("camembert"),Soo=o(" \u2014 "),kR=a("a"),Roo=o("CamembertTokenizer"),Poo=o(" or "),SR=a("a"),Boo=o("CamembertTokenizerFast"),Ioo=o(" (CamemBERT model)"),Noo=l(),Pg=a("li"),nae=a("strong"),qoo=o("canine"),joo=o(" \u2014 "),RR=a("a"),Doo=o("CanineTokenizer"),Goo=o(" (Canine model)"),Ooo=l(),Dn=a("li"),sae=a("strong"),Voo=o("clip"),Xoo=o(" \u2014 "),PR=a("a"),zoo=o("CLIPTokenizer"),Woo=o(" or "),BR=a("a"),Qoo=o("CLIPTokenizerFast"),Hoo=o(" (CLIP model)"),Uoo=l(),Gn=a("li"),lae=a("strong"),Joo=o("convbert"),Yoo=o(" \u2014 "),IR=a("a"),Koo=o("ConvBertTokenizer"),Zoo=o(" or "),NR=a("a"),ero=o("ConvBertTokenizerFast"),oro=o(" (ConvBERT model)"),rro=l(),On=a("li"),iae=a("strong"),tro=o("cpm"),aro=o(" \u2014 "),qR=a("a"),nro=o("CpmTokenizer"),sro=o(" or "),jR=a("a"),lro=o("CpmTokenizerFast"),iro=o(" (CPM model)"),dro=l(),Bg=a("li"),dae=a("strong"),cro=o("ctrl"),fro=o(" \u2014 "),DR=a("a"),mro=o("CTRLTokenizer"),gro=o(" (CTRL model)"),hro=l(),Vn=a("li"),cae=a("strong"),pro=o("data2vec-text"),_ro=o(" \u2014 "),GR=a("a"),uro=o("RobertaTokenizer"),bro=o(" or "),OR=a("a"),vro=o("RobertaTokenizerFast"),Fro=o(" (Data2VecText model)"),Tro=l(),Xn=a("li"),fae=a("strong"),Mro=o("deberta"),Ero=o(" \u2014 "),VR=a("a"),Cro=o("DebertaTokenizer"),wro=o(" or "),XR=a("a"),Aro=o("DebertaTokenizerFast"),yro=o(" (DeBERTa model)"),Lro=l(),zn=a("li"),mae=a("strong"),xro=o("deberta-v2"),$ro=o(" \u2014 "),zR=a("a"),kro=o("DebertaV2Tokenizer"),Sro=o(" or "),WR=a("a"),Rro=o("DebertaV2TokenizerFast"),Pro=o(" (DeBERTa-v2 model)"),Bro=l(),Wn=a("li"),gae=a("strong"),Iro=o("distilbert"),Nro=o(" \u2014 "),QR=a("a"),qro=o("DistilBertTokenizer"),jro=o(" or "),HR=a("a"),Dro=o("DistilBertTokenizerFast"),Gro=o(" (DistilBERT model)"),Oro=l(),Qn=a("li"),hae=a("strong"),Vro=o("dpr"),Xro=o(" \u2014 "),UR=a("a"),zro=o("DPRQuestionEncoderTokenizer"),Wro=o(" or "),JR=a("a"),Qro=o("DPRQuestionEncoderTokenizerFast"),Hro=o(" (DPR model)"),Uro=l(),Hn=a("li"),pae=a("strong"),Jro=o("electra"),Yro=o(" \u2014 "),YR=a("a"),Kro=o("ElectraTokenizer"),Zro=o(" or "),KR=a("a"),eto=o("ElectraTokenizerFast"),oto=o(" (ELECTRA model)"),rto=l(),Ig=a("li"),_ae=a("strong"),tto=o("flaubert"),ato=o(" \u2014 "),ZR=a("a"),nto=o("FlaubertTokenizer"),sto=o(" (FlauBERT model)"),lto=l(),Un=a("li"),uae=a("strong"),ito=o("fnet"),dto=o(" \u2014 "),eP=a("a"),cto=o("FNetTokenizer"),fto=o(" or "),oP=a("a"),mto=o("FNetTokenizerFast"),gto=o(" (FNet model)"),hto=l(),Ng=a("li"),bae=a("strong"),pto=o("fsmt"),_to=o(" \u2014 "),rP=a("a"),uto=o("FSMTTokenizer"),bto=o(" (FairSeq Machine-Translation model)"),vto=l(),Jn=a("li"),vae=a("strong"),Fto=o("funnel"),Tto=o(" \u2014 "),tP=a("a"),Mto=o("FunnelTokenizer"),Eto=o(" or "),aP=a("a"),Cto=o("FunnelTokenizerFast"),wto=o(" (Funnel Transformer model)"),Ato=l(),Yn=a("li"),Fae=a("strong"),yto=o("gpt2"),Lto=o(" \u2014 "),nP=a("a"),xto=o("GPT2Tokenizer"),$to=o(" or "),sP=a("a"),kto=o("GPT2TokenizerFast"),Sto=o(" (OpenAI GPT-2 model)"),Rto=l(),Kn=a("li"),Tae=a("strong"),Pto=o("gpt_neo"),Bto=o(" \u2014 "),lP=a("a"),Ito=o("GPT2Tokenizer"),Nto=o(" or "),iP=a("a"),qto=o("GPT2TokenizerFast"),jto=o(" (GPT Neo model)"),Dto=l(),qg=a("li"),Mae=a("strong"),Gto=o("gpt_neox"),Oto=o(" \u2014 "),dP=a("a"),Vto=o("GPTNeoXTokenizerFast"),Xto=o(" (GPT NeoX model)"),zto=l(),Zn=a("li"),Eae=a("strong"),Wto=o("gptj"),Qto=o(" \u2014 "),cP=a("a"),Hto=o("GPT2Tokenizer"),Uto=o(" or "),fP=a("a"),Jto=o("GPT2TokenizerFast"),Yto=o(" (GPT-J model)"),Kto=l(),es=a("li"),Cae=a("strong"),Zto=o("herbert"),eao=o(" \u2014 "),mP=a("a"),oao=o("HerbertTokenizer"),rao=o(" or "),gP=a("a"),tao=o("HerbertTokenizerFast"),aao=o(" (HerBERT model)"),nao=l(),jg=a("li"),wae=a("strong"),sao=o("hubert"),lao=o(" \u2014 "),hP=a("a"),iao=o("Wav2Vec2CTCTokenizer"),dao=o(" (Hubert model)"),cao=l(),os=a("li"),Aae=a("strong"),fao=o("ibert"),mao=o(" \u2014 "),pP=a("a"),gao=o("RobertaTokenizer"),hao=o(" or "),_P=a("a"),pao=o("RobertaTokenizerFast"),_ao=o(" (I-BERT model)"),uao=l(),rs=a("li"),yae=a("strong"),bao=o("layoutlm"),vao=o(" \u2014 "),uP=a("a"),Fao=o("LayoutLMTokenizer"),Tao=o(" or "),bP=a("a"),Mao=o("LayoutLMTokenizerFast"),Eao=o(" (LayoutLM model)"),Cao=l(),ts=a("li"),Lae=a("strong"),wao=o("layoutlmv2"),Aao=o(" \u2014 "),vP=a("a"),yao=o("LayoutLMv2Tokenizer"),Lao=o(" or "),FP=a("a"),xao=o("LayoutLMv2TokenizerFast"),$ao=o(" (LayoutLMv2 model)"),kao=l(),as=a("li"),xae=a("strong"),Sao=o("layoutlmv3"),Rao=o(" \u2014 "),TP=a("a"),Pao=o("LayoutLMv3Tokenizer"),Bao=o(" or "),MP=a("a"),Iao=o("LayoutLMv3TokenizerFast"),Nao=o(" (LayoutLMv3 model)"),qao=l(),ns=a("li"),$ae=a("strong"),jao=o("layoutxlm"),Dao=o(" \u2014 "),EP=a("a"),Gao=o("LayoutXLMTokenizer"),Oao=o(" or "),CP=a("a"),Vao=o("LayoutXLMTokenizerFast"),Xao=o(" (LayoutXLM model)"),zao=l(),ss=a("li"),kae=a("strong"),Wao=o("led"),Qao=o(" \u2014 "),wP=a("a"),Hao=o("LEDTokenizer"),Uao=o(" or "),AP=a("a"),Jao=o("LEDTokenizerFast"),Yao=o(" (LED model)"),Kao=l(),ls=a("li"),Sae=a("strong"),Zao=o("longformer"),eno=o(" \u2014 "),yP=a("a"),ono=o("LongformerTokenizer"),rno=o(" or "),LP=a("a"),tno=o("LongformerTokenizerFast"),ano=o(" (Longformer model)"),nno=l(),Dg=a("li"),Rae=a("strong"),sno=o("luke"),lno=o(" \u2014 "),xP=a("a"),ino=o("LukeTokenizer"),dno=o(" (LUKE model)"),cno=l(),is=a("li"),Pae=a("strong"),fno=o("lxmert"),mno=o(" \u2014 "),$P=a("a"),gno=o("LxmertTokenizer"),hno=o(" or "),kP=a("a"),pno=o("LxmertTokenizerFast"),_no=o(" (LXMERT model)"),uno=l(),Gg=a("li"),Bae=a("strong"),bno=o("m2m_100"),vno=o(" \u2014 "),SP=a("a"),Fno=o("M2M100Tokenizer"),Tno=o(" (M2M100 model)"),Mno=l(),Og=a("li"),Iae=a("strong"),Eno=o("marian"),Cno=o(" \u2014 "),RP=a("a"),wno=o("MarianTokenizer"),Ano=o(" (Marian model)"),yno=l(),ds=a("li"),Nae=a("strong"),Lno=o("mbart"),xno=o(" \u2014 "),PP=a("a"),$no=o("MBartTokenizer"),kno=o(" or "),BP=a("a"),Sno=o("MBartTokenizerFast"),Rno=o(" (mBART model)"),Pno=l(),cs=a("li"),qae=a("strong"),Bno=o("mbart50"),Ino=o(" \u2014 "),IP=a("a"),Nno=o("MBart50Tokenizer"),qno=o(" or "),NP=a("a"),jno=o("MBart50TokenizerFast"),Dno=o(" (mBART-50 model)"),Gno=l(),fs=a("li"),jae=a("strong"),Ono=o("megatron-bert"),Vno=o(" \u2014 "),qP=a("a"),Xno=o("BertTokenizer"),zno=o(" or "),jP=a("a"),Wno=o("BertTokenizerFast"),Qno=o(" (MegatronBert model)"),Hno=l(),Vg=a("li"),Dae=a("strong"),Uno=o("mluke"),Jno=o(" \u2014 "),DP=a("a"),Yno=o("MLukeTokenizer"),Kno=o(" (mLUKE model)"),Zno=l(),ms=a("li"),Gae=a("strong"),eso=o("mobilebert"),oso=o(" \u2014 "),GP=a("a"),rso=o("MobileBertTokenizer"),tso=o(" or "),OP=a("a"),aso=o("MobileBertTokenizerFast"),nso=o(" (MobileBERT model)"),sso=l(),gs=a("li"),Oae=a("strong"),lso=o("mpnet"),iso=o(" \u2014 "),VP=a("a"),dso=o("MPNetTokenizer"),cso=o(" or "),XP=a("a"),fso=o("MPNetTokenizerFast"),mso=o(" (MPNet model)"),gso=l(),hs=a("li"),Vae=a("strong"),hso=o("mt5"),pso=o(" \u2014 "),zP=a("a"),_so=o("MT5Tokenizer"),uso=o(" or "),WP=a("a"),bso=o("MT5TokenizerFast"),vso=o(" (mT5 model)"),Fso=l(),ps=a("li"),Xae=a("strong"),Tso=o("nystromformer"),Mso=o(" \u2014 "),QP=a("a"),Eso=o("AlbertTokenizer"),Cso=o(" or "),HP=a("a"),wso=o("AlbertTokenizerFast"),Aso=o(" (Nystromformer model)"),yso=l(),_s=a("li"),zae=a("strong"),Lso=o("openai-gpt"),xso=o(" \u2014 "),UP=a("a"),$so=o("OpenAIGPTTokenizer"),kso=o(" or "),JP=a("a"),Sso=o("OpenAIGPTTokenizerFast"),Rso=o(" (OpenAI GPT model)"),Pso=l(),Xg=a("li"),Wae=a("strong"),Bso=o("opt"),Iso=o(" \u2014 "),YP=a("a"),Nso=o("GPT2Tokenizer"),qso=o(" (OPT model)"),jso=l(),us=a("li"),Qae=a("strong"),Dso=o("pegasus"),Gso=o(" \u2014 "),KP=a("a"),Oso=o("PegasusTokenizer"),Vso=o(" or "),ZP=a("a"),Xso=o("PegasusTokenizerFast"),zso=o(" (Pegasus model)"),Wso=l(),zg=a("li"),Hae=a("strong"),Qso=o("perceiver"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("PerceiverTokenizer"),Jso=o(" (Perceiver model)"),Yso=l(),Wg=a("li"),Uae=a("strong"),Kso=o("phobert"),Zso=o(" \u2014 "),oB=a("a"),elo=o("PhobertTokenizer"),olo=o(" (PhoBERT model)"),rlo=l(),Qg=a("li"),Jae=a("strong"),tlo=o("plbart"),alo=o(" \u2014 "),rB=a("a"),nlo=o("PLBartTokenizer"),slo=o(" (PLBart model)"),llo=l(),Hg=a("li"),Yae=a("strong"),ilo=o("prophetnet"),dlo=o(" \u2014 "),tB=a("a"),clo=o("ProphetNetTokenizer"),flo=o(" (ProphetNet model)"),mlo=l(),bs=a("li"),Kae=a("strong"),glo=o("qdqbert"),hlo=o(" \u2014 "),aB=a("a"),plo=o("BertTokenizer"),_lo=o(" or "),nB=a("a"),ulo=o("BertTokenizerFast"),blo=o(" (QDQBert model)"),vlo=l(),Ug=a("li"),Zae=a("strong"),Flo=o("rag"),Tlo=o(" \u2014 "),sB=a("a"),Mlo=o("RagTokenizer"),Elo=o(" (RAG model)"),Clo=l(),vs=a("li"),ene=a("strong"),wlo=o("realm"),Alo=o(" \u2014 "),lB=a("a"),ylo=o("RealmTokenizer"),Llo=o(" or "),iB=a("a"),xlo=o("RealmTokenizerFast"),$lo=o(" (Realm model)"),klo=l(),Fs=a("li"),one=a("strong"),Slo=o("reformer"),Rlo=o(" \u2014 "),dB=a("a"),Plo=o("ReformerTokenizer"),Blo=o(" or "),cB=a("a"),Ilo=o("ReformerTokenizerFast"),Nlo=o(" (Reformer model)"),qlo=l(),Ts=a("li"),rne=a("strong"),jlo=o("rembert"),Dlo=o(" \u2014 "),fB=a("a"),Glo=o("RemBertTokenizer"),Olo=o(" or "),mB=a("a"),Vlo=o("RemBertTokenizerFast"),Xlo=o(" (RemBERT model)"),zlo=l(),Ms=a("li"),tne=a("strong"),Wlo=o("retribert"),Qlo=o(" \u2014 "),gB=a("a"),Hlo=o("RetriBertTokenizer"),Ulo=o(" or "),hB=a("a"),Jlo=o("RetriBertTokenizerFast"),Ylo=o(" (RetriBERT model)"),Klo=l(),Es=a("li"),ane=a("strong"),Zlo=o("roberta"),eio=o(" \u2014 "),pB=a("a"),oio=o("RobertaTokenizer"),rio=o(" or "),_B=a("a"),tio=o("RobertaTokenizerFast"),aio=o(" (RoBERTa model)"),nio=l(),Cs=a("li"),nne=a("strong"),sio=o("roformer"),lio=o(" \u2014 "),uB=a("a"),iio=o("RoFormerTokenizer"),dio=o(" or "),bB=a("a"),cio=o("RoFormerTokenizerFast"),fio=o(" (RoFormer model)"),mio=l(),Jg=a("li"),sne=a("strong"),gio=o("speech_to_text"),hio=o(" \u2014 "),vB=a("a"),pio=o("Speech2TextTokenizer"),_io=o(" (Speech2Text model)"),uio=l(),Yg=a("li"),lne=a("strong"),bio=o("speech_to_text_2"),vio=o(" \u2014 "),FB=a("a"),Fio=o("Speech2Text2Tokenizer"),Tio=o(" (Speech2Text2 model)"),Mio=l(),ws=a("li"),ine=a("strong"),Eio=o("splinter"),Cio=o(" \u2014 "),TB=a("a"),wio=o("SplinterTokenizer"),Aio=o(" or "),MB=a("a"),yio=o("SplinterTokenizerFast"),Lio=o(" (Splinter model)"),xio=l(),As=a("li"),dne=a("strong"),$io=o("squeezebert"),kio=o(" \u2014 "),EB=a("a"),Sio=o("SqueezeBertTokenizer"),Rio=o(" or "),CB=a("a"),Pio=o("SqueezeBertTokenizerFast"),Bio=o(" (SqueezeBERT model)"),Iio=l(),ys=a("li"),cne=a("strong"),Nio=o("t5"),qio=o(" \u2014 "),wB=a("a"),jio=o("T5Tokenizer"),Dio=o(" or "),AB=a("a"),Gio=o("T5TokenizerFast"),Oio=o(" (T5 model)"),Vio=l(),Kg=a("li"),fne=a("strong"),Xio=o("tapas"),zio=o(" \u2014 "),yB=a("a"),Wio=o("TapasTokenizer"),Qio=o(" (TAPAS model)"),Hio=l(),Zg=a("li"),mne=a("strong"),Uio=o("tapex"),Jio=o(" \u2014 "),LB=a("a"),Yio=o("TapexTokenizer"),Kio=o(" (TAPEX model)"),Zio=l(),eh=a("li"),gne=a("strong"),edo=o("transfo-xl"),odo=o(" \u2014 "),xB=a("a"),rdo=o("TransfoXLTokenizer"),tdo=o(" (Transformer-XL model)"),ado=l(),Ls=a("li"),hne=a("strong"),ndo=o("visual_bert"),sdo=o(" \u2014 "),$B=a("a"),ldo=o("BertTokenizer"),ido=o(" or "),kB=a("a"),ddo=o("BertTokenizerFast"),cdo=o(" (VisualBert model)"),fdo=l(),oh=a("li"),pne=a("strong"),mdo=o("wav2vec2"),gdo=o(" \u2014 "),SB=a("a"),hdo=o("Wav2Vec2CTCTokenizer"),pdo=o(" (Wav2Vec2 model)"),_do=l(),rh=a("li"),_ne=a("strong"),udo=o("wav2vec2-conformer"),bdo=o(" \u2014 "),RB=a("a"),vdo=o("Wav2Vec2CTCTokenizer"),Fdo=o(" (Wav2Vec2-Conformer model)"),Tdo=l(),th=a("li"),une=a("strong"),Mdo=o("wav2vec2_phoneme"),Edo=o(" \u2014 "),PB=a("a"),Cdo=o("Wav2Vec2PhonemeCTCTokenizer"),wdo=o(" (Wav2Vec2Phoneme model)"),Ado=l(),xs=a("li"),bne=a("strong"),ydo=o("xglm"),Ldo=o(" \u2014 "),BB=a("a"),xdo=o("XGLMTokenizer"),$do=o(" or "),IB=a("a"),kdo=o("XGLMTokenizerFast"),Sdo=o(" (XGLM model)"),Rdo=l(),ah=a("li"),vne=a("strong"),Pdo=o("xlm"),Bdo=o(" \u2014 "),NB=a("a"),Ido=o("XLMTokenizer"),Ndo=o(" (XLM model)"),qdo=l(),nh=a("li"),Fne=a("strong"),jdo=o("xlm-prophetnet"),Ddo=o(" \u2014 "),qB=a("a"),Gdo=o("XLMProphetNetTokenizer"),Odo=o(" (XLMProphetNet model)"),Vdo=l(),$s=a("li"),Tne=a("strong"),Xdo=o("xlm-roberta"),zdo=o(" \u2014 "),jB=a("a"),Wdo=o("XLMRobertaTokenizer"),Qdo=o(" or "),DB=a("a"),Hdo=o("XLMRobertaTokenizerFast"),Udo=o(" (XLM-RoBERTa model)"),Jdo=l(),ks=a("li"),Mne=a("strong"),Ydo=o("xlm-roberta-xl"),Kdo=o(" \u2014 "),GB=a("a"),Zdo=o("RobertaTokenizer"),eco=o(" or "),OB=a("a"),oco=o("RobertaTokenizerFast"),rco=o(" (XLM-RoBERTa-XL model)"),tco=l(),Ss=a("li"),Ene=a("strong"),aco=o("xlnet"),nco=o(" \u2014 "),VB=a("a"),sco=o("XLNetTokenizer"),lco=o(" or "),XB=a("a"),ico=o("XLNetTokenizerFast"),dco=o(" (XLNet model)"),cco=l(),Rs=a("li"),Cne=a("strong"),fco=o("yoso"),mco=o(" \u2014 "),zB=a("a"),gco=o("AlbertTokenizer"),hco=o(" or "),WB=a("a"),pco=o("AlbertTokenizerFast"),_co=o(" (YOSO model)"),uco=l(),F(sh.$$.fragment),bco=l(),lh=a("div"),F(UA.$$.fragment),vco=l(),wne=a("p"),Fco=o("Register a new tokenizer in this mapping."),Vqe=l(),Mi=a("h2"),ih=a("a"),Ane=a("span"),F(JA.$$.fragment),Tco=l(),yne=a("span"),Mco=o("AutoFeatureExtractor"),Xqe=l(),Ao=a("div"),F(YA.$$.fragment),Eco=l(),KA=a("p"),Cco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=a("a"),wco=o("AutoFeatureExtractor.from_pretrained()"),Aco=o(" class method."),yco=l(),ZA=a("p"),Lco=o("This class cannot be instantiated directly using "),Lne=a("code"),xco=o("__init__()"),$co=o(" (throws an error)."),kco=l(),He=a("div"),F(ey.$$.fragment),Sco=l(),xne=a("p"),Rco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Pco=l(),ya=a("p"),Bco=o("The feature extractor class to instantiate is selected based on the "),$ne=a("code"),Ico=o("model_type"),Nco=o(` property of the config object
(either passed as an argument or loaded from `),kne=a("code"),qco=o("pretrained_model_name_or_path"),jco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sne=a("code"),Dco=o("pretrained_model_name_or_path"),Gco=o(":"),Oco=l(),Y=a("ul"),dh=a("li"),Rne=a("strong"),Vco=o("beit"),Xco=o(" \u2014 "),HB=a("a"),zco=o("BeitFeatureExtractor"),Wco=o(" (BEiT model)"),Qco=l(),ch=a("li"),Pne=a("strong"),Hco=o("clip"),Uco=o(" \u2014 "),UB=a("a"),Jco=o("CLIPFeatureExtractor"),Yco=o(" (CLIP model)"),Kco=l(),fh=a("li"),Bne=a("strong"),Zco=o("convnext"),efo=o(" \u2014 "),JB=a("a"),ofo=o("ConvNextFeatureExtractor"),rfo=o(" (ConvNext model)"),tfo=l(),mh=a("li"),Ine=a("strong"),afo=o("cvt"),nfo=o(" \u2014 "),YB=a("a"),sfo=o("ConvNextFeatureExtractor"),lfo=o(" (CvT model)"),ifo=l(),gh=a("li"),Nne=a("strong"),dfo=o("data2vec-audio"),cfo=o(" \u2014 "),KB=a("a"),ffo=o("Wav2Vec2FeatureExtractor"),mfo=o(" (Data2VecAudio model)"),gfo=l(),hh=a("li"),qne=a("strong"),hfo=o("data2vec-vision"),pfo=o(" \u2014 "),ZB=a("a"),_fo=o("BeitFeatureExtractor"),ufo=o(" (Data2VecVision model)"),bfo=l(),ph=a("li"),jne=a("strong"),vfo=o("deit"),Ffo=o(" \u2014 "),eI=a("a"),Tfo=o("DeiTFeatureExtractor"),Mfo=o(" (DeiT model)"),Efo=l(),_h=a("li"),Dne=a("strong"),Cfo=o("detr"),wfo=o(" \u2014 "),oI=a("a"),Afo=o("DetrFeatureExtractor"),yfo=o(" (DETR model)"),Lfo=l(),uh=a("li"),Gne=a("strong"),xfo=o("dpt"),$fo=o(" \u2014 "),rI=a("a"),kfo=o("DPTFeatureExtractor"),Sfo=o(" (DPT model)"),Rfo=l(),bh=a("li"),One=a("strong"),Pfo=o("flava"),Bfo=o(" \u2014 "),tI=a("a"),Ifo=o("FlavaFeatureExtractor"),Nfo=o(" (Flava model)"),qfo=l(),vh=a("li"),Vne=a("strong"),jfo=o("glpn"),Dfo=o(" \u2014 "),aI=a("a"),Gfo=o("GLPNFeatureExtractor"),Ofo=o(" (GLPN model)"),Vfo=l(),Fh=a("li"),Xne=a("strong"),Xfo=o("hubert"),zfo=o(" \u2014 "),nI=a("a"),Wfo=o("Wav2Vec2FeatureExtractor"),Qfo=o(" (Hubert model)"),Hfo=l(),Th=a("li"),zne=a("strong"),Ufo=o("imagegpt"),Jfo=o(" \u2014 "),sI=a("a"),Yfo=o("ImageGPTFeatureExtractor"),Kfo=o(" (ImageGPT model)"),Zfo=l(),Mh=a("li"),Wne=a("strong"),emo=o("layoutlmv2"),omo=o(" \u2014 "),lI=a("a"),rmo=o("LayoutLMv2FeatureExtractor"),tmo=o(" (LayoutLMv2 model)"),amo=l(),Eh=a("li"),Qne=a("strong"),nmo=o("layoutlmv3"),smo=o(" \u2014 "),iI=a("a"),lmo=o("LayoutLMv3FeatureExtractor"),imo=o(" (LayoutLMv3 model)"),dmo=l(),Ch=a("li"),Hne=a("strong"),cmo=o("maskformer"),fmo=o(" \u2014 "),dI=a("a"),mmo=o("MaskFormerFeatureExtractor"),gmo=o(" (MaskFormer model)"),hmo=l(),wh=a("li"),Une=a("strong"),pmo=o("perceiver"),_mo=o(" \u2014 "),cI=a("a"),umo=o("PerceiverFeatureExtractor"),bmo=o(" (Perceiver model)"),vmo=l(),Ah=a("li"),Jne=a("strong"),Fmo=o("poolformer"),Tmo=o(" \u2014 "),fI=a("a"),Mmo=o("PoolFormerFeatureExtractor"),Emo=o(" (PoolFormer model)"),Cmo=l(),yh=a("li"),Yne=a("strong"),wmo=o("regnet"),Amo=o(" \u2014 "),mI=a("a"),ymo=o("ConvNextFeatureExtractor"),Lmo=o(" (RegNet model)"),xmo=l(),Lh=a("li"),Kne=a("strong"),$mo=o("resnet"),kmo=o(" \u2014 "),gI=a("a"),Smo=o("ConvNextFeatureExtractor"),Rmo=o(" (ResNet model)"),Pmo=l(),xh=a("li"),Zne=a("strong"),Bmo=o("segformer"),Imo=o(" \u2014 "),hI=a("a"),Nmo=o("SegformerFeatureExtractor"),qmo=o(" (SegFormer model)"),jmo=l(),$h=a("li"),ese=a("strong"),Dmo=o("speech_to_text"),Gmo=o(" \u2014 "),pI=a("a"),Omo=o("Speech2TextFeatureExtractor"),Vmo=o(" (Speech2Text model)"),Xmo=l(),kh=a("li"),ose=a("strong"),zmo=o("swin"),Wmo=o(" \u2014 "),_I=a("a"),Qmo=o("ViTFeatureExtractor"),Hmo=o(" (Swin model)"),Umo=l(),Sh=a("li"),rse=a("strong"),Jmo=o("van"),Ymo=o(" \u2014 "),uI=a("a"),Kmo=o("ConvNextFeatureExtractor"),Zmo=o(" (VAN model)"),ego=l(),Rh=a("li"),tse=a("strong"),ogo=o("vit"),rgo=o(" \u2014 "),bI=a("a"),tgo=o("ViTFeatureExtractor"),ago=o(" (ViT model)"),ngo=l(),Ph=a("li"),ase=a("strong"),sgo=o("vit_mae"),lgo=o(" \u2014 "),vI=a("a"),igo=o("ViTFeatureExtractor"),dgo=o(" (ViTMAE model)"),cgo=l(),Bh=a("li"),nse=a("strong"),fgo=o("wav2vec2"),mgo=o(" \u2014 "),FI=a("a"),ggo=o("Wav2Vec2FeatureExtractor"),hgo=o(" (Wav2Vec2 model)"),pgo=l(),Ih=a("li"),sse=a("strong"),_go=o("wav2vec2-conformer"),ugo=o(" \u2014 "),TI=a("a"),bgo=o("Wav2Vec2FeatureExtractor"),vgo=o(" (Wav2Vec2-Conformer model)"),Fgo=l(),Nh=a("li"),lse=a("strong"),Tgo=o("yolos"),Mgo=o(" \u2014 "),MI=a("a"),Ego=o("YolosFeatureExtractor"),Cgo=o(" (YOLOS model)"),wgo=l(),F(qh.$$.fragment),Ago=l(),F(jh.$$.fragment),ygo=l(),Dh=a("div"),F(oy.$$.fragment),Lgo=l(),ise=a("p"),xgo=o("Register a new feature extractor for this class."),zqe=l(),Ei=a("h2"),Gh=a("a"),dse=a("span"),F(ry.$$.fragment),$go=l(),cse=a("span"),kgo=o("AutoProcessor"),Wqe=l(),yo=a("div"),F(ty.$$.fragment),Sgo=l(),ay=a("p"),Rgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=a("a"),Pgo=o("AutoProcessor.from_pretrained()"),Bgo=o(" class method."),Igo=l(),ny=a("p"),Ngo=o("This class cannot be instantiated directly using "),fse=a("code"),qgo=o("__init__()"),jgo=o(" (throws an error)."),Dgo=l(),Ue=a("div"),F(sy.$$.fragment),Ggo=l(),mse=a("p"),Ogo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Vgo=l(),Ci=a("p"),Xgo=o("The processor class to instantiate is selected based on the "),gse=a("code"),zgo=o("model_type"),Wgo=o(` property of the config object (either
passed as an argument or loaded from `),hse=a("code"),Qgo=o("pretrained_model_name_or_path"),Hgo=o(" if possible):"),Ugo=l(),he=a("ul"),Oh=a("li"),pse=a("strong"),Jgo=o("clip"),Ygo=o(" \u2014 "),CI=a("a"),Kgo=o("CLIPProcessor"),Zgo=o(" (CLIP model)"),eho=l(),Vh=a("li"),_se=a("strong"),oho=o("flava"),rho=o(" \u2014 "),use=a("code"),tho=o("FLAVAProcessor"),aho=o(" (Flava model)"),nho=l(),Xh=a("li"),bse=a("strong"),sho=o("layoutlmv2"),lho=o(" \u2014 "),wI=a("a"),iho=o("LayoutLMv2Processor"),dho=o(" (LayoutLMv2 model)"),cho=l(),zh=a("li"),vse=a("strong"),fho=o("layoutlmv3"),mho=o(" \u2014 "),AI=a("a"),gho=o("LayoutLMv3Processor"),hho=o(" (LayoutLMv3 model)"),pho=l(),Wh=a("li"),Fse=a("strong"),_ho=o("layoutxlm"),uho=o(" \u2014 "),yI=a("a"),bho=o("LayoutXLMProcessor"),vho=o(" (LayoutXLM model)"),Fho=l(),Qh=a("li"),Tse=a("strong"),Tho=o("sew"),Mho=o(" \u2014 "),LI=a("a"),Eho=o("Wav2Vec2Processor"),Cho=o(" (SEW model)"),who=l(),Hh=a("li"),Mse=a("strong"),Aho=o("sew-d"),yho=o(" \u2014 "),xI=a("a"),Lho=o("Wav2Vec2Processor"),xho=o(" (SEW-D model)"),$ho=l(),Uh=a("li"),Ese=a("strong"),kho=o("speech_to_text"),Sho=o(" \u2014 "),$I=a("a"),Rho=o("Speech2TextProcessor"),Pho=o(" (Speech2Text model)"),Bho=l(),Jh=a("li"),Cse=a("strong"),Iho=o("speech_to_text_2"),Nho=o(" \u2014 "),kI=a("a"),qho=o("Speech2Text2Processor"),jho=o(" (Speech2Text2 model)"),Dho=l(),Yh=a("li"),wse=a("strong"),Gho=o("trocr"),Oho=o(" \u2014 "),SI=a("a"),Vho=o("TrOCRProcessor"),Xho=o(" (TrOCR model)"),zho=l(),Kh=a("li"),Ase=a("strong"),Who=o("unispeech"),Qho=o(" \u2014 "),RI=a("a"),Hho=o("Wav2Vec2Processor"),Uho=o(" (UniSpeech model)"),Jho=l(),Zh=a("li"),yse=a("strong"),Yho=o("unispeech-sat"),Kho=o(" \u2014 "),PI=a("a"),Zho=o("Wav2Vec2Processor"),epo=o(" (UniSpeechSat model)"),opo=l(),ep=a("li"),Lse=a("strong"),rpo=o("vilt"),tpo=o(" \u2014 "),BI=a("a"),apo=o("ViltProcessor"),npo=o(" (ViLT model)"),spo=l(),op=a("li"),xse=a("strong"),lpo=o("vision-text-dual-encoder"),ipo=o(" \u2014 "),II=a("a"),dpo=o("VisionTextDualEncoderProcessor"),cpo=o(" (VisionTextDualEncoder model)"),fpo=l(),rp=a("li"),$se=a("strong"),mpo=o("wav2vec2"),gpo=o(" \u2014 "),NI=a("a"),hpo=o("Wav2Vec2Processor"),ppo=o(" (Wav2Vec2 model)"),_po=l(),tp=a("li"),kse=a("strong"),upo=o("wav2vec2-conformer"),bpo=o(" \u2014 "),qI=a("a"),vpo=o("Wav2Vec2Processor"),Fpo=o(" (Wav2Vec2-Conformer model)"),Tpo=l(),ap=a("li"),Sse=a("strong"),Mpo=o("wavlm"),Epo=o(" \u2014 "),jI=a("a"),Cpo=o("Wav2Vec2Processor"),wpo=o(" (WavLM model)"),Apo=l(),F(np.$$.fragment),ypo=l(),F(sp.$$.fragment),Lpo=l(),lp=a("div"),F(ly.$$.fragment),xpo=l(),Rse=a("p"),$po=o("Register a new processor for this class."),Qqe=l(),wi=a("h2"),ip=a("a"),Pse=a("span"),F(iy.$$.fragment),kpo=l(),Bse=a("span"),Spo=o("AutoModel"),Hqe=l(),Lo=a("div"),F(dy.$$.fragment),Rpo=l(),Ai=a("p"),Ppo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=a("a"),Bpo=o("from_pretrained()"),Ipo=o(" class method or the "),GI=a("a"),Npo=o("from_config()"),qpo=o(` class
method.`),jpo=l(),cy=a("p"),Dpo=o("This class cannot be instantiated directly using "),Ise=a("code"),Gpo=o("__init__()"),Opo=o(" (throws an error)."),Vpo=l(),tt=a("div"),F(fy.$$.fragment),Xpo=l(),Nse=a("p"),zpo=o("Instantiates one of the base model classes of the library from a configuration."),Wpo=l(),yi=a("p"),Qpo=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),Hpo=o("not"),Upo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),Jpo=o("from_pretrained()"),Ypo=o(" to load the model weights."),Kpo=l(),F(dp.$$.fragment),Zpo=l(),Je=a("div"),F(my.$$.fragment),e_o=l(),jse=a("p"),o_o=o("Instantiate one of the base model classes of the library from a pretrained model."),r_o=l(),La=a("p"),t_o=o("The model class to instantiate is selected based on the "),Dse=a("code"),a_o=o("model_type"),n_o=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),s_o=o("pretrained_model_name_or_path"),l_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),i_o=o("pretrained_model_name_or_path"),d_o=o(":"),c_o=l(),x=a("ul"),cp=a("li"),Vse=a("strong"),f_o=o("albert"),m_o=o(" \u2014 "),VI=a("a"),g_o=o("AlbertModel"),h_o=o(" (ALBERT model)"),p_o=l(),fp=a("li"),Xse=a("strong"),__o=o("bart"),u_o=o(" \u2014 "),XI=a("a"),b_o=o("BartModel"),v_o=o(" (BART model)"),F_o=l(),mp=a("li"),zse=a("strong"),T_o=o("beit"),M_o=o(" \u2014 "),zI=a("a"),E_o=o("BeitModel"),C_o=o(" (BEiT model)"),w_o=l(),gp=a("li"),Wse=a("strong"),A_o=o("bert"),y_o=o(" \u2014 "),WI=a("a"),L_o=o("BertModel"),x_o=o(" (BERT model)"),$_o=l(),hp=a("li"),Qse=a("strong"),k_o=o("bert-generation"),S_o=o(" \u2014 "),QI=a("a"),R_o=o("BertGenerationEncoder"),P_o=o(" (Bert Generation model)"),B_o=l(),pp=a("li"),Hse=a("strong"),I_o=o("big_bird"),N_o=o(" \u2014 "),HI=a("a"),q_o=o("BigBirdModel"),j_o=o(" (BigBird model)"),D_o=l(),_p=a("li"),Use=a("strong"),G_o=o("bigbird_pegasus"),O_o=o(" \u2014 "),UI=a("a"),V_o=o("BigBirdPegasusModel"),X_o=o(" (BigBirdPegasus model)"),z_o=l(),up=a("li"),Jse=a("strong"),W_o=o("blenderbot"),Q_o=o(" \u2014 "),JI=a("a"),H_o=o("BlenderbotModel"),U_o=o(" (Blenderbot model)"),J_o=l(),bp=a("li"),Yse=a("strong"),Y_o=o("blenderbot-small"),K_o=o(" \u2014 "),YI=a("a"),Z_o=o("BlenderbotSmallModel"),euo=o(" (BlenderbotSmall model)"),ouo=l(),vp=a("li"),Kse=a("strong"),ruo=o("bloom"),tuo=o(" \u2014 "),KI=a("a"),auo=o("BloomModel"),nuo=o(" (BLOOM model)"),suo=l(),Fp=a("li"),Zse=a("strong"),luo=o("camembert"),iuo=o(" \u2014 "),ZI=a("a"),duo=o("CamembertModel"),cuo=o(" (CamemBERT model)"),fuo=l(),Tp=a("li"),ele=a("strong"),muo=o("canine"),guo=o(" \u2014 "),eN=a("a"),huo=o("CanineModel"),puo=o(" (Canine model)"),_uo=l(),Mp=a("li"),ole=a("strong"),uuo=o("clip"),buo=o(" \u2014 "),oN=a("a"),vuo=o("CLIPModel"),Fuo=o(" (CLIP model)"),Tuo=l(),Ep=a("li"),rle=a("strong"),Muo=o("convbert"),Euo=o(" \u2014 "),rN=a("a"),Cuo=o("ConvBertModel"),wuo=o(" (ConvBERT model)"),Auo=l(),Cp=a("li"),tle=a("strong"),yuo=o("convnext"),Luo=o(" \u2014 "),tN=a("a"),xuo=o("ConvNextModel"),$uo=o(" (ConvNext model)"),kuo=l(),wp=a("li"),ale=a("strong"),Suo=o("ctrl"),Ruo=o(" \u2014 "),aN=a("a"),Puo=o("CTRLModel"),Buo=o(" (CTRL model)"),Iuo=l(),Ap=a("li"),nle=a("strong"),Nuo=o("cvt"),quo=o(" \u2014 "),nN=a("a"),juo=o("CvtModel"),Duo=o(" (CvT model)"),Guo=l(),yp=a("li"),sle=a("strong"),Ouo=o("data2vec-audio"),Vuo=o(" \u2014 "),sN=a("a"),Xuo=o("Data2VecAudioModel"),zuo=o(" (Data2VecAudio model)"),Wuo=l(),Lp=a("li"),lle=a("strong"),Quo=o("data2vec-text"),Huo=o(" \u2014 "),lN=a("a"),Uuo=o("Data2VecTextModel"),Juo=o(" (Data2VecText model)"),Yuo=l(),xp=a("li"),ile=a("strong"),Kuo=o("data2vec-vision"),Zuo=o(" \u2014 "),iN=a("a"),e4o=o("Data2VecVisionModel"),o4o=o(" (Data2VecVision model)"),r4o=l(),$p=a("li"),dle=a("strong"),t4o=o("deberta"),a4o=o(" \u2014 "),dN=a("a"),n4o=o("DebertaModel"),s4o=o(" (DeBERTa model)"),l4o=l(),kp=a("li"),cle=a("strong"),i4o=o("deberta-v2"),d4o=o(" \u2014 "),cN=a("a"),c4o=o("DebertaV2Model"),f4o=o(" (DeBERTa-v2 model)"),m4o=l(),Sp=a("li"),fle=a("strong"),g4o=o("decision_transformer"),h4o=o(" \u2014 "),fN=a("a"),p4o=o("DecisionTransformerModel"),_4o=o(" (Decision Transformer model)"),u4o=l(),Rp=a("li"),mle=a("strong"),b4o=o("deit"),v4o=o(" \u2014 "),mN=a("a"),F4o=o("DeiTModel"),T4o=o(" (DeiT model)"),M4o=l(),Pp=a("li"),gle=a("strong"),E4o=o("detr"),C4o=o(" \u2014 "),gN=a("a"),w4o=o("DetrModel"),A4o=o(" (DETR model)"),y4o=l(),Bp=a("li"),hle=a("strong"),L4o=o("distilbert"),x4o=o(" \u2014 "),hN=a("a"),$4o=o("DistilBertModel"),k4o=o(" (DistilBERT model)"),S4o=l(),Ip=a("li"),ple=a("strong"),R4o=o("dpr"),P4o=o(" \u2014 "),pN=a("a"),B4o=o("DPRQuestionEncoder"),I4o=o(" (DPR model)"),N4o=l(),Np=a("li"),_le=a("strong"),q4o=o("dpt"),j4o=o(" \u2014 "),_N=a("a"),D4o=o("DPTModel"),G4o=o(" (DPT model)"),O4o=l(),qp=a("li"),ule=a("strong"),V4o=o("electra"),X4o=o(" \u2014 "),uN=a("a"),z4o=o("ElectraModel"),W4o=o(" (ELECTRA model)"),Q4o=l(),jp=a("li"),ble=a("strong"),H4o=o("flaubert"),U4o=o(" \u2014 "),bN=a("a"),J4o=o("FlaubertModel"),Y4o=o(" (FlauBERT model)"),K4o=l(),Dp=a("li"),vle=a("strong"),Z4o=o("flava"),e1o=o(" \u2014 "),vN=a("a"),o1o=o("FlavaModel"),r1o=o(" (Flava model)"),t1o=l(),Gp=a("li"),Fle=a("strong"),a1o=o("fnet"),n1o=o(" \u2014 "),FN=a("a"),s1o=o("FNetModel"),l1o=o(" (FNet model)"),i1o=l(),Op=a("li"),Tle=a("strong"),d1o=o("fsmt"),c1o=o(" \u2014 "),TN=a("a"),f1o=o("FSMTModel"),m1o=o(" (FairSeq Machine-Translation model)"),g1o=l(),Ps=a("li"),Mle=a("strong"),h1o=o("funnel"),p1o=o(" \u2014 "),MN=a("a"),_1o=o("FunnelModel"),u1o=o(" or "),EN=a("a"),b1o=o("FunnelBaseModel"),v1o=o(" (Funnel Transformer model)"),F1o=l(),Vp=a("li"),Ele=a("strong"),T1o=o("glpn"),M1o=o(" \u2014 "),CN=a("a"),E1o=o("GLPNModel"),C1o=o(" (GLPN model)"),w1o=l(),Xp=a("li"),Cle=a("strong"),A1o=o("gpt2"),y1o=o(" \u2014 "),wN=a("a"),L1o=o("GPT2Model"),x1o=o(" (OpenAI GPT-2 model)"),$1o=l(),zp=a("li"),wle=a("strong"),k1o=o("gpt_neo"),S1o=o(" \u2014 "),AN=a("a"),R1o=o("GPTNeoModel"),P1o=o(" (GPT Neo model)"),B1o=l(),Wp=a("li"),Ale=a("strong"),I1o=o("gpt_neox"),N1o=o(" \u2014 "),yN=a("a"),q1o=o("GPTNeoXModel"),j1o=o(" (GPT NeoX model)"),D1o=l(),Qp=a("li"),yle=a("strong"),G1o=o("gptj"),O1o=o(" \u2014 "),LN=a("a"),V1o=o("GPTJModel"),X1o=o(" (GPT-J model)"),z1o=l(),Hp=a("li"),Lle=a("strong"),W1o=o("hubert"),Q1o=o(" \u2014 "),xN=a("a"),H1o=o("HubertModel"),U1o=o(" (Hubert model)"),J1o=l(),Up=a("li"),xle=a("strong"),Y1o=o("ibert"),K1o=o(" \u2014 "),$N=a("a"),Z1o=o("IBertModel"),e7o=o(" (I-BERT model)"),o7o=l(),Jp=a("li"),$le=a("strong"),r7o=o("imagegpt"),t7o=o(" \u2014 "),kN=a("a"),a7o=o("ImageGPTModel"),n7o=o(" (ImageGPT model)"),s7o=l(),Yp=a("li"),kle=a("strong"),l7o=o("layoutlm"),i7o=o(" \u2014 "),SN=a("a"),d7o=o("LayoutLMModel"),c7o=o(" (LayoutLM model)"),f7o=l(),Kp=a("li"),Sle=a("strong"),m7o=o("layoutlmv2"),g7o=o(" \u2014 "),RN=a("a"),h7o=o("LayoutLMv2Model"),p7o=o(" (LayoutLMv2 model)"),_7o=l(),Zp=a("li"),Rle=a("strong"),u7o=o("layoutlmv3"),b7o=o(" \u2014 "),PN=a("a"),v7o=o("LayoutLMv3Model"),F7o=o(" (LayoutLMv3 model)"),T7o=l(),e_=a("li"),Ple=a("strong"),M7o=o("led"),E7o=o(" \u2014 "),BN=a("a"),C7o=o("LEDModel"),w7o=o(" (LED model)"),A7o=l(),o_=a("li"),Ble=a("strong"),y7o=o("longformer"),L7o=o(" \u2014 "),IN=a("a"),x7o=o("LongformerModel"),$7o=o(" (Longformer model)"),k7o=l(),r_=a("li"),Ile=a("strong"),S7o=o("luke"),R7o=o(" \u2014 "),NN=a("a"),P7o=o("LukeModel"),B7o=o(" (LUKE model)"),I7o=l(),t_=a("li"),Nle=a("strong"),N7o=o("lxmert"),q7o=o(" \u2014 "),qN=a("a"),j7o=o("LxmertModel"),D7o=o(" (LXMERT model)"),G7o=l(),a_=a("li"),qle=a("strong"),O7o=o("m2m_100"),V7o=o(" \u2014 "),jN=a("a"),X7o=o("M2M100Model"),z7o=o(" (M2M100 model)"),W7o=l(),n_=a("li"),jle=a("strong"),Q7o=o("marian"),H7o=o(" \u2014 "),DN=a("a"),U7o=o("MarianModel"),J7o=o(" (Marian model)"),Y7o=l(),s_=a("li"),Dle=a("strong"),K7o=o("maskformer"),Z7o=o(" \u2014 "),GN=a("a"),ebo=o("MaskFormerModel"),obo=o(" (MaskFormer model)"),rbo=l(),l_=a("li"),Gle=a("strong"),tbo=o("mbart"),abo=o(" \u2014 "),ON=a("a"),nbo=o("MBartModel"),sbo=o(" (mBART model)"),lbo=l(),i_=a("li"),Ole=a("strong"),ibo=o("megatron-bert"),dbo=o(" \u2014 "),VN=a("a"),cbo=o("MegatronBertModel"),fbo=o(" (MegatronBert model)"),mbo=l(),d_=a("li"),Vle=a("strong"),gbo=o("mobilebert"),hbo=o(" \u2014 "),XN=a("a"),pbo=o("MobileBertModel"),_bo=o(" (MobileBERT model)"),ubo=l(),c_=a("li"),Xle=a("strong"),bbo=o("mpnet"),vbo=o(" \u2014 "),zN=a("a"),Fbo=o("MPNetModel"),Tbo=o(" (MPNet model)"),Mbo=l(),f_=a("li"),zle=a("strong"),Ebo=o("mt5"),Cbo=o(" \u2014 "),WN=a("a"),wbo=o("MT5Model"),Abo=o(" (mT5 model)"),ybo=l(),m_=a("li"),Wle=a("strong"),Lbo=o("nystromformer"),xbo=o(" \u2014 "),QN=a("a"),$bo=o("NystromformerModel"),kbo=o(" (Nystromformer model)"),Sbo=l(),g_=a("li"),Qle=a("strong"),Rbo=o("openai-gpt"),Pbo=o(" \u2014 "),HN=a("a"),Bbo=o("OpenAIGPTModel"),Ibo=o(" (OpenAI GPT model)"),Nbo=l(),h_=a("li"),Hle=a("strong"),qbo=o("opt"),jbo=o(" \u2014 "),UN=a("a"),Dbo=o("OPTModel"),Gbo=o(" (OPT model)"),Obo=l(),p_=a("li"),Ule=a("strong"),Vbo=o("pegasus"),Xbo=o(" \u2014 "),JN=a("a"),zbo=o("PegasusModel"),Wbo=o(" (Pegasus model)"),Qbo=l(),__=a("li"),Jle=a("strong"),Hbo=o("perceiver"),Ubo=o(" \u2014 "),YN=a("a"),Jbo=o("PerceiverModel"),Ybo=o(" (Perceiver model)"),Kbo=l(),u_=a("li"),Yle=a("strong"),Zbo=o("plbart"),e2o=o(" \u2014 "),KN=a("a"),o2o=o("PLBartModel"),r2o=o(" (PLBart model)"),t2o=l(),b_=a("li"),Kle=a("strong"),a2o=o("poolformer"),n2o=o(" \u2014 "),ZN=a("a"),s2o=o("PoolFormerModel"),l2o=o(" (PoolFormer model)"),i2o=l(),v_=a("li"),Zle=a("strong"),d2o=o("prophetnet"),c2o=o(" \u2014 "),eq=a("a"),f2o=o("ProphetNetModel"),m2o=o(" (ProphetNet model)"),g2o=l(),F_=a("li"),eie=a("strong"),h2o=o("qdqbert"),p2o=o(" \u2014 "),oq=a("a"),_2o=o("QDQBertModel"),u2o=o(" (QDQBert model)"),b2o=l(),T_=a("li"),oie=a("strong"),v2o=o("reformer"),F2o=o(" \u2014 "),rq=a("a"),T2o=o("ReformerModel"),M2o=o(" (Reformer model)"),E2o=l(),M_=a("li"),rie=a("strong"),C2o=o("regnet"),w2o=o(" \u2014 "),tq=a("a"),A2o=o("RegNetModel"),y2o=o(" (RegNet model)"),L2o=l(),E_=a("li"),tie=a("strong"),x2o=o("rembert"),$2o=o(" \u2014 "),aq=a("a"),k2o=o("RemBertModel"),S2o=o(" (RemBERT model)"),R2o=l(),C_=a("li"),aie=a("strong"),P2o=o("resnet"),B2o=o(" \u2014 "),nq=a("a"),I2o=o("ResNetModel"),N2o=o(" (ResNet model)"),q2o=l(),w_=a("li"),nie=a("strong"),j2o=o("retribert"),D2o=o(" \u2014 "),sq=a("a"),G2o=o("RetriBertModel"),O2o=o(" (RetriBERT model)"),V2o=l(),A_=a("li"),sie=a("strong"),X2o=o("roberta"),z2o=o(" \u2014 "),lq=a("a"),W2o=o("RobertaModel"),Q2o=o(" (RoBERTa model)"),H2o=l(),y_=a("li"),lie=a("strong"),U2o=o("roformer"),J2o=o(" \u2014 "),iq=a("a"),Y2o=o("RoFormerModel"),K2o=o(" (RoFormer model)"),Z2o=l(),L_=a("li"),iie=a("strong"),evo=o("segformer"),ovo=o(" \u2014 "),dq=a("a"),rvo=o("SegformerModel"),tvo=o(" (SegFormer model)"),avo=l(),x_=a("li"),die=a("strong"),nvo=o("sew"),svo=o(" \u2014 "),cq=a("a"),lvo=o("SEWModel"),ivo=o(" (SEW model)"),dvo=l(),$_=a("li"),cie=a("strong"),cvo=o("sew-d"),fvo=o(" \u2014 "),fq=a("a"),mvo=o("SEWDModel"),gvo=o(" (SEW-D model)"),hvo=l(),k_=a("li"),fie=a("strong"),pvo=o("speech_to_text"),_vo=o(" \u2014 "),mq=a("a"),uvo=o("Speech2TextModel"),bvo=o(" (Speech2Text model)"),vvo=l(),S_=a("li"),mie=a("strong"),Fvo=o("splinter"),Tvo=o(" \u2014 "),gq=a("a"),Mvo=o("SplinterModel"),Evo=o(" (Splinter model)"),Cvo=l(),R_=a("li"),gie=a("strong"),wvo=o("squeezebert"),Avo=o(" \u2014 "),hq=a("a"),yvo=o("SqueezeBertModel"),Lvo=o(" (SqueezeBERT model)"),xvo=l(),P_=a("li"),hie=a("strong"),$vo=o("swin"),kvo=o(" \u2014 "),pq=a("a"),Svo=o("SwinModel"),Rvo=o(" (Swin model)"),Pvo=l(),B_=a("li"),pie=a("strong"),Bvo=o("t5"),Ivo=o(" \u2014 "),_q=a("a"),Nvo=o("T5Model"),qvo=o(" (T5 model)"),jvo=l(),I_=a("li"),_ie=a("strong"),Dvo=o("tapas"),Gvo=o(" \u2014 "),uq=a("a"),Ovo=o("TapasModel"),Vvo=o(" (TAPAS model)"),Xvo=l(),N_=a("li"),uie=a("strong"),zvo=o("trajectory_transformer"),Wvo=o(" \u2014 "),bq=a("a"),Qvo=o("TrajectoryTransformerModel"),Hvo=o(" (Trajectory Transformer model)"),Uvo=l(),q_=a("li"),bie=a("strong"),Jvo=o("transfo-xl"),Yvo=o(" \u2014 "),vq=a("a"),Kvo=o("TransfoXLModel"),Zvo=o(" (Transformer-XL model)"),eFo=l(),j_=a("li"),vie=a("strong"),oFo=o("unispeech"),rFo=o(" \u2014 "),Fq=a("a"),tFo=o("UniSpeechModel"),aFo=o(" (UniSpeech model)"),nFo=l(),D_=a("li"),Fie=a("strong"),sFo=o("unispeech-sat"),lFo=o(" \u2014 "),Tq=a("a"),iFo=o("UniSpeechSatModel"),dFo=o(" (UniSpeechSat model)"),cFo=l(),G_=a("li"),Tie=a("strong"),fFo=o("van"),mFo=o(" \u2014 "),Mq=a("a"),gFo=o("VanModel"),hFo=o(" (VAN model)"),pFo=l(),O_=a("li"),Mie=a("strong"),_Fo=o("vilt"),uFo=o(" \u2014 "),Eq=a("a"),bFo=o("ViltModel"),vFo=o(" (ViLT model)"),FFo=l(),V_=a("li"),Eie=a("strong"),TFo=o("vision-text-dual-encoder"),MFo=o(" \u2014 "),Cq=a("a"),EFo=o("VisionTextDualEncoderModel"),CFo=o(" (VisionTextDualEncoder model)"),wFo=l(),X_=a("li"),Cie=a("strong"),AFo=o("visual_bert"),yFo=o(" \u2014 "),wq=a("a"),LFo=o("VisualBertModel"),xFo=o(" (VisualBert model)"),$Fo=l(),z_=a("li"),wie=a("strong"),kFo=o("vit"),SFo=o(" \u2014 "),Aq=a("a"),RFo=o("ViTModel"),PFo=o(" (ViT model)"),BFo=l(),W_=a("li"),Aie=a("strong"),IFo=o("vit_mae"),NFo=o(" \u2014 "),yq=a("a"),qFo=o("ViTMAEModel"),jFo=o(" (ViTMAE model)"),DFo=l(),Q_=a("li"),yie=a("strong"),GFo=o("wav2vec2"),OFo=o(" \u2014 "),Lq=a("a"),VFo=o("Wav2Vec2Model"),XFo=o(" (Wav2Vec2 model)"),zFo=l(),H_=a("li"),Lie=a("strong"),WFo=o("wav2vec2-conformer"),QFo=o(" \u2014 "),xq=a("a"),HFo=o("Wav2Vec2ConformerModel"),UFo=o(" (Wav2Vec2-Conformer model)"),JFo=l(),U_=a("li"),xie=a("strong"),YFo=o("wavlm"),KFo=o(" \u2014 "),$q=a("a"),ZFo=o("WavLMModel"),eTo=o(" (WavLM model)"),oTo=l(),J_=a("li"),$ie=a("strong"),rTo=o("xglm"),tTo=o(" \u2014 "),kq=a("a"),aTo=o("XGLMModel"),nTo=o(" (XGLM model)"),sTo=l(),Y_=a("li"),kie=a("strong"),lTo=o("xlm"),iTo=o(" \u2014 "),Sq=a("a"),dTo=o("XLMModel"),cTo=o(" (XLM model)"),fTo=l(),K_=a("li"),Sie=a("strong"),mTo=o("xlm-prophetnet"),gTo=o(" \u2014 "),Rq=a("a"),hTo=o("XLMProphetNetModel"),pTo=o(" (XLMProphetNet model)"),_To=l(),Z_=a("li"),Rie=a("strong"),uTo=o("xlm-roberta"),bTo=o(" \u2014 "),Pq=a("a"),vTo=o("XLMRobertaModel"),FTo=o(" (XLM-RoBERTa model)"),TTo=l(),eu=a("li"),Pie=a("strong"),MTo=o("xlm-roberta-xl"),ETo=o(" \u2014 "),Bq=a("a"),CTo=o("XLMRobertaXLModel"),wTo=o(" (XLM-RoBERTa-XL model)"),ATo=l(),ou=a("li"),Bie=a("strong"),yTo=o("xlnet"),LTo=o(" \u2014 "),Iq=a("a"),xTo=o("XLNetModel"),$To=o(" (XLNet model)"),kTo=l(),ru=a("li"),Iie=a("strong"),STo=o("yolos"),RTo=o(" \u2014 "),Nq=a("a"),PTo=o("YolosModel"),BTo=o(" (YOLOS model)"),ITo=l(),tu=a("li"),Nie=a("strong"),NTo=o("yoso"),qTo=o(" \u2014 "),qq=a("a"),jTo=o("YosoModel"),DTo=o(" (YOSO model)"),GTo=l(),au=a("p"),OTo=o("The model is set in evaluation mode by default using "),qie=a("code"),VTo=o("model.eval()"),XTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),zTo=o("model.train()"),WTo=l(),F(nu.$$.fragment),Uqe=l(),Li=a("h2"),su=a("a"),Die=a("span"),F(gy.$$.fragment),QTo=l(),Gie=a("span"),HTo=o("AutoModelForPreTraining"),Jqe=l(),xo=a("div"),F(hy.$$.fragment),UTo=l(),xi=a("p"),JTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=a("a"),YTo=o("from_pretrained()"),KTo=o(" class method or the "),Dq=a("a"),ZTo=o("from_config()"),eMo=o(` class
method.`),oMo=l(),py=a("p"),rMo=o("This class cannot be instantiated directly using "),Oie=a("code"),tMo=o("__init__()"),aMo=o(" (throws an error)."),nMo=l(),at=a("div"),F(_y.$$.fragment),sMo=l(),Vie=a("p"),lMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iMo=l(),$i=a("p"),dMo=o(`Note:
Loading a model from its configuration file does `),Xie=a("strong"),cMo=o("not"),fMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),mMo=o("from_pretrained()"),gMo=o(" to load the model weights."),hMo=l(),F(lu.$$.fragment),pMo=l(),Ye=a("div"),F(uy.$$.fragment),_Mo=l(),zie=a("p"),uMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bMo=l(),xa=a("p"),vMo=o("The model class to instantiate is selected based on the "),Wie=a("code"),FMo=o("model_type"),TMo=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),MMo=o("pretrained_model_name_or_path"),EMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=a("code"),CMo=o("pretrained_model_name_or_path"),wMo=o(":"),AMo=l(),G=a("ul"),iu=a("li"),Uie=a("strong"),yMo=o("albert"),LMo=o(" \u2014 "),Oq=a("a"),xMo=o("AlbertForPreTraining"),$Mo=o(" (ALBERT model)"),kMo=l(),du=a("li"),Jie=a("strong"),SMo=o("bart"),RMo=o(" \u2014 "),Vq=a("a"),PMo=o("BartForConditionalGeneration"),BMo=o(" (BART model)"),IMo=l(),cu=a("li"),Yie=a("strong"),NMo=o("bert"),qMo=o(" \u2014 "),Xq=a("a"),jMo=o("BertForPreTraining"),DMo=o(" (BERT model)"),GMo=l(),fu=a("li"),Kie=a("strong"),OMo=o("big_bird"),VMo=o(" \u2014 "),zq=a("a"),XMo=o("BigBirdForPreTraining"),zMo=o(" (BigBird model)"),WMo=l(),mu=a("li"),Zie=a("strong"),QMo=o("bloom"),HMo=o(" \u2014 "),Wq=a("a"),UMo=o("BloomForCausalLM"),JMo=o(" (BLOOM model)"),YMo=l(),gu=a("li"),ede=a("strong"),KMo=o("camembert"),ZMo=o(" \u2014 "),Qq=a("a"),eEo=o("CamembertForMaskedLM"),oEo=o(" (CamemBERT model)"),rEo=l(),hu=a("li"),ode=a("strong"),tEo=o("ctrl"),aEo=o(" \u2014 "),Hq=a("a"),nEo=o("CTRLLMHeadModel"),sEo=o(" (CTRL model)"),lEo=l(),pu=a("li"),rde=a("strong"),iEo=o("data2vec-text"),dEo=o(" \u2014 "),Uq=a("a"),cEo=o("Data2VecTextForMaskedLM"),fEo=o(" (Data2VecText model)"),mEo=l(),_u=a("li"),tde=a("strong"),gEo=o("deberta"),hEo=o(" \u2014 "),Jq=a("a"),pEo=o("DebertaForMaskedLM"),_Eo=o(" (DeBERTa model)"),uEo=l(),uu=a("li"),ade=a("strong"),bEo=o("deberta-v2"),vEo=o(" \u2014 "),Yq=a("a"),FEo=o("DebertaV2ForMaskedLM"),TEo=o(" (DeBERTa-v2 model)"),MEo=l(),bu=a("li"),nde=a("strong"),EEo=o("distilbert"),CEo=o(" \u2014 "),Kq=a("a"),wEo=o("DistilBertForMaskedLM"),AEo=o(" (DistilBERT model)"),yEo=l(),vu=a("li"),sde=a("strong"),LEo=o("electra"),xEo=o(" \u2014 "),Zq=a("a"),$Eo=o("ElectraForPreTraining"),kEo=o(" (ELECTRA model)"),SEo=l(),Fu=a("li"),lde=a("strong"),REo=o("flaubert"),PEo=o(" \u2014 "),ej=a("a"),BEo=o("FlaubertWithLMHeadModel"),IEo=o(" (FlauBERT model)"),NEo=l(),Tu=a("li"),ide=a("strong"),qEo=o("flava"),jEo=o(" \u2014 "),oj=a("a"),DEo=o("FlavaForPreTraining"),GEo=o(" (Flava model)"),OEo=l(),Mu=a("li"),dde=a("strong"),VEo=o("fnet"),XEo=o(" \u2014 "),rj=a("a"),zEo=o("FNetForPreTraining"),WEo=o(" (FNet model)"),QEo=l(),Eu=a("li"),cde=a("strong"),HEo=o("fsmt"),UEo=o(" \u2014 "),tj=a("a"),JEo=o("FSMTForConditionalGeneration"),YEo=o(" (FairSeq Machine-Translation model)"),KEo=l(),Cu=a("li"),fde=a("strong"),ZEo=o("funnel"),eCo=o(" \u2014 "),aj=a("a"),oCo=o("FunnelForPreTraining"),rCo=o(" (Funnel Transformer model)"),tCo=l(),wu=a("li"),mde=a("strong"),aCo=o("gpt2"),nCo=o(" \u2014 "),nj=a("a"),sCo=o("GPT2LMHeadModel"),lCo=o(" (OpenAI GPT-2 model)"),iCo=l(),Au=a("li"),gde=a("strong"),dCo=o("ibert"),cCo=o(" \u2014 "),sj=a("a"),fCo=o("IBertForMaskedLM"),mCo=o(" (I-BERT model)"),gCo=l(),yu=a("li"),hde=a("strong"),hCo=o("layoutlm"),pCo=o(" \u2014 "),lj=a("a"),_Co=o("LayoutLMForMaskedLM"),uCo=o(" (LayoutLM model)"),bCo=l(),Lu=a("li"),pde=a("strong"),vCo=o("longformer"),FCo=o(" \u2014 "),ij=a("a"),TCo=o("LongformerForMaskedLM"),MCo=o(" (Longformer model)"),ECo=l(),xu=a("li"),_de=a("strong"),CCo=o("lxmert"),wCo=o(" \u2014 "),dj=a("a"),ACo=o("LxmertForPreTraining"),yCo=o(" (LXMERT model)"),LCo=l(),$u=a("li"),ude=a("strong"),xCo=o("megatron-bert"),$Co=o(" \u2014 "),cj=a("a"),kCo=o("MegatronBertForPreTraining"),SCo=o(" (MegatronBert model)"),RCo=l(),ku=a("li"),bde=a("strong"),PCo=o("mobilebert"),BCo=o(" \u2014 "),fj=a("a"),ICo=o("MobileBertForPreTraining"),NCo=o(" (MobileBERT model)"),qCo=l(),Su=a("li"),vde=a("strong"),jCo=o("mpnet"),DCo=o(" \u2014 "),mj=a("a"),GCo=o("MPNetForMaskedLM"),OCo=o(" (MPNet model)"),VCo=l(),Ru=a("li"),Fde=a("strong"),XCo=o("openai-gpt"),zCo=o(" \u2014 "),gj=a("a"),WCo=o("OpenAIGPTLMHeadModel"),QCo=o(" (OpenAI GPT model)"),HCo=l(),Pu=a("li"),Tde=a("strong"),UCo=o("retribert"),JCo=o(" \u2014 "),hj=a("a"),YCo=o("RetriBertModel"),KCo=o(" (RetriBERT model)"),ZCo=l(),Bu=a("li"),Mde=a("strong"),e5o=o("roberta"),o5o=o(" \u2014 "),pj=a("a"),r5o=o("RobertaForMaskedLM"),t5o=o(" (RoBERTa model)"),a5o=l(),Iu=a("li"),Ede=a("strong"),n5o=o("splinter"),s5o=o(" \u2014 "),_j=a("a"),l5o=o("SplinterForPreTraining"),i5o=o(" (Splinter model)"),d5o=l(),Nu=a("li"),Cde=a("strong"),c5o=o("squeezebert"),f5o=o(" \u2014 "),uj=a("a"),m5o=o("SqueezeBertForMaskedLM"),g5o=o(" (SqueezeBERT model)"),h5o=l(),qu=a("li"),wde=a("strong"),p5o=o("t5"),_5o=o(" \u2014 "),bj=a("a"),u5o=o("T5ForConditionalGeneration"),b5o=o(" (T5 model)"),v5o=l(),ju=a("li"),Ade=a("strong"),F5o=o("tapas"),T5o=o(" \u2014 "),vj=a("a"),M5o=o("TapasForMaskedLM"),E5o=o(" (TAPAS model)"),C5o=l(),Du=a("li"),yde=a("strong"),w5o=o("transfo-xl"),A5o=o(" \u2014 "),Fj=a("a"),y5o=o("TransfoXLLMHeadModel"),L5o=o(" (Transformer-XL model)"),x5o=l(),Gu=a("li"),Lde=a("strong"),$5o=o("unispeech"),k5o=o(" \u2014 "),Tj=a("a"),S5o=o("UniSpeechForPreTraining"),R5o=o(" (UniSpeech model)"),P5o=l(),Ou=a("li"),xde=a("strong"),B5o=o("unispeech-sat"),I5o=o(" \u2014 "),Mj=a("a"),N5o=o("UniSpeechSatForPreTraining"),q5o=o(" (UniSpeechSat model)"),j5o=l(),Vu=a("li"),$de=a("strong"),D5o=o("visual_bert"),G5o=o(" \u2014 "),Ej=a("a"),O5o=o("VisualBertForPreTraining"),V5o=o(" (VisualBert model)"),X5o=l(),Xu=a("li"),kde=a("strong"),z5o=o("vit_mae"),W5o=o(" \u2014 "),Cj=a("a"),Q5o=o("ViTMAEForPreTraining"),H5o=o(" (ViTMAE model)"),U5o=l(),zu=a("li"),Sde=a("strong"),J5o=o("wav2vec2"),Y5o=o(" \u2014 "),wj=a("a"),K5o=o("Wav2Vec2ForPreTraining"),Z5o=o(" (Wav2Vec2 model)"),e3o=l(),Wu=a("li"),Rde=a("strong"),o3o=o("wav2vec2-conformer"),r3o=o(" \u2014 "),Aj=a("a"),t3o=o("Wav2Vec2ConformerForPreTraining"),a3o=o(" (Wav2Vec2-Conformer model)"),n3o=l(),Qu=a("li"),Pde=a("strong"),s3o=o("xlm"),l3o=o(" \u2014 "),yj=a("a"),i3o=o("XLMWithLMHeadModel"),d3o=o(" (XLM model)"),c3o=l(),Hu=a("li"),Bde=a("strong"),f3o=o("xlm-roberta"),m3o=o(" \u2014 "),Lj=a("a"),g3o=o("XLMRobertaForMaskedLM"),h3o=o(" (XLM-RoBERTa model)"),p3o=l(),Uu=a("li"),Ide=a("strong"),_3o=o("xlm-roberta-xl"),u3o=o(" \u2014 "),xj=a("a"),b3o=o("XLMRobertaXLForMaskedLM"),v3o=o(" (XLM-RoBERTa-XL model)"),F3o=l(),Ju=a("li"),Nde=a("strong"),T3o=o("xlnet"),M3o=o(" \u2014 "),$j=a("a"),E3o=o("XLNetLMHeadModel"),C3o=o(" (XLNet model)"),w3o=l(),Yu=a("p"),A3o=o("The model is set in evaluation mode by default using "),qde=a("code"),y3o=o("model.eval()"),L3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=a("code"),x3o=o("model.train()"),$3o=l(),F(Ku.$$.fragment),Yqe=l(),ki=a("h2"),Zu=a("a"),Dde=a("span"),F(by.$$.fragment),k3o=l(),Gde=a("span"),S3o=o("AutoModelForCausalLM"),Kqe=l(),$o=a("div"),F(vy.$$.fragment),R3o=l(),Si=a("p"),P3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=a("a"),B3o=o("from_pretrained()"),I3o=o(" class method or the "),Sj=a("a"),N3o=o("from_config()"),q3o=o(` class
method.`),j3o=l(),Fy=a("p"),D3o=o("This class cannot be instantiated directly using "),Ode=a("code"),G3o=o("__init__()"),O3o=o(" (throws an error)."),V3o=l(),nt=a("div"),F(Ty.$$.fragment),X3o=l(),Vde=a("p"),z3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W3o=l(),Ri=a("p"),Q3o=o(`Note:
Loading a model from its configuration file does `),Xde=a("strong"),H3o=o("not"),U3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),J3o=o("from_pretrained()"),Y3o=o(" to load the model weights."),K3o=l(),F(e4.$$.fragment),Z3o=l(),Ke=a("div"),F(My.$$.fragment),e0o=l(),zde=a("p"),o0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r0o=l(),$a=a("p"),t0o=o("The model class to instantiate is selected based on the "),Wde=a("code"),a0o=o("model_type"),n0o=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),s0o=o("pretrained_model_name_or_path"),l0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),i0o=o("pretrained_model_name_or_path"),d0o=o(":"),c0o=l(),z=a("ul"),o4=a("li"),Ude=a("strong"),f0o=o("bart"),m0o=o(" \u2014 "),Pj=a("a"),g0o=o("BartForCausalLM"),h0o=o(" (BART model)"),p0o=l(),r4=a("li"),Jde=a("strong"),_0o=o("bert"),u0o=o(" \u2014 "),Bj=a("a"),b0o=o("BertLMHeadModel"),v0o=o(" (BERT model)"),F0o=l(),t4=a("li"),Yde=a("strong"),T0o=o("bert-generation"),M0o=o(" \u2014 "),Ij=a("a"),E0o=o("BertGenerationDecoder"),C0o=o(" (Bert Generation model)"),w0o=l(),a4=a("li"),Kde=a("strong"),A0o=o("big_bird"),y0o=o(" \u2014 "),Nj=a("a"),L0o=o("BigBirdForCausalLM"),x0o=o(" (BigBird model)"),$0o=l(),n4=a("li"),Zde=a("strong"),k0o=o("bigbird_pegasus"),S0o=o(" \u2014 "),qj=a("a"),R0o=o("BigBirdPegasusForCausalLM"),P0o=o(" (BigBirdPegasus model)"),B0o=l(),s4=a("li"),ece=a("strong"),I0o=o("blenderbot"),N0o=o(" \u2014 "),jj=a("a"),q0o=o("BlenderbotForCausalLM"),j0o=o(" (Blenderbot model)"),D0o=l(),l4=a("li"),oce=a("strong"),G0o=o("blenderbot-small"),O0o=o(" \u2014 "),Dj=a("a"),V0o=o("BlenderbotSmallForCausalLM"),X0o=o(" (BlenderbotSmall model)"),z0o=l(),i4=a("li"),rce=a("strong"),W0o=o("bloom"),Q0o=o(" \u2014 "),Gj=a("a"),H0o=o("BloomForCausalLM"),U0o=o(" (BLOOM model)"),J0o=l(),d4=a("li"),tce=a("strong"),Y0o=o("camembert"),K0o=o(" \u2014 "),Oj=a("a"),Z0o=o("CamembertForCausalLM"),ewo=o(" (CamemBERT model)"),owo=l(),c4=a("li"),ace=a("strong"),rwo=o("ctrl"),two=o(" \u2014 "),Vj=a("a"),awo=o("CTRLLMHeadModel"),nwo=o(" (CTRL model)"),swo=l(),f4=a("li"),nce=a("strong"),lwo=o("data2vec-text"),iwo=o(" \u2014 "),Xj=a("a"),dwo=o("Data2VecTextForCausalLM"),cwo=o(" (Data2VecText model)"),fwo=l(),m4=a("li"),sce=a("strong"),mwo=o("electra"),gwo=o(" \u2014 "),zj=a("a"),hwo=o("ElectraForCausalLM"),pwo=o(" (ELECTRA model)"),_wo=l(),g4=a("li"),lce=a("strong"),uwo=o("gpt2"),bwo=o(" \u2014 "),Wj=a("a"),vwo=o("GPT2LMHeadModel"),Fwo=o(" (OpenAI GPT-2 model)"),Two=l(),h4=a("li"),ice=a("strong"),Mwo=o("gpt_neo"),Ewo=o(" \u2014 "),Qj=a("a"),Cwo=o("GPTNeoForCausalLM"),wwo=o(" (GPT Neo model)"),Awo=l(),p4=a("li"),dce=a("strong"),ywo=o("gpt_neox"),Lwo=o(" \u2014 "),Hj=a("a"),xwo=o("GPTNeoXForCausalLM"),$wo=o(" (GPT NeoX model)"),kwo=l(),_4=a("li"),cce=a("strong"),Swo=o("gptj"),Rwo=o(" \u2014 "),Uj=a("a"),Pwo=o("GPTJForCausalLM"),Bwo=o(" (GPT-J model)"),Iwo=l(),u4=a("li"),fce=a("strong"),Nwo=o("marian"),qwo=o(" \u2014 "),Jj=a("a"),jwo=o("MarianForCausalLM"),Dwo=o(" (Marian model)"),Gwo=l(),b4=a("li"),mce=a("strong"),Owo=o("mbart"),Vwo=o(" \u2014 "),Yj=a("a"),Xwo=o("MBartForCausalLM"),zwo=o(" (mBART model)"),Wwo=l(),v4=a("li"),gce=a("strong"),Qwo=o("megatron-bert"),Hwo=o(" \u2014 "),Kj=a("a"),Uwo=o("MegatronBertForCausalLM"),Jwo=o(" (MegatronBert model)"),Ywo=l(),F4=a("li"),hce=a("strong"),Kwo=o("openai-gpt"),Zwo=o(" \u2014 "),Zj=a("a"),e6o=o("OpenAIGPTLMHeadModel"),o6o=o(" (OpenAI GPT model)"),r6o=l(),T4=a("li"),pce=a("strong"),t6o=o("opt"),a6o=o(" \u2014 "),eD=a("a"),n6o=o("OPTForCausalLM"),s6o=o(" (OPT model)"),l6o=l(),M4=a("li"),_ce=a("strong"),i6o=o("pegasus"),d6o=o(" \u2014 "),oD=a("a"),c6o=o("PegasusForCausalLM"),f6o=o(" (Pegasus model)"),m6o=l(),E4=a("li"),uce=a("strong"),g6o=o("plbart"),h6o=o(" \u2014 "),rD=a("a"),p6o=o("PLBartForCausalLM"),_6o=o(" (PLBart model)"),u6o=l(),C4=a("li"),bce=a("strong"),b6o=o("prophetnet"),v6o=o(" \u2014 "),tD=a("a"),F6o=o("ProphetNetForCausalLM"),T6o=o(" (ProphetNet model)"),M6o=l(),w4=a("li"),vce=a("strong"),E6o=o("qdqbert"),C6o=o(" \u2014 "),aD=a("a"),w6o=o("QDQBertLMHeadModel"),A6o=o(" (QDQBert model)"),y6o=l(),A4=a("li"),Fce=a("strong"),L6o=o("reformer"),x6o=o(" \u2014 "),nD=a("a"),$6o=o("ReformerModelWithLMHead"),k6o=o(" (Reformer model)"),S6o=l(),y4=a("li"),Tce=a("strong"),R6o=o("rembert"),P6o=o(" \u2014 "),sD=a("a"),B6o=o("RemBertForCausalLM"),I6o=o(" (RemBERT model)"),N6o=l(),L4=a("li"),Mce=a("strong"),q6o=o("roberta"),j6o=o(" \u2014 "),lD=a("a"),D6o=o("RobertaForCausalLM"),G6o=o(" (RoBERTa model)"),O6o=l(),x4=a("li"),Ece=a("strong"),V6o=o("roformer"),X6o=o(" \u2014 "),iD=a("a"),z6o=o("RoFormerForCausalLM"),W6o=o(" (RoFormer model)"),Q6o=l(),$4=a("li"),Cce=a("strong"),H6o=o("speech_to_text_2"),U6o=o(" \u2014 "),dD=a("a"),J6o=o("Speech2Text2ForCausalLM"),Y6o=o(" (Speech2Text2 model)"),K6o=l(),k4=a("li"),wce=a("strong"),Z6o=o("transfo-xl"),eAo=o(" \u2014 "),cD=a("a"),oAo=o("TransfoXLLMHeadModel"),rAo=o(" (Transformer-XL model)"),tAo=l(),S4=a("li"),Ace=a("strong"),aAo=o("trocr"),nAo=o(" \u2014 "),fD=a("a"),sAo=o("TrOCRForCausalLM"),lAo=o(" (TrOCR model)"),iAo=l(),R4=a("li"),yce=a("strong"),dAo=o("xglm"),cAo=o(" \u2014 "),mD=a("a"),fAo=o("XGLMForCausalLM"),mAo=o(" (XGLM model)"),gAo=l(),P4=a("li"),Lce=a("strong"),hAo=o("xlm"),pAo=o(" \u2014 "),gD=a("a"),_Ao=o("XLMWithLMHeadModel"),uAo=o(" (XLM model)"),bAo=l(),B4=a("li"),xce=a("strong"),vAo=o("xlm-prophetnet"),FAo=o(" \u2014 "),hD=a("a"),TAo=o("XLMProphetNetForCausalLM"),MAo=o(" (XLMProphetNet model)"),EAo=l(),I4=a("li"),$ce=a("strong"),CAo=o("xlm-roberta"),wAo=o(" \u2014 "),pD=a("a"),AAo=o("XLMRobertaForCausalLM"),yAo=o(" (XLM-RoBERTa model)"),LAo=l(),N4=a("li"),kce=a("strong"),xAo=o("xlm-roberta-xl"),$Ao=o(" \u2014 "),_D=a("a"),kAo=o("XLMRobertaXLForCausalLM"),SAo=o(" (XLM-RoBERTa-XL model)"),RAo=l(),q4=a("li"),Sce=a("strong"),PAo=o("xlnet"),BAo=o(" \u2014 "),uD=a("a"),IAo=o("XLNetLMHeadModel"),NAo=o(" (XLNet model)"),qAo=l(),j4=a("p"),jAo=o("The model is set in evaluation mode by default using "),Rce=a("code"),DAo=o("model.eval()"),GAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),OAo=o("model.train()"),VAo=l(),F(D4.$$.fragment),Zqe=l(),Pi=a("h2"),G4=a("a"),Bce=a("span"),F(Ey.$$.fragment),XAo=l(),Ice=a("span"),zAo=o("AutoModelForMaskedLM"),eje=l(),ko=a("div"),F(Cy.$$.fragment),WAo=l(),Bi=a("p"),QAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bD=a("a"),HAo=o("from_pretrained()"),UAo=o(" class method or the "),vD=a("a"),JAo=o("from_config()"),YAo=o(` class
method.`),KAo=l(),wy=a("p"),ZAo=o("This class cannot be instantiated directly using "),Nce=a("code"),eyo=o("__init__()"),oyo=o(" (throws an error)."),ryo=l(),st=a("div"),F(Ay.$$.fragment),tyo=l(),qce=a("p"),ayo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nyo=l(),Ii=a("p"),syo=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),lyo=o("not"),iyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),dyo=o("from_pretrained()"),cyo=o(" to load the model weights."),fyo=l(),F(O4.$$.fragment),myo=l(),Ze=a("div"),F(yy.$$.fragment),gyo=l(),Dce=a("p"),hyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pyo=l(),ka=a("p"),_yo=o("The model class to instantiate is selected based on the "),Gce=a("code"),uyo=o("model_type"),byo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),vyo=o("pretrained_model_name_or_path"),Fyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),Tyo=o("pretrained_model_name_or_path"),Myo=o(":"),Eyo=l(),Q=a("ul"),V4=a("li"),Xce=a("strong"),Cyo=o("albert"),wyo=o(" \u2014 "),TD=a("a"),Ayo=o("AlbertForMaskedLM"),yyo=o(" (ALBERT model)"),Lyo=l(),X4=a("li"),zce=a("strong"),xyo=o("bart"),$yo=o(" \u2014 "),MD=a("a"),kyo=o("BartForConditionalGeneration"),Syo=o(" (BART model)"),Ryo=l(),z4=a("li"),Wce=a("strong"),Pyo=o("bert"),Byo=o(" \u2014 "),ED=a("a"),Iyo=o("BertForMaskedLM"),Nyo=o(" (BERT model)"),qyo=l(),W4=a("li"),Qce=a("strong"),jyo=o("big_bird"),Dyo=o(" \u2014 "),CD=a("a"),Gyo=o("BigBirdForMaskedLM"),Oyo=o(" (BigBird model)"),Vyo=l(),Q4=a("li"),Hce=a("strong"),Xyo=o("camembert"),zyo=o(" \u2014 "),wD=a("a"),Wyo=o("CamembertForMaskedLM"),Qyo=o(" (CamemBERT model)"),Hyo=l(),H4=a("li"),Uce=a("strong"),Uyo=o("convbert"),Jyo=o(" \u2014 "),AD=a("a"),Yyo=o("ConvBertForMaskedLM"),Kyo=o(" (ConvBERT model)"),Zyo=l(),U4=a("li"),Jce=a("strong"),eLo=o("data2vec-text"),oLo=o(" \u2014 "),yD=a("a"),rLo=o("Data2VecTextForMaskedLM"),tLo=o(" (Data2VecText model)"),aLo=l(),J4=a("li"),Yce=a("strong"),nLo=o("deberta"),sLo=o(" \u2014 "),LD=a("a"),lLo=o("DebertaForMaskedLM"),iLo=o(" (DeBERTa model)"),dLo=l(),Y4=a("li"),Kce=a("strong"),cLo=o("deberta-v2"),fLo=o(" \u2014 "),xD=a("a"),mLo=o("DebertaV2ForMaskedLM"),gLo=o(" (DeBERTa-v2 model)"),hLo=l(),K4=a("li"),Zce=a("strong"),pLo=o("distilbert"),_Lo=o(" \u2014 "),$D=a("a"),uLo=o("DistilBertForMaskedLM"),bLo=o(" (DistilBERT model)"),vLo=l(),Z4=a("li"),efe=a("strong"),FLo=o("electra"),TLo=o(" \u2014 "),kD=a("a"),MLo=o("ElectraForMaskedLM"),ELo=o(" (ELECTRA model)"),CLo=l(),e1=a("li"),ofe=a("strong"),wLo=o("flaubert"),ALo=o(" \u2014 "),SD=a("a"),yLo=o("FlaubertWithLMHeadModel"),LLo=o(" (FlauBERT model)"),xLo=l(),o1=a("li"),rfe=a("strong"),$Lo=o("fnet"),kLo=o(" \u2014 "),RD=a("a"),SLo=o("FNetForMaskedLM"),RLo=o(" (FNet model)"),PLo=l(),r1=a("li"),tfe=a("strong"),BLo=o("funnel"),ILo=o(" \u2014 "),PD=a("a"),NLo=o("FunnelForMaskedLM"),qLo=o(" (Funnel Transformer model)"),jLo=l(),t1=a("li"),afe=a("strong"),DLo=o("ibert"),GLo=o(" \u2014 "),BD=a("a"),OLo=o("IBertForMaskedLM"),VLo=o(" (I-BERT model)"),XLo=l(),a1=a("li"),nfe=a("strong"),zLo=o("layoutlm"),WLo=o(" \u2014 "),ID=a("a"),QLo=o("LayoutLMForMaskedLM"),HLo=o(" (LayoutLM model)"),ULo=l(),n1=a("li"),sfe=a("strong"),JLo=o("longformer"),YLo=o(" \u2014 "),ND=a("a"),KLo=o("LongformerForMaskedLM"),ZLo=o(" (Longformer model)"),e8o=l(),s1=a("li"),lfe=a("strong"),o8o=o("mbart"),r8o=o(" \u2014 "),qD=a("a"),t8o=o("MBartForConditionalGeneration"),a8o=o(" (mBART model)"),n8o=l(),l1=a("li"),ife=a("strong"),s8o=o("megatron-bert"),l8o=o(" \u2014 "),jD=a("a"),i8o=o("MegatronBertForMaskedLM"),d8o=o(" (MegatronBert model)"),c8o=l(),i1=a("li"),dfe=a("strong"),f8o=o("mobilebert"),m8o=o(" \u2014 "),DD=a("a"),g8o=o("MobileBertForMaskedLM"),h8o=o(" (MobileBERT model)"),p8o=l(),d1=a("li"),cfe=a("strong"),_8o=o("mpnet"),u8o=o(" \u2014 "),GD=a("a"),b8o=o("MPNetForMaskedLM"),v8o=o(" (MPNet model)"),F8o=l(),c1=a("li"),ffe=a("strong"),T8o=o("nystromformer"),M8o=o(" \u2014 "),OD=a("a"),E8o=o("NystromformerForMaskedLM"),C8o=o(" (Nystromformer model)"),w8o=l(),f1=a("li"),mfe=a("strong"),A8o=o("perceiver"),y8o=o(" \u2014 "),VD=a("a"),L8o=o("PerceiverForMaskedLM"),x8o=o(" (Perceiver model)"),$8o=l(),m1=a("li"),gfe=a("strong"),k8o=o("qdqbert"),S8o=o(" \u2014 "),XD=a("a"),R8o=o("QDQBertForMaskedLM"),P8o=o(" (QDQBert model)"),B8o=l(),g1=a("li"),hfe=a("strong"),I8o=o("reformer"),N8o=o(" \u2014 "),zD=a("a"),q8o=o("ReformerForMaskedLM"),j8o=o(" (Reformer model)"),D8o=l(),h1=a("li"),pfe=a("strong"),G8o=o("rembert"),O8o=o(" \u2014 "),WD=a("a"),V8o=o("RemBertForMaskedLM"),X8o=o(" (RemBERT model)"),z8o=l(),p1=a("li"),_fe=a("strong"),W8o=o("roberta"),Q8o=o(" \u2014 "),QD=a("a"),H8o=o("RobertaForMaskedLM"),U8o=o(" (RoBERTa model)"),J8o=l(),_1=a("li"),ufe=a("strong"),Y8o=o("roformer"),K8o=o(" \u2014 "),HD=a("a"),Z8o=o("RoFormerForMaskedLM"),e9o=o(" (RoFormer model)"),o9o=l(),u1=a("li"),bfe=a("strong"),r9o=o("squeezebert"),t9o=o(" \u2014 "),UD=a("a"),a9o=o("SqueezeBertForMaskedLM"),n9o=o(" (SqueezeBERT model)"),s9o=l(),b1=a("li"),vfe=a("strong"),l9o=o("tapas"),i9o=o(" \u2014 "),JD=a("a"),d9o=o("TapasForMaskedLM"),c9o=o(" (TAPAS model)"),f9o=l(),v1=a("li"),Ffe=a("strong"),m9o=o("wav2vec2"),g9o=o(" \u2014 "),Tfe=a("code"),h9o=o("Wav2Vec2ForMaskedLM"),p9o=o(" (Wav2Vec2 model)"),_9o=l(),F1=a("li"),Mfe=a("strong"),u9o=o("xlm"),b9o=o(" \u2014 "),YD=a("a"),v9o=o("XLMWithLMHeadModel"),F9o=o(" (XLM model)"),T9o=l(),T1=a("li"),Efe=a("strong"),M9o=o("xlm-roberta"),E9o=o(" \u2014 "),KD=a("a"),C9o=o("XLMRobertaForMaskedLM"),w9o=o(" (XLM-RoBERTa model)"),A9o=l(),M1=a("li"),Cfe=a("strong"),y9o=o("xlm-roberta-xl"),L9o=o(" \u2014 "),ZD=a("a"),x9o=o("XLMRobertaXLForMaskedLM"),$9o=o(" (XLM-RoBERTa-XL model)"),k9o=l(),E1=a("li"),wfe=a("strong"),S9o=o("yoso"),R9o=o(" \u2014 "),eG=a("a"),P9o=o("YosoForMaskedLM"),B9o=o(" (YOSO model)"),I9o=l(),C1=a("p"),N9o=o("The model is set in evaluation mode by default using "),Afe=a("code"),q9o=o("model.eval()"),j9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),D9o=o("model.train()"),G9o=l(),F(w1.$$.fragment),oje=l(),Ni=a("h2"),A1=a("a"),Lfe=a("span"),F(Ly.$$.fragment),O9o=l(),xfe=a("span"),V9o=o("AutoModelForSeq2SeqLM"),rje=l(),So=a("div"),F(xy.$$.fragment),X9o=l(),qi=a("p"),z9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=a("a"),W9o=o("from_pretrained()"),Q9o=o(" class method or the "),rG=a("a"),H9o=o("from_config()"),U9o=o(` class
method.`),J9o=l(),$y=a("p"),Y9o=o("This class cannot be instantiated directly using "),$fe=a("code"),K9o=o("__init__()"),Z9o=o(" (throws an error)."),exo=l(),lt=a("div"),F(ky.$$.fragment),oxo=l(),kfe=a("p"),rxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),txo=l(),ji=a("p"),axo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),nxo=o("not"),sxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),lxo=o("from_pretrained()"),ixo=o(" to load the model weights."),dxo=l(),F(y1.$$.fragment),cxo=l(),eo=a("div"),F(Sy.$$.fragment),fxo=l(),Rfe=a("p"),mxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gxo=l(),Sa=a("p"),hxo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),pxo=o("model_type"),_xo=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),uxo=o("pretrained_model_name_or_path"),bxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),vxo=o("pretrained_model_name_or_path"),Fxo=o(":"),Txo=l(),_e=a("ul"),L1=a("li"),Nfe=a("strong"),Mxo=o("bart"),Exo=o(" \u2014 "),aG=a("a"),Cxo=o("BartForConditionalGeneration"),wxo=o(" (BART model)"),Axo=l(),x1=a("li"),qfe=a("strong"),yxo=o("bigbird_pegasus"),Lxo=o(" \u2014 "),nG=a("a"),xxo=o("BigBirdPegasusForConditionalGeneration"),$xo=o(" (BigBirdPegasus model)"),kxo=l(),$1=a("li"),jfe=a("strong"),Sxo=o("blenderbot"),Rxo=o(" \u2014 "),sG=a("a"),Pxo=o("BlenderbotForConditionalGeneration"),Bxo=o(" (Blenderbot model)"),Ixo=l(),k1=a("li"),Dfe=a("strong"),Nxo=o("blenderbot-small"),qxo=o(" \u2014 "),lG=a("a"),jxo=o("BlenderbotSmallForConditionalGeneration"),Dxo=o(" (BlenderbotSmall model)"),Gxo=l(),S1=a("li"),Gfe=a("strong"),Oxo=o("encoder-decoder"),Vxo=o(" \u2014 "),iG=a("a"),Xxo=o("EncoderDecoderModel"),zxo=o(" (Encoder decoder model)"),Wxo=l(),R1=a("li"),Ofe=a("strong"),Qxo=o("fsmt"),Hxo=o(" \u2014 "),dG=a("a"),Uxo=o("FSMTForConditionalGeneration"),Jxo=o(" (FairSeq Machine-Translation model)"),Yxo=l(),P1=a("li"),Vfe=a("strong"),Kxo=o("led"),Zxo=o(" \u2014 "),cG=a("a"),e$o=o("LEDForConditionalGeneration"),o$o=o(" (LED model)"),r$o=l(),B1=a("li"),Xfe=a("strong"),t$o=o("m2m_100"),a$o=o(" \u2014 "),fG=a("a"),n$o=o("M2M100ForConditionalGeneration"),s$o=o(" (M2M100 model)"),l$o=l(),I1=a("li"),zfe=a("strong"),i$o=o("marian"),d$o=o(" \u2014 "),mG=a("a"),c$o=o("MarianMTModel"),f$o=o(" (Marian model)"),m$o=l(),N1=a("li"),Wfe=a("strong"),g$o=o("mbart"),h$o=o(" \u2014 "),gG=a("a"),p$o=o("MBartForConditionalGeneration"),_$o=o(" (mBART model)"),u$o=l(),q1=a("li"),Qfe=a("strong"),b$o=o("mt5"),v$o=o(" \u2014 "),hG=a("a"),F$o=o("MT5ForConditionalGeneration"),T$o=o(" (mT5 model)"),M$o=l(),j1=a("li"),Hfe=a("strong"),E$o=o("pegasus"),C$o=o(" \u2014 "),pG=a("a"),w$o=o("PegasusForConditionalGeneration"),A$o=o(" (Pegasus model)"),y$o=l(),D1=a("li"),Ufe=a("strong"),L$o=o("plbart"),x$o=o(" \u2014 "),_G=a("a"),$$o=o("PLBartForConditionalGeneration"),k$o=o(" (PLBart model)"),S$o=l(),G1=a("li"),Jfe=a("strong"),R$o=o("prophetnet"),P$o=o(" \u2014 "),uG=a("a"),B$o=o("ProphetNetForConditionalGeneration"),I$o=o(" (ProphetNet model)"),N$o=l(),O1=a("li"),Yfe=a("strong"),q$o=o("t5"),j$o=o(" \u2014 "),bG=a("a"),D$o=o("T5ForConditionalGeneration"),G$o=o(" (T5 model)"),O$o=l(),V1=a("li"),Kfe=a("strong"),V$o=o("xlm-prophetnet"),X$o=o(" \u2014 "),vG=a("a"),z$o=o("XLMProphetNetForConditionalGeneration"),W$o=o(" (XLMProphetNet model)"),Q$o=l(),X1=a("p"),H$o=o("The model is set in evaluation mode by default using "),Zfe=a("code"),U$o=o("model.eval()"),J$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),Y$o=o("model.train()"),K$o=l(),F(z1.$$.fragment),tje=l(),Di=a("h2"),W1=a("a"),ome=a("span"),F(Ry.$$.fragment),Z$o=l(),rme=a("span"),eko=o("AutoModelForSequenceClassification"),aje=l(),Ro=a("div"),F(Py.$$.fragment),oko=l(),Gi=a("p"),rko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=a("a"),tko=o("from_pretrained()"),ako=o(" class method or the "),TG=a("a"),nko=o("from_config()"),sko=o(` class
method.`),lko=l(),By=a("p"),iko=o("This class cannot be instantiated directly using "),tme=a("code"),dko=o("__init__()"),cko=o(" (throws an error)."),fko=l(),it=a("div"),F(Iy.$$.fragment),mko=l(),ame=a("p"),gko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hko=l(),Oi=a("p"),pko=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),_ko=o("not"),uko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),bko=o("from_pretrained()"),vko=o(" to load the model weights."),Fko=l(),F(Q1.$$.fragment),Tko=l(),oo=a("div"),F(Ny.$$.fragment),Mko=l(),sme=a("p"),Eko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cko=l(),Ra=a("p"),wko=o("The model class to instantiate is selected based on the "),lme=a("code"),Ako=o("model_type"),yko=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),Lko=o("pretrained_model_name_or_path"),xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),$ko=o("pretrained_model_name_or_path"),kko=o(":"),Sko=l(),N=a("ul"),H1=a("li"),cme=a("strong"),Rko=o("albert"),Pko=o(" \u2014 "),EG=a("a"),Bko=o("AlbertForSequenceClassification"),Iko=o(" (ALBERT model)"),Nko=l(),U1=a("li"),fme=a("strong"),qko=o("bart"),jko=o(" \u2014 "),CG=a("a"),Dko=o("BartForSequenceClassification"),Gko=o(" (BART model)"),Oko=l(),J1=a("li"),mme=a("strong"),Vko=o("bert"),Xko=o(" \u2014 "),wG=a("a"),zko=o("BertForSequenceClassification"),Wko=o(" (BERT model)"),Qko=l(),Y1=a("li"),gme=a("strong"),Hko=o("big_bird"),Uko=o(" \u2014 "),AG=a("a"),Jko=o("BigBirdForSequenceClassification"),Yko=o(" (BigBird model)"),Kko=l(),K1=a("li"),hme=a("strong"),Zko=o("bigbird_pegasus"),eSo=o(" \u2014 "),yG=a("a"),oSo=o("BigBirdPegasusForSequenceClassification"),rSo=o(" (BigBirdPegasus model)"),tSo=l(),Z1=a("li"),pme=a("strong"),aSo=o("camembert"),nSo=o(" \u2014 "),LG=a("a"),sSo=o("CamembertForSequenceClassification"),lSo=o(" (CamemBERT model)"),iSo=l(),e7=a("li"),_me=a("strong"),dSo=o("canine"),cSo=o(" \u2014 "),xG=a("a"),fSo=o("CanineForSequenceClassification"),mSo=o(" (Canine model)"),gSo=l(),o7=a("li"),ume=a("strong"),hSo=o("convbert"),pSo=o(" \u2014 "),$G=a("a"),_So=o("ConvBertForSequenceClassification"),uSo=o(" (ConvBERT model)"),bSo=l(),r7=a("li"),bme=a("strong"),vSo=o("ctrl"),FSo=o(" \u2014 "),kG=a("a"),TSo=o("CTRLForSequenceClassification"),MSo=o(" (CTRL model)"),ESo=l(),t7=a("li"),vme=a("strong"),CSo=o("data2vec-text"),wSo=o(" \u2014 "),SG=a("a"),ASo=o("Data2VecTextForSequenceClassification"),ySo=o(" (Data2VecText model)"),LSo=l(),a7=a("li"),Fme=a("strong"),xSo=o("deberta"),$So=o(" \u2014 "),RG=a("a"),kSo=o("DebertaForSequenceClassification"),SSo=o(" (DeBERTa model)"),RSo=l(),n7=a("li"),Tme=a("strong"),PSo=o("deberta-v2"),BSo=o(" \u2014 "),PG=a("a"),ISo=o("DebertaV2ForSequenceClassification"),NSo=o(" (DeBERTa-v2 model)"),qSo=l(),s7=a("li"),Mme=a("strong"),jSo=o("distilbert"),DSo=o(" \u2014 "),BG=a("a"),GSo=o("DistilBertForSequenceClassification"),OSo=o(" (DistilBERT model)"),VSo=l(),l7=a("li"),Eme=a("strong"),XSo=o("electra"),zSo=o(" \u2014 "),IG=a("a"),WSo=o("ElectraForSequenceClassification"),QSo=o(" (ELECTRA model)"),HSo=l(),i7=a("li"),Cme=a("strong"),USo=o("flaubert"),JSo=o(" \u2014 "),NG=a("a"),YSo=o("FlaubertForSequenceClassification"),KSo=o(" (FlauBERT model)"),ZSo=l(),d7=a("li"),wme=a("strong"),eRo=o("fnet"),oRo=o(" \u2014 "),qG=a("a"),rRo=o("FNetForSequenceClassification"),tRo=o(" (FNet model)"),aRo=l(),c7=a("li"),Ame=a("strong"),nRo=o("funnel"),sRo=o(" \u2014 "),jG=a("a"),lRo=o("FunnelForSequenceClassification"),iRo=o(" (Funnel Transformer model)"),dRo=l(),f7=a("li"),yme=a("strong"),cRo=o("gpt2"),fRo=o(" \u2014 "),DG=a("a"),mRo=o("GPT2ForSequenceClassification"),gRo=o(" (OpenAI GPT-2 model)"),hRo=l(),m7=a("li"),Lme=a("strong"),pRo=o("gpt_neo"),_Ro=o(" \u2014 "),GG=a("a"),uRo=o("GPTNeoForSequenceClassification"),bRo=o(" (GPT Neo model)"),vRo=l(),g7=a("li"),xme=a("strong"),FRo=o("gptj"),TRo=o(" \u2014 "),OG=a("a"),MRo=o("GPTJForSequenceClassification"),ERo=o(" (GPT-J model)"),CRo=l(),h7=a("li"),$me=a("strong"),wRo=o("ibert"),ARo=o(" \u2014 "),VG=a("a"),yRo=o("IBertForSequenceClassification"),LRo=o(" (I-BERT model)"),xRo=l(),p7=a("li"),kme=a("strong"),$Ro=o("layoutlm"),kRo=o(" \u2014 "),XG=a("a"),SRo=o("LayoutLMForSequenceClassification"),RRo=o(" (LayoutLM model)"),PRo=l(),_7=a("li"),Sme=a("strong"),BRo=o("layoutlmv2"),IRo=o(" \u2014 "),zG=a("a"),NRo=o("LayoutLMv2ForSequenceClassification"),qRo=o(" (LayoutLMv2 model)"),jRo=l(),u7=a("li"),Rme=a("strong"),DRo=o("layoutlmv3"),GRo=o(" \u2014 "),WG=a("a"),ORo=o("LayoutLMv3ForSequenceClassification"),VRo=o(" (LayoutLMv3 model)"),XRo=l(),b7=a("li"),Pme=a("strong"),zRo=o("led"),WRo=o(" \u2014 "),QG=a("a"),QRo=o("LEDForSequenceClassification"),HRo=o(" (LED model)"),URo=l(),v7=a("li"),Bme=a("strong"),JRo=o("longformer"),YRo=o(" \u2014 "),HG=a("a"),KRo=o("LongformerForSequenceClassification"),ZRo=o(" (Longformer model)"),ePo=l(),F7=a("li"),Ime=a("strong"),oPo=o("mbart"),rPo=o(" \u2014 "),UG=a("a"),tPo=o("MBartForSequenceClassification"),aPo=o(" (mBART model)"),nPo=l(),T7=a("li"),Nme=a("strong"),sPo=o("megatron-bert"),lPo=o(" \u2014 "),JG=a("a"),iPo=o("MegatronBertForSequenceClassification"),dPo=o(" (MegatronBert model)"),cPo=l(),M7=a("li"),qme=a("strong"),fPo=o("mobilebert"),mPo=o(" \u2014 "),YG=a("a"),gPo=o("MobileBertForSequenceClassification"),hPo=o(" (MobileBERT model)"),pPo=l(),E7=a("li"),jme=a("strong"),_Po=o("mpnet"),uPo=o(" \u2014 "),KG=a("a"),bPo=o("MPNetForSequenceClassification"),vPo=o(" (MPNet model)"),FPo=l(),C7=a("li"),Dme=a("strong"),TPo=o("nystromformer"),MPo=o(" \u2014 "),ZG=a("a"),EPo=o("NystromformerForSequenceClassification"),CPo=o(" (Nystromformer model)"),wPo=l(),w7=a("li"),Gme=a("strong"),APo=o("openai-gpt"),yPo=o(" \u2014 "),eO=a("a"),LPo=o("OpenAIGPTForSequenceClassification"),xPo=o(" (OpenAI GPT model)"),$Po=l(),A7=a("li"),Ome=a("strong"),kPo=o("perceiver"),SPo=o(" \u2014 "),oO=a("a"),RPo=o("PerceiverForSequenceClassification"),PPo=o(" (Perceiver model)"),BPo=l(),y7=a("li"),Vme=a("strong"),IPo=o("plbart"),NPo=o(" \u2014 "),rO=a("a"),qPo=o("PLBartForSequenceClassification"),jPo=o(" (PLBart model)"),DPo=l(),L7=a("li"),Xme=a("strong"),GPo=o("qdqbert"),OPo=o(" \u2014 "),tO=a("a"),VPo=o("QDQBertForSequenceClassification"),XPo=o(" (QDQBert model)"),zPo=l(),x7=a("li"),zme=a("strong"),WPo=o("reformer"),QPo=o(" \u2014 "),aO=a("a"),HPo=o("ReformerForSequenceClassification"),UPo=o(" (Reformer model)"),JPo=l(),$7=a("li"),Wme=a("strong"),YPo=o("rembert"),KPo=o(" \u2014 "),nO=a("a"),ZPo=o("RemBertForSequenceClassification"),eBo=o(" (RemBERT model)"),oBo=l(),k7=a("li"),Qme=a("strong"),rBo=o("roberta"),tBo=o(" \u2014 "),sO=a("a"),aBo=o("RobertaForSequenceClassification"),nBo=o(" (RoBERTa model)"),sBo=l(),S7=a("li"),Hme=a("strong"),lBo=o("roformer"),iBo=o(" \u2014 "),lO=a("a"),dBo=o("RoFormerForSequenceClassification"),cBo=o(" (RoFormer model)"),fBo=l(),R7=a("li"),Ume=a("strong"),mBo=o("squeezebert"),gBo=o(" \u2014 "),iO=a("a"),hBo=o("SqueezeBertForSequenceClassification"),pBo=o(" (SqueezeBERT model)"),_Bo=l(),P7=a("li"),Jme=a("strong"),uBo=o("tapas"),bBo=o(" \u2014 "),dO=a("a"),vBo=o("TapasForSequenceClassification"),FBo=o(" (TAPAS model)"),TBo=l(),B7=a("li"),Yme=a("strong"),MBo=o("transfo-xl"),EBo=o(" \u2014 "),cO=a("a"),CBo=o("TransfoXLForSequenceClassification"),wBo=o(" (Transformer-XL model)"),ABo=l(),I7=a("li"),Kme=a("strong"),yBo=o("xlm"),LBo=o(" \u2014 "),fO=a("a"),xBo=o("XLMForSequenceClassification"),$Bo=o(" (XLM model)"),kBo=l(),N7=a("li"),Zme=a("strong"),SBo=o("xlm-roberta"),RBo=o(" \u2014 "),mO=a("a"),PBo=o("XLMRobertaForSequenceClassification"),BBo=o(" (XLM-RoBERTa model)"),IBo=l(),q7=a("li"),ege=a("strong"),NBo=o("xlm-roberta-xl"),qBo=o(" \u2014 "),gO=a("a"),jBo=o("XLMRobertaXLForSequenceClassification"),DBo=o(" (XLM-RoBERTa-XL model)"),GBo=l(),j7=a("li"),oge=a("strong"),OBo=o("xlnet"),VBo=o(" \u2014 "),hO=a("a"),XBo=o("XLNetForSequenceClassification"),zBo=o(" (XLNet model)"),WBo=l(),D7=a("li"),rge=a("strong"),QBo=o("yoso"),HBo=o(" \u2014 "),pO=a("a"),UBo=o("YosoForSequenceClassification"),JBo=o(" (YOSO model)"),YBo=l(),G7=a("p"),KBo=o("The model is set in evaluation mode by default using "),tge=a("code"),ZBo=o("model.eval()"),eIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=a("code"),oIo=o("model.train()"),rIo=l(),F(O7.$$.fragment),nje=l(),Vi=a("h2"),V7=a("a"),nge=a("span"),F(qy.$$.fragment),tIo=l(),sge=a("span"),aIo=o("AutoModelForMultipleChoice"),sje=l(),Po=a("div"),F(jy.$$.fragment),nIo=l(),Xi=a("p"),sIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=a("a"),lIo=o("from_pretrained()"),iIo=o(" class method or the "),uO=a("a"),dIo=o("from_config()"),cIo=o(` class
method.`),fIo=l(),Dy=a("p"),mIo=o("This class cannot be instantiated directly using "),lge=a("code"),gIo=o("__init__()"),hIo=o(" (throws an error)."),pIo=l(),dt=a("div"),F(Gy.$$.fragment),_Io=l(),ige=a("p"),uIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bIo=l(),zi=a("p"),vIo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),FIo=o("not"),TIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),MIo=o("from_pretrained()"),EIo=o(" to load the model weights."),CIo=l(),F(X7.$$.fragment),wIo=l(),ro=a("div"),F(Oy.$$.fragment),AIo=l(),cge=a("p"),yIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LIo=l(),Pa=a("p"),xIo=o("The model class to instantiate is selected based on the "),fge=a("code"),$Io=o("model_type"),kIo=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),SIo=o("pretrained_model_name_or_path"),RIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),PIo=o("pretrained_model_name_or_path"),BIo=o(":"),IIo=l(),K=a("ul"),z7=a("li"),hge=a("strong"),NIo=o("albert"),qIo=o(" \u2014 "),vO=a("a"),jIo=o("AlbertForMultipleChoice"),DIo=o(" (ALBERT model)"),GIo=l(),W7=a("li"),pge=a("strong"),OIo=o("bert"),VIo=o(" \u2014 "),FO=a("a"),XIo=o("BertForMultipleChoice"),zIo=o(" (BERT model)"),WIo=l(),Q7=a("li"),_ge=a("strong"),QIo=o("big_bird"),HIo=o(" \u2014 "),TO=a("a"),UIo=o("BigBirdForMultipleChoice"),JIo=o(" (BigBird model)"),YIo=l(),H7=a("li"),uge=a("strong"),KIo=o("camembert"),ZIo=o(" \u2014 "),MO=a("a"),eNo=o("CamembertForMultipleChoice"),oNo=o(" (CamemBERT model)"),rNo=l(),U7=a("li"),bge=a("strong"),tNo=o("canine"),aNo=o(" \u2014 "),EO=a("a"),nNo=o("CanineForMultipleChoice"),sNo=o(" (Canine model)"),lNo=l(),J7=a("li"),vge=a("strong"),iNo=o("convbert"),dNo=o(" \u2014 "),CO=a("a"),cNo=o("ConvBertForMultipleChoice"),fNo=o(" (ConvBERT model)"),mNo=l(),Y7=a("li"),Fge=a("strong"),gNo=o("data2vec-text"),hNo=o(" \u2014 "),wO=a("a"),pNo=o("Data2VecTextForMultipleChoice"),_No=o(" (Data2VecText model)"),uNo=l(),K7=a("li"),Tge=a("strong"),bNo=o("deberta-v2"),vNo=o(" \u2014 "),AO=a("a"),FNo=o("DebertaV2ForMultipleChoice"),TNo=o(" (DeBERTa-v2 model)"),MNo=l(),Z7=a("li"),Mge=a("strong"),ENo=o("distilbert"),CNo=o(" \u2014 "),yO=a("a"),wNo=o("DistilBertForMultipleChoice"),ANo=o(" (DistilBERT model)"),yNo=l(),eb=a("li"),Ege=a("strong"),LNo=o("electra"),xNo=o(" \u2014 "),LO=a("a"),$No=o("ElectraForMultipleChoice"),kNo=o(" (ELECTRA model)"),SNo=l(),ob=a("li"),Cge=a("strong"),RNo=o("flaubert"),PNo=o(" \u2014 "),xO=a("a"),BNo=o("FlaubertForMultipleChoice"),INo=o(" (FlauBERT model)"),NNo=l(),rb=a("li"),wge=a("strong"),qNo=o("fnet"),jNo=o(" \u2014 "),$O=a("a"),DNo=o("FNetForMultipleChoice"),GNo=o(" (FNet model)"),ONo=l(),tb=a("li"),Age=a("strong"),VNo=o("funnel"),XNo=o(" \u2014 "),kO=a("a"),zNo=o("FunnelForMultipleChoice"),WNo=o(" (Funnel Transformer model)"),QNo=l(),ab=a("li"),yge=a("strong"),HNo=o("ibert"),UNo=o(" \u2014 "),SO=a("a"),JNo=o("IBertForMultipleChoice"),YNo=o(" (I-BERT model)"),KNo=l(),nb=a("li"),Lge=a("strong"),ZNo=o("longformer"),eqo=o(" \u2014 "),RO=a("a"),oqo=o("LongformerForMultipleChoice"),rqo=o(" (Longformer model)"),tqo=l(),sb=a("li"),xge=a("strong"),aqo=o("megatron-bert"),nqo=o(" \u2014 "),PO=a("a"),sqo=o("MegatronBertForMultipleChoice"),lqo=o(" (MegatronBert model)"),iqo=l(),lb=a("li"),$ge=a("strong"),dqo=o("mobilebert"),cqo=o(" \u2014 "),BO=a("a"),fqo=o("MobileBertForMultipleChoice"),mqo=o(" (MobileBERT model)"),gqo=l(),ib=a("li"),kge=a("strong"),hqo=o("mpnet"),pqo=o(" \u2014 "),IO=a("a"),_qo=o("MPNetForMultipleChoice"),uqo=o(" (MPNet model)"),bqo=l(),db=a("li"),Sge=a("strong"),vqo=o("nystromformer"),Fqo=o(" \u2014 "),NO=a("a"),Tqo=o("NystromformerForMultipleChoice"),Mqo=o(" (Nystromformer model)"),Eqo=l(),cb=a("li"),Rge=a("strong"),Cqo=o("qdqbert"),wqo=o(" \u2014 "),qO=a("a"),Aqo=o("QDQBertForMultipleChoice"),yqo=o(" (QDQBert model)"),Lqo=l(),fb=a("li"),Pge=a("strong"),xqo=o("rembert"),$qo=o(" \u2014 "),jO=a("a"),kqo=o("RemBertForMultipleChoice"),Sqo=o(" (RemBERT model)"),Rqo=l(),mb=a("li"),Bge=a("strong"),Pqo=o("roberta"),Bqo=o(" \u2014 "),DO=a("a"),Iqo=o("RobertaForMultipleChoice"),Nqo=o(" (RoBERTa model)"),qqo=l(),gb=a("li"),Ige=a("strong"),jqo=o("roformer"),Dqo=o(" \u2014 "),GO=a("a"),Gqo=o("RoFormerForMultipleChoice"),Oqo=o(" (RoFormer model)"),Vqo=l(),hb=a("li"),Nge=a("strong"),Xqo=o("squeezebert"),zqo=o(" \u2014 "),OO=a("a"),Wqo=o("SqueezeBertForMultipleChoice"),Qqo=o(" (SqueezeBERT model)"),Hqo=l(),pb=a("li"),qge=a("strong"),Uqo=o("xlm"),Jqo=o(" \u2014 "),VO=a("a"),Yqo=o("XLMForMultipleChoice"),Kqo=o(" (XLM model)"),Zqo=l(),_b=a("li"),jge=a("strong"),ejo=o("xlm-roberta"),ojo=o(" \u2014 "),XO=a("a"),rjo=o("XLMRobertaForMultipleChoice"),tjo=o(" (XLM-RoBERTa model)"),ajo=l(),ub=a("li"),Dge=a("strong"),njo=o("xlm-roberta-xl"),sjo=o(" \u2014 "),zO=a("a"),ljo=o("XLMRobertaXLForMultipleChoice"),ijo=o(" (XLM-RoBERTa-XL model)"),djo=l(),bb=a("li"),Gge=a("strong"),cjo=o("xlnet"),fjo=o(" \u2014 "),WO=a("a"),mjo=o("XLNetForMultipleChoice"),gjo=o(" (XLNet model)"),hjo=l(),vb=a("li"),Oge=a("strong"),pjo=o("yoso"),_jo=o(" \u2014 "),QO=a("a"),ujo=o("YosoForMultipleChoice"),bjo=o(" (YOSO model)"),vjo=l(),Fb=a("p"),Fjo=o("The model is set in evaluation mode by default using "),Vge=a("code"),Tjo=o("model.eval()"),Mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),Ejo=o("model.train()"),Cjo=l(),F(Tb.$$.fragment),lje=l(),Wi=a("h2"),Mb=a("a"),zge=a("span"),F(Vy.$$.fragment),wjo=l(),Wge=a("span"),Ajo=o("AutoModelForNextSentencePrediction"),ije=l(),Bo=a("div"),F(Xy.$$.fragment),yjo=l(),Qi=a("p"),Ljo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=a("a"),xjo=o("from_pretrained()"),$jo=o(" class method or the "),UO=a("a"),kjo=o("from_config()"),Sjo=o(` class
method.`),Rjo=l(),zy=a("p"),Pjo=o("This class cannot be instantiated directly using "),Qge=a("code"),Bjo=o("__init__()"),Ijo=o(" (throws an error)."),Njo=l(),ct=a("div"),F(Wy.$$.fragment),qjo=l(),Hge=a("p"),jjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Djo=l(),Hi=a("p"),Gjo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),Ojo=o("not"),Vjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),Xjo=o("from_pretrained()"),zjo=o(" to load the model weights."),Wjo=l(),F(Eb.$$.fragment),Qjo=l(),to=a("div"),F(Qy.$$.fragment),Hjo=l(),Jge=a("p"),Ujo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jjo=l(),Ba=a("p"),Yjo=o("The model class to instantiate is selected based on the "),Yge=a("code"),Kjo=o("model_type"),Zjo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),eDo=o("pretrained_model_name_or_path"),oDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),rDo=o("pretrained_model_name_or_path"),tDo=o(":"),aDo=l(),Yr=a("ul"),Cb=a("li"),ehe=a("strong"),nDo=o("bert"),sDo=o(" \u2014 "),YO=a("a"),lDo=o("BertForNextSentencePrediction"),iDo=o(" (BERT model)"),dDo=l(),wb=a("li"),ohe=a("strong"),cDo=o("fnet"),fDo=o(" \u2014 "),KO=a("a"),mDo=o("FNetForNextSentencePrediction"),gDo=o(" (FNet model)"),hDo=l(),Ab=a("li"),rhe=a("strong"),pDo=o("megatron-bert"),_Do=o(" \u2014 "),ZO=a("a"),uDo=o("MegatronBertForNextSentencePrediction"),bDo=o(" (MegatronBert model)"),vDo=l(),yb=a("li"),the=a("strong"),FDo=o("mobilebert"),TDo=o(" \u2014 "),eV=a("a"),MDo=o("MobileBertForNextSentencePrediction"),EDo=o(" (MobileBERT model)"),CDo=l(),Lb=a("li"),ahe=a("strong"),wDo=o("qdqbert"),ADo=o(" \u2014 "),oV=a("a"),yDo=o("QDQBertForNextSentencePrediction"),LDo=o(" (QDQBert model)"),xDo=l(),xb=a("p"),$Do=o("The model is set in evaluation mode by default using "),nhe=a("code"),kDo=o("model.eval()"),SDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),RDo=o("model.train()"),PDo=l(),F($b.$$.fragment),dje=l(),Ui=a("h2"),kb=a("a"),lhe=a("span"),F(Hy.$$.fragment),BDo=l(),ihe=a("span"),IDo=o("AutoModelForTokenClassification"),cje=l(),Io=a("div"),F(Uy.$$.fragment),NDo=l(),Ji=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=a("a"),jDo=o("from_pretrained()"),DDo=o(" class method or the "),tV=a("a"),GDo=o("from_config()"),ODo=o(` class
method.`),VDo=l(),Jy=a("p"),XDo=o("This class cannot be instantiated directly using "),dhe=a("code"),zDo=o("__init__()"),WDo=o(" (throws an error)."),QDo=l(),ft=a("div"),F(Yy.$$.fragment),HDo=l(),che=a("p"),UDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JDo=l(),Yi=a("p"),YDo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),KDo=o("not"),ZDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),eGo=o("from_pretrained()"),oGo=o(" to load the model weights."),rGo=l(),F(Sb.$$.fragment),tGo=l(),ao=a("div"),F(Ky.$$.fragment),aGo=l(),mhe=a("p"),nGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sGo=l(),Ia=a("p"),lGo=o("The model class to instantiate is selected based on the "),ghe=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),H=a("ul"),Rb=a("li"),_he=a("strong"),pGo=o("albert"),_Go=o(" \u2014 "),nV=a("a"),uGo=o("AlbertForTokenClassification"),bGo=o(" (ALBERT model)"),vGo=l(),Pb=a("li"),uhe=a("strong"),FGo=o("bert"),TGo=o(" \u2014 "),sV=a("a"),MGo=o("BertForTokenClassification"),EGo=o(" (BERT model)"),CGo=l(),Bb=a("li"),bhe=a("strong"),wGo=o("big_bird"),AGo=o(" \u2014 "),lV=a("a"),yGo=o("BigBirdForTokenClassification"),LGo=o(" (BigBird model)"),xGo=l(),Ib=a("li"),vhe=a("strong"),$Go=o("camembert"),kGo=o(" \u2014 "),iV=a("a"),SGo=o("CamembertForTokenClassification"),RGo=o(" (CamemBERT model)"),PGo=l(),Nb=a("li"),Fhe=a("strong"),BGo=o("canine"),IGo=o(" \u2014 "),dV=a("a"),NGo=o("CanineForTokenClassification"),qGo=o(" (Canine model)"),jGo=l(),qb=a("li"),The=a("strong"),DGo=o("convbert"),GGo=o(" \u2014 "),cV=a("a"),OGo=o("ConvBertForTokenClassification"),VGo=o(" (ConvBERT model)"),XGo=l(),jb=a("li"),Mhe=a("strong"),zGo=o("data2vec-text"),WGo=o(" \u2014 "),fV=a("a"),QGo=o("Data2VecTextForTokenClassification"),HGo=o(" (Data2VecText model)"),UGo=l(),Db=a("li"),Ehe=a("strong"),JGo=o("deberta"),YGo=o(" \u2014 "),mV=a("a"),KGo=o("DebertaForTokenClassification"),ZGo=o(" (DeBERTa model)"),eOo=l(),Gb=a("li"),Che=a("strong"),oOo=o("deberta-v2"),rOo=o(" \u2014 "),gV=a("a"),tOo=o("DebertaV2ForTokenClassification"),aOo=o(" (DeBERTa-v2 model)"),nOo=l(),Ob=a("li"),whe=a("strong"),sOo=o("distilbert"),lOo=o(" \u2014 "),hV=a("a"),iOo=o("DistilBertForTokenClassification"),dOo=o(" (DistilBERT model)"),cOo=l(),Vb=a("li"),Ahe=a("strong"),fOo=o("electra"),mOo=o(" \u2014 "),pV=a("a"),gOo=o("ElectraForTokenClassification"),hOo=o(" (ELECTRA model)"),pOo=l(),Xb=a("li"),yhe=a("strong"),_Oo=o("flaubert"),uOo=o(" \u2014 "),_V=a("a"),bOo=o("FlaubertForTokenClassification"),vOo=o(" (FlauBERT model)"),FOo=l(),zb=a("li"),Lhe=a("strong"),TOo=o("fnet"),MOo=o(" \u2014 "),uV=a("a"),EOo=o("FNetForTokenClassification"),COo=o(" (FNet model)"),wOo=l(),Wb=a("li"),xhe=a("strong"),AOo=o("funnel"),yOo=o(" \u2014 "),bV=a("a"),LOo=o("FunnelForTokenClassification"),xOo=o(" (Funnel Transformer model)"),$Oo=l(),Qb=a("li"),$he=a("strong"),kOo=o("gpt2"),SOo=o(" \u2014 "),vV=a("a"),ROo=o("GPT2ForTokenClassification"),POo=o(" (OpenAI GPT-2 model)"),BOo=l(),Hb=a("li"),khe=a("strong"),IOo=o("ibert"),NOo=o(" \u2014 "),FV=a("a"),qOo=o("IBertForTokenClassification"),jOo=o(" (I-BERT model)"),DOo=l(),Ub=a("li"),She=a("strong"),GOo=o("layoutlm"),OOo=o(" \u2014 "),TV=a("a"),VOo=o("LayoutLMForTokenClassification"),XOo=o(" (LayoutLM model)"),zOo=l(),Jb=a("li"),Rhe=a("strong"),WOo=o("layoutlmv2"),QOo=o(" \u2014 "),MV=a("a"),HOo=o("LayoutLMv2ForTokenClassification"),UOo=o(" (LayoutLMv2 model)"),JOo=l(),Yb=a("li"),Phe=a("strong"),YOo=o("layoutlmv3"),KOo=o(" \u2014 "),EV=a("a"),ZOo=o("LayoutLMv3ForTokenClassification"),eVo=o(" (LayoutLMv3 model)"),oVo=l(),Kb=a("li"),Bhe=a("strong"),rVo=o("longformer"),tVo=o(" \u2014 "),CV=a("a"),aVo=o("LongformerForTokenClassification"),nVo=o(" (Longformer model)"),sVo=l(),Zb=a("li"),Ihe=a("strong"),lVo=o("megatron-bert"),iVo=o(" \u2014 "),wV=a("a"),dVo=o("MegatronBertForTokenClassification"),cVo=o(" (MegatronBert model)"),fVo=l(),e2=a("li"),Nhe=a("strong"),mVo=o("mobilebert"),gVo=o(" \u2014 "),AV=a("a"),hVo=o("MobileBertForTokenClassification"),pVo=o(" (MobileBERT model)"),_Vo=l(),o2=a("li"),qhe=a("strong"),uVo=o("mpnet"),bVo=o(" \u2014 "),yV=a("a"),vVo=o("MPNetForTokenClassification"),FVo=o(" (MPNet model)"),TVo=l(),r2=a("li"),jhe=a("strong"),MVo=o("nystromformer"),EVo=o(" \u2014 "),LV=a("a"),CVo=o("NystromformerForTokenClassification"),wVo=o(" (Nystromformer model)"),AVo=l(),t2=a("li"),Dhe=a("strong"),yVo=o("qdqbert"),LVo=o(" \u2014 "),xV=a("a"),xVo=o("QDQBertForTokenClassification"),$Vo=o(" (QDQBert model)"),kVo=l(),a2=a("li"),Ghe=a("strong"),SVo=o("rembert"),RVo=o(" \u2014 "),$V=a("a"),PVo=o("RemBertForTokenClassification"),BVo=o(" (RemBERT model)"),IVo=l(),n2=a("li"),Ohe=a("strong"),NVo=o("roberta"),qVo=o(" \u2014 "),kV=a("a"),jVo=o("RobertaForTokenClassification"),DVo=o(" (RoBERTa model)"),GVo=l(),s2=a("li"),Vhe=a("strong"),OVo=o("roformer"),VVo=o(" \u2014 "),SV=a("a"),XVo=o("RoFormerForTokenClassification"),zVo=o(" (RoFormer model)"),WVo=l(),l2=a("li"),Xhe=a("strong"),QVo=o("squeezebert"),HVo=o(" \u2014 "),RV=a("a"),UVo=o("SqueezeBertForTokenClassification"),JVo=o(" (SqueezeBERT model)"),YVo=l(),i2=a("li"),zhe=a("strong"),KVo=o("xlm"),ZVo=o(" \u2014 "),PV=a("a"),eXo=o("XLMForTokenClassification"),oXo=o(" (XLM model)"),rXo=l(),d2=a("li"),Whe=a("strong"),tXo=o("xlm-roberta"),aXo=o(" \u2014 "),BV=a("a"),nXo=o("XLMRobertaForTokenClassification"),sXo=o(" (XLM-RoBERTa model)"),lXo=l(),c2=a("li"),Qhe=a("strong"),iXo=o("xlm-roberta-xl"),dXo=o(" \u2014 "),IV=a("a"),cXo=o("XLMRobertaXLForTokenClassification"),fXo=o(" (XLM-RoBERTa-XL model)"),mXo=l(),f2=a("li"),Hhe=a("strong"),gXo=o("xlnet"),hXo=o(" \u2014 "),NV=a("a"),pXo=o("XLNetForTokenClassification"),_Xo=o(" (XLNet model)"),uXo=l(),m2=a("li"),Uhe=a("strong"),bXo=o("yoso"),vXo=o(" \u2014 "),qV=a("a"),FXo=o("YosoForTokenClassification"),TXo=o(" (YOSO model)"),MXo=l(),g2=a("p"),EXo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),CXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),AXo=o("model.train()"),yXo=l(),F(h2.$$.fragment),fje=l(),Ki=a("h2"),p2=a("a"),Khe=a("span"),F(Zy.$$.fragment),LXo=l(),Zhe=a("span"),xXo=o("AutoModelForQuestionAnswering"),mje=l(),No=a("div"),F(eL.$$.fragment),$Xo=l(),Zi=a("p"),kXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=a("a"),SXo=o("from_pretrained()"),RXo=o(" class method or the "),DV=a("a"),PXo=o("from_config()"),BXo=o(` class
method.`),IXo=l(),oL=a("p"),NXo=o("This class cannot be instantiated directly using "),epe=a("code"),qXo=o("__init__()"),jXo=o(" (throws an error)."),DXo=l(),mt=a("div"),F(rL.$$.fragment),GXo=l(),ope=a("p"),OXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VXo=l(),ed=a("p"),XXo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),zXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),QXo=o("from_pretrained()"),HXo=o(" to load the model weights."),UXo=l(),F(_2.$$.fragment),JXo=l(),no=a("div"),F(tL.$$.fragment),YXo=l(),tpe=a("p"),KXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZXo=l(),Na=a("p"),ezo=o("The model class to instantiate is selected based on the "),ape=a("code"),ozo=o("model_type"),rzo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),nzo=o("pretrained_model_name_or_path"),szo=o(":"),lzo=l(),V=a("ul"),u2=a("li"),lpe=a("strong"),izo=o("albert"),dzo=o(" \u2014 "),OV=a("a"),czo=o("AlbertForQuestionAnswering"),fzo=o(" (ALBERT model)"),mzo=l(),b2=a("li"),ipe=a("strong"),gzo=o("bart"),hzo=o(" \u2014 "),VV=a("a"),pzo=o("BartForQuestionAnswering"),_zo=o(" (BART model)"),uzo=l(),v2=a("li"),dpe=a("strong"),bzo=o("bert"),vzo=o(" \u2014 "),XV=a("a"),Fzo=o("BertForQuestionAnswering"),Tzo=o(" (BERT model)"),Mzo=l(),F2=a("li"),cpe=a("strong"),Ezo=o("big_bird"),Czo=o(" \u2014 "),zV=a("a"),wzo=o("BigBirdForQuestionAnswering"),Azo=o(" (BigBird model)"),yzo=l(),T2=a("li"),fpe=a("strong"),Lzo=o("bigbird_pegasus"),xzo=o(" \u2014 "),WV=a("a"),$zo=o("BigBirdPegasusForQuestionAnswering"),kzo=o(" (BigBirdPegasus model)"),Szo=l(),M2=a("li"),mpe=a("strong"),Rzo=o("camembert"),Pzo=o(" \u2014 "),QV=a("a"),Bzo=o("CamembertForQuestionAnswering"),Izo=o(" (CamemBERT model)"),Nzo=l(),E2=a("li"),gpe=a("strong"),qzo=o("canine"),jzo=o(" \u2014 "),HV=a("a"),Dzo=o("CanineForQuestionAnswering"),Gzo=o(" (Canine model)"),Ozo=l(),C2=a("li"),hpe=a("strong"),Vzo=o("convbert"),Xzo=o(" \u2014 "),UV=a("a"),zzo=o("ConvBertForQuestionAnswering"),Wzo=o(" (ConvBERT model)"),Qzo=l(),w2=a("li"),ppe=a("strong"),Hzo=o("data2vec-text"),Uzo=o(" \u2014 "),JV=a("a"),Jzo=o("Data2VecTextForQuestionAnswering"),Yzo=o(" (Data2VecText model)"),Kzo=l(),A2=a("li"),_pe=a("strong"),Zzo=o("deberta"),eWo=o(" \u2014 "),YV=a("a"),oWo=o("DebertaForQuestionAnswering"),rWo=o(" (DeBERTa model)"),tWo=l(),y2=a("li"),upe=a("strong"),aWo=o("deberta-v2"),nWo=o(" \u2014 "),KV=a("a"),sWo=o("DebertaV2ForQuestionAnswering"),lWo=o(" (DeBERTa-v2 model)"),iWo=l(),L2=a("li"),bpe=a("strong"),dWo=o("distilbert"),cWo=o(" \u2014 "),ZV=a("a"),fWo=o("DistilBertForQuestionAnswering"),mWo=o(" (DistilBERT model)"),gWo=l(),x2=a("li"),vpe=a("strong"),hWo=o("electra"),pWo=o(" \u2014 "),eX=a("a"),_Wo=o("ElectraForQuestionAnswering"),uWo=o(" (ELECTRA model)"),bWo=l(),$2=a("li"),Fpe=a("strong"),vWo=o("flaubert"),FWo=o(" \u2014 "),oX=a("a"),TWo=o("FlaubertForQuestionAnsweringSimple"),MWo=o(" (FlauBERT model)"),EWo=l(),k2=a("li"),Tpe=a("strong"),CWo=o("fnet"),wWo=o(" \u2014 "),rX=a("a"),AWo=o("FNetForQuestionAnswering"),yWo=o(" (FNet model)"),LWo=l(),S2=a("li"),Mpe=a("strong"),xWo=o("funnel"),$Wo=o(" \u2014 "),tX=a("a"),kWo=o("FunnelForQuestionAnswering"),SWo=o(" (Funnel Transformer model)"),RWo=l(),R2=a("li"),Epe=a("strong"),PWo=o("gptj"),BWo=o(" \u2014 "),aX=a("a"),IWo=o("GPTJForQuestionAnswering"),NWo=o(" (GPT-J model)"),qWo=l(),P2=a("li"),Cpe=a("strong"),jWo=o("ibert"),DWo=o(" \u2014 "),nX=a("a"),GWo=o("IBertForQuestionAnswering"),OWo=o(" (I-BERT model)"),VWo=l(),B2=a("li"),wpe=a("strong"),XWo=o("layoutlmv2"),zWo=o(" \u2014 "),sX=a("a"),WWo=o("LayoutLMv2ForQuestionAnswering"),QWo=o(" (LayoutLMv2 model)"),HWo=l(),I2=a("li"),Ape=a("strong"),UWo=o("layoutlmv3"),JWo=o(" \u2014 "),lX=a("a"),YWo=o("LayoutLMv3ForQuestionAnswering"),KWo=o(" (LayoutLMv3 model)"),ZWo=l(),N2=a("li"),ype=a("strong"),eQo=o("led"),oQo=o(" \u2014 "),iX=a("a"),rQo=o("LEDForQuestionAnswering"),tQo=o(" (LED model)"),aQo=l(),q2=a("li"),Lpe=a("strong"),nQo=o("longformer"),sQo=o(" \u2014 "),dX=a("a"),lQo=o("LongformerForQuestionAnswering"),iQo=o(" (Longformer model)"),dQo=l(),j2=a("li"),xpe=a("strong"),cQo=o("lxmert"),fQo=o(" \u2014 "),cX=a("a"),mQo=o("LxmertForQuestionAnswering"),gQo=o(" (LXMERT model)"),hQo=l(),D2=a("li"),$pe=a("strong"),pQo=o("mbart"),_Qo=o(" \u2014 "),fX=a("a"),uQo=o("MBartForQuestionAnswering"),bQo=o(" (mBART model)"),vQo=l(),G2=a("li"),kpe=a("strong"),FQo=o("megatron-bert"),TQo=o(" \u2014 "),mX=a("a"),MQo=o("MegatronBertForQuestionAnswering"),EQo=o(" (MegatronBert model)"),CQo=l(),O2=a("li"),Spe=a("strong"),wQo=o("mobilebert"),AQo=o(" \u2014 "),gX=a("a"),yQo=o("MobileBertForQuestionAnswering"),LQo=o(" (MobileBERT model)"),xQo=l(),V2=a("li"),Rpe=a("strong"),$Qo=o("mpnet"),kQo=o(" \u2014 "),hX=a("a"),SQo=o("MPNetForQuestionAnswering"),RQo=o(" (MPNet model)"),PQo=l(),X2=a("li"),Ppe=a("strong"),BQo=o("nystromformer"),IQo=o(" \u2014 "),pX=a("a"),NQo=o("NystromformerForQuestionAnswering"),qQo=o(" (Nystromformer model)"),jQo=l(),z2=a("li"),Bpe=a("strong"),DQo=o("qdqbert"),GQo=o(" \u2014 "),_X=a("a"),OQo=o("QDQBertForQuestionAnswering"),VQo=o(" (QDQBert model)"),XQo=l(),W2=a("li"),Ipe=a("strong"),zQo=o("reformer"),WQo=o(" \u2014 "),uX=a("a"),QQo=o("ReformerForQuestionAnswering"),HQo=o(" (Reformer model)"),UQo=l(),Q2=a("li"),Npe=a("strong"),JQo=o("rembert"),YQo=o(" \u2014 "),bX=a("a"),KQo=o("RemBertForQuestionAnswering"),ZQo=o(" (RemBERT model)"),eHo=l(),H2=a("li"),qpe=a("strong"),oHo=o("roberta"),rHo=o(" \u2014 "),vX=a("a"),tHo=o("RobertaForQuestionAnswering"),aHo=o(" (RoBERTa model)"),nHo=l(),U2=a("li"),jpe=a("strong"),sHo=o("roformer"),lHo=o(" \u2014 "),FX=a("a"),iHo=o("RoFormerForQuestionAnswering"),dHo=o(" (RoFormer model)"),cHo=l(),J2=a("li"),Dpe=a("strong"),fHo=o("splinter"),mHo=o(" \u2014 "),TX=a("a"),gHo=o("SplinterForQuestionAnswering"),hHo=o(" (Splinter model)"),pHo=l(),Y2=a("li"),Gpe=a("strong"),_Ho=o("squeezebert"),uHo=o(" \u2014 "),MX=a("a"),bHo=o("SqueezeBertForQuestionAnswering"),vHo=o(" (SqueezeBERT model)"),FHo=l(),K2=a("li"),Ope=a("strong"),THo=o("xlm"),MHo=o(" \u2014 "),EX=a("a"),EHo=o("XLMForQuestionAnsweringSimple"),CHo=o(" (XLM model)"),wHo=l(),Z2=a("li"),Vpe=a("strong"),AHo=o("xlm-roberta"),yHo=o(" \u2014 "),CX=a("a"),LHo=o("XLMRobertaForQuestionAnswering"),xHo=o(" (XLM-RoBERTa model)"),$Ho=l(),ev=a("li"),Xpe=a("strong"),kHo=o("xlm-roberta-xl"),SHo=o(" \u2014 "),wX=a("a"),RHo=o("XLMRobertaXLForQuestionAnswering"),PHo=o(" (XLM-RoBERTa-XL model)"),BHo=l(),ov=a("li"),zpe=a("strong"),IHo=o("xlnet"),NHo=o(" \u2014 "),AX=a("a"),qHo=o("XLNetForQuestionAnsweringSimple"),jHo=o(" (XLNet model)"),DHo=l(),rv=a("li"),Wpe=a("strong"),GHo=o("yoso"),OHo=o(" \u2014 "),yX=a("a"),VHo=o("YosoForQuestionAnswering"),XHo=o(" (YOSO model)"),zHo=l(),tv=a("p"),WHo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),QHo=o("model.eval()"),HHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),UHo=o("model.train()"),JHo=l(),F(av.$$.fragment),gje=l(),od=a("h2"),nv=a("a"),Upe=a("span"),F(aL.$$.fragment),YHo=l(),Jpe=a("span"),KHo=o("AutoModelForTableQuestionAnswering"),hje=l(),qo=a("div"),F(nL.$$.fragment),ZHo=l(),rd=a("p"),eUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=a("a"),oUo=o("from_pretrained()"),rUo=o(" class method or the "),xX=a("a"),tUo=o("from_config()"),aUo=o(` class
method.`),nUo=l(),sL=a("p"),sUo=o("This class cannot be instantiated directly using "),Ype=a("code"),lUo=o("__init__()"),iUo=o(" (throws an error)."),dUo=l(),gt=a("div"),F(lL.$$.fragment),cUo=l(),Kpe=a("p"),fUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mUo=l(),td=a("p"),gUo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),hUo=o("not"),pUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),_Uo=o("from_pretrained()"),uUo=o(" to load the model weights."),bUo=l(),F(sv.$$.fragment),vUo=l(),so=a("div"),F(iL.$$.fragment),FUo=l(),e_e=a("p"),TUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MUo=l(),qa=a("p"),EUo=o("The model class to instantiate is selected based on the "),o_e=a("code"),CUo=o("model_type"),wUo=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),AUo=o("pretrained_model_name_or_path"),yUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),LUo=o("pretrained_model_name_or_path"),xUo=o(":"),$Uo=l(),a_e=a("ul"),lv=a("li"),n_e=a("strong"),kUo=o("tapas"),SUo=o(" \u2014 "),kX=a("a"),RUo=o("TapasForQuestionAnswering"),PUo=o(" (TAPAS model)"),BUo=l(),iv=a("p"),IUo=o("The model is set in evaluation mode by default using "),s_e=a("code"),NUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),jUo=o("model.train()"),DUo=l(),F(dv.$$.fragment),pje=l(),ad=a("h2"),cv=a("a"),i_e=a("span"),F(dL.$$.fragment),GUo=l(),d_e=a("span"),OUo=o("AutoModelForImageClassification"),_je=l(),jo=a("div"),F(cL.$$.fragment),VUo=l(),nd=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=a("a"),zUo=o("from_pretrained()"),WUo=o(" class method or the "),RX=a("a"),QUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),fL=a("p"),JUo=o("This class cannot be instantiated directly using "),c_e=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),ht=a("div"),F(mL.$$.fragment),eJo=l(),f_e=a("p"),oJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rJo=l(),sd=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),F(fv.$$.fragment),dJo=l(),lo=a("div"),F(gL.$$.fragment),cJo=l(),g_e=a("p"),fJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mJo=l(),ja=a("p"),gJo=o("The model class to instantiate is selected based on the "),h_e=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),_Jo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),FJo=l(),Fe=a("ul"),mv=a("li"),u_e=a("strong"),TJo=o("beit"),MJo=o(" \u2014 "),BX=a("a"),EJo=o("BeitForImageClassification"),CJo=o(" (BEiT model)"),wJo=l(),gv=a("li"),b_e=a("strong"),AJo=o("convnext"),yJo=o(" \u2014 "),IX=a("a"),LJo=o("ConvNextForImageClassification"),xJo=o(" (ConvNext model)"),$Jo=l(),hv=a("li"),v_e=a("strong"),kJo=o("cvt"),SJo=o(" \u2014 "),NX=a("a"),RJo=o("CvtForImageClassification"),PJo=o(" (CvT model)"),BJo=l(),pv=a("li"),F_e=a("strong"),IJo=o("data2vec-vision"),NJo=o(" \u2014 "),qX=a("a"),qJo=o("Data2VecVisionForImageClassification"),jJo=o(" (Data2VecVision model)"),DJo=l(),Bs=a("li"),T_e=a("strong"),GJo=o("deit"),OJo=o(" \u2014 "),jX=a("a"),VJo=o("DeiTForImageClassification"),XJo=o(" or "),DX=a("a"),zJo=o("DeiTForImageClassificationWithTeacher"),WJo=o(" (DeiT model)"),QJo=l(),_v=a("li"),M_e=a("strong"),HJo=o("imagegpt"),UJo=o(" \u2014 "),GX=a("a"),JJo=o("ImageGPTForImageClassification"),YJo=o(" (ImageGPT model)"),KJo=l(),pt=a("li"),E_e=a("strong"),ZJo=o("perceiver"),eYo=o(" \u2014 "),OX=a("a"),oYo=o("PerceiverForImageClassificationLearned"),rYo=o(" or "),VX=a("a"),tYo=o("PerceiverForImageClassificationFourier"),aYo=o(" or "),XX=a("a"),nYo=o("PerceiverForImageClassificationConvProcessing"),sYo=o(" (Perceiver model)"),lYo=l(),uv=a("li"),C_e=a("strong"),iYo=o("poolformer"),dYo=o(" \u2014 "),zX=a("a"),cYo=o("PoolFormerForImageClassification"),fYo=o(" (PoolFormer model)"),mYo=l(),bv=a("li"),w_e=a("strong"),gYo=o("regnet"),hYo=o(" \u2014 "),WX=a("a"),pYo=o("RegNetForImageClassification"),_Yo=o(" (RegNet model)"),uYo=l(),vv=a("li"),A_e=a("strong"),bYo=o("resnet"),vYo=o(" \u2014 "),QX=a("a"),FYo=o("ResNetForImageClassification"),TYo=o(" (ResNet model)"),MYo=l(),Fv=a("li"),y_e=a("strong"),EYo=o("segformer"),CYo=o(" \u2014 "),HX=a("a"),wYo=o("SegformerForImageClassification"),AYo=o(" (SegFormer model)"),yYo=l(),Tv=a("li"),L_e=a("strong"),LYo=o("swin"),xYo=o(" \u2014 "),UX=a("a"),$Yo=o("SwinForImageClassification"),kYo=o(" (Swin model)"),SYo=l(),Mv=a("li"),x_e=a("strong"),RYo=o("van"),PYo=o(" \u2014 "),JX=a("a"),BYo=o("VanForImageClassification"),IYo=o(" (VAN model)"),NYo=l(),Ev=a("li"),$_e=a("strong"),qYo=o("vit"),jYo=o(" \u2014 "),YX=a("a"),DYo=o("ViTForImageClassification"),GYo=o(" (ViT model)"),OYo=l(),Cv=a("p"),VYo=o("The model is set in evaluation mode by default using "),k_e=a("code"),XYo=o("model.eval()"),zYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=a("code"),WYo=o("model.train()"),QYo=l(),F(wv.$$.fragment),uje=l(),ld=a("h2"),Av=a("a"),R_e=a("span"),F(hL.$$.fragment),HYo=l(),P_e=a("span"),UYo=o("AutoModelForVision2Seq"),bje=l(),Do=a("div"),F(pL.$$.fragment),JYo=l(),id=a("p"),YYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KX=a("a"),KYo=o("from_pretrained()"),ZYo=o(" class method or the "),ZX=a("a"),eKo=o("from_config()"),oKo=o(` class
method.`),rKo=l(),_L=a("p"),tKo=o("This class cannot be instantiated directly using "),B_e=a("code"),aKo=o("__init__()"),nKo=o(" (throws an error)."),sKo=l(),_t=a("div"),F(uL.$$.fragment),lKo=l(),I_e=a("p"),iKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dKo=l(),dd=a("p"),cKo=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),fKo=o("not"),mKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),gKo=o("from_pretrained()"),hKo=o(" to load the model weights."),pKo=l(),F(yv.$$.fragment),_Ko=l(),io=a("div"),F(bL.$$.fragment),uKo=l(),q_e=a("p"),bKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vKo=l(),Da=a("p"),FKo=o("The model class to instantiate is selected based on the "),j_e=a("code"),TKo=o("model_type"),MKo=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),EKo=o("pretrained_model_name_or_path"),CKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(":"),yKo=l(),O_e=a("ul"),Lv=a("li"),V_e=a("strong"),LKo=o("vision-encoder-decoder"),xKo=o(" \u2014 "),oz=a("a"),$Ko=o("VisionEncoderDecoderModel"),kKo=o(" (Vision Encoder decoder model)"),SKo=l(),xv=a("p"),RKo=o("The model is set in evaluation mode by default using "),X_e=a("code"),PKo=o("model.eval()"),BKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),IKo=o("model.train()"),NKo=l(),F($v.$$.fragment),vje=l(),cd=a("h2"),kv=a("a"),W_e=a("span"),F(vL.$$.fragment),qKo=l(),Q_e=a("span"),jKo=o("AutoModelForAudioClassification"),Fje=l(),Go=a("div"),F(FL.$$.fragment),DKo=l(),fd=a("p"),GKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rz=a("a"),OKo=o("from_pretrained()"),VKo=o(" class method or the "),tz=a("a"),XKo=o("from_config()"),zKo=o(` class
method.`),WKo=l(),TL=a("p"),QKo=o("This class cannot be instantiated directly using "),H_e=a("code"),HKo=o("__init__()"),UKo=o(" (throws an error)."),JKo=l(),ut=a("div"),F(ML.$$.fragment),YKo=l(),U_e=a("p"),KKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ZKo=l(),md=a("p"),eZo=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),oZo=o("not"),rZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),tZo=o("from_pretrained()"),aZo=o(" to load the model weights."),nZo=l(),F(Sv.$$.fragment),sZo=l(),co=a("div"),F(EL.$$.fragment),lZo=l(),Y_e=a("p"),iZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dZo=l(),Ga=a("p"),cZo=o("The model class to instantiate is selected based on the "),K_e=a("code"),fZo=o("model_type"),mZo=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),gZo=o("pretrained_model_name_or_path"),hZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),pZo=o("pretrained_model_name_or_path"),_Zo=o(":"),uZo=l(),Se=a("ul"),Rv=a("li"),oue=a("strong"),bZo=o("data2vec-audio"),vZo=o(" \u2014 "),nz=a("a"),FZo=o("Data2VecAudioForSequenceClassification"),TZo=o(" (Data2VecAudio model)"),MZo=l(),Pv=a("li"),rue=a("strong"),EZo=o("hubert"),CZo=o(" \u2014 "),sz=a("a"),wZo=o("HubertForSequenceClassification"),AZo=o(" (Hubert model)"),yZo=l(),Bv=a("li"),tue=a("strong"),LZo=o("sew"),xZo=o(" \u2014 "),lz=a("a"),$Zo=o("SEWForSequenceClassification"),kZo=o(" (SEW model)"),SZo=l(),Iv=a("li"),aue=a("strong"),RZo=o("sew-d"),PZo=o(" \u2014 "),iz=a("a"),BZo=o("SEWDForSequenceClassification"),IZo=o(" (SEW-D model)"),NZo=l(),Nv=a("li"),nue=a("strong"),qZo=o("unispeech"),jZo=o(" \u2014 "),dz=a("a"),DZo=o("UniSpeechForSequenceClassification"),GZo=o(" (UniSpeech model)"),OZo=l(),qv=a("li"),sue=a("strong"),VZo=o("unispeech-sat"),XZo=o(" \u2014 "),cz=a("a"),zZo=o("UniSpeechSatForSequenceClassification"),WZo=o(" (UniSpeechSat model)"),QZo=l(),jv=a("li"),lue=a("strong"),HZo=o("wav2vec2"),UZo=o(" \u2014 "),fz=a("a"),JZo=o("Wav2Vec2ForSequenceClassification"),YZo=o(" (Wav2Vec2 model)"),KZo=l(),Dv=a("li"),iue=a("strong"),ZZo=o("wav2vec2-conformer"),eer=o(" \u2014 "),mz=a("a"),oer=o("Wav2Vec2ConformerForSequenceClassification"),rer=o(" (Wav2Vec2-Conformer model)"),ter=l(),Gv=a("li"),due=a("strong"),aer=o("wavlm"),ner=o(" \u2014 "),gz=a("a"),ser=o("WavLMForSequenceClassification"),ler=o(" (WavLM model)"),ier=l(),Ov=a("p"),der=o("The model is set in evaluation mode by default using "),cue=a("code"),cer=o("model.eval()"),fer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),mer=o("model.train()"),ger=l(),F(Vv.$$.fragment),Tje=l(),gd=a("h2"),Xv=a("a"),mue=a("span"),F(CL.$$.fragment),her=l(),gue=a("span"),per=o("AutoModelForAudioFrameClassification"),Mje=l(),Oo=a("div"),F(wL.$$.fragment),_er=l(),hd=a("p"),uer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hz=a("a"),ber=o("from_pretrained()"),ver=o(" class method or the "),pz=a("a"),Fer=o("from_config()"),Ter=o(` class
method.`),Mer=l(),AL=a("p"),Eer=o("This class cannot be instantiated directly using "),hue=a("code"),Cer=o("__init__()"),wer=o(" (throws an error)."),Aer=l(),bt=a("div"),F(yL.$$.fragment),yer=l(),pue=a("p"),Ler=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xer=l(),pd=a("p"),$er=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),ker=o("not"),Ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),Rer=o("from_pretrained()"),Per=o(" to load the model weights."),Ber=l(),F(zv.$$.fragment),Ier=l(),fo=a("div"),F(LL.$$.fragment),Ner=l(),uue=a("p"),qer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jer=l(),Oa=a("p"),Der=o("The model class to instantiate is selected based on the "),bue=a("code"),Ger=o("model_type"),Oer=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),Ver=o("pretrained_model_name_or_path"),Xer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),zer=o("pretrained_model_name_or_path"),Wer=o(":"),Qer=l(),Kr=a("ul"),Wv=a("li"),Tue=a("strong"),Her=o("data2vec-audio"),Uer=o(" \u2014 "),uz=a("a"),Jer=o("Data2VecAudioForAudioFrameClassification"),Yer=o(" (Data2VecAudio model)"),Ker=l(),Qv=a("li"),Mue=a("strong"),Zer=o("unispeech-sat"),eor=o(" \u2014 "),bz=a("a"),oor=o("UniSpeechSatForAudioFrameClassification"),ror=o(" (UniSpeechSat model)"),tor=l(),Hv=a("li"),Eue=a("strong"),aor=o("wav2vec2"),nor=o(" \u2014 "),vz=a("a"),sor=o("Wav2Vec2ForAudioFrameClassification"),lor=o(" (Wav2Vec2 model)"),ior=l(),Uv=a("li"),Cue=a("strong"),dor=o("wav2vec2-conformer"),cor=o(" \u2014 "),Fz=a("a"),mor=o("Wav2Vec2ConformerForAudioFrameClassification"),gor=o(" (Wav2Vec2-Conformer model)"),hor=l(),Jv=a("li"),wue=a("strong"),por=o("wavlm"),_or=o(" \u2014 "),Tz=a("a"),uor=o("WavLMForAudioFrameClassification"),bor=o(" (WavLM model)"),vor=l(),Yv=a("p"),For=o("The model is set in evaluation mode by default using "),Aue=a("code"),Tor=o("model.eval()"),Mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),Eor=o("model.train()"),Cor=l(),F(Kv.$$.fragment),Eje=l(),_d=a("h2"),Zv=a("a"),Lue=a("span"),F(xL.$$.fragment),wor=l(),xue=a("span"),Aor=o("AutoModelForCTC"),Cje=l(),Vo=a("div"),F($L.$$.fragment),yor=l(),ud=a("p"),Lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mz=a("a"),xor=o("from_pretrained()"),$or=o(" class method or the "),Ez=a("a"),kor=o("from_config()"),Sor=o(` class
method.`),Ror=l(),kL=a("p"),Por=o("This class cannot be instantiated directly using "),$ue=a("code"),Bor=o("__init__()"),Ior=o(" (throws an error)."),Nor=l(),vt=a("div"),F(SL.$$.fragment),qor=l(),kue=a("p"),jor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dor=l(),bd=a("p"),Gor=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),Oor=o("not"),Vor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Xor=o("from_pretrained()"),zor=o(" to load the model weights."),Wor=l(),F(eF.$$.fragment),Qor=l(),mo=a("div"),F(RL.$$.fragment),Hor=l(),Rue=a("p"),Uor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jor=l(),Va=a("p"),Yor=o("The model class to instantiate is selected based on the "),Pue=a("code"),Kor=o("model_type"),Zor=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),err=o("pretrained_model_name_or_path"),orr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),rrr=o("pretrained_model_name_or_path"),trr=o(":"),arr=l(),Re=a("ul"),oF=a("li"),Nue=a("strong"),nrr=o("data2vec-audio"),srr=o(" \u2014 "),wz=a("a"),lrr=o("Data2VecAudioForCTC"),irr=o(" (Data2VecAudio model)"),drr=l(),rF=a("li"),que=a("strong"),crr=o("hubert"),frr=o(" \u2014 "),Az=a("a"),mrr=o("HubertForCTC"),grr=o(" (Hubert model)"),hrr=l(),tF=a("li"),jue=a("strong"),prr=o("sew"),_rr=o(" \u2014 "),yz=a("a"),urr=o("SEWForCTC"),brr=o(" (SEW model)"),vrr=l(),aF=a("li"),Due=a("strong"),Frr=o("sew-d"),Trr=o(" \u2014 "),Lz=a("a"),Mrr=o("SEWDForCTC"),Err=o(" (SEW-D model)"),Crr=l(),nF=a("li"),Gue=a("strong"),wrr=o("unispeech"),Arr=o(" \u2014 "),xz=a("a"),yrr=o("UniSpeechForCTC"),Lrr=o(" (UniSpeech model)"),xrr=l(),sF=a("li"),Oue=a("strong"),$rr=o("unispeech-sat"),krr=o(" \u2014 "),$z=a("a"),Srr=o("UniSpeechSatForCTC"),Rrr=o(" (UniSpeechSat model)"),Prr=l(),lF=a("li"),Vue=a("strong"),Brr=o("wav2vec2"),Irr=o(" \u2014 "),kz=a("a"),Nrr=o("Wav2Vec2ForCTC"),qrr=o(" (Wav2Vec2 model)"),jrr=l(),iF=a("li"),Xue=a("strong"),Drr=o("wav2vec2-conformer"),Grr=o(" \u2014 "),Sz=a("a"),Orr=o("Wav2Vec2ConformerForCTC"),Vrr=o(" (Wav2Vec2-Conformer model)"),Xrr=l(),dF=a("li"),zue=a("strong"),zrr=o("wavlm"),Wrr=o(" \u2014 "),Rz=a("a"),Qrr=o("WavLMForCTC"),Hrr=o(" (WavLM model)"),Urr=l(),cF=a("p"),Jrr=o("The model is set in evaluation mode by default using "),Wue=a("code"),Yrr=o("model.eval()"),Krr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),Zrr=o("model.train()"),etr=l(),F(fF.$$.fragment),wje=l(),vd=a("h2"),mF=a("a"),Hue=a("span"),F(PL.$$.fragment),otr=l(),Uue=a("span"),rtr=o("AutoModelForSpeechSeq2Seq"),Aje=l(),Xo=a("div"),F(BL.$$.fragment),ttr=l(),Fd=a("p"),atr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pz=a("a"),ntr=o("from_pretrained()"),str=o(" class method or the "),Bz=a("a"),ltr=o("from_config()"),itr=o(` class
method.`),dtr=l(),IL=a("p"),ctr=o("This class cannot be instantiated directly using "),Jue=a("code"),ftr=o("__init__()"),mtr=o(" (throws an error)."),gtr=l(),Ft=a("div"),F(NL.$$.fragment),htr=l(),Yue=a("p"),ptr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_tr=l(),Td=a("p"),utr=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),btr=o("not"),vtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Ftr=o("from_pretrained()"),Ttr=o(" to load the model weights."),Mtr=l(),F(gF.$$.fragment),Etr=l(),go=a("div"),F(qL.$$.fragment),Ctr=l(),Zue=a("p"),wtr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Atr=l(),Xa=a("p"),ytr=o("The model class to instantiate is selected based on the "),e4e=a("code"),Ltr=o("model_type"),xtr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),$tr=o("pretrained_model_name_or_path"),ktr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),Str=o("pretrained_model_name_or_path"),Rtr=o(":"),Ptr=l(),jL=a("ul"),hF=a("li"),t4e=a("strong"),Btr=o("speech-encoder-decoder"),Itr=o(" \u2014 "),Nz=a("a"),Ntr=o("SpeechEncoderDecoderModel"),qtr=o(" (Speech Encoder decoder model)"),jtr=l(),pF=a("li"),a4e=a("strong"),Dtr=o("speech_to_text"),Gtr=o(" \u2014 "),qz=a("a"),Otr=o("Speech2TextForConditionalGeneration"),Vtr=o(" (Speech2Text model)"),Xtr=l(),_F=a("p"),ztr=o("The model is set in evaluation mode by default using "),n4e=a("code"),Wtr=o("model.eval()"),Qtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s4e=a("code"),Htr=o("model.train()"),Utr=l(),F(uF.$$.fragment),yje=l(),Md=a("h2"),bF=a("a"),l4e=a("span"),F(DL.$$.fragment),Jtr=l(),i4e=a("span"),Ytr=o("AutoModelForAudioXVector"),Lje=l(),zo=a("div"),F(GL.$$.fragment),Ktr=l(),Ed=a("p"),Ztr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jz=a("a"),ear=o("from_pretrained()"),oar=o(" class method or the "),Dz=a("a"),rar=o("from_config()"),tar=o(` class
method.`),aar=l(),OL=a("p"),nar=o("This class cannot be instantiated directly using "),d4e=a("code"),sar=o("__init__()"),lar=o(" (throws an error)."),iar=l(),Tt=a("div"),F(VL.$$.fragment),dar=l(),c4e=a("p"),car=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),far=l(),Cd=a("p"),mar=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),gar=o("not"),har=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),par=o("from_pretrained()"),_ar=o(" to load the model weights."),uar=l(),F(vF.$$.fragment),bar=l(),ho=a("div"),F(XL.$$.fragment),Far=l(),m4e=a("p"),Tar=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mar=l(),za=a("p"),Ear=o("The model class to instantiate is selected based on the "),g4e=a("code"),Car=o("model_type"),war=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),Aar=o("pretrained_model_name_or_path"),yar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),Lar=o("pretrained_model_name_or_path"),xar=o(":"),$ar=l(),Zr=a("ul"),FF=a("li"),_4e=a("strong"),kar=o("data2vec-audio"),Sar=o(" \u2014 "),Oz=a("a"),Rar=o("Data2VecAudioForXVector"),Par=o(" (Data2VecAudio model)"),Bar=l(),TF=a("li"),u4e=a("strong"),Iar=o("unispeech-sat"),Nar=o(" \u2014 "),Vz=a("a"),qar=o("UniSpeechSatForXVector"),jar=o(" (UniSpeechSat model)"),Dar=l(),MF=a("li"),b4e=a("strong"),Gar=o("wav2vec2"),Oar=o(" \u2014 "),Xz=a("a"),Var=o("Wav2Vec2ForXVector"),Xar=o(" (Wav2Vec2 model)"),zar=l(),EF=a("li"),v4e=a("strong"),War=o("wav2vec2-conformer"),Qar=o(" \u2014 "),zz=a("a"),Har=o("Wav2Vec2ConformerForXVector"),Uar=o(" (Wav2Vec2-Conformer model)"),Jar=l(),CF=a("li"),F4e=a("strong"),Yar=o("wavlm"),Kar=o(" \u2014 "),Wz=a("a"),Zar=o("WavLMForXVector"),enr=o(" (WavLM model)"),onr=l(),wF=a("p"),rnr=o("The model is set in evaluation mode by default using "),T4e=a("code"),tnr=o("model.eval()"),anr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=a("code"),nnr=o("model.train()"),snr=l(),F(AF.$$.fragment),xje=l(),wd=a("h2"),yF=a("a"),E4e=a("span"),F(zL.$$.fragment),lnr=l(),C4e=a("span"),inr=o("AutoModelForMaskedImageModeling"),$je=l(),Wo=a("div"),F(WL.$$.fragment),dnr=l(),Ad=a("p"),cnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Qz=a("a"),fnr=o("from_pretrained()"),mnr=o(" class method or the "),Hz=a("a"),gnr=o("from_config()"),hnr=o(` class
method.`),pnr=l(),QL=a("p"),_nr=o("This class cannot be instantiated directly using "),w4e=a("code"),unr=o("__init__()"),bnr=o(" (throws an error)."),vnr=l(),Mt=a("div"),F(HL.$$.fragment),Fnr=l(),A4e=a("p"),Tnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Mnr=l(),yd=a("p"),Enr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),Cnr=o("not"),wnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Anr=o("from_pretrained()"),ynr=o(" to load the model weights."),Lnr=l(),F(LF.$$.fragment),xnr=l(),po=a("div"),F(UL.$$.fragment),$nr=l(),L4e=a("p"),knr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Snr=l(),Wa=a("p"),Rnr=o("The model class to instantiate is selected based on the "),x4e=a("code"),Pnr=o("model_type"),Bnr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),Inr=o("pretrained_model_name_or_path"),Nnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),qnr=o("pretrained_model_name_or_path"),jnr=o(":"),Dnr=l(),Ld=a("ul"),xF=a("li"),S4e=a("strong"),Gnr=o("deit"),Onr=o(" \u2014 "),Jz=a("a"),Vnr=o("DeiTForMaskedImageModeling"),Xnr=o(" (DeiT model)"),znr=l(),$F=a("li"),R4e=a("strong"),Wnr=o("swin"),Qnr=o(" \u2014 "),Yz=a("a"),Hnr=o("SwinForMaskedImageModeling"),Unr=o(" (Swin model)"),Jnr=l(),kF=a("li"),P4e=a("strong"),Ynr=o("vit"),Knr=o(" \u2014 "),Kz=a("a"),Znr=o("ViTForMaskedImageModeling"),esr=o(" (ViT model)"),osr=l(),SF=a("p"),rsr=o("The model is set in evaluation mode by default using "),B4e=a("code"),tsr=o("model.eval()"),asr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I4e=a("code"),nsr=o("model.train()"),ssr=l(),F(RF.$$.fragment),kje=l(),xd=a("h2"),PF=a("a"),N4e=a("span"),F(JL.$$.fragment),lsr=l(),q4e=a("span"),isr=o("AutoModelForObjectDetection"),Sje=l(),Qo=a("div"),F(YL.$$.fragment),dsr=l(),$d=a("p"),csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zz=a("a"),fsr=o("from_pretrained()"),msr=o(" class method or the "),eW=a("a"),gsr=o("from_config()"),hsr=o(` class
method.`),psr=l(),KL=a("p"),_sr=o("This class cannot be instantiated directly using "),j4e=a("code"),usr=o("__init__()"),bsr=o(" (throws an error)."),vsr=l(),Et=a("div"),F(ZL.$$.fragment),Fsr=l(),D4e=a("p"),Tsr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Msr=l(),kd=a("p"),Esr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),Csr=o("not"),wsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),Asr=o("from_pretrained()"),ysr=o(" to load the model weights."),Lsr=l(),F(BF.$$.fragment),xsr=l(),_o=a("div"),F(e8.$$.fragment),$sr=l(),O4e=a("p"),ksr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ssr=l(),Qa=a("p"),Rsr=o("The model class to instantiate is selected based on the "),V4e=a("code"),Psr=o("model_type"),Bsr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),Isr=o("pretrained_model_name_or_path"),Nsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),qsr=o("pretrained_model_name_or_path"),jsr=o(":"),Dsr=l(),o8=a("ul"),IF=a("li"),W4e=a("strong"),Gsr=o("detr"),Osr=o(" \u2014 "),rW=a("a"),Vsr=o("DetrForObjectDetection"),Xsr=o(" (DETR model)"),zsr=l(),NF=a("li"),Q4e=a("strong"),Wsr=o("yolos"),Qsr=o(" \u2014 "),tW=a("a"),Hsr=o("YolosForObjectDetection"),Usr=o(" (YOLOS model)"),Jsr=l(),qF=a("p"),Ysr=o("The model is set in evaluation mode by default using "),H4e=a("code"),Ksr=o("model.eval()"),Zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=a("code"),elr=o("model.train()"),olr=l(),F(jF.$$.fragment),Rje=l(),Sd=a("h2"),DF=a("a"),J4e=a("span"),F(r8.$$.fragment),rlr=l(),Y4e=a("span"),tlr=o("AutoModelForImageSegmentation"),Pje=l(),Ho=a("div"),F(t8.$$.fragment),alr=l(),Rd=a("p"),nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aW=a("a"),slr=o("from_pretrained()"),llr=o(" class method or the "),nW=a("a"),ilr=o("from_config()"),dlr=o(` class
method.`),clr=l(),a8=a("p"),flr=o("This class cannot be instantiated directly using "),K4e=a("code"),mlr=o("__init__()"),glr=o(" (throws an error)."),hlr=l(),Ct=a("div"),F(n8.$$.fragment),plr=l(),Z4e=a("p"),_lr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ulr=l(),Pd=a("p"),blr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),vlr=o("not"),Flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" to load the model weights."),Elr=l(),F(GF.$$.fragment),Clr=l(),uo=a("div"),F(s8.$$.fragment),wlr=l(),o1e=a("p"),Alr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ylr=l(),Ha=a("p"),Llr=o("The model class to instantiate is selected based on the "),r1e=a("code"),xlr=o("model_type"),$lr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Rlr=o("pretrained_model_name_or_path"),Plr=o(":"),Blr=l(),n1e=a("ul"),OF=a("li"),s1e=a("strong"),Ilr=o("detr"),Nlr=o(" \u2014 "),lW=a("a"),qlr=o("DetrForSegmentation"),jlr=o(" (DETR model)"),Dlr=l(),VF=a("p"),Glr=o("The model is set in evaluation mode by default using "),l1e=a("code"),Olr=o("model.eval()"),Vlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Xlr=o("model.train()"),zlr=l(),F(XF.$$.fragment),Bje=l(),Bd=a("h2"),zF=a("a"),d1e=a("span"),F(l8.$$.fragment),Wlr=l(),c1e=a("span"),Qlr=o("AutoModelForSemanticSegmentation"),Ije=l(),Uo=a("div"),F(i8.$$.fragment),Hlr=l(),Id=a("p"),Ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iW=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" class method or the "),dW=a("a"),Klr=o("from_config()"),Zlr=o(` class
method.`),eir=l(),d8=a("p"),oir=o("This class cannot be instantiated directly using "),f1e=a("code"),rir=o("__init__()"),tir=o(" (throws an error)."),air=l(),wt=a("div"),F(c8.$$.fragment),nir=l(),m1e=a("p"),sir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lir=l(),Nd=a("p"),iir=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),dir=o("not"),cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),fir=o("from_pretrained()"),mir=o(" to load the model weights."),gir=l(),F(WF.$$.fragment),hir=l(),bo=a("div"),F(f8.$$.fragment),pir=l(),h1e=a("p"),_ir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uir=l(),Ua=a("p"),bir=o("The model class to instantiate is selected based on the "),p1e=a("code"),vir=o("model_type"),Fir=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),Eir=o("pretrained_model_name_or_path"),Cir=o(":"),wir=l(),Ja=a("ul"),QF=a("li"),b1e=a("strong"),Air=o("beit"),yir=o(" \u2014 "),fW=a("a"),Lir=o("BeitForSemanticSegmentation"),xir=o(" (BEiT model)"),$ir=l(),HF=a("li"),v1e=a("strong"),kir=o("data2vec-vision"),Sir=o(" \u2014 "),mW=a("a"),Rir=o("Data2VecVisionForSemanticSegmentation"),Pir=o(" (Data2VecVision model)"),Bir=l(),UF=a("li"),F1e=a("strong"),Iir=o("dpt"),Nir=o(" \u2014 "),gW=a("a"),qir=o("DPTForSemanticSegmentation"),jir=o(" (DPT model)"),Dir=l(),JF=a("li"),T1e=a("strong"),Gir=o("segformer"),Oir=o(" \u2014 "),hW=a("a"),Vir=o("SegformerForSemanticSegmentation"),Xir=o(" (SegFormer model)"),zir=l(),YF=a("p"),Wir=o("The model is set in evaluation mode by default using "),M1e=a("code"),Qir=o("model.eval()"),Hir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E1e=a("code"),Uir=o("model.train()"),Jir=l(),F(KF.$$.fragment),Nje=l(),qd=a("h2"),ZF=a("a"),C1e=a("span"),F(m8.$$.fragment),Yir=l(),w1e=a("span"),Kir=o("AutoModelForInstanceSegmentation"),qje=l(),Jo=a("div"),F(g8.$$.fragment),Zir=l(),jd=a("p"),edr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=a("a"),odr=o("from_pretrained()"),rdr=o(" class method or the "),_W=a("a"),tdr=o("from_config()"),adr=o(` class
method.`),ndr=l(),h8=a("p"),sdr=o("This class cannot be instantiated directly using "),A1e=a("code"),ldr=o("__init__()"),idr=o(" (throws an error)."),ddr=l(),At=a("div"),F(p8.$$.fragment),cdr=l(),y1e=a("p"),fdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mdr=l(),Dd=a("p"),gdr=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),hdr=o("not"),pdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),_dr=o("from_pretrained()"),udr=o(" to load the model weights."),bdr=l(),F(eT.$$.fragment),vdr=l(),vo=a("div"),F(_8.$$.fragment),Fdr=l(),x1e=a("p"),Tdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Mdr=l(),Ya=a("p"),Edr=o("The model class to instantiate is selected based on the "),$1e=a("code"),Cdr=o("model_type"),wdr=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),Adr=o("pretrained_model_name_or_path"),ydr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=a("code"),Ldr=o("pretrained_model_name_or_path"),xdr=o(":"),$dr=l(),R1e=a("ul"),oT=a("li"),P1e=a("strong"),kdr=o("maskformer"),Sdr=o(" \u2014 "),bW=a("a"),Rdr=o("MaskFormerForInstanceSegmentation"),Pdr=o(" (MaskFormer model)"),Bdr=l(),rT=a("p"),Idr=o("The model is set in evaluation mode by default using "),B1e=a("code"),Ndr=o("model.eval()"),qdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=a("code"),jdr=o("model.train()"),Ddr=l(),F(tT.$$.fragment),jje=l(),Gd=a("h2"),aT=a("a"),N1e=a("span"),F(u8.$$.fragment),Gdr=l(),q1e=a("span"),Odr=o("TFAutoModel"),Dje=l(),Yo=a("div"),F(b8.$$.fragment),Vdr=l(),Od=a("p"),Xdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=a("a"),zdr=o("from_pretrained()"),Wdr=o(" class method or the "),FW=a("a"),Qdr=o("from_config()"),Hdr=o(` class
method.`),Udr=l(),v8=a("p"),Jdr=o("This class cannot be instantiated directly using "),j1e=a("code"),Ydr=o("__init__()"),Kdr=o(" (throws an error)."),Zdr=l(),yt=a("div"),F(F8.$$.fragment),ecr=l(),D1e=a("p"),ocr=o("Instantiates one of the base model classes of the library from a configuration."),rcr=l(),Vd=a("p"),tcr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),acr=o("not"),ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),scr=o("from_pretrained()"),lcr=o(" to load the model weights."),icr=l(),F(nT.$$.fragment),dcr=l(),wr=a("div"),F(T8.$$.fragment),ccr=l(),O1e=a("p"),fcr=o("Instantiate one of the base model classes of the library from a pretrained model."),mcr=l(),Ka=a("p"),gcr=o("The model class to instantiate is selected based on the "),V1e=a("code"),hcr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),_cr=o("pretrained_model_name_or_path"),ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(":"),Fcr=l(),q=a("ul"),sT=a("li"),W1e=a("strong"),Tcr=o("albert"),Mcr=o(" \u2014 "),MW=a("a"),Ecr=o("TFAlbertModel"),Ccr=o(" (ALBERT model)"),wcr=l(),lT=a("li"),Q1e=a("strong"),Acr=o("bart"),ycr=o(" \u2014 "),EW=a("a"),Lcr=o("TFBartModel"),xcr=o(" (BART model)"),$cr=l(),iT=a("li"),H1e=a("strong"),kcr=o("bert"),Scr=o(" \u2014 "),CW=a("a"),Rcr=o("TFBertModel"),Pcr=o(" (BERT model)"),Bcr=l(),dT=a("li"),U1e=a("strong"),Icr=o("blenderbot"),Ncr=o(" \u2014 "),wW=a("a"),qcr=o("TFBlenderbotModel"),jcr=o(" (Blenderbot model)"),Dcr=l(),cT=a("li"),J1e=a("strong"),Gcr=o("blenderbot-small"),Ocr=o(" \u2014 "),AW=a("a"),Vcr=o("TFBlenderbotSmallModel"),Xcr=o(" (BlenderbotSmall model)"),zcr=l(),fT=a("li"),Y1e=a("strong"),Wcr=o("camembert"),Qcr=o(" \u2014 "),yW=a("a"),Hcr=o("TFCamembertModel"),Ucr=o(" (CamemBERT model)"),Jcr=l(),mT=a("li"),K1e=a("strong"),Ycr=o("clip"),Kcr=o(" \u2014 "),LW=a("a"),Zcr=o("TFCLIPModel"),efr=o(" (CLIP model)"),ofr=l(),gT=a("li"),Z1e=a("strong"),rfr=o("convbert"),tfr=o(" \u2014 "),xW=a("a"),afr=o("TFConvBertModel"),nfr=o(" (ConvBERT model)"),sfr=l(),hT=a("li"),e7e=a("strong"),lfr=o("convnext"),ifr=o(" \u2014 "),$W=a("a"),dfr=o("TFConvNextModel"),cfr=o(" (ConvNext model)"),ffr=l(),pT=a("li"),o7e=a("strong"),mfr=o("ctrl"),gfr=o(" \u2014 "),kW=a("a"),hfr=o("TFCTRLModel"),pfr=o(" (CTRL model)"),_fr=l(),_T=a("li"),r7e=a("strong"),ufr=o("data2vec-vision"),bfr=o(" \u2014 "),SW=a("a"),vfr=o("TFData2VecVisionModel"),Ffr=o(" (Data2VecVision model)"),Tfr=l(),uT=a("li"),t7e=a("strong"),Mfr=o("deberta"),Efr=o(" \u2014 "),RW=a("a"),Cfr=o("TFDebertaModel"),wfr=o(" (DeBERTa model)"),Afr=l(),bT=a("li"),a7e=a("strong"),yfr=o("deberta-v2"),Lfr=o(" \u2014 "),PW=a("a"),xfr=o("TFDebertaV2Model"),$fr=o(" (DeBERTa-v2 model)"),kfr=l(),vT=a("li"),n7e=a("strong"),Sfr=o("distilbert"),Rfr=o(" \u2014 "),BW=a("a"),Pfr=o("TFDistilBertModel"),Bfr=o(" (DistilBERT model)"),Ifr=l(),FT=a("li"),s7e=a("strong"),Nfr=o("dpr"),qfr=o(" \u2014 "),IW=a("a"),jfr=o("TFDPRQuestionEncoder"),Dfr=o(" (DPR model)"),Gfr=l(),TT=a("li"),l7e=a("strong"),Ofr=o("electra"),Vfr=o(" \u2014 "),NW=a("a"),Xfr=o("TFElectraModel"),zfr=o(" (ELECTRA model)"),Wfr=l(),MT=a("li"),i7e=a("strong"),Qfr=o("flaubert"),Hfr=o(" \u2014 "),qW=a("a"),Ufr=o("TFFlaubertModel"),Jfr=o(" (FlauBERT model)"),Yfr=l(),Is=a("li"),d7e=a("strong"),Kfr=o("funnel"),Zfr=o(" \u2014 "),jW=a("a"),emr=o("TFFunnelModel"),omr=o(" or "),DW=a("a"),rmr=o("TFFunnelBaseModel"),tmr=o(" (Funnel Transformer model)"),amr=l(),ET=a("li"),c7e=a("strong"),nmr=o("gpt2"),smr=o(" \u2014 "),GW=a("a"),lmr=o("TFGPT2Model"),imr=o(" (OpenAI GPT-2 model)"),dmr=l(),CT=a("li"),f7e=a("strong"),cmr=o("gptj"),fmr=o(" \u2014 "),OW=a("a"),mmr=o("TFGPTJModel"),gmr=o(" (GPT-J model)"),hmr=l(),wT=a("li"),m7e=a("strong"),pmr=o("hubert"),_mr=o(" \u2014 "),VW=a("a"),umr=o("TFHubertModel"),bmr=o(" (Hubert model)"),vmr=l(),AT=a("li"),g7e=a("strong"),Fmr=o("layoutlm"),Tmr=o(" \u2014 "),XW=a("a"),Mmr=o("TFLayoutLMModel"),Emr=o(" (LayoutLM model)"),Cmr=l(),yT=a("li"),h7e=a("strong"),wmr=o("led"),Amr=o(" \u2014 "),zW=a("a"),ymr=o("TFLEDModel"),Lmr=o(" (LED model)"),xmr=l(),LT=a("li"),p7e=a("strong"),$mr=o("longformer"),kmr=o(" \u2014 "),WW=a("a"),Smr=o("TFLongformerModel"),Rmr=o(" (Longformer model)"),Pmr=l(),xT=a("li"),_7e=a("strong"),Bmr=o("lxmert"),Imr=o(" \u2014 "),QW=a("a"),Nmr=o("TFLxmertModel"),qmr=o(" (LXMERT model)"),jmr=l(),$T=a("li"),u7e=a("strong"),Dmr=o("marian"),Gmr=o(" \u2014 "),HW=a("a"),Omr=o("TFMarianModel"),Vmr=o(" (Marian model)"),Xmr=l(),kT=a("li"),b7e=a("strong"),zmr=o("mbart"),Wmr=o(" \u2014 "),UW=a("a"),Qmr=o("TFMBartModel"),Hmr=o(" (mBART model)"),Umr=l(),ST=a("li"),v7e=a("strong"),Jmr=o("mobilebert"),Ymr=o(" \u2014 "),JW=a("a"),Kmr=o("TFMobileBertModel"),Zmr=o(" (MobileBERT model)"),egr=l(),RT=a("li"),F7e=a("strong"),ogr=o("mpnet"),rgr=o(" \u2014 "),YW=a("a"),tgr=o("TFMPNetModel"),agr=o(" (MPNet model)"),ngr=l(),PT=a("li"),T7e=a("strong"),sgr=o("mt5"),lgr=o(" \u2014 "),KW=a("a"),igr=o("TFMT5Model"),dgr=o(" (mT5 model)"),cgr=l(),BT=a("li"),M7e=a("strong"),fgr=o("openai-gpt"),mgr=o(" \u2014 "),ZW=a("a"),ggr=o("TFOpenAIGPTModel"),hgr=o(" (OpenAI GPT model)"),pgr=l(),IT=a("li"),E7e=a("strong"),_gr=o("opt"),ugr=o(" \u2014 "),eQ=a("a"),bgr=o("TFOPTModel"),vgr=o(" (OPT model)"),Fgr=l(),NT=a("li"),C7e=a("strong"),Tgr=o("pegasus"),Mgr=o(" \u2014 "),oQ=a("a"),Egr=o("TFPegasusModel"),Cgr=o(" (Pegasus model)"),wgr=l(),qT=a("li"),w7e=a("strong"),Agr=o("rembert"),ygr=o(" \u2014 "),rQ=a("a"),Lgr=o("TFRemBertModel"),xgr=o(" (RemBERT model)"),$gr=l(),jT=a("li"),A7e=a("strong"),kgr=o("roberta"),Sgr=o(" \u2014 "),tQ=a("a"),Rgr=o("TFRobertaModel"),Pgr=o(" (RoBERTa model)"),Bgr=l(),DT=a("li"),y7e=a("strong"),Igr=o("roformer"),Ngr=o(" \u2014 "),aQ=a("a"),qgr=o("TFRoFormerModel"),jgr=o(" (RoFormer model)"),Dgr=l(),GT=a("li"),L7e=a("strong"),Ggr=o("speech_to_text"),Ogr=o(" \u2014 "),nQ=a("a"),Vgr=o("TFSpeech2TextModel"),Xgr=o(" (Speech2Text model)"),zgr=l(),OT=a("li"),x7e=a("strong"),Wgr=o("swin"),Qgr=o(" \u2014 "),sQ=a("a"),Hgr=o("TFSwinModel"),Ugr=o(" (Swin model)"),Jgr=l(),VT=a("li"),$7e=a("strong"),Ygr=o("t5"),Kgr=o(" \u2014 "),lQ=a("a"),Zgr=o("TFT5Model"),ehr=o(" (T5 model)"),ohr=l(),XT=a("li"),k7e=a("strong"),rhr=o("tapas"),thr=o(" \u2014 "),iQ=a("a"),ahr=o("TFTapasModel"),nhr=o(" (TAPAS model)"),shr=l(),zT=a("li"),S7e=a("strong"),lhr=o("transfo-xl"),ihr=o(" \u2014 "),dQ=a("a"),dhr=o("TFTransfoXLModel"),chr=o(" (Transformer-XL model)"),fhr=l(),WT=a("li"),R7e=a("strong"),mhr=o("vit"),ghr=o(" \u2014 "),cQ=a("a"),hhr=o("TFViTModel"),phr=o(" (ViT model)"),_hr=l(),QT=a("li"),P7e=a("strong"),uhr=o("vit_mae"),bhr=o(" \u2014 "),fQ=a("a"),vhr=o("TFViTMAEModel"),Fhr=o(" (ViTMAE model)"),Thr=l(),HT=a("li"),B7e=a("strong"),Mhr=o("wav2vec2"),Ehr=o(" \u2014 "),mQ=a("a"),Chr=o("TFWav2Vec2Model"),whr=o(" (Wav2Vec2 model)"),Ahr=l(),UT=a("li"),I7e=a("strong"),yhr=o("xlm"),Lhr=o(" \u2014 "),gQ=a("a"),xhr=o("TFXLMModel"),$hr=o(" (XLM model)"),khr=l(),JT=a("li"),N7e=a("strong"),Shr=o("xlm-roberta"),Rhr=o(" \u2014 "),hQ=a("a"),Phr=o("TFXLMRobertaModel"),Bhr=o(" (XLM-RoBERTa model)"),Ihr=l(),YT=a("li"),q7e=a("strong"),Nhr=o("xlnet"),qhr=o(" \u2014 "),pQ=a("a"),jhr=o("TFXLNetModel"),Dhr=o(" (XLNet model)"),Ghr=l(),F(KT.$$.fragment),Gje=l(),Xd=a("h2"),ZT=a("a"),j7e=a("span"),F(M8.$$.fragment),Ohr=l(),D7e=a("span"),Vhr=o("TFAutoModelForPreTraining"),Oje=l(),Ko=a("div"),F(E8.$$.fragment),Xhr=l(),zd=a("p"),zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=a("a"),Whr=o("from_pretrained()"),Qhr=o(" class method or the "),uQ=a("a"),Hhr=o("from_config()"),Uhr=o(` class
method.`),Jhr=l(),C8=a("p"),Yhr=o("This class cannot be instantiated directly using "),G7e=a("code"),Khr=o("__init__()"),Zhr=o(" (throws an error)."),epr=l(),Lt=a("div"),F(w8.$$.fragment),opr=l(),O7e=a("p"),rpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tpr=l(),Wd=a("p"),apr=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),npr=o("not"),spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),lpr=o("from_pretrained()"),ipr=o(" to load the model weights."),dpr=l(),F(eM.$$.fragment),cpr=l(),Ar=a("div"),F(A8.$$.fragment),fpr=l(),X7e=a("p"),mpr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gpr=l(),Za=a("p"),hpr=o("The model class to instantiate is selected based on the "),z7e=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),vpr=o("pretrained_model_name_or_path"),Fpr=o(":"),Tpr=l(),se=a("ul"),oM=a("li"),H7e=a("strong"),Mpr=o("albert"),Epr=o(" \u2014 "),vQ=a("a"),Cpr=o("TFAlbertForPreTraining"),wpr=o(" (ALBERT model)"),Apr=l(),rM=a("li"),U7e=a("strong"),ypr=o("bart"),Lpr=o(" \u2014 "),FQ=a("a"),xpr=o("TFBartForConditionalGeneration"),$pr=o(" (BART model)"),kpr=l(),tM=a("li"),J7e=a("strong"),Spr=o("bert"),Rpr=o(" \u2014 "),TQ=a("a"),Ppr=o("TFBertForPreTraining"),Bpr=o(" (BERT model)"),Ipr=l(),aM=a("li"),Y7e=a("strong"),Npr=o("camembert"),qpr=o(" \u2014 "),MQ=a("a"),jpr=o("TFCamembertForMaskedLM"),Dpr=o(" (CamemBERT model)"),Gpr=l(),nM=a("li"),K7e=a("strong"),Opr=o("ctrl"),Vpr=o(" \u2014 "),EQ=a("a"),Xpr=o("TFCTRLLMHeadModel"),zpr=o(" (CTRL model)"),Wpr=l(),sM=a("li"),Z7e=a("strong"),Qpr=o("distilbert"),Hpr=o(" \u2014 "),CQ=a("a"),Upr=o("TFDistilBertForMaskedLM"),Jpr=o(" (DistilBERT model)"),Ypr=l(),lM=a("li"),ebe=a("strong"),Kpr=o("electra"),Zpr=o(" \u2014 "),wQ=a("a"),e_r=o("TFElectraForPreTraining"),o_r=o(" (ELECTRA model)"),r_r=l(),iM=a("li"),obe=a("strong"),t_r=o("flaubert"),a_r=o(" \u2014 "),AQ=a("a"),n_r=o("TFFlaubertWithLMHeadModel"),s_r=o(" (FlauBERT model)"),l_r=l(),dM=a("li"),rbe=a("strong"),i_r=o("funnel"),d_r=o(" \u2014 "),yQ=a("a"),c_r=o("TFFunnelForPreTraining"),f_r=o(" (Funnel Transformer model)"),m_r=l(),cM=a("li"),tbe=a("strong"),g_r=o("gpt2"),h_r=o(" \u2014 "),LQ=a("a"),p_r=o("TFGPT2LMHeadModel"),__r=o(" (OpenAI GPT-2 model)"),u_r=l(),fM=a("li"),abe=a("strong"),b_r=o("layoutlm"),v_r=o(" \u2014 "),xQ=a("a"),F_r=o("TFLayoutLMForMaskedLM"),T_r=o(" (LayoutLM model)"),M_r=l(),mM=a("li"),nbe=a("strong"),E_r=o("lxmert"),C_r=o(" \u2014 "),$Q=a("a"),w_r=o("TFLxmertForPreTraining"),A_r=o(" (LXMERT model)"),y_r=l(),gM=a("li"),sbe=a("strong"),L_r=o("mobilebert"),x_r=o(" \u2014 "),kQ=a("a"),$_r=o("TFMobileBertForPreTraining"),k_r=o(" (MobileBERT model)"),S_r=l(),hM=a("li"),lbe=a("strong"),R_r=o("mpnet"),P_r=o(" \u2014 "),SQ=a("a"),B_r=o("TFMPNetForMaskedLM"),I_r=o(" (MPNet model)"),N_r=l(),pM=a("li"),ibe=a("strong"),q_r=o("openai-gpt"),j_r=o(" \u2014 "),RQ=a("a"),D_r=o("TFOpenAIGPTLMHeadModel"),G_r=o(" (OpenAI GPT model)"),O_r=l(),_M=a("li"),dbe=a("strong"),V_r=o("roberta"),X_r=o(" \u2014 "),PQ=a("a"),z_r=o("TFRobertaForMaskedLM"),W_r=o(" (RoBERTa model)"),Q_r=l(),uM=a("li"),cbe=a("strong"),H_r=o("t5"),U_r=o(" \u2014 "),BQ=a("a"),J_r=o("TFT5ForConditionalGeneration"),Y_r=o(" (T5 model)"),K_r=l(),bM=a("li"),fbe=a("strong"),Z_r=o("tapas"),eur=o(" \u2014 "),IQ=a("a"),our=o("TFTapasForMaskedLM"),rur=o(" (TAPAS model)"),tur=l(),vM=a("li"),mbe=a("strong"),aur=o("transfo-xl"),nur=o(" \u2014 "),NQ=a("a"),sur=o("TFTransfoXLLMHeadModel"),lur=o(" (Transformer-XL model)"),iur=l(),FM=a("li"),gbe=a("strong"),dur=o("vit_mae"),cur=o(" \u2014 "),qQ=a("a"),fur=o("TFViTMAEForPreTraining"),mur=o(" (ViTMAE model)"),gur=l(),TM=a("li"),hbe=a("strong"),hur=o("xlm"),pur=o(" \u2014 "),jQ=a("a"),_ur=o("TFXLMWithLMHeadModel"),uur=o(" (XLM model)"),bur=l(),MM=a("li"),pbe=a("strong"),vur=o("xlm-roberta"),Fur=o(" \u2014 "),DQ=a("a"),Tur=o("TFXLMRobertaForMaskedLM"),Mur=o(" (XLM-RoBERTa model)"),Eur=l(),EM=a("li"),_be=a("strong"),Cur=o("xlnet"),wur=o(" \u2014 "),GQ=a("a"),Aur=o("TFXLNetLMHeadModel"),yur=o(" (XLNet model)"),Lur=l(),F(CM.$$.fragment),Vje=l(),Qd=a("h2"),wM=a("a"),ube=a("span"),F(y8.$$.fragment),xur=l(),bbe=a("span"),$ur=o("TFAutoModelForCausalLM"),Xje=l(),Zo=a("div"),F(L8.$$.fragment),kur=l(),Hd=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=a("a"),Rur=o("from_pretrained()"),Pur=o(" class method or the "),VQ=a("a"),Bur=o("from_config()"),Iur=o(` class
method.`),Nur=l(),x8=a("p"),qur=o("This class cannot be instantiated directly using "),vbe=a("code"),jur=o("__init__()"),Dur=o(" (throws an error)."),Gur=l(),xt=a("div"),F($8.$$.fragment),Our=l(),Fbe=a("p"),Vur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xur=l(),Ud=a("p"),zur=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),Wur=o("not"),Qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Hur=o("from_pretrained()"),Uur=o(" to load the model weights."),Jur=l(),F(AM.$$.fragment),Yur=l(),yr=a("div"),F(k8.$$.fragment),Kur=l(),Mbe=a("p"),Zur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e4r=l(),en=a("p"),o4r=o("The model class to instantiate is selected based on the "),Ebe=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),Te=a("ul"),yM=a("li"),Abe=a("strong"),d4r=o("bert"),c4r=o(" \u2014 "),zQ=a("a"),f4r=o("TFBertLMHeadModel"),m4r=o(" (BERT model)"),g4r=l(),LM=a("li"),ybe=a("strong"),h4r=o("camembert"),p4r=o(" \u2014 "),WQ=a("a"),_4r=o("TFCamembertForCausalLM"),u4r=o(" (CamemBERT model)"),b4r=l(),xM=a("li"),Lbe=a("strong"),v4r=o("ctrl"),F4r=o(" \u2014 "),QQ=a("a"),T4r=o("TFCTRLLMHeadModel"),M4r=o(" (CTRL model)"),E4r=l(),$M=a("li"),xbe=a("strong"),C4r=o("gpt2"),w4r=o(" \u2014 "),HQ=a("a"),A4r=o("TFGPT2LMHeadModel"),y4r=o(" (OpenAI GPT-2 model)"),L4r=l(),kM=a("li"),$be=a("strong"),x4r=o("gptj"),$4r=o(" \u2014 "),UQ=a("a"),k4r=o("TFGPTJForCausalLM"),S4r=o(" (GPT-J model)"),R4r=l(),SM=a("li"),kbe=a("strong"),P4r=o("openai-gpt"),B4r=o(" \u2014 "),JQ=a("a"),I4r=o("TFOpenAIGPTLMHeadModel"),N4r=o(" (OpenAI GPT model)"),q4r=l(),RM=a("li"),Sbe=a("strong"),j4r=o("opt"),D4r=o(" \u2014 "),YQ=a("a"),G4r=o("TFOPTForCausalLM"),O4r=o(" (OPT model)"),V4r=l(),PM=a("li"),Rbe=a("strong"),X4r=o("rembert"),z4r=o(" \u2014 "),KQ=a("a"),W4r=o("TFRemBertForCausalLM"),Q4r=o(" (RemBERT model)"),H4r=l(),BM=a("li"),Pbe=a("strong"),U4r=o("roberta"),J4r=o(" \u2014 "),ZQ=a("a"),Y4r=o("TFRobertaForCausalLM"),K4r=o(" (RoBERTa model)"),Z4r=l(),IM=a("li"),Bbe=a("strong"),e1r=o("roformer"),o1r=o(" \u2014 "),eH=a("a"),r1r=o("TFRoFormerForCausalLM"),t1r=o(" (RoFormer model)"),a1r=l(),NM=a("li"),Ibe=a("strong"),n1r=o("transfo-xl"),s1r=o(" \u2014 "),oH=a("a"),l1r=o("TFTransfoXLLMHeadModel"),i1r=o(" (Transformer-XL model)"),d1r=l(),qM=a("li"),Nbe=a("strong"),c1r=o("xlm"),f1r=o(" \u2014 "),rH=a("a"),m1r=o("TFXLMWithLMHeadModel"),g1r=o(" (XLM model)"),h1r=l(),jM=a("li"),qbe=a("strong"),p1r=o("xlnet"),_1r=o(" \u2014 "),tH=a("a"),u1r=o("TFXLNetLMHeadModel"),b1r=o(" (XLNet model)"),v1r=l(),F(DM.$$.fragment),zje=l(),Jd=a("h2"),GM=a("a"),jbe=a("span"),F(S8.$$.fragment),F1r=l(),Dbe=a("span"),T1r=o("TFAutoModelForImageClassification"),Wje=l(),er=a("div"),F(R8.$$.fragment),M1r=l(),Yd=a("p"),E1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aH=a("a"),C1r=o("from_pretrained()"),w1r=o(" class method or the "),nH=a("a"),A1r=o("from_config()"),y1r=o(` class
method.`),L1r=l(),P8=a("p"),x1r=o("This class cannot be instantiated directly using "),Gbe=a("code"),$1r=o("__init__()"),k1r=o(" (throws an error)."),S1r=l(),$t=a("div"),F(B8.$$.fragment),R1r=l(),Obe=a("p"),P1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B1r=l(),Kd=a("p"),I1r=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),N1r=o("not"),q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),j1r=o("from_pretrained()"),D1r=o(" to load the model weights."),G1r=l(),F(OM.$$.fragment),O1r=l(),Lr=a("div"),F(I8.$$.fragment),V1r=l(),Xbe=a("p"),X1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),z1r=l(),on=a("p"),W1r=o("The model class to instantiate is selected based on the "),zbe=a("code"),Q1r=o("model_type"),H1r=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),U1r=o("pretrained_model_name_or_path"),J1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Y1r=o("pretrained_model_name_or_path"),K1r=o(":"),Z1r=l(),rn=a("ul"),VM=a("li"),Hbe=a("strong"),e7r=o("convnext"),o7r=o(" \u2014 "),lH=a("a"),r7r=o("TFConvNextForImageClassification"),t7r=o(" (ConvNext model)"),a7r=l(),XM=a("li"),Ube=a("strong"),n7r=o("data2vec-vision"),s7r=o(" \u2014 "),iH=a("a"),l7r=o("TFData2VecVisionForImageClassification"),i7r=o(" (Data2VecVision model)"),d7r=l(),zM=a("li"),Jbe=a("strong"),c7r=o("swin"),f7r=o(" \u2014 "),dH=a("a"),m7r=o("TFSwinForImageClassification"),g7r=o(" (Swin model)"),h7r=l(),WM=a("li"),Ybe=a("strong"),p7r=o("vit"),_7r=o(" \u2014 "),cH=a("a"),u7r=o("TFViTForImageClassification"),b7r=o(" (ViT model)"),v7r=l(),F(QM.$$.fragment),Qje=l(),Zd=a("h2"),HM=a("a"),Kbe=a("span"),F(N8.$$.fragment),F7r=l(),Zbe=a("span"),T7r=o("TFAutoModelForMaskedLM"),Hje=l(),or=a("div"),F(q8.$$.fragment),M7r=l(),ec=a("p"),E7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fH=a("a"),C7r=o("from_pretrained()"),w7r=o(" class method or the "),mH=a("a"),A7r=o("from_config()"),y7r=o(` class
method.`),L7r=l(),j8=a("p"),x7r=o("This class cannot be instantiated directly using "),e2e=a("code"),$7r=o("__init__()"),k7r=o(" (throws an error)."),S7r=l(),kt=a("div"),F(D8.$$.fragment),R7r=l(),o2e=a("p"),P7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B7r=l(),oc=a("p"),I7r=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),N7r=o("not"),q7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),j7r=o("from_pretrained()"),D7r=o(" to load the model weights."),G7r=l(),F(UM.$$.fragment),O7r=l(),xr=a("div"),F(G8.$$.fragment),V7r=l(),t2e=a("p"),X7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z7r=l(),tn=a("p"),W7r=o("The model class to instantiate is selected based on the "),a2e=a("code"),Q7r=o("model_type"),H7r=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),U7r=o("pretrained_model_name_or_path"),J7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),Y7r=o("pretrained_model_name_or_path"),K7r=o(":"),Z7r=l(),ie=a("ul"),JM=a("li"),l2e=a("strong"),ebr=o("albert"),obr=o(" \u2014 "),hH=a("a"),rbr=o("TFAlbertForMaskedLM"),tbr=o(" (ALBERT model)"),abr=l(),YM=a("li"),i2e=a("strong"),nbr=o("bert"),sbr=o(" \u2014 "),pH=a("a"),lbr=o("TFBertForMaskedLM"),ibr=o(" (BERT model)"),dbr=l(),KM=a("li"),d2e=a("strong"),cbr=o("camembert"),fbr=o(" \u2014 "),_H=a("a"),mbr=o("TFCamembertForMaskedLM"),gbr=o(" (CamemBERT model)"),hbr=l(),ZM=a("li"),c2e=a("strong"),pbr=o("convbert"),_br=o(" \u2014 "),uH=a("a"),ubr=o("TFConvBertForMaskedLM"),bbr=o(" (ConvBERT model)"),vbr=l(),eE=a("li"),f2e=a("strong"),Fbr=o("deberta"),Tbr=o(" \u2014 "),bH=a("a"),Mbr=o("TFDebertaForMaskedLM"),Ebr=o(" (DeBERTa model)"),Cbr=l(),oE=a("li"),m2e=a("strong"),wbr=o("deberta-v2"),Abr=o(" \u2014 "),vH=a("a"),ybr=o("TFDebertaV2ForMaskedLM"),Lbr=o(" (DeBERTa-v2 model)"),xbr=l(),rE=a("li"),g2e=a("strong"),$br=o("distilbert"),kbr=o(" \u2014 "),FH=a("a"),Sbr=o("TFDistilBertForMaskedLM"),Rbr=o(" (DistilBERT model)"),Pbr=l(),tE=a("li"),h2e=a("strong"),Bbr=o("electra"),Ibr=o(" \u2014 "),TH=a("a"),Nbr=o("TFElectraForMaskedLM"),qbr=o(" (ELECTRA model)"),jbr=l(),aE=a("li"),p2e=a("strong"),Dbr=o("flaubert"),Gbr=o(" \u2014 "),MH=a("a"),Obr=o("TFFlaubertWithLMHeadModel"),Vbr=o(" (FlauBERT model)"),Xbr=l(),nE=a("li"),_2e=a("strong"),zbr=o("funnel"),Wbr=o(" \u2014 "),EH=a("a"),Qbr=o("TFFunnelForMaskedLM"),Hbr=o(" (Funnel Transformer model)"),Ubr=l(),sE=a("li"),u2e=a("strong"),Jbr=o("layoutlm"),Ybr=o(" \u2014 "),CH=a("a"),Kbr=o("TFLayoutLMForMaskedLM"),Zbr=o(" (LayoutLM model)"),e2r=l(),lE=a("li"),b2e=a("strong"),o2r=o("longformer"),r2r=o(" \u2014 "),wH=a("a"),t2r=o("TFLongformerForMaskedLM"),a2r=o(" (Longformer model)"),n2r=l(),iE=a("li"),v2e=a("strong"),s2r=o("mobilebert"),l2r=o(" \u2014 "),AH=a("a"),i2r=o("TFMobileBertForMaskedLM"),d2r=o(" (MobileBERT model)"),c2r=l(),dE=a("li"),F2e=a("strong"),f2r=o("mpnet"),m2r=o(" \u2014 "),yH=a("a"),g2r=o("TFMPNetForMaskedLM"),h2r=o(" (MPNet model)"),p2r=l(),cE=a("li"),T2e=a("strong"),_2r=o("rembert"),u2r=o(" \u2014 "),LH=a("a"),b2r=o("TFRemBertForMaskedLM"),v2r=o(" (RemBERT model)"),F2r=l(),fE=a("li"),M2e=a("strong"),T2r=o("roberta"),M2r=o(" \u2014 "),xH=a("a"),E2r=o("TFRobertaForMaskedLM"),C2r=o(" (RoBERTa model)"),w2r=l(),mE=a("li"),E2e=a("strong"),A2r=o("roformer"),y2r=o(" \u2014 "),$H=a("a"),L2r=o("TFRoFormerForMaskedLM"),x2r=o(" (RoFormer model)"),$2r=l(),gE=a("li"),C2e=a("strong"),k2r=o("tapas"),S2r=o(" \u2014 "),kH=a("a"),R2r=o("TFTapasForMaskedLM"),P2r=o(" (TAPAS model)"),B2r=l(),hE=a("li"),w2e=a("strong"),I2r=o("xlm"),N2r=o(" \u2014 "),SH=a("a"),q2r=o("TFXLMWithLMHeadModel"),j2r=o(" (XLM model)"),D2r=l(),pE=a("li"),A2e=a("strong"),G2r=o("xlm-roberta"),O2r=o(" \u2014 "),RH=a("a"),V2r=o("TFXLMRobertaForMaskedLM"),X2r=o(" (XLM-RoBERTa model)"),z2r=l(),F(_E.$$.fragment),Uje=l(),rc=a("h2"),uE=a("a"),y2e=a("span"),F(O8.$$.fragment),W2r=l(),L2e=a("span"),Q2r=o("TFAutoModelForSeq2SeqLM"),Jje=l(),rr=a("div"),F(V8.$$.fragment),H2r=l(),tc=a("p"),U2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PH=a("a"),J2r=o("from_pretrained()"),Y2r=o(" class method or the "),BH=a("a"),K2r=o("from_config()"),Z2r=o(` class
method.`),evr=l(),X8=a("p"),ovr=o("This class cannot be instantiated directly using "),x2e=a("code"),rvr=o("__init__()"),tvr=o(" (throws an error)."),avr=l(),St=a("div"),F(z8.$$.fragment),nvr=l(),$2e=a("p"),svr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lvr=l(),ac=a("p"),ivr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),dvr=o("not"),cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),fvr=o("from_pretrained()"),mvr=o(" to load the model weights."),gvr=l(),F(bE.$$.fragment),hvr=l(),$r=a("div"),F(W8.$$.fragment),pvr=l(),S2e=a("p"),_vr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uvr=l(),an=a("p"),bvr=o("The model class to instantiate is selected based on the "),R2e=a("code"),vvr=o("model_type"),Fvr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),Tvr=o("pretrained_model_name_or_path"),Mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),Evr=o("pretrained_model_name_or_path"),Cvr=o(":"),wvr=l(),ye=a("ul"),vE=a("li"),I2e=a("strong"),Avr=o("bart"),yvr=o(" \u2014 "),NH=a("a"),Lvr=o("TFBartForConditionalGeneration"),xvr=o(" (BART model)"),$vr=l(),FE=a("li"),N2e=a("strong"),kvr=o("blenderbot"),Svr=o(" \u2014 "),qH=a("a"),Rvr=o("TFBlenderbotForConditionalGeneration"),Pvr=o(" (Blenderbot model)"),Bvr=l(),TE=a("li"),q2e=a("strong"),Ivr=o("blenderbot-small"),Nvr=o(" \u2014 "),jH=a("a"),qvr=o("TFBlenderbotSmallForConditionalGeneration"),jvr=o(" (BlenderbotSmall model)"),Dvr=l(),ME=a("li"),j2e=a("strong"),Gvr=o("encoder-decoder"),Ovr=o(" \u2014 "),DH=a("a"),Vvr=o("TFEncoderDecoderModel"),Xvr=o(" (Encoder decoder model)"),zvr=l(),EE=a("li"),D2e=a("strong"),Wvr=o("led"),Qvr=o(" \u2014 "),GH=a("a"),Hvr=o("TFLEDForConditionalGeneration"),Uvr=o(" (LED model)"),Jvr=l(),CE=a("li"),G2e=a("strong"),Yvr=o("marian"),Kvr=o(" \u2014 "),OH=a("a"),Zvr=o("TFMarianMTModel"),eFr=o(" (Marian model)"),oFr=l(),wE=a("li"),O2e=a("strong"),rFr=o("mbart"),tFr=o(" \u2014 "),VH=a("a"),aFr=o("TFMBartForConditionalGeneration"),nFr=o(" (mBART model)"),sFr=l(),AE=a("li"),V2e=a("strong"),lFr=o("mt5"),iFr=o(" \u2014 "),XH=a("a"),dFr=o("TFMT5ForConditionalGeneration"),cFr=o(" (mT5 model)"),fFr=l(),yE=a("li"),X2e=a("strong"),mFr=o("pegasus"),gFr=o(" \u2014 "),zH=a("a"),hFr=o("TFPegasusForConditionalGeneration"),pFr=o(" (Pegasus model)"),_Fr=l(),LE=a("li"),z2e=a("strong"),uFr=o("t5"),bFr=o(" \u2014 "),WH=a("a"),vFr=o("TFT5ForConditionalGeneration"),FFr=o(" (T5 model)"),TFr=l(),F(xE.$$.fragment),Yje=l(),nc=a("h2"),$E=a("a"),W2e=a("span"),F(Q8.$$.fragment),MFr=l(),Q2e=a("span"),EFr=o("TFAutoModelForSequenceClassification"),Kje=l(),tr=a("div"),F(H8.$$.fragment),CFr=l(),sc=a("p"),wFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QH=a("a"),AFr=o("from_pretrained()"),yFr=o(" class method or the "),HH=a("a"),LFr=o("from_config()"),xFr=o(` class
method.`),$Fr=l(),U8=a("p"),kFr=o("This class cannot be instantiated directly using "),H2e=a("code"),SFr=o("__init__()"),RFr=o(" (throws an error)."),PFr=l(),Rt=a("div"),F(J8.$$.fragment),BFr=l(),U2e=a("p"),IFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NFr=l(),lc=a("p"),qFr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),jFr=o("not"),DFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),GFr=o("from_pretrained()"),OFr=o(" to load the model weights."),VFr=l(),F(kE.$$.fragment),XFr=l(),kr=a("div"),F(Y8.$$.fragment),zFr=l(),Y2e=a("p"),WFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QFr=l(),nn=a("p"),HFr=o("The model class to instantiate is selected based on the "),K2e=a("code"),UFr=o("model_type"),JFr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),YFr=o("pretrained_model_name_or_path"),KFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),ZFr=o("pretrained_model_name_or_path"),eTr=o(":"),oTr=l(),oe=a("ul"),SE=a("li"),ove=a("strong"),rTr=o("albert"),tTr=o(" \u2014 "),JH=a("a"),aTr=o("TFAlbertForSequenceClassification"),nTr=o(" (ALBERT model)"),sTr=l(),RE=a("li"),rve=a("strong"),lTr=o("bert"),iTr=o(" \u2014 "),YH=a("a"),dTr=o("TFBertForSequenceClassification"),cTr=o(" (BERT model)"),fTr=l(),PE=a("li"),tve=a("strong"),mTr=o("camembert"),gTr=o(" \u2014 "),KH=a("a"),hTr=o("TFCamembertForSequenceClassification"),pTr=o(" (CamemBERT model)"),_Tr=l(),BE=a("li"),ave=a("strong"),uTr=o("convbert"),bTr=o(" \u2014 "),ZH=a("a"),vTr=o("TFConvBertForSequenceClassification"),FTr=o(" (ConvBERT model)"),TTr=l(),IE=a("li"),nve=a("strong"),MTr=o("ctrl"),ETr=o(" \u2014 "),eU=a("a"),CTr=o("TFCTRLForSequenceClassification"),wTr=o(" (CTRL model)"),ATr=l(),NE=a("li"),sve=a("strong"),yTr=o("deberta"),LTr=o(" \u2014 "),oU=a("a"),xTr=o("TFDebertaForSequenceClassification"),$Tr=o(" (DeBERTa model)"),kTr=l(),qE=a("li"),lve=a("strong"),STr=o("deberta-v2"),RTr=o(" \u2014 "),rU=a("a"),PTr=o("TFDebertaV2ForSequenceClassification"),BTr=o(" (DeBERTa-v2 model)"),ITr=l(),jE=a("li"),ive=a("strong"),NTr=o("distilbert"),qTr=o(" \u2014 "),tU=a("a"),jTr=o("TFDistilBertForSequenceClassification"),DTr=o(" (DistilBERT model)"),GTr=l(),DE=a("li"),dve=a("strong"),OTr=o("electra"),VTr=o(" \u2014 "),aU=a("a"),XTr=o("TFElectraForSequenceClassification"),zTr=o(" (ELECTRA model)"),WTr=l(),GE=a("li"),cve=a("strong"),QTr=o("flaubert"),HTr=o(" \u2014 "),nU=a("a"),UTr=o("TFFlaubertForSequenceClassification"),JTr=o(" (FlauBERT model)"),YTr=l(),OE=a("li"),fve=a("strong"),KTr=o("funnel"),ZTr=o(" \u2014 "),sU=a("a"),eMr=o("TFFunnelForSequenceClassification"),oMr=o(" (Funnel Transformer model)"),rMr=l(),VE=a("li"),mve=a("strong"),tMr=o("gpt2"),aMr=o(" \u2014 "),lU=a("a"),nMr=o("TFGPT2ForSequenceClassification"),sMr=o(" (OpenAI GPT-2 model)"),lMr=l(),XE=a("li"),gve=a("strong"),iMr=o("gptj"),dMr=o(" \u2014 "),iU=a("a"),cMr=o("TFGPTJForSequenceClassification"),fMr=o(" (GPT-J model)"),mMr=l(),zE=a("li"),hve=a("strong"),gMr=o("layoutlm"),hMr=o(" \u2014 "),dU=a("a"),pMr=o("TFLayoutLMForSequenceClassification"),_Mr=o(" (LayoutLM model)"),uMr=l(),WE=a("li"),pve=a("strong"),bMr=o("longformer"),vMr=o(" \u2014 "),cU=a("a"),FMr=o("TFLongformerForSequenceClassification"),TMr=o(" (Longformer model)"),MMr=l(),QE=a("li"),_ve=a("strong"),EMr=o("mobilebert"),CMr=o(" \u2014 "),fU=a("a"),wMr=o("TFMobileBertForSequenceClassification"),AMr=o(" (MobileBERT model)"),yMr=l(),HE=a("li"),uve=a("strong"),LMr=o("mpnet"),xMr=o(" \u2014 "),mU=a("a"),$Mr=o("TFMPNetForSequenceClassification"),kMr=o(" (MPNet model)"),SMr=l(),UE=a("li"),bve=a("strong"),RMr=o("openai-gpt"),PMr=o(" \u2014 "),gU=a("a"),BMr=o("TFOpenAIGPTForSequenceClassification"),IMr=o(" (OpenAI GPT model)"),NMr=l(),JE=a("li"),vve=a("strong"),qMr=o("rembert"),jMr=o(" \u2014 "),hU=a("a"),DMr=o("TFRemBertForSequenceClassification"),GMr=o(" (RemBERT model)"),OMr=l(),YE=a("li"),Fve=a("strong"),VMr=o("roberta"),XMr=o(" \u2014 "),pU=a("a"),zMr=o("TFRobertaForSequenceClassification"),WMr=o(" (RoBERTa model)"),QMr=l(),KE=a("li"),Tve=a("strong"),HMr=o("roformer"),UMr=o(" \u2014 "),_U=a("a"),JMr=o("TFRoFormerForSequenceClassification"),YMr=o(" (RoFormer model)"),KMr=l(),ZE=a("li"),Mve=a("strong"),ZMr=o("tapas"),eEr=o(" \u2014 "),uU=a("a"),oEr=o("TFTapasForSequenceClassification"),rEr=o(" (TAPAS model)"),tEr=l(),eC=a("li"),Eve=a("strong"),aEr=o("transfo-xl"),nEr=o(" \u2014 "),bU=a("a"),sEr=o("TFTransfoXLForSequenceClassification"),lEr=o(" (Transformer-XL model)"),iEr=l(),oC=a("li"),Cve=a("strong"),dEr=o("xlm"),cEr=o(" \u2014 "),vU=a("a"),fEr=o("TFXLMForSequenceClassification"),mEr=o(" (XLM model)"),gEr=l(),rC=a("li"),wve=a("strong"),hEr=o("xlm-roberta"),pEr=o(" \u2014 "),FU=a("a"),_Er=o("TFXLMRobertaForSequenceClassification"),uEr=o(" (XLM-RoBERTa model)"),bEr=l(),tC=a("li"),Ave=a("strong"),vEr=o("xlnet"),FEr=o(" \u2014 "),TU=a("a"),TEr=o("TFXLNetForSequenceClassification"),MEr=o(" (XLNet model)"),EEr=l(),F(aC.$$.fragment),Zje=l(),ic=a("h2"),nC=a("a"),yve=a("span"),F(K8.$$.fragment),CEr=l(),Lve=a("span"),wEr=o("TFAutoModelForMultipleChoice"),eDe=l(),ar=a("div"),F(Z8.$$.fragment),AEr=l(),dc=a("p"),yEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MU=a("a"),LEr=o("from_pretrained()"),xEr=o(" class method or the "),EU=a("a"),$Er=o("from_config()"),kEr=o(` class
method.`),SEr=l(),e9=a("p"),REr=o("This class cannot be instantiated directly using "),xve=a("code"),PEr=o("__init__()"),BEr=o(" (throws an error)."),IEr=l(),Pt=a("div"),F(o9.$$.fragment),NEr=l(),$ve=a("p"),qEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jEr=l(),cc=a("p"),DEr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),GEr=o("not"),OEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),VEr=o("from_pretrained()"),XEr=o(" to load the model weights."),zEr=l(),F(sC.$$.fragment),WEr=l(),Sr=a("div"),F(r9.$$.fragment),QEr=l(),Sve=a("p"),HEr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UEr=l(),sn=a("p"),JEr=o("The model class to instantiate is selected based on the "),Rve=a("code"),YEr=o("model_type"),KEr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),ZEr=o("pretrained_model_name_or_path"),eCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(":"),tCr=l(),pe=a("ul"),lC=a("li"),Ive=a("strong"),aCr=o("albert"),nCr=o(" \u2014 "),wU=a("a"),sCr=o("TFAlbertForMultipleChoice"),lCr=o(" (ALBERT model)"),iCr=l(),iC=a("li"),Nve=a("strong"),dCr=o("bert"),cCr=o(" \u2014 "),AU=a("a"),fCr=o("TFBertForMultipleChoice"),mCr=o(" (BERT model)"),gCr=l(),dC=a("li"),qve=a("strong"),hCr=o("camembert"),pCr=o(" \u2014 "),yU=a("a"),_Cr=o("TFCamembertForMultipleChoice"),uCr=o(" (CamemBERT model)"),bCr=l(),cC=a("li"),jve=a("strong"),vCr=o("convbert"),FCr=o(" \u2014 "),LU=a("a"),TCr=o("TFConvBertForMultipleChoice"),MCr=o(" (ConvBERT model)"),ECr=l(),fC=a("li"),Dve=a("strong"),CCr=o("distilbert"),wCr=o(" \u2014 "),xU=a("a"),ACr=o("TFDistilBertForMultipleChoice"),yCr=o(" (DistilBERT model)"),LCr=l(),mC=a("li"),Gve=a("strong"),xCr=o("electra"),$Cr=o(" \u2014 "),$U=a("a"),kCr=o("TFElectraForMultipleChoice"),SCr=o(" (ELECTRA model)"),RCr=l(),gC=a("li"),Ove=a("strong"),PCr=o("flaubert"),BCr=o(" \u2014 "),kU=a("a"),ICr=o("TFFlaubertForMultipleChoice"),NCr=o(" (FlauBERT model)"),qCr=l(),hC=a("li"),Vve=a("strong"),jCr=o("funnel"),DCr=o(" \u2014 "),SU=a("a"),GCr=o("TFFunnelForMultipleChoice"),OCr=o(" (Funnel Transformer model)"),VCr=l(),pC=a("li"),Xve=a("strong"),XCr=o("longformer"),zCr=o(" \u2014 "),RU=a("a"),WCr=o("TFLongformerForMultipleChoice"),QCr=o(" (Longformer model)"),HCr=l(),_C=a("li"),zve=a("strong"),UCr=o("mobilebert"),JCr=o(" \u2014 "),PU=a("a"),YCr=o("TFMobileBertForMultipleChoice"),KCr=o(" (MobileBERT model)"),ZCr=l(),uC=a("li"),Wve=a("strong"),e5r=o("mpnet"),o5r=o(" \u2014 "),BU=a("a"),r5r=o("TFMPNetForMultipleChoice"),t5r=o(" (MPNet model)"),a5r=l(),bC=a("li"),Qve=a("strong"),n5r=o("rembert"),s5r=o(" \u2014 "),IU=a("a"),l5r=o("TFRemBertForMultipleChoice"),i5r=o(" (RemBERT model)"),d5r=l(),vC=a("li"),Hve=a("strong"),c5r=o("roberta"),f5r=o(" \u2014 "),NU=a("a"),m5r=o("TFRobertaForMultipleChoice"),g5r=o(" (RoBERTa model)"),h5r=l(),FC=a("li"),Uve=a("strong"),p5r=o("roformer"),_5r=o(" \u2014 "),qU=a("a"),u5r=o("TFRoFormerForMultipleChoice"),b5r=o(" (RoFormer model)"),v5r=l(),TC=a("li"),Jve=a("strong"),F5r=o("xlm"),T5r=o(" \u2014 "),jU=a("a"),M5r=o("TFXLMForMultipleChoice"),E5r=o(" (XLM model)"),C5r=l(),MC=a("li"),Yve=a("strong"),w5r=o("xlm-roberta"),A5r=o(" \u2014 "),DU=a("a"),y5r=o("TFXLMRobertaForMultipleChoice"),L5r=o(" (XLM-RoBERTa model)"),x5r=l(),EC=a("li"),Kve=a("strong"),$5r=o("xlnet"),k5r=o(" \u2014 "),GU=a("a"),S5r=o("TFXLNetForMultipleChoice"),R5r=o(" (XLNet model)"),P5r=l(),F(CC.$$.fragment),oDe=l(),fc=a("h2"),wC=a("a"),Zve=a("span"),F(t9.$$.fragment),B5r=l(),eFe=a("span"),I5r=o("TFAutoModelForNextSentencePrediction"),rDe=l(),nr=a("div"),F(a9.$$.fragment),N5r=l(),mc=a("p"),q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OU=a("a"),j5r=o("from_pretrained()"),D5r=o(" class method or the "),VU=a("a"),G5r=o("from_config()"),O5r=o(` class
method.`),V5r=l(),n9=a("p"),X5r=o("This class cannot be instantiated directly using "),oFe=a("code"),z5r=o("__init__()"),W5r=o(" (throws an error)."),Q5r=l(),Bt=a("div"),F(s9.$$.fragment),H5r=l(),rFe=a("p"),U5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),J5r=l(),gc=a("p"),Y5r=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),K5r=o("not"),Z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),e3r=o("from_pretrained()"),o3r=o(" to load the model weights."),r3r=l(),F(AC.$$.fragment),t3r=l(),Rr=a("div"),F(l9.$$.fragment),a3r=l(),aFe=a("p"),n3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),s3r=l(),ln=a("p"),l3r=o("The model class to instantiate is selected based on the "),nFe=a("code"),i3r=o("model_type"),d3r=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),m3r=o("pretrained_model_name_or_path"),g3r=o(":"),h3r=l(),i9=a("ul"),yC=a("li"),iFe=a("strong"),p3r=o("bert"),_3r=o(" \u2014 "),zU=a("a"),u3r=o("TFBertForNextSentencePrediction"),b3r=o(" (BERT model)"),v3r=l(),LC=a("li"),dFe=a("strong"),F3r=o("mobilebert"),T3r=o(" \u2014 "),WU=a("a"),M3r=o("TFMobileBertForNextSentencePrediction"),E3r=o(" (MobileBERT model)"),C3r=l(),F(xC.$$.fragment),tDe=l(),hc=a("h2"),$C=a("a"),cFe=a("span"),F(d9.$$.fragment),w3r=l(),fFe=a("span"),A3r=o("TFAutoModelForTableQuestionAnswering"),aDe=l(),sr=a("div"),F(c9.$$.fragment),y3r=l(),pc=a("p"),L3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QU=a("a"),x3r=o("from_pretrained()"),$3r=o(" class method or the "),HU=a("a"),k3r=o("from_config()"),S3r=o(` class
method.`),R3r=l(),f9=a("p"),P3r=o("This class cannot be instantiated directly using "),mFe=a("code"),B3r=o("__init__()"),I3r=o(" (throws an error)."),N3r=l(),It=a("div"),F(m9.$$.fragment),q3r=l(),gFe=a("p"),j3r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D3r=l(),_c=a("p"),G3r=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),O3r=o("not"),V3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),X3r=o("from_pretrained()"),z3r=o(" to load the model weights."),W3r=l(),F(kC.$$.fragment),Q3r=l(),Pr=a("div"),F(g9.$$.fragment),H3r=l(),pFe=a("p"),U3r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),J3r=l(),dn=a("p"),Y3r=o("The model class to instantiate is selected based on the "),_Fe=a("code"),K3r=o("model_type"),Z3r=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(":"),a0r=l(),vFe=a("ul"),SC=a("li"),FFe=a("strong"),n0r=o("tapas"),s0r=o(" \u2014 "),JU=a("a"),l0r=o("TFTapasForQuestionAnswering"),i0r=o(" (TAPAS model)"),d0r=l(),F(RC.$$.fragment),nDe=l(),uc=a("h2"),PC=a("a"),TFe=a("span"),F(h9.$$.fragment),c0r=l(),MFe=a("span"),f0r=o("TFAutoModelForTokenClassification"),sDe=l(),lr=a("div"),F(p9.$$.fragment),m0r=l(),bc=a("p"),g0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YU=a("a"),h0r=o("from_pretrained()"),p0r=o(" class method or the "),KU=a("a"),_0r=o("from_config()"),u0r=o(` class
method.`),b0r=l(),_9=a("p"),v0r=o("This class cannot be instantiated directly using "),EFe=a("code"),F0r=o("__init__()"),T0r=o(" (throws an error)."),M0r=l(),Nt=a("div"),F(u9.$$.fragment),E0r=l(),CFe=a("p"),C0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w0r=l(),vc=a("p"),A0r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),y0r=o("not"),L0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),x0r=o("from_pretrained()"),$0r=o(" to load the model weights."),k0r=l(),F(BC.$$.fragment),S0r=l(),Br=a("div"),F(b9.$$.fragment),R0r=l(),AFe=a("p"),P0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B0r=l(),cn=a("p"),I0r=o("The model class to instantiate is selected based on the "),yFe=a("code"),N0r=o("model_type"),q0r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),j0r=o("pretrained_model_name_or_path"),D0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(":"),V0r=l(),de=a("ul"),IC=a("li"),$Fe=a("strong"),X0r=o("albert"),z0r=o(" \u2014 "),eJ=a("a"),W0r=o("TFAlbertForTokenClassification"),Q0r=o(" (ALBERT model)"),H0r=l(),NC=a("li"),kFe=a("strong"),U0r=o("bert"),J0r=o(" \u2014 "),oJ=a("a"),Y0r=o("TFBertForTokenClassification"),K0r=o(" (BERT model)"),Z0r=l(),qC=a("li"),SFe=a("strong"),ewr=o("camembert"),owr=o(" \u2014 "),rJ=a("a"),rwr=o("TFCamembertForTokenClassification"),twr=o(" (CamemBERT model)"),awr=l(),jC=a("li"),RFe=a("strong"),nwr=o("convbert"),swr=o(" \u2014 "),tJ=a("a"),lwr=o("TFConvBertForTokenClassification"),iwr=o(" (ConvBERT model)"),dwr=l(),DC=a("li"),PFe=a("strong"),cwr=o("deberta"),fwr=o(" \u2014 "),aJ=a("a"),mwr=o("TFDebertaForTokenClassification"),gwr=o(" (DeBERTa model)"),hwr=l(),GC=a("li"),BFe=a("strong"),pwr=o("deberta-v2"),_wr=o(" \u2014 "),nJ=a("a"),uwr=o("TFDebertaV2ForTokenClassification"),bwr=o(" (DeBERTa-v2 model)"),vwr=l(),OC=a("li"),IFe=a("strong"),Fwr=o("distilbert"),Twr=o(" \u2014 "),sJ=a("a"),Mwr=o("TFDistilBertForTokenClassification"),Ewr=o(" (DistilBERT model)"),Cwr=l(),VC=a("li"),NFe=a("strong"),wwr=o("electra"),Awr=o(" \u2014 "),lJ=a("a"),ywr=o("TFElectraForTokenClassification"),Lwr=o(" (ELECTRA model)"),xwr=l(),XC=a("li"),qFe=a("strong"),$wr=o("flaubert"),kwr=o(" \u2014 "),iJ=a("a"),Swr=o("TFFlaubertForTokenClassification"),Rwr=o(" (FlauBERT model)"),Pwr=l(),zC=a("li"),jFe=a("strong"),Bwr=o("funnel"),Iwr=o(" \u2014 "),dJ=a("a"),Nwr=o("TFFunnelForTokenClassification"),qwr=o(" (Funnel Transformer model)"),jwr=l(),WC=a("li"),DFe=a("strong"),Dwr=o("layoutlm"),Gwr=o(" \u2014 "),cJ=a("a"),Owr=o("TFLayoutLMForTokenClassification"),Vwr=o(" (LayoutLM model)"),Xwr=l(),QC=a("li"),GFe=a("strong"),zwr=o("longformer"),Wwr=o(" \u2014 "),fJ=a("a"),Qwr=o("TFLongformerForTokenClassification"),Hwr=o(" (Longformer model)"),Uwr=l(),HC=a("li"),OFe=a("strong"),Jwr=o("mobilebert"),Ywr=o(" \u2014 "),mJ=a("a"),Kwr=o("TFMobileBertForTokenClassification"),Zwr=o(" (MobileBERT model)"),e6r=l(),UC=a("li"),VFe=a("strong"),o6r=o("mpnet"),r6r=o(" \u2014 "),gJ=a("a"),t6r=o("TFMPNetForTokenClassification"),a6r=o(" (MPNet model)"),n6r=l(),JC=a("li"),XFe=a("strong"),s6r=o("rembert"),l6r=o(" \u2014 "),hJ=a("a"),i6r=o("TFRemBertForTokenClassification"),d6r=o(" (RemBERT model)"),c6r=l(),YC=a("li"),zFe=a("strong"),f6r=o("roberta"),m6r=o(" \u2014 "),pJ=a("a"),g6r=o("TFRobertaForTokenClassification"),h6r=o(" (RoBERTa model)"),p6r=l(),KC=a("li"),WFe=a("strong"),_6r=o("roformer"),u6r=o(" \u2014 "),_J=a("a"),b6r=o("TFRoFormerForTokenClassification"),v6r=o(" (RoFormer model)"),F6r=l(),ZC=a("li"),QFe=a("strong"),T6r=o("xlm"),M6r=o(" \u2014 "),uJ=a("a"),E6r=o("TFXLMForTokenClassification"),C6r=o(" (XLM model)"),w6r=l(),e5=a("li"),HFe=a("strong"),A6r=o("xlm-roberta"),y6r=o(" \u2014 "),bJ=a("a"),L6r=o("TFXLMRobertaForTokenClassification"),x6r=o(" (XLM-RoBERTa model)"),$6r=l(),o5=a("li"),UFe=a("strong"),k6r=o("xlnet"),S6r=o(" \u2014 "),vJ=a("a"),R6r=o("TFXLNetForTokenClassification"),P6r=o(" (XLNet model)"),B6r=l(),F(r5.$$.fragment),lDe=l(),Fc=a("h2"),t5=a("a"),JFe=a("span"),F(v9.$$.fragment),I6r=l(),YFe=a("span"),N6r=o("TFAutoModelForQuestionAnswering"),iDe=l(),ir=a("div"),F(F9.$$.fragment),q6r=l(),Tc=a("p"),j6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=a("a"),D6r=o("from_pretrained()"),G6r=o(" class method or the "),TJ=a("a"),O6r=o("from_config()"),V6r=o(` class
method.`),X6r=l(),T9=a("p"),z6r=o("This class cannot be instantiated directly using "),KFe=a("code"),W6r=o("__init__()"),Q6r=o(" (throws an error)."),H6r=l(),qt=a("div"),F(M9.$$.fragment),U6r=l(),ZFe=a("p"),J6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Y6r=l(),Mc=a("p"),K6r=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),Z6r=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(a5.$$.fragment),aAr=l(),Ir=a("div"),F(E9.$$.fragment),nAr=l(),oTe=a("p"),sAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lAr=l(),fn=a("p"),iAr=o("The model class to instantiate is selected based on the "),rTe=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),ce=a("ul"),n5=a("li"),nTe=a("strong"),_Ar=o("albert"),uAr=o(" \u2014 "),EJ=a("a"),bAr=o("TFAlbertForQuestionAnswering"),vAr=o(" (ALBERT model)"),FAr=l(),s5=a("li"),sTe=a("strong"),TAr=o("bert"),MAr=o(" \u2014 "),CJ=a("a"),EAr=o("TFBertForQuestionAnswering"),CAr=o(" (BERT model)"),wAr=l(),l5=a("li"),lTe=a("strong"),AAr=o("camembert"),yAr=o(" \u2014 "),wJ=a("a"),LAr=o("TFCamembertForQuestionAnswering"),xAr=o(" (CamemBERT model)"),$Ar=l(),i5=a("li"),iTe=a("strong"),kAr=o("convbert"),SAr=o(" \u2014 "),AJ=a("a"),RAr=o("TFConvBertForQuestionAnswering"),PAr=o(" (ConvBERT model)"),BAr=l(),d5=a("li"),dTe=a("strong"),IAr=o("deberta"),NAr=o(" \u2014 "),yJ=a("a"),qAr=o("TFDebertaForQuestionAnswering"),jAr=o(" (DeBERTa model)"),DAr=l(),c5=a("li"),cTe=a("strong"),GAr=o("deberta-v2"),OAr=o(" \u2014 "),LJ=a("a"),VAr=o("TFDebertaV2ForQuestionAnswering"),XAr=o(" (DeBERTa-v2 model)"),zAr=l(),f5=a("li"),fTe=a("strong"),WAr=o("distilbert"),QAr=o(" \u2014 "),xJ=a("a"),HAr=o("TFDistilBertForQuestionAnswering"),UAr=o(" (DistilBERT model)"),JAr=l(),m5=a("li"),mTe=a("strong"),YAr=o("electra"),KAr=o(" \u2014 "),$J=a("a"),ZAr=o("TFElectraForQuestionAnswering"),eyr=o(" (ELECTRA model)"),oyr=l(),g5=a("li"),gTe=a("strong"),ryr=o("flaubert"),tyr=o(" \u2014 "),kJ=a("a"),ayr=o("TFFlaubertForQuestionAnsweringSimple"),nyr=o(" (FlauBERT model)"),syr=l(),h5=a("li"),hTe=a("strong"),lyr=o("funnel"),iyr=o(" \u2014 "),SJ=a("a"),dyr=o("TFFunnelForQuestionAnswering"),cyr=o(" (Funnel Transformer model)"),fyr=l(),p5=a("li"),pTe=a("strong"),myr=o("gptj"),gyr=o(" \u2014 "),RJ=a("a"),hyr=o("TFGPTJForQuestionAnswering"),pyr=o(" (GPT-J model)"),_yr=l(),_5=a("li"),_Te=a("strong"),uyr=o("longformer"),byr=o(" \u2014 "),PJ=a("a"),vyr=o("TFLongformerForQuestionAnswering"),Fyr=o(" (Longformer model)"),Tyr=l(),u5=a("li"),uTe=a("strong"),Myr=o("mobilebert"),Eyr=o(" \u2014 "),BJ=a("a"),Cyr=o("TFMobileBertForQuestionAnswering"),wyr=o(" (MobileBERT model)"),Ayr=l(),b5=a("li"),bTe=a("strong"),yyr=o("mpnet"),Lyr=o(" \u2014 "),IJ=a("a"),xyr=o("TFMPNetForQuestionAnswering"),$yr=o(" (MPNet model)"),kyr=l(),v5=a("li"),vTe=a("strong"),Syr=o("rembert"),Ryr=o(" \u2014 "),NJ=a("a"),Pyr=o("TFRemBertForQuestionAnswering"),Byr=o(" (RemBERT model)"),Iyr=l(),F5=a("li"),FTe=a("strong"),Nyr=o("roberta"),qyr=o(" \u2014 "),qJ=a("a"),jyr=o("TFRobertaForQuestionAnswering"),Dyr=o(" (RoBERTa model)"),Gyr=l(),T5=a("li"),TTe=a("strong"),Oyr=o("roformer"),Vyr=o(" \u2014 "),jJ=a("a"),Xyr=o("TFRoFormerForQuestionAnswering"),zyr=o(" (RoFormer model)"),Wyr=l(),M5=a("li"),MTe=a("strong"),Qyr=o("xlm"),Hyr=o(" \u2014 "),DJ=a("a"),Uyr=o("TFXLMForQuestionAnsweringSimple"),Jyr=o(" (XLM model)"),Yyr=l(),E5=a("li"),ETe=a("strong"),Kyr=o("xlm-roberta"),Zyr=o(" \u2014 "),GJ=a("a"),eLr=o("TFXLMRobertaForQuestionAnswering"),oLr=o(" (XLM-RoBERTa model)"),rLr=l(),C5=a("li"),CTe=a("strong"),tLr=o("xlnet"),aLr=o(" \u2014 "),OJ=a("a"),nLr=o("TFXLNetForQuestionAnsweringSimple"),sLr=o(" (XLNet model)"),lLr=l(),F(w5.$$.fragment),dDe=l(),Ec=a("h2"),A5=a("a"),wTe=a("span"),F(C9.$$.fragment),iLr=l(),ATe=a("span"),dLr=o("TFAutoModelForVision2Seq"),cDe=l(),dr=a("div"),F(w9.$$.fragment),cLr=l(),Cc=a("p"),fLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=a("a"),mLr=o("from_pretrained()"),gLr=o(" class method or the "),XJ=a("a"),hLr=o("from_config()"),pLr=o(` class
method.`),_Lr=l(),A9=a("p"),uLr=o("This class cannot be instantiated directly using "),yTe=a("code"),bLr=o("__init__()"),vLr=o(" (throws an error)."),FLr=l(),jt=a("div"),F(y9.$$.fragment),TLr=l(),LTe=a("p"),MLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ELr=l(),wc=a("p"),CLr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),wLr=o("not"),ALr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),yLr=o("from_pretrained()"),LLr=o(" to load the model weights."),xLr=l(),F(y5.$$.fragment),$Lr=l(),Nr=a("div"),F(L9.$$.fragment),kLr=l(),$Te=a("p"),SLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RLr=l(),mn=a("p"),PLr=o("The model class to instantiate is selected based on the "),kTe=a("code"),BLr=o("model_type"),ILr=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),NLr=o("pretrained_model_name_or_path"),qLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),jLr=o("pretrained_model_name_or_path"),DLr=o(":"),GLr=l(),PTe=a("ul"),L5=a("li"),BTe=a("strong"),OLr=o("vision-encoder-decoder"),VLr=o(" \u2014 "),WJ=a("a"),XLr=o("TFVisionEncoderDecoderModel"),zLr=o(" (Vision Encoder decoder model)"),WLr=l(),F(x5.$$.fragment),fDe=l(),Ac=a("h2"),$5=a("a"),ITe=a("span"),F(x9.$$.fragment),QLr=l(),NTe=a("span"),HLr=o("TFAutoModelForSpeechSeq2Seq"),mDe=l(),cr=a("div"),F($9.$$.fragment),ULr=l(),yc=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QJ=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),HJ=a("a"),ZLr=o("from_config()"),e8r=o(` class
method.`),o8r=l(),k9=a("p"),r8r=o("This class cannot be instantiated directly using "),qTe=a("code"),t8r=o("__init__()"),a8r=o(" (throws an error)."),n8r=l(),Dt=a("div"),F(S9.$$.fragment),s8r=l(),jTe=a("p"),l8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),i8r=l(),Lc=a("p"),d8r=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),c8r=o("not"),f8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),m8r=o("from_pretrained()"),g8r=o(" to load the model weights."),h8r=l(),F(k5.$$.fragment),p8r=l(),qr=a("div"),F(R9.$$.fragment),_8r=l(),GTe=a("p"),u8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),b8r=l(),gn=a("p"),v8r=o("The model class to instantiate is selected based on the "),OTe=a("code"),F8r=o("model_type"),T8r=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),zTe=a("ul"),S5=a("li"),WTe=a("strong"),y8r=o("speech_to_text"),L8r=o(" \u2014 "),JJ=a("a"),x8r=o("TFSpeech2TextForConditionalGeneration"),$8r=o(" (Speech2Text model)"),k8r=l(),F(R5.$$.fragment),gDe=l(),xc=a("h2"),P5=a("a"),QTe=a("span"),F(P9.$$.fragment),S8r=l(),HTe=a("span"),R8r=o("FlaxAutoModel"),hDe=l(),fr=a("div"),F(B9.$$.fragment),P8r=l(),$c=a("p"),B8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YJ=a("a"),I8r=o("from_pretrained()"),N8r=o(" class method or the "),KJ=a("a"),q8r=o("from_config()"),j8r=o(` class
method.`),D8r=l(),I9=a("p"),G8r=o("This class cannot be instantiated directly using "),UTe=a("code"),O8r=o("__init__()"),V8r=o(" (throws an error)."),X8r=l(),Gt=a("div"),F(N9.$$.fragment),z8r=l(),JTe=a("p"),W8r=o("Instantiates one of the base model classes of the library from a configuration."),Q8r=l(),kc=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),U8r=o("not"),J8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),Y8r=o("from_pretrained()"),K8r=o(" to load the model weights."),Z8r=l(),F(B5.$$.fragment),e9r=l(),jr=a("div"),F(q9.$$.fragment),o9r=l(),KTe=a("p"),r9r=o("Instantiate one of the base model classes of the library from a pretrained model."),t9r=l(),hn=a("p"),a9r=o("The model class to instantiate is selected based on the "),ZTe=a("code"),n9r=o("model_type"),s9r=o(` property of the config object (either
passed as an argument or loaded from `),eMe=a("code"),l9r=o("pretrained_model_name_or_path"),i9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=a("code"),d9r=o("pretrained_model_name_or_path"),c9r=o(":"),f9r=l(),re=a("ul"),I5=a("li"),rMe=a("strong"),m9r=o("albert"),g9r=o(" \u2014 "),eY=a("a"),h9r=o("FlaxAlbertModel"),p9r=o(" (ALBERT model)"),_9r=l(),N5=a("li"),tMe=a("strong"),u9r=o("bart"),b9r=o(" \u2014 "),oY=a("a"),v9r=o("FlaxBartModel"),F9r=o(" (BART model)"),T9r=l(),q5=a("li"),aMe=a("strong"),M9r=o("beit"),E9r=o(" \u2014 "),rY=a("a"),C9r=o("FlaxBeitModel"),w9r=o(" (BEiT model)"),A9r=l(),j5=a("li"),nMe=a("strong"),y9r=o("bert"),L9r=o(" \u2014 "),tY=a("a"),x9r=o("FlaxBertModel"),$9r=o(" (BERT model)"),k9r=l(),D5=a("li"),sMe=a("strong"),S9r=o("big_bird"),R9r=o(" \u2014 "),aY=a("a"),P9r=o("FlaxBigBirdModel"),B9r=o(" (BigBird model)"),I9r=l(),G5=a("li"),lMe=a("strong"),N9r=o("blenderbot"),q9r=o(" \u2014 "),nY=a("a"),j9r=o("FlaxBlenderbotModel"),D9r=o(" (Blenderbot model)"),G9r=l(),O5=a("li"),iMe=a("strong"),O9r=o("blenderbot-small"),V9r=o(" \u2014 "),sY=a("a"),X9r=o("FlaxBlenderbotSmallModel"),z9r=o(" (BlenderbotSmall model)"),W9r=l(),V5=a("li"),dMe=a("strong"),Q9r=o("clip"),H9r=o(" \u2014 "),lY=a("a"),U9r=o("FlaxCLIPModel"),J9r=o(" (CLIP model)"),Y9r=l(),X5=a("li"),cMe=a("strong"),K9r=o("distilbert"),Z9r=o(" \u2014 "),iY=a("a"),exr=o("FlaxDistilBertModel"),oxr=o(" (DistilBERT model)"),rxr=l(),z5=a("li"),fMe=a("strong"),txr=o("electra"),axr=o(" \u2014 "),dY=a("a"),nxr=o("FlaxElectraModel"),sxr=o(" (ELECTRA model)"),lxr=l(),W5=a("li"),mMe=a("strong"),ixr=o("gpt2"),dxr=o(" \u2014 "),cY=a("a"),cxr=o("FlaxGPT2Model"),fxr=o(" (OpenAI GPT-2 model)"),mxr=l(),Q5=a("li"),gMe=a("strong"),gxr=o("gpt_neo"),hxr=o(" \u2014 "),fY=a("a"),pxr=o("FlaxGPTNeoModel"),_xr=o(" (GPT Neo model)"),uxr=l(),H5=a("li"),hMe=a("strong"),bxr=o("gptj"),vxr=o(" \u2014 "),mY=a("a"),Fxr=o("FlaxGPTJModel"),Txr=o(" (GPT-J model)"),Mxr=l(),U5=a("li"),pMe=a("strong"),Exr=o("marian"),Cxr=o(" \u2014 "),gY=a("a"),wxr=o("FlaxMarianModel"),Axr=o(" (Marian model)"),yxr=l(),J5=a("li"),_Me=a("strong"),Lxr=o("mbart"),xxr=o(" \u2014 "),hY=a("a"),$xr=o("FlaxMBartModel"),kxr=o(" (mBART model)"),Sxr=l(),Y5=a("li"),uMe=a("strong"),Rxr=o("mt5"),Pxr=o(" \u2014 "),pY=a("a"),Bxr=o("FlaxMT5Model"),Ixr=o(" (mT5 model)"),Nxr=l(),K5=a("li"),bMe=a("strong"),qxr=o("opt"),jxr=o(" \u2014 "),_Y=a("a"),Dxr=o("FlaxOPTModel"),Gxr=o(" (OPT model)"),Oxr=l(),Z5=a("li"),vMe=a("strong"),Vxr=o("pegasus"),Xxr=o(" \u2014 "),uY=a("a"),zxr=o("FlaxPegasusModel"),Wxr=o(" (Pegasus model)"),Qxr=l(),e3=a("li"),FMe=a("strong"),Hxr=o("roberta"),Uxr=o(" \u2014 "),bY=a("a"),Jxr=o("FlaxRobertaModel"),Yxr=o(" (RoBERTa model)"),Kxr=l(),o3=a("li"),TMe=a("strong"),Zxr=o("roformer"),e$r=o(" \u2014 "),vY=a("a"),o$r=o("FlaxRoFormerModel"),r$r=o(" (RoFormer model)"),t$r=l(),r3=a("li"),MMe=a("strong"),a$r=o("t5"),n$r=o(" \u2014 "),FY=a("a"),s$r=o("FlaxT5Model"),l$r=o(" (T5 model)"),i$r=l(),t3=a("li"),EMe=a("strong"),d$r=o("vision-text-dual-encoder"),c$r=o(" \u2014 "),TY=a("a"),f$r=o("FlaxVisionTextDualEncoderModel"),m$r=o(" (VisionTextDualEncoder model)"),g$r=l(),a3=a("li"),CMe=a("strong"),h$r=o("vit"),p$r=o(" \u2014 "),MY=a("a"),_$r=o("FlaxViTModel"),u$r=o(" (ViT model)"),b$r=l(),n3=a("li"),wMe=a("strong"),v$r=o("wav2vec2"),F$r=o(" \u2014 "),EY=a("a"),T$r=o("FlaxWav2Vec2Model"),M$r=o(" (Wav2Vec2 model)"),E$r=l(),s3=a("li"),AMe=a("strong"),C$r=o("xglm"),w$r=o(" \u2014 "),CY=a("a"),A$r=o("FlaxXGLMModel"),y$r=o(" (XGLM model)"),L$r=l(),l3=a("li"),yMe=a("strong"),x$r=o("xlm-roberta"),$$r=o(" \u2014 "),wY=a("a"),k$r=o("FlaxXLMRobertaModel"),S$r=o(" (XLM-RoBERTa model)"),R$r=l(),F(i3.$$.fragment),pDe=l(),Sc=a("h2"),d3=a("a"),LMe=a("span"),F(j9.$$.fragment),P$r=l(),xMe=a("span"),B$r=o("FlaxAutoModelForCausalLM"),_De=l(),mr=a("div"),F(D9.$$.fragment),I$r=l(),Rc=a("p"),N$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=a("a"),q$r=o("from_pretrained()"),j$r=o(" class method or the "),yY=a("a"),D$r=o("from_config()"),G$r=o(` class
method.`),O$r=l(),G9=a("p"),V$r=o("This class cannot be instantiated directly using "),$Me=a("code"),X$r=o("__init__()"),z$r=o(" (throws an error)."),W$r=l(),Ot=a("div"),F(O9.$$.fragment),Q$r=l(),kMe=a("p"),H$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U$r=l(),Pc=a("p"),J$r=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),Y$r=o("not"),K$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),Z$r=o("from_pretrained()"),ekr=o(" to load the model weights."),okr=l(),F(c3.$$.fragment),rkr=l(),Dr=a("div"),F(V9.$$.fragment),tkr=l(),RMe=a("p"),akr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nkr=l(),pn=a("p"),skr=o("The model class to instantiate is selected based on the "),PMe=a("code"),lkr=o("model_type"),ikr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),fkr=o("pretrained_model_name_or_path"),mkr=o(":"),gkr=l(),Le=a("ul"),f3=a("li"),NMe=a("strong"),hkr=o("bart"),pkr=o(" \u2014 "),xY=a("a"),_kr=o("FlaxBartForCausalLM"),ukr=o(" (BART model)"),bkr=l(),m3=a("li"),qMe=a("strong"),vkr=o("bert"),Fkr=o(" \u2014 "),$Y=a("a"),Tkr=o("FlaxBertForCausalLM"),Mkr=o(" (BERT model)"),Ekr=l(),g3=a("li"),jMe=a("strong"),Ckr=o("big_bird"),wkr=o(" \u2014 "),kY=a("a"),Akr=o("FlaxBigBirdForCausalLM"),ykr=o(" (BigBird model)"),Lkr=l(),h3=a("li"),DMe=a("strong"),xkr=o("electra"),$kr=o(" \u2014 "),SY=a("a"),kkr=o("FlaxElectraForCausalLM"),Skr=o(" (ELECTRA model)"),Rkr=l(),p3=a("li"),GMe=a("strong"),Pkr=o("gpt2"),Bkr=o(" \u2014 "),RY=a("a"),Ikr=o("FlaxGPT2LMHeadModel"),Nkr=o(" (OpenAI GPT-2 model)"),qkr=l(),_3=a("li"),OMe=a("strong"),jkr=o("gpt_neo"),Dkr=o(" \u2014 "),PY=a("a"),Gkr=o("FlaxGPTNeoForCausalLM"),Okr=o(" (GPT Neo model)"),Vkr=l(),u3=a("li"),VMe=a("strong"),Xkr=o("gptj"),zkr=o(" \u2014 "),BY=a("a"),Wkr=o("FlaxGPTJForCausalLM"),Qkr=o(" (GPT-J model)"),Hkr=l(),b3=a("li"),XMe=a("strong"),Ukr=o("opt"),Jkr=o(" \u2014 "),IY=a("a"),Ykr=o("FlaxOPTForCausalLM"),Kkr=o(" (OPT model)"),Zkr=l(),v3=a("li"),zMe=a("strong"),eSr=o("roberta"),oSr=o(" \u2014 "),NY=a("a"),rSr=o("FlaxRobertaForCausalLM"),tSr=o(" (RoBERTa model)"),aSr=l(),F3=a("li"),WMe=a("strong"),nSr=o("xglm"),sSr=o(" \u2014 "),qY=a("a"),lSr=o("FlaxXGLMForCausalLM"),iSr=o(" (XGLM model)"),dSr=l(),F(T3.$$.fragment),uDe=l(),Bc=a("h2"),M3=a("a"),QMe=a("span"),F(X9.$$.fragment),cSr=l(),HMe=a("span"),fSr=o("FlaxAutoModelForPreTraining"),bDe=l(),gr=a("div"),F(z9.$$.fragment),mSr=l(),Ic=a("p"),gSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jY=a("a"),hSr=o("from_pretrained()"),pSr=o(" class method or the "),DY=a("a"),_Sr=o("from_config()"),uSr=o(` class
method.`),bSr=l(),W9=a("p"),vSr=o("This class cannot be instantiated directly using "),UMe=a("code"),FSr=o("__init__()"),TSr=o(" (throws an error)."),MSr=l(),Vt=a("div"),F(Q9.$$.fragment),ESr=l(),JMe=a("p"),CSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wSr=l(),Nc=a("p"),ASr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),ySr=o("not"),LSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),xSr=o("from_pretrained()"),$Sr=o(" to load the model weights."),kSr=l(),F(E3.$$.fragment),SSr=l(),Gr=a("div"),F(H9.$$.fragment),RSr=l(),KMe=a("p"),PSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BSr=l(),_n=a("p"),ISr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),NSr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),jSr=o("pretrained_model_name_or_path"),DSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(":"),VSr=l(),Ee=a("ul"),C3=a("li"),rEe=a("strong"),XSr=o("albert"),zSr=o(" \u2014 "),OY=a("a"),WSr=o("FlaxAlbertForPreTraining"),QSr=o(" (ALBERT model)"),HSr=l(),w3=a("li"),tEe=a("strong"),USr=o("bart"),JSr=o(" \u2014 "),VY=a("a"),YSr=o("FlaxBartForConditionalGeneration"),KSr=o(" (BART model)"),ZSr=l(),A3=a("li"),aEe=a("strong"),eRr=o("bert"),oRr=o(" \u2014 "),XY=a("a"),rRr=o("FlaxBertForPreTraining"),tRr=o(" (BERT model)"),aRr=l(),y3=a("li"),nEe=a("strong"),nRr=o("big_bird"),sRr=o(" \u2014 "),zY=a("a"),lRr=o("FlaxBigBirdForPreTraining"),iRr=o(" (BigBird model)"),dRr=l(),L3=a("li"),sEe=a("strong"),cRr=o("electra"),fRr=o(" \u2014 "),WY=a("a"),mRr=o("FlaxElectraForPreTraining"),gRr=o(" (ELECTRA model)"),hRr=l(),x3=a("li"),lEe=a("strong"),pRr=o("mbart"),_Rr=o(" \u2014 "),QY=a("a"),uRr=o("FlaxMBartForConditionalGeneration"),bRr=o(" (mBART model)"),vRr=l(),$3=a("li"),iEe=a("strong"),FRr=o("mt5"),TRr=o(" \u2014 "),HY=a("a"),MRr=o("FlaxMT5ForConditionalGeneration"),ERr=o(" (mT5 model)"),CRr=l(),k3=a("li"),dEe=a("strong"),wRr=o("roberta"),ARr=o(" \u2014 "),UY=a("a"),yRr=o("FlaxRobertaForMaskedLM"),LRr=o(" (RoBERTa model)"),xRr=l(),S3=a("li"),cEe=a("strong"),$Rr=o("roformer"),kRr=o(" \u2014 "),JY=a("a"),SRr=o("FlaxRoFormerForMaskedLM"),RRr=o(" (RoFormer model)"),PRr=l(),R3=a("li"),fEe=a("strong"),BRr=o("t5"),IRr=o(" \u2014 "),YY=a("a"),NRr=o("FlaxT5ForConditionalGeneration"),qRr=o(" (T5 model)"),jRr=l(),P3=a("li"),mEe=a("strong"),DRr=o("wav2vec2"),GRr=o(" \u2014 "),KY=a("a"),ORr=o("FlaxWav2Vec2ForPreTraining"),VRr=o(" (Wav2Vec2 model)"),XRr=l(),B3=a("li"),gEe=a("strong"),zRr=o("xlm-roberta"),WRr=o(" \u2014 "),ZY=a("a"),QRr=o("FlaxXLMRobertaForMaskedLM"),HRr=o(" (XLM-RoBERTa model)"),URr=l(),F(I3.$$.fragment),vDe=l(),qc=a("h2"),N3=a("a"),hEe=a("span"),F(U9.$$.fragment),JRr=l(),pEe=a("span"),YRr=o("FlaxAutoModelForMaskedLM"),FDe=l(),hr=a("div"),F(J9.$$.fragment),KRr=l(),jc=a("p"),ZRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=a("a"),ePr=o("from_pretrained()"),oPr=o(" class method or the "),oK=a("a"),rPr=o("from_config()"),tPr=o(` class
method.`),aPr=l(),Y9=a("p"),nPr=o("This class cannot be instantiated directly using "),_Ee=a("code"),sPr=o("__init__()"),lPr=o(" (throws an error)."),iPr=l(),Xt=a("div"),F(K9.$$.fragment),dPr=l(),uEe=a("p"),cPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fPr=l(),Dc=a("p"),mPr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),gPr=o("not"),hPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),pPr=o("from_pretrained()"),_Pr=o(" to load the model weights."),uPr=l(),F(q3.$$.fragment),bPr=l(),Or=a("div"),F(Z9.$$.fragment),vPr=l(),vEe=a("p"),FPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TPr=l(),un=a("p"),MPr=o("The model class to instantiate is selected based on the "),FEe=a("code"),EPr=o("model_type"),CPr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),yPr=o("pretrained_model_name_or_path"),LPr=o(":"),xPr=l(),xe=a("ul"),j3=a("li"),EEe=a("strong"),$Pr=o("albert"),kPr=o(" \u2014 "),tK=a("a"),SPr=o("FlaxAlbertForMaskedLM"),RPr=o(" (ALBERT model)"),PPr=l(),D3=a("li"),CEe=a("strong"),BPr=o("bart"),IPr=o(" \u2014 "),aK=a("a"),NPr=o("FlaxBartForConditionalGeneration"),qPr=o(" (BART model)"),jPr=l(),G3=a("li"),wEe=a("strong"),DPr=o("bert"),GPr=o(" \u2014 "),nK=a("a"),OPr=o("FlaxBertForMaskedLM"),VPr=o(" (BERT model)"),XPr=l(),O3=a("li"),AEe=a("strong"),zPr=o("big_bird"),WPr=o(" \u2014 "),sK=a("a"),QPr=o("FlaxBigBirdForMaskedLM"),HPr=o(" (BigBird model)"),UPr=l(),V3=a("li"),yEe=a("strong"),JPr=o("distilbert"),YPr=o(" \u2014 "),lK=a("a"),KPr=o("FlaxDistilBertForMaskedLM"),ZPr=o(" (DistilBERT model)"),eBr=l(),X3=a("li"),LEe=a("strong"),oBr=o("electra"),rBr=o(" \u2014 "),iK=a("a"),tBr=o("FlaxElectraForMaskedLM"),aBr=o(" (ELECTRA model)"),nBr=l(),z3=a("li"),xEe=a("strong"),sBr=o("mbart"),lBr=o(" \u2014 "),dK=a("a"),iBr=o("FlaxMBartForConditionalGeneration"),dBr=o(" (mBART model)"),cBr=l(),W3=a("li"),$Ee=a("strong"),fBr=o("roberta"),mBr=o(" \u2014 "),cK=a("a"),gBr=o("FlaxRobertaForMaskedLM"),hBr=o(" (RoBERTa model)"),pBr=l(),Q3=a("li"),kEe=a("strong"),_Br=o("roformer"),uBr=o(" \u2014 "),fK=a("a"),bBr=o("FlaxRoFormerForMaskedLM"),vBr=o(" (RoFormer model)"),FBr=l(),H3=a("li"),SEe=a("strong"),TBr=o("xlm-roberta"),MBr=o(" \u2014 "),mK=a("a"),EBr=o("FlaxXLMRobertaForMaskedLM"),CBr=o(" (XLM-RoBERTa model)"),wBr=l(),F(U3.$$.fragment),TDe=l(),Gc=a("h2"),J3=a("a"),REe=a("span"),F(ex.$$.fragment),ABr=l(),PEe=a("span"),yBr=o("FlaxAutoModelForSeq2SeqLM"),MDe=l(),pr=a("div"),F(ox.$$.fragment),LBr=l(),Oc=a("p"),xBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=a("a"),$Br=o("from_pretrained()"),kBr=o(" class method or the "),hK=a("a"),SBr=o("from_config()"),RBr=o(` class
method.`),PBr=l(),rx=a("p"),BBr=o("This class cannot be instantiated directly using "),BEe=a("code"),IBr=o("__init__()"),NBr=o(" (throws an error)."),qBr=l(),zt=a("div"),F(tx.$$.fragment),jBr=l(),IEe=a("p"),DBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GBr=l(),Vc=a("p"),OBr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),VBr=o("not"),XBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),zBr=o("from_pretrained()"),WBr=o(" to load the model weights."),QBr=l(),F(Y3.$$.fragment),HBr=l(),Vr=a("div"),F(ax.$$.fragment),UBr=l(),qEe=a("p"),JBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YBr=l(),bn=a("p"),KBr=o("The model class to instantiate is selected based on the "),jEe=a("code"),ZBr=o("model_type"),eIr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),tIr=o("pretrained_model_name_or_path"),aIr=o(":"),nIr=l(),Pe=a("ul"),K3=a("li"),OEe=a("strong"),sIr=o("bart"),lIr=o(" \u2014 "),_K=a("a"),iIr=o("FlaxBartForConditionalGeneration"),dIr=o(" (BART model)"),cIr=l(),Z3=a("li"),VEe=a("strong"),fIr=o("blenderbot"),mIr=o(" \u2014 "),uK=a("a"),gIr=o("FlaxBlenderbotForConditionalGeneration"),hIr=o(" (Blenderbot model)"),pIr=l(),e0=a("li"),XEe=a("strong"),_Ir=o("blenderbot-small"),uIr=o(" \u2014 "),bK=a("a"),bIr=o("FlaxBlenderbotSmallForConditionalGeneration"),vIr=o(" (BlenderbotSmall model)"),FIr=l(),o0=a("li"),zEe=a("strong"),TIr=o("encoder-decoder"),MIr=o(" \u2014 "),vK=a("a"),EIr=o("FlaxEncoderDecoderModel"),CIr=o(" (Encoder decoder model)"),wIr=l(),r0=a("li"),WEe=a("strong"),AIr=o("marian"),yIr=o(" \u2014 "),FK=a("a"),LIr=o("FlaxMarianMTModel"),xIr=o(" (Marian model)"),$Ir=l(),t0=a("li"),QEe=a("strong"),kIr=o("mbart"),SIr=o(" \u2014 "),TK=a("a"),RIr=o("FlaxMBartForConditionalGeneration"),PIr=o(" (mBART model)"),BIr=l(),a0=a("li"),HEe=a("strong"),IIr=o("mt5"),NIr=o(" \u2014 "),MK=a("a"),qIr=o("FlaxMT5ForConditionalGeneration"),jIr=o(" (mT5 model)"),DIr=l(),n0=a("li"),UEe=a("strong"),GIr=o("pegasus"),OIr=o(" \u2014 "),EK=a("a"),VIr=o("FlaxPegasusForConditionalGeneration"),XIr=o(" (Pegasus model)"),zIr=l(),s0=a("li"),JEe=a("strong"),WIr=o("t5"),QIr=o(" \u2014 "),CK=a("a"),HIr=o("FlaxT5ForConditionalGeneration"),UIr=o(" (T5 model)"),JIr=l(),F(l0.$$.fragment),EDe=l(),Xc=a("h2"),i0=a("a"),YEe=a("span"),F(nx.$$.fragment),YIr=l(),KEe=a("span"),KIr=o("FlaxAutoModelForSequenceClassification"),CDe=l(),_r=a("div"),F(sx.$$.fragment),ZIr=l(),zc=a("p"),eNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=a("a"),oNr=o("from_pretrained()"),rNr=o(" class method or the "),AK=a("a"),tNr=o("from_config()"),aNr=o(` class
method.`),nNr=l(),lx=a("p"),sNr=o("This class cannot be instantiated directly using "),ZEe=a("code"),lNr=o("__init__()"),iNr=o(" (throws an error)."),dNr=l(),Wt=a("div"),F(ix.$$.fragment),cNr=l(),eCe=a("p"),fNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mNr=l(),Wc=a("p"),gNr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),hNr=o("not"),pNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),_Nr=o("from_pretrained()"),uNr=o(" to load the model weights."),bNr=l(),F(d0.$$.fragment),vNr=l(),Xr=a("div"),F(dx.$$.fragment),FNr=l(),rCe=a("p"),TNr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MNr=l(),vn=a("p"),ENr=o("The model class to instantiate is selected based on the "),tCe=a("code"),CNr=o("model_type"),wNr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),ANr=o("pretrained_model_name_or_path"),yNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),LNr=o("pretrained_model_name_or_path"),xNr=o(":"),$Nr=l(),$e=a("ul"),c0=a("li"),sCe=a("strong"),kNr=o("albert"),SNr=o(" \u2014 "),LK=a("a"),RNr=o("FlaxAlbertForSequenceClassification"),PNr=o(" (ALBERT model)"),BNr=l(),f0=a("li"),lCe=a("strong"),INr=o("bart"),NNr=o(" \u2014 "),xK=a("a"),qNr=o("FlaxBartForSequenceClassification"),jNr=o(" (BART model)"),DNr=l(),m0=a("li"),iCe=a("strong"),GNr=o("bert"),ONr=o(" \u2014 "),$K=a("a"),VNr=o("FlaxBertForSequenceClassification"),XNr=o(" (BERT model)"),zNr=l(),g0=a("li"),dCe=a("strong"),WNr=o("big_bird"),QNr=o(" \u2014 "),kK=a("a"),HNr=o("FlaxBigBirdForSequenceClassification"),UNr=o(" (BigBird model)"),JNr=l(),h0=a("li"),cCe=a("strong"),YNr=o("distilbert"),KNr=o(" \u2014 "),SK=a("a"),ZNr=o("FlaxDistilBertForSequenceClassification"),eqr=o(" (DistilBERT model)"),oqr=l(),p0=a("li"),fCe=a("strong"),rqr=o("electra"),tqr=o(" \u2014 "),RK=a("a"),aqr=o("FlaxElectraForSequenceClassification"),nqr=o(" (ELECTRA model)"),sqr=l(),_0=a("li"),mCe=a("strong"),lqr=o("mbart"),iqr=o(" \u2014 "),PK=a("a"),dqr=o("FlaxMBartForSequenceClassification"),cqr=o(" (mBART model)"),fqr=l(),u0=a("li"),gCe=a("strong"),mqr=o("roberta"),gqr=o(" \u2014 "),BK=a("a"),hqr=o("FlaxRobertaForSequenceClassification"),pqr=o(" (RoBERTa model)"),_qr=l(),b0=a("li"),hCe=a("strong"),uqr=o("roformer"),bqr=o(" \u2014 "),IK=a("a"),vqr=o("FlaxRoFormerForSequenceClassification"),Fqr=o(" (RoFormer model)"),Tqr=l(),v0=a("li"),pCe=a("strong"),Mqr=o("xlm-roberta"),Eqr=o(" \u2014 "),NK=a("a"),Cqr=o("FlaxXLMRobertaForSequenceClassification"),wqr=o(" (XLM-RoBERTa model)"),Aqr=l(),F(F0.$$.fragment),wDe=l(),Qc=a("h2"),T0=a("a"),_Ce=a("span"),F(cx.$$.fragment),yqr=l(),uCe=a("span"),Lqr=o("FlaxAutoModelForQuestionAnswering"),ADe=l(),ur=a("div"),F(fx.$$.fragment),xqr=l(),Hc=a("p"),$qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" class method or the "),jK=a("a"),Rqr=o("from_config()"),Pqr=o(` class
method.`),Bqr=l(),mx=a("p"),Iqr=o("This class cannot be instantiated directly using "),bCe=a("code"),Nqr=o("__init__()"),qqr=o(" (throws an error)."),jqr=l(),Qt=a("div"),F(gx.$$.fragment),Dqr=l(),vCe=a("p"),Gqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oqr=l(),Uc=a("p"),Vqr=o(`Note:
Loading a model from its configuration file does `),FCe=a("strong"),Xqr=o("not"),zqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),Wqr=o("from_pretrained()"),Qqr=o(" to load the model weights."),Hqr=l(),F(M0.$$.fragment),Uqr=l(),zr=a("div"),F(hx.$$.fragment),Jqr=l(),TCe=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kqr=l(),Fn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),MCe=a("code"),ejr=o("model_type"),ojr=o(` property of the config object (either
passed as an argument or loaded from `),ECe=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(":"),sjr=l(),ke=a("ul"),E0=a("li"),wCe=a("strong"),ljr=o("albert"),ijr=o(" \u2014 "),GK=a("a"),djr=o("FlaxAlbertForQuestionAnswering"),cjr=o(" (ALBERT model)"),fjr=l(),C0=a("li"),ACe=a("strong"),mjr=o("bart"),gjr=o(" \u2014 "),OK=a("a"),hjr=o("FlaxBartForQuestionAnswering"),pjr=o(" (BART model)"),_jr=l(),w0=a("li"),yCe=a("strong"),ujr=o("bert"),bjr=o(" \u2014 "),VK=a("a"),vjr=o("FlaxBertForQuestionAnswering"),Fjr=o(" (BERT model)"),Tjr=l(),A0=a("li"),LCe=a("strong"),Mjr=o("big_bird"),Ejr=o(" \u2014 "),XK=a("a"),Cjr=o("FlaxBigBirdForQuestionAnswering"),wjr=o(" (BigBird model)"),Ajr=l(),y0=a("li"),xCe=a("strong"),yjr=o("distilbert"),Ljr=o(" \u2014 "),zK=a("a"),xjr=o("FlaxDistilBertForQuestionAnswering"),$jr=o(" (DistilBERT model)"),kjr=l(),L0=a("li"),$Ce=a("strong"),Sjr=o("electra"),Rjr=o(" \u2014 "),WK=a("a"),Pjr=o("FlaxElectraForQuestionAnswering"),Bjr=o(" (ELECTRA model)"),Ijr=l(),x0=a("li"),kCe=a("strong"),Njr=o("mbart"),qjr=o(" \u2014 "),QK=a("a"),jjr=o("FlaxMBartForQuestionAnswering"),Djr=o(" (mBART model)"),Gjr=l(),$0=a("li"),SCe=a("strong"),Ojr=o("roberta"),Vjr=o(" \u2014 "),HK=a("a"),Xjr=o("FlaxRobertaForQuestionAnswering"),zjr=o(" (RoBERTa model)"),Wjr=l(),k0=a("li"),RCe=a("strong"),Qjr=o("roformer"),Hjr=o(" \u2014 "),UK=a("a"),Ujr=o("FlaxRoFormerForQuestionAnswering"),Jjr=o(" (RoFormer model)"),Yjr=l(),S0=a("li"),PCe=a("strong"),Kjr=o("xlm-roberta"),Zjr=o(" \u2014 "),JK=a("a"),eDr=o("FlaxXLMRobertaForQuestionAnswering"),oDr=o(" (XLM-RoBERTa model)"),rDr=l(),F(R0.$$.fragment),yDe=l(),Jc=a("h2"),P0=a("a"),BCe=a("span"),F(px.$$.fragment),tDr=l(),ICe=a("span"),aDr=o("FlaxAutoModelForTokenClassification"),LDe=l(),br=a("div"),F(_x.$$.fragment),nDr=l(),Yc=a("p"),sDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=a("a"),lDr=o("from_pretrained()"),iDr=o(" class method or the "),KK=a("a"),dDr=o("from_config()"),cDr=o(` class
method.`),fDr=l(),ux=a("p"),mDr=o("This class cannot be instantiated directly using "),NCe=a("code"),gDr=o("__init__()"),hDr=o(" (throws an error)."),pDr=l(),Ht=a("div"),F(bx.$$.fragment),_Dr=l(),qCe=a("p"),uDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bDr=l(),Kc=a("p"),vDr=o(`Note:
Loading a model from its configuration file does `),jCe=a("strong"),FDr=o("not"),TDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),MDr=o("from_pretrained()"),EDr=o(" to load the model weights."),CDr=l(),F(B0.$$.fragment),wDr=l(),Wr=a("div"),F(vx.$$.fragment),ADr=l(),DCe=a("p"),yDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LDr=l(),Tn=a("p"),xDr=o("The model class to instantiate is selected based on the "),GCe=a("code"),$Dr=o("model_type"),kDr=o(` property of the config object (either
passed as an argument or loaded from `),OCe=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=a("code"),PDr=o("pretrained_model_name_or_path"),BDr=o(":"),IDr=l(),Ge=a("ul"),I0=a("li"),XCe=a("strong"),NDr=o("albert"),qDr=o(" \u2014 "),eZ=a("a"),jDr=o("FlaxAlbertForTokenClassification"),DDr=o(" (ALBERT model)"),GDr=l(),N0=a("li"),zCe=a("strong"),ODr=o("bert"),VDr=o(" \u2014 "),oZ=a("a"),XDr=o("FlaxBertForTokenClassification"),zDr=o(" (BERT model)"),WDr=l(),q0=a("li"),WCe=a("strong"),QDr=o("big_bird"),HDr=o(" \u2014 "),rZ=a("a"),UDr=o("FlaxBigBirdForTokenClassification"),JDr=o(" (BigBird model)"),YDr=l(),j0=a("li"),QCe=a("strong"),KDr=o("distilbert"),ZDr=o(" \u2014 "),tZ=a("a"),eGr=o("FlaxDistilBertForTokenClassification"),oGr=o(" (DistilBERT model)"),rGr=l(),D0=a("li"),HCe=a("strong"),tGr=o("electra"),aGr=o(" \u2014 "),aZ=a("a"),nGr=o("FlaxElectraForTokenClassification"),sGr=o(" (ELECTRA model)"),lGr=l(),G0=a("li"),UCe=a("strong"),iGr=o("roberta"),dGr=o(" \u2014 "),nZ=a("a"),cGr=o("FlaxRobertaForTokenClassification"),fGr=o(" (RoBERTa model)"),mGr=l(),O0=a("li"),JCe=a("strong"),gGr=o("roformer"),hGr=o(" \u2014 "),sZ=a("a"),pGr=o("FlaxRoFormerForTokenClassification"),_Gr=o(" (RoFormer model)"),uGr=l(),V0=a("li"),YCe=a("strong"),bGr=o("xlm-roberta"),vGr=o(" \u2014 "),lZ=a("a"),FGr=o("FlaxXLMRobertaForTokenClassification"),TGr=o(" (XLM-RoBERTa model)"),MGr=l(),F(X0.$$.fragment),xDe=l(),Zc=a("h2"),z0=a("a"),KCe=a("span"),F(Fx.$$.fragment),EGr=l(),ZCe=a("span"),CGr=o("FlaxAutoModelForMultipleChoice"),$De=l(),vr=a("div"),F(Tx.$$.fragment),wGr=l(),ef=a("p"),AGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=a("a"),yGr=o("from_pretrained()"),LGr=o(" class method or the "),dZ=a("a"),xGr=o("from_config()"),$Gr=o(` class
method.`),kGr=l(),Mx=a("p"),SGr=o("This class cannot be instantiated directly using "),e5e=a("code"),RGr=o("__init__()"),PGr=o(" (throws an error)."),BGr=l(),Ut=a("div"),F(Ex.$$.fragment),IGr=l(),o5e=a("p"),NGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qGr=l(),of=a("p"),jGr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),DGr=o("not"),GGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),OGr=o("from_pretrained()"),VGr=o(" to load the model weights."),XGr=l(),F(W0.$$.fragment),zGr=l(),Qr=a("div"),F(Cx.$$.fragment),WGr=l(),t5e=a("p"),QGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HGr=l(),Mn=a("p"),UGr=o("The model class to instantiate is selected based on the "),a5e=a("code"),JGr=o("model_type"),YGr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),KGr=o("pretrained_model_name_or_path"),ZGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),eOr=o("pretrained_model_name_or_path"),oOr=o(":"),rOr=l(),Oe=a("ul"),Q0=a("li"),l5e=a("strong"),tOr=o("albert"),aOr=o(" \u2014 "),fZ=a("a"),nOr=o("FlaxAlbertForMultipleChoice"),sOr=o(" (ALBERT model)"),lOr=l(),H0=a("li"),i5e=a("strong"),iOr=o("bert"),dOr=o(" \u2014 "),mZ=a("a"),cOr=o("FlaxBertForMultipleChoice"),fOr=o(" (BERT model)"),mOr=l(),U0=a("li"),d5e=a("strong"),gOr=o("big_bird"),hOr=o(" \u2014 "),gZ=a("a"),pOr=o("FlaxBigBirdForMultipleChoice"),_Or=o(" (BigBird model)"),uOr=l(),J0=a("li"),c5e=a("strong"),bOr=o("distilbert"),vOr=o(" \u2014 "),hZ=a("a"),FOr=o("FlaxDistilBertForMultipleChoice"),TOr=o(" (DistilBERT model)"),MOr=l(),Y0=a("li"),f5e=a("strong"),EOr=o("electra"),COr=o(" \u2014 "),pZ=a("a"),wOr=o("FlaxElectraForMultipleChoice"),AOr=o(" (ELECTRA model)"),yOr=l(),K0=a("li"),m5e=a("strong"),LOr=o("roberta"),xOr=o(" \u2014 "),_Z=a("a"),$Or=o("FlaxRobertaForMultipleChoice"),kOr=o(" (RoBERTa model)"),SOr=l(),Z0=a("li"),g5e=a("strong"),ROr=o("roformer"),POr=o(" \u2014 "),uZ=a("a"),BOr=o("FlaxRoFormerForMultipleChoice"),IOr=o(" (RoFormer model)"),NOr=l(),ew=a("li"),h5e=a("strong"),qOr=o("xlm-roberta"),jOr=o(" \u2014 "),bZ=a("a"),DOr=o("FlaxXLMRobertaForMultipleChoice"),GOr=o(" (XLM-RoBERTa model)"),OOr=l(),F(ow.$$.fragment),kDe=l(),rf=a("h2"),rw=a("a"),p5e=a("span"),F(wx.$$.fragment),VOr=l(),_5e=a("span"),XOr=o("FlaxAutoModelForNextSentencePrediction"),SDe=l(),Fr=a("div"),F(Ax.$$.fragment),zOr=l(),tf=a("p"),WOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=a("a"),QOr=o("from_pretrained()"),HOr=o(" class method or the "),FZ=a("a"),UOr=o("from_config()"),JOr=o(` class
method.`),YOr=l(),yx=a("p"),KOr=o("This class cannot be instantiated directly using "),u5e=a("code"),ZOr=o("__init__()"),eVr=o(" (throws an error)."),oVr=l(),Jt=a("div"),F(Lx.$$.fragment),rVr=l(),b5e=a("p"),tVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aVr=l(),af=a("p"),nVr=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),sVr=o("not"),lVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),iVr=o("from_pretrained()"),dVr=o(" to load the model weights."),cVr=l(),F(tw.$$.fragment),fVr=l(),Hr=a("div"),F(xx.$$.fragment),mVr=l(),F5e=a("p"),gVr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hVr=l(),En=a("p"),pVr=o("The model class to instantiate is selected based on the "),T5e=a("code"),_Vr=o("model_type"),uVr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),bVr=o("pretrained_model_name_or_path"),vVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(":"),MVr=l(),C5e=a("ul"),aw=a("li"),w5e=a("strong"),EVr=o("bert"),CVr=o(" \u2014 "),MZ=a("a"),wVr=o("FlaxBertForNextSentencePrediction"),AVr=o(" (BERT model)"),yVr=l(),F(nw.$$.fragment),RDe=l(),nf=a("h2"),sw=a("a"),A5e=a("span"),F($x.$$.fragment),LVr=l(),y5e=a("span"),xVr=o("FlaxAutoModelForImageClassification"),PDe=l(),Tr=a("div"),F(kx.$$.fragment),$Vr=l(),sf=a("p"),kVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=a("a"),SVr=o("from_pretrained()"),RVr=o(" class method or the "),CZ=a("a"),PVr=o("from_config()"),BVr=o(` class
method.`),IVr=l(),Sx=a("p"),NVr=o("This class cannot be instantiated directly using "),L5e=a("code"),qVr=o("__init__()"),jVr=o(" (throws an error)."),DVr=l(),Yt=a("div"),F(Rx.$$.fragment),GVr=l(),x5e=a("p"),OVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VVr=l(),lf=a("p"),XVr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),zVr=o("not"),WVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),QVr=o("from_pretrained()"),HVr=o(" to load the model weights."),UVr=l(),F(lw.$$.fragment),JVr=l(),Ur=a("div"),F(Px.$$.fragment),YVr=l(),k5e=a("p"),KVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZVr=l(),Cn=a("p"),eXr=o("The model class to instantiate is selected based on the "),S5e=a("code"),oXr=o("model_type"),rXr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),tXr=o("pretrained_model_name_or_path"),aXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=a("code"),nXr=o("pretrained_model_name_or_path"),sXr=o(":"),lXr=l(),Bx=a("ul"),iw=a("li"),B5e=a("strong"),iXr=o("beit"),dXr=o(" \u2014 "),AZ=a("a"),cXr=o("FlaxBeitForImageClassification"),fXr=o(" (BEiT model)"),mXr=l(),dw=a("li"),I5e=a("strong"),gXr=o("vit"),hXr=o(" \u2014 "),yZ=a("a"),pXr=o("FlaxViTForImageClassification"),_Xr=o(" (ViT model)"),uXr=l(),F(cw.$$.fragment),BDe=l(),df=a("h2"),fw=a("a"),N5e=a("span"),F(Ix.$$.fragment),bXr=l(),q5e=a("span"),vXr=o("FlaxAutoModelForVision2Seq"),IDe=l(),Mr=a("div"),F(Nx.$$.fragment),FXr=l(),cf=a("p"),TXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=a("a"),MXr=o("from_pretrained()"),EXr=o(" class method or the "),xZ=a("a"),CXr=o("from_config()"),wXr=o(` class
method.`),AXr=l(),qx=a("p"),yXr=o("This class cannot be instantiated directly using "),j5e=a("code"),LXr=o("__init__()"),xXr=o(" (throws an error)."),$Xr=l(),Kt=a("div"),F(jx.$$.fragment),kXr=l(),D5e=a("p"),SXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RXr=l(),ff=a("p"),PXr=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),BXr=o("not"),IXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),NXr=o("from_pretrained()"),qXr=o(" to load the model weights."),jXr=l(),F(mw.$$.fragment),DXr=l(),Jr=a("div"),F(Dx.$$.fragment),GXr=l(),O5e=a("p"),OXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VXr=l(),wn=a("p"),XXr=o("The model class to instantiate is selected based on the "),V5e=a("code"),zXr=o("model_type"),WXr=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),QXr=o("pretrained_model_name_or_path"),HXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),UXr=o("pretrained_model_name_or_path"),JXr=o(":"),YXr=l(),W5e=a("ul"),gw=a("li"),Q5e=a("strong"),KXr=o("vision-encoder-decoder"),ZXr=o(" \u2014 "),kZ=a("a"),ezr=o("FlaxVisionEncoderDecoderModel"),ozr=o(" (Vision Encoder decoder model)"),rzr=l(),F(hw.$$.fragment),this.h()},l(f){const u=eSt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Gx=s(p);m=n(Gx,"A",{id:!0,class:!0,href:!0});var H5e=s(m);_=n(H5e,"SPAN",{});var U5e=s(_);T(d.$$.fragment,U5e),U5e.forEach(t),H5e.forEach(t),h=i(Gx),Mo=n(Gx,"SPAN",{});var J5e=s(Mo);fi=r(J5e,"Auto Classes"),J5e.forEach(t),Gx.forEach(t),pf=i(f),rt=n(f,"P",{});var Ox=s(rt);mi=r(Ox,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Ox,"CODE",{});var Y5e=s(gi);SA=r(Y5e,"from_pretrained()"),Y5e.forEach(t),_f=r(Ox,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ox.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var K5e=s(yn);RA=r(K5e,"AutoConfig"),K5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var Z5e=s(xn);PA=r(Z5e,"AutoModel"),Z5e.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var e3e=s($n);BA=r(e3e,"AutoTokenizer"),e3e.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Vx=s(Ae);ek=r(Vx,"will create a model that is an instance of "),ui=n(Vx,"A",{href:!0});var o3e=s(ui);ok=r(o3e,"BertModel"),o3e.forEach(t),rk=r(Vx,"."),Vx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Xx=s(wa);tk=r(Xx,"There is one class of "),bf=n(Xx,"CODE",{});var r3e=s(bf);ak=r(r3e,"AutoModel"),r3e.forEach(t),zOe=r(Xx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Xx.forEach(t),Pqe=i(f),bi=n(f,"H2",{class:!0});var zx=s(bi);vf=n(zx,"A",{id:!0,class:!0,href:!0});var t3e=s(vf);Coe=n(t3e,"SPAN",{});var a3e=s(Coe);T(IA.$$.fragment,a3e),a3e.forEach(t),t3e.forEach(t),WOe=i(zx),woe=n(zx,"SPAN",{});var n3e=s(woe);QOe=r(n3e,"Extending the Auto Classes"),n3e.forEach(t),zx.forEach(t),Bqe=i(f),kn=n(f,"P",{});var mf=s(kn);HOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=n(mf,"CODE",{});var s3e=s(Aoe);UOe=r(s3e,"NewModel"),s3e.forEach(t),JOe=r(mf,", make sure you have a "),yoe=n(mf,"CODE",{});var l3e=s(yoe);YOe=r(l3e,"NewModelConfig"),l3e.forEach(t),KOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Iqe=i(f),T(NA.$$.fragment,f),Nqe=i(f),nk=n(f,"P",{});var i3e=s(nk);ZOe=r(i3e,"You will then be able to use the auto classes like you would usually do!"),i3e.forEach(t),qqe=i(f),T(Ff.$$.fragment,f),jqe=i(f),vi=n(f,"H2",{class:!0});var Wx=s(vi);Tf=n(Wx,"A",{id:!0,class:!0,href:!0});var d3e=s(Tf);Loe=n(d3e,"SPAN",{});var c3e=s(Loe);T(qA.$$.fragment,c3e),c3e.forEach(t),d3e.forEach(t),eVe=i(Wx),xoe=n(Wx,"SPAN",{});var f3e=s(xoe);oVe=r(f3e,"AutoConfig"),f3e.forEach(t),Wx.forEach(t),Dqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(jA.$$.fragment,et),rVe=i(et),DA=n(et,"P",{});var Qx=s(DA);tVe=r(Qx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=n(Qx,"A",{href:!0});var m3e=s(sk);aVe=r(m3e,"from_pretrained()"),m3e.forEach(t),nVe=r(Qx," class method."),Qx.forEach(t),sVe=i(et),GA=n(et,"P",{});var Hx=s(GA);lVe=r(Hx,"This class cannot be instantiated directly using "),$oe=n(Hx,"CODE",{});var g3e=s($oe);iVe=r(g3e,"__init__()"),g3e.forEach(t),dVe=r(Hx," (throws an error)."),Hx.forEach(t),cVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(OA.$$.fragment,ot),fVe=i(ot),koe=n(ot,"P",{});var h3e=s(koe);mVe=r(h3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),h3e.forEach(t),gVe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);hVe=r(gf,"The configuration class to instantiate is selected based on the "),Soe=n(gf,"CODE",{});var p3e=s(Soe);pVe=r(p3e,"model_type"),p3e.forEach(t),_Ve=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=n(gf,"CODE",{});var _3e=s(Roe);uVe=r(_3e,"pretrained_model_name_or_path"),_3e.forEach(t),bVe=r(gf,":"),gf.forEach(t),vVe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var pw=s(Mf);Poe=n(pw,"STRONG",{});var u3e=s(Poe);FVe=r(u3e,"albert"),u3e.forEach(t),TVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var b3e=s(lk);MVe=r(b3e,"AlbertConfig"),b3e.forEach(t),EVe=r(pw," (ALBERT model)"),pw.forEach(t),CVe=i(y),Ef=n(y,"LI",{});var _w=s(Ef);Boe=n(_w,"STRONG",{});var v3e=s(Boe);wVe=r(v3e,"bart"),v3e.forEach(t),AVe=r(_w," \u2014 "),ik=n(_w,"A",{href:!0});var F3e=s(ik);yVe=r(F3e,"BartConfig"),F3e.forEach(t),LVe=r(_w," (BART model)"),_w.forEach(t),xVe=i(y),Cf=n(y,"LI",{});var uw=s(Cf);Ioe=n(uw,"STRONG",{});var T3e=s(Ioe);$Ve=r(T3e,"beit"),T3e.forEach(t),kVe=r(uw," \u2014 "),dk=n(uw,"A",{href:!0});var M3e=s(dk);SVe=r(M3e,"BeitConfig"),M3e.forEach(t),RVe=r(uw," (BEiT model)"),uw.forEach(t),PVe=i(y),wf=n(y,"LI",{});var bw=s(wf);Noe=n(bw,"STRONG",{});var E3e=s(Noe);BVe=r(E3e,"bert"),E3e.forEach(t),IVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var C3e=s(ck);NVe=r(C3e,"BertConfig"),C3e.forEach(t),qVe=r(bw," (BERT model)"),bw.forEach(t),jVe=i(y),Af=n(y,"LI",{});var vw=s(Af);qoe=n(vw,"STRONG",{});var w3e=s(qoe);DVe=r(w3e,"bert-generation"),w3e.forEach(t),GVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var A3e=s(fk);OVe=r(A3e,"BertGenerationConfig"),A3e.forEach(t),VVe=r(vw," (Bert Generation model)"),vw.forEach(t),XVe=i(y),yf=n(y,"LI",{});var Fw=s(yf);joe=n(Fw,"STRONG",{});var y3e=s(joe);zVe=r(y3e,"big_bird"),y3e.forEach(t),WVe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var L3e=s(mk);QVe=r(L3e,"BigBirdConfig"),L3e.forEach(t),HVe=r(Fw," (BigBird model)"),Fw.forEach(t),UVe=i(y),Lf=n(y,"LI",{});var Tw=s(Lf);Doe=n(Tw,"STRONG",{});var x3e=s(Doe);JVe=r(x3e,"bigbird_pegasus"),x3e.forEach(t),YVe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var $3e=s(gk);KVe=r($3e,"BigBirdPegasusConfig"),$3e.forEach(t),ZVe=r(Tw," (BigBirdPegasus model)"),Tw.forEach(t),eXe=i(y),xf=n(y,"LI",{});var Mw=s(xf);Goe=n(Mw,"STRONG",{});var k3e=s(Goe);oXe=r(k3e,"blenderbot"),k3e.forEach(t),rXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var S3e=s(hk);tXe=r(S3e,"BlenderbotConfig"),S3e.forEach(t),aXe=r(Mw," (Blenderbot model)"),Mw.forEach(t),nXe=i(y),$f=n(y,"LI",{});var Ew=s($f);Ooe=n(Ew,"STRONG",{});var R3e=s(Ooe);sXe=r(R3e,"blenderbot-small"),R3e.forEach(t),lXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var P3e=s(pk);iXe=r(P3e,"BlenderbotSmallConfig"),P3e.forEach(t),dXe=r(Ew," (BlenderbotSmall model)"),Ew.forEach(t),cXe=i(y),kf=n(y,"LI",{});var Cw=s(kf);Voe=n(Cw,"STRONG",{});var B3e=s(Voe);fXe=r(B3e,"bloom"),B3e.forEach(t),mXe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var I3e=s(_k);gXe=r(I3e,"BloomConfig"),I3e.forEach(t),hXe=r(Cw," (BLOOM model)"),Cw.forEach(t),pXe=i(y),Sf=n(y,"LI",{});var ww=s(Sf);Xoe=n(ww,"STRONG",{});var N3e=s(Xoe);_Xe=r(N3e,"camembert"),N3e.forEach(t),uXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var q3e=s(uk);bXe=r(q3e,"CamembertConfig"),q3e.forEach(t),vXe=r(ww," (CamemBERT model)"),ww.forEach(t),FXe=i(y),Rf=n(y,"LI",{});var Aw=s(Rf);zoe=n(Aw,"STRONG",{});var j3e=s(zoe);TXe=r(j3e,"canine"),j3e.forEach(t),MXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var D3e=s(bk);EXe=r(D3e,"CanineConfig"),D3e.forEach(t),CXe=r(Aw," (Canine model)"),Aw.forEach(t),wXe=i(y),Pf=n(y,"LI",{});var yw=s(Pf);Woe=n(yw,"STRONG",{});var G3e=s(Woe);AXe=r(G3e,"clip"),G3e.forEach(t),yXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var O3e=s(vk);LXe=r(O3e,"CLIPConfig"),O3e.forEach(t),xXe=r(yw," (CLIP model)"),yw.forEach(t),$Xe=i(y),Bf=n(y,"LI",{});var Lw=s(Bf);Qoe=n(Lw,"STRONG",{});var V3e=s(Qoe);kXe=r(V3e,"convbert"),V3e.forEach(t),SXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var X3e=s(Fk);RXe=r(X3e,"ConvBertConfig"),X3e.forEach(t),PXe=r(Lw," (ConvBERT model)"),Lw.forEach(t),BXe=i(y),If=n(y,"LI",{});var xw=s(If);Hoe=n(xw,"STRONG",{});var z3e=s(Hoe);IXe=r(z3e,"convnext"),z3e.forEach(t),NXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var W3e=s(Tk);qXe=r(W3e,"ConvNextConfig"),W3e.forEach(t),jXe=r(xw," (ConvNext model)"),xw.forEach(t),DXe=i(y),Nf=n(y,"LI",{});var $w=s(Nf);Uoe=n($w,"STRONG",{});var Q3e=s(Uoe);GXe=r(Q3e,"ctrl"),Q3e.forEach(t),OXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var H3e=s(Mk);VXe=r(H3e,"CTRLConfig"),H3e.forEach(t),XXe=r($w," (CTRL model)"),$w.forEach(t),zXe=i(y),qf=n(y,"LI",{});var kw=s(qf);Joe=n(kw,"STRONG",{});var U3e=s(Joe);WXe=r(U3e,"cvt"),U3e.forEach(t),QXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var J3e=s(Ek);HXe=r(J3e,"CvtConfig"),J3e.forEach(t),UXe=r(kw," (CvT model)"),kw.forEach(t),JXe=i(y),jf=n(y,"LI",{});var Sw=s(jf);Yoe=n(Sw,"STRONG",{});var Y3e=s(Yoe);YXe=r(Y3e,"data2vec-audio"),Y3e.forEach(t),KXe=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var K3e=s(Ck);ZXe=r(K3e,"Data2VecAudioConfig"),K3e.forEach(t),eze=r(Sw," (Data2VecAudio model)"),Sw.forEach(t),oze=i(y),Df=n(y,"LI",{});var Rw=s(Df);Koe=n(Rw,"STRONG",{});var Z3e=s(Koe);rze=r(Z3e,"data2vec-text"),Z3e.forEach(t),tze=r(Rw," \u2014 "),wk=n(Rw,"A",{href:!0});var e0e=s(wk);aze=r(e0e,"Data2VecTextConfig"),e0e.forEach(t),nze=r(Rw," (Data2VecText model)"),Rw.forEach(t),sze=i(y),Gf=n(y,"LI",{});var Pw=s(Gf);Zoe=n(Pw,"STRONG",{});var o0e=s(Zoe);lze=r(o0e,"data2vec-vision"),o0e.forEach(t),ize=r(Pw," \u2014 "),Ak=n(Pw,"A",{href:!0});var r0e=s(Ak);dze=r(r0e,"Data2VecVisionConfig"),r0e.forEach(t),cze=r(Pw," (Data2VecVision model)"),Pw.forEach(t),fze=i(y),Of=n(y,"LI",{});var Bw=s(Of);ere=n(Bw,"STRONG",{});var t0e=s(ere);mze=r(t0e,"deberta"),t0e.forEach(t),gze=r(Bw," \u2014 "),yk=n(Bw,"A",{href:!0});var a0e=s(yk);hze=r(a0e,"DebertaConfig"),a0e.forEach(t),pze=r(Bw," (DeBERTa model)"),Bw.forEach(t),_ze=i(y),Vf=n(y,"LI",{});var Iw=s(Vf);ore=n(Iw,"STRONG",{});var n0e=s(ore);uze=r(n0e,"deberta-v2"),n0e.forEach(t),bze=r(Iw," \u2014 "),Lk=n(Iw,"A",{href:!0});var s0e=s(Lk);vze=r(s0e,"DebertaV2Config"),s0e.forEach(t),Fze=r(Iw," (DeBERTa-v2 model)"),Iw.forEach(t),Tze=i(y),Xf=n(y,"LI",{});var Nw=s(Xf);rre=n(Nw,"STRONG",{});var l0e=s(rre);Mze=r(l0e,"decision_transformer"),l0e.forEach(t),Eze=r(Nw," \u2014 "),xk=n(Nw,"A",{href:!0});var azr=s(xk);Cze=r(azr,"DecisionTransformerConfig"),azr.forEach(t),wze=r(Nw," (Decision Transformer model)"),Nw.forEach(t),Aze=i(y),zf=n(y,"LI",{});var i0e=s(zf);tre=n(i0e,"STRONG",{});var nzr=s(tre);yze=r(nzr,"deit"),nzr.forEach(t),Lze=r(i0e," \u2014 "),$k=n(i0e,"A",{href:!0});var szr=s($k);xze=r(szr,"DeiTConfig"),szr.forEach(t),$ze=r(i0e," (DeiT model)"),i0e.forEach(t),kze=i(y),Wf=n(y,"LI",{});var d0e=s(Wf);are=n(d0e,"STRONG",{});var lzr=s(are);Sze=r(lzr,"detr"),lzr.forEach(t),Rze=r(d0e," \u2014 "),kk=n(d0e,"A",{href:!0});var izr=s(kk);Pze=r(izr,"DetrConfig"),izr.forEach(t),Bze=r(d0e," (DETR model)"),d0e.forEach(t),Ize=i(y),Qf=n(y,"LI",{});var c0e=s(Qf);nre=n(c0e,"STRONG",{});var dzr=s(nre);Nze=r(dzr,"distilbert"),dzr.forEach(t),qze=r(c0e," \u2014 "),Sk=n(c0e,"A",{href:!0});var czr=s(Sk);jze=r(czr,"DistilBertConfig"),czr.forEach(t),Dze=r(c0e," (DistilBERT model)"),c0e.forEach(t),Gze=i(y),Hf=n(y,"LI",{});var f0e=s(Hf);sre=n(f0e,"STRONG",{});var fzr=s(sre);Oze=r(fzr,"dpr"),fzr.forEach(t),Vze=r(f0e," \u2014 "),Rk=n(f0e,"A",{href:!0});var mzr=s(Rk);Xze=r(mzr,"DPRConfig"),mzr.forEach(t),zze=r(f0e," (DPR model)"),f0e.forEach(t),Wze=i(y),Uf=n(y,"LI",{});var m0e=s(Uf);lre=n(m0e,"STRONG",{});var gzr=s(lre);Qze=r(gzr,"dpt"),gzr.forEach(t),Hze=r(m0e," \u2014 "),Pk=n(m0e,"A",{href:!0});var hzr=s(Pk);Uze=r(hzr,"DPTConfig"),hzr.forEach(t),Jze=r(m0e," (DPT model)"),m0e.forEach(t),Yze=i(y),Jf=n(y,"LI",{});var g0e=s(Jf);ire=n(g0e,"STRONG",{});var pzr=s(ire);Kze=r(pzr,"electra"),pzr.forEach(t),Zze=r(g0e," \u2014 "),Bk=n(g0e,"A",{href:!0});var _zr=s(Bk);eWe=r(_zr,"ElectraConfig"),_zr.forEach(t),oWe=r(g0e," (ELECTRA model)"),g0e.forEach(t),rWe=i(y),Yf=n(y,"LI",{});var h0e=s(Yf);dre=n(h0e,"STRONG",{});var uzr=s(dre);tWe=r(uzr,"encoder-decoder"),uzr.forEach(t),aWe=r(h0e," \u2014 "),Ik=n(h0e,"A",{href:!0});var bzr=s(Ik);nWe=r(bzr,"EncoderDecoderConfig"),bzr.forEach(t),sWe=r(h0e," (Encoder decoder model)"),h0e.forEach(t),lWe=i(y),Kf=n(y,"LI",{});var p0e=s(Kf);cre=n(p0e,"STRONG",{});var vzr=s(cre);iWe=r(vzr,"flaubert"),vzr.forEach(t),dWe=r(p0e," \u2014 "),Nk=n(p0e,"A",{href:!0});var Fzr=s(Nk);cWe=r(Fzr,"FlaubertConfig"),Fzr.forEach(t),fWe=r(p0e," (FlauBERT model)"),p0e.forEach(t),mWe=i(y),Zf=n(y,"LI",{});var _0e=s(Zf);fre=n(_0e,"STRONG",{});var Tzr=s(fre);gWe=r(Tzr,"flava"),Tzr.forEach(t),hWe=r(_0e," \u2014 "),qk=n(_0e,"A",{href:!0});var Mzr=s(qk);pWe=r(Mzr,"FlavaConfig"),Mzr.forEach(t),_We=r(_0e," (Flava model)"),_0e.forEach(t),uWe=i(y),em=n(y,"LI",{});var u0e=s(em);mre=n(u0e,"STRONG",{});var Ezr=s(mre);bWe=r(Ezr,"fnet"),Ezr.forEach(t),vWe=r(u0e," \u2014 "),jk=n(u0e,"A",{href:!0});var Czr=s(jk);FWe=r(Czr,"FNetConfig"),Czr.forEach(t),TWe=r(u0e," (FNet model)"),u0e.forEach(t),MWe=i(y),om=n(y,"LI",{});var b0e=s(om);gre=n(b0e,"STRONG",{});var wzr=s(gre);EWe=r(wzr,"fsmt"),wzr.forEach(t),CWe=r(b0e," \u2014 "),Dk=n(b0e,"A",{href:!0});var Azr=s(Dk);wWe=r(Azr,"FSMTConfig"),Azr.forEach(t),AWe=r(b0e," (FairSeq Machine-Translation model)"),b0e.forEach(t),yWe=i(y),rm=n(y,"LI",{});var v0e=s(rm);hre=n(v0e,"STRONG",{});var yzr=s(hre);LWe=r(yzr,"funnel"),yzr.forEach(t),xWe=r(v0e," \u2014 "),Gk=n(v0e,"A",{href:!0});var Lzr=s(Gk);$We=r(Lzr,"FunnelConfig"),Lzr.forEach(t),kWe=r(v0e," (Funnel Transformer model)"),v0e.forEach(t),SWe=i(y),tm=n(y,"LI",{});var F0e=s(tm);pre=n(F0e,"STRONG",{});var xzr=s(pre);RWe=r(xzr,"glpn"),xzr.forEach(t),PWe=r(F0e," \u2014 "),Ok=n(F0e,"A",{href:!0});var $zr=s(Ok);BWe=r($zr,"GLPNConfig"),$zr.forEach(t),IWe=r(F0e," (GLPN model)"),F0e.forEach(t),NWe=i(y),am=n(y,"LI",{});var T0e=s(am);_re=n(T0e,"STRONG",{});var kzr=s(_re);qWe=r(kzr,"gpt2"),kzr.forEach(t),jWe=r(T0e," \u2014 "),Vk=n(T0e,"A",{href:!0});var Szr=s(Vk);DWe=r(Szr,"GPT2Config"),Szr.forEach(t),GWe=r(T0e," (OpenAI GPT-2 model)"),T0e.forEach(t),OWe=i(y),nm=n(y,"LI",{});var M0e=s(nm);ure=n(M0e,"STRONG",{});var Rzr=s(ure);VWe=r(Rzr,"gpt_neo"),Rzr.forEach(t),XWe=r(M0e," \u2014 "),Xk=n(M0e,"A",{href:!0});var Pzr=s(Xk);zWe=r(Pzr,"GPTNeoConfig"),Pzr.forEach(t),WWe=r(M0e," (GPT Neo model)"),M0e.forEach(t),QWe=i(y),sm=n(y,"LI",{});var E0e=s(sm);bre=n(E0e,"STRONG",{});var Bzr=s(bre);HWe=r(Bzr,"gpt_neox"),Bzr.forEach(t),UWe=r(E0e," \u2014 "),zk=n(E0e,"A",{href:!0});var Izr=s(zk);JWe=r(Izr,"GPTNeoXConfig"),Izr.forEach(t),YWe=r(E0e," (GPT NeoX model)"),E0e.forEach(t),KWe=i(y),lm=n(y,"LI",{});var C0e=s(lm);vre=n(C0e,"STRONG",{});var Nzr=s(vre);ZWe=r(Nzr,"gptj"),Nzr.forEach(t),eQe=r(C0e," \u2014 "),Wk=n(C0e,"A",{href:!0});var qzr=s(Wk);oQe=r(qzr,"GPTJConfig"),qzr.forEach(t),rQe=r(C0e," (GPT-J model)"),C0e.forEach(t),tQe=i(y),im=n(y,"LI",{});var w0e=s(im);Fre=n(w0e,"STRONG",{});var jzr=s(Fre);aQe=r(jzr,"hubert"),jzr.forEach(t),nQe=r(w0e," \u2014 "),Qk=n(w0e,"A",{href:!0});var Dzr=s(Qk);sQe=r(Dzr,"HubertConfig"),Dzr.forEach(t),lQe=r(w0e," (Hubert model)"),w0e.forEach(t),iQe=i(y),dm=n(y,"LI",{});var A0e=s(dm);Tre=n(A0e,"STRONG",{});var Gzr=s(Tre);dQe=r(Gzr,"ibert"),Gzr.forEach(t),cQe=r(A0e," \u2014 "),Hk=n(A0e,"A",{href:!0});var Ozr=s(Hk);fQe=r(Ozr,"IBertConfig"),Ozr.forEach(t),mQe=r(A0e," (I-BERT model)"),A0e.forEach(t),gQe=i(y),cm=n(y,"LI",{});var y0e=s(cm);Mre=n(y0e,"STRONG",{});var Vzr=s(Mre);hQe=r(Vzr,"imagegpt"),Vzr.forEach(t),pQe=r(y0e," \u2014 "),Uk=n(y0e,"A",{href:!0});var Xzr=s(Uk);_Qe=r(Xzr,"ImageGPTConfig"),Xzr.forEach(t),uQe=r(y0e," (ImageGPT model)"),y0e.forEach(t),bQe=i(y),fm=n(y,"LI",{});var L0e=s(fm);Ere=n(L0e,"STRONG",{});var zzr=s(Ere);vQe=r(zzr,"layoutlm"),zzr.forEach(t),FQe=r(L0e," \u2014 "),Jk=n(L0e,"A",{href:!0});var Wzr=s(Jk);TQe=r(Wzr,"LayoutLMConfig"),Wzr.forEach(t),MQe=r(L0e," (LayoutLM model)"),L0e.forEach(t),EQe=i(y),mm=n(y,"LI",{});var x0e=s(mm);Cre=n(x0e,"STRONG",{});var Qzr=s(Cre);CQe=r(Qzr,"layoutlmv2"),Qzr.forEach(t),wQe=r(x0e," \u2014 "),Yk=n(x0e,"A",{href:!0});var Hzr=s(Yk);AQe=r(Hzr,"LayoutLMv2Config"),Hzr.forEach(t),yQe=r(x0e," (LayoutLMv2 model)"),x0e.forEach(t),LQe=i(y),gm=n(y,"LI",{});var $0e=s(gm);wre=n($0e,"STRONG",{});var Uzr=s(wre);xQe=r(Uzr,"layoutlmv3"),Uzr.forEach(t),$Qe=r($0e," \u2014 "),Kk=n($0e,"A",{href:!0});var Jzr=s(Kk);kQe=r(Jzr,"LayoutLMv3Config"),Jzr.forEach(t),SQe=r($0e," (LayoutLMv3 model)"),$0e.forEach(t),RQe=i(y),hm=n(y,"LI",{});var k0e=s(hm);Are=n(k0e,"STRONG",{});var Yzr=s(Are);PQe=r(Yzr,"led"),Yzr.forEach(t),BQe=r(k0e," \u2014 "),Zk=n(k0e,"A",{href:!0});var Kzr=s(Zk);IQe=r(Kzr,"LEDConfig"),Kzr.forEach(t),NQe=r(k0e," (LED model)"),k0e.forEach(t),qQe=i(y),pm=n(y,"LI",{});var S0e=s(pm);yre=n(S0e,"STRONG",{});var Zzr=s(yre);jQe=r(Zzr,"longformer"),Zzr.forEach(t),DQe=r(S0e," \u2014 "),eS=n(S0e,"A",{href:!0});var eWr=s(eS);GQe=r(eWr,"LongformerConfig"),eWr.forEach(t),OQe=r(S0e," (Longformer model)"),S0e.forEach(t),VQe=i(y),_m=n(y,"LI",{});var R0e=s(_m);Lre=n(R0e,"STRONG",{});var oWr=s(Lre);XQe=r(oWr,"luke"),oWr.forEach(t),zQe=r(R0e," \u2014 "),oS=n(R0e,"A",{href:!0});var rWr=s(oS);WQe=r(rWr,"LukeConfig"),rWr.forEach(t),QQe=r(R0e," (LUKE model)"),R0e.forEach(t),HQe=i(y),um=n(y,"LI",{});var P0e=s(um);xre=n(P0e,"STRONG",{});var tWr=s(xre);UQe=r(tWr,"lxmert"),tWr.forEach(t),JQe=r(P0e," \u2014 "),rS=n(P0e,"A",{href:!0});var aWr=s(rS);YQe=r(aWr,"LxmertConfig"),aWr.forEach(t),KQe=r(P0e," (LXMERT model)"),P0e.forEach(t),ZQe=i(y),bm=n(y,"LI",{});var B0e=s(bm);$re=n(B0e,"STRONG",{});var nWr=s($re);eHe=r(nWr,"m2m_100"),nWr.forEach(t),oHe=r(B0e," \u2014 "),tS=n(B0e,"A",{href:!0});var sWr=s(tS);rHe=r(sWr,"M2M100Config"),sWr.forEach(t),tHe=r(B0e," (M2M100 model)"),B0e.forEach(t),aHe=i(y),vm=n(y,"LI",{});var I0e=s(vm);kre=n(I0e,"STRONG",{});var lWr=s(kre);nHe=r(lWr,"marian"),lWr.forEach(t),sHe=r(I0e," \u2014 "),aS=n(I0e,"A",{href:!0});var iWr=s(aS);lHe=r(iWr,"MarianConfig"),iWr.forEach(t),iHe=r(I0e," (Marian model)"),I0e.forEach(t),dHe=i(y),Fm=n(y,"LI",{});var N0e=s(Fm);Sre=n(N0e,"STRONG",{});var dWr=s(Sre);cHe=r(dWr,"maskformer"),dWr.forEach(t),fHe=r(N0e," \u2014 "),nS=n(N0e,"A",{href:!0});var cWr=s(nS);mHe=r(cWr,"MaskFormerConfig"),cWr.forEach(t),gHe=r(N0e," (MaskFormer model)"),N0e.forEach(t),hHe=i(y),Tm=n(y,"LI",{});var q0e=s(Tm);Rre=n(q0e,"STRONG",{});var fWr=s(Rre);pHe=r(fWr,"mbart"),fWr.forEach(t),_He=r(q0e," \u2014 "),sS=n(q0e,"A",{href:!0});var mWr=s(sS);uHe=r(mWr,"MBartConfig"),mWr.forEach(t),bHe=r(q0e," (mBART model)"),q0e.forEach(t),vHe=i(y),Mm=n(y,"LI",{});var j0e=s(Mm);Pre=n(j0e,"STRONG",{});var gWr=s(Pre);FHe=r(gWr,"megatron-bert"),gWr.forEach(t),THe=r(j0e," \u2014 "),lS=n(j0e,"A",{href:!0});var hWr=s(lS);MHe=r(hWr,"MegatronBertConfig"),hWr.forEach(t),EHe=r(j0e," (MegatronBert model)"),j0e.forEach(t),CHe=i(y),Em=n(y,"LI",{});var D0e=s(Em);Bre=n(D0e,"STRONG",{});var pWr=s(Bre);wHe=r(pWr,"mobilebert"),pWr.forEach(t),AHe=r(D0e," \u2014 "),iS=n(D0e,"A",{href:!0});var _Wr=s(iS);yHe=r(_Wr,"MobileBertConfig"),_Wr.forEach(t),LHe=r(D0e," (MobileBERT model)"),D0e.forEach(t),xHe=i(y),Cm=n(y,"LI",{});var G0e=s(Cm);Ire=n(G0e,"STRONG",{});var uWr=s(Ire);$He=r(uWr,"mpnet"),uWr.forEach(t),kHe=r(G0e," \u2014 "),dS=n(G0e,"A",{href:!0});var bWr=s(dS);SHe=r(bWr,"MPNetConfig"),bWr.forEach(t),RHe=r(G0e," (MPNet model)"),G0e.forEach(t),PHe=i(y),wm=n(y,"LI",{});var O0e=s(wm);Nre=n(O0e,"STRONG",{});var vWr=s(Nre);BHe=r(vWr,"mt5"),vWr.forEach(t),IHe=r(O0e," \u2014 "),cS=n(O0e,"A",{href:!0});var FWr=s(cS);NHe=r(FWr,"MT5Config"),FWr.forEach(t),qHe=r(O0e," (mT5 model)"),O0e.forEach(t),jHe=i(y),Am=n(y,"LI",{});var V0e=s(Am);qre=n(V0e,"STRONG",{});var TWr=s(qre);DHe=r(TWr,"nystromformer"),TWr.forEach(t),GHe=r(V0e," \u2014 "),fS=n(V0e,"A",{href:!0});var MWr=s(fS);OHe=r(MWr,"NystromformerConfig"),MWr.forEach(t),VHe=r(V0e," (Nystromformer model)"),V0e.forEach(t),XHe=i(y),ym=n(y,"LI",{});var X0e=s(ym);jre=n(X0e,"STRONG",{});var EWr=s(jre);zHe=r(EWr,"openai-gpt"),EWr.forEach(t),WHe=r(X0e," \u2014 "),mS=n(X0e,"A",{href:!0});var CWr=s(mS);QHe=r(CWr,"OpenAIGPTConfig"),CWr.forEach(t),HHe=r(X0e," (OpenAI GPT model)"),X0e.forEach(t),UHe=i(y),Lm=n(y,"LI",{});var z0e=s(Lm);Dre=n(z0e,"STRONG",{});var wWr=s(Dre);JHe=r(wWr,"opt"),wWr.forEach(t),YHe=r(z0e," \u2014 "),gS=n(z0e,"A",{href:!0});var AWr=s(gS);KHe=r(AWr,"OPTConfig"),AWr.forEach(t),ZHe=r(z0e," (OPT model)"),z0e.forEach(t),eUe=i(y),xm=n(y,"LI",{});var W0e=s(xm);Gre=n(W0e,"STRONG",{});var yWr=s(Gre);oUe=r(yWr,"pegasus"),yWr.forEach(t),rUe=r(W0e," \u2014 "),hS=n(W0e,"A",{href:!0});var LWr=s(hS);tUe=r(LWr,"PegasusConfig"),LWr.forEach(t),aUe=r(W0e," (Pegasus model)"),W0e.forEach(t),nUe=i(y),$m=n(y,"LI",{});var Q0e=s($m);Ore=n(Q0e,"STRONG",{});var xWr=s(Ore);sUe=r(xWr,"perceiver"),xWr.forEach(t),lUe=r(Q0e," \u2014 "),pS=n(Q0e,"A",{href:!0});var $Wr=s(pS);iUe=r($Wr,"PerceiverConfig"),$Wr.forEach(t),dUe=r(Q0e," (Perceiver model)"),Q0e.forEach(t),cUe=i(y),km=n(y,"LI",{});var H0e=s(km);Vre=n(H0e,"STRONG",{});var kWr=s(Vre);fUe=r(kWr,"plbart"),kWr.forEach(t),mUe=r(H0e," \u2014 "),_S=n(H0e,"A",{href:!0});var SWr=s(_S);gUe=r(SWr,"PLBartConfig"),SWr.forEach(t),hUe=r(H0e," (PLBart model)"),H0e.forEach(t),pUe=i(y),Sm=n(y,"LI",{});var U0e=s(Sm);Xre=n(U0e,"STRONG",{});var RWr=s(Xre);_Ue=r(RWr,"poolformer"),RWr.forEach(t),uUe=r(U0e," \u2014 "),uS=n(U0e,"A",{href:!0});var PWr=s(uS);bUe=r(PWr,"PoolFormerConfig"),PWr.forEach(t),vUe=r(U0e," (PoolFormer model)"),U0e.forEach(t),FUe=i(y),Rm=n(y,"LI",{});var J0e=s(Rm);zre=n(J0e,"STRONG",{});var BWr=s(zre);TUe=r(BWr,"prophetnet"),BWr.forEach(t),MUe=r(J0e," \u2014 "),bS=n(J0e,"A",{href:!0});var IWr=s(bS);EUe=r(IWr,"ProphetNetConfig"),IWr.forEach(t),CUe=r(J0e," (ProphetNet model)"),J0e.forEach(t),wUe=i(y),Pm=n(y,"LI",{});var Y0e=s(Pm);Wre=n(Y0e,"STRONG",{});var NWr=s(Wre);AUe=r(NWr,"qdqbert"),NWr.forEach(t),yUe=r(Y0e," \u2014 "),vS=n(Y0e,"A",{href:!0});var qWr=s(vS);LUe=r(qWr,"QDQBertConfig"),qWr.forEach(t),xUe=r(Y0e," (QDQBert model)"),Y0e.forEach(t),$Ue=i(y),Bm=n(y,"LI",{});var K0e=s(Bm);Qre=n(K0e,"STRONG",{});var jWr=s(Qre);kUe=r(jWr,"rag"),jWr.forEach(t),SUe=r(K0e," \u2014 "),FS=n(K0e,"A",{href:!0});var DWr=s(FS);RUe=r(DWr,"RagConfig"),DWr.forEach(t),PUe=r(K0e," (RAG model)"),K0e.forEach(t),BUe=i(y),Im=n(y,"LI",{});var Z0e=s(Im);Hre=n(Z0e,"STRONG",{});var GWr=s(Hre);IUe=r(GWr,"realm"),GWr.forEach(t),NUe=r(Z0e," \u2014 "),TS=n(Z0e,"A",{href:!0});var OWr=s(TS);qUe=r(OWr,"RealmConfig"),OWr.forEach(t),jUe=r(Z0e," (Realm model)"),Z0e.forEach(t),DUe=i(y),Nm=n(y,"LI",{});var ewe=s(Nm);Ure=n(ewe,"STRONG",{});var VWr=s(Ure);GUe=r(VWr,"reformer"),VWr.forEach(t),OUe=r(ewe," \u2014 "),MS=n(ewe,"A",{href:!0});var XWr=s(MS);VUe=r(XWr,"ReformerConfig"),XWr.forEach(t),XUe=r(ewe," (Reformer model)"),ewe.forEach(t),zUe=i(y),qm=n(y,"LI",{});var owe=s(qm);Jre=n(owe,"STRONG",{});var zWr=s(Jre);WUe=r(zWr,"regnet"),zWr.forEach(t),QUe=r(owe," \u2014 "),ES=n(owe,"A",{href:!0});var WWr=s(ES);HUe=r(WWr,"RegNetConfig"),WWr.forEach(t),UUe=r(owe," (RegNet model)"),owe.forEach(t),JUe=i(y),jm=n(y,"LI",{});var rwe=s(jm);Yre=n(rwe,"STRONG",{});var QWr=s(Yre);YUe=r(QWr,"rembert"),QWr.forEach(t),KUe=r(rwe," \u2014 "),CS=n(rwe,"A",{href:!0});var HWr=s(CS);ZUe=r(HWr,"RemBertConfig"),HWr.forEach(t),eJe=r(rwe," (RemBERT model)"),rwe.forEach(t),oJe=i(y),Dm=n(y,"LI",{});var twe=s(Dm);Kre=n(twe,"STRONG",{});var UWr=s(Kre);rJe=r(UWr,"resnet"),UWr.forEach(t),tJe=r(twe," \u2014 "),wS=n(twe,"A",{href:!0});var JWr=s(wS);aJe=r(JWr,"ResNetConfig"),JWr.forEach(t),nJe=r(twe," (ResNet model)"),twe.forEach(t),sJe=i(y),Gm=n(y,"LI",{});var awe=s(Gm);Zre=n(awe,"STRONG",{});var YWr=s(Zre);lJe=r(YWr,"retribert"),YWr.forEach(t),iJe=r(awe," \u2014 "),AS=n(awe,"A",{href:!0});var KWr=s(AS);dJe=r(KWr,"RetriBertConfig"),KWr.forEach(t),cJe=r(awe," (RetriBERT model)"),awe.forEach(t),fJe=i(y),Om=n(y,"LI",{});var nwe=s(Om);ete=n(nwe,"STRONG",{});var ZWr=s(ete);mJe=r(ZWr,"roberta"),ZWr.forEach(t),gJe=r(nwe," \u2014 "),yS=n(nwe,"A",{href:!0});var eQr=s(yS);hJe=r(eQr,"RobertaConfig"),eQr.forEach(t),pJe=r(nwe," (RoBERTa model)"),nwe.forEach(t),_Je=i(y),Vm=n(y,"LI",{});var swe=s(Vm);ote=n(swe,"STRONG",{});var oQr=s(ote);uJe=r(oQr,"roformer"),oQr.forEach(t),bJe=r(swe," \u2014 "),LS=n(swe,"A",{href:!0});var rQr=s(LS);vJe=r(rQr,"RoFormerConfig"),rQr.forEach(t),FJe=r(swe," (RoFormer model)"),swe.forEach(t),TJe=i(y),Xm=n(y,"LI",{});var lwe=s(Xm);rte=n(lwe,"STRONG",{});var tQr=s(rte);MJe=r(tQr,"segformer"),tQr.forEach(t),EJe=r(lwe," \u2014 "),xS=n(lwe,"A",{href:!0});var aQr=s(xS);CJe=r(aQr,"SegformerConfig"),aQr.forEach(t),wJe=r(lwe," (SegFormer model)"),lwe.forEach(t),AJe=i(y),zm=n(y,"LI",{});var iwe=s(zm);tte=n(iwe,"STRONG",{});var nQr=s(tte);yJe=r(nQr,"sew"),nQr.forEach(t),LJe=r(iwe," \u2014 "),$S=n(iwe,"A",{href:!0});var sQr=s($S);xJe=r(sQr,"SEWConfig"),sQr.forEach(t),$Je=r(iwe," (SEW model)"),iwe.forEach(t),kJe=i(y),Wm=n(y,"LI",{});var dwe=s(Wm);ate=n(dwe,"STRONG",{});var lQr=s(ate);SJe=r(lQr,"sew-d"),lQr.forEach(t),RJe=r(dwe," \u2014 "),kS=n(dwe,"A",{href:!0});var iQr=s(kS);PJe=r(iQr,"SEWDConfig"),iQr.forEach(t),BJe=r(dwe," (SEW-D model)"),dwe.forEach(t),IJe=i(y),Qm=n(y,"LI",{});var cwe=s(Qm);nte=n(cwe,"STRONG",{});var dQr=s(nte);NJe=r(dQr,"speech-encoder-decoder"),dQr.forEach(t),qJe=r(cwe," \u2014 "),SS=n(cwe,"A",{href:!0});var cQr=s(SS);jJe=r(cQr,"SpeechEncoderDecoderConfig"),cQr.forEach(t),DJe=r(cwe," (Speech Encoder decoder model)"),cwe.forEach(t),GJe=i(y),Hm=n(y,"LI",{});var fwe=s(Hm);ste=n(fwe,"STRONG",{});var fQr=s(ste);OJe=r(fQr,"speech_to_text"),fQr.forEach(t),VJe=r(fwe," \u2014 "),RS=n(fwe,"A",{href:!0});var mQr=s(RS);XJe=r(mQr,"Speech2TextConfig"),mQr.forEach(t),zJe=r(fwe," (Speech2Text model)"),fwe.forEach(t),WJe=i(y),Um=n(y,"LI",{});var mwe=s(Um);lte=n(mwe,"STRONG",{});var gQr=s(lte);QJe=r(gQr,"speech_to_text_2"),gQr.forEach(t),HJe=r(mwe," \u2014 "),PS=n(mwe,"A",{href:!0});var hQr=s(PS);UJe=r(hQr,"Speech2Text2Config"),hQr.forEach(t),JJe=r(mwe," (Speech2Text2 model)"),mwe.forEach(t),YJe=i(y),Jm=n(y,"LI",{});var gwe=s(Jm);ite=n(gwe,"STRONG",{});var pQr=s(ite);KJe=r(pQr,"splinter"),pQr.forEach(t),ZJe=r(gwe," \u2014 "),BS=n(gwe,"A",{href:!0});var _Qr=s(BS);eYe=r(_Qr,"SplinterConfig"),_Qr.forEach(t),oYe=r(gwe," (Splinter model)"),gwe.forEach(t),rYe=i(y),Ym=n(y,"LI",{});var hwe=s(Ym);dte=n(hwe,"STRONG",{});var uQr=s(dte);tYe=r(uQr,"squeezebert"),uQr.forEach(t),aYe=r(hwe," \u2014 "),IS=n(hwe,"A",{href:!0});var bQr=s(IS);nYe=r(bQr,"SqueezeBertConfig"),bQr.forEach(t),sYe=r(hwe," (SqueezeBERT model)"),hwe.forEach(t),lYe=i(y),Km=n(y,"LI",{});var pwe=s(Km);cte=n(pwe,"STRONG",{});var vQr=s(cte);iYe=r(vQr,"swin"),vQr.forEach(t),dYe=r(pwe," \u2014 "),NS=n(pwe,"A",{href:!0});var FQr=s(NS);cYe=r(FQr,"SwinConfig"),FQr.forEach(t),fYe=r(pwe," (Swin model)"),pwe.forEach(t),mYe=i(y),Zm=n(y,"LI",{});var _we=s(Zm);fte=n(_we,"STRONG",{});var TQr=s(fte);gYe=r(TQr,"t5"),TQr.forEach(t),hYe=r(_we," \u2014 "),qS=n(_we,"A",{href:!0});var MQr=s(qS);pYe=r(MQr,"T5Config"),MQr.forEach(t),_Ye=r(_we," (T5 model)"),_we.forEach(t),uYe=i(y),eg=n(y,"LI",{});var uwe=s(eg);mte=n(uwe,"STRONG",{});var EQr=s(mte);bYe=r(EQr,"tapas"),EQr.forEach(t),vYe=r(uwe," \u2014 "),jS=n(uwe,"A",{href:!0});var CQr=s(jS);FYe=r(CQr,"TapasConfig"),CQr.forEach(t),TYe=r(uwe," (TAPAS model)"),uwe.forEach(t),MYe=i(y),og=n(y,"LI",{});var bwe=s(og);gte=n(bwe,"STRONG",{});var wQr=s(gte);EYe=r(wQr,"trajectory_transformer"),wQr.forEach(t),CYe=r(bwe," \u2014 "),DS=n(bwe,"A",{href:!0});var AQr=s(DS);wYe=r(AQr,"TrajectoryTransformerConfig"),AQr.forEach(t),AYe=r(bwe," (Trajectory Transformer model)"),bwe.forEach(t),yYe=i(y),rg=n(y,"LI",{});var vwe=s(rg);hte=n(vwe,"STRONG",{});var yQr=s(hte);LYe=r(yQr,"transfo-xl"),yQr.forEach(t),xYe=r(vwe," \u2014 "),GS=n(vwe,"A",{href:!0});var LQr=s(GS);$Ye=r(LQr,"TransfoXLConfig"),LQr.forEach(t),kYe=r(vwe," (Transformer-XL model)"),vwe.forEach(t),SYe=i(y),tg=n(y,"LI",{});var Fwe=s(tg);pte=n(Fwe,"STRONG",{});var xQr=s(pte);RYe=r(xQr,"trocr"),xQr.forEach(t),PYe=r(Fwe," \u2014 "),OS=n(Fwe,"A",{href:!0});var $Qr=s(OS);BYe=r($Qr,"TrOCRConfig"),$Qr.forEach(t),IYe=r(Fwe," (TrOCR model)"),Fwe.forEach(t),NYe=i(y),ag=n(y,"LI",{});var Twe=s(ag);_te=n(Twe,"STRONG",{});var kQr=s(_te);qYe=r(kQr,"unispeech"),kQr.forEach(t),jYe=r(Twe," \u2014 "),VS=n(Twe,"A",{href:!0});var SQr=s(VS);DYe=r(SQr,"UniSpeechConfig"),SQr.forEach(t),GYe=r(Twe," (UniSpeech model)"),Twe.forEach(t),OYe=i(y),ng=n(y,"LI",{});var Mwe=s(ng);ute=n(Mwe,"STRONG",{});var RQr=s(ute);VYe=r(RQr,"unispeech-sat"),RQr.forEach(t),XYe=r(Mwe," \u2014 "),XS=n(Mwe,"A",{href:!0});var PQr=s(XS);zYe=r(PQr,"UniSpeechSatConfig"),PQr.forEach(t),WYe=r(Mwe," (UniSpeechSat model)"),Mwe.forEach(t),QYe=i(y),sg=n(y,"LI",{});var Ewe=s(sg);bte=n(Ewe,"STRONG",{});var BQr=s(bte);HYe=r(BQr,"van"),BQr.forEach(t),UYe=r(Ewe," \u2014 "),zS=n(Ewe,"A",{href:!0});var IQr=s(zS);JYe=r(IQr,"VanConfig"),IQr.forEach(t),YYe=r(Ewe," (VAN model)"),Ewe.forEach(t),KYe=i(y),lg=n(y,"LI",{});var Cwe=s(lg);vte=n(Cwe,"STRONG",{});var NQr=s(vte);ZYe=r(NQr,"vilt"),NQr.forEach(t),eKe=r(Cwe," \u2014 "),WS=n(Cwe,"A",{href:!0});var qQr=s(WS);oKe=r(qQr,"ViltConfig"),qQr.forEach(t),rKe=r(Cwe," (ViLT model)"),Cwe.forEach(t),tKe=i(y),ig=n(y,"LI",{});var wwe=s(ig);Fte=n(wwe,"STRONG",{});var jQr=s(Fte);aKe=r(jQr,"vision-encoder-decoder"),jQr.forEach(t),nKe=r(wwe," \u2014 "),QS=n(wwe,"A",{href:!0});var DQr=s(QS);sKe=r(DQr,"VisionEncoderDecoderConfig"),DQr.forEach(t),lKe=r(wwe," (Vision Encoder decoder model)"),wwe.forEach(t),iKe=i(y),dg=n(y,"LI",{});var Awe=s(dg);Tte=n(Awe,"STRONG",{});var GQr=s(Tte);dKe=r(GQr,"vision-text-dual-encoder"),GQr.forEach(t),cKe=r(Awe," \u2014 "),HS=n(Awe,"A",{href:!0});var OQr=s(HS);fKe=r(OQr,"VisionTextDualEncoderConfig"),OQr.forEach(t),mKe=r(Awe," (VisionTextDualEncoder model)"),Awe.forEach(t),gKe=i(y),cg=n(y,"LI",{});var ywe=s(cg);Mte=n(ywe,"STRONG",{});var VQr=s(Mte);hKe=r(VQr,"visual_bert"),VQr.forEach(t),pKe=r(ywe," \u2014 "),US=n(ywe,"A",{href:!0});var XQr=s(US);_Ke=r(XQr,"VisualBertConfig"),XQr.forEach(t),uKe=r(ywe," (VisualBert model)"),ywe.forEach(t),bKe=i(y),fg=n(y,"LI",{});var Lwe=s(fg);Ete=n(Lwe,"STRONG",{});var zQr=s(Ete);vKe=r(zQr,"vit"),zQr.forEach(t),FKe=r(Lwe," \u2014 "),JS=n(Lwe,"A",{href:!0});var WQr=s(JS);TKe=r(WQr,"ViTConfig"),WQr.forEach(t),MKe=r(Lwe," (ViT model)"),Lwe.forEach(t),EKe=i(y),mg=n(y,"LI",{});var xwe=s(mg);Cte=n(xwe,"STRONG",{});var QQr=s(Cte);CKe=r(QQr,"vit_mae"),QQr.forEach(t),wKe=r(xwe," \u2014 "),YS=n(xwe,"A",{href:!0});var HQr=s(YS);AKe=r(HQr,"ViTMAEConfig"),HQr.forEach(t),yKe=r(xwe," (ViTMAE model)"),xwe.forEach(t),LKe=i(y),gg=n(y,"LI",{});var $we=s(gg);wte=n($we,"STRONG",{});var UQr=s(wte);xKe=r(UQr,"wav2vec2"),UQr.forEach(t),$Ke=r($we," \u2014 "),KS=n($we,"A",{href:!0});var JQr=s(KS);kKe=r(JQr,"Wav2Vec2Config"),JQr.forEach(t),SKe=r($we," (Wav2Vec2 model)"),$we.forEach(t),RKe=i(y),hg=n(y,"LI",{});var kwe=s(hg);Ate=n(kwe,"STRONG",{});var YQr=s(Ate);PKe=r(YQr,"wav2vec2-conformer"),YQr.forEach(t),BKe=r(kwe," \u2014 "),ZS=n(kwe,"A",{href:!0});var KQr=s(ZS);IKe=r(KQr,"Wav2Vec2ConformerConfig"),KQr.forEach(t),NKe=r(kwe," (Wav2Vec2-Conformer model)"),kwe.forEach(t),qKe=i(y),pg=n(y,"LI",{});var Swe=s(pg);yte=n(Swe,"STRONG",{});var ZQr=s(yte);jKe=r(ZQr,"wavlm"),ZQr.forEach(t),DKe=r(Swe," \u2014 "),eR=n(Swe,"A",{href:!0});var eHr=s(eR);GKe=r(eHr,"WavLMConfig"),eHr.forEach(t),OKe=r(Swe," (WavLM model)"),Swe.forEach(t),VKe=i(y),_g=n(y,"LI",{});var Rwe=s(_g);Lte=n(Rwe,"STRONG",{});var oHr=s(Lte);XKe=r(oHr,"xglm"),oHr.forEach(t),zKe=r(Rwe," \u2014 "),oR=n(Rwe,"A",{href:!0});var rHr=s(oR);WKe=r(rHr,"XGLMConfig"),rHr.forEach(t),QKe=r(Rwe," (XGLM model)"),Rwe.forEach(t),HKe=i(y),ug=n(y,"LI",{});var Pwe=s(ug);xte=n(Pwe,"STRONG",{});var tHr=s(xte);UKe=r(tHr,"xlm"),tHr.forEach(t),JKe=r(Pwe," \u2014 "),rR=n(Pwe,"A",{href:!0});var aHr=s(rR);YKe=r(aHr,"XLMConfig"),aHr.forEach(t),KKe=r(Pwe," (XLM model)"),Pwe.forEach(t),ZKe=i(y),bg=n(y,"LI",{});var Bwe=s(bg);$te=n(Bwe,"STRONG",{});var nHr=s($te);eZe=r(nHr,"xlm-prophetnet"),nHr.forEach(t),oZe=r(Bwe," \u2014 "),tR=n(Bwe,"A",{href:!0});var sHr=s(tR);rZe=r(sHr,"XLMProphetNetConfig"),sHr.forEach(t),tZe=r(Bwe," (XLMProphetNet model)"),Bwe.forEach(t),aZe=i(y),vg=n(y,"LI",{});var Iwe=s(vg);kte=n(Iwe,"STRONG",{});var lHr=s(kte);nZe=r(lHr,"xlm-roberta"),lHr.forEach(t),sZe=r(Iwe," \u2014 "),aR=n(Iwe,"A",{href:!0});var iHr=s(aR);lZe=r(iHr,"XLMRobertaConfig"),iHr.forEach(t),iZe=r(Iwe," (XLM-RoBERTa model)"),Iwe.forEach(t),dZe=i(y),Fg=n(y,"LI",{});var Nwe=s(Fg);Ste=n(Nwe,"STRONG",{});var dHr=s(Ste);cZe=r(dHr,"xlm-roberta-xl"),dHr.forEach(t),fZe=r(Nwe," \u2014 "),nR=n(Nwe,"A",{href:!0});var cHr=s(nR);mZe=r(cHr,"XLMRobertaXLConfig"),cHr.forEach(t),gZe=r(Nwe," (XLM-RoBERTa-XL model)"),Nwe.forEach(t),hZe=i(y),Tg=n(y,"LI",{});var qwe=s(Tg);Rte=n(qwe,"STRONG",{});var fHr=s(Rte);pZe=r(fHr,"xlnet"),fHr.forEach(t),_Ze=r(qwe," \u2014 "),sR=n(qwe,"A",{href:!0});var mHr=s(sR);uZe=r(mHr,"XLNetConfig"),mHr.forEach(t),bZe=r(qwe," (XLNet model)"),qwe.forEach(t),vZe=i(y),Mg=n(y,"LI",{});var jwe=s(Mg);Pte=n(jwe,"STRONG",{});var gHr=s(Pte);FZe=r(gHr,"yolos"),gHr.forEach(t),TZe=r(jwe," \u2014 "),lR=n(jwe,"A",{href:!0});var hHr=s(lR);MZe=r(hHr,"YolosConfig"),hHr.forEach(t),EZe=r(jwe," (YOLOS model)"),jwe.forEach(t),CZe=i(y),Eg=n(y,"LI",{});var Dwe=s(Eg);Bte=n(Dwe,"STRONG",{});var pHr=s(Bte);wZe=r(pHr,"yoso"),pHr.forEach(t),AZe=r(Dwe," \u2014 "),iR=n(Dwe,"A",{href:!0});var _Hr=s(iR);yZe=r(_Hr,"YosoConfig"),_Hr.forEach(t),LZe=r(Dwe," (YOSO model)"),Dwe.forEach(t),y.forEach(t),xZe=i(ot),T(Cg.$$.fragment,ot),ot.forEach(t),$Ze=i(et),wg=n(et,"DIV",{class:!0});var qDe=s(wg);T(VA.$$.fragment,qDe),kZe=i(qDe),Ite=n(qDe,"P",{});var uHr=s(Ite);SZe=r(uHr,"Register a new configuration for this class."),uHr.forEach(t),qDe.forEach(t),et.forEach(t),Gqe=i(f),Ti=n(f,"H2",{class:!0});var jDe=s(Ti);Ag=n(jDe,"A",{id:!0,class:!0,href:!0});var bHr=s(Ag);Nte=n(bHr,"SPAN",{});var vHr=s(Nte);T(XA.$$.fragment,vHr),vHr.forEach(t),bHr.forEach(t),RZe=i(jDe),qte=n(jDe,"SPAN",{});var FHr=s(qte);PZe=r(FHr,"AutoTokenizer"),FHr.forEach(t),jDe.forEach(t),Oqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(zA.$$.fragment,Ns),BZe=i(Ns),WA=n(Ns,"P",{});var DDe=s(WA);IZe=r(DDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=n(DDe,"A",{href:!0});var THr=s(dR);NZe=r(THr,"AutoTokenizer.from_pretrained()"),THr.forEach(t),qZe=r(DDe," class method."),DDe.forEach(t),jZe=i(Ns),QA=n(Ns,"P",{});var GDe=s(QA);DZe=r(GDe,"This class cannot be instantiated directly using "),jte=n(GDe,"CODE",{});var MHr=s(jte);GZe=r(MHr,"__init__()"),MHr.forEach(t),OZe=r(GDe," (throws an error)."),GDe.forEach(t),VZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(HA.$$.fragment,qs),XZe=i(qs),Dte=n(qs,"P",{});var EHr=s(Dte);zZe=r(EHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),EHr.forEach(t),WZe=i(qs),Aa=n(qs,"P",{});var qw=s(Aa);QZe=r(qw,"The tokenizer class to instantiate is selected based on the "),Gte=n(qw,"CODE",{});var CHr=s(Gte);HZe=r(CHr,"model_type"),CHr.forEach(t),UZe=r(qw,` property of the config object (either
passed as an argument or loaded from `),Ote=n(qw,"CODE",{});var wHr=s(Ote);JZe=r(wHr,"pretrained_model_name_or_path"),wHr.forEach(t),YZe=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=n(qw,"CODE",{});var AHr=s(Vte);KZe=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),ZZe=r(qw,":"),qw.forEach(t),eeo=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ux=s(Sn);Xte=n(Ux,"STRONG",{});var yHr=s(Xte);oeo=r(yHr,"albert"),yHr.forEach(t),reo=r(Ux," \u2014 "),cR=n(Ux,"A",{href:!0});var LHr=s(cR);teo=r(LHr,"AlbertTokenizer"),LHr.forEach(t),aeo=r(Ux," or "),fR=n(Ux,"A",{href:!0});var xHr=s(fR);neo=r(xHr,"AlbertTokenizerFast"),xHr.forEach(t),seo=r(Ux," (ALBERT model)"),Ux.forEach(t),leo=i(S),Rn=n(S,"LI",{});var Jx=s(Rn);zte=n(Jx,"STRONG",{});var $Hr=s(zte);ieo=r($Hr,"bart"),$Hr.forEach(t),deo=r(Jx," \u2014 "),mR=n(Jx,"A",{href:!0});var kHr=s(mR);ceo=r(kHr,"BartTokenizer"),kHr.forEach(t),feo=r(Jx," or "),gR=n(Jx,"A",{href:!0});var SHr=s(gR);meo=r(SHr,"BartTokenizerFast"),SHr.forEach(t),geo=r(Jx," (BART model)"),Jx.forEach(t),heo=i(S),Pn=n(S,"LI",{});var Yx=s(Pn);Wte=n(Yx,"STRONG",{});var RHr=s(Wte);peo=r(RHr,"barthez"),RHr.forEach(t),_eo=r(Yx," \u2014 "),hR=n(Yx,"A",{href:!0});var PHr=s(hR);ueo=r(PHr,"BarthezTokenizer"),PHr.forEach(t),beo=r(Yx," or "),pR=n(Yx,"A",{href:!0});var BHr=s(pR);veo=r(BHr,"BarthezTokenizerFast"),BHr.forEach(t),Feo=r(Yx," (BARThez model)"),Yx.forEach(t),Teo=i(S),yg=n(S,"LI",{});var Gwe=s(yg);Qte=n(Gwe,"STRONG",{});var IHr=s(Qte);Meo=r(IHr,"bartpho"),IHr.forEach(t),Eeo=r(Gwe," \u2014 "),_R=n(Gwe,"A",{href:!0});var NHr=s(_R);Ceo=r(NHr,"BartphoTokenizer"),NHr.forEach(t),weo=r(Gwe," (BARTpho model)"),Gwe.forEach(t),Aeo=i(S),Bn=n(S,"LI",{});var Kx=s(Bn);Hte=n(Kx,"STRONG",{});var qHr=s(Hte);yeo=r(qHr,"bert"),qHr.forEach(t),Leo=r(Kx," \u2014 "),uR=n(Kx,"A",{href:!0});var jHr=s(uR);xeo=r(jHr,"BertTokenizer"),jHr.forEach(t),$eo=r(Kx," or "),bR=n(Kx,"A",{href:!0});var DHr=s(bR);keo=r(DHr,"BertTokenizerFast"),DHr.forEach(t),Seo=r(Kx," (BERT model)"),Kx.forEach(t),Reo=i(S),Lg=n(S,"LI",{});var Owe=s(Lg);Ute=n(Owe,"STRONG",{});var GHr=s(Ute);Peo=r(GHr,"bert-generation"),GHr.forEach(t),Beo=r(Owe," \u2014 "),vR=n(Owe,"A",{href:!0});var OHr=s(vR);Ieo=r(OHr,"BertGenerationTokenizer"),OHr.forEach(t),Neo=r(Owe," (Bert Generation model)"),Owe.forEach(t),qeo=i(S),xg=n(S,"LI",{});var Vwe=s(xg);Jte=n(Vwe,"STRONG",{});var VHr=s(Jte);jeo=r(VHr,"bert-japanese"),VHr.forEach(t),Deo=r(Vwe," \u2014 "),FR=n(Vwe,"A",{href:!0});var XHr=s(FR);Geo=r(XHr,"BertJapaneseTokenizer"),XHr.forEach(t),Oeo=r(Vwe," (BertJapanese model)"),Vwe.forEach(t),Veo=i(S),$g=n(S,"LI",{});var Xwe=s($g);Yte=n(Xwe,"STRONG",{});var zHr=s(Yte);Xeo=r(zHr,"bertweet"),zHr.forEach(t),zeo=r(Xwe," \u2014 "),TR=n(Xwe,"A",{href:!0});var WHr=s(TR);Weo=r(WHr,"BertweetTokenizer"),WHr.forEach(t),Qeo=r(Xwe," (Bertweet model)"),Xwe.forEach(t),Heo=i(S),In=n(S,"LI",{});var Zx=s(In);Kte=n(Zx,"STRONG",{});var QHr=s(Kte);Ueo=r(QHr,"big_bird"),QHr.forEach(t),Jeo=r(Zx," \u2014 "),MR=n(Zx,"A",{href:!0});var HHr=s(MR);Yeo=r(HHr,"BigBirdTokenizer"),HHr.forEach(t),Keo=r(Zx," or "),ER=n(Zx,"A",{href:!0});var UHr=s(ER);Zeo=r(UHr,"BigBirdTokenizerFast"),UHr.forEach(t),eoo=r(Zx," (BigBird model)"),Zx.forEach(t),ooo=i(S),Nn=n(S,"LI",{});var e$=s(Nn);Zte=n(e$,"STRONG",{});var JHr=s(Zte);roo=r(JHr,"bigbird_pegasus"),JHr.forEach(t),too=r(e$," \u2014 "),CR=n(e$,"A",{href:!0});var YHr=s(CR);aoo=r(YHr,"PegasusTokenizer"),YHr.forEach(t),noo=r(e$," or "),wR=n(e$,"A",{href:!0});var KHr=s(wR);soo=r(KHr,"PegasusTokenizerFast"),KHr.forEach(t),loo=r(e$," (BigBirdPegasus model)"),e$.forEach(t),ioo=i(S),qn=n(S,"LI",{});var o$=s(qn);eae=n(o$,"STRONG",{});var ZHr=s(eae);doo=r(ZHr,"blenderbot"),ZHr.forEach(t),coo=r(o$," \u2014 "),AR=n(o$,"A",{href:!0});var eUr=s(AR);foo=r(eUr,"BlenderbotTokenizer"),eUr.forEach(t),moo=r(o$," or "),yR=n(o$,"A",{href:!0});var oUr=s(yR);goo=r(oUr,"BlenderbotTokenizerFast"),oUr.forEach(t),hoo=r(o$," (Blenderbot model)"),o$.forEach(t),poo=i(S),kg=n(S,"LI",{});var zwe=s(kg);oae=n(zwe,"STRONG",{});var rUr=s(oae);_oo=r(rUr,"blenderbot-small"),rUr.forEach(t),uoo=r(zwe," \u2014 "),LR=n(zwe,"A",{href:!0});var tUr=s(LR);boo=r(tUr,"BlenderbotSmallTokenizer"),tUr.forEach(t),voo=r(zwe," (BlenderbotSmall model)"),zwe.forEach(t),Foo=i(S),Sg=n(S,"LI",{});var Wwe=s(Sg);rae=n(Wwe,"STRONG",{});var aUr=s(rae);Too=r(aUr,"bloom"),aUr.forEach(t),Moo=r(Wwe," \u2014 "),xR=n(Wwe,"A",{href:!0});var nUr=s(xR);Eoo=r(nUr,"BloomTokenizerFast"),nUr.forEach(t),Coo=r(Wwe," (BLOOM model)"),Wwe.forEach(t),woo=i(S),Rg=n(S,"LI",{});var Qwe=s(Rg);tae=n(Qwe,"STRONG",{});var sUr=s(tae);Aoo=r(sUr,"byt5"),sUr.forEach(t),yoo=r(Qwe," \u2014 "),$R=n(Qwe,"A",{href:!0});var lUr=s($R);Loo=r(lUr,"ByT5Tokenizer"),lUr.forEach(t),xoo=r(Qwe," (ByT5 model)"),Qwe.forEach(t),$oo=i(S),jn=n(S,"LI",{});var r$=s(jn);aae=n(r$,"STRONG",{});var iUr=s(aae);koo=r(iUr,"camembert"),iUr.forEach(t),Soo=r(r$," \u2014 "),kR=n(r$,"A",{href:!0});var dUr=s(kR);Roo=r(dUr,"CamembertTokenizer"),dUr.forEach(t),Poo=r(r$," or "),SR=n(r$,"A",{href:!0});var cUr=s(SR);Boo=r(cUr,"CamembertTokenizerFast"),cUr.forEach(t),Ioo=r(r$," (CamemBERT model)"),r$.forEach(t),Noo=i(S),Pg=n(S,"LI",{});var Hwe=s(Pg);nae=n(Hwe,"STRONG",{});var fUr=s(nae);qoo=r(fUr,"canine"),fUr.forEach(t),joo=r(Hwe," \u2014 "),RR=n(Hwe,"A",{href:!0});var mUr=s(RR);Doo=r(mUr,"CanineTokenizer"),mUr.forEach(t),Goo=r(Hwe," (Canine model)"),Hwe.forEach(t),Ooo=i(S),Dn=n(S,"LI",{});var t$=s(Dn);sae=n(t$,"STRONG",{});var gUr=s(sae);Voo=r(gUr,"clip"),gUr.forEach(t),Xoo=r(t$," \u2014 "),PR=n(t$,"A",{href:!0});var hUr=s(PR);zoo=r(hUr,"CLIPTokenizer"),hUr.forEach(t),Woo=r(t$," or "),BR=n(t$,"A",{href:!0});var pUr=s(BR);Qoo=r(pUr,"CLIPTokenizerFast"),pUr.forEach(t),Hoo=r(t$," (CLIP model)"),t$.forEach(t),Uoo=i(S),Gn=n(S,"LI",{});var a$=s(Gn);lae=n(a$,"STRONG",{});var _Ur=s(lae);Joo=r(_Ur,"convbert"),_Ur.forEach(t),Yoo=r(a$," \u2014 "),IR=n(a$,"A",{href:!0});var uUr=s(IR);Koo=r(uUr,"ConvBertTokenizer"),uUr.forEach(t),Zoo=r(a$," or "),NR=n(a$,"A",{href:!0});var bUr=s(NR);ero=r(bUr,"ConvBertTokenizerFast"),bUr.forEach(t),oro=r(a$," (ConvBERT model)"),a$.forEach(t),rro=i(S),On=n(S,"LI",{});var n$=s(On);iae=n(n$,"STRONG",{});var vUr=s(iae);tro=r(vUr,"cpm"),vUr.forEach(t),aro=r(n$," \u2014 "),qR=n(n$,"A",{href:!0});var FUr=s(qR);nro=r(FUr,"CpmTokenizer"),FUr.forEach(t),sro=r(n$," or "),jR=n(n$,"A",{href:!0});var TUr=s(jR);lro=r(TUr,"CpmTokenizerFast"),TUr.forEach(t),iro=r(n$," (CPM model)"),n$.forEach(t),dro=i(S),Bg=n(S,"LI",{});var Uwe=s(Bg);dae=n(Uwe,"STRONG",{});var MUr=s(dae);cro=r(MUr,"ctrl"),MUr.forEach(t),fro=r(Uwe," \u2014 "),DR=n(Uwe,"A",{href:!0});var EUr=s(DR);mro=r(EUr,"CTRLTokenizer"),EUr.forEach(t),gro=r(Uwe," (CTRL model)"),Uwe.forEach(t),hro=i(S),Vn=n(S,"LI",{});var s$=s(Vn);cae=n(s$,"STRONG",{});var CUr=s(cae);pro=r(CUr,"data2vec-text"),CUr.forEach(t),_ro=r(s$," \u2014 "),GR=n(s$,"A",{href:!0});var wUr=s(GR);uro=r(wUr,"RobertaTokenizer"),wUr.forEach(t),bro=r(s$," or "),OR=n(s$,"A",{href:!0});var AUr=s(OR);vro=r(AUr,"RobertaTokenizerFast"),AUr.forEach(t),Fro=r(s$," (Data2VecText model)"),s$.forEach(t),Tro=i(S),Xn=n(S,"LI",{});var l$=s(Xn);fae=n(l$,"STRONG",{});var yUr=s(fae);Mro=r(yUr,"deberta"),yUr.forEach(t),Ero=r(l$," \u2014 "),VR=n(l$,"A",{href:!0});var LUr=s(VR);Cro=r(LUr,"DebertaTokenizer"),LUr.forEach(t),wro=r(l$," or "),XR=n(l$,"A",{href:!0});var xUr=s(XR);Aro=r(xUr,"DebertaTokenizerFast"),xUr.forEach(t),yro=r(l$," (DeBERTa model)"),l$.forEach(t),Lro=i(S),zn=n(S,"LI",{});var i$=s(zn);mae=n(i$,"STRONG",{});var $Ur=s(mae);xro=r($Ur,"deberta-v2"),$Ur.forEach(t),$ro=r(i$," \u2014 "),zR=n(i$,"A",{href:!0});var kUr=s(zR);kro=r(kUr,"DebertaV2Tokenizer"),kUr.forEach(t),Sro=r(i$," or "),WR=n(i$,"A",{href:!0});var SUr=s(WR);Rro=r(SUr,"DebertaV2TokenizerFast"),SUr.forEach(t),Pro=r(i$," (DeBERTa-v2 model)"),i$.forEach(t),Bro=i(S),Wn=n(S,"LI",{});var d$=s(Wn);gae=n(d$,"STRONG",{});var RUr=s(gae);Iro=r(RUr,"distilbert"),RUr.forEach(t),Nro=r(d$," \u2014 "),QR=n(d$,"A",{href:!0});var PUr=s(QR);qro=r(PUr,"DistilBertTokenizer"),PUr.forEach(t),jro=r(d$," or "),HR=n(d$,"A",{href:!0});var BUr=s(HR);Dro=r(BUr,"DistilBertTokenizerFast"),BUr.forEach(t),Gro=r(d$," (DistilBERT model)"),d$.forEach(t),Oro=i(S),Qn=n(S,"LI",{});var c$=s(Qn);hae=n(c$,"STRONG",{});var IUr=s(hae);Vro=r(IUr,"dpr"),IUr.forEach(t),Xro=r(c$," \u2014 "),UR=n(c$,"A",{href:!0});var NUr=s(UR);zro=r(NUr,"DPRQuestionEncoderTokenizer"),NUr.forEach(t),Wro=r(c$," or "),JR=n(c$,"A",{href:!0});var qUr=s(JR);Qro=r(qUr,"DPRQuestionEncoderTokenizerFast"),qUr.forEach(t),Hro=r(c$," (DPR model)"),c$.forEach(t),Uro=i(S),Hn=n(S,"LI",{});var f$=s(Hn);pae=n(f$,"STRONG",{});var jUr=s(pae);Jro=r(jUr,"electra"),jUr.forEach(t),Yro=r(f$," \u2014 "),YR=n(f$,"A",{href:!0});var DUr=s(YR);Kro=r(DUr,"ElectraTokenizer"),DUr.forEach(t),Zro=r(f$," or "),KR=n(f$,"A",{href:!0});var GUr=s(KR);eto=r(GUr,"ElectraTokenizerFast"),GUr.forEach(t),oto=r(f$," (ELECTRA model)"),f$.forEach(t),rto=i(S),Ig=n(S,"LI",{});var Jwe=s(Ig);_ae=n(Jwe,"STRONG",{});var OUr=s(_ae);tto=r(OUr,"flaubert"),OUr.forEach(t),ato=r(Jwe," \u2014 "),ZR=n(Jwe,"A",{href:!0});var VUr=s(ZR);nto=r(VUr,"FlaubertTokenizer"),VUr.forEach(t),sto=r(Jwe," (FlauBERT model)"),Jwe.forEach(t),lto=i(S),Un=n(S,"LI",{});var m$=s(Un);uae=n(m$,"STRONG",{});var XUr=s(uae);ito=r(XUr,"fnet"),XUr.forEach(t),dto=r(m$," \u2014 "),eP=n(m$,"A",{href:!0});var zUr=s(eP);cto=r(zUr,"FNetTokenizer"),zUr.forEach(t),fto=r(m$," or "),oP=n(m$,"A",{href:!0});var WUr=s(oP);mto=r(WUr,"FNetTokenizerFast"),WUr.forEach(t),gto=r(m$," (FNet model)"),m$.forEach(t),hto=i(S),Ng=n(S,"LI",{});var Ywe=s(Ng);bae=n(Ywe,"STRONG",{});var QUr=s(bae);pto=r(QUr,"fsmt"),QUr.forEach(t),_to=r(Ywe," \u2014 "),rP=n(Ywe,"A",{href:!0});var HUr=s(rP);uto=r(HUr,"FSMTTokenizer"),HUr.forEach(t),bto=r(Ywe," (FairSeq Machine-Translation model)"),Ywe.forEach(t),vto=i(S),Jn=n(S,"LI",{});var g$=s(Jn);vae=n(g$,"STRONG",{});var UUr=s(vae);Fto=r(UUr,"funnel"),UUr.forEach(t),Tto=r(g$," \u2014 "),tP=n(g$,"A",{href:!0});var JUr=s(tP);Mto=r(JUr,"FunnelTokenizer"),JUr.forEach(t),Eto=r(g$," or "),aP=n(g$,"A",{href:!0});var YUr=s(aP);Cto=r(YUr,"FunnelTokenizerFast"),YUr.forEach(t),wto=r(g$," (Funnel Transformer model)"),g$.forEach(t),Ato=i(S),Yn=n(S,"LI",{});var h$=s(Yn);Fae=n(h$,"STRONG",{});var KUr=s(Fae);yto=r(KUr,"gpt2"),KUr.forEach(t),Lto=r(h$," \u2014 "),nP=n(h$,"A",{href:!0});var ZUr=s(nP);xto=r(ZUr,"GPT2Tokenizer"),ZUr.forEach(t),$to=r(h$," or "),sP=n(h$,"A",{href:!0});var eJr=s(sP);kto=r(eJr,"GPT2TokenizerFast"),eJr.forEach(t),Sto=r(h$," (OpenAI GPT-2 model)"),h$.forEach(t),Rto=i(S),Kn=n(S,"LI",{});var p$=s(Kn);Tae=n(p$,"STRONG",{});var oJr=s(Tae);Pto=r(oJr,"gpt_neo"),oJr.forEach(t),Bto=r(p$," \u2014 "),lP=n(p$,"A",{href:!0});var rJr=s(lP);Ito=r(rJr,"GPT2Tokenizer"),rJr.forEach(t),Nto=r(p$," or "),iP=n(p$,"A",{href:!0});var tJr=s(iP);qto=r(tJr,"GPT2TokenizerFast"),tJr.forEach(t),jto=r(p$," (GPT Neo model)"),p$.forEach(t),Dto=i(S),qg=n(S,"LI",{});var Kwe=s(qg);Mae=n(Kwe,"STRONG",{});var aJr=s(Mae);Gto=r(aJr,"gpt_neox"),aJr.forEach(t),Oto=r(Kwe," \u2014 "),dP=n(Kwe,"A",{href:!0});var nJr=s(dP);Vto=r(nJr,"GPTNeoXTokenizerFast"),nJr.forEach(t),Xto=r(Kwe," (GPT NeoX model)"),Kwe.forEach(t),zto=i(S),Zn=n(S,"LI",{});var _$=s(Zn);Eae=n(_$,"STRONG",{});var sJr=s(Eae);Wto=r(sJr,"gptj"),sJr.forEach(t),Qto=r(_$," \u2014 "),cP=n(_$,"A",{href:!0});var lJr=s(cP);Hto=r(lJr,"GPT2Tokenizer"),lJr.forEach(t),Uto=r(_$," or "),fP=n(_$,"A",{href:!0});var iJr=s(fP);Jto=r(iJr,"GPT2TokenizerFast"),iJr.forEach(t),Yto=r(_$," (GPT-J model)"),_$.forEach(t),Kto=i(S),es=n(S,"LI",{});var u$=s(es);Cae=n(u$,"STRONG",{});var dJr=s(Cae);Zto=r(dJr,"herbert"),dJr.forEach(t),eao=r(u$," \u2014 "),mP=n(u$,"A",{href:!0});var cJr=s(mP);oao=r(cJr,"HerbertTokenizer"),cJr.forEach(t),rao=r(u$," or "),gP=n(u$,"A",{href:!0});var fJr=s(gP);tao=r(fJr,"HerbertTokenizerFast"),fJr.forEach(t),aao=r(u$," (HerBERT model)"),u$.forEach(t),nao=i(S),jg=n(S,"LI",{});var Zwe=s(jg);wae=n(Zwe,"STRONG",{});var mJr=s(wae);sao=r(mJr,"hubert"),mJr.forEach(t),lao=r(Zwe," \u2014 "),hP=n(Zwe,"A",{href:!0});var gJr=s(hP);iao=r(gJr,"Wav2Vec2CTCTokenizer"),gJr.forEach(t),dao=r(Zwe," (Hubert model)"),Zwe.forEach(t),cao=i(S),os=n(S,"LI",{});var b$=s(os);Aae=n(b$,"STRONG",{});var hJr=s(Aae);fao=r(hJr,"ibert"),hJr.forEach(t),mao=r(b$," \u2014 "),pP=n(b$,"A",{href:!0});var pJr=s(pP);gao=r(pJr,"RobertaTokenizer"),pJr.forEach(t),hao=r(b$," or "),_P=n(b$,"A",{href:!0});var _Jr=s(_P);pao=r(_Jr,"RobertaTokenizerFast"),_Jr.forEach(t),_ao=r(b$," (I-BERT model)"),b$.forEach(t),uao=i(S),rs=n(S,"LI",{});var v$=s(rs);yae=n(v$,"STRONG",{});var uJr=s(yae);bao=r(uJr,"layoutlm"),uJr.forEach(t),vao=r(v$," \u2014 "),uP=n(v$,"A",{href:!0});var bJr=s(uP);Fao=r(bJr,"LayoutLMTokenizer"),bJr.forEach(t),Tao=r(v$," or "),bP=n(v$,"A",{href:!0});var vJr=s(bP);Mao=r(vJr,"LayoutLMTokenizerFast"),vJr.forEach(t),Eao=r(v$," (LayoutLM model)"),v$.forEach(t),Cao=i(S),ts=n(S,"LI",{});var F$=s(ts);Lae=n(F$,"STRONG",{});var FJr=s(Lae);wao=r(FJr,"layoutlmv2"),FJr.forEach(t),Aao=r(F$," \u2014 "),vP=n(F$,"A",{href:!0});var TJr=s(vP);yao=r(TJr,"LayoutLMv2Tokenizer"),TJr.forEach(t),Lao=r(F$," or "),FP=n(F$,"A",{href:!0});var MJr=s(FP);xao=r(MJr,"LayoutLMv2TokenizerFast"),MJr.forEach(t),$ao=r(F$," (LayoutLMv2 model)"),F$.forEach(t),kao=i(S),as=n(S,"LI",{});var T$=s(as);xae=n(T$,"STRONG",{});var EJr=s(xae);Sao=r(EJr,"layoutlmv3"),EJr.forEach(t),Rao=r(T$," \u2014 "),TP=n(T$,"A",{href:!0});var CJr=s(TP);Pao=r(CJr,"LayoutLMv3Tokenizer"),CJr.forEach(t),Bao=r(T$," or "),MP=n(T$,"A",{href:!0});var wJr=s(MP);Iao=r(wJr,"LayoutLMv3TokenizerFast"),wJr.forEach(t),Nao=r(T$," (LayoutLMv3 model)"),T$.forEach(t),qao=i(S),ns=n(S,"LI",{});var M$=s(ns);$ae=n(M$,"STRONG",{});var AJr=s($ae);jao=r(AJr,"layoutxlm"),AJr.forEach(t),Dao=r(M$," \u2014 "),EP=n(M$,"A",{href:!0});var yJr=s(EP);Gao=r(yJr,"LayoutXLMTokenizer"),yJr.forEach(t),Oao=r(M$," or "),CP=n(M$,"A",{href:!0});var LJr=s(CP);Vao=r(LJr,"LayoutXLMTokenizerFast"),LJr.forEach(t),Xao=r(M$," (LayoutXLM model)"),M$.forEach(t),zao=i(S),ss=n(S,"LI",{});var E$=s(ss);kae=n(E$,"STRONG",{});var xJr=s(kae);Wao=r(xJr,"led"),xJr.forEach(t),Qao=r(E$," \u2014 "),wP=n(E$,"A",{href:!0});var $Jr=s(wP);Hao=r($Jr,"LEDTokenizer"),$Jr.forEach(t),Uao=r(E$," or "),AP=n(E$,"A",{href:!0});var kJr=s(AP);Jao=r(kJr,"LEDTokenizerFast"),kJr.forEach(t),Yao=r(E$," (LED model)"),E$.forEach(t),Kao=i(S),ls=n(S,"LI",{});var C$=s(ls);Sae=n(C$,"STRONG",{});var SJr=s(Sae);Zao=r(SJr,"longformer"),SJr.forEach(t),eno=r(C$," \u2014 "),yP=n(C$,"A",{href:!0});var RJr=s(yP);ono=r(RJr,"LongformerTokenizer"),RJr.forEach(t),rno=r(C$," or "),LP=n(C$,"A",{href:!0});var PJr=s(LP);tno=r(PJr,"LongformerTokenizerFast"),PJr.forEach(t),ano=r(C$," (Longformer model)"),C$.forEach(t),nno=i(S),Dg=n(S,"LI",{});var e6e=s(Dg);Rae=n(e6e,"STRONG",{});var BJr=s(Rae);sno=r(BJr,"luke"),BJr.forEach(t),lno=r(e6e," \u2014 "),xP=n(e6e,"A",{href:!0});var IJr=s(xP);ino=r(IJr,"LukeTokenizer"),IJr.forEach(t),dno=r(e6e," (LUKE model)"),e6e.forEach(t),cno=i(S),is=n(S,"LI",{});var w$=s(is);Pae=n(w$,"STRONG",{});var NJr=s(Pae);fno=r(NJr,"lxmert"),NJr.forEach(t),mno=r(w$," \u2014 "),$P=n(w$,"A",{href:!0});var qJr=s($P);gno=r(qJr,"LxmertTokenizer"),qJr.forEach(t),hno=r(w$," or "),kP=n(w$,"A",{href:!0});var jJr=s(kP);pno=r(jJr,"LxmertTokenizerFast"),jJr.forEach(t),_no=r(w$," (LXMERT model)"),w$.forEach(t),uno=i(S),Gg=n(S,"LI",{});var o6e=s(Gg);Bae=n(o6e,"STRONG",{});var DJr=s(Bae);bno=r(DJr,"m2m_100"),DJr.forEach(t),vno=r(o6e," \u2014 "),SP=n(o6e,"A",{href:!0});var GJr=s(SP);Fno=r(GJr,"M2M100Tokenizer"),GJr.forEach(t),Tno=r(o6e," (M2M100 model)"),o6e.forEach(t),Mno=i(S),Og=n(S,"LI",{});var r6e=s(Og);Iae=n(r6e,"STRONG",{});var OJr=s(Iae);Eno=r(OJr,"marian"),OJr.forEach(t),Cno=r(r6e," \u2014 "),RP=n(r6e,"A",{href:!0});var VJr=s(RP);wno=r(VJr,"MarianTokenizer"),VJr.forEach(t),Ano=r(r6e," (Marian model)"),r6e.forEach(t),yno=i(S),ds=n(S,"LI",{});var A$=s(ds);Nae=n(A$,"STRONG",{});var XJr=s(Nae);Lno=r(XJr,"mbart"),XJr.forEach(t),xno=r(A$," \u2014 "),PP=n(A$,"A",{href:!0});var zJr=s(PP);$no=r(zJr,"MBartTokenizer"),zJr.forEach(t),kno=r(A$," or "),BP=n(A$,"A",{href:!0});var WJr=s(BP);Sno=r(WJr,"MBartTokenizerFast"),WJr.forEach(t),Rno=r(A$," (mBART model)"),A$.forEach(t),Pno=i(S),cs=n(S,"LI",{});var y$=s(cs);qae=n(y$,"STRONG",{});var QJr=s(qae);Bno=r(QJr,"mbart50"),QJr.forEach(t),Ino=r(y$," \u2014 "),IP=n(y$,"A",{href:!0});var HJr=s(IP);Nno=r(HJr,"MBart50Tokenizer"),HJr.forEach(t),qno=r(y$," or "),NP=n(y$,"A",{href:!0});var UJr=s(NP);jno=r(UJr,"MBart50TokenizerFast"),UJr.forEach(t),Dno=r(y$," (mBART-50 model)"),y$.forEach(t),Gno=i(S),fs=n(S,"LI",{});var L$=s(fs);jae=n(L$,"STRONG",{});var JJr=s(jae);Ono=r(JJr,"megatron-bert"),JJr.forEach(t),Vno=r(L$," \u2014 "),qP=n(L$,"A",{href:!0});var YJr=s(qP);Xno=r(YJr,"BertTokenizer"),YJr.forEach(t),zno=r(L$," or "),jP=n(L$,"A",{href:!0});var KJr=s(jP);Wno=r(KJr,"BertTokenizerFast"),KJr.forEach(t),Qno=r(L$," (MegatronBert model)"),L$.forEach(t),Hno=i(S),Vg=n(S,"LI",{});var t6e=s(Vg);Dae=n(t6e,"STRONG",{});var ZJr=s(Dae);Uno=r(ZJr,"mluke"),ZJr.forEach(t),Jno=r(t6e," \u2014 "),DP=n(t6e,"A",{href:!0});var eYr=s(DP);Yno=r(eYr,"MLukeTokenizer"),eYr.forEach(t),Kno=r(t6e," (mLUKE model)"),t6e.forEach(t),Zno=i(S),ms=n(S,"LI",{});var x$=s(ms);Gae=n(x$,"STRONG",{});var oYr=s(Gae);eso=r(oYr,"mobilebert"),oYr.forEach(t),oso=r(x$," \u2014 "),GP=n(x$,"A",{href:!0});var rYr=s(GP);rso=r(rYr,"MobileBertTokenizer"),rYr.forEach(t),tso=r(x$," or "),OP=n(x$,"A",{href:!0});var tYr=s(OP);aso=r(tYr,"MobileBertTokenizerFast"),tYr.forEach(t),nso=r(x$," (MobileBERT model)"),x$.forEach(t),sso=i(S),gs=n(S,"LI",{});var $$=s(gs);Oae=n($$,"STRONG",{});var aYr=s(Oae);lso=r(aYr,"mpnet"),aYr.forEach(t),iso=r($$," \u2014 "),VP=n($$,"A",{href:!0});var nYr=s(VP);dso=r(nYr,"MPNetTokenizer"),nYr.forEach(t),cso=r($$," or "),XP=n($$,"A",{href:!0});var sYr=s(XP);fso=r(sYr,"MPNetTokenizerFast"),sYr.forEach(t),mso=r($$," (MPNet model)"),$$.forEach(t),gso=i(S),hs=n(S,"LI",{});var k$=s(hs);Vae=n(k$,"STRONG",{});var lYr=s(Vae);hso=r(lYr,"mt5"),lYr.forEach(t),pso=r(k$," \u2014 "),zP=n(k$,"A",{href:!0});var iYr=s(zP);_so=r(iYr,"MT5Tokenizer"),iYr.forEach(t),uso=r(k$," or "),WP=n(k$,"A",{href:!0});var dYr=s(WP);bso=r(dYr,"MT5TokenizerFast"),dYr.forEach(t),vso=r(k$," (mT5 model)"),k$.forEach(t),Fso=i(S),ps=n(S,"LI",{});var S$=s(ps);Xae=n(S$,"STRONG",{});var cYr=s(Xae);Tso=r(cYr,"nystromformer"),cYr.forEach(t),Mso=r(S$," \u2014 "),QP=n(S$,"A",{href:!0});var fYr=s(QP);Eso=r(fYr,"AlbertTokenizer"),fYr.forEach(t),Cso=r(S$," or "),HP=n(S$,"A",{href:!0});var mYr=s(HP);wso=r(mYr,"AlbertTokenizerFast"),mYr.forEach(t),Aso=r(S$," (Nystromformer model)"),S$.forEach(t),yso=i(S),_s=n(S,"LI",{});var R$=s(_s);zae=n(R$,"STRONG",{});var gYr=s(zae);Lso=r(gYr,"openai-gpt"),gYr.forEach(t),xso=r(R$," \u2014 "),UP=n(R$,"A",{href:!0});var hYr=s(UP);$so=r(hYr,"OpenAIGPTTokenizer"),hYr.forEach(t),kso=r(R$," or "),JP=n(R$,"A",{href:!0});var pYr=s(JP);Sso=r(pYr,"OpenAIGPTTokenizerFast"),pYr.forEach(t),Rso=r(R$," (OpenAI GPT model)"),R$.forEach(t),Pso=i(S),Xg=n(S,"LI",{});var a6e=s(Xg);Wae=n(a6e,"STRONG",{});var _Yr=s(Wae);Bso=r(_Yr,"opt"),_Yr.forEach(t),Iso=r(a6e," \u2014 "),YP=n(a6e,"A",{href:!0});var uYr=s(YP);Nso=r(uYr,"GPT2Tokenizer"),uYr.forEach(t),qso=r(a6e," (OPT model)"),a6e.forEach(t),jso=i(S),us=n(S,"LI",{});var P$=s(us);Qae=n(P$,"STRONG",{});var bYr=s(Qae);Dso=r(bYr,"pegasus"),bYr.forEach(t),Gso=r(P$," \u2014 "),KP=n(P$,"A",{href:!0});var vYr=s(KP);Oso=r(vYr,"PegasusTokenizer"),vYr.forEach(t),Vso=r(P$," or "),ZP=n(P$,"A",{href:!0});var FYr=s(ZP);Xso=r(FYr,"PegasusTokenizerFast"),FYr.forEach(t),zso=r(P$," (Pegasus model)"),P$.forEach(t),Wso=i(S),zg=n(S,"LI",{});var n6e=s(zg);Hae=n(n6e,"STRONG",{});var TYr=s(Hae);Qso=r(TYr,"perceiver"),TYr.forEach(t),Hso=r(n6e," \u2014 "),eB=n(n6e,"A",{href:!0});var MYr=s(eB);Uso=r(MYr,"PerceiverTokenizer"),MYr.forEach(t),Jso=r(n6e," (Perceiver model)"),n6e.forEach(t),Yso=i(S),Wg=n(S,"LI",{});var s6e=s(Wg);Uae=n(s6e,"STRONG",{});var EYr=s(Uae);Kso=r(EYr,"phobert"),EYr.forEach(t),Zso=r(s6e," \u2014 "),oB=n(s6e,"A",{href:!0});var CYr=s(oB);elo=r(CYr,"PhobertTokenizer"),CYr.forEach(t),olo=r(s6e," (PhoBERT model)"),s6e.forEach(t),rlo=i(S),Qg=n(S,"LI",{});var l6e=s(Qg);Jae=n(l6e,"STRONG",{});var wYr=s(Jae);tlo=r(wYr,"plbart"),wYr.forEach(t),alo=r(l6e," \u2014 "),rB=n(l6e,"A",{href:!0});var AYr=s(rB);nlo=r(AYr,"PLBartTokenizer"),AYr.forEach(t),slo=r(l6e," (PLBart model)"),l6e.forEach(t),llo=i(S),Hg=n(S,"LI",{});var i6e=s(Hg);Yae=n(i6e,"STRONG",{});var yYr=s(Yae);ilo=r(yYr,"prophetnet"),yYr.forEach(t),dlo=r(i6e," \u2014 "),tB=n(i6e,"A",{href:!0});var LYr=s(tB);clo=r(LYr,"ProphetNetTokenizer"),LYr.forEach(t),flo=r(i6e," (ProphetNet model)"),i6e.forEach(t),mlo=i(S),bs=n(S,"LI",{});var B$=s(bs);Kae=n(B$,"STRONG",{});var xYr=s(Kae);glo=r(xYr,"qdqbert"),xYr.forEach(t),hlo=r(B$," \u2014 "),aB=n(B$,"A",{href:!0});var $Yr=s(aB);plo=r($Yr,"BertTokenizer"),$Yr.forEach(t),_lo=r(B$," or "),nB=n(B$,"A",{href:!0});var kYr=s(nB);ulo=r(kYr,"BertTokenizerFast"),kYr.forEach(t),blo=r(B$," (QDQBert model)"),B$.forEach(t),vlo=i(S),Ug=n(S,"LI",{});var d6e=s(Ug);Zae=n(d6e,"STRONG",{});var SYr=s(Zae);Flo=r(SYr,"rag"),SYr.forEach(t),Tlo=r(d6e," \u2014 "),sB=n(d6e,"A",{href:!0});var RYr=s(sB);Mlo=r(RYr,"RagTokenizer"),RYr.forEach(t),Elo=r(d6e," (RAG model)"),d6e.forEach(t),Clo=i(S),vs=n(S,"LI",{});var I$=s(vs);ene=n(I$,"STRONG",{});var PYr=s(ene);wlo=r(PYr,"realm"),PYr.forEach(t),Alo=r(I$," \u2014 "),lB=n(I$,"A",{href:!0});var BYr=s(lB);ylo=r(BYr,"RealmTokenizer"),BYr.forEach(t),Llo=r(I$," or "),iB=n(I$,"A",{href:!0});var IYr=s(iB);xlo=r(IYr,"RealmTokenizerFast"),IYr.forEach(t),$lo=r(I$," (Realm model)"),I$.forEach(t),klo=i(S),Fs=n(S,"LI",{});var N$=s(Fs);one=n(N$,"STRONG",{});var NYr=s(one);Slo=r(NYr,"reformer"),NYr.forEach(t),Rlo=r(N$," \u2014 "),dB=n(N$,"A",{href:!0});var qYr=s(dB);Plo=r(qYr,"ReformerTokenizer"),qYr.forEach(t),Blo=r(N$," or "),cB=n(N$,"A",{href:!0});var jYr=s(cB);Ilo=r(jYr,"ReformerTokenizerFast"),jYr.forEach(t),Nlo=r(N$," (Reformer model)"),N$.forEach(t),qlo=i(S),Ts=n(S,"LI",{});var q$=s(Ts);rne=n(q$,"STRONG",{});var DYr=s(rne);jlo=r(DYr,"rembert"),DYr.forEach(t),Dlo=r(q$," \u2014 "),fB=n(q$,"A",{href:!0});var GYr=s(fB);Glo=r(GYr,"RemBertTokenizer"),GYr.forEach(t),Olo=r(q$," or "),mB=n(q$,"A",{href:!0});var OYr=s(mB);Vlo=r(OYr,"RemBertTokenizerFast"),OYr.forEach(t),Xlo=r(q$," (RemBERT model)"),q$.forEach(t),zlo=i(S),Ms=n(S,"LI",{});var j$=s(Ms);tne=n(j$,"STRONG",{});var VYr=s(tne);Wlo=r(VYr,"retribert"),VYr.forEach(t),Qlo=r(j$," \u2014 "),gB=n(j$,"A",{href:!0});var XYr=s(gB);Hlo=r(XYr,"RetriBertTokenizer"),XYr.forEach(t),Ulo=r(j$," or "),hB=n(j$,"A",{href:!0});var zYr=s(hB);Jlo=r(zYr,"RetriBertTokenizerFast"),zYr.forEach(t),Ylo=r(j$," (RetriBERT model)"),j$.forEach(t),Klo=i(S),Es=n(S,"LI",{});var D$=s(Es);ane=n(D$,"STRONG",{});var WYr=s(ane);Zlo=r(WYr,"roberta"),WYr.forEach(t),eio=r(D$," \u2014 "),pB=n(D$,"A",{href:!0});var QYr=s(pB);oio=r(QYr,"RobertaTokenizer"),QYr.forEach(t),rio=r(D$," or "),_B=n(D$,"A",{href:!0});var HYr=s(_B);tio=r(HYr,"RobertaTokenizerFast"),HYr.forEach(t),aio=r(D$," (RoBERTa model)"),D$.forEach(t),nio=i(S),Cs=n(S,"LI",{});var G$=s(Cs);nne=n(G$,"STRONG",{});var UYr=s(nne);sio=r(UYr,"roformer"),UYr.forEach(t),lio=r(G$," \u2014 "),uB=n(G$,"A",{href:!0});var JYr=s(uB);iio=r(JYr,"RoFormerTokenizer"),JYr.forEach(t),dio=r(G$," or "),bB=n(G$,"A",{href:!0});var YYr=s(bB);cio=r(YYr,"RoFormerTokenizerFast"),YYr.forEach(t),fio=r(G$," (RoFormer model)"),G$.forEach(t),mio=i(S),Jg=n(S,"LI",{});var c6e=s(Jg);sne=n(c6e,"STRONG",{});var KYr=s(sne);gio=r(KYr,"speech_to_text"),KYr.forEach(t),hio=r(c6e," \u2014 "),vB=n(c6e,"A",{href:!0});var ZYr=s(vB);pio=r(ZYr,"Speech2TextTokenizer"),ZYr.forEach(t),_io=r(c6e," (Speech2Text model)"),c6e.forEach(t),uio=i(S),Yg=n(S,"LI",{});var f6e=s(Yg);lne=n(f6e,"STRONG",{});var eKr=s(lne);bio=r(eKr,"speech_to_text_2"),eKr.forEach(t),vio=r(f6e," \u2014 "),FB=n(f6e,"A",{href:!0});var oKr=s(FB);Fio=r(oKr,"Speech2Text2Tokenizer"),oKr.forEach(t),Tio=r(f6e," (Speech2Text2 model)"),f6e.forEach(t),Mio=i(S),ws=n(S,"LI",{});var O$=s(ws);ine=n(O$,"STRONG",{});var rKr=s(ine);Eio=r(rKr,"splinter"),rKr.forEach(t),Cio=r(O$," \u2014 "),TB=n(O$,"A",{href:!0});var tKr=s(TB);wio=r(tKr,"SplinterTokenizer"),tKr.forEach(t),Aio=r(O$," or "),MB=n(O$,"A",{href:!0});var aKr=s(MB);yio=r(aKr,"SplinterTokenizerFast"),aKr.forEach(t),Lio=r(O$," (Splinter model)"),O$.forEach(t),xio=i(S),As=n(S,"LI",{});var V$=s(As);dne=n(V$,"STRONG",{});var nKr=s(dne);$io=r(nKr,"squeezebert"),nKr.forEach(t),kio=r(V$," \u2014 "),EB=n(V$,"A",{href:!0});var sKr=s(EB);Sio=r(sKr,"SqueezeBertTokenizer"),sKr.forEach(t),Rio=r(V$," or "),CB=n(V$,"A",{href:!0});var lKr=s(CB);Pio=r(lKr,"SqueezeBertTokenizerFast"),lKr.forEach(t),Bio=r(V$," (SqueezeBERT model)"),V$.forEach(t),Iio=i(S),ys=n(S,"LI",{});var X$=s(ys);cne=n(X$,"STRONG",{});var iKr=s(cne);Nio=r(iKr,"t5"),iKr.forEach(t),qio=r(X$," \u2014 "),wB=n(X$,"A",{href:!0});var dKr=s(wB);jio=r(dKr,"T5Tokenizer"),dKr.forEach(t),Dio=r(X$," or "),AB=n(X$,"A",{href:!0});var cKr=s(AB);Gio=r(cKr,"T5TokenizerFast"),cKr.forEach(t),Oio=r(X$," (T5 model)"),X$.forEach(t),Vio=i(S),Kg=n(S,"LI",{});var m6e=s(Kg);fne=n(m6e,"STRONG",{});var fKr=s(fne);Xio=r(fKr,"tapas"),fKr.forEach(t),zio=r(m6e," \u2014 "),yB=n(m6e,"A",{href:!0});var mKr=s(yB);Wio=r(mKr,"TapasTokenizer"),mKr.forEach(t),Qio=r(m6e," (TAPAS model)"),m6e.forEach(t),Hio=i(S),Zg=n(S,"LI",{});var g6e=s(Zg);mne=n(g6e,"STRONG",{});var gKr=s(mne);Uio=r(gKr,"tapex"),gKr.forEach(t),Jio=r(g6e," \u2014 "),LB=n(g6e,"A",{href:!0});var hKr=s(LB);Yio=r(hKr,"TapexTokenizer"),hKr.forEach(t),Kio=r(g6e," (TAPEX model)"),g6e.forEach(t),Zio=i(S),eh=n(S,"LI",{});var h6e=s(eh);gne=n(h6e,"STRONG",{});var pKr=s(gne);edo=r(pKr,"transfo-xl"),pKr.forEach(t),odo=r(h6e," \u2014 "),xB=n(h6e,"A",{href:!0});var _Kr=s(xB);rdo=r(_Kr,"TransfoXLTokenizer"),_Kr.forEach(t),tdo=r(h6e," (Transformer-XL model)"),h6e.forEach(t),ado=i(S),Ls=n(S,"LI",{});var z$=s(Ls);hne=n(z$,"STRONG",{});var uKr=s(hne);ndo=r(uKr,"visual_bert"),uKr.forEach(t),sdo=r(z$," \u2014 "),$B=n(z$,"A",{href:!0});var bKr=s($B);ldo=r(bKr,"BertTokenizer"),bKr.forEach(t),ido=r(z$," or "),kB=n(z$,"A",{href:!0});var vKr=s(kB);ddo=r(vKr,"BertTokenizerFast"),vKr.forEach(t),cdo=r(z$," (VisualBert model)"),z$.forEach(t),fdo=i(S),oh=n(S,"LI",{});var p6e=s(oh);pne=n(p6e,"STRONG",{});var FKr=s(pne);mdo=r(FKr,"wav2vec2"),FKr.forEach(t),gdo=r(p6e," \u2014 "),SB=n(p6e,"A",{href:!0});var TKr=s(SB);hdo=r(TKr,"Wav2Vec2CTCTokenizer"),TKr.forEach(t),pdo=r(p6e," (Wav2Vec2 model)"),p6e.forEach(t),_do=i(S),rh=n(S,"LI",{});var _6e=s(rh);_ne=n(_6e,"STRONG",{});var MKr=s(_ne);udo=r(MKr,"wav2vec2-conformer"),MKr.forEach(t),bdo=r(_6e," \u2014 "),RB=n(_6e,"A",{href:!0});var EKr=s(RB);vdo=r(EKr,"Wav2Vec2CTCTokenizer"),EKr.forEach(t),Fdo=r(_6e," (Wav2Vec2-Conformer model)"),_6e.forEach(t),Tdo=i(S),th=n(S,"LI",{});var u6e=s(th);une=n(u6e,"STRONG",{});var CKr=s(une);Mdo=r(CKr,"wav2vec2_phoneme"),CKr.forEach(t),Edo=r(u6e," \u2014 "),PB=n(u6e,"A",{href:!0});var wKr=s(PB);Cdo=r(wKr,"Wav2Vec2PhonemeCTCTokenizer"),wKr.forEach(t),wdo=r(u6e," (Wav2Vec2Phoneme model)"),u6e.forEach(t),Ado=i(S),xs=n(S,"LI",{});var W$=s(xs);bne=n(W$,"STRONG",{});var AKr=s(bne);ydo=r(AKr,"xglm"),AKr.forEach(t),Ldo=r(W$," \u2014 "),BB=n(W$,"A",{href:!0});var yKr=s(BB);xdo=r(yKr,"XGLMTokenizer"),yKr.forEach(t),$do=r(W$," or "),IB=n(W$,"A",{href:!0});var LKr=s(IB);kdo=r(LKr,"XGLMTokenizerFast"),LKr.forEach(t),Sdo=r(W$," (XGLM model)"),W$.forEach(t),Rdo=i(S),ah=n(S,"LI",{});var b6e=s(ah);vne=n(b6e,"STRONG",{});var xKr=s(vne);Pdo=r(xKr,"xlm"),xKr.forEach(t),Bdo=r(b6e," \u2014 "),NB=n(b6e,"A",{href:!0});var $Kr=s(NB);Ido=r($Kr,"XLMTokenizer"),$Kr.forEach(t),Ndo=r(b6e," (XLM model)"),b6e.forEach(t),qdo=i(S),nh=n(S,"LI",{});var v6e=s(nh);Fne=n(v6e,"STRONG",{});var kKr=s(Fne);jdo=r(kKr,"xlm-prophetnet"),kKr.forEach(t),Ddo=r(v6e," \u2014 "),qB=n(v6e,"A",{href:!0});var SKr=s(qB);Gdo=r(SKr,"XLMProphetNetTokenizer"),SKr.forEach(t),Odo=r(v6e," (XLMProphetNet model)"),v6e.forEach(t),Vdo=i(S),$s=n(S,"LI",{});var Q$=s($s);Tne=n(Q$,"STRONG",{});var RKr=s(Tne);Xdo=r(RKr,"xlm-roberta"),RKr.forEach(t),zdo=r(Q$," \u2014 "),jB=n(Q$,"A",{href:!0});var PKr=s(jB);Wdo=r(PKr,"XLMRobertaTokenizer"),PKr.forEach(t),Qdo=r(Q$," or "),DB=n(Q$,"A",{href:!0});var BKr=s(DB);Hdo=r(BKr,"XLMRobertaTokenizerFast"),BKr.forEach(t),Udo=r(Q$," (XLM-RoBERTa model)"),Q$.forEach(t),Jdo=i(S),ks=n(S,"LI",{});var H$=s(ks);Mne=n(H$,"STRONG",{});var IKr=s(Mne);Ydo=r(IKr,"xlm-roberta-xl"),IKr.forEach(t),Kdo=r(H$," \u2014 "),GB=n(H$,"A",{href:!0});var NKr=s(GB);Zdo=r(NKr,"RobertaTokenizer"),NKr.forEach(t),eco=r(H$," or "),OB=n(H$,"A",{href:!0});var qKr=s(OB);oco=r(qKr,"RobertaTokenizerFast"),qKr.forEach(t),rco=r(H$," (XLM-RoBERTa-XL model)"),H$.forEach(t),tco=i(S),Ss=n(S,"LI",{});var U$=s(Ss);Ene=n(U$,"STRONG",{});var jKr=s(Ene);aco=r(jKr,"xlnet"),jKr.forEach(t),nco=r(U$," \u2014 "),VB=n(U$,"A",{href:!0});var DKr=s(VB);sco=r(DKr,"XLNetTokenizer"),DKr.forEach(t),lco=r(U$," or "),XB=n(U$,"A",{href:!0});var GKr=s(XB);ico=r(GKr,"XLNetTokenizerFast"),GKr.forEach(t),dco=r(U$," (XLNet model)"),U$.forEach(t),cco=i(S),Rs=n(S,"LI",{});var J$=s(Rs);Cne=n(J$,"STRONG",{});var OKr=s(Cne);fco=r(OKr,"yoso"),OKr.forEach(t),mco=r(J$," \u2014 "),zB=n(J$,"A",{href:!0});var VKr=s(zB);gco=r(VKr,"AlbertTokenizer"),VKr.forEach(t),hco=r(J$," or "),WB=n(J$,"A",{href:!0});var XKr=s(WB);pco=r(XKr,"AlbertTokenizerFast"),XKr.forEach(t),_co=r(J$," (YOSO model)"),J$.forEach(t),S.forEach(t),uco=i(qs),T(sh.$$.fragment,qs),qs.forEach(t),bco=i(Ns),lh=n(Ns,"DIV",{class:!0});var ODe=s(lh);T(UA.$$.fragment,ODe),vco=i(ODe),wne=n(ODe,"P",{});var zKr=s(wne);Fco=r(zKr,"Register a new tokenizer in this mapping."),zKr.forEach(t),ODe.forEach(t),Ns.forEach(t),Vqe=i(f),Mi=n(f,"H2",{class:!0});var VDe=s(Mi);ih=n(VDe,"A",{id:!0,class:!0,href:!0});var WKr=s(ih);Ane=n(WKr,"SPAN",{});var QKr=s(Ane);T(JA.$$.fragment,QKr),QKr.forEach(t),WKr.forEach(t),Tco=i(VDe),yne=n(VDe,"SPAN",{});var HKr=s(yne);Mco=r(HKr,"AutoFeatureExtractor"),HKr.forEach(t),VDe.forEach(t),Xqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(YA.$$.fragment,js),Eco=i(js),KA=n(js,"P",{});var XDe=s(KA);Cco=r(XDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=n(XDe,"A",{href:!0});var UKr=s(QB);wco=r(UKr,"AutoFeatureExtractor.from_pretrained()"),UKr.forEach(t),Aco=r(XDe," class method."),XDe.forEach(t),yco=i(js),ZA=n(js,"P",{});var zDe=s(ZA);Lco=r(zDe,"This class cannot be instantiated directly using "),Lne=n(zDe,"CODE",{});var JKr=s(Lne);xco=r(JKr,"__init__()"),JKr.forEach(t),$co=r(zDe," (throws an error)."),zDe.forEach(t),kco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(ey.$$.fragment,Zt),Sco=i(Zt),xne=n(Zt,"P",{});var YKr=s(xne);Rco=r(YKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),YKr.forEach(t),Pco=i(Zt),ya=n(Zt,"P",{});var jw=s(ya);Bco=r(jw,"The feature extractor class to instantiate is selected based on the "),$ne=n(jw,"CODE",{});var KKr=s($ne);Ico=r(KKr,"model_type"),KKr.forEach(t),Nco=r(jw,` property of the config object
(either passed as an argument or loaded from `),kne=n(jw,"CODE",{});var ZKr=s(kne);qco=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),jco=r(jw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sne=n(jw,"CODE",{});var eZr=s(Sne);Dco=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),Gco=r(jw,":"),jw.forEach(t),Oco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var F6e=s(dh);Rne=n(F6e,"STRONG",{});var oZr=s(Rne);Vco=r(oZr,"beit"),oZr.forEach(t),Xco=r(F6e," \u2014 "),HB=n(F6e,"A",{href:!0});var rZr=s(HB);zco=r(rZr,"BeitFeatureExtractor"),rZr.forEach(t),Wco=r(F6e," (BEiT model)"),F6e.forEach(t),Qco=i(Z),ch=n(Z,"LI",{});var T6e=s(ch);Pne=n(T6e,"STRONG",{});var tZr=s(Pne);Hco=r(tZr,"clip"),tZr.forEach(t),Uco=r(T6e," \u2014 "),UB=n(T6e,"A",{href:!0});var aZr=s(UB);Jco=r(aZr,"CLIPFeatureExtractor"),aZr.forEach(t),Yco=r(T6e," (CLIP model)"),T6e.forEach(t),Kco=i(Z),fh=n(Z,"LI",{});var M6e=s(fh);Bne=n(M6e,"STRONG",{});var nZr=s(Bne);Zco=r(nZr,"convnext"),nZr.forEach(t),efo=r(M6e," \u2014 "),JB=n(M6e,"A",{href:!0});var sZr=s(JB);ofo=r(sZr,"ConvNextFeatureExtractor"),sZr.forEach(t),rfo=r(M6e," (ConvNext model)"),M6e.forEach(t),tfo=i(Z),mh=n(Z,"LI",{});var E6e=s(mh);Ine=n(E6e,"STRONG",{});var lZr=s(Ine);afo=r(lZr,"cvt"),lZr.forEach(t),nfo=r(E6e," \u2014 "),YB=n(E6e,"A",{href:!0});var iZr=s(YB);sfo=r(iZr,"ConvNextFeatureExtractor"),iZr.forEach(t),lfo=r(E6e," (CvT model)"),E6e.forEach(t),ifo=i(Z),gh=n(Z,"LI",{});var C6e=s(gh);Nne=n(C6e,"STRONG",{});var dZr=s(Nne);dfo=r(dZr,"data2vec-audio"),dZr.forEach(t),cfo=r(C6e," \u2014 "),KB=n(C6e,"A",{href:!0});var cZr=s(KB);ffo=r(cZr,"Wav2Vec2FeatureExtractor"),cZr.forEach(t),mfo=r(C6e," (Data2VecAudio model)"),C6e.forEach(t),gfo=i(Z),hh=n(Z,"LI",{});var w6e=s(hh);qne=n(w6e,"STRONG",{});var fZr=s(qne);hfo=r(fZr,"data2vec-vision"),fZr.forEach(t),pfo=r(w6e," \u2014 "),ZB=n(w6e,"A",{href:!0});var mZr=s(ZB);_fo=r(mZr,"BeitFeatureExtractor"),mZr.forEach(t),ufo=r(w6e," (Data2VecVision model)"),w6e.forEach(t),bfo=i(Z),ph=n(Z,"LI",{});var A6e=s(ph);jne=n(A6e,"STRONG",{});var gZr=s(jne);vfo=r(gZr,"deit"),gZr.forEach(t),Ffo=r(A6e," \u2014 "),eI=n(A6e,"A",{href:!0});var hZr=s(eI);Tfo=r(hZr,"DeiTFeatureExtractor"),hZr.forEach(t),Mfo=r(A6e," (DeiT model)"),A6e.forEach(t),Efo=i(Z),_h=n(Z,"LI",{});var y6e=s(_h);Dne=n(y6e,"STRONG",{});var pZr=s(Dne);Cfo=r(pZr,"detr"),pZr.forEach(t),wfo=r(y6e," \u2014 "),oI=n(y6e,"A",{href:!0});var _Zr=s(oI);Afo=r(_Zr,"DetrFeatureExtractor"),_Zr.forEach(t),yfo=r(y6e," (DETR model)"),y6e.forEach(t),Lfo=i(Z),uh=n(Z,"LI",{});var L6e=s(uh);Gne=n(L6e,"STRONG",{});var uZr=s(Gne);xfo=r(uZr,"dpt"),uZr.forEach(t),$fo=r(L6e," \u2014 "),rI=n(L6e,"A",{href:!0});var bZr=s(rI);kfo=r(bZr,"DPTFeatureExtractor"),bZr.forEach(t),Sfo=r(L6e," (DPT model)"),L6e.forEach(t),Rfo=i(Z),bh=n(Z,"LI",{});var x6e=s(bh);One=n(x6e,"STRONG",{});var vZr=s(One);Pfo=r(vZr,"flava"),vZr.forEach(t),Bfo=r(x6e," \u2014 "),tI=n(x6e,"A",{href:!0});var FZr=s(tI);Ifo=r(FZr,"FlavaFeatureExtractor"),FZr.forEach(t),Nfo=r(x6e," (Flava model)"),x6e.forEach(t),qfo=i(Z),vh=n(Z,"LI",{});var $6e=s(vh);Vne=n($6e,"STRONG",{});var TZr=s(Vne);jfo=r(TZr,"glpn"),TZr.forEach(t),Dfo=r($6e," \u2014 "),aI=n($6e,"A",{href:!0});var MZr=s(aI);Gfo=r(MZr,"GLPNFeatureExtractor"),MZr.forEach(t),Ofo=r($6e," (GLPN model)"),$6e.forEach(t),Vfo=i(Z),Fh=n(Z,"LI",{});var k6e=s(Fh);Xne=n(k6e,"STRONG",{});var EZr=s(Xne);Xfo=r(EZr,"hubert"),EZr.forEach(t),zfo=r(k6e," \u2014 "),nI=n(k6e,"A",{href:!0});var CZr=s(nI);Wfo=r(CZr,"Wav2Vec2FeatureExtractor"),CZr.forEach(t),Qfo=r(k6e," (Hubert model)"),k6e.forEach(t),Hfo=i(Z),Th=n(Z,"LI",{});var S6e=s(Th);zne=n(S6e,"STRONG",{});var wZr=s(zne);Ufo=r(wZr,"imagegpt"),wZr.forEach(t),Jfo=r(S6e," \u2014 "),sI=n(S6e,"A",{href:!0});var AZr=s(sI);Yfo=r(AZr,"ImageGPTFeatureExtractor"),AZr.forEach(t),Kfo=r(S6e," (ImageGPT model)"),S6e.forEach(t),Zfo=i(Z),Mh=n(Z,"LI",{});var R6e=s(Mh);Wne=n(R6e,"STRONG",{});var yZr=s(Wne);emo=r(yZr,"layoutlmv2"),yZr.forEach(t),omo=r(R6e," \u2014 "),lI=n(R6e,"A",{href:!0});var LZr=s(lI);rmo=r(LZr,"LayoutLMv2FeatureExtractor"),LZr.forEach(t),tmo=r(R6e," (LayoutLMv2 model)"),R6e.forEach(t),amo=i(Z),Eh=n(Z,"LI",{});var P6e=s(Eh);Qne=n(P6e,"STRONG",{});var xZr=s(Qne);nmo=r(xZr,"layoutlmv3"),xZr.forEach(t),smo=r(P6e," \u2014 "),iI=n(P6e,"A",{href:!0});var $Zr=s(iI);lmo=r($Zr,"LayoutLMv3FeatureExtractor"),$Zr.forEach(t),imo=r(P6e," (LayoutLMv3 model)"),P6e.forEach(t),dmo=i(Z),Ch=n(Z,"LI",{});var B6e=s(Ch);Hne=n(B6e,"STRONG",{});var kZr=s(Hne);cmo=r(kZr,"maskformer"),kZr.forEach(t),fmo=r(B6e," \u2014 "),dI=n(B6e,"A",{href:!0});var SZr=s(dI);mmo=r(SZr,"MaskFormerFeatureExtractor"),SZr.forEach(t),gmo=r(B6e," (MaskFormer model)"),B6e.forEach(t),hmo=i(Z),wh=n(Z,"LI",{});var I6e=s(wh);Une=n(I6e,"STRONG",{});var RZr=s(Une);pmo=r(RZr,"perceiver"),RZr.forEach(t),_mo=r(I6e," \u2014 "),cI=n(I6e,"A",{href:!0});var PZr=s(cI);umo=r(PZr,"PerceiverFeatureExtractor"),PZr.forEach(t),bmo=r(I6e," (Perceiver model)"),I6e.forEach(t),vmo=i(Z),Ah=n(Z,"LI",{});var N6e=s(Ah);Jne=n(N6e,"STRONG",{});var BZr=s(Jne);Fmo=r(BZr,"poolformer"),BZr.forEach(t),Tmo=r(N6e," \u2014 "),fI=n(N6e,"A",{href:!0});var IZr=s(fI);Mmo=r(IZr,"PoolFormerFeatureExtractor"),IZr.forEach(t),Emo=r(N6e," (PoolFormer model)"),N6e.forEach(t),Cmo=i(Z),yh=n(Z,"LI",{});var q6e=s(yh);Yne=n(q6e,"STRONG",{});var NZr=s(Yne);wmo=r(NZr,"regnet"),NZr.forEach(t),Amo=r(q6e," \u2014 "),mI=n(q6e,"A",{href:!0});var qZr=s(mI);ymo=r(qZr,"ConvNextFeatureExtractor"),qZr.forEach(t),Lmo=r(q6e," (RegNet model)"),q6e.forEach(t),xmo=i(Z),Lh=n(Z,"LI",{});var j6e=s(Lh);Kne=n(j6e,"STRONG",{});var jZr=s(Kne);$mo=r(jZr,"resnet"),jZr.forEach(t),kmo=r(j6e," \u2014 "),gI=n(j6e,"A",{href:!0});var DZr=s(gI);Smo=r(DZr,"ConvNextFeatureExtractor"),DZr.forEach(t),Rmo=r(j6e," (ResNet model)"),j6e.forEach(t),Pmo=i(Z),xh=n(Z,"LI",{});var D6e=s(xh);Zne=n(D6e,"STRONG",{});var GZr=s(Zne);Bmo=r(GZr,"segformer"),GZr.forEach(t),Imo=r(D6e," \u2014 "),hI=n(D6e,"A",{href:!0});var OZr=s(hI);Nmo=r(OZr,"SegformerFeatureExtractor"),OZr.forEach(t),qmo=r(D6e," (SegFormer model)"),D6e.forEach(t),jmo=i(Z),$h=n(Z,"LI",{});var G6e=s($h);ese=n(G6e,"STRONG",{});var VZr=s(ese);Dmo=r(VZr,"speech_to_text"),VZr.forEach(t),Gmo=r(G6e," \u2014 "),pI=n(G6e,"A",{href:!0});var XZr=s(pI);Omo=r(XZr,"Speech2TextFeatureExtractor"),XZr.forEach(t),Vmo=r(G6e," (Speech2Text model)"),G6e.forEach(t),Xmo=i(Z),kh=n(Z,"LI",{});var O6e=s(kh);ose=n(O6e,"STRONG",{});var zZr=s(ose);zmo=r(zZr,"swin"),zZr.forEach(t),Wmo=r(O6e," \u2014 "),_I=n(O6e,"A",{href:!0});var WZr=s(_I);Qmo=r(WZr,"ViTFeatureExtractor"),WZr.forEach(t),Hmo=r(O6e," (Swin model)"),O6e.forEach(t),Umo=i(Z),Sh=n(Z,"LI",{});var V6e=s(Sh);rse=n(V6e,"STRONG",{});var QZr=s(rse);Jmo=r(QZr,"van"),QZr.forEach(t),Ymo=r(V6e," \u2014 "),uI=n(V6e,"A",{href:!0});var HZr=s(uI);Kmo=r(HZr,"ConvNextFeatureExtractor"),HZr.forEach(t),Zmo=r(V6e," (VAN model)"),V6e.forEach(t),ego=i(Z),Rh=n(Z,"LI",{});var X6e=s(Rh);tse=n(X6e,"STRONG",{});var UZr=s(tse);ogo=r(UZr,"vit"),UZr.forEach(t),rgo=r(X6e," \u2014 "),bI=n(X6e,"A",{href:!0});var JZr=s(bI);tgo=r(JZr,"ViTFeatureExtractor"),JZr.forEach(t),ago=r(X6e," (ViT model)"),X6e.forEach(t),ngo=i(Z),Ph=n(Z,"LI",{});var z6e=s(Ph);ase=n(z6e,"STRONG",{});var YZr=s(ase);sgo=r(YZr,"vit_mae"),YZr.forEach(t),lgo=r(z6e," \u2014 "),vI=n(z6e,"A",{href:!0});var KZr=s(vI);igo=r(KZr,"ViTFeatureExtractor"),KZr.forEach(t),dgo=r(z6e," (ViTMAE model)"),z6e.forEach(t),cgo=i(Z),Bh=n(Z,"LI",{});var W6e=s(Bh);nse=n(W6e,"STRONG",{});var ZZr=s(nse);fgo=r(ZZr,"wav2vec2"),ZZr.forEach(t),mgo=r(W6e," \u2014 "),FI=n(W6e,"A",{href:!0});var eet=s(FI);ggo=r(eet,"Wav2Vec2FeatureExtractor"),eet.forEach(t),hgo=r(W6e," (Wav2Vec2 model)"),W6e.forEach(t),pgo=i(Z),Ih=n(Z,"LI",{});var Q6e=s(Ih);sse=n(Q6e,"STRONG",{});var oet=s(sse);_go=r(oet,"wav2vec2-conformer"),oet.forEach(t),ugo=r(Q6e," \u2014 "),TI=n(Q6e,"A",{href:!0});var ret=s(TI);bgo=r(ret,"Wav2Vec2FeatureExtractor"),ret.forEach(t),vgo=r(Q6e," (Wav2Vec2-Conformer model)"),Q6e.forEach(t),Fgo=i(Z),Nh=n(Z,"LI",{});var H6e=s(Nh);lse=n(H6e,"STRONG",{});var tet=s(lse);Tgo=r(tet,"yolos"),tet.forEach(t),Mgo=r(H6e," \u2014 "),MI=n(H6e,"A",{href:!0});var aet=s(MI);Ego=r(aet,"YolosFeatureExtractor"),aet.forEach(t),Cgo=r(H6e," (YOLOS model)"),H6e.forEach(t),Z.forEach(t),wgo=i(Zt),T(qh.$$.fragment,Zt),Ago=i(Zt),T(jh.$$.fragment,Zt),Zt.forEach(t),ygo=i(js),Dh=n(js,"DIV",{class:!0});var WDe=s(Dh);T(oy.$$.fragment,WDe),Lgo=i(WDe),ise=n(WDe,"P",{});var net=s(ise);xgo=r(net,"Register a new feature extractor for this class."),net.forEach(t),WDe.forEach(t),js.forEach(t),zqe=i(f),Ei=n(f,"H2",{class:!0});var QDe=s(Ei);Gh=n(QDe,"A",{id:!0,class:!0,href:!0});var set=s(Gh);dse=n(set,"SPAN",{});var iet=s(dse);T(ry.$$.fragment,iet),iet.forEach(t),set.forEach(t),$go=i(QDe),cse=n(QDe,"SPAN",{});var det=s(cse);kgo=r(det,"AutoProcessor"),det.forEach(t),QDe.forEach(t),Wqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(ty.$$.fragment,Ds),Sgo=i(Ds),ay=n(Ds,"P",{});var HDe=s(ay);Rgo=r(HDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=n(HDe,"A",{href:!0});var cet=s(EI);Pgo=r(cet,"AutoProcessor.from_pretrained()"),cet.forEach(t),Bgo=r(HDe," class method."),HDe.forEach(t),Igo=i(Ds),ny=n(Ds,"P",{});var UDe=s(ny);Ngo=r(UDe,"This class cannot be instantiated directly using "),fse=n(UDe,"CODE",{});var fet=s(fse);qgo=r(fet,"__init__()"),fet.forEach(t),jgo=r(UDe," (throws an error)."),UDe.forEach(t),Dgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(sy.$$.fragment,ea),Ggo=i(ea),mse=n(ea,"P",{});var met=s(mse);Ogo=r(met,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),met.forEach(t),Vgo=i(ea),Ci=n(ea,"P",{});var SZ=s(Ci);Xgo=r(SZ,"The processor class to instantiate is selected based on the "),gse=n(SZ,"CODE",{});var get=s(gse);zgo=r(get,"model_type"),get.forEach(t),Wgo=r(SZ,` property of the config object (either
passed as an argument or loaded from `),hse=n(SZ,"CODE",{});var het=s(hse);Qgo=r(het,"pretrained_model_name_or_path"),het.forEach(t),Hgo=r(SZ," if possible):"),SZ.forEach(t),Ugo=i(ea),he=n(ea,"UL",{});var ue=s(he);Oh=n(ue,"LI",{});var U6e=s(Oh);pse=n(U6e,"STRONG",{});var pet=s(pse);Jgo=r(pet,"clip"),pet.forEach(t),Ygo=r(U6e," \u2014 "),CI=n(U6e,"A",{href:!0});var _et=s(CI);Kgo=r(_et,"CLIPProcessor"),_et.forEach(t),Zgo=r(U6e," (CLIP model)"),U6e.forEach(t),eho=i(ue),Vh=n(ue,"LI",{});var J6e=s(Vh);_se=n(J6e,"STRONG",{});var uet=s(_se);oho=r(uet,"flava"),uet.forEach(t),rho=r(J6e," \u2014 "),use=n(J6e,"CODE",{});var bet=s(use);tho=r(bet,"FLAVAProcessor"),bet.forEach(t),aho=r(J6e," (Flava model)"),J6e.forEach(t),nho=i(ue),Xh=n(ue,"LI",{});var Y6e=s(Xh);bse=n(Y6e,"STRONG",{});var vet=s(bse);sho=r(vet,"layoutlmv2"),vet.forEach(t),lho=r(Y6e," \u2014 "),wI=n(Y6e,"A",{href:!0});var Fet=s(wI);iho=r(Fet,"LayoutLMv2Processor"),Fet.forEach(t),dho=r(Y6e," (LayoutLMv2 model)"),Y6e.forEach(t),cho=i(ue),zh=n(ue,"LI",{});var K6e=s(zh);vse=n(K6e,"STRONG",{});var Tet=s(vse);fho=r(Tet,"layoutlmv3"),Tet.forEach(t),mho=r(K6e," \u2014 "),AI=n(K6e,"A",{href:!0});var Met=s(AI);gho=r(Met,"LayoutLMv3Processor"),Met.forEach(t),hho=r(K6e," (LayoutLMv3 model)"),K6e.forEach(t),pho=i(ue),Wh=n(ue,"LI",{});var Z6e=s(Wh);Fse=n(Z6e,"STRONG",{});var Eet=s(Fse);_ho=r(Eet,"layoutxlm"),Eet.forEach(t),uho=r(Z6e," \u2014 "),yI=n(Z6e,"A",{href:!0});var Cet=s(yI);bho=r(Cet,"LayoutXLMProcessor"),Cet.forEach(t),vho=r(Z6e," (LayoutXLM model)"),Z6e.forEach(t),Fho=i(ue),Qh=n(ue,"LI",{});var eAe=s(Qh);Tse=n(eAe,"STRONG",{});var wet=s(Tse);Tho=r(wet,"sew"),wet.forEach(t),Mho=r(eAe," \u2014 "),LI=n(eAe,"A",{href:!0});var Aet=s(LI);Eho=r(Aet,"Wav2Vec2Processor"),Aet.forEach(t),Cho=r(eAe," (SEW model)"),eAe.forEach(t),who=i(ue),Hh=n(ue,"LI",{});var oAe=s(Hh);Mse=n(oAe,"STRONG",{});var yet=s(Mse);Aho=r(yet,"sew-d"),yet.forEach(t),yho=r(oAe," \u2014 "),xI=n(oAe,"A",{href:!0});var Let=s(xI);Lho=r(Let,"Wav2Vec2Processor"),Let.forEach(t),xho=r(oAe," (SEW-D model)"),oAe.forEach(t),$ho=i(ue),Uh=n(ue,"LI",{});var rAe=s(Uh);Ese=n(rAe,"STRONG",{});var xet=s(Ese);kho=r(xet,"speech_to_text"),xet.forEach(t),Sho=r(rAe," \u2014 "),$I=n(rAe,"A",{href:!0});var $et=s($I);Rho=r($et,"Speech2TextProcessor"),$et.forEach(t),Pho=r(rAe," (Speech2Text model)"),rAe.forEach(t),Bho=i(ue),Jh=n(ue,"LI",{});var tAe=s(Jh);Cse=n(tAe,"STRONG",{});var ket=s(Cse);Iho=r(ket,"speech_to_text_2"),ket.forEach(t),Nho=r(tAe," \u2014 "),kI=n(tAe,"A",{href:!0});var Set=s(kI);qho=r(Set,"Speech2Text2Processor"),Set.forEach(t),jho=r(tAe," (Speech2Text2 model)"),tAe.forEach(t),Dho=i(ue),Yh=n(ue,"LI",{});var aAe=s(Yh);wse=n(aAe,"STRONG",{});var Ret=s(wse);Gho=r(Ret,"trocr"),Ret.forEach(t),Oho=r(aAe," \u2014 "),SI=n(aAe,"A",{href:!0});var Pet=s(SI);Vho=r(Pet,"TrOCRProcessor"),Pet.forEach(t),Xho=r(aAe," (TrOCR model)"),aAe.forEach(t),zho=i(ue),Kh=n(ue,"LI",{});var nAe=s(Kh);Ase=n(nAe,"STRONG",{});var Bet=s(Ase);Who=r(Bet,"unispeech"),Bet.forEach(t),Qho=r(nAe," \u2014 "),RI=n(nAe,"A",{href:!0});var Iet=s(RI);Hho=r(Iet,"Wav2Vec2Processor"),Iet.forEach(t),Uho=r(nAe," (UniSpeech model)"),nAe.forEach(t),Jho=i(ue),Zh=n(ue,"LI",{});var sAe=s(Zh);yse=n(sAe,"STRONG",{});var Net=s(yse);Yho=r(Net,"unispeech-sat"),Net.forEach(t),Kho=r(sAe," \u2014 "),PI=n(sAe,"A",{href:!0});var qet=s(PI);Zho=r(qet,"Wav2Vec2Processor"),qet.forEach(t),epo=r(sAe," (UniSpeechSat model)"),sAe.forEach(t),opo=i(ue),ep=n(ue,"LI",{});var lAe=s(ep);Lse=n(lAe,"STRONG",{});var jet=s(Lse);rpo=r(jet,"vilt"),jet.forEach(t),tpo=r(lAe," \u2014 "),BI=n(lAe,"A",{href:!0});var Det=s(BI);apo=r(Det,"ViltProcessor"),Det.forEach(t),npo=r(lAe," (ViLT model)"),lAe.forEach(t),spo=i(ue),op=n(ue,"LI",{});var iAe=s(op);xse=n(iAe,"STRONG",{});var Get=s(xse);lpo=r(Get,"vision-text-dual-encoder"),Get.forEach(t),ipo=r(iAe," \u2014 "),II=n(iAe,"A",{href:!0});var Oet=s(II);dpo=r(Oet,"VisionTextDualEncoderProcessor"),Oet.forEach(t),cpo=r(iAe," (VisionTextDualEncoder model)"),iAe.forEach(t),fpo=i(ue),rp=n(ue,"LI",{});var dAe=s(rp);$se=n(dAe,"STRONG",{});var Vet=s($se);mpo=r(Vet,"wav2vec2"),Vet.forEach(t),gpo=r(dAe," \u2014 "),NI=n(dAe,"A",{href:!0});var Xet=s(NI);hpo=r(Xet,"Wav2Vec2Processor"),Xet.forEach(t),ppo=r(dAe," (Wav2Vec2 model)"),dAe.forEach(t),_po=i(ue),tp=n(ue,"LI",{});var cAe=s(tp);kse=n(cAe,"STRONG",{});var zet=s(kse);upo=r(zet,"wav2vec2-conformer"),zet.forEach(t),bpo=r(cAe," \u2014 "),qI=n(cAe,"A",{href:!0});var Wet=s(qI);vpo=r(Wet,"Wav2Vec2Processor"),Wet.forEach(t),Fpo=r(cAe," (Wav2Vec2-Conformer model)"),cAe.forEach(t),Tpo=i(ue),ap=n(ue,"LI",{});var fAe=s(ap);Sse=n(fAe,"STRONG",{});var Qet=s(Sse);Mpo=r(Qet,"wavlm"),Qet.forEach(t),Epo=r(fAe," \u2014 "),jI=n(fAe,"A",{href:!0});var Het=s(jI);Cpo=r(Het,"Wav2Vec2Processor"),Het.forEach(t),wpo=r(fAe," (WavLM model)"),fAe.forEach(t),ue.forEach(t),Apo=i(ea),T(np.$$.fragment,ea),ypo=i(ea),T(sp.$$.fragment,ea),ea.forEach(t),Lpo=i(Ds),lp=n(Ds,"DIV",{class:!0});var JDe=s(lp);T(ly.$$.fragment,JDe),xpo=i(JDe),Rse=n(JDe,"P",{});var Uet=s(Rse);$po=r(Uet,"Register a new processor for this class."),Uet.forEach(t),JDe.forEach(t),Ds.forEach(t),Qqe=i(f),wi=n(f,"H2",{class:!0});var YDe=s(wi);ip=n(YDe,"A",{id:!0,class:!0,href:!0});var Jet=s(ip);Pse=n(Jet,"SPAN",{});var Yet=s(Pse);T(iy.$$.fragment,Yet),Yet.forEach(t),Jet.forEach(t),kpo=i(YDe),Bse=n(YDe,"SPAN",{});var Ket=s(Bse);Spo=r(Ket,"AutoModel"),Ket.forEach(t),YDe.forEach(t),Hqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(dy.$$.fragment,Gs),Rpo=i(Gs),Ai=n(Gs,"P",{});var RZ=s(Ai);Ppo=r(RZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=n(RZ,"A",{href:!0});var Zet=s(DI);Bpo=r(Zet,"from_pretrained()"),Zet.forEach(t),Ipo=r(RZ," class method or the "),GI=n(RZ,"A",{href:!0});var eot=s(GI);Npo=r(eot,"from_config()"),eot.forEach(t),qpo=r(RZ,` class
method.`),RZ.forEach(t),jpo=i(Gs),cy=n(Gs,"P",{});var KDe=s(cy);Dpo=r(KDe,"This class cannot be instantiated directly using "),Ise=n(KDe,"CODE",{});var oot=s(Ise);Gpo=r(oot,"__init__()"),oot.forEach(t),Opo=r(KDe," (throws an error)."),KDe.forEach(t),Vpo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Dw=s(tt);T(fy.$$.fragment,Dw),Xpo=i(Dw),Nse=n(Dw,"P",{});var rot=s(Nse);zpo=r(rot,"Instantiates one of the base model classes of the library from a configuration."),rot.forEach(t),Wpo=i(Dw),yi=n(Dw,"P",{});var PZ=s(yi);Qpo=r(PZ,`Note:
Loading a model from its configuration file does `),qse=n(PZ,"STRONG",{});var tot=s(qse);Hpo=r(tot,"not"),tot.forEach(t),Upo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(PZ,"A",{href:!0});var aot=s(OI);Jpo=r(aot,"from_pretrained()"),aot.forEach(t),Ypo=r(PZ," to load the model weights."),PZ.forEach(t),Kpo=i(Dw),T(dp.$$.fragment,Dw),Dw.forEach(t),Zpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(my.$$.fragment,oa),e_o=i(oa),jse=n(oa,"P",{});var not=s(jse);o_o=r(not,"Instantiate one of the base model classes of the library from a pretrained model."),not.forEach(t),r_o=i(oa),La=n(oa,"P",{});var Gw=s(La);t_o=r(Gw,"The model class to instantiate is selected based on the "),Dse=n(Gw,"CODE",{});var sot=s(Dse);a_o=r(sot,"model_type"),sot.forEach(t),n_o=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Gse=n(Gw,"CODE",{});var lot=s(Gse);s_o=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),l_o=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(Gw,"CODE",{});var iot=s(Ose);i_o=r(iot,"pretrained_model_name_or_path"),iot.forEach(t),d_o=r(Gw,":"),Gw.forEach(t),c_o=i(oa),x=n(oa,"UL",{});var $=s(x);cp=n($,"LI",{});var mAe=s(cp);Vse=n(mAe,"STRONG",{});var dot=s(Vse);f_o=r(dot,"albert"),dot.forEach(t),m_o=r(mAe," \u2014 "),VI=n(mAe,"A",{href:!0});var cot=s(VI);g_o=r(cot,"AlbertModel"),cot.forEach(t),h_o=r(mAe," (ALBERT model)"),mAe.forEach(t),p_o=i($),fp=n($,"LI",{});var gAe=s(fp);Xse=n(gAe,"STRONG",{});var fot=s(Xse);__o=r(fot,"bart"),fot.forEach(t),u_o=r(gAe," \u2014 "),XI=n(gAe,"A",{href:!0});var mot=s(XI);b_o=r(mot,"BartModel"),mot.forEach(t),v_o=r(gAe," (BART model)"),gAe.forEach(t),F_o=i($),mp=n($,"LI",{});var hAe=s(mp);zse=n(hAe,"STRONG",{});var got=s(zse);T_o=r(got,"beit"),got.forEach(t),M_o=r(hAe," \u2014 "),zI=n(hAe,"A",{href:!0});var hot=s(zI);E_o=r(hot,"BeitModel"),hot.forEach(t),C_o=r(hAe," (BEiT model)"),hAe.forEach(t),w_o=i($),gp=n($,"LI",{});var pAe=s(gp);Wse=n(pAe,"STRONG",{});var pot=s(Wse);A_o=r(pot,"bert"),pot.forEach(t),y_o=r(pAe," \u2014 "),WI=n(pAe,"A",{href:!0});var _ot=s(WI);L_o=r(_ot,"BertModel"),_ot.forEach(t),x_o=r(pAe," (BERT model)"),pAe.forEach(t),$_o=i($),hp=n($,"LI",{});var _Ae=s(hp);Qse=n(_Ae,"STRONG",{});var uot=s(Qse);k_o=r(uot,"bert-generation"),uot.forEach(t),S_o=r(_Ae," \u2014 "),QI=n(_Ae,"A",{href:!0});var bot=s(QI);R_o=r(bot,"BertGenerationEncoder"),bot.forEach(t),P_o=r(_Ae," (Bert Generation model)"),_Ae.forEach(t),B_o=i($),pp=n($,"LI",{});var uAe=s(pp);Hse=n(uAe,"STRONG",{});var vot=s(Hse);I_o=r(vot,"big_bird"),vot.forEach(t),N_o=r(uAe," \u2014 "),HI=n(uAe,"A",{href:!0});var Fot=s(HI);q_o=r(Fot,"BigBirdModel"),Fot.forEach(t),j_o=r(uAe," (BigBird model)"),uAe.forEach(t),D_o=i($),_p=n($,"LI",{});var bAe=s(_p);Use=n(bAe,"STRONG",{});var Tot=s(Use);G_o=r(Tot,"bigbird_pegasus"),Tot.forEach(t),O_o=r(bAe," \u2014 "),UI=n(bAe,"A",{href:!0});var Mot=s(UI);V_o=r(Mot,"BigBirdPegasusModel"),Mot.forEach(t),X_o=r(bAe," (BigBirdPegasus model)"),bAe.forEach(t),z_o=i($),up=n($,"LI",{});var vAe=s(up);Jse=n(vAe,"STRONG",{});var Eot=s(Jse);W_o=r(Eot,"blenderbot"),Eot.forEach(t),Q_o=r(vAe," \u2014 "),JI=n(vAe,"A",{href:!0});var Cot=s(JI);H_o=r(Cot,"BlenderbotModel"),Cot.forEach(t),U_o=r(vAe," (Blenderbot model)"),vAe.forEach(t),J_o=i($),bp=n($,"LI",{});var FAe=s(bp);Yse=n(FAe,"STRONG",{});var wot=s(Yse);Y_o=r(wot,"blenderbot-small"),wot.forEach(t),K_o=r(FAe," \u2014 "),YI=n(FAe,"A",{href:!0});var Aot=s(YI);Z_o=r(Aot,"BlenderbotSmallModel"),Aot.forEach(t),euo=r(FAe," (BlenderbotSmall model)"),FAe.forEach(t),ouo=i($),vp=n($,"LI",{});var TAe=s(vp);Kse=n(TAe,"STRONG",{});var yot=s(Kse);ruo=r(yot,"bloom"),yot.forEach(t),tuo=r(TAe," \u2014 "),KI=n(TAe,"A",{href:!0});var Lot=s(KI);auo=r(Lot,"BloomModel"),Lot.forEach(t),nuo=r(TAe," (BLOOM model)"),TAe.forEach(t),suo=i($),Fp=n($,"LI",{});var MAe=s(Fp);Zse=n(MAe,"STRONG",{});var xot=s(Zse);luo=r(xot,"camembert"),xot.forEach(t),iuo=r(MAe," \u2014 "),ZI=n(MAe,"A",{href:!0});var $ot=s(ZI);duo=r($ot,"CamembertModel"),$ot.forEach(t),cuo=r(MAe," (CamemBERT model)"),MAe.forEach(t),fuo=i($),Tp=n($,"LI",{});var EAe=s(Tp);ele=n(EAe,"STRONG",{});var kot=s(ele);muo=r(kot,"canine"),kot.forEach(t),guo=r(EAe," \u2014 "),eN=n(EAe,"A",{href:!0});var Sot=s(eN);huo=r(Sot,"CanineModel"),Sot.forEach(t),puo=r(EAe," (Canine model)"),EAe.forEach(t),_uo=i($),Mp=n($,"LI",{});var CAe=s(Mp);ole=n(CAe,"STRONG",{});var Rot=s(ole);uuo=r(Rot,"clip"),Rot.forEach(t),buo=r(CAe," \u2014 "),oN=n(CAe,"A",{href:!0});var Pot=s(oN);vuo=r(Pot,"CLIPModel"),Pot.forEach(t),Fuo=r(CAe," (CLIP model)"),CAe.forEach(t),Tuo=i($),Ep=n($,"LI",{});var wAe=s(Ep);rle=n(wAe,"STRONG",{});var Bot=s(rle);Muo=r(Bot,"convbert"),Bot.forEach(t),Euo=r(wAe," \u2014 "),rN=n(wAe,"A",{href:!0});var Iot=s(rN);Cuo=r(Iot,"ConvBertModel"),Iot.forEach(t),wuo=r(wAe," (ConvBERT model)"),wAe.forEach(t),Auo=i($),Cp=n($,"LI",{});var AAe=s(Cp);tle=n(AAe,"STRONG",{});var Not=s(tle);yuo=r(Not,"convnext"),Not.forEach(t),Luo=r(AAe," \u2014 "),tN=n(AAe,"A",{href:!0});var qot=s(tN);xuo=r(qot,"ConvNextModel"),qot.forEach(t),$uo=r(AAe," (ConvNext model)"),AAe.forEach(t),kuo=i($),wp=n($,"LI",{});var yAe=s(wp);ale=n(yAe,"STRONG",{});var jot=s(ale);Suo=r(jot,"ctrl"),jot.forEach(t),Ruo=r(yAe," \u2014 "),aN=n(yAe,"A",{href:!0});var Dot=s(aN);Puo=r(Dot,"CTRLModel"),Dot.forEach(t),Buo=r(yAe," (CTRL model)"),yAe.forEach(t),Iuo=i($),Ap=n($,"LI",{});var LAe=s(Ap);nle=n(LAe,"STRONG",{});var Got=s(nle);Nuo=r(Got,"cvt"),Got.forEach(t),quo=r(LAe," \u2014 "),nN=n(LAe,"A",{href:!0});var Oot=s(nN);juo=r(Oot,"CvtModel"),Oot.forEach(t),Duo=r(LAe," (CvT model)"),LAe.forEach(t),Guo=i($),yp=n($,"LI",{});var xAe=s(yp);sle=n(xAe,"STRONG",{});var Vot=s(sle);Ouo=r(Vot,"data2vec-audio"),Vot.forEach(t),Vuo=r(xAe," \u2014 "),sN=n(xAe,"A",{href:!0});var Xot=s(sN);Xuo=r(Xot,"Data2VecAudioModel"),Xot.forEach(t),zuo=r(xAe," (Data2VecAudio model)"),xAe.forEach(t),Wuo=i($),Lp=n($,"LI",{});var $Ae=s(Lp);lle=n($Ae,"STRONG",{});var zot=s(lle);Quo=r(zot,"data2vec-text"),zot.forEach(t),Huo=r($Ae," \u2014 "),lN=n($Ae,"A",{href:!0});var Wot=s(lN);Uuo=r(Wot,"Data2VecTextModel"),Wot.forEach(t),Juo=r($Ae," (Data2VecText model)"),$Ae.forEach(t),Yuo=i($),xp=n($,"LI",{});var kAe=s(xp);ile=n(kAe,"STRONG",{});var Qot=s(ile);Kuo=r(Qot,"data2vec-vision"),Qot.forEach(t),Zuo=r(kAe," \u2014 "),iN=n(kAe,"A",{href:!0});var Hot=s(iN);e4o=r(Hot,"Data2VecVisionModel"),Hot.forEach(t),o4o=r(kAe," (Data2VecVision model)"),kAe.forEach(t),r4o=i($),$p=n($,"LI",{});var SAe=s($p);dle=n(SAe,"STRONG",{});var Uot=s(dle);t4o=r(Uot,"deberta"),Uot.forEach(t),a4o=r(SAe," \u2014 "),dN=n(SAe,"A",{href:!0});var Jot=s(dN);n4o=r(Jot,"DebertaModel"),Jot.forEach(t),s4o=r(SAe," (DeBERTa model)"),SAe.forEach(t),l4o=i($),kp=n($,"LI",{});var RAe=s(kp);cle=n(RAe,"STRONG",{});var Yot=s(cle);i4o=r(Yot,"deberta-v2"),Yot.forEach(t),d4o=r(RAe," \u2014 "),cN=n(RAe,"A",{href:!0});var Kot=s(cN);c4o=r(Kot,"DebertaV2Model"),Kot.forEach(t),f4o=r(RAe," (DeBERTa-v2 model)"),RAe.forEach(t),m4o=i($),Sp=n($,"LI",{});var PAe=s(Sp);fle=n(PAe,"STRONG",{});var Zot=s(fle);g4o=r(Zot,"decision_transformer"),Zot.forEach(t),h4o=r(PAe," \u2014 "),fN=n(PAe,"A",{href:!0});var ert=s(fN);p4o=r(ert,"DecisionTransformerModel"),ert.forEach(t),_4o=r(PAe," (Decision Transformer model)"),PAe.forEach(t),u4o=i($),Rp=n($,"LI",{});var BAe=s(Rp);mle=n(BAe,"STRONG",{});var ort=s(mle);b4o=r(ort,"deit"),ort.forEach(t),v4o=r(BAe," \u2014 "),mN=n(BAe,"A",{href:!0});var rrt=s(mN);F4o=r(rrt,"DeiTModel"),rrt.forEach(t),T4o=r(BAe," (DeiT model)"),BAe.forEach(t),M4o=i($),Pp=n($,"LI",{});var IAe=s(Pp);gle=n(IAe,"STRONG",{});var trt=s(gle);E4o=r(trt,"detr"),trt.forEach(t),C4o=r(IAe," \u2014 "),gN=n(IAe,"A",{href:!0});var art=s(gN);w4o=r(art,"DetrModel"),art.forEach(t),A4o=r(IAe," (DETR model)"),IAe.forEach(t),y4o=i($),Bp=n($,"LI",{});var NAe=s(Bp);hle=n(NAe,"STRONG",{});var nrt=s(hle);L4o=r(nrt,"distilbert"),nrt.forEach(t),x4o=r(NAe," \u2014 "),hN=n(NAe,"A",{href:!0});var srt=s(hN);$4o=r(srt,"DistilBertModel"),srt.forEach(t),k4o=r(NAe," (DistilBERT model)"),NAe.forEach(t),S4o=i($),Ip=n($,"LI",{});var qAe=s(Ip);ple=n(qAe,"STRONG",{});var lrt=s(ple);R4o=r(lrt,"dpr"),lrt.forEach(t),P4o=r(qAe," \u2014 "),pN=n(qAe,"A",{href:!0});var irt=s(pN);B4o=r(irt,"DPRQuestionEncoder"),irt.forEach(t),I4o=r(qAe," (DPR model)"),qAe.forEach(t),N4o=i($),Np=n($,"LI",{});var jAe=s(Np);_le=n(jAe,"STRONG",{});var drt=s(_le);q4o=r(drt,"dpt"),drt.forEach(t),j4o=r(jAe," \u2014 "),_N=n(jAe,"A",{href:!0});var crt=s(_N);D4o=r(crt,"DPTModel"),crt.forEach(t),G4o=r(jAe," (DPT model)"),jAe.forEach(t),O4o=i($),qp=n($,"LI",{});var DAe=s(qp);ule=n(DAe,"STRONG",{});var frt=s(ule);V4o=r(frt,"electra"),frt.forEach(t),X4o=r(DAe," \u2014 "),uN=n(DAe,"A",{href:!0});var mrt=s(uN);z4o=r(mrt,"ElectraModel"),mrt.forEach(t),W4o=r(DAe," (ELECTRA model)"),DAe.forEach(t),Q4o=i($),jp=n($,"LI",{});var GAe=s(jp);ble=n(GAe,"STRONG",{});var grt=s(ble);H4o=r(grt,"flaubert"),grt.forEach(t),U4o=r(GAe," \u2014 "),bN=n(GAe,"A",{href:!0});var hrt=s(bN);J4o=r(hrt,"FlaubertModel"),hrt.forEach(t),Y4o=r(GAe," (FlauBERT model)"),GAe.forEach(t),K4o=i($),Dp=n($,"LI",{});var OAe=s(Dp);vle=n(OAe,"STRONG",{});var prt=s(vle);Z4o=r(prt,"flava"),prt.forEach(t),e1o=r(OAe," \u2014 "),vN=n(OAe,"A",{href:!0});var _rt=s(vN);o1o=r(_rt,"FlavaModel"),_rt.forEach(t),r1o=r(OAe," (Flava model)"),OAe.forEach(t),t1o=i($),Gp=n($,"LI",{});var VAe=s(Gp);Fle=n(VAe,"STRONG",{});var urt=s(Fle);a1o=r(urt,"fnet"),urt.forEach(t),n1o=r(VAe," \u2014 "),FN=n(VAe,"A",{href:!0});var brt=s(FN);s1o=r(brt,"FNetModel"),brt.forEach(t),l1o=r(VAe," (FNet model)"),VAe.forEach(t),i1o=i($),Op=n($,"LI",{});var XAe=s(Op);Tle=n(XAe,"STRONG",{});var vrt=s(Tle);d1o=r(vrt,"fsmt"),vrt.forEach(t),c1o=r(XAe," \u2014 "),TN=n(XAe,"A",{href:!0});var Frt=s(TN);f1o=r(Frt,"FSMTModel"),Frt.forEach(t),m1o=r(XAe," (FairSeq Machine-Translation model)"),XAe.forEach(t),g1o=i($),Ps=n($,"LI",{});var Y$=s(Ps);Mle=n(Y$,"STRONG",{});var Trt=s(Mle);h1o=r(Trt,"funnel"),Trt.forEach(t),p1o=r(Y$," \u2014 "),MN=n(Y$,"A",{href:!0});var Mrt=s(MN);_1o=r(Mrt,"FunnelModel"),Mrt.forEach(t),u1o=r(Y$," or "),EN=n(Y$,"A",{href:!0});var Ert=s(EN);b1o=r(Ert,"FunnelBaseModel"),Ert.forEach(t),v1o=r(Y$," (Funnel Transformer model)"),Y$.forEach(t),F1o=i($),Vp=n($,"LI",{});var zAe=s(Vp);Ele=n(zAe,"STRONG",{});var Crt=s(Ele);T1o=r(Crt,"glpn"),Crt.forEach(t),M1o=r(zAe," \u2014 "),CN=n(zAe,"A",{href:!0});var wrt=s(CN);E1o=r(wrt,"GLPNModel"),wrt.forEach(t),C1o=r(zAe," (GLPN model)"),zAe.forEach(t),w1o=i($),Xp=n($,"LI",{});var WAe=s(Xp);Cle=n(WAe,"STRONG",{});var Art=s(Cle);A1o=r(Art,"gpt2"),Art.forEach(t),y1o=r(WAe," \u2014 "),wN=n(WAe,"A",{href:!0});var yrt=s(wN);L1o=r(yrt,"GPT2Model"),yrt.forEach(t),x1o=r(WAe," (OpenAI GPT-2 model)"),WAe.forEach(t),$1o=i($),zp=n($,"LI",{});var QAe=s(zp);wle=n(QAe,"STRONG",{});var Lrt=s(wle);k1o=r(Lrt,"gpt_neo"),Lrt.forEach(t),S1o=r(QAe," \u2014 "),AN=n(QAe,"A",{href:!0});var xrt=s(AN);R1o=r(xrt,"GPTNeoModel"),xrt.forEach(t),P1o=r(QAe," (GPT Neo model)"),QAe.forEach(t),B1o=i($),Wp=n($,"LI",{});var HAe=s(Wp);Ale=n(HAe,"STRONG",{});var $rt=s(Ale);I1o=r($rt,"gpt_neox"),$rt.forEach(t),N1o=r(HAe," \u2014 "),yN=n(HAe,"A",{href:!0});var krt=s(yN);q1o=r(krt,"GPTNeoXModel"),krt.forEach(t),j1o=r(HAe," (GPT NeoX model)"),HAe.forEach(t),D1o=i($),Qp=n($,"LI",{});var UAe=s(Qp);yle=n(UAe,"STRONG",{});var Srt=s(yle);G1o=r(Srt,"gptj"),Srt.forEach(t),O1o=r(UAe," \u2014 "),LN=n(UAe,"A",{href:!0});var Rrt=s(LN);V1o=r(Rrt,"GPTJModel"),Rrt.forEach(t),X1o=r(UAe," (GPT-J model)"),UAe.forEach(t),z1o=i($),Hp=n($,"LI",{});var JAe=s(Hp);Lle=n(JAe,"STRONG",{});var Prt=s(Lle);W1o=r(Prt,"hubert"),Prt.forEach(t),Q1o=r(JAe," \u2014 "),xN=n(JAe,"A",{href:!0});var Brt=s(xN);H1o=r(Brt,"HubertModel"),Brt.forEach(t),U1o=r(JAe," (Hubert model)"),JAe.forEach(t),J1o=i($),Up=n($,"LI",{});var YAe=s(Up);xle=n(YAe,"STRONG",{});var Irt=s(xle);Y1o=r(Irt,"ibert"),Irt.forEach(t),K1o=r(YAe," \u2014 "),$N=n(YAe,"A",{href:!0});var Nrt=s($N);Z1o=r(Nrt,"IBertModel"),Nrt.forEach(t),e7o=r(YAe," (I-BERT model)"),YAe.forEach(t),o7o=i($),Jp=n($,"LI",{});var KAe=s(Jp);$le=n(KAe,"STRONG",{});var qrt=s($le);r7o=r(qrt,"imagegpt"),qrt.forEach(t),t7o=r(KAe," \u2014 "),kN=n(KAe,"A",{href:!0});var jrt=s(kN);a7o=r(jrt,"ImageGPTModel"),jrt.forEach(t),n7o=r(KAe," (ImageGPT model)"),KAe.forEach(t),s7o=i($),Yp=n($,"LI",{});var ZAe=s(Yp);kle=n(ZAe,"STRONG",{});var Drt=s(kle);l7o=r(Drt,"layoutlm"),Drt.forEach(t),i7o=r(ZAe," \u2014 "),SN=n(ZAe,"A",{href:!0});var Grt=s(SN);d7o=r(Grt,"LayoutLMModel"),Grt.forEach(t),c7o=r(ZAe," (LayoutLM model)"),ZAe.forEach(t),f7o=i($),Kp=n($,"LI",{});var eye=s(Kp);Sle=n(eye,"STRONG",{});var Ort=s(Sle);m7o=r(Ort,"layoutlmv2"),Ort.forEach(t),g7o=r(eye," \u2014 "),RN=n(eye,"A",{href:!0});var Vrt=s(RN);h7o=r(Vrt,"LayoutLMv2Model"),Vrt.forEach(t),p7o=r(eye," (LayoutLMv2 model)"),eye.forEach(t),_7o=i($),Zp=n($,"LI",{});var oye=s(Zp);Rle=n(oye,"STRONG",{});var Xrt=s(Rle);u7o=r(Xrt,"layoutlmv3"),Xrt.forEach(t),b7o=r(oye," \u2014 "),PN=n(oye,"A",{href:!0});var zrt=s(PN);v7o=r(zrt,"LayoutLMv3Model"),zrt.forEach(t),F7o=r(oye," (LayoutLMv3 model)"),oye.forEach(t),T7o=i($),e_=n($,"LI",{});var rye=s(e_);Ple=n(rye,"STRONG",{});var Wrt=s(Ple);M7o=r(Wrt,"led"),Wrt.forEach(t),E7o=r(rye," \u2014 "),BN=n(rye,"A",{href:!0});var Qrt=s(BN);C7o=r(Qrt,"LEDModel"),Qrt.forEach(t),w7o=r(rye," (LED model)"),rye.forEach(t),A7o=i($),o_=n($,"LI",{});var tye=s(o_);Ble=n(tye,"STRONG",{});var Hrt=s(Ble);y7o=r(Hrt,"longformer"),Hrt.forEach(t),L7o=r(tye," \u2014 "),IN=n(tye,"A",{href:!0});var Urt=s(IN);x7o=r(Urt,"LongformerModel"),Urt.forEach(t),$7o=r(tye," (Longformer model)"),tye.forEach(t),k7o=i($),r_=n($,"LI",{});var aye=s(r_);Ile=n(aye,"STRONG",{});var Jrt=s(Ile);S7o=r(Jrt,"luke"),Jrt.forEach(t),R7o=r(aye," \u2014 "),NN=n(aye,"A",{href:!0});var Yrt=s(NN);P7o=r(Yrt,"LukeModel"),Yrt.forEach(t),B7o=r(aye," (LUKE model)"),aye.forEach(t),I7o=i($),t_=n($,"LI",{});var nye=s(t_);Nle=n(nye,"STRONG",{});var Krt=s(Nle);N7o=r(Krt,"lxmert"),Krt.forEach(t),q7o=r(nye," \u2014 "),qN=n(nye,"A",{href:!0});var Zrt=s(qN);j7o=r(Zrt,"LxmertModel"),Zrt.forEach(t),D7o=r(nye," (LXMERT model)"),nye.forEach(t),G7o=i($),a_=n($,"LI",{});var sye=s(a_);qle=n(sye,"STRONG",{});var ett=s(qle);O7o=r(ett,"m2m_100"),ett.forEach(t),V7o=r(sye," \u2014 "),jN=n(sye,"A",{href:!0});var ott=s(jN);X7o=r(ott,"M2M100Model"),ott.forEach(t),z7o=r(sye," (M2M100 model)"),sye.forEach(t),W7o=i($),n_=n($,"LI",{});var lye=s(n_);jle=n(lye,"STRONG",{});var rtt=s(jle);Q7o=r(rtt,"marian"),rtt.forEach(t),H7o=r(lye," \u2014 "),DN=n(lye,"A",{href:!0});var ttt=s(DN);U7o=r(ttt,"MarianModel"),ttt.forEach(t),J7o=r(lye," (Marian model)"),lye.forEach(t),Y7o=i($),s_=n($,"LI",{});var iye=s(s_);Dle=n(iye,"STRONG",{});var att=s(Dle);K7o=r(att,"maskformer"),att.forEach(t),Z7o=r(iye," \u2014 "),GN=n(iye,"A",{href:!0});var ntt=s(GN);ebo=r(ntt,"MaskFormerModel"),ntt.forEach(t),obo=r(iye," (MaskFormer model)"),iye.forEach(t),rbo=i($),l_=n($,"LI",{});var dye=s(l_);Gle=n(dye,"STRONG",{});var stt=s(Gle);tbo=r(stt,"mbart"),stt.forEach(t),abo=r(dye," \u2014 "),ON=n(dye,"A",{href:!0});var ltt=s(ON);nbo=r(ltt,"MBartModel"),ltt.forEach(t),sbo=r(dye," (mBART model)"),dye.forEach(t),lbo=i($),i_=n($,"LI",{});var cye=s(i_);Ole=n(cye,"STRONG",{});var itt=s(Ole);ibo=r(itt,"megatron-bert"),itt.forEach(t),dbo=r(cye," \u2014 "),VN=n(cye,"A",{href:!0});var dtt=s(VN);cbo=r(dtt,"MegatronBertModel"),dtt.forEach(t),fbo=r(cye," (MegatronBert model)"),cye.forEach(t),mbo=i($),d_=n($,"LI",{});var fye=s(d_);Vle=n(fye,"STRONG",{});var ctt=s(Vle);gbo=r(ctt,"mobilebert"),ctt.forEach(t),hbo=r(fye," \u2014 "),XN=n(fye,"A",{href:!0});var ftt=s(XN);pbo=r(ftt,"MobileBertModel"),ftt.forEach(t),_bo=r(fye," (MobileBERT model)"),fye.forEach(t),ubo=i($),c_=n($,"LI",{});var mye=s(c_);Xle=n(mye,"STRONG",{});var mtt=s(Xle);bbo=r(mtt,"mpnet"),mtt.forEach(t),vbo=r(mye," \u2014 "),zN=n(mye,"A",{href:!0});var gtt=s(zN);Fbo=r(gtt,"MPNetModel"),gtt.forEach(t),Tbo=r(mye," (MPNet model)"),mye.forEach(t),Mbo=i($),f_=n($,"LI",{});var gye=s(f_);zle=n(gye,"STRONG",{});var htt=s(zle);Ebo=r(htt,"mt5"),htt.forEach(t),Cbo=r(gye," \u2014 "),WN=n(gye,"A",{href:!0});var ptt=s(WN);wbo=r(ptt,"MT5Model"),ptt.forEach(t),Abo=r(gye," (mT5 model)"),gye.forEach(t),ybo=i($),m_=n($,"LI",{});var hye=s(m_);Wle=n(hye,"STRONG",{});var _tt=s(Wle);Lbo=r(_tt,"nystromformer"),_tt.forEach(t),xbo=r(hye," \u2014 "),QN=n(hye,"A",{href:!0});var utt=s(QN);$bo=r(utt,"NystromformerModel"),utt.forEach(t),kbo=r(hye," (Nystromformer model)"),hye.forEach(t),Sbo=i($),g_=n($,"LI",{});var pye=s(g_);Qle=n(pye,"STRONG",{});var btt=s(Qle);Rbo=r(btt,"openai-gpt"),btt.forEach(t),Pbo=r(pye," \u2014 "),HN=n(pye,"A",{href:!0});var vtt=s(HN);Bbo=r(vtt,"OpenAIGPTModel"),vtt.forEach(t),Ibo=r(pye," (OpenAI GPT model)"),pye.forEach(t),Nbo=i($),h_=n($,"LI",{});var _ye=s(h_);Hle=n(_ye,"STRONG",{});var Ftt=s(Hle);qbo=r(Ftt,"opt"),Ftt.forEach(t),jbo=r(_ye," \u2014 "),UN=n(_ye,"A",{href:!0});var Ttt=s(UN);Dbo=r(Ttt,"OPTModel"),Ttt.forEach(t),Gbo=r(_ye," (OPT model)"),_ye.forEach(t),Obo=i($),p_=n($,"LI",{});var uye=s(p_);Ule=n(uye,"STRONG",{});var Mtt=s(Ule);Vbo=r(Mtt,"pegasus"),Mtt.forEach(t),Xbo=r(uye," \u2014 "),JN=n(uye,"A",{href:!0});var Ett=s(JN);zbo=r(Ett,"PegasusModel"),Ett.forEach(t),Wbo=r(uye," (Pegasus model)"),uye.forEach(t),Qbo=i($),__=n($,"LI",{});var bye=s(__);Jle=n(bye,"STRONG",{});var Ctt=s(Jle);Hbo=r(Ctt,"perceiver"),Ctt.forEach(t),Ubo=r(bye," \u2014 "),YN=n(bye,"A",{href:!0});var wtt=s(YN);Jbo=r(wtt,"PerceiverModel"),wtt.forEach(t),Ybo=r(bye," (Perceiver model)"),bye.forEach(t),Kbo=i($),u_=n($,"LI",{});var vye=s(u_);Yle=n(vye,"STRONG",{});var Att=s(Yle);Zbo=r(Att,"plbart"),Att.forEach(t),e2o=r(vye," \u2014 "),KN=n(vye,"A",{href:!0});var ytt=s(KN);o2o=r(ytt,"PLBartModel"),ytt.forEach(t),r2o=r(vye," (PLBart model)"),vye.forEach(t),t2o=i($),b_=n($,"LI",{});var Fye=s(b_);Kle=n(Fye,"STRONG",{});var Ltt=s(Kle);a2o=r(Ltt,"poolformer"),Ltt.forEach(t),n2o=r(Fye," \u2014 "),ZN=n(Fye,"A",{href:!0});var xtt=s(ZN);s2o=r(xtt,"PoolFormerModel"),xtt.forEach(t),l2o=r(Fye," (PoolFormer model)"),Fye.forEach(t),i2o=i($),v_=n($,"LI",{});var Tye=s(v_);Zle=n(Tye,"STRONG",{});var $tt=s(Zle);d2o=r($tt,"prophetnet"),$tt.forEach(t),c2o=r(Tye," \u2014 "),eq=n(Tye,"A",{href:!0});var ktt=s(eq);f2o=r(ktt,"ProphetNetModel"),ktt.forEach(t),m2o=r(Tye," (ProphetNet model)"),Tye.forEach(t),g2o=i($),F_=n($,"LI",{});var Mye=s(F_);eie=n(Mye,"STRONG",{});var Stt=s(eie);h2o=r(Stt,"qdqbert"),Stt.forEach(t),p2o=r(Mye," \u2014 "),oq=n(Mye,"A",{href:!0});var Rtt=s(oq);_2o=r(Rtt,"QDQBertModel"),Rtt.forEach(t),u2o=r(Mye," (QDQBert model)"),Mye.forEach(t),b2o=i($),T_=n($,"LI",{});var Eye=s(T_);oie=n(Eye,"STRONG",{});var Ptt=s(oie);v2o=r(Ptt,"reformer"),Ptt.forEach(t),F2o=r(Eye," \u2014 "),rq=n(Eye,"A",{href:!0});var Btt=s(rq);T2o=r(Btt,"ReformerModel"),Btt.forEach(t),M2o=r(Eye," (Reformer model)"),Eye.forEach(t),E2o=i($),M_=n($,"LI",{});var Cye=s(M_);rie=n(Cye,"STRONG",{});var Itt=s(rie);C2o=r(Itt,"regnet"),Itt.forEach(t),w2o=r(Cye," \u2014 "),tq=n(Cye,"A",{href:!0});var Ntt=s(tq);A2o=r(Ntt,"RegNetModel"),Ntt.forEach(t),y2o=r(Cye," (RegNet model)"),Cye.forEach(t),L2o=i($),E_=n($,"LI",{});var wye=s(E_);tie=n(wye,"STRONG",{});var qtt=s(tie);x2o=r(qtt,"rembert"),qtt.forEach(t),$2o=r(wye," \u2014 "),aq=n(wye,"A",{href:!0});var jtt=s(aq);k2o=r(jtt,"RemBertModel"),jtt.forEach(t),S2o=r(wye," (RemBERT model)"),wye.forEach(t),R2o=i($),C_=n($,"LI",{});var Aye=s(C_);aie=n(Aye,"STRONG",{});var Dtt=s(aie);P2o=r(Dtt,"resnet"),Dtt.forEach(t),B2o=r(Aye," \u2014 "),nq=n(Aye,"A",{href:!0});var Gtt=s(nq);I2o=r(Gtt,"ResNetModel"),Gtt.forEach(t),N2o=r(Aye," (ResNet model)"),Aye.forEach(t),q2o=i($),w_=n($,"LI",{});var yye=s(w_);nie=n(yye,"STRONG",{});var Ott=s(nie);j2o=r(Ott,"retribert"),Ott.forEach(t),D2o=r(yye," \u2014 "),sq=n(yye,"A",{href:!0});var Vtt=s(sq);G2o=r(Vtt,"RetriBertModel"),Vtt.forEach(t),O2o=r(yye," (RetriBERT model)"),yye.forEach(t),V2o=i($),A_=n($,"LI",{});var Lye=s(A_);sie=n(Lye,"STRONG",{});var Xtt=s(sie);X2o=r(Xtt,"roberta"),Xtt.forEach(t),z2o=r(Lye," \u2014 "),lq=n(Lye,"A",{href:!0});var ztt=s(lq);W2o=r(ztt,"RobertaModel"),ztt.forEach(t),Q2o=r(Lye," (RoBERTa model)"),Lye.forEach(t),H2o=i($),y_=n($,"LI",{});var xye=s(y_);lie=n(xye,"STRONG",{});var Wtt=s(lie);U2o=r(Wtt,"roformer"),Wtt.forEach(t),J2o=r(xye," \u2014 "),iq=n(xye,"A",{href:!0});var Qtt=s(iq);Y2o=r(Qtt,"RoFormerModel"),Qtt.forEach(t),K2o=r(xye," (RoFormer model)"),xye.forEach(t),Z2o=i($),L_=n($,"LI",{});var $ye=s(L_);iie=n($ye,"STRONG",{});var Htt=s(iie);evo=r(Htt,"segformer"),Htt.forEach(t),ovo=r($ye," \u2014 "),dq=n($ye,"A",{href:!0});var Utt=s(dq);rvo=r(Utt,"SegformerModel"),Utt.forEach(t),tvo=r($ye," (SegFormer model)"),$ye.forEach(t),avo=i($),x_=n($,"LI",{});var kye=s(x_);die=n(kye,"STRONG",{});var Jtt=s(die);nvo=r(Jtt,"sew"),Jtt.forEach(t),svo=r(kye," \u2014 "),cq=n(kye,"A",{href:!0});var Ytt=s(cq);lvo=r(Ytt,"SEWModel"),Ytt.forEach(t),ivo=r(kye," (SEW model)"),kye.forEach(t),dvo=i($),$_=n($,"LI",{});var Sye=s($_);cie=n(Sye,"STRONG",{});var Ktt=s(cie);cvo=r(Ktt,"sew-d"),Ktt.forEach(t),fvo=r(Sye," \u2014 "),fq=n(Sye,"A",{href:!0});var Ztt=s(fq);mvo=r(Ztt,"SEWDModel"),Ztt.forEach(t),gvo=r(Sye," (SEW-D model)"),Sye.forEach(t),hvo=i($),k_=n($,"LI",{});var Rye=s(k_);fie=n(Rye,"STRONG",{});var eat=s(fie);pvo=r(eat,"speech_to_text"),eat.forEach(t),_vo=r(Rye," \u2014 "),mq=n(Rye,"A",{href:!0});var oat=s(mq);uvo=r(oat,"Speech2TextModel"),oat.forEach(t),bvo=r(Rye," (Speech2Text model)"),Rye.forEach(t),vvo=i($),S_=n($,"LI",{});var Pye=s(S_);mie=n(Pye,"STRONG",{});var rat=s(mie);Fvo=r(rat,"splinter"),rat.forEach(t),Tvo=r(Pye," \u2014 "),gq=n(Pye,"A",{href:!0});var tat=s(gq);Mvo=r(tat,"SplinterModel"),tat.forEach(t),Evo=r(Pye," (Splinter model)"),Pye.forEach(t),Cvo=i($),R_=n($,"LI",{});var Bye=s(R_);gie=n(Bye,"STRONG",{});var aat=s(gie);wvo=r(aat,"squeezebert"),aat.forEach(t),Avo=r(Bye," \u2014 "),hq=n(Bye,"A",{href:!0});var nat=s(hq);yvo=r(nat,"SqueezeBertModel"),nat.forEach(t),Lvo=r(Bye," (SqueezeBERT model)"),Bye.forEach(t),xvo=i($),P_=n($,"LI",{});var Iye=s(P_);hie=n(Iye,"STRONG",{});var sat=s(hie);$vo=r(sat,"swin"),sat.forEach(t),kvo=r(Iye," \u2014 "),pq=n(Iye,"A",{href:!0});var lat=s(pq);Svo=r(lat,"SwinModel"),lat.forEach(t),Rvo=r(Iye," (Swin model)"),Iye.forEach(t),Pvo=i($),B_=n($,"LI",{});var Nye=s(B_);pie=n(Nye,"STRONG",{});var iat=s(pie);Bvo=r(iat,"t5"),iat.forEach(t),Ivo=r(Nye," \u2014 "),_q=n(Nye,"A",{href:!0});var dat=s(_q);Nvo=r(dat,"T5Model"),dat.forEach(t),qvo=r(Nye," (T5 model)"),Nye.forEach(t),jvo=i($),I_=n($,"LI",{});var qye=s(I_);_ie=n(qye,"STRONG",{});var cat=s(_ie);Dvo=r(cat,"tapas"),cat.forEach(t),Gvo=r(qye," \u2014 "),uq=n(qye,"A",{href:!0});var fat=s(uq);Ovo=r(fat,"TapasModel"),fat.forEach(t),Vvo=r(qye," (TAPAS model)"),qye.forEach(t),Xvo=i($),N_=n($,"LI",{});var jye=s(N_);uie=n(jye,"STRONG",{});var mat=s(uie);zvo=r(mat,"trajectory_transformer"),mat.forEach(t),Wvo=r(jye," \u2014 "),bq=n(jye,"A",{href:!0});var gat=s(bq);Qvo=r(gat,"TrajectoryTransformerModel"),gat.forEach(t),Hvo=r(jye," (Trajectory Transformer model)"),jye.forEach(t),Uvo=i($),q_=n($,"LI",{});var Dye=s(q_);bie=n(Dye,"STRONG",{});var hat=s(bie);Jvo=r(hat,"transfo-xl"),hat.forEach(t),Yvo=r(Dye," \u2014 "),vq=n(Dye,"A",{href:!0});var pat=s(vq);Kvo=r(pat,"TransfoXLModel"),pat.forEach(t),Zvo=r(Dye," (Transformer-XL model)"),Dye.forEach(t),eFo=i($),j_=n($,"LI",{});var Gye=s(j_);vie=n(Gye,"STRONG",{});var _at=s(vie);oFo=r(_at,"unispeech"),_at.forEach(t),rFo=r(Gye," \u2014 "),Fq=n(Gye,"A",{href:!0});var uat=s(Fq);tFo=r(uat,"UniSpeechModel"),uat.forEach(t),aFo=r(Gye," (UniSpeech model)"),Gye.forEach(t),nFo=i($),D_=n($,"LI",{});var Oye=s(D_);Fie=n(Oye,"STRONG",{});var bat=s(Fie);sFo=r(bat,"unispeech-sat"),bat.forEach(t),lFo=r(Oye," \u2014 "),Tq=n(Oye,"A",{href:!0});var vat=s(Tq);iFo=r(vat,"UniSpeechSatModel"),vat.forEach(t),dFo=r(Oye," (UniSpeechSat model)"),Oye.forEach(t),cFo=i($),G_=n($,"LI",{});var Vye=s(G_);Tie=n(Vye,"STRONG",{});var Fat=s(Tie);fFo=r(Fat,"van"),Fat.forEach(t),mFo=r(Vye," \u2014 "),Mq=n(Vye,"A",{href:!0});var Tat=s(Mq);gFo=r(Tat,"VanModel"),Tat.forEach(t),hFo=r(Vye," (VAN model)"),Vye.forEach(t),pFo=i($),O_=n($,"LI",{});var Xye=s(O_);Mie=n(Xye,"STRONG",{});var Mat=s(Mie);_Fo=r(Mat,"vilt"),Mat.forEach(t),uFo=r(Xye," \u2014 "),Eq=n(Xye,"A",{href:!0});var Eat=s(Eq);bFo=r(Eat,"ViltModel"),Eat.forEach(t),vFo=r(Xye," (ViLT model)"),Xye.forEach(t),FFo=i($),V_=n($,"LI",{});var zye=s(V_);Eie=n(zye,"STRONG",{});var Cat=s(Eie);TFo=r(Cat,"vision-text-dual-encoder"),Cat.forEach(t),MFo=r(zye," \u2014 "),Cq=n(zye,"A",{href:!0});var wat=s(Cq);EFo=r(wat,"VisionTextDualEncoderModel"),wat.forEach(t),CFo=r(zye," (VisionTextDualEncoder model)"),zye.forEach(t),wFo=i($),X_=n($,"LI",{});var Wye=s(X_);Cie=n(Wye,"STRONG",{});var Aat=s(Cie);AFo=r(Aat,"visual_bert"),Aat.forEach(t),yFo=r(Wye," \u2014 "),wq=n(Wye,"A",{href:!0});var yat=s(wq);LFo=r(yat,"VisualBertModel"),yat.forEach(t),xFo=r(Wye," (VisualBert model)"),Wye.forEach(t),$Fo=i($),z_=n($,"LI",{});var Qye=s(z_);wie=n(Qye,"STRONG",{});var Lat=s(wie);kFo=r(Lat,"vit"),Lat.forEach(t),SFo=r(Qye," \u2014 "),Aq=n(Qye,"A",{href:!0});var xat=s(Aq);RFo=r(xat,"ViTModel"),xat.forEach(t),PFo=r(Qye," (ViT model)"),Qye.forEach(t),BFo=i($),W_=n($,"LI",{});var Hye=s(W_);Aie=n(Hye,"STRONG",{});var $at=s(Aie);IFo=r($at,"vit_mae"),$at.forEach(t),NFo=r(Hye," \u2014 "),yq=n(Hye,"A",{href:!0});var kat=s(yq);qFo=r(kat,"ViTMAEModel"),kat.forEach(t),jFo=r(Hye," (ViTMAE model)"),Hye.forEach(t),DFo=i($),Q_=n($,"LI",{});var Uye=s(Q_);yie=n(Uye,"STRONG",{});var Sat=s(yie);GFo=r(Sat,"wav2vec2"),Sat.forEach(t),OFo=r(Uye," \u2014 "),Lq=n(Uye,"A",{href:!0});var Rat=s(Lq);VFo=r(Rat,"Wav2Vec2Model"),Rat.forEach(t),XFo=r(Uye," (Wav2Vec2 model)"),Uye.forEach(t),zFo=i($),H_=n($,"LI",{});var Jye=s(H_);Lie=n(Jye,"STRONG",{});var Pat=s(Lie);WFo=r(Pat,"wav2vec2-conformer"),Pat.forEach(t),QFo=r(Jye," \u2014 "),xq=n(Jye,"A",{href:!0});var Bat=s(xq);HFo=r(Bat,"Wav2Vec2ConformerModel"),Bat.forEach(t),UFo=r(Jye," (Wav2Vec2-Conformer model)"),Jye.forEach(t),JFo=i($),U_=n($,"LI",{});var Yye=s(U_);xie=n(Yye,"STRONG",{});var Iat=s(xie);YFo=r(Iat,"wavlm"),Iat.forEach(t),KFo=r(Yye," \u2014 "),$q=n(Yye,"A",{href:!0});var Nat=s($q);ZFo=r(Nat,"WavLMModel"),Nat.forEach(t),eTo=r(Yye," (WavLM model)"),Yye.forEach(t),oTo=i($),J_=n($,"LI",{});var Kye=s(J_);$ie=n(Kye,"STRONG",{});var qat=s($ie);rTo=r(qat,"xglm"),qat.forEach(t),tTo=r(Kye," \u2014 "),kq=n(Kye,"A",{href:!0});var jat=s(kq);aTo=r(jat,"XGLMModel"),jat.forEach(t),nTo=r(Kye," (XGLM model)"),Kye.forEach(t),sTo=i($),Y_=n($,"LI",{});var Zye=s(Y_);kie=n(Zye,"STRONG",{});var Dat=s(kie);lTo=r(Dat,"xlm"),Dat.forEach(t),iTo=r(Zye," \u2014 "),Sq=n(Zye,"A",{href:!0});var Gat=s(Sq);dTo=r(Gat,"XLMModel"),Gat.forEach(t),cTo=r(Zye," (XLM model)"),Zye.forEach(t),fTo=i($),K_=n($,"LI",{});var eLe=s(K_);Sie=n(eLe,"STRONG",{});var Oat=s(Sie);mTo=r(Oat,"xlm-prophetnet"),Oat.forEach(t),gTo=r(eLe," \u2014 "),Rq=n(eLe,"A",{href:!0});var Vat=s(Rq);hTo=r(Vat,"XLMProphetNetModel"),Vat.forEach(t),pTo=r(eLe," (XLMProphetNet model)"),eLe.forEach(t),_To=i($),Z_=n($,"LI",{});var oLe=s(Z_);Rie=n(oLe,"STRONG",{});var Xat=s(Rie);uTo=r(Xat,"xlm-roberta"),Xat.forEach(t),bTo=r(oLe," \u2014 "),Pq=n(oLe,"A",{href:!0});var zat=s(Pq);vTo=r(zat,"XLMRobertaModel"),zat.forEach(t),FTo=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),TTo=i($),eu=n($,"LI",{});var rLe=s(eu);Pie=n(rLe,"STRONG",{});var Wat=s(Pie);MTo=r(Wat,"xlm-roberta-xl"),Wat.forEach(t),ETo=r(rLe," \u2014 "),Bq=n(rLe,"A",{href:!0});var Qat=s(Bq);CTo=r(Qat,"XLMRobertaXLModel"),Qat.forEach(t),wTo=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),ATo=i($),ou=n($,"LI",{});var tLe=s(ou);Bie=n(tLe,"STRONG",{});var Hat=s(Bie);yTo=r(Hat,"xlnet"),Hat.forEach(t),LTo=r(tLe," \u2014 "),Iq=n(tLe,"A",{href:!0});var Uat=s(Iq);xTo=r(Uat,"XLNetModel"),Uat.forEach(t),$To=r(tLe," (XLNet model)"),tLe.forEach(t),kTo=i($),ru=n($,"LI",{});var aLe=s(ru);Iie=n(aLe,"STRONG",{});var Jat=s(Iie);STo=r(Jat,"yolos"),Jat.forEach(t),RTo=r(aLe," \u2014 "),Nq=n(aLe,"A",{href:!0});var Yat=s(Nq);PTo=r(Yat,"YolosModel"),Yat.forEach(t),BTo=r(aLe," (YOLOS model)"),aLe.forEach(t),ITo=i($),tu=n($,"LI",{});var nLe=s(tu);Nie=n(nLe,"STRONG",{});var Kat=s(Nie);NTo=r(Kat,"yoso"),Kat.forEach(t),qTo=r(nLe," \u2014 "),qq=n(nLe,"A",{href:!0});var Zat=s(qq);jTo=r(Zat,"YosoModel"),Zat.forEach(t),DTo=r(nLe," (YOSO model)"),nLe.forEach(t),$.forEach(t),GTo=i(oa),au=n(oa,"P",{});var sLe=s(au);OTo=r(sLe,"The model is set in evaluation mode by default using "),qie=n(sLe,"CODE",{});var ent=s(qie);VTo=r(ent,"model.eval()"),ent.forEach(t),XTo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(sLe,"CODE",{});var ont=s(jie);zTo=r(ont,"model.train()"),ont.forEach(t),sLe.forEach(t),WTo=i(oa),T(nu.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Uqe=i(f),Li=n(f,"H2",{class:!0});var ZDe=s(Li);su=n(ZDe,"A",{id:!0,class:!0,href:!0});var rnt=s(su);Die=n(rnt,"SPAN",{});var tnt=s(Die);T(gy.$$.fragment,tnt),tnt.forEach(t),rnt.forEach(t),QTo=i(ZDe),Gie=n(ZDe,"SPAN",{});var ant=s(Gie);HTo=r(ant,"AutoModelForPreTraining"),ant.forEach(t),ZDe.forEach(t),Jqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(hy.$$.fragment,Os),UTo=i(Os),xi=n(Os,"P",{});var BZ=s(xi);JTo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=n(BZ,"A",{href:!0});var nnt=s(jq);YTo=r(nnt,"from_pretrained()"),nnt.forEach(t),KTo=r(BZ," class method or the "),Dq=n(BZ,"A",{href:!0});var snt=s(Dq);ZTo=r(snt,"from_config()"),snt.forEach(t),eMo=r(BZ,` class
method.`),BZ.forEach(t),oMo=i(Os),py=n(Os,"P",{});var eGe=s(py);rMo=r(eGe,"This class cannot be instantiated directly using "),Oie=n(eGe,"CODE",{});var lnt=s(Oie);tMo=r(lnt,"__init__()"),lnt.forEach(t),aMo=r(eGe," (throws an error)."),eGe.forEach(t),nMo=i(Os),at=n(Os,"DIV",{class:!0});var Ow=s(at);T(_y.$$.fragment,Ow),sMo=i(Ow),Vie=n(Ow,"P",{});var int=s(Vie);lMo=r(int,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),int.forEach(t),iMo=i(Ow),$i=n(Ow,"P",{});var IZ=s($i);dMo=r(IZ,`Note:
Loading a model from its configuration file does `),Xie=n(IZ,"STRONG",{});var dnt=s(Xie);cMo=r(dnt,"not"),dnt.forEach(t),fMo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n(IZ,"A",{href:!0});var cnt=s(Gq);mMo=r(cnt,"from_pretrained()"),cnt.forEach(t),gMo=r(IZ," to load the model weights."),IZ.forEach(t),hMo=i(Ow),T(lu.$$.fragment,Ow),Ow.forEach(t),pMo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(uy.$$.fragment,ra),_Mo=i(ra),zie=n(ra,"P",{});var fnt=s(zie);uMo=r(fnt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fnt.forEach(t),bMo=i(ra),xa=n(ra,"P",{});var Vw=s(xa);vMo=r(Vw,"The model class to instantiate is selected based on the "),Wie=n(Vw,"CODE",{});var mnt=s(Wie);FMo=r(mnt,"model_type"),mnt.forEach(t),TMo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Qie=n(Vw,"CODE",{});var gnt=s(Qie);MMo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),EMo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=n(Vw,"CODE",{});var hnt=s(Hie);CMo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),wMo=r(Vw,":"),Vw.forEach(t),AMo=i(ra),G=n(ra,"UL",{});var O=s(G);iu=n(O,"LI",{});var lLe=s(iu);Uie=n(lLe,"STRONG",{});var pnt=s(Uie);yMo=r(pnt,"albert"),pnt.forEach(t),LMo=r(lLe," \u2014 "),Oq=n(lLe,"A",{href:!0});var _nt=s(Oq);xMo=r(_nt,"AlbertForPreTraining"),_nt.forEach(t),$Mo=r(lLe," (ALBERT model)"),lLe.forEach(t),kMo=i(O),du=n(O,"LI",{});var iLe=s(du);Jie=n(iLe,"STRONG",{});var unt=s(Jie);SMo=r(unt,"bart"),unt.forEach(t),RMo=r(iLe," \u2014 "),Vq=n(iLe,"A",{href:!0});var bnt=s(Vq);PMo=r(bnt,"BartForConditionalGeneration"),bnt.forEach(t),BMo=r(iLe," (BART model)"),iLe.forEach(t),IMo=i(O),cu=n(O,"LI",{});var dLe=s(cu);Yie=n(dLe,"STRONG",{});var vnt=s(Yie);NMo=r(vnt,"bert"),vnt.forEach(t),qMo=r(dLe," \u2014 "),Xq=n(dLe,"A",{href:!0});var Fnt=s(Xq);jMo=r(Fnt,"BertForPreTraining"),Fnt.forEach(t),DMo=r(dLe," (BERT model)"),dLe.forEach(t),GMo=i(O),fu=n(O,"LI",{});var cLe=s(fu);Kie=n(cLe,"STRONG",{});var Tnt=s(Kie);OMo=r(Tnt,"big_bird"),Tnt.forEach(t),VMo=r(cLe," \u2014 "),zq=n(cLe,"A",{href:!0});var Mnt=s(zq);XMo=r(Mnt,"BigBirdForPreTraining"),Mnt.forEach(t),zMo=r(cLe," (BigBird model)"),cLe.forEach(t),WMo=i(O),mu=n(O,"LI",{});var fLe=s(mu);Zie=n(fLe,"STRONG",{});var Ent=s(Zie);QMo=r(Ent,"bloom"),Ent.forEach(t),HMo=r(fLe," \u2014 "),Wq=n(fLe,"A",{href:!0});var Cnt=s(Wq);UMo=r(Cnt,"BloomForCausalLM"),Cnt.forEach(t),JMo=r(fLe," (BLOOM model)"),fLe.forEach(t),YMo=i(O),gu=n(O,"LI",{});var mLe=s(gu);ede=n(mLe,"STRONG",{});var wnt=s(ede);KMo=r(wnt,"camembert"),wnt.forEach(t),ZMo=r(mLe," \u2014 "),Qq=n(mLe,"A",{href:!0});var Ant=s(Qq);eEo=r(Ant,"CamembertForMaskedLM"),Ant.forEach(t),oEo=r(mLe," (CamemBERT model)"),mLe.forEach(t),rEo=i(O),hu=n(O,"LI",{});var gLe=s(hu);ode=n(gLe,"STRONG",{});var ynt=s(ode);tEo=r(ynt,"ctrl"),ynt.forEach(t),aEo=r(gLe," \u2014 "),Hq=n(gLe,"A",{href:!0});var Lnt=s(Hq);nEo=r(Lnt,"CTRLLMHeadModel"),Lnt.forEach(t),sEo=r(gLe," (CTRL model)"),gLe.forEach(t),lEo=i(O),pu=n(O,"LI",{});var hLe=s(pu);rde=n(hLe,"STRONG",{});var xnt=s(rde);iEo=r(xnt,"data2vec-text"),xnt.forEach(t),dEo=r(hLe," \u2014 "),Uq=n(hLe,"A",{href:!0});var $nt=s(Uq);cEo=r($nt,"Data2VecTextForMaskedLM"),$nt.forEach(t),fEo=r(hLe," (Data2VecText model)"),hLe.forEach(t),mEo=i(O),_u=n(O,"LI",{});var pLe=s(_u);tde=n(pLe,"STRONG",{});var knt=s(tde);gEo=r(knt,"deberta"),knt.forEach(t),hEo=r(pLe," \u2014 "),Jq=n(pLe,"A",{href:!0});var Snt=s(Jq);pEo=r(Snt,"DebertaForMaskedLM"),Snt.forEach(t),_Eo=r(pLe," (DeBERTa model)"),pLe.forEach(t),uEo=i(O),uu=n(O,"LI",{});var _Le=s(uu);ade=n(_Le,"STRONG",{});var Rnt=s(ade);bEo=r(Rnt,"deberta-v2"),Rnt.forEach(t),vEo=r(_Le," \u2014 "),Yq=n(_Le,"A",{href:!0});var Pnt=s(Yq);FEo=r(Pnt,"DebertaV2ForMaskedLM"),Pnt.forEach(t),TEo=r(_Le," (DeBERTa-v2 model)"),_Le.forEach(t),MEo=i(O),bu=n(O,"LI",{});var uLe=s(bu);nde=n(uLe,"STRONG",{});var Bnt=s(nde);EEo=r(Bnt,"distilbert"),Bnt.forEach(t),CEo=r(uLe," \u2014 "),Kq=n(uLe,"A",{href:!0});var Int=s(Kq);wEo=r(Int,"DistilBertForMaskedLM"),Int.forEach(t),AEo=r(uLe," (DistilBERT model)"),uLe.forEach(t),yEo=i(O),vu=n(O,"LI",{});var bLe=s(vu);sde=n(bLe,"STRONG",{});var Nnt=s(sde);LEo=r(Nnt,"electra"),Nnt.forEach(t),xEo=r(bLe," \u2014 "),Zq=n(bLe,"A",{href:!0});var qnt=s(Zq);$Eo=r(qnt,"ElectraForPreTraining"),qnt.forEach(t),kEo=r(bLe," (ELECTRA model)"),bLe.forEach(t),SEo=i(O),Fu=n(O,"LI",{});var vLe=s(Fu);lde=n(vLe,"STRONG",{});var jnt=s(lde);REo=r(jnt,"flaubert"),jnt.forEach(t),PEo=r(vLe," \u2014 "),ej=n(vLe,"A",{href:!0});var Dnt=s(ej);BEo=r(Dnt,"FlaubertWithLMHeadModel"),Dnt.forEach(t),IEo=r(vLe," (FlauBERT model)"),vLe.forEach(t),NEo=i(O),Tu=n(O,"LI",{});var FLe=s(Tu);ide=n(FLe,"STRONG",{});var Gnt=s(ide);qEo=r(Gnt,"flava"),Gnt.forEach(t),jEo=r(FLe," \u2014 "),oj=n(FLe,"A",{href:!0});var Ont=s(oj);DEo=r(Ont,"FlavaForPreTraining"),Ont.forEach(t),GEo=r(FLe," (Flava model)"),FLe.forEach(t),OEo=i(O),Mu=n(O,"LI",{});var TLe=s(Mu);dde=n(TLe,"STRONG",{});var Vnt=s(dde);VEo=r(Vnt,"fnet"),Vnt.forEach(t),XEo=r(TLe," \u2014 "),rj=n(TLe,"A",{href:!0});var Xnt=s(rj);zEo=r(Xnt,"FNetForPreTraining"),Xnt.forEach(t),WEo=r(TLe," (FNet model)"),TLe.forEach(t),QEo=i(O),Eu=n(O,"LI",{});var MLe=s(Eu);cde=n(MLe,"STRONG",{});var znt=s(cde);HEo=r(znt,"fsmt"),znt.forEach(t),UEo=r(MLe," \u2014 "),tj=n(MLe,"A",{href:!0});var Wnt=s(tj);JEo=r(Wnt,"FSMTForConditionalGeneration"),Wnt.forEach(t),YEo=r(MLe," (FairSeq Machine-Translation model)"),MLe.forEach(t),KEo=i(O),Cu=n(O,"LI",{});var ELe=s(Cu);fde=n(ELe,"STRONG",{});var Qnt=s(fde);ZEo=r(Qnt,"funnel"),Qnt.forEach(t),eCo=r(ELe," \u2014 "),aj=n(ELe,"A",{href:!0});var Hnt=s(aj);oCo=r(Hnt,"FunnelForPreTraining"),Hnt.forEach(t),rCo=r(ELe," (Funnel Transformer model)"),ELe.forEach(t),tCo=i(O),wu=n(O,"LI",{});var CLe=s(wu);mde=n(CLe,"STRONG",{});var Unt=s(mde);aCo=r(Unt,"gpt2"),Unt.forEach(t),nCo=r(CLe," \u2014 "),nj=n(CLe,"A",{href:!0});var Jnt=s(nj);sCo=r(Jnt,"GPT2LMHeadModel"),Jnt.forEach(t),lCo=r(CLe," (OpenAI GPT-2 model)"),CLe.forEach(t),iCo=i(O),Au=n(O,"LI",{});var wLe=s(Au);gde=n(wLe,"STRONG",{});var Ynt=s(gde);dCo=r(Ynt,"ibert"),Ynt.forEach(t),cCo=r(wLe," \u2014 "),sj=n(wLe,"A",{href:!0});var Knt=s(sj);fCo=r(Knt,"IBertForMaskedLM"),Knt.forEach(t),mCo=r(wLe," (I-BERT model)"),wLe.forEach(t),gCo=i(O),yu=n(O,"LI",{});var ALe=s(yu);hde=n(ALe,"STRONG",{});var Znt=s(hde);hCo=r(Znt,"layoutlm"),Znt.forEach(t),pCo=r(ALe," \u2014 "),lj=n(ALe,"A",{href:!0});var est=s(lj);_Co=r(est,"LayoutLMForMaskedLM"),est.forEach(t),uCo=r(ALe," (LayoutLM model)"),ALe.forEach(t),bCo=i(O),Lu=n(O,"LI",{});var yLe=s(Lu);pde=n(yLe,"STRONG",{});var ost=s(pde);vCo=r(ost,"longformer"),ost.forEach(t),FCo=r(yLe," \u2014 "),ij=n(yLe,"A",{href:!0});var rst=s(ij);TCo=r(rst,"LongformerForMaskedLM"),rst.forEach(t),MCo=r(yLe," (Longformer model)"),yLe.forEach(t),ECo=i(O),xu=n(O,"LI",{});var LLe=s(xu);_de=n(LLe,"STRONG",{});var tst=s(_de);CCo=r(tst,"lxmert"),tst.forEach(t),wCo=r(LLe," \u2014 "),dj=n(LLe,"A",{href:!0});var ast=s(dj);ACo=r(ast,"LxmertForPreTraining"),ast.forEach(t),yCo=r(LLe," (LXMERT model)"),LLe.forEach(t),LCo=i(O),$u=n(O,"LI",{});var xLe=s($u);ude=n(xLe,"STRONG",{});var nst=s(ude);xCo=r(nst,"megatron-bert"),nst.forEach(t),$Co=r(xLe," \u2014 "),cj=n(xLe,"A",{href:!0});var sst=s(cj);kCo=r(sst,"MegatronBertForPreTraining"),sst.forEach(t),SCo=r(xLe," (MegatronBert model)"),xLe.forEach(t),RCo=i(O),ku=n(O,"LI",{});var $Le=s(ku);bde=n($Le,"STRONG",{});var lst=s(bde);PCo=r(lst,"mobilebert"),lst.forEach(t),BCo=r($Le," \u2014 "),fj=n($Le,"A",{href:!0});var ist=s(fj);ICo=r(ist,"MobileBertForPreTraining"),ist.forEach(t),NCo=r($Le," (MobileBERT model)"),$Le.forEach(t),qCo=i(O),Su=n(O,"LI",{});var kLe=s(Su);vde=n(kLe,"STRONG",{});var dst=s(vde);jCo=r(dst,"mpnet"),dst.forEach(t),DCo=r(kLe," \u2014 "),mj=n(kLe,"A",{href:!0});var cst=s(mj);GCo=r(cst,"MPNetForMaskedLM"),cst.forEach(t),OCo=r(kLe," (MPNet model)"),kLe.forEach(t),VCo=i(O),Ru=n(O,"LI",{});var SLe=s(Ru);Fde=n(SLe,"STRONG",{});var fst=s(Fde);XCo=r(fst,"openai-gpt"),fst.forEach(t),zCo=r(SLe," \u2014 "),gj=n(SLe,"A",{href:!0});var mst=s(gj);WCo=r(mst,"OpenAIGPTLMHeadModel"),mst.forEach(t),QCo=r(SLe," (OpenAI GPT model)"),SLe.forEach(t),HCo=i(O),Pu=n(O,"LI",{});var RLe=s(Pu);Tde=n(RLe,"STRONG",{});var gst=s(Tde);UCo=r(gst,"retribert"),gst.forEach(t),JCo=r(RLe," \u2014 "),hj=n(RLe,"A",{href:!0});var hst=s(hj);YCo=r(hst,"RetriBertModel"),hst.forEach(t),KCo=r(RLe," (RetriBERT model)"),RLe.forEach(t),ZCo=i(O),Bu=n(O,"LI",{});var PLe=s(Bu);Mde=n(PLe,"STRONG",{});var pst=s(Mde);e5o=r(pst,"roberta"),pst.forEach(t),o5o=r(PLe," \u2014 "),pj=n(PLe,"A",{href:!0});var _st=s(pj);r5o=r(_st,"RobertaForMaskedLM"),_st.forEach(t),t5o=r(PLe," (RoBERTa model)"),PLe.forEach(t),a5o=i(O),Iu=n(O,"LI",{});var BLe=s(Iu);Ede=n(BLe,"STRONG",{});var ust=s(Ede);n5o=r(ust,"splinter"),ust.forEach(t),s5o=r(BLe," \u2014 "),_j=n(BLe,"A",{href:!0});var bst=s(_j);l5o=r(bst,"SplinterForPreTraining"),bst.forEach(t),i5o=r(BLe," (Splinter model)"),BLe.forEach(t),d5o=i(O),Nu=n(O,"LI",{});var ILe=s(Nu);Cde=n(ILe,"STRONG",{});var vst=s(Cde);c5o=r(vst,"squeezebert"),vst.forEach(t),f5o=r(ILe," \u2014 "),uj=n(ILe,"A",{href:!0});var Fst=s(uj);m5o=r(Fst,"SqueezeBertForMaskedLM"),Fst.forEach(t),g5o=r(ILe," (SqueezeBERT model)"),ILe.forEach(t),h5o=i(O),qu=n(O,"LI",{});var NLe=s(qu);wde=n(NLe,"STRONG",{});var Tst=s(wde);p5o=r(Tst,"t5"),Tst.forEach(t),_5o=r(NLe," \u2014 "),bj=n(NLe,"A",{href:!0});var Mst=s(bj);u5o=r(Mst,"T5ForConditionalGeneration"),Mst.forEach(t),b5o=r(NLe," (T5 model)"),NLe.forEach(t),v5o=i(O),ju=n(O,"LI",{});var qLe=s(ju);Ade=n(qLe,"STRONG",{});var Est=s(Ade);F5o=r(Est,"tapas"),Est.forEach(t),T5o=r(qLe," \u2014 "),vj=n(qLe,"A",{href:!0});var Cst=s(vj);M5o=r(Cst,"TapasForMaskedLM"),Cst.forEach(t),E5o=r(qLe," (TAPAS model)"),qLe.forEach(t),C5o=i(O),Du=n(O,"LI",{});var jLe=s(Du);yde=n(jLe,"STRONG",{});var wst=s(yde);w5o=r(wst,"transfo-xl"),wst.forEach(t),A5o=r(jLe," \u2014 "),Fj=n(jLe,"A",{href:!0});var Ast=s(Fj);y5o=r(Ast,"TransfoXLLMHeadModel"),Ast.forEach(t),L5o=r(jLe," (Transformer-XL model)"),jLe.forEach(t),x5o=i(O),Gu=n(O,"LI",{});var DLe=s(Gu);Lde=n(DLe,"STRONG",{});var yst=s(Lde);$5o=r(yst,"unispeech"),yst.forEach(t),k5o=r(DLe," \u2014 "),Tj=n(DLe,"A",{href:!0});var Lst=s(Tj);S5o=r(Lst,"UniSpeechForPreTraining"),Lst.forEach(t),R5o=r(DLe," (UniSpeech model)"),DLe.forEach(t),P5o=i(O),Ou=n(O,"LI",{});var GLe=s(Ou);xde=n(GLe,"STRONG",{});var xst=s(xde);B5o=r(xst,"unispeech-sat"),xst.forEach(t),I5o=r(GLe," \u2014 "),Mj=n(GLe,"A",{href:!0});var $st=s(Mj);N5o=r($st,"UniSpeechSatForPreTraining"),$st.forEach(t),q5o=r(GLe," (UniSpeechSat model)"),GLe.forEach(t),j5o=i(O),Vu=n(O,"LI",{});var OLe=s(Vu);$de=n(OLe,"STRONG",{});var kst=s($de);D5o=r(kst,"visual_bert"),kst.forEach(t),G5o=r(OLe," \u2014 "),Ej=n(OLe,"A",{href:!0});var Sst=s(Ej);O5o=r(Sst,"VisualBertForPreTraining"),Sst.forEach(t),V5o=r(OLe," (VisualBert model)"),OLe.forEach(t),X5o=i(O),Xu=n(O,"LI",{});var VLe=s(Xu);kde=n(VLe,"STRONG",{});var Rst=s(kde);z5o=r(Rst,"vit_mae"),Rst.forEach(t),W5o=r(VLe," \u2014 "),Cj=n(VLe,"A",{href:!0});var Pst=s(Cj);Q5o=r(Pst,"ViTMAEForPreTraining"),Pst.forEach(t),H5o=r(VLe," (ViTMAE model)"),VLe.forEach(t),U5o=i(O),zu=n(O,"LI",{});var XLe=s(zu);Sde=n(XLe,"STRONG",{});var Bst=s(Sde);J5o=r(Bst,"wav2vec2"),Bst.forEach(t),Y5o=r(XLe," \u2014 "),wj=n(XLe,"A",{href:!0});var Ist=s(wj);K5o=r(Ist,"Wav2Vec2ForPreTraining"),Ist.forEach(t),Z5o=r(XLe," (Wav2Vec2 model)"),XLe.forEach(t),e3o=i(O),Wu=n(O,"LI",{});var zLe=s(Wu);Rde=n(zLe,"STRONG",{});var Nst=s(Rde);o3o=r(Nst,"wav2vec2-conformer"),Nst.forEach(t),r3o=r(zLe," \u2014 "),Aj=n(zLe,"A",{href:!0});var qst=s(Aj);t3o=r(qst,"Wav2Vec2ConformerForPreTraining"),qst.forEach(t),a3o=r(zLe," (Wav2Vec2-Conformer model)"),zLe.forEach(t),n3o=i(O),Qu=n(O,"LI",{});var WLe=s(Qu);Pde=n(WLe,"STRONG",{});var jst=s(Pde);s3o=r(jst,"xlm"),jst.forEach(t),l3o=r(WLe," \u2014 "),yj=n(WLe,"A",{href:!0});var Dst=s(yj);i3o=r(Dst,"XLMWithLMHeadModel"),Dst.forEach(t),d3o=r(WLe," (XLM model)"),WLe.forEach(t),c3o=i(O),Hu=n(O,"LI",{});var QLe=s(Hu);Bde=n(QLe,"STRONG",{});var Gst=s(Bde);f3o=r(Gst,"xlm-roberta"),Gst.forEach(t),m3o=r(QLe," \u2014 "),Lj=n(QLe,"A",{href:!0});var Ost=s(Lj);g3o=r(Ost,"XLMRobertaForMaskedLM"),Ost.forEach(t),h3o=r(QLe," (XLM-RoBERTa model)"),QLe.forEach(t),p3o=i(O),Uu=n(O,"LI",{});var HLe=s(Uu);Ide=n(HLe,"STRONG",{});var Vst=s(Ide);_3o=r(Vst,"xlm-roberta-xl"),Vst.forEach(t),u3o=r(HLe," \u2014 "),xj=n(HLe,"A",{href:!0});var Xst=s(xj);b3o=r(Xst,"XLMRobertaXLForMaskedLM"),Xst.forEach(t),v3o=r(HLe," (XLM-RoBERTa-XL model)"),HLe.forEach(t),F3o=i(O),Ju=n(O,"LI",{});var ULe=s(Ju);Nde=n(ULe,"STRONG",{});var zst=s(Nde);T3o=r(zst,"xlnet"),zst.forEach(t),M3o=r(ULe," \u2014 "),$j=n(ULe,"A",{href:!0});var Wst=s($j);E3o=r(Wst,"XLNetLMHeadModel"),Wst.forEach(t),C3o=r(ULe," (XLNet model)"),ULe.forEach(t),O.forEach(t),w3o=i(ra),Yu=n(ra,"P",{});var JLe=s(Yu);A3o=r(JLe,"The model is set in evaluation mode by default using "),qde=n(JLe,"CODE",{});var Qst=s(qde);y3o=r(Qst,"model.eval()"),Qst.forEach(t),L3o=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=n(JLe,"CODE",{});var Hst=s(jde);x3o=r(Hst,"model.train()"),Hst.forEach(t),JLe.forEach(t),$3o=i(ra),T(Ku.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Yqe=i(f),ki=n(f,"H2",{class:!0});var oGe=s(ki);Zu=n(oGe,"A",{id:!0,class:!0,href:!0});var Ust=s(Zu);Dde=n(Ust,"SPAN",{});var Jst=s(Dde);T(by.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),k3o=i(oGe),Gde=n(oGe,"SPAN",{});var Yst=s(Gde);S3o=r(Yst,"AutoModelForCausalLM"),Yst.forEach(t),oGe.forEach(t),Kqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(vy.$$.fragment,Vs),R3o=i(Vs),Si=n(Vs,"P",{});var NZ=s(Si);P3o=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=n(NZ,"A",{href:!0});var Kst=s(kj);B3o=r(Kst,"from_pretrained()"),Kst.forEach(t),I3o=r(NZ," class method or the "),Sj=n(NZ,"A",{href:!0});var Zst=s(Sj);N3o=r(Zst,"from_config()"),Zst.forEach(t),q3o=r(NZ,` class
method.`),NZ.forEach(t),j3o=i(Vs),Fy=n(Vs,"P",{});var rGe=s(Fy);D3o=r(rGe,"This class cannot be instantiated directly using "),Ode=n(rGe,"CODE",{});var elt=s(Ode);G3o=r(elt,"__init__()"),elt.forEach(t),O3o=r(rGe," (throws an error)."),rGe.forEach(t),V3o=i(Vs),nt=n(Vs,"DIV",{class:!0});var Xw=s(nt);T(Ty.$$.fragment,Xw),X3o=i(Xw),Vde=n(Xw,"P",{});var olt=s(Vde);z3o=r(olt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),olt.forEach(t),W3o=i(Xw),Ri=n(Xw,"P",{});var qZ=s(Ri);Q3o=r(qZ,`Note:
Loading a model from its configuration file does `),Xde=n(qZ,"STRONG",{});var rlt=s(Xde);H3o=r(rlt,"not"),rlt.forEach(t),U3o=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(qZ,"A",{href:!0});var tlt=s(Rj);J3o=r(tlt,"from_pretrained()"),tlt.forEach(t),Y3o=r(qZ," to load the model weights."),qZ.forEach(t),K3o=i(Xw),T(e4.$$.fragment,Xw),Xw.forEach(t),Z3o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(My.$$.fragment,ta),e0o=i(ta),zde=n(ta,"P",{});var alt=s(zde);o0o=r(alt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),alt.forEach(t),r0o=i(ta),$a=n(ta,"P",{});var zw=s($a);t0o=r(zw,"The model class to instantiate is selected based on the "),Wde=n(zw,"CODE",{});var nlt=s(Wde);a0o=r(nlt,"model_type"),nlt.forEach(t),n0o=r(zw,` property of the config object (either
passed as an argument or loaded from `),Qde=n(zw,"CODE",{});var slt=s(Qde);s0o=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),l0o=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(zw,"CODE",{});var llt=s(Hde);i0o=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),d0o=r(zw,":"),zw.forEach(t),c0o=i(ta),z=n(ta,"UL",{});var W=s(z);o4=n(W,"LI",{});var YLe=s(o4);Ude=n(YLe,"STRONG",{});var ilt=s(Ude);f0o=r(ilt,"bart"),ilt.forEach(t),m0o=r(YLe," \u2014 "),Pj=n(YLe,"A",{href:!0});var dlt=s(Pj);g0o=r(dlt,"BartForCausalLM"),dlt.forEach(t),h0o=r(YLe," (BART model)"),YLe.forEach(t),p0o=i(W),r4=n(W,"LI",{});var KLe=s(r4);Jde=n(KLe,"STRONG",{});var clt=s(Jde);_0o=r(clt,"bert"),clt.forEach(t),u0o=r(KLe," \u2014 "),Bj=n(KLe,"A",{href:!0});var flt=s(Bj);b0o=r(flt,"BertLMHeadModel"),flt.forEach(t),v0o=r(KLe," (BERT model)"),KLe.forEach(t),F0o=i(W),t4=n(W,"LI",{});var ZLe=s(t4);Yde=n(ZLe,"STRONG",{});var mlt=s(Yde);T0o=r(mlt,"bert-generation"),mlt.forEach(t),M0o=r(ZLe," \u2014 "),Ij=n(ZLe,"A",{href:!0});var glt=s(Ij);E0o=r(glt,"BertGenerationDecoder"),glt.forEach(t),C0o=r(ZLe," (Bert Generation model)"),ZLe.forEach(t),w0o=i(W),a4=n(W,"LI",{});var e8e=s(a4);Kde=n(e8e,"STRONG",{});var hlt=s(Kde);A0o=r(hlt,"big_bird"),hlt.forEach(t),y0o=r(e8e," \u2014 "),Nj=n(e8e,"A",{href:!0});var plt=s(Nj);L0o=r(plt,"BigBirdForCausalLM"),plt.forEach(t),x0o=r(e8e," (BigBird model)"),e8e.forEach(t),$0o=i(W),n4=n(W,"LI",{});var o8e=s(n4);Zde=n(o8e,"STRONG",{});var _lt=s(Zde);k0o=r(_lt,"bigbird_pegasus"),_lt.forEach(t),S0o=r(o8e," \u2014 "),qj=n(o8e,"A",{href:!0});var ult=s(qj);R0o=r(ult,"BigBirdPegasusForCausalLM"),ult.forEach(t),P0o=r(o8e," (BigBirdPegasus model)"),o8e.forEach(t),B0o=i(W),s4=n(W,"LI",{});var r8e=s(s4);ece=n(r8e,"STRONG",{});var blt=s(ece);I0o=r(blt,"blenderbot"),blt.forEach(t),N0o=r(r8e," \u2014 "),jj=n(r8e,"A",{href:!0});var vlt=s(jj);q0o=r(vlt,"BlenderbotForCausalLM"),vlt.forEach(t),j0o=r(r8e," (Blenderbot model)"),r8e.forEach(t),D0o=i(W),l4=n(W,"LI",{});var t8e=s(l4);oce=n(t8e,"STRONG",{});var Flt=s(oce);G0o=r(Flt,"blenderbot-small"),Flt.forEach(t),O0o=r(t8e," \u2014 "),Dj=n(t8e,"A",{href:!0});var Tlt=s(Dj);V0o=r(Tlt,"BlenderbotSmallForCausalLM"),Tlt.forEach(t),X0o=r(t8e," (BlenderbotSmall model)"),t8e.forEach(t),z0o=i(W),i4=n(W,"LI",{});var a8e=s(i4);rce=n(a8e,"STRONG",{});var Mlt=s(rce);W0o=r(Mlt,"bloom"),Mlt.forEach(t),Q0o=r(a8e," \u2014 "),Gj=n(a8e,"A",{href:!0});var Elt=s(Gj);H0o=r(Elt,"BloomForCausalLM"),Elt.forEach(t),U0o=r(a8e," (BLOOM model)"),a8e.forEach(t),J0o=i(W),d4=n(W,"LI",{});var n8e=s(d4);tce=n(n8e,"STRONG",{});var Clt=s(tce);Y0o=r(Clt,"camembert"),Clt.forEach(t),K0o=r(n8e," \u2014 "),Oj=n(n8e,"A",{href:!0});var wlt=s(Oj);Z0o=r(wlt,"CamembertForCausalLM"),wlt.forEach(t),ewo=r(n8e," (CamemBERT model)"),n8e.forEach(t),owo=i(W),c4=n(W,"LI",{});var s8e=s(c4);ace=n(s8e,"STRONG",{});var Alt=s(ace);rwo=r(Alt,"ctrl"),Alt.forEach(t),two=r(s8e," \u2014 "),Vj=n(s8e,"A",{href:!0});var ylt=s(Vj);awo=r(ylt,"CTRLLMHeadModel"),ylt.forEach(t),nwo=r(s8e," (CTRL model)"),s8e.forEach(t),swo=i(W),f4=n(W,"LI",{});var l8e=s(f4);nce=n(l8e,"STRONG",{});var Llt=s(nce);lwo=r(Llt,"data2vec-text"),Llt.forEach(t),iwo=r(l8e," \u2014 "),Xj=n(l8e,"A",{href:!0});var xlt=s(Xj);dwo=r(xlt,"Data2VecTextForCausalLM"),xlt.forEach(t),cwo=r(l8e," (Data2VecText model)"),l8e.forEach(t),fwo=i(W),m4=n(W,"LI",{});var i8e=s(m4);sce=n(i8e,"STRONG",{});var $lt=s(sce);mwo=r($lt,"electra"),$lt.forEach(t),gwo=r(i8e," \u2014 "),zj=n(i8e,"A",{href:!0});var klt=s(zj);hwo=r(klt,"ElectraForCausalLM"),klt.forEach(t),pwo=r(i8e," (ELECTRA model)"),i8e.forEach(t),_wo=i(W),g4=n(W,"LI",{});var d8e=s(g4);lce=n(d8e,"STRONG",{});var Slt=s(lce);uwo=r(Slt,"gpt2"),Slt.forEach(t),bwo=r(d8e," \u2014 "),Wj=n(d8e,"A",{href:!0});var Rlt=s(Wj);vwo=r(Rlt,"GPT2LMHeadModel"),Rlt.forEach(t),Fwo=r(d8e," (OpenAI GPT-2 model)"),d8e.forEach(t),Two=i(W),h4=n(W,"LI",{});var c8e=s(h4);ice=n(c8e,"STRONG",{});var Plt=s(ice);Mwo=r(Plt,"gpt_neo"),Plt.forEach(t),Ewo=r(c8e," \u2014 "),Qj=n(c8e,"A",{href:!0});var Blt=s(Qj);Cwo=r(Blt,"GPTNeoForCausalLM"),Blt.forEach(t),wwo=r(c8e," (GPT Neo model)"),c8e.forEach(t),Awo=i(W),p4=n(W,"LI",{});var f8e=s(p4);dce=n(f8e,"STRONG",{});var Ilt=s(dce);ywo=r(Ilt,"gpt_neox"),Ilt.forEach(t),Lwo=r(f8e," \u2014 "),Hj=n(f8e,"A",{href:!0});var Nlt=s(Hj);xwo=r(Nlt,"GPTNeoXForCausalLM"),Nlt.forEach(t),$wo=r(f8e," (GPT NeoX model)"),f8e.forEach(t),kwo=i(W),_4=n(W,"LI",{});var m8e=s(_4);cce=n(m8e,"STRONG",{});var qlt=s(cce);Swo=r(qlt,"gptj"),qlt.forEach(t),Rwo=r(m8e," \u2014 "),Uj=n(m8e,"A",{href:!0});var jlt=s(Uj);Pwo=r(jlt,"GPTJForCausalLM"),jlt.forEach(t),Bwo=r(m8e," (GPT-J model)"),m8e.forEach(t),Iwo=i(W),u4=n(W,"LI",{});var g8e=s(u4);fce=n(g8e,"STRONG",{});var Dlt=s(fce);Nwo=r(Dlt,"marian"),Dlt.forEach(t),qwo=r(g8e," \u2014 "),Jj=n(g8e,"A",{href:!0});var Glt=s(Jj);jwo=r(Glt,"MarianForCausalLM"),Glt.forEach(t),Dwo=r(g8e," (Marian model)"),g8e.forEach(t),Gwo=i(W),b4=n(W,"LI",{});var h8e=s(b4);mce=n(h8e,"STRONG",{});var Olt=s(mce);Owo=r(Olt,"mbart"),Olt.forEach(t),Vwo=r(h8e," \u2014 "),Yj=n(h8e,"A",{href:!0});var Vlt=s(Yj);Xwo=r(Vlt,"MBartForCausalLM"),Vlt.forEach(t),zwo=r(h8e," (mBART model)"),h8e.forEach(t),Wwo=i(W),v4=n(W,"LI",{});var p8e=s(v4);gce=n(p8e,"STRONG",{});var Xlt=s(gce);Qwo=r(Xlt,"megatron-bert"),Xlt.forEach(t),Hwo=r(p8e," \u2014 "),Kj=n(p8e,"A",{href:!0});var zlt=s(Kj);Uwo=r(zlt,"MegatronBertForCausalLM"),zlt.forEach(t),Jwo=r(p8e," (MegatronBert model)"),p8e.forEach(t),Ywo=i(W),F4=n(W,"LI",{});var _8e=s(F4);hce=n(_8e,"STRONG",{});var Wlt=s(hce);Kwo=r(Wlt,"openai-gpt"),Wlt.forEach(t),Zwo=r(_8e," \u2014 "),Zj=n(_8e,"A",{href:!0});var Qlt=s(Zj);e6o=r(Qlt,"OpenAIGPTLMHeadModel"),Qlt.forEach(t),o6o=r(_8e," (OpenAI GPT model)"),_8e.forEach(t),r6o=i(W),T4=n(W,"LI",{});var u8e=s(T4);pce=n(u8e,"STRONG",{});var Hlt=s(pce);t6o=r(Hlt,"opt"),Hlt.forEach(t),a6o=r(u8e," \u2014 "),eD=n(u8e,"A",{href:!0});var Ult=s(eD);n6o=r(Ult,"OPTForCausalLM"),Ult.forEach(t),s6o=r(u8e," (OPT model)"),u8e.forEach(t),l6o=i(W),M4=n(W,"LI",{});var b8e=s(M4);_ce=n(b8e,"STRONG",{});var Jlt=s(_ce);i6o=r(Jlt,"pegasus"),Jlt.forEach(t),d6o=r(b8e," \u2014 "),oD=n(b8e,"A",{href:!0});var Ylt=s(oD);c6o=r(Ylt,"PegasusForCausalLM"),Ylt.forEach(t),f6o=r(b8e," (Pegasus model)"),b8e.forEach(t),m6o=i(W),E4=n(W,"LI",{});var v8e=s(E4);uce=n(v8e,"STRONG",{});var Klt=s(uce);g6o=r(Klt,"plbart"),Klt.forEach(t),h6o=r(v8e," \u2014 "),rD=n(v8e,"A",{href:!0});var Zlt=s(rD);p6o=r(Zlt,"PLBartForCausalLM"),Zlt.forEach(t),_6o=r(v8e," (PLBart model)"),v8e.forEach(t),u6o=i(W),C4=n(W,"LI",{});var F8e=s(C4);bce=n(F8e,"STRONG",{});var eit=s(bce);b6o=r(eit,"prophetnet"),eit.forEach(t),v6o=r(F8e," \u2014 "),tD=n(F8e,"A",{href:!0});var oit=s(tD);F6o=r(oit,"ProphetNetForCausalLM"),oit.forEach(t),T6o=r(F8e," (ProphetNet model)"),F8e.forEach(t),M6o=i(W),w4=n(W,"LI",{});var T8e=s(w4);vce=n(T8e,"STRONG",{});var rit=s(vce);E6o=r(rit,"qdqbert"),rit.forEach(t),C6o=r(T8e," \u2014 "),aD=n(T8e,"A",{href:!0});var tit=s(aD);w6o=r(tit,"QDQBertLMHeadModel"),tit.forEach(t),A6o=r(T8e," (QDQBert model)"),T8e.forEach(t),y6o=i(W),A4=n(W,"LI",{});var M8e=s(A4);Fce=n(M8e,"STRONG",{});var ait=s(Fce);L6o=r(ait,"reformer"),ait.forEach(t),x6o=r(M8e," \u2014 "),nD=n(M8e,"A",{href:!0});var nit=s(nD);$6o=r(nit,"ReformerModelWithLMHead"),nit.forEach(t),k6o=r(M8e," (Reformer model)"),M8e.forEach(t),S6o=i(W),y4=n(W,"LI",{});var E8e=s(y4);Tce=n(E8e,"STRONG",{});var sit=s(Tce);R6o=r(sit,"rembert"),sit.forEach(t),P6o=r(E8e," \u2014 "),sD=n(E8e,"A",{href:!0});var lit=s(sD);B6o=r(lit,"RemBertForCausalLM"),lit.forEach(t),I6o=r(E8e," (RemBERT model)"),E8e.forEach(t),N6o=i(W),L4=n(W,"LI",{});var C8e=s(L4);Mce=n(C8e,"STRONG",{});var iit=s(Mce);q6o=r(iit,"roberta"),iit.forEach(t),j6o=r(C8e," \u2014 "),lD=n(C8e,"A",{href:!0});var dit=s(lD);D6o=r(dit,"RobertaForCausalLM"),dit.forEach(t),G6o=r(C8e," (RoBERTa model)"),C8e.forEach(t),O6o=i(W),x4=n(W,"LI",{});var w8e=s(x4);Ece=n(w8e,"STRONG",{});var cit=s(Ece);V6o=r(cit,"roformer"),cit.forEach(t),X6o=r(w8e," \u2014 "),iD=n(w8e,"A",{href:!0});var fit=s(iD);z6o=r(fit,"RoFormerForCausalLM"),fit.forEach(t),W6o=r(w8e," (RoFormer model)"),w8e.forEach(t),Q6o=i(W),$4=n(W,"LI",{});var A8e=s($4);Cce=n(A8e,"STRONG",{});var mit=s(Cce);H6o=r(mit,"speech_to_text_2"),mit.forEach(t),U6o=r(A8e," \u2014 "),dD=n(A8e,"A",{href:!0});var git=s(dD);J6o=r(git,"Speech2Text2ForCausalLM"),git.forEach(t),Y6o=r(A8e," (Speech2Text2 model)"),A8e.forEach(t),K6o=i(W),k4=n(W,"LI",{});var y8e=s(k4);wce=n(y8e,"STRONG",{});var hit=s(wce);Z6o=r(hit,"transfo-xl"),hit.forEach(t),eAo=r(y8e," \u2014 "),cD=n(y8e,"A",{href:!0});var pit=s(cD);oAo=r(pit,"TransfoXLLMHeadModel"),pit.forEach(t),rAo=r(y8e," (Transformer-XL model)"),y8e.forEach(t),tAo=i(W),S4=n(W,"LI",{});var L8e=s(S4);Ace=n(L8e,"STRONG",{});var _it=s(Ace);aAo=r(_it,"trocr"),_it.forEach(t),nAo=r(L8e," \u2014 "),fD=n(L8e,"A",{href:!0});var uit=s(fD);sAo=r(uit,"TrOCRForCausalLM"),uit.forEach(t),lAo=r(L8e," (TrOCR model)"),L8e.forEach(t),iAo=i(W),R4=n(W,"LI",{});var x8e=s(R4);yce=n(x8e,"STRONG",{});var bit=s(yce);dAo=r(bit,"xglm"),bit.forEach(t),cAo=r(x8e," \u2014 "),mD=n(x8e,"A",{href:!0});var vit=s(mD);fAo=r(vit,"XGLMForCausalLM"),vit.forEach(t),mAo=r(x8e," (XGLM model)"),x8e.forEach(t),gAo=i(W),P4=n(W,"LI",{});var $8e=s(P4);Lce=n($8e,"STRONG",{});var Fit=s(Lce);hAo=r(Fit,"xlm"),Fit.forEach(t),pAo=r($8e," \u2014 "),gD=n($8e,"A",{href:!0});var Tit=s(gD);_Ao=r(Tit,"XLMWithLMHeadModel"),Tit.forEach(t),uAo=r($8e," (XLM model)"),$8e.forEach(t),bAo=i(W),B4=n(W,"LI",{});var k8e=s(B4);xce=n(k8e,"STRONG",{});var Mit=s(xce);vAo=r(Mit,"xlm-prophetnet"),Mit.forEach(t),FAo=r(k8e," \u2014 "),hD=n(k8e,"A",{href:!0});var Eit=s(hD);TAo=r(Eit,"XLMProphetNetForCausalLM"),Eit.forEach(t),MAo=r(k8e," (XLMProphetNet model)"),k8e.forEach(t),EAo=i(W),I4=n(W,"LI",{});var S8e=s(I4);$ce=n(S8e,"STRONG",{});var Cit=s($ce);CAo=r(Cit,"xlm-roberta"),Cit.forEach(t),wAo=r(S8e," \u2014 "),pD=n(S8e,"A",{href:!0});var wit=s(pD);AAo=r(wit,"XLMRobertaForCausalLM"),wit.forEach(t),yAo=r(S8e," (XLM-RoBERTa model)"),S8e.forEach(t),LAo=i(W),N4=n(W,"LI",{});var R8e=s(N4);kce=n(R8e,"STRONG",{});var Ait=s(kce);xAo=r(Ait,"xlm-roberta-xl"),Ait.forEach(t),$Ao=r(R8e," \u2014 "),_D=n(R8e,"A",{href:!0});var yit=s(_D);kAo=r(yit,"XLMRobertaXLForCausalLM"),yit.forEach(t),SAo=r(R8e," (XLM-RoBERTa-XL model)"),R8e.forEach(t),RAo=i(W),q4=n(W,"LI",{});var P8e=s(q4);Sce=n(P8e,"STRONG",{});var Lit=s(Sce);PAo=r(Lit,"xlnet"),Lit.forEach(t),BAo=r(P8e," \u2014 "),uD=n(P8e,"A",{href:!0});var xit=s(uD);IAo=r(xit,"XLNetLMHeadModel"),xit.forEach(t),NAo=r(P8e," (XLNet model)"),P8e.forEach(t),W.forEach(t),qAo=i(ta),j4=n(ta,"P",{});var B8e=s(j4);jAo=r(B8e,"The model is set in evaluation mode by default using "),Rce=n(B8e,"CODE",{});var $it=s(Rce);DAo=r($it,"model.eval()"),$it.forEach(t),GAo=r(B8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(B8e,"CODE",{});var kit=s(Pce);OAo=r(kit,"model.train()"),kit.forEach(t),B8e.forEach(t),VAo=i(ta),T(D4.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Zqe=i(f),Pi=n(f,"H2",{class:!0});var tGe=s(Pi);G4=n(tGe,"A",{id:!0,class:!0,href:!0});var Sit=s(G4);Bce=n(Sit,"SPAN",{});var Rit=s(Bce);T(Ey.$$.fragment,Rit),Rit.forEach(t),Sit.forEach(t),XAo=i(tGe),Ice=n(tGe,"SPAN",{});var Pit=s(Ice);zAo=r(Pit,"AutoModelForMaskedLM"),Pit.forEach(t),tGe.forEach(t),eje=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(Cy.$$.fragment,Xs),WAo=i(Xs),Bi=n(Xs,"P",{});var jZ=s(Bi);QAo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bD=n(jZ,"A",{href:!0});var Bit=s(bD);HAo=r(Bit,"from_pretrained()"),Bit.forEach(t),UAo=r(jZ," class method or the "),vD=n(jZ,"A",{href:!0});var Iit=s(vD);JAo=r(Iit,"from_config()"),Iit.forEach(t),YAo=r(jZ,` class
method.`),jZ.forEach(t),KAo=i(Xs),wy=n(Xs,"P",{});var aGe=s(wy);ZAo=r(aGe,"This class cannot be instantiated directly using "),Nce=n(aGe,"CODE",{});var Nit=s(Nce);eyo=r(Nit,"__init__()"),Nit.forEach(t),oyo=r(aGe," (throws an error)."),aGe.forEach(t),ryo=i(Xs),st=n(Xs,"DIV",{class:!0});var Ww=s(st);T(Ay.$$.fragment,Ww),tyo=i(Ww),qce=n(Ww,"P",{});var qit=s(qce);ayo=r(qit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qit.forEach(t),nyo=i(Ww),Ii=n(Ww,"P",{});var DZ=s(Ii);syo=r(DZ,`Note:
Loading a model from its configuration file does `),jce=n(DZ,"STRONG",{});var jit=s(jce);lyo=r(jit,"not"),jit.forEach(t),iyo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(DZ,"A",{href:!0});var Dit=s(FD);dyo=r(Dit,"from_pretrained()"),Dit.forEach(t),cyo=r(DZ," to load the model weights."),DZ.forEach(t),fyo=i(Ww),T(O4.$$.fragment,Ww),Ww.forEach(t),myo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(yy.$$.fragment,aa),gyo=i(aa),Dce=n(aa,"P",{});var Git=s(Dce);hyo=r(Git,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Git.forEach(t),pyo=i(aa),ka=n(aa,"P",{});var Qw=s(ka);_yo=r(Qw,"The model class to instantiate is selected based on the "),Gce=n(Qw,"CODE",{});var Oit=s(Gce);uyo=r(Oit,"model_type"),Oit.forEach(t),byo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Oce=n(Qw,"CODE",{});var Vit=s(Oce);vyo=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),Fyo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(Qw,"CODE",{});var Xit=s(Vce);Tyo=r(Xit,"pretrained_model_name_or_path"),Xit.forEach(t),Myo=r(Qw,":"),Qw.forEach(t),Eyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);V4=n(U,"LI",{});var I8e=s(V4);Xce=n(I8e,"STRONG",{});var zit=s(Xce);Cyo=r(zit,"albert"),zit.forEach(t),wyo=r(I8e," \u2014 "),TD=n(I8e,"A",{href:!0});var Wit=s(TD);Ayo=r(Wit,"AlbertForMaskedLM"),Wit.forEach(t),yyo=r(I8e," (ALBERT model)"),I8e.forEach(t),Lyo=i(U),X4=n(U,"LI",{});var N8e=s(X4);zce=n(N8e,"STRONG",{});var Qit=s(zce);xyo=r(Qit,"bart"),Qit.forEach(t),$yo=r(N8e," \u2014 "),MD=n(N8e,"A",{href:!0});var Hit=s(MD);kyo=r(Hit,"BartForConditionalGeneration"),Hit.forEach(t),Syo=r(N8e," (BART model)"),N8e.forEach(t),Ryo=i(U),z4=n(U,"LI",{});var q8e=s(z4);Wce=n(q8e,"STRONG",{});var Uit=s(Wce);Pyo=r(Uit,"bert"),Uit.forEach(t),Byo=r(q8e," \u2014 "),ED=n(q8e,"A",{href:!0});var Jit=s(ED);Iyo=r(Jit,"BertForMaskedLM"),Jit.forEach(t),Nyo=r(q8e," (BERT model)"),q8e.forEach(t),qyo=i(U),W4=n(U,"LI",{});var j8e=s(W4);Qce=n(j8e,"STRONG",{});var Yit=s(Qce);jyo=r(Yit,"big_bird"),Yit.forEach(t),Dyo=r(j8e," \u2014 "),CD=n(j8e,"A",{href:!0});var Kit=s(CD);Gyo=r(Kit,"BigBirdForMaskedLM"),Kit.forEach(t),Oyo=r(j8e," (BigBird model)"),j8e.forEach(t),Vyo=i(U),Q4=n(U,"LI",{});var D8e=s(Q4);Hce=n(D8e,"STRONG",{});var Zit=s(Hce);Xyo=r(Zit,"camembert"),Zit.forEach(t),zyo=r(D8e," \u2014 "),wD=n(D8e,"A",{href:!0});var edt=s(wD);Wyo=r(edt,"CamembertForMaskedLM"),edt.forEach(t),Qyo=r(D8e," (CamemBERT model)"),D8e.forEach(t),Hyo=i(U),H4=n(U,"LI",{});var G8e=s(H4);Uce=n(G8e,"STRONG",{});var odt=s(Uce);Uyo=r(odt,"convbert"),odt.forEach(t),Jyo=r(G8e," \u2014 "),AD=n(G8e,"A",{href:!0});var rdt=s(AD);Yyo=r(rdt,"ConvBertForMaskedLM"),rdt.forEach(t),Kyo=r(G8e," (ConvBERT model)"),G8e.forEach(t),Zyo=i(U),U4=n(U,"LI",{});var O8e=s(U4);Jce=n(O8e,"STRONG",{});var tdt=s(Jce);eLo=r(tdt,"data2vec-text"),tdt.forEach(t),oLo=r(O8e," \u2014 "),yD=n(O8e,"A",{href:!0});var adt=s(yD);rLo=r(adt,"Data2VecTextForMaskedLM"),adt.forEach(t),tLo=r(O8e," (Data2VecText model)"),O8e.forEach(t),aLo=i(U),J4=n(U,"LI",{});var V8e=s(J4);Yce=n(V8e,"STRONG",{});var ndt=s(Yce);nLo=r(ndt,"deberta"),ndt.forEach(t),sLo=r(V8e," \u2014 "),LD=n(V8e,"A",{href:!0});var sdt=s(LD);lLo=r(sdt,"DebertaForMaskedLM"),sdt.forEach(t),iLo=r(V8e," (DeBERTa model)"),V8e.forEach(t),dLo=i(U),Y4=n(U,"LI",{});var X8e=s(Y4);Kce=n(X8e,"STRONG",{});var ldt=s(Kce);cLo=r(ldt,"deberta-v2"),ldt.forEach(t),fLo=r(X8e," \u2014 "),xD=n(X8e,"A",{href:!0});var idt=s(xD);mLo=r(idt,"DebertaV2ForMaskedLM"),idt.forEach(t),gLo=r(X8e," (DeBERTa-v2 model)"),X8e.forEach(t),hLo=i(U),K4=n(U,"LI",{});var z8e=s(K4);Zce=n(z8e,"STRONG",{});var ddt=s(Zce);pLo=r(ddt,"distilbert"),ddt.forEach(t),_Lo=r(z8e," \u2014 "),$D=n(z8e,"A",{href:!0});var cdt=s($D);uLo=r(cdt,"DistilBertForMaskedLM"),cdt.forEach(t),bLo=r(z8e," (DistilBERT model)"),z8e.forEach(t),vLo=i(U),Z4=n(U,"LI",{});var W8e=s(Z4);efe=n(W8e,"STRONG",{});var fdt=s(efe);FLo=r(fdt,"electra"),fdt.forEach(t),TLo=r(W8e," \u2014 "),kD=n(W8e,"A",{href:!0});var mdt=s(kD);MLo=r(mdt,"ElectraForMaskedLM"),mdt.forEach(t),ELo=r(W8e," (ELECTRA model)"),W8e.forEach(t),CLo=i(U),e1=n(U,"LI",{});var Q8e=s(e1);ofe=n(Q8e,"STRONG",{});var gdt=s(ofe);wLo=r(gdt,"flaubert"),gdt.forEach(t),ALo=r(Q8e," \u2014 "),SD=n(Q8e,"A",{href:!0});var hdt=s(SD);yLo=r(hdt,"FlaubertWithLMHeadModel"),hdt.forEach(t),LLo=r(Q8e," (FlauBERT model)"),Q8e.forEach(t),xLo=i(U),o1=n(U,"LI",{});var H8e=s(o1);rfe=n(H8e,"STRONG",{});var pdt=s(rfe);$Lo=r(pdt,"fnet"),pdt.forEach(t),kLo=r(H8e," \u2014 "),RD=n(H8e,"A",{href:!0});var _dt=s(RD);SLo=r(_dt,"FNetForMaskedLM"),_dt.forEach(t),RLo=r(H8e," (FNet model)"),H8e.forEach(t),PLo=i(U),r1=n(U,"LI",{});var U8e=s(r1);tfe=n(U8e,"STRONG",{});var udt=s(tfe);BLo=r(udt,"funnel"),udt.forEach(t),ILo=r(U8e," \u2014 "),PD=n(U8e,"A",{href:!0});var bdt=s(PD);NLo=r(bdt,"FunnelForMaskedLM"),bdt.forEach(t),qLo=r(U8e," (Funnel Transformer model)"),U8e.forEach(t),jLo=i(U),t1=n(U,"LI",{});var J8e=s(t1);afe=n(J8e,"STRONG",{});var vdt=s(afe);DLo=r(vdt,"ibert"),vdt.forEach(t),GLo=r(J8e," \u2014 "),BD=n(J8e,"A",{href:!0});var Fdt=s(BD);OLo=r(Fdt,"IBertForMaskedLM"),Fdt.forEach(t),VLo=r(J8e," (I-BERT model)"),J8e.forEach(t),XLo=i(U),a1=n(U,"LI",{});var Y8e=s(a1);nfe=n(Y8e,"STRONG",{});var Tdt=s(nfe);zLo=r(Tdt,"layoutlm"),Tdt.forEach(t),WLo=r(Y8e," \u2014 "),ID=n(Y8e,"A",{href:!0});var Mdt=s(ID);QLo=r(Mdt,"LayoutLMForMaskedLM"),Mdt.forEach(t),HLo=r(Y8e," (LayoutLM model)"),Y8e.forEach(t),ULo=i(U),n1=n(U,"LI",{});var K8e=s(n1);sfe=n(K8e,"STRONG",{});var Edt=s(sfe);JLo=r(Edt,"longformer"),Edt.forEach(t),YLo=r(K8e," \u2014 "),ND=n(K8e,"A",{href:!0});var Cdt=s(ND);KLo=r(Cdt,"LongformerForMaskedLM"),Cdt.forEach(t),ZLo=r(K8e," (Longformer model)"),K8e.forEach(t),e8o=i(U),s1=n(U,"LI",{});var Z8e=s(s1);lfe=n(Z8e,"STRONG",{});var wdt=s(lfe);o8o=r(wdt,"mbart"),wdt.forEach(t),r8o=r(Z8e," \u2014 "),qD=n(Z8e,"A",{href:!0});var Adt=s(qD);t8o=r(Adt,"MBartForConditionalGeneration"),Adt.forEach(t),a8o=r(Z8e," (mBART model)"),Z8e.forEach(t),n8o=i(U),l1=n(U,"LI",{});var e9e=s(l1);ife=n(e9e,"STRONG",{});var ydt=s(ife);s8o=r(ydt,"megatron-bert"),ydt.forEach(t),l8o=r(e9e," \u2014 "),jD=n(e9e,"A",{href:!0});var Ldt=s(jD);i8o=r(Ldt,"MegatronBertForMaskedLM"),Ldt.forEach(t),d8o=r(e9e," (MegatronBert model)"),e9e.forEach(t),c8o=i(U),i1=n(U,"LI",{});var o9e=s(i1);dfe=n(o9e,"STRONG",{});var xdt=s(dfe);f8o=r(xdt,"mobilebert"),xdt.forEach(t),m8o=r(o9e," \u2014 "),DD=n(o9e,"A",{href:!0});var $dt=s(DD);g8o=r($dt,"MobileBertForMaskedLM"),$dt.forEach(t),h8o=r(o9e," (MobileBERT model)"),o9e.forEach(t),p8o=i(U),d1=n(U,"LI",{});var r9e=s(d1);cfe=n(r9e,"STRONG",{});var kdt=s(cfe);_8o=r(kdt,"mpnet"),kdt.forEach(t),u8o=r(r9e," \u2014 "),GD=n(r9e,"A",{href:!0});var Sdt=s(GD);b8o=r(Sdt,"MPNetForMaskedLM"),Sdt.forEach(t),v8o=r(r9e," (MPNet model)"),r9e.forEach(t),F8o=i(U),c1=n(U,"LI",{});var t9e=s(c1);ffe=n(t9e,"STRONG",{});var Rdt=s(ffe);T8o=r(Rdt,"nystromformer"),Rdt.forEach(t),M8o=r(t9e," \u2014 "),OD=n(t9e,"A",{href:!0});var Pdt=s(OD);E8o=r(Pdt,"NystromformerForMaskedLM"),Pdt.forEach(t),C8o=r(t9e," (Nystromformer model)"),t9e.forEach(t),w8o=i(U),f1=n(U,"LI",{});var a9e=s(f1);mfe=n(a9e,"STRONG",{});var Bdt=s(mfe);A8o=r(Bdt,"perceiver"),Bdt.forEach(t),y8o=r(a9e," \u2014 "),VD=n(a9e,"A",{href:!0});var Idt=s(VD);L8o=r(Idt,"PerceiverForMaskedLM"),Idt.forEach(t),x8o=r(a9e," (Perceiver model)"),a9e.forEach(t),$8o=i(U),m1=n(U,"LI",{});var n9e=s(m1);gfe=n(n9e,"STRONG",{});var Ndt=s(gfe);k8o=r(Ndt,"qdqbert"),Ndt.forEach(t),S8o=r(n9e," \u2014 "),XD=n(n9e,"A",{href:!0});var qdt=s(XD);R8o=r(qdt,"QDQBertForMaskedLM"),qdt.forEach(t),P8o=r(n9e," (QDQBert model)"),n9e.forEach(t),B8o=i(U),g1=n(U,"LI",{});var s9e=s(g1);hfe=n(s9e,"STRONG",{});var jdt=s(hfe);I8o=r(jdt,"reformer"),jdt.forEach(t),N8o=r(s9e," \u2014 "),zD=n(s9e,"A",{href:!0});var Ddt=s(zD);q8o=r(Ddt,"ReformerForMaskedLM"),Ddt.forEach(t),j8o=r(s9e," (Reformer model)"),s9e.forEach(t),D8o=i(U),h1=n(U,"LI",{});var l9e=s(h1);pfe=n(l9e,"STRONG",{});var Gdt=s(pfe);G8o=r(Gdt,"rembert"),Gdt.forEach(t),O8o=r(l9e," \u2014 "),WD=n(l9e,"A",{href:!0});var Odt=s(WD);V8o=r(Odt,"RemBertForMaskedLM"),Odt.forEach(t),X8o=r(l9e," (RemBERT model)"),l9e.forEach(t),z8o=i(U),p1=n(U,"LI",{});var i9e=s(p1);_fe=n(i9e,"STRONG",{});var Vdt=s(_fe);W8o=r(Vdt,"roberta"),Vdt.forEach(t),Q8o=r(i9e," \u2014 "),QD=n(i9e,"A",{href:!0});var Xdt=s(QD);H8o=r(Xdt,"RobertaForMaskedLM"),Xdt.forEach(t),U8o=r(i9e," (RoBERTa model)"),i9e.forEach(t),J8o=i(U),_1=n(U,"LI",{});var d9e=s(_1);ufe=n(d9e,"STRONG",{});var zdt=s(ufe);Y8o=r(zdt,"roformer"),zdt.forEach(t),K8o=r(d9e," \u2014 "),HD=n(d9e,"A",{href:!0});var Wdt=s(HD);Z8o=r(Wdt,"RoFormerForMaskedLM"),Wdt.forEach(t),e9o=r(d9e," (RoFormer model)"),d9e.forEach(t),o9o=i(U),u1=n(U,"LI",{});var c9e=s(u1);bfe=n(c9e,"STRONG",{});var Qdt=s(bfe);r9o=r(Qdt,"squeezebert"),Qdt.forEach(t),t9o=r(c9e," \u2014 "),UD=n(c9e,"A",{href:!0});var Hdt=s(UD);a9o=r(Hdt,"SqueezeBertForMaskedLM"),Hdt.forEach(t),n9o=r(c9e," (SqueezeBERT model)"),c9e.forEach(t),s9o=i(U),b1=n(U,"LI",{});var f9e=s(b1);vfe=n(f9e,"STRONG",{});var Udt=s(vfe);l9o=r(Udt,"tapas"),Udt.forEach(t),i9o=r(f9e," \u2014 "),JD=n(f9e,"A",{href:!0});var Jdt=s(JD);d9o=r(Jdt,"TapasForMaskedLM"),Jdt.forEach(t),c9o=r(f9e," (TAPAS model)"),f9e.forEach(t),f9o=i(U),v1=n(U,"LI",{});var m9e=s(v1);Ffe=n(m9e,"STRONG",{});var Ydt=s(Ffe);m9o=r(Ydt,"wav2vec2"),Ydt.forEach(t),g9o=r(m9e," \u2014 "),Tfe=n(m9e,"CODE",{});var Kdt=s(Tfe);h9o=r(Kdt,"Wav2Vec2ForMaskedLM"),Kdt.forEach(t),p9o=r(m9e," (Wav2Vec2 model)"),m9e.forEach(t),_9o=i(U),F1=n(U,"LI",{});var g9e=s(F1);Mfe=n(g9e,"STRONG",{});var Zdt=s(Mfe);u9o=r(Zdt,"xlm"),Zdt.forEach(t),b9o=r(g9e," \u2014 "),YD=n(g9e,"A",{href:!0});var ect=s(YD);v9o=r(ect,"XLMWithLMHeadModel"),ect.forEach(t),F9o=r(g9e," (XLM model)"),g9e.forEach(t),T9o=i(U),T1=n(U,"LI",{});var h9e=s(T1);Efe=n(h9e,"STRONG",{});var oct=s(Efe);M9o=r(oct,"xlm-roberta"),oct.forEach(t),E9o=r(h9e," \u2014 "),KD=n(h9e,"A",{href:!0});var rct=s(KD);C9o=r(rct,"XLMRobertaForMaskedLM"),rct.forEach(t),w9o=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),A9o=i(U),M1=n(U,"LI",{});var p9e=s(M1);Cfe=n(p9e,"STRONG",{});var tct=s(Cfe);y9o=r(tct,"xlm-roberta-xl"),tct.forEach(t),L9o=r(p9e," \u2014 "),ZD=n(p9e,"A",{href:!0});var act=s(ZD);x9o=r(act,"XLMRobertaXLForMaskedLM"),act.forEach(t),$9o=r(p9e," (XLM-RoBERTa-XL model)"),p9e.forEach(t),k9o=i(U),E1=n(U,"LI",{});var _9e=s(E1);wfe=n(_9e,"STRONG",{});var nct=s(wfe);S9o=r(nct,"yoso"),nct.forEach(t),R9o=r(_9e," \u2014 "),eG=n(_9e,"A",{href:!0});var sct=s(eG);P9o=r(sct,"YosoForMaskedLM"),sct.forEach(t),B9o=r(_9e," (YOSO model)"),_9e.forEach(t),U.forEach(t),I9o=i(aa),C1=n(aa,"P",{});var u9e=s(C1);N9o=r(u9e,"The model is set in evaluation mode by default using "),Afe=n(u9e,"CODE",{});var lct=s(Afe);q9o=r(lct,"model.eval()"),lct.forEach(t),j9o=r(u9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(u9e,"CODE",{});var ict=s(yfe);D9o=r(ict,"model.train()"),ict.forEach(t),u9e.forEach(t),G9o=i(aa),T(w1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),oje=i(f),Ni=n(f,"H2",{class:!0});var nGe=s(Ni);A1=n(nGe,"A",{id:!0,class:!0,href:!0});var dct=s(A1);Lfe=n(dct,"SPAN",{});var cct=s(Lfe);T(Ly.$$.fragment,cct),cct.forEach(t),dct.forEach(t),O9o=i(nGe),xfe=n(nGe,"SPAN",{});var fct=s(xfe);V9o=r(fct,"AutoModelForSeq2SeqLM"),fct.forEach(t),nGe.forEach(t),rje=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(xy.$$.fragment,zs),X9o=i(zs),qi=n(zs,"P",{});var GZ=s(qi);z9o=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=n(GZ,"A",{href:!0});var mct=s(oG);W9o=r(mct,"from_pretrained()"),mct.forEach(t),Q9o=r(GZ," class method or the "),rG=n(GZ,"A",{href:!0});var gct=s(rG);H9o=r(gct,"from_config()"),gct.forEach(t),U9o=r(GZ,` class
method.`),GZ.forEach(t),J9o=i(zs),$y=n(zs,"P",{});var sGe=s($y);Y9o=r(sGe,"This class cannot be instantiated directly using "),$fe=n(sGe,"CODE",{});var hct=s($fe);K9o=r(hct,"__init__()"),hct.forEach(t),Z9o=r(sGe," (throws an error)."),sGe.forEach(t),exo=i(zs),lt=n(zs,"DIV",{class:!0});var Hw=s(lt);T(ky.$$.fragment,Hw),oxo=i(Hw),kfe=n(Hw,"P",{});var pct=s(kfe);rxo=r(pct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pct.forEach(t),txo=i(Hw),ji=n(Hw,"P",{});var OZ=s(ji);axo=r(OZ,`Note:
Loading a model from its configuration file does `),Sfe=n(OZ,"STRONG",{});var _ct=s(Sfe);nxo=r(_ct,"not"),_ct.forEach(t),sxo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(OZ,"A",{href:!0});var uct=s(tG);lxo=r(uct,"from_pretrained()"),uct.forEach(t),ixo=r(OZ," to load the model weights."),OZ.forEach(t),dxo=i(Hw),T(y1.$$.fragment,Hw),Hw.forEach(t),cxo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Sy.$$.fragment,na),fxo=i(na),Rfe=n(na,"P",{});var bct=s(Rfe);mxo=r(bct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bct.forEach(t),gxo=i(na),Sa=n(na,"P",{});var Uw=s(Sa);hxo=r(Uw,"The model class to instantiate is selected based on the "),Pfe=n(Uw,"CODE",{});var vct=s(Pfe);pxo=r(vct,"model_type"),vct.forEach(t),_xo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(Uw,"CODE",{});var Fct=s(Bfe);uxo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),bxo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(Uw,"CODE",{});var Tct=s(Ife);vxo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),Fxo=r(Uw,":"),Uw.forEach(t),Txo=i(na),_e=n(na,"UL",{});var ve=s(_e);L1=n(ve,"LI",{});var b9e=s(L1);Nfe=n(b9e,"STRONG",{});var Mct=s(Nfe);Mxo=r(Mct,"bart"),Mct.forEach(t),Exo=r(b9e," \u2014 "),aG=n(b9e,"A",{href:!0});var Ect=s(aG);Cxo=r(Ect,"BartForConditionalGeneration"),Ect.forEach(t),wxo=r(b9e," (BART model)"),b9e.forEach(t),Axo=i(ve),x1=n(ve,"LI",{});var v9e=s(x1);qfe=n(v9e,"STRONG",{});var Cct=s(qfe);yxo=r(Cct,"bigbird_pegasus"),Cct.forEach(t),Lxo=r(v9e," \u2014 "),nG=n(v9e,"A",{href:!0});var wct=s(nG);xxo=r(wct,"BigBirdPegasusForConditionalGeneration"),wct.forEach(t),$xo=r(v9e," (BigBirdPegasus model)"),v9e.forEach(t),kxo=i(ve),$1=n(ve,"LI",{});var F9e=s($1);jfe=n(F9e,"STRONG",{});var Act=s(jfe);Sxo=r(Act,"blenderbot"),Act.forEach(t),Rxo=r(F9e," \u2014 "),sG=n(F9e,"A",{href:!0});var yct=s(sG);Pxo=r(yct,"BlenderbotForConditionalGeneration"),yct.forEach(t),Bxo=r(F9e," (Blenderbot model)"),F9e.forEach(t),Ixo=i(ve),k1=n(ve,"LI",{});var T9e=s(k1);Dfe=n(T9e,"STRONG",{});var Lct=s(Dfe);Nxo=r(Lct,"blenderbot-small"),Lct.forEach(t),qxo=r(T9e," \u2014 "),lG=n(T9e,"A",{href:!0});var xct=s(lG);jxo=r(xct,"BlenderbotSmallForConditionalGeneration"),xct.forEach(t),Dxo=r(T9e," (BlenderbotSmall model)"),T9e.forEach(t),Gxo=i(ve),S1=n(ve,"LI",{});var M9e=s(S1);Gfe=n(M9e,"STRONG",{});var $ct=s(Gfe);Oxo=r($ct,"encoder-decoder"),$ct.forEach(t),Vxo=r(M9e," \u2014 "),iG=n(M9e,"A",{href:!0});var kct=s(iG);Xxo=r(kct,"EncoderDecoderModel"),kct.forEach(t),zxo=r(M9e," (Encoder decoder model)"),M9e.forEach(t),Wxo=i(ve),R1=n(ve,"LI",{});var E9e=s(R1);Ofe=n(E9e,"STRONG",{});var Sct=s(Ofe);Qxo=r(Sct,"fsmt"),Sct.forEach(t),Hxo=r(E9e," \u2014 "),dG=n(E9e,"A",{href:!0});var Rct=s(dG);Uxo=r(Rct,"FSMTForConditionalGeneration"),Rct.forEach(t),Jxo=r(E9e," (FairSeq Machine-Translation model)"),E9e.forEach(t),Yxo=i(ve),P1=n(ve,"LI",{});var C9e=s(P1);Vfe=n(C9e,"STRONG",{});var Pct=s(Vfe);Kxo=r(Pct,"led"),Pct.forEach(t),Zxo=r(C9e," \u2014 "),cG=n(C9e,"A",{href:!0});var Bct=s(cG);e$o=r(Bct,"LEDForConditionalGeneration"),Bct.forEach(t),o$o=r(C9e," (LED model)"),C9e.forEach(t),r$o=i(ve),B1=n(ve,"LI",{});var w9e=s(B1);Xfe=n(w9e,"STRONG",{});var Ict=s(Xfe);t$o=r(Ict,"m2m_100"),Ict.forEach(t),a$o=r(w9e," \u2014 "),fG=n(w9e,"A",{href:!0});var Nct=s(fG);n$o=r(Nct,"M2M100ForConditionalGeneration"),Nct.forEach(t),s$o=r(w9e," (M2M100 model)"),w9e.forEach(t),l$o=i(ve),I1=n(ve,"LI",{});var A9e=s(I1);zfe=n(A9e,"STRONG",{});var qct=s(zfe);i$o=r(qct,"marian"),qct.forEach(t),d$o=r(A9e," \u2014 "),mG=n(A9e,"A",{href:!0});var jct=s(mG);c$o=r(jct,"MarianMTModel"),jct.forEach(t),f$o=r(A9e," (Marian model)"),A9e.forEach(t),m$o=i(ve),N1=n(ve,"LI",{});var y9e=s(N1);Wfe=n(y9e,"STRONG",{});var Dct=s(Wfe);g$o=r(Dct,"mbart"),Dct.forEach(t),h$o=r(y9e," \u2014 "),gG=n(y9e,"A",{href:!0});var Gct=s(gG);p$o=r(Gct,"MBartForConditionalGeneration"),Gct.forEach(t),_$o=r(y9e," (mBART model)"),y9e.forEach(t),u$o=i(ve),q1=n(ve,"LI",{});var L9e=s(q1);Qfe=n(L9e,"STRONG",{});var Oct=s(Qfe);b$o=r(Oct,"mt5"),Oct.forEach(t),v$o=r(L9e," \u2014 "),hG=n(L9e,"A",{href:!0});var Vct=s(hG);F$o=r(Vct,"MT5ForConditionalGeneration"),Vct.forEach(t),T$o=r(L9e," (mT5 model)"),L9e.forEach(t),M$o=i(ve),j1=n(ve,"LI",{});var x9e=s(j1);Hfe=n(x9e,"STRONG",{});var Xct=s(Hfe);E$o=r(Xct,"pegasus"),Xct.forEach(t),C$o=r(x9e," \u2014 "),pG=n(x9e,"A",{href:!0});var zct=s(pG);w$o=r(zct,"PegasusForConditionalGeneration"),zct.forEach(t),A$o=r(x9e," (Pegasus model)"),x9e.forEach(t),y$o=i(ve),D1=n(ve,"LI",{});var $9e=s(D1);Ufe=n($9e,"STRONG",{});var Wct=s(Ufe);L$o=r(Wct,"plbart"),Wct.forEach(t),x$o=r($9e," \u2014 "),_G=n($9e,"A",{href:!0});var Qct=s(_G);$$o=r(Qct,"PLBartForConditionalGeneration"),Qct.forEach(t),k$o=r($9e," (PLBart model)"),$9e.forEach(t),S$o=i(ve),G1=n(ve,"LI",{});var k9e=s(G1);Jfe=n(k9e,"STRONG",{});var Hct=s(Jfe);R$o=r(Hct,"prophetnet"),Hct.forEach(t),P$o=r(k9e," \u2014 "),uG=n(k9e,"A",{href:!0});var Uct=s(uG);B$o=r(Uct,"ProphetNetForConditionalGeneration"),Uct.forEach(t),I$o=r(k9e," (ProphetNet model)"),k9e.forEach(t),N$o=i(ve),O1=n(ve,"LI",{});var S9e=s(O1);Yfe=n(S9e,"STRONG",{});var Jct=s(Yfe);q$o=r(Jct,"t5"),Jct.forEach(t),j$o=r(S9e," \u2014 "),bG=n(S9e,"A",{href:!0});var Yct=s(bG);D$o=r(Yct,"T5ForConditionalGeneration"),Yct.forEach(t),G$o=r(S9e," (T5 model)"),S9e.forEach(t),O$o=i(ve),V1=n(ve,"LI",{});var R9e=s(V1);Kfe=n(R9e,"STRONG",{});var Kct=s(Kfe);V$o=r(Kct,"xlm-prophetnet"),Kct.forEach(t),X$o=r(R9e," \u2014 "),vG=n(R9e,"A",{href:!0});var Zct=s(vG);z$o=r(Zct,"XLMProphetNetForConditionalGeneration"),Zct.forEach(t),W$o=r(R9e," (XLMProphetNet model)"),R9e.forEach(t),ve.forEach(t),Q$o=i(na),X1=n(na,"P",{});var P9e=s(X1);H$o=r(P9e,"The model is set in evaluation mode by default using "),Zfe=n(P9e,"CODE",{});var eft=s(Zfe);U$o=r(eft,"model.eval()"),eft.forEach(t),J$o=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(P9e,"CODE",{});var oft=s(eme);Y$o=r(oft,"model.train()"),oft.forEach(t),P9e.forEach(t),K$o=i(na),T(z1.$$.fragment,na),na.forEach(t),zs.forEach(t),tje=i(f),Di=n(f,"H2",{class:!0});var lGe=s(Di);W1=n(lGe,"A",{id:!0,class:!0,href:!0});var rft=s(W1);ome=n(rft,"SPAN",{});var tft=s(ome);T(Ry.$$.fragment,tft),tft.forEach(t),rft.forEach(t),Z$o=i(lGe),rme=n(lGe,"SPAN",{});var aft=s(rme);eko=r(aft,"AutoModelForSequenceClassification"),aft.forEach(t),lGe.forEach(t),aje=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(Py.$$.fragment,Ws),oko=i(Ws),Gi=n(Ws,"P",{});var VZ=s(Gi);rko=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=n(VZ,"A",{href:!0});var nft=s(FG);tko=r(nft,"from_pretrained()"),nft.forEach(t),ako=r(VZ," class method or the "),TG=n(VZ,"A",{href:!0});var sft=s(TG);nko=r(sft,"from_config()"),sft.forEach(t),sko=r(VZ,` class
method.`),VZ.forEach(t),lko=i(Ws),By=n(Ws,"P",{});var iGe=s(By);iko=r(iGe,"This class cannot be instantiated directly using "),tme=n(iGe,"CODE",{});var lft=s(tme);dko=r(lft,"__init__()"),lft.forEach(t),cko=r(iGe," (throws an error)."),iGe.forEach(t),fko=i(Ws),it=n(Ws,"DIV",{class:!0});var Jw=s(it);T(Iy.$$.fragment,Jw),mko=i(Jw),ame=n(Jw,"P",{});var ift=s(ame);gko=r(ift,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ift.forEach(t),hko=i(Jw),Oi=n(Jw,"P",{});var XZ=s(Oi);pko=r(XZ,`Note:
Loading a model from its configuration file does `),nme=n(XZ,"STRONG",{});var dft=s(nme);_ko=r(dft,"not"),dft.forEach(t),uko=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(XZ,"A",{href:!0});var cft=s(MG);bko=r(cft,"from_pretrained()"),cft.forEach(t),vko=r(XZ," to load the model weights."),XZ.forEach(t),Fko=i(Jw),T(Q1.$$.fragment,Jw),Jw.forEach(t),Tko=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Ny.$$.fragment,sa),Mko=i(sa),sme=n(sa,"P",{});var fft=s(sme);Eko=r(fft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fft.forEach(t),Cko=i(sa),Ra=n(sa,"P",{});var Yw=s(Ra);wko=r(Yw,"The model class to instantiate is selected based on the "),lme=n(Yw,"CODE",{});var mft=s(lme);Ako=r(mft,"model_type"),mft.forEach(t),yko=r(Yw,` property of the config object (either
passed as an argument or loaded from `),ime=n(Yw,"CODE",{});var gft=s(ime);Lko=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),xko=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(Yw,"CODE",{});var hft=s(dme);$ko=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),kko=r(Yw,":"),Yw.forEach(t),Sko=i(sa),N=n(sa,"UL",{});var j=s(N);H1=n(j,"LI",{});var B9e=s(H1);cme=n(B9e,"STRONG",{});var pft=s(cme);Rko=r(pft,"albert"),pft.forEach(t),Pko=r(B9e," \u2014 "),EG=n(B9e,"A",{href:!0});var _ft=s(EG);Bko=r(_ft,"AlbertForSequenceClassification"),_ft.forEach(t),Iko=r(B9e," (ALBERT model)"),B9e.forEach(t),Nko=i(j),U1=n(j,"LI",{});var I9e=s(U1);fme=n(I9e,"STRONG",{});var uft=s(fme);qko=r(uft,"bart"),uft.forEach(t),jko=r(I9e," \u2014 "),CG=n(I9e,"A",{href:!0});var bft=s(CG);Dko=r(bft,"BartForSequenceClassification"),bft.forEach(t),Gko=r(I9e," (BART model)"),I9e.forEach(t),Oko=i(j),J1=n(j,"LI",{});var N9e=s(J1);mme=n(N9e,"STRONG",{});var vft=s(mme);Vko=r(vft,"bert"),vft.forEach(t),Xko=r(N9e," \u2014 "),wG=n(N9e,"A",{href:!0});var Fft=s(wG);zko=r(Fft,"BertForSequenceClassification"),Fft.forEach(t),Wko=r(N9e," (BERT model)"),N9e.forEach(t),Qko=i(j),Y1=n(j,"LI",{});var q9e=s(Y1);gme=n(q9e,"STRONG",{});var Tft=s(gme);Hko=r(Tft,"big_bird"),Tft.forEach(t),Uko=r(q9e," \u2014 "),AG=n(q9e,"A",{href:!0});var Mft=s(AG);Jko=r(Mft,"BigBirdForSequenceClassification"),Mft.forEach(t),Yko=r(q9e," (BigBird model)"),q9e.forEach(t),Kko=i(j),K1=n(j,"LI",{});var j9e=s(K1);hme=n(j9e,"STRONG",{});var Eft=s(hme);Zko=r(Eft,"bigbird_pegasus"),Eft.forEach(t),eSo=r(j9e," \u2014 "),yG=n(j9e,"A",{href:!0});var Cft=s(yG);oSo=r(Cft,"BigBirdPegasusForSequenceClassification"),Cft.forEach(t),rSo=r(j9e," (BigBirdPegasus model)"),j9e.forEach(t),tSo=i(j),Z1=n(j,"LI",{});var D9e=s(Z1);pme=n(D9e,"STRONG",{});var wft=s(pme);aSo=r(wft,"camembert"),wft.forEach(t),nSo=r(D9e," \u2014 "),LG=n(D9e,"A",{href:!0});var Aft=s(LG);sSo=r(Aft,"CamembertForSequenceClassification"),Aft.forEach(t),lSo=r(D9e," (CamemBERT model)"),D9e.forEach(t),iSo=i(j),e7=n(j,"LI",{});var G9e=s(e7);_me=n(G9e,"STRONG",{});var yft=s(_me);dSo=r(yft,"canine"),yft.forEach(t),cSo=r(G9e," \u2014 "),xG=n(G9e,"A",{href:!0});var Lft=s(xG);fSo=r(Lft,"CanineForSequenceClassification"),Lft.forEach(t),mSo=r(G9e," (Canine model)"),G9e.forEach(t),gSo=i(j),o7=n(j,"LI",{});var O9e=s(o7);ume=n(O9e,"STRONG",{});var xft=s(ume);hSo=r(xft,"convbert"),xft.forEach(t),pSo=r(O9e," \u2014 "),$G=n(O9e,"A",{href:!0});var $ft=s($G);_So=r($ft,"ConvBertForSequenceClassification"),$ft.forEach(t),uSo=r(O9e," (ConvBERT model)"),O9e.forEach(t),bSo=i(j),r7=n(j,"LI",{});var V9e=s(r7);bme=n(V9e,"STRONG",{});var kft=s(bme);vSo=r(kft,"ctrl"),kft.forEach(t),FSo=r(V9e," \u2014 "),kG=n(V9e,"A",{href:!0});var Sft=s(kG);TSo=r(Sft,"CTRLForSequenceClassification"),Sft.forEach(t),MSo=r(V9e," (CTRL model)"),V9e.forEach(t),ESo=i(j),t7=n(j,"LI",{});var X9e=s(t7);vme=n(X9e,"STRONG",{});var Rft=s(vme);CSo=r(Rft,"data2vec-text"),Rft.forEach(t),wSo=r(X9e," \u2014 "),SG=n(X9e,"A",{href:!0});var Pft=s(SG);ASo=r(Pft,"Data2VecTextForSequenceClassification"),Pft.forEach(t),ySo=r(X9e," (Data2VecText model)"),X9e.forEach(t),LSo=i(j),a7=n(j,"LI",{});var z9e=s(a7);Fme=n(z9e,"STRONG",{});var Bft=s(Fme);xSo=r(Bft,"deberta"),Bft.forEach(t),$So=r(z9e," \u2014 "),RG=n(z9e,"A",{href:!0});var Ift=s(RG);kSo=r(Ift,"DebertaForSequenceClassification"),Ift.forEach(t),SSo=r(z9e," (DeBERTa model)"),z9e.forEach(t),RSo=i(j),n7=n(j,"LI",{});var W9e=s(n7);Tme=n(W9e,"STRONG",{});var Nft=s(Tme);PSo=r(Nft,"deberta-v2"),Nft.forEach(t),BSo=r(W9e," \u2014 "),PG=n(W9e,"A",{href:!0});var qft=s(PG);ISo=r(qft,"DebertaV2ForSequenceClassification"),qft.forEach(t),NSo=r(W9e," (DeBERTa-v2 model)"),W9e.forEach(t),qSo=i(j),s7=n(j,"LI",{});var Q9e=s(s7);Mme=n(Q9e,"STRONG",{});var jft=s(Mme);jSo=r(jft,"distilbert"),jft.forEach(t),DSo=r(Q9e," \u2014 "),BG=n(Q9e,"A",{href:!0});var Dft=s(BG);GSo=r(Dft,"DistilBertForSequenceClassification"),Dft.forEach(t),OSo=r(Q9e," (DistilBERT model)"),Q9e.forEach(t),VSo=i(j),l7=n(j,"LI",{});var H9e=s(l7);Eme=n(H9e,"STRONG",{});var Gft=s(Eme);XSo=r(Gft,"electra"),Gft.forEach(t),zSo=r(H9e," \u2014 "),IG=n(H9e,"A",{href:!0});var Oft=s(IG);WSo=r(Oft,"ElectraForSequenceClassification"),Oft.forEach(t),QSo=r(H9e," (ELECTRA model)"),H9e.forEach(t),HSo=i(j),i7=n(j,"LI",{});var U9e=s(i7);Cme=n(U9e,"STRONG",{});var Vft=s(Cme);USo=r(Vft,"flaubert"),Vft.forEach(t),JSo=r(U9e," \u2014 "),NG=n(U9e,"A",{href:!0});var Xft=s(NG);YSo=r(Xft,"FlaubertForSequenceClassification"),Xft.forEach(t),KSo=r(U9e," (FlauBERT model)"),U9e.forEach(t),ZSo=i(j),d7=n(j,"LI",{});var J9e=s(d7);wme=n(J9e,"STRONG",{});var zft=s(wme);eRo=r(zft,"fnet"),zft.forEach(t),oRo=r(J9e," \u2014 "),qG=n(J9e,"A",{href:!0});var Wft=s(qG);rRo=r(Wft,"FNetForSequenceClassification"),Wft.forEach(t),tRo=r(J9e," (FNet model)"),J9e.forEach(t),aRo=i(j),c7=n(j,"LI",{});var Y9e=s(c7);Ame=n(Y9e,"STRONG",{});var Qft=s(Ame);nRo=r(Qft,"funnel"),Qft.forEach(t),sRo=r(Y9e," \u2014 "),jG=n(Y9e,"A",{href:!0});var Hft=s(jG);lRo=r(Hft,"FunnelForSequenceClassification"),Hft.forEach(t),iRo=r(Y9e," (Funnel Transformer model)"),Y9e.forEach(t),dRo=i(j),f7=n(j,"LI",{});var K9e=s(f7);yme=n(K9e,"STRONG",{});var Uft=s(yme);cRo=r(Uft,"gpt2"),Uft.forEach(t),fRo=r(K9e," \u2014 "),DG=n(K9e,"A",{href:!0});var Jft=s(DG);mRo=r(Jft,"GPT2ForSequenceClassification"),Jft.forEach(t),gRo=r(K9e," (OpenAI GPT-2 model)"),K9e.forEach(t),hRo=i(j),m7=n(j,"LI",{});var Z9e=s(m7);Lme=n(Z9e,"STRONG",{});var Yft=s(Lme);pRo=r(Yft,"gpt_neo"),Yft.forEach(t),_Ro=r(Z9e," \u2014 "),GG=n(Z9e,"A",{href:!0});var Kft=s(GG);uRo=r(Kft,"GPTNeoForSequenceClassification"),Kft.forEach(t),bRo=r(Z9e," (GPT Neo model)"),Z9e.forEach(t),vRo=i(j),g7=n(j,"LI",{});var exe=s(g7);xme=n(exe,"STRONG",{});var Zft=s(xme);FRo=r(Zft,"gptj"),Zft.forEach(t),TRo=r(exe," \u2014 "),OG=n(exe,"A",{href:!0});var emt=s(OG);MRo=r(emt,"GPTJForSequenceClassification"),emt.forEach(t),ERo=r(exe," (GPT-J model)"),exe.forEach(t),CRo=i(j),h7=n(j,"LI",{});var oxe=s(h7);$me=n(oxe,"STRONG",{});var omt=s($me);wRo=r(omt,"ibert"),omt.forEach(t),ARo=r(oxe," \u2014 "),VG=n(oxe,"A",{href:!0});var rmt=s(VG);yRo=r(rmt,"IBertForSequenceClassification"),rmt.forEach(t),LRo=r(oxe," (I-BERT model)"),oxe.forEach(t),xRo=i(j),p7=n(j,"LI",{});var rxe=s(p7);kme=n(rxe,"STRONG",{});var tmt=s(kme);$Ro=r(tmt,"layoutlm"),tmt.forEach(t),kRo=r(rxe," \u2014 "),XG=n(rxe,"A",{href:!0});var amt=s(XG);SRo=r(amt,"LayoutLMForSequenceClassification"),amt.forEach(t),RRo=r(rxe," (LayoutLM model)"),rxe.forEach(t),PRo=i(j),_7=n(j,"LI",{});var txe=s(_7);Sme=n(txe,"STRONG",{});var nmt=s(Sme);BRo=r(nmt,"layoutlmv2"),nmt.forEach(t),IRo=r(txe," \u2014 "),zG=n(txe,"A",{href:!0});var smt=s(zG);NRo=r(smt,"LayoutLMv2ForSequenceClassification"),smt.forEach(t),qRo=r(txe," (LayoutLMv2 model)"),txe.forEach(t),jRo=i(j),u7=n(j,"LI",{});var axe=s(u7);Rme=n(axe,"STRONG",{});var lmt=s(Rme);DRo=r(lmt,"layoutlmv3"),lmt.forEach(t),GRo=r(axe," \u2014 "),WG=n(axe,"A",{href:!0});var imt=s(WG);ORo=r(imt,"LayoutLMv3ForSequenceClassification"),imt.forEach(t),VRo=r(axe," (LayoutLMv3 model)"),axe.forEach(t),XRo=i(j),b7=n(j,"LI",{});var nxe=s(b7);Pme=n(nxe,"STRONG",{});var dmt=s(Pme);zRo=r(dmt,"led"),dmt.forEach(t),WRo=r(nxe," \u2014 "),QG=n(nxe,"A",{href:!0});var cmt=s(QG);QRo=r(cmt,"LEDForSequenceClassification"),cmt.forEach(t),HRo=r(nxe," (LED model)"),nxe.forEach(t),URo=i(j),v7=n(j,"LI",{});var sxe=s(v7);Bme=n(sxe,"STRONG",{});var fmt=s(Bme);JRo=r(fmt,"longformer"),fmt.forEach(t),YRo=r(sxe," \u2014 "),HG=n(sxe,"A",{href:!0});var mmt=s(HG);KRo=r(mmt,"LongformerForSequenceClassification"),mmt.forEach(t),ZRo=r(sxe," (Longformer model)"),sxe.forEach(t),ePo=i(j),F7=n(j,"LI",{});var lxe=s(F7);Ime=n(lxe,"STRONG",{});var gmt=s(Ime);oPo=r(gmt,"mbart"),gmt.forEach(t),rPo=r(lxe," \u2014 "),UG=n(lxe,"A",{href:!0});var hmt=s(UG);tPo=r(hmt,"MBartForSequenceClassification"),hmt.forEach(t),aPo=r(lxe," (mBART model)"),lxe.forEach(t),nPo=i(j),T7=n(j,"LI",{});var ixe=s(T7);Nme=n(ixe,"STRONG",{});var pmt=s(Nme);sPo=r(pmt,"megatron-bert"),pmt.forEach(t),lPo=r(ixe," \u2014 "),JG=n(ixe,"A",{href:!0});var _mt=s(JG);iPo=r(_mt,"MegatronBertForSequenceClassification"),_mt.forEach(t),dPo=r(ixe," (MegatronBert model)"),ixe.forEach(t),cPo=i(j),M7=n(j,"LI",{});var dxe=s(M7);qme=n(dxe,"STRONG",{});var umt=s(qme);fPo=r(umt,"mobilebert"),umt.forEach(t),mPo=r(dxe," \u2014 "),YG=n(dxe,"A",{href:!0});var bmt=s(YG);gPo=r(bmt,"MobileBertForSequenceClassification"),bmt.forEach(t),hPo=r(dxe," (MobileBERT model)"),dxe.forEach(t),pPo=i(j),E7=n(j,"LI",{});var cxe=s(E7);jme=n(cxe,"STRONG",{});var vmt=s(jme);_Po=r(vmt,"mpnet"),vmt.forEach(t),uPo=r(cxe," \u2014 "),KG=n(cxe,"A",{href:!0});var Fmt=s(KG);bPo=r(Fmt,"MPNetForSequenceClassification"),Fmt.forEach(t),vPo=r(cxe," (MPNet model)"),cxe.forEach(t),FPo=i(j),C7=n(j,"LI",{});var fxe=s(C7);Dme=n(fxe,"STRONG",{});var Tmt=s(Dme);TPo=r(Tmt,"nystromformer"),Tmt.forEach(t),MPo=r(fxe," \u2014 "),ZG=n(fxe,"A",{href:!0});var Mmt=s(ZG);EPo=r(Mmt,"NystromformerForSequenceClassification"),Mmt.forEach(t),CPo=r(fxe," (Nystromformer model)"),fxe.forEach(t),wPo=i(j),w7=n(j,"LI",{});var mxe=s(w7);Gme=n(mxe,"STRONG",{});var Emt=s(Gme);APo=r(Emt,"openai-gpt"),Emt.forEach(t),yPo=r(mxe," \u2014 "),eO=n(mxe,"A",{href:!0});var Cmt=s(eO);LPo=r(Cmt,"OpenAIGPTForSequenceClassification"),Cmt.forEach(t),xPo=r(mxe," (OpenAI GPT model)"),mxe.forEach(t),$Po=i(j),A7=n(j,"LI",{});var gxe=s(A7);Ome=n(gxe,"STRONG",{});var wmt=s(Ome);kPo=r(wmt,"perceiver"),wmt.forEach(t),SPo=r(gxe," \u2014 "),oO=n(gxe,"A",{href:!0});var Amt=s(oO);RPo=r(Amt,"PerceiverForSequenceClassification"),Amt.forEach(t),PPo=r(gxe," (Perceiver model)"),gxe.forEach(t),BPo=i(j),y7=n(j,"LI",{});var hxe=s(y7);Vme=n(hxe,"STRONG",{});var ymt=s(Vme);IPo=r(ymt,"plbart"),ymt.forEach(t),NPo=r(hxe," \u2014 "),rO=n(hxe,"A",{href:!0});var Lmt=s(rO);qPo=r(Lmt,"PLBartForSequenceClassification"),Lmt.forEach(t),jPo=r(hxe," (PLBart model)"),hxe.forEach(t),DPo=i(j),L7=n(j,"LI",{});var pxe=s(L7);Xme=n(pxe,"STRONG",{});var xmt=s(Xme);GPo=r(xmt,"qdqbert"),xmt.forEach(t),OPo=r(pxe," \u2014 "),tO=n(pxe,"A",{href:!0});var $mt=s(tO);VPo=r($mt,"QDQBertForSequenceClassification"),$mt.forEach(t),XPo=r(pxe," (QDQBert model)"),pxe.forEach(t),zPo=i(j),x7=n(j,"LI",{});var _xe=s(x7);zme=n(_xe,"STRONG",{});var kmt=s(zme);WPo=r(kmt,"reformer"),kmt.forEach(t),QPo=r(_xe," \u2014 "),aO=n(_xe,"A",{href:!0});var Smt=s(aO);HPo=r(Smt,"ReformerForSequenceClassification"),Smt.forEach(t),UPo=r(_xe," (Reformer model)"),_xe.forEach(t),JPo=i(j),$7=n(j,"LI",{});var uxe=s($7);Wme=n(uxe,"STRONG",{});var Rmt=s(Wme);YPo=r(Rmt,"rembert"),Rmt.forEach(t),KPo=r(uxe," \u2014 "),nO=n(uxe,"A",{href:!0});var Pmt=s(nO);ZPo=r(Pmt,"RemBertForSequenceClassification"),Pmt.forEach(t),eBo=r(uxe," (RemBERT model)"),uxe.forEach(t),oBo=i(j),k7=n(j,"LI",{});var bxe=s(k7);Qme=n(bxe,"STRONG",{});var Bmt=s(Qme);rBo=r(Bmt,"roberta"),Bmt.forEach(t),tBo=r(bxe," \u2014 "),sO=n(bxe,"A",{href:!0});var Imt=s(sO);aBo=r(Imt,"RobertaForSequenceClassification"),Imt.forEach(t),nBo=r(bxe," (RoBERTa model)"),bxe.forEach(t),sBo=i(j),S7=n(j,"LI",{});var vxe=s(S7);Hme=n(vxe,"STRONG",{});var Nmt=s(Hme);lBo=r(Nmt,"roformer"),Nmt.forEach(t),iBo=r(vxe," \u2014 "),lO=n(vxe,"A",{href:!0});var qmt=s(lO);dBo=r(qmt,"RoFormerForSequenceClassification"),qmt.forEach(t),cBo=r(vxe," (RoFormer model)"),vxe.forEach(t),fBo=i(j),R7=n(j,"LI",{});var Fxe=s(R7);Ume=n(Fxe,"STRONG",{});var jmt=s(Ume);mBo=r(jmt,"squeezebert"),jmt.forEach(t),gBo=r(Fxe," \u2014 "),iO=n(Fxe,"A",{href:!0});var Dmt=s(iO);hBo=r(Dmt,"SqueezeBertForSequenceClassification"),Dmt.forEach(t),pBo=r(Fxe," (SqueezeBERT model)"),Fxe.forEach(t),_Bo=i(j),P7=n(j,"LI",{});var Txe=s(P7);Jme=n(Txe,"STRONG",{});var Gmt=s(Jme);uBo=r(Gmt,"tapas"),Gmt.forEach(t),bBo=r(Txe," \u2014 "),dO=n(Txe,"A",{href:!0});var Omt=s(dO);vBo=r(Omt,"TapasForSequenceClassification"),Omt.forEach(t),FBo=r(Txe," (TAPAS model)"),Txe.forEach(t),TBo=i(j),B7=n(j,"LI",{});var Mxe=s(B7);Yme=n(Mxe,"STRONG",{});var Vmt=s(Yme);MBo=r(Vmt,"transfo-xl"),Vmt.forEach(t),EBo=r(Mxe," \u2014 "),cO=n(Mxe,"A",{href:!0});var Xmt=s(cO);CBo=r(Xmt,"TransfoXLForSequenceClassification"),Xmt.forEach(t),wBo=r(Mxe," (Transformer-XL model)"),Mxe.forEach(t),ABo=i(j),I7=n(j,"LI",{});var Exe=s(I7);Kme=n(Exe,"STRONG",{});var zmt=s(Kme);yBo=r(zmt,"xlm"),zmt.forEach(t),LBo=r(Exe," \u2014 "),fO=n(Exe,"A",{href:!0});var Wmt=s(fO);xBo=r(Wmt,"XLMForSequenceClassification"),Wmt.forEach(t),$Bo=r(Exe," (XLM model)"),Exe.forEach(t),kBo=i(j),N7=n(j,"LI",{});var Cxe=s(N7);Zme=n(Cxe,"STRONG",{});var Qmt=s(Zme);SBo=r(Qmt,"xlm-roberta"),Qmt.forEach(t),RBo=r(Cxe," \u2014 "),mO=n(Cxe,"A",{href:!0});var Hmt=s(mO);PBo=r(Hmt,"XLMRobertaForSequenceClassification"),Hmt.forEach(t),BBo=r(Cxe," (XLM-RoBERTa model)"),Cxe.forEach(t),IBo=i(j),q7=n(j,"LI",{});var wxe=s(q7);ege=n(wxe,"STRONG",{});var Umt=s(ege);NBo=r(Umt,"xlm-roberta-xl"),Umt.forEach(t),qBo=r(wxe," \u2014 "),gO=n(wxe,"A",{href:!0});var Jmt=s(gO);jBo=r(Jmt,"XLMRobertaXLForSequenceClassification"),Jmt.forEach(t),DBo=r(wxe," (XLM-RoBERTa-XL model)"),wxe.forEach(t),GBo=i(j),j7=n(j,"LI",{});var Axe=s(j7);oge=n(Axe,"STRONG",{});var Ymt=s(oge);OBo=r(Ymt,"xlnet"),Ymt.forEach(t),VBo=r(Axe," \u2014 "),hO=n(Axe,"A",{href:!0});var Kmt=s(hO);XBo=r(Kmt,"XLNetForSequenceClassification"),Kmt.forEach(t),zBo=r(Axe," (XLNet model)"),Axe.forEach(t),WBo=i(j),D7=n(j,"LI",{});var yxe=s(D7);rge=n(yxe,"STRONG",{});var Zmt=s(rge);QBo=r(Zmt,"yoso"),Zmt.forEach(t),HBo=r(yxe," \u2014 "),pO=n(yxe,"A",{href:!0});var egt=s(pO);UBo=r(egt,"YosoForSequenceClassification"),egt.forEach(t),JBo=r(yxe," (YOSO model)"),yxe.forEach(t),j.forEach(t),YBo=i(sa),G7=n(sa,"P",{});var Lxe=s(G7);KBo=r(Lxe,"The model is set in evaluation mode by default using "),tge=n(Lxe,"CODE",{});var ogt=s(tge);ZBo=r(ogt,"model.eval()"),ogt.forEach(t),eIo=r(Lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=n(Lxe,"CODE",{});var rgt=s(age);oIo=r(rgt,"model.train()"),rgt.forEach(t),Lxe.forEach(t),rIo=i(sa),T(O7.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),nje=i(f),Vi=n(f,"H2",{class:!0});var dGe=s(Vi);V7=n(dGe,"A",{id:!0,class:!0,href:!0});var tgt=s(V7);nge=n(tgt,"SPAN",{});var agt=s(nge);T(qy.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),tIo=i(dGe),sge=n(dGe,"SPAN",{});var ngt=s(sge);aIo=r(ngt,"AutoModelForMultipleChoice"),ngt.forEach(t),dGe.forEach(t),sje=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(jy.$$.fragment,Qs),nIo=i(Qs),Xi=n(Qs,"P",{});var zZ=s(Xi);sIo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=n(zZ,"A",{href:!0});var sgt=s(_O);lIo=r(sgt,"from_pretrained()"),sgt.forEach(t),iIo=r(zZ," class method or the "),uO=n(zZ,"A",{href:!0});var lgt=s(uO);dIo=r(lgt,"from_config()"),lgt.forEach(t),cIo=r(zZ,` class
method.`),zZ.forEach(t),fIo=i(Qs),Dy=n(Qs,"P",{});var cGe=s(Dy);mIo=r(cGe,"This class cannot be instantiated directly using "),lge=n(cGe,"CODE",{});var igt=s(lge);gIo=r(igt,"__init__()"),igt.forEach(t),hIo=r(cGe," (throws an error)."),cGe.forEach(t),pIo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Kw=s(dt);T(Gy.$$.fragment,Kw),_Io=i(Kw),ige=n(Kw,"P",{});var dgt=s(ige);uIo=r(dgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dgt.forEach(t),bIo=i(Kw),zi=n(Kw,"P",{});var WZ=s(zi);vIo=r(WZ,`Note:
Loading a model from its configuration file does `),dge=n(WZ,"STRONG",{});var cgt=s(dge);FIo=r(cgt,"not"),cgt.forEach(t),TIo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(WZ,"A",{href:!0});var fgt=s(bO);MIo=r(fgt,"from_pretrained()"),fgt.forEach(t),EIo=r(WZ," to load the model weights."),WZ.forEach(t),CIo=i(Kw),T(X7.$$.fragment,Kw),Kw.forEach(t),wIo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(Oy.$$.fragment,la),AIo=i(la),cge=n(la,"P",{});var mgt=s(cge);yIo=r(mgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mgt.forEach(t),LIo=i(la),Pa=n(la,"P",{});var Zw=s(Pa);xIo=r(Zw,"The model class to instantiate is selected based on the "),fge=n(Zw,"CODE",{});var ggt=s(fge);$Io=r(ggt,"model_type"),ggt.forEach(t),kIo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),mge=n(Zw,"CODE",{});var hgt=s(mge);SIo=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),RIo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(Zw,"CODE",{});var pgt=s(gge);PIo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),BIo=r(Zw,":"),Zw.forEach(t),IIo=i(la),K=n(la,"UL",{});var ee=s(K);z7=n(ee,"LI",{});var xxe=s(z7);hge=n(xxe,"STRONG",{});var _gt=s(hge);NIo=r(_gt,"albert"),_gt.forEach(t),qIo=r(xxe," \u2014 "),vO=n(xxe,"A",{href:!0});var ugt=s(vO);jIo=r(ugt,"AlbertForMultipleChoice"),ugt.forEach(t),DIo=r(xxe," (ALBERT model)"),xxe.forEach(t),GIo=i(ee),W7=n(ee,"LI",{});var $xe=s(W7);pge=n($xe,"STRONG",{});var bgt=s(pge);OIo=r(bgt,"bert"),bgt.forEach(t),VIo=r($xe," \u2014 "),FO=n($xe,"A",{href:!0});var vgt=s(FO);XIo=r(vgt,"BertForMultipleChoice"),vgt.forEach(t),zIo=r($xe," (BERT model)"),$xe.forEach(t),WIo=i(ee),Q7=n(ee,"LI",{});var kxe=s(Q7);_ge=n(kxe,"STRONG",{});var Fgt=s(_ge);QIo=r(Fgt,"big_bird"),Fgt.forEach(t),HIo=r(kxe," \u2014 "),TO=n(kxe,"A",{href:!0});var Tgt=s(TO);UIo=r(Tgt,"BigBirdForMultipleChoice"),Tgt.forEach(t),JIo=r(kxe," (BigBird model)"),kxe.forEach(t),YIo=i(ee),H7=n(ee,"LI",{});var Sxe=s(H7);uge=n(Sxe,"STRONG",{});var Mgt=s(uge);KIo=r(Mgt,"camembert"),Mgt.forEach(t),ZIo=r(Sxe," \u2014 "),MO=n(Sxe,"A",{href:!0});var Egt=s(MO);eNo=r(Egt,"CamembertForMultipleChoice"),Egt.forEach(t),oNo=r(Sxe," (CamemBERT model)"),Sxe.forEach(t),rNo=i(ee),U7=n(ee,"LI",{});var Rxe=s(U7);bge=n(Rxe,"STRONG",{});var Cgt=s(bge);tNo=r(Cgt,"canine"),Cgt.forEach(t),aNo=r(Rxe," \u2014 "),EO=n(Rxe,"A",{href:!0});var wgt=s(EO);nNo=r(wgt,"CanineForMultipleChoice"),wgt.forEach(t),sNo=r(Rxe," (Canine model)"),Rxe.forEach(t),lNo=i(ee),J7=n(ee,"LI",{});var Pxe=s(J7);vge=n(Pxe,"STRONG",{});var Agt=s(vge);iNo=r(Agt,"convbert"),Agt.forEach(t),dNo=r(Pxe," \u2014 "),CO=n(Pxe,"A",{href:!0});var ygt=s(CO);cNo=r(ygt,"ConvBertForMultipleChoice"),ygt.forEach(t),fNo=r(Pxe," (ConvBERT model)"),Pxe.forEach(t),mNo=i(ee),Y7=n(ee,"LI",{});var Bxe=s(Y7);Fge=n(Bxe,"STRONG",{});var Lgt=s(Fge);gNo=r(Lgt,"data2vec-text"),Lgt.forEach(t),hNo=r(Bxe," \u2014 "),wO=n(Bxe,"A",{href:!0});var xgt=s(wO);pNo=r(xgt,"Data2VecTextForMultipleChoice"),xgt.forEach(t),_No=r(Bxe," (Data2VecText model)"),Bxe.forEach(t),uNo=i(ee),K7=n(ee,"LI",{});var Ixe=s(K7);Tge=n(Ixe,"STRONG",{});var $gt=s(Tge);bNo=r($gt,"deberta-v2"),$gt.forEach(t),vNo=r(Ixe," \u2014 "),AO=n(Ixe,"A",{href:!0});var kgt=s(AO);FNo=r(kgt,"DebertaV2ForMultipleChoice"),kgt.forEach(t),TNo=r(Ixe," (DeBERTa-v2 model)"),Ixe.forEach(t),MNo=i(ee),Z7=n(ee,"LI",{});var Nxe=s(Z7);Mge=n(Nxe,"STRONG",{});var Sgt=s(Mge);ENo=r(Sgt,"distilbert"),Sgt.forEach(t),CNo=r(Nxe," \u2014 "),yO=n(Nxe,"A",{href:!0});var Rgt=s(yO);wNo=r(Rgt,"DistilBertForMultipleChoice"),Rgt.forEach(t),ANo=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),yNo=i(ee),eb=n(ee,"LI",{});var qxe=s(eb);Ege=n(qxe,"STRONG",{});var Pgt=s(Ege);LNo=r(Pgt,"electra"),Pgt.forEach(t),xNo=r(qxe," \u2014 "),LO=n(qxe,"A",{href:!0});var Bgt=s(LO);$No=r(Bgt,"ElectraForMultipleChoice"),Bgt.forEach(t),kNo=r(qxe," (ELECTRA model)"),qxe.forEach(t),SNo=i(ee),ob=n(ee,"LI",{});var jxe=s(ob);Cge=n(jxe,"STRONG",{});var Igt=s(Cge);RNo=r(Igt,"flaubert"),Igt.forEach(t),PNo=r(jxe," \u2014 "),xO=n(jxe,"A",{href:!0});var Ngt=s(xO);BNo=r(Ngt,"FlaubertForMultipleChoice"),Ngt.forEach(t),INo=r(jxe," (FlauBERT model)"),jxe.forEach(t),NNo=i(ee),rb=n(ee,"LI",{});var Dxe=s(rb);wge=n(Dxe,"STRONG",{});var qgt=s(wge);qNo=r(qgt,"fnet"),qgt.forEach(t),jNo=r(Dxe," \u2014 "),$O=n(Dxe,"A",{href:!0});var jgt=s($O);DNo=r(jgt,"FNetForMultipleChoice"),jgt.forEach(t),GNo=r(Dxe," (FNet model)"),Dxe.forEach(t),ONo=i(ee),tb=n(ee,"LI",{});var Gxe=s(tb);Age=n(Gxe,"STRONG",{});var Dgt=s(Age);VNo=r(Dgt,"funnel"),Dgt.forEach(t),XNo=r(Gxe," \u2014 "),kO=n(Gxe,"A",{href:!0});var Ggt=s(kO);zNo=r(Ggt,"FunnelForMultipleChoice"),Ggt.forEach(t),WNo=r(Gxe," (Funnel Transformer model)"),Gxe.forEach(t),QNo=i(ee),ab=n(ee,"LI",{});var Oxe=s(ab);yge=n(Oxe,"STRONG",{});var Ogt=s(yge);HNo=r(Ogt,"ibert"),Ogt.forEach(t),UNo=r(Oxe," \u2014 "),SO=n(Oxe,"A",{href:!0});var Vgt=s(SO);JNo=r(Vgt,"IBertForMultipleChoice"),Vgt.forEach(t),YNo=r(Oxe," (I-BERT model)"),Oxe.forEach(t),KNo=i(ee),nb=n(ee,"LI",{});var Vxe=s(nb);Lge=n(Vxe,"STRONG",{});var Xgt=s(Lge);ZNo=r(Xgt,"longformer"),Xgt.forEach(t),eqo=r(Vxe," \u2014 "),RO=n(Vxe,"A",{href:!0});var zgt=s(RO);oqo=r(zgt,"LongformerForMultipleChoice"),zgt.forEach(t),rqo=r(Vxe," (Longformer model)"),Vxe.forEach(t),tqo=i(ee),sb=n(ee,"LI",{});var Xxe=s(sb);xge=n(Xxe,"STRONG",{});var Wgt=s(xge);aqo=r(Wgt,"megatron-bert"),Wgt.forEach(t),nqo=r(Xxe," \u2014 "),PO=n(Xxe,"A",{href:!0});var Qgt=s(PO);sqo=r(Qgt,"MegatronBertForMultipleChoice"),Qgt.forEach(t),lqo=r(Xxe," (MegatronBert model)"),Xxe.forEach(t),iqo=i(ee),lb=n(ee,"LI",{});var zxe=s(lb);$ge=n(zxe,"STRONG",{});var Hgt=s($ge);dqo=r(Hgt,"mobilebert"),Hgt.forEach(t),cqo=r(zxe," \u2014 "),BO=n(zxe,"A",{href:!0});var Ugt=s(BO);fqo=r(Ugt,"MobileBertForMultipleChoice"),Ugt.forEach(t),mqo=r(zxe," (MobileBERT model)"),zxe.forEach(t),gqo=i(ee),ib=n(ee,"LI",{});var Wxe=s(ib);kge=n(Wxe,"STRONG",{});var Jgt=s(kge);hqo=r(Jgt,"mpnet"),Jgt.forEach(t),pqo=r(Wxe," \u2014 "),IO=n(Wxe,"A",{href:!0});var Ygt=s(IO);_qo=r(Ygt,"MPNetForMultipleChoice"),Ygt.forEach(t),uqo=r(Wxe," (MPNet model)"),Wxe.forEach(t),bqo=i(ee),db=n(ee,"LI",{});var Qxe=s(db);Sge=n(Qxe,"STRONG",{});var Kgt=s(Sge);vqo=r(Kgt,"nystromformer"),Kgt.forEach(t),Fqo=r(Qxe," \u2014 "),NO=n(Qxe,"A",{href:!0});var Zgt=s(NO);Tqo=r(Zgt,"NystromformerForMultipleChoice"),Zgt.forEach(t),Mqo=r(Qxe," (Nystromformer model)"),Qxe.forEach(t),Eqo=i(ee),cb=n(ee,"LI",{});var Hxe=s(cb);Rge=n(Hxe,"STRONG",{});var eht=s(Rge);Cqo=r(eht,"qdqbert"),eht.forEach(t),wqo=r(Hxe," \u2014 "),qO=n(Hxe,"A",{href:!0});var oht=s(qO);Aqo=r(oht,"QDQBertForMultipleChoice"),oht.forEach(t),yqo=r(Hxe," (QDQBert model)"),Hxe.forEach(t),Lqo=i(ee),fb=n(ee,"LI",{});var Uxe=s(fb);Pge=n(Uxe,"STRONG",{});var rht=s(Pge);xqo=r(rht,"rembert"),rht.forEach(t),$qo=r(Uxe," \u2014 "),jO=n(Uxe,"A",{href:!0});var tht=s(jO);kqo=r(tht,"RemBertForMultipleChoice"),tht.forEach(t),Sqo=r(Uxe," (RemBERT model)"),Uxe.forEach(t),Rqo=i(ee),mb=n(ee,"LI",{});var Jxe=s(mb);Bge=n(Jxe,"STRONG",{});var aht=s(Bge);Pqo=r(aht,"roberta"),aht.forEach(t),Bqo=r(Jxe," \u2014 "),DO=n(Jxe,"A",{href:!0});var nht=s(DO);Iqo=r(nht,"RobertaForMultipleChoice"),nht.forEach(t),Nqo=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),qqo=i(ee),gb=n(ee,"LI",{});var Yxe=s(gb);Ige=n(Yxe,"STRONG",{});var sht=s(Ige);jqo=r(sht,"roformer"),sht.forEach(t),Dqo=r(Yxe," \u2014 "),GO=n(Yxe,"A",{href:!0});var lht=s(GO);Gqo=r(lht,"RoFormerForMultipleChoice"),lht.forEach(t),Oqo=r(Yxe," (RoFormer model)"),Yxe.forEach(t),Vqo=i(ee),hb=n(ee,"LI",{});var Kxe=s(hb);Nge=n(Kxe,"STRONG",{});var iht=s(Nge);Xqo=r(iht,"squeezebert"),iht.forEach(t),zqo=r(Kxe," \u2014 "),OO=n(Kxe,"A",{href:!0});var dht=s(OO);Wqo=r(dht,"SqueezeBertForMultipleChoice"),dht.forEach(t),Qqo=r(Kxe," (SqueezeBERT model)"),Kxe.forEach(t),Hqo=i(ee),pb=n(ee,"LI",{});var Zxe=s(pb);qge=n(Zxe,"STRONG",{});var cht=s(qge);Uqo=r(cht,"xlm"),cht.forEach(t),Jqo=r(Zxe," \u2014 "),VO=n(Zxe,"A",{href:!0});var fht=s(VO);Yqo=r(fht,"XLMForMultipleChoice"),fht.forEach(t),Kqo=r(Zxe," (XLM model)"),Zxe.forEach(t),Zqo=i(ee),_b=n(ee,"LI",{});var e$e=s(_b);jge=n(e$e,"STRONG",{});var mht=s(jge);ejo=r(mht,"xlm-roberta"),mht.forEach(t),ojo=r(e$e," \u2014 "),XO=n(e$e,"A",{href:!0});var ght=s(XO);rjo=r(ght,"XLMRobertaForMultipleChoice"),ght.forEach(t),tjo=r(e$e," (XLM-RoBERTa model)"),e$e.forEach(t),ajo=i(ee),ub=n(ee,"LI",{});var o$e=s(ub);Dge=n(o$e,"STRONG",{});var hht=s(Dge);njo=r(hht,"xlm-roberta-xl"),hht.forEach(t),sjo=r(o$e," \u2014 "),zO=n(o$e,"A",{href:!0});var pht=s(zO);ljo=r(pht,"XLMRobertaXLForMultipleChoice"),pht.forEach(t),ijo=r(o$e," (XLM-RoBERTa-XL model)"),o$e.forEach(t),djo=i(ee),bb=n(ee,"LI",{});var r$e=s(bb);Gge=n(r$e,"STRONG",{});var _ht=s(Gge);cjo=r(_ht,"xlnet"),_ht.forEach(t),fjo=r(r$e," \u2014 "),WO=n(r$e,"A",{href:!0});var uht=s(WO);mjo=r(uht,"XLNetForMultipleChoice"),uht.forEach(t),gjo=r(r$e," (XLNet model)"),r$e.forEach(t),hjo=i(ee),vb=n(ee,"LI",{});var t$e=s(vb);Oge=n(t$e,"STRONG",{});var bht=s(Oge);pjo=r(bht,"yoso"),bht.forEach(t),_jo=r(t$e," \u2014 "),QO=n(t$e,"A",{href:!0});var vht=s(QO);ujo=r(vht,"YosoForMultipleChoice"),vht.forEach(t),bjo=r(t$e," (YOSO model)"),t$e.forEach(t),ee.forEach(t),vjo=i(la),Fb=n(la,"P",{});var a$e=s(Fb);Fjo=r(a$e,"The model is set in evaluation mode by default using "),Vge=n(a$e,"CODE",{});var Fht=s(Vge);Tjo=r(Fht,"model.eval()"),Fht.forEach(t),Mjo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(a$e,"CODE",{});var Tht=s(Xge);Ejo=r(Tht,"model.train()"),Tht.forEach(t),a$e.forEach(t),Cjo=i(la),T(Tb.$$.fragment,la),la.forEach(t),Qs.forEach(t),lje=i(f),Wi=n(f,"H2",{class:!0});var fGe=s(Wi);Mb=n(fGe,"A",{id:!0,class:!0,href:!0});var Mht=s(Mb);zge=n(Mht,"SPAN",{});var Eht=s(zge);T(Vy.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),wjo=i(fGe),Wge=n(fGe,"SPAN",{});var Cht=s(Wge);Ajo=r(Cht,"AutoModelForNextSentencePrediction"),Cht.forEach(t),fGe.forEach(t),ije=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Xy.$$.fragment,Hs),yjo=i(Hs),Qi=n(Hs,"P",{});var QZ=s(Qi);Ljo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=n(QZ,"A",{href:!0});var wht=s(HO);xjo=r(wht,"from_pretrained()"),wht.forEach(t),$jo=r(QZ," class method or the "),UO=n(QZ,"A",{href:!0});var Aht=s(UO);kjo=r(Aht,"from_config()"),Aht.forEach(t),Sjo=r(QZ,` class
method.`),QZ.forEach(t),Rjo=i(Hs),zy=n(Hs,"P",{});var mGe=s(zy);Pjo=r(mGe,"This class cannot be instantiated directly using "),Qge=n(mGe,"CODE",{});var yht=s(Qge);Bjo=r(yht,"__init__()"),yht.forEach(t),Ijo=r(mGe," (throws an error)."),mGe.forEach(t),Njo=i(Hs),ct=n(Hs,"DIV",{class:!0});var e6=s(ct);T(Wy.$$.fragment,e6),qjo=i(e6),Hge=n(e6,"P",{});var Lht=s(Hge);jjo=r(Lht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lht.forEach(t),Djo=i(e6),Hi=n(e6,"P",{});var HZ=s(Hi);Gjo=r(HZ,`Note:
Loading a model from its configuration file does `),Uge=n(HZ,"STRONG",{});var xht=s(Uge);Ojo=r(xht,"not"),xht.forEach(t),Vjo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(HZ,"A",{href:!0});var $ht=s(JO);Xjo=r($ht,"from_pretrained()"),$ht.forEach(t),zjo=r(HZ," to load the model weights."),HZ.forEach(t),Wjo=i(e6),T(Eb.$$.fragment,e6),e6.forEach(t),Qjo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Qy.$$.fragment,ia),Hjo=i(ia),Jge=n(ia,"P",{});var kht=s(Jge);Ujo=r(kht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kht.forEach(t),Jjo=i(ia),Ba=n(ia,"P",{});var o6=s(Ba);Yjo=r(o6,"The model class to instantiate is selected based on the "),Yge=n(o6,"CODE",{});var Sht=s(Yge);Kjo=r(Sht,"model_type"),Sht.forEach(t),Zjo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Kge=n(o6,"CODE",{});var Rht=s(Kge);eDo=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),oDo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(o6,"CODE",{});var Pht=s(Zge);rDo=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),tDo=r(o6,":"),o6.forEach(t),aDo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);Cb=n(Us,"LI",{});var n$e=s(Cb);ehe=n(n$e,"STRONG",{});var Bht=s(ehe);nDo=r(Bht,"bert"),Bht.forEach(t),sDo=r(n$e," \u2014 "),YO=n(n$e,"A",{href:!0});var Iht=s(YO);lDo=r(Iht,"BertForNextSentencePrediction"),Iht.forEach(t),iDo=r(n$e," (BERT model)"),n$e.forEach(t),dDo=i(Us),wb=n(Us,"LI",{});var s$e=s(wb);ohe=n(s$e,"STRONG",{});var Nht=s(ohe);cDo=r(Nht,"fnet"),Nht.forEach(t),fDo=r(s$e," \u2014 "),KO=n(s$e,"A",{href:!0});var qht=s(KO);mDo=r(qht,"FNetForNextSentencePrediction"),qht.forEach(t),gDo=r(s$e," (FNet model)"),s$e.forEach(t),hDo=i(Us),Ab=n(Us,"LI",{});var l$e=s(Ab);rhe=n(l$e,"STRONG",{});var jht=s(rhe);pDo=r(jht,"megatron-bert"),jht.forEach(t),_Do=r(l$e," \u2014 "),ZO=n(l$e,"A",{href:!0});var Dht=s(ZO);uDo=r(Dht,"MegatronBertForNextSentencePrediction"),Dht.forEach(t),bDo=r(l$e," (MegatronBert model)"),l$e.forEach(t),vDo=i(Us),yb=n(Us,"LI",{});var i$e=s(yb);the=n(i$e,"STRONG",{});var Ght=s(the);FDo=r(Ght,"mobilebert"),Ght.forEach(t),TDo=r(i$e," \u2014 "),eV=n(i$e,"A",{href:!0});var Oht=s(eV);MDo=r(Oht,"MobileBertForNextSentencePrediction"),Oht.forEach(t),EDo=r(i$e," (MobileBERT model)"),i$e.forEach(t),CDo=i(Us),Lb=n(Us,"LI",{});var d$e=s(Lb);ahe=n(d$e,"STRONG",{});var Vht=s(ahe);wDo=r(Vht,"qdqbert"),Vht.forEach(t),ADo=r(d$e," \u2014 "),oV=n(d$e,"A",{href:!0});var Xht=s(oV);yDo=r(Xht,"QDQBertForNextSentencePrediction"),Xht.forEach(t),LDo=r(d$e," (QDQBert model)"),d$e.forEach(t),Us.forEach(t),xDo=i(ia),xb=n(ia,"P",{});var c$e=s(xb);$Do=r(c$e,"The model is set in evaluation mode by default using "),nhe=n(c$e,"CODE",{});var zht=s(nhe);kDo=r(zht,"model.eval()"),zht.forEach(t),SDo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(c$e,"CODE",{});var Wht=s(she);RDo=r(Wht,"model.train()"),Wht.forEach(t),c$e.forEach(t),PDo=i(ia),T($b.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),dje=i(f),Ui=n(f,"H2",{class:!0});var gGe=s(Ui);kb=n(gGe,"A",{id:!0,class:!0,href:!0});var Qht=s(kb);lhe=n(Qht,"SPAN",{});var Hht=s(lhe);T(Hy.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),BDo=i(gGe),ihe=n(gGe,"SPAN",{});var Uht=s(ihe);IDo=r(Uht,"AutoModelForTokenClassification"),Uht.forEach(t),gGe.forEach(t),cje=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Uy.$$.fragment,Js),NDo=i(Js),Ji=n(Js,"P",{});var UZ=s(Ji);qDo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=n(UZ,"A",{href:!0});var Jht=s(rV);jDo=r(Jht,"from_pretrained()"),Jht.forEach(t),DDo=r(UZ," class method or the "),tV=n(UZ,"A",{href:!0});var Yht=s(tV);GDo=r(Yht,"from_config()"),Yht.forEach(t),ODo=r(UZ,` class
method.`),UZ.forEach(t),VDo=i(Js),Jy=n(Js,"P",{});var hGe=s(Jy);XDo=r(hGe,"This class cannot be instantiated directly using "),dhe=n(hGe,"CODE",{});var Kht=s(dhe);zDo=r(Kht,"__init__()"),Kht.forEach(t),WDo=r(hGe," (throws an error)."),hGe.forEach(t),QDo=i(Js),ft=n(Js,"DIV",{class:!0});var r6=s(ft);T(Yy.$$.fragment,r6),HDo=i(r6),che=n(r6,"P",{});var Zht=s(che);UDo=r(Zht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zht.forEach(t),JDo=i(r6),Yi=n(r6,"P",{});var JZ=s(Yi);YDo=r(JZ,`Note:
Loading a model from its configuration file does `),fhe=n(JZ,"STRONG",{});var ept=s(fhe);KDo=r(ept,"not"),ept.forEach(t),ZDo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(JZ,"A",{href:!0});var opt=s(aV);eGo=r(opt,"from_pretrained()"),opt.forEach(t),oGo=r(JZ," to load the model weights."),JZ.forEach(t),rGo=i(r6),T(Sb.$$.fragment,r6),r6.forEach(t),tGo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Ky.$$.fragment,da),aGo=i(da),mhe=n(da,"P",{});var rpt=s(mhe);nGo=r(rpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rpt.forEach(t),sGo=i(da),Ia=n(da,"P",{});var t6=s(Ia);lGo=r(t6,"The model class to instantiate is selected based on the "),ghe=n(t6,"CODE",{});var tpt=s(ghe);iGo=r(tpt,"model_type"),tpt.forEach(t),dGo=r(t6,` property of the config object (either
passed as an argument or loaded from `),hhe=n(t6,"CODE",{});var apt=s(hhe);cGo=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),fGo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(t6,"CODE",{});var npt=s(phe);mGo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),gGo=r(t6,":"),t6.forEach(t),hGo=i(da),H=n(da,"UL",{});var J=s(H);Rb=n(J,"LI",{});var f$e=s(Rb);_he=n(f$e,"STRONG",{});var spt=s(_he);pGo=r(spt,"albert"),spt.forEach(t),_Go=r(f$e," \u2014 "),nV=n(f$e,"A",{href:!0});var lpt=s(nV);uGo=r(lpt,"AlbertForTokenClassification"),lpt.forEach(t),bGo=r(f$e," (ALBERT model)"),f$e.forEach(t),vGo=i(J),Pb=n(J,"LI",{});var m$e=s(Pb);uhe=n(m$e,"STRONG",{});var ipt=s(uhe);FGo=r(ipt,"bert"),ipt.forEach(t),TGo=r(m$e," \u2014 "),sV=n(m$e,"A",{href:!0});var dpt=s(sV);MGo=r(dpt,"BertForTokenClassification"),dpt.forEach(t),EGo=r(m$e," (BERT model)"),m$e.forEach(t),CGo=i(J),Bb=n(J,"LI",{});var g$e=s(Bb);bhe=n(g$e,"STRONG",{});var cpt=s(bhe);wGo=r(cpt,"big_bird"),cpt.forEach(t),AGo=r(g$e," \u2014 "),lV=n(g$e,"A",{href:!0});var fpt=s(lV);yGo=r(fpt,"BigBirdForTokenClassification"),fpt.forEach(t),LGo=r(g$e," (BigBird model)"),g$e.forEach(t),xGo=i(J),Ib=n(J,"LI",{});var h$e=s(Ib);vhe=n(h$e,"STRONG",{});var mpt=s(vhe);$Go=r(mpt,"camembert"),mpt.forEach(t),kGo=r(h$e," \u2014 "),iV=n(h$e,"A",{href:!0});var gpt=s(iV);SGo=r(gpt,"CamembertForTokenClassification"),gpt.forEach(t),RGo=r(h$e," (CamemBERT model)"),h$e.forEach(t),PGo=i(J),Nb=n(J,"LI",{});var p$e=s(Nb);Fhe=n(p$e,"STRONG",{});var hpt=s(Fhe);BGo=r(hpt,"canine"),hpt.forEach(t),IGo=r(p$e," \u2014 "),dV=n(p$e,"A",{href:!0});var ppt=s(dV);NGo=r(ppt,"CanineForTokenClassification"),ppt.forEach(t),qGo=r(p$e," (Canine model)"),p$e.forEach(t),jGo=i(J),qb=n(J,"LI",{});var _$e=s(qb);The=n(_$e,"STRONG",{});var _pt=s(The);DGo=r(_pt,"convbert"),_pt.forEach(t),GGo=r(_$e," \u2014 "),cV=n(_$e,"A",{href:!0});var upt=s(cV);OGo=r(upt,"ConvBertForTokenClassification"),upt.forEach(t),VGo=r(_$e," (ConvBERT model)"),_$e.forEach(t),XGo=i(J),jb=n(J,"LI",{});var u$e=s(jb);Mhe=n(u$e,"STRONG",{});var bpt=s(Mhe);zGo=r(bpt,"data2vec-text"),bpt.forEach(t),WGo=r(u$e," \u2014 "),fV=n(u$e,"A",{href:!0});var vpt=s(fV);QGo=r(vpt,"Data2VecTextForTokenClassification"),vpt.forEach(t),HGo=r(u$e," (Data2VecText model)"),u$e.forEach(t),UGo=i(J),Db=n(J,"LI",{});var b$e=s(Db);Ehe=n(b$e,"STRONG",{});var Fpt=s(Ehe);JGo=r(Fpt,"deberta"),Fpt.forEach(t),YGo=r(b$e," \u2014 "),mV=n(b$e,"A",{href:!0});var Tpt=s(mV);KGo=r(Tpt,"DebertaForTokenClassification"),Tpt.forEach(t),ZGo=r(b$e," (DeBERTa model)"),b$e.forEach(t),eOo=i(J),Gb=n(J,"LI",{});var v$e=s(Gb);Che=n(v$e,"STRONG",{});var Mpt=s(Che);oOo=r(Mpt,"deberta-v2"),Mpt.forEach(t),rOo=r(v$e," \u2014 "),gV=n(v$e,"A",{href:!0});var Ept=s(gV);tOo=r(Ept,"DebertaV2ForTokenClassification"),Ept.forEach(t),aOo=r(v$e," (DeBERTa-v2 model)"),v$e.forEach(t),nOo=i(J),Ob=n(J,"LI",{});var F$e=s(Ob);whe=n(F$e,"STRONG",{});var Cpt=s(whe);sOo=r(Cpt,"distilbert"),Cpt.forEach(t),lOo=r(F$e," \u2014 "),hV=n(F$e,"A",{href:!0});var wpt=s(hV);iOo=r(wpt,"DistilBertForTokenClassification"),wpt.forEach(t),dOo=r(F$e," (DistilBERT model)"),F$e.forEach(t),cOo=i(J),Vb=n(J,"LI",{});var T$e=s(Vb);Ahe=n(T$e,"STRONG",{});var Apt=s(Ahe);fOo=r(Apt,"electra"),Apt.forEach(t),mOo=r(T$e," \u2014 "),pV=n(T$e,"A",{href:!0});var ypt=s(pV);gOo=r(ypt,"ElectraForTokenClassification"),ypt.forEach(t),hOo=r(T$e," (ELECTRA model)"),T$e.forEach(t),pOo=i(J),Xb=n(J,"LI",{});var M$e=s(Xb);yhe=n(M$e,"STRONG",{});var Lpt=s(yhe);_Oo=r(Lpt,"flaubert"),Lpt.forEach(t),uOo=r(M$e," \u2014 "),_V=n(M$e,"A",{href:!0});var xpt=s(_V);bOo=r(xpt,"FlaubertForTokenClassification"),xpt.forEach(t),vOo=r(M$e," (FlauBERT model)"),M$e.forEach(t),FOo=i(J),zb=n(J,"LI",{});var E$e=s(zb);Lhe=n(E$e,"STRONG",{});var $pt=s(Lhe);TOo=r($pt,"fnet"),$pt.forEach(t),MOo=r(E$e," \u2014 "),uV=n(E$e,"A",{href:!0});var kpt=s(uV);EOo=r(kpt,"FNetForTokenClassification"),kpt.forEach(t),COo=r(E$e," (FNet model)"),E$e.forEach(t),wOo=i(J),Wb=n(J,"LI",{});var C$e=s(Wb);xhe=n(C$e,"STRONG",{});var Spt=s(xhe);AOo=r(Spt,"funnel"),Spt.forEach(t),yOo=r(C$e," \u2014 "),bV=n(C$e,"A",{href:!0});var Rpt=s(bV);LOo=r(Rpt,"FunnelForTokenClassification"),Rpt.forEach(t),xOo=r(C$e," (Funnel Transformer model)"),C$e.forEach(t),$Oo=i(J),Qb=n(J,"LI",{});var w$e=s(Qb);$he=n(w$e,"STRONG",{});var Ppt=s($he);kOo=r(Ppt,"gpt2"),Ppt.forEach(t),SOo=r(w$e," \u2014 "),vV=n(w$e,"A",{href:!0});var Bpt=s(vV);ROo=r(Bpt,"GPT2ForTokenClassification"),Bpt.forEach(t),POo=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),BOo=i(J),Hb=n(J,"LI",{});var A$e=s(Hb);khe=n(A$e,"STRONG",{});var Ipt=s(khe);IOo=r(Ipt,"ibert"),Ipt.forEach(t),NOo=r(A$e," \u2014 "),FV=n(A$e,"A",{href:!0});var Npt=s(FV);qOo=r(Npt,"IBertForTokenClassification"),Npt.forEach(t),jOo=r(A$e," (I-BERT model)"),A$e.forEach(t),DOo=i(J),Ub=n(J,"LI",{});var y$e=s(Ub);She=n(y$e,"STRONG",{});var qpt=s(She);GOo=r(qpt,"layoutlm"),qpt.forEach(t),OOo=r(y$e," \u2014 "),TV=n(y$e,"A",{href:!0});var jpt=s(TV);VOo=r(jpt,"LayoutLMForTokenClassification"),jpt.forEach(t),XOo=r(y$e," (LayoutLM model)"),y$e.forEach(t),zOo=i(J),Jb=n(J,"LI",{});var L$e=s(Jb);Rhe=n(L$e,"STRONG",{});var Dpt=s(Rhe);WOo=r(Dpt,"layoutlmv2"),Dpt.forEach(t),QOo=r(L$e," \u2014 "),MV=n(L$e,"A",{href:!0});var Gpt=s(MV);HOo=r(Gpt,"LayoutLMv2ForTokenClassification"),Gpt.forEach(t),UOo=r(L$e," (LayoutLMv2 model)"),L$e.forEach(t),JOo=i(J),Yb=n(J,"LI",{});var x$e=s(Yb);Phe=n(x$e,"STRONG",{});var Opt=s(Phe);YOo=r(Opt,"layoutlmv3"),Opt.forEach(t),KOo=r(x$e," \u2014 "),EV=n(x$e,"A",{href:!0});var Vpt=s(EV);ZOo=r(Vpt,"LayoutLMv3ForTokenClassification"),Vpt.forEach(t),eVo=r(x$e," (LayoutLMv3 model)"),x$e.forEach(t),oVo=i(J),Kb=n(J,"LI",{});var $$e=s(Kb);Bhe=n($$e,"STRONG",{});var Xpt=s(Bhe);rVo=r(Xpt,"longformer"),Xpt.forEach(t),tVo=r($$e," \u2014 "),CV=n($$e,"A",{href:!0});var zpt=s(CV);aVo=r(zpt,"LongformerForTokenClassification"),zpt.forEach(t),nVo=r($$e," (Longformer model)"),$$e.forEach(t),sVo=i(J),Zb=n(J,"LI",{});var k$e=s(Zb);Ihe=n(k$e,"STRONG",{});var Wpt=s(Ihe);lVo=r(Wpt,"megatron-bert"),Wpt.forEach(t),iVo=r(k$e," \u2014 "),wV=n(k$e,"A",{href:!0});var Qpt=s(wV);dVo=r(Qpt,"MegatronBertForTokenClassification"),Qpt.forEach(t),cVo=r(k$e," (MegatronBert model)"),k$e.forEach(t),fVo=i(J),e2=n(J,"LI",{});var S$e=s(e2);Nhe=n(S$e,"STRONG",{});var Hpt=s(Nhe);mVo=r(Hpt,"mobilebert"),Hpt.forEach(t),gVo=r(S$e," \u2014 "),AV=n(S$e,"A",{href:!0});var Upt=s(AV);hVo=r(Upt,"MobileBertForTokenClassification"),Upt.forEach(t),pVo=r(S$e," (MobileBERT model)"),S$e.forEach(t),_Vo=i(J),o2=n(J,"LI",{});var R$e=s(o2);qhe=n(R$e,"STRONG",{});var Jpt=s(qhe);uVo=r(Jpt,"mpnet"),Jpt.forEach(t),bVo=r(R$e," \u2014 "),yV=n(R$e,"A",{href:!0});var Ypt=s(yV);vVo=r(Ypt,"MPNetForTokenClassification"),Ypt.forEach(t),FVo=r(R$e," (MPNet model)"),R$e.forEach(t),TVo=i(J),r2=n(J,"LI",{});var P$e=s(r2);jhe=n(P$e,"STRONG",{});var Kpt=s(jhe);MVo=r(Kpt,"nystromformer"),Kpt.forEach(t),EVo=r(P$e," \u2014 "),LV=n(P$e,"A",{href:!0});var Zpt=s(LV);CVo=r(Zpt,"NystromformerForTokenClassification"),Zpt.forEach(t),wVo=r(P$e," (Nystromformer model)"),P$e.forEach(t),AVo=i(J),t2=n(J,"LI",{});var B$e=s(t2);Dhe=n(B$e,"STRONG",{});var e_t=s(Dhe);yVo=r(e_t,"qdqbert"),e_t.forEach(t),LVo=r(B$e," \u2014 "),xV=n(B$e,"A",{href:!0});var o_t=s(xV);xVo=r(o_t,"QDQBertForTokenClassification"),o_t.forEach(t),$Vo=r(B$e," (QDQBert model)"),B$e.forEach(t),kVo=i(J),a2=n(J,"LI",{});var I$e=s(a2);Ghe=n(I$e,"STRONG",{});var r_t=s(Ghe);SVo=r(r_t,"rembert"),r_t.forEach(t),RVo=r(I$e," \u2014 "),$V=n(I$e,"A",{href:!0});var t_t=s($V);PVo=r(t_t,"RemBertForTokenClassification"),t_t.forEach(t),BVo=r(I$e," (RemBERT model)"),I$e.forEach(t),IVo=i(J),n2=n(J,"LI",{});var N$e=s(n2);Ohe=n(N$e,"STRONG",{});var a_t=s(Ohe);NVo=r(a_t,"roberta"),a_t.forEach(t),qVo=r(N$e," \u2014 "),kV=n(N$e,"A",{href:!0});var n_t=s(kV);jVo=r(n_t,"RobertaForTokenClassification"),n_t.forEach(t),DVo=r(N$e," (RoBERTa model)"),N$e.forEach(t),GVo=i(J),s2=n(J,"LI",{});var q$e=s(s2);Vhe=n(q$e,"STRONG",{});var s_t=s(Vhe);OVo=r(s_t,"roformer"),s_t.forEach(t),VVo=r(q$e," \u2014 "),SV=n(q$e,"A",{href:!0});var l_t=s(SV);XVo=r(l_t,"RoFormerForTokenClassification"),l_t.forEach(t),zVo=r(q$e," (RoFormer model)"),q$e.forEach(t),WVo=i(J),l2=n(J,"LI",{});var j$e=s(l2);Xhe=n(j$e,"STRONG",{});var i_t=s(Xhe);QVo=r(i_t,"squeezebert"),i_t.forEach(t),HVo=r(j$e," \u2014 "),RV=n(j$e,"A",{href:!0});var d_t=s(RV);UVo=r(d_t,"SqueezeBertForTokenClassification"),d_t.forEach(t),JVo=r(j$e," (SqueezeBERT model)"),j$e.forEach(t),YVo=i(J),i2=n(J,"LI",{});var D$e=s(i2);zhe=n(D$e,"STRONG",{});var c_t=s(zhe);KVo=r(c_t,"xlm"),c_t.forEach(t),ZVo=r(D$e," \u2014 "),PV=n(D$e,"A",{href:!0});var f_t=s(PV);eXo=r(f_t,"XLMForTokenClassification"),f_t.forEach(t),oXo=r(D$e," (XLM model)"),D$e.forEach(t),rXo=i(J),d2=n(J,"LI",{});var G$e=s(d2);Whe=n(G$e,"STRONG",{});var m_t=s(Whe);tXo=r(m_t,"xlm-roberta"),m_t.forEach(t),aXo=r(G$e," \u2014 "),BV=n(G$e,"A",{href:!0});var g_t=s(BV);nXo=r(g_t,"XLMRobertaForTokenClassification"),g_t.forEach(t),sXo=r(G$e," (XLM-RoBERTa model)"),G$e.forEach(t),lXo=i(J),c2=n(J,"LI",{});var O$e=s(c2);Qhe=n(O$e,"STRONG",{});var h_t=s(Qhe);iXo=r(h_t,"xlm-roberta-xl"),h_t.forEach(t),dXo=r(O$e," \u2014 "),IV=n(O$e,"A",{href:!0});var p_t=s(IV);cXo=r(p_t,"XLMRobertaXLForTokenClassification"),p_t.forEach(t),fXo=r(O$e," (XLM-RoBERTa-XL model)"),O$e.forEach(t),mXo=i(J),f2=n(J,"LI",{});var V$e=s(f2);Hhe=n(V$e,"STRONG",{});var __t=s(Hhe);gXo=r(__t,"xlnet"),__t.forEach(t),hXo=r(V$e," \u2014 "),NV=n(V$e,"A",{href:!0});var u_t=s(NV);pXo=r(u_t,"XLNetForTokenClassification"),u_t.forEach(t),_Xo=r(V$e," (XLNet model)"),V$e.forEach(t),uXo=i(J),m2=n(J,"LI",{});var X$e=s(m2);Uhe=n(X$e,"STRONG",{});var b_t=s(Uhe);bXo=r(b_t,"yoso"),b_t.forEach(t),vXo=r(X$e," \u2014 "),qV=n(X$e,"A",{href:!0});var v_t=s(qV);FXo=r(v_t,"YosoForTokenClassification"),v_t.forEach(t),TXo=r(X$e," (YOSO model)"),X$e.forEach(t),J.forEach(t),MXo=i(da),g2=n(da,"P",{});var z$e=s(g2);EXo=r(z$e,"The model is set in evaluation mode by default using "),Jhe=n(z$e,"CODE",{});var F_t=s(Jhe);CXo=r(F_t,"model.eval()"),F_t.forEach(t),wXo=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(z$e,"CODE",{});var T_t=s(Yhe);AXo=r(T_t,"model.train()"),T_t.forEach(t),z$e.forEach(t),yXo=i(da),T(h2.$$.fragment,da),da.forEach(t),Js.forEach(t),fje=i(f),Ki=n(f,"H2",{class:!0});var pGe=s(Ki);p2=n(pGe,"A",{id:!0,class:!0,href:!0});var M_t=s(p2);Khe=n(M_t,"SPAN",{});var E_t=s(Khe);T(Zy.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),LXo=i(pGe),Zhe=n(pGe,"SPAN",{});var C_t=s(Zhe);xXo=r(C_t,"AutoModelForQuestionAnswering"),C_t.forEach(t),pGe.forEach(t),mje=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(eL.$$.fragment,Ys),$Xo=i(Ys),Zi=n(Ys,"P",{});var YZ=s(Zi);kXo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=n(YZ,"A",{href:!0});var w_t=s(jV);SXo=r(w_t,"from_pretrained()"),w_t.forEach(t),RXo=r(YZ," class method or the "),DV=n(YZ,"A",{href:!0});var A_t=s(DV);PXo=r(A_t,"from_config()"),A_t.forEach(t),BXo=r(YZ,` class
method.`),YZ.forEach(t),IXo=i(Ys),oL=n(Ys,"P",{});var _Ge=s(oL);NXo=r(_Ge,"This class cannot be instantiated directly using "),epe=n(_Ge,"CODE",{});var y_t=s(epe);qXo=r(y_t,"__init__()"),y_t.forEach(t),jXo=r(_Ge," (throws an error)."),_Ge.forEach(t),DXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var a6=s(mt);T(rL.$$.fragment,a6),GXo=i(a6),ope=n(a6,"P",{});var L_t=s(ope);OXo=r(L_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),L_t.forEach(t),VXo=i(a6),ed=n(a6,"P",{});var KZ=s(ed);XXo=r(KZ,`Note:
Loading a model from its configuration file does `),rpe=n(KZ,"STRONG",{});var x_t=s(rpe);zXo=r(x_t,"not"),x_t.forEach(t),WXo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(KZ,"A",{href:!0});var $_t=s(GV);QXo=r($_t,"from_pretrained()"),$_t.forEach(t),HXo=r(KZ," to load the model weights."),KZ.forEach(t),UXo=i(a6),T(_2.$$.fragment,a6),a6.forEach(t),JXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(tL.$$.fragment,ca),YXo=i(ca),tpe=n(ca,"P",{});var k_t=s(tpe);KXo=r(k_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),k_t.forEach(t),ZXo=i(ca),Na=n(ca,"P",{});var n6=s(Na);ezo=r(n6,"The model class to instantiate is selected based on the "),ape=n(n6,"CODE",{});var S_t=s(ape);ozo=r(S_t,"model_type"),S_t.forEach(t),rzo=r(n6,` property of the config object (either
passed as an argument or loaded from `),npe=n(n6,"CODE",{});var R_t=s(npe);tzo=r(R_t,"pretrained_model_name_or_path"),R_t.forEach(t),azo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(n6,"CODE",{});var P_t=s(spe);nzo=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),szo=r(n6,":"),n6.forEach(t),lzo=i(ca),V=n(ca,"UL",{});var X=s(V);u2=n(X,"LI",{});var W$e=s(u2);lpe=n(W$e,"STRONG",{});var B_t=s(lpe);izo=r(B_t,"albert"),B_t.forEach(t),dzo=r(W$e," \u2014 "),OV=n(W$e,"A",{href:!0});var I_t=s(OV);czo=r(I_t,"AlbertForQuestionAnswering"),I_t.forEach(t),fzo=r(W$e," (ALBERT model)"),W$e.forEach(t),mzo=i(X),b2=n(X,"LI",{});var Q$e=s(b2);ipe=n(Q$e,"STRONG",{});var N_t=s(ipe);gzo=r(N_t,"bart"),N_t.forEach(t),hzo=r(Q$e," \u2014 "),VV=n(Q$e,"A",{href:!0});var q_t=s(VV);pzo=r(q_t,"BartForQuestionAnswering"),q_t.forEach(t),_zo=r(Q$e," (BART model)"),Q$e.forEach(t),uzo=i(X),v2=n(X,"LI",{});var H$e=s(v2);dpe=n(H$e,"STRONG",{});var j_t=s(dpe);bzo=r(j_t,"bert"),j_t.forEach(t),vzo=r(H$e," \u2014 "),XV=n(H$e,"A",{href:!0});var D_t=s(XV);Fzo=r(D_t,"BertForQuestionAnswering"),D_t.forEach(t),Tzo=r(H$e," (BERT model)"),H$e.forEach(t),Mzo=i(X),F2=n(X,"LI",{});var U$e=s(F2);cpe=n(U$e,"STRONG",{});var G_t=s(cpe);Ezo=r(G_t,"big_bird"),G_t.forEach(t),Czo=r(U$e," \u2014 "),zV=n(U$e,"A",{href:!0});var O_t=s(zV);wzo=r(O_t,"BigBirdForQuestionAnswering"),O_t.forEach(t),Azo=r(U$e," (BigBird model)"),U$e.forEach(t),yzo=i(X),T2=n(X,"LI",{});var J$e=s(T2);fpe=n(J$e,"STRONG",{});var V_t=s(fpe);Lzo=r(V_t,"bigbird_pegasus"),V_t.forEach(t),xzo=r(J$e," \u2014 "),WV=n(J$e,"A",{href:!0});var X_t=s(WV);$zo=r(X_t,"BigBirdPegasusForQuestionAnswering"),X_t.forEach(t),kzo=r(J$e," (BigBirdPegasus model)"),J$e.forEach(t),Szo=i(X),M2=n(X,"LI",{});var Y$e=s(M2);mpe=n(Y$e,"STRONG",{});var z_t=s(mpe);Rzo=r(z_t,"camembert"),z_t.forEach(t),Pzo=r(Y$e," \u2014 "),QV=n(Y$e,"A",{href:!0});var W_t=s(QV);Bzo=r(W_t,"CamembertForQuestionAnswering"),W_t.forEach(t),Izo=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),Nzo=i(X),E2=n(X,"LI",{});var K$e=s(E2);gpe=n(K$e,"STRONG",{});var Q_t=s(gpe);qzo=r(Q_t,"canine"),Q_t.forEach(t),jzo=r(K$e," \u2014 "),HV=n(K$e,"A",{href:!0});var H_t=s(HV);Dzo=r(H_t,"CanineForQuestionAnswering"),H_t.forEach(t),Gzo=r(K$e," (Canine model)"),K$e.forEach(t),Ozo=i(X),C2=n(X,"LI",{});var Z$e=s(C2);hpe=n(Z$e,"STRONG",{});var U_t=s(hpe);Vzo=r(U_t,"convbert"),U_t.forEach(t),Xzo=r(Z$e," \u2014 "),UV=n(Z$e,"A",{href:!0});var J_t=s(UV);zzo=r(J_t,"ConvBertForQuestionAnswering"),J_t.forEach(t),Wzo=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),Qzo=i(X),w2=n(X,"LI",{});var eke=s(w2);ppe=n(eke,"STRONG",{});var Y_t=s(ppe);Hzo=r(Y_t,"data2vec-text"),Y_t.forEach(t),Uzo=r(eke," \u2014 "),JV=n(eke,"A",{href:!0});var K_t=s(JV);Jzo=r(K_t,"Data2VecTextForQuestionAnswering"),K_t.forEach(t),Yzo=r(eke," (Data2VecText model)"),eke.forEach(t),Kzo=i(X),A2=n(X,"LI",{});var oke=s(A2);_pe=n(oke,"STRONG",{});var Z_t=s(_pe);Zzo=r(Z_t,"deberta"),Z_t.forEach(t),eWo=r(oke," \u2014 "),YV=n(oke,"A",{href:!0});var eut=s(YV);oWo=r(eut,"DebertaForQuestionAnswering"),eut.forEach(t),rWo=r(oke," (DeBERTa model)"),oke.forEach(t),tWo=i(X),y2=n(X,"LI",{});var rke=s(y2);upe=n(rke,"STRONG",{});var out=s(upe);aWo=r(out,"deberta-v2"),out.forEach(t),nWo=r(rke," \u2014 "),KV=n(rke,"A",{href:!0});var rut=s(KV);sWo=r(rut,"DebertaV2ForQuestionAnswering"),rut.forEach(t),lWo=r(rke," (DeBERTa-v2 model)"),rke.forEach(t),iWo=i(X),L2=n(X,"LI",{});var tke=s(L2);bpe=n(tke,"STRONG",{});var tut=s(bpe);dWo=r(tut,"distilbert"),tut.forEach(t),cWo=r(tke," \u2014 "),ZV=n(tke,"A",{href:!0});var aut=s(ZV);fWo=r(aut,"DistilBertForQuestionAnswering"),aut.forEach(t),mWo=r(tke," (DistilBERT model)"),tke.forEach(t),gWo=i(X),x2=n(X,"LI",{});var ake=s(x2);vpe=n(ake,"STRONG",{});var nut=s(vpe);hWo=r(nut,"electra"),nut.forEach(t),pWo=r(ake," \u2014 "),eX=n(ake,"A",{href:!0});var sut=s(eX);_Wo=r(sut,"ElectraForQuestionAnswering"),sut.forEach(t),uWo=r(ake," (ELECTRA model)"),ake.forEach(t),bWo=i(X),$2=n(X,"LI",{});var nke=s($2);Fpe=n(nke,"STRONG",{});var lut=s(Fpe);vWo=r(lut,"flaubert"),lut.forEach(t),FWo=r(nke," \u2014 "),oX=n(nke,"A",{href:!0});var iut=s(oX);TWo=r(iut,"FlaubertForQuestionAnsweringSimple"),iut.forEach(t),MWo=r(nke," (FlauBERT model)"),nke.forEach(t),EWo=i(X),k2=n(X,"LI",{});var ske=s(k2);Tpe=n(ske,"STRONG",{});var dut=s(Tpe);CWo=r(dut,"fnet"),dut.forEach(t),wWo=r(ske," \u2014 "),rX=n(ske,"A",{href:!0});var cut=s(rX);AWo=r(cut,"FNetForQuestionAnswering"),cut.forEach(t),yWo=r(ske," (FNet model)"),ske.forEach(t),LWo=i(X),S2=n(X,"LI",{});var lke=s(S2);Mpe=n(lke,"STRONG",{});var fut=s(Mpe);xWo=r(fut,"funnel"),fut.forEach(t),$Wo=r(lke," \u2014 "),tX=n(lke,"A",{href:!0});var mut=s(tX);kWo=r(mut,"FunnelForQuestionAnswering"),mut.forEach(t),SWo=r(lke," (Funnel Transformer model)"),lke.forEach(t),RWo=i(X),R2=n(X,"LI",{});var ike=s(R2);Epe=n(ike,"STRONG",{});var gut=s(Epe);PWo=r(gut,"gptj"),gut.forEach(t),BWo=r(ike," \u2014 "),aX=n(ike,"A",{href:!0});var hut=s(aX);IWo=r(hut,"GPTJForQuestionAnswering"),hut.forEach(t),NWo=r(ike," (GPT-J model)"),ike.forEach(t),qWo=i(X),P2=n(X,"LI",{});var dke=s(P2);Cpe=n(dke,"STRONG",{});var put=s(Cpe);jWo=r(put,"ibert"),put.forEach(t),DWo=r(dke," \u2014 "),nX=n(dke,"A",{href:!0});var _ut=s(nX);GWo=r(_ut,"IBertForQuestionAnswering"),_ut.forEach(t),OWo=r(dke," (I-BERT model)"),dke.forEach(t),VWo=i(X),B2=n(X,"LI",{});var cke=s(B2);wpe=n(cke,"STRONG",{});var uut=s(wpe);XWo=r(uut,"layoutlmv2"),uut.forEach(t),zWo=r(cke," \u2014 "),sX=n(cke,"A",{href:!0});var but=s(sX);WWo=r(but,"LayoutLMv2ForQuestionAnswering"),but.forEach(t),QWo=r(cke," (LayoutLMv2 model)"),cke.forEach(t),HWo=i(X),I2=n(X,"LI",{});var fke=s(I2);Ape=n(fke,"STRONG",{});var vut=s(Ape);UWo=r(vut,"layoutlmv3"),vut.forEach(t),JWo=r(fke," \u2014 "),lX=n(fke,"A",{href:!0});var Fut=s(lX);YWo=r(Fut,"LayoutLMv3ForQuestionAnswering"),Fut.forEach(t),KWo=r(fke," (LayoutLMv3 model)"),fke.forEach(t),ZWo=i(X),N2=n(X,"LI",{});var mke=s(N2);ype=n(mke,"STRONG",{});var Tut=s(ype);eQo=r(Tut,"led"),Tut.forEach(t),oQo=r(mke," \u2014 "),iX=n(mke,"A",{href:!0});var Mut=s(iX);rQo=r(Mut,"LEDForQuestionAnswering"),Mut.forEach(t),tQo=r(mke," (LED model)"),mke.forEach(t),aQo=i(X),q2=n(X,"LI",{});var gke=s(q2);Lpe=n(gke,"STRONG",{});var Eut=s(Lpe);nQo=r(Eut,"longformer"),Eut.forEach(t),sQo=r(gke," \u2014 "),dX=n(gke,"A",{href:!0});var Cut=s(dX);lQo=r(Cut,"LongformerForQuestionAnswering"),Cut.forEach(t),iQo=r(gke," (Longformer model)"),gke.forEach(t),dQo=i(X),j2=n(X,"LI",{});var hke=s(j2);xpe=n(hke,"STRONG",{});var wut=s(xpe);cQo=r(wut,"lxmert"),wut.forEach(t),fQo=r(hke," \u2014 "),cX=n(hke,"A",{href:!0});var Aut=s(cX);mQo=r(Aut,"LxmertForQuestionAnswering"),Aut.forEach(t),gQo=r(hke," (LXMERT model)"),hke.forEach(t),hQo=i(X),D2=n(X,"LI",{});var pke=s(D2);$pe=n(pke,"STRONG",{});var yut=s($pe);pQo=r(yut,"mbart"),yut.forEach(t),_Qo=r(pke," \u2014 "),fX=n(pke,"A",{href:!0});var Lut=s(fX);uQo=r(Lut,"MBartForQuestionAnswering"),Lut.forEach(t),bQo=r(pke," (mBART model)"),pke.forEach(t),vQo=i(X),G2=n(X,"LI",{});var _ke=s(G2);kpe=n(_ke,"STRONG",{});var xut=s(kpe);FQo=r(xut,"megatron-bert"),xut.forEach(t),TQo=r(_ke," \u2014 "),mX=n(_ke,"A",{href:!0});var $ut=s(mX);MQo=r($ut,"MegatronBertForQuestionAnswering"),$ut.forEach(t),EQo=r(_ke," (MegatronBert model)"),_ke.forEach(t),CQo=i(X),O2=n(X,"LI",{});var uke=s(O2);Spe=n(uke,"STRONG",{});var kut=s(Spe);wQo=r(kut,"mobilebert"),kut.forEach(t),AQo=r(uke," \u2014 "),gX=n(uke,"A",{href:!0});var Sut=s(gX);yQo=r(Sut,"MobileBertForQuestionAnswering"),Sut.forEach(t),LQo=r(uke," (MobileBERT model)"),uke.forEach(t),xQo=i(X),V2=n(X,"LI",{});var bke=s(V2);Rpe=n(bke,"STRONG",{});var Rut=s(Rpe);$Qo=r(Rut,"mpnet"),Rut.forEach(t),kQo=r(bke," \u2014 "),hX=n(bke,"A",{href:!0});var Put=s(hX);SQo=r(Put,"MPNetForQuestionAnswering"),Put.forEach(t),RQo=r(bke," (MPNet model)"),bke.forEach(t),PQo=i(X),X2=n(X,"LI",{});var vke=s(X2);Ppe=n(vke,"STRONG",{});var But=s(Ppe);BQo=r(But,"nystromformer"),But.forEach(t),IQo=r(vke," \u2014 "),pX=n(vke,"A",{href:!0});var Iut=s(pX);NQo=r(Iut,"NystromformerForQuestionAnswering"),Iut.forEach(t),qQo=r(vke," (Nystromformer model)"),vke.forEach(t),jQo=i(X),z2=n(X,"LI",{});var Fke=s(z2);Bpe=n(Fke,"STRONG",{});var Nut=s(Bpe);DQo=r(Nut,"qdqbert"),Nut.forEach(t),GQo=r(Fke," \u2014 "),_X=n(Fke,"A",{href:!0});var qut=s(_X);OQo=r(qut,"QDQBertForQuestionAnswering"),qut.forEach(t),VQo=r(Fke," (QDQBert model)"),Fke.forEach(t),XQo=i(X),W2=n(X,"LI",{});var Tke=s(W2);Ipe=n(Tke,"STRONG",{});var jut=s(Ipe);zQo=r(jut,"reformer"),jut.forEach(t),WQo=r(Tke," \u2014 "),uX=n(Tke,"A",{href:!0});var Dut=s(uX);QQo=r(Dut,"ReformerForQuestionAnswering"),Dut.forEach(t),HQo=r(Tke," (Reformer model)"),Tke.forEach(t),UQo=i(X),Q2=n(X,"LI",{});var Mke=s(Q2);Npe=n(Mke,"STRONG",{});var Gut=s(Npe);JQo=r(Gut,"rembert"),Gut.forEach(t),YQo=r(Mke," \u2014 "),bX=n(Mke,"A",{href:!0});var Out=s(bX);KQo=r(Out,"RemBertForQuestionAnswering"),Out.forEach(t),ZQo=r(Mke," (RemBERT model)"),Mke.forEach(t),eHo=i(X),H2=n(X,"LI",{});var Eke=s(H2);qpe=n(Eke,"STRONG",{});var Vut=s(qpe);oHo=r(Vut,"roberta"),Vut.forEach(t),rHo=r(Eke," \u2014 "),vX=n(Eke,"A",{href:!0});var Xut=s(vX);tHo=r(Xut,"RobertaForQuestionAnswering"),Xut.forEach(t),aHo=r(Eke," (RoBERTa model)"),Eke.forEach(t),nHo=i(X),U2=n(X,"LI",{});var Cke=s(U2);jpe=n(Cke,"STRONG",{});var zut=s(jpe);sHo=r(zut,"roformer"),zut.forEach(t),lHo=r(Cke," \u2014 "),FX=n(Cke,"A",{href:!0});var Wut=s(FX);iHo=r(Wut,"RoFormerForQuestionAnswering"),Wut.forEach(t),dHo=r(Cke," (RoFormer model)"),Cke.forEach(t),cHo=i(X),J2=n(X,"LI",{});var wke=s(J2);Dpe=n(wke,"STRONG",{});var Qut=s(Dpe);fHo=r(Qut,"splinter"),Qut.forEach(t),mHo=r(wke," \u2014 "),TX=n(wke,"A",{href:!0});var Hut=s(TX);gHo=r(Hut,"SplinterForQuestionAnswering"),Hut.forEach(t),hHo=r(wke," (Splinter model)"),wke.forEach(t),pHo=i(X),Y2=n(X,"LI",{});var Ake=s(Y2);Gpe=n(Ake,"STRONG",{});var Uut=s(Gpe);_Ho=r(Uut,"squeezebert"),Uut.forEach(t),uHo=r(Ake," \u2014 "),MX=n(Ake,"A",{href:!0});var Jut=s(MX);bHo=r(Jut,"SqueezeBertForQuestionAnswering"),Jut.forEach(t),vHo=r(Ake," (SqueezeBERT model)"),Ake.forEach(t),FHo=i(X),K2=n(X,"LI",{});var yke=s(K2);Ope=n(yke,"STRONG",{});var Yut=s(Ope);THo=r(Yut,"xlm"),Yut.forEach(t),MHo=r(yke," \u2014 "),EX=n(yke,"A",{href:!0});var Kut=s(EX);EHo=r(Kut,"XLMForQuestionAnsweringSimple"),Kut.forEach(t),CHo=r(yke," (XLM model)"),yke.forEach(t),wHo=i(X),Z2=n(X,"LI",{});var Lke=s(Z2);Vpe=n(Lke,"STRONG",{});var Zut=s(Vpe);AHo=r(Zut,"xlm-roberta"),Zut.forEach(t),yHo=r(Lke," \u2014 "),CX=n(Lke,"A",{href:!0});var e4t=s(CX);LHo=r(e4t,"XLMRobertaForQuestionAnswering"),e4t.forEach(t),xHo=r(Lke," (XLM-RoBERTa model)"),Lke.forEach(t),$Ho=i(X),ev=n(X,"LI",{});var xke=s(ev);Xpe=n(xke,"STRONG",{});var o4t=s(Xpe);kHo=r(o4t,"xlm-roberta-xl"),o4t.forEach(t),SHo=r(xke," \u2014 "),wX=n(xke,"A",{href:!0});var r4t=s(wX);RHo=r(r4t,"XLMRobertaXLForQuestionAnswering"),r4t.forEach(t),PHo=r(xke," (XLM-RoBERTa-XL model)"),xke.forEach(t),BHo=i(X),ov=n(X,"LI",{});var $ke=s(ov);zpe=n($ke,"STRONG",{});var t4t=s(zpe);IHo=r(t4t,"xlnet"),t4t.forEach(t),NHo=r($ke," \u2014 "),AX=n($ke,"A",{href:!0});var a4t=s(AX);qHo=r(a4t,"XLNetForQuestionAnsweringSimple"),a4t.forEach(t),jHo=r($ke," (XLNet model)"),$ke.forEach(t),DHo=i(X),rv=n(X,"LI",{});var kke=s(rv);Wpe=n(kke,"STRONG",{});var n4t=s(Wpe);GHo=r(n4t,"yoso"),n4t.forEach(t),OHo=r(kke," \u2014 "),yX=n(kke,"A",{href:!0});var s4t=s(yX);VHo=r(s4t,"YosoForQuestionAnswering"),s4t.forEach(t),XHo=r(kke," (YOSO model)"),kke.forEach(t),X.forEach(t),zHo=i(ca),tv=n(ca,"P",{});var Ske=s(tv);WHo=r(Ske,"The model is set in evaluation mode by default using "),Qpe=n(Ske,"CODE",{});var l4t=s(Qpe);QHo=r(l4t,"model.eval()"),l4t.forEach(t),HHo=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(Ske,"CODE",{});var i4t=s(Hpe);UHo=r(i4t,"model.train()"),i4t.forEach(t),Ske.forEach(t),JHo=i(ca),T(av.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),gje=i(f),od=n(f,"H2",{class:!0});var uGe=s(od);nv=n(uGe,"A",{id:!0,class:!0,href:!0});var d4t=s(nv);Upe=n(d4t,"SPAN",{});var c4t=s(Upe);T(aL.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),YHo=i(uGe),Jpe=n(uGe,"SPAN",{});var f4t=s(Jpe);KHo=r(f4t,"AutoModelForTableQuestionAnswering"),f4t.forEach(t),uGe.forEach(t),hje=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(nL.$$.fragment,Ks),ZHo=i(Ks),rd=n(Ks,"P",{});var ZZ=s(rd);eUo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=n(ZZ,"A",{href:!0});var m4t=s(LX);oUo=r(m4t,"from_pretrained()"),m4t.forEach(t),rUo=r(ZZ," class method or the "),xX=n(ZZ,"A",{href:!0});var g4t=s(xX);tUo=r(g4t,"from_config()"),g4t.forEach(t),aUo=r(ZZ,` class
method.`),ZZ.forEach(t),nUo=i(Ks),sL=n(Ks,"P",{});var bGe=s(sL);sUo=r(bGe,"This class cannot be instantiated directly using "),Ype=n(bGe,"CODE",{});var h4t=s(Ype);lUo=r(h4t,"__init__()"),h4t.forEach(t),iUo=r(bGe," (throws an error)."),bGe.forEach(t),dUo=i(Ks),gt=n(Ks,"DIV",{class:!0});var s6=s(gt);T(lL.$$.fragment,s6),cUo=i(s6),Kpe=n(s6,"P",{});var p4t=s(Kpe);fUo=r(p4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),p4t.forEach(t),mUo=i(s6),td=n(s6,"P",{});var eee=s(td);gUo=r(eee,`Note:
Loading a model from its configuration file does `),Zpe=n(eee,"STRONG",{});var _4t=s(Zpe);hUo=r(_4t,"not"),_4t.forEach(t),pUo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(eee,"A",{href:!0});var u4t=s($X);_Uo=r(u4t,"from_pretrained()"),u4t.forEach(t),uUo=r(eee," to load the model weights."),eee.forEach(t),bUo=i(s6),T(sv.$$.fragment,s6),s6.forEach(t),vUo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(iL.$$.fragment,fa),FUo=i(fa),e_e=n(fa,"P",{});var b4t=s(e_e);TUo=r(b4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),b4t.forEach(t),MUo=i(fa),qa=n(fa,"P",{});var l6=s(qa);EUo=r(l6,"The model class to instantiate is selected based on the "),o_e=n(l6,"CODE",{});var v4t=s(o_e);CUo=r(v4t,"model_type"),v4t.forEach(t),wUo=r(l6,` property of the config object (either
passed as an argument or loaded from `),r_e=n(l6,"CODE",{});var F4t=s(r_e);AUo=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),yUo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(l6,"CODE",{});var T4t=s(t_e);LUo=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),xUo=r(l6,":"),l6.forEach(t),$Uo=i(fa),a_e=n(fa,"UL",{});var M4t=s(a_e);lv=n(M4t,"LI",{});var Rke=s(lv);n_e=n(Rke,"STRONG",{});var E4t=s(n_e);kUo=r(E4t,"tapas"),E4t.forEach(t),SUo=r(Rke," \u2014 "),kX=n(Rke,"A",{href:!0});var C4t=s(kX);RUo=r(C4t,"TapasForQuestionAnswering"),C4t.forEach(t),PUo=r(Rke," (TAPAS model)"),Rke.forEach(t),M4t.forEach(t),BUo=i(fa),iv=n(fa,"P",{});var Pke=s(iv);IUo=r(Pke,"The model is set in evaluation mode by default using "),s_e=n(Pke,"CODE",{});var w4t=s(s_e);NUo=r(w4t,"model.eval()"),w4t.forEach(t),qUo=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(Pke,"CODE",{});var A4t=s(l_e);jUo=r(A4t,"model.train()"),A4t.forEach(t),Pke.forEach(t),DUo=i(fa),T(dv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),pje=i(f),ad=n(f,"H2",{class:!0});var vGe=s(ad);cv=n(vGe,"A",{id:!0,class:!0,href:!0});var y4t=s(cv);i_e=n(y4t,"SPAN",{});var L4t=s(i_e);T(dL.$$.fragment,L4t),L4t.forEach(t),y4t.forEach(t),GUo=i(vGe),d_e=n(vGe,"SPAN",{});var x4t=s(d_e);OUo=r(x4t,"AutoModelForImageClassification"),x4t.forEach(t),vGe.forEach(t),_je=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(cL.$$.fragment,Zs),VUo=i(Zs),nd=n(Zs,"P",{});var oee=s(nd);XUo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=n(oee,"A",{href:!0});var $4t=s(SX);zUo=r($4t,"from_pretrained()"),$4t.forEach(t),WUo=r(oee," class method or the "),RX=n(oee,"A",{href:!0});var k4t=s(RX);QUo=r(k4t,"from_config()"),k4t.forEach(t),HUo=r(oee,` class
method.`),oee.forEach(t),UUo=i(Zs),fL=n(Zs,"P",{});var FGe=s(fL);JUo=r(FGe,"This class cannot be instantiated directly using "),c_e=n(FGe,"CODE",{});var S4t=s(c_e);YUo=r(S4t,"__init__()"),S4t.forEach(t),KUo=r(FGe," (throws an error)."),FGe.forEach(t),ZUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var i6=s(ht);T(mL.$$.fragment,i6),eJo=i(i6),f_e=n(i6,"P",{});var R4t=s(f_e);oJo=r(R4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),R4t.forEach(t),rJo=i(i6),sd=n(i6,"P",{});var ree=s(sd);tJo=r(ree,`Note:
Loading a model from its configuration file does `),m_e=n(ree,"STRONG",{});var P4t=s(m_e);aJo=r(P4t,"not"),P4t.forEach(t),nJo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(ree,"A",{href:!0});var B4t=s(PX);sJo=r(B4t,"from_pretrained()"),B4t.forEach(t),lJo=r(ree," to load the model weights."),ree.forEach(t),iJo=i(i6),T(fv.$$.fragment,i6),i6.forEach(t),dJo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(gL.$$.fragment,ma),cJo=i(ma),g_e=n(ma,"P",{});var I4t=s(g_e);fJo=r(I4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),I4t.forEach(t),mJo=i(ma),ja=n(ma,"P",{});var d6=s(ja);gJo=r(d6,"The model class to instantiate is selected based on the "),h_e=n(d6,"CODE",{});var N4t=s(h_e);hJo=r(N4t,"model_type"),N4t.forEach(t),pJo=r(d6,` property of the config object (either
passed as an argument or loaded from `),p_e=n(d6,"CODE",{});var q4t=s(p_e);_Jo=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),uJo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(d6,"CODE",{});var j4t=s(__e);bJo=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),vJo=r(d6,":"),d6.forEach(t),FJo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);mv=n(Me,"LI",{});var Bke=s(mv);u_e=n(Bke,"STRONG",{});var D4t=s(u_e);TJo=r(D4t,"beit"),D4t.forEach(t),MJo=r(Bke," \u2014 "),BX=n(Bke,"A",{href:!0});var G4t=s(BX);EJo=r(G4t,"BeitForImageClassification"),G4t.forEach(t),CJo=r(Bke," (BEiT model)"),Bke.forEach(t),wJo=i(Me),gv=n(Me,"LI",{});var Ike=s(gv);b_e=n(Ike,"STRONG",{});var O4t=s(b_e);AJo=r(O4t,"convnext"),O4t.forEach(t),yJo=r(Ike," \u2014 "),IX=n(Ike,"A",{href:!0});var V4t=s(IX);LJo=r(V4t,"ConvNextForImageClassification"),V4t.forEach(t),xJo=r(Ike," (ConvNext model)"),Ike.forEach(t),$Jo=i(Me),hv=n(Me,"LI",{});var Nke=s(hv);v_e=n(Nke,"STRONG",{});var X4t=s(v_e);kJo=r(X4t,"cvt"),X4t.forEach(t),SJo=r(Nke," \u2014 "),NX=n(Nke,"A",{href:!0});var z4t=s(NX);RJo=r(z4t,"CvtForImageClassification"),z4t.forEach(t),PJo=r(Nke," (CvT model)"),Nke.forEach(t),BJo=i(Me),pv=n(Me,"LI",{});var qke=s(pv);F_e=n(qke,"STRONG",{});var W4t=s(F_e);IJo=r(W4t,"data2vec-vision"),W4t.forEach(t),NJo=r(qke," \u2014 "),qX=n(qke,"A",{href:!0});var Q4t=s(qX);qJo=r(Q4t,"Data2VecVisionForImageClassification"),Q4t.forEach(t),jJo=r(qke," (Data2VecVision model)"),qke.forEach(t),DJo=i(Me),Bs=n(Me,"LI",{});var K$=s(Bs);T_e=n(K$,"STRONG",{});var H4t=s(T_e);GJo=r(H4t,"deit"),H4t.forEach(t),OJo=r(K$," \u2014 "),jX=n(K$,"A",{href:!0});var U4t=s(jX);VJo=r(U4t,"DeiTForImageClassification"),U4t.forEach(t),XJo=r(K$," or "),DX=n(K$,"A",{href:!0});var J4t=s(DX);zJo=r(J4t,"DeiTForImageClassificationWithTeacher"),J4t.forEach(t),WJo=r(K$," (DeiT model)"),K$.forEach(t),QJo=i(Me),_v=n(Me,"LI",{});var jke=s(_v);M_e=n(jke,"STRONG",{});var Y4t=s(M_e);HJo=r(Y4t,"imagegpt"),Y4t.forEach(t),UJo=r(jke," \u2014 "),GX=n(jke,"A",{href:!0});var K4t=s(GX);JJo=r(K4t,"ImageGPTForImageClassification"),K4t.forEach(t),YJo=r(jke," (ImageGPT model)"),jke.forEach(t),KJo=i(Me),pt=n(Me,"LI",{});var hf=s(pt);E_e=n(hf,"STRONG",{});var Z4t=s(E_e);ZJo=r(Z4t,"perceiver"),Z4t.forEach(t),eYo=r(hf," \u2014 "),OX=n(hf,"A",{href:!0});var e1t=s(OX);oYo=r(e1t,"PerceiverForImageClassificationLearned"),e1t.forEach(t),rYo=r(hf," or "),VX=n(hf,"A",{href:!0});var o1t=s(VX);tYo=r(o1t,"PerceiverForImageClassificationFourier"),o1t.forEach(t),aYo=r(hf," or "),XX=n(hf,"A",{href:!0});var r1t=s(XX);nYo=r(r1t,"PerceiverForImageClassificationConvProcessing"),r1t.forEach(t),sYo=r(hf," (Perceiver model)"),hf.forEach(t),lYo=i(Me),uv=n(Me,"LI",{});var Dke=s(uv);C_e=n(Dke,"STRONG",{});var t1t=s(C_e);iYo=r(t1t,"poolformer"),t1t.forEach(t),dYo=r(Dke," \u2014 "),zX=n(Dke,"A",{href:!0});var a1t=s(zX);cYo=r(a1t,"PoolFormerForImageClassification"),a1t.forEach(t),fYo=r(Dke," (PoolFormer model)"),Dke.forEach(t),mYo=i(Me),bv=n(Me,"LI",{});var Gke=s(bv);w_e=n(Gke,"STRONG",{});var n1t=s(w_e);gYo=r(n1t,"regnet"),n1t.forEach(t),hYo=r(Gke," \u2014 "),WX=n(Gke,"A",{href:!0});var s1t=s(WX);pYo=r(s1t,"RegNetForImageClassification"),s1t.forEach(t),_Yo=r(Gke," (RegNet model)"),Gke.forEach(t),uYo=i(Me),vv=n(Me,"LI",{});var Oke=s(vv);A_e=n(Oke,"STRONG",{});var l1t=s(A_e);bYo=r(l1t,"resnet"),l1t.forEach(t),vYo=r(Oke," \u2014 "),QX=n(Oke,"A",{href:!0});var i1t=s(QX);FYo=r(i1t,"ResNetForImageClassification"),i1t.forEach(t),TYo=r(Oke," (ResNet model)"),Oke.forEach(t),MYo=i(Me),Fv=n(Me,"LI",{});var Vke=s(Fv);y_e=n(Vke,"STRONG",{});var d1t=s(y_e);EYo=r(d1t,"segformer"),d1t.forEach(t),CYo=r(Vke," \u2014 "),HX=n(Vke,"A",{href:!0});var c1t=s(HX);wYo=r(c1t,"SegformerForImageClassification"),c1t.forEach(t),AYo=r(Vke," (SegFormer model)"),Vke.forEach(t),yYo=i(Me),Tv=n(Me,"LI",{});var Xke=s(Tv);L_e=n(Xke,"STRONG",{});var f1t=s(L_e);LYo=r(f1t,"swin"),f1t.forEach(t),xYo=r(Xke," \u2014 "),UX=n(Xke,"A",{href:!0});var m1t=s(UX);$Yo=r(m1t,"SwinForImageClassification"),m1t.forEach(t),kYo=r(Xke," (Swin model)"),Xke.forEach(t),SYo=i(Me),Mv=n(Me,"LI",{});var zke=s(Mv);x_e=n(zke,"STRONG",{});var g1t=s(x_e);RYo=r(g1t,"van"),g1t.forEach(t),PYo=r(zke," \u2014 "),JX=n(zke,"A",{href:!0});var h1t=s(JX);BYo=r(h1t,"VanForImageClassification"),h1t.forEach(t),IYo=r(zke," (VAN model)"),zke.forEach(t),NYo=i(Me),Ev=n(Me,"LI",{});var Wke=s(Ev);$_e=n(Wke,"STRONG",{});var p1t=s($_e);qYo=r(p1t,"vit"),p1t.forEach(t),jYo=r(Wke," \u2014 "),YX=n(Wke,"A",{href:!0});var _1t=s(YX);DYo=r(_1t,"ViTForImageClassification"),_1t.forEach(t),GYo=r(Wke," (ViT model)"),Wke.forEach(t),Me.forEach(t),OYo=i(ma),Cv=n(ma,"P",{});var Qke=s(Cv);VYo=r(Qke,"The model is set in evaluation mode by default using "),k_e=n(Qke,"CODE",{});var u1t=s(k_e);XYo=r(u1t,"model.eval()"),u1t.forEach(t),zYo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=n(Qke,"CODE",{});var b1t=s(S_e);WYo=r(b1t,"model.train()"),b1t.forEach(t),Qke.forEach(t),QYo=i(ma),T(wv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),uje=i(f),ld=n(f,"H2",{class:!0});var TGe=s(ld);Av=n(TGe,"A",{id:!0,class:!0,href:!0});var v1t=s(Av);R_e=n(v1t,"SPAN",{});var F1t=s(R_e);T(hL.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),HYo=i(TGe),P_e=n(TGe,"SPAN",{});var T1t=s(P_e);UYo=r(T1t,"AutoModelForVision2Seq"),T1t.forEach(t),TGe.forEach(t),bje=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(pL.$$.fragment,el),JYo=i(el),id=n(el,"P",{});var tee=s(id);YYo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KX=n(tee,"A",{href:!0});var M1t=s(KX);KYo=r(M1t,"from_pretrained()"),M1t.forEach(t),ZYo=r(tee," class method or the "),ZX=n(tee,"A",{href:!0});var E1t=s(ZX);eKo=r(E1t,"from_config()"),E1t.forEach(t),oKo=r(tee,` class
method.`),tee.forEach(t),rKo=i(el),_L=n(el,"P",{});var MGe=s(_L);tKo=r(MGe,"This class cannot be instantiated directly using "),B_e=n(MGe,"CODE",{});var C1t=s(B_e);aKo=r(C1t,"__init__()"),C1t.forEach(t),nKo=r(MGe," (throws an error)."),MGe.forEach(t),sKo=i(el),_t=n(el,"DIV",{class:!0});var c6=s(_t);T(uL.$$.fragment,c6),lKo=i(c6),I_e=n(c6,"P",{});var w1t=s(I_e);iKo=r(w1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),w1t.forEach(t),dKo=i(c6),dd=n(c6,"P",{});var aee=s(dd);cKo=r(aee,`Note:
Loading a model from its configuration file does `),N_e=n(aee,"STRONG",{});var A1t=s(N_e);fKo=r(A1t,"not"),A1t.forEach(t),mKo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(aee,"A",{href:!0});var y1t=s(ez);gKo=r(y1t,"from_pretrained()"),y1t.forEach(t),hKo=r(aee," to load the model weights."),aee.forEach(t),pKo=i(c6),T(yv.$$.fragment,c6),c6.forEach(t),_Ko=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(bL.$$.fragment,ga),uKo=i(ga),q_e=n(ga,"P",{});var L1t=s(q_e);bKo=r(L1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L1t.forEach(t),vKo=i(ga),Da=n(ga,"P",{});var f6=s(Da);FKo=r(f6,"The model class to instantiate is selected based on the "),j_e=n(f6,"CODE",{});var x1t=s(j_e);TKo=r(x1t,"model_type"),x1t.forEach(t),MKo=r(f6,` property of the config object (either
passed as an argument or loaded from `),D_e=n(f6,"CODE",{});var $1t=s(D_e);EKo=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),CKo=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(f6,"CODE",{});var k1t=s(G_e);wKo=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),AKo=r(f6,":"),f6.forEach(t),yKo=i(ga),O_e=n(ga,"UL",{});var S1t=s(O_e);Lv=n(S1t,"LI",{});var Hke=s(Lv);V_e=n(Hke,"STRONG",{});var R1t=s(V_e);LKo=r(R1t,"vision-encoder-decoder"),R1t.forEach(t),xKo=r(Hke," \u2014 "),oz=n(Hke,"A",{href:!0});var P1t=s(oz);$Ko=r(P1t,"VisionEncoderDecoderModel"),P1t.forEach(t),kKo=r(Hke," (Vision Encoder decoder model)"),Hke.forEach(t),S1t.forEach(t),SKo=i(ga),xv=n(ga,"P",{});var Uke=s(xv);RKo=r(Uke,"The model is set in evaluation mode by default using "),X_e=n(Uke,"CODE",{});var B1t=s(X_e);PKo=r(B1t,"model.eval()"),B1t.forEach(t),BKo=r(Uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(Uke,"CODE",{});var I1t=s(z_e);IKo=r(I1t,"model.train()"),I1t.forEach(t),Uke.forEach(t),NKo=i(ga),T($v.$$.fragment,ga),ga.forEach(t),el.forEach(t),vje=i(f),cd=n(f,"H2",{class:!0});var EGe=s(cd);kv=n(EGe,"A",{id:!0,class:!0,href:!0});var N1t=s(kv);W_e=n(N1t,"SPAN",{});var q1t=s(W_e);T(vL.$$.fragment,q1t),q1t.forEach(t),N1t.forEach(t),qKo=i(EGe),Q_e=n(EGe,"SPAN",{});var j1t=s(Q_e);jKo=r(j1t,"AutoModelForAudioClassification"),j1t.forEach(t),EGe.forEach(t),Fje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(FL.$$.fragment,ol),DKo=i(ol),fd=n(ol,"P",{});var nee=s(fd);GKo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rz=n(nee,"A",{href:!0});var D1t=s(rz);OKo=r(D1t,"from_pretrained()"),D1t.forEach(t),VKo=r(nee," class method or the "),tz=n(nee,"A",{href:!0});var G1t=s(tz);XKo=r(G1t,"from_config()"),G1t.forEach(t),zKo=r(nee,` class
method.`),nee.forEach(t),WKo=i(ol),TL=n(ol,"P",{});var CGe=s(TL);QKo=r(CGe,"This class cannot be instantiated directly using "),H_e=n(CGe,"CODE",{});var O1t=s(H_e);HKo=r(O1t,"__init__()"),O1t.forEach(t),UKo=r(CGe," (throws an error)."),CGe.forEach(t),JKo=i(ol),ut=n(ol,"DIV",{class:!0});var m6=s(ut);T(ML.$$.fragment,m6),YKo=i(m6),U_e=n(m6,"P",{});var V1t=s(U_e);KKo=r(V1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),V1t.forEach(t),ZKo=i(m6),md=n(m6,"P",{});var see=s(md);eZo=r(see,`Note:
Loading a model from its configuration file does `),J_e=n(see,"STRONG",{});var X1t=s(J_e);oZo=r(X1t,"not"),X1t.forEach(t),rZo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(see,"A",{href:!0});var z1t=s(az);tZo=r(z1t,"from_pretrained()"),z1t.forEach(t),aZo=r(see," to load the model weights."),see.forEach(t),nZo=i(m6),T(Sv.$$.fragment,m6),m6.forEach(t),sZo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(EL.$$.fragment,ha),lZo=i(ha),Y_e=n(ha,"P",{});var W1t=s(Y_e);iZo=r(W1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),W1t.forEach(t),dZo=i(ha),Ga=n(ha,"P",{});var g6=s(Ga);cZo=r(g6,"The model class to instantiate is selected based on the "),K_e=n(g6,"CODE",{});var Q1t=s(K_e);fZo=r(Q1t,"model_type"),Q1t.forEach(t),mZo=r(g6,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(g6,"CODE",{});var H1t=s(Z_e);gZo=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),hZo=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(g6,"CODE",{});var U1t=s(eue);pZo=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),_Zo=r(g6,":"),g6.forEach(t),uZo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);Rv=n(Ve,"LI",{});var Jke=s(Rv);oue=n(Jke,"STRONG",{});var J1t=s(oue);bZo=r(J1t,"data2vec-audio"),J1t.forEach(t),vZo=r(Jke," \u2014 "),nz=n(Jke,"A",{href:!0});var Y1t=s(nz);FZo=r(Y1t,"Data2VecAudioForSequenceClassification"),Y1t.forEach(t),TZo=r(Jke," (Data2VecAudio model)"),Jke.forEach(t),MZo=i(Ve),Pv=n(Ve,"LI",{});var Yke=s(Pv);rue=n(Yke,"STRONG",{});var K1t=s(rue);EZo=r(K1t,"hubert"),K1t.forEach(t),CZo=r(Yke," \u2014 "),sz=n(Yke,"A",{href:!0});var Z1t=s(sz);wZo=r(Z1t,"HubertForSequenceClassification"),Z1t.forEach(t),AZo=r(Yke," (Hubert model)"),Yke.forEach(t),yZo=i(Ve),Bv=n(Ve,"LI",{});var Kke=s(Bv);tue=n(Kke,"STRONG",{});var e7t=s(tue);LZo=r(e7t,"sew"),e7t.forEach(t),xZo=r(Kke," \u2014 "),lz=n(Kke,"A",{href:!0});var o7t=s(lz);$Zo=r(o7t,"SEWForSequenceClassification"),o7t.forEach(t),kZo=r(Kke," (SEW model)"),Kke.forEach(t),SZo=i(Ve),Iv=n(Ve,"LI",{});var Zke=s(Iv);aue=n(Zke,"STRONG",{});var r7t=s(aue);RZo=r(r7t,"sew-d"),r7t.forEach(t),PZo=r(Zke," \u2014 "),iz=n(Zke,"A",{href:!0});var t7t=s(iz);BZo=r(t7t,"SEWDForSequenceClassification"),t7t.forEach(t),IZo=r(Zke," (SEW-D model)"),Zke.forEach(t),NZo=i(Ve),Nv=n(Ve,"LI",{});var eSe=s(Nv);nue=n(eSe,"STRONG",{});var a7t=s(nue);qZo=r(a7t,"unispeech"),a7t.forEach(t),jZo=r(eSe," \u2014 "),dz=n(eSe,"A",{href:!0});var n7t=s(dz);DZo=r(n7t,"UniSpeechForSequenceClassification"),n7t.forEach(t),GZo=r(eSe," (UniSpeech model)"),eSe.forEach(t),OZo=i(Ve),qv=n(Ve,"LI",{});var oSe=s(qv);sue=n(oSe,"STRONG",{});var s7t=s(sue);VZo=r(s7t,"unispeech-sat"),s7t.forEach(t),XZo=r(oSe," \u2014 "),cz=n(oSe,"A",{href:!0});var l7t=s(cz);zZo=r(l7t,"UniSpeechSatForSequenceClassification"),l7t.forEach(t),WZo=r(oSe," (UniSpeechSat model)"),oSe.forEach(t),QZo=i(Ve),jv=n(Ve,"LI",{});var rSe=s(jv);lue=n(rSe,"STRONG",{});var i7t=s(lue);HZo=r(i7t,"wav2vec2"),i7t.forEach(t),UZo=r(rSe," \u2014 "),fz=n(rSe,"A",{href:!0});var d7t=s(fz);JZo=r(d7t,"Wav2Vec2ForSequenceClassification"),d7t.forEach(t),YZo=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),KZo=i(Ve),Dv=n(Ve,"LI",{});var tSe=s(Dv);iue=n(tSe,"STRONG",{});var c7t=s(iue);ZZo=r(c7t,"wav2vec2-conformer"),c7t.forEach(t),eer=r(tSe," \u2014 "),mz=n(tSe,"A",{href:!0});var f7t=s(mz);oer=r(f7t,"Wav2Vec2ConformerForSequenceClassification"),f7t.forEach(t),rer=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),ter=i(Ve),Gv=n(Ve,"LI",{});var aSe=s(Gv);due=n(aSe,"STRONG",{});var m7t=s(due);aer=r(m7t,"wavlm"),m7t.forEach(t),ner=r(aSe," \u2014 "),gz=n(aSe,"A",{href:!0});var g7t=s(gz);ser=r(g7t,"WavLMForSequenceClassification"),g7t.forEach(t),ler=r(aSe," (WavLM model)"),aSe.forEach(t),Ve.forEach(t),ier=i(ha),Ov=n(ha,"P",{});var nSe=s(Ov);der=r(nSe,"The model is set in evaluation mode by default using "),cue=n(nSe,"CODE",{});var h7t=s(cue);cer=r(h7t,"model.eval()"),h7t.forEach(t),fer=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(nSe,"CODE",{});var p7t=s(fue);mer=r(p7t,"model.train()"),p7t.forEach(t),nSe.forEach(t),ger=i(ha),T(Vv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),Tje=i(f),gd=n(f,"H2",{class:!0});var wGe=s(gd);Xv=n(wGe,"A",{id:!0,class:!0,href:!0});var _7t=s(Xv);mue=n(_7t,"SPAN",{});var u7t=s(mue);T(CL.$$.fragment,u7t),u7t.forEach(t),_7t.forEach(t),her=i(wGe),gue=n(wGe,"SPAN",{});var b7t=s(gue);per=r(b7t,"AutoModelForAudioFrameClassification"),b7t.forEach(t),wGe.forEach(t),Mje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(wL.$$.fragment,rl),_er=i(rl),hd=n(rl,"P",{});var lee=s(hd);uer=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hz=n(lee,"A",{href:!0});var v7t=s(hz);ber=r(v7t,"from_pretrained()"),v7t.forEach(t),ver=r(lee," class method or the "),pz=n(lee,"A",{href:!0});var F7t=s(pz);Fer=r(F7t,"from_config()"),F7t.forEach(t),Ter=r(lee,` class
method.`),lee.forEach(t),Mer=i(rl),AL=n(rl,"P",{});var AGe=s(AL);Eer=r(AGe,"This class cannot be instantiated directly using "),hue=n(AGe,"CODE",{});var T7t=s(hue);Cer=r(T7t,"__init__()"),T7t.forEach(t),wer=r(AGe," (throws an error)."),AGe.forEach(t),Aer=i(rl),bt=n(rl,"DIV",{class:!0});var h6=s(bt);T(yL.$$.fragment,h6),yer=i(h6),pue=n(h6,"P",{});var M7t=s(pue);Ler=r(M7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),M7t.forEach(t),xer=i(h6),pd=n(h6,"P",{});var iee=s(pd);$er=r(iee,`Note:
Loading a model from its configuration file does `),_ue=n(iee,"STRONG",{});var E7t=s(_ue);ker=r(E7t,"not"),E7t.forEach(t),Ser=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(iee,"A",{href:!0});var C7t=s(_z);Rer=r(C7t,"from_pretrained()"),C7t.forEach(t),Per=r(iee," to load the model weights."),iee.forEach(t),Ber=i(h6),T(zv.$$.fragment,h6),h6.forEach(t),Ier=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(LL.$$.fragment,pa),Ner=i(pa),uue=n(pa,"P",{});var w7t=s(uue);qer=r(w7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),w7t.forEach(t),jer=i(pa),Oa=n(pa,"P",{});var p6=s(Oa);Der=r(p6,"The model class to instantiate is selected based on the "),bue=n(p6,"CODE",{});var A7t=s(bue);Ger=r(A7t,"model_type"),A7t.forEach(t),Oer=r(p6,` property of the config object (either
passed as an argument or loaded from `),vue=n(p6,"CODE",{});var y7t=s(vue);Ver=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),Xer=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(p6,"CODE",{});var L7t=s(Fue);zer=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),Wer=r(p6,":"),p6.forEach(t),Qer=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Wv=n(tl,"LI",{});var sSe=s(Wv);Tue=n(sSe,"STRONG",{});var x7t=s(Tue);Her=r(x7t,"data2vec-audio"),x7t.forEach(t),Uer=r(sSe," \u2014 "),uz=n(sSe,"A",{href:!0});var $7t=s(uz);Jer=r($7t,"Data2VecAudioForAudioFrameClassification"),$7t.forEach(t),Yer=r(sSe," (Data2VecAudio model)"),sSe.forEach(t),Ker=i(tl),Qv=n(tl,"LI",{});var lSe=s(Qv);Mue=n(lSe,"STRONG",{});var k7t=s(Mue);Zer=r(k7t,"unispeech-sat"),k7t.forEach(t),eor=r(lSe," \u2014 "),bz=n(lSe,"A",{href:!0});var S7t=s(bz);oor=r(S7t,"UniSpeechSatForAudioFrameClassification"),S7t.forEach(t),ror=r(lSe," (UniSpeechSat model)"),lSe.forEach(t),tor=i(tl),Hv=n(tl,"LI",{});var iSe=s(Hv);Eue=n(iSe,"STRONG",{});var R7t=s(Eue);aor=r(R7t,"wav2vec2"),R7t.forEach(t),nor=r(iSe," \u2014 "),vz=n(iSe,"A",{href:!0});var P7t=s(vz);sor=r(P7t,"Wav2Vec2ForAudioFrameClassification"),P7t.forEach(t),lor=r(iSe," (Wav2Vec2 model)"),iSe.forEach(t),ior=i(tl),Uv=n(tl,"LI",{});var dSe=s(Uv);Cue=n(dSe,"STRONG",{});var B7t=s(Cue);dor=r(B7t,"wav2vec2-conformer"),B7t.forEach(t),cor=r(dSe," \u2014 "),Fz=n(dSe,"A",{href:!0});var I7t=s(Fz);mor=r(I7t,"Wav2Vec2ConformerForAudioFrameClassification"),I7t.forEach(t),gor=r(dSe," (Wav2Vec2-Conformer model)"),dSe.forEach(t),hor=i(tl),Jv=n(tl,"LI",{});var cSe=s(Jv);wue=n(cSe,"STRONG",{});var N7t=s(wue);por=r(N7t,"wavlm"),N7t.forEach(t),_or=r(cSe," \u2014 "),Tz=n(cSe,"A",{href:!0});var q7t=s(Tz);uor=r(q7t,"WavLMForAudioFrameClassification"),q7t.forEach(t),bor=r(cSe," (WavLM model)"),cSe.forEach(t),tl.forEach(t),vor=i(pa),Yv=n(pa,"P",{});var fSe=s(Yv);For=r(fSe,"The model is set in evaluation mode by default using "),Aue=n(fSe,"CODE",{});var j7t=s(Aue);Tor=r(j7t,"model.eval()"),j7t.forEach(t),Mor=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(fSe,"CODE",{});var D7t=s(yue);Eor=r(D7t,"model.train()"),D7t.forEach(t),fSe.forEach(t),Cor=i(pa),T(Kv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Eje=i(f),_d=n(f,"H2",{class:!0});var yGe=s(_d);Zv=n(yGe,"A",{id:!0,class:!0,href:!0});var G7t=s(Zv);Lue=n(G7t,"SPAN",{});var O7t=s(Lue);T(xL.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),wor=i(yGe),xue=n(yGe,"SPAN",{});var V7t=s(xue);Aor=r(V7t,"AutoModelForCTC"),V7t.forEach(t),yGe.forEach(t),Cje=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T($L.$$.fragment,al),yor=i(al),ud=n(al,"P",{});var dee=s(ud);Lor=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mz=n(dee,"A",{href:!0});var X7t=s(Mz);xor=r(X7t,"from_pretrained()"),X7t.forEach(t),$or=r(dee," class method or the "),Ez=n(dee,"A",{href:!0});var z7t=s(Ez);kor=r(z7t,"from_config()"),z7t.forEach(t),Sor=r(dee,` class
method.`),dee.forEach(t),Ror=i(al),kL=n(al,"P",{});var LGe=s(kL);Por=r(LGe,"This class cannot be instantiated directly using "),$ue=n(LGe,"CODE",{});var W7t=s($ue);Bor=r(W7t,"__init__()"),W7t.forEach(t),Ior=r(LGe," (throws an error)."),LGe.forEach(t),Nor=i(al),vt=n(al,"DIV",{class:!0});var _6=s(vt);T(SL.$$.fragment,_6),qor=i(_6),kue=n(_6,"P",{});var Q7t=s(kue);jor=r(Q7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Q7t.forEach(t),Dor=i(_6),bd=n(_6,"P",{});var cee=s(bd);Gor=r(cee,`Note:
Loading a model from its configuration file does `),Sue=n(cee,"STRONG",{});var H7t=s(Sue);Oor=r(H7t,"not"),H7t.forEach(t),Vor=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(cee,"A",{href:!0});var U7t=s(Cz);Xor=r(U7t,"from_pretrained()"),U7t.forEach(t),zor=r(cee," to load the model weights."),cee.forEach(t),Wor=i(_6),T(eF.$$.fragment,_6),_6.forEach(t),Qor=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(RL.$$.fragment,_a),Hor=i(_a),Rue=n(_a,"P",{});var J7t=s(Rue);Uor=r(J7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),J7t.forEach(t),Jor=i(_a),Va=n(_a,"P",{});var u6=s(Va);Yor=r(u6,"The model class to instantiate is selected based on the "),Pue=n(u6,"CODE",{});var Y7t=s(Pue);Kor=r(Y7t,"model_type"),Y7t.forEach(t),Zor=r(u6,` property of the config object (either
passed as an argument or loaded from `),Bue=n(u6,"CODE",{});var K7t=s(Bue);err=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),orr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(u6,"CODE",{});var Z7t=s(Iue);rrr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),trr=r(u6,":"),u6.forEach(t),arr=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);oF=n(Xe,"LI",{});var mSe=s(oF);Nue=n(mSe,"STRONG",{});var ebt=s(Nue);nrr=r(ebt,"data2vec-audio"),ebt.forEach(t),srr=r(mSe," \u2014 "),wz=n(mSe,"A",{href:!0});var obt=s(wz);lrr=r(obt,"Data2VecAudioForCTC"),obt.forEach(t),irr=r(mSe," (Data2VecAudio model)"),mSe.forEach(t),drr=i(Xe),rF=n(Xe,"LI",{});var gSe=s(rF);que=n(gSe,"STRONG",{});var rbt=s(que);crr=r(rbt,"hubert"),rbt.forEach(t),frr=r(gSe," \u2014 "),Az=n(gSe,"A",{href:!0});var tbt=s(Az);mrr=r(tbt,"HubertForCTC"),tbt.forEach(t),grr=r(gSe," (Hubert model)"),gSe.forEach(t),hrr=i(Xe),tF=n(Xe,"LI",{});var hSe=s(tF);jue=n(hSe,"STRONG",{});var abt=s(jue);prr=r(abt,"sew"),abt.forEach(t),_rr=r(hSe," \u2014 "),yz=n(hSe,"A",{href:!0});var nbt=s(yz);urr=r(nbt,"SEWForCTC"),nbt.forEach(t),brr=r(hSe," (SEW model)"),hSe.forEach(t),vrr=i(Xe),aF=n(Xe,"LI",{});var pSe=s(aF);Due=n(pSe,"STRONG",{});var sbt=s(Due);Frr=r(sbt,"sew-d"),sbt.forEach(t),Trr=r(pSe," \u2014 "),Lz=n(pSe,"A",{href:!0});var lbt=s(Lz);Mrr=r(lbt,"SEWDForCTC"),lbt.forEach(t),Err=r(pSe," (SEW-D model)"),pSe.forEach(t),Crr=i(Xe),nF=n(Xe,"LI",{});var _Se=s(nF);Gue=n(_Se,"STRONG",{});var ibt=s(Gue);wrr=r(ibt,"unispeech"),ibt.forEach(t),Arr=r(_Se," \u2014 "),xz=n(_Se,"A",{href:!0});var dbt=s(xz);yrr=r(dbt,"UniSpeechForCTC"),dbt.forEach(t),Lrr=r(_Se," (UniSpeech model)"),_Se.forEach(t),xrr=i(Xe),sF=n(Xe,"LI",{});var uSe=s(sF);Oue=n(uSe,"STRONG",{});var cbt=s(Oue);$rr=r(cbt,"unispeech-sat"),cbt.forEach(t),krr=r(uSe," \u2014 "),$z=n(uSe,"A",{href:!0});var fbt=s($z);Srr=r(fbt,"UniSpeechSatForCTC"),fbt.forEach(t),Rrr=r(uSe," (UniSpeechSat model)"),uSe.forEach(t),Prr=i(Xe),lF=n(Xe,"LI",{});var bSe=s(lF);Vue=n(bSe,"STRONG",{});var mbt=s(Vue);Brr=r(mbt,"wav2vec2"),mbt.forEach(t),Irr=r(bSe," \u2014 "),kz=n(bSe,"A",{href:!0});var gbt=s(kz);Nrr=r(gbt,"Wav2Vec2ForCTC"),gbt.forEach(t),qrr=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),jrr=i(Xe),iF=n(Xe,"LI",{});var vSe=s(iF);Xue=n(vSe,"STRONG",{});var hbt=s(Xue);Drr=r(hbt,"wav2vec2-conformer"),hbt.forEach(t),Grr=r(vSe," \u2014 "),Sz=n(vSe,"A",{href:!0});var pbt=s(Sz);Orr=r(pbt,"Wav2Vec2ConformerForCTC"),pbt.forEach(t),Vrr=r(vSe," (Wav2Vec2-Conformer model)"),vSe.forEach(t),Xrr=i(Xe),dF=n(Xe,"LI",{});var FSe=s(dF);zue=n(FSe,"STRONG",{});var _bt=s(zue);zrr=r(_bt,"wavlm"),_bt.forEach(t),Wrr=r(FSe," \u2014 "),Rz=n(FSe,"A",{href:!0});var ubt=s(Rz);Qrr=r(ubt,"WavLMForCTC"),ubt.forEach(t),Hrr=r(FSe," (WavLM model)"),FSe.forEach(t),Xe.forEach(t),Urr=i(_a),cF=n(_a,"P",{});var TSe=s(cF);Jrr=r(TSe,"The model is set in evaluation mode by default using "),Wue=n(TSe,"CODE",{});var bbt=s(Wue);Yrr=r(bbt,"model.eval()"),bbt.forEach(t),Krr=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(TSe,"CODE",{});var vbt=s(Que);Zrr=r(vbt,"model.train()"),vbt.forEach(t),TSe.forEach(t),etr=i(_a),T(fF.$$.fragment,_a),_a.forEach(t),al.forEach(t),wje=i(f),vd=n(f,"H2",{class:!0});var xGe=s(vd);mF=n(xGe,"A",{id:!0,class:!0,href:!0});var Fbt=s(mF);Hue=n(Fbt,"SPAN",{});var Tbt=s(Hue);T(PL.$$.fragment,Tbt),Tbt.forEach(t),Fbt.forEach(t),otr=i(xGe),Uue=n(xGe,"SPAN",{});var Mbt=s(Uue);rtr=r(Mbt,"AutoModelForSpeechSeq2Seq"),Mbt.forEach(t),xGe.forEach(t),Aje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(BL.$$.fragment,nl),ttr=i(nl),Fd=n(nl,"P",{});var fee=s(Fd);atr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pz=n(fee,"A",{href:!0});var Ebt=s(Pz);ntr=r(Ebt,"from_pretrained()"),Ebt.forEach(t),str=r(fee," class method or the "),Bz=n(fee,"A",{href:!0});var Cbt=s(Bz);ltr=r(Cbt,"from_config()"),Cbt.forEach(t),itr=r(fee,` class
method.`),fee.forEach(t),dtr=i(nl),IL=n(nl,"P",{});var $Ge=s(IL);ctr=r($Ge,"This class cannot be instantiated directly using "),Jue=n($Ge,"CODE",{});var wbt=s(Jue);ftr=r(wbt,"__init__()"),wbt.forEach(t),mtr=r($Ge," (throws an error)."),$Ge.forEach(t),gtr=i(nl),Ft=n(nl,"DIV",{class:!0});var b6=s(Ft);T(NL.$$.fragment,b6),htr=i(b6),Yue=n(b6,"P",{});var Abt=s(Yue);ptr=r(Abt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Abt.forEach(t),_tr=i(b6),Td=n(b6,"P",{});var mee=s(Td);utr=r(mee,`Note:
Loading a model from its configuration file does `),Kue=n(mee,"STRONG",{});var ybt=s(Kue);btr=r(ybt,"not"),ybt.forEach(t),vtr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(mee,"A",{href:!0});var Lbt=s(Iz);Ftr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),Ttr=r(mee," to load the model weights."),mee.forEach(t),Mtr=i(b6),T(gF.$$.fragment,b6),b6.forEach(t),Etr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(qL.$$.fragment,ua),Ctr=i(ua),Zue=n(ua,"P",{});var xbt=s(Zue);wtr=r(xbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xbt.forEach(t),Atr=i(ua),Xa=n(ua,"P",{});var v6=s(Xa);ytr=r(v6,"The model class to instantiate is selected based on the "),e4e=n(v6,"CODE",{});var $bt=s(e4e);Ltr=r($bt,"model_type"),$bt.forEach(t),xtr=r(v6,` property of the config object (either
passed as an argument or loaded from `),o4e=n(v6,"CODE",{});var kbt=s(o4e);$tr=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),ktr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(v6,"CODE",{});var Sbt=s(r4e);Str=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),Rtr=r(v6,":"),v6.forEach(t),Ptr=i(ua),jL=n(ua,"UL",{});var kGe=s(jL);hF=n(kGe,"LI",{});var MSe=s(hF);t4e=n(MSe,"STRONG",{});var Rbt=s(t4e);Btr=r(Rbt,"speech-encoder-decoder"),Rbt.forEach(t),Itr=r(MSe," \u2014 "),Nz=n(MSe,"A",{href:!0});var Pbt=s(Nz);Ntr=r(Pbt,"SpeechEncoderDecoderModel"),Pbt.forEach(t),qtr=r(MSe," (Speech Encoder decoder model)"),MSe.forEach(t),jtr=i(kGe),pF=n(kGe,"LI",{});var ESe=s(pF);a4e=n(ESe,"STRONG",{});var Bbt=s(a4e);Dtr=r(Bbt,"speech_to_text"),Bbt.forEach(t),Gtr=r(ESe," \u2014 "),qz=n(ESe,"A",{href:!0});var Ibt=s(qz);Otr=r(Ibt,"Speech2TextForConditionalGeneration"),Ibt.forEach(t),Vtr=r(ESe," (Speech2Text model)"),ESe.forEach(t),kGe.forEach(t),Xtr=i(ua),_F=n(ua,"P",{});var CSe=s(_F);ztr=r(CSe,"The model is set in evaluation mode by default using "),n4e=n(CSe,"CODE",{});var Nbt=s(n4e);Wtr=r(Nbt,"model.eval()"),Nbt.forEach(t),Qtr=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s4e=n(CSe,"CODE",{});var qbt=s(s4e);Htr=r(qbt,"model.train()"),qbt.forEach(t),CSe.forEach(t),Utr=i(ua),T(uF.$$.fragment,ua),ua.forEach(t),nl.forEach(t),yje=i(f),Md=n(f,"H2",{class:!0});var SGe=s(Md);bF=n(SGe,"A",{id:!0,class:!0,href:!0});var jbt=s(bF);l4e=n(jbt,"SPAN",{});var Dbt=s(l4e);T(DL.$$.fragment,Dbt),Dbt.forEach(t),jbt.forEach(t),Jtr=i(SGe),i4e=n(SGe,"SPAN",{});var Gbt=s(i4e);Ytr=r(Gbt,"AutoModelForAudioXVector"),Gbt.forEach(t),SGe.forEach(t),Lje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(GL.$$.fragment,sl),Ktr=i(sl),Ed=n(sl,"P",{});var gee=s(Ed);Ztr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jz=n(gee,"A",{href:!0});var Obt=s(jz);ear=r(Obt,"from_pretrained()"),Obt.forEach(t),oar=r(gee," class method or the "),Dz=n(gee,"A",{href:!0});var Vbt=s(Dz);rar=r(Vbt,"from_config()"),Vbt.forEach(t),tar=r(gee,` class
method.`),gee.forEach(t),aar=i(sl),OL=n(sl,"P",{});var RGe=s(OL);nar=r(RGe,"This class cannot be instantiated directly using "),d4e=n(RGe,"CODE",{});var Xbt=s(d4e);sar=r(Xbt,"__init__()"),Xbt.forEach(t),lar=r(RGe," (throws an error)."),RGe.forEach(t),iar=i(sl),Tt=n(sl,"DIV",{class:!0});var F6=s(Tt);T(VL.$$.fragment,F6),dar=i(F6),c4e=n(F6,"P",{});var zbt=s(c4e);car=r(zbt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zbt.forEach(t),far=i(F6),Cd=n(F6,"P",{});var hee=s(Cd);mar=r(hee,`Note:
Loading a model from its configuration file does `),f4e=n(hee,"STRONG",{});var Wbt=s(f4e);gar=r(Wbt,"not"),Wbt.forEach(t),har=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(hee,"A",{href:!0});var Qbt=s(Gz);par=r(Qbt,"from_pretrained()"),Qbt.forEach(t),_ar=r(hee," to load the model weights."),hee.forEach(t),uar=i(F6),T(vF.$$.fragment,F6),F6.forEach(t),bar=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(XL.$$.fragment,ba),Far=i(ba),m4e=n(ba,"P",{});var Hbt=s(m4e);Tar=r(Hbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Hbt.forEach(t),Mar=i(ba),za=n(ba,"P",{});var T6=s(za);Ear=r(T6,"The model class to instantiate is selected based on the "),g4e=n(T6,"CODE",{});var Ubt=s(g4e);Car=r(Ubt,"model_type"),Ubt.forEach(t),war=r(T6,` property of the config object (either
passed as an argument or loaded from `),h4e=n(T6,"CODE",{});var Jbt=s(h4e);Aar=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),yar=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(T6,"CODE",{});var Ybt=s(p4e);Lar=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),xar=r(T6,":"),T6.forEach(t),$ar=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);FF=n(ll,"LI",{});var wSe=s(FF);_4e=n(wSe,"STRONG",{});var Kbt=s(_4e);kar=r(Kbt,"data2vec-audio"),Kbt.forEach(t),Sar=r(wSe," \u2014 "),Oz=n(wSe,"A",{href:!0});var Zbt=s(Oz);Rar=r(Zbt,"Data2VecAudioForXVector"),Zbt.forEach(t),Par=r(wSe," (Data2VecAudio model)"),wSe.forEach(t),Bar=i(ll),TF=n(ll,"LI",{});var ASe=s(TF);u4e=n(ASe,"STRONG",{});var e2t=s(u4e);Iar=r(e2t,"unispeech-sat"),e2t.forEach(t),Nar=r(ASe," \u2014 "),Vz=n(ASe,"A",{href:!0});var o2t=s(Vz);qar=r(o2t,"UniSpeechSatForXVector"),o2t.forEach(t),jar=r(ASe," (UniSpeechSat model)"),ASe.forEach(t),Dar=i(ll),MF=n(ll,"LI",{});var ySe=s(MF);b4e=n(ySe,"STRONG",{});var r2t=s(b4e);Gar=r(r2t,"wav2vec2"),r2t.forEach(t),Oar=r(ySe," \u2014 "),Xz=n(ySe,"A",{href:!0});var t2t=s(Xz);Var=r(t2t,"Wav2Vec2ForXVector"),t2t.forEach(t),Xar=r(ySe," (Wav2Vec2 model)"),ySe.forEach(t),zar=i(ll),EF=n(ll,"LI",{});var LSe=s(EF);v4e=n(LSe,"STRONG",{});var a2t=s(v4e);War=r(a2t,"wav2vec2-conformer"),a2t.forEach(t),Qar=r(LSe," \u2014 "),zz=n(LSe,"A",{href:!0});var n2t=s(zz);Har=r(n2t,"Wav2Vec2ConformerForXVector"),n2t.forEach(t),Uar=r(LSe," (Wav2Vec2-Conformer model)"),LSe.forEach(t),Jar=i(ll),CF=n(ll,"LI",{});var xSe=s(CF);F4e=n(xSe,"STRONG",{});var s2t=s(F4e);Yar=r(s2t,"wavlm"),s2t.forEach(t),Kar=r(xSe," \u2014 "),Wz=n(xSe,"A",{href:!0});var l2t=s(Wz);Zar=r(l2t,"WavLMForXVector"),l2t.forEach(t),enr=r(xSe," (WavLM model)"),xSe.forEach(t),ll.forEach(t),onr=i(ba),wF=n(ba,"P",{});var $Se=s(wF);rnr=r($Se,"The model is set in evaluation mode by default using "),T4e=n($Se,"CODE",{});var i2t=s(T4e);tnr=r(i2t,"model.eval()"),i2t.forEach(t),anr=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=n($Se,"CODE",{});var d2t=s(M4e);nnr=r(d2t,"model.train()"),d2t.forEach(t),$Se.forEach(t),snr=i(ba),T(AF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),xje=i(f),wd=n(f,"H2",{class:!0});var PGe=s(wd);yF=n(PGe,"A",{id:!0,class:!0,href:!0});var c2t=s(yF);E4e=n(c2t,"SPAN",{});var f2t=s(E4e);T(zL.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),lnr=i(PGe),C4e=n(PGe,"SPAN",{});var m2t=s(C4e);inr=r(m2t,"AutoModelForMaskedImageModeling"),m2t.forEach(t),PGe.forEach(t),$je=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(WL.$$.fragment,il),dnr=i(il),Ad=n(il,"P",{});var pee=s(Ad);cnr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Qz=n(pee,"A",{href:!0});var g2t=s(Qz);fnr=r(g2t,"from_pretrained()"),g2t.forEach(t),mnr=r(pee," class method or the "),Hz=n(pee,"A",{href:!0});var h2t=s(Hz);gnr=r(h2t,"from_config()"),h2t.forEach(t),hnr=r(pee,` class
method.`),pee.forEach(t),pnr=i(il),QL=n(il,"P",{});var BGe=s(QL);_nr=r(BGe,"This class cannot be instantiated directly using "),w4e=n(BGe,"CODE",{});var p2t=s(w4e);unr=r(p2t,"__init__()"),p2t.forEach(t),bnr=r(BGe," (throws an error)."),BGe.forEach(t),vnr=i(il),Mt=n(il,"DIV",{class:!0});var M6=s(Mt);T(HL.$$.fragment,M6),Fnr=i(M6),A4e=n(M6,"P",{});var _2t=s(A4e);Tnr=r(_2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_2t.forEach(t),Mnr=i(M6),yd=n(M6,"P",{});var _ee=s(yd);Enr=r(_ee,`Note:
Loading a model from its configuration file does `),y4e=n(_ee,"STRONG",{});var u2t=s(y4e);Cnr=r(u2t,"not"),u2t.forEach(t),wnr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(_ee,"A",{href:!0});var b2t=s(Uz);Anr=r(b2t,"from_pretrained()"),b2t.forEach(t),ynr=r(_ee," to load the model weights."),_ee.forEach(t),Lnr=i(M6),T(LF.$$.fragment,M6),M6.forEach(t),xnr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(UL.$$.fragment,va),$nr=i(va),L4e=n(va,"P",{});var v2t=s(L4e);knr=r(v2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),v2t.forEach(t),Snr=i(va),Wa=n(va,"P",{});var E6=s(Wa);Rnr=r(E6,"The model class to instantiate is selected based on the "),x4e=n(E6,"CODE",{});var F2t=s(x4e);Pnr=r(F2t,"model_type"),F2t.forEach(t),Bnr=r(E6,` property of the config object (either
passed as an argument or loaded from `),$4e=n(E6,"CODE",{});var T2t=s($4e);Inr=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),Nnr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(E6,"CODE",{});var M2t=s(k4e);qnr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),jnr=r(E6,":"),E6.forEach(t),Dnr=i(va),Ld=n(va,"UL",{});var uee=s(Ld);xF=n(uee,"LI",{});var kSe=s(xF);S4e=n(kSe,"STRONG",{});var E2t=s(S4e);Gnr=r(E2t,"deit"),E2t.forEach(t),Onr=r(kSe," \u2014 "),Jz=n(kSe,"A",{href:!0});var C2t=s(Jz);Vnr=r(C2t,"DeiTForMaskedImageModeling"),C2t.forEach(t),Xnr=r(kSe," (DeiT model)"),kSe.forEach(t),znr=i(uee),$F=n(uee,"LI",{});var SSe=s($F);R4e=n(SSe,"STRONG",{});var w2t=s(R4e);Wnr=r(w2t,"swin"),w2t.forEach(t),Qnr=r(SSe," \u2014 "),Yz=n(SSe,"A",{href:!0});var A2t=s(Yz);Hnr=r(A2t,"SwinForMaskedImageModeling"),A2t.forEach(t),Unr=r(SSe," (Swin model)"),SSe.forEach(t),Jnr=i(uee),kF=n(uee,"LI",{});var RSe=s(kF);P4e=n(RSe,"STRONG",{});var y2t=s(P4e);Ynr=r(y2t,"vit"),y2t.forEach(t),Knr=r(RSe," \u2014 "),Kz=n(RSe,"A",{href:!0});var L2t=s(Kz);Znr=r(L2t,"ViTForMaskedImageModeling"),L2t.forEach(t),esr=r(RSe," (ViT model)"),RSe.forEach(t),uee.forEach(t),osr=i(va),SF=n(va,"P",{});var PSe=s(SF);rsr=r(PSe,"The model is set in evaluation mode by default using "),B4e=n(PSe,"CODE",{});var x2t=s(B4e);tsr=r(x2t,"model.eval()"),x2t.forEach(t),asr=r(PSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I4e=n(PSe,"CODE",{});var $2t=s(I4e);nsr=r($2t,"model.train()"),$2t.forEach(t),PSe.forEach(t),ssr=i(va),T(RF.$$.fragment,va),va.forEach(t),il.forEach(t),kje=i(f),xd=n(f,"H2",{class:!0});var IGe=s(xd);PF=n(IGe,"A",{id:!0,class:!0,href:!0});var k2t=s(PF);N4e=n(k2t,"SPAN",{});var S2t=s(N4e);T(JL.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),lsr=i(IGe),q4e=n(IGe,"SPAN",{});var R2t=s(q4e);isr=r(R2t,"AutoModelForObjectDetection"),R2t.forEach(t),IGe.forEach(t),Sje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(YL.$$.fragment,dl),dsr=i(dl),$d=n(dl,"P",{});var bee=s($d);csr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zz=n(bee,"A",{href:!0});var P2t=s(Zz);fsr=r(P2t,"from_pretrained()"),P2t.forEach(t),msr=r(bee," class method or the "),eW=n(bee,"A",{href:!0});var B2t=s(eW);gsr=r(B2t,"from_config()"),B2t.forEach(t),hsr=r(bee,` class
method.`),bee.forEach(t),psr=i(dl),KL=n(dl,"P",{});var NGe=s(KL);_sr=r(NGe,"This class cannot be instantiated directly using "),j4e=n(NGe,"CODE",{});var I2t=s(j4e);usr=r(I2t,"__init__()"),I2t.forEach(t),bsr=r(NGe," (throws an error)."),NGe.forEach(t),vsr=i(dl),Et=n(dl,"DIV",{class:!0});var C6=s(Et);T(ZL.$$.fragment,C6),Fsr=i(C6),D4e=n(C6,"P",{});var N2t=s(D4e);Tsr=r(N2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),N2t.forEach(t),Msr=i(C6),kd=n(C6,"P",{});var vee=s(kd);Esr=r(vee,`Note:
Loading a model from its configuration file does `),G4e=n(vee,"STRONG",{});var q2t=s(G4e);Csr=r(q2t,"not"),q2t.forEach(t),wsr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(vee,"A",{href:!0});var j2t=s(oW);Asr=r(j2t,"from_pretrained()"),j2t.forEach(t),ysr=r(vee," to load the model weights."),vee.forEach(t),Lsr=i(C6),T(BF.$$.fragment,C6),C6.forEach(t),xsr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(e8.$$.fragment,Fa),$sr=i(Fa),O4e=n(Fa,"P",{});var D2t=s(O4e);ksr=r(D2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),D2t.forEach(t),Ssr=i(Fa),Qa=n(Fa,"P",{});var w6=s(Qa);Rsr=r(w6,"The model class to instantiate is selected based on the "),V4e=n(w6,"CODE",{});var G2t=s(V4e);Psr=r(G2t,"model_type"),G2t.forEach(t),Bsr=r(w6,` property of the config object (either
passed as an argument or loaded from `),X4e=n(w6,"CODE",{});var O2t=s(X4e);Isr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),Nsr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(w6,"CODE",{});var V2t=s(z4e);qsr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),jsr=r(w6,":"),w6.forEach(t),Dsr=i(Fa),o8=n(Fa,"UL",{});var qGe=s(o8);IF=n(qGe,"LI",{});var BSe=s(IF);W4e=n(BSe,"STRONG",{});var X2t=s(W4e);Gsr=r(X2t,"detr"),X2t.forEach(t),Osr=r(BSe," \u2014 "),rW=n(BSe,"A",{href:!0});var z2t=s(rW);Vsr=r(z2t,"DetrForObjectDetection"),z2t.forEach(t),Xsr=r(BSe," (DETR model)"),BSe.forEach(t),zsr=i(qGe),NF=n(qGe,"LI",{});var ISe=s(NF);Q4e=n(ISe,"STRONG",{});var W2t=s(Q4e);Wsr=r(W2t,"yolos"),W2t.forEach(t),Qsr=r(ISe," \u2014 "),tW=n(ISe,"A",{href:!0});var Q2t=s(tW);Hsr=r(Q2t,"YolosForObjectDetection"),Q2t.forEach(t),Usr=r(ISe," (YOLOS model)"),ISe.forEach(t),qGe.forEach(t),Jsr=i(Fa),qF=n(Fa,"P",{});var NSe=s(qF);Ysr=r(NSe,"The model is set in evaluation mode by default using "),H4e=n(NSe,"CODE",{});var H2t=s(H4e);Ksr=r(H2t,"model.eval()"),H2t.forEach(t),Zsr=r(NSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=n(NSe,"CODE",{});var U2t=s(U4e);elr=r(U2t,"model.train()"),U2t.forEach(t),NSe.forEach(t),olr=i(Fa),T(jF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),Rje=i(f),Sd=n(f,"H2",{class:!0});var jGe=s(Sd);DF=n(jGe,"A",{id:!0,class:!0,href:!0});var J2t=s(DF);J4e=n(J2t,"SPAN",{});var Y2t=s(J4e);T(r8.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),rlr=i(jGe),Y4e=n(jGe,"SPAN",{});var K2t=s(Y4e);tlr=r(K2t,"AutoModelForImageSegmentation"),K2t.forEach(t),jGe.forEach(t),Pje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(t8.$$.fragment,cl),alr=i(cl),Rd=n(cl,"P",{});var Fee=s(Rd);nlr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aW=n(Fee,"A",{href:!0});var Z2t=s(aW);slr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),llr=r(Fee," class method or the "),nW=n(Fee,"A",{href:!0});var evt=s(nW);ilr=r(evt,"from_config()"),evt.forEach(t),dlr=r(Fee,` class
method.`),Fee.forEach(t),clr=i(cl),a8=n(cl,"P",{});var DGe=s(a8);flr=r(DGe,"This class cannot be instantiated directly using "),K4e=n(DGe,"CODE",{});var ovt=s(K4e);mlr=r(ovt,"__init__()"),ovt.forEach(t),glr=r(DGe," (throws an error)."),DGe.forEach(t),hlr=i(cl),Ct=n(cl,"DIV",{class:!0});var A6=s(Ct);T(n8.$$.fragment,A6),plr=i(A6),Z4e=n(A6,"P",{});var rvt=s(Z4e);_lr=r(rvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rvt.forEach(t),ulr=i(A6),Pd=n(A6,"P",{});var Tee=s(Pd);blr=r(Tee,`Note:
Loading a model from its configuration file does `),e1e=n(Tee,"STRONG",{});var tvt=s(e1e);vlr=r(tvt,"not"),tvt.forEach(t),Flr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(Tee,"A",{href:!0});var avt=s(sW);Tlr=r(avt,"from_pretrained()"),avt.forEach(t),Mlr=r(Tee," to load the model weights."),Tee.forEach(t),Elr=i(A6),T(GF.$$.fragment,A6),A6.forEach(t),Clr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(s8.$$.fragment,Ta),wlr=i(Ta),o1e=n(Ta,"P",{});var nvt=s(o1e);Alr=r(nvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nvt.forEach(t),ylr=i(Ta),Ha=n(Ta,"P",{});var y6=s(Ha);Llr=r(y6,"The model class to instantiate is selected based on the "),r1e=n(y6,"CODE",{});var svt=s(r1e);xlr=r(svt,"model_type"),svt.forEach(t),$lr=r(y6,` property of the config object (either
passed as an argument or loaded from `),t1e=n(y6,"CODE",{});var lvt=s(t1e);klr=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),Slr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(y6,"CODE",{});var ivt=s(a1e);Rlr=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),Plr=r(y6,":"),y6.forEach(t),Blr=i(Ta),n1e=n(Ta,"UL",{});var dvt=s(n1e);OF=n(dvt,"LI",{});var qSe=s(OF);s1e=n(qSe,"STRONG",{});var cvt=s(s1e);Ilr=r(cvt,"detr"),cvt.forEach(t),Nlr=r(qSe," \u2014 "),lW=n(qSe,"A",{href:!0});var fvt=s(lW);qlr=r(fvt,"DetrForSegmentation"),fvt.forEach(t),jlr=r(qSe," (DETR model)"),qSe.forEach(t),dvt.forEach(t),Dlr=i(Ta),VF=n(Ta,"P",{});var jSe=s(VF);Glr=r(jSe,"The model is set in evaluation mode by default using "),l1e=n(jSe,"CODE",{});var mvt=s(l1e);Olr=r(mvt,"model.eval()"),mvt.forEach(t),Vlr=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(jSe,"CODE",{});var gvt=s(i1e);Xlr=r(gvt,"model.train()"),gvt.forEach(t),jSe.forEach(t),zlr=i(Ta),T(XF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),Bje=i(f),Bd=n(f,"H2",{class:!0});var GGe=s(Bd);zF=n(GGe,"A",{id:!0,class:!0,href:!0});var hvt=s(zF);d1e=n(hvt,"SPAN",{});var pvt=s(d1e);T(l8.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),Wlr=i(GGe),c1e=n(GGe,"SPAN",{});var _vt=s(c1e);Qlr=r(_vt,"AutoModelForSemanticSegmentation"),_vt.forEach(t),GGe.forEach(t),Ije=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(i8.$$.fragment,fl),Hlr=i(fl),Id=n(fl,"P",{});var Mee=s(Id);Ulr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iW=n(Mee,"A",{href:!0});var uvt=s(iW);Jlr=r(uvt,"from_pretrained()"),uvt.forEach(t),Ylr=r(Mee," class method or the "),dW=n(Mee,"A",{href:!0});var bvt=s(dW);Klr=r(bvt,"from_config()"),bvt.forEach(t),Zlr=r(Mee,` class
method.`),Mee.forEach(t),eir=i(fl),d8=n(fl,"P",{});var OGe=s(d8);oir=r(OGe,"This class cannot be instantiated directly using "),f1e=n(OGe,"CODE",{});var vvt=s(f1e);rir=r(vvt,"__init__()"),vvt.forEach(t),tir=r(OGe," (throws an error)."),OGe.forEach(t),air=i(fl),wt=n(fl,"DIV",{class:!0});var L6=s(wt);T(c8.$$.fragment,L6),nir=i(L6),m1e=n(L6,"P",{});var Fvt=s(m1e);sir=r(Fvt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fvt.forEach(t),lir=i(L6),Nd=n(L6,"P",{});var Eee=s(Nd);iir=r(Eee,`Note:
Loading a model from its configuration file does `),g1e=n(Eee,"STRONG",{});var Tvt=s(g1e);dir=r(Tvt,"not"),Tvt.forEach(t),cir=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Eee,"A",{href:!0});var Mvt=s(cW);fir=r(Mvt,"from_pretrained()"),Mvt.forEach(t),mir=r(Eee," to load the model weights."),Eee.forEach(t),gir=i(L6),T(WF.$$.fragment,L6),L6.forEach(t),hir=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(f8.$$.fragment,Ma),pir=i(Ma),h1e=n(Ma,"P",{});var Evt=s(h1e);_ir=r(Evt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Evt.forEach(t),uir=i(Ma),Ua=n(Ma,"P",{});var x6=s(Ua);bir=r(x6,"The model class to instantiate is selected based on the "),p1e=n(x6,"CODE",{});var Cvt=s(p1e);vir=r(Cvt,"model_type"),Cvt.forEach(t),Fir=r(x6,` property of the config object (either
passed as an argument or loaded from `),_1e=n(x6,"CODE",{});var wvt=s(_1e);Tir=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),Mir=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(x6,"CODE",{});var Avt=s(u1e);Eir=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),Cir=r(x6,":"),x6.forEach(t),wir=i(Ma),Ja=n(Ma,"UL",{});var $6=s(Ja);QF=n($6,"LI",{});var DSe=s(QF);b1e=n(DSe,"STRONG",{});var yvt=s(b1e);Air=r(yvt,"beit"),yvt.forEach(t),yir=r(DSe," \u2014 "),fW=n(DSe,"A",{href:!0});var Lvt=s(fW);Lir=r(Lvt,"BeitForSemanticSegmentation"),Lvt.forEach(t),xir=r(DSe," (BEiT model)"),DSe.forEach(t),$ir=i($6),HF=n($6,"LI",{});var GSe=s(HF);v1e=n(GSe,"STRONG",{});var xvt=s(v1e);kir=r(xvt,"data2vec-vision"),xvt.forEach(t),Sir=r(GSe," \u2014 "),mW=n(GSe,"A",{href:!0});var $vt=s(mW);Rir=r($vt,"Data2VecVisionForSemanticSegmentation"),$vt.forEach(t),Pir=r(GSe," (Data2VecVision model)"),GSe.forEach(t),Bir=i($6),UF=n($6,"LI",{});var OSe=s(UF);F1e=n(OSe,"STRONG",{});var kvt=s(F1e);Iir=r(kvt,"dpt"),kvt.forEach(t),Nir=r(OSe," \u2014 "),gW=n(OSe,"A",{href:!0});var Svt=s(gW);qir=r(Svt,"DPTForSemanticSegmentation"),Svt.forEach(t),jir=r(OSe," (DPT model)"),OSe.forEach(t),Dir=i($6),JF=n($6,"LI",{});var VSe=s(JF);T1e=n(VSe,"STRONG",{});var Rvt=s(T1e);Gir=r(Rvt,"segformer"),Rvt.forEach(t),Oir=r(VSe," \u2014 "),hW=n(VSe,"A",{href:!0});var Pvt=s(hW);Vir=r(Pvt,"SegformerForSemanticSegmentation"),Pvt.forEach(t),Xir=r(VSe," (SegFormer model)"),VSe.forEach(t),$6.forEach(t),zir=i(Ma),YF=n(Ma,"P",{});var XSe=s(YF);Wir=r(XSe,"The model is set in evaluation mode by default using "),M1e=n(XSe,"CODE",{});var Bvt=s(M1e);Qir=r(Bvt,"model.eval()"),Bvt.forEach(t),Hir=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E1e=n(XSe,"CODE",{});var Ivt=s(E1e);Uir=r(Ivt,"model.train()"),Ivt.forEach(t),XSe.forEach(t),Jir=i(Ma),T(KF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),Nje=i(f),qd=n(f,"H2",{class:!0});var VGe=s(qd);ZF=n(VGe,"A",{id:!0,class:!0,href:!0});var Nvt=s(ZF);C1e=n(Nvt,"SPAN",{});var qvt=s(C1e);T(m8.$$.fragment,qvt),qvt.forEach(t),Nvt.forEach(t),Yir=i(VGe),w1e=n(VGe,"SPAN",{});var jvt=s(w1e);Kir=r(jvt,"AutoModelForInstanceSegmentation"),jvt.forEach(t),VGe.forEach(t),qje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(g8.$$.fragment,ml),Zir=i(ml),jd=n(ml,"P",{});var Cee=s(jd);edr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=n(Cee,"A",{href:!0});var Dvt=s(pW);odr=r(Dvt,"from_pretrained()"),Dvt.forEach(t),rdr=r(Cee," class method or the "),_W=n(Cee,"A",{href:!0});var Gvt=s(_W);tdr=r(Gvt,"from_config()"),Gvt.forEach(t),adr=r(Cee,` class
method.`),Cee.forEach(t),ndr=i(ml),h8=n(ml,"P",{});var XGe=s(h8);sdr=r(XGe,"This class cannot be instantiated directly using "),A1e=n(XGe,"CODE",{});var Ovt=s(A1e);ldr=r(Ovt,"__init__()"),Ovt.forEach(t),idr=r(XGe," (throws an error)."),XGe.forEach(t),ddr=i(ml),At=n(ml,"DIV",{class:!0});var k6=s(At);T(p8.$$.fragment,k6),cdr=i(k6),y1e=n(k6,"P",{});var Vvt=s(y1e);fdr=r(Vvt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vvt.forEach(t),mdr=i(k6),Dd=n(k6,"P",{});var wee=s(Dd);gdr=r(wee,`Note:
Loading a model from its configuration file does `),L1e=n(wee,"STRONG",{});var Xvt=s(L1e);hdr=r(Xvt,"not"),Xvt.forEach(t),pdr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(wee,"A",{href:!0});var zvt=s(uW);_dr=r(zvt,"from_pretrained()"),zvt.forEach(t),udr=r(wee," to load the model weights."),wee.forEach(t),bdr=i(k6),T(eT.$$.fragment,k6),k6.forEach(t),vdr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(_8.$$.fragment,Ea),Fdr=i(Ea),x1e=n(Ea,"P",{});var Wvt=s(x1e);Tdr=r(Wvt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Wvt.forEach(t),Mdr=i(Ea),Ya=n(Ea,"P",{});var S6=s(Ya);Edr=r(S6,"The model class to instantiate is selected based on the "),$1e=n(S6,"CODE",{});var Qvt=s($1e);Cdr=r(Qvt,"model_type"),Qvt.forEach(t),wdr=r(S6,` property of the config object (either
passed as an argument or loaded from `),k1e=n(S6,"CODE",{});var Hvt=s(k1e);Adr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),ydr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=n(S6,"CODE",{});var Uvt=s(S1e);Ldr=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),xdr=r(S6,":"),S6.forEach(t),$dr=i(Ea),R1e=n(Ea,"UL",{});var Jvt=s(R1e);oT=n(Jvt,"LI",{});var zSe=s(oT);P1e=n(zSe,"STRONG",{});var Yvt=s(P1e);kdr=r(Yvt,"maskformer"),Yvt.forEach(t),Sdr=r(zSe," \u2014 "),bW=n(zSe,"A",{href:!0});var Kvt=s(bW);Rdr=r(Kvt,"MaskFormerForInstanceSegmentation"),Kvt.forEach(t),Pdr=r(zSe," (MaskFormer model)"),zSe.forEach(t),Jvt.forEach(t),Bdr=i(Ea),rT=n(Ea,"P",{});var WSe=s(rT);Idr=r(WSe,"The model is set in evaluation mode by default using "),B1e=n(WSe,"CODE",{});var Zvt=s(B1e);Ndr=r(Zvt,"model.eval()"),Zvt.forEach(t),qdr=r(WSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=n(WSe,"CODE",{});var eFt=s(I1e);jdr=r(eFt,"model.train()"),eFt.forEach(t),WSe.forEach(t),Ddr=i(Ea),T(tT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),jje=i(f),Gd=n(f,"H2",{class:!0});var zGe=s(Gd);aT=n(zGe,"A",{id:!0,class:!0,href:!0});var oFt=s(aT);N1e=n(oFt,"SPAN",{});var rFt=s(N1e);T(u8.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),Gdr=i(zGe),q1e=n(zGe,"SPAN",{});var tFt=s(q1e);Odr=r(tFt,"TFAutoModel"),tFt.forEach(t),zGe.forEach(t),Dje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(b8.$$.fragment,gl),Vdr=i(gl),Od=n(gl,"P",{});var Aee=s(Od);Xdr=r(Aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=n(Aee,"A",{href:!0});var aFt=s(vW);zdr=r(aFt,"from_pretrained()"),aFt.forEach(t),Wdr=r(Aee," class method or the "),FW=n(Aee,"A",{href:!0});var nFt=s(FW);Qdr=r(nFt,"from_config()"),nFt.forEach(t),Hdr=r(Aee,` class
method.`),Aee.forEach(t),Udr=i(gl),v8=n(gl,"P",{});var WGe=s(v8);Jdr=r(WGe,"This class cannot be instantiated directly using "),j1e=n(WGe,"CODE",{});var sFt=s(j1e);Ydr=r(sFt,"__init__()"),sFt.forEach(t),Kdr=r(WGe," (throws an error)."),WGe.forEach(t),Zdr=i(gl),yt=n(gl,"DIV",{class:!0});var R6=s(yt);T(F8.$$.fragment,R6),ecr=i(R6),D1e=n(R6,"P",{});var lFt=s(D1e);ocr=r(lFt,"Instantiates one of the base model classes of the library from a configuration."),lFt.forEach(t),rcr=i(R6),Vd=n(R6,"P",{});var yee=s(Vd);tcr=r(yee,`Note:
Loading a model from its configuration file does `),G1e=n(yee,"STRONG",{});var iFt=s(G1e);acr=r(iFt,"not"),iFt.forEach(t),ncr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(yee,"A",{href:!0});var dFt=s(TW);scr=r(dFt,"from_pretrained()"),dFt.forEach(t),lcr=r(yee," to load the model weights."),yee.forEach(t),icr=i(R6),T(nT.$$.fragment,R6),R6.forEach(t),dcr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(T8.$$.fragment,hl),ccr=i(hl),O1e=n(hl,"P",{});var cFt=s(O1e);fcr=r(cFt,"Instantiate one of the base model classes of the library from a pretrained model."),cFt.forEach(t),mcr=i(hl),Ka=n(hl,"P",{});var P6=s(Ka);gcr=r(P6,"The model class to instantiate is selected based on the "),V1e=n(P6,"CODE",{});var fFt=s(V1e);hcr=r(fFt,"model_type"),fFt.forEach(t),pcr=r(P6,` property of the config object (either
passed as an argument or loaded from `),X1e=n(P6,"CODE",{});var mFt=s(X1e);_cr=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),ucr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(P6,"CODE",{});var gFt=s(z1e);bcr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),vcr=r(P6,":"),P6.forEach(t),Fcr=i(hl),q=n(hl,"UL",{});var D=s(q);sT=n(D,"LI",{});var QSe=s(sT);W1e=n(QSe,"STRONG",{});var hFt=s(W1e);Tcr=r(hFt,"albert"),hFt.forEach(t),Mcr=r(QSe," \u2014 "),MW=n(QSe,"A",{href:!0});var pFt=s(MW);Ecr=r(pFt,"TFAlbertModel"),pFt.forEach(t),Ccr=r(QSe," (ALBERT model)"),QSe.forEach(t),wcr=i(D),lT=n(D,"LI",{});var HSe=s(lT);Q1e=n(HSe,"STRONG",{});var _Ft=s(Q1e);Acr=r(_Ft,"bart"),_Ft.forEach(t),ycr=r(HSe," \u2014 "),EW=n(HSe,"A",{href:!0});var uFt=s(EW);Lcr=r(uFt,"TFBartModel"),uFt.forEach(t),xcr=r(HSe," (BART model)"),HSe.forEach(t),$cr=i(D),iT=n(D,"LI",{});var USe=s(iT);H1e=n(USe,"STRONG",{});var bFt=s(H1e);kcr=r(bFt,"bert"),bFt.forEach(t),Scr=r(USe," \u2014 "),CW=n(USe,"A",{href:!0});var vFt=s(CW);Rcr=r(vFt,"TFBertModel"),vFt.forEach(t),Pcr=r(USe," (BERT model)"),USe.forEach(t),Bcr=i(D),dT=n(D,"LI",{});var JSe=s(dT);U1e=n(JSe,"STRONG",{});var FFt=s(U1e);Icr=r(FFt,"blenderbot"),FFt.forEach(t),Ncr=r(JSe," \u2014 "),wW=n(JSe,"A",{href:!0});var TFt=s(wW);qcr=r(TFt,"TFBlenderbotModel"),TFt.forEach(t),jcr=r(JSe," (Blenderbot model)"),JSe.forEach(t),Dcr=i(D),cT=n(D,"LI",{});var YSe=s(cT);J1e=n(YSe,"STRONG",{});var MFt=s(J1e);Gcr=r(MFt,"blenderbot-small"),MFt.forEach(t),Ocr=r(YSe," \u2014 "),AW=n(YSe,"A",{href:!0});var EFt=s(AW);Vcr=r(EFt,"TFBlenderbotSmallModel"),EFt.forEach(t),Xcr=r(YSe," (BlenderbotSmall model)"),YSe.forEach(t),zcr=i(D),fT=n(D,"LI",{});var KSe=s(fT);Y1e=n(KSe,"STRONG",{});var CFt=s(Y1e);Wcr=r(CFt,"camembert"),CFt.forEach(t),Qcr=r(KSe," \u2014 "),yW=n(KSe,"A",{href:!0});var wFt=s(yW);Hcr=r(wFt,"TFCamembertModel"),wFt.forEach(t),Ucr=r(KSe," (CamemBERT model)"),KSe.forEach(t),Jcr=i(D),mT=n(D,"LI",{});var ZSe=s(mT);K1e=n(ZSe,"STRONG",{});var AFt=s(K1e);Ycr=r(AFt,"clip"),AFt.forEach(t),Kcr=r(ZSe," \u2014 "),LW=n(ZSe,"A",{href:!0});var yFt=s(LW);Zcr=r(yFt,"TFCLIPModel"),yFt.forEach(t),efr=r(ZSe," (CLIP model)"),ZSe.forEach(t),ofr=i(D),gT=n(D,"LI",{});var eRe=s(gT);Z1e=n(eRe,"STRONG",{});var LFt=s(Z1e);rfr=r(LFt,"convbert"),LFt.forEach(t),tfr=r(eRe," \u2014 "),xW=n(eRe,"A",{href:!0});var xFt=s(xW);afr=r(xFt,"TFConvBertModel"),xFt.forEach(t),nfr=r(eRe," (ConvBERT model)"),eRe.forEach(t),sfr=i(D),hT=n(D,"LI",{});var oRe=s(hT);e7e=n(oRe,"STRONG",{});var $Ft=s(e7e);lfr=r($Ft,"convnext"),$Ft.forEach(t),ifr=r(oRe," \u2014 "),$W=n(oRe,"A",{href:!0});var kFt=s($W);dfr=r(kFt,"TFConvNextModel"),kFt.forEach(t),cfr=r(oRe," (ConvNext model)"),oRe.forEach(t),ffr=i(D),pT=n(D,"LI",{});var rRe=s(pT);o7e=n(rRe,"STRONG",{});var SFt=s(o7e);mfr=r(SFt,"ctrl"),SFt.forEach(t),gfr=r(rRe," \u2014 "),kW=n(rRe,"A",{href:!0});var RFt=s(kW);hfr=r(RFt,"TFCTRLModel"),RFt.forEach(t),pfr=r(rRe," (CTRL model)"),rRe.forEach(t),_fr=i(D),_T=n(D,"LI",{});var tRe=s(_T);r7e=n(tRe,"STRONG",{});var PFt=s(r7e);ufr=r(PFt,"data2vec-vision"),PFt.forEach(t),bfr=r(tRe," \u2014 "),SW=n(tRe,"A",{href:!0});var BFt=s(SW);vfr=r(BFt,"TFData2VecVisionModel"),BFt.forEach(t),Ffr=r(tRe," (Data2VecVision model)"),tRe.forEach(t),Tfr=i(D),uT=n(D,"LI",{});var aRe=s(uT);t7e=n(aRe,"STRONG",{});var IFt=s(t7e);Mfr=r(IFt,"deberta"),IFt.forEach(t),Efr=r(aRe," \u2014 "),RW=n(aRe,"A",{href:!0});var NFt=s(RW);Cfr=r(NFt,"TFDebertaModel"),NFt.forEach(t),wfr=r(aRe," (DeBERTa model)"),aRe.forEach(t),Afr=i(D),bT=n(D,"LI",{});var nRe=s(bT);a7e=n(nRe,"STRONG",{});var qFt=s(a7e);yfr=r(qFt,"deberta-v2"),qFt.forEach(t),Lfr=r(nRe," \u2014 "),PW=n(nRe,"A",{href:!0});var jFt=s(PW);xfr=r(jFt,"TFDebertaV2Model"),jFt.forEach(t),$fr=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),kfr=i(D),vT=n(D,"LI",{});var sRe=s(vT);n7e=n(sRe,"STRONG",{});var DFt=s(n7e);Sfr=r(DFt,"distilbert"),DFt.forEach(t),Rfr=r(sRe," \u2014 "),BW=n(sRe,"A",{href:!0});var GFt=s(BW);Pfr=r(GFt,"TFDistilBertModel"),GFt.forEach(t),Bfr=r(sRe," (DistilBERT model)"),sRe.forEach(t),Ifr=i(D),FT=n(D,"LI",{});var lRe=s(FT);s7e=n(lRe,"STRONG",{});var OFt=s(s7e);Nfr=r(OFt,"dpr"),OFt.forEach(t),qfr=r(lRe," \u2014 "),IW=n(lRe,"A",{href:!0});var VFt=s(IW);jfr=r(VFt,"TFDPRQuestionEncoder"),VFt.forEach(t),Dfr=r(lRe," (DPR model)"),lRe.forEach(t),Gfr=i(D),TT=n(D,"LI",{});var iRe=s(TT);l7e=n(iRe,"STRONG",{});var XFt=s(l7e);Ofr=r(XFt,"electra"),XFt.forEach(t),Vfr=r(iRe," \u2014 "),NW=n(iRe,"A",{href:!0});var zFt=s(NW);Xfr=r(zFt,"TFElectraModel"),zFt.forEach(t),zfr=r(iRe," (ELECTRA model)"),iRe.forEach(t),Wfr=i(D),MT=n(D,"LI",{});var dRe=s(MT);i7e=n(dRe,"STRONG",{});var WFt=s(i7e);Qfr=r(WFt,"flaubert"),WFt.forEach(t),Hfr=r(dRe," \u2014 "),qW=n(dRe,"A",{href:!0});var QFt=s(qW);Ufr=r(QFt,"TFFlaubertModel"),QFt.forEach(t),Jfr=r(dRe," (FlauBERT model)"),dRe.forEach(t),Yfr=i(D),Is=n(D,"LI",{});var Z$=s(Is);d7e=n(Z$,"STRONG",{});var HFt=s(d7e);Kfr=r(HFt,"funnel"),HFt.forEach(t),Zfr=r(Z$," \u2014 "),jW=n(Z$,"A",{href:!0});var UFt=s(jW);emr=r(UFt,"TFFunnelModel"),UFt.forEach(t),omr=r(Z$," or "),DW=n(Z$,"A",{href:!0});var JFt=s(DW);rmr=r(JFt,"TFFunnelBaseModel"),JFt.forEach(t),tmr=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),amr=i(D),ET=n(D,"LI",{});var cRe=s(ET);c7e=n(cRe,"STRONG",{});var YFt=s(c7e);nmr=r(YFt,"gpt2"),YFt.forEach(t),smr=r(cRe," \u2014 "),GW=n(cRe,"A",{href:!0});var KFt=s(GW);lmr=r(KFt,"TFGPT2Model"),KFt.forEach(t),imr=r(cRe," (OpenAI GPT-2 model)"),cRe.forEach(t),dmr=i(D),CT=n(D,"LI",{});var fRe=s(CT);f7e=n(fRe,"STRONG",{});var ZFt=s(f7e);cmr=r(ZFt,"gptj"),ZFt.forEach(t),fmr=r(fRe," \u2014 "),OW=n(fRe,"A",{href:!0});var eTt=s(OW);mmr=r(eTt,"TFGPTJModel"),eTt.forEach(t),gmr=r(fRe," (GPT-J model)"),fRe.forEach(t),hmr=i(D),wT=n(D,"LI",{});var mRe=s(wT);m7e=n(mRe,"STRONG",{});var oTt=s(m7e);pmr=r(oTt,"hubert"),oTt.forEach(t),_mr=r(mRe," \u2014 "),VW=n(mRe,"A",{href:!0});var rTt=s(VW);umr=r(rTt,"TFHubertModel"),rTt.forEach(t),bmr=r(mRe," (Hubert model)"),mRe.forEach(t),vmr=i(D),AT=n(D,"LI",{});var gRe=s(AT);g7e=n(gRe,"STRONG",{});var tTt=s(g7e);Fmr=r(tTt,"layoutlm"),tTt.forEach(t),Tmr=r(gRe," \u2014 "),XW=n(gRe,"A",{href:!0});var aTt=s(XW);Mmr=r(aTt,"TFLayoutLMModel"),aTt.forEach(t),Emr=r(gRe," (LayoutLM model)"),gRe.forEach(t),Cmr=i(D),yT=n(D,"LI",{});var hRe=s(yT);h7e=n(hRe,"STRONG",{});var nTt=s(h7e);wmr=r(nTt,"led"),nTt.forEach(t),Amr=r(hRe," \u2014 "),zW=n(hRe,"A",{href:!0});var sTt=s(zW);ymr=r(sTt,"TFLEDModel"),sTt.forEach(t),Lmr=r(hRe," (LED model)"),hRe.forEach(t),xmr=i(D),LT=n(D,"LI",{});var pRe=s(LT);p7e=n(pRe,"STRONG",{});var lTt=s(p7e);$mr=r(lTt,"longformer"),lTt.forEach(t),kmr=r(pRe," \u2014 "),WW=n(pRe,"A",{href:!0});var iTt=s(WW);Smr=r(iTt,"TFLongformerModel"),iTt.forEach(t),Rmr=r(pRe," (Longformer model)"),pRe.forEach(t),Pmr=i(D),xT=n(D,"LI",{});var _Re=s(xT);_7e=n(_Re,"STRONG",{});var dTt=s(_7e);Bmr=r(dTt,"lxmert"),dTt.forEach(t),Imr=r(_Re," \u2014 "),QW=n(_Re,"A",{href:!0});var cTt=s(QW);Nmr=r(cTt,"TFLxmertModel"),cTt.forEach(t),qmr=r(_Re," (LXMERT model)"),_Re.forEach(t),jmr=i(D),$T=n(D,"LI",{});var uRe=s($T);u7e=n(uRe,"STRONG",{});var fTt=s(u7e);Dmr=r(fTt,"marian"),fTt.forEach(t),Gmr=r(uRe," \u2014 "),HW=n(uRe,"A",{href:!0});var mTt=s(HW);Omr=r(mTt,"TFMarianModel"),mTt.forEach(t),Vmr=r(uRe," (Marian model)"),uRe.forEach(t),Xmr=i(D),kT=n(D,"LI",{});var bRe=s(kT);b7e=n(bRe,"STRONG",{});var gTt=s(b7e);zmr=r(gTt,"mbart"),gTt.forEach(t),Wmr=r(bRe," \u2014 "),UW=n(bRe,"A",{href:!0});var hTt=s(UW);Qmr=r(hTt,"TFMBartModel"),hTt.forEach(t),Hmr=r(bRe," (mBART model)"),bRe.forEach(t),Umr=i(D),ST=n(D,"LI",{});var vRe=s(ST);v7e=n(vRe,"STRONG",{});var pTt=s(v7e);Jmr=r(pTt,"mobilebert"),pTt.forEach(t),Ymr=r(vRe," \u2014 "),JW=n(vRe,"A",{href:!0});var _Tt=s(JW);Kmr=r(_Tt,"TFMobileBertModel"),_Tt.forEach(t),Zmr=r(vRe," (MobileBERT model)"),vRe.forEach(t),egr=i(D),RT=n(D,"LI",{});var FRe=s(RT);F7e=n(FRe,"STRONG",{});var uTt=s(F7e);ogr=r(uTt,"mpnet"),uTt.forEach(t),rgr=r(FRe," \u2014 "),YW=n(FRe,"A",{href:!0});var bTt=s(YW);tgr=r(bTt,"TFMPNetModel"),bTt.forEach(t),agr=r(FRe," (MPNet model)"),FRe.forEach(t),ngr=i(D),PT=n(D,"LI",{});var TRe=s(PT);T7e=n(TRe,"STRONG",{});var vTt=s(T7e);sgr=r(vTt,"mt5"),vTt.forEach(t),lgr=r(TRe," \u2014 "),KW=n(TRe,"A",{href:!0});var FTt=s(KW);igr=r(FTt,"TFMT5Model"),FTt.forEach(t),dgr=r(TRe," (mT5 model)"),TRe.forEach(t),cgr=i(D),BT=n(D,"LI",{});var MRe=s(BT);M7e=n(MRe,"STRONG",{});var TTt=s(M7e);fgr=r(TTt,"openai-gpt"),TTt.forEach(t),mgr=r(MRe," \u2014 "),ZW=n(MRe,"A",{href:!0});var MTt=s(ZW);ggr=r(MTt,"TFOpenAIGPTModel"),MTt.forEach(t),hgr=r(MRe," (OpenAI GPT model)"),MRe.forEach(t),pgr=i(D),IT=n(D,"LI",{});var ERe=s(IT);E7e=n(ERe,"STRONG",{});var ETt=s(E7e);_gr=r(ETt,"opt"),ETt.forEach(t),ugr=r(ERe," \u2014 "),eQ=n(ERe,"A",{href:!0});var CTt=s(eQ);bgr=r(CTt,"TFOPTModel"),CTt.forEach(t),vgr=r(ERe," (OPT model)"),ERe.forEach(t),Fgr=i(D),NT=n(D,"LI",{});var CRe=s(NT);C7e=n(CRe,"STRONG",{});var wTt=s(C7e);Tgr=r(wTt,"pegasus"),wTt.forEach(t),Mgr=r(CRe," \u2014 "),oQ=n(CRe,"A",{href:!0});var ATt=s(oQ);Egr=r(ATt,"TFPegasusModel"),ATt.forEach(t),Cgr=r(CRe," (Pegasus model)"),CRe.forEach(t),wgr=i(D),qT=n(D,"LI",{});var wRe=s(qT);w7e=n(wRe,"STRONG",{});var yTt=s(w7e);Agr=r(yTt,"rembert"),yTt.forEach(t),ygr=r(wRe," \u2014 "),rQ=n(wRe,"A",{href:!0});var LTt=s(rQ);Lgr=r(LTt,"TFRemBertModel"),LTt.forEach(t),xgr=r(wRe," (RemBERT model)"),wRe.forEach(t),$gr=i(D),jT=n(D,"LI",{});var ARe=s(jT);A7e=n(ARe,"STRONG",{});var xTt=s(A7e);kgr=r(xTt,"roberta"),xTt.forEach(t),Sgr=r(ARe," \u2014 "),tQ=n(ARe,"A",{href:!0});var $Tt=s(tQ);Rgr=r($Tt,"TFRobertaModel"),$Tt.forEach(t),Pgr=r(ARe," (RoBERTa model)"),ARe.forEach(t),Bgr=i(D),DT=n(D,"LI",{});var yRe=s(DT);y7e=n(yRe,"STRONG",{});var kTt=s(y7e);Igr=r(kTt,"roformer"),kTt.forEach(t),Ngr=r(yRe," \u2014 "),aQ=n(yRe,"A",{href:!0});var STt=s(aQ);qgr=r(STt,"TFRoFormerModel"),STt.forEach(t),jgr=r(yRe," (RoFormer model)"),yRe.forEach(t),Dgr=i(D),GT=n(D,"LI",{});var LRe=s(GT);L7e=n(LRe,"STRONG",{});var RTt=s(L7e);Ggr=r(RTt,"speech_to_text"),RTt.forEach(t),Ogr=r(LRe," \u2014 "),nQ=n(LRe,"A",{href:!0});var PTt=s(nQ);Vgr=r(PTt,"TFSpeech2TextModel"),PTt.forEach(t),Xgr=r(LRe," (Speech2Text model)"),LRe.forEach(t),zgr=i(D),OT=n(D,"LI",{});var xRe=s(OT);x7e=n(xRe,"STRONG",{});var BTt=s(x7e);Wgr=r(BTt,"swin"),BTt.forEach(t),Qgr=r(xRe," \u2014 "),sQ=n(xRe,"A",{href:!0});var ITt=s(sQ);Hgr=r(ITt,"TFSwinModel"),ITt.forEach(t),Ugr=r(xRe," (Swin model)"),xRe.forEach(t),Jgr=i(D),VT=n(D,"LI",{});var $Re=s(VT);$7e=n($Re,"STRONG",{});var NTt=s($7e);Ygr=r(NTt,"t5"),NTt.forEach(t),Kgr=r($Re," \u2014 "),lQ=n($Re,"A",{href:!0});var qTt=s(lQ);Zgr=r(qTt,"TFT5Model"),qTt.forEach(t),ehr=r($Re," (T5 model)"),$Re.forEach(t),ohr=i(D),XT=n(D,"LI",{});var kRe=s(XT);k7e=n(kRe,"STRONG",{});var jTt=s(k7e);rhr=r(jTt,"tapas"),jTt.forEach(t),thr=r(kRe," \u2014 "),iQ=n(kRe,"A",{href:!0});var DTt=s(iQ);ahr=r(DTt,"TFTapasModel"),DTt.forEach(t),nhr=r(kRe," (TAPAS model)"),kRe.forEach(t),shr=i(D),zT=n(D,"LI",{});var SRe=s(zT);S7e=n(SRe,"STRONG",{});var GTt=s(S7e);lhr=r(GTt,"transfo-xl"),GTt.forEach(t),ihr=r(SRe," \u2014 "),dQ=n(SRe,"A",{href:!0});var OTt=s(dQ);dhr=r(OTt,"TFTransfoXLModel"),OTt.forEach(t),chr=r(SRe," (Transformer-XL model)"),SRe.forEach(t),fhr=i(D),WT=n(D,"LI",{});var RRe=s(WT);R7e=n(RRe,"STRONG",{});var VTt=s(R7e);mhr=r(VTt,"vit"),VTt.forEach(t),ghr=r(RRe," \u2014 "),cQ=n(RRe,"A",{href:!0});var XTt=s(cQ);hhr=r(XTt,"TFViTModel"),XTt.forEach(t),phr=r(RRe," (ViT model)"),RRe.forEach(t),_hr=i(D),QT=n(D,"LI",{});var PRe=s(QT);P7e=n(PRe,"STRONG",{});var zTt=s(P7e);uhr=r(zTt,"vit_mae"),zTt.forEach(t),bhr=r(PRe," \u2014 "),fQ=n(PRe,"A",{href:!0});var WTt=s(fQ);vhr=r(WTt,"TFViTMAEModel"),WTt.forEach(t),Fhr=r(PRe," (ViTMAE model)"),PRe.forEach(t),Thr=i(D),HT=n(D,"LI",{});var BRe=s(HT);B7e=n(BRe,"STRONG",{});var QTt=s(B7e);Mhr=r(QTt,"wav2vec2"),QTt.forEach(t),Ehr=r(BRe," \u2014 "),mQ=n(BRe,"A",{href:!0});var HTt=s(mQ);Chr=r(HTt,"TFWav2Vec2Model"),HTt.forEach(t),whr=r(BRe," (Wav2Vec2 model)"),BRe.forEach(t),Ahr=i(D),UT=n(D,"LI",{});var IRe=s(UT);I7e=n(IRe,"STRONG",{});var UTt=s(I7e);yhr=r(UTt,"xlm"),UTt.forEach(t),Lhr=r(IRe," \u2014 "),gQ=n(IRe,"A",{href:!0});var JTt=s(gQ);xhr=r(JTt,"TFXLMModel"),JTt.forEach(t),$hr=r(IRe," (XLM model)"),IRe.forEach(t),khr=i(D),JT=n(D,"LI",{});var NRe=s(JT);N7e=n(NRe,"STRONG",{});var YTt=s(N7e);Shr=r(YTt,"xlm-roberta"),YTt.forEach(t),Rhr=r(NRe," \u2014 "),hQ=n(NRe,"A",{href:!0});var KTt=s(hQ);Phr=r(KTt,"TFXLMRobertaModel"),KTt.forEach(t),Bhr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Ihr=i(D),YT=n(D,"LI",{});var qRe=s(YT);q7e=n(qRe,"STRONG",{});var ZTt=s(q7e);Nhr=r(ZTt,"xlnet"),ZTt.forEach(t),qhr=r(qRe," \u2014 "),pQ=n(qRe,"A",{href:!0});var eMt=s(pQ);jhr=r(eMt,"TFXLNetModel"),eMt.forEach(t),Dhr=r(qRe," (XLNet model)"),qRe.forEach(t),D.forEach(t),Ghr=i(hl),T(KT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Gje=i(f),Xd=n(f,"H2",{class:!0});var QGe=s(Xd);ZT=n(QGe,"A",{id:!0,class:!0,href:!0});var oMt=s(ZT);j7e=n(oMt,"SPAN",{});var rMt=s(j7e);T(M8.$$.fragment,rMt),rMt.forEach(t),oMt.forEach(t),Ohr=i(QGe),D7e=n(QGe,"SPAN",{});var tMt=s(D7e);Vhr=r(tMt,"TFAutoModelForPreTraining"),tMt.forEach(t),QGe.forEach(t),Oje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(E8.$$.fragment,pl),Xhr=i(pl),zd=n(pl,"P",{});var Lee=s(zd);zhr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=n(Lee,"A",{href:!0});var aMt=s(_Q);Whr=r(aMt,"from_pretrained()"),aMt.forEach(t),Qhr=r(Lee," class method or the "),uQ=n(Lee,"A",{href:!0});var nMt=s(uQ);Hhr=r(nMt,"from_config()"),nMt.forEach(t),Uhr=r(Lee,` class
method.`),Lee.forEach(t),Jhr=i(pl),C8=n(pl,"P",{});var HGe=s(C8);Yhr=r(HGe,"This class cannot be instantiated directly using "),G7e=n(HGe,"CODE",{});var sMt=s(G7e);Khr=r(sMt,"__init__()"),sMt.forEach(t),Zhr=r(HGe," (throws an error)."),HGe.forEach(t),epr=i(pl),Lt=n(pl,"DIV",{class:!0});var B6=s(Lt);T(w8.$$.fragment,B6),opr=i(B6),O7e=n(B6,"P",{});var lMt=s(O7e);rpr=r(lMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lMt.forEach(t),tpr=i(B6),Wd=n(B6,"P",{});var xee=s(Wd);apr=r(xee,`Note:
Loading a model from its configuration file does `),V7e=n(xee,"STRONG",{});var iMt=s(V7e);npr=r(iMt,"not"),iMt.forEach(t),spr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(xee,"A",{href:!0});var dMt=s(bQ);lpr=r(dMt,"from_pretrained()"),dMt.forEach(t),ipr=r(xee," to load the model weights."),xee.forEach(t),dpr=i(B6),T(eM.$$.fragment,B6),B6.forEach(t),cpr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(A8.$$.fragment,_l),fpr=i(_l),X7e=n(_l,"P",{});var cMt=s(X7e);mpr=r(cMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cMt.forEach(t),gpr=i(_l),Za=n(_l,"P",{});var I6=s(Za);hpr=r(I6,"The model class to instantiate is selected based on the "),z7e=n(I6,"CODE",{});var fMt=s(z7e);ppr=r(fMt,"model_type"),fMt.forEach(t),_pr=r(I6,` property of the config object (either
passed as an argument or loaded from `),W7e=n(I6,"CODE",{});var mMt=s(W7e);upr=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),bpr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(I6,"CODE",{});var gMt=s(Q7e);vpr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),Fpr=r(I6,":"),I6.forEach(t),Tpr=i(_l),se=n(_l,"UL",{});var le=s(se);oM=n(le,"LI",{});var jRe=s(oM);H7e=n(jRe,"STRONG",{});var hMt=s(H7e);Mpr=r(hMt,"albert"),hMt.forEach(t),Epr=r(jRe," \u2014 "),vQ=n(jRe,"A",{href:!0});var pMt=s(vQ);Cpr=r(pMt,"TFAlbertForPreTraining"),pMt.forEach(t),wpr=r(jRe," (ALBERT model)"),jRe.forEach(t),Apr=i(le),rM=n(le,"LI",{});var DRe=s(rM);U7e=n(DRe,"STRONG",{});var _Mt=s(U7e);ypr=r(_Mt,"bart"),_Mt.forEach(t),Lpr=r(DRe," \u2014 "),FQ=n(DRe,"A",{href:!0});var uMt=s(FQ);xpr=r(uMt,"TFBartForConditionalGeneration"),uMt.forEach(t),$pr=r(DRe," (BART model)"),DRe.forEach(t),kpr=i(le),tM=n(le,"LI",{});var GRe=s(tM);J7e=n(GRe,"STRONG",{});var bMt=s(J7e);Spr=r(bMt,"bert"),bMt.forEach(t),Rpr=r(GRe," \u2014 "),TQ=n(GRe,"A",{href:!0});var vMt=s(TQ);Ppr=r(vMt,"TFBertForPreTraining"),vMt.forEach(t),Bpr=r(GRe," (BERT model)"),GRe.forEach(t),Ipr=i(le),aM=n(le,"LI",{});var ORe=s(aM);Y7e=n(ORe,"STRONG",{});var FMt=s(Y7e);Npr=r(FMt,"camembert"),FMt.forEach(t),qpr=r(ORe," \u2014 "),MQ=n(ORe,"A",{href:!0});var TMt=s(MQ);jpr=r(TMt,"TFCamembertForMaskedLM"),TMt.forEach(t),Dpr=r(ORe," (CamemBERT model)"),ORe.forEach(t),Gpr=i(le),nM=n(le,"LI",{});var VRe=s(nM);K7e=n(VRe,"STRONG",{});var MMt=s(K7e);Opr=r(MMt,"ctrl"),MMt.forEach(t),Vpr=r(VRe," \u2014 "),EQ=n(VRe,"A",{href:!0});var EMt=s(EQ);Xpr=r(EMt,"TFCTRLLMHeadModel"),EMt.forEach(t),zpr=r(VRe," (CTRL model)"),VRe.forEach(t),Wpr=i(le),sM=n(le,"LI",{});var XRe=s(sM);Z7e=n(XRe,"STRONG",{});var CMt=s(Z7e);Qpr=r(CMt,"distilbert"),CMt.forEach(t),Hpr=r(XRe," \u2014 "),CQ=n(XRe,"A",{href:!0});var wMt=s(CQ);Upr=r(wMt,"TFDistilBertForMaskedLM"),wMt.forEach(t),Jpr=r(XRe," (DistilBERT model)"),XRe.forEach(t),Ypr=i(le),lM=n(le,"LI",{});var zRe=s(lM);ebe=n(zRe,"STRONG",{});var AMt=s(ebe);Kpr=r(AMt,"electra"),AMt.forEach(t),Zpr=r(zRe," \u2014 "),wQ=n(zRe,"A",{href:!0});var yMt=s(wQ);e_r=r(yMt,"TFElectraForPreTraining"),yMt.forEach(t),o_r=r(zRe," (ELECTRA model)"),zRe.forEach(t),r_r=i(le),iM=n(le,"LI",{});var WRe=s(iM);obe=n(WRe,"STRONG",{});var LMt=s(obe);t_r=r(LMt,"flaubert"),LMt.forEach(t),a_r=r(WRe," \u2014 "),AQ=n(WRe,"A",{href:!0});var xMt=s(AQ);n_r=r(xMt,"TFFlaubertWithLMHeadModel"),xMt.forEach(t),s_r=r(WRe," (FlauBERT model)"),WRe.forEach(t),l_r=i(le),dM=n(le,"LI",{});var QRe=s(dM);rbe=n(QRe,"STRONG",{});var $Mt=s(rbe);i_r=r($Mt,"funnel"),$Mt.forEach(t),d_r=r(QRe," \u2014 "),yQ=n(QRe,"A",{href:!0});var kMt=s(yQ);c_r=r(kMt,"TFFunnelForPreTraining"),kMt.forEach(t),f_r=r(QRe," (Funnel Transformer model)"),QRe.forEach(t),m_r=i(le),cM=n(le,"LI",{});var HRe=s(cM);tbe=n(HRe,"STRONG",{});var SMt=s(tbe);g_r=r(SMt,"gpt2"),SMt.forEach(t),h_r=r(HRe," \u2014 "),LQ=n(HRe,"A",{href:!0});var RMt=s(LQ);p_r=r(RMt,"TFGPT2LMHeadModel"),RMt.forEach(t),__r=r(HRe," (OpenAI GPT-2 model)"),HRe.forEach(t),u_r=i(le),fM=n(le,"LI",{});var URe=s(fM);abe=n(URe,"STRONG",{});var PMt=s(abe);b_r=r(PMt,"layoutlm"),PMt.forEach(t),v_r=r(URe," \u2014 "),xQ=n(URe,"A",{href:!0});var BMt=s(xQ);F_r=r(BMt,"TFLayoutLMForMaskedLM"),BMt.forEach(t),T_r=r(URe," (LayoutLM model)"),URe.forEach(t),M_r=i(le),mM=n(le,"LI",{});var JRe=s(mM);nbe=n(JRe,"STRONG",{});var IMt=s(nbe);E_r=r(IMt,"lxmert"),IMt.forEach(t),C_r=r(JRe," \u2014 "),$Q=n(JRe,"A",{href:!0});var NMt=s($Q);w_r=r(NMt,"TFLxmertForPreTraining"),NMt.forEach(t),A_r=r(JRe," (LXMERT model)"),JRe.forEach(t),y_r=i(le),gM=n(le,"LI",{});var YRe=s(gM);sbe=n(YRe,"STRONG",{});var qMt=s(sbe);L_r=r(qMt,"mobilebert"),qMt.forEach(t),x_r=r(YRe," \u2014 "),kQ=n(YRe,"A",{href:!0});var jMt=s(kQ);$_r=r(jMt,"TFMobileBertForPreTraining"),jMt.forEach(t),k_r=r(YRe," (MobileBERT model)"),YRe.forEach(t),S_r=i(le),hM=n(le,"LI",{});var KRe=s(hM);lbe=n(KRe,"STRONG",{});var DMt=s(lbe);R_r=r(DMt,"mpnet"),DMt.forEach(t),P_r=r(KRe," \u2014 "),SQ=n(KRe,"A",{href:!0});var GMt=s(SQ);B_r=r(GMt,"TFMPNetForMaskedLM"),GMt.forEach(t),I_r=r(KRe," (MPNet model)"),KRe.forEach(t),N_r=i(le),pM=n(le,"LI",{});var ZRe=s(pM);ibe=n(ZRe,"STRONG",{});var OMt=s(ibe);q_r=r(OMt,"openai-gpt"),OMt.forEach(t),j_r=r(ZRe," \u2014 "),RQ=n(ZRe,"A",{href:!0});var VMt=s(RQ);D_r=r(VMt,"TFOpenAIGPTLMHeadModel"),VMt.forEach(t),G_r=r(ZRe," (OpenAI GPT model)"),ZRe.forEach(t),O_r=i(le),_M=n(le,"LI",{});var ePe=s(_M);dbe=n(ePe,"STRONG",{});var XMt=s(dbe);V_r=r(XMt,"roberta"),XMt.forEach(t),X_r=r(ePe," \u2014 "),PQ=n(ePe,"A",{href:!0});var zMt=s(PQ);z_r=r(zMt,"TFRobertaForMaskedLM"),zMt.forEach(t),W_r=r(ePe," (RoBERTa model)"),ePe.forEach(t),Q_r=i(le),uM=n(le,"LI",{});var oPe=s(uM);cbe=n(oPe,"STRONG",{});var WMt=s(cbe);H_r=r(WMt,"t5"),WMt.forEach(t),U_r=r(oPe," \u2014 "),BQ=n(oPe,"A",{href:!0});var QMt=s(BQ);J_r=r(QMt,"TFT5ForConditionalGeneration"),QMt.forEach(t),Y_r=r(oPe," (T5 model)"),oPe.forEach(t),K_r=i(le),bM=n(le,"LI",{});var rPe=s(bM);fbe=n(rPe,"STRONG",{});var HMt=s(fbe);Z_r=r(HMt,"tapas"),HMt.forEach(t),eur=r(rPe," \u2014 "),IQ=n(rPe,"A",{href:!0});var UMt=s(IQ);our=r(UMt,"TFTapasForMaskedLM"),UMt.forEach(t),rur=r(rPe," (TAPAS model)"),rPe.forEach(t),tur=i(le),vM=n(le,"LI",{});var tPe=s(vM);mbe=n(tPe,"STRONG",{});var JMt=s(mbe);aur=r(JMt,"transfo-xl"),JMt.forEach(t),nur=r(tPe," \u2014 "),NQ=n(tPe,"A",{href:!0});var YMt=s(NQ);sur=r(YMt,"TFTransfoXLLMHeadModel"),YMt.forEach(t),lur=r(tPe," (Transformer-XL model)"),tPe.forEach(t),iur=i(le),FM=n(le,"LI",{});var aPe=s(FM);gbe=n(aPe,"STRONG",{});var KMt=s(gbe);dur=r(KMt,"vit_mae"),KMt.forEach(t),cur=r(aPe," \u2014 "),qQ=n(aPe,"A",{href:!0});var ZMt=s(qQ);fur=r(ZMt,"TFViTMAEForPreTraining"),ZMt.forEach(t),mur=r(aPe," (ViTMAE model)"),aPe.forEach(t),gur=i(le),TM=n(le,"LI",{});var nPe=s(TM);hbe=n(nPe,"STRONG",{});var eEt=s(hbe);hur=r(eEt,"xlm"),eEt.forEach(t),pur=r(nPe," \u2014 "),jQ=n(nPe,"A",{href:!0});var oEt=s(jQ);_ur=r(oEt,"TFXLMWithLMHeadModel"),oEt.forEach(t),uur=r(nPe," (XLM model)"),nPe.forEach(t),bur=i(le),MM=n(le,"LI",{});var sPe=s(MM);pbe=n(sPe,"STRONG",{});var rEt=s(pbe);vur=r(rEt,"xlm-roberta"),rEt.forEach(t),Fur=r(sPe," \u2014 "),DQ=n(sPe,"A",{href:!0});var tEt=s(DQ);Tur=r(tEt,"TFXLMRobertaForMaskedLM"),tEt.forEach(t),Mur=r(sPe," (XLM-RoBERTa model)"),sPe.forEach(t),Eur=i(le),EM=n(le,"LI",{});var lPe=s(EM);_be=n(lPe,"STRONG",{});var aEt=s(_be);Cur=r(aEt,"xlnet"),aEt.forEach(t),wur=r(lPe," \u2014 "),GQ=n(lPe,"A",{href:!0});var nEt=s(GQ);Aur=r(nEt,"TFXLNetLMHeadModel"),nEt.forEach(t),yur=r(lPe," (XLNet model)"),lPe.forEach(t),le.forEach(t),Lur=i(_l),T(CM.$$.fragment,_l),_l.forEach(t),pl.forEach(t),Vje=i(f),Qd=n(f,"H2",{class:!0});var UGe=s(Qd);wM=n(UGe,"A",{id:!0,class:!0,href:!0});var sEt=s(wM);ube=n(sEt,"SPAN",{});var lEt=s(ube);T(y8.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),xur=i(UGe),bbe=n(UGe,"SPAN",{});var iEt=s(bbe);$ur=r(iEt,"TFAutoModelForCausalLM"),iEt.forEach(t),UGe.forEach(t),Xje=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(L8.$$.fragment,ul),kur=i(ul),Hd=n(ul,"P",{});var $ee=s(Hd);Sur=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=n($ee,"A",{href:!0});var dEt=s(OQ);Rur=r(dEt,"from_pretrained()"),dEt.forEach(t),Pur=r($ee," class method or the "),VQ=n($ee,"A",{href:!0});var cEt=s(VQ);Bur=r(cEt,"from_config()"),cEt.forEach(t),Iur=r($ee,` class
method.`),$ee.forEach(t),Nur=i(ul),x8=n(ul,"P",{});var JGe=s(x8);qur=r(JGe,"This class cannot be instantiated directly using "),vbe=n(JGe,"CODE",{});var fEt=s(vbe);jur=r(fEt,"__init__()"),fEt.forEach(t),Dur=r(JGe," (throws an error)."),JGe.forEach(t),Gur=i(ul),xt=n(ul,"DIV",{class:!0});var N6=s(xt);T($8.$$.fragment,N6),Our=i(N6),Fbe=n(N6,"P",{});var mEt=s(Fbe);Vur=r(mEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mEt.forEach(t),Xur=i(N6),Ud=n(N6,"P",{});var kee=s(Ud);zur=r(kee,`Note:
Loading a model from its configuration file does `),Tbe=n(kee,"STRONG",{});var gEt=s(Tbe);Wur=r(gEt,"not"),gEt.forEach(t),Qur=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(kee,"A",{href:!0});var hEt=s(XQ);Hur=r(hEt,"from_pretrained()"),hEt.forEach(t),Uur=r(kee," to load the model weights."),kee.forEach(t),Jur=i(N6),T(AM.$$.fragment,N6),N6.forEach(t),Yur=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(k8.$$.fragment,bl),Kur=i(bl),Mbe=n(bl,"P",{});var pEt=s(Mbe);Zur=r(pEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pEt.forEach(t),e4r=i(bl),en=n(bl,"P",{});var q6=s(en);o4r=r(q6,"The model class to instantiate is selected based on the "),Ebe=n(q6,"CODE",{});var _Et=s(Ebe);r4r=r(_Et,"model_type"),_Et.forEach(t),t4r=r(q6,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(q6,"CODE",{});var uEt=s(Cbe);a4r=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),n4r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(q6,"CODE",{});var bEt=s(wbe);s4r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),l4r=r(q6,":"),q6.forEach(t),i4r=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);yM=n(Ce,"LI",{});var iPe=s(yM);Abe=n(iPe,"STRONG",{});var vEt=s(Abe);d4r=r(vEt,"bert"),vEt.forEach(t),c4r=r(iPe," \u2014 "),zQ=n(iPe,"A",{href:!0});var FEt=s(zQ);f4r=r(FEt,"TFBertLMHeadModel"),FEt.forEach(t),m4r=r(iPe," (BERT model)"),iPe.forEach(t),g4r=i(Ce),LM=n(Ce,"LI",{});var dPe=s(LM);ybe=n(dPe,"STRONG",{});var TEt=s(ybe);h4r=r(TEt,"camembert"),TEt.forEach(t),p4r=r(dPe," \u2014 "),WQ=n(dPe,"A",{href:!0});var MEt=s(WQ);_4r=r(MEt,"TFCamembertForCausalLM"),MEt.forEach(t),u4r=r(dPe," (CamemBERT model)"),dPe.forEach(t),b4r=i(Ce),xM=n(Ce,"LI",{});var cPe=s(xM);Lbe=n(cPe,"STRONG",{});var EEt=s(Lbe);v4r=r(EEt,"ctrl"),EEt.forEach(t),F4r=r(cPe," \u2014 "),QQ=n(cPe,"A",{href:!0});var CEt=s(QQ);T4r=r(CEt,"TFCTRLLMHeadModel"),CEt.forEach(t),M4r=r(cPe," (CTRL model)"),cPe.forEach(t),E4r=i(Ce),$M=n(Ce,"LI",{});var fPe=s($M);xbe=n(fPe,"STRONG",{});var wEt=s(xbe);C4r=r(wEt,"gpt2"),wEt.forEach(t),w4r=r(fPe," \u2014 "),HQ=n(fPe,"A",{href:!0});var AEt=s(HQ);A4r=r(AEt,"TFGPT2LMHeadModel"),AEt.forEach(t),y4r=r(fPe," (OpenAI GPT-2 model)"),fPe.forEach(t),L4r=i(Ce),kM=n(Ce,"LI",{});var mPe=s(kM);$be=n(mPe,"STRONG",{});var yEt=s($be);x4r=r(yEt,"gptj"),yEt.forEach(t),$4r=r(mPe," \u2014 "),UQ=n(mPe,"A",{href:!0});var LEt=s(UQ);k4r=r(LEt,"TFGPTJForCausalLM"),LEt.forEach(t),S4r=r(mPe," (GPT-J model)"),mPe.forEach(t),R4r=i(Ce),SM=n(Ce,"LI",{});var gPe=s(SM);kbe=n(gPe,"STRONG",{});var xEt=s(kbe);P4r=r(xEt,"openai-gpt"),xEt.forEach(t),B4r=r(gPe," \u2014 "),JQ=n(gPe,"A",{href:!0});var $Et=s(JQ);I4r=r($Et,"TFOpenAIGPTLMHeadModel"),$Et.forEach(t),N4r=r(gPe," (OpenAI GPT model)"),gPe.forEach(t),q4r=i(Ce),RM=n(Ce,"LI",{});var hPe=s(RM);Sbe=n(hPe,"STRONG",{});var kEt=s(Sbe);j4r=r(kEt,"opt"),kEt.forEach(t),D4r=r(hPe," \u2014 "),YQ=n(hPe,"A",{href:!0});var SEt=s(YQ);G4r=r(SEt,"TFOPTForCausalLM"),SEt.forEach(t),O4r=r(hPe," (OPT model)"),hPe.forEach(t),V4r=i(Ce),PM=n(Ce,"LI",{});var pPe=s(PM);Rbe=n(pPe,"STRONG",{});var REt=s(Rbe);X4r=r(REt,"rembert"),REt.forEach(t),z4r=r(pPe," \u2014 "),KQ=n(pPe,"A",{href:!0});var PEt=s(KQ);W4r=r(PEt,"TFRemBertForCausalLM"),PEt.forEach(t),Q4r=r(pPe," (RemBERT model)"),pPe.forEach(t),H4r=i(Ce),BM=n(Ce,"LI",{});var _Pe=s(BM);Pbe=n(_Pe,"STRONG",{});var BEt=s(Pbe);U4r=r(BEt,"roberta"),BEt.forEach(t),J4r=r(_Pe," \u2014 "),ZQ=n(_Pe,"A",{href:!0});var IEt=s(ZQ);Y4r=r(IEt,"TFRobertaForCausalLM"),IEt.forEach(t),K4r=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),Z4r=i(Ce),IM=n(Ce,"LI",{});var uPe=s(IM);Bbe=n(uPe,"STRONG",{});var NEt=s(Bbe);e1r=r(NEt,"roformer"),NEt.forEach(t),o1r=r(uPe," \u2014 "),eH=n(uPe,"A",{href:!0});var qEt=s(eH);r1r=r(qEt,"TFRoFormerForCausalLM"),qEt.forEach(t),t1r=r(uPe," (RoFormer model)"),uPe.forEach(t),a1r=i(Ce),NM=n(Ce,"LI",{});var bPe=s(NM);Ibe=n(bPe,"STRONG",{});var jEt=s(Ibe);n1r=r(jEt,"transfo-xl"),jEt.forEach(t),s1r=r(bPe," \u2014 "),oH=n(bPe,"A",{href:!0});var DEt=s(oH);l1r=r(DEt,"TFTransfoXLLMHeadModel"),DEt.forEach(t),i1r=r(bPe," (Transformer-XL model)"),bPe.forEach(t),d1r=i(Ce),qM=n(Ce,"LI",{});var vPe=s(qM);Nbe=n(vPe,"STRONG",{});var GEt=s(Nbe);c1r=r(GEt,"xlm"),GEt.forEach(t),f1r=r(vPe," \u2014 "),rH=n(vPe,"A",{href:!0});var OEt=s(rH);m1r=r(OEt,"TFXLMWithLMHeadModel"),OEt.forEach(t),g1r=r(vPe," (XLM model)"),vPe.forEach(t),h1r=i(Ce),jM=n(Ce,"LI",{});var FPe=s(jM);qbe=n(FPe,"STRONG",{});var VEt=s(qbe);p1r=r(VEt,"xlnet"),VEt.forEach(t),_1r=r(FPe," \u2014 "),tH=n(FPe,"A",{href:!0});var XEt=s(tH);u1r=r(XEt,"TFXLNetLMHeadModel"),XEt.forEach(t),b1r=r(FPe," (XLNet model)"),FPe.forEach(t),Ce.forEach(t),v1r=i(bl),T(DM.$$.fragment,bl),bl.forEach(t),ul.forEach(t),zje=i(f),Jd=n(f,"H2",{class:!0});var YGe=s(Jd);GM=n(YGe,"A",{id:!0,class:!0,href:!0});var zEt=s(GM);jbe=n(zEt,"SPAN",{});var WEt=s(jbe);T(S8.$$.fragment,WEt),WEt.forEach(t),zEt.forEach(t),F1r=i(YGe),Dbe=n(YGe,"SPAN",{});var QEt=s(Dbe);T1r=r(QEt,"TFAutoModelForImageClassification"),QEt.forEach(t),YGe.forEach(t),Wje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(R8.$$.fragment,vl),M1r=i(vl),Yd=n(vl,"P",{});var See=s(Yd);E1r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aH=n(See,"A",{href:!0});var HEt=s(aH);C1r=r(HEt,"from_pretrained()"),HEt.forEach(t),w1r=r(See," class method or the "),nH=n(See,"A",{href:!0});var UEt=s(nH);A1r=r(UEt,"from_config()"),UEt.forEach(t),y1r=r(See,` class
method.`),See.forEach(t),L1r=i(vl),P8=n(vl,"P",{});var KGe=s(P8);x1r=r(KGe,"This class cannot be instantiated directly using "),Gbe=n(KGe,"CODE",{});var JEt=s(Gbe);$1r=r(JEt,"__init__()"),JEt.forEach(t),k1r=r(KGe," (throws an error)."),KGe.forEach(t),S1r=i(vl),$t=n(vl,"DIV",{class:!0});var j6=s($t);T(B8.$$.fragment,j6),R1r=i(j6),Obe=n(j6,"P",{});var YEt=s(Obe);P1r=r(YEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YEt.forEach(t),B1r=i(j6),Kd=n(j6,"P",{});var Ree=s(Kd);I1r=r(Ree,`Note:
Loading a model from its configuration file does `),Vbe=n(Ree,"STRONG",{});var KEt=s(Vbe);N1r=r(KEt,"not"),KEt.forEach(t),q1r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(Ree,"A",{href:!0});var ZEt=s(sH);j1r=r(ZEt,"from_pretrained()"),ZEt.forEach(t),D1r=r(Ree," to load the model weights."),Ree.forEach(t),G1r=i(j6),T(OM.$$.fragment,j6),j6.forEach(t),O1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(I8.$$.fragment,Fl),V1r=i(Fl),Xbe=n(Fl,"P",{});var eCt=s(Xbe);X1r=r(eCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eCt.forEach(t),z1r=i(Fl),on=n(Fl,"P",{});var D6=s(on);W1r=r(D6,"The model class to instantiate is selected based on the "),zbe=n(D6,"CODE",{});var oCt=s(zbe);Q1r=r(oCt,"model_type"),oCt.forEach(t),H1r=r(D6,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(D6,"CODE",{});var rCt=s(Wbe);U1r=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),J1r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(D6,"CODE",{});var tCt=s(Qbe);Y1r=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),K1r=r(D6,":"),D6.forEach(t),Z1r=i(Fl),rn=n(Fl,"UL",{});var G6=s(rn);VM=n(G6,"LI",{});var TPe=s(VM);Hbe=n(TPe,"STRONG",{});var aCt=s(Hbe);e7r=r(aCt,"convnext"),aCt.forEach(t),o7r=r(TPe," \u2014 "),lH=n(TPe,"A",{href:!0});var nCt=s(lH);r7r=r(nCt,"TFConvNextForImageClassification"),nCt.forEach(t),t7r=r(TPe," (ConvNext model)"),TPe.forEach(t),a7r=i(G6),XM=n(G6,"LI",{});var MPe=s(XM);Ube=n(MPe,"STRONG",{});var sCt=s(Ube);n7r=r(sCt,"data2vec-vision"),sCt.forEach(t),s7r=r(MPe," \u2014 "),iH=n(MPe,"A",{href:!0});var lCt=s(iH);l7r=r(lCt,"TFData2VecVisionForImageClassification"),lCt.forEach(t),i7r=r(MPe," (Data2VecVision model)"),MPe.forEach(t),d7r=i(G6),zM=n(G6,"LI",{});var EPe=s(zM);Jbe=n(EPe,"STRONG",{});var iCt=s(Jbe);c7r=r(iCt,"swin"),iCt.forEach(t),f7r=r(EPe," \u2014 "),dH=n(EPe,"A",{href:!0});var dCt=s(dH);m7r=r(dCt,"TFSwinForImageClassification"),dCt.forEach(t),g7r=r(EPe," (Swin model)"),EPe.forEach(t),h7r=i(G6),WM=n(G6,"LI",{});var CPe=s(WM);Ybe=n(CPe,"STRONG",{});var cCt=s(Ybe);p7r=r(cCt,"vit"),cCt.forEach(t),_7r=r(CPe," \u2014 "),cH=n(CPe,"A",{href:!0});var fCt=s(cH);u7r=r(fCt,"TFViTForImageClassification"),fCt.forEach(t),b7r=r(CPe," (ViT model)"),CPe.forEach(t),G6.forEach(t),v7r=i(Fl),T(QM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),Qje=i(f),Zd=n(f,"H2",{class:!0});var ZGe=s(Zd);HM=n(ZGe,"A",{id:!0,class:!0,href:!0});var mCt=s(HM);Kbe=n(mCt,"SPAN",{});var gCt=s(Kbe);T(N8.$$.fragment,gCt),gCt.forEach(t),mCt.forEach(t),F7r=i(ZGe),Zbe=n(ZGe,"SPAN",{});var hCt=s(Zbe);T7r=r(hCt,"TFAutoModelForMaskedLM"),hCt.forEach(t),ZGe.forEach(t),Hje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(q8.$$.fragment,Tl),M7r=i(Tl),ec=n(Tl,"P",{});var Pee=s(ec);E7r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fH=n(Pee,"A",{href:!0});var pCt=s(fH);C7r=r(pCt,"from_pretrained()"),pCt.forEach(t),w7r=r(Pee," class method or the "),mH=n(Pee,"A",{href:!0});var _Ct=s(mH);A7r=r(_Ct,"from_config()"),_Ct.forEach(t),y7r=r(Pee,` class
method.`),Pee.forEach(t),L7r=i(Tl),j8=n(Tl,"P",{});var eOe=s(j8);x7r=r(eOe,"This class cannot be instantiated directly using "),e2e=n(eOe,"CODE",{});var uCt=s(e2e);$7r=r(uCt,"__init__()"),uCt.forEach(t),k7r=r(eOe," (throws an error)."),eOe.forEach(t),S7r=i(Tl),kt=n(Tl,"DIV",{class:!0});var O6=s(kt);T(D8.$$.fragment,O6),R7r=i(O6),o2e=n(O6,"P",{});var bCt=s(o2e);P7r=r(bCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bCt.forEach(t),B7r=i(O6),oc=n(O6,"P",{});var Bee=s(oc);I7r=r(Bee,`Note:
Loading a model from its configuration file does `),r2e=n(Bee,"STRONG",{});var vCt=s(r2e);N7r=r(vCt,"not"),vCt.forEach(t),q7r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(Bee,"A",{href:!0});var FCt=s(gH);j7r=r(FCt,"from_pretrained()"),FCt.forEach(t),D7r=r(Bee," to load the model weights."),Bee.forEach(t),G7r=i(O6),T(UM.$$.fragment,O6),O6.forEach(t),O7r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(G8.$$.fragment,Ml),V7r=i(Ml),t2e=n(Ml,"P",{});var TCt=s(t2e);X7r=r(TCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TCt.forEach(t),z7r=i(Ml),tn=n(Ml,"P",{});var V6=s(tn);W7r=r(V6,"The model class to instantiate is selected based on the "),a2e=n(V6,"CODE",{});var MCt=s(a2e);Q7r=r(MCt,"model_type"),MCt.forEach(t),H7r=r(V6,` property of the config object (either
passed as an argument or loaded from `),n2e=n(V6,"CODE",{});var ECt=s(n2e);U7r=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),J7r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(V6,"CODE",{});var CCt=s(s2e);Y7r=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),K7r=r(V6,":"),V6.forEach(t),Z7r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);JM=n(fe,"LI",{});var wPe=s(JM);l2e=n(wPe,"STRONG",{});var wCt=s(l2e);ebr=r(wCt,"albert"),wCt.forEach(t),obr=r(wPe," \u2014 "),hH=n(wPe,"A",{href:!0});var ACt=s(hH);rbr=r(ACt,"TFAlbertForMaskedLM"),ACt.forEach(t),tbr=r(wPe," (ALBERT model)"),wPe.forEach(t),abr=i(fe),YM=n(fe,"LI",{});var APe=s(YM);i2e=n(APe,"STRONG",{});var yCt=s(i2e);nbr=r(yCt,"bert"),yCt.forEach(t),sbr=r(APe," \u2014 "),pH=n(APe,"A",{href:!0});var LCt=s(pH);lbr=r(LCt,"TFBertForMaskedLM"),LCt.forEach(t),ibr=r(APe," (BERT model)"),APe.forEach(t),dbr=i(fe),KM=n(fe,"LI",{});var yPe=s(KM);d2e=n(yPe,"STRONG",{});var xCt=s(d2e);cbr=r(xCt,"camembert"),xCt.forEach(t),fbr=r(yPe," \u2014 "),_H=n(yPe,"A",{href:!0});var $Ct=s(_H);mbr=r($Ct,"TFCamembertForMaskedLM"),$Ct.forEach(t),gbr=r(yPe," (CamemBERT model)"),yPe.forEach(t),hbr=i(fe),ZM=n(fe,"LI",{});var LPe=s(ZM);c2e=n(LPe,"STRONG",{});var kCt=s(c2e);pbr=r(kCt,"convbert"),kCt.forEach(t),_br=r(LPe," \u2014 "),uH=n(LPe,"A",{href:!0});var SCt=s(uH);ubr=r(SCt,"TFConvBertForMaskedLM"),SCt.forEach(t),bbr=r(LPe," (ConvBERT model)"),LPe.forEach(t),vbr=i(fe),eE=n(fe,"LI",{});var xPe=s(eE);f2e=n(xPe,"STRONG",{});var RCt=s(f2e);Fbr=r(RCt,"deberta"),RCt.forEach(t),Tbr=r(xPe," \u2014 "),bH=n(xPe,"A",{href:!0});var PCt=s(bH);Mbr=r(PCt,"TFDebertaForMaskedLM"),PCt.forEach(t),Ebr=r(xPe," (DeBERTa model)"),xPe.forEach(t),Cbr=i(fe),oE=n(fe,"LI",{});var $Pe=s(oE);m2e=n($Pe,"STRONG",{});var BCt=s(m2e);wbr=r(BCt,"deberta-v2"),BCt.forEach(t),Abr=r($Pe," \u2014 "),vH=n($Pe,"A",{href:!0});var ICt=s(vH);ybr=r(ICt,"TFDebertaV2ForMaskedLM"),ICt.forEach(t),Lbr=r($Pe," (DeBERTa-v2 model)"),$Pe.forEach(t),xbr=i(fe),rE=n(fe,"LI",{});var kPe=s(rE);g2e=n(kPe,"STRONG",{});var NCt=s(g2e);$br=r(NCt,"distilbert"),NCt.forEach(t),kbr=r(kPe," \u2014 "),FH=n(kPe,"A",{href:!0});var qCt=s(FH);Sbr=r(qCt,"TFDistilBertForMaskedLM"),qCt.forEach(t),Rbr=r(kPe," (DistilBERT model)"),kPe.forEach(t),Pbr=i(fe),tE=n(fe,"LI",{});var SPe=s(tE);h2e=n(SPe,"STRONG",{});var jCt=s(h2e);Bbr=r(jCt,"electra"),jCt.forEach(t),Ibr=r(SPe," \u2014 "),TH=n(SPe,"A",{href:!0});var DCt=s(TH);Nbr=r(DCt,"TFElectraForMaskedLM"),DCt.forEach(t),qbr=r(SPe," (ELECTRA model)"),SPe.forEach(t),jbr=i(fe),aE=n(fe,"LI",{});var RPe=s(aE);p2e=n(RPe,"STRONG",{});var GCt=s(p2e);Dbr=r(GCt,"flaubert"),GCt.forEach(t),Gbr=r(RPe," \u2014 "),MH=n(RPe,"A",{href:!0});var OCt=s(MH);Obr=r(OCt,"TFFlaubertWithLMHeadModel"),OCt.forEach(t),Vbr=r(RPe," (FlauBERT model)"),RPe.forEach(t),Xbr=i(fe),nE=n(fe,"LI",{});var PPe=s(nE);_2e=n(PPe,"STRONG",{});var VCt=s(_2e);zbr=r(VCt,"funnel"),VCt.forEach(t),Wbr=r(PPe," \u2014 "),EH=n(PPe,"A",{href:!0});var XCt=s(EH);Qbr=r(XCt,"TFFunnelForMaskedLM"),XCt.forEach(t),Hbr=r(PPe," (Funnel Transformer model)"),PPe.forEach(t),Ubr=i(fe),sE=n(fe,"LI",{});var BPe=s(sE);u2e=n(BPe,"STRONG",{});var zCt=s(u2e);Jbr=r(zCt,"layoutlm"),zCt.forEach(t),Ybr=r(BPe," \u2014 "),CH=n(BPe,"A",{href:!0});var WCt=s(CH);Kbr=r(WCt,"TFLayoutLMForMaskedLM"),WCt.forEach(t),Zbr=r(BPe," (LayoutLM model)"),BPe.forEach(t),e2r=i(fe),lE=n(fe,"LI",{});var IPe=s(lE);b2e=n(IPe,"STRONG",{});var QCt=s(b2e);o2r=r(QCt,"longformer"),QCt.forEach(t),r2r=r(IPe," \u2014 "),wH=n(IPe,"A",{href:!0});var HCt=s(wH);t2r=r(HCt,"TFLongformerForMaskedLM"),HCt.forEach(t),a2r=r(IPe," (Longformer model)"),IPe.forEach(t),n2r=i(fe),iE=n(fe,"LI",{});var NPe=s(iE);v2e=n(NPe,"STRONG",{});var UCt=s(v2e);s2r=r(UCt,"mobilebert"),UCt.forEach(t),l2r=r(NPe," \u2014 "),AH=n(NPe,"A",{href:!0});var JCt=s(AH);i2r=r(JCt,"TFMobileBertForMaskedLM"),JCt.forEach(t),d2r=r(NPe," (MobileBERT model)"),NPe.forEach(t),c2r=i(fe),dE=n(fe,"LI",{});var qPe=s(dE);F2e=n(qPe,"STRONG",{});var YCt=s(F2e);f2r=r(YCt,"mpnet"),YCt.forEach(t),m2r=r(qPe," \u2014 "),yH=n(qPe,"A",{href:!0});var KCt=s(yH);g2r=r(KCt,"TFMPNetForMaskedLM"),KCt.forEach(t),h2r=r(qPe," (MPNet model)"),qPe.forEach(t),p2r=i(fe),cE=n(fe,"LI",{});var jPe=s(cE);T2e=n(jPe,"STRONG",{});var ZCt=s(T2e);_2r=r(ZCt,"rembert"),ZCt.forEach(t),u2r=r(jPe," \u2014 "),LH=n(jPe,"A",{href:!0});var e5t=s(LH);b2r=r(e5t,"TFRemBertForMaskedLM"),e5t.forEach(t),v2r=r(jPe," (RemBERT model)"),jPe.forEach(t),F2r=i(fe),fE=n(fe,"LI",{});var DPe=s(fE);M2e=n(DPe,"STRONG",{});var o5t=s(M2e);T2r=r(o5t,"roberta"),o5t.forEach(t),M2r=r(DPe," \u2014 "),xH=n(DPe,"A",{href:!0});var r5t=s(xH);E2r=r(r5t,"TFRobertaForMaskedLM"),r5t.forEach(t),C2r=r(DPe," (RoBERTa model)"),DPe.forEach(t),w2r=i(fe),mE=n(fe,"LI",{});var GPe=s(mE);E2e=n(GPe,"STRONG",{});var t5t=s(E2e);A2r=r(t5t,"roformer"),t5t.forEach(t),y2r=r(GPe," \u2014 "),$H=n(GPe,"A",{href:!0});var a5t=s($H);L2r=r(a5t,"TFRoFormerForMaskedLM"),a5t.forEach(t),x2r=r(GPe," (RoFormer model)"),GPe.forEach(t),$2r=i(fe),gE=n(fe,"LI",{});var OPe=s(gE);C2e=n(OPe,"STRONG",{});var n5t=s(C2e);k2r=r(n5t,"tapas"),n5t.forEach(t),S2r=r(OPe," \u2014 "),kH=n(OPe,"A",{href:!0});var s5t=s(kH);R2r=r(s5t,"TFTapasForMaskedLM"),s5t.forEach(t),P2r=r(OPe," (TAPAS model)"),OPe.forEach(t),B2r=i(fe),hE=n(fe,"LI",{});var VPe=s(hE);w2e=n(VPe,"STRONG",{});var l5t=s(w2e);I2r=r(l5t,"xlm"),l5t.forEach(t),N2r=r(VPe," \u2014 "),SH=n(VPe,"A",{href:!0});var i5t=s(SH);q2r=r(i5t,"TFXLMWithLMHeadModel"),i5t.forEach(t),j2r=r(VPe," (XLM model)"),VPe.forEach(t),D2r=i(fe),pE=n(fe,"LI",{});var XPe=s(pE);A2e=n(XPe,"STRONG",{});var d5t=s(A2e);G2r=r(d5t,"xlm-roberta"),d5t.forEach(t),O2r=r(XPe," \u2014 "),RH=n(XPe,"A",{href:!0});var c5t=s(RH);V2r=r(c5t,"TFXLMRobertaForMaskedLM"),c5t.forEach(t),X2r=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),fe.forEach(t),z2r=i(Ml),T(_E.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Uje=i(f),rc=n(f,"H2",{class:!0});var oOe=s(rc);uE=n(oOe,"A",{id:!0,class:!0,href:!0});var f5t=s(uE);y2e=n(f5t,"SPAN",{});var m5t=s(y2e);T(O8.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),W2r=i(oOe),L2e=n(oOe,"SPAN",{});var g5t=s(L2e);Q2r=r(g5t,"TFAutoModelForSeq2SeqLM"),g5t.forEach(t),oOe.forEach(t),Jje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(V8.$$.fragment,El),H2r=i(El),tc=n(El,"P",{});var Iee=s(tc);U2r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PH=n(Iee,"A",{href:!0});var h5t=s(PH);J2r=r(h5t,"from_pretrained()"),h5t.forEach(t),Y2r=r(Iee," class method or the "),BH=n(Iee,"A",{href:!0});var p5t=s(BH);K2r=r(p5t,"from_config()"),p5t.forEach(t),Z2r=r(Iee,` class
method.`),Iee.forEach(t),evr=i(El),X8=n(El,"P",{});var rOe=s(X8);ovr=r(rOe,"This class cannot be instantiated directly using "),x2e=n(rOe,"CODE",{});var _5t=s(x2e);rvr=r(_5t,"__init__()"),_5t.forEach(t),tvr=r(rOe," (throws an error)."),rOe.forEach(t),avr=i(El),St=n(El,"DIV",{class:!0});var X6=s(St);T(z8.$$.fragment,X6),nvr=i(X6),$2e=n(X6,"P",{});var u5t=s($2e);svr=r(u5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),u5t.forEach(t),lvr=i(X6),ac=n(X6,"P",{});var Nee=s(ac);ivr=r(Nee,`Note:
Loading a model from its configuration file does `),k2e=n(Nee,"STRONG",{});var b5t=s(k2e);dvr=r(b5t,"not"),b5t.forEach(t),cvr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Nee,"A",{href:!0});var v5t=s(IH);fvr=r(v5t,"from_pretrained()"),v5t.forEach(t),mvr=r(Nee," to load the model weights."),Nee.forEach(t),gvr=i(X6),T(bE.$$.fragment,X6),X6.forEach(t),hvr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(W8.$$.fragment,Cl),pvr=i(Cl),S2e=n(Cl,"P",{});var F5t=s(S2e);_vr=r(F5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),F5t.forEach(t),uvr=i(Cl),an=n(Cl,"P",{});var z6=s(an);bvr=r(z6,"The model class to instantiate is selected based on the "),R2e=n(z6,"CODE",{});var T5t=s(R2e);vvr=r(T5t,"model_type"),T5t.forEach(t),Fvr=r(z6,` property of the config object (either
passed as an argument or loaded from `),P2e=n(z6,"CODE",{});var M5t=s(P2e);Tvr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),Mvr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(z6,"CODE",{});var E5t=s(B2e);Evr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),Cvr=r(z6,":"),z6.forEach(t),wvr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);vE=n(Be,"LI",{});var zPe=s(vE);I2e=n(zPe,"STRONG",{});var C5t=s(I2e);Avr=r(C5t,"bart"),C5t.forEach(t),yvr=r(zPe," \u2014 "),NH=n(zPe,"A",{href:!0});var w5t=s(NH);Lvr=r(w5t,"TFBartForConditionalGeneration"),w5t.forEach(t),xvr=r(zPe," (BART model)"),zPe.forEach(t),$vr=i(Be),FE=n(Be,"LI",{});var WPe=s(FE);N2e=n(WPe,"STRONG",{});var A5t=s(N2e);kvr=r(A5t,"blenderbot"),A5t.forEach(t),Svr=r(WPe," \u2014 "),qH=n(WPe,"A",{href:!0});var y5t=s(qH);Rvr=r(y5t,"TFBlenderbotForConditionalGeneration"),y5t.forEach(t),Pvr=r(WPe," (Blenderbot model)"),WPe.forEach(t),Bvr=i(Be),TE=n(Be,"LI",{});var QPe=s(TE);q2e=n(QPe,"STRONG",{});var L5t=s(q2e);Ivr=r(L5t,"blenderbot-small"),L5t.forEach(t),Nvr=r(QPe," \u2014 "),jH=n(QPe,"A",{href:!0});var x5t=s(jH);qvr=r(x5t,"TFBlenderbotSmallForConditionalGeneration"),x5t.forEach(t),jvr=r(QPe," (BlenderbotSmall model)"),QPe.forEach(t),Dvr=i(Be),ME=n(Be,"LI",{});var HPe=s(ME);j2e=n(HPe,"STRONG",{});var $5t=s(j2e);Gvr=r($5t,"encoder-decoder"),$5t.forEach(t),Ovr=r(HPe," \u2014 "),DH=n(HPe,"A",{href:!0});var k5t=s(DH);Vvr=r(k5t,"TFEncoderDecoderModel"),k5t.forEach(t),Xvr=r(HPe," (Encoder decoder model)"),HPe.forEach(t),zvr=i(Be),EE=n(Be,"LI",{});var UPe=s(EE);D2e=n(UPe,"STRONG",{});var S5t=s(D2e);Wvr=r(S5t,"led"),S5t.forEach(t),Qvr=r(UPe," \u2014 "),GH=n(UPe,"A",{href:!0});var R5t=s(GH);Hvr=r(R5t,"TFLEDForConditionalGeneration"),R5t.forEach(t),Uvr=r(UPe," (LED model)"),UPe.forEach(t),Jvr=i(Be),CE=n(Be,"LI",{});var JPe=s(CE);G2e=n(JPe,"STRONG",{});var P5t=s(G2e);Yvr=r(P5t,"marian"),P5t.forEach(t),Kvr=r(JPe," \u2014 "),OH=n(JPe,"A",{href:!0});var B5t=s(OH);Zvr=r(B5t,"TFMarianMTModel"),B5t.forEach(t),eFr=r(JPe," (Marian model)"),JPe.forEach(t),oFr=i(Be),wE=n(Be,"LI",{});var YPe=s(wE);O2e=n(YPe,"STRONG",{});var I5t=s(O2e);rFr=r(I5t,"mbart"),I5t.forEach(t),tFr=r(YPe," \u2014 "),VH=n(YPe,"A",{href:!0});var N5t=s(VH);aFr=r(N5t,"TFMBartForConditionalGeneration"),N5t.forEach(t),nFr=r(YPe," (mBART model)"),YPe.forEach(t),sFr=i(Be),AE=n(Be,"LI",{});var KPe=s(AE);V2e=n(KPe,"STRONG",{});var q5t=s(V2e);lFr=r(q5t,"mt5"),q5t.forEach(t),iFr=r(KPe," \u2014 "),XH=n(KPe,"A",{href:!0});var j5t=s(XH);dFr=r(j5t,"TFMT5ForConditionalGeneration"),j5t.forEach(t),cFr=r(KPe," (mT5 model)"),KPe.forEach(t),fFr=i(Be),yE=n(Be,"LI",{});var ZPe=s(yE);X2e=n(ZPe,"STRONG",{});var D5t=s(X2e);mFr=r(D5t,"pegasus"),D5t.forEach(t),gFr=r(ZPe," \u2014 "),zH=n(ZPe,"A",{href:!0});var G5t=s(zH);hFr=r(G5t,"TFPegasusForConditionalGeneration"),G5t.forEach(t),pFr=r(ZPe," (Pegasus model)"),ZPe.forEach(t),_Fr=i(Be),LE=n(Be,"LI",{});var eBe=s(LE);z2e=n(eBe,"STRONG",{});var O5t=s(z2e);uFr=r(O5t,"t5"),O5t.forEach(t),bFr=r(eBe," \u2014 "),WH=n(eBe,"A",{href:!0});var V5t=s(WH);vFr=r(V5t,"TFT5ForConditionalGeneration"),V5t.forEach(t),FFr=r(eBe," (T5 model)"),eBe.forEach(t),Be.forEach(t),TFr=i(Cl),T(xE.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Yje=i(f),nc=n(f,"H2",{class:!0});var tOe=s(nc);$E=n(tOe,"A",{id:!0,class:!0,href:!0});var X5t=s($E);W2e=n(X5t,"SPAN",{});var z5t=s(W2e);T(Q8.$$.fragment,z5t),z5t.forEach(t),X5t.forEach(t),MFr=i(tOe),Q2e=n(tOe,"SPAN",{});var W5t=s(Q2e);EFr=r(W5t,"TFAutoModelForSequenceClassification"),W5t.forEach(t),tOe.forEach(t),Kje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(H8.$$.fragment,wl),CFr=i(wl),sc=n(wl,"P",{});var qee=s(sc);wFr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QH=n(qee,"A",{href:!0});var Q5t=s(QH);AFr=r(Q5t,"from_pretrained()"),Q5t.forEach(t),yFr=r(qee," class method or the "),HH=n(qee,"A",{href:!0});var H5t=s(HH);LFr=r(H5t,"from_config()"),H5t.forEach(t),xFr=r(qee,` class
method.`),qee.forEach(t),$Fr=i(wl),U8=n(wl,"P",{});var aOe=s(U8);kFr=r(aOe,"This class cannot be instantiated directly using "),H2e=n(aOe,"CODE",{});var U5t=s(H2e);SFr=r(U5t,"__init__()"),U5t.forEach(t),RFr=r(aOe," (throws an error)."),aOe.forEach(t),PFr=i(wl),Rt=n(wl,"DIV",{class:!0});var W6=s(Rt);T(J8.$$.fragment,W6),BFr=i(W6),U2e=n(W6,"P",{});var J5t=s(U2e);IFr=r(J5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),J5t.forEach(t),NFr=i(W6),lc=n(W6,"P",{});var jee=s(lc);qFr=r(jee,`Note:
Loading a model from its configuration file does `),J2e=n(jee,"STRONG",{});var Y5t=s(J2e);jFr=r(Y5t,"not"),Y5t.forEach(t),DFr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(jee,"A",{href:!0});var K5t=s(UH);GFr=r(K5t,"from_pretrained()"),K5t.forEach(t),OFr=r(jee," to load the model weights."),jee.forEach(t),VFr=i(W6),T(kE.$$.fragment,W6),W6.forEach(t),XFr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(Y8.$$.fragment,Al),zFr=i(Al),Y2e=n(Al,"P",{});var Z5t=s(Y2e);WFr=r(Z5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Z5t.forEach(t),QFr=i(Al),nn=n(Al,"P",{});var Q6=s(nn);HFr=r(Q6,"The model class to instantiate is selected based on the "),K2e=n(Q6,"CODE",{});var e3t=s(K2e);UFr=r(e3t,"model_type"),e3t.forEach(t),JFr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(Q6,"CODE",{});var o3t=s(Z2e);YFr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),KFr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(Q6,"CODE",{});var r3t=s(eve);ZFr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),eTr=r(Q6,":"),Q6.forEach(t),oTr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);SE=n(ae,"LI",{});var oBe=s(SE);ove=n(oBe,"STRONG",{});var t3t=s(ove);rTr=r(t3t,"albert"),t3t.forEach(t),tTr=r(oBe," \u2014 "),JH=n(oBe,"A",{href:!0});var a3t=s(JH);aTr=r(a3t,"TFAlbertForSequenceClassification"),a3t.forEach(t),nTr=r(oBe," (ALBERT model)"),oBe.forEach(t),sTr=i(ae),RE=n(ae,"LI",{});var rBe=s(RE);rve=n(rBe,"STRONG",{});var n3t=s(rve);lTr=r(n3t,"bert"),n3t.forEach(t),iTr=r(rBe," \u2014 "),YH=n(rBe,"A",{href:!0});var s3t=s(YH);dTr=r(s3t,"TFBertForSequenceClassification"),s3t.forEach(t),cTr=r(rBe," (BERT model)"),rBe.forEach(t),fTr=i(ae),PE=n(ae,"LI",{});var tBe=s(PE);tve=n(tBe,"STRONG",{});var l3t=s(tve);mTr=r(l3t,"camembert"),l3t.forEach(t),gTr=r(tBe," \u2014 "),KH=n(tBe,"A",{href:!0});var i3t=s(KH);hTr=r(i3t,"TFCamembertForSequenceClassification"),i3t.forEach(t),pTr=r(tBe," (CamemBERT model)"),tBe.forEach(t),_Tr=i(ae),BE=n(ae,"LI",{});var aBe=s(BE);ave=n(aBe,"STRONG",{});var d3t=s(ave);uTr=r(d3t,"convbert"),d3t.forEach(t),bTr=r(aBe," \u2014 "),ZH=n(aBe,"A",{href:!0});var c3t=s(ZH);vTr=r(c3t,"TFConvBertForSequenceClassification"),c3t.forEach(t),FTr=r(aBe," (ConvBERT model)"),aBe.forEach(t),TTr=i(ae),IE=n(ae,"LI",{});var nBe=s(IE);nve=n(nBe,"STRONG",{});var f3t=s(nve);MTr=r(f3t,"ctrl"),f3t.forEach(t),ETr=r(nBe," \u2014 "),eU=n(nBe,"A",{href:!0});var m3t=s(eU);CTr=r(m3t,"TFCTRLForSequenceClassification"),m3t.forEach(t),wTr=r(nBe," (CTRL model)"),nBe.forEach(t),ATr=i(ae),NE=n(ae,"LI",{});var sBe=s(NE);sve=n(sBe,"STRONG",{});var g3t=s(sve);yTr=r(g3t,"deberta"),g3t.forEach(t),LTr=r(sBe," \u2014 "),oU=n(sBe,"A",{href:!0});var h3t=s(oU);xTr=r(h3t,"TFDebertaForSequenceClassification"),h3t.forEach(t),$Tr=r(sBe," (DeBERTa model)"),sBe.forEach(t),kTr=i(ae),qE=n(ae,"LI",{});var lBe=s(qE);lve=n(lBe,"STRONG",{});var p3t=s(lve);STr=r(p3t,"deberta-v2"),p3t.forEach(t),RTr=r(lBe," \u2014 "),rU=n(lBe,"A",{href:!0});var _3t=s(rU);PTr=r(_3t,"TFDebertaV2ForSequenceClassification"),_3t.forEach(t),BTr=r(lBe," (DeBERTa-v2 model)"),lBe.forEach(t),ITr=i(ae),jE=n(ae,"LI",{});var iBe=s(jE);ive=n(iBe,"STRONG",{});var u3t=s(ive);NTr=r(u3t,"distilbert"),u3t.forEach(t),qTr=r(iBe," \u2014 "),tU=n(iBe,"A",{href:!0});var b3t=s(tU);jTr=r(b3t,"TFDistilBertForSequenceClassification"),b3t.forEach(t),DTr=r(iBe," (DistilBERT model)"),iBe.forEach(t),GTr=i(ae),DE=n(ae,"LI",{});var dBe=s(DE);dve=n(dBe,"STRONG",{});var v3t=s(dve);OTr=r(v3t,"electra"),v3t.forEach(t),VTr=r(dBe," \u2014 "),aU=n(dBe,"A",{href:!0});var F3t=s(aU);XTr=r(F3t,"TFElectraForSequenceClassification"),F3t.forEach(t),zTr=r(dBe," (ELECTRA model)"),dBe.forEach(t),WTr=i(ae),GE=n(ae,"LI",{});var cBe=s(GE);cve=n(cBe,"STRONG",{});var T3t=s(cve);QTr=r(T3t,"flaubert"),T3t.forEach(t),HTr=r(cBe," \u2014 "),nU=n(cBe,"A",{href:!0});var M3t=s(nU);UTr=r(M3t,"TFFlaubertForSequenceClassification"),M3t.forEach(t),JTr=r(cBe," (FlauBERT model)"),cBe.forEach(t),YTr=i(ae),OE=n(ae,"LI",{});var fBe=s(OE);fve=n(fBe,"STRONG",{});var E3t=s(fve);KTr=r(E3t,"funnel"),E3t.forEach(t),ZTr=r(fBe," \u2014 "),sU=n(fBe,"A",{href:!0});var C3t=s(sU);eMr=r(C3t,"TFFunnelForSequenceClassification"),C3t.forEach(t),oMr=r(fBe," (Funnel Transformer model)"),fBe.forEach(t),rMr=i(ae),VE=n(ae,"LI",{});var mBe=s(VE);mve=n(mBe,"STRONG",{});var w3t=s(mve);tMr=r(w3t,"gpt2"),w3t.forEach(t),aMr=r(mBe," \u2014 "),lU=n(mBe,"A",{href:!0});var A3t=s(lU);nMr=r(A3t,"TFGPT2ForSequenceClassification"),A3t.forEach(t),sMr=r(mBe," (OpenAI GPT-2 model)"),mBe.forEach(t),lMr=i(ae),XE=n(ae,"LI",{});var gBe=s(XE);gve=n(gBe,"STRONG",{});var y3t=s(gve);iMr=r(y3t,"gptj"),y3t.forEach(t),dMr=r(gBe," \u2014 "),iU=n(gBe,"A",{href:!0});var L3t=s(iU);cMr=r(L3t,"TFGPTJForSequenceClassification"),L3t.forEach(t),fMr=r(gBe," (GPT-J model)"),gBe.forEach(t),mMr=i(ae),zE=n(ae,"LI",{});var hBe=s(zE);hve=n(hBe,"STRONG",{});var x3t=s(hve);gMr=r(x3t,"layoutlm"),x3t.forEach(t),hMr=r(hBe," \u2014 "),dU=n(hBe,"A",{href:!0});var $3t=s(dU);pMr=r($3t,"TFLayoutLMForSequenceClassification"),$3t.forEach(t),_Mr=r(hBe," (LayoutLM model)"),hBe.forEach(t),uMr=i(ae),WE=n(ae,"LI",{});var pBe=s(WE);pve=n(pBe,"STRONG",{});var k3t=s(pve);bMr=r(k3t,"longformer"),k3t.forEach(t),vMr=r(pBe," \u2014 "),cU=n(pBe,"A",{href:!0});var S3t=s(cU);FMr=r(S3t,"TFLongformerForSequenceClassification"),S3t.forEach(t),TMr=r(pBe," (Longformer model)"),pBe.forEach(t),MMr=i(ae),QE=n(ae,"LI",{});var _Be=s(QE);_ve=n(_Be,"STRONG",{});var R3t=s(_ve);EMr=r(R3t,"mobilebert"),R3t.forEach(t),CMr=r(_Be," \u2014 "),fU=n(_Be,"A",{href:!0});var P3t=s(fU);wMr=r(P3t,"TFMobileBertForSequenceClassification"),P3t.forEach(t),AMr=r(_Be," (MobileBERT model)"),_Be.forEach(t),yMr=i(ae),HE=n(ae,"LI",{});var uBe=s(HE);uve=n(uBe,"STRONG",{});var B3t=s(uve);LMr=r(B3t,"mpnet"),B3t.forEach(t),xMr=r(uBe," \u2014 "),mU=n(uBe,"A",{href:!0});var I3t=s(mU);$Mr=r(I3t,"TFMPNetForSequenceClassification"),I3t.forEach(t),kMr=r(uBe," (MPNet model)"),uBe.forEach(t),SMr=i(ae),UE=n(ae,"LI",{});var bBe=s(UE);bve=n(bBe,"STRONG",{});var N3t=s(bve);RMr=r(N3t,"openai-gpt"),N3t.forEach(t),PMr=r(bBe," \u2014 "),gU=n(bBe,"A",{href:!0});var q3t=s(gU);BMr=r(q3t,"TFOpenAIGPTForSequenceClassification"),q3t.forEach(t),IMr=r(bBe," (OpenAI GPT model)"),bBe.forEach(t),NMr=i(ae),JE=n(ae,"LI",{});var vBe=s(JE);vve=n(vBe,"STRONG",{});var j3t=s(vve);qMr=r(j3t,"rembert"),j3t.forEach(t),jMr=r(vBe," \u2014 "),hU=n(vBe,"A",{href:!0});var D3t=s(hU);DMr=r(D3t,"TFRemBertForSequenceClassification"),D3t.forEach(t),GMr=r(vBe," (RemBERT model)"),vBe.forEach(t),OMr=i(ae),YE=n(ae,"LI",{});var FBe=s(YE);Fve=n(FBe,"STRONG",{});var G3t=s(Fve);VMr=r(G3t,"roberta"),G3t.forEach(t),XMr=r(FBe," \u2014 "),pU=n(FBe,"A",{href:!0});var O3t=s(pU);zMr=r(O3t,"TFRobertaForSequenceClassification"),O3t.forEach(t),WMr=r(FBe," (RoBERTa model)"),FBe.forEach(t),QMr=i(ae),KE=n(ae,"LI",{});var TBe=s(KE);Tve=n(TBe,"STRONG",{});var V3t=s(Tve);HMr=r(V3t,"roformer"),V3t.forEach(t),UMr=r(TBe," \u2014 "),_U=n(TBe,"A",{href:!0});var X3t=s(_U);JMr=r(X3t,"TFRoFormerForSequenceClassification"),X3t.forEach(t),YMr=r(TBe," (RoFormer model)"),TBe.forEach(t),KMr=i(ae),ZE=n(ae,"LI",{});var MBe=s(ZE);Mve=n(MBe,"STRONG",{});var z3t=s(Mve);ZMr=r(z3t,"tapas"),z3t.forEach(t),eEr=r(MBe," \u2014 "),uU=n(MBe,"A",{href:!0});var W3t=s(uU);oEr=r(W3t,"TFTapasForSequenceClassification"),W3t.forEach(t),rEr=r(MBe," (TAPAS model)"),MBe.forEach(t),tEr=i(ae),eC=n(ae,"LI",{});var EBe=s(eC);Eve=n(EBe,"STRONG",{});var Q3t=s(Eve);aEr=r(Q3t,"transfo-xl"),Q3t.forEach(t),nEr=r(EBe," \u2014 "),bU=n(EBe,"A",{href:!0});var H3t=s(bU);sEr=r(H3t,"TFTransfoXLForSequenceClassification"),H3t.forEach(t),lEr=r(EBe," (Transformer-XL model)"),EBe.forEach(t),iEr=i(ae),oC=n(ae,"LI",{});var CBe=s(oC);Cve=n(CBe,"STRONG",{});var U3t=s(Cve);dEr=r(U3t,"xlm"),U3t.forEach(t),cEr=r(CBe," \u2014 "),vU=n(CBe,"A",{href:!0});var J3t=s(vU);fEr=r(J3t,"TFXLMForSequenceClassification"),J3t.forEach(t),mEr=r(CBe," (XLM model)"),CBe.forEach(t),gEr=i(ae),rC=n(ae,"LI",{});var wBe=s(rC);wve=n(wBe,"STRONG",{});var Y3t=s(wve);hEr=r(Y3t,"xlm-roberta"),Y3t.forEach(t),pEr=r(wBe," \u2014 "),FU=n(wBe,"A",{href:!0});var K3t=s(FU);_Er=r(K3t,"TFXLMRobertaForSequenceClassification"),K3t.forEach(t),uEr=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),bEr=i(ae),tC=n(ae,"LI",{});var ABe=s(tC);Ave=n(ABe,"STRONG",{});var Z3t=s(Ave);vEr=r(Z3t,"xlnet"),Z3t.forEach(t),FEr=r(ABe," \u2014 "),TU=n(ABe,"A",{href:!0});var e0t=s(TU);TEr=r(e0t,"TFXLNetForSequenceClassification"),e0t.forEach(t),MEr=r(ABe," (XLNet model)"),ABe.forEach(t),ae.forEach(t),EEr=i(Al),T(aC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Zje=i(f),ic=n(f,"H2",{class:!0});var nOe=s(ic);nC=n(nOe,"A",{id:!0,class:!0,href:!0});var o0t=s(nC);yve=n(o0t,"SPAN",{});var r0t=s(yve);T(K8.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),CEr=i(nOe),Lve=n(nOe,"SPAN",{});var t0t=s(Lve);wEr=r(t0t,"TFAutoModelForMultipleChoice"),t0t.forEach(t),nOe.forEach(t),eDe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(Z8.$$.fragment,yl),AEr=i(yl),dc=n(yl,"P",{});var Dee=s(dc);yEr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MU=n(Dee,"A",{href:!0});var a0t=s(MU);LEr=r(a0t,"from_pretrained()"),a0t.forEach(t),xEr=r(Dee," class method or the "),EU=n(Dee,"A",{href:!0});var n0t=s(EU);$Er=r(n0t,"from_config()"),n0t.forEach(t),kEr=r(Dee,` class
method.`),Dee.forEach(t),SEr=i(yl),e9=n(yl,"P",{});var sOe=s(e9);REr=r(sOe,"This class cannot be instantiated directly using "),xve=n(sOe,"CODE",{});var s0t=s(xve);PEr=r(s0t,"__init__()"),s0t.forEach(t),BEr=r(sOe," (throws an error)."),sOe.forEach(t),IEr=i(yl),Pt=n(yl,"DIV",{class:!0});var H6=s(Pt);T(o9.$$.fragment,H6),NEr=i(H6),$ve=n(H6,"P",{});var l0t=s($ve);qEr=r(l0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l0t.forEach(t),jEr=i(H6),cc=n(H6,"P",{});var Gee=s(cc);DEr=r(Gee,`Note:
Loading a model from its configuration file does `),kve=n(Gee,"STRONG",{});var i0t=s(kve);GEr=r(i0t,"not"),i0t.forEach(t),OEr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(Gee,"A",{href:!0});var d0t=s(CU);VEr=r(d0t,"from_pretrained()"),d0t.forEach(t),XEr=r(Gee," to load the model weights."),Gee.forEach(t),zEr=i(H6),T(sC.$$.fragment,H6),H6.forEach(t),WEr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(r9.$$.fragment,Ll),QEr=i(Ll),Sve=n(Ll,"P",{});var c0t=s(Sve);HEr=r(c0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),c0t.forEach(t),UEr=i(Ll),sn=n(Ll,"P",{});var U6=s(sn);JEr=r(U6,"The model class to instantiate is selected based on the "),Rve=n(U6,"CODE",{});var f0t=s(Rve);YEr=r(f0t,"model_type"),f0t.forEach(t),KEr=r(U6,` property of the config object (either
passed as an argument or loaded from `),Pve=n(U6,"CODE",{});var m0t=s(Pve);ZEr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),eCr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(U6,"CODE",{});var g0t=s(Bve);oCr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),rCr=r(U6,":"),U6.forEach(t),tCr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);lC=n(be,"LI",{});var yBe=s(lC);Ive=n(yBe,"STRONG",{});var h0t=s(Ive);aCr=r(h0t,"albert"),h0t.forEach(t),nCr=r(yBe," \u2014 "),wU=n(yBe,"A",{href:!0});var p0t=s(wU);sCr=r(p0t,"TFAlbertForMultipleChoice"),p0t.forEach(t),lCr=r(yBe," (ALBERT model)"),yBe.forEach(t),iCr=i(be),iC=n(be,"LI",{});var LBe=s(iC);Nve=n(LBe,"STRONG",{});var _0t=s(Nve);dCr=r(_0t,"bert"),_0t.forEach(t),cCr=r(LBe," \u2014 "),AU=n(LBe,"A",{href:!0});var u0t=s(AU);fCr=r(u0t,"TFBertForMultipleChoice"),u0t.forEach(t),mCr=r(LBe," (BERT model)"),LBe.forEach(t),gCr=i(be),dC=n(be,"LI",{});var xBe=s(dC);qve=n(xBe,"STRONG",{});var b0t=s(qve);hCr=r(b0t,"camembert"),b0t.forEach(t),pCr=r(xBe," \u2014 "),yU=n(xBe,"A",{href:!0});var v0t=s(yU);_Cr=r(v0t,"TFCamembertForMultipleChoice"),v0t.forEach(t),uCr=r(xBe," (CamemBERT model)"),xBe.forEach(t),bCr=i(be),cC=n(be,"LI",{});var $Be=s(cC);jve=n($Be,"STRONG",{});var F0t=s(jve);vCr=r(F0t,"convbert"),F0t.forEach(t),FCr=r($Be," \u2014 "),LU=n($Be,"A",{href:!0});var T0t=s(LU);TCr=r(T0t,"TFConvBertForMultipleChoice"),T0t.forEach(t),MCr=r($Be," (ConvBERT model)"),$Be.forEach(t),ECr=i(be),fC=n(be,"LI",{});var kBe=s(fC);Dve=n(kBe,"STRONG",{});var M0t=s(Dve);CCr=r(M0t,"distilbert"),M0t.forEach(t),wCr=r(kBe," \u2014 "),xU=n(kBe,"A",{href:!0});var E0t=s(xU);ACr=r(E0t,"TFDistilBertForMultipleChoice"),E0t.forEach(t),yCr=r(kBe," (DistilBERT model)"),kBe.forEach(t),LCr=i(be),mC=n(be,"LI",{});var SBe=s(mC);Gve=n(SBe,"STRONG",{});var C0t=s(Gve);xCr=r(C0t,"electra"),C0t.forEach(t),$Cr=r(SBe," \u2014 "),$U=n(SBe,"A",{href:!0});var w0t=s($U);kCr=r(w0t,"TFElectraForMultipleChoice"),w0t.forEach(t),SCr=r(SBe," (ELECTRA model)"),SBe.forEach(t),RCr=i(be),gC=n(be,"LI",{});var RBe=s(gC);Ove=n(RBe,"STRONG",{});var A0t=s(Ove);PCr=r(A0t,"flaubert"),A0t.forEach(t),BCr=r(RBe," \u2014 "),kU=n(RBe,"A",{href:!0});var y0t=s(kU);ICr=r(y0t,"TFFlaubertForMultipleChoice"),y0t.forEach(t),NCr=r(RBe," (FlauBERT model)"),RBe.forEach(t),qCr=i(be),hC=n(be,"LI",{});var PBe=s(hC);Vve=n(PBe,"STRONG",{});var L0t=s(Vve);jCr=r(L0t,"funnel"),L0t.forEach(t),DCr=r(PBe," \u2014 "),SU=n(PBe,"A",{href:!0});var x0t=s(SU);GCr=r(x0t,"TFFunnelForMultipleChoice"),x0t.forEach(t),OCr=r(PBe," (Funnel Transformer model)"),PBe.forEach(t),VCr=i(be),pC=n(be,"LI",{});var BBe=s(pC);Xve=n(BBe,"STRONG",{});var $0t=s(Xve);XCr=r($0t,"longformer"),$0t.forEach(t),zCr=r(BBe," \u2014 "),RU=n(BBe,"A",{href:!0});var k0t=s(RU);WCr=r(k0t,"TFLongformerForMultipleChoice"),k0t.forEach(t),QCr=r(BBe," (Longformer model)"),BBe.forEach(t),HCr=i(be),_C=n(be,"LI",{});var IBe=s(_C);zve=n(IBe,"STRONG",{});var S0t=s(zve);UCr=r(S0t,"mobilebert"),S0t.forEach(t),JCr=r(IBe," \u2014 "),PU=n(IBe,"A",{href:!0});var R0t=s(PU);YCr=r(R0t,"TFMobileBertForMultipleChoice"),R0t.forEach(t),KCr=r(IBe," (MobileBERT model)"),IBe.forEach(t),ZCr=i(be),uC=n(be,"LI",{});var NBe=s(uC);Wve=n(NBe,"STRONG",{});var P0t=s(Wve);e5r=r(P0t,"mpnet"),P0t.forEach(t),o5r=r(NBe," \u2014 "),BU=n(NBe,"A",{href:!0});var B0t=s(BU);r5r=r(B0t,"TFMPNetForMultipleChoice"),B0t.forEach(t),t5r=r(NBe," (MPNet model)"),NBe.forEach(t),a5r=i(be),bC=n(be,"LI",{});var qBe=s(bC);Qve=n(qBe,"STRONG",{});var I0t=s(Qve);n5r=r(I0t,"rembert"),I0t.forEach(t),s5r=r(qBe," \u2014 "),IU=n(qBe,"A",{href:!0});var N0t=s(IU);l5r=r(N0t,"TFRemBertForMultipleChoice"),N0t.forEach(t),i5r=r(qBe," (RemBERT model)"),qBe.forEach(t),d5r=i(be),vC=n(be,"LI",{});var jBe=s(vC);Hve=n(jBe,"STRONG",{});var q0t=s(Hve);c5r=r(q0t,"roberta"),q0t.forEach(t),f5r=r(jBe," \u2014 "),NU=n(jBe,"A",{href:!0});var j0t=s(NU);m5r=r(j0t,"TFRobertaForMultipleChoice"),j0t.forEach(t),g5r=r(jBe," (RoBERTa model)"),jBe.forEach(t),h5r=i(be),FC=n(be,"LI",{});var DBe=s(FC);Uve=n(DBe,"STRONG",{});var D0t=s(Uve);p5r=r(D0t,"roformer"),D0t.forEach(t),_5r=r(DBe," \u2014 "),qU=n(DBe,"A",{href:!0});var G0t=s(qU);u5r=r(G0t,"TFRoFormerForMultipleChoice"),G0t.forEach(t),b5r=r(DBe," (RoFormer model)"),DBe.forEach(t),v5r=i(be),TC=n(be,"LI",{});var GBe=s(TC);Jve=n(GBe,"STRONG",{});var O0t=s(Jve);F5r=r(O0t,"xlm"),O0t.forEach(t),T5r=r(GBe," \u2014 "),jU=n(GBe,"A",{href:!0});var V0t=s(jU);M5r=r(V0t,"TFXLMForMultipleChoice"),V0t.forEach(t),E5r=r(GBe," (XLM model)"),GBe.forEach(t),C5r=i(be),MC=n(be,"LI",{});var OBe=s(MC);Yve=n(OBe,"STRONG",{});var X0t=s(Yve);w5r=r(X0t,"xlm-roberta"),X0t.forEach(t),A5r=r(OBe," \u2014 "),DU=n(OBe,"A",{href:!0});var z0t=s(DU);y5r=r(z0t,"TFXLMRobertaForMultipleChoice"),z0t.forEach(t),L5r=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),x5r=i(be),EC=n(be,"LI",{});var VBe=s(EC);Kve=n(VBe,"STRONG",{});var W0t=s(Kve);$5r=r(W0t,"xlnet"),W0t.forEach(t),k5r=r(VBe," \u2014 "),GU=n(VBe,"A",{href:!0});var Q0t=s(GU);S5r=r(Q0t,"TFXLNetForMultipleChoice"),Q0t.forEach(t),R5r=r(VBe," (XLNet model)"),VBe.forEach(t),be.forEach(t),P5r=i(Ll),T(CC.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),oDe=i(f),fc=n(f,"H2",{class:!0});var lOe=s(fc);wC=n(lOe,"A",{id:!0,class:!0,href:!0});var H0t=s(wC);Zve=n(H0t,"SPAN",{});var U0t=s(Zve);T(t9.$$.fragment,U0t),U0t.forEach(t),H0t.forEach(t),B5r=i(lOe),eFe=n(lOe,"SPAN",{});var J0t=s(eFe);I5r=r(J0t,"TFAutoModelForNextSentencePrediction"),J0t.forEach(t),lOe.forEach(t),rDe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(a9.$$.fragment,xl),N5r=i(xl),mc=n(xl,"P",{});var Oee=s(mc);q5r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OU=n(Oee,"A",{href:!0});var Y0t=s(OU);j5r=r(Y0t,"from_pretrained()"),Y0t.forEach(t),D5r=r(Oee," class method or the "),VU=n(Oee,"A",{href:!0});var K0t=s(VU);G5r=r(K0t,"from_config()"),K0t.forEach(t),O5r=r(Oee,` class
method.`),Oee.forEach(t),V5r=i(xl),n9=n(xl,"P",{});var iOe=s(n9);X5r=r(iOe,"This class cannot be instantiated directly using "),oFe=n(iOe,"CODE",{});var Z0t=s(oFe);z5r=r(Z0t,"__init__()"),Z0t.forEach(t),W5r=r(iOe," (throws an error)."),iOe.forEach(t),Q5r=i(xl),Bt=n(xl,"DIV",{class:!0});var J6=s(Bt);T(s9.$$.fragment,J6),H5r=i(J6),rFe=n(J6,"P",{});var ewt=s(rFe);U5r=r(ewt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ewt.forEach(t),J5r=i(J6),gc=n(J6,"P",{});var Vee=s(gc);Y5r=r(Vee,`Note:
Loading a model from its configuration file does `),tFe=n(Vee,"STRONG",{});var owt=s(tFe);K5r=r(owt,"not"),owt.forEach(t),Z5r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(Vee,"A",{href:!0});var rwt=s(XU);e3r=r(rwt,"from_pretrained()"),rwt.forEach(t),o3r=r(Vee," to load the model weights."),Vee.forEach(t),r3r=i(J6),T(AC.$$.fragment,J6),J6.forEach(t),t3r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(l9.$$.fragment,$l),a3r=i($l),aFe=n($l,"P",{});var twt=s(aFe);n3r=r(twt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),twt.forEach(t),s3r=i($l),ln=n($l,"P",{});var Y6=s(ln);l3r=r(Y6,"The model class to instantiate is selected based on the "),nFe=n(Y6,"CODE",{});var awt=s(nFe);i3r=r(awt,"model_type"),awt.forEach(t),d3r=r(Y6,` property of the config object (either
passed as an argument or loaded from `),sFe=n(Y6,"CODE",{});var nwt=s(sFe);c3r=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),f3r=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(Y6,"CODE",{});var swt=s(lFe);m3r=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),g3r=r(Y6,":"),Y6.forEach(t),h3r=i($l),i9=n($l,"UL",{});var dOe=s(i9);yC=n(dOe,"LI",{});var XBe=s(yC);iFe=n(XBe,"STRONG",{});var lwt=s(iFe);p3r=r(lwt,"bert"),lwt.forEach(t),_3r=r(XBe," \u2014 "),zU=n(XBe,"A",{href:!0});var iwt=s(zU);u3r=r(iwt,"TFBertForNextSentencePrediction"),iwt.forEach(t),b3r=r(XBe," (BERT model)"),XBe.forEach(t),v3r=i(dOe),LC=n(dOe,"LI",{});var zBe=s(LC);dFe=n(zBe,"STRONG",{});var dwt=s(dFe);F3r=r(dwt,"mobilebert"),dwt.forEach(t),T3r=r(zBe," \u2014 "),WU=n(zBe,"A",{href:!0});var cwt=s(WU);M3r=r(cwt,"TFMobileBertForNextSentencePrediction"),cwt.forEach(t),E3r=r(zBe," (MobileBERT model)"),zBe.forEach(t),dOe.forEach(t),C3r=i($l),T(xC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),tDe=i(f),hc=n(f,"H2",{class:!0});var cOe=s(hc);$C=n(cOe,"A",{id:!0,class:!0,href:!0});var fwt=s($C);cFe=n(fwt,"SPAN",{});var mwt=s(cFe);T(d9.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),w3r=i(cOe),fFe=n(cOe,"SPAN",{});var gwt=s(fFe);A3r=r(gwt,"TFAutoModelForTableQuestionAnswering"),gwt.forEach(t),cOe.forEach(t),aDe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(c9.$$.fragment,kl),y3r=i(kl),pc=n(kl,"P",{});var Xee=s(pc);L3r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QU=n(Xee,"A",{href:!0});var hwt=s(QU);x3r=r(hwt,"from_pretrained()"),hwt.forEach(t),$3r=r(Xee," class method or the "),HU=n(Xee,"A",{href:!0});var pwt=s(HU);k3r=r(pwt,"from_config()"),pwt.forEach(t),S3r=r(Xee,` class
method.`),Xee.forEach(t),R3r=i(kl),f9=n(kl,"P",{});var fOe=s(f9);P3r=r(fOe,"This class cannot be instantiated directly using "),mFe=n(fOe,"CODE",{});var _wt=s(mFe);B3r=r(_wt,"__init__()"),_wt.forEach(t),I3r=r(fOe," (throws an error)."),fOe.forEach(t),N3r=i(kl),It=n(kl,"DIV",{class:!0});var K6=s(It);T(m9.$$.fragment,K6),q3r=i(K6),gFe=n(K6,"P",{});var uwt=s(gFe);j3r=r(uwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uwt.forEach(t),D3r=i(K6),_c=n(K6,"P",{});var zee=s(_c);G3r=r(zee,`Note:
Loading a model from its configuration file does `),hFe=n(zee,"STRONG",{});var bwt=s(hFe);O3r=r(bwt,"not"),bwt.forEach(t),V3r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(zee,"A",{href:!0});var vwt=s(UU);X3r=r(vwt,"from_pretrained()"),vwt.forEach(t),z3r=r(zee," to load the model weights."),zee.forEach(t),W3r=i(K6),T(kC.$$.fragment,K6),K6.forEach(t),Q3r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(g9.$$.fragment,Sl),H3r=i(Sl),pFe=n(Sl,"P",{});var Fwt=s(pFe);U3r=r(Fwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fwt.forEach(t),J3r=i(Sl),dn=n(Sl,"P",{});var Z6=s(dn);Y3r=r(Z6,"The model class to instantiate is selected based on the "),_Fe=n(Z6,"CODE",{});var Twt=s(_Fe);K3r=r(Twt,"model_type"),Twt.forEach(t),Z3r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),uFe=n(Z6,"CODE",{});var Mwt=s(uFe);e0r=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),o0r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(Z6,"CODE",{});var Ewt=s(bFe);r0r=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),t0r=r(Z6,":"),Z6.forEach(t),a0r=i(Sl),vFe=n(Sl,"UL",{});var Cwt=s(vFe);SC=n(Cwt,"LI",{});var WBe=s(SC);FFe=n(WBe,"STRONG",{});var wwt=s(FFe);n0r=r(wwt,"tapas"),wwt.forEach(t),s0r=r(WBe," \u2014 "),JU=n(WBe,"A",{href:!0});var Awt=s(JU);l0r=r(Awt,"TFTapasForQuestionAnswering"),Awt.forEach(t),i0r=r(WBe," (TAPAS model)"),WBe.forEach(t),Cwt.forEach(t),d0r=i(Sl),T(RC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),nDe=i(f),uc=n(f,"H2",{class:!0});var mOe=s(uc);PC=n(mOe,"A",{id:!0,class:!0,href:!0});var ywt=s(PC);TFe=n(ywt,"SPAN",{});var Lwt=s(TFe);T(h9.$$.fragment,Lwt),Lwt.forEach(t),ywt.forEach(t),c0r=i(mOe),MFe=n(mOe,"SPAN",{});var xwt=s(MFe);f0r=r(xwt,"TFAutoModelForTokenClassification"),xwt.forEach(t),mOe.forEach(t),sDe=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(p9.$$.fragment,Rl),m0r=i(Rl),bc=n(Rl,"P",{});var Wee=s(bc);g0r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YU=n(Wee,"A",{href:!0});var $wt=s(YU);h0r=r($wt,"from_pretrained()"),$wt.forEach(t),p0r=r(Wee," class method or the "),KU=n(Wee,"A",{href:!0});var kwt=s(KU);_0r=r(kwt,"from_config()"),kwt.forEach(t),u0r=r(Wee,` class
method.`),Wee.forEach(t),b0r=i(Rl),_9=n(Rl,"P",{});var gOe=s(_9);v0r=r(gOe,"This class cannot be instantiated directly using "),EFe=n(gOe,"CODE",{});var Swt=s(EFe);F0r=r(Swt,"__init__()"),Swt.forEach(t),T0r=r(gOe," (throws an error)."),gOe.forEach(t),M0r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var eA=s(Nt);T(u9.$$.fragment,eA),E0r=i(eA),CFe=n(eA,"P",{});var Rwt=s(CFe);C0r=r(Rwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rwt.forEach(t),w0r=i(eA),vc=n(eA,"P",{});var Qee=s(vc);A0r=r(Qee,`Note:
Loading a model from its configuration file does `),wFe=n(Qee,"STRONG",{});var Pwt=s(wFe);y0r=r(Pwt,"not"),Pwt.forEach(t),L0r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(Qee,"A",{href:!0});var Bwt=s(ZU);x0r=r(Bwt,"from_pretrained()"),Bwt.forEach(t),$0r=r(Qee," to load the model weights."),Qee.forEach(t),k0r=i(eA),T(BC.$$.fragment,eA),eA.forEach(t),S0r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(b9.$$.fragment,Pl),R0r=i(Pl),AFe=n(Pl,"P",{});var Iwt=s(AFe);P0r=r(Iwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Iwt.forEach(t),B0r=i(Pl),cn=n(Pl,"P",{});var oA=s(cn);I0r=r(oA,"The model class to instantiate is selected based on the "),yFe=n(oA,"CODE",{});var Nwt=s(yFe);N0r=r(Nwt,"model_type"),Nwt.forEach(t),q0r=r(oA,` property of the config object (either
passed as an argument or loaded from `),LFe=n(oA,"CODE",{});var qwt=s(LFe);j0r=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),D0r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(oA,"CODE",{});var jwt=s(xFe);G0r=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),O0r=r(oA,":"),oA.forEach(t),V0r=i(Pl),de=n(Pl,"UL",{});var me=s(de);IC=n(me,"LI",{});var QBe=s(IC);$Fe=n(QBe,"STRONG",{});var Dwt=s($Fe);X0r=r(Dwt,"albert"),Dwt.forEach(t),z0r=r(QBe," \u2014 "),eJ=n(QBe,"A",{href:!0});var Gwt=s(eJ);W0r=r(Gwt,"TFAlbertForTokenClassification"),Gwt.forEach(t),Q0r=r(QBe," (ALBERT model)"),QBe.forEach(t),H0r=i(me),NC=n(me,"LI",{});var HBe=s(NC);kFe=n(HBe,"STRONG",{});var Owt=s(kFe);U0r=r(Owt,"bert"),Owt.forEach(t),J0r=r(HBe," \u2014 "),oJ=n(HBe,"A",{href:!0});var Vwt=s(oJ);Y0r=r(Vwt,"TFBertForTokenClassification"),Vwt.forEach(t),K0r=r(HBe," (BERT model)"),HBe.forEach(t),Z0r=i(me),qC=n(me,"LI",{});var UBe=s(qC);SFe=n(UBe,"STRONG",{});var Xwt=s(SFe);ewr=r(Xwt,"camembert"),Xwt.forEach(t),owr=r(UBe," \u2014 "),rJ=n(UBe,"A",{href:!0});var zwt=s(rJ);rwr=r(zwt,"TFCamembertForTokenClassification"),zwt.forEach(t),twr=r(UBe," (CamemBERT model)"),UBe.forEach(t),awr=i(me),jC=n(me,"LI",{});var JBe=s(jC);RFe=n(JBe,"STRONG",{});var Wwt=s(RFe);nwr=r(Wwt,"convbert"),Wwt.forEach(t),swr=r(JBe," \u2014 "),tJ=n(JBe,"A",{href:!0});var Qwt=s(tJ);lwr=r(Qwt,"TFConvBertForTokenClassification"),Qwt.forEach(t),iwr=r(JBe," (ConvBERT model)"),JBe.forEach(t),dwr=i(me),DC=n(me,"LI",{});var YBe=s(DC);PFe=n(YBe,"STRONG",{});var Hwt=s(PFe);cwr=r(Hwt,"deberta"),Hwt.forEach(t),fwr=r(YBe," \u2014 "),aJ=n(YBe,"A",{href:!0});var Uwt=s(aJ);mwr=r(Uwt,"TFDebertaForTokenClassification"),Uwt.forEach(t),gwr=r(YBe," (DeBERTa model)"),YBe.forEach(t),hwr=i(me),GC=n(me,"LI",{});var KBe=s(GC);BFe=n(KBe,"STRONG",{});var Jwt=s(BFe);pwr=r(Jwt,"deberta-v2"),Jwt.forEach(t),_wr=r(KBe," \u2014 "),nJ=n(KBe,"A",{href:!0});var Ywt=s(nJ);uwr=r(Ywt,"TFDebertaV2ForTokenClassification"),Ywt.forEach(t),bwr=r(KBe," (DeBERTa-v2 model)"),KBe.forEach(t),vwr=i(me),OC=n(me,"LI",{});var ZBe=s(OC);IFe=n(ZBe,"STRONG",{});var Kwt=s(IFe);Fwr=r(Kwt,"distilbert"),Kwt.forEach(t),Twr=r(ZBe," \u2014 "),sJ=n(ZBe,"A",{href:!0});var Zwt=s(sJ);Mwr=r(Zwt,"TFDistilBertForTokenClassification"),Zwt.forEach(t),Ewr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),Cwr=i(me),VC=n(me,"LI",{});var eIe=s(VC);NFe=n(eIe,"STRONG",{});var e6t=s(NFe);wwr=r(e6t,"electra"),e6t.forEach(t),Awr=r(eIe," \u2014 "),lJ=n(eIe,"A",{href:!0});var o6t=s(lJ);ywr=r(o6t,"TFElectraForTokenClassification"),o6t.forEach(t),Lwr=r(eIe," (ELECTRA model)"),eIe.forEach(t),xwr=i(me),XC=n(me,"LI",{});var oIe=s(XC);qFe=n(oIe,"STRONG",{});var r6t=s(qFe);$wr=r(r6t,"flaubert"),r6t.forEach(t),kwr=r(oIe," \u2014 "),iJ=n(oIe,"A",{href:!0});var t6t=s(iJ);Swr=r(t6t,"TFFlaubertForTokenClassification"),t6t.forEach(t),Rwr=r(oIe," (FlauBERT model)"),oIe.forEach(t),Pwr=i(me),zC=n(me,"LI",{});var rIe=s(zC);jFe=n(rIe,"STRONG",{});var a6t=s(jFe);Bwr=r(a6t,"funnel"),a6t.forEach(t),Iwr=r(rIe," \u2014 "),dJ=n(rIe,"A",{href:!0});var n6t=s(dJ);Nwr=r(n6t,"TFFunnelForTokenClassification"),n6t.forEach(t),qwr=r(rIe," (Funnel Transformer model)"),rIe.forEach(t),jwr=i(me),WC=n(me,"LI",{});var tIe=s(WC);DFe=n(tIe,"STRONG",{});var s6t=s(DFe);Dwr=r(s6t,"layoutlm"),s6t.forEach(t),Gwr=r(tIe," \u2014 "),cJ=n(tIe,"A",{href:!0});var l6t=s(cJ);Owr=r(l6t,"TFLayoutLMForTokenClassification"),l6t.forEach(t),Vwr=r(tIe," (LayoutLM model)"),tIe.forEach(t),Xwr=i(me),QC=n(me,"LI",{});var aIe=s(QC);GFe=n(aIe,"STRONG",{});var i6t=s(GFe);zwr=r(i6t,"longformer"),i6t.forEach(t),Wwr=r(aIe," \u2014 "),fJ=n(aIe,"A",{href:!0});var d6t=s(fJ);Qwr=r(d6t,"TFLongformerForTokenClassification"),d6t.forEach(t),Hwr=r(aIe," (Longformer model)"),aIe.forEach(t),Uwr=i(me),HC=n(me,"LI",{});var nIe=s(HC);OFe=n(nIe,"STRONG",{});var c6t=s(OFe);Jwr=r(c6t,"mobilebert"),c6t.forEach(t),Ywr=r(nIe," \u2014 "),mJ=n(nIe,"A",{href:!0});var f6t=s(mJ);Kwr=r(f6t,"TFMobileBertForTokenClassification"),f6t.forEach(t),Zwr=r(nIe," (MobileBERT model)"),nIe.forEach(t),e6r=i(me),UC=n(me,"LI",{});var sIe=s(UC);VFe=n(sIe,"STRONG",{});var m6t=s(VFe);o6r=r(m6t,"mpnet"),m6t.forEach(t),r6r=r(sIe," \u2014 "),gJ=n(sIe,"A",{href:!0});var g6t=s(gJ);t6r=r(g6t,"TFMPNetForTokenClassification"),g6t.forEach(t),a6r=r(sIe," (MPNet model)"),sIe.forEach(t),n6r=i(me),JC=n(me,"LI",{});var lIe=s(JC);XFe=n(lIe,"STRONG",{});var h6t=s(XFe);s6r=r(h6t,"rembert"),h6t.forEach(t),l6r=r(lIe," \u2014 "),hJ=n(lIe,"A",{href:!0});var p6t=s(hJ);i6r=r(p6t,"TFRemBertForTokenClassification"),p6t.forEach(t),d6r=r(lIe," (RemBERT model)"),lIe.forEach(t),c6r=i(me),YC=n(me,"LI",{});var iIe=s(YC);zFe=n(iIe,"STRONG",{});var _6t=s(zFe);f6r=r(_6t,"roberta"),_6t.forEach(t),m6r=r(iIe," \u2014 "),pJ=n(iIe,"A",{href:!0});var u6t=s(pJ);g6r=r(u6t,"TFRobertaForTokenClassification"),u6t.forEach(t),h6r=r(iIe," (RoBERTa model)"),iIe.forEach(t),p6r=i(me),KC=n(me,"LI",{});var dIe=s(KC);WFe=n(dIe,"STRONG",{});var b6t=s(WFe);_6r=r(b6t,"roformer"),b6t.forEach(t),u6r=r(dIe," \u2014 "),_J=n(dIe,"A",{href:!0});var v6t=s(_J);b6r=r(v6t,"TFRoFormerForTokenClassification"),v6t.forEach(t),v6r=r(dIe," (RoFormer model)"),dIe.forEach(t),F6r=i(me),ZC=n(me,"LI",{});var cIe=s(ZC);QFe=n(cIe,"STRONG",{});var F6t=s(QFe);T6r=r(F6t,"xlm"),F6t.forEach(t),M6r=r(cIe," \u2014 "),uJ=n(cIe,"A",{href:!0});var T6t=s(uJ);E6r=r(T6t,"TFXLMForTokenClassification"),T6t.forEach(t),C6r=r(cIe," (XLM model)"),cIe.forEach(t),w6r=i(me),e5=n(me,"LI",{});var fIe=s(e5);HFe=n(fIe,"STRONG",{});var M6t=s(HFe);A6r=r(M6t,"xlm-roberta"),M6t.forEach(t),y6r=r(fIe," \u2014 "),bJ=n(fIe,"A",{href:!0});var E6t=s(bJ);L6r=r(E6t,"TFXLMRobertaForTokenClassification"),E6t.forEach(t),x6r=r(fIe," (XLM-RoBERTa model)"),fIe.forEach(t),$6r=i(me),o5=n(me,"LI",{});var mIe=s(o5);UFe=n(mIe,"STRONG",{});var C6t=s(UFe);k6r=r(C6t,"xlnet"),C6t.forEach(t),S6r=r(mIe," \u2014 "),vJ=n(mIe,"A",{href:!0});var w6t=s(vJ);R6r=r(w6t,"TFXLNetForTokenClassification"),w6t.forEach(t),P6r=r(mIe," (XLNet model)"),mIe.forEach(t),me.forEach(t),B6r=i(Pl),T(r5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),lDe=i(f),Fc=n(f,"H2",{class:!0});var hOe=s(Fc);t5=n(hOe,"A",{id:!0,class:!0,href:!0});var A6t=s(t5);JFe=n(A6t,"SPAN",{});var y6t=s(JFe);T(v9.$$.fragment,y6t),y6t.forEach(t),A6t.forEach(t),I6r=i(hOe),YFe=n(hOe,"SPAN",{});var L6t=s(YFe);N6r=r(L6t,"TFAutoModelForQuestionAnswering"),L6t.forEach(t),hOe.forEach(t),iDe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(F9.$$.fragment,Bl),q6r=i(Bl),Tc=n(Bl,"P",{});var Hee=s(Tc);j6r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=n(Hee,"A",{href:!0});var x6t=s(FJ);D6r=r(x6t,"from_pretrained()"),x6t.forEach(t),G6r=r(Hee," class method or the "),TJ=n(Hee,"A",{href:!0});var $6t=s(TJ);O6r=r($6t,"from_config()"),$6t.forEach(t),V6r=r(Hee,` class
method.`),Hee.forEach(t),X6r=i(Bl),T9=n(Bl,"P",{});var pOe=s(T9);z6r=r(pOe,"This class cannot be instantiated directly using "),KFe=n(pOe,"CODE",{});var k6t=s(KFe);W6r=r(k6t,"__init__()"),k6t.forEach(t),Q6r=r(pOe," (throws an error)."),pOe.forEach(t),H6r=i(Bl),qt=n(Bl,"DIV",{class:!0});var rA=s(qt);T(M9.$$.fragment,rA),U6r=i(rA),ZFe=n(rA,"P",{});var S6t=s(ZFe);J6r=r(S6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),S6t.forEach(t),Y6r=i(rA),Mc=n(rA,"P",{});var Uee=s(Mc);K6r=r(Uee,`Note:
Loading a model from its configuration file does `),eTe=n(Uee,"STRONG",{});var R6t=s(eTe);Z6r=r(R6t,"not"),R6t.forEach(t),eAr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Uee,"A",{href:!0});var P6t=s(MJ);oAr=r(P6t,"from_pretrained()"),P6t.forEach(t),rAr=r(Uee," to load the model weights."),Uee.forEach(t),tAr=i(rA),T(a5.$$.fragment,rA),rA.forEach(t),aAr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(E9.$$.fragment,Il),nAr=i(Il),oTe=n(Il,"P",{});var B6t=s(oTe);sAr=r(B6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B6t.forEach(t),lAr=i(Il),fn=n(Il,"P",{});var tA=s(fn);iAr=r(tA,"The model class to instantiate is selected based on the "),rTe=n(tA,"CODE",{});var I6t=s(rTe);dAr=r(I6t,"model_type"),I6t.forEach(t),cAr=r(tA,` property of the config object (either
passed as an argument or loaded from `),tTe=n(tA,"CODE",{});var N6t=s(tTe);fAr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),mAr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(tA,"CODE",{});var q6t=s(aTe);gAr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),hAr=r(tA,":"),tA.forEach(t),pAr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);n5=n(ge,"LI",{});var gIe=s(n5);nTe=n(gIe,"STRONG",{});var j6t=s(nTe);_Ar=r(j6t,"albert"),j6t.forEach(t),uAr=r(gIe," \u2014 "),EJ=n(gIe,"A",{href:!0});var D6t=s(EJ);bAr=r(D6t,"TFAlbertForQuestionAnswering"),D6t.forEach(t),vAr=r(gIe," (ALBERT model)"),gIe.forEach(t),FAr=i(ge),s5=n(ge,"LI",{});var hIe=s(s5);sTe=n(hIe,"STRONG",{});var G6t=s(sTe);TAr=r(G6t,"bert"),G6t.forEach(t),MAr=r(hIe," \u2014 "),CJ=n(hIe,"A",{href:!0});var O6t=s(CJ);EAr=r(O6t,"TFBertForQuestionAnswering"),O6t.forEach(t),CAr=r(hIe," (BERT model)"),hIe.forEach(t),wAr=i(ge),l5=n(ge,"LI",{});var pIe=s(l5);lTe=n(pIe,"STRONG",{});var V6t=s(lTe);AAr=r(V6t,"camembert"),V6t.forEach(t),yAr=r(pIe," \u2014 "),wJ=n(pIe,"A",{href:!0});var X6t=s(wJ);LAr=r(X6t,"TFCamembertForQuestionAnswering"),X6t.forEach(t),xAr=r(pIe," (CamemBERT model)"),pIe.forEach(t),$Ar=i(ge),i5=n(ge,"LI",{});var _Ie=s(i5);iTe=n(_Ie,"STRONG",{});var z6t=s(iTe);kAr=r(z6t,"convbert"),z6t.forEach(t),SAr=r(_Ie," \u2014 "),AJ=n(_Ie,"A",{href:!0});var W6t=s(AJ);RAr=r(W6t,"TFConvBertForQuestionAnswering"),W6t.forEach(t),PAr=r(_Ie," (ConvBERT model)"),_Ie.forEach(t),BAr=i(ge),d5=n(ge,"LI",{});var uIe=s(d5);dTe=n(uIe,"STRONG",{});var Q6t=s(dTe);IAr=r(Q6t,"deberta"),Q6t.forEach(t),NAr=r(uIe," \u2014 "),yJ=n(uIe,"A",{href:!0});var H6t=s(yJ);qAr=r(H6t,"TFDebertaForQuestionAnswering"),H6t.forEach(t),jAr=r(uIe," (DeBERTa model)"),uIe.forEach(t),DAr=i(ge),c5=n(ge,"LI",{});var bIe=s(c5);cTe=n(bIe,"STRONG",{});var U6t=s(cTe);GAr=r(U6t,"deberta-v2"),U6t.forEach(t),OAr=r(bIe," \u2014 "),LJ=n(bIe,"A",{href:!0});var J6t=s(LJ);VAr=r(J6t,"TFDebertaV2ForQuestionAnswering"),J6t.forEach(t),XAr=r(bIe," (DeBERTa-v2 model)"),bIe.forEach(t),zAr=i(ge),f5=n(ge,"LI",{});var vIe=s(f5);fTe=n(vIe,"STRONG",{});var Y6t=s(fTe);WAr=r(Y6t,"distilbert"),Y6t.forEach(t),QAr=r(vIe," \u2014 "),xJ=n(vIe,"A",{href:!0});var K6t=s(xJ);HAr=r(K6t,"TFDistilBertForQuestionAnswering"),K6t.forEach(t),UAr=r(vIe," (DistilBERT model)"),vIe.forEach(t),JAr=i(ge),m5=n(ge,"LI",{});var FIe=s(m5);mTe=n(FIe,"STRONG",{});var Z6t=s(mTe);YAr=r(Z6t,"electra"),Z6t.forEach(t),KAr=r(FIe," \u2014 "),$J=n(FIe,"A",{href:!0});var eAt=s($J);ZAr=r(eAt,"TFElectraForQuestionAnswering"),eAt.forEach(t),eyr=r(FIe," (ELECTRA model)"),FIe.forEach(t),oyr=i(ge),g5=n(ge,"LI",{});var TIe=s(g5);gTe=n(TIe,"STRONG",{});var oAt=s(gTe);ryr=r(oAt,"flaubert"),oAt.forEach(t),tyr=r(TIe," \u2014 "),kJ=n(TIe,"A",{href:!0});var rAt=s(kJ);ayr=r(rAt,"TFFlaubertForQuestionAnsweringSimple"),rAt.forEach(t),nyr=r(TIe," (FlauBERT model)"),TIe.forEach(t),syr=i(ge),h5=n(ge,"LI",{});var MIe=s(h5);hTe=n(MIe,"STRONG",{});var tAt=s(hTe);lyr=r(tAt,"funnel"),tAt.forEach(t),iyr=r(MIe," \u2014 "),SJ=n(MIe,"A",{href:!0});var aAt=s(SJ);dyr=r(aAt,"TFFunnelForQuestionAnswering"),aAt.forEach(t),cyr=r(MIe," (Funnel Transformer model)"),MIe.forEach(t),fyr=i(ge),p5=n(ge,"LI",{});var EIe=s(p5);pTe=n(EIe,"STRONG",{});var nAt=s(pTe);myr=r(nAt,"gptj"),nAt.forEach(t),gyr=r(EIe," \u2014 "),RJ=n(EIe,"A",{href:!0});var sAt=s(RJ);hyr=r(sAt,"TFGPTJForQuestionAnswering"),sAt.forEach(t),pyr=r(EIe," (GPT-J model)"),EIe.forEach(t),_yr=i(ge),_5=n(ge,"LI",{});var CIe=s(_5);_Te=n(CIe,"STRONG",{});var lAt=s(_Te);uyr=r(lAt,"longformer"),lAt.forEach(t),byr=r(CIe," \u2014 "),PJ=n(CIe,"A",{href:!0});var iAt=s(PJ);vyr=r(iAt,"TFLongformerForQuestionAnswering"),iAt.forEach(t),Fyr=r(CIe," (Longformer model)"),CIe.forEach(t),Tyr=i(ge),u5=n(ge,"LI",{});var wIe=s(u5);uTe=n(wIe,"STRONG",{});var dAt=s(uTe);Myr=r(dAt,"mobilebert"),dAt.forEach(t),Eyr=r(wIe," \u2014 "),BJ=n(wIe,"A",{href:!0});var cAt=s(BJ);Cyr=r(cAt,"TFMobileBertForQuestionAnswering"),cAt.forEach(t),wyr=r(wIe," (MobileBERT model)"),wIe.forEach(t),Ayr=i(ge),b5=n(ge,"LI",{});var AIe=s(b5);bTe=n(AIe,"STRONG",{});var fAt=s(bTe);yyr=r(fAt,"mpnet"),fAt.forEach(t),Lyr=r(AIe," \u2014 "),IJ=n(AIe,"A",{href:!0});var mAt=s(IJ);xyr=r(mAt,"TFMPNetForQuestionAnswering"),mAt.forEach(t),$yr=r(AIe," (MPNet model)"),AIe.forEach(t),kyr=i(ge),v5=n(ge,"LI",{});var yIe=s(v5);vTe=n(yIe,"STRONG",{});var gAt=s(vTe);Syr=r(gAt,"rembert"),gAt.forEach(t),Ryr=r(yIe," \u2014 "),NJ=n(yIe,"A",{href:!0});var hAt=s(NJ);Pyr=r(hAt,"TFRemBertForQuestionAnswering"),hAt.forEach(t),Byr=r(yIe," (RemBERT model)"),yIe.forEach(t),Iyr=i(ge),F5=n(ge,"LI",{});var LIe=s(F5);FTe=n(LIe,"STRONG",{});var pAt=s(FTe);Nyr=r(pAt,"roberta"),pAt.forEach(t),qyr=r(LIe," \u2014 "),qJ=n(LIe,"A",{href:!0});var _At=s(qJ);jyr=r(_At,"TFRobertaForQuestionAnswering"),_At.forEach(t),Dyr=r(LIe," (RoBERTa model)"),LIe.forEach(t),Gyr=i(ge),T5=n(ge,"LI",{});var xIe=s(T5);TTe=n(xIe,"STRONG",{});var uAt=s(TTe);Oyr=r(uAt,"roformer"),uAt.forEach(t),Vyr=r(xIe," \u2014 "),jJ=n(xIe,"A",{href:!0});var bAt=s(jJ);Xyr=r(bAt,"TFRoFormerForQuestionAnswering"),bAt.forEach(t),zyr=r(xIe," (RoFormer model)"),xIe.forEach(t),Wyr=i(ge),M5=n(ge,"LI",{});var $Ie=s(M5);MTe=n($Ie,"STRONG",{});var vAt=s(MTe);Qyr=r(vAt,"xlm"),vAt.forEach(t),Hyr=r($Ie," \u2014 "),DJ=n($Ie,"A",{href:!0});var FAt=s(DJ);Uyr=r(FAt,"TFXLMForQuestionAnsweringSimple"),FAt.forEach(t),Jyr=r($Ie," (XLM model)"),$Ie.forEach(t),Yyr=i(ge),E5=n(ge,"LI",{});var kIe=s(E5);ETe=n(kIe,"STRONG",{});var TAt=s(ETe);Kyr=r(TAt,"xlm-roberta"),TAt.forEach(t),Zyr=r(kIe," \u2014 "),GJ=n(kIe,"A",{href:!0});var MAt=s(GJ);eLr=r(MAt,"TFXLMRobertaForQuestionAnswering"),MAt.forEach(t),oLr=r(kIe," (XLM-RoBERTa model)"),kIe.forEach(t),rLr=i(ge),C5=n(ge,"LI",{});var SIe=s(C5);CTe=n(SIe,"STRONG",{});var EAt=s(CTe);tLr=r(EAt,"xlnet"),EAt.forEach(t),aLr=r(SIe," \u2014 "),OJ=n(SIe,"A",{href:!0});var CAt=s(OJ);nLr=r(CAt,"TFXLNetForQuestionAnsweringSimple"),CAt.forEach(t),sLr=r(SIe," (XLNet model)"),SIe.forEach(t),ge.forEach(t),lLr=i(Il),T(w5.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),dDe=i(f),Ec=n(f,"H2",{class:!0});var _Oe=s(Ec);A5=n(_Oe,"A",{id:!0,class:!0,href:!0});var wAt=s(A5);wTe=n(wAt,"SPAN",{});var AAt=s(wTe);T(C9.$$.fragment,AAt),AAt.forEach(t),wAt.forEach(t),iLr=i(_Oe),ATe=n(_Oe,"SPAN",{});var yAt=s(ATe);dLr=r(yAt,"TFAutoModelForVision2Seq"),yAt.forEach(t),_Oe.forEach(t),cDe=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(w9.$$.fragment,Nl),cLr=i(Nl),Cc=n(Nl,"P",{});var Jee=s(Cc);fLr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=n(Jee,"A",{href:!0});var LAt=s(VJ);mLr=r(LAt,"from_pretrained()"),LAt.forEach(t),gLr=r(Jee," class method or the "),XJ=n(Jee,"A",{href:!0});var xAt=s(XJ);hLr=r(xAt,"from_config()"),xAt.forEach(t),pLr=r(Jee,` class
method.`),Jee.forEach(t),_Lr=i(Nl),A9=n(Nl,"P",{});var uOe=s(A9);uLr=r(uOe,"This class cannot be instantiated directly using "),yTe=n(uOe,"CODE",{});var $At=s(yTe);bLr=r($At,"__init__()"),$At.forEach(t),vLr=r(uOe," (throws an error)."),uOe.forEach(t),FLr=i(Nl),jt=n(Nl,"DIV",{class:!0});var aA=s(jt);T(y9.$$.fragment,aA),TLr=i(aA),LTe=n(aA,"P",{});var kAt=s(LTe);MLr=r(kAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kAt.forEach(t),ELr=i(aA),wc=n(aA,"P",{});var Yee=s(wc);CLr=r(Yee,`Note:
Loading a model from its configuration file does `),xTe=n(Yee,"STRONG",{});var SAt=s(xTe);wLr=r(SAt,"not"),SAt.forEach(t),ALr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Yee,"A",{href:!0});var RAt=s(zJ);yLr=r(RAt,"from_pretrained()"),RAt.forEach(t),LLr=r(Yee," to load the model weights."),Yee.forEach(t),xLr=i(aA),T(y5.$$.fragment,aA),aA.forEach(t),$Lr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(L9.$$.fragment,ql),kLr=i(ql),$Te=n(ql,"P",{});var PAt=s($Te);SLr=r(PAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PAt.forEach(t),RLr=i(ql),mn=n(ql,"P",{});var nA=s(mn);PLr=r(nA,"The model class to instantiate is selected based on the "),kTe=n(nA,"CODE",{});var BAt=s(kTe);BLr=r(BAt,"model_type"),BAt.forEach(t),ILr=r(nA,` property of the config object (either
passed as an argument or loaded from `),STe=n(nA,"CODE",{});var IAt=s(STe);NLr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),qLr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(nA,"CODE",{});var NAt=s(RTe);jLr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),DLr=r(nA,":"),nA.forEach(t),GLr=i(ql),PTe=n(ql,"UL",{});var qAt=s(PTe);L5=n(qAt,"LI",{});var RIe=s(L5);BTe=n(RIe,"STRONG",{});var jAt=s(BTe);OLr=r(jAt,"vision-encoder-decoder"),jAt.forEach(t),VLr=r(RIe," \u2014 "),WJ=n(RIe,"A",{href:!0});var DAt=s(WJ);XLr=r(DAt,"TFVisionEncoderDecoderModel"),DAt.forEach(t),zLr=r(RIe," (Vision Encoder decoder model)"),RIe.forEach(t),qAt.forEach(t),WLr=i(ql),T(x5.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),fDe=i(f),Ac=n(f,"H2",{class:!0});var bOe=s(Ac);$5=n(bOe,"A",{id:!0,class:!0,href:!0});var GAt=s($5);ITe=n(GAt,"SPAN",{});var OAt=s(ITe);T(x9.$$.fragment,OAt),OAt.forEach(t),GAt.forEach(t),QLr=i(bOe),NTe=n(bOe,"SPAN",{});var VAt=s(NTe);HLr=r(VAt,"TFAutoModelForSpeechSeq2Seq"),VAt.forEach(t),bOe.forEach(t),mDe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T($9.$$.fragment,jl),ULr=i(jl),yc=n(jl,"P",{});var Kee=s(yc);JLr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QJ=n(Kee,"A",{href:!0});var XAt=s(QJ);YLr=r(XAt,"from_pretrained()"),XAt.forEach(t),KLr=r(Kee," class method or the "),HJ=n(Kee,"A",{href:!0});var zAt=s(HJ);ZLr=r(zAt,"from_config()"),zAt.forEach(t),e8r=r(Kee,` class
method.`),Kee.forEach(t),o8r=i(jl),k9=n(jl,"P",{});var vOe=s(k9);r8r=r(vOe,"This class cannot be instantiated directly using "),qTe=n(vOe,"CODE",{});var WAt=s(qTe);t8r=r(WAt,"__init__()"),WAt.forEach(t),a8r=r(vOe," (throws an error)."),vOe.forEach(t),n8r=i(jl),Dt=n(jl,"DIV",{class:!0});var sA=s(Dt);T(S9.$$.fragment,sA),s8r=i(sA),jTe=n(sA,"P",{});var QAt=s(jTe);l8r=r(QAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),QAt.forEach(t),i8r=i(sA),Lc=n(sA,"P",{});var Zee=s(Lc);d8r=r(Zee,`Note:
Loading a model from its configuration file does `),DTe=n(Zee,"STRONG",{});var HAt=s(DTe);c8r=r(HAt,"not"),HAt.forEach(t),f8r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Zee,"A",{href:!0});var UAt=s(UJ);m8r=r(UAt,"from_pretrained()"),UAt.forEach(t),g8r=r(Zee," to load the model weights."),Zee.forEach(t),h8r=i(sA),T(k5.$$.fragment,sA),sA.forEach(t),p8r=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(R9.$$.fragment,Dl),_8r=i(Dl),GTe=n(Dl,"P",{});var JAt=s(GTe);u8r=r(JAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JAt.forEach(t),b8r=i(Dl),gn=n(Dl,"P",{});var lA=s(gn);v8r=r(lA,"The model class to instantiate is selected based on the "),OTe=n(lA,"CODE",{});var YAt=s(OTe);F8r=r(YAt,"model_type"),YAt.forEach(t),T8r=r(lA,` property of the config object (either
passed as an argument or loaded from `),VTe=n(lA,"CODE",{});var KAt=s(VTe);M8r=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),E8r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(lA,"CODE",{});var ZAt=s(XTe);C8r=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),w8r=r(lA,":"),lA.forEach(t),A8r=i(Dl),zTe=n(Dl,"UL",{});var eyt=s(zTe);S5=n(eyt,"LI",{});var PIe=s(S5);WTe=n(PIe,"STRONG",{});var oyt=s(WTe);y8r=r(oyt,"speech_to_text"),oyt.forEach(t),L8r=r(PIe," \u2014 "),JJ=n(PIe,"A",{href:!0});var ryt=s(JJ);x8r=r(ryt,"TFSpeech2TextForConditionalGeneration"),ryt.forEach(t),$8r=r(PIe," (Speech2Text model)"),PIe.forEach(t),eyt.forEach(t),k8r=i(Dl),T(R5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),gDe=i(f),xc=n(f,"H2",{class:!0});var FOe=s(xc);P5=n(FOe,"A",{id:!0,class:!0,href:!0});var tyt=s(P5);QTe=n(tyt,"SPAN",{});var ayt=s(QTe);T(P9.$$.fragment,ayt),ayt.forEach(t),tyt.forEach(t),S8r=i(FOe),HTe=n(FOe,"SPAN",{});var nyt=s(HTe);R8r=r(nyt,"FlaxAutoModel"),nyt.forEach(t),FOe.forEach(t),hDe=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(B9.$$.fragment,Gl),P8r=i(Gl),$c=n(Gl,"P",{});var eoe=s($c);B8r=r(eoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YJ=n(eoe,"A",{href:!0});var syt=s(YJ);I8r=r(syt,"from_pretrained()"),syt.forEach(t),N8r=r(eoe," class method or the "),KJ=n(eoe,"A",{href:!0});var lyt=s(KJ);q8r=r(lyt,"from_config()"),lyt.forEach(t),j8r=r(eoe,` class
method.`),eoe.forEach(t),D8r=i(Gl),I9=n(Gl,"P",{});var TOe=s(I9);G8r=r(TOe,"This class cannot be instantiated directly using "),UTe=n(TOe,"CODE",{});var iyt=s(UTe);O8r=r(iyt,"__init__()"),iyt.forEach(t),V8r=r(TOe," (throws an error)."),TOe.forEach(t),X8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var iA=s(Gt);T(N9.$$.fragment,iA),z8r=i(iA),JTe=n(iA,"P",{});var dyt=s(JTe);W8r=r(dyt,"Instantiates one of the base model classes of the library from a configuration."),dyt.forEach(t),Q8r=i(iA),kc=n(iA,"P",{});var ooe=s(kc);H8r=r(ooe,`Note:
Loading a model from its configuration file does `),YTe=n(ooe,"STRONG",{});var cyt=s(YTe);U8r=r(cyt,"not"),cyt.forEach(t),J8r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(ooe,"A",{href:!0});var fyt=s(ZJ);Y8r=r(fyt,"from_pretrained()"),fyt.forEach(t),K8r=r(ooe," to load the model weights."),ooe.forEach(t),Z8r=i(iA),T(B5.$$.fragment,iA),iA.forEach(t),e9r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(q9.$$.fragment,Ol),o9r=i(Ol),KTe=n(Ol,"P",{});var myt=s(KTe);r9r=r(myt,"Instantiate one of the base model classes of the library from a pretrained model."),myt.forEach(t),t9r=i(Ol),hn=n(Ol,"P",{});var dA=s(hn);a9r=r(dA,"The model class to instantiate is selected based on the "),ZTe=n(dA,"CODE",{});var gyt=s(ZTe);n9r=r(gyt,"model_type"),gyt.forEach(t),s9r=r(dA,` property of the config object (either
passed as an argument or loaded from `),eMe=n(dA,"CODE",{});var hyt=s(eMe);l9r=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),i9r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=n(dA,"CODE",{});var pyt=s(oMe);d9r=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),c9r=r(dA,":"),dA.forEach(t),f9r=i(Ol),re=n(Ol,"UL",{});var ne=s(re);I5=n(ne,"LI",{});var BIe=s(I5);rMe=n(BIe,"STRONG",{});var _yt=s(rMe);m9r=r(_yt,"albert"),_yt.forEach(t),g9r=r(BIe," \u2014 "),eY=n(BIe,"A",{href:!0});var uyt=s(eY);h9r=r(uyt,"FlaxAlbertModel"),uyt.forEach(t),p9r=r(BIe," (ALBERT model)"),BIe.forEach(t),_9r=i(ne),N5=n(ne,"LI",{});var IIe=s(N5);tMe=n(IIe,"STRONG",{});var byt=s(tMe);u9r=r(byt,"bart"),byt.forEach(t),b9r=r(IIe," \u2014 "),oY=n(IIe,"A",{href:!0});var vyt=s(oY);v9r=r(vyt,"FlaxBartModel"),vyt.forEach(t),F9r=r(IIe," (BART model)"),IIe.forEach(t),T9r=i(ne),q5=n(ne,"LI",{});var NIe=s(q5);aMe=n(NIe,"STRONG",{});var Fyt=s(aMe);M9r=r(Fyt,"beit"),Fyt.forEach(t),E9r=r(NIe," \u2014 "),rY=n(NIe,"A",{href:!0});var Tyt=s(rY);C9r=r(Tyt,"FlaxBeitModel"),Tyt.forEach(t),w9r=r(NIe," (BEiT model)"),NIe.forEach(t),A9r=i(ne),j5=n(ne,"LI",{});var qIe=s(j5);nMe=n(qIe,"STRONG",{});var Myt=s(nMe);y9r=r(Myt,"bert"),Myt.forEach(t),L9r=r(qIe," \u2014 "),tY=n(qIe,"A",{href:!0});var Eyt=s(tY);x9r=r(Eyt,"FlaxBertModel"),Eyt.forEach(t),$9r=r(qIe," (BERT model)"),qIe.forEach(t),k9r=i(ne),D5=n(ne,"LI",{});var jIe=s(D5);sMe=n(jIe,"STRONG",{});var Cyt=s(sMe);S9r=r(Cyt,"big_bird"),Cyt.forEach(t),R9r=r(jIe," \u2014 "),aY=n(jIe,"A",{href:!0});var wyt=s(aY);P9r=r(wyt,"FlaxBigBirdModel"),wyt.forEach(t),B9r=r(jIe," (BigBird model)"),jIe.forEach(t),I9r=i(ne),G5=n(ne,"LI",{});var DIe=s(G5);lMe=n(DIe,"STRONG",{});var Ayt=s(lMe);N9r=r(Ayt,"blenderbot"),Ayt.forEach(t),q9r=r(DIe," \u2014 "),nY=n(DIe,"A",{href:!0});var yyt=s(nY);j9r=r(yyt,"FlaxBlenderbotModel"),yyt.forEach(t),D9r=r(DIe," (Blenderbot model)"),DIe.forEach(t),G9r=i(ne),O5=n(ne,"LI",{});var GIe=s(O5);iMe=n(GIe,"STRONG",{});var Lyt=s(iMe);O9r=r(Lyt,"blenderbot-small"),Lyt.forEach(t),V9r=r(GIe," \u2014 "),sY=n(GIe,"A",{href:!0});var xyt=s(sY);X9r=r(xyt,"FlaxBlenderbotSmallModel"),xyt.forEach(t),z9r=r(GIe," (BlenderbotSmall model)"),GIe.forEach(t),W9r=i(ne),V5=n(ne,"LI",{});var OIe=s(V5);dMe=n(OIe,"STRONG",{});var $yt=s(dMe);Q9r=r($yt,"clip"),$yt.forEach(t),H9r=r(OIe," \u2014 "),lY=n(OIe,"A",{href:!0});var kyt=s(lY);U9r=r(kyt,"FlaxCLIPModel"),kyt.forEach(t),J9r=r(OIe," (CLIP model)"),OIe.forEach(t),Y9r=i(ne),X5=n(ne,"LI",{});var VIe=s(X5);cMe=n(VIe,"STRONG",{});var Syt=s(cMe);K9r=r(Syt,"distilbert"),Syt.forEach(t),Z9r=r(VIe," \u2014 "),iY=n(VIe,"A",{href:!0});var Ryt=s(iY);exr=r(Ryt,"FlaxDistilBertModel"),Ryt.forEach(t),oxr=r(VIe," (DistilBERT model)"),VIe.forEach(t),rxr=i(ne),z5=n(ne,"LI",{});var XIe=s(z5);fMe=n(XIe,"STRONG",{});var Pyt=s(fMe);txr=r(Pyt,"electra"),Pyt.forEach(t),axr=r(XIe," \u2014 "),dY=n(XIe,"A",{href:!0});var Byt=s(dY);nxr=r(Byt,"FlaxElectraModel"),Byt.forEach(t),sxr=r(XIe," (ELECTRA model)"),XIe.forEach(t),lxr=i(ne),W5=n(ne,"LI",{});var zIe=s(W5);mMe=n(zIe,"STRONG",{});var Iyt=s(mMe);ixr=r(Iyt,"gpt2"),Iyt.forEach(t),dxr=r(zIe," \u2014 "),cY=n(zIe,"A",{href:!0});var Nyt=s(cY);cxr=r(Nyt,"FlaxGPT2Model"),Nyt.forEach(t),fxr=r(zIe," (OpenAI GPT-2 model)"),zIe.forEach(t),mxr=i(ne),Q5=n(ne,"LI",{});var WIe=s(Q5);gMe=n(WIe,"STRONG",{});var qyt=s(gMe);gxr=r(qyt,"gpt_neo"),qyt.forEach(t),hxr=r(WIe," \u2014 "),fY=n(WIe,"A",{href:!0});var jyt=s(fY);pxr=r(jyt,"FlaxGPTNeoModel"),jyt.forEach(t),_xr=r(WIe," (GPT Neo model)"),WIe.forEach(t),uxr=i(ne),H5=n(ne,"LI",{});var QIe=s(H5);hMe=n(QIe,"STRONG",{});var Dyt=s(hMe);bxr=r(Dyt,"gptj"),Dyt.forEach(t),vxr=r(QIe," \u2014 "),mY=n(QIe,"A",{href:!0});var Gyt=s(mY);Fxr=r(Gyt,"FlaxGPTJModel"),Gyt.forEach(t),Txr=r(QIe," (GPT-J model)"),QIe.forEach(t),Mxr=i(ne),U5=n(ne,"LI",{});var HIe=s(U5);pMe=n(HIe,"STRONG",{});var Oyt=s(pMe);Exr=r(Oyt,"marian"),Oyt.forEach(t),Cxr=r(HIe," \u2014 "),gY=n(HIe,"A",{href:!0});var Vyt=s(gY);wxr=r(Vyt,"FlaxMarianModel"),Vyt.forEach(t),Axr=r(HIe," (Marian model)"),HIe.forEach(t),yxr=i(ne),J5=n(ne,"LI",{});var UIe=s(J5);_Me=n(UIe,"STRONG",{});var Xyt=s(_Me);Lxr=r(Xyt,"mbart"),Xyt.forEach(t),xxr=r(UIe," \u2014 "),hY=n(UIe,"A",{href:!0});var zyt=s(hY);$xr=r(zyt,"FlaxMBartModel"),zyt.forEach(t),kxr=r(UIe," (mBART model)"),UIe.forEach(t),Sxr=i(ne),Y5=n(ne,"LI",{});var JIe=s(Y5);uMe=n(JIe,"STRONG",{});var Wyt=s(uMe);Rxr=r(Wyt,"mt5"),Wyt.forEach(t),Pxr=r(JIe," \u2014 "),pY=n(JIe,"A",{href:!0});var Qyt=s(pY);Bxr=r(Qyt,"FlaxMT5Model"),Qyt.forEach(t),Ixr=r(JIe," (mT5 model)"),JIe.forEach(t),Nxr=i(ne),K5=n(ne,"LI",{});var YIe=s(K5);bMe=n(YIe,"STRONG",{});var Hyt=s(bMe);qxr=r(Hyt,"opt"),Hyt.forEach(t),jxr=r(YIe," \u2014 "),_Y=n(YIe,"A",{href:!0});var Uyt=s(_Y);Dxr=r(Uyt,"FlaxOPTModel"),Uyt.forEach(t),Gxr=r(YIe," (OPT model)"),YIe.forEach(t),Oxr=i(ne),Z5=n(ne,"LI",{});var KIe=s(Z5);vMe=n(KIe,"STRONG",{});var Jyt=s(vMe);Vxr=r(Jyt,"pegasus"),Jyt.forEach(t),Xxr=r(KIe," \u2014 "),uY=n(KIe,"A",{href:!0});var Yyt=s(uY);zxr=r(Yyt,"FlaxPegasusModel"),Yyt.forEach(t),Wxr=r(KIe," (Pegasus model)"),KIe.forEach(t),Qxr=i(ne),e3=n(ne,"LI",{});var ZIe=s(e3);FMe=n(ZIe,"STRONG",{});var Kyt=s(FMe);Hxr=r(Kyt,"roberta"),Kyt.forEach(t),Uxr=r(ZIe," \u2014 "),bY=n(ZIe,"A",{href:!0});var Zyt=s(bY);Jxr=r(Zyt,"FlaxRobertaModel"),Zyt.forEach(t),Yxr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),Kxr=i(ne),o3=n(ne,"LI",{});var eNe=s(o3);TMe=n(eNe,"STRONG",{});var eLt=s(TMe);Zxr=r(eLt,"roformer"),eLt.forEach(t),e$r=r(eNe," \u2014 "),vY=n(eNe,"A",{href:!0});var oLt=s(vY);o$r=r(oLt,"FlaxRoFormerModel"),oLt.forEach(t),r$r=r(eNe," (RoFormer model)"),eNe.forEach(t),t$r=i(ne),r3=n(ne,"LI",{});var oNe=s(r3);MMe=n(oNe,"STRONG",{});var rLt=s(MMe);a$r=r(rLt,"t5"),rLt.forEach(t),n$r=r(oNe," \u2014 "),FY=n(oNe,"A",{href:!0});var tLt=s(FY);s$r=r(tLt,"FlaxT5Model"),tLt.forEach(t),l$r=r(oNe," (T5 model)"),oNe.forEach(t),i$r=i(ne),t3=n(ne,"LI",{});var rNe=s(t3);EMe=n(rNe,"STRONG",{});var aLt=s(EMe);d$r=r(aLt,"vision-text-dual-encoder"),aLt.forEach(t),c$r=r(rNe," \u2014 "),TY=n(rNe,"A",{href:!0});var nLt=s(TY);f$r=r(nLt,"FlaxVisionTextDualEncoderModel"),nLt.forEach(t),m$r=r(rNe," (VisionTextDualEncoder model)"),rNe.forEach(t),g$r=i(ne),a3=n(ne,"LI",{});var tNe=s(a3);CMe=n(tNe,"STRONG",{});var sLt=s(CMe);h$r=r(sLt,"vit"),sLt.forEach(t),p$r=r(tNe," \u2014 "),MY=n(tNe,"A",{href:!0});var lLt=s(MY);_$r=r(lLt,"FlaxViTModel"),lLt.forEach(t),u$r=r(tNe," (ViT model)"),tNe.forEach(t),b$r=i(ne),n3=n(ne,"LI",{});var aNe=s(n3);wMe=n(aNe,"STRONG",{});var iLt=s(wMe);v$r=r(iLt,"wav2vec2"),iLt.forEach(t),F$r=r(aNe," \u2014 "),EY=n(aNe,"A",{href:!0});var dLt=s(EY);T$r=r(dLt,"FlaxWav2Vec2Model"),dLt.forEach(t),M$r=r(aNe," (Wav2Vec2 model)"),aNe.forEach(t),E$r=i(ne),s3=n(ne,"LI",{});var nNe=s(s3);AMe=n(nNe,"STRONG",{});var cLt=s(AMe);C$r=r(cLt,"xglm"),cLt.forEach(t),w$r=r(nNe," \u2014 "),CY=n(nNe,"A",{href:!0});var fLt=s(CY);A$r=r(fLt,"FlaxXGLMModel"),fLt.forEach(t),y$r=r(nNe," (XGLM model)"),nNe.forEach(t),L$r=i(ne),l3=n(ne,"LI",{});var sNe=s(l3);yMe=n(sNe,"STRONG",{});var mLt=s(yMe);x$r=r(mLt,"xlm-roberta"),mLt.forEach(t),$$r=r(sNe," \u2014 "),wY=n(sNe,"A",{href:!0});var gLt=s(wY);k$r=r(gLt,"FlaxXLMRobertaModel"),gLt.forEach(t),S$r=r(sNe," (XLM-RoBERTa model)"),sNe.forEach(t),ne.forEach(t),R$r=i(Ol),T(i3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),pDe=i(f),Sc=n(f,"H2",{class:!0});var MOe=s(Sc);d3=n(MOe,"A",{id:!0,class:!0,href:!0});var hLt=s(d3);LMe=n(hLt,"SPAN",{});var pLt=s(LMe);T(j9.$$.fragment,pLt),pLt.forEach(t),hLt.forEach(t),P$r=i(MOe),xMe=n(MOe,"SPAN",{});var _Lt=s(xMe);B$r=r(_Lt,"FlaxAutoModelForCausalLM"),_Lt.forEach(t),MOe.forEach(t),_De=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(D9.$$.fragment,Vl),I$r=i(Vl),Rc=n(Vl,"P",{});var roe=s(Rc);N$r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=n(roe,"A",{href:!0});var uLt=s(AY);q$r=r(uLt,"from_pretrained()"),uLt.forEach(t),j$r=r(roe," class method or the "),yY=n(roe,"A",{href:!0});var bLt=s(yY);D$r=r(bLt,"from_config()"),bLt.forEach(t),G$r=r(roe,` class
method.`),roe.forEach(t),O$r=i(Vl),G9=n(Vl,"P",{});var EOe=s(G9);V$r=r(EOe,"This class cannot be instantiated directly using "),$Me=n(EOe,"CODE",{});var vLt=s($Me);X$r=r(vLt,"__init__()"),vLt.forEach(t),z$r=r(EOe," (throws an error)."),EOe.forEach(t),W$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var cA=s(Ot);T(O9.$$.fragment,cA),Q$r=i(cA),kMe=n(cA,"P",{});var FLt=s(kMe);H$r=r(FLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FLt.forEach(t),U$r=i(cA),Pc=n(cA,"P",{});var toe=s(Pc);J$r=r(toe,`Note:
Loading a model from its configuration file does `),SMe=n(toe,"STRONG",{});var TLt=s(SMe);Y$r=r(TLt,"not"),TLt.forEach(t),K$r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(toe,"A",{href:!0});var MLt=s(LY);Z$r=r(MLt,"from_pretrained()"),MLt.forEach(t),ekr=r(toe," to load the model weights."),toe.forEach(t),okr=i(cA),T(c3.$$.fragment,cA),cA.forEach(t),rkr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(V9.$$.fragment,Xl),tkr=i(Xl),RMe=n(Xl,"P",{});var ELt=s(RMe);akr=r(ELt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ELt.forEach(t),nkr=i(Xl),pn=n(Xl,"P",{});var fA=s(pn);skr=r(fA,"The model class to instantiate is selected based on the "),PMe=n(fA,"CODE",{});var CLt=s(PMe);lkr=r(CLt,"model_type"),CLt.forEach(t),ikr=r(fA,` property of the config object (either
passed as an argument or loaded from `),BMe=n(fA,"CODE",{});var wLt=s(BMe);dkr=r(wLt,"pretrained_model_name_or_path"),wLt.forEach(t),ckr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(fA,"CODE",{});var ALt=s(IMe);fkr=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),mkr=r(fA,":"),fA.forEach(t),gkr=i(Xl),Le=n(Xl,"UL",{});var Ie=s(Le);f3=n(Ie,"LI",{});var lNe=s(f3);NMe=n(lNe,"STRONG",{});var yLt=s(NMe);hkr=r(yLt,"bart"),yLt.forEach(t),pkr=r(lNe," \u2014 "),xY=n(lNe,"A",{href:!0});var LLt=s(xY);_kr=r(LLt,"FlaxBartForCausalLM"),LLt.forEach(t),ukr=r(lNe," (BART model)"),lNe.forEach(t),bkr=i(Ie),m3=n(Ie,"LI",{});var iNe=s(m3);qMe=n(iNe,"STRONG",{});var xLt=s(qMe);vkr=r(xLt,"bert"),xLt.forEach(t),Fkr=r(iNe," \u2014 "),$Y=n(iNe,"A",{href:!0});var $Lt=s($Y);Tkr=r($Lt,"FlaxBertForCausalLM"),$Lt.forEach(t),Mkr=r(iNe," (BERT model)"),iNe.forEach(t),Ekr=i(Ie),g3=n(Ie,"LI",{});var dNe=s(g3);jMe=n(dNe,"STRONG",{});var kLt=s(jMe);Ckr=r(kLt,"big_bird"),kLt.forEach(t),wkr=r(dNe," \u2014 "),kY=n(dNe,"A",{href:!0});var SLt=s(kY);Akr=r(SLt,"FlaxBigBirdForCausalLM"),SLt.forEach(t),ykr=r(dNe," (BigBird model)"),dNe.forEach(t),Lkr=i(Ie),h3=n(Ie,"LI",{});var cNe=s(h3);DMe=n(cNe,"STRONG",{});var RLt=s(DMe);xkr=r(RLt,"electra"),RLt.forEach(t),$kr=r(cNe," \u2014 "),SY=n(cNe,"A",{href:!0});var PLt=s(SY);kkr=r(PLt,"FlaxElectraForCausalLM"),PLt.forEach(t),Skr=r(cNe," (ELECTRA model)"),cNe.forEach(t),Rkr=i(Ie),p3=n(Ie,"LI",{});var fNe=s(p3);GMe=n(fNe,"STRONG",{});var BLt=s(GMe);Pkr=r(BLt,"gpt2"),BLt.forEach(t),Bkr=r(fNe," \u2014 "),RY=n(fNe,"A",{href:!0});var ILt=s(RY);Ikr=r(ILt,"FlaxGPT2LMHeadModel"),ILt.forEach(t),Nkr=r(fNe," (OpenAI GPT-2 model)"),fNe.forEach(t),qkr=i(Ie),_3=n(Ie,"LI",{});var mNe=s(_3);OMe=n(mNe,"STRONG",{});var NLt=s(OMe);jkr=r(NLt,"gpt_neo"),NLt.forEach(t),Dkr=r(mNe," \u2014 "),PY=n(mNe,"A",{href:!0});var qLt=s(PY);Gkr=r(qLt,"FlaxGPTNeoForCausalLM"),qLt.forEach(t),Okr=r(mNe," (GPT Neo model)"),mNe.forEach(t),Vkr=i(Ie),u3=n(Ie,"LI",{});var gNe=s(u3);VMe=n(gNe,"STRONG",{});var jLt=s(VMe);Xkr=r(jLt,"gptj"),jLt.forEach(t),zkr=r(gNe," \u2014 "),BY=n(gNe,"A",{href:!0});var DLt=s(BY);Wkr=r(DLt,"FlaxGPTJForCausalLM"),DLt.forEach(t),Qkr=r(gNe," (GPT-J model)"),gNe.forEach(t),Hkr=i(Ie),b3=n(Ie,"LI",{});var hNe=s(b3);XMe=n(hNe,"STRONG",{});var GLt=s(XMe);Ukr=r(GLt,"opt"),GLt.forEach(t),Jkr=r(hNe," \u2014 "),IY=n(hNe,"A",{href:!0});var OLt=s(IY);Ykr=r(OLt,"FlaxOPTForCausalLM"),OLt.forEach(t),Kkr=r(hNe," (OPT model)"),hNe.forEach(t),Zkr=i(Ie),v3=n(Ie,"LI",{});var pNe=s(v3);zMe=n(pNe,"STRONG",{});var VLt=s(zMe);eSr=r(VLt,"roberta"),VLt.forEach(t),oSr=r(pNe," \u2014 "),NY=n(pNe,"A",{href:!0});var XLt=s(NY);rSr=r(XLt,"FlaxRobertaForCausalLM"),XLt.forEach(t),tSr=r(pNe," (RoBERTa model)"),pNe.forEach(t),aSr=i(Ie),F3=n(Ie,"LI",{});var _Ne=s(F3);WMe=n(_Ne,"STRONG",{});var zLt=s(WMe);nSr=r(zLt,"xglm"),zLt.forEach(t),sSr=r(_Ne," \u2014 "),qY=n(_Ne,"A",{href:!0});var WLt=s(qY);lSr=r(WLt,"FlaxXGLMForCausalLM"),WLt.forEach(t),iSr=r(_Ne," (XGLM model)"),_Ne.forEach(t),Ie.forEach(t),dSr=i(Xl),T(T3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),uDe=i(f),Bc=n(f,"H2",{class:!0});var COe=s(Bc);M3=n(COe,"A",{id:!0,class:!0,href:!0});var QLt=s(M3);QMe=n(QLt,"SPAN",{});var HLt=s(QMe);T(X9.$$.fragment,HLt),HLt.forEach(t),QLt.forEach(t),cSr=i(COe),HMe=n(COe,"SPAN",{});var ULt=s(HMe);fSr=r(ULt,"FlaxAutoModelForPreTraining"),ULt.forEach(t),COe.forEach(t),bDe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(z9.$$.fragment,zl),mSr=i(zl),Ic=n(zl,"P",{});var aoe=s(Ic);gSr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jY=n(aoe,"A",{href:!0});var JLt=s(jY);hSr=r(JLt,"from_pretrained()"),JLt.forEach(t),pSr=r(aoe," class method or the "),DY=n(aoe,"A",{href:!0});var YLt=s(DY);_Sr=r(YLt,"from_config()"),YLt.forEach(t),uSr=r(aoe,` class
method.`),aoe.forEach(t),bSr=i(zl),W9=n(zl,"P",{});var wOe=s(W9);vSr=r(wOe,"This class cannot be instantiated directly using "),UMe=n(wOe,"CODE",{});var KLt=s(UMe);FSr=r(KLt,"__init__()"),KLt.forEach(t),TSr=r(wOe," (throws an error)."),wOe.forEach(t),MSr=i(zl),Vt=n(zl,"DIV",{class:!0});var mA=s(Vt);T(Q9.$$.fragment,mA),ESr=i(mA),JMe=n(mA,"P",{});var ZLt=s(JMe);CSr=r(ZLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZLt.forEach(t),wSr=i(mA),Nc=n(mA,"P",{});var noe=s(Nc);ASr=r(noe,`Note:
Loading a model from its configuration file does `),YMe=n(noe,"STRONG",{});var e8t=s(YMe);ySr=r(e8t,"not"),e8t.forEach(t),LSr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(noe,"A",{href:!0});var o8t=s(GY);xSr=r(o8t,"from_pretrained()"),o8t.forEach(t),$Sr=r(noe," to load the model weights."),noe.forEach(t),kSr=i(mA),T(E3.$$.fragment,mA),mA.forEach(t),SSr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(H9.$$.fragment,Wl),RSr=i(Wl),KMe=n(Wl,"P",{});var r8t=s(KMe);PSr=r(r8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r8t.forEach(t),BSr=i(Wl),_n=n(Wl,"P",{});var gA=s(_n);ISr=r(gA,"The model class to instantiate is selected based on the "),ZMe=n(gA,"CODE",{});var t8t=s(ZMe);NSr=r(t8t,"model_type"),t8t.forEach(t),qSr=r(gA,` property of the config object (either
passed as an argument or loaded from `),eEe=n(gA,"CODE",{});var a8t=s(eEe);jSr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),DSr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(gA,"CODE",{});var n8t=s(oEe);GSr=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),OSr=r(gA,":"),gA.forEach(t),VSr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);C3=n(we,"LI",{});var uNe=s(C3);rEe=n(uNe,"STRONG",{});var s8t=s(rEe);XSr=r(s8t,"albert"),s8t.forEach(t),zSr=r(uNe," \u2014 "),OY=n(uNe,"A",{href:!0});var l8t=s(OY);WSr=r(l8t,"FlaxAlbertForPreTraining"),l8t.forEach(t),QSr=r(uNe," (ALBERT model)"),uNe.forEach(t),HSr=i(we),w3=n(we,"LI",{});var bNe=s(w3);tEe=n(bNe,"STRONG",{});var i8t=s(tEe);USr=r(i8t,"bart"),i8t.forEach(t),JSr=r(bNe," \u2014 "),VY=n(bNe,"A",{href:!0});var d8t=s(VY);YSr=r(d8t,"FlaxBartForConditionalGeneration"),d8t.forEach(t),KSr=r(bNe," (BART model)"),bNe.forEach(t),ZSr=i(we),A3=n(we,"LI",{});var vNe=s(A3);aEe=n(vNe,"STRONG",{});var c8t=s(aEe);eRr=r(c8t,"bert"),c8t.forEach(t),oRr=r(vNe," \u2014 "),XY=n(vNe,"A",{href:!0});var f8t=s(XY);rRr=r(f8t,"FlaxBertForPreTraining"),f8t.forEach(t),tRr=r(vNe," (BERT model)"),vNe.forEach(t),aRr=i(we),y3=n(we,"LI",{});var FNe=s(y3);nEe=n(FNe,"STRONG",{});var m8t=s(nEe);nRr=r(m8t,"big_bird"),m8t.forEach(t),sRr=r(FNe," \u2014 "),zY=n(FNe,"A",{href:!0});var g8t=s(zY);lRr=r(g8t,"FlaxBigBirdForPreTraining"),g8t.forEach(t),iRr=r(FNe," (BigBird model)"),FNe.forEach(t),dRr=i(we),L3=n(we,"LI",{});var TNe=s(L3);sEe=n(TNe,"STRONG",{});var h8t=s(sEe);cRr=r(h8t,"electra"),h8t.forEach(t),fRr=r(TNe," \u2014 "),WY=n(TNe,"A",{href:!0});var p8t=s(WY);mRr=r(p8t,"FlaxElectraForPreTraining"),p8t.forEach(t),gRr=r(TNe," (ELECTRA model)"),TNe.forEach(t),hRr=i(we),x3=n(we,"LI",{});var MNe=s(x3);lEe=n(MNe,"STRONG",{});var _8t=s(lEe);pRr=r(_8t,"mbart"),_8t.forEach(t),_Rr=r(MNe," \u2014 "),QY=n(MNe,"A",{href:!0});var u8t=s(QY);uRr=r(u8t,"FlaxMBartForConditionalGeneration"),u8t.forEach(t),bRr=r(MNe," (mBART model)"),MNe.forEach(t),vRr=i(we),$3=n(we,"LI",{});var ENe=s($3);iEe=n(ENe,"STRONG",{});var b8t=s(iEe);FRr=r(b8t,"mt5"),b8t.forEach(t),TRr=r(ENe," \u2014 "),HY=n(ENe,"A",{href:!0});var v8t=s(HY);MRr=r(v8t,"FlaxMT5ForConditionalGeneration"),v8t.forEach(t),ERr=r(ENe," (mT5 model)"),ENe.forEach(t),CRr=i(we),k3=n(we,"LI",{});var CNe=s(k3);dEe=n(CNe,"STRONG",{});var F8t=s(dEe);wRr=r(F8t,"roberta"),F8t.forEach(t),ARr=r(CNe," \u2014 "),UY=n(CNe,"A",{href:!0});var T8t=s(UY);yRr=r(T8t,"FlaxRobertaForMaskedLM"),T8t.forEach(t),LRr=r(CNe," (RoBERTa model)"),CNe.forEach(t),xRr=i(we),S3=n(we,"LI",{});var wNe=s(S3);cEe=n(wNe,"STRONG",{});var M8t=s(cEe);$Rr=r(M8t,"roformer"),M8t.forEach(t),kRr=r(wNe," \u2014 "),JY=n(wNe,"A",{href:!0});var E8t=s(JY);SRr=r(E8t,"FlaxRoFormerForMaskedLM"),E8t.forEach(t),RRr=r(wNe," (RoFormer model)"),wNe.forEach(t),PRr=i(we),R3=n(we,"LI",{});var ANe=s(R3);fEe=n(ANe,"STRONG",{});var C8t=s(fEe);BRr=r(C8t,"t5"),C8t.forEach(t),IRr=r(ANe," \u2014 "),YY=n(ANe,"A",{href:!0});var w8t=s(YY);NRr=r(w8t,"FlaxT5ForConditionalGeneration"),w8t.forEach(t),qRr=r(ANe," (T5 model)"),ANe.forEach(t),jRr=i(we),P3=n(we,"LI",{});var yNe=s(P3);mEe=n(yNe,"STRONG",{});var A8t=s(mEe);DRr=r(A8t,"wav2vec2"),A8t.forEach(t),GRr=r(yNe," \u2014 "),KY=n(yNe,"A",{href:!0});var y8t=s(KY);ORr=r(y8t,"FlaxWav2Vec2ForPreTraining"),y8t.forEach(t),VRr=r(yNe," (Wav2Vec2 model)"),yNe.forEach(t),XRr=i(we),B3=n(we,"LI",{});var LNe=s(B3);gEe=n(LNe,"STRONG",{});var L8t=s(gEe);zRr=r(L8t,"xlm-roberta"),L8t.forEach(t),WRr=r(LNe," \u2014 "),ZY=n(LNe,"A",{href:!0});var x8t=s(ZY);QRr=r(x8t,"FlaxXLMRobertaForMaskedLM"),x8t.forEach(t),HRr=r(LNe," (XLM-RoBERTa model)"),LNe.forEach(t),we.forEach(t),URr=i(Wl),T(I3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),vDe=i(f),qc=n(f,"H2",{class:!0});var AOe=s(qc);N3=n(AOe,"A",{id:!0,class:!0,href:!0});var $8t=s(N3);hEe=n($8t,"SPAN",{});var k8t=s(hEe);T(U9.$$.fragment,k8t),k8t.forEach(t),$8t.forEach(t),JRr=i(AOe),pEe=n(AOe,"SPAN",{});var S8t=s(pEe);YRr=r(S8t,"FlaxAutoModelForMaskedLM"),S8t.forEach(t),AOe.forEach(t),FDe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(J9.$$.fragment,Ql),KRr=i(Ql),jc=n(Ql,"P",{});var soe=s(jc);ZRr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=n(soe,"A",{href:!0});var R8t=s(eK);ePr=r(R8t,"from_pretrained()"),R8t.forEach(t),oPr=r(soe," class method or the "),oK=n(soe,"A",{href:!0});var P8t=s(oK);rPr=r(P8t,"from_config()"),P8t.forEach(t),tPr=r(soe,` class
method.`),soe.forEach(t),aPr=i(Ql),Y9=n(Ql,"P",{});var yOe=s(Y9);nPr=r(yOe,"This class cannot be instantiated directly using "),_Ee=n(yOe,"CODE",{});var B8t=s(_Ee);sPr=r(B8t,"__init__()"),B8t.forEach(t),lPr=r(yOe," (throws an error)."),yOe.forEach(t),iPr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var hA=s(Xt);T(K9.$$.fragment,hA),dPr=i(hA),uEe=n(hA,"P",{});var I8t=s(uEe);cPr=r(I8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I8t.forEach(t),fPr=i(hA),Dc=n(hA,"P",{});var loe=s(Dc);mPr=r(loe,`Note:
Loading a model from its configuration file does `),bEe=n(loe,"STRONG",{});var N8t=s(bEe);gPr=r(N8t,"not"),N8t.forEach(t),hPr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(loe,"A",{href:!0});var q8t=s(rK);pPr=r(q8t,"from_pretrained()"),q8t.forEach(t),_Pr=r(loe," to load the model weights."),loe.forEach(t),uPr=i(hA),T(q3.$$.fragment,hA),hA.forEach(t),bPr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(Z9.$$.fragment,Hl),vPr=i(Hl),vEe=n(Hl,"P",{});var j8t=s(vEe);FPr=r(j8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j8t.forEach(t),TPr=i(Hl),un=n(Hl,"P",{});var pA=s(un);MPr=r(pA,"The model class to instantiate is selected based on the "),FEe=n(pA,"CODE",{});var D8t=s(FEe);EPr=r(D8t,"model_type"),D8t.forEach(t),CPr=r(pA,` property of the config object (either
passed as an argument or loaded from `),TEe=n(pA,"CODE",{});var G8t=s(TEe);wPr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),APr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(pA,"CODE",{});var O8t=s(MEe);yPr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),LPr=r(pA,":"),pA.forEach(t),xPr=i(Hl),xe=n(Hl,"UL",{});var Ne=s(xe);j3=n(Ne,"LI",{});var xNe=s(j3);EEe=n(xNe,"STRONG",{});var V8t=s(EEe);$Pr=r(V8t,"albert"),V8t.forEach(t),kPr=r(xNe," \u2014 "),tK=n(xNe,"A",{href:!0});var X8t=s(tK);SPr=r(X8t,"FlaxAlbertForMaskedLM"),X8t.forEach(t),RPr=r(xNe," (ALBERT model)"),xNe.forEach(t),PPr=i(Ne),D3=n(Ne,"LI",{});var $Ne=s(D3);CEe=n($Ne,"STRONG",{});var z8t=s(CEe);BPr=r(z8t,"bart"),z8t.forEach(t),IPr=r($Ne," \u2014 "),aK=n($Ne,"A",{href:!0});var W8t=s(aK);NPr=r(W8t,"FlaxBartForConditionalGeneration"),W8t.forEach(t),qPr=r($Ne," (BART model)"),$Ne.forEach(t),jPr=i(Ne),G3=n(Ne,"LI",{});var kNe=s(G3);wEe=n(kNe,"STRONG",{});var Q8t=s(wEe);DPr=r(Q8t,"bert"),Q8t.forEach(t),GPr=r(kNe," \u2014 "),nK=n(kNe,"A",{href:!0});var H8t=s(nK);OPr=r(H8t,"FlaxBertForMaskedLM"),H8t.forEach(t),VPr=r(kNe," (BERT model)"),kNe.forEach(t),XPr=i(Ne),O3=n(Ne,"LI",{});var SNe=s(O3);AEe=n(SNe,"STRONG",{});var U8t=s(AEe);zPr=r(U8t,"big_bird"),U8t.forEach(t),WPr=r(SNe," \u2014 "),sK=n(SNe,"A",{href:!0});var J8t=s(sK);QPr=r(J8t,"FlaxBigBirdForMaskedLM"),J8t.forEach(t),HPr=r(SNe," (BigBird model)"),SNe.forEach(t),UPr=i(Ne),V3=n(Ne,"LI",{});var RNe=s(V3);yEe=n(RNe,"STRONG",{});var Y8t=s(yEe);JPr=r(Y8t,"distilbert"),Y8t.forEach(t),YPr=r(RNe," \u2014 "),lK=n(RNe,"A",{href:!0});var K8t=s(lK);KPr=r(K8t,"FlaxDistilBertForMaskedLM"),K8t.forEach(t),ZPr=r(RNe," (DistilBERT model)"),RNe.forEach(t),eBr=i(Ne),X3=n(Ne,"LI",{});var PNe=s(X3);LEe=n(PNe,"STRONG",{});var Z8t=s(LEe);oBr=r(Z8t,"electra"),Z8t.forEach(t),rBr=r(PNe," \u2014 "),iK=n(PNe,"A",{href:!0});var e9t=s(iK);tBr=r(e9t,"FlaxElectraForMaskedLM"),e9t.forEach(t),aBr=r(PNe," (ELECTRA model)"),PNe.forEach(t),nBr=i(Ne),z3=n(Ne,"LI",{});var BNe=s(z3);xEe=n(BNe,"STRONG",{});var o9t=s(xEe);sBr=r(o9t,"mbart"),o9t.forEach(t),lBr=r(BNe," \u2014 "),dK=n(BNe,"A",{href:!0});var r9t=s(dK);iBr=r(r9t,"FlaxMBartForConditionalGeneration"),r9t.forEach(t),dBr=r(BNe," (mBART model)"),BNe.forEach(t),cBr=i(Ne),W3=n(Ne,"LI",{});var INe=s(W3);$Ee=n(INe,"STRONG",{});var t9t=s($Ee);fBr=r(t9t,"roberta"),t9t.forEach(t),mBr=r(INe," \u2014 "),cK=n(INe,"A",{href:!0});var a9t=s(cK);gBr=r(a9t,"FlaxRobertaForMaskedLM"),a9t.forEach(t),hBr=r(INe," (RoBERTa model)"),INe.forEach(t),pBr=i(Ne),Q3=n(Ne,"LI",{});var NNe=s(Q3);kEe=n(NNe,"STRONG",{});var n9t=s(kEe);_Br=r(n9t,"roformer"),n9t.forEach(t),uBr=r(NNe," \u2014 "),fK=n(NNe,"A",{href:!0});var s9t=s(fK);bBr=r(s9t,"FlaxRoFormerForMaskedLM"),s9t.forEach(t),vBr=r(NNe," (RoFormer model)"),NNe.forEach(t),FBr=i(Ne),H3=n(Ne,"LI",{});var qNe=s(H3);SEe=n(qNe,"STRONG",{});var l9t=s(SEe);TBr=r(l9t,"xlm-roberta"),l9t.forEach(t),MBr=r(qNe," \u2014 "),mK=n(qNe,"A",{href:!0});var i9t=s(mK);EBr=r(i9t,"FlaxXLMRobertaForMaskedLM"),i9t.forEach(t),CBr=r(qNe," (XLM-RoBERTa model)"),qNe.forEach(t),Ne.forEach(t),wBr=i(Hl),T(U3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),TDe=i(f),Gc=n(f,"H2",{class:!0});var LOe=s(Gc);J3=n(LOe,"A",{id:!0,class:!0,href:!0});var d9t=s(J3);REe=n(d9t,"SPAN",{});var c9t=s(REe);T(ex.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),ABr=i(LOe),PEe=n(LOe,"SPAN",{});var f9t=s(PEe);yBr=r(f9t,"FlaxAutoModelForSeq2SeqLM"),f9t.forEach(t),LOe.forEach(t),MDe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(ox.$$.fragment,Ul),LBr=i(Ul),Oc=n(Ul,"P",{});var ioe=s(Oc);xBr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=n(ioe,"A",{href:!0});var m9t=s(gK);$Br=r(m9t,"from_pretrained()"),m9t.forEach(t),kBr=r(ioe," class method or the "),hK=n(ioe,"A",{href:!0});var g9t=s(hK);SBr=r(g9t,"from_config()"),g9t.forEach(t),RBr=r(ioe,` class
method.`),ioe.forEach(t),PBr=i(Ul),rx=n(Ul,"P",{});var xOe=s(rx);BBr=r(xOe,"This class cannot be instantiated directly using "),BEe=n(xOe,"CODE",{});var h9t=s(BEe);IBr=r(h9t,"__init__()"),h9t.forEach(t),NBr=r(xOe," (throws an error)."),xOe.forEach(t),qBr=i(Ul),zt=n(Ul,"DIV",{class:!0});var _A=s(zt);T(tx.$$.fragment,_A),jBr=i(_A),IEe=n(_A,"P",{});var p9t=s(IEe);DBr=r(p9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p9t.forEach(t),GBr=i(_A),Vc=n(_A,"P",{});var doe=s(Vc);OBr=r(doe,`Note:
Loading a model from its configuration file does `),NEe=n(doe,"STRONG",{});var _9t=s(NEe);VBr=r(_9t,"not"),_9t.forEach(t),XBr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(doe,"A",{href:!0});var u9t=s(pK);zBr=r(u9t,"from_pretrained()"),u9t.forEach(t),WBr=r(doe," to load the model weights."),doe.forEach(t),QBr=i(_A),T(Y3.$$.fragment,_A),_A.forEach(t),HBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(ax.$$.fragment,Jl),UBr=i(Jl),qEe=n(Jl,"P",{});var b9t=s(qEe);JBr=r(b9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b9t.forEach(t),YBr=i(Jl),bn=n(Jl,"P",{});var uA=s(bn);KBr=r(uA,"The model class to instantiate is selected based on the "),jEe=n(uA,"CODE",{});var v9t=s(jEe);ZBr=r(v9t,"model_type"),v9t.forEach(t),eIr=r(uA,` property of the config object (either
passed as an argument or loaded from `),DEe=n(uA,"CODE",{});var F9t=s(DEe);oIr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),rIr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(uA,"CODE",{});var T9t=s(GEe);tIr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),aIr=r(uA,":"),uA.forEach(t),nIr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);K3=n(ze,"LI",{});var jNe=s(K3);OEe=n(jNe,"STRONG",{});var M9t=s(OEe);sIr=r(M9t,"bart"),M9t.forEach(t),lIr=r(jNe," \u2014 "),_K=n(jNe,"A",{href:!0});var E9t=s(_K);iIr=r(E9t,"FlaxBartForConditionalGeneration"),E9t.forEach(t),dIr=r(jNe," (BART model)"),jNe.forEach(t),cIr=i(ze),Z3=n(ze,"LI",{});var DNe=s(Z3);VEe=n(DNe,"STRONG",{});var C9t=s(VEe);fIr=r(C9t,"blenderbot"),C9t.forEach(t),mIr=r(DNe," \u2014 "),uK=n(DNe,"A",{href:!0});var w9t=s(uK);gIr=r(w9t,"FlaxBlenderbotForConditionalGeneration"),w9t.forEach(t),hIr=r(DNe," (Blenderbot model)"),DNe.forEach(t),pIr=i(ze),e0=n(ze,"LI",{});var GNe=s(e0);XEe=n(GNe,"STRONG",{});var A9t=s(XEe);_Ir=r(A9t,"blenderbot-small"),A9t.forEach(t),uIr=r(GNe," \u2014 "),bK=n(GNe,"A",{href:!0});var y9t=s(bK);bIr=r(y9t,"FlaxBlenderbotSmallForConditionalGeneration"),y9t.forEach(t),vIr=r(GNe," (BlenderbotSmall model)"),GNe.forEach(t),FIr=i(ze),o0=n(ze,"LI",{});var ONe=s(o0);zEe=n(ONe,"STRONG",{});var L9t=s(zEe);TIr=r(L9t,"encoder-decoder"),L9t.forEach(t),MIr=r(ONe," \u2014 "),vK=n(ONe,"A",{href:!0});var x9t=s(vK);EIr=r(x9t,"FlaxEncoderDecoderModel"),x9t.forEach(t),CIr=r(ONe," (Encoder decoder model)"),ONe.forEach(t),wIr=i(ze),r0=n(ze,"LI",{});var VNe=s(r0);WEe=n(VNe,"STRONG",{});var $9t=s(WEe);AIr=r($9t,"marian"),$9t.forEach(t),yIr=r(VNe," \u2014 "),FK=n(VNe,"A",{href:!0});var k9t=s(FK);LIr=r(k9t,"FlaxMarianMTModel"),k9t.forEach(t),xIr=r(VNe," (Marian model)"),VNe.forEach(t),$Ir=i(ze),t0=n(ze,"LI",{});var XNe=s(t0);QEe=n(XNe,"STRONG",{});var S9t=s(QEe);kIr=r(S9t,"mbart"),S9t.forEach(t),SIr=r(XNe," \u2014 "),TK=n(XNe,"A",{href:!0});var R9t=s(TK);RIr=r(R9t,"FlaxMBartForConditionalGeneration"),R9t.forEach(t),PIr=r(XNe," (mBART model)"),XNe.forEach(t),BIr=i(ze),a0=n(ze,"LI",{});var zNe=s(a0);HEe=n(zNe,"STRONG",{});var P9t=s(HEe);IIr=r(P9t,"mt5"),P9t.forEach(t),NIr=r(zNe," \u2014 "),MK=n(zNe,"A",{href:!0});var B9t=s(MK);qIr=r(B9t,"FlaxMT5ForConditionalGeneration"),B9t.forEach(t),jIr=r(zNe," (mT5 model)"),zNe.forEach(t),DIr=i(ze),n0=n(ze,"LI",{});var WNe=s(n0);UEe=n(WNe,"STRONG",{});var I9t=s(UEe);GIr=r(I9t,"pegasus"),I9t.forEach(t),OIr=r(WNe," \u2014 "),EK=n(WNe,"A",{href:!0});var N9t=s(EK);VIr=r(N9t,"FlaxPegasusForConditionalGeneration"),N9t.forEach(t),XIr=r(WNe," (Pegasus model)"),WNe.forEach(t),zIr=i(ze),s0=n(ze,"LI",{});var QNe=s(s0);JEe=n(QNe,"STRONG",{});var q9t=s(JEe);WIr=r(q9t,"t5"),q9t.forEach(t),QIr=r(QNe," \u2014 "),CK=n(QNe,"A",{href:!0});var j9t=s(CK);HIr=r(j9t,"FlaxT5ForConditionalGeneration"),j9t.forEach(t),UIr=r(QNe," (T5 model)"),QNe.forEach(t),ze.forEach(t),JIr=i(Jl),T(l0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),EDe=i(f),Xc=n(f,"H2",{class:!0});var $Oe=s(Xc);i0=n($Oe,"A",{id:!0,class:!0,href:!0});var D9t=s(i0);YEe=n(D9t,"SPAN",{});var G9t=s(YEe);T(nx.$$.fragment,G9t),G9t.forEach(t),D9t.forEach(t),YIr=i($Oe),KEe=n($Oe,"SPAN",{});var O9t=s(KEe);KIr=r(O9t,"FlaxAutoModelForSequenceClassification"),O9t.forEach(t),$Oe.forEach(t),CDe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(sx.$$.fragment,Yl),ZIr=i(Yl),zc=n(Yl,"P",{});var coe=s(zc);eNr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=n(coe,"A",{href:!0});var V9t=s(wK);oNr=r(V9t,"from_pretrained()"),V9t.forEach(t),rNr=r(coe," class method or the "),AK=n(coe,"A",{href:!0});var X9t=s(AK);tNr=r(X9t,"from_config()"),X9t.forEach(t),aNr=r(coe,` class
method.`),coe.forEach(t),nNr=i(Yl),lx=n(Yl,"P",{});var kOe=s(lx);sNr=r(kOe,"This class cannot be instantiated directly using "),ZEe=n(kOe,"CODE",{});var z9t=s(ZEe);lNr=r(z9t,"__init__()"),z9t.forEach(t),iNr=r(kOe," (throws an error)."),kOe.forEach(t),dNr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var bA=s(Wt);T(ix.$$.fragment,bA),cNr=i(bA),eCe=n(bA,"P",{});var W9t=s(eCe);fNr=r(W9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W9t.forEach(t),mNr=i(bA),Wc=n(bA,"P",{});var foe=s(Wc);gNr=r(foe,`Note:
Loading a model from its configuration file does `),oCe=n(foe,"STRONG",{});var Q9t=s(oCe);hNr=r(Q9t,"not"),Q9t.forEach(t),pNr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(foe,"A",{href:!0});var H9t=s(yK);_Nr=r(H9t,"from_pretrained()"),H9t.forEach(t),uNr=r(foe," to load the model weights."),foe.forEach(t),bNr=i(bA),T(d0.$$.fragment,bA),bA.forEach(t),vNr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(dx.$$.fragment,Kl),FNr=i(Kl),rCe=n(Kl,"P",{});var U9t=s(rCe);TNr=r(U9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U9t.forEach(t),MNr=i(Kl),vn=n(Kl,"P",{});var vA=s(vn);ENr=r(vA,"The model class to instantiate is selected based on the "),tCe=n(vA,"CODE",{});var J9t=s(tCe);CNr=r(J9t,"model_type"),J9t.forEach(t),wNr=r(vA,` property of the config object (either
passed as an argument or loaded from `),aCe=n(vA,"CODE",{});var Y9t=s(aCe);ANr=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),yNr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(vA,"CODE",{});var K9t=s(nCe);LNr=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),xNr=r(vA,":"),vA.forEach(t),$Nr=i(Kl),$e=n(Kl,"UL",{});var qe=s($e);c0=n(qe,"LI",{});var HNe=s(c0);sCe=n(HNe,"STRONG",{});var Z9t=s(sCe);kNr=r(Z9t,"albert"),Z9t.forEach(t),SNr=r(HNe," \u2014 "),LK=n(HNe,"A",{href:!0});var ext=s(LK);RNr=r(ext,"FlaxAlbertForSequenceClassification"),ext.forEach(t),PNr=r(HNe," (ALBERT model)"),HNe.forEach(t),BNr=i(qe),f0=n(qe,"LI",{});var UNe=s(f0);lCe=n(UNe,"STRONG",{});var oxt=s(lCe);INr=r(oxt,"bart"),oxt.forEach(t),NNr=r(UNe," \u2014 "),xK=n(UNe,"A",{href:!0});var rxt=s(xK);qNr=r(rxt,"FlaxBartForSequenceClassification"),rxt.forEach(t),jNr=r(UNe," (BART model)"),UNe.forEach(t),DNr=i(qe),m0=n(qe,"LI",{});var JNe=s(m0);iCe=n(JNe,"STRONG",{});var txt=s(iCe);GNr=r(txt,"bert"),txt.forEach(t),ONr=r(JNe," \u2014 "),$K=n(JNe,"A",{href:!0});var axt=s($K);VNr=r(axt,"FlaxBertForSequenceClassification"),axt.forEach(t),XNr=r(JNe," (BERT model)"),JNe.forEach(t),zNr=i(qe),g0=n(qe,"LI",{});var YNe=s(g0);dCe=n(YNe,"STRONG",{});var nxt=s(dCe);WNr=r(nxt,"big_bird"),nxt.forEach(t),QNr=r(YNe," \u2014 "),kK=n(YNe,"A",{href:!0});var sxt=s(kK);HNr=r(sxt,"FlaxBigBirdForSequenceClassification"),sxt.forEach(t),UNr=r(YNe," (BigBird model)"),YNe.forEach(t),JNr=i(qe),h0=n(qe,"LI",{});var KNe=s(h0);cCe=n(KNe,"STRONG",{});var lxt=s(cCe);YNr=r(lxt,"distilbert"),lxt.forEach(t),KNr=r(KNe," \u2014 "),SK=n(KNe,"A",{href:!0});var ixt=s(SK);ZNr=r(ixt,"FlaxDistilBertForSequenceClassification"),ixt.forEach(t),eqr=r(KNe," (DistilBERT model)"),KNe.forEach(t),oqr=i(qe),p0=n(qe,"LI",{});var ZNe=s(p0);fCe=n(ZNe,"STRONG",{});var dxt=s(fCe);rqr=r(dxt,"electra"),dxt.forEach(t),tqr=r(ZNe," \u2014 "),RK=n(ZNe,"A",{href:!0});var cxt=s(RK);aqr=r(cxt,"FlaxElectraForSequenceClassification"),cxt.forEach(t),nqr=r(ZNe," (ELECTRA model)"),ZNe.forEach(t),sqr=i(qe),_0=n(qe,"LI",{});var eqe=s(_0);mCe=n(eqe,"STRONG",{});var fxt=s(mCe);lqr=r(fxt,"mbart"),fxt.forEach(t),iqr=r(eqe," \u2014 "),PK=n(eqe,"A",{href:!0});var mxt=s(PK);dqr=r(mxt,"FlaxMBartForSequenceClassification"),mxt.forEach(t),cqr=r(eqe," (mBART model)"),eqe.forEach(t),fqr=i(qe),u0=n(qe,"LI",{});var oqe=s(u0);gCe=n(oqe,"STRONG",{});var gxt=s(gCe);mqr=r(gxt,"roberta"),gxt.forEach(t),gqr=r(oqe," \u2014 "),BK=n(oqe,"A",{href:!0});var hxt=s(BK);hqr=r(hxt,"FlaxRobertaForSequenceClassification"),hxt.forEach(t),pqr=r(oqe," (RoBERTa model)"),oqe.forEach(t),_qr=i(qe),b0=n(qe,"LI",{});var rqe=s(b0);hCe=n(rqe,"STRONG",{});var pxt=s(hCe);uqr=r(pxt,"roformer"),pxt.forEach(t),bqr=r(rqe," \u2014 "),IK=n(rqe,"A",{href:!0});var _xt=s(IK);vqr=r(_xt,"FlaxRoFormerForSequenceClassification"),_xt.forEach(t),Fqr=r(rqe," (RoFormer model)"),rqe.forEach(t),Tqr=i(qe),v0=n(qe,"LI",{});var tqe=s(v0);pCe=n(tqe,"STRONG",{});var uxt=s(pCe);Mqr=r(uxt,"xlm-roberta"),uxt.forEach(t),Eqr=r(tqe," \u2014 "),NK=n(tqe,"A",{href:!0});var bxt=s(NK);Cqr=r(bxt,"FlaxXLMRobertaForSequenceClassification"),bxt.forEach(t),wqr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),qe.forEach(t),Aqr=i(Kl),T(F0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),wDe=i(f),Qc=n(f,"H2",{class:!0});var SOe=s(Qc);T0=n(SOe,"A",{id:!0,class:!0,href:!0});var vxt=s(T0);_Ce=n(vxt,"SPAN",{});var Fxt=s(_Ce);T(cx.$$.fragment,Fxt),Fxt.forEach(t),vxt.forEach(t),yqr=i(SOe),uCe=n(SOe,"SPAN",{});var Txt=s(uCe);Lqr=r(Txt,"FlaxAutoModelForQuestionAnswering"),Txt.forEach(t),SOe.forEach(t),ADe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(fx.$$.fragment,Zl),xqr=i(Zl),Hc=n(Zl,"P",{});var moe=s(Hc);$qr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=n(moe,"A",{href:!0});var Mxt=s(qK);kqr=r(Mxt,"from_pretrained()"),Mxt.forEach(t),Sqr=r(moe," class method or the "),jK=n(moe,"A",{href:!0});var Ext=s(jK);Rqr=r(Ext,"from_config()"),Ext.forEach(t),Pqr=r(moe,` class
method.`),moe.forEach(t),Bqr=i(Zl),mx=n(Zl,"P",{});var ROe=s(mx);Iqr=r(ROe,"This class cannot be instantiated directly using "),bCe=n(ROe,"CODE",{});var Cxt=s(bCe);Nqr=r(Cxt,"__init__()"),Cxt.forEach(t),qqr=r(ROe," (throws an error)."),ROe.forEach(t),jqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var FA=s(Qt);T(gx.$$.fragment,FA),Dqr=i(FA),vCe=n(FA,"P",{});var wxt=s(vCe);Gqr=r(wxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wxt.forEach(t),Oqr=i(FA),Uc=n(FA,"P",{});var goe=s(Uc);Vqr=r(goe,`Note:
Loading a model from its configuration file does `),FCe=n(goe,"STRONG",{});var Axt=s(FCe);Xqr=r(Axt,"not"),Axt.forEach(t),zqr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(goe,"A",{href:!0});var yxt=s(DK);Wqr=r(yxt,"from_pretrained()"),yxt.forEach(t),Qqr=r(goe," to load the model weights."),goe.forEach(t),Hqr=i(FA),T(M0.$$.fragment,FA),FA.forEach(t),Uqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(hx.$$.fragment,ei),Jqr=i(ei),TCe=n(ei,"P",{});var Lxt=s(TCe);Yqr=r(Lxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lxt.forEach(t),Kqr=i(ei),Fn=n(ei,"P",{});var TA=s(Fn);Zqr=r(TA,"The model class to instantiate is selected based on the "),MCe=n(TA,"CODE",{});var xxt=s(MCe);ejr=r(xxt,"model_type"),xxt.forEach(t),ojr=r(TA,` property of the config object (either
passed as an argument or loaded from `),ECe=n(TA,"CODE",{});var $xt=s(ECe);rjr=r($xt,"pretrained_model_name_or_path"),$xt.forEach(t),tjr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=n(TA,"CODE",{});var kxt=s(CCe);ajr=r(kxt,"pretrained_model_name_or_path"),kxt.forEach(t),njr=r(TA,":"),TA.forEach(t),sjr=i(ei),ke=n(ei,"UL",{});var je=s(ke);E0=n(je,"LI",{});var aqe=s(E0);wCe=n(aqe,"STRONG",{});var Sxt=s(wCe);ljr=r(Sxt,"albert"),Sxt.forEach(t),ijr=r(aqe," \u2014 "),GK=n(aqe,"A",{href:!0});var Rxt=s(GK);djr=r(Rxt,"FlaxAlbertForQuestionAnswering"),Rxt.forEach(t),cjr=r(aqe," (ALBERT model)"),aqe.forEach(t),fjr=i(je),C0=n(je,"LI",{});var nqe=s(C0);ACe=n(nqe,"STRONG",{});var Pxt=s(ACe);mjr=r(Pxt,"bart"),Pxt.forEach(t),gjr=r(nqe," \u2014 "),OK=n(nqe,"A",{href:!0});var Bxt=s(OK);hjr=r(Bxt,"FlaxBartForQuestionAnswering"),Bxt.forEach(t),pjr=r(nqe," (BART model)"),nqe.forEach(t),_jr=i(je),w0=n(je,"LI",{});var sqe=s(w0);yCe=n(sqe,"STRONG",{});var Ixt=s(yCe);ujr=r(Ixt,"bert"),Ixt.forEach(t),bjr=r(sqe," \u2014 "),VK=n(sqe,"A",{href:!0});var Nxt=s(VK);vjr=r(Nxt,"FlaxBertForQuestionAnswering"),Nxt.forEach(t),Fjr=r(sqe," (BERT model)"),sqe.forEach(t),Tjr=i(je),A0=n(je,"LI",{});var lqe=s(A0);LCe=n(lqe,"STRONG",{});var qxt=s(LCe);Mjr=r(qxt,"big_bird"),qxt.forEach(t),Ejr=r(lqe," \u2014 "),XK=n(lqe,"A",{href:!0});var jxt=s(XK);Cjr=r(jxt,"FlaxBigBirdForQuestionAnswering"),jxt.forEach(t),wjr=r(lqe," (BigBird model)"),lqe.forEach(t),Ajr=i(je),y0=n(je,"LI",{});var iqe=s(y0);xCe=n(iqe,"STRONG",{});var Dxt=s(xCe);yjr=r(Dxt,"distilbert"),Dxt.forEach(t),Ljr=r(iqe," \u2014 "),zK=n(iqe,"A",{href:!0});var Gxt=s(zK);xjr=r(Gxt,"FlaxDistilBertForQuestionAnswering"),Gxt.forEach(t),$jr=r(iqe," (DistilBERT model)"),iqe.forEach(t),kjr=i(je),L0=n(je,"LI",{});var dqe=s(L0);$Ce=n(dqe,"STRONG",{});var Oxt=s($Ce);Sjr=r(Oxt,"electra"),Oxt.forEach(t),Rjr=r(dqe," \u2014 "),WK=n(dqe,"A",{href:!0});var Vxt=s(WK);Pjr=r(Vxt,"FlaxElectraForQuestionAnswering"),Vxt.forEach(t),Bjr=r(dqe," (ELECTRA model)"),dqe.forEach(t),Ijr=i(je),x0=n(je,"LI",{});var cqe=s(x0);kCe=n(cqe,"STRONG",{});var Xxt=s(kCe);Njr=r(Xxt,"mbart"),Xxt.forEach(t),qjr=r(cqe," \u2014 "),QK=n(cqe,"A",{href:!0});var zxt=s(QK);jjr=r(zxt,"FlaxMBartForQuestionAnswering"),zxt.forEach(t),Djr=r(cqe," (mBART model)"),cqe.forEach(t),Gjr=i(je),$0=n(je,"LI",{});var fqe=s($0);SCe=n(fqe,"STRONG",{});var Wxt=s(SCe);Ojr=r(Wxt,"roberta"),Wxt.forEach(t),Vjr=r(fqe," \u2014 "),HK=n(fqe,"A",{href:!0});var Qxt=s(HK);Xjr=r(Qxt,"FlaxRobertaForQuestionAnswering"),Qxt.forEach(t),zjr=r(fqe," (RoBERTa model)"),fqe.forEach(t),Wjr=i(je),k0=n(je,"LI",{});var mqe=s(k0);RCe=n(mqe,"STRONG",{});var Hxt=s(RCe);Qjr=r(Hxt,"roformer"),Hxt.forEach(t),Hjr=r(mqe," \u2014 "),UK=n(mqe,"A",{href:!0});var Uxt=s(UK);Ujr=r(Uxt,"FlaxRoFormerForQuestionAnswering"),Uxt.forEach(t),Jjr=r(mqe," (RoFormer model)"),mqe.forEach(t),Yjr=i(je),S0=n(je,"LI",{});var gqe=s(S0);PCe=n(gqe,"STRONG",{});var Jxt=s(PCe);Kjr=r(Jxt,"xlm-roberta"),Jxt.forEach(t),Zjr=r(gqe," \u2014 "),JK=n(gqe,"A",{href:!0});var Yxt=s(JK);eDr=r(Yxt,"FlaxXLMRobertaForQuestionAnswering"),Yxt.forEach(t),oDr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),je.forEach(t),rDr=i(ei),T(R0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),yDe=i(f),Jc=n(f,"H2",{class:!0});var POe=s(Jc);P0=n(POe,"A",{id:!0,class:!0,href:!0});var Kxt=s(P0);BCe=n(Kxt,"SPAN",{});var Zxt=s(BCe);T(px.$$.fragment,Zxt),Zxt.forEach(t),Kxt.forEach(t),tDr=i(POe),ICe=n(POe,"SPAN",{});var e$t=s(ICe);aDr=r(e$t,"FlaxAutoModelForTokenClassification"),e$t.forEach(t),POe.forEach(t),LDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(_x.$$.fragment,oi),nDr=i(oi),Yc=n(oi,"P",{});var hoe=s(Yc);sDr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=n(hoe,"A",{href:!0});var o$t=s(YK);lDr=r(o$t,"from_pretrained()"),o$t.forEach(t),iDr=r(hoe," class method or the "),KK=n(hoe,"A",{href:!0});var r$t=s(KK);dDr=r(r$t,"from_config()"),r$t.forEach(t),cDr=r(hoe,` class
method.`),hoe.forEach(t),fDr=i(oi),ux=n(oi,"P",{});var BOe=s(ux);mDr=r(BOe,"This class cannot be instantiated directly using "),NCe=n(BOe,"CODE",{});var t$t=s(NCe);gDr=r(t$t,"__init__()"),t$t.forEach(t),hDr=r(BOe," (throws an error)."),BOe.forEach(t),pDr=i(oi),Ht=n(oi,"DIV",{class:!0});var MA=s(Ht);T(bx.$$.fragment,MA),_Dr=i(MA),qCe=n(MA,"P",{});var a$t=s(qCe);uDr=r(a$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),a$t.forEach(t),bDr=i(MA),Kc=n(MA,"P",{});var poe=s(Kc);vDr=r(poe,`Note:
Loading a model from its configuration file does `),jCe=n(poe,"STRONG",{});var n$t=s(jCe);FDr=r(n$t,"not"),n$t.forEach(t),TDr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(poe,"A",{href:!0});var s$t=s(ZK);MDr=r(s$t,"from_pretrained()"),s$t.forEach(t),EDr=r(poe," to load the model weights."),poe.forEach(t),CDr=i(MA),T(B0.$$.fragment,MA),MA.forEach(t),wDr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(vx.$$.fragment,ri),ADr=i(ri),DCe=n(ri,"P",{});var l$t=s(DCe);yDr=r(l$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),l$t.forEach(t),LDr=i(ri),Tn=n(ri,"P",{});var EA=s(Tn);xDr=r(EA,"The model class to instantiate is selected based on the "),GCe=n(EA,"CODE",{});var i$t=s(GCe);$Dr=r(i$t,"model_type"),i$t.forEach(t),kDr=r(EA,` property of the config object (either
passed as an argument or loaded from `),OCe=n(EA,"CODE",{});var d$t=s(OCe);SDr=r(d$t,"pretrained_model_name_or_path"),d$t.forEach(t),RDr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=n(EA,"CODE",{});var c$t=s(VCe);PDr=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),BDr=r(EA,":"),EA.forEach(t),IDr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);I0=n(Fo,"LI",{});var hqe=s(I0);XCe=n(hqe,"STRONG",{});var f$t=s(XCe);NDr=r(f$t,"albert"),f$t.forEach(t),qDr=r(hqe," \u2014 "),eZ=n(hqe,"A",{href:!0});var m$t=s(eZ);jDr=r(m$t,"FlaxAlbertForTokenClassification"),m$t.forEach(t),DDr=r(hqe," (ALBERT model)"),hqe.forEach(t),GDr=i(Fo),N0=n(Fo,"LI",{});var pqe=s(N0);zCe=n(pqe,"STRONG",{});var g$t=s(zCe);ODr=r(g$t,"bert"),g$t.forEach(t),VDr=r(pqe," \u2014 "),oZ=n(pqe,"A",{href:!0});var h$t=s(oZ);XDr=r(h$t,"FlaxBertForTokenClassification"),h$t.forEach(t),zDr=r(pqe," (BERT model)"),pqe.forEach(t),WDr=i(Fo),q0=n(Fo,"LI",{});var _qe=s(q0);WCe=n(_qe,"STRONG",{});var p$t=s(WCe);QDr=r(p$t,"big_bird"),p$t.forEach(t),HDr=r(_qe," \u2014 "),rZ=n(_qe,"A",{href:!0});var _$t=s(rZ);UDr=r(_$t,"FlaxBigBirdForTokenClassification"),_$t.forEach(t),JDr=r(_qe," (BigBird model)"),_qe.forEach(t),YDr=i(Fo),j0=n(Fo,"LI",{});var uqe=s(j0);QCe=n(uqe,"STRONG",{});var u$t=s(QCe);KDr=r(u$t,"distilbert"),u$t.forEach(t),ZDr=r(uqe," \u2014 "),tZ=n(uqe,"A",{href:!0});var b$t=s(tZ);eGr=r(b$t,"FlaxDistilBertForTokenClassification"),b$t.forEach(t),oGr=r(uqe," (DistilBERT model)"),uqe.forEach(t),rGr=i(Fo),D0=n(Fo,"LI",{});var bqe=s(D0);HCe=n(bqe,"STRONG",{});var v$t=s(HCe);tGr=r(v$t,"electra"),v$t.forEach(t),aGr=r(bqe," \u2014 "),aZ=n(bqe,"A",{href:!0});var F$t=s(aZ);nGr=r(F$t,"FlaxElectraForTokenClassification"),F$t.forEach(t),sGr=r(bqe," (ELECTRA model)"),bqe.forEach(t),lGr=i(Fo),G0=n(Fo,"LI",{});var vqe=s(G0);UCe=n(vqe,"STRONG",{});var T$t=s(UCe);iGr=r(T$t,"roberta"),T$t.forEach(t),dGr=r(vqe," \u2014 "),nZ=n(vqe,"A",{href:!0});var M$t=s(nZ);cGr=r(M$t,"FlaxRobertaForTokenClassification"),M$t.forEach(t),fGr=r(vqe," (RoBERTa model)"),vqe.forEach(t),mGr=i(Fo),O0=n(Fo,"LI",{});var Fqe=s(O0);JCe=n(Fqe,"STRONG",{});var E$t=s(JCe);gGr=r(E$t,"roformer"),E$t.forEach(t),hGr=r(Fqe," \u2014 "),sZ=n(Fqe,"A",{href:!0});var C$t=s(sZ);pGr=r(C$t,"FlaxRoFormerForTokenClassification"),C$t.forEach(t),_Gr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),uGr=i(Fo),V0=n(Fo,"LI",{});var Tqe=s(V0);YCe=n(Tqe,"STRONG",{});var w$t=s(YCe);bGr=r(w$t,"xlm-roberta"),w$t.forEach(t),vGr=r(Tqe," \u2014 "),lZ=n(Tqe,"A",{href:!0});var A$t=s(lZ);FGr=r(A$t,"FlaxXLMRobertaForTokenClassification"),A$t.forEach(t),TGr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),Fo.forEach(t),MGr=i(ri),T(X0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),xDe=i(f),Zc=n(f,"H2",{class:!0});var IOe=s(Zc);z0=n(IOe,"A",{id:!0,class:!0,href:!0});var y$t=s(z0);KCe=n(y$t,"SPAN",{});var L$t=s(KCe);T(Fx.$$.fragment,L$t),L$t.forEach(t),y$t.forEach(t),EGr=i(IOe),ZCe=n(IOe,"SPAN",{});var x$t=s(ZCe);CGr=r(x$t,"FlaxAutoModelForMultipleChoice"),x$t.forEach(t),IOe.forEach(t),$De=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(Tx.$$.fragment,ti),wGr=i(ti),ef=n(ti,"P",{});var _oe=s(ef);AGr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=n(_oe,"A",{href:!0});var $$t=s(iZ);yGr=r($$t,"from_pretrained()"),$$t.forEach(t),LGr=r(_oe," class method or the "),dZ=n(_oe,"A",{href:!0});var k$t=s(dZ);xGr=r(k$t,"from_config()"),k$t.forEach(t),$Gr=r(_oe,` class
method.`),_oe.forEach(t),kGr=i(ti),Mx=n(ti,"P",{});var NOe=s(Mx);SGr=r(NOe,"This class cannot be instantiated directly using "),e5e=n(NOe,"CODE",{});var S$t=s(e5e);RGr=r(S$t,"__init__()"),S$t.forEach(t),PGr=r(NOe," (throws an error)."),NOe.forEach(t),BGr=i(ti),Ut=n(ti,"DIV",{class:!0});var CA=s(Ut);T(Ex.$$.fragment,CA),IGr=i(CA),o5e=n(CA,"P",{});var R$t=s(o5e);NGr=r(R$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R$t.forEach(t),qGr=i(CA),of=n(CA,"P",{});var uoe=s(of);jGr=r(uoe,`Note:
Loading a model from its configuration file does `),r5e=n(uoe,"STRONG",{});var P$t=s(r5e);DGr=r(P$t,"not"),P$t.forEach(t),GGr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(uoe,"A",{href:!0});var B$t=s(cZ);OGr=r(B$t,"from_pretrained()"),B$t.forEach(t),VGr=r(uoe," to load the model weights."),uoe.forEach(t),XGr=i(CA),T(W0.$$.fragment,CA),CA.forEach(t),zGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(Cx.$$.fragment,ai),WGr=i(ai),t5e=n(ai,"P",{});var I$t=s(t5e);QGr=r(I$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I$t.forEach(t),HGr=i(ai),Mn=n(ai,"P",{});var wA=s(Mn);UGr=r(wA,"The model class to instantiate is selected based on the "),a5e=n(wA,"CODE",{});var N$t=s(a5e);JGr=r(N$t,"model_type"),N$t.forEach(t),YGr=r(wA,` property of the config object (either
passed as an argument or loaded from `),n5e=n(wA,"CODE",{});var q$t=s(n5e);KGr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),ZGr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(wA,"CODE",{});var j$t=s(s5e);eOr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),oOr=r(wA,":"),wA.forEach(t),rOr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);Q0=n(To,"LI",{});var Mqe=s(Q0);l5e=n(Mqe,"STRONG",{});var D$t=s(l5e);tOr=r(D$t,"albert"),D$t.forEach(t),aOr=r(Mqe," \u2014 "),fZ=n(Mqe,"A",{href:!0});var G$t=s(fZ);nOr=r(G$t,"FlaxAlbertForMultipleChoice"),G$t.forEach(t),sOr=r(Mqe," (ALBERT model)"),Mqe.forEach(t),lOr=i(To),H0=n(To,"LI",{});var Eqe=s(H0);i5e=n(Eqe,"STRONG",{});var O$t=s(i5e);iOr=r(O$t,"bert"),O$t.forEach(t),dOr=r(Eqe," \u2014 "),mZ=n(Eqe,"A",{href:!0});var V$t=s(mZ);cOr=r(V$t,"FlaxBertForMultipleChoice"),V$t.forEach(t),fOr=r(Eqe," (BERT model)"),Eqe.forEach(t),mOr=i(To),U0=n(To,"LI",{});var Cqe=s(U0);d5e=n(Cqe,"STRONG",{});var X$t=s(d5e);gOr=r(X$t,"big_bird"),X$t.forEach(t),hOr=r(Cqe," \u2014 "),gZ=n(Cqe,"A",{href:!0});var z$t=s(gZ);pOr=r(z$t,"FlaxBigBirdForMultipleChoice"),z$t.forEach(t),_Or=r(Cqe," (BigBird model)"),Cqe.forEach(t),uOr=i(To),J0=n(To,"LI",{});var wqe=s(J0);c5e=n(wqe,"STRONG",{});var W$t=s(c5e);bOr=r(W$t,"distilbert"),W$t.forEach(t),vOr=r(wqe," \u2014 "),hZ=n(wqe,"A",{href:!0});var Q$t=s(hZ);FOr=r(Q$t,"FlaxDistilBertForMultipleChoice"),Q$t.forEach(t),TOr=r(wqe," (DistilBERT model)"),wqe.forEach(t),MOr=i(To),Y0=n(To,"LI",{});var Aqe=s(Y0);f5e=n(Aqe,"STRONG",{});var H$t=s(f5e);EOr=r(H$t,"electra"),H$t.forEach(t),COr=r(Aqe," \u2014 "),pZ=n(Aqe,"A",{href:!0});var U$t=s(pZ);wOr=r(U$t,"FlaxElectraForMultipleChoice"),U$t.forEach(t),AOr=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),yOr=i(To),K0=n(To,"LI",{});var yqe=s(K0);m5e=n(yqe,"STRONG",{});var J$t=s(m5e);LOr=r(J$t,"roberta"),J$t.forEach(t),xOr=r(yqe," \u2014 "),_Z=n(yqe,"A",{href:!0});var Y$t=s(_Z);$Or=r(Y$t,"FlaxRobertaForMultipleChoice"),Y$t.forEach(t),kOr=r(yqe," (RoBERTa model)"),yqe.forEach(t),SOr=i(To),Z0=n(To,"LI",{});var Lqe=s(Z0);g5e=n(Lqe,"STRONG",{});var K$t=s(g5e);ROr=r(K$t,"roformer"),K$t.forEach(t),POr=r(Lqe," \u2014 "),uZ=n(Lqe,"A",{href:!0});var Z$t=s(uZ);BOr=r(Z$t,"FlaxRoFormerForMultipleChoice"),Z$t.forEach(t),IOr=r(Lqe," (RoFormer model)"),Lqe.forEach(t),NOr=i(To),ew=n(To,"LI",{});var xqe=s(ew);h5e=n(xqe,"STRONG",{});var ekt=s(h5e);qOr=r(ekt,"xlm-roberta"),ekt.forEach(t),jOr=r(xqe," \u2014 "),bZ=n(xqe,"A",{href:!0});var okt=s(bZ);DOr=r(okt,"FlaxXLMRobertaForMultipleChoice"),okt.forEach(t),GOr=r(xqe," (XLM-RoBERTa model)"),xqe.forEach(t),To.forEach(t),OOr=i(ai),T(ow.$$.fragment,ai),ai.forEach(t),ti.forEach(t),kDe=i(f),rf=n(f,"H2",{class:!0});var qOe=s(rf);rw=n(qOe,"A",{id:!0,class:!0,href:!0});var rkt=s(rw);p5e=n(rkt,"SPAN",{});var tkt=s(p5e);T(wx.$$.fragment,tkt),tkt.forEach(t),rkt.forEach(t),VOr=i(qOe),_5e=n(qOe,"SPAN",{});var akt=s(_5e);XOr=r(akt,"FlaxAutoModelForNextSentencePrediction"),akt.forEach(t),qOe.forEach(t),SDe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(Ax.$$.fragment,ni),zOr=i(ni),tf=n(ni,"P",{});var boe=s(tf);WOr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=n(boe,"A",{href:!0});var nkt=s(vZ);QOr=r(nkt,"from_pretrained()"),nkt.forEach(t),HOr=r(boe," class method or the "),FZ=n(boe,"A",{href:!0});var skt=s(FZ);UOr=r(skt,"from_config()"),skt.forEach(t),JOr=r(boe,` class
method.`),boe.forEach(t),YOr=i(ni),yx=n(ni,"P",{});var jOe=s(yx);KOr=r(jOe,"This class cannot be instantiated directly using "),u5e=n(jOe,"CODE",{});var lkt=s(u5e);ZOr=r(lkt,"__init__()"),lkt.forEach(t),eVr=r(jOe," (throws an error)."),jOe.forEach(t),oVr=i(ni),Jt=n(ni,"DIV",{class:!0});var AA=s(Jt);T(Lx.$$.fragment,AA),rVr=i(AA),b5e=n(AA,"P",{});var ikt=s(b5e);tVr=r(ikt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ikt.forEach(t),aVr=i(AA),af=n(AA,"P",{});var voe=s(af);nVr=r(voe,`Note:
Loading a model from its configuration file does `),v5e=n(voe,"STRONG",{});var dkt=s(v5e);sVr=r(dkt,"not"),dkt.forEach(t),lVr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(voe,"A",{href:!0});var ckt=s(TZ);iVr=r(ckt,"from_pretrained()"),ckt.forEach(t),dVr=r(voe," to load the model weights."),voe.forEach(t),cVr=i(AA),T(tw.$$.fragment,AA),AA.forEach(t),fVr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(xx.$$.fragment,si),mVr=i(si),F5e=n(si,"P",{});var fkt=s(F5e);gVr=r(fkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fkt.forEach(t),hVr=i(si),En=n(si,"P",{});var yA=s(En);pVr=r(yA,"The model class to instantiate is selected based on the "),T5e=n(yA,"CODE",{});var mkt=s(T5e);_Vr=r(mkt,"model_type"),mkt.forEach(t),uVr=r(yA,` property of the config object (either
passed as an argument or loaded from `),M5e=n(yA,"CODE",{});var gkt=s(M5e);bVr=r(gkt,"pretrained_model_name_or_path"),gkt.forEach(t),vVr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(yA,"CODE",{});var hkt=s(E5e);FVr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),TVr=r(yA,":"),yA.forEach(t),MVr=i(si),C5e=n(si,"UL",{});var pkt=s(C5e);aw=n(pkt,"LI",{});var $qe=s(aw);w5e=n($qe,"STRONG",{});var _kt=s(w5e);EVr=r(_kt,"bert"),_kt.forEach(t),CVr=r($qe," \u2014 "),MZ=n($qe,"A",{href:!0});var ukt=s(MZ);wVr=r(ukt,"FlaxBertForNextSentencePrediction"),ukt.forEach(t),AVr=r($qe," (BERT model)"),$qe.forEach(t),pkt.forEach(t),yVr=i(si),T(nw.$$.fragment,si),si.forEach(t),ni.forEach(t),RDe=i(f),nf=n(f,"H2",{class:!0});var DOe=s(nf);sw=n(DOe,"A",{id:!0,class:!0,href:!0});var bkt=s(sw);A5e=n(bkt,"SPAN",{});var vkt=s(A5e);T($x.$$.fragment,vkt),vkt.forEach(t),bkt.forEach(t),LVr=i(DOe),y5e=n(DOe,"SPAN",{});var Fkt=s(y5e);xVr=r(Fkt,"FlaxAutoModelForImageClassification"),Fkt.forEach(t),DOe.forEach(t),PDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(kx.$$.fragment,li),$Vr=i(li),sf=n(li,"P",{});var Foe=s(sf);kVr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=n(Foe,"A",{href:!0});var Tkt=s(EZ);SVr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),RVr=r(Foe," class method or the "),CZ=n(Foe,"A",{href:!0});var Mkt=s(CZ);PVr=r(Mkt,"from_config()"),Mkt.forEach(t),BVr=r(Foe,` class
method.`),Foe.forEach(t),IVr=i(li),Sx=n(li,"P",{});var GOe=s(Sx);NVr=r(GOe,"This class cannot be instantiated directly using "),L5e=n(GOe,"CODE",{});var Ekt=s(L5e);qVr=r(Ekt,"__init__()"),Ekt.forEach(t),jVr=r(GOe," (throws an error)."),GOe.forEach(t),DVr=i(li),Yt=n(li,"DIV",{class:!0});var LA=s(Yt);T(Rx.$$.fragment,LA),GVr=i(LA),x5e=n(LA,"P",{});var Ckt=s(x5e);OVr=r(Ckt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ckt.forEach(t),VVr=i(LA),lf=n(LA,"P",{});var Toe=s(lf);XVr=r(Toe,`Note:
Loading a model from its configuration file does `),$5e=n(Toe,"STRONG",{});var wkt=s($5e);zVr=r(wkt,"not"),wkt.forEach(t),WVr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(Toe,"A",{href:!0});var Akt=s(wZ);QVr=r(Akt,"from_pretrained()"),Akt.forEach(t),HVr=r(Toe," to load the model weights."),Toe.forEach(t),UVr=i(LA),T(lw.$$.fragment,LA),LA.forEach(t),JVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Px.$$.fragment,ii),YVr=i(ii),k5e=n(ii,"P",{});var ykt=s(k5e);KVr=r(ykt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ykt.forEach(t),ZVr=i(ii),Cn=n(ii,"P",{});var xA=s(Cn);eXr=r(xA,"The model class to instantiate is selected based on the "),S5e=n(xA,"CODE",{});var Lkt=s(S5e);oXr=r(Lkt,"model_type"),Lkt.forEach(t),rXr=r(xA,` property of the config object (either
passed as an argument or loaded from `),R5e=n(xA,"CODE",{});var xkt=s(R5e);tXr=r(xkt,"pretrained_model_name_or_path"),xkt.forEach(t),aXr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=n(xA,"CODE",{});var $kt=s(P5e);nXr=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),sXr=r(xA,":"),xA.forEach(t),lXr=i(ii),Bx=n(ii,"UL",{});var OOe=s(Bx);iw=n(OOe,"LI",{});var kqe=s(iw);B5e=n(kqe,"STRONG",{});var kkt=s(B5e);iXr=r(kkt,"beit"),kkt.forEach(t),dXr=r(kqe," \u2014 "),AZ=n(kqe,"A",{href:!0});var Skt=s(AZ);cXr=r(Skt,"FlaxBeitForImageClassification"),Skt.forEach(t),fXr=r(kqe," (BEiT model)"),kqe.forEach(t),mXr=i(OOe),dw=n(OOe,"LI",{});var Sqe=s(dw);I5e=n(Sqe,"STRONG",{});var Rkt=s(I5e);gXr=r(Rkt,"vit"),Rkt.forEach(t),hXr=r(Sqe," \u2014 "),yZ=n(Sqe,"A",{href:!0});var Pkt=s(yZ);pXr=r(Pkt,"FlaxViTForImageClassification"),Pkt.forEach(t),_Xr=r(Sqe," (ViT model)"),Sqe.forEach(t),OOe.forEach(t),uXr=i(ii),T(cw.$$.fragment,ii),ii.forEach(t),li.forEach(t),BDe=i(f),df=n(f,"H2",{class:!0});var VOe=s(df);fw=n(VOe,"A",{id:!0,class:!0,href:!0});var Bkt=s(fw);N5e=n(Bkt,"SPAN",{});var Ikt=s(N5e);T(Ix.$$.fragment,Ikt),Ikt.forEach(t),Bkt.forEach(t),bXr=i(VOe),q5e=n(VOe,"SPAN",{});var Nkt=s(q5e);vXr=r(Nkt,"FlaxAutoModelForVision2Seq"),Nkt.forEach(t),VOe.forEach(t),IDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Nx.$$.fragment,di),FXr=i(di),cf=n(di,"P",{});var Moe=s(cf);TXr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=n(Moe,"A",{href:!0});var qkt=s(LZ);MXr=r(qkt,"from_pretrained()"),qkt.forEach(t),EXr=r(Moe," class method or the "),xZ=n(Moe,"A",{href:!0});var jkt=s(xZ);CXr=r(jkt,"from_config()"),jkt.forEach(t),wXr=r(Moe,` class
method.`),Moe.forEach(t),AXr=i(di),qx=n(di,"P",{});var XOe=s(qx);yXr=r(XOe,"This class cannot be instantiated directly using "),j5e=n(XOe,"CODE",{});var Dkt=s(j5e);LXr=r(Dkt,"__init__()"),Dkt.forEach(t),xXr=r(XOe," (throws an error)."),XOe.forEach(t),$Xr=i(di),Kt=n(di,"DIV",{class:!0});var $A=s(Kt);T(jx.$$.fragment,$A),kXr=i($A),D5e=n($A,"P",{});var Gkt=s(D5e);SXr=r(Gkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gkt.forEach(t),RXr=i($A),ff=n($A,"P",{});var Eoe=s(ff);PXr=r(Eoe,`Note:
Loading a model from its configuration file does `),G5e=n(Eoe,"STRONG",{});var Okt=s(G5e);BXr=r(Okt,"not"),Okt.forEach(t),IXr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(Eoe,"A",{href:!0});var Vkt=s($Z);NXr=r(Vkt,"from_pretrained()"),Vkt.forEach(t),qXr=r(Eoe," to load the model weights."),Eoe.forEach(t),jXr=i($A),T(mw.$$.fragment,$A),$A.forEach(t),DXr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Dx.$$.fragment,ci),GXr=i(ci),O5e=n(ci,"P",{});var Xkt=s(O5e);OXr=r(Xkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xkt.forEach(t),VXr=i(ci),wn=n(ci,"P",{});var kA=s(wn);XXr=r(kA,"The model class to instantiate is selected based on the "),V5e=n(kA,"CODE",{});var zkt=s(V5e);zXr=r(zkt,"model_type"),zkt.forEach(t),WXr=r(kA,` property of the config object (either
passed as an argument or loaded from `),X5e=n(kA,"CODE",{});var Wkt=s(X5e);QXr=r(Wkt,"pretrained_model_name_or_path"),Wkt.forEach(t),HXr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(kA,"CODE",{});var Qkt=s(z5e);UXr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),JXr=r(kA,":"),kA.forEach(t),YXr=i(ci),W5e=n(ci,"UL",{});var Hkt=s(W5e);gw=n(Hkt,"LI",{});var Rqe=s(gw);Q5e=n(Rqe,"STRONG",{});var Ukt=s(Q5e);KXr=r(Ukt,"vision-encoder-decoder"),Ukt.forEach(t),ZXr=r(Rqe," \u2014 "),kZ=n(Rqe,"A",{href:!0});var Jkt=s(kZ);ezr=r(Jkt,"FlaxVisionEncoderDecoderModel"),Jkt.forEach(t),ozr=r(Rqe," (Vision Encoder decoder model)"),Rqe.forEach(t),Hkt.forEach(t),rzr=i(ci),T(hw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ePt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(sk,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(lk,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig"),c(ik,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig"),c(dk,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig"),c(ck,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig"),c(fk,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(mk,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig"),c(gk,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(hk,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(pk,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(_k,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig"),c(uk,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig"),c(bk,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig"),c(vk,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig"),c(Fk,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig"),c(Tk,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig"),c(Mk,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig"),c(Ek,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig"),c(Ck,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ak,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(yk,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig"),c(Lk,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xk,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($k,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig"),c(kk,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig"),c(Sk,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Rk,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig"),c(Pk,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig"),c(Bk,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig"),c(Ik,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qk,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig"),c(jk,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig"),c(Dk,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig"),c(Gk,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig"),c(Ok,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig"),c(Vk,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config"),c(Xk,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zk,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Wk,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig"),c(Qk,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig"),c(Hk,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig"),c(Uk,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Jk,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Yk,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Kk,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Zk,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig"),c(eS,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig"),c(oS,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig"),c(rS,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig"),c(tS,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config"),c(aS,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig"),c(nS,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sS,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig"),c(lS,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(iS,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dS,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig"),c(cS,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config"),c(fS,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mS,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gS,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig"),c(hS,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig"),c(pS,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_S,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig"),c(uS,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bS,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vS,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FS,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagConfig"),c(TS,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmConfig"),c(MS,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig"),c(ES,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig"),c(CS,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig"),c(wS,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig"),c(AS,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig"),c(yS,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig"),c(LS,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig"),c(xS,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig"),c($S,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig"),c(kS,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig"),c(SS,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RS,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PS,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BS,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig"),c(IS,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NS,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig"),c(qS,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config"),c(jS,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig"),c(DS,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(GS,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(OS,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig"),c(VS,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(XS,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(zS,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig"),c(WS,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig"),c(QS,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(HS,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(US,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JS,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig"),c(YS,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KS,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZS,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eR,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig"),c(oR,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig"),c(rR,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig"),c(tR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sR,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig"),c(lR,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig"),c(iR,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoTokenizer"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(dR,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cR,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(fR,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizer"),c(gR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizerFast"),c(hR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_R,"href","/docs/transformers/pr_17474/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uR,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(bR,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FR,"href","/docs/transformers/pr_17474/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TR,"href","/docs/transformers/pr_17474/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MR,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(ER,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(yR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(LR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xR,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomTokenizerFast"),c($R,"href","/docs/transformers/pr_17474/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(kR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizer"),c(SR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineTokenizer"),c(PR,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizer"),c(BR,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(NR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizer"),c(jR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(DR,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(GR,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OR,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizer"),c(XR,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(WR,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(QR,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(HR,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(JR,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(YR,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizer"),c(KR,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(eP,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizer"),c(oP,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(rP,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(tP,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizer"),c(aP,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(nP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dP,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(cP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_P,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EP,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CP,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizer"),c(AP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizerFast"),c(yP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xP,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeTokenizer"),c($P,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kP,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RP,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianTokenizer"),c(PP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizer"),c(BP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17474/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GP,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OP,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XP,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zP,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(WP,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(QP,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(HP,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JP,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KP,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZP,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eB,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oB,"href","/docs/transformers/pr_17474/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rB,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tB,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagTokenizer"),c(lB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizer"),c(iB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dB,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cB,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bB,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vB,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FB,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EB,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CB,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(AB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(yB,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasTokenizer"),c(LB,"href","/docs/transformers/pr_17474/en/model_doc/tapex#transformers.TapexTokenizer"),c(xB,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($B,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(kB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMTokenizer"),c(qB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(WB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(QB,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dI,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(EI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CI,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPProcessor"),c(wI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(AI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yI,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(kI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(SI,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRProcessor"),c(RI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltProcessor"),c(II,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(NI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoModel"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(DI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VI,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel"),c(XI,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel"),c(zI,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel"),c(WI,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(QI,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(HI,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel"),c(UI,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(JI,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(YI,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(KI,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel"),c(ZI,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel"),c(eN,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel"),c(oN,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel"),c(rN,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel"),c(tN,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel"),c(aN,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel"),c(nN,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel"),c(sN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dN,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel"),c(cN,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(fN,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mN,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel"),c(gN,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel"),c(hN,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel"),c(pN,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_N,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel"),c(uN,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel"),c(bN,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel"),c(vN,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel"),c(FN,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel"),c(TN,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel"),c(MN,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel"),c(EN,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CN,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel"),c(wN,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model"),c(AN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(LN,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel"),c(xN,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel"),c($N,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel"),c(kN,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(BN,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel"),c(IN,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel"),c(NN,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel"),c(qN,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel"),c(jN,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model"),c(DN,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel"),c(GN,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ON,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel"),c(VN,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XN,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zN,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel"),c(WN,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model"),c(QN,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel"),c(HN,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(UN,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel"),c(JN,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel"),c(YN,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel"),c(KN,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel"),c(ZN,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel"),c(eq,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(oq,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel"),c(rq,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel"),c(tq,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel"),c(aq,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel"),c(nq,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel"),c(sq,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(lq,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel"),c(iq,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel"),c(dq,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel"),c(cq,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel"),c(fq,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel"),c(mq,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(gq,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel"),c(hq,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(pq,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel"),c(_q,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model"),c(uq,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel"),c(bq,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(vq,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Fq,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Tq,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Mq,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel"),c(Eq,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel"),c(Cq,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(wq,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Aq,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel"),c(yq,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Lq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(xq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c($q,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel"),c(kq,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel"),c(Sq,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel"),c(Rq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Pq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Bq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Iq,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel"),c(Nq,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel"),c(qq,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModelForPreTraining"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(jq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oq,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Vq,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining"),c(zq,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Wq,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Qq,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ej,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rj,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tj,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nj,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ij,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dj,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(cj,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mj,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gj,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hj,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(pj,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uj,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Mj,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Ej,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Aj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(yj,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($j,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(kj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pj,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM"),c(Bj,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nj,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(qj,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(jj,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Dj,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Gj,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Oj,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Vj,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zj,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Wj,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Qj,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Hj,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Uj,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Jj,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM"),c(Yj,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Kj,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Zj,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(eD,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM"),c(oD,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(rD,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(tD,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(aD,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(nD,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(sD,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(lD,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(iD,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(dD,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(cD,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fD,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(mD,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(gD,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(pD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_D,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(uD,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.AutoModelForMaskedLM"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(bD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM"),c(CD,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(wD,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LD,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xD,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($D,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(SD,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(RD,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(PD,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(BD,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ND,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qD,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OD,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(VD,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(XD,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(WD,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(UD,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YD,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eG,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForSeq2SeqLM"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(oG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dG,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel"),c(gG,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSequenceClassification"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(FG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification"),c($G,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.AutoModelForMultipleChoice"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForNextSentencePrediction"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(HO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kb,"id","transformers.AutoModelForTokenClassification"),c(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kb,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(rV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iV,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cV,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mV,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gV,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_V,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vV,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FV,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(CV,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RV,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(NV,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForQuestionAnswering"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(jV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForTableQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(LX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForImageClassification"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(SX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification"),c(IX,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NX,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qX,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jX,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DX,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GX,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OX,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VX,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XX,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zX,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(WX,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QX,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HX,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UX,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification"),c(JX,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification"),c(YX,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForVision2Seq"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(KX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForAudioClassification"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForAudioFrameClassification"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Tz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForCTC"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Az,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC"),c(yz,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC"),c(Lz,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($z,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Sz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Rz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qz,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForAudioXVector"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(jz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Vz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Xz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Wz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForMaskedImageModeling"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Yz,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Kz,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForObjectDetection"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tW,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(aW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForSemanticSegmentation"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(iW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gW,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForInstanceSegmentation"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.TFAutoModel"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel"),c(EW,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel"),c(CW,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel"),c(wW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yW,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel"),c(LW,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel"),c(xW,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel"),c($W,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel"),c(kW,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RW,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel"),c(PW,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BW,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IW,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NW,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel"),c(qW,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jW,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel"),c(DW,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(GW,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model"),c(OW,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel"),c(VW,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel"),c(XW,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zW,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel"),c(WW,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel"),c(QW,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel"),c(HW,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel"),c(UW,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel"),c(JW,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(YW,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel"),c(KW,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model"),c(ZW,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eQ,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTModel"),c(oQ,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rQ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel"),c(tQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel"),c(aQ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nQ,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sQ,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel"),c(lQ,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model"),c(iQ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel"),c(dQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(cQ,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel"),c(fQ,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(mQ,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(gQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel"),c(hQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(pQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForPreTraining"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining"),c(MQ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(AQ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LQ,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xQ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($Q,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(kQ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(SQ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(jQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForCausalLM"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QQ,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UQ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(JQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(KQ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(ZQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(eH,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(oH,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(rH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tH,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForImageClassification"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(iH,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(dH,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(cH,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForMaskedLM"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(fH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(_H,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(bH,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(vH,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(FH,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(MH,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(EH,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(CH,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wH,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(AH,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LH,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($H,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(kH,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RH,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(PH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(GH,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel"),c(VH,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(zH,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForSequenceClassification"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(QH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.TFAutoModelForMultipleChoice"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(MU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c($U,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(OU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(WU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForTableQuestionAnswering"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForTokenClassification"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(_J,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForQuestionAnswering"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(SJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(GJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForVision2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModel"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel"),c(oY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel"),c(rY,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel"),c(tY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel"),c(aY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(nY,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(sY,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(lY,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel"),c(iY,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(dY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel"),c(cY,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(fY,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(mY,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(gY,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel"),c(hY,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pY,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model"),c(_Y,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTModel"),c(uY,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(bY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(vY,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(FY,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model"),c(TY,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(MY,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel"),c(EY,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(CY,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wY,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForCausalLM"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c($Y,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(kY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(SY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(RY,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PY,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(BY,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IY,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(NY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(qY,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForPreTraining"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(VY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(WY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(QY,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JY,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YY,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ZY,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForMaskedLM"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(aK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(sK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(lK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(iK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(dK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(gK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(FK,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EK,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($K,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(PK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(NK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(qK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForTokenClassification"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(YK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(vZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForImageClassification"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(EZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yZ,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForVision2Seq"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,SA),e(rt,_f),b(f,De,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,RA),e(We,Ln),e(We,xn),e(xn,PA),e(We,pi),e(We,$n),e($n,BA),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ek),e(Ae,ui),e(ui,ok),e(Ae,rk),b(f,Eo,u),b(f,wa,u),e(wa,tk),e(wa,bf),e(bf,ak),e(wa,zOe),b(f,Pqe,u),b(f,bi,u),e(bi,vf),e(vf,Coe),M(IA,Coe,null),e(bi,WOe),e(bi,woe),e(woe,QOe),b(f,Bqe,u),b(f,kn,u),e(kn,HOe),e(kn,Aoe),e(Aoe,UOe),e(kn,JOe),e(kn,yoe),e(yoe,YOe),e(kn,KOe),b(f,Iqe,u),M(NA,f,u),b(f,Nqe,u),b(f,nk,u),e(nk,ZOe),b(f,qqe,u),M(Ff,f,u),b(f,jqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Loe),M(qA,Loe,null),e(vi,eVe),e(vi,xoe),e(xoe,oVe),b(f,Dqe,u),b(f,Co,u),M(jA,Co,null),e(Co,rVe),e(Co,DA),e(DA,tVe),e(DA,sk),e(sk,aVe),e(DA,nVe),e(Co,sVe),e(Co,GA),e(GA,lVe),e(GA,$oe),e($oe,iVe),e(GA,dVe),e(Co,cVe),e(Co,Er),M(OA,Er,null),e(Er,fVe),e(Er,koe),e(koe,mVe),e(Er,gVe),e(Er,Fi),e(Fi,hVe),e(Fi,Soe),e(Soe,pVe),e(Fi,_Ve),e(Fi,Roe),e(Roe,uVe),e(Fi,bVe),e(Er,vVe),e(Er,A),e(A,Mf),e(Mf,Poe),e(Poe,FVe),e(Mf,TVe),e(Mf,lk),e(lk,MVe),e(Mf,EVe),e(A,CVe),e(A,Ef),e(Ef,Boe),e(Boe,wVe),e(Ef,AVe),e(Ef,ik),e(ik,yVe),e(Ef,LVe),e(A,xVe),e(A,Cf),e(Cf,Ioe),e(Ioe,$Ve),e(Cf,kVe),e(Cf,dk),e(dk,SVe),e(Cf,RVe),e(A,PVe),e(A,wf),e(wf,Noe),e(Noe,BVe),e(wf,IVe),e(wf,ck),e(ck,NVe),e(wf,qVe),e(A,jVe),e(A,Af),e(Af,qoe),e(qoe,DVe),e(Af,GVe),e(Af,fk),e(fk,OVe),e(Af,VVe),e(A,XVe),e(A,yf),e(yf,joe),e(joe,zVe),e(yf,WVe),e(yf,mk),e(mk,QVe),e(yf,HVe),e(A,UVe),e(A,Lf),e(Lf,Doe),e(Doe,JVe),e(Lf,YVe),e(Lf,gk),e(gk,KVe),e(Lf,ZVe),e(A,eXe),e(A,xf),e(xf,Goe),e(Goe,oXe),e(xf,rXe),e(xf,hk),e(hk,tXe),e(xf,aXe),e(A,nXe),e(A,$f),e($f,Ooe),e(Ooe,sXe),e($f,lXe),e($f,pk),e(pk,iXe),e($f,dXe),e(A,cXe),e(A,kf),e(kf,Voe),e(Voe,fXe),e(kf,mXe),e(kf,_k),e(_k,gXe),e(kf,hXe),e(A,pXe),e(A,Sf),e(Sf,Xoe),e(Xoe,_Xe),e(Sf,uXe),e(Sf,uk),e(uk,bXe),e(Sf,vXe),e(A,FXe),e(A,Rf),e(Rf,zoe),e(zoe,TXe),e(Rf,MXe),e(Rf,bk),e(bk,EXe),e(Rf,CXe),e(A,wXe),e(A,Pf),e(Pf,Woe),e(Woe,AXe),e(Pf,yXe),e(Pf,vk),e(vk,LXe),e(Pf,xXe),e(A,$Xe),e(A,Bf),e(Bf,Qoe),e(Qoe,kXe),e(Bf,SXe),e(Bf,Fk),e(Fk,RXe),e(Bf,PXe),e(A,BXe),e(A,If),e(If,Hoe),e(Hoe,IXe),e(If,NXe),e(If,Tk),e(Tk,qXe),e(If,jXe),e(A,DXe),e(A,Nf),e(Nf,Uoe),e(Uoe,GXe),e(Nf,OXe),e(Nf,Mk),e(Mk,VXe),e(Nf,XXe),e(A,zXe),e(A,qf),e(qf,Joe),e(Joe,WXe),e(qf,QXe),e(qf,Ek),e(Ek,HXe),e(qf,UXe),e(A,JXe),e(A,jf),e(jf,Yoe),e(Yoe,YXe),e(jf,KXe),e(jf,Ck),e(Ck,ZXe),e(jf,eze),e(A,oze),e(A,Df),e(Df,Koe),e(Koe,rze),e(Df,tze),e(Df,wk),e(wk,aze),e(Df,nze),e(A,sze),e(A,Gf),e(Gf,Zoe),e(Zoe,lze),e(Gf,ize),e(Gf,Ak),e(Ak,dze),e(Gf,cze),e(A,fze),e(A,Of),e(Of,ere),e(ere,mze),e(Of,gze),e(Of,yk),e(yk,hze),e(Of,pze),e(A,_ze),e(A,Vf),e(Vf,ore),e(ore,uze),e(Vf,bze),e(Vf,Lk),e(Lk,vze),e(Vf,Fze),e(A,Tze),e(A,Xf),e(Xf,rre),e(rre,Mze),e(Xf,Eze),e(Xf,xk),e(xk,Cze),e(Xf,wze),e(A,Aze),e(A,zf),e(zf,tre),e(tre,yze),e(zf,Lze),e(zf,$k),e($k,xze),e(zf,$ze),e(A,kze),e(A,Wf),e(Wf,are),e(are,Sze),e(Wf,Rze),e(Wf,kk),e(kk,Pze),e(Wf,Bze),e(A,Ize),e(A,Qf),e(Qf,nre),e(nre,Nze),e(Qf,qze),e(Qf,Sk),e(Sk,jze),e(Qf,Dze),e(A,Gze),e(A,Hf),e(Hf,sre),e(sre,Oze),e(Hf,Vze),e(Hf,Rk),e(Rk,Xze),e(Hf,zze),e(A,Wze),e(A,Uf),e(Uf,lre),e(lre,Qze),e(Uf,Hze),e(Uf,Pk),e(Pk,Uze),e(Uf,Jze),e(A,Yze),e(A,Jf),e(Jf,ire),e(ire,Kze),e(Jf,Zze),e(Jf,Bk),e(Bk,eWe),e(Jf,oWe),e(A,rWe),e(A,Yf),e(Yf,dre),e(dre,tWe),e(Yf,aWe),e(Yf,Ik),e(Ik,nWe),e(Yf,sWe),e(A,lWe),e(A,Kf),e(Kf,cre),e(cre,iWe),e(Kf,dWe),e(Kf,Nk),e(Nk,cWe),e(Kf,fWe),e(A,mWe),e(A,Zf),e(Zf,fre),e(fre,gWe),e(Zf,hWe),e(Zf,qk),e(qk,pWe),e(Zf,_We),e(A,uWe),e(A,em),e(em,mre),e(mre,bWe),e(em,vWe),e(em,jk),e(jk,FWe),e(em,TWe),e(A,MWe),e(A,om),e(om,gre),e(gre,EWe),e(om,CWe),e(om,Dk),e(Dk,wWe),e(om,AWe),e(A,yWe),e(A,rm),e(rm,hre),e(hre,LWe),e(rm,xWe),e(rm,Gk),e(Gk,$We),e(rm,kWe),e(A,SWe),e(A,tm),e(tm,pre),e(pre,RWe),e(tm,PWe),e(tm,Ok),e(Ok,BWe),e(tm,IWe),e(A,NWe),e(A,am),e(am,_re),e(_re,qWe),e(am,jWe),e(am,Vk),e(Vk,DWe),e(am,GWe),e(A,OWe),e(A,nm),e(nm,ure),e(ure,VWe),e(nm,XWe),e(nm,Xk),e(Xk,zWe),e(nm,WWe),e(A,QWe),e(A,sm),e(sm,bre),e(bre,HWe),e(sm,UWe),e(sm,zk),e(zk,JWe),e(sm,YWe),e(A,KWe),e(A,lm),e(lm,vre),e(vre,ZWe),e(lm,eQe),e(lm,Wk),e(Wk,oQe),e(lm,rQe),e(A,tQe),e(A,im),e(im,Fre),e(Fre,aQe),e(im,nQe),e(im,Qk),e(Qk,sQe),e(im,lQe),e(A,iQe),e(A,dm),e(dm,Tre),e(Tre,dQe),e(dm,cQe),e(dm,Hk),e(Hk,fQe),e(dm,mQe),e(A,gQe),e(A,cm),e(cm,Mre),e(Mre,hQe),e(cm,pQe),e(cm,Uk),e(Uk,_Qe),e(cm,uQe),e(A,bQe),e(A,fm),e(fm,Ere),e(Ere,vQe),e(fm,FQe),e(fm,Jk),e(Jk,TQe),e(fm,MQe),e(A,EQe),e(A,mm),e(mm,Cre),e(Cre,CQe),e(mm,wQe),e(mm,Yk),e(Yk,AQe),e(mm,yQe),e(A,LQe),e(A,gm),e(gm,wre),e(wre,xQe),e(gm,$Qe),e(gm,Kk),e(Kk,kQe),e(gm,SQe),e(A,RQe),e(A,hm),e(hm,Are),e(Are,PQe),e(hm,BQe),e(hm,Zk),e(Zk,IQe),e(hm,NQe),e(A,qQe),e(A,pm),e(pm,yre),e(yre,jQe),e(pm,DQe),e(pm,eS),e(eS,GQe),e(pm,OQe),e(A,VQe),e(A,_m),e(_m,Lre),e(Lre,XQe),e(_m,zQe),e(_m,oS),e(oS,WQe),e(_m,QQe),e(A,HQe),e(A,um),e(um,xre),e(xre,UQe),e(um,JQe),e(um,rS),e(rS,YQe),e(um,KQe),e(A,ZQe),e(A,bm),e(bm,$re),e($re,eHe),e(bm,oHe),e(bm,tS),e(tS,rHe),e(bm,tHe),e(A,aHe),e(A,vm),e(vm,kre),e(kre,nHe),e(vm,sHe),e(vm,aS),e(aS,lHe),e(vm,iHe),e(A,dHe),e(A,Fm),e(Fm,Sre),e(Sre,cHe),e(Fm,fHe),e(Fm,nS),e(nS,mHe),e(Fm,gHe),e(A,hHe),e(A,Tm),e(Tm,Rre),e(Rre,pHe),e(Tm,_He),e(Tm,sS),e(sS,uHe),e(Tm,bHe),e(A,vHe),e(A,Mm),e(Mm,Pre),e(Pre,FHe),e(Mm,THe),e(Mm,lS),e(lS,MHe),e(Mm,EHe),e(A,CHe),e(A,Em),e(Em,Bre),e(Bre,wHe),e(Em,AHe),e(Em,iS),e(iS,yHe),e(Em,LHe),e(A,xHe),e(A,Cm),e(Cm,Ire),e(Ire,$He),e(Cm,kHe),e(Cm,dS),e(dS,SHe),e(Cm,RHe),e(A,PHe),e(A,wm),e(wm,Nre),e(Nre,BHe),e(wm,IHe),e(wm,cS),e(cS,NHe),e(wm,qHe),e(A,jHe),e(A,Am),e(Am,qre),e(qre,DHe),e(Am,GHe),e(Am,fS),e(fS,OHe),e(Am,VHe),e(A,XHe),e(A,ym),e(ym,jre),e(jre,zHe),e(ym,WHe),e(ym,mS),e(mS,QHe),e(ym,HHe),e(A,UHe),e(A,Lm),e(Lm,Dre),e(Dre,JHe),e(Lm,YHe),e(Lm,gS),e(gS,KHe),e(Lm,ZHe),e(A,eUe),e(A,xm),e(xm,Gre),e(Gre,oUe),e(xm,rUe),e(xm,hS),e(hS,tUe),e(xm,aUe),e(A,nUe),e(A,$m),e($m,Ore),e(Ore,sUe),e($m,lUe),e($m,pS),e(pS,iUe),e($m,dUe),e(A,cUe),e(A,km),e(km,Vre),e(Vre,fUe),e(km,mUe),e(km,_S),e(_S,gUe),e(km,hUe),e(A,pUe),e(A,Sm),e(Sm,Xre),e(Xre,_Ue),e(Sm,uUe),e(Sm,uS),e(uS,bUe),e(Sm,vUe),e(A,FUe),e(A,Rm),e(Rm,zre),e(zre,TUe),e(Rm,MUe),e(Rm,bS),e(bS,EUe),e(Rm,CUe),e(A,wUe),e(A,Pm),e(Pm,Wre),e(Wre,AUe),e(Pm,yUe),e(Pm,vS),e(vS,LUe),e(Pm,xUe),e(A,$Ue),e(A,Bm),e(Bm,Qre),e(Qre,kUe),e(Bm,SUe),e(Bm,FS),e(FS,RUe),e(Bm,PUe),e(A,BUe),e(A,Im),e(Im,Hre),e(Hre,IUe),e(Im,NUe),e(Im,TS),e(TS,qUe),e(Im,jUe),e(A,DUe),e(A,Nm),e(Nm,Ure),e(Ure,GUe),e(Nm,OUe),e(Nm,MS),e(MS,VUe),e(Nm,XUe),e(A,zUe),e(A,qm),e(qm,Jre),e(Jre,WUe),e(qm,QUe),e(qm,ES),e(ES,HUe),e(qm,UUe),e(A,JUe),e(A,jm),e(jm,Yre),e(Yre,YUe),e(jm,KUe),e(jm,CS),e(CS,ZUe),e(jm,eJe),e(A,oJe),e(A,Dm),e(Dm,Kre),e(Kre,rJe),e(Dm,tJe),e(Dm,wS),e(wS,aJe),e(Dm,nJe),e(A,sJe),e(A,Gm),e(Gm,Zre),e(Zre,lJe),e(Gm,iJe),e(Gm,AS),e(AS,dJe),e(Gm,cJe),e(A,fJe),e(A,Om),e(Om,ete),e(ete,mJe),e(Om,gJe),e(Om,yS),e(yS,hJe),e(Om,pJe),e(A,_Je),e(A,Vm),e(Vm,ote),e(ote,uJe),e(Vm,bJe),e(Vm,LS),e(LS,vJe),e(Vm,FJe),e(A,TJe),e(A,Xm),e(Xm,rte),e(rte,MJe),e(Xm,EJe),e(Xm,xS),e(xS,CJe),e(Xm,wJe),e(A,AJe),e(A,zm),e(zm,tte),e(tte,yJe),e(zm,LJe),e(zm,$S),e($S,xJe),e(zm,$Je),e(A,kJe),e(A,Wm),e(Wm,ate),e(ate,SJe),e(Wm,RJe),e(Wm,kS),e(kS,PJe),e(Wm,BJe),e(A,IJe),e(A,Qm),e(Qm,nte),e(nte,NJe),e(Qm,qJe),e(Qm,SS),e(SS,jJe),e(Qm,DJe),e(A,GJe),e(A,Hm),e(Hm,ste),e(ste,OJe),e(Hm,VJe),e(Hm,RS),e(RS,XJe),e(Hm,zJe),e(A,WJe),e(A,Um),e(Um,lte),e(lte,QJe),e(Um,HJe),e(Um,PS),e(PS,UJe),e(Um,JJe),e(A,YJe),e(A,Jm),e(Jm,ite),e(ite,KJe),e(Jm,ZJe),e(Jm,BS),e(BS,eYe),e(Jm,oYe),e(A,rYe),e(A,Ym),e(Ym,dte),e(dte,tYe),e(Ym,aYe),e(Ym,IS),e(IS,nYe),e(Ym,sYe),e(A,lYe),e(A,Km),e(Km,cte),e(cte,iYe),e(Km,dYe),e(Km,NS),e(NS,cYe),e(Km,fYe),e(A,mYe),e(A,Zm),e(Zm,fte),e(fte,gYe),e(Zm,hYe),e(Zm,qS),e(qS,pYe),e(Zm,_Ye),e(A,uYe),e(A,eg),e(eg,mte),e(mte,bYe),e(eg,vYe),e(eg,jS),e(jS,FYe),e(eg,TYe),e(A,MYe),e(A,og),e(og,gte),e(gte,EYe),e(og,CYe),e(og,DS),e(DS,wYe),e(og,AYe),e(A,yYe),e(A,rg),e(rg,hte),e(hte,LYe),e(rg,xYe),e(rg,GS),e(GS,$Ye),e(rg,kYe),e(A,SYe),e(A,tg),e(tg,pte),e(pte,RYe),e(tg,PYe),e(tg,OS),e(OS,BYe),e(tg,IYe),e(A,NYe),e(A,ag),e(ag,_te),e(_te,qYe),e(ag,jYe),e(ag,VS),e(VS,DYe),e(ag,GYe),e(A,OYe),e(A,ng),e(ng,ute),e(ute,VYe),e(ng,XYe),e(ng,XS),e(XS,zYe),e(ng,WYe),e(A,QYe),e(A,sg),e(sg,bte),e(bte,HYe),e(sg,UYe),e(sg,zS),e(zS,JYe),e(sg,YYe),e(A,KYe),e(A,lg),e(lg,vte),e(vte,ZYe),e(lg,eKe),e(lg,WS),e(WS,oKe),e(lg,rKe),e(A,tKe),e(A,ig),e(ig,Fte),e(Fte,aKe),e(ig,nKe),e(ig,QS),e(QS,sKe),e(ig,lKe),e(A,iKe),e(A,dg),e(dg,Tte),e(Tte,dKe),e(dg,cKe),e(dg,HS),e(HS,fKe),e(dg,mKe),e(A,gKe),e(A,cg),e(cg,Mte),e(Mte,hKe),e(cg,pKe),e(cg,US),e(US,_Ke),e(cg,uKe),e(A,bKe),e(A,fg),e(fg,Ete),e(Ete,vKe),e(fg,FKe),e(fg,JS),e(JS,TKe),e(fg,MKe),e(A,EKe),e(A,mg),e(mg,Cte),e(Cte,CKe),e(mg,wKe),e(mg,YS),e(YS,AKe),e(mg,yKe),e(A,LKe),e(A,gg),e(gg,wte),e(wte,xKe),e(gg,$Ke),e(gg,KS),e(KS,kKe),e(gg,SKe),e(A,RKe),e(A,hg),e(hg,Ate),e(Ate,PKe),e(hg,BKe),e(hg,ZS),e(ZS,IKe),e(hg,NKe),e(A,qKe),e(A,pg),e(pg,yte),e(yte,jKe),e(pg,DKe),e(pg,eR),e(eR,GKe),e(pg,OKe),e(A,VKe),e(A,_g),e(_g,Lte),e(Lte,XKe),e(_g,zKe),e(_g,oR),e(oR,WKe),e(_g,QKe),e(A,HKe),e(A,ug),e(ug,xte),e(xte,UKe),e(ug,JKe),e(ug,rR),e(rR,YKe),e(ug,KKe),e(A,ZKe),e(A,bg),e(bg,$te),e($te,eZe),e(bg,oZe),e(bg,tR),e(tR,rZe),e(bg,tZe),e(A,aZe),e(A,vg),e(vg,kte),e(kte,nZe),e(vg,sZe),e(vg,aR),e(aR,lZe),e(vg,iZe),e(A,dZe),e(A,Fg),e(Fg,Ste),e(Ste,cZe),e(Fg,fZe),e(Fg,nR),e(nR,mZe),e(Fg,gZe),e(A,hZe),e(A,Tg),e(Tg,Rte),e(Rte,pZe),e(Tg,_Ze),e(Tg,sR),e(sR,uZe),e(Tg,bZe),e(A,vZe),e(A,Mg),e(Mg,Pte),e(Pte,FZe),e(Mg,TZe),e(Mg,lR),e(lR,MZe),e(Mg,EZe),e(A,CZe),e(A,Eg),e(Eg,Bte),e(Bte,wZe),e(Eg,AZe),e(Eg,iR),e(iR,yZe),e(Eg,LZe),e(Er,xZe),M(Cg,Er,null),e(Co,$Ze),e(Co,wg),M(VA,wg,null),e(wg,kZe),e(wg,Ite),e(Ite,SZe),b(f,Gqe,u),b(f,Ti,u),e(Ti,Ag),e(Ag,Nte),M(XA,Nte,null),e(Ti,RZe),e(Ti,qte),e(qte,PZe),b(f,Oqe,u),b(f,wo,u),M(zA,wo,null),e(wo,BZe),e(wo,WA),e(WA,IZe),e(WA,dR),e(dR,NZe),e(WA,qZe),e(wo,jZe),e(wo,QA),e(QA,DZe),e(QA,jte),e(jte,GZe),e(QA,OZe),e(wo,VZe),e(wo,Cr),M(HA,Cr,null),e(Cr,XZe),e(Cr,Dte),e(Dte,zZe),e(Cr,WZe),e(Cr,Aa),e(Aa,QZe),e(Aa,Gte),e(Gte,HZe),e(Aa,UZe),e(Aa,Ote),e(Ote,JZe),e(Aa,YZe),e(Aa,Vte),e(Vte,KZe),e(Aa,ZZe),e(Cr,eeo),e(Cr,k),e(k,Sn),e(Sn,Xte),e(Xte,oeo),e(Sn,reo),e(Sn,cR),e(cR,teo),e(Sn,aeo),e(Sn,fR),e(fR,neo),e(Sn,seo),e(k,leo),e(k,Rn),e(Rn,zte),e(zte,ieo),e(Rn,deo),e(Rn,mR),e(mR,ceo),e(Rn,feo),e(Rn,gR),e(gR,meo),e(Rn,geo),e(k,heo),e(k,Pn),e(Pn,Wte),e(Wte,peo),e(Pn,_eo),e(Pn,hR),e(hR,ueo),e(Pn,beo),e(Pn,pR),e(pR,veo),e(Pn,Feo),e(k,Teo),e(k,yg),e(yg,Qte),e(Qte,Meo),e(yg,Eeo),e(yg,_R),e(_R,Ceo),e(yg,weo),e(k,Aeo),e(k,Bn),e(Bn,Hte),e(Hte,yeo),e(Bn,Leo),e(Bn,uR),e(uR,xeo),e(Bn,$eo),e(Bn,bR),e(bR,keo),e(Bn,Seo),e(k,Reo),e(k,Lg),e(Lg,Ute),e(Ute,Peo),e(Lg,Beo),e(Lg,vR),e(vR,Ieo),e(Lg,Neo),e(k,qeo),e(k,xg),e(xg,Jte),e(Jte,jeo),e(xg,Deo),e(xg,FR),e(FR,Geo),e(xg,Oeo),e(k,Veo),e(k,$g),e($g,Yte),e(Yte,Xeo),e($g,zeo),e($g,TR),e(TR,Weo),e($g,Qeo),e(k,Heo),e(k,In),e(In,Kte),e(Kte,Ueo),e(In,Jeo),e(In,MR),e(MR,Yeo),e(In,Keo),e(In,ER),e(ER,Zeo),e(In,eoo),e(k,ooo),e(k,Nn),e(Nn,Zte),e(Zte,roo),e(Nn,too),e(Nn,CR),e(CR,aoo),e(Nn,noo),e(Nn,wR),e(wR,soo),e(Nn,loo),e(k,ioo),e(k,qn),e(qn,eae),e(eae,doo),e(qn,coo),e(qn,AR),e(AR,foo),e(qn,moo),e(qn,yR),e(yR,goo),e(qn,hoo),e(k,poo),e(k,kg),e(kg,oae),e(oae,_oo),e(kg,uoo),e(kg,LR),e(LR,boo),e(kg,voo),e(k,Foo),e(k,Sg),e(Sg,rae),e(rae,Too),e(Sg,Moo),e(Sg,xR),e(xR,Eoo),e(Sg,Coo),e(k,woo),e(k,Rg),e(Rg,tae),e(tae,Aoo),e(Rg,yoo),e(Rg,$R),e($R,Loo),e(Rg,xoo),e(k,$oo),e(k,jn),e(jn,aae),e(aae,koo),e(jn,Soo),e(jn,kR),e(kR,Roo),e(jn,Poo),e(jn,SR),e(SR,Boo),e(jn,Ioo),e(k,Noo),e(k,Pg),e(Pg,nae),e(nae,qoo),e(Pg,joo),e(Pg,RR),e(RR,Doo),e(Pg,Goo),e(k,Ooo),e(k,Dn),e(Dn,sae),e(sae,Voo),e(Dn,Xoo),e(Dn,PR),e(PR,zoo),e(Dn,Woo),e(Dn,BR),e(BR,Qoo),e(Dn,Hoo),e(k,Uoo),e(k,Gn),e(Gn,lae),e(lae,Joo),e(Gn,Yoo),e(Gn,IR),e(IR,Koo),e(Gn,Zoo),e(Gn,NR),e(NR,ero),e(Gn,oro),e(k,rro),e(k,On),e(On,iae),e(iae,tro),e(On,aro),e(On,qR),e(qR,nro),e(On,sro),e(On,jR),e(jR,lro),e(On,iro),e(k,dro),e(k,Bg),e(Bg,dae),e(dae,cro),e(Bg,fro),e(Bg,DR),e(DR,mro),e(Bg,gro),e(k,hro),e(k,Vn),e(Vn,cae),e(cae,pro),e(Vn,_ro),e(Vn,GR),e(GR,uro),e(Vn,bro),e(Vn,OR),e(OR,vro),e(Vn,Fro),e(k,Tro),e(k,Xn),e(Xn,fae),e(fae,Mro),e(Xn,Ero),e(Xn,VR),e(VR,Cro),e(Xn,wro),e(Xn,XR),e(XR,Aro),e(Xn,yro),e(k,Lro),e(k,zn),e(zn,mae),e(mae,xro),e(zn,$ro),e(zn,zR),e(zR,kro),e(zn,Sro),e(zn,WR),e(WR,Rro),e(zn,Pro),e(k,Bro),e(k,Wn),e(Wn,gae),e(gae,Iro),e(Wn,Nro),e(Wn,QR),e(QR,qro),e(Wn,jro),e(Wn,HR),e(HR,Dro),e(Wn,Gro),e(k,Oro),e(k,Qn),e(Qn,hae),e(hae,Vro),e(Qn,Xro),e(Qn,UR),e(UR,zro),e(Qn,Wro),e(Qn,JR),e(JR,Qro),e(Qn,Hro),e(k,Uro),e(k,Hn),e(Hn,pae),e(pae,Jro),e(Hn,Yro),e(Hn,YR),e(YR,Kro),e(Hn,Zro),e(Hn,KR),e(KR,eto),e(Hn,oto),e(k,rto),e(k,Ig),e(Ig,_ae),e(_ae,tto),e(Ig,ato),e(Ig,ZR),e(ZR,nto),e(Ig,sto),e(k,lto),e(k,Un),e(Un,uae),e(uae,ito),e(Un,dto),e(Un,eP),e(eP,cto),e(Un,fto),e(Un,oP),e(oP,mto),e(Un,gto),e(k,hto),e(k,Ng),e(Ng,bae),e(bae,pto),e(Ng,_to),e(Ng,rP),e(rP,uto),e(Ng,bto),e(k,vto),e(k,Jn),e(Jn,vae),e(vae,Fto),e(Jn,Tto),e(Jn,tP),e(tP,Mto),e(Jn,Eto),e(Jn,aP),e(aP,Cto),e(Jn,wto),e(k,Ato),e(k,Yn),e(Yn,Fae),e(Fae,yto),e(Yn,Lto),e(Yn,nP),e(nP,xto),e(Yn,$to),e(Yn,sP),e(sP,kto),e(Yn,Sto),e(k,Rto),e(k,Kn),e(Kn,Tae),e(Tae,Pto),e(Kn,Bto),e(Kn,lP),e(lP,Ito),e(Kn,Nto),e(Kn,iP),e(iP,qto),e(Kn,jto),e(k,Dto),e(k,qg),e(qg,Mae),e(Mae,Gto),e(qg,Oto),e(qg,dP),e(dP,Vto),e(qg,Xto),e(k,zto),e(k,Zn),e(Zn,Eae),e(Eae,Wto),e(Zn,Qto),e(Zn,cP),e(cP,Hto),e(Zn,Uto),e(Zn,fP),e(fP,Jto),e(Zn,Yto),e(k,Kto),e(k,es),e(es,Cae),e(Cae,Zto),e(es,eao),e(es,mP),e(mP,oao),e(es,rao),e(es,gP),e(gP,tao),e(es,aao),e(k,nao),e(k,jg),e(jg,wae),e(wae,sao),e(jg,lao),e(jg,hP),e(hP,iao),e(jg,dao),e(k,cao),e(k,os),e(os,Aae),e(Aae,fao),e(os,mao),e(os,pP),e(pP,gao),e(os,hao),e(os,_P),e(_P,pao),e(os,_ao),e(k,uao),e(k,rs),e(rs,yae),e(yae,bao),e(rs,vao),e(rs,uP),e(uP,Fao),e(rs,Tao),e(rs,bP),e(bP,Mao),e(rs,Eao),e(k,Cao),e(k,ts),e(ts,Lae),e(Lae,wao),e(ts,Aao),e(ts,vP),e(vP,yao),e(ts,Lao),e(ts,FP),e(FP,xao),e(ts,$ao),e(k,kao),e(k,as),e(as,xae),e(xae,Sao),e(as,Rao),e(as,TP),e(TP,Pao),e(as,Bao),e(as,MP),e(MP,Iao),e(as,Nao),e(k,qao),e(k,ns),e(ns,$ae),e($ae,jao),e(ns,Dao),e(ns,EP),e(EP,Gao),e(ns,Oao),e(ns,CP),e(CP,Vao),e(ns,Xao),e(k,zao),e(k,ss),e(ss,kae),e(kae,Wao),e(ss,Qao),e(ss,wP),e(wP,Hao),e(ss,Uao),e(ss,AP),e(AP,Jao),e(ss,Yao),e(k,Kao),e(k,ls),e(ls,Sae),e(Sae,Zao),e(ls,eno),e(ls,yP),e(yP,ono),e(ls,rno),e(ls,LP),e(LP,tno),e(ls,ano),e(k,nno),e(k,Dg),e(Dg,Rae),e(Rae,sno),e(Dg,lno),e(Dg,xP),e(xP,ino),e(Dg,dno),e(k,cno),e(k,is),e(is,Pae),e(Pae,fno),e(is,mno),e(is,$P),e($P,gno),e(is,hno),e(is,kP),e(kP,pno),e(is,_no),e(k,uno),e(k,Gg),e(Gg,Bae),e(Bae,bno),e(Gg,vno),e(Gg,SP),e(SP,Fno),e(Gg,Tno),e(k,Mno),e(k,Og),e(Og,Iae),e(Iae,Eno),e(Og,Cno),e(Og,RP),e(RP,wno),e(Og,Ano),e(k,yno),e(k,ds),e(ds,Nae),e(Nae,Lno),e(ds,xno),e(ds,PP),e(PP,$no),e(ds,kno),e(ds,BP),e(BP,Sno),e(ds,Rno),e(k,Pno),e(k,cs),e(cs,qae),e(qae,Bno),e(cs,Ino),e(cs,IP),e(IP,Nno),e(cs,qno),e(cs,NP),e(NP,jno),e(cs,Dno),e(k,Gno),e(k,fs),e(fs,jae),e(jae,Ono),e(fs,Vno),e(fs,qP),e(qP,Xno),e(fs,zno),e(fs,jP),e(jP,Wno),e(fs,Qno),e(k,Hno),e(k,Vg),e(Vg,Dae),e(Dae,Uno),e(Vg,Jno),e(Vg,DP),e(DP,Yno),e(Vg,Kno),e(k,Zno),e(k,ms),e(ms,Gae),e(Gae,eso),e(ms,oso),e(ms,GP),e(GP,rso),e(ms,tso),e(ms,OP),e(OP,aso),e(ms,nso),e(k,sso),e(k,gs),e(gs,Oae),e(Oae,lso),e(gs,iso),e(gs,VP),e(VP,dso),e(gs,cso),e(gs,XP),e(XP,fso),e(gs,mso),e(k,gso),e(k,hs),e(hs,Vae),e(Vae,hso),e(hs,pso),e(hs,zP),e(zP,_so),e(hs,uso),e(hs,WP),e(WP,bso),e(hs,vso),e(k,Fso),e(k,ps),e(ps,Xae),e(Xae,Tso),e(ps,Mso),e(ps,QP),e(QP,Eso),e(ps,Cso),e(ps,HP),e(HP,wso),e(ps,Aso),e(k,yso),e(k,_s),e(_s,zae),e(zae,Lso),e(_s,xso),e(_s,UP),e(UP,$so),e(_s,kso),e(_s,JP),e(JP,Sso),e(_s,Rso),e(k,Pso),e(k,Xg),e(Xg,Wae),e(Wae,Bso),e(Xg,Iso),e(Xg,YP),e(YP,Nso),e(Xg,qso),e(k,jso),e(k,us),e(us,Qae),e(Qae,Dso),e(us,Gso),e(us,KP),e(KP,Oso),e(us,Vso),e(us,ZP),e(ZP,Xso),e(us,zso),e(k,Wso),e(k,zg),e(zg,Hae),e(Hae,Qso),e(zg,Hso),e(zg,eB),e(eB,Uso),e(zg,Jso),e(k,Yso),e(k,Wg),e(Wg,Uae),e(Uae,Kso),e(Wg,Zso),e(Wg,oB),e(oB,elo),e(Wg,olo),e(k,rlo),e(k,Qg),e(Qg,Jae),e(Jae,tlo),e(Qg,alo),e(Qg,rB),e(rB,nlo),e(Qg,slo),e(k,llo),e(k,Hg),e(Hg,Yae),e(Yae,ilo),e(Hg,dlo),e(Hg,tB),e(tB,clo),e(Hg,flo),e(k,mlo),e(k,bs),e(bs,Kae),e(Kae,glo),e(bs,hlo),e(bs,aB),e(aB,plo),e(bs,_lo),e(bs,nB),e(nB,ulo),e(bs,blo),e(k,vlo),e(k,Ug),e(Ug,Zae),e(Zae,Flo),e(Ug,Tlo),e(Ug,sB),e(sB,Mlo),e(Ug,Elo),e(k,Clo),e(k,vs),e(vs,ene),e(ene,wlo),e(vs,Alo),e(vs,lB),e(lB,ylo),e(vs,Llo),e(vs,iB),e(iB,xlo),e(vs,$lo),e(k,klo),e(k,Fs),e(Fs,one),e(one,Slo),e(Fs,Rlo),e(Fs,dB),e(dB,Plo),e(Fs,Blo),e(Fs,cB),e(cB,Ilo),e(Fs,Nlo),e(k,qlo),e(k,Ts),e(Ts,rne),e(rne,jlo),e(Ts,Dlo),e(Ts,fB),e(fB,Glo),e(Ts,Olo),e(Ts,mB),e(mB,Vlo),e(Ts,Xlo),e(k,zlo),e(k,Ms),e(Ms,tne),e(tne,Wlo),e(Ms,Qlo),e(Ms,gB),e(gB,Hlo),e(Ms,Ulo),e(Ms,hB),e(hB,Jlo),e(Ms,Ylo),e(k,Klo),e(k,Es),e(Es,ane),e(ane,Zlo),e(Es,eio),e(Es,pB),e(pB,oio),e(Es,rio),e(Es,_B),e(_B,tio),e(Es,aio),e(k,nio),e(k,Cs),e(Cs,nne),e(nne,sio),e(Cs,lio),e(Cs,uB),e(uB,iio),e(Cs,dio),e(Cs,bB),e(bB,cio),e(Cs,fio),e(k,mio),e(k,Jg),e(Jg,sne),e(sne,gio),e(Jg,hio),e(Jg,vB),e(vB,pio),e(Jg,_io),e(k,uio),e(k,Yg),e(Yg,lne),e(lne,bio),e(Yg,vio),e(Yg,FB),e(FB,Fio),e(Yg,Tio),e(k,Mio),e(k,ws),e(ws,ine),e(ine,Eio),e(ws,Cio),e(ws,TB),e(TB,wio),e(ws,Aio),e(ws,MB),e(MB,yio),e(ws,Lio),e(k,xio),e(k,As),e(As,dne),e(dne,$io),e(As,kio),e(As,EB),e(EB,Sio),e(As,Rio),e(As,CB),e(CB,Pio),e(As,Bio),e(k,Iio),e(k,ys),e(ys,cne),e(cne,Nio),e(ys,qio),e(ys,wB),e(wB,jio),e(ys,Dio),e(ys,AB),e(AB,Gio),e(ys,Oio),e(k,Vio),e(k,Kg),e(Kg,fne),e(fne,Xio),e(Kg,zio),e(Kg,yB),e(yB,Wio),e(Kg,Qio),e(k,Hio),e(k,Zg),e(Zg,mne),e(mne,Uio),e(Zg,Jio),e(Zg,LB),e(LB,Yio),e(Zg,Kio),e(k,Zio),e(k,eh),e(eh,gne),e(gne,edo),e(eh,odo),e(eh,xB),e(xB,rdo),e(eh,tdo),e(k,ado),e(k,Ls),e(Ls,hne),e(hne,ndo),e(Ls,sdo),e(Ls,$B),e($B,ldo),e(Ls,ido),e(Ls,kB),e(kB,ddo),e(Ls,cdo),e(k,fdo),e(k,oh),e(oh,pne),e(pne,mdo),e(oh,gdo),e(oh,SB),e(SB,hdo),e(oh,pdo),e(k,_do),e(k,rh),e(rh,_ne),e(_ne,udo),e(rh,bdo),e(rh,RB),e(RB,vdo),e(rh,Fdo),e(k,Tdo),e(k,th),e(th,une),e(une,Mdo),e(th,Edo),e(th,PB),e(PB,Cdo),e(th,wdo),e(k,Ado),e(k,xs),e(xs,bne),e(bne,ydo),e(xs,Ldo),e(xs,BB),e(BB,xdo),e(xs,$do),e(xs,IB),e(IB,kdo),e(xs,Sdo),e(k,Rdo),e(k,ah),e(ah,vne),e(vne,Pdo),e(ah,Bdo),e(ah,NB),e(NB,Ido),e(ah,Ndo),e(k,qdo),e(k,nh),e(nh,Fne),e(Fne,jdo),e(nh,Ddo),e(nh,qB),e(qB,Gdo),e(nh,Odo),e(k,Vdo),e(k,$s),e($s,Tne),e(Tne,Xdo),e($s,zdo),e($s,jB),e(jB,Wdo),e($s,Qdo),e($s,DB),e(DB,Hdo),e($s,Udo),e(k,Jdo),e(k,ks),e(ks,Mne),e(Mne,Ydo),e(ks,Kdo),e(ks,GB),e(GB,Zdo),e(ks,eco),e(ks,OB),e(OB,oco),e(ks,rco),e(k,tco),e(k,Ss),e(Ss,Ene),e(Ene,aco),e(Ss,nco),e(Ss,VB),e(VB,sco),e(Ss,lco),e(Ss,XB),e(XB,ico),e(Ss,dco),e(k,cco),e(k,Rs),e(Rs,Cne),e(Cne,fco),e(Rs,mco),e(Rs,zB),e(zB,gco),e(Rs,hco),e(Rs,WB),e(WB,pco),e(Rs,_co),e(Cr,uco),M(sh,Cr,null),e(wo,bco),e(wo,lh),M(UA,lh,null),e(lh,vco),e(lh,wne),e(wne,Fco),b(f,Vqe,u),b(f,Mi,u),e(Mi,ih),e(ih,Ane),M(JA,Ane,null),e(Mi,Tco),e(Mi,yne),e(yne,Mco),b(f,Xqe,u),b(f,Ao,u),M(YA,Ao,null),e(Ao,Eco),e(Ao,KA),e(KA,Cco),e(KA,QB),e(QB,wco),e(KA,Aco),e(Ao,yco),e(Ao,ZA),e(ZA,Lco),e(ZA,Lne),e(Lne,xco),e(ZA,$co),e(Ao,kco),e(Ao,He),M(ey,He,null),e(He,Sco),e(He,xne),e(xne,Rco),e(He,Pco),e(He,ya),e(ya,Bco),e(ya,$ne),e($ne,Ico),e(ya,Nco),e(ya,kne),e(kne,qco),e(ya,jco),e(ya,Sne),e(Sne,Dco),e(ya,Gco),e(He,Oco),e(He,Y),e(Y,dh),e(dh,Rne),e(Rne,Vco),e(dh,Xco),e(dh,HB),e(HB,zco),e(dh,Wco),e(Y,Qco),e(Y,ch),e(ch,Pne),e(Pne,Hco),e(ch,Uco),e(ch,UB),e(UB,Jco),e(ch,Yco),e(Y,Kco),e(Y,fh),e(fh,Bne),e(Bne,Zco),e(fh,efo),e(fh,JB),e(JB,ofo),e(fh,rfo),e(Y,tfo),e(Y,mh),e(mh,Ine),e(Ine,afo),e(mh,nfo),e(mh,YB),e(YB,sfo),e(mh,lfo),e(Y,ifo),e(Y,gh),e(gh,Nne),e(Nne,dfo),e(gh,cfo),e(gh,KB),e(KB,ffo),e(gh,mfo),e(Y,gfo),e(Y,hh),e(hh,qne),e(qne,hfo),e(hh,pfo),e(hh,ZB),e(ZB,_fo),e(hh,ufo),e(Y,bfo),e(Y,ph),e(ph,jne),e(jne,vfo),e(ph,Ffo),e(ph,eI),e(eI,Tfo),e(ph,Mfo),e(Y,Efo),e(Y,_h),e(_h,Dne),e(Dne,Cfo),e(_h,wfo),e(_h,oI),e(oI,Afo),e(_h,yfo),e(Y,Lfo),e(Y,uh),e(uh,Gne),e(Gne,xfo),e(uh,$fo),e(uh,rI),e(rI,kfo),e(uh,Sfo),e(Y,Rfo),e(Y,bh),e(bh,One),e(One,Pfo),e(bh,Bfo),e(bh,tI),e(tI,Ifo),e(bh,Nfo),e(Y,qfo),e(Y,vh),e(vh,Vne),e(Vne,jfo),e(vh,Dfo),e(vh,aI),e(aI,Gfo),e(vh,Ofo),e(Y,Vfo),e(Y,Fh),e(Fh,Xne),e(Xne,Xfo),e(Fh,zfo),e(Fh,nI),e(nI,Wfo),e(Fh,Qfo),e(Y,Hfo),e(Y,Th),e(Th,zne),e(zne,Ufo),e(Th,Jfo),e(Th,sI),e(sI,Yfo),e(Th,Kfo),e(Y,Zfo),e(Y,Mh),e(Mh,Wne),e(Wne,emo),e(Mh,omo),e(Mh,lI),e(lI,rmo),e(Mh,tmo),e(Y,amo),e(Y,Eh),e(Eh,Qne),e(Qne,nmo),e(Eh,smo),e(Eh,iI),e(iI,lmo),e(Eh,imo),e(Y,dmo),e(Y,Ch),e(Ch,Hne),e(Hne,cmo),e(Ch,fmo),e(Ch,dI),e(dI,mmo),e(Ch,gmo),e(Y,hmo),e(Y,wh),e(wh,Une),e(Une,pmo),e(wh,_mo),e(wh,cI),e(cI,umo),e(wh,bmo),e(Y,vmo),e(Y,Ah),e(Ah,Jne),e(Jne,Fmo),e(Ah,Tmo),e(Ah,fI),e(fI,Mmo),e(Ah,Emo),e(Y,Cmo),e(Y,yh),e(yh,Yne),e(Yne,wmo),e(yh,Amo),e(yh,mI),e(mI,ymo),e(yh,Lmo),e(Y,xmo),e(Y,Lh),e(Lh,Kne),e(Kne,$mo),e(Lh,kmo),e(Lh,gI),e(gI,Smo),e(Lh,Rmo),e(Y,Pmo),e(Y,xh),e(xh,Zne),e(Zne,Bmo),e(xh,Imo),e(xh,hI),e(hI,Nmo),e(xh,qmo),e(Y,jmo),e(Y,$h),e($h,ese),e(ese,Dmo),e($h,Gmo),e($h,pI),e(pI,Omo),e($h,Vmo),e(Y,Xmo),e(Y,kh),e(kh,ose),e(ose,zmo),e(kh,Wmo),e(kh,_I),e(_I,Qmo),e(kh,Hmo),e(Y,Umo),e(Y,Sh),e(Sh,rse),e(rse,Jmo),e(Sh,Ymo),e(Sh,uI),e(uI,Kmo),e(Sh,Zmo),e(Y,ego),e(Y,Rh),e(Rh,tse),e(tse,ogo),e(Rh,rgo),e(Rh,bI),e(bI,tgo),e(Rh,ago),e(Y,ngo),e(Y,Ph),e(Ph,ase),e(ase,sgo),e(Ph,lgo),e(Ph,vI),e(vI,igo),e(Ph,dgo),e(Y,cgo),e(Y,Bh),e(Bh,nse),e(nse,fgo),e(Bh,mgo),e(Bh,FI),e(FI,ggo),e(Bh,hgo),e(Y,pgo),e(Y,Ih),e(Ih,sse),e(sse,_go),e(Ih,ugo),e(Ih,TI),e(TI,bgo),e(Ih,vgo),e(Y,Fgo),e(Y,Nh),e(Nh,lse),e(lse,Tgo),e(Nh,Mgo),e(Nh,MI),e(MI,Ego),e(Nh,Cgo),e(He,wgo),M(qh,He,null),e(He,Ago),M(jh,He,null),e(Ao,ygo),e(Ao,Dh),M(oy,Dh,null),e(Dh,Lgo),e(Dh,ise),e(ise,xgo),b(f,zqe,u),b(f,Ei,u),e(Ei,Gh),e(Gh,dse),M(ry,dse,null),e(Ei,$go),e(Ei,cse),e(cse,kgo),b(f,Wqe,u),b(f,yo,u),M(ty,yo,null),e(yo,Sgo),e(yo,ay),e(ay,Rgo),e(ay,EI),e(EI,Pgo),e(ay,Bgo),e(yo,Igo),e(yo,ny),e(ny,Ngo),e(ny,fse),e(fse,qgo),e(ny,jgo),e(yo,Dgo),e(yo,Ue),M(sy,Ue,null),e(Ue,Ggo),e(Ue,mse),e(mse,Ogo),e(Ue,Vgo),e(Ue,Ci),e(Ci,Xgo),e(Ci,gse),e(gse,zgo),e(Ci,Wgo),e(Ci,hse),e(hse,Qgo),e(Ci,Hgo),e(Ue,Ugo),e(Ue,he),e(he,Oh),e(Oh,pse),e(pse,Jgo),e(Oh,Ygo),e(Oh,CI),e(CI,Kgo),e(Oh,Zgo),e(he,eho),e(he,Vh),e(Vh,_se),e(_se,oho),e(Vh,rho),e(Vh,use),e(use,tho),e(Vh,aho),e(he,nho),e(he,Xh),e(Xh,bse),e(bse,sho),e(Xh,lho),e(Xh,wI),e(wI,iho),e(Xh,dho),e(he,cho),e(he,zh),e(zh,vse),e(vse,fho),e(zh,mho),e(zh,AI),e(AI,gho),e(zh,hho),e(he,pho),e(he,Wh),e(Wh,Fse),e(Fse,_ho),e(Wh,uho),e(Wh,yI),e(yI,bho),e(Wh,vho),e(he,Fho),e(he,Qh),e(Qh,Tse),e(Tse,Tho),e(Qh,Mho),e(Qh,LI),e(LI,Eho),e(Qh,Cho),e(he,who),e(he,Hh),e(Hh,Mse),e(Mse,Aho),e(Hh,yho),e(Hh,xI),e(xI,Lho),e(Hh,xho),e(he,$ho),e(he,Uh),e(Uh,Ese),e(Ese,kho),e(Uh,Sho),e(Uh,$I),e($I,Rho),e(Uh,Pho),e(he,Bho),e(he,Jh),e(Jh,Cse),e(Cse,Iho),e(Jh,Nho),e(Jh,kI),e(kI,qho),e(Jh,jho),e(he,Dho),e(he,Yh),e(Yh,wse),e(wse,Gho),e(Yh,Oho),e(Yh,SI),e(SI,Vho),e(Yh,Xho),e(he,zho),e(he,Kh),e(Kh,Ase),e(Ase,Who),e(Kh,Qho),e(Kh,RI),e(RI,Hho),e(Kh,Uho),e(he,Jho),e(he,Zh),e(Zh,yse),e(yse,Yho),e(Zh,Kho),e(Zh,PI),e(PI,Zho),e(Zh,epo),e(he,opo),e(he,ep),e(ep,Lse),e(Lse,rpo),e(ep,tpo),e(ep,BI),e(BI,apo),e(ep,npo),e(he,spo),e(he,op),e(op,xse),e(xse,lpo),e(op,ipo),e(op,II),e(II,dpo),e(op,cpo),e(he,fpo),e(he,rp),e(rp,$se),e($se,mpo),e(rp,gpo),e(rp,NI),e(NI,hpo),e(rp,ppo),e(he,_po),e(he,tp),e(tp,kse),e(kse,upo),e(tp,bpo),e(tp,qI),e(qI,vpo),e(tp,Fpo),e(he,Tpo),e(he,ap),e(ap,Sse),e(Sse,Mpo),e(ap,Epo),e(ap,jI),e(jI,Cpo),e(ap,wpo),e(Ue,Apo),M(np,Ue,null),e(Ue,ypo),M(sp,Ue,null),e(yo,Lpo),e(yo,lp),M(ly,lp,null),e(lp,xpo),e(lp,Rse),e(Rse,$po),b(f,Qqe,u),b(f,wi,u),e(wi,ip),e(ip,Pse),M(iy,Pse,null),e(wi,kpo),e(wi,Bse),e(Bse,Spo),b(f,Hqe,u),b(f,Lo,u),M(dy,Lo,null),e(Lo,Rpo),e(Lo,Ai),e(Ai,Ppo),e(Ai,DI),e(DI,Bpo),e(Ai,Ipo),e(Ai,GI),e(GI,Npo),e(Ai,qpo),e(Lo,jpo),e(Lo,cy),e(cy,Dpo),e(cy,Ise),e(Ise,Gpo),e(cy,Opo),e(Lo,Vpo),e(Lo,tt),M(fy,tt,null),e(tt,Xpo),e(tt,Nse),e(Nse,zpo),e(tt,Wpo),e(tt,yi),e(yi,Qpo),e(yi,qse),e(qse,Hpo),e(yi,Upo),e(yi,OI),e(OI,Jpo),e(yi,Ypo),e(tt,Kpo),M(dp,tt,null),e(Lo,Zpo),e(Lo,Je),M(my,Je,null),e(Je,e_o),e(Je,jse),e(jse,o_o),e(Je,r_o),e(Je,La),e(La,t_o),e(La,Dse),e(Dse,a_o),e(La,n_o),e(La,Gse),e(Gse,s_o),e(La,l_o),e(La,Ose),e(Ose,i_o),e(La,d_o),e(Je,c_o),e(Je,x),e(x,cp),e(cp,Vse),e(Vse,f_o),e(cp,m_o),e(cp,VI),e(VI,g_o),e(cp,h_o),e(x,p_o),e(x,fp),e(fp,Xse),e(Xse,__o),e(fp,u_o),e(fp,XI),e(XI,b_o),e(fp,v_o),e(x,F_o),e(x,mp),e(mp,zse),e(zse,T_o),e(mp,M_o),e(mp,zI),e(zI,E_o),e(mp,C_o),e(x,w_o),e(x,gp),e(gp,Wse),e(Wse,A_o),e(gp,y_o),e(gp,WI),e(WI,L_o),e(gp,x_o),e(x,$_o),e(x,hp),e(hp,Qse),e(Qse,k_o),e(hp,S_o),e(hp,QI),e(QI,R_o),e(hp,P_o),e(x,B_o),e(x,pp),e(pp,Hse),e(Hse,I_o),e(pp,N_o),e(pp,HI),e(HI,q_o),e(pp,j_o),e(x,D_o),e(x,_p),e(_p,Use),e(Use,G_o),e(_p,O_o),e(_p,UI),e(UI,V_o),e(_p,X_o),e(x,z_o),e(x,up),e(up,Jse),e(Jse,W_o),e(up,Q_o),e(up,JI),e(JI,H_o),e(up,U_o),e(x,J_o),e(x,bp),e(bp,Yse),e(Yse,Y_o),e(bp,K_o),e(bp,YI),e(YI,Z_o),e(bp,euo),e(x,ouo),e(x,vp),e(vp,Kse),e(Kse,ruo),e(vp,tuo),e(vp,KI),e(KI,auo),e(vp,nuo),e(x,suo),e(x,Fp),e(Fp,Zse),e(Zse,luo),e(Fp,iuo),e(Fp,ZI),e(ZI,duo),e(Fp,cuo),e(x,fuo),e(x,Tp),e(Tp,ele),e(ele,muo),e(Tp,guo),e(Tp,eN),e(eN,huo),e(Tp,puo),e(x,_uo),e(x,Mp),e(Mp,ole),e(ole,uuo),e(Mp,buo),e(Mp,oN),e(oN,vuo),e(Mp,Fuo),e(x,Tuo),e(x,Ep),e(Ep,rle),e(rle,Muo),e(Ep,Euo),e(Ep,rN),e(rN,Cuo),e(Ep,wuo),e(x,Auo),e(x,Cp),e(Cp,tle),e(tle,yuo),e(Cp,Luo),e(Cp,tN),e(tN,xuo),e(Cp,$uo),e(x,kuo),e(x,wp),e(wp,ale),e(ale,Suo),e(wp,Ruo),e(wp,aN),e(aN,Puo),e(wp,Buo),e(x,Iuo),e(x,Ap),e(Ap,nle),e(nle,Nuo),e(Ap,quo),e(Ap,nN),e(nN,juo),e(Ap,Duo),e(x,Guo),e(x,yp),e(yp,sle),e(sle,Ouo),e(yp,Vuo),e(yp,sN),e(sN,Xuo),e(yp,zuo),e(x,Wuo),e(x,Lp),e(Lp,lle),e(lle,Quo),e(Lp,Huo),e(Lp,lN),e(lN,Uuo),e(Lp,Juo),e(x,Yuo),e(x,xp),e(xp,ile),e(ile,Kuo),e(xp,Zuo),e(xp,iN),e(iN,e4o),e(xp,o4o),e(x,r4o),e(x,$p),e($p,dle),e(dle,t4o),e($p,a4o),e($p,dN),e(dN,n4o),e($p,s4o),e(x,l4o),e(x,kp),e(kp,cle),e(cle,i4o),e(kp,d4o),e(kp,cN),e(cN,c4o),e(kp,f4o),e(x,m4o),e(x,Sp),e(Sp,fle),e(fle,g4o),e(Sp,h4o),e(Sp,fN),e(fN,p4o),e(Sp,_4o),e(x,u4o),e(x,Rp),e(Rp,mle),e(mle,b4o),e(Rp,v4o),e(Rp,mN),e(mN,F4o),e(Rp,T4o),e(x,M4o),e(x,Pp),e(Pp,gle),e(gle,E4o),e(Pp,C4o),e(Pp,gN),e(gN,w4o),e(Pp,A4o),e(x,y4o),e(x,Bp),e(Bp,hle),e(hle,L4o),e(Bp,x4o),e(Bp,hN),e(hN,$4o),e(Bp,k4o),e(x,S4o),e(x,Ip),e(Ip,ple),e(ple,R4o),e(Ip,P4o),e(Ip,pN),e(pN,B4o),e(Ip,I4o),e(x,N4o),e(x,Np),e(Np,_le),e(_le,q4o),e(Np,j4o),e(Np,_N),e(_N,D4o),e(Np,G4o),e(x,O4o),e(x,qp),e(qp,ule),e(ule,V4o),e(qp,X4o),e(qp,uN),e(uN,z4o),e(qp,W4o),e(x,Q4o),e(x,jp),e(jp,ble),e(ble,H4o),e(jp,U4o),e(jp,bN),e(bN,J4o),e(jp,Y4o),e(x,K4o),e(x,Dp),e(Dp,vle),e(vle,Z4o),e(Dp,e1o),e(Dp,vN),e(vN,o1o),e(Dp,r1o),e(x,t1o),e(x,Gp),e(Gp,Fle),e(Fle,a1o),e(Gp,n1o),e(Gp,FN),e(FN,s1o),e(Gp,l1o),e(x,i1o),e(x,Op),e(Op,Tle),e(Tle,d1o),e(Op,c1o),e(Op,TN),e(TN,f1o),e(Op,m1o),e(x,g1o),e(x,Ps),e(Ps,Mle),e(Mle,h1o),e(Ps,p1o),e(Ps,MN),e(MN,_1o),e(Ps,u1o),e(Ps,EN),e(EN,b1o),e(Ps,v1o),e(x,F1o),e(x,Vp),e(Vp,Ele),e(Ele,T1o),e(Vp,M1o),e(Vp,CN),e(CN,E1o),e(Vp,C1o),e(x,w1o),e(x,Xp),e(Xp,Cle),e(Cle,A1o),e(Xp,y1o),e(Xp,wN),e(wN,L1o),e(Xp,x1o),e(x,$1o),e(x,zp),e(zp,wle),e(wle,k1o),e(zp,S1o),e(zp,AN),e(AN,R1o),e(zp,P1o),e(x,B1o),e(x,Wp),e(Wp,Ale),e(Ale,I1o),e(Wp,N1o),e(Wp,yN),e(yN,q1o),e(Wp,j1o),e(x,D1o),e(x,Qp),e(Qp,yle),e(yle,G1o),e(Qp,O1o),e(Qp,LN),e(LN,V1o),e(Qp,X1o),e(x,z1o),e(x,Hp),e(Hp,Lle),e(Lle,W1o),e(Hp,Q1o),e(Hp,xN),e(xN,H1o),e(Hp,U1o),e(x,J1o),e(x,Up),e(Up,xle),e(xle,Y1o),e(Up,K1o),e(Up,$N),e($N,Z1o),e(Up,e7o),e(x,o7o),e(x,Jp),e(Jp,$le),e($le,r7o),e(Jp,t7o),e(Jp,kN),e(kN,a7o),e(Jp,n7o),e(x,s7o),e(x,Yp),e(Yp,kle),e(kle,l7o),e(Yp,i7o),e(Yp,SN),e(SN,d7o),e(Yp,c7o),e(x,f7o),e(x,Kp),e(Kp,Sle),e(Sle,m7o),e(Kp,g7o),e(Kp,RN),e(RN,h7o),e(Kp,p7o),e(x,_7o),e(x,Zp),e(Zp,Rle),e(Rle,u7o),e(Zp,b7o),e(Zp,PN),e(PN,v7o),e(Zp,F7o),e(x,T7o),e(x,e_),e(e_,Ple),e(Ple,M7o),e(e_,E7o),e(e_,BN),e(BN,C7o),e(e_,w7o),e(x,A7o),e(x,o_),e(o_,Ble),e(Ble,y7o),e(o_,L7o),e(o_,IN),e(IN,x7o),e(o_,$7o),e(x,k7o),e(x,r_),e(r_,Ile),e(Ile,S7o),e(r_,R7o),e(r_,NN),e(NN,P7o),e(r_,B7o),e(x,I7o),e(x,t_),e(t_,Nle),e(Nle,N7o),e(t_,q7o),e(t_,qN),e(qN,j7o),e(t_,D7o),e(x,G7o),e(x,a_),e(a_,qle),e(qle,O7o),e(a_,V7o),e(a_,jN),e(jN,X7o),e(a_,z7o),e(x,W7o),e(x,n_),e(n_,jle),e(jle,Q7o),e(n_,H7o),e(n_,DN),e(DN,U7o),e(n_,J7o),e(x,Y7o),e(x,s_),e(s_,Dle),e(Dle,K7o),e(s_,Z7o),e(s_,GN),e(GN,ebo),e(s_,obo),e(x,rbo),e(x,l_),e(l_,Gle),e(Gle,tbo),e(l_,abo),e(l_,ON),e(ON,nbo),e(l_,sbo),e(x,lbo),e(x,i_),e(i_,Ole),e(Ole,ibo),e(i_,dbo),e(i_,VN),e(VN,cbo),e(i_,fbo),e(x,mbo),e(x,d_),e(d_,Vle),e(Vle,gbo),e(d_,hbo),e(d_,XN),e(XN,pbo),e(d_,_bo),e(x,ubo),e(x,c_),e(c_,Xle),e(Xle,bbo),e(c_,vbo),e(c_,zN),e(zN,Fbo),e(c_,Tbo),e(x,Mbo),e(x,f_),e(f_,zle),e(zle,Ebo),e(f_,Cbo),e(f_,WN),e(WN,wbo),e(f_,Abo),e(x,ybo),e(x,m_),e(m_,Wle),e(Wle,Lbo),e(m_,xbo),e(m_,QN),e(QN,$bo),e(m_,kbo),e(x,Sbo),e(x,g_),e(g_,Qle),e(Qle,Rbo),e(g_,Pbo),e(g_,HN),e(HN,Bbo),e(g_,Ibo),e(x,Nbo),e(x,h_),e(h_,Hle),e(Hle,qbo),e(h_,jbo),e(h_,UN),e(UN,Dbo),e(h_,Gbo),e(x,Obo),e(x,p_),e(p_,Ule),e(Ule,Vbo),e(p_,Xbo),e(p_,JN),e(JN,zbo),e(p_,Wbo),e(x,Qbo),e(x,__),e(__,Jle),e(Jle,Hbo),e(__,Ubo),e(__,YN),e(YN,Jbo),e(__,Ybo),e(x,Kbo),e(x,u_),e(u_,Yle),e(Yle,Zbo),e(u_,e2o),e(u_,KN),e(KN,o2o),e(u_,r2o),e(x,t2o),e(x,b_),e(b_,Kle),e(Kle,a2o),e(b_,n2o),e(b_,ZN),e(ZN,s2o),e(b_,l2o),e(x,i2o),e(x,v_),e(v_,Zle),e(Zle,d2o),e(v_,c2o),e(v_,eq),e(eq,f2o),e(v_,m2o),e(x,g2o),e(x,F_),e(F_,eie),e(eie,h2o),e(F_,p2o),e(F_,oq),e(oq,_2o),e(F_,u2o),e(x,b2o),e(x,T_),e(T_,oie),e(oie,v2o),e(T_,F2o),e(T_,rq),e(rq,T2o),e(T_,M2o),e(x,E2o),e(x,M_),e(M_,rie),e(rie,C2o),e(M_,w2o),e(M_,tq),e(tq,A2o),e(M_,y2o),e(x,L2o),e(x,E_),e(E_,tie),e(tie,x2o),e(E_,$2o),e(E_,aq),e(aq,k2o),e(E_,S2o),e(x,R2o),e(x,C_),e(C_,aie),e(aie,P2o),e(C_,B2o),e(C_,nq),e(nq,I2o),e(C_,N2o),e(x,q2o),e(x,w_),e(w_,nie),e(nie,j2o),e(w_,D2o),e(w_,sq),e(sq,G2o),e(w_,O2o),e(x,V2o),e(x,A_),e(A_,sie),e(sie,X2o),e(A_,z2o),e(A_,lq),e(lq,W2o),e(A_,Q2o),e(x,H2o),e(x,y_),e(y_,lie),e(lie,U2o),e(y_,J2o),e(y_,iq),e(iq,Y2o),e(y_,K2o),e(x,Z2o),e(x,L_),e(L_,iie),e(iie,evo),e(L_,ovo),e(L_,dq),e(dq,rvo),e(L_,tvo),e(x,avo),e(x,x_),e(x_,die),e(die,nvo),e(x_,svo),e(x_,cq),e(cq,lvo),e(x_,ivo),e(x,dvo),e(x,$_),e($_,cie),e(cie,cvo),e($_,fvo),e($_,fq),e(fq,mvo),e($_,gvo),e(x,hvo),e(x,k_),e(k_,fie),e(fie,pvo),e(k_,_vo),e(k_,mq),e(mq,uvo),e(k_,bvo),e(x,vvo),e(x,S_),e(S_,mie),e(mie,Fvo),e(S_,Tvo),e(S_,gq),e(gq,Mvo),e(S_,Evo),e(x,Cvo),e(x,R_),e(R_,gie),e(gie,wvo),e(R_,Avo),e(R_,hq),e(hq,yvo),e(R_,Lvo),e(x,xvo),e(x,P_),e(P_,hie),e(hie,$vo),e(P_,kvo),e(P_,pq),e(pq,Svo),e(P_,Rvo),e(x,Pvo),e(x,B_),e(B_,pie),e(pie,Bvo),e(B_,Ivo),e(B_,_q),e(_q,Nvo),e(B_,qvo),e(x,jvo),e(x,I_),e(I_,_ie),e(_ie,Dvo),e(I_,Gvo),e(I_,uq),e(uq,Ovo),e(I_,Vvo),e(x,Xvo),e(x,N_),e(N_,uie),e(uie,zvo),e(N_,Wvo),e(N_,bq),e(bq,Qvo),e(N_,Hvo),e(x,Uvo),e(x,q_),e(q_,bie),e(bie,Jvo),e(q_,Yvo),e(q_,vq),e(vq,Kvo),e(q_,Zvo),e(x,eFo),e(x,j_),e(j_,vie),e(vie,oFo),e(j_,rFo),e(j_,Fq),e(Fq,tFo),e(j_,aFo),e(x,nFo),e(x,D_),e(D_,Fie),e(Fie,sFo),e(D_,lFo),e(D_,Tq),e(Tq,iFo),e(D_,dFo),e(x,cFo),e(x,G_),e(G_,Tie),e(Tie,fFo),e(G_,mFo),e(G_,Mq),e(Mq,gFo),e(G_,hFo),e(x,pFo),e(x,O_),e(O_,Mie),e(Mie,_Fo),e(O_,uFo),e(O_,Eq),e(Eq,bFo),e(O_,vFo),e(x,FFo),e(x,V_),e(V_,Eie),e(Eie,TFo),e(V_,MFo),e(V_,Cq),e(Cq,EFo),e(V_,CFo),e(x,wFo),e(x,X_),e(X_,Cie),e(Cie,AFo),e(X_,yFo),e(X_,wq),e(wq,LFo),e(X_,xFo),e(x,$Fo),e(x,z_),e(z_,wie),e(wie,kFo),e(z_,SFo),e(z_,Aq),e(Aq,RFo),e(z_,PFo),e(x,BFo),e(x,W_),e(W_,Aie),e(Aie,IFo),e(W_,NFo),e(W_,yq),e(yq,qFo),e(W_,jFo),e(x,DFo),e(x,Q_),e(Q_,yie),e(yie,GFo),e(Q_,OFo),e(Q_,Lq),e(Lq,VFo),e(Q_,XFo),e(x,zFo),e(x,H_),e(H_,Lie),e(Lie,WFo),e(H_,QFo),e(H_,xq),e(xq,HFo),e(H_,UFo),e(x,JFo),e(x,U_),e(U_,xie),e(xie,YFo),e(U_,KFo),e(U_,$q),e($q,ZFo),e(U_,eTo),e(x,oTo),e(x,J_),e(J_,$ie),e($ie,rTo),e(J_,tTo),e(J_,kq),e(kq,aTo),e(J_,nTo),e(x,sTo),e(x,Y_),e(Y_,kie),e(kie,lTo),e(Y_,iTo),e(Y_,Sq),e(Sq,dTo),e(Y_,cTo),e(x,fTo),e(x,K_),e(K_,Sie),e(Sie,mTo),e(K_,gTo),e(K_,Rq),e(Rq,hTo),e(K_,pTo),e(x,_To),e(x,Z_),e(Z_,Rie),e(Rie,uTo),e(Z_,bTo),e(Z_,Pq),e(Pq,vTo),e(Z_,FTo),e(x,TTo),e(x,eu),e(eu,Pie),e(Pie,MTo),e(eu,ETo),e(eu,Bq),e(Bq,CTo),e(eu,wTo),e(x,ATo),e(x,ou),e(ou,Bie),e(Bie,yTo),e(ou,LTo),e(ou,Iq),e(Iq,xTo),e(ou,$To),e(x,kTo),e(x,ru),e(ru,Iie),e(Iie,STo),e(ru,RTo),e(ru,Nq),e(Nq,PTo),e(ru,BTo),e(x,ITo),e(x,tu),e(tu,Nie),e(Nie,NTo),e(tu,qTo),e(tu,qq),e(qq,jTo),e(tu,DTo),e(Je,GTo),e(Je,au),e(au,OTo),e(au,qie),e(qie,VTo),e(au,XTo),e(au,jie),e(jie,zTo),e(Je,WTo),M(nu,Je,null),b(f,Uqe,u),b(f,Li,u),e(Li,su),e(su,Die),M(gy,Die,null),e(Li,QTo),e(Li,Gie),e(Gie,HTo),b(f,Jqe,u),b(f,xo,u),M(hy,xo,null),e(xo,UTo),e(xo,xi),e(xi,JTo),e(xi,jq),e(jq,YTo),e(xi,KTo),e(xi,Dq),e(Dq,ZTo),e(xi,eMo),e(xo,oMo),e(xo,py),e(py,rMo),e(py,Oie),e(Oie,tMo),e(py,aMo),e(xo,nMo),e(xo,at),M(_y,at,null),e(at,sMo),e(at,Vie),e(Vie,lMo),e(at,iMo),e(at,$i),e($i,dMo),e($i,Xie),e(Xie,cMo),e($i,fMo),e($i,Gq),e(Gq,mMo),e($i,gMo),e(at,hMo),M(lu,at,null),e(xo,pMo),e(xo,Ye),M(uy,Ye,null),e(Ye,_Mo),e(Ye,zie),e(zie,uMo),e(Ye,bMo),e(Ye,xa),e(xa,vMo),e(xa,Wie),e(Wie,FMo),e(xa,TMo),e(xa,Qie),e(Qie,MMo),e(xa,EMo),e(xa,Hie),e(Hie,CMo),e(xa,wMo),e(Ye,AMo),e(Ye,G),e(G,iu),e(iu,Uie),e(Uie,yMo),e(iu,LMo),e(iu,Oq),e(Oq,xMo),e(iu,$Mo),e(G,kMo),e(G,du),e(du,Jie),e(Jie,SMo),e(du,RMo),e(du,Vq),e(Vq,PMo),e(du,BMo),e(G,IMo),e(G,cu),e(cu,Yie),e(Yie,NMo),e(cu,qMo),e(cu,Xq),e(Xq,jMo),e(cu,DMo),e(G,GMo),e(G,fu),e(fu,Kie),e(Kie,OMo),e(fu,VMo),e(fu,zq),e(zq,XMo),e(fu,zMo),e(G,WMo),e(G,mu),e(mu,Zie),e(Zie,QMo),e(mu,HMo),e(mu,Wq),e(Wq,UMo),e(mu,JMo),e(G,YMo),e(G,gu),e(gu,ede),e(ede,KMo),e(gu,ZMo),e(gu,Qq),e(Qq,eEo),e(gu,oEo),e(G,rEo),e(G,hu),e(hu,ode),e(ode,tEo),e(hu,aEo),e(hu,Hq),e(Hq,nEo),e(hu,sEo),e(G,lEo),e(G,pu),e(pu,rde),e(rde,iEo),e(pu,dEo),e(pu,Uq),e(Uq,cEo),e(pu,fEo),e(G,mEo),e(G,_u),e(_u,tde),e(tde,gEo),e(_u,hEo),e(_u,Jq),e(Jq,pEo),e(_u,_Eo),e(G,uEo),e(G,uu),e(uu,ade),e(ade,bEo),e(uu,vEo),e(uu,Yq),e(Yq,FEo),e(uu,TEo),e(G,MEo),e(G,bu),e(bu,nde),e(nde,EEo),e(bu,CEo),e(bu,Kq),e(Kq,wEo),e(bu,AEo),e(G,yEo),e(G,vu),e(vu,sde),e(sde,LEo),e(vu,xEo),e(vu,Zq),e(Zq,$Eo),e(vu,kEo),e(G,SEo),e(G,Fu),e(Fu,lde),e(lde,REo),e(Fu,PEo),e(Fu,ej),e(ej,BEo),e(Fu,IEo),e(G,NEo),e(G,Tu),e(Tu,ide),e(ide,qEo),e(Tu,jEo),e(Tu,oj),e(oj,DEo),e(Tu,GEo),e(G,OEo),e(G,Mu),e(Mu,dde),e(dde,VEo),e(Mu,XEo),e(Mu,rj),e(rj,zEo),e(Mu,WEo),e(G,QEo),e(G,Eu),e(Eu,cde),e(cde,HEo),e(Eu,UEo),e(Eu,tj),e(tj,JEo),e(Eu,YEo),e(G,KEo),e(G,Cu),e(Cu,fde),e(fde,ZEo),e(Cu,eCo),e(Cu,aj),e(aj,oCo),e(Cu,rCo),e(G,tCo),e(G,wu),e(wu,mde),e(mde,aCo),e(wu,nCo),e(wu,nj),e(nj,sCo),e(wu,lCo),e(G,iCo),e(G,Au),e(Au,gde),e(gde,dCo),e(Au,cCo),e(Au,sj),e(sj,fCo),e(Au,mCo),e(G,gCo),e(G,yu),e(yu,hde),e(hde,hCo),e(yu,pCo),e(yu,lj),e(lj,_Co),e(yu,uCo),e(G,bCo),e(G,Lu),e(Lu,pde),e(pde,vCo),e(Lu,FCo),e(Lu,ij),e(ij,TCo),e(Lu,MCo),e(G,ECo),e(G,xu),e(xu,_de),e(_de,CCo),e(xu,wCo),e(xu,dj),e(dj,ACo),e(xu,yCo),e(G,LCo),e(G,$u),e($u,ude),e(ude,xCo),e($u,$Co),e($u,cj),e(cj,kCo),e($u,SCo),e(G,RCo),e(G,ku),e(ku,bde),e(bde,PCo),e(ku,BCo),e(ku,fj),e(fj,ICo),e(ku,NCo),e(G,qCo),e(G,Su),e(Su,vde),e(vde,jCo),e(Su,DCo),e(Su,mj),e(mj,GCo),e(Su,OCo),e(G,VCo),e(G,Ru),e(Ru,Fde),e(Fde,XCo),e(Ru,zCo),e(Ru,gj),e(gj,WCo),e(Ru,QCo),e(G,HCo),e(G,Pu),e(Pu,Tde),e(Tde,UCo),e(Pu,JCo),e(Pu,hj),e(hj,YCo),e(Pu,KCo),e(G,ZCo),e(G,Bu),e(Bu,Mde),e(Mde,e5o),e(Bu,o5o),e(Bu,pj),e(pj,r5o),e(Bu,t5o),e(G,a5o),e(G,Iu),e(Iu,Ede),e(Ede,n5o),e(Iu,s5o),e(Iu,_j),e(_j,l5o),e(Iu,i5o),e(G,d5o),e(G,Nu),e(Nu,Cde),e(Cde,c5o),e(Nu,f5o),e(Nu,uj),e(uj,m5o),e(Nu,g5o),e(G,h5o),e(G,qu),e(qu,wde),e(wde,p5o),e(qu,_5o),e(qu,bj),e(bj,u5o),e(qu,b5o),e(G,v5o),e(G,ju),e(ju,Ade),e(Ade,F5o),e(ju,T5o),e(ju,vj),e(vj,M5o),e(ju,E5o),e(G,C5o),e(G,Du),e(Du,yde),e(yde,w5o),e(Du,A5o),e(Du,Fj),e(Fj,y5o),e(Du,L5o),e(G,x5o),e(G,Gu),e(Gu,Lde),e(Lde,$5o),e(Gu,k5o),e(Gu,Tj),e(Tj,S5o),e(Gu,R5o),e(G,P5o),e(G,Ou),e(Ou,xde),e(xde,B5o),e(Ou,I5o),e(Ou,Mj),e(Mj,N5o),e(Ou,q5o),e(G,j5o),e(G,Vu),e(Vu,$de),e($de,D5o),e(Vu,G5o),e(Vu,Ej),e(Ej,O5o),e(Vu,V5o),e(G,X5o),e(G,Xu),e(Xu,kde),e(kde,z5o),e(Xu,W5o),e(Xu,Cj),e(Cj,Q5o),e(Xu,H5o),e(G,U5o),e(G,zu),e(zu,Sde),e(Sde,J5o),e(zu,Y5o),e(zu,wj),e(wj,K5o),e(zu,Z5o),e(G,e3o),e(G,Wu),e(Wu,Rde),e(Rde,o3o),e(Wu,r3o),e(Wu,Aj),e(Aj,t3o),e(Wu,a3o),e(G,n3o),e(G,Qu),e(Qu,Pde),e(Pde,s3o),e(Qu,l3o),e(Qu,yj),e(yj,i3o),e(Qu,d3o),e(G,c3o),e(G,Hu),e(Hu,Bde),e(Bde,f3o),e(Hu,m3o),e(Hu,Lj),e(Lj,g3o),e(Hu,h3o),e(G,p3o),e(G,Uu),e(Uu,Ide),e(Ide,_3o),e(Uu,u3o),e(Uu,xj),e(xj,b3o),e(Uu,v3o),e(G,F3o),e(G,Ju),e(Ju,Nde),e(Nde,T3o),e(Ju,M3o),e(Ju,$j),e($j,E3o),e(Ju,C3o),e(Ye,w3o),e(Ye,Yu),e(Yu,A3o),e(Yu,qde),e(qde,y3o),e(Yu,L3o),e(Yu,jde),e(jde,x3o),e(Ye,$3o),M(Ku,Ye,null),b(f,Yqe,u),b(f,ki,u),e(ki,Zu),e(Zu,Dde),M(by,Dde,null),e(ki,k3o),e(ki,Gde),e(Gde,S3o),b(f,Kqe,u),b(f,$o,u),M(vy,$o,null),e($o,R3o),e($o,Si),e(Si,P3o),e(Si,kj),e(kj,B3o),e(Si,I3o),e(Si,Sj),e(Sj,N3o),e(Si,q3o),e($o,j3o),e($o,Fy),e(Fy,D3o),e(Fy,Ode),e(Ode,G3o),e(Fy,O3o),e($o,V3o),e($o,nt),M(Ty,nt,null),e(nt,X3o),e(nt,Vde),e(Vde,z3o),e(nt,W3o),e(nt,Ri),e(Ri,Q3o),e(Ri,Xde),e(Xde,H3o),e(Ri,U3o),e(Ri,Rj),e(Rj,J3o),e(Ri,Y3o),e(nt,K3o),M(e4,nt,null),e($o,Z3o),e($o,Ke),M(My,Ke,null),e(Ke,e0o),e(Ke,zde),e(zde,o0o),e(Ke,r0o),e(Ke,$a),e($a,t0o),e($a,Wde),e(Wde,a0o),e($a,n0o),e($a,Qde),e(Qde,s0o),e($a,l0o),e($a,Hde),e(Hde,i0o),e($a,d0o),e(Ke,c0o),e(Ke,z),e(z,o4),e(o4,Ude),e(Ude,f0o),e(o4,m0o),e(o4,Pj),e(Pj,g0o),e(o4,h0o),e(z,p0o),e(z,r4),e(r4,Jde),e(Jde,_0o),e(r4,u0o),e(r4,Bj),e(Bj,b0o),e(r4,v0o),e(z,F0o),e(z,t4),e(t4,Yde),e(Yde,T0o),e(t4,M0o),e(t4,Ij),e(Ij,E0o),e(t4,C0o),e(z,w0o),e(z,a4),e(a4,Kde),e(Kde,A0o),e(a4,y0o),e(a4,Nj),e(Nj,L0o),e(a4,x0o),e(z,$0o),e(z,n4),e(n4,Zde),e(Zde,k0o),e(n4,S0o),e(n4,qj),e(qj,R0o),e(n4,P0o),e(z,B0o),e(z,s4),e(s4,ece),e(ece,I0o),e(s4,N0o),e(s4,jj),e(jj,q0o),e(s4,j0o),e(z,D0o),e(z,l4),e(l4,oce),e(oce,G0o),e(l4,O0o),e(l4,Dj),e(Dj,V0o),e(l4,X0o),e(z,z0o),e(z,i4),e(i4,rce),e(rce,W0o),e(i4,Q0o),e(i4,Gj),e(Gj,H0o),e(i4,U0o),e(z,J0o),e(z,d4),e(d4,tce),e(tce,Y0o),e(d4,K0o),e(d4,Oj),e(Oj,Z0o),e(d4,ewo),e(z,owo),e(z,c4),e(c4,ace),e(ace,rwo),e(c4,two),e(c4,Vj),e(Vj,awo),e(c4,nwo),e(z,swo),e(z,f4),e(f4,nce),e(nce,lwo),e(f4,iwo),e(f4,Xj),e(Xj,dwo),e(f4,cwo),e(z,fwo),e(z,m4),e(m4,sce),e(sce,mwo),e(m4,gwo),e(m4,zj),e(zj,hwo),e(m4,pwo),e(z,_wo),e(z,g4),e(g4,lce),e(lce,uwo),e(g4,bwo),e(g4,Wj),e(Wj,vwo),e(g4,Fwo),e(z,Two),e(z,h4),e(h4,ice),e(ice,Mwo),e(h4,Ewo),e(h4,Qj),e(Qj,Cwo),e(h4,wwo),e(z,Awo),e(z,p4),e(p4,dce),e(dce,ywo),e(p4,Lwo),e(p4,Hj),e(Hj,xwo),e(p4,$wo),e(z,kwo),e(z,_4),e(_4,cce),e(cce,Swo),e(_4,Rwo),e(_4,Uj),e(Uj,Pwo),e(_4,Bwo),e(z,Iwo),e(z,u4),e(u4,fce),e(fce,Nwo),e(u4,qwo),e(u4,Jj),e(Jj,jwo),e(u4,Dwo),e(z,Gwo),e(z,b4),e(b4,mce),e(mce,Owo),e(b4,Vwo),e(b4,Yj),e(Yj,Xwo),e(b4,zwo),e(z,Wwo),e(z,v4),e(v4,gce),e(gce,Qwo),e(v4,Hwo),e(v4,Kj),e(Kj,Uwo),e(v4,Jwo),e(z,Ywo),e(z,F4),e(F4,hce),e(hce,Kwo),e(F4,Zwo),e(F4,Zj),e(Zj,e6o),e(F4,o6o),e(z,r6o),e(z,T4),e(T4,pce),e(pce,t6o),e(T4,a6o),e(T4,eD),e(eD,n6o),e(T4,s6o),e(z,l6o),e(z,M4),e(M4,_ce),e(_ce,i6o),e(M4,d6o),e(M4,oD),e(oD,c6o),e(M4,f6o),e(z,m6o),e(z,E4),e(E4,uce),e(uce,g6o),e(E4,h6o),e(E4,rD),e(rD,p6o),e(E4,_6o),e(z,u6o),e(z,C4),e(C4,bce),e(bce,b6o),e(C4,v6o),e(C4,tD),e(tD,F6o),e(C4,T6o),e(z,M6o),e(z,w4),e(w4,vce),e(vce,E6o),e(w4,C6o),e(w4,aD),e(aD,w6o),e(w4,A6o),e(z,y6o),e(z,A4),e(A4,Fce),e(Fce,L6o),e(A4,x6o),e(A4,nD),e(nD,$6o),e(A4,k6o),e(z,S6o),e(z,y4),e(y4,Tce),e(Tce,R6o),e(y4,P6o),e(y4,sD),e(sD,B6o),e(y4,I6o),e(z,N6o),e(z,L4),e(L4,Mce),e(Mce,q6o),e(L4,j6o),e(L4,lD),e(lD,D6o),e(L4,G6o),e(z,O6o),e(z,x4),e(x4,Ece),e(Ece,V6o),e(x4,X6o),e(x4,iD),e(iD,z6o),e(x4,W6o),e(z,Q6o),e(z,$4),e($4,Cce),e(Cce,H6o),e($4,U6o),e($4,dD),e(dD,J6o),e($4,Y6o),e(z,K6o),e(z,k4),e(k4,wce),e(wce,Z6o),e(k4,eAo),e(k4,cD),e(cD,oAo),e(k4,rAo),e(z,tAo),e(z,S4),e(S4,Ace),e(Ace,aAo),e(S4,nAo),e(S4,fD),e(fD,sAo),e(S4,lAo),e(z,iAo),e(z,R4),e(R4,yce),e(yce,dAo),e(R4,cAo),e(R4,mD),e(mD,fAo),e(R4,mAo),e(z,gAo),e(z,P4),e(P4,Lce),e(Lce,hAo),e(P4,pAo),e(P4,gD),e(gD,_Ao),e(P4,uAo),e(z,bAo),e(z,B4),e(B4,xce),e(xce,vAo),e(B4,FAo),e(B4,hD),e(hD,TAo),e(B4,MAo),e(z,EAo),e(z,I4),e(I4,$ce),e($ce,CAo),e(I4,wAo),e(I4,pD),e(pD,AAo),e(I4,yAo),e(z,LAo),e(z,N4),e(N4,kce),e(kce,xAo),e(N4,$Ao),e(N4,_D),e(_D,kAo),e(N4,SAo),e(z,RAo),e(z,q4),e(q4,Sce),e(Sce,PAo),e(q4,BAo),e(q4,uD),e(uD,IAo),e(q4,NAo),e(Ke,qAo),e(Ke,j4),e(j4,jAo),e(j4,Rce),e(Rce,DAo),e(j4,GAo),e(j4,Pce),e(Pce,OAo),e(Ke,VAo),M(D4,Ke,null),b(f,Zqe,u),b(f,Pi,u),e(Pi,G4),e(G4,Bce),M(Ey,Bce,null),e(Pi,XAo),e(Pi,Ice),e(Ice,zAo),b(f,eje,u),b(f,ko,u),M(Cy,ko,null),e(ko,WAo),e(ko,Bi),e(Bi,QAo),e(Bi,bD),e(bD,HAo),e(Bi,UAo),e(Bi,vD),e(vD,JAo),e(Bi,YAo),e(ko,KAo),e(ko,wy),e(wy,ZAo),e(wy,Nce),e(Nce,eyo),e(wy,oyo),e(ko,ryo),e(ko,st),M(Ay,st,null),e(st,tyo),e(st,qce),e(qce,ayo),e(st,nyo),e(st,Ii),e(Ii,syo),e(Ii,jce),e(jce,lyo),e(Ii,iyo),e(Ii,FD),e(FD,dyo),e(Ii,cyo),e(st,fyo),M(O4,st,null),e(ko,myo),e(ko,Ze),M(yy,Ze,null),e(Ze,gyo),e(Ze,Dce),e(Dce,hyo),e(Ze,pyo),e(Ze,ka),e(ka,_yo),e(ka,Gce),e(Gce,uyo),e(ka,byo),e(ka,Oce),e(Oce,vyo),e(ka,Fyo),e(ka,Vce),e(Vce,Tyo),e(ka,Myo),e(Ze,Eyo),e(Ze,Q),e(Q,V4),e(V4,Xce),e(Xce,Cyo),e(V4,wyo),e(V4,TD),e(TD,Ayo),e(V4,yyo),e(Q,Lyo),e(Q,X4),e(X4,zce),e(zce,xyo),e(X4,$yo),e(X4,MD),e(MD,kyo),e(X4,Syo),e(Q,Ryo),e(Q,z4),e(z4,Wce),e(Wce,Pyo),e(z4,Byo),e(z4,ED),e(ED,Iyo),e(z4,Nyo),e(Q,qyo),e(Q,W4),e(W4,Qce),e(Qce,jyo),e(W4,Dyo),e(W4,CD),e(CD,Gyo),e(W4,Oyo),e(Q,Vyo),e(Q,Q4),e(Q4,Hce),e(Hce,Xyo),e(Q4,zyo),e(Q4,wD),e(wD,Wyo),e(Q4,Qyo),e(Q,Hyo),e(Q,H4),e(H4,Uce),e(Uce,Uyo),e(H4,Jyo),e(H4,AD),e(AD,Yyo),e(H4,Kyo),e(Q,Zyo),e(Q,U4),e(U4,Jce),e(Jce,eLo),e(U4,oLo),e(U4,yD),e(yD,rLo),e(U4,tLo),e(Q,aLo),e(Q,J4),e(J4,Yce),e(Yce,nLo),e(J4,sLo),e(J4,LD),e(LD,lLo),e(J4,iLo),e(Q,dLo),e(Q,Y4),e(Y4,Kce),e(Kce,cLo),e(Y4,fLo),e(Y4,xD),e(xD,mLo),e(Y4,gLo),e(Q,hLo),e(Q,K4),e(K4,Zce),e(Zce,pLo),e(K4,_Lo),e(K4,$D),e($D,uLo),e(K4,bLo),e(Q,vLo),e(Q,Z4),e(Z4,efe),e(efe,FLo),e(Z4,TLo),e(Z4,kD),e(kD,MLo),e(Z4,ELo),e(Q,CLo),e(Q,e1),e(e1,ofe),e(ofe,wLo),e(e1,ALo),e(e1,SD),e(SD,yLo),e(e1,LLo),e(Q,xLo),e(Q,o1),e(o1,rfe),e(rfe,$Lo),e(o1,kLo),e(o1,RD),e(RD,SLo),e(o1,RLo),e(Q,PLo),e(Q,r1),e(r1,tfe),e(tfe,BLo),e(r1,ILo),e(r1,PD),e(PD,NLo),e(r1,qLo),e(Q,jLo),e(Q,t1),e(t1,afe),e(afe,DLo),e(t1,GLo),e(t1,BD),e(BD,OLo),e(t1,VLo),e(Q,XLo),e(Q,a1),e(a1,nfe),e(nfe,zLo),e(a1,WLo),e(a1,ID),e(ID,QLo),e(a1,HLo),e(Q,ULo),e(Q,n1),e(n1,sfe),e(sfe,JLo),e(n1,YLo),e(n1,ND),e(ND,KLo),e(n1,ZLo),e(Q,e8o),e(Q,s1),e(s1,lfe),e(lfe,o8o),e(s1,r8o),e(s1,qD),e(qD,t8o),e(s1,a8o),e(Q,n8o),e(Q,l1),e(l1,ife),e(ife,s8o),e(l1,l8o),e(l1,jD),e(jD,i8o),e(l1,d8o),e(Q,c8o),e(Q,i1),e(i1,dfe),e(dfe,f8o),e(i1,m8o),e(i1,DD),e(DD,g8o),e(i1,h8o),e(Q,p8o),e(Q,d1),e(d1,cfe),e(cfe,_8o),e(d1,u8o),e(d1,GD),e(GD,b8o),e(d1,v8o),e(Q,F8o),e(Q,c1),e(c1,ffe),e(ffe,T8o),e(c1,M8o),e(c1,OD),e(OD,E8o),e(c1,C8o),e(Q,w8o),e(Q,f1),e(f1,mfe),e(mfe,A8o),e(f1,y8o),e(f1,VD),e(VD,L8o),e(f1,x8o),e(Q,$8o),e(Q,m1),e(m1,gfe),e(gfe,k8o),e(m1,S8o),e(m1,XD),e(XD,R8o),e(m1,P8o),e(Q,B8o),e(Q,g1),e(g1,hfe),e(hfe,I8o),e(g1,N8o),e(g1,zD),e(zD,q8o),e(g1,j8o),e(Q,D8o),e(Q,h1),e(h1,pfe),e(pfe,G8o),e(h1,O8o),e(h1,WD),e(WD,V8o),e(h1,X8o),e(Q,z8o),e(Q,p1),e(p1,_fe),e(_fe,W8o),e(p1,Q8o),e(p1,QD),e(QD,H8o),e(p1,U8o),e(Q,J8o),e(Q,_1),e(_1,ufe),e(ufe,Y8o),e(_1,K8o),e(_1,HD),e(HD,Z8o),e(_1,e9o),e(Q,o9o),e(Q,u1),e(u1,bfe),e(bfe,r9o),e(u1,t9o),e(u1,UD),e(UD,a9o),e(u1,n9o),e(Q,s9o),e(Q,b1),e(b1,vfe),e(vfe,l9o),e(b1,i9o),e(b1,JD),e(JD,d9o),e(b1,c9o),e(Q,f9o),e(Q,v1),e(v1,Ffe),e(Ffe,m9o),e(v1,g9o),e(v1,Tfe),e(Tfe,h9o),e(v1,p9o),e(Q,_9o),e(Q,F1),e(F1,Mfe),e(Mfe,u9o),e(F1,b9o),e(F1,YD),e(YD,v9o),e(F1,F9o),e(Q,T9o),e(Q,T1),e(T1,Efe),e(Efe,M9o),e(T1,E9o),e(T1,KD),e(KD,C9o),e(T1,w9o),e(Q,A9o),e(Q,M1),e(M1,Cfe),e(Cfe,y9o),e(M1,L9o),e(M1,ZD),e(ZD,x9o),e(M1,$9o),e(Q,k9o),e(Q,E1),e(E1,wfe),e(wfe,S9o),e(E1,R9o),e(E1,eG),e(eG,P9o),e(E1,B9o),e(Ze,I9o),e(Ze,C1),e(C1,N9o),e(C1,Afe),e(Afe,q9o),e(C1,j9o),e(C1,yfe),e(yfe,D9o),e(Ze,G9o),M(w1,Ze,null),b(f,oje,u),b(f,Ni,u),e(Ni,A1),e(A1,Lfe),M(Ly,Lfe,null),e(Ni,O9o),e(Ni,xfe),e(xfe,V9o),b(f,rje,u),b(f,So,u),M(xy,So,null),e(So,X9o),e(So,qi),e(qi,z9o),e(qi,oG),e(oG,W9o),e(qi,Q9o),e(qi,rG),e(rG,H9o),e(qi,U9o),e(So,J9o),e(So,$y),e($y,Y9o),e($y,$fe),e($fe,K9o),e($y,Z9o),e(So,exo),e(So,lt),M(ky,lt,null),e(lt,oxo),e(lt,kfe),e(kfe,rxo),e(lt,txo),e(lt,ji),e(ji,axo),e(ji,Sfe),e(Sfe,nxo),e(ji,sxo),e(ji,tG),e(tG,lxo),e(ji,ixo),e(lt,dxo),M(y1,lt,null),e(So,cxo),e(So,eo),M(Sy,eo,null),e(eo,fxo),e(eo,Rfe),e(Rfe,mxo),e(eo,gxo),e(eo,Sa),e(Sa,hxo),e(Sa,Pfe),e(Pfe,pxo),e(Sa,_xo),e(Sa,Bfe),e(Bfe,uxo),e(Sa,bxo),e(Sa,Ife),e(Ife,vxo),e(Sa,Fxo),e(eo,Txo),e(eo,_e),e(_e,L1),e(L1,Nfe),e(Nfe,Mxo),e(L1,Exo),e(L1,aG),e(aG,Cxo),e(L1,wxo),e(_e,Axo),e(_e,x1),e(x1,qfe),e(qfe,yxo),e(x1,Lxo),e(x1,nG),e(nG,xxo),e(x1,$xo),e(_e,kxo),e(_e,$1),e($1,jfe),e(jfe,Sxo),e($1,Rxo),e($1,sG),e(sG,Pxo),e($1,Bxo),e(_e,Ixo),e(_e,k1),e(k1,Dfe),e(Dfe,Nxo),e(k1,qxo),e(k1,lG),e(lG,jxo),e(k1,Dxo),e(_e,Gxo),e(_e,S1),e(S1,Gfe),e(Gfe,Oxo),e(S1,Vxo),e(S1,iG),e(iG,Xxo),e(S1,zxo),e(_e,Wxo),e(_e,R1),e(R1,Ofe),e(Ofe,Qxo),e(R1,Hxo),e(R1,dG),e(dG,Uxo),e(R1,Jxo),e(_e,Yxo),e(_e,P1),e(P1,Vfe),e(Vfe,Kxo),e(P1,Zxo),e(P1,cG),e(cG,e$o),e(P1,o$o),e(_e,r$o),e(_e,B1),e(B1,Xfe),e(Xfe,t$o),e(B1,a$o),e(B1,fG),e(fG,n$o),e(B1,s$o),e(_e,l$o),e(_e,I1),e(I1,zfe),e(zfe,i$o),e(I1,d$o),e(I1,mG),e(mG,c$o),e(I1,f$o),e(_e,m$o),e(_e,N1),e(N1,Wfe),e(Wfe,g$o),e(N1,h$o),e(N1,gG),e(gG,p$o),e(N1,_$o),e(_e,u$o),e(_e,q1),e(q1,Qfe),e(Qfe,b$o),e(q1,v$o),e(q1,hG),e(hG,F$o),e(q1,T$o),e(_e,M$o),e(_e,j1),e(j1,Hfe),e(Hfe,E$o),e(j1,C$o),e(j1,pG),e(pG,w$o),e(j1,A$o),e(_e,y$o),e(_e,D1),e(D1,Ufe),e(Ufe,L$o),e(D1,x$o),e(D1,_G),e(_G,$$o),e(D1,k$o),e(_e,S$o),e(_e,G1),e(G1,Jfe),e(Jfe,R$o),e(G1,P$o),e(G1,uG),e(uG,B$o),e(G1,I$o),e(_e,N$o),e(_e,O1),e(O1,Yfe),e(Yfe,q$o),e(O1,j$o),e(O1,bG),e(bG,D$o),e(O1,G$o),e(_e,O$o),e(_e,V1),e(V1,Kfe),e(Kfe,V$o),e(V1,X$o),e(V1,vG),e(vG,z$o),e(V1,W$o),e(eo,Q$o),e(eo,X1),e(X1,H$o),e(X1,Zfe),e(Zfe,U$o),e(X1,J$o),e(X1,eme),e(eme,Y$o),e(eo,K$o),M(z1,eo,null),b(f,tje,u),b(f,Di,u),e(Di,W1),e(W1,ome),M(Ry,ome,null),e(Di,Z$o),e(Di,rme),e(rme,eko),b(f,aje,u),b(f,Ro,u),M(Py,Ro,null),e(Ro,oko),e(Ro,Gi),e(Gi,rko),e(Gi,FG),e(FG,tko),e(Gi,ako),e(Gi,TG),e(TG,nko),e(Gi,sko),e(Ro,lko),e(Ro,By),e(By,iko),e(By,tme),e(tme,dko),e(By,cko),e(Ro,fko),e(Ro,it),M(Iy,it,null),e(it,mko),e(it,ame),e(ame,gko),e(it,hko),e(it,Oi),e(Oi,pko),e(Oi,nme),e(nme,_ko),e(Oi,uko),e(Oi,MG),e(MG,bko),e(Oi,vko),e(it,Fko),M(Q1,it,null),e(Ro,Tko),e(Ro,oo),M(Ny,oo,null),e(oo,Mko),e(oo,sme),e(sme,Eko),e(oo,Cko),e(oo,Ra),e(Ra,wko),e(Ra,lme),e(lme,Ako),e(Ra,yko),e(Ra,ime),e(ime,Lko),e(Ra,xko),e(Ra,dme),e(dme,$ko),e(Ra,kko),e(oo,Sko),e(oo,N),e(N,H1),e(H1,cme),e(cme,Rko),e(H1,Pko),e(H1,EG),e(EG,Bko),e(H1,Iko),e(N,Nko),e(N,U1),e(U1,fme),e(fme,qko),e(U1,jko),e(U1,CG),e(CG,Dko),e(U1,Gko),e(N,Oko),e(N,J1),e(J1,mme),e(mme,Vko),e(J1,Xko),e(J1,wG),e(wG,zko),e(J1,Wko),e(N,Qko),e(N,Y1),e(Y1,gme),e(gme,Hko),e(Y1,Uko),e(Y1,AG),e(AG,Jko),e(Y1,Yko),e(N,Kko),e(N,K1),e(K1,hme),e(hme,Zko),e(K1,eSo),e(K1,yG),e(yG,oSo),e(K1,rSo),e(N,tSo),e(N,Z1),e(Z1,pme),e(pme,aSo),e(Z1,nSo),e(Z1,LG),e(LG,sSo),e(Z1,lSo),e(N,iSo),e(N,e7),e(e7,_me),e(_me,dSo),e(e7,cSo),e(e7,xG),e(xG,fSo),e(e7,mSo),e(N,gSo),e(N,o7),e(o7,ume),e(ume,hSo),e(o7,pSo),e(o7,$G),e($G,_So),e(o7,uSo),e(N,bSo),e(N,r7),e(r7,bme),e(bme,vSo),e(r7,FSo),e(r7,kG),e(kG,TSo),e(r7,MSo),e(N,ESo),e(N,t7),e(t7,vme),e(vme,CSo),e(t7,wSo),e(t7,SG),e(SG,ASo),e(t7,ySo),e(N,LSo),e(N,a7),e(a7,Fme),e(Fme,xSo),e(a7,$So),e(a7,RG),e(RG,kSo),e(a7,SSo),e(N,RSo),e(N,n7),e(n7,Tme),e(Tme,PSo),e(n7,BSo),e(n7,PG),e(PG,ISo),e(n7,NSo),e(N,qSo),e(N,s7),e(s7,Mme),e(Mme,jSo),e(s7,DSo),e(s7,BG),e(BG,GSo),e(s7,OSo),e(N,VSo),e(N,l7),e(l7,Eme),e(Eme,XSo),e(l7,zSo),e(l7,IG),e(IG,WSo),e(l7,QSo),e(N,HSo),e(N,i7),e(i7,Cme),e(Cme,USo),e(i7,JSo),e(i7,NG),e(NG,YSo),e(i7,KSo),e(N,ZSo),e(N,d7),e(d7,wme),e(wme,eRo),e(d7,oRo),e(d7,qG),e(qG,rRo),e(d7,tRo),e(N,aRo),e(N,c7),e(c7,Ame),e(Ame,nRo),e(c7,sRo),e(c7,jG),e(jG,lRo),e(c7,iRo),e(N,dRo),e(N,f7),e(f7,yme),e(yme,cRo),e(f7,fRo),e(f7,DG),e(DG,mRo),e(f7,gRo),e(N,hRo),e(N,m7),e(m7,Lme),e(Lme,pRo),e(m7,_Ro),e(m7,GG),e(GG,uRo),e(m7,bRo),e(N,vRo),e(N,g7),e(g7,xme),e(xme,FRo),e(g7,TRo),e(g7,OG),e(OG,MRo),e(g7,ERo),e(N,CRo),e(N,h7),e(h7,$me),e($me,wRo),e(h7,ARo),e(h7,VG),e(VG,yRo),e(h7,LRo),e(N,xRo),e(N,p7),e(p7,kme),e(kme,$Ro),e(p7,kRo),e(p7,XG),e(XG,SRo),e(p7,RRo),e(N,PRo),e(N,_7),e(_7,Sme),e(Sme,BRo),e(_7,IRo),e(_7,zG),e(zG,NRo),e(_7,qRo),e(N,jRo),e(N,u7),e(u7,Rme),e(Rme,DRo),e(u7,GRo),e(u7,WG),e(WG,ORo),e(u7,VRo),e(N,XRo),e(N,b7),e(b7,Pme),e(Pme,zRo),e(b7,WRo),e(b7,QG),e(QG,QRo),e(b7,HRo),e(N,URo),e(N,v7),e(v7,Bme),e(Bme,JRo),e(v7,YRo),e(v7,HG),e(HG,KRo),e(v7,ZRo),e(N,ePo),e(N,F7),e(F7,Ime),e(Ime,oPo),e(F7,rPo),e(F7,UG),e(UG,tPo),e(F7,aPo),e(N,nPo),e(N,T7),e(T7,Nme),e(Nme,sPo),e(T7,lPo),e(T7,JG),e(JG,iPo),e(T7,dPo),e(N,cPo),e(N,M7),e(M7,qme),e(qme,fPo),e(M7,mPo),e(M7,YG),e(YG,gPo),e(M7,hPo),e(N,pPo),e(N,E7),e(E7,jme),e(jme,_Po),e(E7,uPo),e(E7,KG),e(KG,bPo),e(E7,vPo),e(N,FPo),e(N,C7),e(C7,Dme),e(Dme,TPo),e(C7,MPo),e(C7,ZG),e(ZG,EPo),e(C7,CPo),e(N,wPo),e(N,w7),e(w7,Gme),e(Gme,APo),e(w7,yPo),e(w7,eO),e(eO,LPo),e(w7,xPo),e(N,$Po),e(N,A7),e(A7,Ome),e(Ome,kPo),e(A7,SPo),e(A7,oO),e(oO,RPo),e(A7,PPo),e(N,BPo),e(N,y7),e(y7,Vme),e(Vme,IPo),e(y7,NPo),e(y7,rO),e(rO,qPo),e(y7,jPo),e(N,DPo),e(N,L7),e(L7,Xme),e(Xme,GPo),e(L7,OPo),e(L7,tO),e(tO,VPo),e(L7,XPo),e(N,zPo),e(N,x7),e(x7,zme),e(zme,WPo),e(x7,QPo),e(x7,aO),e(aO,HPo),e(x7,UPo),e(N,JPo),e(N,$7),e($7,Wme),e(Wme,YPo),e($7,KPo),e($7,nO),e(nO,ZPo),e($7,eBo),e(N,oBo),e(N,k7),e(k7,Qme),e(Qme,rBo),e(k7,tBo),e(k7,sO),e(sO,aBo),e(k7,nBo),e(N,sBo),e(N,S7),e(S7,Hme),e(Hme,lBo),e(S7,iBo),e(S7,lO),e(lO,dBo),e(S7,cBo),e(N,fBo),e(N,R7),e(R7,Ume),e(Ume,mBo),e(R7,gBo),e(R7,iO),e(iO,hBo),e(R7,pBo),e(N,_Bo),e(N,P7),e(P7,Jme),e(Jme,uBo),e(P7,bBo),e(P7,dO),e(dO,vBo),e(P7,FBo),e(N,TBo),e(N,B7),e(B7,Yme),e(Yme,MBo),e(B7,EBo),e(B7,cO),e(cO,CBo),e(B7,wBo),e(N,ABo),e(N,I7),e(I7,Kme),e(Kme,yBo),e(I7,LBo),e(I7,fO),e(fO,xBo),e(I7,$Bo),e(N,kBo),e(N,N7),e(N7,Zme),e(Zme,SBo),e(N7,RBo),e(N7,mO),e(mO,PBo),e(N7,BBo),e(N,IBo),e(N,q7),e(q7,ege),e(ege,NBo),e(q7,qBo),e(q7,gO),e(gO,jBo),e(q7,DBo),e(N,GBo),e(N,j7),e(j7,oge),e(oge,OBo),e(j7,VBo),e(j7,hO),e(hO,XBo),e(j7,zBo),e(N,WBo),e(N,D7),e(D7,rge),e(rge,QBo),e(D7,HBo),e(D7,pO),e(pO,UBo),e(D7,JBo),e(oo,YBo),e(oo,G7),e(G7,KBo),e(G7,tge),e(tge,ZBo),e(G7,eIo),e(G7,age),e(age,oIo),e(oo,rIo),M(O7,oo,null),b(f,nje,u),b(f,Vi,u),e(Vi,V7),e(V7,nge),M(qy,nge,null),e(Vi,tIo),e(Vi,sge),e(sge,aIo),b(f,sje,u),b(f,Po,u),M(jy,Po,null),e(Po,nIo),e(Po,Xi),e(Xi,sIo),e(Xi,_O),e(_O,lIo),e(Xi,iIo),e(Xi,uO),e(uO,dIo),e(Xi,cIo),e(Po,fIo),e(Po,Dy),e(Dy,mIo),e(Dy,lge),e(lge,gIo),e(Dy,hIo),e(Po,pIo),e(Po,dt),M(Gy,dt,null),e(dt,_Io),e(dt,ige),e(ige,uIo),e(dt,bIo),e(dt,zi),e(zi,vIo),e(zi,dge),e(dge,FIo),e(zi,TIo),e(zi,bO),e(bO,MIo),e(zi,EIo),e(dt,CIo),M(X7,dt,null),e(Po,wIo),e(Po,ro),M(Oy,ro,null),e(ro,AIo),e(ro,cge),e(cge,yIo),e(ro,LIo),e(ro,Pa),e(Pa,xIo),e(Pa,fge),e(fge,$Io),e(Pa,kIo),e(Pa,mge),e(mge,SIo),e(Pa,RIo),e(Pa,gge),e(gge,PIo),e(Pa,BIo),e(ro,IIo),e(ro,K),e(K,z7),e(z7,hge),e(hge,NIo),e(z7,qIo),e(z7,vO),e(vO,jIo),e(z7,DIo),e(K,GIo),e(K,W7),e(W7,pge),e(pge,OIo),e(W7,VIo),e(W7,FO),e(FO,XIo),e(W7,zIo),e(K,WIo),e(K,Q7),e(Q7,_ge),e(_ge,QIo),e(Q7,HIo),e(Q7,TO),e(TO,UIo),e(Q7,JIo),e(K,YIo),e(K,H7),e(H7,uge),e(uge,KIo),e(H7,ZIo),e(H7,MO),e(MO,eNo),e(H7,oNo),e(K,rNo),e(K,U7),e(U7,bge),e(bge,tNo),e(U7,aNo),e(U7,EO),e(EO,nNo),e(U7,sNo),e(K,lNo),e(K,J7),e(J7,vge),e(vge,iNo),e(J7,dNo),e(J7,CO),e(CO,cNo),e(J7,fNo),e(K,mNo),e(K,Y7),e(Y7,Fge),e(Fge,gNo),e(Y7,hNo),e(Y7,wO),e(wO,pNo),e(Y7,_No),e(K,uNo),e(K,K7),e(K7,Tge),e(Tge,bNo),e(K7,vNo),e(K7,AO),e(AO,FNo),e(K7,TNo),e(K,MNo),e(K,Z7),e(Z7,Mge),e(Mge,ENo),e(Z7,CNo),e(Z7,yO),e(yO,wNo),e(Z7,ANo),e(K,yNo),e(K,eb),e(eb,Ege),e(Ege,LNo),e(eb,xNo),e(eb,LO),e(LO,$No),e(eb,kNo),e(K,SNo),e(K,ob),e(ob,Cge),e(Cge,RNo),e(ob,PNo),e(ob,xO),e(xO,BNo),e(ob,INo),e(K,NNo),e(K,rb),e(rb,wge),e(wge,qNo),e(rb,jNo),e(rb,$O),e($O,DNo),e(rb,GNo),e(K,ONo),e(K,tb),e(tb,Age),e(Age,VNo),e(tb,XNo),e(tb,kO),e(kO,zNo),e(tb,WNo),e(K,QNo),e(K,ab),e(ab,yge),e(yge,HNo),e(ab,UNo),e(ab,SO),e(SO,JNo),e(ab,YNo),e(K,KNo),e(K,nb),e(nb,Lge),e(Lge,ZNo),e(nb,eqo),e(nb,RO),e(RO,oqo),e(nb,rqo),e(K,tqo),e(K,sb),e(sb,xge),e(xge,aqo),e(sb,nqo),e(sb,PO),e(PO,sqo),e(sb,lqo),e(K,iqo),e(K,lb),e(lb,$ge),e($ge,dqo),e(lb,cqo),e(lb,BO),e(BO,fqo),e(lb,mqo),e(K,gqo),e(K,ib),e(ib,kge),e(kge,hqo),e(ib,pqo),e(ib,IO),e(IO,_qo),e(ib,uqo),e(K,bqo),e(K,db),e(db,Sge),e(Sge,vqo),e(db,Fqo),e(db,NO),e(NO,Tqo),e(db,Mqo),e(K,Eqo),e(K,cb),e(cb,Rge),e(Rge,Cqo),e(cb,wqo),e(cb,qO),e(qO,Aqo),e(cb,yqo),e(K,Lqo),e(K,fb),e(fb,Pge),e(Pge,xqo),e(fb,$qo),e(fb,jO),e(jO,kqo),e(fb,Sqo),e(K,Rqo),e(K,mb),e(mb,Bge),e(Bge,Pqo),e(mb,Bqo),e(mb,DO),e(DO,Iqo),e(mb,Nqo),e(K,qqo),e(K,gb),e(gb,Ige),e(Ige,jqo),e(gb,Dqo),e(gb,GO),e(GO,Gqo),e(gb,Oqo),e(K,Vqo),e(K,hb),e(hb,Nge),e(Nge,Xqo),e(hb,zqo),e(hb,OO),e(OO,Wqo),e(hb,Qqo),e(K,Hqo),e(K,pb),e(pb,qge),e(qge,Uqo),e(pb,Jqo),e(pb,VO),e(VO,Yqo),e(pb,Kqo),e(K,Zqo),e(K,_b),e(_b,jge),e(jge,ejo),e(_b,ojo),e(_b,XO),e(XO,rjo),e(_b,tjo),e(K,ajo),e(K,ub),e(ub,Dge),e(Dge,njo),e(ub,sjo),e(ub,zO),e(zO,ljo),e(ub,ijo),e(K,djo),e(K,bb),e(bb,Gge),e(Gge,cjo),e(bb,fjo),e(bb,WO),e(WO,mjo),e(bb,gjo),e(K,hjo),e(K,vb),e(vb,Oge),e(Oge,pjo),e(vb,_jo),e(vb,QO),e(QO,ujo),e(vb,bjo),e(ro,vjo),e(ro,Fb),e(Fb,Fjo),e(Fb,Vge),e(Vge,Tjo),e(Fb,Mjo),e(Fb,Xge),e(Xge,Ejo),e(ro,Cjo),M(Tb,ro,null),b(f,lje,u),b(f,Wi,u),e(Wi,Mb),e(Mb,zge),M(Vy,zge,null),e(Wi,wjo),e(Wi,Wge),e(Wge,Ajo),b(f,ije,u),b(f,Bo,u),M(Xy,Bo,null),e(Bo,yjo),e(Bo,Qi),e(Qi,Ljo),e(Qi,HO),e(HO,xjo),e(Qi,$jo),e(Qi,UO),e(UO,kjo),e(Qi,Sjo),e(Bo,Rjo),e(Bo,zy),e(zy,Pjo),e(zy,Qge),e(Qge,Bjo),e(zy,Ijo),e(Bo,Njo),e(Bo,ct),M(Wy,ct,null),e(ct,qjo),e(ct,Hge),e(Hge,jjo),e(ct,Djo),e(ct,Hi),e(Hi,Gjo),e(Hi,Uge),e(Uge,Ojo),e(Hi,Vjo),e(Hi,JO),e(JO,Xjo),e(Hi,zjo),e(ct,Wjo),M(Eb,ct,null),e(Bo,Qjo),e(Bo,to),M(Qy,to,null),e(to,Hjo),e(to,Jge),e(Jge,Ujo),e(to,Jjo),e(to,Ba),e(Ba,Yjo),e(Ba,Yge),e(Yge,Kjo),e(Ba,Zjo),e(Ba,Kge),e(Kge,eDo),e(Ba,oDo),e(Ba,Zge),e(Zge,rDo),e(Ba,tDo),e(to,aDo),e(to,Yr),e(Yr,Cb),e(Cb,ehe),e(ehe,nDo),e(Cb,sDo),e(Cb,YO),e(YO,lDo),e(Cb,iDo),e(Yr,dDo),e(Yr,wb),e(wb,ohe),e(ohe,cDo),e(wb,fDo),e(wb,KO),e(KO,mDo),e(wb,gDo),e(Yr,hDo),e(Yr,Ab),e(Ab,rhe),e(rhe,pDo),e(Ab,_Do),e(Ab,ZO),e(ZO,uDo),e(Ab,bDo),e(Yr,vDo),e(Yr,yb),e(yb,the),e(the,FDo),e(yb,TDo),e(yb,eV),e(eV,MDo),e(yb,EDo),e(Yr,CDo),e(Yr,Lb),e(Lb,ahe),e(ahe,wDo),e(Lb,ADo),e(Lb,oV),e(oV,yDo),e(Lb,LDo),e(to,xDo),e(to,xb),e(xb,$Do),e(xb,nhe),e(nhe,kDo),e(xb,SDo),e(xb,she),e(she,RDo),e(to,PDo),M($b,to,null),b(f,dje,u),b(f,Ui,u),e(Ui,kb),e(kb,lhe),M(Hy,lhe,null),e(Ui,BDo),e(Ui,ihe),e(ihe,IDo),b(f,cje,u),b(f,Io,u),M(Uy,Io,null),e(Io,NDo),e(Io,Ji),e(Ji,qDo),e(Ji,rV),e(rV,jDo),e(Ji,DDo),e(Ji,tV),e(tV,GDo),e(Ji,ODo),e(Io,VDo),e(Io,Jy),e(Jy,XDo),e(Jy,dhe),e(dhe,zDo),e(Jy,WDo),e(Io,QDo),e(Io,ft),M(Yy,ft,null),e(ft,HDo),e(ft,che),e(che,UDo),e(ft,JDo),e(ft,Yi),e(Yi,YDo),e(Yi,fhe),e(fhe,KDo),e(Yi,ZDo),e(Yi,aV),e(aV,eGo),e(Yi,oGo),e(ft,rGo),M(Sb,ft,null),e(Io,tGo),e(Io,ao),M(Ky,ao,null),e(ao,aGo),e(ao,mhe),e(mhe,nGo),e(ao,sGo),e(ao,Ia),e(Ia,lGo),e(Ia,ghe),e(ghe,iGo),e(Ia,dGo),e(Ia,hhe),e(hhe,cGo),e(Ia,fGo),e(Ia,phe),e(phe,mGo),e(Ia,gGo),e(ao,hGo),e(ao,H),e(H,Rb),e(Rb,_he),e(_he,pGo),e(Rb,_Go),e(Rb,nV),e(nV,uGo),e(Rb,bGo),e(H,vGo),e(H,Pb),e(Pb,uhe),e(uhe,FGo),e(Pb,TGo),e(Pb,sV),e(sV,MGo),e(Pb,EGo),e(H,CGo),e(H,Bb),e(Bb,bhe),e(bhe,wGo),e(Bb,AGo),e(Bb,lV),e(lV,yGo),e(Bb,LGo),e(H,xGo),e(H,Ib),e(Ib,vhe),e(vhe,$Go),e(Ib,kGo),e(Ib,iV),e(iV,SGo),e(Ib,RGo),e(H,PGo),e(H,Nb),e(Nb,Fhe),e(Fhe,BGo),e(Nb,IGo),e(Nb,dV),e(dV,NGo),e(Nb,qGo),e(H,jGo),e(H,qb),e(qb,The),e(The,DGo),e(qb,GGo),e(qb,cV),e(cV,OGo),e(qb,VGo),e(H,XGo),e(H,jb),e(jb,Mhe),e(Mhe,zGo),e(jb,WGo),e(jb,fV),e(fV,QGo),e(jb,HGo),e(H,UGo),e(H,Db),e(Db,Ehe),e(Ehe,JGo),e(Db,YGo),e(Db,mV),e(mV,KGo),e(Db,ZGo),e(H,eOo),e(H,Gb),e(Gb,Che),e(Che,oOo),e(Gb,rOo),e(Gb,gV),e(gV,tOo),e(Gb,aOo),e(H,nOo),e(H,Ob),e(Ob,whe),e(whe,sOo),e(Ob,lOo),e(Ob,hV),e(hV,iOo),e(Ob,dOo),e(H,cOo),e(H,Vb),e(Vb,Ahe),e(Ahe,fOo),e(Vb,mOo),e(Vb,pV),e(pV,gOo),e(Vb,hOo),e(H,pOo),e(H,Xb),e(Xb,yhe),e(yhe,_Oo),e(Xb,uOo),e(Xb,_V),e(_V,bOo),e(Xb,vOo),e(H,FOo),e(H,zb),e(zb,Lhe),e(Lhe,TOo),e(zb,MOo),e(zb,uV),e(uV,EOo),e(zb,COo),e(H,wOo),e(H,Wb),e(Wb,xhe),e(xhe,AOo),e(Wb,yOo),e(Wb,bV),e(bV,LOo),e(Wb,xOo),e(H,$Oo),e(H,Qb),e(Qb,$he),e($he,kOo),e(Qb,SOo),e(Qb,vV),e(vV,ROo),e(Qb,POo),e(H,BOo),e(H,Hb),e(Hb,khe),e(khe,IOo),e(Hb,NOo),e(Hb,FV),e(FV,qOo),e(Hb,jOo),e(H,DOo),e(H,Ub),e(Ub,She),e(She,GOo),e(Ub,OOo),e(Ub,TV),e(TV,VOo),e(Ub,XOo),e(H,zOo),e(H,Jb),e(Jb,Rhe),e(Rhe,WOo),e(Jb,QOo),e(Jb,MV),e(MV,HOo),e(Jb,UOo),e(H,JOo),e(H,Yb),e(Yb,Phe),e(Phe,YOo),e(Yb,KOo),e(Yb,EV),e(EV,ZOo),e(Yb,eVo),e(H,oVo),e(H,Kb),e(Kb,Bhe),e(Bhe,rVo),e(Kb,tVo),e(Kb,CV),e(CV,aVo),e(Kb,nVo),e(H,sVo),e(H,Zb),e(Zb,Ihe),e(Ihe,lVo),e(Zb,iVo),e(Zb,wV),e(wV,dVo),e(Zb,cVo),e(H,fVo),e(H,e2),e(e2,Nhe),e(Nhe,mVo),e(e2,gVo),e(e2,AV),e(AV,hVo),e(e2,pVo),e(H,_Vo),e(H,o2),e(o2,qhe),e(qhe,uVo),e(o2,bVo),e(o2,yV),e(yV,vVo),e(o2,FVo),e(H,TVo),e(H,r2),e(r2,jhe),e(jhe,MVo),e(r2,EVo),e(r2,LV),e(LV,CVo),e(r2,wVo),e(H,AVo),e(H,t2),e(t2,Dhe),e(Dhe,yVo),e(t2,LVo),e(t2,xV),e(xV,xVo),e(t2,$Vo),e(H,kVo),e(H,a2),e(a2,Ghe),e(Ghe,SVo),e(a2,RVo),e(a2,$V),e($V,PVo),e(a2,BVo),e(H,IVo),e(H,n2),e(n2,Ohe),e(Ohe,NVo),e(n2,qVo),e(n2,kV),e(kV,jVo),e(n2,DVo),e(H,GVo),e(H,s2),e(s2,Vhe),e(Vhe,OVo),e(s2,VVo),e(s2,SV),e(SV,XVo),e(s2,zVo),e(H,WVo),e(H,l2),e(l2,Xhe),e(Xhe,QVo),e(l2,HVo),e(l2,RV),e(RV,UVo),e(l2,JVo),e(H,YVo),e(H,i2),e(i2,zhe),e(zhe,KVo),e(i2,ZVo),e(i2,PV),e(PV,eXo),e(i2,oXo),e(H,rXo),e(H,d2),e(d2,Whe),e(Whe,tXo),e(d2,aXo),e(d2,BV),e(BV,nXo),e(d2,sXo),e(H,lXo),e(H,c2),e(c2,Qhe),e(Qhe,iXo),e(c2,dXo),e(c2,IV),e(IV,cXo),e(c2,fXo),e(H,mXo),e(H,f2),e(f2,Hhe),e(Hhe,gXo),e(f2,hXo),e(f2,NV),e(NV,pXo),e(f2,_Xo),e(H,uXo),e(H,m2),e(m2,Uhe),e(Uhe,bXo),e(m2,vXo),e(m2,qV),e(qV,FXo),e(m2,TXo),e(ao,MXo),e(ao,g2),e(g2,EXo),e(g2,Jhe),e(Jhe,CXo),e(g2,wXo),e(g2,Yhe),e(Yhe,AXo),e(ao,yXo),M(h2,ao,null),b(f,fje,u),b(f,Ki,u),e(Ki,p2),e(p2,Khe),M(Zy,Khe,null),e(Ki,LXo),e(Ki,Zhe),e(Zhe,xXo),b(f,mje,u),b(f,No,u),M(eL,No,null),e(No,$Xo),e(No,Zi),e(Zi,kXo),e(Zi,jV),e(jV,SXo),e(Zi,RXo),e(Zi,DV),e(DV,PXo),e(Zi,BXo),e(No,IXo),e(No,oL),e(oL,NXo),e(oL,epe),e(epe,qXo),e(oL,jXo),e(No,DXo),e(No,mt),M(rL,mt,null),e(mt,GXo),e(mt,ope),e(ope,OXo),e(mt,VXo),e(mt,ed),e(ed,XXo),e(ed,rpe),e(rpe,zXo),e(ed,WXo),e(ed,GV),e(GV,QXo),e(ed,HXo),e(mt,UXo),M(_2,mt,null),e(No,JXo),e(No,no),M(tL,no,null),e(no,YXo),e(no,tpe),e(tpe,KXo),e(no,ZXo),e(no,Na),e(Na,ezo),e(Na,ape),e(ape,ozo),e(Na,rzo),e(Na,npe),e(npe,tzo),e(Na,azo),e(Na,spe),e(spe,nzo),e(Na,szo),e(no,lzo),e(no,V),e(V,u2),e(u2,lpe),e(lpe,izo),e(u2,dzo),e(u2,OV),e(OV,czo),e(u2,fzo),e(V,mzo),e(V,b2),e(b2,ipe),e(ipe,gzo),e(b2,hzo),e(b2,VV),e(VV,pzo),e(b2,_zo),e(V,uzo),e(V,v2),e(v2,dpe),e(dpe,bzo),e(v2,vzo),e(v2,XV),e(XV,Fzo),e(v2,Tzo),e(V,Mzo),e(V,F2),e(F2,cpe),e(cpe,Ezo),e(F2,Czo),e(F2,zV),e(zV,wzo),e(F2,Azo),e(V,yzo),e(V,T2),e(T2,fpe),e(fpe,Lzo),e(T2,xzo),e(T2,WV),e(WV,$zo),e(T2,kzo),e(V,Szo),e(V,M2),e(M2,mpe),e(mpe,Rzo),e(M2,Pzo),e(M2,QV),e(QV,Bzo),e(M2,Izo),e(V,Nzo),e(V,E2),e(E2,gpe),e(gpe,qzo),e(E2,jzo),e(E2,HV),e(HV,Dzo),e(E2,Gzo),e(V,Ozo),e(V,C2),e(C2,hpe),e(hpe,Vzo),e(C2,Xzo),e(C2,UV),e(UV,zzo),e(C2,Wzo),e(V,Qzo),e(V,w2),e(w2,ppe),e(ppe,Hzo),e(w2,Uzo),e(w2,JV),e(JV,Jzo),e(w2,Yzo),e(V,Kzo),e(V,A2),e(A2,_pe),e(_pe,Zzo),e(A2,eWo),e(A2,YV),e(YV,oWo),e(A2,rWo),e(V,tWo),e(V,y2),e(y2,upe),e(upe,aWo),e(y2,nWo),e(y2,KV),e(KV,sWo),e(y2,lWo),e(V,iWo),e(V,L2),e(L2,bpe),e(bpe,dWo),e(L2,cWo),e(L2,ZV),e(ZV,fWo),e(L2,mWo),e(V,gWo),e(V,x2),e(x2,vpe),e(vpe,hWo),e(x2,pWo),e(x2,eX),e(eX,_Wo),e(x2,uWo),e(V,bWo),e(V,$2),e($2,Fpe),e(Fpe,vWo),e($2,FWo),e($2,oX),e(oX,TWo),e($2,MWo),e(V,EWo),e(V,k2),e(k2,Tpe),e(Tpe,CWo),e(k2,wWo),e(k2,rX),e(rX,AWo),e(k2,yWo),e(V,LWo),e(V,S2),e(S2,Mpe),e(Mpe,xWo),e(S2,$Wo),e(S2,tX),e(tX,kWo),e(S2,SWo),e(V,RWo),e(V,R2),e(R2,Epe),e(Epe,PWo),e(R2,BWo),e(R2,aX),e(aX,IWo),e(R2,NWo),e(V,qWo),e(V,P2),e(P2,Cpe),e(Cpe,jWo),e(P2,DWo),e(P2,nX),e(nX,GWo),e(P2,OWo),e(V,VWo),e(V,B2),e(B2,wpe),e(wpe,XWo),e(B2,zWo),e(B2,sX),e(sX,WWo),e(B2,QWo),e(V,HWo),e(V,I2),e(I2,Ape),e(Ape,UWo),e(I2,JWo),e(I2,lX),e(lX,YWo),e(I2,KWo),e(V,ZWo),e(V,N2),e(N2,ype),e(ype,eQo),e(N2,oQo),e(N2,iX),e(iX,rQo),e(N2,tQo),e(V,aQo),e(V,q2),e(q2,Lpe),e(Lpe,nQo),e(q2,sQo),e(q2,dX),e(dX,lQo),e(q2,iQo),e(V,dQo),e(V,j2),e(j2,xpe),e(xpe,cQo),e(j2,fQo),e(j2,cX),e(cX,mQo),e(j2,gQo),e(V,hQo),e(V,D2),e(D2,$pe),e($pe,pQo),e(D2,_Qo),e(D2,fX),e(fX,uQo),e(D2,bQo),e(V,vQo),e(V,G2),e(G2,kpe),e(kpe,FQo),e(G2,TQo),e(G2,mX),e(mX,MQo),e(G2,EQo),e(V,CQo),e(V,O2),e(O2,Spe),e(Spe,wQo),e(O2,AQo),e(O2,gX),e(gX,yQo),e(O2,LQo),e(V,xQo),e(V,V2),e(V2,Rpe),e(Rpe,$Qo),e(V2,kQo),e(V2,hX),e(hX,SQo),e(V2,RQo),e(V,PQo),e(V,X2),e(X2,Ppe),e(Ppe,BQo),e(X2,IQo),e(X2,pX),e(pX,NQo),e(X2,qQo),e(V,jQo),e(V,z2),e(z2,Bpe),e(Bpe,DQo),e(z2,GQo),e(z2,_X),e(_X,OQo),e(z2,VQo),e(V,XQo),e(V,W2),e(W2,Ipe),e(Ipe,zQo),e(W2,WQo),e(W2,uX),e(uX,QQo),e(W2,HQo),e(V,UQo),e(V,Q2),e(Q2,Npe),e(Npe,JQo),e(Q2,YQo),e(Q2,bX),e(bX,KQo),e(Q2,ZQo),e(V,eHo),e(V,H2),e(H2,qpe),e(qpe,oHo),e(H2,rHo),e(H2,vX),e(vX,tHo),e(H2,aHo),e(V,nHo),e(V,U2),e(U2,jpe),e(jpe,sHo),e(U2,lHo),e(U2,FX),e(FX,iHo),e(U2,dHo),e(V,cHo),e(V,J2),e(J2,Dpe),e(Dpe,fHo),e(J2,mHo),e(J2,TX),e(TX,gHo),e(J2,hHo),e(V,pHo),e(V,Y2),e(Y2,Gpe),e(Gpe,_Ho),e(Y2,uHo),e(Y2,MX),e(MX,bHo),e(Y2,vHo),e(V,FHo),e(V,K2),e(K2,Ope),e(Ope,THo),e(K2,MHo),e(K2,EX),e(EX,EHo),e(K2,CHo),e(V,wHo),e(V,Z2),e(Z2,Vpe),e(Vpe,AHo),e(Z2,yHo),e(Z2,CX),e(CX,LHo),e(Z2,xHo),e(V,$Ho),e(V,ev),e(ev,Xpe),e(Xpe,kHo),e(ev,SHo),e(ev,wX),e(wX,RHo),e(ev,PHo),e(V,BHo),e(V,ov),e(ov,zpe),e(zpe,IHo),e(ov,NHo),e(ov,AX),e(AX,qHo),e(ov,jHo),e(V,DHo),e(V,rv),e(rv,Wpe),e(Wpe,GHo),e(rv,OHo),e(rv,yX),e(yX,VHo),e(rv,XHo),e(no,zHo),e(no,tv),e(tv,WHo),e(tv,Qpe),e(Qpe,QHo),e(tv,HHo),e(tv,Hpe),e(Hpe,UHo),e(no,JHo),M(av,no,null),b(f,gje,u),b(f,od,u),e(od,nv),e(nv,Upe),M(aL,Upe,null),e(od,YHo),e(od,Jpe),e(Jpe,KHo),b(f,hje,u),b(f,qo,u),M(nL,qo,null),e(qo,ZHo),e(qo,rd),e(rd,eUo),e(rd,LX),e(LX,oUo),e(rd,rUo),e(rd,xX),e(xX,tUo),e(rd,aUo),e(qo,nUo),e(qo,sL),e(sL,sUo),e(sL,Ype),e(Ype,lUo),e(sL,iUo),e(qo,dUo),e(qo,gt),M(lL,gt,null),e(gt,cUo),e(gt,Kpe),e(Kpe,fUo),e(gt,mUo),e(gt,td),e(td,gUo),e(td,Zpe),e(Zpe,hUo),e(td,pUo),e(td,$X),e($X,_Uo),e(td,uUo),e(gt,bUo),M(sv,gt,null),e(qo,vUo),e(qo,so),M(iL,so,null),e(so,FUo),e(so,e_e),e(e_e,TUo),e(so,MUo),e(so,qa),e(qa,EUo),e(qa,o_e),e(o_e,CUo),e(qa,wUo),e(qa,r_e),e(r_e,AUo),e(qa,yUo),e(qa,t_e),e(t_e,LUo),e(qa,xUo),e(so,$Uo),e(so,a_e),e(a_e,lv),e(lv,n_e),e(n_e,kUo),e(lv,SUo),e(lv,kX),e(kX,RUo),e(lv,PUo),e(so,BUo),e(so,iv),e(iv,IUo),e(iv,s_e),e(s_e,NUo),e(iv,qUo),e(iv,l_e),e(l_e,jUo),e(so,DUo),M(dv,so,null),b(f,pje,u),b(f,ad,u),e(ad,cv),e(cv,i_e),M(dL,i_e,null),e(ad,GUo),e(ad,d_e),e(d_e,OUo),b(f,_je,u),b(f,jo,u),M(cL,jo,null),e(jo,VUo),e(jo,nd),e(nd,XUo),e(nd,SX),e(SX,zUo),e(nd,WUo),e(nd,RX),e(RX,QUo),e(nd,HUo),e(jo,UUo),e(jo,fL),e(fL,JUo),e(fL,c_e),e(c_e,YUo),e(fL,KUo),e(jo,ZUo),e(jo,ht),M(mL,ht,null),e(ht,eJo),e(ht,f_e),e(f_e,oJo),e(ht,rJo),e(ht,sd),e(sd,tJo),e(sd,m_e),e(m_e,aJo),e(sd,nJo),e(sd,PX),e(PX,sJo),e(sd,lJo),e(ht,iJo),M(fv,ht,null),e(jo,dJo),e(jo,lo),M(gL,lo,null),e(lo,cJo),e(lo,g_e),e(g_e,fJo),e(lo,mJo),e(lo,ja),e(ja,gJo),e(ja,h_e),e(h_e,hJo),e(ja,pJo),e(ja,p_e),e(p_e,_Jo),e(ja,uJo),e(ja,__e),e(__e,bJo),e(ja,vJo),e(lo,FJo),e(lo,Fe),e(Fe,mv),e(mv,u_e),e(u_e,TJo),e(mv,MJo),e(mv,BX),e(BX,EJo),e(mv,CJo),e(Fe,wJo),e(Fe,gv),e(gv,b_e),e(b_e,AJo),e(gv,yJo),e(gv,IX),e(IX,LJo),e(gv,xJo),e(Fe,$Jo),e(Fe,hv),e(hv,v_e),e(v_e,kJo),e(hv,SJo),e(hv,NX),e(NX,RJo),e(hv,PJo),e(Fe,BJo),e(Fe,pv),e(pv,F_e),e(F_e,IJo),e(pv,NJo),e(pv,qX),e(qX,qJo),e(pv,jJo),e(Fe,DJo),e(Fe,Bs),e(Bs,T_e),e(T_e,GJo),e(Bs,OJo),e(Bs,jX),e(jX,VJo),e(Bs,XJo),e(Bs,DX),e(DX,zJo),e(Bs,WJo),e(Fe,QJo),e(Fe,_v),e(_v,M_e),e(M_e,HJo),e(_v,UJo),e(_v,GX),e(GX,JJo),e(_v,YJo),e(Fe,KJo),e(Fe,pt),e(pt,E_e),e(E_e,ZJo),e(pt,eYo),e(pt,OX),e(OX,oYo),e(pt,rYo),e(pt,VX),e(VX,tYo),e(pt,aYo),e(pt,XX),e(XX,nYo),e(pt,sYo),e(Fe,lYo),e(Fe,uv),e(uv,C_e),e(C_e,iYo),e(uv,dYo),e(uv,zX),e(zX,cYo),e(uv,fYo),e(Fe,mYo),e(Fe,bv),e(bv,w_e),e(w_e,gYo),e(bv,hYo),e(bv,WX),e(WX,pYo),e(bv,_Yo),e(Fe,uYo),e(Fe,vv),e(vv,A_e),e(A_e,bYo),e(vv,vYo),e(vv,QX),e(QX,FYo),e(vv,TYo),e(Fe,MYo),e(Fe,Fv),e(Fv,y_e),e(y_e,EYo),e(Fv,CYo),e(Fv,HX),e(HX,wYo),e(Fv,AYo),e(Fe,yYo),e(Fe,Tv),e(Tv,L_e),e(L_e,LYo),e(Tv,xYo),e(Tv,UX),e(UX,$Yo),e(Tv,kYo),e(Fe,SYo),e(Fe,Mv),e(Mv,x_e),e(x_e,RYo),e(Mv,PYo),e(Mv,JX),e(JX,BYo),e(Mv,IYo),e(Fe,NYo),e(Fe,Ev),e(Ev,$_e),e($_e,qYo),e(Ev,jYo),e(Ev,YX),e(YX,DYo),e(Ev,GYo),e(lo,OYo),e(lo,Cv),e(Cv,VYo),e(Cv,k_e),e(k_e,XYo),e(Cv,zYo),e(Cv,S_e),e(S_e,WYo),e(lo,QYo),M(wv,lo,null),b(f,uje,u),b(f,ld,u),e(ld,Av),e(Av,R_e),M(hL,R_e,null),e(ld,HYo),e(ld,P_e),e(P_e,UYo),b(f,bje,u),b(f,Do,u),M(pL,Do,null),e(Do,JYo),e(Do,id),e(id,YYo),e(id,KX),e(KX,KYo),e(id,ZYo),e(id,ZX),e(ZX,eKo),e(id,oKo),e(Do,rKo),e(Do,_L),e(_L,tKo),e(_L,B_e),e(B_e,aKo),e(_L,nKo),e(Do,sKo),e(Do,_t),M(uL,_t,null),e(_t,lKo),e(_t,I_e),e(I_e,iKo),e(_t,dKo),e(_t,dd),e(dd,cKo),e(dd,N_e),e(N_e,fKo),e(dd,mKo),e(dd,ez),e(ez,gKo),e(dd,hKo),e(_t,pKo),M(yv,_t,null),e(Do,_Ko),e(Do,io),M(bL,io,null),e(io,uKo),e(io,q_e),e(q_e,bKo),e(io,vKo),e(io,Da),e(Da,FKo),e(Da,j_e),e(j_e,TKo),e(Da,MKo),e(Da,D_e),e(D_e,EKo),e(Da,CKo),e(Da,G_e),e(G_e,wKo),e(Da,AKo),e(io,yKo),e(io,O_e),e(O_e,Lv),e(Lv,V_e),e(V_e,LKo),e(Lv,xKo),e(Lv,oz),e(oz,$Ko),e(Lv,kKo),e(io,SKo),e(io,xv),e(xv,RKo),e(xv,X_e),e(X_e,PKo),e(xv,BKo),e(xv,z_e),e(z_e,IKo),e(io,NKo),M($v,io,null),b(f,vje,u),b(f,cd,u),e(cd,kv),e(kv,W_e),M(vL,W_e,null),e(cd,qKo),e(cd,Q_e),e(Q_e,jKo),b(f,Fje,u),b(f,Go,u),M(FL,Go,null),e(Go,DKo),e(Go,fd),e(fd,GKo),e(fd,rz),e(rz,OKo),e(fd,VKo),e(fd,tz),e(tz,XKo),e(fd,zKo),e(Go,WKo),e(Go,TL),e(TL,QKo),e(TL,H_e),e(H_e,HKo),e(TL,UKo),e(Go,JKo),e(Go,ut),M(ML,ut,null),e(ut,YKo),e(ut,U_e),e(U_e,KKo),e(ut,ZKo),e(ut,md),e(md,eZo),e(md,J_e),e(J_e,oZo),e(md,rZo),e(md,az),e(az,tZo),e(md,aZo),e(ut,nZo),M(Sv,ut,null),e(Go,sZo),e(Go,co),M(EL,co,null),e(co,lZo),e(co,Y_e),e(Y_e,iZo),e(co,dZo),e(co,Ga),e(Ga,cZo),e(Ga,K_e),e(K_e,fZo),e(Ga,mZo),e(Ga,Z_e),e(Z_e,gZo),e(Ga,hZo),e(Ga,eue),e(eue,pZo),e(Ga,_Zo),e(co,uZo),e(co,Se),e(Se,Rv),e(Rv,oue),e(oue,bZo),e(Rv,vZo),e(Rv,nz),e(nz,FZo),e(Rv,TZo),e(Se,MZo),e(Se,Pv),e(Pv,rue),e(rue,EZo),e(Pv,CZo),e(Pv,sz),e(sz,wZo),e(Pv,AZo),e(Se,yZo),e(Se,Bv),e(Bv,tue),e(tue,LZo),e(Bv,xZo),e(Bv,lz),e(lz,$Zo),e(Bv,kZo),e(Se,SZo),e(Se,Iv),e(Iv,aue),e(aue,RZo),e(Iv,PZo),e(Iv,iz),e(iz,BZo),e(Iv,IZo),e(Se,NZo),e(Se,Nv),e(Nv,nue),e(nue,qZo),e(Nv,jZo),e(Nv,dz),e(dz,DZo),e(Nv,GZo),e(Se,OZo),e(Se,qv),e(qv,sue),e(sue,VZo),e(qv,XZo),e(qv,cz),e(cz,zZo),e(qv,WZo),e(Se,QZo),e(Se,jv),e(jv,lue),e(lue,HZo),e(jv,UZo),e(jv,fz),e(fz,JZo),e(jv,YZo),e(Se,KZo),e(Se,Dv),e(Dv,iue),e(iue,ZZo),e(Dv,eer),e(Dv,mz),e(mz,oer),e(Dv,rer),e(Se,ter),e(Se,Gv),e(Gv,due),e(due,aer),e(Gv,ner),e(Gv,gz),e(gz,ser),e(Gv,ler),e(co,ier),e(co,Ov),e(Ov,der),e(Ov,cue),e(cue,cer),e(Ov,fer),e(Ov,fue),e(fue,mer),e(co,ger),M(Vv,co,null),b(f,Tje,u),b(f,gd,u),e(gd,Xv),e(Xv,mue),M(CL,mue,null),e(gd,her),e(gd,gue),e(gue,per),b(f,Mje,u),b(f,Oo,u),M(wL,Oo,null),e(Oo,_er),e(Oo,hd),e(hd,uer),e(hd,hz),e(hz,ber),e(hd,ver),e(hd,pz),e(pz,Fer),e(hd,Ter),e(Oo,Mer),e(Oo,AL),e(AL,Eer),e(AL,hue),e(hue,Cer),e(AL,wer),e(Oo,Aer),e(Oo,bt),M(yL,bt,null),e(bt,yer),e(bt,pue),e(pue,Ler),e(bt,xer),e(bt,pd),e(pd,$er),e(pd,_ue),e(_ue,ker),e(pd,Ser),e(pd,_z),e(_z,Rer),e(pd,Per),e(bt,Ber),M(zv,bt,null),e(Oo,Ier),e(Oo,fo),M(LL,fo,null),e(fo,Ner),e(fo,uue),e(uue,qer),e(fo,jer),e(fo,Oa),e(Oa,Der),e(Oa,bue),e(bue,Ger),e(Oa,Oer),e(Oa,vue),e(vue,Ver),e(Oa,Xer),e(Oa,Fue),e(Fue,zer),e(Oa,Wer),e(fo,Qer),e(fo,Kr),e(Kr,Wv),e(Wv,Tue),e(Tue,Her),e(Wv,Uer),e(Wv,uz),e(uz,Jer),e(Wv,Yer),e(Kr,Ker),e(Kr,Qv),e(Qv,Mue),e(Mue,Zer),e(Qv,eor),e(Qv,bz),e(bz,oor),e(Qv,ror),e(Kr,tor),e(Kr,Hv),e(Hv,Eue),e(Eue,aor),e(Hv,nor),e(Hv,vz),e(vz,sor),e(Hv,lor),e(Kr,ior),e(Kr,Uv),e(Uv,Cue),e(Cue,dor),e(Uv,cor),e(Uv,Fz),e(Fz,mor),e(Uv,gor),e(Kr,hor),e(Kr,Jv),e(Jv,wue),e(wue,por),e(Jv,_or),e(Jv,Tz),e(Tz,uor),e(Jv,bor),e(fo,vor),e(fo,Yv),e(Yv,For),e(Yv,Aue),e(Aue,Tor),e(Yv,Mor),e(Yv,yue),e(yue,Eor),e(fo,Cor),M(Kv,fo,null),b(f,Eje,u),b(f,_d,u),e(_d,Zv),e(Zv,Lue),M(xL,Lue,null),e(_d,wor),e(_d,xue),e(xue,Aor),b(f,Cje,u),b(f,Vo,u),M($L,Vo,null),e(Vo,yor),e(Vo,ud),e(ud,Lor),e(ud,Mz),e(Mz,xor),e(ud,$or),e(ud,Ez),e(Ez,kor),e(ud,Sor),e(Vo,Ror),e(Vo,kL),e(kL,Por),e(kL,$ue),e($ue,Bor),e(kL,Ior),e(Vo,Nor),e(Vo,vt),M(SL,vt,null),e(vt,qor),e(vt,kue),e(kue,jor),e(vt,Dor),e(vt,bd),e(bd,Gor),e(bd,Sue),e(Sue,Oor),e(bd,Vor),e(bd,Cz),e(Cz,Xor),e(bd,zor),e(vt,Wor),M(eF,vt,null),e(Vo,Qor),e(Vo,mo),M(RL,mo,null),e(mo,Hor),e(mo,Rue),e(Rue,Uor),e(mo,Jor),e(mo,Va),e(Va,Yor),e(Va,Pue),e(Pue,Kor),e(Va,Zor),e(Va,Bue),e(Bue,err),e(Va,orr),e(Va,Iue),e(Iue,rrr),e(Va,trr),e(mo,arr),e(mo,Re),e(Re,oF),e(oF,Nue),e(Nue,nrr),e(oF,srr),e(oF,wz),e(wz,lrr),e(oF,irr),e(Re,drr),e(Re,rF),e(rF,que),e(que,crr),e(rF,frr),e(rF,Az),e(Az,mrr),e(rF,grr),e(Re,hrr),e(Re,tF),e(tF,jue),e(jue,prr),e(tF,_rr),e(tF,yz),e(yz,urr),e(tF,brr),e(Re,vrr),e(Re,aF),e(aF,Due),e(Due,Frr),e(aF,Trr),e(aF,Lz),e(Lz,Mrr),e(aF,Err),e(Re,Crr),e(Re,nF),e(nF,Gue),e(Gue,wrr),e(nF,Arr),e(nF,xz),e(xz,yrr),e(nF,Lrr),e(Re,xrr),e(Re,sF),e(sF,Oue),e(Oue,$rr),e(sF,krr),e(sF,$z),e($z,Srr),e(sF,Rrr),e(Re,Prr),e(Re,lF),e(lF,Vue),e(Vue,Brr),e(lF,Irr),e(lF,kz),e(kz,Nrr),e(lF,qrr),e(Re,jrr),e(Re,iF),e(iF,Xue),e(Xue,Drr),e(iF,Grr),e(iF,Sz),e(Sz,Orr),e(iF,Vrr),e(Re,Xrr),e(Re,dF),e(dF,zue),e(zue,zrr),e(dF,Wrr),e(dF,Rz),e(Rz,Qrr),e(dF,Hrr),e(mo,Urr),e(mo,cF),e(cF,Jrr),e(cF,Wue),e(Wue,Yrr),e(cF,Krr),e(cF,Que),e(Que,Zrr),e(mo,etr),M(fF,mo,null),b(f,wje,u),b(f,vd,u),e(vd,mF),e(mF,Hue),M(PL,Hue,null),e(vd,otr),e(vd,Uue),e(Uue,rtr),b(f,Aje,u),b(f,Xo,u),M(BL,Xo,null),e(Xo,ttr),e(Xo,Fd),e(Fd,atr),e(Fd,Pz),e(Pz,ntr),e(Fd,str),e(Fd,Bz),e(Bz,ltr),e(Fd,itr),e(Xo,dtr),e(Xo,IL),e(IL,ctr),e(IL,Jue),e(Jue,ftr),e(IL,mtr),e(Xo,gtr),e(Xo,Ft),M(NL,Ft,null),e(Ft,htr),e(Ft,Yue),e(Yue,ptr),e(Ft,_tr),e(Ft,Td),e(Td,utr),e(Td,Kue),e(Kue,btr),e(Td,vtr),e(Td,Iz),e(Iz,Ftr),e(Td,Ttr),e(Ft,Mtr),M(gF,Ft,null),e(Xo,Etr),e(Xo,go),M(qL,go,null),e(go,Ctr),e(go,Zue),e(Zue,wtr),e(go,Atr),e(go,Xa),e(Xa,ytr),e(Xa,e4e),e(e4e,Ltr),e(Xa,xtr),e(Xa,o4e),e(o4e,$tr),e(Xa,ktr),e(Xa,r4e),e(r4e,Str),e(Xa,Rtr),e(go,Ptr),e(go,jL),e(jL,hF),e(hF,t4e),e(t4e,Btr),e(hF,Itr),e(hF,Nz),e(Nz,Ntr),e(hF,qtr),e(jL,jtr),e(jL,pF),e(pF,a4e),e(a4e,Dtr),e(pF,Gtr),e(pF,qz),e(qz,Otr),e(pF,Vtr),e(go,Xtr),e(go,_F),e(_F,ztr),e(_F,n4e),e(n4e,Wtr),e(_F,Qtr),e(_F,s4e),e(s4e,Htr),e(go,Utr),M(uF,go,null),b(f,yje,u),b(f,Md,u),e(Md,bF),e(bF,l4e),M(DL,l4e,null),e(Md,Jtr),e(Md,i4e),e(i4e,Ytr),b(f,Lje,u),b(f,zo,u),M(GL,zo,null),e(zo,Ktr),e(zo,Ed),e(Ed,Ztr),e(Ed,jz),e(jz,ear),e(Ed,oar),e(Ed,Dz),e(Dz,rar),e(Ed,tar),e(zo,aar),e(zo,OL),e(OL,nar),e(OL,d4e),e(d4e,sar),e(OL,lar),e(zo,iar),e(zo,Tt),M(VL,Tt,null),e(Tt,dar),e(Tt,c4e),e(c4e,car),e(Tt,far),e(Tt,Cd),e(Cd,mar),e(Cd,f4e),e(f4e,gar),e(Cd,har),e(Cd,Gz),e(Gz,par),e(Cd,_ar),e(Tt,uar),M(vF,Tt,null),e(zo,bar),e(zo,ho),M(XL,ho,null),e(ho,Far),e(ho,m4e),e(m4e,Tar),e(ho,Mar),e(ho,za),e(za,Ear),e(za,g4e),e(g4e,Car),e(za,war),e(za,h4e),e(h4e,Aar),e(za,yar),e(za,p4e),e(p4e,Lar),e(za,xar),e(ho,$ar),e(ho,Zr),e(Zr,FF),e(FF,_4e),e(_4e,kar),e(FF,Sar),e(FF,Oz),e(Oz,Rar),e(FF,Par),e(Zr,Bar),e(Zr,TF),e(TF,u4e),e(u4e,Iar),e(TF,Nar),e(TF,Vz),e(Vz,qar),e(TF,jar),e(Zr,Dar),e(Zr,MF),e(MF,b4e),e(b4e,Gar),e(MF,Oar),e(MF,Xz),e(Xz,Var),e(MF,Xar),e(Zr,zar),e(Zr,EF),e(EF,v4e),e(v4e,War),e(EF,Qar),e(EF,zz),e(zz,Har),e(EF,Uar),e(Zr,Jar),e(Zr,CF),e(CF,F4e),e(F4e,Yar),e(CF,Kar),e(CF,Wz),e(Wz,Zar),e(CF,enr),e(ho,onr),e(ho,wF),e(wF,rnr),e(wF,T4e),e(T4e,tnr),e(wF,anr),e(wF,M4e),e(M4e,nnr),e(ho,snr),M(AF,ho,null),b(f,xje,u),b(f,wd,u),e(wd,yF),e(yF,E4e),M(zL,E4e,null),e(wd,lnr),e(wd,C4e),e(C4e,inr),b(f,$je,u),b(f,Wo,u),M(WL,Wo,null),e(Wo,dnr),e(Wo,Ad),e(Ad,cnr),e(Ad,Qz),e(Qz,fnr),e(Ad,mnr),e(Ad,Hz),e(Hz,gnr),e(Ad,hnr),e(Wo,pnr),e(Wo,QL),e(QL,_nr),e(QL,w4e),e(w4e,unr),e(QL,bnr),e(Wo,vnr),e(Wo,Mt),M(HL,Mt,null),e(Mt,Fnr),e(Mt,A4e),e(A4e,Tnr),e(Mt,Mnr),e(Mt,yd),e(yd,Enr),e(yd,y4e),e(y4e,Cnr),e(yd,wnr),e(yd,Uz),e(Uz,Anr),e(yd,ynr),e(Mt,Lnr),M(LF,Mt,null),e(Wo,xnr),e(Wo,po),M(UL,po,null),e(po,$nr),e(po,L4e),e(L4e,knr),e(po,Snr),e(po,Wa),e(Wa,Rnr),e(Wa,x4e),e(x4e,Pnr),e(Wa,Bnr),e(Wa,$4e),e($4e,Inr),e(Wa,Nnr),e(Wa,k4e),e(k4e,qnr),e(Wa,jnr),e(po,Dnr),e(po,Ld),e(Ld,xF),e(xF,S4e),e(S4e,Gnr),e(xF,Onr),e(xF,Jz),e(Jz,Vnr),e(xF,Xnr),e(Ld,znr),e(Ld,$F),e($F,R4e),e(R4e,Wnr),e($F,Qnr),e($F,Yz),e(Yz,Hnr),e($F,Unr),e(Ld,Jnr),e(Ld,kF),e(kF,P4e),e(P4e,Ynr),e(kF,Knr),e(kF,Kz),e(Kz,Znr),e(kF,esr),e(po,osr),e(po,SF),e(SF,rsr),e(SF,B4e),e(B4e,tsr),e(SF,asr),e(SF,I4e),e(I4e,nsr),e(po,ssr),M(RF,po,null),b(f,kje,u),b(f,xd,u),e(xd,PF),e(PF,N4e),M(JL,N4e,null),e(xd,lsr),e(xd,q4e),e(q4e,isr),b(f,Sje,u),b(f,Qo,u),M(YL,Qo,null),e(Qo,dsr),e(Qo,$d),e($d,csr),e($d,Zz),e(Zz,fsr),e($d,msr),e($d,eW),e(eW,gsr),e($d,hsr),e(Qo,psr),e(Qo,KL),e(KL,_sr),e(KL,j4e),e(j4e,usr),e(KL,bsr),e(Qo,vsr),e(Qo,Et),M(ZL,Et,null),e(Et,Fsr),e(Et,D4e),e(D4e,Tsr),e(Et,Msr),e(Et,kd),e(kd,Esr),e(kd,G4e),e(G4e,Csr),e(kd,wsr),e(kd,oW),e(oW,Asr),e(kd,ysr),e(Et,Lsr),M(BF,Et,null),e(Qo,xsr),e(Qo,_o),M(e8,_o,null),e(_o,$sr),e(_o,O4e),e(O4e,ksr),e(_o,Ssr),e(_o,Qa),e(Qa,Rsr),e(Qa,V4e),e(V4e,Psr),e(Qa,Bsr),e(Qa,X4e),e(X4e,Isr),e(Qa,Nsr),e(Qa,z4e),e(z4e,qsr),e(Qa,jsr),e(_o,Dsr),e(_o,o8),e(o8,IF),e(IF,W4e),e(W4e,Gsr),e(IF,Osr),e(IF,rW),e(rW,Vsr),e(IF,Xsr),e(o8,zsr),e(o8,NF),e(NF,Q4e),e(Q4e,Wsr),e(NF,Qsr),e(NF,tW),e(tW,Hsr),e(NF,Usr),e(_o,Jsr),e(_o,qF),e(qF,Ysr),e(qF,H4e),e(H4e,Ksr),e(qF,Zsr),e(qF,U4e),e(U4e,elr),e(_o,olr),M(jF,_o,null),b(f,Rje,u),b(f,Sd,u),e(Sd,DF),e(DF,J4e),M(r8,J4e,null),e(Sd,rlr),e(Sd,Y4e),e(Y4e,tlr),b(f,Pje,u),b(f,Ho,u),M(t8,Ho,null),e(Ho,alr),e(Ho,Rd),e(Rd,nlr),e(Rd,aW),e(aW,slr),e(Rd,llr),e(Rd,nW),e(nW,ilr),e(Rd,dlr),e(Ho,clr),e(Ho,a8),e(a8,flr),e(a8,K4e),e(K4e,mlr),e(a8,glr),e(Ho,hlr),e(Ho,Ct),M(n8,Ct,null),e(Ct,plr),e(Ct,Z4e),e(Z4e,_lr),e(Ct,ulr),e(Ct,Pd),e(Pd,blr),e(Pd,e1e),e(e1e,vlr),e(Pd,Flr),e(Pd,sW),e(sW,Tlr),e(Pd,Mlr),e(Ct,Elr),M(GF,Ct,null),e(Ho,Clr),e(Ho,uo),M(s8,uo,null),e(uo,wlr),e(uo,o1e),e(o1e,Alr),e(uo,ylr),e(uo,Ha),e(Ha,Llr),e(Ha,r1e),e(r1e,xlr),e(Ha,$lr),e(Ha,t1e),e(t1e,klr),e(Ha,Slr),e(Ha,a1e),e(a1e,Rlr),e(Ha,Plr),e(uo,Blr),e(uo,n1e),e(n1e,OF),e(OF,s1e),e(s1e,Ilr),e(OF,Nlr),e(OF,lW),e(lW,qlr),e(OF,jlr),e(uo,Dlr),e(uo,VF),e(VF,Glr),e(VF,l1e),e(l1e,Olr),e(VF,Vlr),e(VF,i1e),e(i1e,Xlr),e(uo,zlr),M(XF,uo,null),b(f,Bje,u),b(f,Bd,u),e(Bd,zF),e(zF,d1e),M(l8,d1e,null),e(Bd,Wlr),e(Bd,c1e),e(c1e,Qlr),b(f,Ije,u),b(f,Uo,u),M(i8,Uo,null),e(Uo,Hlr),e(Uo,Id),e(Id,Ulr),e(Id,iW),e(iW,Jlr),e(Id,Ylr),e(Id,dW),e(dW,Klr),e(Id,Zlr),e(Uo,eir),e(Uo,d8),e(d8,oir),e(d8,f1e),e(f1e,rir),e(d8,tir),e(Uo,air),e(Uo,wt),M(c8,wt,null),e(wt,nir),e(wt,m1e),e(m1e,sir),e(wt,lir),e(wt,Nd),e(Nd,iir),e(Nd,g1e),e(g1e,dir),e(Nd,cir),e(Nd,cW),e(cW,fir),e(Nd,mir),e(wt,gir),M(WF,wt,null),e(Uo,hir),e(Uo,bo),M(f8,bo,null),e(bo,pir),e(bo,h1e),e(h1e,_ir),e(bo,uir),e(bo,Ua),e(Ua,bir),e(Ua,p1e),e(p1e,vir),e(Ua,Fir),e(Ua,_1e),e(_1e,Tir),e(Ua,Mir),e(Ua,u1e),e(u1e,Eir),e(Ua,Cir),e(bo,wir),e(bo,Ja),e(Ja,QF),e(QF,b1e),e(b1e,Air),e(QF,yir),e(QF,fW),e(fW,Lir),e(QF,xir),e(Ja,$ir),e(Ja,HF),e(HF,v1e),e(v1e,kir),e(HF,Sir),e(HF,mW),e(mW,Rir),e(HF,Pir),e(Ja,Bir),e(Ja,UF),e(UF,F1e),e(F1e,Iir),e(UF,Nir),e(UF,gW),e(gW,qir),e(UF,jir),e(Ja,Dir),e(Ja,JF),e(JF,T1e),e(T1e,Gir),e(JF,Oir),e(JF,hW),e(hW,Vir),e(JF,Xir),e(bo,zir),e(bo,YF),e(YF,Wir),e(YF,M1e),e(M1e,Qir),e(YF,Hir),e(YF,E1e),e(E1e,Uir),e(bo,Jir),M(KF,bo,null),b(f,Nje,u),b(f,qd,u),e(qd,ZF),e(ZF,C1e),M(m8,C1e,null),e(qd,Yir),e(qd,w1e),e(w1e,Kir),b(f,qje,u),b(f,Jo,u),M(g8,Jo,null),e(Jo,Zir),e(Jo,jd),e(jd,edr),e(jd,pW),e(pW,odr),e(jd,rdr),e(jd,_W),e(_W,tdr),e(jd,adr),e(Jo,ndr),e(Jo,h8),e(h8,sdr),e(h8,A1e),e(A1e,ldr),e(h8,idr),e(Jo,ddr),e(Jo,At),M(p8,At,null),e(At,cdr),e(At,y1e),e(y1e,fdr),e(At,mdr),e(At,Dd),e(Dd,gdr),e(Dd,L1e),e(L1e,hdr),e(Dd,pdr),e(Dd,uW),e(uW,_dr),e(Dd,udr),e(At,bdr),M(eT,At,null),e(Jo,vdr),e(Jo,vo),M(_8,vo,null),e(vo,Fdr),e(vo,x1e),e(x1e,Tdr),e(vo,Mdr),e(vo,Ya),e(Ya,Edr),e(Ya,$1e),e($1e,Cdr),e(Ya,wdr),e(Ya,k1e),e(k1e,Adr),e(Ya,ydr),e(Ya,S1e),e(S1e,Ldr),e(Ya,xdr),e(vo,$dr),e(vo,R1e),e(R1e,oT),e(oT,P1e),e(P1e,kdr),e(oT,Sdr),e(oT,bW),e(bW,Rdr),e(oT,Pdr),e(vo,Bdr),e(vo,rT),e(rT,Idr),e(rT,B1e),e(B1e,Ndr),e(rT,qdr),e(rT,I1e),e(I1e,jdr),e(vo,Ddr),M(tT,vo,null),b(f,jje,u),b(f,Gd,u),e(Gd,aT),e(aT,N1e),M(u8,N1e,null),e(Gd,Gdr),e(Gd,q1e),e(q1e,Odr),b(f,Dje,u),b(f,Yo,u),M(b8,Yo,null),e(Yo,Vdr),e(Yo,Od),e(Od,Xdr),e(Od,vW),e(vW,zdr),e(Od,Wdr),e(Od,FW),e(FW,Qdr),e(Od,Hdr),e(Yo,Udr),e(Yo,v8),e(v8,Jdr),e(v8,j1e),e(j1e,Ydr),e(v8,Kdr),e(Yo,Zdr),e(Yo,yt),M(F8,yt,null),e(yt,ecr),e(yt,D1e),e(D1e,ocr),e(yt,rcr),e(yt,Vd),e(Vd,tcr),e(Vd,G1e),e(G1e,acr),e(Vd,ncr),e(Vd,TW),e(TW,scr),e(Vd,lcr),e(yt,icr),M(nT,yt,null),e(Yo,dcr),e(Yo,wr),M(T8,wr,null),e(wr,ccr),e(wr,O1e),e(O1e,fcr),e(wr,mcr),e(wr,Ka),e(Ka,gcr),e(Ka,V1e),e(V1e,hcr),e(Ka,pcr),e(Ka,X1e),e(X1e,_cr),e(Ka,ucr),e(Ka,z1e),e(z1e,bcr),e(Ka,vcr),e(wr,Fcr),e(wr,q),e(q,sT),e(sT,W1e),e(W1e,Tcr),e(sT,Mcr),e(sT,MW),e(MW,Ecr),e(sT,Ccr),e(q,wcr),e(q,lT),e(lT,Q1e),e(Q1e,Acr),e(lT,ycr),e(lT,EW),e(EW,Lcr),e(lT,xcr),e(q,$cr),e(q,iT),e(iT,H1e),e(H1e,kcr),e(iT,Scr),e(iT,CW),e(CW,Rcr),e(iT,Pcr),e(q,Bcr),e(q,dT),e(dT,U1e),e(U1e,Icr),e(dT,Ncr),e(dT,wW),e(wW,qcr),e(dT,jcr),e(q,Dcr),e(q,cT),e(cT,J1e),e(J1e,Gcr),e(cT,Ocr),e(cT,AW),e(AW,Vcr),e(cT,Xcr),e(q,zcr),e(q,fT),e(fT,Y1e),e(Y1e,Wcr),e(fT,Qcr),e(fT,yW),e(yW,Hcr),e(fT,Ucr),e(q,Jcr),e(q,mT),e(mT,K1e),e(K1e,Ycr),e(mT,Kcr),e(mT,LW),e(LW,Zcr),e(mT,efr),e(q,ofr),e(q,gT),e(gT,Z1e),e(Z1e,rfr),e(gT,tfr),e(gT,xW),e(xW,afr),e(gT,nfr),e(q,sfr),e(q,hT),e(hT,e7e),e(e7e,lfr),e(hT,ifr),e(hT,$W),e($W,dfr),e(hT,cfr),e(q,ffr),e(q,pT),e(pT,o7e),e(o7e,mfr),e(pT,gfr),e(pT,kW),e(kW,hfr),e(pT,pfr),e(q,_fr),e(q,_T),e(_T,r7e),e(r7e,ufr),e(_T,bfr),e(_T,SW),e(SW,vfr),e(_T,Ffr),e(q,Tfr),e(q,uT),e(uT,t7e),e(t7e,Mfr),e(uT,Efr),e(uT,RW),e(RW,Cfr),e(uT,wfr),e(q,Afr),e(q,bT),e(bT,a7e),e(a7e,yfr),e(bT,Lfr),e(bT,PW),e(PW,xfr),e(bT,$fr),e(q,kfr),e(q,vT),e(vT,n7e),e(n7e,Sfr),e(vT,Rfr),e(vT,BW),e(BW,Pfr),e(vT,Bfr),e(q,Ifr),e(q,FT),e(FT,s7e),e(s7e,Nfr),e(FT,qfr),e(FT,IW),e(IW,jfr),e(FT,Dfr),e(q,Gfr),e(q,TT),e(TT,l7e),e(l7e,Ofr),e(TT,Vfr),e(TT,NW),e(NW,Xfr),e(TT,zfr),e(q,Wfr),e(q,MT),e(MT,i7e),e(i7e,Qfr),e(MT,Hfr),e(MT,qW),e(qW,Ufr),e(MT,Jfr),e(q,Yfr),e(q,Is),e(Is,d7e),e(d7e,Kfr),e(Is,Zfr),e(Is,jW),e(jW,emr),e(Is,omr),e(Is,DW),e(DW,rmr),e(Is,tmr),e(q,amr),e(q,ET),e(ET,c7e),e(c7e,nmr),e(ET,smr),e(ET,GW),e(GW,lmr),e(ET,imr),e(q,dmr),e(q,CT),e(CT,f7e),e(f7e,cmr),e(CT,fmr),e(CT,OW),e(OW,mmr),e(CT,gmr),e(q,hmr),e(q,wT),e(wT,m7e),e(m7e,pmr),e(wT,_mr),e(wT,VW),e(VW,umr),e(wT,bmr),e(q,vmr),e(q,AT),e(AT,g7e),e(g7e,Fmr),e(AT,Tmr),e(AT,XW),e(XW,Mmr),e(AT,Emr),e(q,Cmr),e(q,yT),e(yT,h7e),e(h7e,wmr),e(yT,Amr),e(yT,zW),e(zW,ymr),e(yT,Lmr),e(q,xmr),e(q,LT),e(LT,p7e),e(p7e,$mr),e(LT,kmr),e(LT,WW),e(WW,Smr),e(LT,Rmr),e(q,Pmr),e(q,xT),e(xT,_7e),e(_7e,Bmr),e(xT,Imr),e(xT,QW),e(QW,Nmr),e(xT,qmr),e(q,jmr),e(q,$T),e($T,u7e),e(u7e,Dmr),e($T,Gmr),e($T,HW),e(HW,Omr),e($T,Vmr),e(q,Xmr),e(q,kT),e(kT,b7e),e(b7e,zmr),e(kT,Wmr),e(kT,UW),e(UW,Qmr),e(kT,Hmr),e(q,Umr),e(q,ST),e(ST,v7e),e(v7e,Jmr),e(ST,Ymr),e(ST,JW),e(JW,Kmr),e(ST,Zmr),e(q,egr),e(q,RT),e(RT,F7e),e(F7e,ogr),e(RT,rgr),e(RT,YW),e(YW,tgr),e(RT,agr),e(q,ngr),e(q,PT),e(PT,T7e),e(T7e,sgr),e(PT,lgr),e(PT,KW),e(KW,igr),e(PT,dgr),e(q,cgr),e(q,BT),e(BT,M7e),e(M7e,fgr),e(BT,mgr),e(BT,ZW),e(ZW,ggr),e(BT,hgr),e(q,pgr),e(q,IT),e(IT,E7e),e(E7e,_gr),e(IT,ugr),e(IT,eQ),e(eQ,bgr),e(IT,vgr),e(q,Fgr),e(q,NT),e(NT,C7e),e(C7e,Tgr),e(NT,Mgr),e(NT,oQ),e(oQ,Egr),e(NT,Cgr),e(q,wgr),e(q,qT),e(qT,w7e),e(w7e,Agr),e(qT,ygr),e(qT,rQ),e(rQ,Lgr),e(qT,xgr),e(q,$gr),e(q,jT),e(jT,A7e),e(A7e,kgr),e(jT,Sgr),e(jT,tQ),e(tQ,Rgr),e(jT,Pgr),e(q,Bgr),e(q,DT),e(DT,y7e),e(y7e,Igr),e(DT,Ngr),e(DT,aQ),e(aQ,qgr),e(DT,jgr),e(q,Dgr),e(q,GT),e(GT,L7e),e(L7e,Ggr),e(GT,Ogr),e(GT,nQ),e(nQ,Vgr),e(GT,Xgr),e(q,zgr),e(q,OT),e(OT,x7e),e(x7e,Wgr),e(OT,Qgr),e(OT,sQ),e(sQ,Hgr),e(OT,Ugr),e(q,Jgr),e(q,VT),e(VT,$7e),e($7e,Ygr),e(VT,Kgr),e(VT,lQ),e(lQ,Zgr),e(VT,ehr),e(q,ohr),e(q,XT),e(XT,k7e),e(k7e,rhr),e(XT,thr),e(XT,iQ),e(iQ,ahr),e(XT,nhr),e(q,shr),e(q,zT),e(zT,S7e),e(S7e,lhr),e(zT,ihr),e(zT,dQ),e(dQ,dhr),e(zT,chr),e(q,fhr),e(q,WT),e(WT,R7e),e(R7e,mhr),e(WT,ghr),e(WT,cQ),e(cQ,hhr),e(WT,phr),e(q,_hr),e(q,QT),e(QT,P7e),e(P7e,uhr),e(QT,bhr),e(QT,fQ),e(fQ,vhr),e(QT,Fhr),e(q,Thr),e(q,HT),e(HT,B7e),e(B7e,Mhr),e(HT,Ehr),e(HT,mQ),e(mQ,Chr),e(HT,whr),e(q,Ahr),e(q,UT),e(UT,I7e),e(I7e,yhr),e(UT,Lhr),e(UT,gQ),e(gQ,xhr),e(UT,$hr),e(q,khr),e(q,JT),e(JT,N7e),e(N7e,Shr),e(JT,Rhr),e(JT,hQ),e(hQ,Phr),e(JT,Bhr),e(q,Ihr),e(q,YT),e(YT,q7e),e(q7e,Nhr),e(YT,qhr),e(YT,pQ),e(pQ,jhr),e(YT,Dhr),e(wr,Ghr),M(KT,wr,null),b(f,Gje,u),b(f,Xd,u),e(Xd,ZT),e(ZT,j7e),M(M8,j7e,null),e(Xd,Ohr),e(Xd,D7e),e(D7e,Vhr),b(f,Oje,u),b(f,Ko,u),M(E8,Ko,null),e(Ko,Xhr),e(Ko,zd),e(zd,zhr),e(zd,_Q),e(_Q,Whr),e(zd,Qhr),e(zd,uQ),e(uQ,Hhr),e(zd,Uhr),e(Ko,Jhr),e(Ko,C8),e(C8,Yhr),e(C8,G7e),e(G7e,Khr),e(C8,Zhr),e(Ko,epr),e(Ko,Lt),M(w8,Lt,null),e(Lt,opr),e(Lt,O7e),e(O7e,rpr),e(Lt,tpr),e(Lt,Wd),e(Wd,apr),e(Wd,V7e),e(V7e,npr),e(Wd,spr),e(Wd,bQ),e(bQ,lpr),e(Wd,ipr),e(Lt,dpr),M(eM,Lt,null),e(Ko,cpr),e(Ko,Ar),M(A8,Ar,null),e(Ar,fpr),e(Ar,X7e),e(X7e,mpr),e(Ar,gpr),e(Ar,Za),e(Za,hpr),e(Za,z7e),e(z7e,ppr),e(Za,_pr),e(Za,W7e),e(W7e,upr),e(Za,bpr),e(Za,Q7e),e(Q7e,vpr),e(Za,Fpr),e(Ar,Tpr),e(Ar,se),e(se,oM),e(oM,H7e),e(H7e,Mpr),e(oM,Epr),e(oM,vQ),e(vQ,Cpr),e(oM,wpr),e(se,Apr),e(se,rM),e(rM,U7e),e(U7e,ypr),e(rM,Lpr),e(rM,FQ),e(FQ,xpr),e(rM,$pr),e(se,kpr),e(se,tM),e(tM,J7e),e(J7e,Spr),e(tM,Rpr),e(tM,TQ),e(TQ,Ppr),e(tM,Bpr),e(se,Ipr),e(se,aM),e(aM,Y7e),e(Y7e,Npr),e(aM,qpr),e(aM,MQ),e(MQ,jpr),e(aM,Dpr),e(se,Gpr),e(se,nM),e(nM,K7e),e(K7e,Opr),e(nM,Vpr),e(nM,EQ),e(EQ,Xpr),e(nM,zpr),e(se,Wpr),e(se,sM),e(sM,Z7e),e(Z7e,Qpr),e(sM,Hpr),e(sM,CQ),e(CQ,Upr),e(sM,Jpr),e(se,Ypr),e(se,lM),e(lM,ebe),e(ebe,Kpr),e(lM,Zpr),e(lM,wQ),e(wQ,e_r),e(lM,o_r),e(se,r_r),e(se,iM),e(iM,obe),e(obe,t_r),e(iM,a_r),e(iM,AQ),e(AQ,n_r),e(iM,s_r),e(se,l_r),e(se,dM),e(dM,rbe),e(rbe,i_r),e(dM,d_r),e(dM,yQ),e(yQ,c_r),e(dM,f_r),e(se,m_r),e(se,cM),e(cM,tbe),e(tbe,g_r),e(cM,h_r),e(cM,LQ),e(LQ,p_r),e(cM,__r),e(se,u_r),e(se,fM),e(fM,abe),e(abe,b_r),e(fM,v_r),e(fM,xQ),e(xQ,F_r),e(fM,T_r),e(se,M_r),e(se,mM),e(mM,nbe),e(nbe,E_r),e(mM,C_r),e(mM,$Q),e($Q,w_r),e(mM,A_r),e(se,y_r),e(se,gM),e(gM,sbe),e(sbe,L_r),e(gM,x_r),e(gM,kQ),e(kQ,$_r),e(gM,k_r),e(se,S_r),e(se,hM),e(hM,lbe),e(lbe,R_r),e(hM,P_r),e(hM,SQ),e(SQ,B_r),e(hM,I_r),e(se,N_r),e(se,pM),e(pM,ibe),e(ibe,q_r),e(pM,j_r),e(pM,RQ),e(RQ,D_r),e(pM,G_r),e(se,O_r),e(se,_M),e(_M,dbe),e(dbe,V_r),e(_M,X_r),e(_M,PQ),e(PQ,z_r),e(_M,W_r),e(se,Q_r),e(se,uM),e(uM,cbe),e(cbe,H_r),e(uM,U_r),e(uM,BQ),e(BQ,J_r),e(uM,Y_r),e(se,K_r),e(se,bM),e(bM,fbe),e(fbe,Z_r),e(bM,eur),e(bM,IQ),e(IQ,our),e(bM,rur),e(se,tur),e(se,vM),e(vM,mbe),e(mbe,aur),e(vM,nur),e(vM,NQ),e(NQ,sur),e(vM,lur),e(se,iur),e(se,FM),e(FM,gbe),e(gbe,dur),e(FM,cur),e(FM,qQ),e(qQ,fur),e(FM,mur),e(se,gur),e(se,TM),e(TM,hbe),e(hbe,hur),e(TM,pur),e(TM,jQ),e(jQ,_ur),e(TM,uur),e(se,bur),e(se,MM),e(MM,pbe),e(pbe,vur),e(MM,Fur),e(MM,DQ),e(DQ,Tur),e(MM,Mur),e(se,Eur),e(se,EM),e(EM,_be),e(_be,Cur),e(EM,wur),e(EM,GQ),e(GQ,Aur),e(EM,yur),e(Ar,Lur),M(CM,Ar,null),b(f,Vje,u),b(f,Qd,u),e(Qd,wM),e(wM,ube),M(y8,ube,null),e(Qd,xur),e(Qd,bbe),e(bbe,$ur),b(f,Xje,u),b(f,Zo,u),M(L8,Zo,null),e(Zo,kur),e(Zo,Hd),e(Hd,Sur),e(Hd,OQ),e(OQ,Rur),e(Hd,Pur),e(Hd,VQ),e(VQ,Bur),e(Hd,Iur),e(Zo,Nur),e(Zo,x8),e(x8,qur),e(x8,vbe),e(vbe,jur),e(x8,Dur),e(Zo,Gur),e(Zo,xt),M($8,xt,null),e(xt,Our),e(xt,Fbe),e(Fbe,Vur),e(xt,Xur),e(xt,Ud),e(Ud,zur),e(Ud,Tbe),e(Tbe,Wur),e(Ud,Qur),e(Ud,XQ),e(XQ,Hur),e(Ud,Uur),e(xt,Jur),M(AM,xt,null),e(Zo,Yur),e(Zo,yr),M(k8,yr,null),e(yr,Kur),e(yr,Mbe),e(Mbe,Zur),e(yr,e4r),e(yr,en),e(en,o4r),e(en,Ebe),e(Ebe,r4r),e(en,t4r),e(en,Cbe),e(Cbe,a4r),e(en,n4r),e(en,wbe),e(wbe,s4r),e(en,l4r),e(yr,i4r),e(yr,Te),e(Te,yM),e(yM,Abe),e(Abe,d4r),e(yM,c4r),e(yM,zQ),e(zQ,f4r),e(yM,m4r),e(Te,g4r),e(Te,LM),e(LM,ybe),e(ybe,h4r),e(LM,p4r),e(LM,WQ),e(WQ,_4r),e(LM,u4r),e(Te,b4r),e(Te,xM),e(xM,Lbe),e(Lbe,v4r),e(xM,F4r),e(xM,QQ),e(QQ,T4r),e(xM,M4r),e(Te,E4r),e(Te,$M),e($M,xbe),e(xbe,C4r),e($M,w4r),e($M,HQ),e(HQ,A4r),e($M,y4r),e(Te,L4r),e(Te,kM),e(kM,$be),e($be,x4r),e(kM,$4r),e(kM,UQ),e(UQ,k4r),e(kM,S4r),e(Te,R4r),e(Te,SM),e(SM,kbe),e(kbe,P4r),e(SM,B4r),e(SM,JQ),e(JQ,I4r),e(SM,N4r),e(Te,q4r),e(Te,RM),e(RM,Sbe),e(Sbe,j4r),e(RM,D4r),e(RM,YQ),e(YQ,G4r),e(RM,O4r),e(Te,V4r),e(Te,PM),e(PM,Rbe),e(Rbe,X4r),e(PM,z4r),e(PM,KQ),e(KQ,W4r),e(PM,Q4r),e(Te,H4r),e(Te,BM),e(BM,Pbe),e(Pbe,U4r),e(BM,J4r),e(BM,ZQ),e(ZQ,Y4r),e(BM,K4r),e(Te,Z4r),e(Te,IM),e(IM,Bbe),e(Bbe,e1r),e(IM,o1r),e(IM,eH),e(eH,r1r),e(IM,t1r),e(Te,a1r),e(Te,NM),e(NM,Ibe),e(Ibe,n1r),e(NM,s1r),e(NM,oH),e(oH,l1r),e(NM,i1r),e(Te,d1r),e(Te,qM),e(qM,Nbe),e(Nbe,c1r),e(qM,f1r),e(qM,rH),e(rH,m1r),e(qM,g1r),e(Te,h1r),e(Te,jM),e(jM,qbe),e(qbe,p1r),e(jM,_1r),e(jM,tH),e(tH,u1r),e(jM,b1r),e(yr,v1r),M(DM,yr,null),b(f,zje,u),b(f,Jd,u),e(Jd,GM),e(GM,jbe),M(S8,jbe,null),e(Jd,F1r),e(Jd,Dbe),e(Dbe,T1r),b(f,Wje,u),b(f,er,u),M(R8,er,null),e(er,M1r),e(er,Yd),e(Yd,E1r),e(Yd,aH),e(aH,C1r),e(Yd,w1r),e(Yd,nH),e(nH,A1r),e(Yd,y1r),e(er,L1r),e(er,P8),e(P8,x1r),e(P8,Gbe),e(Gbe,$1r),e(P8,k1r),e(er,S1r),e(er,$t),M(B8,$t,null),e($t,R1r),e($t,Obe),e(Obe,P1r),e($t,B1r),e($t,Kd),e(Kd,I1r),e(Kd,Vbe),e(Vbe,N1r),e(Kd,q1r),e(Kd,sH),e(sH,j1r),e(Kd,D1r),e($t,G1r),M(OM,$t,null),e(er,O1r),e(er,Lr),M(I8,Lr,null),e(Lr,V1r),e(Lr,Xbe),e(Xbe,X1r),e(Lr,z1r),e(Lr,on),e(on,W1r),e(on,zbe),e(zbe,Q1r),e(on,H1r),e(on,Wbe),e(Wbe,U1r),e(on,J1r),e(on,Qbe),e(Qbe,Y1r),e(on,K1r),e(Lr,Z1r),e(Lr,rn),e(rn,VM),e(VM,Hbe),e(Hbe,e7r),e(VM,o7r),e(VM,lH),e(lH,r7r),e(VM,t7r),e(rn,a7r),e(rn,XM),e(XM,Ube),e(Ube,n7r),e(XM,s7r),e(XM,iH),e(iH,l7r),e(XM,i7r),e(rn,d7r),e(rn,zM),e(zM,Jbe),e(Jbe,c7r),e(zM,f7r),e(zM,dH),e(dH,m7r),e(zM,g7r),e(rn,h7r),e(rn,WM),e(WM,Ybe),e(Ybe,p7r),e(WM,_7r),e(WM,cH),e(cH,u7r),e(WM,b7r),e(Lr,v7r),M(QM,Lr,null),b(f,Qje,u),b(f,Zd,u),e(Zd,HM),e(HM,Kbe),M(N8,Kbe,null),e(Zd,F7r),e(Zd,Zbe),e(Zbe,T7r),b(f,Hje,u),b(f,or,u),M(q8,or,null),e(or,M7r),e(or,ec),e(ec,E7r),e(ec,fH),e(fH,C7r),e(ec,w7r),e(ec,mH),e(mH,A7r),e(ec,y7r),e(or,L7r),e(or,j8),e(j8,x7r),e(j8,e2e),e(e2e,$7r),e(j8,k7r),e(or,S7r),e(or,kt),M(D8,kt,null),e(kt,R7r),e(kt,o2e),e(o2e,P7r),e(kt,B7r),e(kt,oc),e(oc,I7r),e(oc,r2e),e(r2e,N7r),e(oc,q7r),e(oc,gH),e(gH,j7r),e(oc,D7r),e(kt,G7r),M(UM,kt,null),e(or,O7r),e(or,xr),M(G8,xr,null),e(xr,V7r),e(xr,t2e),e(t2e,X7r),e(xr,z7r),e(xr,tn),e(tn,W7r),e(tn,a2e),e(a2e,Q7r),e(tn,H7r),e(tn,n2e),e(n2e,U7r),e(tn,J7r),e(tn,s2e),e(s2e,Y7r),e(tn,K7r),e(xr,Z7r),e(xr,ie),e(ie,JM),e(JM,l2e),e(l2e,ebr),e(JM,obr),e(JM,hH),e(hH,rbr),e(JM,tbr),e(ie,abr),e(ie,YM),e(YM,i2e),e(i2e,nbr),e(YM,sbr),e(YM,pH),e(pH,lbr),e(YM,ibr),e(ie,dbr),e(ie,KM),e(KM,d2e),e(d2e,cbr),e(KM,fbr),e(KM,_H),e(_H,mbr),e(KM,gbr),e(ie,hbr),e(ie,ZM),e(ZM,c2e),e(c2e,pbr),e(ZM,_br),e(ZM,uH),e(uH,ubr),e(ZM,bbr),e(ie,vbr),e(ie,eE),e(eE,f2e),e(f2e,Fbr),e(eE,Tbr),e(eE,bH),e(bH,Mbr),e(eE,Ebr),e(ie,Cbr),e(ie,oE),e(oE,m2e),e(m2e,wbr),e(oE,Abr),e(oE,vH),e(vH,ybr),e(oE,Lbr),e(ie,xbr),e(ie,rE),e(rE,g2e),e(g2e,$br),e(rE,kbr),e(rE,FH),e(FH,Sbr),e(rE,Rbr),e(ie,Pbr),e(ie,tE),e(tE,h2e),e(h2e,Bbr),e(tE,Ibr),e(tE,TH),e(TH,Nbr),e(tE,qbr),e(ie,jbr),e(ie,aE),e(aE,p2e),e(p2e,Dbr),e(aE,Gbr),e(aE,MH),e(MH,Obr),e(aE,Vbr),e(ie,Xbr),e(ie,nE),e(nE,_2e),e(_2e,zbr),e(nE,Wbr),e(nE,EH),e(EH,Qbr),e(nE,Hbr),e(ie,Ubr),e(ie,sE),e(sE,u2e),e(u2e,Jbr),e(sE,Ybr),e(sE,CH),e(CH,Kbr),e(sE,Zbr),e(ie,e2r),e(ie,lE),e(lE,b2e),e(b2e,o2r),e(lE,r2r),e(lE,wH),e(wH,t2r),e(lE,a2r),e(ie,n2r),e(ie,iE),e(iE,v2e),e(v2e,s2r),e(iE,l2r),e(iE,AH),e(AH,i2r),e(iE,d2r),e(ie,c2r),e(ie,dE),e(dE,F2e),e(F2e,f2r),e(dE,m2r),e(dE,yH),e(yH,g2r),e(dE,h2r),e(ie,p2r),e(ie,cE),e(cE,T2e),e(T2e,_2r),e(cE,u2r),e(cE,LH),e(LH,b2r),e(cE,v2r),e(ie,F2r),e(ie,fE),e(fE,M2e),e(M2e,T2r),e(fE,M2r),e(fE,xH),e(xH,E2r),e(fE,C2r),e(ie,w2r),e(ie,mE),e(mE,E2e),e(E2e,A2r),e(mE,y2r),e(mE,$H),e($H,L2r),e(mE,x2r),e(ie,$2r),e(ie,gE),e(gE,C2e),e(C2e,k2r),e(gE,S2r),e(gE,kH),e(kH,R2r),e(gE,P2r),e(ie,B2r),e(ie,hE),e(hE,w2e),e(w2e,I2r),e(hE,N2r),e(hE,SH),e(SH,q2r),e(hE,j2r),e(ie,D2r),e(ie,pE),e(pE,A2e),e(A2e,G2r),e(pE,O2r),e(pE,RH),e(RH,V2r),e(pE,X2r),e(xr,z2r),M(_E,xr,null),b(f,Uje,u),b(f,rc,u),e(rc,uE),e(uE,y2e),M(O8,y2e,null),e(rc,W2r),e(rc,L2e),e(L2e,Q2r),b(f,Jje,u),b(f,rr,u),M(V8,rr,null),e(rr,H2r),e(rr,tc),e(tc,U2r),e(tc,PH),e(PH,J2r),e(tc,Y2r),e(tc,BH),e(BH,K2r),e(tc,Z2r),e(rr,evr),e(rr,X8),e(X8,ovr),e(X8,x2e),e(x2e,rvr),e(X8,tvr),e(rr,avr),e(rr,St),M(z8,St,null),e(St,nvr),e(St,$2e),e($2e,svr),e(St,lvr),e(St,ac),e(ac,ivr),e(ac,k2e),e(k2e,dvr),e(ac,cvr),e(ac,IH),e(IH,fvr),e(ac,mvr),e(St,gvr),M(bE,St,null),e(rr,hvr),e(rr,$r),M(W8,$r,null),e($r,pvr),e($r,S2e),e(S2e,_vr),e($r,uvr),e($r,an),e(an,bvr),e(an,R2e),e(R2e,vvr),e(an,Fvr),e(an,P2e),e(P2e,Tvr),e(an,Mvr),e(an,B2e),e(B2e,Evr),e(an,Cvr),e($r,wvr),e($r,ye),e(ye,vE),e(vE,I2e),e(I2e,Avr),e(vE,yvr),e(vE,NH),e(NH,Lvr),e(vE,xvr),e(ye,$vr),e(ye,FE),e(FE,N2e),e(N2e,kvr),e(FE,Svr),e(FE,qH),e(qH,Rvr),e(FE,Pvr),e(ye,Bvr),e(ye,TE),e(TE,q2e),e(q2e,Ivr),e(TE,Nvr),e(TE,jH),e(jH,qvr),e(TE,jvr),e(ye,Dvr),e(ye,ME),e(ME,j2e),e(j2e,Gvr),e(ME,Ovr),e(ME,DH),e(DH,Vvr),e(ME,Xvr),e(ye,zvr),e(ye,EE),e(EE,D2e),e(D2e,Wvr),e(EE,Qvr),e(EE,GH),e(GH,Hvr),e(EE,Uvr),e(ye,Jvr),e(ye,CE),e(CE,G2e),e(G2e,Yvr),e(CE,Kvr),e(CE,OH),e(OH,Zvr),e(CE,eFr),e(ye,oFr),e(ye,wE),e(wE,O2e),e(O2e,rFr),e(wE,tFr),e(wE,VH),e(VH,aFr),e(wE,nFr),e(ye,sFr),e(ye,AE),e(AE,V2e),e(V2e,lFr),e(AE,iFr),e(AE,XH),e(XH,dFr),e(AE,cFr),e(ye,fFr),e(ye,yE),e(yE,X2e),e(X2e,mFr),e(yE,gFr),e(yE,zH),e(zH,hFr),e(yE,pFr),e(ye,_Fr),e(ye,LE),e(LE,z2e),e(z2e,uFr),e(LE,bFr),e(LE,WH),e(WH,vFr),e(LE,FFr),e($r,TFr),M(xE,$r,null),b(f,Yje,u),b(f,nc,u),e(nc,$E),e($E,W2e),M(Q8,W2e,null),e(nc,MFr),e(nc,Q2e),e(Q2e,EFr),b(f,Kje,u),b(f,tr,u),M(H8,tr,null),e(tr,CFr),e(tr,sc),e(sc,wFr),e(sc,QH),e(QH,AFr),e(sc,yFr),e(sc,HH),e(HH,LFr),e(sc,xFr),e(tr,$Fr),e(tr,U8),e(U8,kFr),e(U8,H2e),e(H2e,SFr),e(U8,RFr),e(tr,PFr),e(tr,Rt),M(J8,Rt,null),e(Rt,BFr),e(Rt,U2e),e(U2e,IFr),e(Rt,NFr),e(Rt,lc),e(lc,qFr),e(lc,J2e),e(J2e,jFr),e(lc,DFr),e(lc,UH),e(UH,GFr),e(lc,OFr),e(Rt,VFr),M(kE,Rt,null),e(tr,XFr),e(tr,kr),M(Y8,kr,null),e(kr,zFr),e(kr,Y2e),e(Y2e,WFr),e(kr,QFr),e(kr,nn),e(nn,HFr),e(nn,K2e),e(K2e,UFr),e(nn,JFr),e(nn,Z2e),e(Z2e,YFr),e(nn,KFr),e(nn,eve),e(eve,ZFr),e(nn,eTr),e(kr,oTr),e(kr,oe),e(oe,SE),e(SE,ove),e(ove,rTr),e(SE,tTr),e(SE,JH),e(JH,aTr),e(SE,nTr),e(oe,sTr),e(oe,RE),e(RE,rve),e(rve,lTr),e(RE,iTr),e(RE,YH),e(YH,dTr),e(RE,cTr),e(oe,fTr),e(oe,PE),e(PE,tve),e(tve,mTr),e(PE,gTr),e(PE,KH),e(KH,hTr),e(PE,pTr),e(oe,_Tr),e(oe,BE),e(BE,ave),e(ave,uTr),e(BE,bTr),e(BE,ZH),e(ZH,vTr),e(BE,FTr),e(oe,TTr),e(oe,IE),e(IE,nve),e(nve,MTr),e(IE,ETr),e(IE,eU),e(eU,CTr),e(IE,wTr),e(oe,ATr),e(oe,NE),e(NE,sve),e(sve,yTr),e(NE,LTr),e(NE,oU),e(oU,xTr),e(NE,$Tr),e(oe,kTr),e(oe,qE),e(qE,lve),e(lve,STr),e(qE,RTr),e(qE,rU),e(rU,PTr),e(qE,BTr),e(oe,ITr),e(oe,jE),e(jE,ive),e(ive,NTr),e(jE,qTr),e(jE,tU),e(tU,jTr),e(jE,DTr),e(oe,GTr),e(oe,DE),e(DE,dve),e(dve,OTr),e(DE,VTr),e(DE,aU),e(aU,XTr),e(DE,zTr),e(oe,WTr),e(oe,GE),e(GE,cve),e(cve,QTr),e(GE,HTr),e(GE,nU),e(nU,UTr),e(GE,JTr),e(oe,YTr),e(oe,OE),e(OE,fve),e(fve,KTr),e(OE,ZTr),e(OE,sU),e(sU,eMr),e(OE,oMr),e(oe,rMr),e(oe,VE),e(VE,mve),e(mve,tMr),e(VE,aMr),e(VE,lU),e(lU,nMr),e(VE,sMr),e(oe,lMr),e(oe,XE),e(XE,gve),e(gve,iMr),e(XE,dMr),e(XE,iU),e(iU,cMr),e(XE,fMr),e(oe,mMr),e(oe,zE),e(zE,hve),e(hve,gMr),e(zE,hMr),e(zE,dU),e(dU,pMr),e(zE,_Mr),e(oe,uMr),e(oe,WE),e(WE,pve),e(pve,bMr),e(WE,vMr),e(WE,cU),e(cU,FMr),e(WE,TMr),e(oe,MMr),e(oe,QE),e(QE,_ve),e(_ve,EMr),e(QE,CMr),e(QE,fU),e(fU,wMr),e(QE,AMr),e(oe,yMr),e(oe,HE),e(HE,uve),e(uve,LMr),e(HE,xMr),e(HE,mU),e(mU,$Mr),e(HE,kMr),e(oe,SMr),e(oe,UE),e(UE,bve),e(bve,RMr),e(UE,PMr),e(UE,gU),e(gU,BMr),e(UE,IMr),e(oe,NMr),e(oe,JE),e(JE,vve),e(vve,qMr),e(JE,jMr),e(JE,hU),e(hU,DMr),e(JE,GMr),e(oe,OMr),e(oe,YE),e(YE,Fve),e(Fve,VMr),e(YE,XMr),e(YE,pU),e(pU,zMr),e(YE,WMr),e(oe,QMr),e(oe,KE),e(KE,Tve),e(Tve,HMr),e(KE,UMr),e(KE,_U),e(_U,JMr),e(KE,YMr),e(oe,KMr),e(oe,ZE),e(ZE,Mve),e(Mve,ZMr),e(ZE,eEr),e(ZE,uU),e(uU,oEr),e(ZE,rEr),e(oe,tEr),e(oe,eC),e(eC,Eve),e(Eve,aEr),e(eC,nEr),e(eC,bU),e(bU,sEr),e(eC,lEr),e(oe,iEr),e(oe,oC),e(oC,Cve),e(Cve,dEr),e(oC,cEr),e(oC,vU),e(vU,fEr),e(oC,mEr),e(oe,gEr),e(oe,rC),e(rC,wve),e(wve,hEr),e(rC,pEr),e(rC,FU),e(FU,_Er),e(rC,uEr),e(oe,bEr),e(oe,tC),e(tC,Ave),e(Ave,vEr),e(tC,FEr),e(tC,TU),e(TU,TEr),e(tC,MEr),e(kr,EEr),M(aC,kr,null),b(f,Zje,u),b(f,ic,u),e(ic,nC),e(nC,yve),M(K8,yve,null),e(ic,CEr),e(ic,Lve),e(Lve,wEr),b(f,eDe,u),b(f,ar,u),M(Z8,ar,null),e(ar,AEr),e(ar,dc),e(dc,yEr),e(dc,MU),e(MU,LEr),e(dc,xEr),e(dc,EU),e(EU,$Er),e(dc,kEr),e(ar,SEr),e(ar,e9),e(e9,REr),e(e9,xve),e(xve,PEr),e(e9,BEr),e(ar,IEr),e(ar,Pt),M(o9,Pt,null),e(Pt,NEr),e(Pt,$ve),e($ve,qEr),e(Pt,jEr),e(Pt,cc),e(cc,DEr),e(cc,kve),e(kve,GEr),e(cc,OEr),e(cc,CU),e(CU,VEr),e(cc,XEr),e(Pt,zEr),M(sC,Pt,null),e(ar,WEr),e(ar,Sr),M(r9,Sr,null),e(Sr,QEr),e(Sr,Sve),e(Sve,HEr),e(Sr,UEr),e(Sr,sn),e(sn,JEr),e(sn,Rve),e(Rve,YEr),e(sn,KEr),e(sn,Pve),e(Pve,ZEr),e(sn,eCr),e(sn,Bve),e(Bve,oCr),e(sn,rCr),e(Sr,tCr),e(Sr,pe),e(pe,lC),e(lC,Ive),e(Ive,aCr),e(lC,nCr),e(lC,wU),e(wU,sCr),e(lC,lCr),e(pe,iCr),e(pe,iC),e(iC,Nve),e(Nve,dCr),e(iC,cCr),e(iC,AU),e(AU,fCr),e(iC,mCr),e(pe,gCr),e(pe,dC),e(dC,qve),e(qve,hCr),e(dC,pCr),e(dC,yU),e(yU,_Cr),e(dC,uCr),e(pe,bCr),e(pe,cC),e(cC,jve),e(jve,vCr),e(cC,FCr),e(cC,LU),e(LU,TCr),e(cC,MCr),e(pe,ECr),e(pe,fC),e(fC,Dve),e(Dve,CCr),e(fC,wCr),e(fC,xU),e(xU,ACr),e(fC,yCr),e(pe,LCr),e(pe,mC),e(mC,Gve),e(Gve,xCr),e(mC,$Cr),e(mC,$U),e($U,kCr),e(mC,SCr),e(pe,RCr),e(pe,gC),e(gC,Ove),e(Ove,PCr),e(gC,BCr),e(gC,kU),e(kU,ICr),e(gC,NCr),e(pe,qCr),e(pe,hC),e(hC,Vve),e(Vve,jCr),e(hC,DCr),e(hC,SU),e(SU,GCr),e(hC,OCr),e(pe,VCr),e(pe,pC),e(pC,Xve),e(Xve,XCr),e(pC,zCr),e(pC,RU),e(RU,WCr),e(pC,QCr),e(pe,HCr),e(pe,_C),e(_C,zve),e(zve,UCr),e(_C,JCr),e(_C,PU),e(PU,YCr),e(_C,KCr),e(pe,ZCr),e(pe,uC),e(uC,Wve),e(Wve,e5r),e(uC,o5r),e(uC,BU),e(BU,r5r),e(uC,t5r),e(pe,a5r),e(pe,bC),e(bC,Qve),e(Qve,n5r),e(bC,s5r),e(bC,IU),e(IU,l5r),e(bC,i5r),e(pe,d5r),e(pe,vC),e(vC,Hve),e(Hve,c5r),e(vC,f5r),e(vC,NU),e(NU,m5r),e(vC,g5r),e(pe,h5r),e(pe,FC),e(FC,Uve),e(Uve,p5r),e(FC,_5r),e(FC,qU),e(qU,u5r),e(FC,b5r),e(pe,v5r),e(pe,TC),e(TC,Jve),e(Jve,F5r),e(TC,T5r),e(TC,jU),e(jU,M5r),e(TC,E5r),e(pe,C5r),e(pe,MC),e(MC,Yve),e(Yve,w5r),e(MC,A5r),e(MC,DU),e(DU,y5r),e(MC,L5r),e(pe,x5r),e(pe,EC),e(EC,Kve),e(Kve,$5r),e(EC,k5r),e(EC,GU),e(GU,S5r),e(EC,R5r),e(Sr,P5r),M(CC,Sr,null),b(f,oDe,u),b(f,fc,u),e(fc,wC),e(wC,Zve),M(t9,Zve,null),e(fc,B5r),e(fc,eFe),e(eFe,I5r),b(f,rDe,u),b(f,nr,u),M(a9,nr,null),e(nr,N5r),e(nr,mc),e(mc,q5r),e(mc,OU),e(OU,j5r),e(mc,D5r),e(mc,VU),e(VU,G5r),e(mc,O5r),e(nr,V5r),e(nr,n9),e(n9,X5r),e(n9,oFe),e(oFe,z5r),e(n9,W5r),e(nr,Q5r),e(nr,Bt),M(s9,Bt,null),e(Bt,H5r),e(Bt,rFe),e(rFe,U5r),e(Bt,J5r),e(Bt,gc),e(gc,Y5r),e(gc,tFe),e(tFe,K5r),e(gc,Z5r),e(gc,XU),e(XU,e3r),e(gc,o3r),e(Bt,r3r),M(AC,Bt,null),e(nr,t3r),e(nr,Rr),M(l9,Rr,null),e(Rr,a3r),e(Rr,aFe),e(aFe,n3r),e(Rr,s3r),e(Rr,ln),e(ln,l3r),e(ln,nFe),e(nFe,i3r),e(ln,d3r),e(ln,sFe),e(sFe,c3r),e(ln,f3r),e(ln,lFe),e(lFe,m3r),e(ln,g3r),e(Rr,h3r),e(Rr,i9),e(i9,yC),e(yC,iFe),e(iFe,p3r),e(yC,_3r),e(yC,zU),e(zU,u3r),e(yC,b3r),e(i9,v3r),e(i9,LC),e(LC,dFe),e(dFe,F3r),e(LC,T3r),e(LC,WU),e(WU,M3r),e(LC,E3r),e(Rr,C3r),M(xC,Rr,null),b(f,tDe,u),b(f,hc,u),e(hc,$C),e($C,cFe),M(d9,cFe,null),e(hc,w3r),e(hc,fFe),e(fFe,A3r),b(f,aDe,u),b(f,sr,u),M(c9,sr,null),e(sr,y3r),e(sr,pc),e(pc,L3r),e(pc,QU),e(QU,x3r),e(pc,$3r),e(pc,HU),e(HU,k3r),e(pc,S3r),e(sr,R3r),e(sr,f9),e(f9,P3r),e(f9,mFe),e(mFe,B3r),e(f9,I3r),e(sr,N3r),e(sr,It),M(m9,It,null),e(It,q3r),e(It,gFe),e(gFe,j3r),e(It,D3r),e(It,_c),e(_c,G3r),e(_c,hFe),e(hFe,O3r),e(_c,V3r),e(_c,UU),e(UU,X3r),e(_c,z3r),e(It,W3r),M(kC,It,null),e(sr,Q3r),e(sr,Pr),M(g9,Pr,null),e(Pr,H3r),e(Pr,pFe),e(pFe,U3r),e(Pr,J3r),e(Pr,dn),e(dn,Y3r),e(dn,_Fe),e(_Fe,K3r),e(dn,Z3r),e(dn,uFe),e(uFe,e0r),e(dn,o0r),e(dn,bFe),e(bFe,r0r),e(dn,t0r),e(Pr,a0r),e(Pr,vFe),e(vFe,SC),e(SC,FFe),e(FFe,n0r),e(SC,s0r),e(SC,JU),e(JU,l0r),e(SC,i0r),e(Pr,d0r),M(RC,Pr,null),b(f,nDe,u),b(f,uc,u),e(uc,PC),e(PC,TFe),M(h9,TFe,null),e(uc,c0r),e(uc,MFe),e(MFe,f0r),b(f,sDe,u),b(f,lr,u),M(p9,lr,null),e(lr,m0r),e(lr,bc),e(bc,g0r),e(bc,YU),e(YU,h0r),e(bc,p0r),e(bc,KU),e(KU,_0r),e(bc,u0r),e(lr,b0r),e(lr,_9),e(_9,v0r),e(_9,EFe),e(EFe,F0r),e(_9,T0r),e(lr,M0r),e(lr,Nt),M(u9,Nt,null),e(Nt,E0r),e(Nt,CFe),e(CFe,C0r),e(Nt,w0r),e(Nt,vc),e(vc,A0r),e(vc,wFe),e(wFe,y0r),e(vc,L0r),e(vc,ZU),e(ZU,x0r),e(vc,$0r),e(Nt,k0r),M(BC,Nt,null),e(lr,S0r),e(lr,Br),M(b9,Br,null),e(Br,R0r),e(Br,AFe),e(AFe,P0r),e(Br,B0r),e(Br,cn),e(cn,I0r),e(cn,yFe),e(yFe,N0r),e(cn,q0r),e(cn,LFe),e(LFe,j0r),e(cn,D0r),e(cn,xFe),e(xFe,G0r),e(cn,O0r),e(Br,V0r),e(Br,de),e(de,IC),e(IC,$Fe),e($Fe,X0r),e(IC,z0r),e(IC,eJ),e(eJ,W0r),e(IC,Q0r),e(de,H0r),e(de,NC),e(NC,kFe),e(kFe,U0r),e(NC,J0r),e(NC,oJ),e(oJ,Y0r),e(NC,K0r),e(de,Z0r),e(de,qC),e(qC,SFe),e(SFe,ewr),e(qC,owr),e(qC,rJ),e(rJ,rwr),e(qC,twr),e(de,awr),e(de,jC),e(jC,RFe),e(RFe,nwr),e(jC,swr),e(jC,tJ),e(tJ,lwr),e(jC,iwr),e(de,dwr),e(de,DC),e(DC,PFe),e(PFe,cwr),e(DC,fwr),e(DC,aJ),e(aJ,mwr),e(DC,gwr),e(de,hwr),e(de,GC),e(GC,BFe),e(BFe,pwr),e(GC,_wr),e(GC,nJ),e(nJ,uwr),e(GC,bwr),e(de,vwr),e(de,OC),e(OC,IFe),e(IFe,Fwr),e(OC,Twr),e(OC,sJ),e(sJ,Mwr),e(OC,Ewr),e(de,Cwr),e(de,VC),e(VC,NFe),e(NFe,wwr),e(VC,Awr),e(VC,lJ),e(lJ,ywr),e(VC,Lwr),e(de,xwr),e(de,XC),e(XC,qFe),e(qFe,$wr),e(XC,kwr),e(XC,iJ),e(iJ,Swr),e(XC,Rwr),e(de,Pwr),e(de,zC),e(zC,jFe),e(jFe,Bwr),e(zC,Iwr),e(zC,dJ),e(dJ,Nwr),e(zC,qwr),e(de,jwr),e(de,WC),e(WC,DFe),e(DFe,Dwr),e(WC,Gwr),e(WC,cJ),e(cJ,Owr),e(WC,Vwr),e(de,Xwr),e(de,QC),e(QC,GFe),e(GFe,zwr),e(QC,Wwr),e(QC,fJ),e(fJ,Qwr),e(QC,Hwr),e(de,Uwr),e(de,HC),e(HC,OFe),e(OFe,Jwr),e(HC,Ywr),e(HC,mJ),e(mJ,Kwr),e(HC,Zwr),e(de,e6r),e(de,UC),e(UC,VFe),e(VFe,o6r),e(UC,r6r),e(UC,gJ),e(gJ,t6r),e(UC,a6r),e(de,n6r),e(de,JC),e(JC,XFe),e(XFe,s6r),e(JC,l6r),e(JC,hJ),e(hJ,i6r),e(JC,d6r),e(de,c6r),e(de,YC),e(YC,zFe),e(zFe,f6r),e(YC,m6r),e(YC,pJ),e(pJ,g6r),e(YC,h6r),e(de,p6r),e(de,KC),e(KC,WFe),e(WFe,_6r),e(KC,u6r),e(KC,_J),e(_J,b6r),e(KC,v6r),e(de,F6r),e(de,ZC),e(ZC,QFe),e(QFe,T6r),e(ZC,M6r),e(ZC,uJ),e(uJ,E6r),e(ZC,C6r),e(de,w6r),e(de,e5),e(e5,HFe),e(HFe,A6r),e(e5,y6r),e(e5,bJ),e(bJ,L6r),e(e5,x6r),e(de,$6r),e(de,o5),e(o5,UFe),e(UFe,k6r),e(o5,S6r),e(o5,vJ),e(vJ,R6r),e(o5,P6r),e(Br,B6r),M(r5,Br,null),b(f,lDe,u),b(f,Fc,u),e(Fc,t5),e(t5,JFe),M(v9,JFe,null),e(Fc,I6r),e(Fc,YFe),e(YFe,N6r),b(f,iDe,u),b(f,ir,u),M(F9,ir,null),e(ir,q6r),e(ir,Tc),e(Tc,j6r),e(Tc,FJ),e(FJ,D6r),e(Tc,G6r),e(Tc,TJ),e(TJ,O6r),e(Tc,V6r),e(ir,X6r),e(ir,T9),e(T9,z6r),e(T9,KFe),e(KFe,W6r),e(T9,Q6r),e(ir,H6r),e(ir,qt),M(M9,qt,null),e(qt,U6r),e(qt,ZFe),e(ZFe,J6r),e(qt,Y6r),e(qt,Mc),e(Mc,K6r),e(Mc,eTe),e(eTe,Z6r),e(Mc,eAr),e(Mc,MJ),e(MJ,oAr),e(Mc,rAr),e(qt,tAr),M(a5,qt,null),e(ir,aAr),e(ir,Ir),M(E9,Ir,null),e(Ir,nAr),e(Ir,oTe),e(oTe,sAr),e(Ir,lAr),e(Ir,fn),e(fn,iAr),e(fn,rTe),e(rTe,dAr),e(fn,cAr),e(fn,tTe),e(tTe,fAr),e(fn,mAr),e(fn,aTe),e(aTe,gAr),e(fn,hAr),e(Ir,pAr),e(Ir,ce),e(ce,n5),e(n5,nTe),e(nTe,_Ar),e(n5,uAr),e(n5,EJ),e(EJ,bAr),e(n5,vAr),e(ce,FAr),e(ce,s5),e(s5,sTe),e(sTe,TAr),e(s5,MAr),e(s5,CJ),e(CJ,EAr),e(s5,CAr),e(ce,wAr),e(ce,l5),e(l5,lTe),e(lTe,AAr),e(l5,yAr),e(l5,wJ),e(wJ,LAr),e(l5,xAr),e(ce,$Ar),e(ce,i5),e(i5,iTe),e(iTe,kAr),e(i5,SAr),e(i5,AJ),e(AJ,RAr),e(i5,PAr),e(ce,BAr),e(ce,d5),e(d5,dTe),e(dTe,IAr),e(d5,NAr),e(d5,yJ),e(yJ,qAr),e(d5,jAr),e(ce,DAr),e(ce,c5),e(c5,cTe),e(cTe,GAr),e(c5,OAr),e(c5,LJ),e(LJ,VAr),e(c5,XAr),e(ce,zAr),e(ce,f5),e(f5,fTe),e(fTe,WAr),e(f5,QAr),e(f5,xJ),e(xJ,HAr),e(f5,UAr),e(ce,JAr),e(ce,m5),e(m5,mTe),e(mTe,YAr),e(m5,KAr),e(m5,$J),e($J,ZAr),e(m5,eyr),e(ce,oyr),e(ce,g5),e(g5,gTe),e(gTe,ryr),e(g5,tyr),e(g5,kJ),e(kJ,ayr),e(g5,nyr),e(ce,syr),e(ce,h5),e(h5,hTe),e(hTe,lyr),e(h5,iyr),e(h5,SJ),e(SJ,dyr),e(h5,cyr),e(ce,fyr),e(ce,p5),e(p5,pTe),e(pTe,myr),e(p5,gyr),e(p5,RJ),e(RJ,hyr),e(p5,pyr),e(ce,_yr),e(ce,_5),e(_5,_Te),e(_Te,uyr),e(_5,byr),e(_5,PJ),e(PJ,vyr),e(_5,Fyr),e(ce,Tyr),e(ce,u5),e(u5,uTe),e(uTe,Myr),e(u5,Eyr),e(u5,BJ),e(BJ,Cyr),e(u5,wyr),e(ce,Ayr),e(ce,b5),e(b5,bTe),e(bTe,yyr),e(b5,Lyr),e(b5,IJ),e(IJ,xyr),e(b5,$yr),e(ce,kyr),e(ce,v5),e(v5,vTe),e(vTe,Syr),e(v5,Ryr),e(v5,NJ),e(NJ,Pyr),e(v5,Byr),e(ce,Iyr),e(ce,F5),e(F5,FTe),e(FTe,Nyr),e(F5,qyr),e(F5,qJ),e(qJ,jyr),e(F5,Dyr),e(ce,Gyr),e(ce,T5),e(T5,TTe),e(TTe,Oyr),e(T5,Vyr),e(T5,jJ),e(jJ,Xyr),e(T5,zyr),e(ce,Wyr),e(ce,M5),e(M5,MTe),e(MTe,Qyr),e(M5,Hyr),e(M5,DJ),e(DJ,Uyr),e(M5,Jyr),e(ce,Yyr),e(ce,E5),e(E5,ETe),e(ETe,Kyr),e(E5,Zyr),e(E5,GJ),e(GJ,eLr),e(E5,oLr),e(ce,rLr),e(ce,C5),e(C5,CTe),e(CTe,tLr),e(C5,aLr),e(C5,OJ),e(OJ,nLr),e(C5,sLr),e(Ir,lLr),M(w5,Ir,null),b(f,dDe,u),b(f,Ec,u),e(Ec,A5),e(A5,wTe),M(C9,wTe,null),e(Ec,iLr),e(Ec,ATe),e(ATe,dLr),b(f,cDe,u),b(f,dr,u),M(w9,dr,null),e(dr,cLr),e(dr,Cc),e(Cc,fLr),e(Cc,VJ),e(VJ,mLr),e(Cc,gLr),e(Cc,XJ),e(XJ,hLr),e(Cc,pLr),e(dr,_Lr),e(dr,A9),e(A9,uLr),e(A9,yTe),e(yTe,bLr),e(A9,vLr),e(dr,FLr),e(dr,jt),M(y9,jt,null),e(jt,TLr),e(jt,LTe),e(LTe,MLr),e(jt,ELr),e(jt,wc),e(wc,CLr),e(wc,xTe),e(xTe,wLr),e(wc,ALr),e(wc,zJ),e(zJ,yLr),e(wc,LLr),e(jt,xLr),M(y5,jt,null),e(dr,$Lr),e(dr,Nr),M(L9,Nr,null),e(Nr,kLr),e(Nr,$Te),e($Te,SLr),e(Nr,RLr),e(Nr,mn),e(mn,PLr),e(mn,kTe),e(kTe,BLr),e(mn,ILr),e(mn,STe),e(STe,NLr),e(mn,qLr),e(mn,RTe),e(RTe,jLr),e(mn,DLr),e(Nr,GLr),e(Nr,PTe),e(PTe,L5),e(L5,BTe),e(BTe,OLr),e(L5,VLr),e(L5,WJ),e(WJ,XLr),e(L5,zLr),e(Nr,WLr),M(x5,Nr,null),b(f,fDe,u),b(f,Ac,u),e(Ac,$5),e($5,ITe),M(x9,ITe,null),e(Ac,QLr),e(Ac,NTe),e(NTe,HLr),b(f,mDe,u),b(f,cr,u),M($9,cr,null),e(cr,ULr),e(cr,yc),e(yc,JLr),e(yc,QJ),e(QJ,YLr),e(yc,KLr),e(yc,HJ),e(HJ,ZLr),e(yc,e8r),e(cr,o8r),e(cr,k9),e(k9,r8r),e(k9,qTe),e(qTe,t8r),e(k9,a8r),e(cr,n8r),e(cr,Dt),M(S9,Dt,null),e(Dt,s8r),e(Dt,jTe),e(jTe,l8r),e(Dt,i8r),e(Dt,Lc),e(Lc,d8r),e(Lc,DTe),e(DTe,c8r),e(Lc,f8r),e(Lc,UJ),e(UJ,m8r),e(Lc,g8r),e(Dt,h8r),M(k5,Dt,null),e(cr,p8r),e(cr,qr),M(R9,qr,null),e(qr,_8r),e(qr,GTe),e(GTe,u8r),e(qr,b8r),e(qr,gn),e(gn,v8r),e(gn,OTe),e(OTe,F8r),e(gn,T8r),e(gn,VTe),e(VTe,M8r),e(gn,E8r),e(gn,XTe),e(XTe,C8r),e(gn,w8r),e(qr,A8r),e(qr,zTe),e(zTe,S5),e(S5,WTe),e(WTe,y8r),e(S5,L8r),e(S5,JJ),e(JJ,x8r),e(S5,$8r),e(qr,k8r),M(R5,qr,null),b(f,gDe,u),b(f,xc,u),e(xc,P5),e(P5,QTe),M(P9,QTe,null),e(xc,S8r),e(xc,HTe),e(HTe,R8r),b(f,hDe,u),b(f,fr,u),M(B9,fr,null),e(fr,P8r),e(fr,$c),e($c,B8r),e($c,YJ),e(YJ,I8r),e($c,N8r),e($c,KJ),e(KJ,q8r),e($c,j8r),e(fr,D8r),e(fr,I9),e(I9,G8r),e(I9,UTe),e(UTe,O8r),e(I9,V8r),e(fr,X8r),e(fr,Gt),M(N9,Gt,null),e(Gt,z8r),e(Gt,JTe),e(JTe,W8r),e(Gt,Q8r),e(Gt,kc),e(kc,H8r),e(kc,YTe),e(YTe,U8r),e(kc,J8r),e(kc,ZJ),e(ZJ,Y8r),e(kc,K8r),e(Gt,Z8r),M(B5,Gt,null),e(fr,e9r),e(fr,jr),M(q9,jr,null),e(jr,o9r),e(jr,KTe),e(KTe,r9r),e(jr,t9r),e(jr,hn),e(hn,a9r),e(hn,ZTe),e(ZTe,n9r),e(hn,s9r),e(hn,eMe),e(eMe,l9r),e(hn,i9r),e(hn,oMe),e(oMe,d9r),e(hn,c9r),e(jr,f9r),e(jr,re),e(re,I5),e(I5,rMe),e(rMe,m9r),e(I5,g9r),e(I5,eY),e(eY,h9r),e(I5,p9r),e(re,_9r),e(re,N5),e(N5,tMe),e(tMe,u9r),e(N5,b9r),e(N5,oY),e(oY,v9r),e(N5,F9r),e(re,T9r),e(re,q5),e(q5,aMe),e(aMe,M9r),e(q5,E9r),e(q5,rY),e(rY,C9r),e(q5,w9r),e(re,A9r),e(re,j5),e(j5,nMe),e(nMe,y9r),e(j5,L9r),e(j5,tY),e(tY,x9r),e(j5,$9r),e(re,k9r),e(re,D5),e(D5,sMe),e(sMe,S9r),e(D5,R9r),e(D5,aY),e(aY,P9r),e(D5,B9r),e(re,I9r),e(re,G5),e(G5,lMe),e(lMe,N9r),e(G5,q9r),e(G5,nY),e(nY,j9r),e(G5,D9r),e(re,G9r),e(re,O5),e(O5,iMe),e(iMe,O9r),e(O5,V9r),e(O5,sY),e(sY,X9r),e(O5,z9r),e(re,W9r),e(re,V5),e(V5,dMe),e(dMe,Q9r),e(V5,H9r),e(V5,lY),e(lY,U9r),e(V5,J9r),e(re,Y9r),e(re,X5),e(X5,cMe),e(cMe,K9r),e(X5,Z9r),e(X5,iY),e(iY,exr),e(X5,oxr),e(re,rxr),e(re,z5),e(z5,fMe),e(fMe,txr),e(z5,axr),e(z5,dY),e(dY,nxr),e(z5,sxr),e(re,lxr),e(re,W5),e(W5,mMe),e(mMe,ixr),e(W5,dxr),e(W5,cY),e(cY,cxr),e(W5,fxr),e(re,mxr),e(re,Q5),e(Q5,gMe),e(gMe,gxr),e(Q5,hxr),e(Q5,fY),e(fY,pxr),e(Q5,_xr),e(re,uxr),e(re,H5),e(H5,hMe),e(hMe,bxr),e(H5,vxr),e(H5,mY),e(mY,Fxr),e(H5,Txr),e(re,Mxr),e(re,U5),e(U5,pMe),e(pMe,Exr),e(U5,Cxr),e(U5,gY),e(gY,wxr),e(U5,Axr),e(re,yxr),e(re,J5),e(J5,_Me),e(_Me,Lxr),e(J5,xxr),e(J5,hY),e(hY,$xr),e(J5,kxr),e(re,Sxr),e(re,Y5),e(Y5,uMe),e(uMe,Rxr),e(Y5,Pxr),e(Y5,pY),e(pY,Bxr),e(Y5,Ixr),e(re,Nxr),e(re,K5),e(K5,bMe),e(bMe,qxr),e(K5,jxr),e(K5,_Y),e(_Y,Dxr),e(K5,Gxr),e(re,Oxr),e(re,Z5),e(Z5,vMe),e(vMe,Vxr),e(Z5,Xxr),e(Z5,uY),e(uY,zxr),e(Z5,Wxr),e(re,Qxr),e(re,e3),e(e3,FMe),e(FMe,Hxr),e(e3,Uxr),e(e3,bY),e(bY,Jxr),e(e3,Yxr),e(re,Kxr),e(re,o3),e(o3,TMe),e(TMe,Zxr),e(o3,e$r),e(o3,vY),e(vY,o$r),e(o3,r$r),e(re,t$r),e(re,r3),e(r3,MMe),e(MMe,a$r),e(r3,n$r),e(r3,FY),e(FY,s$r),e(r3,l$r),e(re,i$r),e(re,t3),e(t3,EMe),e(EMe,d$r),e(t3,c$r),e(t3,TY),e(TY,f$r),e(t3,m$r),e(re,g$r),e(re,a3),e(a3,CMe),e(CMe,h$r),e(a3,p$r),e(a3,MY),e(MY,_$r),e(a3,u$r),e(re,b$r),e(re,n3),e(n3,wMe),e(wMe,v$r),e(n3,F$r),e(n3,EY),e(EY,T$r),e(n3,M$r),e(re,E$r),e(re,s3),e(s3,AMe),e(AMe,C$r),e(s3,w$r),e(s3,CY),e(CY,A$r),e(s3,y$r),e(re,L$r),e(re,l3),e(l3,yMe),e(yMe,x$r),e(l3,$$r),e(l3,wY),e(wY,k$r),e(l3,S$r),e(jr,R$r),M(i3,jr,null),b(f,pDe,u),b(f,Sc,u),e(Sc,d3),e(d3,LMe),M(j9,LMe,null),e(Sc,P$r),e(Sc,xMe),e(xMe,B$r),b(f,_De,u),b(f,mr,u),M(D9,mr,null),e(mr,I$r),e(mr,Rc),e(Rc,N$r),e(Rc,AY),e(AY,q$r),e(Rc,j$r),e(Rc,yY),e(yY,D$r),e(Rc,G$r),e(mr,O$r),e(mr,G9),e(G9,V$r),e(G9,$Me),e($Me,X$r),e(G9,z$r),e(mr,W$r),e(mr,Ot),M(O9,Ot,null),e(Ot,Q$r),e(Ot,kMe),e(kMe,H$r),e(Ot,U$r),e(Ot,Pc),e(Pc,J$r),e(Pc,SMe),e(SMe,Y$r),e(Pc,K$r),e(Pc,LY),e(LY,Z$r),e(Pc,ekr),e(Ot,okr),M(c3,Ot,null),e(mr,rkr),e(mr,Dr),M(V9,Dr,null),e(Dr,tkr),e(Dr,RMe),e(RMe,akr),e(Dr,nkr),e(Dr,pn),e(pn,skr),e(pn,PMe),e(PMe,lkr),e(pn,ikr),e(pn,BMe),e(BMe,dkr),e(pn,ckr),e(pn,IMe),e(IMe,fkr),e(pn,mkr),e(Dr,gkr),e(Dr,Le),e(Le,f3),e(f3,NMe),e(NMe,hkr),e(f3,pkr),e(f3,xY),e(xY,_kr),e(f3,ukr),e(Le,bkr),e(Le,m3),e(m3,qMe),e(qMe,vkr),e(m3,Fkr),e(m3,$Y),e($Y,Tkr),e(m3,Mkr),e(Le,Ekr),e(Le,g3),e(g3,jMe),e(jMe,Ckr),e(g3,wkr),e(g3,kY),e(kY,Akr),e(g3,ykr),e(Le,Lkr),e(Le,h3),e(h3,DMe),e(DMe,xkr),e(h3,$kr),e(h3,SY),e(SY,kkr),e(h3,Skr),e(Le,Rkr),e(Le,p3),e(p3,GMe),e(GMe,Pkr),e(p3,Bkr),e(p3,RY),e(RY,Ikr),e(p3,Nkr),e(Le,qkr),e(Le,_3),e(_3,OMe),e(OMe,jkr),e(_3,Dkr),e(_3,PY),e(PY,Gkr),e(_3,Okr),e(Le,Vkr),e(Le,u3),e(u3,VMe),e(VMe,Xkr),e(u3,zkr),e(u3,BY),e(BY,Wkr),e(u3,Qkr),e(Le,Hkr),e(Le,b3),e(b3,XMe),e(XMe,Ukr),e(b3,Jkr),e(b3,IY),e(IY,Ykr),e(b3,Kkr),e(Le,Zkr),e(Le,v3),e(v3,zMe),e(zMe,eSr),e(v3,oSr),e(v3,NY),e(NY,rSr),e(v3,tSr),e(Le,aSr),e(Le,F3),e(F3,WMe),e(WMe,nSr),e(F3,sSr),e(F3,qY),e(qY,lSr),e(F3,iSr),e(Dr,dSr),M(T3,Dr,null),b(f,uDe,u),b(f,Bc,u),e(Bc,M3),e(M3,QMe),M(X9,QMe,null),e(Bc,cSr),e(Bc,HMe),e(HMe,fSr),b(f,bDe,u),b(f,gr,u),M(z9,gr,null),e(gr,mSr),e(gr,Ic),e(Ic,gSr),e(Ic,jY),e(jY,hSr),e(Ic,pSr),e(Ic,DY),e(DY,_Sr),e(Ic,uSr),e(gr,bSr),e(gr,W9),e(W9,vSr),e(W9,UMe),e(UMe,FSr),e(W9,TSr),e(gr,MSr),e(gr,Vt),M(Q9,Vt,null),e(Vt,ESr),e(Vt,JMe),e(JMe,CSr),e(Vt,wSr),e(Vt,Nc),e(Nc,ASr),e(Nc,YMe),e(YMe,ySr),e(Nc,LSr),e(Nc,GY),e(GY,xSr),e(Nc,$Sr),e(Vt,kSr),M(E3,Vt,null),e(gr,SSr),e(gr,Gr),M(H9,Gr,null),e(Gr,RSr),e(Gr,KMe),e(KMe,PSr),e(Gr,BSr),e(Gr,_n),e(_n,ISr),e(_n,ZMe),e(ZMe,NSr),e(_n,qSr),e(_n,eEe),e(eEe,jSr),e(_n,DSr),e(_n,oEe),e(oEe,GSr),e(_n,OSr),e(Gr,VSr),e(Gr,Ee),e(Ee,C3),e(C3,rEe),e(rEe,XSr),e(C3,zSr),e(C3,OY),e(OY,WSr),e(C3,QSr),e(Ee,HSr),e(Ee,w3),e(w3,tEe),e(tEe,USr),e(w3,JSr),e(w3,VY),e(VY,YSr),e(w3,KSr),e(Ee,ZSr),e(Ee,A3),e(A3,aEe),e(aEe,eRr),e(A3,oRr),e(A3,XY),e(XY,rRr),e(A3,tRr),e(Ee,aRr),e(Ee,y3),e(y3,nEe),e(nEe,nRr),e(y3,sRr),e(y3,zY),e(zY,lRr),e(y3,iRr),e(Ee,dRr),e(Ee,L3),e(L3,sEe),e(sEe,cRr),e(L3,fRr),e(L3,WY),e(WY,mRr),e(L3,gRr),e(Ee,hRr),e(Ee,x3),e(x3,lEe),e(lEe,pRr),e(x3,_Rr),e(x3,QY),e(QY,uRr),e(x3,bRr),e(Ee,vRr),e(Ee,$3),e($3,iEe),e(iEe,FRr),e($3,TRr),e($3,HY),e(HY,MRr),e($3,ERr),e(Ee,CRr),e(Ee,k3),e(k3,dEe),e(dEe,wRr),e(k3,ARr),e(k3,UY),e(UY,yRr),e(k3,LRr),e(Ee,xRr),e(Ee,S3),e(S3,cEe),e(cEe,$Rr),e(S3,kRr),e(S3,JY),e(JY,SRr),e(S3,RRr),e(Ee,PRr),e(Ee,R3),e(R3,fEe),e(fEe,BRr),e(R3,IRr),e(R3,YY),e(YY,NRr),e(R3,qRr),e(Ee,jRr),e(Ee,P3),e(P3,mEe),e(mEe,DRr),e(P3,GRr),e(P3,KY),e(KY,ORr),e(P3,VRr),e(Ee,XRr),e(Ee,B3),e(B3,gEe),e(gEe,zRr),e(B3,WRr),e(B3,ZY),e(ZY,QRr),e(B3,HRr),e(Gr,URr),M(I3,Gr,null),b(f,vDe,u),b(f,qc,u),e(qc,N3),e(N3,hEe),M(U9,hEe,null),e(qc,JRr),e(qc,pEe),e(pEe,YRr),b(f,FDe,u),b(f,hr,u),M(J9,hr,null),e(hr,KRr),e(hr,jc),e(jc,ZRr),e(jc,eK),e(eK,ePr),e(jc,oPr),e(jc,oK),e(oK,rPr),e(jc,tPr),e(hr,aPr),e(hr,Y9),e(Y9,nPr),e(Y9,_Ee),e(_Ee,sPr),e(Y9,lPr),e(hr,iPr),e(hr,Xt),M(K9,Xt,null),e(Xt,dPr),e(Xt,uEe),e(uEe,cPr),e(Xt,fPr),e(Xt,Dc),e(Dc,mPr),e(Dc,bEe),e(bEe,gPr),e(Dc,hPr),e(Dc,rK),e(rK,pPr),e(Dc,_Pr),e(Xt,uPr),M(q3,Xt,null),e(hr,bPr),e(hr,Or),M(Z9,Or,null),e(Or,vPr),e(Or,vEe),e(vEe,FPr),e(Or,TPr),e(Or,un),e(un,MPr),e(un,FEe),e(FEe,EPr),e(un,CPr),e(un,TEe),e(TEe,wPr),e(un,APr),e(un,MEe),e(MEe,yPr),e(un,LPr),e(Or,xPr),e(Or,xe),e(xe,j3),e(j3,EEe),e(EEe,$Pr),e(j3,kPr),e(j3,tK),e(tK,SPr),e(j3,RPr),e(xe,PPr),e(xe,D3),e(D3,CEe),e(CEe,BPr),e(D3,IPr),e(D3,aK),e(aK,NPr),e(D3,qPr),e(xe,jPr),e(xe,G3),e(G3,wEe),e(wEe,DPr),e(G3,GPr),e(G3,nK),e(nK,OPr),e(G3,VPr),e(xe,XPr),e(xe,O3),e(O3,AEe),e(AEe,zPr),e(O3,WPr),e(O3,sK),e(sK,QPr),e(O3,HPr),e(xe,UPr),e(xe,V3),e(V3,yEe),e(yEe,JPr),e(V3,YPr),e(V3,lK),e(lK,KPr),e(V3,ZPr),e(xe,eBr),e(xe,X3),e(X3,LEe),e(LEe,oBr),e(X3,rBr),e(X3,iK),e(iK,tBr),e(X3,aBr),e(xe,nBr),e(xe,z3),e(z3,xEe),e(xEe,sBr),e(z3,lBr),e(z3,dK),e(dK,iBr),e(z3,dBr),e(xe,cBr),e(xe,W3),e(W3,$Ee),e($Ee,fBr),e(W3,mBr),e(W3,cK),e(cK,gBr),e(W3,hBr),e(xe,pBr),e(xe,Q3),e(Q3,kEe),e(kEe,_Br),e(Q3,uBr),e(Q3,fK),e(fK,bBr),e(Q3,vBr),e(xe,FBr),e(xe,H3),e(H3,SEe),e(SEe,TBr),e(H3,MBr),e(H3,mK),e(mK,EBr),e(H3,CBr),e(Or,wBr),M(U3,Or,null),b(f,TDe,u),b(f,Gc,u),e(Gc,J3),e(J3,REe),M(ex,REe,null),e(Gc,ABr),e(Gc,PEe),e(PEe,yBr),b(f,MDe,u),b(f,pr,u),M(ox,pr,null),e(pr,LBr),e(pr,Oc),e(Oc,xBr),e(Oc,gK),e(gK,$Br),e(Oc,kBr),e(Oc,hK),e(hK,SBr),e(Oc,RBr),e(pr,PBr),e(pr,rx),e(rx,BBr),e(rx,BEe),e(BEe,IBr),e(rx,NBr),e(pr,qBr),e(pr,zt),M(tx,zt,null),e(zt,jBr),e(zt,IEe),e(IEe,DBr),e(zt,GBr),e(zt,Vc),e(Vc,OBr),e(Vc,NEe),e(NEe,VBr),e(Vc,XBr),e(Vc,pK),e(pK,zBr),e(Vc,WBr),e(zt,QBr),M(Y3,zt,null),e(pr,HBr),e(pr,Vr),M(ax,Vr,null),e(Vr,UBr),e(Vr,qEe),e(qEe,JBr),e(Vr,YBr),e(Vr,bn),e(bn,KBr),e(bn,jEe),e(jEe,ZBr),e(bn,eIr),e(bn,DEe),e(DEe,oIr),e(bn,rIr),e(bn,GEe),e(GEe,tIr),e(bn,aIr),e(Vr,nIr),e(Vr,Pe),e(Pe,K3),e(K3,OEe),e(OEe,sIr),e(K3,lIr),e(K3,_K),e(_K,iIr),e(K3,dIr),e(Pe,cIr),e(Pe,Z3),e(Z3,VEe),e(VEe,fIr),e(Z3,mIr),e(Z3,uK),e(uK,gIr),e(Z3,hIr),e(Pe,pIr),e(Pe,e0),e(e0,XEe),e(XEe,_Ir),e(e0,uIr),e(e0,bK),e(bK,bIr),e(e0,vIr),e(Pe,FIr),e(Pe,o0),e(o0,zEe),e(zEe,TIr),e(o0,MIr),e(o0,vK),e(vK,EIr),e(o0,CIr),e(Pe,wIr),e(Pe,r0),e(r0,WEe),e(WEe,AIr),e(r0,yIr),e(r0,FK),e(FK,LIr),e(r0,xIr),e(Pe,$Ir),e(Pe,t0),e(t0,QEe),e(QEe,kIr),e(t0,SIr),e(t0,TK),e(TK,RIr),e(t0,PIr),e(Pe,BIr),e(Pe,a0),e(a0,HEe),e(HEe,IIr),e(a0,NIr),e(a0,MK),e(MK,qIr),e(a0,jIr),e(Pe,DIr),e(Pe,n0),e(n0,UEe),e(UEe,GIr),e(n0,OIr),e(n0,EK),e(EK,VIr),e(n0,XIr),e(Pe,zIr),e(Pe,s0),e(s0,JEe),e(JEe,WIr),e(s0,QIr),e(s0,CK),e(CK,HIr),e(s0,UIr),e(Vr,JIr),M(l0,Vr,null),b(f,EDe,u),b(f,Xc,u),e(Xc,i0),e(i0,YEe),M(nx,YEe,null),e(Xc,YIr),e(Xc,KEe),e(KEe,KIr),b(f,CDe,u),b(f,_r,u),M(sx,_r,null),e(_r,ZIr),e(_r,zc),e(zc,eNr),e(zc,wK),e(wK,oNr),e(zc,rNr),e(zc,AK),e(AK,tNr),e(zc,aNr),e(_r,nNr),e(_r,lx),e(lx,sNr),e(lx,ZEe),e(ZEe,lNr),e(lx,iNr),e(_r,dNr),e(_r,Wt),M(ix,Wt,null),e(Wt,cNr),e(Wt,eCe),e(eCe,fNr),e(Wt,mNr),e(Wt,Wc),e(Wc,gNr),e(Wc,oCe),e(oCe,hNr),e(Wc,pNr),e(Wc,yK),e(yK,_Nr),e(Wc,uNr),e(Wt,bNr),M(d0,Wt,null),e(_r,vNr),e(_r,Xr),M(dx,Xr,null),e(Xr,FNr),e(Xr,rCe),e(rCe,TNr),e(Xr,MNr),e(Xr,vn),e(vn,ENr),e(vn,tCe),e(tCe,CNr),e(vn,wNr),e(vn,aCe),e(aCe,ANr),e(vn,yNr),e(vn,nCe),e(nCe,LNr),e(vn,xNr),e(Xr,$Nr),e(Xr,$e),e($e,c0),e(c0,sCe),e(sCe,kNr),e(c0,SNr),e(c0,LK),e(LK,RNr),e(c0,PNr),e($e,BNr),e($e,f0),e(f0,lCe),e(lCe,INr),e(f0,NNr),e(f0,xK),e(xK,qNr),e(f0,jNr),e($e,DNr),e($e,m0),e(m0,iCe),e(iCe,GNr),e(m0,ONr),e(m0,$K),e($K,VNr),e(m0,XNr),e($e,zNr),e($e,g0),e(g0,dCe),e(dCe,WNr),e(g0,QNr),e(g0,kK),e(kK,HNr),e(g0,UNr),e($e,JNr),e($e,h0),e(h0,cCe),e(cCe,YNr),e(h0,KNr),e(h0,SK),e(SK,ZNr),e(h0,eqr),e($e,oqr),e($e,p0),e(p0,fCe),e(fCe,rqr),e(p0,tqr),e(p0,RK),e(RK,aqr),e(p0,nqr),e($e,sqr),e($e,_0),e(_0,mCe),e(mCe,lqr),e(_0,iqr),e(_0,PK),e(PK,dqr),e(_0,cqr),e($e,fqr),e($e,u0),e(u0,gCe),e(gCe,mqr),e(u0,gqr),e(u0,BK),e(BK,hqr),e(u0,pqr),e($e,_qr),e($e,b0),e(b0,hCe),e(hCe,uqr),e(b0,bqr),e(b0,IK),e(IK,vqr),e(b0,Fqr),e($e,Tqr),e($e,v0),e(v0,pCe),e(pCe,Mqr),e(v0,Eqr),e(v0,NK),e(NK,Cqr),e(v0,wqr),e(Xr,Aqr),M(F0,Xr,null),b(f,wDe,u),b(f,Qc,u),e(Qc,T0),e(T0,_Ce),M(cx,_Ce,null),e(Qc,yqr),e(Qc,uCe),e(uCe,Lqr),b(f,ADe,u),b(f,ur,u),M(fx,ur,null),e(ur,xqr),e(ur,Hc),e(Hc,$qr),e(Hc,qK),e(qK,kqr),e(Hc,Sqr),e(Hc,jK),e(jK,Rqr),e(Hc,Pqr),e(ur,Bqr),e(ur,mx),e(mx,Iqr),e(mx,bCe),e(bCe,Nqr),e(mx,qqr),e(ur,jqr),e(ur,Qt),M(gx,Qt,null),e(Qt,Dqr),e(Qt,vCe),e(vCe,Gqr),e(Qt,Oqr),e(Qt,Uc),e(Uc,Vqr),e(Uc,FCe),e(FCe,Xqr),e(Uc,zqr),e(Uc,DK),e(DK,Wqr),e(Uc,Qqr),e(Qt,Hqr),M(M0,Qt,null),e(ur,Uqr),e(ur,zr),M(hx,zr,null),e(zr,Jqr),e(zr,TCe),e(TCe,Yqr),e(zr,Kqr),e(zr,Fn),e(Fn,Zqr),e(Fn,MCe),e(MCe,ejr),e(Fn,ojr),e(Fn,ECe),e(ECe,rjr),e(Fn,tjr),e(Fn,CCe),e(CCe,ajr),e(Fn,njr),e(zr,sjr),e(zr,ke),e(ke,E0),e(E0,wCe),e(wCe,ljr),e(E0,ijr),e(E0,GK),e(GK,djr),e(E0,cjr),e(ke,fjr),e(ke,C0),e(C0,ACe),e(ACe,mjr),e(C0,gjr),e(C0,OK),e(OK,hjr),e(C0,pjr),e(ke,_jr),e(ke,w0),e(w0,yCe),e(yCe,ujr),e(w0,bjr),e(w0,VK),e(VK,vjr),e(w0,Fjr),e(ke,Tjr),e(ke,A0),e(A0,LCe),e(LCe,Mjr),e(A0,Ejr),e(A0,XK),e(XK,Cjr),e(A0,wjr),e(ke,Ajr),e(ke,y0),e(y0,xCe),e(xCe,yjr),e(y0,Ljr),e(y0,zK),e(zK,xjr),e(y0,$jr),e(ke,kjr),e(ke,L0),e(L0,$Ce),e($Ce,Sjr),e(L0,Rjr),e(L0,WK),e(WK,Pjr),e(L0,Bjr),e(ke,Ijr),e(ke,x0),e(x0,kCe),e(kCe,Njr),e(x0,qjr),e(x0,QK),e(QK,jjr),e(x0,Djr),e(ke,Gjr),e(ke,$0),e($0,SCe),e(SCe,Ojr),e($0,Vjr),e($0,HK),e(HK,Xjr),e($0,zjr),e(ke,Wjr),e(ke,k0),e(k0,RCe),e(RCe,Qjr),e(k0,Hjr),e(k0,UK),e(UK,Ujr),e(k0,Jjr),e(ke,Yjr),e(ke,S0),e(S0,PCe),e(PCe,Kjr),e(S0,Zjr),e(S0,JK),e(JK,eDr),e(S0,oDr),e(zr,rDr),M(R0,zr,null),b(f,yDe,u),b(f,Jc,u),e(Jc,P0),e(P0,BCe),M(px,BCe,null),e(Jc,tDr),e(Jc,ICe),e(ICe,aDr),b(f,LDe,u),b(f,br,u),M(_x,br,null),e(br,nDr),e(br,Yc),e(Yc,sDr),e(Yc,YK),e(YK,lDr),e(Yc,iDr),e(Yc,KK),e(KK,dDr),e(Yc,cDr),e(br,fDr),e(br,ux),e(ux,mDr),e(ux,NCe),e(NCe,gDr),e(ux,hDr),e(br,pDr),e(br,Ht),M(bx,Ht,null),e(Ht,_Dr),e(Ht,qCe),e(qCe,uDr),e(Ht,bDr),e(Ht,Kc),e(Kc,vDr),e(Kc,jCe),e(jCe,FDr),e(Kc,TDr),e(Kc,ZK),e(ZK,MDr),e(Kc,EDr),e(Ht,CDr),M(B0,Ht,null),e(br,wDr),e(br,Wr),M(vx,Wr,null),e(Wr,ADr),e(Wr,DCe),e(DCe,yDr),e(Wr,LDr),e(Wr,Tn),e(Tn,xDr),e(Tn,GCe),e(GCe,$Dr),e(Tn,kDr),e(Tn,OCe),e(OCe,SDr),e(Tn,RDr),e(Tn,VCe),e(VCe,PDr),e(Tn,BDr),e(Wr,IDr),e(Wr,Ge),e(Ge,I0),e(I0,XCe),e(XCe,NDr),e(I0,qDr),e(I0,eZ),e(eZ,jDr),e(I0,DDr),e(Ge,GDr),e(Ge,N0),e(N0,zCe),e(zCe,ODr),e(N0,VDr),e(N0,oZ),e(oZ,XDr),e(N0,zDr),e(Ge,WDr),e(Ge,q0),e(q0,WCe),e(WCe,QDr),e(q0,HDr),e(q0,rZ),e(rZ,UDr),e(q0,JDr),e(Ge,YDr),e(Ge,j0),e(j0,QCe),e(QCe,KDr),e(j0,ZDr),e(j0,tZ),e(tZ,eGr),e(j0,oGr),e(Ge,rGr),e(Ge,D0),e(D0,HCe),e(HCe,tGr),e(D0,aGr),e(D0,aZ),e(aZ,nGr),e(D0,sGr),e(Ge,lGr),e(Ge,G0),e(G0,UCe),e(UCe,iGr),e(G0,dGr),e(G0,nZ),e(nZ,cGr),e(G0,fGr),e(Ge,mGr),e(Ge,O0),e(O0,JCe),e(JCe,gGr),e(O0,hGr),e(O0,sZ),e(sZ,pGr),e(O0,_Gr),e(Ge,uGr),e(Ge,V0),e(V0,YCe),e(YCe,bGr),e(V0,vGr),e(V0,lZ),e(lZ,FGr),e(V0,TGr),e(Wr,MGr),M(X0,Wr,null),b(f,xDe,u),b(f,Zc,u),e(Zc,z0),e(z0,KCe),M(Fx,KCe,null),e(Zc,EGr),e(Zc,ZCe),e(ZCe,CGr),b(f,$De,u),b(f,vr,u),M(Tx,vr,null),e(vr,wGr),e(vr,ef),e(ef,AGr),e(ef,iZ),e(iZ,yGr),e(ef,LGr),e(ef,dZ),e(dZ,xGr),e(ef,$Gr),e(vr,kGr),e(vr,Mx),e(Mx,SGr),e(Mx,e5e),e(e5e,RGr),e(Mx,PGr),e(vr,BGr),e(vr,Ut),M(Ex,Ut,null),e(Ut,IGr),e(Ut,o5e),e(o5e,NGr),e(Ut,qGr),e(Ut,of),e(of,jGr),e(of,r5e),e(r5e,DGr),e(of,GGr),e(of,cZ),e(cZ,OGr),e(of,VGr),e(Ut,XGr),M(W0,Ut,null),e(vr,zGr),e(vr,Qr),M(Cx,Qr,null),e(Qr,WGr),e(Qr,t5e),e(t5e,QGr),e(Qr,HGr),e(Qr,Mn),e(Mn,UGr),e(Mn,a5e),e(a5e,JGr),e(Mn,YGr),e(Mn,n5e),e(n5e,KGr),e(Mn,ZGr),e(Mn,s5e),e(s5e,eOr),e(Mn,oOr),e(Qr,rOr),e(Qr,Oe),e(Oe,Q0),e(Q0,l5e),e(l5e,tOr),e(Q0,aOr),e(Q0,fZ),e(fZ,nOr),e(Q0,sOr),e(Oe,lOr),e(Oe,H0),e(H0,i5e),e(i5e,iOr),e(H0,dOr),e(H0,mZ),e(mZ,cOr),e(H0,fOr),e(Oe,mOr),e(Oe,U0),e(U0,d5e),e(d5e,gOr),e(U0,hOr),e(U0,gZ),e(gZ,pOr),e(U0,_Or),e(Oe,uOr),e(Oe,J0),e(J0,c5e),e(c5e,bOr),e(J0,vOr),e(J0,hZ),e(hZ,FOr),e(J0,TOr),e(Oe,MOr),e(Oe,Y0),e(Y0,f5e),e(f5e,EOr),e(Y0,COr),e(Y0,pZ),e(pZ,wOr),e(Y0,AOr),e(Oe,yOr),e(Oe,K0),e(K0,m5e),e(m5e,LOr),e(K0,xOr),e(K0,_Z),e(_Z,$Or),e(K0,kOr),e(Oe,SOr),e(Oe,Z0),e(Z0,g5e),e(g5e,ROr),e(Z0,POr),e(Z0,uZ),e(uZ,BOr),e(Z0,IOr),e(Oe,NOr),e(Oe,ew),e(ew,h5e),e(h5e,qOr),e(ew,jOr),e(ew,bZ),e(bZ,DOr),e(ew,GOr),e(Qr,OOr),M(ow,Qr,null),b(f,kDe,u),b(f,rf,u),e(rf,rw),e(rw,p5e),M(wx,p5e,null),e(rf,VOr),e(rf,_5e),e(_5e,XOr),b(f,SDe,u),b(f,Fr,u),M(Ax,Fr,null),e(Fr,zOr),e(Fr,tf),e(tf,WOr),e(tf,vZ),e(vZ,QOr),e(tf,HOr),e(tf,FZ),e(FZ,UOr),e(tf,JOr),e(Fr,YOr),e(Fr,yx),e(yx,KOr),e(yx,u5e),e(u5e,ZOr),e(yx,eVr),e(Fr,oVr),e(Fr,Jt),M(Lx,Jt,null),e(Jt,rVr),e(Jt,b5e),e(b5e,tVr),e(Jt,aVr),e(Jt,af),e(af,nVr),e(af,v5e),e(v5e,sVr),e(af,lVr),e(af,TZ),e(TZ,iVr),e(af,dVr),e(Jt,cVr),M(tw,Jt,null),e(Fr,fVr),e(Fr,Hr),M(xx,Hr,null),e(Hr,mVr),e(Hr,F5e),e(F5e,gVr),e(Hr,hVr),e(Hr,En),e(En,pVr),e(En,T5e),e(T5e,_Vr),e(En,uVr),e(En,M5e),e(M5e,bVr),e(En,vVr),e(En,E5e),e(E5e,FVr),e(En,TVr),e(Hr,MVr),e(Hr,C5e),e(C5e,aw),e(aw,w5e),e(w5e,EVr),e(aw,CVr),e(aw,MZ),e(MZ,wVr),e(aw,AVr),e(Hr,yVr),M(nw,Hr,null),b(f,RDe,u),b(f,nf,u),e(nf,sw),e(sw,A5e),M($x,A5e,null),e(nf,LVr),e(nf,y5e),e(y5e,xVr),b(f,PDe,u),b(f,Tr,u),M(kx,Tr,null),e(Tr,$Vr),e(Tr,sf),e(sf,kVr),e(sf,EZ),e(EZ,SVr),e(sf,RVr),e(sf,CZ),e(CZ,PVr),e(sf,BVr),e(Tr,IVr),e(Tr,Sx),e(Sx,NVr),e(Sx,L5e),e(L5e,qVr),e(Sx,jVr),e(Tr,DVr),e(Tr,Yt),M(Rx,Yt,null),e(Yt,GVr),e(Yt,x5e),e(x5e,OVr),e(Yt,VVr),e(Yt,lf),e(lf,XVr),e(lf,$5e),e($5e,zVr),e(lf,WVr),e(lf,wZ),e(wZ,QVr),e(lf,HVr),e(Yt,UVr),M(lw,Yt,null),e(Tr,JVr),e(Tr,Ur),M(Px,Ur,null),e(Ur,YVr),e(Ur,k5e),e(k5e,KVr),e(Ur,ZVr),e(Ur,Cn),e(Cn,eXr),e(Cn,S5e),e(S5e,oXr),e(Cn,rXr),e(Cn,R5e),e(R5e,tXr),e(Cn,aXr),e(Cn,P5e),e(P5e,nXr),e(Cn,sXr),e(Ur,lXr),e(Ur,Bx),e(Bx,iw),e(iw,B5e),e(B5e,iXr),e(iw,dXr),e(iw,AZ),e(AZ,cXr),e(iw,fXr),e(Bx,mXr),e(Bx,dw),e(dw,I5e),e(I5e,gXr),e(dw,hXr),e(dw,yZ),e(yZ,pXr),e(dw,_Xr),e(Ur,uXr),M(cw,Ur,null),b(f,BDe,u),b(f,df,u),e(df,fw),e(fw,N5e),M(Ix,N5e,null),e(df,bXr),e(df,q5e),e(q5e,vXr),b(f,IDe,u),b(f,Mr,u),M(Nx,Mr,null),e(Mr,FXr),e(Mr,cf),e(cf,TXr),e(cf,LZ),e(LZ,MXr),e(cf,EXr),e(cf,xZ),e(xZ,CXr),e(cf,wXr),e(Mr,AXr),e(Mr,qx),e(qx,yXr),e(qx,j5e),e(j5e,LXr),e(qx,xXr),e(Mr,$Xr),e(Mr,Kt),M(jx,Kt,null),e(Kt,kXr),e(Kt,D5e),e(D5e,SXr),e(Kt,RXr),e(Kt,ff),e(ff,PXr),e(ff,G5e),e(G5e,BXr),e(ff,IXr),e(ff,$Z),e($Z,NXr),e(ff,qXr),e(Kt,jXr),M(mw,Kt,null),e(Mr,DXr),e(Mr,Jr),M(Dx,Jr,null),e(Jr,GXr),e(Jr,O5e),e(O5e,OXr),e(Jr,VXr),e(Jr,wn),e(wn,XXr),e(wn,V5e),e(V5e,zXr),e(wn,WXr),e(wn,X5e),e(X5e,QXr),e(wn,HXr),e(wn,z5e),e(z5e,UXr),e(wn,JXr),e(Jr,YXr),e(Jr,W5e),e(W5e,gw),e(gw,Q5e),e(Q5e,KXr),e(gw,ZXr),e(gw,kZ),e(kZ,ezr),e(gw,ozr),e(Jr,rzr),M(hw,Jr,null),NDe=!0},p(f,[u]){const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),Ff.$set(Gx);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),Cg.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),sh.$set(U5e);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),qh.$set(J5e);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),jh.$set(Ox);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),np.$set(Y5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),sp.$set(An);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),dp.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),nu.$set(Z5e);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),lu.$set(e3e);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),Ku.$set(Vx);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),e4.$set(o3e);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),D4.$set(Xx);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),O4.$set(r3e);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),w1.$set(zx);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),y1.$set(t3e);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),z1.$set(a3e);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),Q1.$set(n3e);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),O7.$set(mf);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),X7.$set(s3e);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),Tb.$set(l3e);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),Eb.$set(i3e);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),$b.$set(Wx);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),Sb.$set(d3e);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),h2.$set(c3e);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),_2.$set(f3e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),av.$set(et);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),sv.$set(Qx);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),dv.$set(m3e);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),fv.$set(Hx);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),wv.$set(g3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),yv.$set(ot);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),$v.$set(h3e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Sv.$set(gf);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),Vv.$set(p3e);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),zv.$set(_3e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Kv.$set(y);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),eF.$set(pw);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),fF.$set(u3e);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),gF.$set(b3e);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),uF.$set(_w);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),vF.$set(v3e);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),AF.$set(F3e);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),LF.$set(uw);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),RF.$set(T3e);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),BF.$set(M3e);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),jF.$set(bw);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),GF.$set(E3e);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),XF.$set(C3e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),WF.$set(vw);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),KF.$set(w3e);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),eT.$set(A3e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),tT.$set(Fw);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),nT.$set(y3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),KT.$set(L3e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),eM.$set(Tw);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),CM.$set(x3e);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),AM.$set($3e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),DM.$set(Mw);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),OM.$set(k3e);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),QM.$set(S3e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),UM.$set(Ew);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),_E.$set(R3e);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),bE.$set(P3e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),xE.$set(Cw);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),kE.$set(B3e);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),aC.$set(I3e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),sC.$set(ww);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),CC.$set(N3e);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),AC.$set(q3e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),xC.$set(Aw);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),kC.$set(j3e);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),RC.$set(D3e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),BC.$set(yw);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),r5.$set(G3e);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),a5.$set(O3e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),w5.$set(Lw);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),y5.$set(V3e);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),x5.$set(X3e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),k5.$set(xw);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),R5.$set(z3e);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),B5.$set(W3e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),i3.$set($w);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),c3.$set(Q3e);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),T3.$set(H3e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),E3.$set(kw);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),I3.$set(U3e);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),q3.$set(J3e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),U3.$set(Sw);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),Y3.$set(Y3e);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),l0.$set(K3e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),d0.$set(Rw);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),F0.$set(Z3e);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),M0.$set(e0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),R0.$set(Pw);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),B0.$set(o0e);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),X0.$set(r0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),W0.$set(Bw);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),ow.$set(t0e);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),tw.$set(a0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),nw.$set(Iw);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),lw.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),cw.$set(s0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),mw.$set(Nw);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),hw.$set(l0e)},i(f){NDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(Ff.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(OA.$$.fragment,f),E(Cg.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(HA.$$.fragment,f),E(sh.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ey.$$.fragment,f),E(qh.$$.fragment,f),E(jh.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(sy.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(dp.$$.fragment,f),E(my.$$.fragment,f),E(nu.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(lu.$$.fragment,f),E(uy.$$.fragment,f),E(Ku.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(e4.$$.fragment,f),E(My.$$.fragment,f),E(D4.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(O4.$$.fragment,f),E(yy.$$.fragment,f),E(w1.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(y1.$$.fragment,f),E(Sy.$$.fragment,f),E(z1.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Q1.$$.fragment,f),E(Ny.$$.fragment,f),E(O7.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(X7.$$.fragment,f),E(Oy.$$.fragment,f),E(Tb.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(Eb.$$.fragment,f),E(Qy.$$.fragment,f),E($b.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(Sb.$$.fragment,f),E(Ky.$$.fragment,f),E(h2.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(_2.$$.fragment,f),E(tL.$$.fragment,f),E(av.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(sv.$$.fragment,f),E(iL.$$.fragment,f),E(dv.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(fv.$$.fragment,f),E(gL.$$.fragment,f),E(wv.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(yv.$$.fragment,f),E(bL.$$.fragment,f),E($v.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(Sv.$$.fragment,f),E(EL.$$.fragment,f),E(Vv.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(zv.$$.fragment,f),E(LL.$$.fragment,f),E(Kv.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(eF.$$.fragment,f),E(RL.$$.fragment,f),E(fF.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(gF.$$.fragment,f),E(qL.$$.fragment,f),E(uF.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(vF.$$.fragment,f),E(XL.$$.fragment,f),E(AF.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(LF.$$.fragment,f),E(UL.$$.fragment,f),E(RF.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(BF.$$.fragment,f),E(e8.$$.fragment,f),E(jF.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(GF.$$.fragment,f),E(s8.$$.fragment,f),E(XF.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(WF.$$.fragment,f),E(f8.$$.fragment,f),E(KF.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(eT.$$.fragment,f),E(_8.$$.fragment,f),E(tT.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(nT.$$.fragment,f),E(T8.$$.fragment,f),E(KT.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(eM.$$.fragment,f),E(A8.$$.fragment,f),E(CM.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(AM.$$.fragment,f),E(k8.$$.fragment,f),E(DM.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(OM.$$.fragment,f),E(I8.$$.fragment,f),E(QM.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(UM.$$.fragment,f),E(G8.$$.fragment,f),E(_E.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(bE.$$.fragment,f),E(W8.$$.fragment,f),E(xE.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(kE.$$.fragment,f),E(Y8.$$.fragment,f),E(aC.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(sC.$$.fragment,f),E(r9.$$.fragment,f),E(CC.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(AC.$$.fragment,f),E(l9.$$.fragment,f),E(xC.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(kC.$$.fragment,f),E(g9.$$.fragment,f),E(RC.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(BC.$$.fragment,f),E(b9.$$.fragment,f),E(r5.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(a5.$$.fragment,f),E(E9.$$.fragment,f),E(w5.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(y9.$$.fragment,f),E(y5.$$.fragment,f),E(L9.$$.fragment,f),E(x5.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(k5.$$.fragment,f),E(R9.$$.fragment,f),E(R5.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(B5.$$.fragment,f),E(q9.$$.fragment,f),E(i3.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(c3.$$.fragment,f),E(V9.$$.fragment,f),E(T3.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(E3.$$.fragment,f),E(H9.$$.fragment,f),E(I3.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(q3.$$.fragment,f),E(Z9.$$.fragment,f),E(U3.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(Y3.$$.fragment,f),E(ax.$$.fragment,f),E(l0.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(d0.$$.fragment,f),E(dx.$$.fragment,f),E(F0.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(M0.$$.fragment,f),E(hx.$$.fragment,f),E(R0.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(B0.$$.fragment,f),E(vx.$$.fragment,f),E(X0.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(W0.$$.fragment,f),E(Cx.$$.fragment,f),E(ow.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(tw.$$.fragment,f),E(xx.$$.fragment,f),E(nw.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(lw.$$.fragment,f),E(Px.$$.fragment,f),E(cw.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(mw.$$.fragment,f),E(Dx.$$.fragment,f),E(hw.$$.fragment,f),NDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(Ff.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(OA.$$.fragment,f),C(Cg.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(HA.$$.fragment,f),C(sh.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ey.$$.fragment,f),C(qh.$$.fragment,f),C(jh.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(sy.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(dp.$$.fragment,f),C(my.$$.fragment,f),C(nu.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(lu.$$.fragment,f),C(uy.$$.fragment,f),C(Ku.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(e4.$$.fragment,f),C(My.$$.fragment,f),C(D4.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(O4.$$.fragment,f),C(yy.$$.fragment,f),C(w1.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(y1.$$.fragment,f),C(Sy.$$.fragment,f),C(z1.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Q1.$$.fragment,f),C(Ny.$$.fragment,f),C(O7.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(X7.$$.fragment,f),C(Oy.$$.fragment,f),C(Tb.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(Eb.$$.fragment,f),C(Qy.$$.fragment,f),C($b.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(Sb.$$.fragment,f),C(Ky.$$.fragment,f),C(h2.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(_2.$$.fragment,f),C(tL.$$.fragment,f),C(av.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(sv.$$.fragment,f),C(iL.$$.fragment,f),C(dv.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(fv.$$.fragment,f),C(gL.$$.fragment,f),C(wv.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(yv.$$.fragment,f),C(bL.$$.fragment,f),C($v.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(Sv.$$.fragment,f),C(EL.$$.fragment,f),C(Vv.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(zv.$$.fragment,f),C(LL.$$.fragment,f),C(Kv.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(eF.$$.fragment,f),C(RL.$$.fragment,f),C(fF.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(gF.$$.fragment,f),C(qL.$$.fragment,f),C(uF.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(vF.$$.fragment,f),C(XL.$$.fragment,f),C(AF.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(LF.$$.fragment,f),C(UL.$$.fragment,f),C(RF.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(BF.$$.fragment,f),C(e8.$$.fragment,f),C(jF.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(GF.$$.fragment,f),C(s8.$$.fragment,f),C(XF.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(WF.$$.fragment,f),C(f8.$$.fragment,f),C(KF.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(eT.$$.fragment,f),C(_8.$$.fragment,f),C(tT.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(nT.$$.fragment,f),C(T8.$$.fragment,f),C(KT.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(eM.$$.fragment,f),C(A8.$$.fragment,f),C(CM.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(AM.$$.fragment,f),C(k8.$$.fragment,f),C(DM.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(OM.$$.fragment,f),C(I8.$$.fragment,f),C(QM.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(UM.$$.fragment,f),C(G8.$$.fragment,f),C(_E.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(bE.$$.fragment,f),C(W8.$$.fragment,f),C(xE.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(kE.$$.fragment,f),C(Y8.$$.fragment,f),C(aC.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(sC.$$.fragment,f),C(r9.$$.fragment,f),C(CC.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(AC.$$.fragment,f),C(l9.$$.fragment,f),C(xC.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(kC.$$.fragment,f),C(g9.$$.fragment,f),C(RC.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(BC.$$.fragment,f),C(b9.$$.fragment,f),C(r5.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(a5.$$.fragment,f),C(E9.$$.fragment,f),C(w5.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(y9.$$.fragment,f),C(y5.$$.fragment,f),C(L9.$$.fragment,f),C(x5.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(k5.$$.fragment,f),C(R9.$$.fragment,f),C(R5.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(B5.$$.fragment,f),C(q9.$$.fragment,f),C(i3.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(c3.$$.fragment,f),C(V9.$$.fragment,f),C(T3.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(E3.$$.fragment,f),C(H9.$$.fragment,f),C(I3.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(q3.$$.fragment,f),C(Z9.$$.fragment,f),C(U3.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(Y3.$$.fragment,f),C(ax.$$.fragment,f),C(l0.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(d0.$$.fragment,f),C(dx.$$.fragment,f),C(F0.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(M0.$$.fragment,f),C(hx.$$.fragment,f),C(R0.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(B0.$$.fragment,f),C(vx.$$.fragment,f),C(X0.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(W0.$$.fragment,f),C(Cx.$$.fragment,f),C(ow.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(tw.$$.fragment,f),C(xx.$$.fragment,f),C(nw.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(lw.$$.fragment,f),C(Px.$$.fragment,f),C(cw.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(mw.$$.fragment,f),C(Dx.$$.fragment,f),C(hw.$$.fragment,f),NDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Pqe),f&&t(bi),w(IA),f&&t(Bqe),f&&t(kn),f&&t(Iqe),w(NA,f),f&&t(Nqe),f&&t(nk),f&&t(qqe),w(Ff,f),f&&t(jqe),f&&t(vi),w(qA),f&&t(Dqe),f&&t(Co),w(jA),w(OA),w(Cg),w(VA),f&&t(Gqe),f&&t(Ti),w(XA),f&&t(Oqe),f&&t(wo),w(zA),w(HA),w(sh),w(UA),f&&t(Vqe),f&&t(Mi),w(JA),f&&t(Xqe),f&&t(Ao),w(YA),w(ey),w(qh),w(jh),w(oy),f&&t(zqe),f&&t(Ei),w(ry),f&&t(Wqe),f&&t(yo),w(ty),w(sy),w(np),w(sp),w(ly),f&&t(Qqe),f&&t(wi),w(iy),f&&t(Hqe),f&&t(Lo),w(dy),w(fy),w(dp),w(my),w(nu),f&&t(Uqe),f&&t(Li),w(gy),f&&t(Jqe),f&&t(xo),w(hy),w(_y),w(lu),w(uy),w(Ku),f&&t(Yqe),f&&t(ki),w(by),f&&t(Kqe),f&&t($o),w(vy),w(Ty),w(e4),w(My),w(D4),f&&t(Zqe),f&&t(Pi),w(Ey),f&&t(eje),f&&t(ko),w(Cy),w(Ay),w(O4),w(yy),w(w1),f&&t(oje),f&&t(Ni),w(Ly),f&&t(rje),f&&t(So),w(xy),w(ky),w(y1),w(Sy),w(z1),f&&t(tje),f&&t(Di),w(Ry),f&&t(aje),f&&t(Ro),w(Py),w(Iy),w(Q1),w(Ny),w(O7),f&&t(nje),f&&t(Vi),w(qy),f&&t(sje),f&&t(Po),w(jy),w(Gy),w(X7),w(Oy),w(Tb),f&&t(lje),f&&t(Wi),w(Vy),f&&t(ije),f&&t(Bo),w(Xy),w(Wy),w(Eb),w(Qy),w($b),f&&t(dje),f&&t(Ui),w(Hy),f&&t(cje),f&&t(Io),w(Uy),w(Yy),w(Sb),w(Ky),w(h2),f&&t(fje),f&&t(Ki),w(Zy),f&&t(mje),f&&t(No),w(eL),w(rL),w(_2),w(tL),w(av),f&&t(gje),f&&t(od),w(aL),f&&t(hje),f&&t(qo),w(nL),w(lL),w(sv),w(iL),w(dv),f&&t(pje),f&&t(ad),w(dL),f&&t(_je),f&&t(jo),w(cL),w(mL),w(fv),w(gL),w(wv),f&&t(uje),f&&t(ld),w(hL),f&&t(bje),f&&t(Do),w(pL),w(uL),w(yv),w(bL),w($v),f&&t(vje),f&&t(cd),w(vL),f&&t(Fje),f&&t(Go),w(FL),w(ML),w(Sv),w(EL),w(Vv),f&&t(Tje),f&&t(gd),w(CL),f&&t(Mje),f&&t(Oo),w(wL),w(yL),w(zv),w(LL),w(Kv),f&&t(Eje),f&&t(_d),w(xL),f&&t(Cje),f&&t(Vo),w($L),w(SL),w(eF),w(RL),w(fF),f&&t(wje),f&&t(vd),w(PL),f&&t(Aje),f&&t(Xo),w(BL),w(NL),w(gF),w(qL),w(uF),f&&t(yje),f&&t(Md),w(DL),f&&t(Lje),f&&t(zo),w(GL),w(VL),w(vF),w(XL),w(AF),f&&t(xje),f&&t(wd),w(zL),f&&t($je),f&&t(Wo),w(WL),w(HL),w(LF),w(UL),w(RF),f&&t(kje),f&&t(xd),w(JL),f&&t(Sje),f&&t(Qo),w(YL),w(ZL),w(BF),w(e8),w(jF),f&&t(Rje),f&&t(Sd),w(r8),f&&t(Pje),f&&t(Ho),w(t8),w(n8),w(GF),w(s8),w(XF),f&&t(Bje),f&&t(Bd),w(l8),f&&t(Ije),f&&t(Uo),w(i8),w(c8),w(WF),w(f8),w(KF),f&&t(Nje),f&&t(qd),w(m8),f&&t(qje),f&&t(Jo),w(g8),w(p8),w(eT),w(_8),w(tT),f&&t(jje),f&&t(Gd),w(u8),f&&t(Dje),f&&t(Yo),w(b8),w(F8),w(nT),w(T8),w(KT),f&&t(Gje),f&&t(Xd),w(M8),f&&t(Oje),f&&t(Ko),w(E8),w(w8),w(eM),w(A8),w(CM),f&&t(Vje),f&&t(Qd),w(y8),f&&t(Xje),f&&t(Zo),w(L8),w($8),w(AM),w(k8),w(DM),f&&t(zje),f&&t(Jd),w(S8),f&&t(Wje),f&&t(er),w(R8),w(B8),w(OM),w(I8),w(QM),f&&t(Qje),f&&t(Zd),w(N8),f&&t(Hje),f&&t(or),w(q8),w(D8),w(UM),w(G8),w(_E),f&&t(Uje),f&&t(rc),w(O8),f&&t(Jje),f&&t(rr),w(V8),w(z8),w(bE),w(W8),w(xE),f&&t(Yje),f&&t(nc),w(Q8),f&&t(Kje),f&&t(tr),w(H8),w(J8),w(kE),w(Y8),w(aC),f&&t(Zje),f&&t(ic),w(K8),f&&t(eDe),f&&t(ar),w(Z8),w(o9),w(sC),w(r9),w(CC),f&&t(oDe),f&&t(fc),w(t9),f&&t(rDe),f&&t(nr),w(a9),w(s9),w(AC),w(l9),w(xC),f&&t(tDe),f&&t(hc),w(d9),f&&t(aDe),f&&t(sr),w(c9),w(m9),w(kC),w(g9),w(RC),f&&t(nDe),f&&t(uc),w(h9),f&&t(sDe),f&&t(lr),w(p9),w(u9),w(BC),w(b9),w(r5),f&&t(lDe),f&&t(Fc),w(v9),f&&t(iDe),f&&t(ir),w(F9),w(M9),w(a5),w(E9),w(w5),f&&t(dDe),f&&t(Ec),w(C9),f&&t(cDe),f&&t(dr),w(w9),w(y9),w(y5),w(L9),w(x5),f&&t(fDe),f&&t(Ac),w(x9),f&&t(mDe),f&&t(cr),w($9),w(S9),w(k5),w(R9),w(R5),f&&t(gDe),f&&t(xc),w(P9),f&&t(hDe),f&&t(fr),w(B9),w(N9),w(B5),w(q9),w(i3),f&&t(pDe),f&&t(Sc),w(j9),f&&t(_De),f&&t(mr),w(D9),w(O9),w(c3),w(V9),w(T3),f&&t(uDe),f&&t(Bc),w(X9),f&&t(bDe),f&&t(gr),w(z9),w(Q9),w(E3),w(H9),w(I3),f&&t(vDe),f&&t(qc),w(U9),f&&t(FDe),f&&t(hr),w(J9),w(K9),w(q3),w(Z9),w(U3),f&&t(TDe),f&&t(Gc),w(ex),f&&t(MDe),f&&t(pr),w(ox),w(tx),w(Y3),w(ax),w(l0),f&&t(EDe),f&&t(Xc),w(nx),f&&t(CDe),f&&t(_r),w(sx),w(ix),w(d0),w(dx),w(F0),f&&t(wDe),f&&t(Qc),w(cx),f&&t(ADe),f&&t(ur),w(fx),w(gx),w(M0),w(hx),w(R0),f&&t(yDe),f&&t(Jc),w(px),f&&t(LDe),f&&t(br),w(_x),w(bx),w(B0),w(vx),w(X0),f&&t(xDe),f&&t(Zc),w(Fx),f&&t($De),f&&t(vr),w(Tx),w(Ex),w(W0),w(Cx),w(ow),f&&t(kDe),f&&t(rf),w(wx),f&&t(SDe),f&&t(Fr),w(Ax),w(Lx),w(tw),w(xx),w(nw),f&&t(RDe),f&&t(nf),w($x),f&&t(PDe),f&&t(Tr),w(kx),w(Rx),w(lw),w(Px),w(cw),f&&t(BDe),f&&t(df),w(Ix),f&&t(IDe),f&&t(Mr),w(Nx),w(jx),w(mw),w(Dx),w(hw)}}}const ePt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function oPt(L){return oSt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class iPt extends Ykt{constructor(g){super();Kkt(this,g,oPt,ZRt,Zkt,{})}}export{iPt as default,ePt as metadata};
